
F767_webserver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023010  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007ffc  08023210  08023210  00033210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b20c  0802b20c  000407b4  2**0
                  CONTENTS
  4 .ARM          00000008  0802b20c  0802b20c  0003b20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802b214  0802b214  000407b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802b214  0802b214  0003b214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802b218  0802b218  0003b218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007b4  20000000  0802b21c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001b8f4  200007b4  0802b9d0  000407b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001c0a8  0802b9d0  0004c0a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000407b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006c833  00000000  00000000  000407e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000c408  00000000  00000000  000ad015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000030a8  00000000  00000000  000b9420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002eb0  00000000  00000000  000bc4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040bd6  00000000  00000000  000bf378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004f551  00000000  00000000  000fff4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012bf36  00000000  00000000  0014f49f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0027b3d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d6fc  00000000  00000000  0027b428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200007b4 	.word	0x200007b4
 800021c:	00000000 	.word	0x00000000
 8000220:	080231f8 	.word	0x080231f8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200007b8 	.word	0x200007b8
 800023c:	080231f8 	.word	0x080231f8

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f7ff fe1f 	bl	8000254 <strlen>
 8000616:	4603      	mov	r3, r0
 8000618:	b29a      	uxth	r2, r3
 800061a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800061e:	6879      	ldr	r1, [r7, #4]
 8000620:	4803      	ldr	r0, [pc, #12]	; (8000630 <Send_Uart+0x28>)
 8000622:	f007 fde5 	bl	80081f0 <HAL_UART_Transmit>
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	200097cc 	.word	0x200097cc

08000634 <Mount_USB>:



void Mount_USB (void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000638:	2201      	movs	r2, #1
 800063a:	490a      	ldr	r1, [pc, #40]	; (8000664 <Mount_USB+0x30>)
 800063c:	480a      	ldr	r0, [pc, #40]	; (8000668 <Mount_USB+0x34>)
 800063e:	f00f f9cf 	bl	800f9e0 <f_mount>
 8000642:	4603      	mov	r3, r0
 8000644:	461a      	mov	r2, r3
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <Mount_USB+0x38>)
 8000648:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting USB ...\n\n");
 800064a:	4b08      	ldr	r3, [pc, #32]	; (800066c <Mount_USB+0x38>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d003      	beq.n	800065a <Mount_USB+0x26>
 8000652:	4807      	ldr	r0, [pc, #28]	; (8000670 <Mount_USB+0x3c>)
 8000654:	f7ff ffd8 	bl	8000608 <Send_Uart>
	else Send_Uart("USB mounted successfully...\n");
}
 8000658:	e002      	b.n	8000660 <Mount_USB+0x2c>
	else Send_Uart("USB mounted successfully...\n");
 800065a:	4806      	ldr	r0, [pc, #24]	; (8000674 <Mount_USB+0x40>)
 800065c:	f7ff ffd4 	bl	8000608 <Send_Uart>
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	2000becc 	.word	0x2000becc
 8000668:	2000cf00 	.word	0x2000cf00
 800066c:	20005438 	.word	0x20005438
 8000670:	08023210 	.word	0x08023210
 8000674:	08023230 	.word	0x08023230

08000678 <Unmount_USB>:

void Unmount_USB (void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, USBHPath, 1);
 800067c:	2201      	movs	r2, #1
 800067e:	490a      	ldr	r1, [pc, #40]	; (80006a8 <Unmount_USB+0x30>)
 8000680:	2000      	movs	r0, #0
 8000682:	f00f f9ad 	bl	800f9e0 <f_mount>
 8000686:	4603      	mov	r3, r0
 8000688:	461a      	mov	r2, r3
 800068a:	4b08      	ldr	r3, [pc, #32]	; (80006ac <Unmount_USB+0x34>)
 800068c:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("USB UNMOUNTED successfully...\n\n\n");
 800068e:	4b07      	ldr	r3, [pc, #28]	; (80006ac <Unmount_USB+0x34>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d103      	bne.n	800069e <Unmount_USB+0x26>
 8000696:	4806      	ldr	r0, [pc, #24]	; (80006b0 <Unmount_USB+0x38>)
 8000698:	f7ff ffb6 	bl	8000608 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
}
 800069c:	e002      	b.n	80006a4 <Unmount_USB+0x2c>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <Unmount_USB+0x3c>)
 80006a0:	f7ff ffb2 	bl	8000608 <Send_Uart>
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	2000becc 	.word	0x2000becc
 80006ac:	20005438 	.word	0x20005438
 80006b0:	08023250 	.word	0x08023250
 80006b4:	08023274 	.word	0x08023274

080006b8 <Scan_USB>:

/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_USB (char* pat)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b092      	sub	sp, #72	; 0x48
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;
    char *path = malloc(20*sizeof (char));
 80006c0:	2014      	movs	r0, #20
 80006c2:	f020 fe37 	bl	8021334 <malloc>
 80006c6:	4603      	mov	r3, r0
 80006c8:	647b      	str	r3, [r7, #68]	; 0x44
    sprintf (path, "%s",pat);
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	4944      	ldr	r1, [pc, #272]	; (80007e0 <Scan_USB+0x128>)
 80006ce:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80006d0:	f021 f8ac 	bl	802182c <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80006da:	4618      	mov	r0, r3
 80006dc:	f00f fe32 	bl	8010344 <f_opendir>
 80006e0:	4603      	mov	r3, r0
 80006e2:	461a      	mov	r2, r3
 80006e4:	4b3f      	ldr	r3, [pc, #252]	; (80007e4 <Scan_USB+0x12c>)
 80006e6:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80006e8:	4b3e      	ldr	r3, [pc, #248]	; (80007e4 <Scan_USB+0x12c>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d16e      	bne.n	80007ce <Scan_USB+0x116>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 80006f0:	f107 0308 	add.w	r3, r7, #8
 80006f4:	493c      	ldr	r1, [pc, #240]	; (80007e8 <Scan_USB+0x130>)
 80006f6:	4618      	mov	r0, r3
 80006f8:	f00f fec8 	bl	801048c <f_readdir>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461a      	mov	r2, r3
 8000700:	4b38      	ldr	r3, [pc, #224]	; (80007e4 <Scan_USB+0x12c>)
 8000702:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || USBHfno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000704:	4b37      	ldr	r3, [pc, #220]	; (80007e4 <Scan_USB+0x12c>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d15b      	bne.n	80007c4 <Scan_USB+0x10c>
 800070c:	4b36      	ldr	r3, [pc, #216]	; (80007e8 <Scan_USB+0x130>)
 800070e:	7a5b      	ldrb	r3, [r3, #9]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d057      	beq.n	80007c4 <Scan_USB+0x10c>
            if (USBHfno.fattrib & AM_DIR)     /* It is a directory */
 8000714:	4b34      	ldr	r3, [pc, #208]	; (80007e8 <Scan_USB+0x130>)
 8000716:	7a1b      	ldrb	r3, [r3, #8]
 8000718:	f003 0310 	and.w	r3, r3, #16
 800071c:	2b00      	cmp	r3, #0
 800071e:	d03a      	beq.n	8000796 <Scan_USB+0xde>
            {
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8000720:	4932      	ldr	r1, [pc, #200]	; (80007ec <Scan_USB+0x134>)
 8000722:	4833      	ldr	r0, [pc, #204]	; (80007f0 <Scan_USB+0x138>)
 8000724:	f7ff fd8c 	bl	8000240 <strcmp>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d045      	beq.n	80007ba <Scan_USB+0x102>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 800072e:	492f      	ldr	r1, [pc, #188]	; (80007ec <Scan_USB+0x134>)
 8000730:	4830      	ldr	r0, [pc, #192]	; (80007f4 <Scan_USB+0x13c>)
 8000732:	f7ff fd85 	bl	8000240 <strcmp>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d040      	beq.n	80007be <Scan_USB+0x106>
            	char *buf = malloc(30*sizeof(char));
 800073c:	201e      	movs	r0, #30
 800073e:	f020 fdf9 	bl	8021334 <malloc>
 8000742:	4603      	mov	r3, r0
 8000744:	63fb      	str	r3, [r7, #60]	; 0x3c
            	sprintf (buf, "Dir: %s\r\n", USBHfno.fname);
 8000746:	4a29      	ldr	r2, [pc, #164]	; (80007ec <Scan_USB+0x134>)
 8000748:	492b      	ldr	r1, [pc, #172]	; (80007f8 <Scan_USB+0x140>)
 800074a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800074c:	f021 f86e 	bl	802182c <siprintf>
            	Send_Uart(buf);
 8000750:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000752:	f7ff ff59 	bl	8000608 <Send_Uart>
            	free(buf);
 8000756:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000758:	f020 fdf4 	bl	8021344 <free>
                i = strlen(path);
 800075c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800075e:	f7ff fd79 	bl	8000254 <strlen>
 8000762:	63b8      	str	r0, [r7, #56]	; 0x38
                sprintf(&path[i], "/%s", USBHfno.fname);
 8000764:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000768:	4413      	add	r3, r2
 800076a:	4a20      	ldr	r2, [pc, #128]	; (80007ec <Scan_USB+0x134>)
 800076c:	4923      	ldr	r1, [pc, #140]	; (80007fc <Scan_USB+0x144>)
 800076e:	4618      	mov	r0, r3
 8000770:	f021 f85c 	bl	802182c <siprintf>
                fresult = Scan_USB(path);                     /* Enter the directory */
 8000774:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000776:	f7ff ff9f 	bl	80006b8 <Scan_USB>
 800077a:	4603      	mov	r3, r0
 800077c:	461a      	mov	r2, r3
 800077e:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <Scan_USB+0x12c>)
 8000780:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 8000782:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <Scan_USB+0x12c>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d11b      	bne.n	80007c2 <Scan_USB+0x10a>
                path[i] = 0;
 800078a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800078c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800078e:	4413      	add	r3, r2
 8000790:	2200      	movs	r2, #0
 8000792:	701a      	strb	r2, [r3, #0]
 8000794:	e7ac      	b.n	80006f0 <Scan_USB+0x38>
            }
            else
            {   /* It is a file. */
           	   char *buf = malloc(30*sizeof(char));
 8000796:	201e      	movs	r0, #30
 8000798:	f020 fdcc 	bl	8021334 <malloc>
 800079c:	4603      	mov	r3, r0
 800079e:	643b      	str	r3, [r7, #64]	; 0x40
               sprintf(buf,"File: %s/%s\n", path, USBHfno.fname);
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <Scan_USB+0x134>)
 80007a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80007a4:	4916      	ldr	r1, [pc, #88]	; (8000800 <Scan_USB+0x148>)
 80007a6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80007a8:	f021 f840 	bl	802182c <siprintf>
               Send_Uart(buf);
 80007ac:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80007ae:	f7ff ff2b 	bl	8000608 <Send_Uart>
               free(buf);
 80007b2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80007b4:	f020 fdc6 	bl	8021344 <free>
 80007b8:	e79a      	b.n	80006f0 <Scan_USB+0x38>
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 80007ba:	bf00      	nop
 80007bc:	e798      	b.n	80006f0 <Scan_USB+0x38>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 80007be:	bf00      	nop
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 80007c0:	e796      	b.n	80006f0 <Scan_USB+0x38>
                if (fresult != FR_OK) break;
 80007c2:	bf00      	nop
            }
        }
        f_closedir(&dir);
 80007c4:	f107 0308 	add.w	r3, r7, #8
 80007c8:	4618      	mov	r0, r3
 80007ca:	f00f fe34 	bl	8010436 <f_closedir>
    }
    free(path);
 80007ce:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80007d0:	f020 fdb8 	bl	8021344 <free>
    return fresult;
 80007d4:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <Scan_USB+0x12c>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	3748      	adds	r7, #72	; 0x48
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	08023294 	.word	0x08023294
 80007e4:	20005438 	.word	0x20005438
 80007e8:	2000543c 	.word	0x2000543c
 80007ec:	20005445 	.word	0x20005445
 80007f0:	08023298 	.word	0x08023298
 80007f4:	080232a4 	.word	0x080232a4
 80007f8:	080232c0 	.word	0x080232c0
 80007fc:	080232cc 	.word	0x080232cc
 8000800:	080232d0 	.word	0x080232d0

08000804 <Write_File>:




FRESULT Write_File (char *name, char *data)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 800080e:	4955      	ldr	r1, [pc, #340]	; (8000964 <Write_File+0x160>)
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f00f fe7e 	bl	8010512 <f_stat>
 8000816:	4603      	mov	r3, r0
 8000818:	461a      	mov	r2, r3
 800081a:	4b53      	ldr	r3, [pc, #332]	; (8000968 <Write_File+0x164>)
 800081c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800081e:	4b52      	ldr	r3, [pc, #328]	; (8000968 <Write_File+0x164>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d012      	beq.n	800084c <Write_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 8000826:	2064      	movs	r0, #100	; 0x64
 8000828:	f020 fd84 	bl	8021334 <malloc>
 800082c:	4603      	mov	r3, r0
 800082e:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	494e      	ldr	r1, [pc, #312]	; (800096c <Write_File+0x168>)
 8000834:	68b8      	ldr	r0, [r7, #8]
 8000836:	f020 fff9 	bl	802182c <siprintf>
		Send_Uart (buf);
 800083a:	68b8      	ldr	r0, [r7, #8]
 800083c:	f7ff fee4 	bl	8000608 <Send_Uart>
	    free(buf);
 8000840:	68b8      	ldr	r0, [r7, #8]
 8000842:	f020 fd7f 	bl	8021344 <free>
	    return fresult;
 8000846:	4b48      	ldr	r3, [pc, #288]	; (8000968 <Write_File+0x164>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	e087      	b.n	800095c <Write_File+0x158>
	}

	else
	{
	    /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_EXISTING | FA_WRITE);
 800084c:	2202      	movs	r2, #2
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	4847      	ldr	r0, [pc, #284]	; (8000970 <Write_File+0x16c>)
 8000852:	f00f f929 	bl	800faa8 <f_open>
 8000856:	4603      	mov	r3, r0
 8000858:	461a      	mov	r2, r3
 800085a:	4b43      	ldr	r3, [pc, #268]	; (8000968 <Write_File+0x164>)
 800085c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800085e:	4b42      	ldr	r3, [pc, #264]	; (8000968 <Write_File+0x164>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d015      	beq.n	8000892 <Write_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000866:	2064      	movs	r0, #100	; 0x64
 8000868:	f020 fd64 	bl	8021334 <malloc>
 800086c:	4603      	mov	r3, r0
 800086e:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000870:	4b3d      	ldr	r3, [pc, #244]	; (8000968 <Write_File+0x164>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	461a      	mov	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	493e      	ldr	r1, [pc, #248]	; (8000974 <Write_File+0x170>)
 800087a:	68f8      	ldr	r0, [r7, #12]
 800087c:	f020 ffd6 	bl	802182c <siprintf>
	    	Send_Uart(buf);
 8000880:	68f8      	ldr	r0, [r7, #12]
 8000882:	f7ff fec1 	bl	8000608 <Send_Uart>
	        free(buf);
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	f020 fd5c 	bl	8021344 <free>
	        return fresult;
 800088c:	4b36      	ldr	r3, [pc, #216]	; (8000968 <Write_File+0x164>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	e064      	b.n	800095c <Write_File+0x158>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000892:	2064      	movs	r0, #100	; 0x64
 8000894:	f020 fd4e 	bl	8021334 <malloc>
 8000898:	4603      	mov	r3, r0
 800089a:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "Opening file-->  *%s*  To WRITE data in it\n", name);
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	4936      	ldr	r1, [pc, #216]	; (8000978 <Write_File+0x174>)
 80008a0:	69f8      	ldr	r0, [r7, #28]
 80008a2:	f020 ffc3 	bl	802182c <siprintf>
	    	Send_Uart(buf);
 80008a6:	69f8      	ldr	r0, [r7, #28]
 80008a8:	f7ff feae 	bl	8000608 <Send_Uart>
	        free(buf);
 80008ac:	69f8      	ldr	r0, [r7, #28]
 80008ae:	f020 fd49 	bl	8021344 <free>

	    	fresult = f_write(&USBHFile, data, strlen(data), &bw);
 80008b2:	6838      	ldr	r0, [r7, #0]
 80008b4:	f7ff fcce 	bl	8000254 <strlen>
 80008b8:	4602      	mov	r2, r0
 80008ba:	4b30      	ldr	r3, [pc, #192]	; (800097c <Write_File+0x178>)
 80008bc:	6839      	ldr	r1, [r7, #0]
 80008be:	482c      	ldr	r0, [pc, #176]	; (8000970 <Write_File+0x16c>)
 80008c0:	f00f fac5 	bl	800fe4e <f_write>
 80008c4:	4603      	mov	r3, r0
 80008c6:	461a      	mov	r2, r3
 80008c8:	4b27      	ldr	r3, [pc, #156]	; (8000968 <Write_File+0x164>)
 80008ca:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 80008cc:	4b26      	ldr	r3, [pc, #152]	; (8000968 <Write_File+0x164>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d012      	beq.n	80008fa <Write_File+0xf6>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 80008d4:	2064      	movs	r0, #100	; 0x64
 80008d6:	f020 fd2d 	bl	8021334 <malloc>
 80008da:	4603      	mov	r3, r0
 80008dc:	61bb      	str	r3, [r7, #24]
	    		sprintf (buf, "ERROR!!! No. %d while writing to the FILE *%s*\n\n", fresult, name);
 80008de:	4b22      	ldr	r3, [pc, #136]	; (8000968 <Write_File+0x164>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	461a      	mov	r2, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4926      	ldr	r1, [pc, #152]	; (8000980 <Write_File+0x17c>)
 80008e8:	69b8      	ldr	r0, [r7, #24]
 80008ea:	f020 ff9f 	bl	802182c <siprintf>
	    		Send_Uart(buf);
 80008ee:	69b8      	ldr	r0, [r7, #24]
 80008f0:	f7ff fe8a 	bl	8000608 <Send_Uart>
	    		free(buf);
 80008f4:	69b8      	ldr	r0, [r7, #24]
 80008f6:	f020 fd25 	bl	8021344 <free>
	    	}

	    	/* Close file */
	    	fresult = f_close(&USBHFile);
 80008fa:	481d      	ldr	r0, [pc, #116]	; (8000970 <Write_File+0x16c>)
 80008fc:	f00f fcf3 	bl	80102e6 <f_close>
 8000900:	4603      	mov	r3, r0
 8000902:	461a      	mov	r2, r3
 8000904:	4b18      	ldr	r3, [pc, #96]	; (8000968 <Write_File+0x164>)
 8000906:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000908:	4b17      	ldr	r3, [pc, #92]	; (8000968 <Write_File+0x164>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d013      	beq.n	8000938 <Write_File+0x134>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000910:	2064      	movs	r0, #100	; 0x64
 8000912:	f020 fd0f 	bl	8021334 <malloc>
 8000916:	4603      	mov	r3, r0
 8000918:	613b      	str	r3, [r7, #16]
	    		sprintf (buf, "ERROR!!! No. %d in closing file *%s* after writing it\n\n", fresult, name);
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <Write_File+0x164>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	461a      	mov	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4918      	ldr	r1, [pc, #96]	; (8000984 <Write_File+0x180>)
 8000924:	6938      	ldr	r0, [r7, #16]
 8000926:	f020 ff81 	bl	802182c <siprintf>
	    		Send_Uart(buf);
 800092a:	6938      	ldr	r0, [r7, #16]
 800092c:	f7ff fe6c 	bl	8000608 <Send_Uart>
	    		free(buf);
 8000930:	6938      	ldr	r0, [r7, #16]
 8000932:	f020 fd07 	bl	8021344 <free>
 8000936:	e00f      	b.n	8000958 <Write_File+0x154>
	    	}
	    	else
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000938:	2064      	movs	r0, #100	; 0x64
 800093a:	f020 fcfb 	bl	8021334 <malloc>
 800093e:	4603      	mov	r3, r0
 8000940:	617b      	str	r3, [r7, #20]
	    		sprintf (buf, "File *%s* is WRITTEN and CLOSED successfully\n\n", name);
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	4910      	ldr	r1, [pc, #64]	; (8000988 <Write_File+0x184>)
 8000946:	6978      	ldr	r0, [r7, #20]
 8000948:	f020 ff70 	bl	802182c <siprintf>
	    		Send_Uart(buf);
 800094c:	6978      	ldr	r0, [r7, #20]
 800094e:	f7ff fe5b 	bl	8000608 <Send_Uart>
	    		free(buf);
 8000952:	6978      	ldr	r0, [r7, #20]
 8000954:	f020 fcf6 	bl	8021344 <free>
	    	}
	    }
	    return fresult;
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <Write_File+0x164>)
 800095a:	781b      	ldrb	r3, [r3, #0]
	}
}
 800095c:	4618      	mov	r0, r3
 800095e:	3720      	adds	r7, #32
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	2000543c 	.word	0x2000543c
 8000968:	20005438 	.word	0x20005438
 800096c:	080232e4 	.word	0x080232e4
 8000970:	2000bed0 	.word	0x2000bed0
 8000974:	08023304 	.word	0x08023304
 8000978:	0802332c 	.word	0x0802332c
 800097c:	20005434 	.word	0x20005434
 8000980:	08023358 	.word	0x08023358
 8000984:	0802338c 	.word	0x0802338c
 8000988:	080233c4 	.word	0x080233c4

0800098c <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 8000994:	4943      	ldr	r1, [pc, #268]	; (8000aa4 <Create_File+0x118>)
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f00f fdbb 	bl	8010512 <f_stat>
 800099c:	4603      	mov	r3, r0
 800099e:	461a      	mov	r2, r3
 80009a0:	4b41      	ldr	r3, [pc, #260]	; (8000aa8 <Create_File+0x11c>)
 80009a2:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 80009a4:	4b40      	ldr	r3, [pc, #256]	; (8000aa8 <Create_File+0x11c>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d112      	bne.n	80009d2 <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 80009ac:	2064      	movs	r0, #100	; 0x64
 80009ae:	f020 fcc1 	bl	8021334 <malloc>
 80009b2:	4603      	mov	r3, r0
 80009b4:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	493c      	ldr	r1, [pc, #240]	; (8000aac <Create_File+0x120>)
 80009ba:	68f8      	ldr	r0, [r7, #12]
 80009bc:	f020 ff36 	bl	802182c <siprintf>
		Send_Uart(buf);
 80009c0:	68f8      	ldr	r0, [r7, #12]
 80009c2:	f7ff fe21 	bl	8000608 <Send_Uart>
		free(buf);
 80009c6:	68f8      	ldr	r0, [r7, #12]
 80009c8:	f020 fcbc 	bl	8021344 <free>
	    return fresult;
 80009cc:	4b36      	ldr	r3, [pc, #216]	; (8000aa8 <Create_File+0x11c>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	e063      	b.n	8000a9a <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 80009d2:	220b      	movs	r2, #11
 80009d4:	6879      	ldr	r1, [r7, #4]
 80009d6:	4836      	ldr	r0, [pc, #216]	; (8000ab0 <Create_File+0x124>)
 80009d8:	f00f f866 	bl	800faa8 <f_open>
 80009dc:	4603      	mov	r3, r0
 80009de:	461a      	mov	r2, r3
 80009e0:	4b31      	ldr	r3, [pc, #196]	; (8000aa8 <Create_File+0x11c>)
 80009e2:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80009e4:	4b30      	ldr	r3, [pc, #192]	; (8000aa8 <Create_File+0x11c>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d015      	beq.n	8000a18 <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 80009ec:	2064      	movs	r0, #100	; 0x64
 80009ee:	f020 fca1 	bl	8021334 <malloc>
 80009f2:	4603      	mov	r3, r0
 80009f4:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 80009f6:	4b2c      	ldr	r3, [pc, #176]	; (8000aa8 <Create_File+0x11c>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	461a      	mov	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	492d      	ldr	r1, [pc, #180]	; (8000ab4 <Create_File+0x128>)
 8000a00:	6938      	ldr	r0, [r7, #16]
 8000a02:	f020 ff13 	bl	802182c <siprintf>
			Send_Uart(buf);
 8000a06:	6938      	ldr	r0, [r7, #16]
 8000a08:	f7ff fdfe 	bl	8000608 <Send_Uart>
			free(buf);
 8000a0c:	6938      	ldr	r0, [r7, #16]
 8000a0e:	f020 fc99 	bl	8021344 <free>
		    return fresult;
 8000a12:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <Create_File+0x11c>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	e040      	b.n	8000a9a <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000a18:	2064      	movs	r0, #100	; 0x64
 8000a1a:	f020 fc8b 	bl	8021334 <malloc>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	4924      	ldr	r1, [pc, #144]	; (8000ab8 <Create_File+0x12c>)
 8000a26:	69f8      	ldr	r0, [r7, #28]
 8000a28:	f020 ff00 	bl	802182c <siprintf>
			Send_Uart(buf);
 8000a2c:	69f8      	ldr	r0, [r7, #28]
 8000a2e:	f7ff fdeb 	bl	8000608 <Send_Uart>
			free(buf);
 8000a32:	69f8      	ldr	r0, [r7, #28]
 8000a34:	f020 fc86 	bl	8021344 <free>
		}

		fresult = f_close(&USBHFile);
 8000a38:	481d      	ldr	r0, [pc, #116]	; (8000ab0 <Create_File+0x124>)
 8000a3a:	f00f fc54 	bl	80102e6 <f_close>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	461a      	mov	r2, r3
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <Create_File+0x11c>)
 8000a44:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000a46:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <Create_File+0x11c>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d013      	beq.n	8000a76 <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 8000a4e:	2064      	movs	r0, #100	; 0x64
 8000a50:	f020 fc70 	bl	8021334 <malloc>
 8000a54:	4603      	mov	r3, r0
 8000a56:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <Create_File+0x11c>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4916      	ldr	r1, [pc, #88]	; (8000abc <Create_File+0x130>)
 8000a62:	6978      	ldr	r0, [r7, #20]
 8000a64:	f020 fee2 	bl	802182c <siprintf>
			Send_Uart(buf);
 8000a68:	6978      	ldr	r0, [r7, #20]
 8000a6a:	f7ff fdcd 	bl	8000608 <Send_Uart>
			free(buf);
 8000a6e:	6978      	ldr	r0, [r7, #20]
 8000a70:	f020 fc68 	bl	8021344 <free>
 8000a74:	e00f      	b.n	8000a96 <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000a76:	2064      	movs	r0, #100	; 0x64
 8000a78:	f020 fc5c 	bl	8021334 <malloc>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	490f      	ldr	r1, [pc, #60]	; (8000ac0 <Create_File+0x134>)
 8000a84:	69b8      	ldr	r0, [r7, #24]
 8000a86:	f020 fed1 	bl	802182c <siprintf>
			Send_Uart(buf);
 8000a8a:	69b8      	ldr	r0, [r7, #24]
 8000a8c:	f7ff fdbc 	bl	8000608 <Send_Uart>
			free(buf);
 8000a90:	69b8      	ldr	r0, [r7, #24]
 8000a92:	f020 fc57 	bl	8021344 <free>
		}
	}
    return fresult;
 8000a96:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <Create_File+0x11c>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3720      	adds	r7, #32
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2000543c 	.word	0x2000543c
 8000aa8:	20005438 	.word	0x20005438
 8000aac:	080234b8 	.word	0x080234b8
 8000ab0:	2000bed0 	.word	0x2000bed0
 8000ab4:	080234f0 	.word	0x080234f0
 8000ab8:	08023518 	.word	0x08023518
 8000abc:	08023558 	.word	0x08023558
 8000ac0:	08023498 	.word	0x08023498

08000ac4 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 8000ace:	495e      	ldr	r1, [pc, #376]	; (8000c48 <Update_File+0x184>)
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f00f fd1e 	bl	8010512 <f_stat>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b5c      	ldr	r3, [pc, #368]	; (8000c4c <Update_File+0x188>)
 8000adc:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000ade:	4b5b      	ldr	r3, [pc, #364]	; (8000c4c <Update_File+0x188>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d012      	beq.n	8000b0c <Update_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 8000ae6:	2064      	movs	r0, #100	; 0x64
 8000ae8:	f020 fc24 	bl	8021334 <malloc>
 8000aec:	4603      	mov	r3, r0
 8000aee:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	4957      	ldr	r1, [pc, #348]	; (8000c50 <Update_File+0x18c>)
 8000af4:	68f8      	ldr	r0, [r7, #12]
 8000af6:	f020 fe99 	bl	802182c <siprintf>
		Send_Uart (buf);
 8000afa:	68f8      	ldr	r0, [r7, #12]
 8000afc:	f7ff fd84 	bl	8000608 <Send_Uart>
		free(buf);
 8000b00:	68f8      	ldr	r0, [r7, #12]
 8000b02:	f020 fc1f 	bl	8021344 <free>
	    return fresult;
 8000b06:	4b51      	ldr	r3, [pc, #324]	; (8000c4c <Update_File+0x188>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	e098      	b.n	8000c3e <Update_File+0x17a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_APPEND | FA_WRITE);
 8000b0c:	2232      	movs	r2, #50	; 0x32
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	4850      	ldr	r0, [pc, #320]	; (8000c54 <Update_File+0x190>)
 8000b12:	f00e ffc9 	bl	800faa8 <f_open>
 8000b16:	4603      	mov	r3, r0
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b4c      	ldr	r3, [pc, #304]	; (8000c4c <Update_File+0x188>)
 8000b1c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000b1e:	4b4b      	ldr	r3, [pc, #300]	; (8000c4c <Update_File+0x188>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d015      	beq.n	8000b52 <Update_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000b26:	2064      	movs	r0, #100	; 0x64
 8000b28:	f020 fc04 	bl	8021334 <malloc>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000b30:	4b46      	ldr	r3, [pc, #280]	; (8000c4c <Update_File+0x188>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4947      	ldr	r1, [pc, #284]	; (8000c58 <Update_File+0x194>)
 8000b3a:	6938      	ldr	r0, [r7, #16]
 8000b3c:	f020 fe76 	bl	802182c <siprintf>
	    	Send_Uart(buf);
 8000b40:	6938      	ldr	r0, [r7, #16]
 8000b42:	f7ff fd61 	bl	8000608 <Send_Uart>
	        free(buf);
 8000b46:	6938      	ldr	r0, [r7, #16]
 8000b48:	f020 fbfc 	bl	8021344 <free>
	        return fresult;
 8000b4c:	4b3f      	ldr	r3, [pc, #252]	; (8000c4c <Update_File+0x188>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	e075      	b.n	8000c3e <Update_File+0x17a>
	    }

    	char *buf = malloc(100*sizeof(char));
 8000b52:	2064      	movs	r0, #100	; 0x64
 8000b54:	f020 fbee 	bl	8021334 <malloc>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
    	sprintf (buf, "Opening file-->  *%s*  To UPDATE data in it\n", name);
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	493f      	ldr	r1, [pc, #252]	; (8000c5c <Update_File+0x198>)
 8000b60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b62:	f020 fe63 	bl	802182c <siprintf>
    	Send_Uart(buf);
 8000b66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b68:	f7ff fd4e 	bl	8000608 <Send_Uart>
        free(buf);
 8000b6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b6e:	f020 fbe9 	bl	8021344 <free>

	    /* Writing text */
	    fresult = f_write(&USBHFile, data, strlen (data), &bw);
 8000b72:	6838      	ldr	r0, [r7, #0]
 8000b74:	f7ff fb6e 	bl	8000254 <strlen>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	4b39      	ldr	r3, [pc, #228]	; (8000c60 <Update_File+0x19c>)
 8000b7c:	6839      	ldr	r1, [r7, #0]
 8000b7e:	4835      	ldr	r0, [pc, #212]	; (8000c54 <Update_File+0x190>)
 8000b80:	f00f f965 	bl	800fe4e <f_write>
 8000b84:	4603      	mov	r3, r0
 8000b86:	461a      	mov	r2, r3
 8000b88:	4b30      	ldr	r3, [pc, #192]	; (8000c4c <Update_File+0x188>)
 8000b8a:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000b8c:	4b2f      	ldr	r3, [pc, #188]	; (8000c4c <Update_File+0x188>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d013      	beq.n	8000bbc <Update_File+0xf8>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000b94:	2064      	movs	r0, #100	; 0x64
 8000b96:	f020 fbcd 	bl	8021334 <malloc>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8000b9e:	4b2b      	ldr	r3, [pc, #172]	; (8000c4c <Update_File+0x188>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	492f      	ldr	r1, [pc, #188]	; (8000c64 <Update_File+0x1a0>)
 8000ba8:	69f8      	ldr	r0, [r7, #28]
 8000baa:	f020 fe3f 	bl	802182c <siprintf>
	    	Send_Uart(buf);
 8000bae:	69f8      	ldr	r0, [r7, #28]
 8000bb0:	f7ff fd2a 	bl	8000608 <Send_Uart>
	    	free(buf);
 8000bb4:	69f8      	ldr	r0, [r7, #28]
 8000bb6:	f020 fbc5 	bl	8021344 <free>
 8000bba:	e00f      	b.n	8000bdc <Update_File+0x118>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000bbc:	2064      	movs	r0, #100	; 0x64
 8000bbe:	f020 fbb9 	bl	8021334 <malloc>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	623b      	str	r3, [r7, #32]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	4927      	ldr	r1, [pc, #156]	; (8000c68 <Update_File+0x1a4>)
 8000bca:	6a38      	ldr	r0, [r7, #32]
 8000bcc:	f020 fe2e 	bl	802182c <siprintf>
	    	Send_Uart(buf);
 8000bd0:	6a38      	ldr	r0, [r7, #32]
 8000bd2:	f7ff fd19 	bl	8000608 <Send_Uart>
	    	free(buf);
 8000bd6:	6a38      	ldr	r0, [r7, #32]
 8000bd8:	f020 fbb4 	bl	8021344 <free>
	    }

	    /* Close file */
	    fresult = f_close(&USBHFile);
 8000bdc:	481d      	ldr	r0, [pc, #116]	; (8000c54 <Update_File+0x190>)
 8000bde:	f00f fb82 	bl	80102e6 <f_close>
 8000be2:	4603      	mov	r3, r0
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <Update_File+0x188>)
 8000be8:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <Update_File+0x188>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d013      	beq.n	8000c1a <Update_File+0x156>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000bf2:	2064      	movs	r0, #100	; 0x64
 8000bf4:	f020 fb9e 	bl	8021334 <malloc>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <Update_File+0x188>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4919      	ldr	r1, [pc, #100]	; (8000c6c <Update_File+0x1a8>)
 8000c06:	6978      	ldr	r0, [r7, #20]
 8000c08:	f020 fe10 	bl	802182c <siprintf>
	    	Send_Uart(buf);
 8000c0c:	6978      	ldr	r0, [r7, #20]
 8000c0e:	f7ff fcfb 	bl	8000608 <Send_Uart>
	    	free(buf);
 8000c12:	6978      	ldr	r0, [r7, #20]
 8000c14:	f020 fb96 	bl	8021344 <free>
 8000c18:	e00f      	b.n	8000c3a <Update_File+0x176>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000c1a:	2064      	movs	r0, #100	; 0x64
 8000c1c:	f020 fb8a 	bl	8021334 <malloc>
 8000c20:	4603      	mov	r3, r0
 8000c22:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	4912      	ldr	r1, [pc, #72]	; (8000c70 <Update_File+0x1ac>)
 8000c28:	69b8      	ldr	r0, [r7, #24]
 8000c2a:	f020 fdff 	bl	802182c <siprintf>
	    	Send_Uart(buf);
 8000c2e:	69b8      	ldr	r0, [r7, #24]
 8000c30:	f7ff fcea 	bl	8000608 <Send_Uart>
	    	free(buf);
 8000c34:	69b8      	ldr	r0, [r7, #24]
 8000c36:	f020 fb85 	bl	8021344 <free>
	     }
	}
    return fresult;
 8000c3a:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <Update_File+0x188>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3728      	adds	r7, #40	; 0x28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	2000543c 	.word	0x2000543c
 8000c4c:	20005438 	.word	0x20005438
 8000c50:	080232e4 	.word	0x080232e4
 8000c54:	2000bed0 	.word	0x2000bed0
 8000c58:	08023304 	.word	0x08023304
 8000c5c:	0802357c 	.word	0x0802357c
 8000c60:	20005434 	.word	0x20005434
 8000c64:	080235ac 	.word	0x080235ac
 8000c68:	080235d4 	.word	0x080235d4
 8000c6c:	08023470 	.word	0x08023470
 8000c70:	08023498 	.word	0x08023498

08000c74 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f00f fd44 	bl	801070a <f_mkdir>
 8000c82:	4603      	mov	r3, r0
 8000c84:	461a      	mov	r2, r3
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <Create_Dir+0x74>)
 8000c88:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000c8a:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <Create_Dir+0x74>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d110      	bne.n	8000cb4 <Create_Dir+0x40>
    {
    	char *buf = malloc(100*sizeof(char));
 8000c92:	2064      	movs	r0, #100	; 0x64
 8000c94:	f020 fb4e 	bl	8021334 <malloc>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n\n", name);
 8000c9c:	687a      	ldr	r2, [r7, #4]
 8000c9e:	4913      	ldr	r1, [pc, #76]	; (8000cec <Create_Dir+0x78>)
 8000ca0:	68b8      	ldr	r0, [r7, #8]
 8000ca2:	f020 fdc3 	bl	802182c <siprintf>
    	Send_Uart (buf);
 8000ca6:	68b8      	ldr	r0, [r7, #8]
 8000ca8:	f7ff fcae 	bl	8000608 <Send_Uart>
    	free(buf);
 8000cac:	68b8      	ldr	r0, [r7, #8]
 8000cae:	f020 fb49 	bl	8021344 <free>
 8000cb2:	e012      	b.n	8000cda <Create_Dir+0x66>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 8000cb4:	2064      	movs	r0, #100	; 0x64
 8000cb6:	f020 fb3d 	bl	8021334 <malloc>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <Create_Dir+0x74>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	490a      	ldr	r1, [pc, #40]	; (8000cf0 <Create_Dir+0x7c>)
 8000cc8:	68f8      	ldr	r0, [r7, #12]
 8000cca:	f020 fdaf 	bl	802182c <siprintf>
    	Send_Uart(buf);
 8000cce:	68f8      	ldr	r0, [r7, #12]
 8000cd0:	f7ff fc9a 	bl	8000608 <Send_Uart>
    	free(buf);
 8000cd4:	68f8      	ldr	r0, [r7, #12]
 8000cd6:	f020 fb35 	bl	8021344 <free>
    }
    return fresult;
 8000cda:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <Create_Dir+0x74>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20005438 	.word	0x20005438
 8000cec:	08023638 	.word	0x08023638
 8000cf0:	08023660 	.word	0x08023660

08000cf4 <Check_USB_Details>:

void Check_USB_Details (void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 8000cfa:	4a2d      	ldr	r2, [pc, #180]	; (8000db0 <Check_USB_Details+0xbc>)
 8000cfc:	492d      	ldr	r1, [pc, #180]	; (8000db4 <Check_USB_Details+0xc0>)
 8000cfe:	482e      	ldr	r0, [pc, #184]	; (8000db8 <Check_USB_Details+0xc4>)
 8000d00:	f00f fc47 	bl	8010592 <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 8000d04:	4b2a      	ldr	r3, [pc, #168]	; (8000db0 <Check_USB_Details+0xbc>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	69db      	ldr	r3, [r3, #28]
 8000d0a:	3b02      	subs	r3, #2
 8000d0c:	4a28      	ldr	r2, [pc, #160]	; (8000db0 <Check_USB_Details+0xbc>)
 8000d0e:	6812      	ldr	r2, [r2, #0]
 8000d10:	8952      	ldrh	r2, [r2, #10]
 8000d12:	fb02 f303 	mul.w	r3, r2, r3
 8000d16:	ee07 3a90 	vmov	s15, r3
 8000d1a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d1e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000d22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d26:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d2a:	ee17 2a90 	vmov	r2, s15
 8000d2e:	4b23      	ldr	r3, [pc, #140]	; (8000dbc <Check_USB_Details+0xc8>)
 8000d30:	601a      	str	r2, [r3, #0]
    char *buf = malloc(30*sizeof(char));
 8000d32:	201e      	movs	r0, #30
 8000d34:	f020 fafe 	bl	8021334 <malloc>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB  Total Size: \t%lu\n",total);
 8000d3c:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <Check_USB_Details+0xc8>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	491f      	ldr	r1, [pc, #124]	; (8000dc0 <Check_USB_Details+0xcc>)
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f020 fd71 	bl	802182c <siprintf>
    Send_Uart(buf);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff fc5c 	bl	8000608 <Send_Uart>
    free(buf);
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f020 faf7 	bl	8021344 <free>
    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 8000d56:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <Check_USB_Details+0xbc>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	895b      	ldrh	r3, [r3, #10]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <Check_USB_Details+0xc0>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	fb03 f302 	mul.w	r3, r3, r2
 8000d66:	ee07 3a90 	vmov	s15, r3
 8000d6a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d6e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8000d72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d76:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d7a:	ee17 2a90 	vmov	r2, s15
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <Check_USB_Details+0xd0>)
 8000d80:	601a      	str	r2, [r3, #0]
    buf = malloc(30*sizeof(char));
 8000d82:	201e      	movs	r0, #30
 8000d84:	f020 fad6 	bl	8021334 <malloc>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB Free Space: \t%lu\n",free_space);
 8000d8c:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <Check_USB_Details+0xd0>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	490d      	ldr	r1, [pc, #52]	; (8000dc8 <Check_USB_Details+0xd4>)
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f020 fd49 	bl	802182c <siprintf>
    Send_Uart(buf);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff fc34 	bl	8000608 <Send_Uart>
    free(buf);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f020 facf 	bl	8021344 <free>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	2000542c 	.word	0x2000542c
 8000db4:	20005424 	.word	0x20005424
 8000db8:	0802368c 	.word	0x0802368c
 8000dbc:	20005454 	.word	0x20005454
 8000dc0:	08023690 	.word	0x08023690
 8000dc4:	20005430 	.word	0x20005430
 8000dc8:	080236a8 	.word	0x080236a8

08000dcc <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d101      	bne.n	8000de8 <cJSON_strdup+0x1c>
    {
        return NULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	e015      	b.n	8000e14 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff fa33 	bl	8000254 <strlen>
 8000dee:	4603      	mov	r3, r0
 8000df0:	3301      	adds	r3, #1
 8000df2:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	68f8      	ldr	r0, [r7, #12]
 8000dfa:	4798      	blx	r3
 8000dfc:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d101      	bne.n	8000e08 <cJSON_strdup+0x3c>
    {
        return NULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	e005      	b.n	8000e14 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8000e08:	68fa      	ldr	r2, [r7, #12]
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	68b8      	ldr	r0, [r7, #8]
 8000e0e:	f020 faaf 	bl	8021370 <memcpy>

    return copy;
 8000e12:	68bb      	ldr	r3, [r7, #8]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2028      	movs	r0, #40	; 0x28
 8000e2a:	4798      	blx	r3
 8000e2c:	60f8      	str	r0, [r7, #12]
    if (node)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d004      	beq.n	8000e3e <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8000e34:	2228      	movs	r2, #40	; 0x28
 8000e36:	2100      	movs	r1, #0
 8000e38:	68f8      	ldr	r0, [r7, #12]
 8000e3a:	f020 fac1 	bl	80213c0 <memset>
    }

    return node;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b084      	sub	sp, #16
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8000e54:	e037      	b.n	8000ec6 <cJSON_Delete+0x7e>
    {
        next = item->next;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d108      	bne.n	8000e7a <cJSON_Delete+0x32>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d004      	beq.n	8000e7a <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ffe7 	bl	8000e48 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d109      	bne.n	8000e9a <cJSON_Delete+0x52>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	691b      	ldr	r3, [r3, #16]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d005      	beq.n	8000e9a <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <cJSON_Delete+0x90>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	6912      	ldr	r2, [r2, #16]
 8000e96:	4610      	mov	r0, r2
 8000e98:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d109      	bne.n	8000eba <cJSON_Delete+0x72>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6a1b      	ldr	r3, [r3, #32]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d005      	beq.n	8000eba <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8000eae:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <cJSON_Delete+0x90>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	6a12      	ldr	r2, [r2, #32]
 8000eb6:	4610      	mov	r0, r2
 8000eb8:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8000eba:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <cJSON_Delete+0x90>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	4798      	blx	r3
        item = next;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d1c4      	bne.n	8000e56 <cJSON_Delete+0xe>
    }
}
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000000 	.word	0x20000000

08000edc <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8000ee0:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d003      	beq.n	8000f0c <ensure+0x20>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d101      	bne.n	8000f10 <ensure+0x24>
    {
        return NULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	e083      	b.n	8001018 <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d007      	beq.n	8000f28 <ensure+0x3c>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d301      	bcc.n	8000f28 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	e077      	b.n	8001018 <ensure+0x12c>
    }

    if (needed > INT_MAX)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	da01      	bge.n	8000f32 <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e072      	b.n	8001018 <ensure+0x12c>
    }

    needed += p->offset + 1;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689a      	ldr	r2, [r3, #8]
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	4413      	add	r3, r2
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	683a      	ldr	r2, [r7, #0]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d805      	bhi.n	8000f54 <ensure+0x68>
    {
        return p->buffer + p->offset;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	4413      	add	r3, r2
 8000f52:	e061      	b.n	8001018 <ensure+0x12c>
    }

    if (p->noalloc) {
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	691b      	ldr	r3, [r3, #16]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <ensure+0x74>
        return NULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	e05b      	b.n	8001018 <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f66:	d308      	bcc.n	8000f7a <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	db03      	blt.n	8000f76 <ensure+0x8a>
        {
            newsize = INT_MAX;
 8000f6e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	e004      	b.n	8000f80 <ensure+0x94>
        }
        else
        {
            return NULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	e04e      	b.n	8001018 <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a1b      	ldr	r3, [r3, #32]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d018      	beq.n	8000fba <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6a1b      	ldr	r3, [r3, #32]
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	6812      	ldr	r2, [r2, #0]
 8000f90:	68b9      	ldr	r1, [r7, #8]
 8000f92:	4610      	mov	r0, r2
 8000f94:	4798      	blx	r3
 8000f96:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d132      	bne.n	8001004 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	6812      	ldr	r2, [r2, #0]
 8000fa6:	4610      	mov	r0, r2
 8000fa8:	4798      	blx	r3
            p->length = 0;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2200      	movs	r2, #0
 8000fae:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]

            return NULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e02e      	b.n	8001018 <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	68b8      	ldr	r0, [r7, #8]
 8000fc0:	4798      	blx	r3
 8000fc2:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d10d      	bne.n	8000fe6 <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	6812      	ldr	r2, [r2, #0]
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	4798      	blx	r3
            p->length = 0;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]

            return NULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e018      	b.n	8001018 <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6819      	ldr	r1, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	68f8      	ldr	r0, [r7, #12]
 8000ff4:	f020 f9bc 	bl	8021370 <memcpy>
        p->hooks.deallocate(p->buffer);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69db      	ldr	r3, [r3, #28]
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	6812      	ldr	r2, [r2, #0]
 8001000:	4610      	mov	r0, r2
 8001002:	4798      	blx	r3
    }
    p->length = newsize;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	68fa      	ldr	r2, [r7, #12]
 8001016:	4413      	add	r3, r2
}
 8001018:	4618      	mov	r0, r3
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d013      	beq.n	800105a <update_offset+0x3a>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00f      	beq.n	800105a <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	4413      	add	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	689c      	ldr	r4, [r3, #8]
 800104a:	68f8      	ldr	r0, [r7, #12]
 800104c:	f7ff f902 	bl	8000254 <strlen>
 8001050:	4603      	mov	r3, r0
 8001052:	18e2      	adds	r2, r4, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	e000      	b.n	800105c <update_offset+0x3c>
        return;
 800105a:	bf00      	nop
}
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	bd90      	pop	{r4, r7, pc}
 8001062:	0000      	movs	r0, r0
 8001064:	0000      	movs	r0, r0
	...

08001068 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 8001068:	b480      	push	{r7}
 800106a:	b087      	sub	sp, #28
 800106c:	af00      	add	r7, sp, #0
 800106e:	ed87 0b02 	vstr	d0, [r7, #8]
 8001072:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8001076:	ed97 7b02 	vldr	d7, [r7, #8]
 800107a:	eeb0 6bc7 	vabs.f64	d6, d7
 800107e:	ed97 7b00 	vldr	d7, [r7]
 8001082:	eeb0 7bc7 	vabs.f64	d7, d7
 8001086:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800108a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800108e:	dd04      	ble.n	800109a <compare_double+0x32>
 8001090:	ed97 7b02 	vldr	d7, [r7, #8]
 8001094:	eeb0 7bc7 	vabs.f64	d7, d7
 8001098:	e003      	b.n	80010a2 <compare_double+0x3a>
 800109a:	ed97 7b00 	vldr	d7, [r7]
 800109e:	eeb0 7bc7 	vabs.f64	d7, d7
 80010a2:	ed87 7b04 	vstr	d7, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 80010a6:	ed97 6b02 	vldr	d6, [r7, #8]
 80010aa:	ed97 7b00 	vldr	d7, [r7]
 80010ae:	ee36 7b47 	vsub.f64	d7, d6, d7
 80010b2:	eeb0 6bc7 	vabs.f64	d6, d7
 80010b6:	ed97 7b04 	vldr	d7, [r7, #16]
 80010ba:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80010e0 <compare_double+0x78>
 80010be:	ee27 7b05 	vmul.f64	d7, d7, d5
 80010c2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80010c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ca:	bf94      	ite	ls
 80010cc:	2301      	movls	r3, #1
 80010ce:	2300      	movhi	r3, #0
 80010d0:	b2db      	uxtb	r3, r3
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	371c      	adds	r7, #28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	00000000 	.word	0x00000000
 80010e4:	3cb00000 	.word	0x3cb00000

080010e8 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b092      	sub	sp, #72	; 0x48
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    double d = item->valuedouble;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80010fc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int length = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
 800110c:	f107 0318 	add.w	r3, r7, #24
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
 800111c:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 800111e:	f7ff fedd 	bl	8000edc <get_decimal_point>
 8001122:	4603      	mov	r3, r0
 8001124:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double test = 0.0;
 8001128:	f04f 0200 	mov.w	r2, #0
 800112c:	f04f 0300 	mov.w	r3, #0
 8001130:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d101      	bne.n	800113e <print_number+0x56>
    {
        return false;
 800113a:	2300      	movs	r3, #0
 800113c:	e0a2      	b.n	8001284 <print_number+0x19c>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 800113e:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8001142:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001146:	eeb4 6b47 	vcmp.f64	d6, d7
 800114a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114e:	d612      	bvs.n	8001176 <print_number+0x8e>
 8001150:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001154:	eeb0 7bc7 	vabs.f64	d7, d7
 8001158:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8001290 <print_number+0x1a8>
 800115c:	eeb4 7b46 	vcmp.f64	d7, d6
 8001160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001164:	bfd4      	ite	le
 8001166:	2301      	movle	r3, #1
 8001168:	2300      	movgt	r3, #0
 800116a:	b2db      	uxtb	r3, r3
 800116c:	f083 0301 	eor.w	r3, r3, #1
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d007      	beq.n	8001186 <print_number+0x9e>
    {
        length = sprintf((char*)number_buffer, "null");
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4947      	ldr	r1, [pc, #284]	; (8001298 <print_number+0x1b0>)
 800117c:	4618      	mov	r0, r3
 800117e:	f020 fb55 	bl	802182c <siprintf>
 8001182:	6478      	str	r0, [r7, #68]	; 0x44
 8001184:	e03c      	b.n	8001200 <print_number+0x118>
    }
	else if(d == (double)item->valueint)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	ee07 3a90 	vmov	s15, r3
 800118e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001192:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8001196:	eeb4 6b47 	vcmp.f64	d6, d7
 800119a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119e:	d109      	bne.n	80011b4 <print_number+0xcc>
	{
		length = sprintf((char*)number_buffer, "%d", item->valueint);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	695a      	ldr	r2, [r3, #20]
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	493c      	ldr	r1, [pc, #240]	; (800129c <print_number+0x1b4>)
 80011aa:	4618      	mov	r0, r3
 80011ac:	f020 fb3e 	bl	802182c <siprintf>
 80011b0:	6478      	str	r0, [r7, #68]	; 0x44
 80011b2:	e025      	b.n	8001200 <print_number+0x118>
	}
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 80011b4:	f107 0014 	add.w	r0, r7, #20
 80011b8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80011bc:	4938      	ldr	r1, [pc, #224]	; (80012a0 <print_number+0x1b8>)
 80011be:	f020 fb35 	bl	802182c <siprintf>
 80011c2:	6478      	str	r0, [r7, #68]	; 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 80011c4:	f107 0208 	add.w	r2, r7, #8
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4935      	ldr	r1, [pc, #212]	; (80012a4 <print_number+0x1bc>)
 80011ce:	4618      	mov	r0, r3
 80011d0:	f020 fb4c 	bl	802186c <siscanf>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d10a      	bne.n	80011f0 <print_number+0x108>
 80011da:	ed97 7b02 	vldr	d7, [r7, #8]
 80011de:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 80011e2:	eeb0 0b47 	vmov.f64	d0, d7
 80011e6:	f7ff ff3f 	bl	8001068 <compare_double>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d107      	bne.n	8001200 <print_number+0x118>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 80011f0:	f107 0014 	add.w	r0, r7, #20
 80011f4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80011f8:	492b      	ldr	r1, [pc, #172]	; (80012a8 <print_number+0x1c0>)
 80011fa:	f020 fb17 	bl	802182c <siprintf>
 80011fe:	6478      	str	r0, [r7, #68]	; 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8001200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001202:	2b00      	cmp	r3, #0
 8001204:	db02      	blt.n	800120c <print_number+0x124>
 8001206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001208:	2b19      	cmp	r3, #25
 800120a:	dd01      	ble.n	8001210 <print_number+0x128>
    {
        return false;
 800120c:	2300      	movs	r3, #0
 800120e:	e039      	b.n	8001284 <print_number+0x19c>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8001210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001212:	3301      	adds	r3, #1
 8001214:	4619      	mov	r1, r3
 8001216:	6838      	ldr	r0, [r7, #0]
 8001218:	f7ff fe68 	bl	8000eec <ensure>
 800121c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 800121e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001220:	2b00      	cmp	r3, #0
 8001222:	d101      	bne.n	8001228 <print_number+0x140>
    {
        return false;
 8001224:	2300      	movs	r3, #0
 8001226:	e02d      	b.n	8001284 <print_number+0x19c>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8001228:	2300      	movs	r3, #0
 800122a:	643b      	str	r3, [r7, #64]	; 0x40
 800122c:	e01a      	b.n	8001264 <print_number+0x17c>
    {
        if (number_buffer[i] == decimal_point)
 800122e:	f107 0214 	add.w	r2, r7, #20
 8001232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001234:	4413      	add	r3, r2
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800123c:	429a      	cmp	r2, r3
 800123e:	d105      	bne.n	800124c <print_number+0x164>
        {
            output_pointer[i] = '.';
 8001240:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001244:	4413      	add	r3, r2
 8001246:	222e      	movs	r2, #46	; 0x2e
 8001248:	701a      	strb	r2, [r3, #0]
            continue;
 800124a:	e008      	b.n	800125e <print_number+0x176>
        }

        output_pointer[i] = number_buffer[i];
 800124c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800124e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001250:	4413      	add	r3, r2
 8001252:	f107 0114 	add.w	r1, r7, #20
 8001256:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001258:	440a      	add	r2, r1
 800125a:	7812      	ldrb	r2, [r2, #0]
 800125c:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 800125e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001260:	3301      	adds	r3, #1
 8001262:	643b      	str	r3, [r7, #64]	; 0x40
 8001264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001266:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001268:	429a      	cmp	r2, r3
 800126a:	d3e0      	bcc.n	800122e <print_number+0x146>
    }
    output_pointer[i] = '\0';
 800126c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800126e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001270:	4413      	add	r3, r2
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	689a      	ldr	r2, [r3, #8]
 800127a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800127c:	441a      	add	r2, r3
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	609a      	str	r2, [r3, #8]

    return true;
 8001282:	2301      	movs	r3, #1
}
 8001284:	4618      	mov	r0, r3
 8001286:	3748      	adds	r7, #72	; 0x48
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	f3af 8000 	nop.w
 8001290:	ffffffff 	.word	0xffffffff
 8001294:	7fefffff 	.word	0x7fefffff
 8001298:	080236cc 	.word	0x080236cc
 800129c:	080236d4 	.word	0x080236d4
 80012a0:	080236d8 	.word	0x080236d8
 80012a4:	080236e0 	.word	0x080236e0
 80012a8:	080236e4 	.word	0x080236e4

080012ac <print_string_ptr>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d101      	bne.n	80012d4 <print_string_ptr+0x28>
    {
        return false;
 80012d0:	2300      	movs	r3, #0
 80012d2:	e110      	b.n	80014f6 <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d111      	bne.n	80012fe <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 80012da:	2103      	movs	r1, #3
 80012dc:	6838      	ldr	r0, [r7, #0]
 80012de:	f7ff fe05 	bl	8000eec <ensure>
 80012e2:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <print_string_ptr+0x42>
        {
            return false;
 80012ea:	2300      	movs	r3, #0
 80012ec:	e103      	b.n	80014f6 <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4a83      	ldr	r2, [pc, #524]	; (8001500 <print_string_ptr+0x254>)
 80012f2:	8811      	ldrh	r1, [r2, #0]
 80012f4:	7892      	ldrb	r2, [r2, #2]
 80012f6:	8019      	strh	r1, [r3, #0]
 80012f8:	709a      	strb	r2, [r3, #2]

        return true;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e0fb      	b.n	80014f6 <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	61fb      	str	r3, [r7, #28]
 8001302:	e023      	b.n	800134c <print_string_ptr+0xa0>
    {
        switch (*input_pointer)
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b22      	cmp	r3, #34	; 0x22
 800130a:	dc0e      	bgt.n	800132a <print_string_ptr+0x7e>
 800130c:	2b08      	cmp	r3, #8
 800130e:	db12      	blt.n	8001336 <print_string_ptr+0x8a>
 8001310:	3b08      	subs	r3, #8
 8001312:	2201      	movs	r2, #1
 8001314:	409a      	lsls	r2, r3
 8001316:	4b7b      	ldr	r3, [pc, #492]	; (8001504 <print_string_ptr+0x258>)
 8001318:	4013      	ands	r3, r2
 800131a:	2b00      	cmp	r3, #0
 800131c:	bf14      	ite	ne
 800131e:	2301      	movne	r3, #1
 8001320:	2300      	moveq	r3, #0
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d102      	bne.n	800132e <print_string_ptr+0x82>
 8001328:	e005      	b.n	8001336 <print_string_ptr+0x8a>
 800132a:	2b5c      	cmp	r3, #92	; 0x5c
 800132c:	d103      	bne.n	8001336 <print_string_ptr+0x8a>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	3301      	adds	r3, #1
 8001332:	617b      	str	r3, [r7, #20]
                break;
 8001334:	e007      	b.n	8001346 <print_string_ptr+0x9a>
            default:
                if (*input_pointer < 32)
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b1f      	cmp	r3, #31
 800133c:	d802      	bhi.n	8001344 <print_string_ptr+0x98>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	3305      	adds	r3, #5
 8001342:	617b      	str	r3, [r7, #20]
                }
                break;
 8001344:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3301      	adds	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1d7      	bne.n	8001304 <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8001354:	69fa      	ldr	r2, [r7, #28]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	461a      	mov	r2, r3
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	4413      	add	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	3303      	adds	r3, #3
 8001366:	4619      	mov	r1, r3
 8001368:	6838      	ldr	r0, [r7, #0]
 800136a:	f7ff fdbf 	bl	8000eec <ensure>
 800136e:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <print_string_ptr+0xce>
    {
        return false;
 8001376:	2300      	movs	r3, #0
 8001378:	e0bd      	b.n	80014f6 <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d117      	bne.n	80013b0 <print_string_ptr+0x104>
    {
        output[0] = '\"';
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	2222      	movs	r2, #34	; 0x22
 8001384:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	3301      	adds	r3, #1
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	4618      	mov	r0, r3
 8001390:	f01f ffee 	bl	8021370 <memcpy>
        output[output_length + 1] = '\"';
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	3301      	adds	r3, #1
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	4413      	add	r3, r2
 800139c:	2222      	movs	r2, #34	; 0x22
 800139e:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	3302      	adds	r3, #2
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4413      	add	r3, r2
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]

        return true;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e0a2      	b.n	80014f6 <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	2222      	movs	r2, #34	; 0x22
 80013b4:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	3301      	adds	r3, #1
 80013ba:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	61fb      	str	r3, [r7, #28]
 80013c0:	e087      	b.n	80014d2 <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b1f      	cmp	r3, #31
 80013c8:	d90c      	bls.n	80013e4 <print_string_ptr+0x138>
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b22      	cmp	r3, #34	; 0x22
 80013d0:	d008      	beq.n	80013e4 <print_string_ptr+0x138>
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b5c      	cmp	r3, #92	; 0x5c
 80013d8:	d004      	beq.n	80013e4 <print_string_ptr+0x138>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	781a      	ldrb	r2, [r3, #0]
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	701a      	strb	r2, [r3, #0]
 80013e2:	e070      	b.n	80014c6 <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	1c5a      	adds	r2, r3, #1
 80013e8:	61ba      	str	r2, [r7, #24]
 80013ea:	225c      	movs	r2, #92	; 0x5c
 80013ec:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b22      	cmp	r3, #34	; 0x22
 80013f4:	dc3e      	bgt.n	8001474 <print_string_ptr+0x1c8>
 80013f6:	2b08      	cmp	r3, #8
 80013f8:	db5a      	blt.n	80014b0 <print_string_ptr+0x204>
 80013fa:	3b08      	subs	r3, #8
 80013fc:	2b1a      	cmp	r3, #26
 80013fe:	d857      	bhi.n	80014b0 <print_string_ptr+0x204>
 8001400:	a201      	add	r2, pc, #4	; (adr r2, 8001408 <print_string_ptr+0x15c>)
 8001402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001406:	bf00      	nop
 8001408:	08001489 	.word	0x08001489
 800140c:	080014a9 	.word	0x080014a9
 8001410:	08001499 	.word	0x08001499
 8001414:	080014b1 	.word	0x080014b1
 8001418:	08001491 	.word	0x08001491
 800141c:	080014a1 	.word	0x080014a1
 8001420:	080014b1 	.word	0x080014b1
 8001424:	080014b1 	.word	0x080014b1
 8001428:	080014b1 	.word	0x080014b1
 800142c:	080014b1 	.word	0x080014b1
 8001430:	080014b1 	.word	0x080014b1
 8001434:	080014b1 	.word	0x080014b1
 8001438:	080014b1 	.word	0x080014b1
 800143c:	080014b1 	.word	0x080014b1
 8001440:	080014b1 	.word	0x080014b1
 8001444:	080014b1 	.word	0x080014b1
 8001448:	080014b1 	.word	0x080014b1
 800144c:	080014b1 	.word	0x080014b1
 8001450:	080014b1 	.word	0x080014b1
 8001454:	080014b1 	.word	0x080014b1
 8001458:	080014b1 	.word	0x080014b1
 800145c:	080014b1 	.word	0x080014b1
 8001460:	080014b1 	.word	0x080014b1
 8001464:	080014b1 	.word	0x080014b1
 8001468:	080014b1 	.word	0x080014b1
 800146c:	080014b1 	.word	0x080014b1
 8001470:	08001481 	.word	0x08001481
 8001474:	2b5c      	cmp	r3, #92	; 0x5c
 8001476:	d11b      	bne.n	80014b0 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	225c      	movs	r2, #92	; 0x5c
 800147c:	701a      	strb	r2, [r3, #0]
                    break;
 800147e:	e022      	b.n	80014c6 <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	2222      	movs	r2, #34	; 0x22
 8001484:	701a      	strb	r2, [r3, #0]
                    break;
 8001486:	e01e      	b.n	80014c6 <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	2262      	movs	r2, #98	; 0x62
 800148c:	701a      	strb	r2, [r3, #0]
                    break;
 800148e:	e01a      	b.n	80014c6 <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	2266      	movs	r2, #102	; 0x66
 8001494:	701a      	strb	r2, [r3, #0]
                    break;
 8001496:	e016      	b.n	80014c6 <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	226e      	movs	r2, #110	; 0x6e
 800149c:	701a      	strb	r2, [r3, #0]
                    break;
 800149e:	e012      	b.n	80014c6 <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	2272      	movs	r2, #114	; 0x72
 80014a4:	701a      	strb	r2, [r3, #0]
                    break;
 80014a6:	e00e      	b.n	80014c6 <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	2274      	movs	r2, #116	; 0x74
 80014ac:	701a      	strb	r2, [r3, #0]
                    break;
 80014ae:	e00a      	b.n	80014c6 <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4914      	ldr	r1, [pc, #80]	; (8001508 <print_string_ptr+0x25c>)
 80014b8:	69b8      	ldr	r0, [r7, #24]
 80014ba:	f020 f9b7 	bl	802182c <siprintf>
                    output_pointer += 4;
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	3304      	adds	r3, #4
 80014c2:	61bb      	str	r3, [r7, #24]
                    break;
 80014c4:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3301      	adds	r3, #1
 80014ca:	61fb      	str	r3, [r7, #28]
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	3301      	adds	r3, #1
 80014d0:	61bb      	str	r3, [r7, #24]
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f47f af73 	bne.w	80013c2 <print_string_ptr+0x116>
            }
        }
    }
    output[output_length + 1] = '\"';
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	3301      	adds	r3, #1
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4413      	add	r3, r2
 80014e4:	2222      	movs	r2, #34	; 0x22
 80014e6:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	3302      	adds	r3, #2
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4413      	add	r3, r2
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]

    return true;
 80014f4:	2301      	movs	r3, #1
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3720      	adds	r7, #32
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	080236ec 	.word	0x080236ec
 8001504:	04000037 	.word	0x04000037
 8001508:	080236f0 	.word	0x080236f0

0800150c <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	6839      	ldr	r1, [r7, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fec5 	bl	80012ac <print_string_ptr>
 8001522:	4603      	mov	r3, r0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08e      	sub	sp, #56	; 0x38
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8001538:	2300      	movs	r3, #0
 800153a:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 800153c:	f107 0310 	add.w	r3, r7, #16
 8001540:	2224      	movs	r2, #36	; 0x24
 8001542:	2100      	movs	r1, #0
 8001544:	4618      	mov	r0, r3
 8001546:	f01f ff3b 	bl	80213c0 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a38      	ldr	r2, [pc, #224]	; (8001630 <print+0x104>)
 8001550:	6812      	ldr	r2, [r2, #0]
 8001552:	4610      	mov	r0, r2
 8001554:	4798      	blx	r3
 8001556:	4603      	mov	r3, r0
 8001558:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 800155a:	4b35      	ldr	r3, [pc, #212]	; (8001630 <print+0x104>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
    buffer->hooks = *hooks;
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800156a:	ca07      	ldmia	r2, {r0, r1, r2}
 800156c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d040      	beq.n	80015f8 <print+0xcc>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 8001576:	f107 0310 	add.w	r3, r7, #16
 800157a:	4619      	mov	r1, r3
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f000 f869 	bl	8001654 <print_value>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d039      	beq.n	80015fc <print+0xd0>
    {
        goto fail;
    }
    update_offset(buffer);
 8001588:	f107 0310 	add.w	r3, r7, #16
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fd47 	bl	8001020 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00d      	beq.n	80015b6 <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	6938      	ldr	r0, [r7, #16]
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	3201      	adds	r2, #1
 80015a4:	4611      	mov	r1, r2
 80015a6:	4798      	blx	r3
 80015a8:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL) {
 80015aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d027      	beq.n	8001600 <print+0xd4>
            goto fail;
        }
        buffer->buffer = NULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	e01e      	b.n	80015f4 <print+0xc8>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	3201      	adds	r2, #1
 80015be:	4610      	mov	r0, r2
 80015c0:	4798      	blx	r3
 80015c2:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL)
 80015c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d01c      	beq.n	8001604 <print+0xd8>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 80015ca:	6939      	ldr	r1, [r7, #16]
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	1c5a      	adds	r2, r3, #1
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	4293      	cmp	r3, r2
 80015d4:	bf28      	it	cs
 80015d6:	4613      	movcs	r3, r2
 80015d8:	461a      	mov	r2, r3
 80015da:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80015dc:	f01f fec8 	bl	8021370 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015e4:	4413      	add	r3, r2
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	4610      	mov	r0, r2
 80015f2:	4798      	blx	r3
    }

    return printed;
 80015f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015f6:	e016      	b.n	8001626 <print+0xfa>
        goto fail;
 80015f8:	bf00      	nop
 80015fa:	e004      	b.n	8001606 <print+0xda>
        goto fail;
 80015fc:	bf00      	nop
 80015fe:	e002      	b.n	8001606 <print+0xda>
            goto fail;
 8001600:	bf00      	nop
 8001602:	e000      	b.n	8001606 <print+0xda>
            goto fail;
 8001604:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d004      	beq.n	8001616 <print+0xea>
    {
        hooks->deallocate(buffer->buffer);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4610      	mov	r0, r2
 8001614:	4798      	blx	r3
    }

    if (printed != NULL)
 8001616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <print+0xf8>
    {
        hooks->deallocate(printed);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001622:	4798      	blx	r3
    }

    return NULL;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3738      	adds	r7, #56	; 0x38
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	0802702c 	.word	0x0802702c

08001634 <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
    return (char*)print(item, true, &global_hooks);
 800163c:	4a04      	ldr	r2, [pc, #16]	; (8001650 <cJSON_Print+0x1c>)
 800163e:	2101      	movs	r1, #1
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ff73 	bl	800152c <print>
 8001646:	4603      	mov	r3, r0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000000 	.word	0x20000000

08001654 <print_value>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d002      	beq.n	800166e <print_value+0x1a>
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <print_value+0x1e>
    {
        return false;
 800166e:	2300      	movs	r3, #0
 8001670:	e0c9      	b.n	8001806 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b80      	cmp	r3, #128	; 0x80
 800167a:	f000 808e 	beq.w	800179a <print_value+0x146>
 800167e:	2b80      	cmp	r3, #128	; 0x80
 8001680:	f300 80c0 	bgt.w	8001804 <print_value+0x1b0>
 8001684:	2b20      	cmp	r3, #32
 8001686:	dc49      	bgt.n	800171c <print_value+0xc8>
 8001688:	2b00      	cmp	r3, #0
 800168a:	f340 80bb 	ble.w	8001804 <print_value+0x1b0>
 800168e:	3b01      	subs	r3, #1
 8001690:	2b1f      	cmp	r3, #31
 8001692:	f200 80b7 	bhi.w	8001804 <print_value+0x1b0>
 8001696:	a201      	add	r2, pc, #4	; (adr r2, 800169c <print_value+0x48>)
 8001698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800169c:	08001747 	.word	0x08001747
 80016a0:	0800176b 	.word	0x0800176b
 80016a4:	08001805 	.word	0x08001805
 80016a8:	08001723 	.word	0x08001723
 80016ac:	08001805 	.word	0x08001805
 80016b0:	08001805 	.word	0x08001805
 80016b4:	08001805 	.word	0x08001805
 80016b8:	0800178f 	.word	0x0800178f
 80016bc:	08001805 	.word	0x08001805
 80016c0:	08001805 	.word	0x08001805
 80016c4:	08001805 	.word	0x08001805
 80016c8:	08001805 	.word	0x08001805
 80016cc:	08001805 	.word	0x08001805
 80016d0:	08001805 	.word	0x08001805
 80016d4:	08001805 	.word	0x08001805
 80016d8:	080017e1 	.word	0x080017e1
 80016dc:	08001805 	.word	0x08001805
 80016e0:	08001805 	.word	0x08001805
 80016e4:	08001805 	.word	0x08001805
 80016e8:	08001805 	.word	0x08001805
 80016ec:	08001805 	.word	0x08001805
 80016f0:	08001805 	.word	0x08001805
 80016f4:	08001805 	.word	0x08001805
 80016f8:	08001805 	.word	0x08001805
 80016fc:	08001805 	.word	0x08001805
 8001700:	08001805 	.word	0x08001805
 8001704:	08001805 	.word	0x08001805
 8001708:	08001805 	.word	0x08001805
 800170c:	08001805 	.word	0x08001805
 8001710:	08001805 	.word	0x08001805
 8001714:	08001805 	.word	0x08001805
 8001718:	080017ed 	.word	0x080017ed
 800171c:	2b40      	cmp	r3, #64	; 0x40
 800171e:	d06b      	beq.n	80017f8 <print_value+0x1a4>
 8001720:	e070      	b.n	8001804 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 8001722:	2105      	movs	r1, #5
 8001724:	6838      	ldr	r0, [r7, #0]
 8001726:	f7ff fbe1 	bl	8000eec <ensure>
 800172a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <print_value+0xe2>
            {
                return false;
 8001732:	2300      	movs	r3, #0
 8001734:	e067      	b.n	8001806 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	4a35      	ldr	r2, [pc, #212]	; (8001810 <print_value+0x1bc>)
 800173a:	6810      	ldr	r0, [r2, #0]
 800173c:	6018      	str	r0, [r3, #0]
 800173e:	7912      	ldrb	r2, [r2, #4]
 8001740:	711a      	strb	r2, [r3, #4]
            return true;
 8001742:	2301      	movs	r3, #1
 8001744:	e05f      	b.n	8001806 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 8001746:	2106      	movs	r1, #6
 8001748:	6838      	ldr	r0, [r7, #0]
 800174a:	f7ff fbcf 	bl	8000eec <ensure>
 800174e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <print_value+0x106>
            {
                return false;
 8001756:	2300      	movs	r3, #0
 8001758:	e055      	b.n	8001806 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4a2d      	ldr	r2, [pc, #180]	; (8001814 <print_value+0x1c0>)
 800175e:	6810      	ldr	r0, [r2, #0]
 8001760:	6018      	str	r0, [r3, #0]
 8001762:	8892      	ldrh	r2, [r2, #4]
 8001764:	809a      	strh	r2, [r3, #4]
            return true;
 8001766:	2301      	movs	r3, #1
 8001768:	e04d      	b.n	8001806 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 800176a:	2105      	movs	r1, #5
 800176c:	6838      	ldr	r0, [r7, #0]
 800176e:	f7ff fbbd 	bl	8000eec <ensure>
 8001772:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <print_value+0x12a>
            {
                return false;
 800177a:	2300      	movs	r3, #0
 800177c:	e043      	b.n	8001806 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	4a25      	ldr	r2, [pc, #148]	; (8001818 <print_value+0x1c4>)
 8001782:	6810      	ldr	r0, [r2, #0]
 8001784:	6018      	str	r0, [r3, #0]
 8001786:	7912      	ldrb	r2, [r2, #4]
 8001788:	711a      	strb	r2, [r3, #4]
            return true;
 800178a:	2301      	movs	r3, #1
 800178c:	e03b      	b.n	8001806 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 800178e:	6839      	ldr	r1, [r7, #0]
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff fca9 	bl	80010e8 <print_number>
 8001796:	4603      	mov	r3, r0
 8001798:	e035      	b.n	8001806 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <print_value+0x156>
            {
                return false;
 80017a6:	2300      	movs	r3, #0
 80017a8:	e02d      	b.n	8001806 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe fd50 	bl	8000254 <strlen>
 80017b4:	4603      	mov	r3, r0
 80017b6:	3301      	adds	r3, #1
 80017b8:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 80017ba:	68b9      	ldr	r1, [r7, #8]
 80017bc:	6838      	ldr	r0, [r7, #0]
 80017be:	f7ff fb95 	bl	8000eec <ensure>
 80017c2:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <print_value+0x17a>
            {
                return false;
 80017ca:	2300      	movs	r3, #0
 80017cc:	e01b      	b.n	8001806 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	68ba      	ldr	r2, [r7, #8]
 80017d4:	4619      	mov	r1, r3
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f01f fdca 	bl	8021370 <memcpy>
            return true;
 80017dc:	2301      	movs	r3, #1
 80017de:	e012      	b.n	8001806 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 80017e0:	6839      	ldr	r1, [r7, #0]
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff fe92 	bl	800150c <print_string>
 80017e8:	4603      	mov	r3, r0
 80017ea:	e00c      	b.n	8001806 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 80017ec:	6839      	ldr	r1, [r7, #0]
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f000 f814 	bl	800181c <print_array>
 80017f4:	4603      	mov	r3, r0
 80017f6:	e006      	b.n	8001806 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 80017f8:	6839      	ldr	r1, [r7, #0]
 80017fa:	6878      	ldr	r0, [r7, #4]
 80017fc:	f000 f894 	bl	8001928 <print_object>
 8001800:	4603      	mov	r3, r0
 8001802:	e000      	b.n	8001806 <print_value+0x1b2>

        default:
            return false;
 8001804:	2300      	movs	r3, #0
    }
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	080236cc 	.word	0x080236cc
 8001814:	080236fc 	.word	0x080236fc
 8001818:	08023704 	.word	0x08023704

0800181c <print_array>:
    return false;
}

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <print_array+0x22>
    {
        return false;
 800183a:	2300      	movs	r3, #0
 800183c:	e070      	b.n	8001920 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800183e:	2101      	movs	r1, #1
 8001840:	6838      	ldr	r0, [r7, #0]
 8001842:	f7ff fb53 	bl	8000eec <ensure>
 8001846:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <print_array+0x36>
    {
        return false;
 800184e:	2300      	movs	r3, #0
 8001850:	e066      	b.n	8001920 <print_array+0x104>
    }

    *output_pointer = '[';
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	225b      	movs	r2, #91	; 0x5b
 8001856:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	1c5a      	adds	r2, r3, #1
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 800186c:	e03d      	b.n	80018ea <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 800186e:	6839      	ldr	r1, [r7, #0]
 8001870:	6938      	ldr	r0, [r7, #16]
 8001872:	f7ff feef 	bl	8001654 <print_value>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <print_array+0x64>
        {
            return false;
 800187c:	2300      	movs	r3, #0
 800187e:	e04f      	b.n	8001920 <print_array+0x104>
        }
        update_offset(output_buffer);
 8001880:	6838      	ldr	r0, [r7, #0]
 8001882:	f7ff fbcd 	bl	8001020 <update_offset>
        if (current_element->next)
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d02a      	beq.n	80018e4 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <print_array+0x7e>
 8001896:	2302      	movs	r3, #2
 8001898:	e000      	b.n	800189c <print_array+0x80>
 800189a:	2301      	movs	r3, #1
 800189c:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	3301      	adds	r3, #1
 80018a2:	4619      	mov	r1, r3
 80018a4:	6838      	ldr	r0, [r7, #0]
 80018a6:	f7ff fb21 	bl	8000eec <ensure>
 80018aa:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <print_array+0x9a>
            {
                return false;
 80018b2:	2300      	movs	r3, #0
 80018b4:	e034      	b.n	8001920 <print_array+0x104>
            }
            *output_pointer++ = ',';
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	1c5a      	adds	r2, r3, #1
 80018ba:	617a      	str	r2, [r7, #20]
 80018bc:	222c      	movs	r2, #44	; 0x2c
 80018be:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d004      	beq.n	80018d2 <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	1c5a      	adds	r2, r3, #1
 80018cc:	617a      	str	r2, [r7, #20]
 80018ce:	2220      	movs	r2, #32
 80018d0:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	2200      	movs	r2, #0
 80018d6:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	441a      	add	r2, r3
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1be      	bne.n	800186e <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 80018f0:	2102      	movs	r1, #2
 80018f2:	6838      	ldr	r0, [r7, #0]
 80018f4:	f7ff fafa 	bl	8000eec <ensure>
 80018f8:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <print_array+0xe8>
    {
        return false;
 8001900:	2300      	movs	r3, #0
 8001902:	e00d      	b.n	8001920 <print_array+0x104>
    }
    *output_pointer++ = ']';
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	1c5a      	adds	r2, r3, #1
 8001908:	617a      	str	r2, [r7, #20]
 800190a:	225d      	movs	r2, #93	; 0x5d
 800190c:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	1e5a      	subs	r2, r3, #1
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	60da      	str	r2, [r3, #12]

    return true;
 800191e:	2301      	movs	r3, #1
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <print_object>:
    return false;
}

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b088      	sub	sp, #32
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <print_object+0x22>
    {
        return false;
 8001946:	2300      	movs	r3, #0
 8001948:	e108      	b.n	8001b5c <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <print_object+0x2e>
 8001952:	2302      	movs	r3, #2
 8001954:	e000      	b.n	8001958 <print_object+0x30>
 8001956:	2301      	movs	r3, #1
 8001958:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	3301      	adds	r3, #1
 800195e:	4619      	mov	r1, r3
 8001960:	6838      	ldr	r0, [r7, #0]
 8001962:	f7ff fac3 	bl	8000eec <ensure>
 8001966:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <print_object+0x4a>
    {
        return false;
 800196e:	2300      	movs	r3, #0
 8001970:	e0f4      	b.n	8001b5c <print_object+0x234>
    }

    *output_pointer++ = '{';
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	1c5a      	adds	r2, r3, #1
 8001976:	61fa      	str	r2, [r7, #28]
 8001978:	227b      	movs	r2, #123	; 0x7b
 800197a:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	1c5a      	adds	r2, r3, #1
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d004      	beq.n	8001998 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	61fa      	str	r2, [r7, #28]
 8001994:	220a      	movs	r2, #10
 8001996:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	441a      	add	r2, r3
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	609a      	str	r2, [r3, #8]

    while (current_item)
 80019a4:	e0a0      	b.n	8001ae8 <print_object+0x1c0>
    {
        if (output_buffer->format)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d022      	beq.n	80019f4 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	4619      	mov	r1, r3
 80019b4:	6838      	ldr	r0, [r7, #0]
 80019b6:	f7ff fa99 	bl	8000eec <ensure>
 80019ba:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <print_object+0x9e>
            {
                return false;
 80019c2:	2300      	movs	r3, #0
 80019c4:	e0ca      	b.n	8001b5c <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	e007      	b.n	80019dc <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	61fa      	str	r2, [r7, #28]
 80019d2:	2209      	movs	r2, #9
 80019d4:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	3301      	adds	r3, #1
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d3f2      	bcc.n	80019cc <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	441a      	add	r2, r3
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	6839      	ldr	r1, [r7, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fc56 	bl	80012ac <print_string_ptr>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <print_object+0xe2>
        {
            return false;
 8001a06:	2300      	movs	r3, #0
 8001a08:	e0a8      	b.n	8001b5c <print_object+0x234>
        }
        update_offset(output_buffer);
 8001a0a:	6838      	ldr	r0, [r7, #0]
 8001a0c:	f7ff fb08 	bl	8001020 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	695b      	ldr	r3, [r3, #20]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <print_object+0xf4>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	e000      	b.n	8001a1e <print_object+0xf6>
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8001a20:	68f9      	ldr	r1, [r7, #12]
 8001a22:	6838      	ldr	r0, [r7, #0]
 8001a24:	f7ff fa62 	bl	8000eec <ensure>
 8001a28:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <print_object+0x10c>
        {
            return false;
 8001a30:	2300      	movs	r3, #0
 8001a32:	e093      	b.n	8001b5c <print_object+0x234>
        }
        *output_pointer++ = ':';
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	61fa      	str	r2, [r7, #28]
 8001a3a:	223a      	movs	r2, #58	; 0x3a
 8001a3c:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d004      	beq.n	8001a50 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	1c5a      	adds	r2, r3, #1
 8001a4a:	61fa      	str	r2, [r7, #28]
 8001a4c:	2209      	movs	r2, #9
 8001a4e:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	441a      	add	r2, r3
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8001a5c:	6839      	ldr	r1, [r7, #0]
 8001a5e:	69b8      	ldr	r0, [r7, #24]
 8001a60:	f7ff fdf8 	bl	8001654 <print_value>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <print_object+0x146>
        {
            return false;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	e076      	b.n	8001b5c <print_object+0x234>
        }
        update_offset(output_buffer);
 8001a6e:	6838      	ldr	r0, [r7, #0]
 8001a70:	f7ff fad6 	bl	8001020 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <print_object+0x158>
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	e000      	b.n	8001a82 <print_object+0x15a>
 8001a80:	2200      	movs	r2, #0
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <print_object+0x166>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <print_object+0x168>
 8001a8e:	2300      	movs	r3, #0
 8001a90:	4413      	add	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	3301      	adds	r3, #1
 8001a98:	4619      	mov	r1, r3
 8001a9a:	6838      	ldr	r0, [r7, #0]
 8001a9c:	f7ff fa26 	bl	8000eec <ensure>
 8001aa0:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <print_object+0x184>
        {
            return false;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	e057      	b.n	8001b5c <print_object+0x234>
        }
        if (current_item->next)
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d004      	beq.n	8001abe <print_object+0x196>
        {
            *output_pointer++ = ',';
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	61fa      	str	r2, [r7, #28]
 8001aba:	222c      	movs	r2, #44	; 0x2c
 8001abc:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d004      	beq.n	8001ad0 <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	61fa      	str	r2, [r7, #28]
 8001acc:	220a      	movs	r2, #10
 8001ace:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	441a      	add	r2, r3
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f47f af5b 	bne.w	80019a6 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d003      	beq.n	8001b00 <print_object+0x1d8>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	3301      	adds	r3, #1
 8001afe:	e000      	b.n	8001b02 <print_object+0x1da>
 8001b00:	2302      	movs	r3, #2
 8001b02:	4619      	mov	r1, r3
 8001b04:	6838      	ldr	r0, [r7, #0]
 8001b06:	f7ff f9f1 	bl	8000eec <ensure>
 8001b0a:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <print_object+0x1ee>
    {
        return false;
 8001b12:	2300      	movs	r3, #0
 8001b14:	e022      	b.n	8001b5c <print_object+0x234>
    }
    if (output_buffer->format)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d010      	beq.n	8001b40 <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	e007      	b.n	8001b34 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	61fa      	str	r2, [r7, #28]
 8001b2a:	2209      	movs	r2, #9
 8001b2c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	3301      	adds	r3, #1
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d3f1      	bcc.n	8001b24 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	61fa      	str	r2, [r7, #28]
 8001b46:	227d      	movs	r2, #125	; 0x7d
 8001b48:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	1e5a      	subs	r2, r3, #1
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	60da      	str	r2, [r3, #12]

    return true;
 8001b5a:	2301      	movs	r3, #1
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3720      	adds	r7, #32
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	605a      	str	r2, [r3, #4]
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b084      	sub	sp, #16
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d006      	beq.n	8001ba8 <add_item_to_array+0x22>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <add_item_to_array+0x22>
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d101      	bne.n	8001bac <add_item_to_array+0x26>
    {
        return false;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	e01e      	b.n	8001bea <add_item_to_array+0x64>
    }

    child = array->child;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d109      	bne.n	8001bcc <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	609a      	str	r2, [r3, #8]
        item->prev = item;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	e00d      	b.n	8001be8 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d009      	beq.n	8001be8 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	6839      	ldr	r1, [r7, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff ffc2 	bl	8001b64 <suffix_object>
            array->child->prev = item;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 8001be8:	2301      	movs	r3, #1
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <cJSON_AddItemToArray>:

/* Add item to array/object. */
CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToArray(cJSON *array, cJSON *item)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	6039      	str	r1, [r7, #0]
    return add_item_to_array(array, item);
 8001bfc:	6839      	ldr	r1, [r7, #0]
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff ffc1 	bl	8001b86 <add_item_to_array>
 8001c04:	4603      	mov	r3, r0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8001c16:	687b      	ldr	r3, [r7, #4]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d009      	beq.n	8001c54 <add_item_to_object+0x30>
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d006      	beq.n	8001c54 <add_item_to_object+0x30>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <add_item_to_object+0x30>
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d101      	bne.n	8001c58 <add_item_to_object+0x34>
    {
        return false;
 8001c54:	2300      	movs	r3, #0
 8001c56:	e036      	b.n	8001cc6 <add_item_to_object+0xa2>
    }

    if (constant_key)
 8001c58:	6a3b      	ldr	r3, [r7, #32]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d009      	beq.n	8001c72 <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 8001c5e:	68b8      	ldr	r0, [r7, #8]
 8001c60:	f7ff ffd5 	bl	8001c0e <cast_away_const>
 8001c64:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	e00e      	b.n	8001c90 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 8001c72:	6839      	ldr	r1, [r7, #0]
 8001c74:	68b8      	ldr	r0, [r7, #8]
 8001c76:	f7ff f8a9 	bl	8000dcc <cJSON_strdup>
 8001c7a:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <add_item_to_object+0x62>
        {
            return false;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e01f      	b.n	8001cc6 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c8e:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d109      	bne.n	8001cb0 <add_item_to_object+0x8c>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d005      	beq.n	8001cb0 <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6a12      	ldr	r2, [r2, #32]
 8001cac:	4610      	mov	r0, r2
 8001cae:	4798      	blx	r3
    }

    item->string = new_key;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f7ff ff61 	bl	8001b86 <add_item_to_array>
 8001cc4:	4603      	mov	r3, r0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b088      	sub	sp, #32
 8001cd4:	af02      	add	r7, sp, #8
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 8001cde:	ed97 0b00 	vldr	d0, [r7]
 8001ce2:	f000 f83d 	bl	8001d60 <cJSON_CreateNumber>
 8001ce6:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 8001ce8:	2300      	movs	r3, #0
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <cJSON_AddNumberToObject+0x44>)
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	68b9      	ldr	r1, [r7, #8]
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f7ff ff96 	bl	8001c24 <add_item_to_object>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	e003      	b.n	8001d0a <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 8001d02:	6978      	ldr	r0, [r7, #20]
 8001d04:	f7ff f8a0 	bl	8000e48 <cJSON_Delete>
    return NULL;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000000 	.word	0x20000000

08001d18 <cJSON_AddStringToObject>:

CJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af02      	add	r7, sp, #8
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
    cJSON *string_item = cJSON_CreateString(string);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f000 f865 	bl	8001df4 <cJSON_CreateString>
 8001d2a:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <cJSON_AddStringToObject+0x40>)
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	68b9      	ldr	r1, [r7, #8]
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f7ff ff74 	bl	8001c24 <add_item_to_object>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <cJSON_AddStringToObject+0x2e>
    {
        return string_item;
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	e003      	b.n	8001d4e <cJSON_AddStringToObject+0x36>
    }

    cJSON_Delete(string_item);
 8001d46:	6978      	ldr	r0, [r7, #20]
 8001d48:	f7ff f87e 	bl	8000e48 <cJSON_Delete>
    return NULL;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	00000000 	.word	0x00000000

08001d60 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8001d6a:	4821      	ldr	r0, [pc, #132]	; (8001df0 <cJSON_CreateNumber+0x90>)
 8001d6c:	f7ff f856 	bl	8000e1c <cJSON_New_Item>
 8001d70:	60f8      	str	r0, [r7, #12]
    if(item)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d02b      	beq.n	8001dd0 <cJSON_CreateNumber+0x70>
    {
        item->type = cJSON_Number;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2208      	movs	r2, #8
 8001d7c:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8001d7e:	68f9      	ldr	r1, [r7, #12]
 8001d80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d84:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8001d88:	ed97 7b00 	vldr	d7, [r7]
 8001d8c:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8001de0 <cJSON_CreateNumber+0x80>
 8001d90:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d98:	db04      	blt.n	8001da4 <cJSON_CreateNumber+0x44>
        {
            item->valueint = INT_MAX;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001da0:	615a      	str	r2, [r3, #20]
 8001da2:	e015      	b.n	8001dd0 <cJSON_CreateNumber+0x70>
        }
        else if (num <= (double)INT_MIN)
 8001da4:	ed97 7b00 	vldr	d7, [r7]
 8001da8:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8001de8 <cJSON_CreateNumber+0x88>
 8001dac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db4:	d804      	bhi.n	8001dc0 <cJSON_CreateNumber+0x60>
        {
            item->valueint = INT_MIN;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001dbc:	615a      	str	r2, [r3, #20]
 8001dbe:	e007      	b.n	8001dd0 <cJSON_CreateNumber+0x70>
        }
        else
        {
            item->valueint = (int)num;
 8001dc0:	ed97 7b00 	vldr	d7, [r7]
 8001dc4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001dc8:	ee17 2a90 	vmov	r2, s15
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	f3af 8000 	nop.w
 8001de0:	ffc00000 	.word	0xffc00000
 8001de4:	41dfffff 	.word	0x41dfffff
 8001de8:	00000000 	.word	0x00000000
 8001dec:	c1e00000 	.word	0xc1e00000
 8001df0:	20000000 	.word	0x20000000

08001df4 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8001dfc:	480f      	ldr	r0, [pc, #60]	; (8001e3c <cJSON_CreateString+0x48>)
 8001dfe:	f7ff f80d 	bl	8000e1c <cJSON_New_Item>
 8001e02:	60f8      	str	r0, [r7, #12]
    if(item)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d012      	beq.n	8001e30 <cJSON_CreateString+0x3c>
    {
        item->type = cJSON_String;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2210      	movs	r2, #16
 8001e0e:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
 8001e10:	490a      	ldr	r1, [pc, #40]	; (8001e3c <cJSON_CreateString+0x48>)
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7fe ffda 	bl	8000dcc <cJSON_strdup>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d104      	bne.n	8001e30 <cJSON_CreateString+0x3c>
        {
            cJSON_Delete(item);
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f7ff f80e 	bl	8000e48 <cJSON_Delete>
            return NULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	e000      	b.n	8001e32 <cJSON_CreateString+0x3e>
        }
    }

    return item;
 8001e30:	68fb      	ldr	r3, [r7, #12]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000000 	.word	0x20000000

08001e40 <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8001e46:	4807      	ldr	r0, [pc, #28]	; (8001e64 <cJSON_CreateArray+0x24>)
 8001e48:	f7fe ffe8 	bl	8000e1c <cJSON_New_Item>
 8001e4c:	6078      	str	r0, [r7, #4]
    if(item)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <cJSON_CreateArray+0x1a>
    {
        item->type=cJSON_Array;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2220      	movs	r2, #32
 8001e58:	60da      	str	r2, [r3, #12]
    }

    return item;
 8001e5a:	687b      	ldr	r3, [r7, #4]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000000 	.word	0x20000000

08001e68 <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8001e6e:	4807      	ldr	r0, [pc, #28]	; (8001e8c <cJSON_CreateObject+0x24>)
 8001e70:	f7fe ffd4 	bl	8000e1c <cJSON_New_Item>
 8001e74:	6078      	str	r0, [r7, #4]
    if (item)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2240      	movs	r2, #64	; 0x40
 8001e80:	60da      	str	r2, [r3, #12]
    }

    return item;
 8001e82:	687b      	ldr	r3, [r7, #4]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20000000 	.word	0x20000000

08001e90 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4a07      	ldr	r2, [pc, #28]	; (8001ebc <vApplicationGetIdleTaskMemory+0x2c>)
 8001ea0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	4a06      	ldr	r2, [pc, #24]	; (8001ec0 <vApplicationGetIdleTaskMemory+0x30>)
 8001ea6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2280      	movs	r2, #128	; 0x80
 8001eac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001eae:	bf00      	nop
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	200007d0 	.word	0x200007d0
 8001ec0:	20000884 	.word	0x20000884

08001ec4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ec4:	b5b0      	push	{r4, r5, r7, lr}
 8001ec6:	b096      	sub	sp, #88	; 0x58
 8001ec8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eca:	f001 fc46 	bl	800375a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ece:	f000 f84d 	bl	8001f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ed2:	f000 f8eb 	bl	80020ac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001ed6:	f000 f8b9 	bl	800204c <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8001eda:	f007 fdf3 	bl	8009ac4 <MX_FATFS_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of WebServerTask */
  osThreadStaticDef(WebServerTask, StartWebServerTask, osPriorityNormal, 0, 2048, WebServerTaskBuffer, &WebServerTaskControlBlock);
 8001ede:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <main+0x90>)
 8001ee0:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001ee4:	461d      	mov	r5, r3
 8001ee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ee8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001eee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WebServerTaskHandle = osThreadCreate(osThread(WebServerTask), NULL);
 8001ef2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f00e fe03 	bl	8010b04 <osThreadCreate>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4a15      	ldr	r2, [pc, #84]	; (8001f58 <main+0x94>)
 8001f02:	6013      	str	r3, [r2, #0]

  /* definition and creation of SSIDTask */
  osThreadStaticDef(SSIDTask, StartSSIDTask, osPriorityNormal, 0, 256, SSIDTaskBuffer, &SSIDTaskControlBlock);
 8001f04:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <main+0x98>)
 8001f06:	f107 0420 	add.w	r4, r7, #32
 8001f0a:	461d      	mov	r5, r3
 8001f0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f14:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SSIDTaskHandle = osThreadCreate(osThread(SSIDTask), NULL);
 8001f18:	f107 0320 	add.w	r3, r7, #32
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f00e fdf0 	bl	8010b04 <osThreadCreate>
 8001f24:	4603      	mov	r3, r0
 8001f26:	4a0e      	ldr	r2, [pc, #56]	; (8001f60 <main+0x9c>)
 8001f28:	6013      	str	r3, [r2, #0]

  /* definition and creation of my_USB_Task */
  osThreadStaticDef(my_USB_Task, Start_USB_Task, osPriorityNormal, 0, 1024, my_USB_TaskBuffer, &my_USB_TaskControlBlock);
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <main+0xa0>)
 8001f2c:	1d3c      	adds	r4, r7, #4
 8001f2e:	461d      	mov	r5, r3
 8001f30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f38:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  my_USB_TaskHandle = osThreadCreate(osThread(my_USB_Task), NULL);
 8001f3c:	1d3b      	adds	r3, r7, #4
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4618      	mov	r0, r3
 8001f42:	f00e fddf 	bl	8010b04 <osThreadCreate>
 8001f46:	4603      	mov	r3, r0
 8001f48:	4a07      	ldr	r2, [pc, #28]	; (8001f68 <main+0xa4>)
 8001f4a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001f4c:	f00e fdc3 	bl	8010ad6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f50:	e7fe      	b.n	8001f50 <main+0x8c>
 8001f52:	bf00      	nop
 8001f54:	08023734 	.word	0x08023734
 8001f58:	2000be78 	.word	0x2000be78
 8001f5c:	08023750 	.word	0x08023750
 8001f60:	20009904 	.word	0x20009904
 8001f64:	0802376c 	.word	0x0802376c
 8001f68:	20009908 	.word	0x20009908

08001f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b094      	sub	sp, #80	; 0x50
 8001f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f72:	f107 031c 	add.w	r3, r7, #28
 8001f76:	2234      	movs	r2, #52	; 0x34
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f01f fa20 	bl	80213c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f80:	f107 0308 	add.w	r3, r7, #8
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f90:	f004 fc96 	bl	80068c0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f94:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <SystemClock_Config+0xd8>)
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	4a2a      	ldr	r2, [pc, #168]	; (8002044 <SystemClock_Config+0xd8>)
 8001f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa0:	4b28      	ldr	r3, [pc, #160]	; (8002044 <SystemClock_Config+0xd8>)
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	607b      	str	r3, [r7, #4]
 8001faa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fac:	4b26      	ldr	r3, [pc, #152]	; (8002048 <SystemClock_Config+0xdc>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a25      	ldr	r2, [pc, #148]	; (8002048 <SystemClock_Config+0xdc>)
 8001fb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	4b23      	ldr	r3, [pc, #140]	; (8002048 <SystemClock_Config+0xdc>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fc0:	603b      	str	r3, [r7, #0]
 8001fc2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001fc8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001fcc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fd6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001fd8:	2304      	movs	r3, #4
 8001fda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001fdc:	23d8      	movs	r3, #216	; 0xd8
 8001fde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001fe4:	2309      	movs	r3, #9
 8001fe6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fec:	f107 031c 	add.w	r3, r7, #28
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f004 fcc5 	bl	8006980 <HAL_RCC_OscConfig>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ffc:	f000 f9ac 	bl	8002358 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002000:	f004 fc6e 	bl	80068e0 <HAL_PWREx_EnableOverDrive>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800200a:	f000 f9a5 	bl	8002358 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800200e:	230f      	movs	r3, #15
 8002010:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002012:	2302      	movs	r3, #2
 8002014:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800201a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800201e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002020:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002024:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002026:	f107 0308 	add.w	r3, r7, #8
 800202a:	2107      	movs	r1, #7
 800202c:	4618      	mov	r0, r3
 800202e:	f004 ff55 	bl	8006edc <HAL_RCC_ClockConfig>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002038:	f000 f98e 	bl	8002358 <Error_Handler>
  }
}
 800203c:	bf00      	nop
 800203e:	3750      	adds	r7, #80	; 0x50
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40023800 	.word	0x40023800
 8002048:	40007000 	.word	0x40007000

0800204c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002050:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <MX_USART3_UART_Init+0x58>)
 8002052:	4a15      	ldr	r2, [pc, #84]	; (80020a8 <MX_USART3_UART_Init+0x5c>)
 8002054:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002056:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <MX_USART3_UART_Init+0x58>)
 8002058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800205c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <MX_USART3_UART_Init+0x58>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002064:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <MX_USART3_UART_Init+0x58>)
 8002066:	2200      	movs	r2, #0
 8002068:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800206a:	4b0e      	ldr	r3, [pc, #56]	; (80020a4 <MX_USART3_UART_Init+0x58>)
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <MX_USART3_UART_Init+0x58>)
 8002072:	220c      	movs	r2, #12
 8002074:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002076:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <MX_USART3_UART_Init+0x58>)
 8002078:	2200      	movs	r2, #0
 800207a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800207c:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <MX_USART3_UART_Init+0x58>)
 800207e:	2200      	movs	r2, #0
 8002080:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <MX_USART3_UART_Init+0x58>)
 8002084:	2200      	movs	r2, #0
 8002086:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002088:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <MX_USART3_UART_Init+0x58>)
 800208a:	2200      	movs	r2, #0
 800208c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800208e:	4805      	ldr	r0, [pc, #20]	; (80020a4 <MX_USART3_UART_Init+0x58>)
 8002090:	f006 f860 	bl	8008154 <HAL_UART_Init>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800209a:	f000 f95d 	bl	8002358 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	200097cc 	.word	0x200097cc
 80020a8:	40004800 	.word	0x40004800

080020ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08c      	sub	sp, #48	; 0x30
 80020b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b2:	f107 031c 	add.w	r3, r7, #28
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	609a      	str	r2, [r3, #8]
 80020be:	60da      	str	r2, [r3, #12]
 80020c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020c2:	4b47      	ldr	r3, [pc, #284]	; (80021e0 <MX_GPIO_Init+0x134>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a46      	ldr	r2, [pc, #280]	; (80021e0 <MX_GPIO_Init+0x134>)
 80020c8:	f043 0304 	orr.w	r3, r3, #4
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b44      	ldr	r3, [pc, #272]	; (80021e0 <MX_GPIO_Init+0x134>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	61bb      	str	r3, [r7, #24]
 80020d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020da:	4b41      	ldr	r3, [pc, #260]	; (80021e0 <MX_GPIO_Init+0x134>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4a40      	ldr	r2, [pc, #256]	; (80021e0 <MX_GPIO_Init+0x134>)
 80020e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020e4:	6313      	str	r3, [r2, #48]	; 0x30
 80020e6:	4b3e      	ldr	r3, [pc, #248]	; (80021e0 <MX_GPIO_Init+0x134>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f2:	4b3b      	ldr	r3, [pc, #236]	; (80021e0 <MX_GPIO_Init+0x134>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a3a      	ldr	r2, [pc, #232]	; (80021e0 <MX_GPIO_Init+0x134>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b38      	ldr	r3, [pc, #224]	; (80021e0 <MX_GPIO_Init+0x134>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800210a:	4b35      	ldr	r3, [pc, #212]	; (80021e0 <MX_GPIO_Init+0x134>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a34      	ldr	r2, [pc, #208]	; (80021e0 <MX_GPIO_Init+0x134>)
 8002110:	f043 0302 	orr.w	r3, r3, #2
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4b32      	ldr	r3, [pc, #200]	; (80021e0 <MX_GPIO_Init+0x134>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002122:	4b2f      	ldr	r3, [pc, #188]	; (80021e0 <MX_GPIO_Init+0x134>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a2e      	ldr	r2, [pc, #184]	; (80021e0 <MX_GPIO_Init+0x134>)
 8002128:	f043 0308 	orr.w	r3, r3, #8
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b2c      	ldr	r3, [pc, #176]	; (80021e0 <MX_GPIO_Init+0x134>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800213a:	4b29      	ldr	r3, [pc, #164]	; (80021e0 <MX_GPIO_Init+0x134>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a28      	ldr	r2, [pc, #160]	; (80021e0 <MX_GPIO_Init+0x134>)
 8002140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <MX_GPIO_Init+0x134>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214e:	607b      	str	r3, [r7, #4]
 8002150:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002152:	2200      	movs	r2, #0
 8002154:	f244 0181 	movw	r1, #16513	; 0x4081
 8002158:	4822      	ldr	r0, [pc, #136]	; (80021e4 <MX_GPIO_Init+0x138>)
 800215a:	f002 ff61 	bl	8005020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800215e:	2200      	movs	r2, #0
 8002160:	2140      	movs	r1, #64	; 0x40
 8002162:	4821      	ldr	r0, [pc, #132]	; (80021e8 <MX_GPIO_Init+0x13c>)
 8002164:	f002 ff5c 	bl	8005020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002168:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800216c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800216e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002172:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002178:	f107 031c 	add.w	r3, r7, #28
 800217c:	4619      	mov	r1, r3
 800217e:	481b      	ldr	r0, [pc, #108]	; (80021ec <MX_GPIO_Init+0x140>)
 8002180:	f002 fda2 	bl	8004cc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8002184:	f244 0381 	movw	r3, #16513	; 0x4081
 8002188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800218a:	2301      	movs	r3, #1
 800218c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002192:	2300      	movs	r3, #0
 8002194:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002196:	f107 031c 	add.w	r3, r7, #28
 800219a:	4619      	mov	r1, r3
 800219c:	4811      	ldr	r0, [pc, #68]	; (80021e4 <MX_GPIO_Init+0x138>)
 800219e:	f002 fd93 	bl	8004cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80021a2:	2340      	movs	r3, #64	; 0x40
 80021a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a6:	2301      	movs	r3, #1
 80021a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ae:	2300      	movs	r3, #0
 80021b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80021b2:	f107 031c 	add.w	r3, r7, #28
 80021b6:	4619      	mov	r1, r3
 80021b8:	480b      	ldr	r0, [pc, #44]	; (80021e8 <MX_GPIO_Init+0x13c>)
 80021ba:	f002 fd85 	bl	8004cc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021c2:	2300      	movs	r3, #0
 80021c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80021ca:	f107 031c 	add.w	r3, r7, #28
 80021ce:	4619      	mov	r1, r3
 80021d0:	4805      	ldr	r0, [pc, #20]	; (80021e8 <MX_GPIO_Init+0x13c>)
 80021d2:	f002 fd79 	bl	8004cc8 <HAL_GPIO_Init>

}
 80021d6:	bf00      	nop
 80021d8:	3730      	adds	r7, #48	; 0x30
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40020400 	.word	0x40020400
 80021e8:	40021800 	.word	0x40021800
 80021ec:	40020800 	.word	0x40020800

080021f0 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */

  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80021f8:	1d39      	adds	r1, r7, #4
 80021fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021fe:	2201      	movs	r2, #1
 8002200:	4803      	ldr	r0, [pc, #12]	; (8002210 <__io_putchar+0x20>)
 8002202:	f005 fff5 	bl	80081f0 <HAL_UART_Transmit>

  return ch;
 8002206:	687b      	ldr	r3, [r7, #4]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	200097cc 	.word	0x200097cc

08002214 <StartWebServerTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartWebServerTask */
void StartWebServerTask(void const * argument)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800221c:	f007 fd7c 	bl	8009d18 <MX_LWIP_Init>

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8002220:	f01e fc14 	bl	8020a4c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  http_server_init();
 8002224:	f001 fa58 	bl	80036d8 <http_server_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002228:	2001      	movs	r0, #1
 800222a:	f00e fcb7 	bl	8010b9c <osDelay>
 800222e:	e7fb      	b.n	8002228 <StartWebServerTask+0x14>

08002230 <StartSSIDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSSIDTask */
void StartSSIDTask(void const * argument)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSSIDTask */
  /* Infinite loop */
  for(;;)
  {
	   if (strlen(randomSSID) != 0) {
 8002238:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <StartSSIDTask+0x40>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d012      	beq.n	8002266 <StartSSIDTask+0x36>
			  if (HAL_GetTick() - Ti >= 500000){
 8002240:	f001 faac 	bl	800379c <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <StartSSIDTask+0x44>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	4a0a      	ldr	r2, [pc, #40]	; (8002278 <StartSSIDTask+0x48>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d909      	bls.n	8002266 <StartSSIDTask+0x36>
				  Ti = HAL_GetTick();
 8002252:	f001 faa3 	bl	800379c <HAL_GetTick>
 8002256:	4603      	mov	r3, r0
 8002258:	4a06      	ldr	r2, [pc, #24]	; (8002274 <StartSSIDTask+0x44>)
 800225a:	6013      	str	r3, [r2, #0]
				  memset(&randomSSID, '\0', sizeof(randomSSID));
 800225c:	221b      	movs	r2, #27
 800225e:	2100      	movs	r1, #0
 8002260:	4803      	ldr	r0, [pc, #12]	; (8002270 <StartSSIDTask+0x40>)
 8002262:	f01f f8ad 	bl	80213c0 <memset>
				   //printf("StartTaskToken1 \n");
			  }
	   }
    osDelay(1);
 8002266:	2001      	movs	r0, #1
 8002268:	f00e fc98 	bl	8010b9c <osDelay>
	   if (strlen(randomSSID) != 0) {
 800226c:	e7e4      	b.n	8002238 <StartSSIDTask+0x8>
 800226e:	bf00      	nop
 8002270:	20000a94 	.word	0x20000a94
 8002274:	2000b9c0 	.word	0x2000b9c0
 8002278:	0007a11f 	.word	0x0007a11f

0800227c <Start_USB_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USB_Task */
void Start_USB_Task(void const * argument)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_USB_Task */

  /* Infinite loop */
  for(;;)
	{
		switch (Appli_state) {
 8002284:	4b1f      	ldr	r3, [pc, #124]	; (8002304 <Start_USB_Task+0x88>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b03      	cmp	r3, #3
 800228a:	d838      	bhi.n	80022fe <Start_USB_Task+0x82>
 800228c:	a201      	add	r2, pc, #4	; (adr r2, 8002294 <Start_USB_Task+0x18>)
 800228e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002292:	bf00      	nop
 8002294:	080022ff 	.word	0x080022ff
 8002298:	080022ff 	.word	0x080022ff
 800229c:	080022a5 	.word	0x080022a5
 80022a0:	080022f9 	.word	0x080022f9
		case APPLICATION_IDLE:
			break;
		case APPLICATION_START:
			break;
		case APPLICATION_READY:
			Mount_USB();
 80022a4:	f7fe f9c6 	bl	8000634 <Mount_USB>

			  Check_USB_Details();   // check space details
 80022a8:	f7fe fd24 	bl	8000cf4 <Check_USB_Details>

			  Scan_USB("/");   // scan for files and directories
 80022ac:	4816      	ldr	r0, [pc, #88]	; (8002308 <Start_USB_Task+0x8c>)
 80022ae:	f7fe fa03 	bl	80006b8 <Scan_USB>

			  Create_File("/ROOTFILE.txt");
 80022b2:	4816      	ldr	r0, [pc, #88]	; (800230c <Start_USB_Task+0x90>)
 80022b4:	f7fe fb6a 	bl	800098c <Create_File>
			  Write_File("/ROOTFILE.txt", "This data should be in root file\n");
 80022b8:	4915      	ldr	r1, [pc, #84]	; (8002310 <Start_USB_Task+0x94>)
 80022ba:	4814      	ldr	r0, [pc, #80]	; (800230c <Start_USB_Task+0x90>)
 80022bc:	f7fe faa2 	bl	8000804 <Write_File>

			  Create_Dir("/DIR1");
 80022c0:	4814      	ldr	r0, [pc, #80]	; (8002314 <Start_USB_Task+0x98>)
 80022c2:	f7fe fcd7 	bl	8000c74 <Create_Dir>
			  Create_File("/DIR1/DIR1FILE.txt");
 80022c6:	4814      	ldr	r0, [pc, #80]	; (8002318 <Start_USB_Task+0x9c>)
 80022c8:	f7fe fb60 	bl	800098c <Create_File>
			  Write_File("/DIR1/DIR1FILE.txt", "This data should be in DIR1 file\n");
 80022cc:	4913      	ldr	r1, [pc, #76]	; (800231c <Start_USB_Task+0xa0>)
 80022ce:	4812      	ldr	r0, [pc, #72]	; (8002318 <Start_USB_Task+0x9c>)
 80022d0:	f7fe fa98 	bl	8000804 <Write_File>

			  Create_Dir("/DIR2");
 80022d4:	4812      	ldr	r0, [pc, #72]	; (8002320 <Start_USB_Task+0xa4>)
 80022d6:	f7fe fccd 	bl	8000c74 <Create_Dir>
			  Create_Dir("/DIR2/SUBDIR1");
 80022da:	4812      	ldr	r0, [pc, #72]	; (8002324 <Start_USB_Task+0xa8>)
 80022dc:	f7fe fcca 	bl	8000c74 <Create_Dir>
			  Create_File("/DIR2/SUBDIR1/DIR2FILE.txt");
 80022e0:	4811      	ldr	r0, [pc, #68]	; (8002328 <Start_USB_Task+0xac>)
 80022e2:	f7fe fb53 	bl	800098c <Create_File>
			  Write_File("/DIR2/SUBDIR1/DIR2FILE.txt", "This data should be in DIR2/SUBDIR1 file\n as i have nothing better to write/n so i just wrote this\n");
 80022e6:	4911      	ldr	r1, [pc, #68]	; (800232c <Start_USB_Task+0xb0>)
 80022e8:	480f      	ldr	r0, [pc, #60]	; (8002328 <Start_USB_Task+0xac>)
 80022ea:	f7fe fa8b 	bl	8000804 <Write_File>

			  Update_File("/ROOTFILE.txt", "This updated data must be in second line of Root File\n");
 80022ee:	4910      	ldr	r1, [pc, #64]	; (8002330 <Start_USB_Task+0xb4>)
 80022f0:	4806      	ldr	r0, [pc, #24]	; (800230c <Start_USB_Task+0x90>)
 80022f2:	f7fe fbe7 	bl	8000ac4 <Update_File>
			break;
 80022f6:	e003      	b.n	8002300 <Start_USB_Task+0x84>
		case APPLICATION_DISCONNECT:
			Unmount_USB();
 80022f8:	f7fe f9be 	bl	8000678 <Unmount_USB>
			break;
 80022fc:	e000      	b.n	8002300 <Start_USB_Task+0x84>
		default:
			/* do nothing */
			break;
 80022fe:	bf00      	nop
		switch (Appli_state) {
 8002300:	e7c0      	b.n	8002284 <Start_USB_Task+0x8>
 8002302:	bf00      	nop
 8002304:	2000541a 	.word	0x2000541a
 8002308:	08023788 	.word	0x08023788
 800230c:	0802378c 	.word	0x0802378c
 8002310:	0802379c 	.word	0x0802379c
 8002314:	080237c0 	.word	0x080237c0
 8002318:	080237c8 	.word	0x080237c8
 800231c:	080237dc 	.word	0x080237dc
 8002320:	08023800 	.word	0x08023800
 8002324:	08023808 	.word	0x08023808
 8002328:	08023818 	.word	0x08023818
 800232c:	08023834 	.word	0x08023834
 8002330:	08023898 	.word	0x08023898

08002334 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a04      	ldr	r2, [pc, #16]	; (8002354 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d101      	bne.n	800234a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002346:	f001 fa15 	bl	8003774 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40001000 	.word	0x40001000

08002358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800235c:	b672      	cpsid	i
}
 800235e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002360:	e7fe      	b.n	8002360 <Error_Handler+0x8>
	...

08002364 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800236a:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <HAL_MspInit+0x4c>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	4a10      	ldr	r2, [pc, #64]	; (80023b0 <HAL_MspInit+0x4c>)
 8002370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002374:	6413      	str	r3, [r2, #64]	; 0x40
 8002376:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <HAL_MspInit+0x4c>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237e:	607b      	str	r3, [r7, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002382:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <HAL_MspInit+0x4c>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002386:	4a0a      	ldr	r2, [pc, #40]	; (80023b0 <HAL_MspInit+0x4c>)
 8002388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800238c:	6453      	str	r3, [r2, #68]	; 0x44
 800238e:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <HAL_MspInit+0x4c>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800239a:	2200      	movs	r2, #0
 800239c:	210f      	movs	r1, #15
 800239e:	f06f 0001 	mvn.w	r0, #1
 80023a2:	f001 fae3 	bl	800396c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40023800 	.word	0x40023800

080023b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b0ae      	sub	sp, #184	; 0xb8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	609a      	str	r2, [r3, #8]
 80023c8:	60da      	str	r2, [r3, #12]
 80023ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	2290      	movs	r2, #144	; 0x90
 80023d2:	2100      	movs	r1, #0
 80023d4:	4618      	mov	r0, r3
 80023d6:	f01e fff3 	bl	80213c0 <memset>
  if(huart->Instance==USART3)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a22      	ldr	r2, [pc, #136]	; (8002468 <HAL_UART_MspInit+0xb4>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d13c      	bne.n	800245e <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80023e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023e8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80023ea:	2300      	movs	r3, #0
 80023ec:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023ee:	f107 0314 	add.w	r3, r7, #20
 80023f2:	4618      	mov	r0, r3
 80023f4:	f004 ffa6 	bl	8007344 <HAL_RCCEx_PeriphCLKConfig>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80023fe:	f7ff ffab 	bl	8002358 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002402:	4b1a      	ldr	r3, [pc, #104]	; (800246c <HAL_UART_MspInit+0xb8>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	4a19      	ldr	r2, [pc, #100]	; (800246c <HAL_UART_MspInit+0xb8>)
 8002408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800240c:	6413      	str	r3, [r2, #64]	; 0x40
 800240e:	4b17      	ldr	r3, [pc, #92]	; (800246c <HAL_UART_MspInit+0xb8>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800241a:	4b14      	ldr	r3, [pc, #80]	; (800246c <HAL_UART_MspInit+0xb8>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	4a13      	ldr	r2, [pc, #76]	; (800246c <HAL_UART_MspInit+0xb8>)
 8002420:	f043 0308 	orr.w	r3, r3, #8
 8002424:	6313      	str	r3, [r2, #48]	; 0x30
 8002426:	4b11      	ldr	r3, [pc, #68]	; (800246c <HAL_UART_MspInit+0xb8>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002432:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002436:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243a:	2302      	movs	r3, #2
 800243c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002446:	2303      	movs	r3, #3
 8002448:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800244c:	2307      	movs	r3, #7
 800244e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002452:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002456:	4619      	mov	r1, r3
 8002458:	4805      	ldr	r0, [pc, #20]	; (8002470 <HAL_UART_MspInit+0xbc>)
 800245a:	f002 fc35 	bl	8004cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800245e:	bf00      	nop
 8002460:	37b8      	adds	r7, #184	; 0xb8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40004800 	.word	0x40004800
 800246c:	40023800 	.word	0x40023800
 8002470:	40020c00 	.word	0x40020c00

08002474 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08c      	sub	sp, #48	; 0x30
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800247c:	2300      	movs	r3, #0
 800247e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002480:	2300      	movs	r3, #0
 8002482:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002484:	2200      	movs	r2, #0
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	2036      	movs	r0, #54	; 0x36
 800248a:	f001 fa6f 	bl	800396c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800248e:	2036      	movs	r0, #54	; 0x36
 8002490:	f001 fa88 	bl	80039a4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002494:	4b1f      	ldr	r3, [pc, #124]	; (8002514 <HAL_InitTick+0xa0>)
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	4a1e      	ldr	r2, [pc, #120]	; (8002514 <HAL_InitTick+0xa0>)
 800249a:	f043 0310 	orr.w	r3, r3, #16
 800249e:	6413      	str	r3, [r2, #64]	; 0x40
 80024a0:	4b1c      	ldr	r3, [pc, #112]	; (8002514 <HAL_InitTick+0xa0>)
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	f003 0310 	and.w	r3, r3, #16
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024ac:	f107 0210 	add.w	r2, r7, #16
 80024b0:	f107 0314 	add.w	r3, r7, #20
 80024b4:	4611      	mov	r1, r2
 80024b6:	4618      	mov	r0, r3
 80024b8:	f004 ff12 	bl	80072e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80024bc:	f004 fee8 	bl	8007290 <HAL_RCC_GetPCLK1Freq>
 80024c0:	4603      	mov	r3, r0
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c8:	4a13      	ldr	r2, [pc, #76]	; (8002518 <HAL_InitTick+0xa4>)
 80024ca:	fba2 2303 	umull	r2, r3, r2, r3
 80024ce:	0c9b      	lsrs	r3, r3, #18
 80024d0:	3b01      	subs	r3, #1
 80024d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80024d4:	4b11      	ldr	r3, [pc, #68]	; (800251c <HAL_InitTick+0xa8>)
 80024d6:	4a12      	ldr	r2, [pc, #72]	; (8002520 <HAL_InitTick+0xac>)
 80024d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80024da:	4b10      	ldr	r3, [pc, #64]	; (800251c <HAL_InitTick+0xa8>)
 80024dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024e0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80024e2:	4a0e      	ldr	r2, [pc, #56]	; (800251c <HAL_InitTick+0xa8>)
 80024e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80024e8:	4b0c      	ldr	r3, [pc, #48]	; (800251c <HAL_InitTick+0xa8>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ee:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_InitTick+0xa8>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80024f4:	4809      	ldr	r0, [pc, #36]	; (800251c <HAL_InitTick+0xa8>)
 80024f6:	f005 fb4d 	bl	8007b94 <HAL_TIM_Base_Init>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d104      	bne.n	800250a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002500:	4806      	ldr	r0, [pc, #24]	; (800251c <HAL_InitTick+0xa8>)
 8002502:	f005 fba9 	bl	8007c58 <HAL_TIM_Base_Start_IT>
 8002506:	4603      	mov	r3, r0
 8002508:	e000      	b.n	800250c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
}
 800250c:	4618      	mov	r0, r3
 800250e:	3730      	adds	r7, #48	; 0x30
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40023800 	.word	0x40023800
 8002518:	431bde83 	.word	0x431bde83
 800251c:	2000be7c 	.word	0x2000be7c
 8002520:	40001000 	.word	0x40001000

08002524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002528:	e7fe      	b.n	8002528 <NMI_Handler+0x4>

0800252a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800252a:	b480      	push	{r7}
 800252c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800252e:	e7fe      	b.n	800252e <HardFault_Handler+0x4>

08002530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002534:	e7fe      	b.n	8002534 <MemManage_Handler+0x4>

08002536 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002536:	b480      	push	{r7}
 8002538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800253a:	e7fe      	b.n	800253a <BusFault_Handler+0x4>

0800253c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002540:	e7fe      	b.n	8002540 <UsageFault_Handler+0x4>

08002542 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002554:	4802      	ldr	r0, [pc, #8]	; (8002560 <TIM6_DAC_IRQHandler+0x10>)
 8002556:	f005 fbf7 	bl	8007d48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	2000be7c 	.word	0x2000be7c

08002564 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002568:	4802      	ldr	r0, [pc, #8]	; (8002574 <ETH_IRQHandler+0x10>)
 800256a:	f001 fe0b 	bl	8004184 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	2000f860 	.word	0x2000f860

08002578 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800257c:	4802      	ldr	r0, [pc, #8]	; (8002588 <OTG_FS_IRQHandler+0x10>)
 800257e:	f002 ffd3 	bl	8005528 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	2001bd98 	.word	0x2001bd98

0800258c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
	return 1;
 8002590:	2301      	movs	r3, #1
}
 8002592:	4618      	mov	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <_kill>:

int _kill(int pid, int sig)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80025a6:	4b05      	ldr	r3, [pc, #20]	; (80025bc <_kill+0x20>)
 80025a8:	2216      	movs	r2, #22
 80025aa:	601a      	str	r2, [r3, #0]
	return -1;
 80025ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	2001b9ac 	.word	0x2001b9ac

080025c0 <_exit>:

void _exit (int status)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7ff ffe5 	bl	800259c <_kill>
	while (1) {}		/* Make sure we hang here */
 80025d2:	e7fe      	b.n	80025d2 <_exit+0x12>

080025d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	e00a      	b.n	80025fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025e6:	f3af 8000 	nop.w
 80025ea:	4601      	mov	r1, r0
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	60ba      	str	r2, [r7, #8]
 80025f2:	b2ca      	uxtb	r2, r1
 80025f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	3301      	adds	r3, #1
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	429a      	cmp	r2, r3
 8002602:	dbf0      	blt.n	80025e6 <_read+0x12>
	}

return len;
 8002604:	687b      	ldr	r3, [r7, #4]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b086      	sub	sp, #24
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
 800261e:	e009      	b.n	8002634 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	60ba      	str	r2, [r7, #8]
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff fde1 	bl	80021f0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	3301      	adds	r3, #1
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	429a      	cmp	r2, r3
 800263a:	dbf1      	blt.n	8002620 <_write+0x12>
	}
	return len;
 800263c:	687b      	ldr	r3, [r7, #4]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <_close>:

int _close(int file)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
	return -1;
 800264e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800266e:	605a      	str	r2, [r3, #4]
	return 0;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <_isatty>:

int _isatty(int file)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
	return 1;
 8002686:	2301      	movs	r3, #1
}
 8002688:	4618      	mov	r0, r3
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
	return 0;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b087      	sub	sp, #28
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026b8:	4a14      	ldr	r2, [pc, #80]	; (800270c <_sbrk+0x5c>)
 80026ba:	4b15      	ldr	r3, [pc, #84]	; (8002710 <_sbrk+0x60>)
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026c4:	4b13      	ldr	r3, [pc, #76]	; (8002714 <_sbrk+0x64>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d102      	bne.n	80026d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026cc:	4b11      	ldr	r3, [pc, #68]	; (8002714 <_sbrk+0x64>)
 80026ce:	4a12      	ldr	r2, [pc, #72]	; (8002718 <_sbrk+0x68>)
 80026d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026d2:	4b10      	ldr	r3, [pc, #64]	; (8002714 <_sbrk+0x64>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d205      	bcs.n	80026ec <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80026e0:	4b0e      	ldr	r3, [pc, #56]	; (800271c <_sbrk+0x6c>)
 80026e2:	220c      	movs	r2, #12
 80026e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026ea:	e009      	b.n	8002700 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80026ec:	4b09      	ldr	r3, [pc, #36]	; (8002714 <_sbrk+0x64>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026f2:	4b08      	ldr	r3, [pc, #32]	; (8002714 <_sbrk+0x64>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4413      	add	r3, r2
 80026fa:	4a06      	ldr	r2, [pc, #24]	; (8002714 <_sbrk+0x64>)
 80026fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026fe:	68fb      	ldr	r3, [r7, #12]
}
 8002700:	4618      	mov	r0, r3
 8002702:	371c      	adds	r7, #28
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	20080000 	.word	0x20080000
 8002710:	00000400 	.word	0x00000400
 8002714:	20000a84 	.word	0x20000a84
 8002718:	2001c0a8 	.word	0x2001c0a8
 800271c:	2001b9ac 	.word	0x2001b9ac

08002720 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <SystemInit+0x20>)
 8002726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272a:	4a05      	ldr	r2, [pc, #20]	; (8002740 <SystemInit+0x20>)
 800272c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002730:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <randomSSIDGeneration>:

//////////////////////////

// Generation SSID
char *randomSSIDGeneration(char *rSSID, int num)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
    // Initialize counter
    int i = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]

    // Array of symbols
    static const char symbols[] = "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789";

    //  the random SSID
    for (i = 0; i < num; i++) {
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	e017      	b.n	8002788 <randomSSIDGeneration+0x44>
      rSSID[i] = symbols[rand() % 61];
 8002758:	f01e ff72 	bl	8021640 <rand>
 800275c:	4601      	mov	r1, r0
 800275e:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <randomSSIDGeneration+0x60>)
 8002760:	fb83 2301 	smull	r2, r3, r3, r1
 8002764:	111a      	asrs	r2, r3, #4
 8002766:	17cb      	asrs	r3, r1, #31
 8002768:	1ad2      	subs	r2, r2, r3
 800276a:	4613      	mov	r3, r2
 800276c:	011b      	lsls	r3, r3, #4
 800276e:	1a9b      	subs	r3, r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	1aca      	subs	r2, r1, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	440b      	add	r3, r1
 800277c:	490a      	ldr	r1, [pc, #40]	; (80027a8 <randomSSIDGeneration+0x64>)
 800277e:	5c8a      	ldrb	r2, [r1, r2]
 8002780:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num; i++) {
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	3301      	adds	r3, #1
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	dbe3      	blt.n	8002758 <randomSSIDGeneration+0x14>
    }
    rSSID[num]='\0';
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	4413      	add	r3, r2
 8002796:	2200      	movs	r2, #0
 8002798:	701a      	strb	r2, [r3, #0]

    return rSSID;
 800279a:	687b      	ldr	r3, [r7, #4]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	4325c53f 	.word	0x4325c53f
 80027a8:	08027098 	.word	0x08027098

080027ac <restartSSID>:


// Restart SSID
void restartSSID(void){
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
		Ti = HAL_GetTick();
 80027b0:	f000 fff4 	bl	800379c <HAL_GetTick>
 80027b4:	4603      	mov	r3, r0
 80027b6:	4a02      	ldr	r2, [pc, #8]	; (80027c0 <restartSSID+0x14>)
 80027b8:	6013      	str	r3, [r2, #0]
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	2000b9c0 	.word	0x2000b9c0

080027c4 <MultiPartTabCount>:
//////////////////////////////  SSI MULTIPART Function  ///////////////////////


// Counting the number of lines JSON
int MultiPartTabCount(int num, int pinnum)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
	int count = 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i <= pinnum; i++){
 80027d2:	2300      	movs	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	e022      	b.n	800281e <MultiPartTabCount+0x5a>
		if(num == PinsConf[i].topin && num == 1){
 80027d8:	4a16      	ldr	r2, [pc, #88]	; (8002834 <MultiPartTabCount+0x70>)
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2194      	movs	r1, #148	; 0x94
 80027de:	fb01 f303 	mul.w	r3, r1, r3
 80027e2:	4413      	add	r3, r2
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d105      	bne.n	80027f8 <MultiPartTabCount+0x34>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d102      	bne.n	80027f8 <MultiPartTabCount+0x34>
			count++;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	3301      	adds	r3, #1
 80027f6:	60fb      	str	r3, [r7, #12]
		}
		if(num == PinsConf[i].topin && num == 2){
 80027f8:	4a0e      	ldr	r2, [pc, #56]	; (8002834 <MultiPartTabCount+0x70>)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2194      	movs	r1, #148	; 0x94
 80027fe:	fb01 f303 	mul.w	r3, r1, r3
 8002802:	4413      	add	r3, r2
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	429a      	cmp	r2, r3
 800280a:	d105      	bne.n	8002818 <MultiPartTabCount+0x54>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d102      	bne.n	8002818 <MultiPartTabCount+0x54>
			count++;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	3301      	adds	r3, #1
 8002816:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i <= pinnum; i++){
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	3301      	adds	r3, #1
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	ddd8      	ble.n	80027d8 <MultiPartTabCount+0x14>
		}
	}
	return count;
 8002826:	68fb      	ldr	r3, [r7, #12]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	20005458 	.word	0x20005458

08002838 <ssi_handler>:


const uint8_t SSI_TAG_NUM = (sizeof(TAGCHAR) / sizeof(TAGCHAR[0]));

static u16_t ssi_handler(int iIndex, char *pcInsert, int iInsertLen,
		u16_t current_tag_part, u16_t *next_tag_part) {
 8002838:	b5f0      	push	{r4, r5, r6, r7, lr}
 800283a:	b09b      	sub	sp, #108	; 0x6c
 800283c:	af0c      	add	r7, sp, #48	; 0x30
 800283e:	6278      	str	r0, [r7, #36]	; 0x24
 8002840:	6239      	str	r1, [r7, #32]
 8002842:	61fa      	str	r2, [r7, #28]
 8002844:	837b      	strh	r3, [r7, #26]

	char* str = NULL;
 8002846:	2300      	movs	r3, #0
 8002848:	637b      	str	r3, [r7, #52]	; 0x34
	cJSON *root = NULL;
 800284a:	2300      	movs	r3, #0
 800284c:	633b      	str	r3, [r7, #48]	; 0x30
	cJSON *fld = NULL;
 800284e:	2300      	movs	r3, #0
 8002850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	2b03      	cmp	r3, #3
 8002856:	f200 820d 	bhi.w	8002c74 <ssi_handler+0x43c>
 800285a:	a201      	add	r2, pc, #4	; (adr r2, 8002860 <ssi_handler+0x28>)
 800285c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002860:	08002871 	.word	0x08002871
 8002864:	08002ba9 	.word	0x08002ba9
 8002868:	08002bbf 	.word	0x08002bbf
 800286c:	08002c4d 	.word	0x08002c4d

	switch (iIndex) {
	// ssi tag <!--#tabjson-->
	case 0:
	#if LWIP_HTTPD_SSI_MULTIPART
		if (variable == NUMPIN) {
 8002870:	4b65      	ldr	r3, [pc, #404]	; (8002a08 <ssi_handler+0x1d0>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b59      	cmp	r3, #89	; 0x59
 8002876:	d106      	bne.n	8002886 <ssi_handler+0x4e>
			variable = 0;
 8002878:	4b63      	ldr	r3, [pc, #396]	; (8002a08 <ssi_handler+0x1d0>)
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
			countJson = 0;
 800287e:	4b63      	ldr	r3, [pc, #396]	; (8002a0c <ssi_handler+0x1d4>)
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
			break;
 8002884:	e1f7      	b.n	8002c76 <ssi_handler+0x43e>
		} else {
			///////
			if(tab == 1){
 8002886:	4b62      	ldr	r3, [pc, #392]	; (8002a10 <ssi_handler+0x1d8>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d125      	bne.n	80028da <ssi_handler+0xa2>
				sprintf(pcInsert,"{\"id\":%d,\"pins\":\"%s\",\"topin\":%d},",
 800288e:	4b5e      	ldr	r3, [pc, #376]	; (8002a08 <ssi_handler+0x1d0>)
 8002890:	6819      	ldr	r1, [r3, #0]
						variable, PinsInfo[variable].pins, PinsConf[variable].topin);
 8002892:	4b5d      	ldr	r3, [pc, #372]	; (8002a08 <ssi_handler+0x1d0>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4a5d      	ldr	r2, [pc, #372]	; (8002a14 <ssi_handler+0x1dc>)
 80028a0:	441a      	add	r2, r3
				sprintf(pcInsert,"{\"id\":%d,\"pins\":\"%s\",\"topin\":%d},",
 80028a2:	4b59      	ldr	r3, [pc, #356]	; (8002a08 <ssi_handler+0x1d0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	485c      	ldr	r0, [pc, #368]	; (8002a18 <ssi_handler+0x1e0>)
 80028a8:	2494      	movs	r4, #148	; 0x94
 80028aa:	fb04 f303 	mul.w	r3, r4, r3
 80028ae:	4403      	add	r3, r0
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	4613      	mov	r3, r2
 80028b6:	460a      	mov	r2, r1
 80028b8:	4958      	ldr	r1, [pc, #352]	; (8002a1c <ssi_handler+0x1e4>)
 80028ba:	6a38      	ldr	r0, [r7, #32]
 80028bc:	f01e ffb6 	bl	802182c <siprintf>

				if(variable == (NUMPIN-1)){
 80028c0:	4b51      	ldr	r3, [pc, #324]	; (8002a08 <ssi_handler+0x1d0>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b58      	cmp	r3, #88	; 0x58
 80028c6:	d108      	bne.n	80028da <ssi_handler+0xa2>
					pcInsert[strlen(pcInsert) - 1] = '\0'; // Удаляем "," из JSON
 80028c8:	6a38      	ldr	r0, [r7, #32]
 80028ca:	f7fd fcc3 	bl	8000254 <strlen>
 80028ce:	4603      	mov	r3, r0
 80028d0:	3b01      	subs	r3, #1
 80028d2:	6a3a      	ldr	r2, [r7, #32]
 80028d4:	4413      	add	r3, r2
 80028d6:	2200      	movs	r2, #0
 80028d8:	701a      	strb	r2, [r3, #0]
				}
			}
			if(tab == 2){
 80028da:	4b4d      	ldr	r3, [pc, #308]	; (8002a10 <ssi_handler+0x1d8>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	f040 80b3 	bne.w	8002a4a <ssi_handler+0x212>
				if(PinsConf[variable].topin == 1){
 80028e4:	4b48      	ldr	r3, [pc, #288]	; (8002a08 <ssi_handler+0x1d0>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a4b      	ldr	r2, [pc, #300]	; (8002a18 <ssi_handler+0x1e0>)
 80028ea:	2194      	movs	r1, #148	; 0x94
 80028ec:	fb01 f303 	mul.w	r3, r1, r3
 80028f0:	4413      	add	r3, r2
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	f040 8097 	bne.w	8002a28 <ssi_handler+0x1f0>
					// buttoms json
					sprintf(pcInsert,
 80028fa:	4b43      	ldr	r3, [pc, #268]	; (8002a08 <ssi_handler+0x1d0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a46      	ldr	r2, [pc, #280]	; (8002a18 <ssi_handler+0x1e0>)
 8002900:	2194      	movs	r1, #148	; 0x94
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	4413      	add	r3, r2
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	4b3e      	ldr	r3, [pc, #248]	; (8002a08 <ssi_handler+0x1d0>)
 800290e:	6819      	ldr	r1, [r3, #0]
 8002910:	6139      	str	r1, [r7, #16]
							"{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"binter\":%d,\"hinter\":%d,\"repeat\":%d,\"rinter\":%d,\"dcinter\":%d,\"pclick\":%d,\"pinact\":%s,\"info\":\"%s\",\"onoff\":%d},",
							PinsConf[variable].topin, variable, PinsInfo[variable].pins,
 8002912:	4b3d      	ldr	r3, [pc, #244]	; (8002a08 <ssi_handler+0x1d0>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4a3d      	ldr	r2, [pc, #244]	; (8002a14 <ssi_handler+0x1dc>)
 8002920:	1899      	adds	r1, r3, r2
 8002922:	60f9      	str	r1, [r7, #12]
							PinsConf[variable].ptype, PinsConf[variable].binter,
 8002924:	4b38      	ldr	r3, [pc, #224]	; (8002a08 <ssi_handler+0x1d0>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2294      	movs	r2, #148	; 0x94
 800292a:	fb02 f303 	mul.w	r3, r2, r3
 800292e:	3318      	adds	r3, #24
 8002930:	4a39      	ldr	r2, [pc, #228]	; (8002a18 <ssi_handler+0x1e0>)
 8002932:	189c      	adds	r4, r3, r2
					sprintf(pcInsert,
 8002934:	4b34      	ldr	r3, [pc, #208]	; (8002a08 <ssi_handler+0x1d0>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a37      	ldr	r2, [pc, #220]	; (8002a18 <ssi_handler+0x1e0>)
 800293a:	2194      	movs	r1, #148	; 0x94
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	4413      	add	r3, r2
 8002942:	332c      	adds	r3, #44	; 0x2c
 8002944:	681d      	ldr	r5, [r3, #0]
 8002946:	4b30      	ldr	r3, [pc, #192]	; (8002a08 <ssi_handler+0x1d0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a33      	ldr	r2, [pc, #204]	; (8002a18 <ssi_handler+0x1e0>)
 800294c:	2194      	movs	r1, #148	; 0x94
 800294e:	fb01 f303 	mul.w	r3, r1, r3
 8002952:	4413      	add	r3, r2
 8002954:	3330      	adds	r3, #48	; 0x30
 8002956:	681e      	ldr	r6, [r3, #0]
 8002958:	4b2b      	ldr	r3, [pc, #172]	; (8002a08 <ssi_handler+0x1d0>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a2e      	ldr	r2, [pc, #184]	; (8002a18 <ssi_handler+0x1e0>)
 800295e:	2194      	movs	r1, #148	; 0x94
 8002960:	fb01 f303 	mul.w	r3, r1, r3
 8002964:	4413      	add	r3, r2
 8002966:	3334      	adds	r3, #52	; 0x34
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	60ba      	str	r2, [r7, #8]
 800296c:	4b26      	ldr	r3, [pc, #152]	; (8002a08 <ssi_handler+0x1d0>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a29      	ldr	r2, [pc, #164]	; (8002a18 <ssi_handler+0x1e0>)
 8002972:	2194      	movs	r1, #148	; 0x94
 8002974:	fb01 f303 	mul.w	r3, r1, r3
 8002978:	4413      	add	r3, r2
 800297a:	3338      	adds	r3, #56	; 0x38
 800297c:	6819      	ldr	r1, [r3, #0]
 800297e:	6079      	str	r1, [r7, #4]
 8002980:	4b21      	ldr	r3, [pc, #132]	; (8002a08 <ssi_handler+0x1d0>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a24      	ldr	r2, [pc, #144]	; (8002a18 <ssi_handler+0x1e0>)
 8002986:	2194      	movs	r1, #148	; 0x94
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	4413      	add	r3, r2
 800298e:	333c      	adds	r3, #60	; 0x3c
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	603b      	str	r3, [r7, #0]
 8002994:	4b1c      	ldr	r3, [pc, #112]	; (8002a08 <ssi_handler+0x1d0>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a1f      	ldr	r2, [pc, #124]	; (8002a18 <ssi_handler+0x1e0>)
 800299a:	2194      	movs	r1, #148	; 0x94
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	3340      	adds	r3, #64	; 0x40
 80029a4:	6819      	ldr	r1, [r3, #0]
							PinsConf[variable].hinter, PinsConf[variable].repeat,
							PinsConf[variable].rinter, PinsConf[variable].dcinter,
							PinsConf[variable].pclick, "test", PinsConf[variable].info,
 80029a6:	4b18      	ldr	r3, [pc, #96]	; (8002a08 <ssi_handler+0x1d0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2294      	movs	r2, #148	; 0x94
 80029ac:	fb02 f303 	mul.w	r3, r2, r3
 80029b0:	3340      	adds	r3, #64	; 0x40
 80029b2:	4a19      	ldr	r2, [pc, #100]	; (8002a18 <ssi_handler+0x1e0>)
 80029b4:	4413      	add	r3, r2
 80029b6:	1d1a      	adds	r2, r3, #4
					sprintf(pcInsert,
 80029b8:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <ssi_handler+0x1d0>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4816      	ldr	r0, [pc, #88]	; (8002a18 <ssi_handler+0x1e0>)
 80029be:	f04f 0c94 	mov.w	ip, #148	; 0x94
 80029c2:	fb0c f303 	mul.w	r3, ip, r3
 80029c6:	4403      	add	r3, r0
 80029c8:	3364      	adds	r3, #100	; 0x64
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	930a      	str	r3, [sp, #40]	; 0x28
 80029ce:	9209      	str	r2, [sp, #36]	; 0x24
 80029d0:	4b13      	ldr	r3, [pc, #76]	; (8002a20 <ssi_handler+0x1e8>)
 80029d2:	9308      	str	r3, [sp, #32]
 80029d4:	9107      	str	r1, [sp, #28]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	9306      	str	r3, [sp, #24]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	9105      	str	r1, [sp, #20]
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	9204      	str	r2, [sp, #16]
 80029e2:	9603      	str	r6, [sp, #12]
 80029e4:	9502      	str	r5, [sp, #8]
 80029e6:	9401      	str	r4, [sp, #4]
 80029e8:	68f9      	ldr	r1, [r7, #12]
 80029ea:	9100      	str	r1, [sp, #0]
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	490c      	ldr	r1, [pc, #48]	; (8002a24 <ssi_handler+0x1ec>)
 80029f2:	6a38      	ldr	r0, [r7, #32]
 80029f4:	f01e ff1a 	bl	802182c <siprintf>
							PinsConf[variable].onoff);
					countJson++;
 80029f8:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <ssi_handler+0x1d4>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	3301      	adds	r3, #1
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	4b02      	ldr	r3, [pc, #8]	; (8002a0c <ssi_handler+0x1d4>)
 8002a02:	701a      	strb	r2, [r3, #0]
 8002a04:	e012      	b.n	8002a2c <ssi_handler+0x1f4>
 8002a06:	bf00      	nop
 8002a08:	20000a8c 	.word	0x20000a8c
 8002a0c:	20000a93 	.word	0x20000a93
 8002a10:	20000a91 	.word	0x20000a91
 8002a14:	2000000c 	.word	0x2000000c
 8002a18:	20005458 	.word	0x20005458
 8002a1c:	080238f0 	.word	0x080238f0
 8002a20:	080239b0 	.word	0x080239b0
 8002a24:	08023914 	.word	0x08023914
					////////////////
				} else {
					pcInsert = "";
 8002a28:	4b97      	ldr	r3, [pc, #604]	; (8002c88 <ssi_handler+0x450>)
 8002a2a:	623b      	str	r3, [r7, #32]
				}

				if(countJson == numTabLine){
 8002a2c:	4b97      	ldr	r3, [pc, #604]	; (8002c8c <ssi_handler+0x454>)
 8002a2e:	781a      	ldrb	r2, [r3, #0]
 8002a30:	4b97      	ldr	r3, [pc, #604]	; (8002c90 <ssi_handler+0x458>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d108      	bne.n	8002a4a <ssi_handler+0x212>
					pcInsert[strlen(pcInsert) - 1] = '\0'; // Удаляем "," из JSON
 8002a38:	6a38      	ldr	r0, [r7, #32]
 8002a3a:	f7fd fc0b 	bl	8000254 <strlen>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	3b01      	subs	r3, #1
 8002a42:	6a3a      	ldr	r2, [r7, #32]
 8002a44:	4413      	add	r3, r2
 8002a46:	2200      	movs	r2, #0
 8002a48:	701a      	strb	r2, [r3, #0]
				}
			}
			if(tab == 3){
 8002a4a:	4b92      	ldr	r3, [pc, #584]	; (8002c94 <ssi_handler+0x45c>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	f040 809a 	bne.w	8002b88 <ssi_handler+0x350>
				if(PinsConf[variable].topin == 2){
 8002a54:	4b90      	ldr	r3, [pc, #576]	; (8002c98 <ssi_handler+0x460>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a90      	ldr	r2, [pc, #576]	; (8002c9c <ssi_handler+0x464>)
 8002a5a:	2194      	movs	r1, #148	; 0x94
 8002a5c:	fb01 f303 	mul.w	r3, r1, r3
 8002a60:	4413      	add	r3, r2
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d17e      	bne.n	8002b66 <ssi_handler+0x32e>
					// relay json
					sprintf(pcInsert,
 8002a68:	4b8b      	ldr	r3, [pc, #556]	; (8002c98 <ssi_handler+0x460>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a8b      	ldr	r2, [pc, #556]	; (8002c9c <ssi_handler+0x464>)
 8002a6e:	2194      	movs	r1, #148	; 0x94
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	4413      	add	r3, r2
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	4b87      	ldr	r3, [pc, #540]	; (8002c98 <ssi_handler+0x460>)
 8002a7c:	6819      	ldr	r1, [r3, #0]
 8002a7e:	6139      	str	r1, [r7, #16]
							"{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"pwm\":%d,\"on\":%d,\"istate\":%d,\"dvalue\":%d,\"ponr\":%d,\"info\":\"%s\",\"onoff\":%d},",
							PinsConf[variable].topin, variable, PinsInfo[variable].pins,
 8002a80:	4b85      	ldr	r3, [pc, #532]	; (8002c98 <ssi_handler+0x460>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4a84      	ldr	r2, [pc, #528]	; (8002ca0 <ssi_handler+0x468>)
 8002a8e:	4413      	add	r3, r2
							PinsConf[variable].ptype, PinsConf[variable].pwm, PinsConf[variable].on,
 8002a90:	4a81      	ldr	r2, [pc, #516]	; (8002c98 <ssi_handler+0x460>)
 8002a92:	6812      	ldr	r2, [r2, #0]
 8002a94:	2194      	movs	r1, #148	; 0x94
 8002a96:	fb01 f202 	mul.w	r2, r1, r2
 8002a9a:	3218      	adds	r2, #24
 8002a9c:	497f      	ldr	r1, [pc, #508]	; (8002c9c <ssi_handler+0x464>)
 8002a9e:	440a      	add	r2, r1
					sprintf(pcInsert,
 8002aa0:	497d      	ldr	r1, [pc, #500]	; (8002c98 <ssi_handler+0x460>)
 8002aa2:	6809      	ldr	r1, [r1, #0]
 8002aa4:	487d      	ldr	r0, [pc, #500]	; (8002c9c <ssi_handler+0x464>)
 8002aa6:	2494      	movs	r4, #148	; 0x94
 8002aa8:	fb04 f101 	mul.w	r1, r4, r1
 8002aac:	4401      	add	r1, r0
 8002aae:	3104      	adds	r1, #4
 8002ab0:	6809      	ldr	r1, [r1, #0]
 8002ab2:	4879      	ldr	r0, [pc, #484]	; (8002c98 <ssi_handler+0x460>)
 8002ab4:	6800      	ldr	r0, [r0, #0]
 8002ab6:	4c79      	ldr	r4, [pc, #484]	; (8002c9c <ssi_handler+0x464>)
 8002ab8:	2594      	movs	r5, #148	; 0x94
 8002aba:	fb05 f000 	mul.w	r0, r5, r0
 8002abe:	4420      	add	r0, r4
 8002ac0:	3008      	adds	r0, #8
 8002ac2:	6800      	ldr	r0, [r0, #0]
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	4c74      	ldr	r4, [pc, #464]	; (8002c98 <ssi_handler+0x460>)
 8002ac8:	6824      	ldr	r4, [r4, #0]
 8002aca:	4d74      	ldr	r5, [pc, #464]	; (8002c9c <ssi_handler+0x464>)
 8002acc:	2694      	movs	r6, #148	; 0x94
 8002ace:	fb06 f404 	mul.w	r4, r6, r4
 8002ad2:	442c      	add	r4, r5
 8002ad4:	340c      	adds	r4, #12
 8002ad6:	6820      	ldr	r0, [r4, #0]
 8002ad8:	60b8      	str	r0, [r7, #8]
 8002ada:	4d6f      	ldr	r5, [pc, #444]	; (8002c98 <ssi_handler+0x460>)
 8002adc:	682d      	ldr	r5, [r5, #0]
 8002ade:	4e6f      	ldr	r6, [pc, #444]	; (8002c9c <ssi_handler+0x464>)
 8002ae0:	f04f 0c94 	mov.w	ip, #148	; 0x94
 8002ae4:	fb0c f505 	mul.w	r5, ip, r5
 8002ae8:	4435      	add	r5, r6
 8002aea:	3510      	adds	r5, #16
 8002aec:	682d      	ldr	r5, [r5, #0]
 8002aee:	4e6a      	ldr	r6, [pc, #424]	; (8002c98 <ssi_handler+0x460>)
 8002af0:	6836      	ldr	r6, [r6, #0]
 8002af2:	486a      	ldr	r0, [pc, #424]	; (8002c9c <ssi_handler+0x464>)
 8002af4:	f04f 0c94 	mov.w	ip, #148	; 0x94
 8002af8:	fb0c f606 	mul.w	r6, ip, r6
 8002afc:	4406      	add	r6, r0
 8002afe:	3614      	adds	r6, #20
 8002b00:	6836      	ldr	r6, [r6, #0]
							PinsConf[variable].istate, PinsConf[variable].dvalue,
							PinsConf[variable].ponr, PinsConf[variable].info,
 8002b02:	4865      	ldr	r0, [pc, #404]	; (8002c98 <ssi_handler+0x460>)
 8002b04:	6800      	ldr	r0, [r0, #0]
 8002b06:	f04f 0c94 	mov.w	ip, #148	; 0x94
 8002b0a:	fb0c fc00 	mul.w	ip, ip, r0
 8002b0e:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8002b12:	4862      	ldr	r0, [pc, #392]	; (8002c9c <ssi_handler+0x464>)
 8002b14:	4484      	add	ip, r0
 8002b16:	f10c 0004 	add.w	r0, ip, #4
 8002b1a:	6078      	str	r0, [r7, #4]
					sprintf(pcInsert,
 8002b1c:	485e      	ldr	r0, [pc, #376]	; (8002c98 <ssi_handler+0x460>)
 8002b1e:	6800      	ldr	r0, [r0, #0]
 8002b20:	4c5e      	ldr	r4, [pc, #376]	; (8002c9c <ssi_handler+0x464>)
 8002b22:	f04f 0c94 	mov.w	ip, #148	; 0x94
 8002b26:	fb0c fc00 	mul.w	ip, ip, r0
 8002b2a:	44a4      	add	ip, r4
 8002b2c:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 8002b30:	f8dc 0000 	ldr.w	r0, [ip]
 8002b34:	9008      	str	r0, [sp, #32]
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	9007      	str	r0, [sp, #28]
 8002b3a:	9606      	str	r6, [sp, #24]
 8002b3c:	9505      	str	r5, [sp, #20]
 8002b3e:	68b8      	ldr	r0, [r7, #8]
 8002b40:	9004      	str	r0, [sp, #16]
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	9003      	str	r0, [sp, #12]
 8002b46:	9102      	str	r1, [sp, #8]
 8002b48:	9201      	str	r2, [sp, #4]
 8002b4a:	9300      	str	r3, [sp, #0]
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	4954      	ldr	r1, [pc, #336]	; (8002ca4 <ssi_handler+0x46c>)
 8002b52:	6a38      	ldr	r0, [r7, #32]
 8002b54:	f01e fe6a 	bl	802182c <siprintf>
							PinsConf[variable].onoff);
					////////////////
					countJson++;
 8002b58:	4b4c      	ldr	r3, [pc, #304]	; (8002c8c <ssi_handler+0x454>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	4b4a      	ldr	r3, [pc, #296]	; (8002c8c <ssi_handler+0x454>)
 8002b62:	701a      	strb	r2, [r3, #0]
 8002b64:	e001      	b.n	8002b6a <ssi_handler+0x332>
				} else {
					pcInsert = "";
 8002b66:	4b48      	ldr	r3, [pc, #288]	; (8002c88 <ssi_handler+0x450>)
 8002b68:	623b      	str	r3, [r7, #32]
				}

				if(countJson == numTabLine){
 8002b6a:	4b48      	ldr	r3, [pc, #288]	; (8002c8c <ssi_handler+0x454>)
 8002b6c:	781a      	ldrb	r2, [r3, #0]
 8002b6e:	4b48      	ldr	r3, [pc, #288]	; (8002c90 <ssi_handler+0x458>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d108      	bne.n	8002b88 <ssi_handler+0x350>
					pcInsert[strlen(pcInsert) - 1] = '\0'; // Удаляем "," из JSON
 8002b76:	6a38      	ldr	r0, [r7, #32]
 8002b78:	f7fd fb6c 	bl	8000254 <strlen>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	6a3a      	ldr	r2, [r7, #32]
 8002b82:	4413      	add	r3, r2
 8002b84:	2200      	movs	r2, #0
 8002b86:	701a      	strb	r2, [r3, #0]
				}
			}
			*next_tag_part = variable;
 8002b88:	4b43      	ldr	r3, [pc, #268]	; (8002c98 <ssi_handler+0x460>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b90:	801a      	strh	r2, [r3, #0]
			variable++;
 8002b92:	4b41      	ldr	r3, [pc, #260]	; (8002c98 <ssi_handler+0x460>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	3301      	adds	r3, #1
 8002b98:	4a3f      	ldr	r2, [pc, #252]	; (8002c98 <ssi_handler+0x460>)
 8002b9a:	6013      	str	r3, [r2, #0]
			return strlen(pcInsert);
 8002b9c:	6a38      	ldr	r0, [r7, #32]
 8002b9e:	f7fd fb59 	bl	8000254 <strlen>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	e067      	b.n	8002c78 <ssi_handler+0x440>
		printf("LWIP_HTTPD_SSI_MULTIPART disabled /n");
	#endif
		break;
		// ssi tag  <!--#ssid-->
		case 1:
			sprintf(pcInsert, "%s", randomSSID);
 8002ba8:	4a3f      	ldr	r2, [pc, #252]	; (8002ca8 <ssi_handler+0x470>)
 8002baa:	4940      	ldr	r1, [pc, #256]	; (8002cac <ssi_handler+0x474>)
 8002bac:	6a38      	ldr	r0, [r7, #32]
 8002bae:	f01e fe3d 	bl	802182c <siprintf>
			return strlen(pcInsert);
 8002bb2:	6a38      	ldr	r0, [r7, #32]
 8002bb4:	f7fd fb4e 	bl	8000254 <strlen>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	e05c      	b.n	8002c78 <ssi_handler+0x440>
			break;

		// ssi tag <!--#check-->
		case 2:
			root = cJSON_CreateArray();
 8002bbe:	f7ff f93f 	bl	8001e40 <cJSON_CreateArray>
 8002bc2:	6338      	str	r0, [r7, #48]	; 0x30
			fld = cJSON_CreateObject();
 8002bc4:	f7ff f950 	bl	8001e68 <cJSON_CreateObject>
 8002bc8:	62f8      	str	r0, [r7, #44]	; 0x2c
			cJSON_AddItemToArray(root, fld = cJSON_CreateObject());
 8002bca:	f7ff f94d 	bl	8001e68 <cJSON_CreateObject>
 8002bce:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002bd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bd4:	f7ff f80d 	bl	8001bf2 <cJSON_AddItemToArray>

			if(verifyNum == 2){
 8002bd8:	4b35      	ldr	r3, [pc, #212]	; (8002cb0 <ssi_handler+0x478>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d115      	bne.n	8002c0c <ssi_handler+0x3d4>
				memset(randomSSID, '\0', sizeof(randomSSID));
 8002be0:	221b      	movs	r2, #27
 8002be2:	2100      	movs	r1, #0
 8002be4:	4830      	ldr	r0, [pc, #192]	; (8002ca8 <ssi_handler+0x470>)
 8002be6:	f01e fbeb 	bl	80213c0 <memset>
				cJSON_AddNumberToObject(fld, "login", 1);
 8002bea:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8002bee:	4931      	ldr	r1, [pc, #196]	; (8002cb4 <ssi_handler+0x47c>)
 8002bf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002bf2:	f7ff f86d 	bl	8001cd0 <cJSON_AddNumberToObject>
				cJSON_AddStringToObject(fld, "ssid", randomSSIDGeneration(randomSSID, 27));
 8002bf6:	211b      	movs	r1, #27
 8002bf8:	482b      	ldr	r0, [pc, #172]	; (8002ca8 <ssi_handler+0x470>)
 8002bfa:	f7ff fda3 	bl	8002744 <randomSSIDGeneration>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	461a      	mov	r2, r3
 8002c02:	492d      	ldr	r1, [pc, #180]	; (8002cb8 <ssi_handler+0x480>)
 8002c04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c06:	f7ff f887 	bl	8001d18 <cJSON_AddStringToObject>
 8002c0a:	e00a      	b.n	8002c22 <ssi_handler+0x3ea>
			} else {
				cJSON_AddNumberToObject(fld, "login", 0);
 8002c0c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8002c80 <ssi_handler+0x448>
 8002c10:	4928      	ldr	r1, [pc, #160]	; (8002cb4 <ssi_handler+0x47c>)
 8002c12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c14:	f7ff f85c 	bl	8001cd0 <cJSON_AddNumberToObject>
				cJSON_AddStringToObject(fld, "ssid", "");
 8002c18:	4a1b      	ldr	r2, [pc, #108]	; (8002c88 <ssi_handler+0x450>)
 8002c1a:	4927      	ldr	r1, [pc, #156]	; (8002cb8 <ssi_handler+0x480>)
 8002c1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002c1e:	f7ff f87b 	bl	8001d18 <cJSON_AddStringToObject>
			}

			str = cJSON_Print(root);
 8002c22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c24:	f7fe fd06 	bl	8001634 <cJSON_Print>
 8002c28:	6378      	str	r0, [r7, #52]	; 0x34
			cJSON_Delete(root);
 8002c2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c2c:	f7fe f90c 	bl	8000e48 <cJSON_Delete>
			sprintf(pcInsert, "%s", str);
 8002c30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c32:	491e      	ldr	r1, [pc, #120]	; (8002cac <ssi_handler+0x474>)
 8002c34:	6a38      	ldr	r0, [r7, #32]
 8002c36:	f01e fdf9 	bl	802182c <siprintf>
			verifyNum = 0;
 8002c3a:	4b1d      	ldr	r3, [pc, #116]	; (8002cb0 <ssi_handler+0x478>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]

			return strlen(pcInsert);
 8002c40:	6a38      	ldr	r0, [r7, #32]
 8002c42:	f7fd fb07 	bl	8000254 <strlen>
 8002c46:	4603      	mov	r3, r0
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	e015      	b.n	8002c78 <ssi_handler+0x440>
			break;

		// ssi tag <!--#menu-->
		case 3:
			sprintf(pcInsert,"<a href=\"index.shtml?ssid=%s\">Home</a> | <a href=\"select.shtml?ssid=%s\">Select pin</a> | <a href=\"tabbuttom.shtml?ssid=%s\">Buttom pin</a> | <a href=\"tabrelay.shtml?ssid=%s\">Relay pin</a> | <a href=\"timers.shtml?ssid=%s\">Timers</a> | <a href=\"settings.shtml?ssid=%s\">Settings</a> | <a href=\"logout.shtml\">Logout</a> ", randomSSID,randomSSID,randomSSID,randomSSID,randomSSID,randomSSID);
 8002c4c:	4b16      	ldr	r3, [pc, #88]	; (8002ca8 <ssi_handler+0x470>)
 8002c4e:	9303      	str	r3, [sp, #12]
 8002c50:	4b15      	ldr	r3, [pc, #84]	; (8002ca8 <ssi_handler+0x470>)
 8002c52:	9302      	str	r3, [sp, #8]
 8002c54:	4b14      	ldr	r3, [pc, #80]	; (8002ca8 <ssi_handler+0x470>)
 8002c56:	9301      	str	r3, [sp, #4]
 8002c58:	4b13      	ldr	r3, [pc, #76]	; (8002ca8 <ssi_handler+0x470>)
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <ssi_handler+0x470>)
 8002c5e:	4a12      	ldr	r2, [pc, #72]	; (8002ca8 <ssi_handler+0x470>)
 8002c60:	4916      	ldr	r1, [pc, #88]	; (8002cbc <ssi_handler+0x484>)
 8002c62:	6a38      	ldr	r0, [r7, #32]
 8002c64:	f01e fde2 	bl	802182c <siprintf>
			return strlen(pcInsert);
 8002c68:	6a38      	ldr	r0, [r7, #32]
 8002c6a:	f7fd faf3 	bl	8000254 <strlen>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	e001      	b.n	8002c78 <ssi_handler+0x440>
			break;



		default:
			break;
 8002c74:	bf00      	nop
	}
	return 0;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	373c      	adds	r7, #60	; 0x3c
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...
 8002c88:	080239b8 	.word	0x080239b8
 8002c8c:	20000a93 	.word	0x20000a93
 8002c90:	20000a92 	.word	0x20000a92
 8002c94:	20000a91 	.word	0x20000a91
 8002c98:	20000a8c 	.word	0x20000a8c
 8002c9c:	20005458 	.word	0x20005458
 8002ca0:	2000000c 	.word	0x2000000c
 8002ca4:	080239bc 	.word	0x080239bc
 8002ca8:	20000a94 	.word	0x20000a94
 8002cac:	08023a38 	.word	0x08023a38
 8002cb0:	20000a90 	.word	0x20000a90
 8002cb4:	08023a3c 	.word	0x08023a3c
 8002cb8:	080238d8 	.word	0x080238d8
 8002cbc:	08023a44 	.word	0x08023a44

08002cc0 <FormCGI_Handler>:
const uint8_t CGI_URL_NUM = (sizeof(URL_TABLES) / sizeof(tCGI));


// index.shtml Handler (Index 0)
const char* FormCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08c      	sub	sp, #48	; 0x30
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	603b      	str	r3, [r7, #0]

	char ssid[27] = {0};
 8002cce:	2300      	movs	r3, #0
 8002cd0:	613b      	str	r3, [r7, #16]
 8002cd2:	f107 0314 	add.w	r3, r7, #20
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	605a      	str	r2, [r3, #4]
 8002cdc:	609a      	str	r2, [r3, #8]
 8002cde:	60da      	str	r2, [r3, #12]
 8002ce0:	611a      	str	r2, [r3, #16]
 8002ce2:	f8c3 2013 	str.w	r2, [r3, #19]

	if (iIndex == 0) {
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d120      	bne.n	8002d2e <FormCGI_Handler+0x6e>
		for (int i = 0; i < iNumParams; i++) {
 8002cec:	2300      	movs	r3, #0
 8002cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cf0:	e019      	b.n	8002d26 <FormCGI_Handler+0x66>
			if (strcmp(pcParam[i], "ssid") == 0)
 8002cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4920      	ldr	r1, [pc, #128]	; (8002d80 <FormCGI_Handler+0xc0>)
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fd fa9e 	bl	8000240 <strcmp>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10a      	bne.n	8002d20 <FormCGI_Handler+0x60>
			{
				strcpy(ssid, pcValue[i]);
 8002d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	4413      	add	r3, r2
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	f107 0310 	add.w	r3, r7, #16
 8002d18:	4611      	mov	r1, r2
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f01e fe33 	bl	8021986 <strcpy>
		for (int i = 0; i < iNumParams; i++) {
 8002d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d22:	3301      	adds	r3, #1
 8002d24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	dbe1      	blt.n	8002cf2 <FormCGI_Handler+0x32>
			}
		}
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 8002d2e:	f107 0310 	add.w	r3, r7, #16
 8002d32:	4914      	ldr	r1, [pc, #80]	; (8002d84 <FormCGI_Handler+0xc4>)
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fd fa83 	bl	8000240 <strcmp>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d111      	bne.n	8002d64 <FormCGI_Handler+0xa4>
 8002d40:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <FormCGI_Handler+0xc4>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00d      	beq.n	8002d64 <FormCGI_Handler+0xa4>
		printf("SSID OK \n");
 8002d48:	480f      	ldr	r0, [pc, #60]	; (8002d88 <FormCGI_Handler+0xc8>)
 8002d4a:	f01e fc71 	bl	8021630 <puts>
		restartSSID();
 8002d4e:	f7ff fd2d 	bl	80027ac <restartSSID>
		memset(ssid, '\0', sizeof(ssid));
 8002d52:	f107 0310 	add.w	r3, r7, #16
 8002d56:	221b      	movs	r2, #27
 8002d58:	2100      	movs	r1, #0
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f01e fb30 	bl	80213c0 <memset>
		return "/index.shtml"; //
 8002d60:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <FormCGI_Handler+0xcc>)
 8002d62:	e008      	b.n	8002d76 <FormCGI_Handler+0xb6>
	} else {
		printf("SSID Failed \n");
 8002d64:	480a      	ldr	r0, [pc, #40]	; (8002d90 <FormCGI_Handler+0xd0>)
 8002d66:	f01e fc63 	bl	8021630 <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 8002d6a:	221b      	movs	r2, #27
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	4805      	ldr	r0, [pc, #20]	; (8002d84 <FormCGI_Handler+0xc4>)
 8002d70:	f01e fb26 	bl	80213c0 <memset>
		return "/login.shtml";
 8002d74:	4b07      	ldr	r3, [pc, #28]	; (8002d94 <FormCGI_Handler+0xd4>)
	}

}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3730      	adds	r7, #48	; 0x30
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	080238d8 	.word	0x080238d8
 8002d84:	20000a94 	.word	0x20000a94
 8002d88:	08023c28 	.word	0x08023c28
 8002d8c:	08023b80 	.word	0x08023b80
 8002d90:	08023c34 	.word	0x08023c34
 8002d94:	08023c44 	.word	0x08023c44

08002d98 <LoginCGI_Handler>:


// Login Handler (Index 1)
const char* LoginCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
 8002da4:	603b      	str	r3, [r7, #0]

	if (iIndex == 1) {
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d14c      	bne.n	8002e46 <LoginCGI_Handler+0xae>
		for (int i = 0; i < iNumParams; i++) {
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	e045      	b.n	8002e3e <LoginCGI_Handler+0xa6>
			if(strcmp(pcParam[i], "username") == 0){
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	4413      	add	r3, r2
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4924      	ldr	r1, [pc, #144]	; (8002e50 <LoginCGI_Handler+0xb8>)
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fd fa3e 	bl	8000240 <strcmp>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d115      	bne.n	8002df6 <LoginCGI_Handler+0x5e>
				printf("OK Get 1 \n");
 8002dca:	4822      	ldr	r0, [pc, #136]	; (8002e54 <LoginCGI_Handler+0xbc>)
 8002dcc:	f01e fc30 	bl	8021630 <puts>
				if(strcmp(pcValue[i], "admin") == 0){
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	491f      	ldr	r1, [pc, #124]	; (8002e58 <LoginCGI_Handler+0xc0>)
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fd fa2f 	bl	8000240 <strcmp>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d127      	bne.n	8002e38 <LoginCGI_Handler+0xa0>
					verifyNum++;
 8002de8:	4b1c      	ldr	r3, [pc, #112]	; (8002e5c <LoginCGI_Handler+0xc4>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	3301      	adds	r3, #1
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	4b1a      	ldr	r3, [pc, #104]	; (8002e5c <LoginCGI_Handler+0xc4>)
 8002df2:	701a      	strb	r2, [r3, #0]
 8002df4:	e020      	b.n	8002e38 <LoginCGI_Handler+0xa0>
				}

			} else if(strcmp(pcParam[i], "password") == 0) {
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4917      	ldr	r1, [pc, #92]	; (8002e60 <LoginCGI_Handler+0xc8>)
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fd fa1c 	bl	8000240 <strcmp>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d114      	bne.n	8002e38 <LoginCGI_Handler+0xa0>
				printf("OK Get 2 \n");
 8002e0e:	4815      	ldr	r0, [pc, #84]	; (8002e64 <LoginCGI_Handler+0xcc>)
 8002e10:	f01e fc0e 	bl	8021630 <puts>
				if(strcmp(pcValue[i], "12345678") == 0){
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4912      	ldr	r1, [pc, #72]	; (8002e68 <LoginCGI_Handler+0xd0>)
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7fd fa0d 	bl	8000240 <strcmp>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d105      	bne.n	8002e38 <LoginCGI_Handler+0xa0>
					verifyNum++;
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	; (8002e5c <LoginCGI_Handler+0xc4>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	3301      	adds	r3, #1
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <LoginCGI_Handler+0xc4>)
 8002e36:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < iNumParams; i++) {
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	dbb5      	blt.n	8002db2 <LoginCGI_Handler+0x1a>
				}
			}
		}
	}

	return "/logon.shtml";
 8002e46:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <LoginCGI_Handler+0xd4>)
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	08023c54 	.word	0x08023c54
 8002e54:	08023c60 	.word	0x08023c60
 8002e58:	08023c6c 	.word	0x08023c6c
 8002e5c:	20000a90 	.word	0x20000a90
 8002e60:	08023c74 	.word	0x08023c74
 8002e64:	08023c80 	.word	0x08023c80
 8002e68:	08023c8c 	.word	0x08023c8c
 8002e6c:	08023b90 	.word	0x08023b90

08002e70 <SelectCGI_Handler>:


// select.shtml Handler (Index 2)
const char* SelectCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08c      	sub	sp, #48	; 0x30
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	603b      	str	r3, [r7, #0]

	char ssid[27] = {0};
 8002e7e:	2300      	movs	r3, #0
 8002e80:	613b      	str	r3, [r7, #16]
 8002e82:	f107 0314 	add.w	r3, r7, #20
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	605a      	str	r2, [r3, #4]
 8002e8c:	609a      	str	r2, [r3, #8]
 8002e8e:	60da      	str	r2, [r3, #12]
 8002e90:	611a      	str	r2, [r3, #16]
 8002e92:	f8c3 2013 	str.w	r2, [r3, #19]

	if (iIndex == 2) {
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d120      	bne.n	8002ede <SelectCGI_Handler+0x6e>
		for (int i = 0; i < iNumParams; i++) {
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ea0:	e019      	b.n	8002ed6 <SelectCGI_Handler+0x66>
			if (strcmp(pcParam[i], "ssid") == 0)
 8002ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4920      	ldr	r1, [pc, #128]	; (8002f30 <SelectCGI_Handler+0xc0>)
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fd f9c6 	bl	8000240 <strcmp>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10a      	bne.n	8002ed0 <SelectCGI_Handler+0x60>
			{
				strcpy(ssid, pcValue[i]);
 8002eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	f107 0310 	add.w	r3, r7, #16
 8002ec8:	4611      	mov	r1, r2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f01e fd5b 	bl	8021986 <strcpy>
		for (int i = 0; i < iNumParams; i++) {
 8002ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ed6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	dbe1      	blt.n	8002ea2 <SelectCGI_Handler+0x32>
			}
		}
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 8002ede:	f107 0310 	add.w	r3, r7, #16
 8002ee2:	4914      	ldr	r1, [pc, #80]	; (8002f34 <SelectCGI_Handler+0xc4>)
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fd f9ab 	bl	8000240 <strcmp>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d111      	bne.n	8002f14 <SelectCGI_Handler+0xa4>
 8002ef0:	4b10      	ldr	r3, [pc, #64]	; (8002f34 <SelectCGI_Handler+0xc4>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00d      	beq.n	8002f14 <SelectCGI_Handler+0xa4>
		printf("SSID OK \n");
 8002ef8:	480f      	ldr	r0, [pc, #60]	; (8002f38 <SelectCGI_Handler+0xc8>)
 8002efa:	f01e fb99 	bl	8021630 <puts>
		restartSSID();
 8002efe:	f7ff fc55 	bl	80027ac <restartSSID>
		memset(ssid, '\0', sizeof(ssid));
 8002f02:	f107 0310 	add.w	r3, r7, #16
 8002f06:	221b      	movs	r2, #27
 8002f08:	2100      	movs	r1, #0
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f01e fa58 	bl	80213c0 <memset>
		return "/select.shtml"; //
 8002f10:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <SelectCGI_Handler+0xcc>)
 8002f12:	e008      	b.n	8002f26 <SelectCGI_Handler+0xb6>
	} else {
		printf("SSID Failed \n");
 8002f14:	480a      	ldr	r0, [pc, #40]	; (8002f40 <SelectCGI_Handler+0xd0>)
 8002f16:	f01e fb8b 	bl	8021630 <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 8002f1a:	221b      	movs	r2, #27
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	4805      	ldr	r0, [pc, #20]	; (8002f34 <SelectCGI_Handler+0xc4>)
 8002f20:	f01e fa4e 	bl	80213c0 <memset>
		return "/login.shtml";
 8002f24:	4b07      	ldr	r3, [pc, #28]	; (8002f44 <SelectCGI_Handler+0xd4>)
	}

}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3730      	adds	r7, #48	; 0x30
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	080238d8 	.word	0x080238d8
 8002f34:	20000a94 	.word	0x20000a94
 8002f38:	08023c28 	.word	0x08023c28
 8002f3c:	08023ba0 	.word	0x08023ba0
 8002f40:	08023c34 	.word	0x08023c34
 8002f44:	08023c44 	.word	0x08023c44

08002f48 <RelayCGI_Handler>:


// tabrelay.shtml Handler (Index 3)
const char* RelayCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08c      	sub	sp, #48	; 0x30
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
 8002f54:	603b      	str	r3, [r7, #0]

	char ssid[27] = {0};
 8002f56:	2300      	movs	r3, #0
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	f107 0314 	add.w	r3, r7, #20
 8002f5e:	2200      	movs	r2, #0
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	605a      	str	r2, [r3, #4]
 8002f64:	609a      	str	r2, [r3, #8]
 8002f66:	60da      	str	r2, [r3, #12]
 8002f68:	611a      	str	r2, [r3, #16]
 8002f6a:	f8c3 2013 	str.w	r2, [r3, #19]

	if (iIndex == 3) {
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d120      	bne.n	8002fb6 <RelayCGI_Handler+0x6e>
		for (int i = 0; i < iNumParams; i++) {
 8002f74:	2300      	movs	r3, #0
 8002f76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f78:	e019      	b.n	8002fae <RelayCGI_Handler+0x66>
			if (strcmp(pcParam[i], "ssid") == 0)
 8002f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	4413      	add	r3, r2
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4920      	ldr	r1, [pc, #128]	; (8003008 <RelayCGI_Handler+0xc0>)
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fd f95a 	bl	8000240 <strcmp>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10a      	bne.n	8002fa8 <RelayCGI_Handler+0x60>
			{
				strcpy(ssid, pcValue[i]);
 8002f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	4413      	add	r3, r2
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	f107 0310 	add.w	r3, r7, #16
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f01e fcef 	bl	8021986 <strcpy>
		for (int i = 0; i < iNumParams; i++) {
 8002fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002faa:	3301      	adds	r3, #1
 8002fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	dbe1      	blt.n	8002f7a <RelayCGI_Handler+0x32>
			}
		}
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 8002fb6:	f107 0310 	add.w	r3, r7, #16
 8002fba:	4914      	ldr	r1, [pc, #80]	; (800300c <RelayCGI_Handler+0xc4>)
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7fd f93f 	bl	8000240 <strcmp>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d111      	bne.n	8002fec <RelayCGI_Handler+0xa4>
 8002fc8:	4b10      	ldr	r3, [pc, #64]	; (800300c <RelayCGI_Handler+0xc4>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00d      	beq.n	8002fec <RelayCGI_Handler+0xa4>
		printf("SSID OK \n");
 8002fd0:	480f      	ldr	r0, [pc, #60]	; (8003010 <RelayCGI_Handler+0xc8>)
 8002fd2:	f01e fb2d 	bl	8021630 <puts>
		restartSSID();
 8002fd6:	f7ff fbe9 	bl	80027ac <restartSSID>
		memset(ssid, '\0', sizeof(ssid));
 8002fda:	f107 0310 	add.w	r3, r7, #16
 8002fde:	221b      	movs	r2, #27
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f01e f9ec 	bl	80213c0 <memset>
		return "/tabrelay.shtml"; //
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <RelayCGI_Handler+0xcc>)
 8002fea:	e008      	b.n	8002ffe <RelayCGI_Handler+0xb6>
	} else {
		printf("SSID Failed \n");
 8002fec:	480a      	ldr	r0, [pc, #40]	; (8003018 <RelayCGI_Handler+0xd0>)
 8002fee:	f01e fb1f 	bl	8021630 <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 8002ff2:	221b      	movs	r2, #27
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	4805      	ldr	r0, [pc, #20]	; (800300c <RelayCGI_Handler+0xc4>)
 8002ff8:	f01e f9e2 	bl	80213c0 <memset>
		return "/login.shtml";
 8002ffc:	4b07      	ldr	r3, [pc, #28]	; (800301c <RelayCGI_Handler+0xd4>)
	}

}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3730      	adds	r7, #48	; 0x30
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	080238d8 	.word	0x080238d8
 800300c:	20000a94 	.word	0x20000a94
 8003010:	08023c28 	.word	0x08023c28
 8003014:	08023bb0 	.word	0x08023bb0
 8003018:	08023c34 	.word	0x08023c34
 800301c:	08023c44 	.word	0x08023c44

08003020 <ButtonCGI_Handler>:

// tabbuttom.shtml Handler (Index 4)
const char* ButtonCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8003020:	b580      	push	{r7, lr}
 8003022:	b08c      	sub	sp, #48	; 0x30
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
 800302c:	603b      	str	r3, [r7, #0]

	char ssid[27] = {0};
 800302e:	2300      	movs	r3, #0
 8003030:	613b      	str	r3, [r7, #16]
 8003032:	f107 0314 	add.w	r3, r7, #20
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	605a      	str	r2, [r3, #4]
 800303c:	609a      	str	r2, [r3, #8]
 800303e:	60da      	str	r2, [r3, #12]
 8003040:	611a      	str	r2, [r3, #16]
 8003042:	f8c3 2013 	str.w	r2, [r3, #19]

	if (iIndex == 4) {
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2b04      	cmp	r3, #4
 800304a:	d120      	bne.n	800308e <ButtonCGI_Handler+0x6e>
		for (int i = 0; i < iNumParams; i++) {
 800304c:	2300      	movs	r3, #0
 800304e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003050:	e019      	b.n	8003086 <ButtonCGI_Handler+0x66>
			if (strcmp(pcParam[i], "ssid") == 0)
 8003052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	4413      	add	r3, r2
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4920      	ldr	r1, [pc, #128]	; (80030e0 <ButtonCGI_Handler+0xc0>)
 800305e:	4618      	mov	r0, r3
 8003060:	f7fd f8ee 	bl	8000240 <strcmp>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10a      	bne.n	8003080 <ButtonCGI_Handler+0x60>
			{
				strcpy(ssid, pcValue[i]);
 800306a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	4413      	add	r3, r2
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	f107 0310 	add.w	r3, r7, #16
 8003078:	4611      	mov	r1, r2
 800307a:	4618      	mov	r0, r3
 800307c:	f01e fc83 	bl	8021986 <strcpy>
		for (int i = 0; i < iNumParams; i++) {
 8003080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003082:	3301      	adds	r3, #1
 8003084:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003086:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	429a      	cmp	r2, r3
 800308c:	dbe1      	blt.n	8003052 <ButtonCGI_Handler+0x32>
			}
		}
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 800308e:	f107 0310 	add.w	r3, r7, #16
 8003092:	4914      	ldr	r1, [pc, #80]	; (80030e4 <ButtonCGI_Handler+0xc4>)
 8003094:	4618      	mov	r0, r3
 8003096:	f7fd f8d3 	bl	8000240 <strcmp>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d111      	bne.n	80030c4 <ButtonCGI_Handler+0xa4>
 80030a0:	4b10      	ldr	r3, [pc, #64]	; (80030e4 <ButtonCGI_Handler+0xc4>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00d      	beq.n	80030c4 <ButtonCGI_Handler+0xa4>
		printf("SSID OK \n");
 80030a8:	480f      	ldr	r0, [pc, #60]	; (80030e8 <ButtonCGI_Handler+0xc8>)
 80030aa:	f01e fac1 	bl	8021630 <puts>
		restartSSID();
 80030ae:	f7ff fb7d 	bl	80027ac <restartSSID>
		memset(ssid, '\0', sizeof(ssid));
 80030b2:	f107 0310 	add.w	r3, r7, #16
 80030b6:	221b      	movs	r2, #27
 80030b8:	2100      	movs	r1, #0
 80030ba:	4618      	mov	r0, r3
 80030bc:	f01e f980 	bl	80213c0 <memset>
		return "/tabbuttom.shtml"; //
 80030c0:	4b0a      	ldr	r3, [pc, #40]	; (80030ec <ButtonCGI_Handler+0xcc>)
 80030c2:	e008      	b.n	80030d6 <ButtonCGI_Handler+0xb6>
	} else {
		printf("SSID Failed \n");
 80030c4:	480a      	ldr	r0, [pc, #40]	; (80030f0 <ButtonCGI_Handler+0xd0>)
 80030c6:	f01e fab3 	bl	8021630 <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 80030ca:	221b      	movs	r2, #27
 80030cc:	2100      	movs	r1, #0
 80030ce:	4805      	ldr	r0, [pc, #20]	; (80030e4 <ButtonCGI_Handler+0xc4>)
 80030d0:	f01e f976 	bl	80213c0 <memset>
		return "/login.shtml";
 80030d4:	4b07      	ldr	r3, [pc, #28]	; (80030f4 <ButtonCGI_Handler+0xd4>)
	}

}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3730      	adds	r7, #48	; 0x30
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	080238d8 	.word	0x080238d8
 80030e4:	20000a94 	.word	0x20000a94
 80030e8:	08023c28 	.word	0x08023c28
 80030ec:	08023bc0 	.word	0x08023bc0
 80030f0:	08023c34 	.word	0x08023c34
 80030f4:	08023c44 	.word	0x08023c44

080030f8 <SettingCGI_Handler>:

// tabbuttom.shtml Handler (Index 5)
const char* SettingCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08c      	sub	sp, #48	; 0x30
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
 8003104:	603b      	str	r3, [r7, #0]

	char ssid[27] = {0};
 8003106:	2300      	movs	r3, #0
 8003108:	613b      	str	r3, [r7, #16]
 800310a:	f107 0314 	add.w	r3, r7, #20
 800310e:	2200      	movs	r2, #0
 8003110:	601a      	str	r2, [r3, #0]
 8003112:	605a      	str	r2, [r3, #4]
 8003114:	609a      	str	r2, [r3, #8]
 8003116:	60da      	str	r2, [r3, #12]
 8003118:	611a      	str	r2, [r3, #16]
 800311a:	f8c3 2013 	str.w	r2, [r3, #19]

	if (iIndex == 5) {
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2b05      	cmp	r3, #5
 8003122:	d120      	bne.n	8003166 <SettingCGI_Handler+0x6e>
		for (int i = 0; i < iNumParams; i++) {
 8003124:	2300      	movs	r3, #0
 8003126:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003128:	e019      	b.n	800315e <SettingCGI_Handler+0x66>
			if (strcmp(pcParam[i], "ssid") == 0)
 800312a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	4413      	add	r3, r2
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4920      	ldr	r1, [pc, #128]	; (80031b8 <SettingCGI_Handler+0xc0>)
 8003136:	4618      	mov	r0, r3
 8003138:	f7fd f882 	bl	8000240 <strcmp>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10a      	bne.n	8003158 <SettingCGI_Handler+0x60>
			{
				strcpy(ssid, pcValue[i]);
 8003142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	4413      	add	r3, r2
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	f107 0310 	add.w	r3, r7, #16
 8003150:	4611      	mov	r1, r2
 8003152:	4618      	mov	r0, r3
 8003154:	f01e fc17 	bl	8021986 <strcpy>
		for (int i = 0; i < iNumParams; i++) {
 8003158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800315a:	3301      	adds	r3, #1
 800315c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800315e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	429a      	cmp	r2, r3
 8003164:	dbe1      	blt.n	800312a <SettingCGI_Handler+0x32>
			}
		}
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 8003166:	f107 0310 	add.w	r3, r7, #16
 800316a:	4914      	ldr	r1, [pc, #80]	; (80031bc <SettingCGI_Handler+0xc4>)
 800316c:	4618      	mov	r0, r3
 800316e:	f7fd f867 	bl	8000240 <strcmp>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d111      	bne.n	800319c <SettingCGI_Handler+0xa4>
 8003178:	4b10      	ldr	r3, [pc, #64]	; (80031bc <SettingCGI_Handler+0xc4>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00d      	beq.n	800319c <SettingCGI_Handler+0xa4>
		printf("SSID OK \n");
 8003180:	480f      	ldr	r0, [pc, #60]	; (80031c0 <SettingCGI_Handler+0xc8>)
 8003182:	f01e fa55 	bl	8021630 <puts>
		restartSSID();
 8003186:	f7ff fb11 	bl	80027ac <restartSSID>
		memset(ssid, '\0', sizeof(ssid));
 800318a:	f107 0310 	add.w	r3, r7, #16
 800318e:	221b      	movs	r2, #27
 8003190:	2100      	movs	r1, #0
 8003192:	4618      	mov	r0, r3
 8003194:	f01e f914 	bl	80213c0 <memset>
		return "/settings.shtml"; //
 8003198:	4b0a      	ldr	r3, [pc, #40]	; (80031c4 <SettingCGI_Handler+0xcc>)
 800319a:	e008      	b.n	80031ae <SettingCGI_Handler+0xb6>
	} else {
		printf("SSID Failed \n");
 800319c:	480a      	ldr	r0, [pc, #40]	; (80031c8 <SettingCGI_Handler+0xd0>)
 800319e:	f01e fa47 	bl	8021630 <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 80031a2:	221b      	movs	r2, #27
 80031a4:	2100      	movs	r1, #0
 80031a6:	4805      	ldr	r0, [pc, #20]	; (80031bc <SettingCGI_Handler+0xc4>)
 80031a8:	f01e f90a 	bl	80213c0 <memset>
		return "/login.shtml";
 80031ac:	4b07      	ldr	r3, [pc, #28]	; (80031cc <SettingCGI_Handler+0xd4>)
	}

}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3730      	adds	r7, #48	; 0x30
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	080238d8 	.word	0x080238d8
 80031bc:	20000a94 	.word	0x20000a94
 80031c0:	08023c28 	.word	0x08023c28
 80031c4:	08023bd4 	.word	0x08023bd4
 80031c8:	08023c34 	.word	0x08023c34
 80031cc:	08023c44 	.word	0x08023c44

080031d0 <TimerCGI_Handler>:

// tabbuttom.shtml Handler (Index 6)
const char* TimerCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08c      	sub	sp, #48	; 0x30
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
 80031dc:	603b      	str	r3, [r7, #0]

	char ssid[27] = {0};
 80031de:	2300      	movs	r3, #0
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	f107 0314 	add.w	r3, r7, #20
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	605a      	str	r2, [r3, #4]
 80031ec:	609a      	str	r2, [r3, #8]
 80031ee:	60da      	str	r2, [r3, #12]
 80031f0:	611a      	str	r2, [r3, #16]
 80031f2:	f8c3 2013 	str.w	r2, [r3, #19]

	if (iIndex == 6) {
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2b06      	cmp	r3, #6
 80031fa:	d120      	bne.n	800323e <TimerCGI_Handler+0x6e>
		for (int i = 0; i < iNumParams; i++) {
 80031fc:	2300      	movs	r3, #0
 80031fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003200:	e019      	b.n	8003236 <TimerCGI_Handler+0x66>
			if (strcmp(pcParam[i], "ssid") == 0)
 8003202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	4413      	add	r3, r2
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4920      	ldr	r1, [pc, #128]	; (8003290 <TimerCGI_Handler+0xc0>)
 800320e:	4618      	mov	r0, r3
 8003210:	f7fd f816 	bl	8000240 <strcmp>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10a      	bne.n	8003230 <TimerCGI_Handler+0x60>
			{
				strcpy(ssid, pcValue[i]);
 800321a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	4413      	add	r3, r2
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	f107 0310 	add.w	r3, r7, #16
 8003228:	4611      	mov	r1, r2
 800322a:	4618      	mov	r0, r3
 800322c:	f01e fbab 	bl	8021986 <strcpy>
		for (int i = 0; i < iNumParams; i++) {
 8003230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003232:	3301      	adds	r3, #1
 8003234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	429a      	cmp	r2, r3
 800323c:	dbe1      	blt.n	8003202 <TimerCGI_Handler+0x32>
			}
		}
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 800323e:	f107 0310 	add.w	r3, r7, #16
 8003242:	4914      	ldr	r1, [pc, #80]	; (8003294 <TimerCGI_Handler+0xc4>)
 8003244:	4618      	mov	r0, r3
 8003246:	f7fc fffb 	bl	8000240 <strcmp>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d111      	bne.n	8003274 <TimerCGI_Handler+0xa4>
 8003250:	4b10      	ldr	r3, [pc, #64]	; (8003294 <TimerCGI_Handler+0xc4>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00d      	beq.n	8003274 <TimerCGI_Handler+0xa4>
		printf("SSID OK \n");
 8003258:	480f      	ldr	r0, [pc, #60]	; (8003298 <TimerCGI_Handler+0xc8>)
 800325a:	f01e f9e9 	bl	8021630 <puts>
		restartSSID();
 800325e:	f7ff faa5 	bl	80027ac <restartSSID>
		memset(ssid, '\0', sizeof(ssid));
 8003262:	f107 0310 	add.w	r3, r7, #16
 8003266:	221b      	movs	r2, #27
 8003268:	2100      	movs	r1, #0
 800326a:	4618      	mov	r0, r3
 800326c:	f01e f8a8 	bl	80213c0 <memset>
		return "/timers.shtml"; //
 8003270:	4b0a      	ldr	r3, [pc, #40]	; (800329c <TimerCGI_Handler+0xcc>)
 8003272:	e008      	b.n	8003286 <TimerCGI_Handler+0xb6>
	} else {
		printf("SSID Failed \n");
 8003274:	480a      	ldr	r0, [pc, #40]	; (80032a0 <TimerCGI_Handler+0xd0>)
 8003276:	f01e f9db 	bl	8021630 <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 800327a:	221b      	movs	r2, #27
 800327c:	2100      	movs	r1, #0
 800327e:	4805      	ldr	r0, [pc, #20]	; (8003294 <TimerCGI_Handler+0xc4>)
 8003280:	f01e f89e 	bl	80213c0 <memset>
		return "/login.shtml";
 8003284:	4b07      	ldr	r3, [pc, #28]	; (80032a4 <TimerCGI_Handler+0xd4>)
	}
}
 8003286:	4618      	mov	r0, r3
 8003288:	3730      	adds	r7, #48	; 0x30
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	080238d8 	.word	0x080238d8
 8003294:	20000a94 	.word	0x20000a94
 8003298:	08023c28 	.word	0x08023c28
 800329c:	08023be4 	.word	0x08023be4
 80032a0:	08023c34 	.word	0x08023c34
 80032a4:	08023c44 	.word	0x08023c44

080032a8 <LogoutCGI_Handler>:

// logout.shtml Handler logout (Index 7)
const char* LogoutCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	603b      	str	r3, [r7, #0]

	if (iIndex == 7) {
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2b07      	cmp	r3, #7
 80032ba:	d104      	bne.n	80032c6 <LogoutCGI_Handler+0x1e>
		memset(randomSSID, '\0', sizeof(randomSSID));
 80032bc:	221b      	movs	r2, #27
 80032be:	2100      	movs	r1, #0
 80032c0:	4803      	ldr	r0, [pc, #12]	; (80032d0 <LogoutCGI_Handler+0x28>)
 80032c2:	f01e f87d 	bl	80213c0 <memset>
	}

	return "/login.shtml";
 80032c6:	4b03      	ldr	r3, [pc, #12]	; (80032d4 <LogoutCGI_Handler+0x2c>)
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	20000a94 	.word	0x20000a94
 80032d4:	08023c44 	.word	0x08023c44

080032d8 <TabjsonCGI_Handler>:


// tabjson.shtml Handler table json (Index 8)
const char* TabjsonCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 80032d8:	b580      	push	{r7, lr}
 80032da:	b08c      	sub	sp, #48	; 0x30
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
 80032e4:	603b      	str	r3, [r7, #0]

	char ssid[27] = {0};
 80032e6:	2300      	movs	r3, #0
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	f107 0314 	add.w	r3, r7, #20
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	605a      	str	r2, [r3, #4]
 80032f4:	609a      	str	r2, [r3, #8]
 80032f6:	60da      	str	r2, [r3, #12]
 80032f8:	611a      	str	r2, [r3, #16]
 80032fa:	f8c3 2013 	str.w	r2, [r3, #19]

	if (iIndex == 8) {
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2b08      	cmp	r3, #8
 8003302:	d15c      	bne.n	80033be <TabjsonCGI_Handler+0xe6>
		for (int i = 0; i < iNumParams; i++) {
 8003304:	2300      	movs	r3, #0
 8003306:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003308:	e055      	b.n	80033b6 <TabjsonCGI_Handler+0xde>
			if (strcmp(pcParam[i], "ssid") == 0)
 800330a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	4413      	add	r3, r2
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	493e      	ldr	r1, [pc, #248]	; (8003410 <TabjsonCGI_Handler+0x138>)
 8003316:	4618      	mov	r0, r3
 8003318:	f7fc ff92 	bl	8000240 <strcmp>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10a      	bne.n	8003338 <TabjsonCGI_Handler+0x60>
			{
				strcpy(ssid, pcValue[i]);
 8003322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	4413      	add	r3, r2
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	f107 0310 	add.w	r3, r7, #16
 8003330:	4611      	mov	r1, r2
 8003332:	4618      	mov	r0, r3
 8003334:	f01e fb27 	bl	8021986 <strcpy>
			}
			if (strcmp(pcParam[i], "tab") == 0)
 8003338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	4413      	add	r3, r2
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4934      	ldr	r1, [pc, #208]	; (8003414 <TabjsonCGI_Handler+0x13c>)
 8003344:	4618      	mov	r0, r3
 8003346:	f7fc ff7b 	bl	8000240 <strcmp>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d12f      	bne.n	80033b0 <TabjsonCGI_Handler+0xd8>
			{
				tab = atoi(pcValue[i]);
 8003350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	4413      	add	r3, r2
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f01d fec8 	bl	80210f0 <atoi>
 8003360:	4603      	mov	r3, r0
 8003362:	b2da      	uxtb	r2, r3
 8003364:	4b2c      	ldr	r3, [pc, #176]	; (8003418 <TabjsonCGI_Handler+0x140>)
 8003366:	701a      	strb	r2, [r3, #0]
				if(tab == 2)
 8003368:	4b2b      	ldr	r3, [pc, #172]	; (8003418 <TabjsonCGI_Handler+0x140>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b02      	cmp	r3, #2
 800336e:	d10d      	bne.n	800338c <TabjsonCGI_Handler+0xb4>
				{
					numTabLine = MultiPartTabCount(1,NUMPIN);
 8003370:	2159      	movs	r1, #89	; 0x59
 8003372:	2001      	movs	r0, #1
 8003374:	f7ff fa26 	bl	80027c4 <MultiPartTabCount>
 8003378:	4603      	mov	r3, r0
 800337a:	b2da      	uxtb	r2, r3
 800337c:	4b27      	ldr	r3, [pc, #156]	; (800341c <TabjsonCGI_Handler+0x144>)
 800337e:	701a      	strb	r2, [r3, #0]
					printf("count  %d \n", numTabLine);
 8003380:	4b26      	ldr	r3, [pc, #152]	; (800341c <TabjsonCGI_Handler+0x144>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	4619      	mov	r1, r3
 8003386:	4826      	ldr	r0, [pc, #152]	; (8003420 <TabjsonCGI_Handler+0x148>)
 8003388:	f01e f8cc 	bl	8021524 <iprintf>
				}
				if(tab == 3)
 800338c:	4b22      	ldr	r3, [pc, #136]	; (8003418 <TabjsonCGI_Handler+0x140>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b03      	cmp	r3, #3
 8003392:	d10d      	bne.n	80033b0 <TabjsonCGI_Handler+0xd8>
				{
					numTabLine = MultiPartTabCount(2,NUMPIN);
 8003394:	2159      	movs	r1, #89	; 0x59
 8003396:	2002      	movs	r0, #2
 8003398:	f7ff fa14 	bl	80027c4 <MultiPartTabCount>
 800339c:	4603      	mov	r3, r0
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	4b1e      	ldr	r3, [pc, #120]	; (800341c <TabjsonCGI_Handler+0x144>)
 80033a2:	701a      	strb	r2, [r3, #0]
					printf("count  %d \n", numTabLine);
 80033a4:	4b1d      	ldr	r3, [pc, #116]	; (800341c <TabjsonCGI_Handler+0x144>)
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	4619      	mov	r1, r3
 80033aa:	481d      	ldr	r0, [pc, #116]	; (8003420 <TabjsonCGI_Handler+0x148>)
 80033ac:	f01e f8ba 	bl	8021524 <iprintf>
		for (int i = 0; i < iNumParams; i++) {
 80033b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b2:	3301      	adds	r3, #1
 80033b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	dba5      	blt.n	800330a <TabjsonCGI_Handler+0x32>
			}
		}
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 80033be:	f107 0310 	add.w	r3, r7, #16
 80033c2:	4918      	ldr	r1, [pc, #96]	; (8003424 <TabjsonCGI_Handler+0x14c>)
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fc ff3b 	bl	8000240 <strcmp>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d111      	bne.n	80033f4 <TabjsonCGI_Handler+0x11c>
 80033d0:	4b14      	ldr	r3, [pc, #80]	; (8003424 <TabjsonCGI_Handler+0x14c>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00d      	beq.n	80033f4 <TabjsonCGI_Handler+0x11c>
		printf("SSID OK \n");
 80033d8:	4813      	ldr	r0, [pc, #76]	; (8003428 <TabjsonCGI_Handler+0x150>)
 80033da:	f01e f929 	bl	8021630 <puts>
		restartSSID();
 80033de:	f7ff f9e5 	bl	80027ac <restartSSID>
		memset(ssid, '\0', sizeof(ssid));
 80033e2:	f107 0310 	add.w	r3, r7, #16
 80033e6:	221b      	movs	r2, #27
 80033e8:	2100      	movs	r1, #0
 80033ea:	4618      	mov	r0, r3
 80033ec:	f01d ffe8 	bl	80213c0 <memset>
		return "/tabjson.shtml"; //
 80033f0:	4b0e      	ldr	r3, [pc, #56]	; (800342c <TabjsonCGI_Handler+0x154>)
 80033f2:	e008      	b.n	8003406 <TabjsonCGI_Handler+0x12e>
	} else {
		printf("SSID Failed \n");
 80033f4:	480e      	ldr	r0, [pc, #56]	; (8003430 <TabjsonCGI_Handler+0x158>)
 80033f6:	f01e f91b 	bl	8021630 <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 80033fa:	221b      	movs	r2, #27
 80033fc:	2100      	movs	r1, #0
 80033fe:	4809      	ldr	r0, [pc, #36]	; (8003424 <TabjsonCGI_Handler+0x14c>)
 8003400:	f01d ffde 	bl	80213c0 <memset>
		return "/login.shtml";
 8003404:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <TabjsonCGI_Handler+0x15c>)
	}
}
 8003406:	4618      	mov	r0, r3
 8003408:	3730      	adds	r7, #48	; 0x30
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	080238d8 	.word	0x080238d8
 8003414:	08023c98 	.word	0x08023c98
 8003418:	20000a91 	.word	0x20000a91
 800341c:	20000a92 	.word	0x20000a92
 8003420:	08023c9c 	.word	0x08023c9c
 8003424:	20000a94 	.word	0x20000a94
 8003428:	08023c28 	.word	0x08023c28
 800342c:	08023c04 	.word	0x08023c04
 8003430:	08023c34 	.word	0x08023c34
 8003434:	08023c44 	.word	0x08023c44

08003438 <SelectSetCGI_Handler>:


// @todo проверить на пустое значение id и val перед записью
// selectset.shtml Handler (Index 9)
const char* SelectSetCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8003438:	b580      	push	{r7, lr}
 800343a:	b08e      	sub	sp, #56	; 0x38
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
 8003444:	603b      	str	r3, [r7, #0]

	char ssid[27] = {0};
 8003446:	2300      	movs	r3, #0
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	f107 0314 	add.w	r3, r7, #20
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	605a      	str	r2, [r3, #4]
 8003454:	609a      	str	r2, [r3, #8]
 8003456:	60da      	str	r2, [r3, #12]
 8003458:	611a      	str	r2, [r3, #16]
 800345a:	f8c3 2013 	str.w	r2, [r3, #19]
	int id;
	int val;

	if (iIndex == 9) {
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2b09      	cmp	r3, #9
 8003462:	d152      	bne.n	800350a <SelectSetCGI_Handler+0xd2>
		for (int i = 0; i < iNumParams; i++) {
 8003464:	2300      	movs	r3, #0
 8003466:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003468:	e043      	b.n	80034f2 <SelectSetCGI_Handler+0xba>
			if (strcmp(pcParam[i], "ssid") == 0)
 800346a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	4413      	add	r3, r2
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4939      	ldr	r1, [pc, #228]	; (800355c <SelectSetCGI_Handler+0x124>)
 8003476:	4618      	mov	r0, r3
 8003478:	f7fc fee2 	bl	8000240 <strcmp>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10a      	bne.n	8003498 <SelectSetCGI_Handler+0x60>
			{
				strcpy(ssid, pcValue[i]);
 8003482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	4413      	add	r3, r2
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	f107 0310 	add.w	r3, r7, #16
 8003490:	4611      	mov	r1, r2
 8003492:	4618      	mov	r0, r3
 8003494:	f01e fa77 	bl	8021986 <strcpy>
			}
			if (strcmp(pcParam[i], "id") == 0)
 8003498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	4413      	add	r3, r2
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	492f      	ldr	r1, [pc, #188]	; (8003560 <SelectSetCGI_Handler+0x128>)
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fc fecb 	bl	8000240 <strcmp>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d108      	bne.n	80034c2 <SelectSetCGI_Handler+0x8a>
			{
				id = atoi(pcValue[i]);
 80034b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	4413      	add	r3, r2
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f01d fe18 	bl	80210f0 <atoi>
 80034c0:	6378      	str	r0, [r7, #52]	; 0x34
			}
			if (strcmp(pcParam[i], "val") == 0)
 80034c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	4413      	add	r3, r2
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4925      	ldr	r1, [pc, #148]	; (8003564 <SelectSetCGI_Handler+0x12c>)
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fc feb6 	bl	8000240 <strcmp>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d108      	bne.n	80034ec <SelectSetCGI_Handler+0xb4>
			{
				val = atoi(pcValue[i]);
 80034da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	4413      	add	r3, r2
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f01d fe03 	bl	80210f0 <atoi>
 80034ea:	6338      	str	r0, [r7, #48]	; 0x30
		for (int i = 0; i < iNumParams; i++) {
 80034ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ee:	3301      	adds	r3, #1
 80034f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	dbb7      	blt.n	800346a <SelectSetCGI_Handler+0x32>
			}
		}
		PinsConf[id].topin = val;
 80034fa:	4a1b      	ldr	r2, [pc, #108]	; (8003568 <SelectSetCGI_Handler+0x130>)
 80034fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034fe:	2194      	movs	r1, #148	; 0x94
 8003500:	fb01 f303 	mul.w	r3, r1, r3
 8003504:	4413      	add	r3, r2
 8003506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003508:	601a      	str	r2, [r3, #0]
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 800350a:	f107 0310 	add.w	r3, r7, #16
 800350e:	4917      	ldr	r1, [pc, #92]	; (800356c <SelectSetCGI_Handler+0x134>)
 8003510:	4618      	mov	r0, r3
 8003512:	f7fc fe95 	bl	8000240 <strcmp>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d111      	bne.n	8003540 <SelectSetCGI_Handler+0x108>
 800351c:	4b13      	ldr	r3, [pc, #76]	; (800356c <SelectSetCGI_Handler+0x134>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00d      	beq.n	8003540 <SelectSetCGI_Handler+0x108>
		printf("SSID OK \n");
 8003524:	4812      	ldr	r0, [pc, #72]	; (8003570 <SelectSetCGI_Handler+0x138>)
 8003526:	f01e f883 	bl	8021630 <puts>
		restartSSID();
 800352a:	f7ff f93f 	bl	80027ac <restartSSID>
		memset(ssid, '\0', sizeof(ssid));
 800352e:	f107 0310 	add.w	r3, r7, #16
 8003532:	221b      	movs	r2, #27
 8003534:	2100      	movs	r1, #0
 8003536:	4618      	mov	r0, r3
 8003538:	f01d ff42 	bl	80213c0 <memset>
		return "/selectset.shtml"; //
 800353c:	4b0d      	ldr	r3, [pc, #52]	; (8003574 <SelectSetCGI_Handler+0x13c>)
 800353e:	e008      	b.n	8003552 <SelectSetCGI_Handler+0x11a>
	} else {
		printf("SSID Failed \n");
 8003540:	480d      	ldr	r0, [pc, #52]	; (8003578 <SelectSetCGI_Handler+0x140>)
 8003542:	f01e f875 	bl	8021630 <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 8003546:	221b      	movs	r2, #27
 8003548:	2100      	movs	r1, #0
 800354a:	4808      	ldr	r0, [pc, #32]	; (800356c <SelectSetCGI_Handler+0x134>)
 800354c:	f01d ff38 	bl	80213c0 <memset>
		return "/login.shtml";
 8003550:	4b0a      	ldr	r3, [pc, #40]	; (800357c <SelectSetCGI_Handler+0x144>)
	}

}
 8003552:	4618      	mov	r0, r3
 8003554:	3738      	adds	r7, #56	; 0x38
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	080238d8 	.word	0x080238d8
 8003560:	08023ca8 	.word	0x08023ca8
 8003564:	08023cac 	.word	0x08023cac
 8003568:	20005458 	.word	0x20005458
 800356c:	20000a94 	.word	0x20000a94
 8003570:	08023c28 	.word	0x08023c28
 8003574:	08023c14 	.word	0x08023c14
 8003578:	08023c34 	.word	0x08023c34
 800357c:	08023c44 	.word	0x08023c44

08003580 <httpd_post_begin>:
int http_post_content_len;


err_t httpd_post_begin(void *connection, const char *uri,
		const char *http_request, uint16_t http_request_len, int content_len,
		char *response_uri, uint16_t response_uri_len, uint8_t *post_auto_wnd) {
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	807b      	strh	r3, [r7, #2]
	  LWIP_UNUSED_ARG(http_request);
	  LWIP_UNUSED_ARG(http_request_len);
	  LWIP_UNUSED_ARG(content_len);
	  LWIP_UNUSED_ARG(post_auto_wnd);

	  strncpy(url, uri, 15);
 800358e:	220f      	movs	r2, #15
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	4815      	ldr	r0, [pc, #84]	; (80035e8 <httpd_post_begin+0x68>)
 8003594:	f01e fa11 	bl	80219ba <strncpy>

	  memset(bufervar, '\0', sizeof(bufervar));
 8003598:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800359c:	2100      	movs	r1, #0
 800359e:	4813      	ldr	r0, [pc, #76]	; (80035ec <httpd_post_begin+0x6c>)
 80035a0:	f01d ff0e 	bl	80213c0 <memset>

	  if (!memcmp(uri, "/login.shtml", 13)) {
 80035a4:	220d      	movs	r2, #13
 80035a6:	4912      	ldr	r1, [pc, #72]	; (80035f0 <httpd_post_begin+0x70>)
 80035a8:	68b8      	ldr	r0, [r7, #8]
 80035aa:	f01d fed3 	bl	8021354 <memcmp>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d112      	bne.n	80035da <httpd_post_begin+0x5a>
	    if (current_connection != connection) {
 80035b4:	4b0f      	ldr	r3, [pc, #60]	; (80035f4 <httpd_post_begin+0x74>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d00d      	beq.n	80035da <httpd_post_begin+0x5a>
	      current_connection = connection;
 80035be:	4a0d      	ldr	r2, [pc, #52]	; (80035f4 <httpd_post_begin+0x74>)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6013      	str	r3, [r2, #0]

	      snprintf(response_uri, response_uri_len, "/loginfail.shtml");
 80035c4:	8c3b      	ldrh	r3, [r7, #32]
 80035c6:	4a0c      	ldr	r2, [pc, #48]	; (80035f8 <httpd_post_begin+0x78>)
 80035c8:	4619      	mov	r1, r3
 80035ca:	69f8      	ldr	r0, [r7, #28]
 80035cc:	f01e f8fa 	bl	80217c4 <sniprintf>


	      *post_auto_wnd = 1;
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	2201      	movs	r2, #1
 80035d4:	701a      	strb	r2, [r3, #0]
	      return ERR_OK;
 80035d6:	2300      	movs	r3, #0
 80035d8:	e001      	b.n	80035de <httpd_post_begin+0x5e>
	    }
	  }
	  return ERR_VAL;
 80035da:	f06f 0305 	mvn.w	r3, #5

}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20000ab0 	.word	0x20000ab0
 80035ec:	20000ad0 	.word	0x20000ad0
 80035f0:	08023c44 	.word	0x08023c44
 80035f4:	20000a88 	.word	0x20000a88
 80035f8:	08023cb0 	.word	0x08023cb0

080035fc <httpd_post_receive_data>:




err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 80035fc:	b580      	push	{r7, lr}
 80035fe:	f5ad 7d7c 	sub.w	sp, sp, #1008	; 0x3f0
 8003602:	af00      	add	r7, sp, #0
 8003604:	1d3b      	adds	r3, r7, #4
 8003606:	6018      	str	r0, [r3, #0]
 8003608:	463b      	mov	r3, r7
 800360a:	6019      	str	r1, [r3, #0]

	char poststr[1000];

	if (current_connection == connection && p != NULL) {
 800360c:	4b1a      	ldr	r3, [pc, #104]	; (8003678 <httpd_post_receive_data+0x7c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	1d3a      	adds	r2, r7, #4
 8003612:	6812      	ldr	r2, [r2, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d11f      	bne.n	8003658 <httpd_post_receive_data+0x5c>
 8003618:	463b      	mov	r3, r7
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d01b      	beq.n	8003658 <httpd_post_receive_data+0x5c>




			   memcpy(poststr, p->payload, p->len);
 8003620:	463b      	mov	r3, r7
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6859      	ldr	r1, [r3, #4]
 8003626:	463b      	mov	r3, r7
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	895b      	ldrh	r3, [r3, #10]
 800362c:	461a      	mov	r2, r3
 800362e:	f107 0308 	add.w	r3, r7, #8
 8003632:	4618      	mov	r0, r3
 8003634:	f01d fe9c 	bl	8021370 <memcpy>
			   strcat(bufervar, poststr);
 8003638:	f107 0308 	add.w	r3, r7, #8
 800363c:	4619      	mov	r1, r3
 800363e:	480f      	ldr	r0, [pc, #60]	; (800367c <httpd_post_receive_data+0x80>)
 8003640:	f01e f985 	bl	802194e <strcat>
			   pbuf_free(p);
 8003644:	463b      	mov	r3, r7
 8003646:	6818      	ldr	r0, [r3, #0]
 8003648:	f014 f806 	bl	8017658 <pbuf_free>



		pbuf_free(p);
 800364c:	463b      	mov	r3, r7
 800364e:	6818      	ldr	r0, [r3, #0]
 8003650:	f014 f802 	bl	8017658 <pbuf_free>
		return ERR_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	e009      	b.n	800366c <httpd_post_receive_data+0x70>
	}


	if (p != NULL) {
 8003658:	463b      	mov	r3, r7
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <httpd_post_receive_data+0x6c>
		pbuf_free(p);
 8003660:	463b      	mov	r3, r7
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	f013 fff8 	bl	8017658 <pbuf_free>
	}
	return ERR_VAL;
 8003668:	f06f 0305 	mvn.w	r3, #5
}
 800366c:	4618      	mov	r0, r3
 800366e:	f507 777c 	add.w	r7, r7, #1008	; 0x3f0
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	20000a88 	.word	0x20000a88
 800367c:	20000ad0 	.word	0x20000ad0

08003680 <httpd_post_finished>:

void httpd_post_finished(void *connection, char *response_uri, u16_t response_uri_len) {
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	4613      	mov	r3, r2
 800368c:	80fb      	strh	r3, [r7, #6]

	  /* default page is "login failed" */
	  snprintf(response_uri, response_uri_len, "/loginfail.shtml");
 800368e:	88fb      	ldrh	r3, [r7, #6]
 8003690:	4a0d      	ldr	r2, [pc, #52]	; (80036c8 <httpd_post_finished+0x48>)
 8003692:	4619      	mov	r1, r3
 8003694:	68b8      	ldr	r0, [r7, #8]
 8003696:	f01e f895 	bl	80217c4 <sniprintf>


	  if (current_connection == connection) {
 800369a:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <httpd_post_finished+0x4c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d10c      	bne.n	80036be <httpd_post_finished+0x3e>

	    /* login succeeded */
		if (strlen(randomSSID) != 0){
 80036a4:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <httpd_post_finished+0x50>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <httpd_post_finished+0x38>
			snprintf(response_uri, response_uri_len, "/session.shtml");
 80036ac:	88fb      	ldrh	r3, [r7, #6]
 80036ae:	4a09      	ldr	r2, [pc, #36]	; (80036d4 <httpd_post_finished+0x54>)
 80036b0:	4619      	mov	r1, r3
 80036b2:	68b8      	ldr	r0, [r7, #8]
 80036b4:	f01e f886 	bl	80217c4 <sniprintf>
		}

	    current_connection = NULL;
 80036b8:	4b04      	ldr	r3, [pc, #16]	; (80036cc <httpd_post_finished+0x4c>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]

	  }
}
 80036be:	bf00      	nop
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	08023cb0 	.word	0x08023cb0
 80036cc:	20000a88 	.word	0x20000a88
 80036d0:	20000a94 	.word	0x20000a94
 80036d4:	08023cc4 	.word	0x08023cc4

080036d8 <http_server_init>:

//////////////////// POST  END ////////////////////////



void http_server_init(void) {
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
	httpd_init();
 80036dc:	f012 faa0 	bl	8015c20 <httpd_init>
	http_set_ssi_handler((tSSIHandler) ssi_handler, (char const**) TAGS, SSI_TAG_NUM); //
 80036e0:	4b06      	ldr	r3, [pc, #24]	; (80036fc <http_server_init+0x24>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2204      	movs	r2, #4
 80036e6:	4619      	mov	r1, r3
 80036e8:	4805      	ldr	r0, [pc, #20]	; (8003700 <http_server_init+0x28>)
 80036ea:	f012 fab9 	bl	8015c60 <http_set_ssi_handler>

	http_set_cgi_handlers(URL_TABLES, CGI_URL_NUM); //
 80036ee:	230a      	movs	r3, #10
 80036f0:	4619      	mov	r1, r3
 80036f2:	4804      	ldr	r0, [pc, #16]	; (8003704 <http_server_init+0x2c>)
 80036f4:	f012 faf6 	bl	8015ce4 <http_set_cgi_handlers>
}
 80036f8:	bf00      	nop
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	20000714 	.word	0x20000714
 8003700:	08002839 	.word	0x08002839
 8003704:	08027048 	.word	0x08027048

08003708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003740 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800370c:	480d      	ldr	r0, [pc, #52]	; (8003744 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800370e:	490e      	ldr	r1, [pc, #56]	; (8003748 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003710:	4a0e      	ldr	r2, [pc, #56]	; (800374c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003714:	e002      	b.n	800371c <LoopCopyDataInit>

08003716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800371a:	3304      	adds	r3, #4

0800371c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800371c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800371e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003720:	d3f9      	bcc.n	8003716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003722:	4a0b      	ldr	r2, [pc, #44]	; (8003750 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003724:	4c0b      	ldr	r4, [pc, #44]	; (8003754 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003728:	e001      	b.n	800372e <LoopFillZerobss>

0800372a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800372a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800372c:	3204      	adds	r2, #4

0800372e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800372e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003730:	d3fb      	bcc.n	800372a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003732:	f7fe fff5 	bl	8002720 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003736:	f01d fdd5 	bl	80212e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800373a:	f7fe fbc3 	bl	8001ec4 <main>
  bx  lr    
 800373e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003740:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003748:	200007b4 	.word	0x200007b4
  ldr r2, =_sidata
 800374c:	0802b21c 	.word	0x0802b21c
  ldr r2, =_sbss
 8003750:	200007b4 	.word	0x200007b4
  ldr r4, =_ebss
 8003754:	2001c0a8 	.word	0x2001c0a8

08003758 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003758:	e7fe      	b.n	8003758 <ADC_IRQHandler>

0800375a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800375e:	2003      	movs	r0, #3
 8003760:	f000 f8f9 	bl	8003956 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003764:	200f      	movs	r0, #15
 8003766:	f7fe fe85 	bl	8002474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800376a:	f7fe fdfb 	bl	8002364 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003778:	4b06      	ldr	r3, [pc, #24]	; (8003794 <HAL_IncTick+0x20>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	4b06      	ldr	r3, [pc, #24]	; (8003798 <HAL_IncTick+0x24>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4413      	add	r3, r2
 8003784:	4a04      	ldr	r2, [pc, #16]	; (8003798 <HAL_IncTick+0x24>)
 8003786:	6013      	str	r3, [r2, #0]
}
 8003788:	bf00      	nop
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	2000071c 	.word	0x2000071c
 8003798:	2000bec8 	.word	0x2000bec8

0800379c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  return uwTick;
 80037a0:	4b03      	ldr	r3, [pc, #12]	; (80037b0 <HAL_GetTick+0x14>)
 80037a2:	681b      	ldr	r3, [r3, #0]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	2000bec8 	.word	0x2000bec8

080037b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037bc:	f7ff ffee 	bl	800379c <HAL_GetTick>
 80037c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037cc:	d005      	beq.n	80037da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037ce:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <HAL_Delay+0x44>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	461a      	mov	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	4413      	add	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037da:	bf00      	nop
 80037dc:	f7ff ffde 	bl	800379c <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d8f7      	bhi.n	80037dc <HAL_Delay+0x28>
  {
  }
}
 80037ec:	bf00      	nop
 80037ee:	bf00      	nop
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	2000071c 	.word	0x2000071c

080037fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800380c:	4b0b      	ldr	r3, [pc, #44]	; (800383c <__NVIC_SetPriorityGrouping+0x40>)
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003818:	4013      	ands	r3, r2
 800381a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003824:	4b06      	ldr	r3, [pc, #24]	; (8003840 <__NVIC_SetPriorityGrouping+0x44>)
 8003826:	4313      	orrs	r3, r2
 8003828:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800382a:	4a04      	ldr	r2, [pc, #16]	; (800383c <__NVIC_SetPriorityGrouping+0x40>)
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	60d3      	str	r3, [r2, #12]
}
 8003830:	bf00      	nop
 8003832:	3714      	adds	r7, #20
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	e000ed00 	.word	0xe000ed00
 8003840:	05fa0000 	.word	0x05fa0000

08003844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003848:	4b04      	ldr	r3, [pc, #16]	; (800385c <__NVIC_GetPriorityGrouping+0x18>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	0a1b      	lsrs	r3, r3, #8
 800384e:	f003 0307 	and.w	r3, r3, #7
}
 8003852:	4618      	mov	r0, r3
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	e000ed00 	.word	0xe000ed00

08003860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800386a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386e:	2b00      	cmp	r3, #0
 8003870:	db0b      	blt.n	800388a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003872:	79fb      	ldrb	r3, [r7, #7]
 8003874:	f003 021f 	and.w	r2, r3, #31
 8003878:	4907      	ldr	r1, [pc, #28]	; (8003898 <__NVIC_EnableIRQ+0x38>)
 800387a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387e:	095b      	lsrs	r3, r3, #5
 8003880:	2001      	movs	r0, #1
 8003882:	fa00 f202 	lsl.w	r2, r0, r2
 8003886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	e000e100 	.word	0xe000e100

0800389c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	4603      	mov	r3, r0
 80038a4:	6039      	str	r1, [r7, #0]
 80038a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	db0a      	blt.n	80038c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	490c      	ldr	r1, [pc, #48]	; (80038e8 <__NVIC_SetPriority+0x4c>)
 80038b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ba:	0112      	lsls	r2, r2, #4
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	440b      	add	r3, r1
 80038c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038c4:	e00a      	b.n	80038dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	4908      	ldr	r1, [pc, #32]	; (80038ec <__NVIC_SetPriority+0x50>)
 80038cc:	79fb      	ldrb	r3, [r7, #7]
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	3b04      	subs	r3, #4
 80038d4:	0112      	lsls	r2, r2, #4
 80038d6:	b2d2      	uxtb	r2, r2
 80038d8:	440b      	add	r3, r1
 80038da:	761a      	strb	r2, [r3, #24]
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	e000e100 	.word	0xe000e100
 80038ec:	e000ed00 	.word	0xe000ed00

080038f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b089      	sub	sp, #36	; 0x24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f1c3 0307 	rsb	r3, r3, #7
 800390a:	2b04      	cmp	r3, #4
 800390c:	bf28      	it	cs
 800390e:	2304      	movcs	r3, #4
 8003910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	3304      	adds	r3, #4
 8003916:	2b06      	cmp	r3, #6
 8003918:	d902      	bls.n	8003920 <NVIC_EncodePriority+0x30>
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	3b03      	subs	r3, #3
 800391e:	e000      	b.n	8003922 <NVIC_EncodePriority+0x32>
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	43da      	mvns	r2, r3
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	401a      	ands	r2, r3
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003938:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	fa01 f303 	lsl.w	r3, r1, r3
 8003942:	43d9      	mvns	r1, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003948:	4313      	orrs	r3, r2
         );
}
 800394a:	4618      	mov	r0, r3
 800394c:	3724      	adds	r7, #36	; 0x24
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b082      	sub	sp, #8
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff ff4c 	bl	80037fc <__NVIC_SetPriorityGrouping>
}
 8003964:	bf00      	nop
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
 8003978:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800397a:	2300      	movs	r3, #0
 800397c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800397e:	f7ff ff61 	bl	8003844 <__NVIC_GetPriorityGrouping>
 8003982:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	68b9      	ldr	r1, [r7, #8]
 8003988:	6978      	ldr	r0, [r7, #20]
 800398a:	f7ff ffb1 	bl	80038f0 <NVIC_EncodePriority>
 800398e:	4602      	mov	r2, r0
 8003990:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003994:	4611      	mov	r1, r2
 8003996:	4618      	mov	r0, r3
 8003998:	f7ff ff80 	bl	800389c <__NVIC_SetPriority>
}
 800399c:	bf00      	nop
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7ff ff54 	bl	8003860 <__NVIC_EnableIRQ>
}
 80039b8:	bf00      	nop
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b088      	sub	sp, #32
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80039c8:	2300      	movs	r3, #0
 80039ca:	61fb      	str	r3, [r7, #28]
 80039cc:	2300      	movs	r3, #0
 80039ce:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80039d0:	4ba9      	ldr	r3, [pc, #676]	; (8003c78 <HAL_ETH_Init+0x2b8>)
 80039d2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80039d8:	2300      	movs	r3, #0
 80039da:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e181      	b.n	8003cea <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d106      	bne.n	8003a00 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f006 faea 	bl	8009fd4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a00:	4b9e      	ldr	r3, [pc, #632]	; (8003c7c <HAL_ETH_Init+0x2bc>)
 8003a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a04:	4a9d      	ldr	r2, [pc, #628]	; (8003c7c <HAL_ETH_Init+0x2bc>)
 8003a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a0a:	6453      	str	r3, [r2, #68]	; 0x44
 8003a0c:	4b9b      	ldr	r3, [pc, #620]	; (8003c7c <HAL_ETH_Init+0x2bc>)
 8003a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a14:	60bb      	str	r3, [r7, #8]
 8003a16:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003a18:	4b99      	ldr	r3, [pc, #612]	; (8003c80 <HAL_ETH_Init+0x2c0>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	4a98      	ldr	r2, [pc, #608]	; (8003c80 <HAL_ETH_Init+0x2c0>)
 8003a1e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a22:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003a24:	4b96      	ldr	r3, [pc, #600]	; (8003c80 <HAL_ETH_Init+0x2c0>)
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	4994      	ldr	r1, [pc, #592]	; (8003c80 <HAL_ETH_Init+0x2c0>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f042 0201 	orr.w	r2, r2, #1
 8003a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a48:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003a4a:	f7ff fea7 	bl	800379c <HAL_GetTick>
 8003a4e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003a50:	e011      	b.n	8003a76 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8003a52:	f7ff fea3 	bl	800379c <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003a60:	d909      	bls.n	8003a76 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2203      	movs	r2, #3
 8003a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e139      	b.n	8003cea <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1e4      	bne.n	8003a52 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f023 031c 	bic.w	r3, r3, #28
 8003a96:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003a98:	f003 fbee 	bl	8007278 <HAL_RCC_GetHCLKFreq>
 8003a9c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	4a78      	ldr	r2, [pc, #480]	; (8003c84 <HAL_ETH_Init+0x2c4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d908      	bls.n	8003ab8 <HAL_ETH_Init+0xf8>
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	4a77      	ldr	r2, [pc, #476]	; (8003c88 <HAL_ETH_Init+0x2c8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d804      	bhi.n	8003ab8 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	f043 0308 	orr.w	r3, r3, #8
 8003ab4:	61fb      	str	r3, [r7, #28]
 8003ab6:	e027      	b.n	8003b08 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	4a73      	ldr	r2, [pc, #460]	; (8003c88 <HAL_ETH_Init+0x2c8>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d908      	bls.n	8003ad2 <HAL_ETH_Init+0x112>
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	4a6d      	ldr	r2, [pc, #436]	; (8003c78 <HAL_ETH_Init+0x2b8>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d204      	bcs.n	8003ad2 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f043 030c 	orr.w	r3, r3, #12
 8003ace:	61fb      	str	r3, [r7, #28]
 8003ad0:	e01a      	b.n	8003b08 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	4a68      	ldr	r2, [pc, #416]	; (8003c78 <HAL_ETH_Init+0x2b8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d303      	bcc.n	8003ae2 <HAL_ETH_Init+0x122>
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	4a6b      	ldr	r2, [pc, #428]	; (8003c8c <HAL_ETH_Init+0x2cc>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d911      	bls.n	8003b06 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	4a69      	ldr	r2, [pc, #420]	; (8003c8c <HAL_ETH_Init+0x2cc>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d908      	bls.n	8003afc <HAL_ETH_Init+0x13c>
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	4a68      	ldr	r2, [pc, #416]	; (8003c90 <HAL_ETH_Init+0x2d0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d804      	bhi.n	8003afc <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	f043 0304 	orr.w	r3, r3, #4
 8003af8:	61fb      	str	r3, [r7, #28]
 8003afa:	e005      	b.n	8003b08 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f043 0310 	orr.w	r3, r3, #16
 8003b02:	61fb      	str	r3, [r7, #28]
 8003b04:	e000      	b.n	8003b08 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003b06:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	69fa      	ldr	r2, [r7, #28]
 8003b0e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003b10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003b14:	2100      	movs	r1, #0
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 fc17 	bl	800434a <HAL_ETH_WritePHYRegister>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00b      	beq.n	8003b3a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8003b26:	6939      	ldr	r1, [r7, #16]
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 fdcd 	bl	80046c8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e0d7      	b.n	8003cea <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8003b3a:	20ff      	movs	r0, #255	; 0xff
 8003b3c:	f7ff fe3a 	bl	80037b4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 80a5 	beq.w	8003c94 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b4a:	f7ff fe27 	bl	800379c <HAL_GetTick>
 8003b4e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003b50:	f107 030c 	add.w	r3, r7, #12
 8003b54:	461a      	mov	r2, r3
 8003b56:	2101      	movs	r1, #1
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 fb8e 	bl	800427a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003b5e:	f7ff fe1d 	bl	800379c <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d90f      	bls.n	8003b90 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003b74:	6939      	ldr	r1, [r7, #16]
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 fda6 	bl	80046c8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e0ac      	b.n	8003cea <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f003 0304 	and.w	r3, r3, #4
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0da      	beq.n	8003b50 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003b9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 fbd2 	bl	800434a <HAL_ETH_WritePHYRegister>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00b      	beq.n	8003bc4 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003bb0:	6939      	ldr	r1, [r7, #16]
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fd88 	bl	80046c8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e092      	b.n	8003cea <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bc4:	f7ff fdea 	bl	800379c <HAL_GetTick>
 8003bc8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003bca:	f107 030c 	add.w	r3, r7, #12
 8003bce:	461a      	mov	r2, r3
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fb51 	bl	800427a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003bd8:	f7ff fde0 	bl	800379c <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d90f      	bls.n	8003c0a <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003bee:	6939      	ldr	r1, [r7, #16]
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 fd69 	bl	80046c8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e06f      	b.n	8003cea <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f003 0320 	and.w	r3, r3, #32
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0da      	beq.n	8003bca <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003c14:	f107 030c 	add.w	r3, r7, #12
 8003c18:	461a      	mov	r2, r3
 8003c1a:	2110      	movs	r1, #16
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 fb2c 	bl	800427a <HAL_ETH_ReadPHYRegister>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00b      	beq.n	8003c40 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003c2c:	6939      	ldr	r1, [r7, #16]
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 fd4a 	bl	80046c8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e054      	b.n	8003cea <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d004      	beq.n	8003c54 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c50:	60da      	str	r2, [r3, #12]
 8003c52:	e002      	b.n	8003c5a <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	609a      	str	r2, [r3, #8]
 8003c6a:	e035      	b.n	8003cd8 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003c72:	609a      	str	r2, [r3, #8]
 8003c74:	e030      	b.n	8003cd8 <HAL_ETH_Init+0x318>
 8003c76:	bf00      	nop
 8003c78:	03938700 	.word	0x03938700
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	40013800 	.word	0x40013800
 8003c84:	01312cff 	.word	0x01312cff
 8003c88:	02160ebf 	.word	0x02160ebf
 8003c8c:	05f5e0ff 	.word	0x05f5e0ff
 8003c90:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	08db      	lsrs	r3, r3, #3
 8003c9a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	085b      	lsrs	r3, r3, #1
 8003ca2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	461a      	mov	r2, r3
 8003caa:	2100      	movs	r1, #0
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 fb4c 	bl	800434a <HAL_ETH_WritePHYRegister>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00b      	beq.n	8003cd0 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003cbc:	6939      	ldr	r1, [r7, #16]
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f000 fd02 	bl	80046c8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e00c      	b.n	8003cea <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8003cd0:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003cd4:	f7ff fd6e 	bl	80037b4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003cd8:	6939      	ldr	r1, [r7, #16]
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 fcf4 	bl	80046c8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3720      	adds	r7, #32
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop

08003cf4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8003d02:	2300      	movs	r3, #0
 8003d04:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_ETH_DMATxDescListInit+0x20>
 8003d10:	2302      	movs	r3, #2
 8003d12:	e052      	b.n	8003dba <HAL_ETH_DMATxDescListInit+0xc6>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	617b      	str	r3, [r7, #20]
 8003d2e:	e030      	b.n	8003d92 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	015b      	lsls	r3, r3, #5
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	4413      	add	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003d40:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003d48:	fb02 f303 	mul.w	r3, r2, r3
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	4413      	add	r3, r2
 8003d50:	461a      	mov	r2, r3
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d105      	bne.n	8003d6a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d208      	bcs.n	8003d86 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	3301      	adds	r3, #1
 8003d78:	015b      	lsls	r3, r3, #5
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	461a      	mov	r2, r3
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	60da      	str	r2, [r3, #12]
 8003d84:	e002      	b.n	8003d8c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	617b      	str	r3, [r7, #20]
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d3ca      	bcc.n	8003d30 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6819      	ldr	r1, [r3, #0]
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	f241 0310 	movw	r3, #4112	; 0x1010
 8003da4:	440b      	add	r3, r1
 8003da6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	371c      	adds	r7, #28
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b087      	sub	sp, #28
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	607a      	str	r2, [r7, #4]
 8003dd2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d101      	bne.n	8003de6 <HAL_ETH_DMARxDescListInit+0x20>
 8003de2:	2302      	movs	r3, #2
 8003de4:	e056      	b.n	8003e94 <HAL_ETH_DMARxDescListInit+0xce>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2202      	movs	r2, #2
 8003df2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	e034      	b.n	8003e6c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	015b      	lsls	r3, r3, #5
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	4413      	add	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003e12:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003e1a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003e22:	fb02 f303 	mul.w	r3, r2, r3
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	4413      	add	r3, r2
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d105      	bne.n	8003e44 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d208      	bcs.n	8003e60 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	3301      	adds	r3, #1
 8003e52:	015b      	lsls	r3, r3, #5
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	4413      	add	r3, r2
 8003e58:	461a      	mov	r2, r3
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	60da      	str	r2, [r3, #12]
 8003e5e:	e002      	b.n	8003e66 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8003e60:	68ba      	ldr	r2, [r7, #8]
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d3c6      	bcc.n	8003e02 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6819      	ldr	r1, [r3, #0]
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	f241 030c 	movw	r3, #4108	; 0x100c
 8003e7e:	440b      	add	r3, r1
 8003e80:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	371c      	adds	r7, #28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	617b      	str	r3, [r7, #20]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60fb      	str	r3, [r7, #12]
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_ETH_TransmitFrame+0x24>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e0cd      	b.n	8004060 <HAL_ETH_TransmitFrame+0x1c0>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d109      	bne.n	8003eee <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8003eea:	2301      	movs	r3, #1
 8003eec:	e0b8      	b.n	8004060 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	da09      	bge.n	8003f0c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2212      	movs	r2, #18
 8003efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e0a9      	b.n	8004060 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d915      	bls.n	8003f42 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	4a54      	ldr	r2, [pc, #336]	; (800406c <HAL_ETH_TransmitFrame+0x1cc>)
 8003f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1e:	0a9b      	lsrs	r3, r3, #10
 8003f20:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	4b51      	ldr	r3, [pc, #324]	; (800406c <HAL_ETH_TransmitFrame+0x1cc>)
 8003f26:	fba3 1302 	umull	r1, r3, r3, r2
 8003f2a:	0a9b      	lsrs	r3, r3, #10
 8003f2c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003f30:	fb01 f303 	mul.w	r3, r1, r3
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	e001      	b.n	8003f46 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8003f42:	2301      	movs	r3, #1
 8003f44:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d11c      	bne.n	8003f86 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8003f5a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003f66:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f72:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003f76:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	62da      	str	r2, [r3, #44]	; 0x2c
 8003f84:	e04b      	b.n	800401e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8003f86:	2300      	movs	r3, #0
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	e044      	b.n	8004016 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f96:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f9a:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d107      	bne.n	8003fb2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003fb0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003fba:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d116      	bne.n	8003ff4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003fd4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	4a25      	ldr	r2, [pc, #148]	; (8004070 <HAL_ETH_TransmitFrame+0x1d0>)
 8003fda:	fb02 f203 	mul.w	r2, r2, r3
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003fe6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003ff2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004002:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	461a      	mov	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	3301      	adds	r3, #1
 8004014:	613b      	str	r3, [r7, #16]
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	429a      	cmp	r2, r3
 800401c:	d3b6      	bcc.n	8003f8c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	f241 0314 	movw	r3, #4116	; 0x1014
 8004026:	4413      	add	r3, r2
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00d      	beq.n	800404e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	f241 0314 	movw	r3, #4116	; 0x1014
 800403a:	4413      	add	r3, r2
 800403c:	2204      	movs	r2, #4
 800403e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	f241 0304 	movw	r3, #4100	; 0x1004
 8004048:	4413      	add	r3, r2
 800404a:	2200      	movs	r2, #0
 800404c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	371c      	adds	r7, #28
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	ac02b00b 	.word	0xac02b00b
 8004070:	fffffa0c 	.word	0xfffffa0c

08004074 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 800407c:	2300      	movs	r3, #0
 800407e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004086:	2b01      	cmp	r3, #1
 8004088:	d101      	bne.n	800408e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800408a:	2302      	movs	r3, #2
 800408c:	e074      	b.n	8004178 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2202      	movs	r2, #2
 800409a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800409e:	e05a      	b.n	8004156 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	3301      	adds	r3, #1
 80040a4:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040b4:	d10d      	bne.n	80040d2 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	461a      	mov	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	629a      	str	r2, [r3, #40]	; 0x28
 80040d0:	e041      	b.n	8004156 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10b      	bne.n	80040f8 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e4:	1c5a      	adds	r2, r3, #1
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	461a      	mov	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	629a      	str	r2, [r3, #40]	; 0x28
 80040f6:	e02e      	b.n	8004156 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004104:	1c5a      	adds	r2, r3, #1
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410e:	2b01      	cmp	r3, #1
 8004110:	d103      	bne.n	800411a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	0c1b      	lsrs	r3, r3, #16
 8004122:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004126:	1f1a      	subs	r2, r3, #4
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	461a      	mov	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8004152:	2300      	movs	r3, #0
 8004154:	e010      	b.n	8004178 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	db02      	blt.n	8004166 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2b03      	cmp	r3, #3
 8004164:	d99c      	bls.n	80040a0 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
}
 8004178:	4618      	mov	r0, r3
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	f241 0314 	movw	r3, #4116	; 0x1014
 8004194:	4413      	add	r3, r2
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419c:	2b40      	cmp	r3, #64	; 0x40
 800419e:	d112      	bne.n	80041c6 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f005 ffd7 	bl	800a154 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	f241 0314 	movw	r3, #4116	; 0x1014
 80041ae:	4413      	add	r3, r2
 80041b0:	2240      	movs	r2, #64	; 0x40
 80041b2:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041c4:	e01b      	b.n	80041fe <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	f241 0314 	movw	r3, #4116	; 0x1014
 80041ce:	4413      	add	r3, r2
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d111      	bne.n	80041fe <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f839 	bl	8004252 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	f241 0314 	movw	r3, #4116	; 0x1014
 80041e8:	4413      	add	r3, r2
 80041ea:	2201      	movs	r2, #1
 80041ec:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	f241 0314 	movw	r3, #4116	; 0x1014
 8004206:	4413      	add	r3, r2
 8004208:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800420c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	f241 0314 	movw	r3, #4116	; 0x1014
 8004216:	4413      	add	r3, r2
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800421e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004222:	d112      	bne.n	800424a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f81e 	bl	8004266 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	f241 0314 	movw	r3, #4116	; 0x1014
 8004232:	4413      	add	r3, r2
 8004234:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004238:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800424a:	bf00      	nop
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b086      	sub	sp, #24
 800427e:	af00      	add	r7, sp, #0
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	460b      	mov	r3, r1
 8004284:	607a      	str	r2, [r7, #4]
 8004286:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800428c:	2300      	movs	r3, #0
 800428e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b82      	cmp	r3, #130	; 0x82
 800429a:	d101      	bne.n	80042a0 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800429c:	2302      	movs	r3, #2
 800429e:	e050      	b.n	8004342 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2282      	movs	r2, #130	; 0x82
 80042a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f003 031c 	and.w	r3, r3, #28
 80042b6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8a1b      	ldrh	r3, [r3, #16]
 80042bc:	02db      	lsls	r3, r3, #11
 80042be:	b29b      	uxth	r3, r3
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80042c6:	897b      	ldrh	r3, [r7, #10]
 80042c8:	019b      	lsls	r3, r3, #6
 80042ca:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f023 0302 	bic.w	r3, r3, #2
 80042da:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f043 0301 	orr.w	r3, r3, #1
 80042e2:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80042ec:	f7ff fa56 	bl	800379c <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80042f2:	e015      	b.n	8004320 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80042f4:	f7ff fa52 	bl	800379c <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004302:	d309      	bcc.n	8004318 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e014      	b.n	8004342 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1e4      	bne.n	80042f4 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	b29b      	uxth	r3, r3
 8004332:	461a      	mov	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b086      	sub	sp, #24
 800434e:	af00      	add	r7, sp, #0
 8004350:	60f8      	str	r0, [r7, #12]
 8004352:	460b      	mov	r3, r1
 8004354:	607a      	str	r2, [r7, #4]
 8004356:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8004358:	2300      	movs	r3, #0
 800435a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800435c:	2300      	movs	r3, #0
 800435e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b42      	cmp	r3, #66	; 0x42
 800436a:	d101      	bne.n	8004370 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800436c:	2302      	movs	r3, #2
 800436e:	e04e      	b.n	800440e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2242      	movs	r2, #66	; 0x42
 8004374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f003 031c 	and.w	r3, r3, #28
 8004386:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8a1b      	ldrh	r3, [r3, #16]
 800438c:	02db      	lsls	r3, r3, #11
 800438e:	b29b      	uxth	r3, r3
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	4313      	orrs	r3, r2
 8004394:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8004396:	897b      	ldrh	r3, [r7, #10]
 8004398:	019b      	lsls	r3, r3, #6
 800439a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f043 0302 	orr.w	r3, r3, #2
 80043aa:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f043 0301 	orr.w	r3, r3, #1
 80043b2:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80043c6:	f7ff f9e9 	bl	800379c <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80043cc:	e015      	b.n	80043fa <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80043ce:	f7ff f9e5 	bl	800379c <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043dc:	d309      	bcc.n	80043f2 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e00d      	b.n	800440e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1e4      	bne.n	80043ce <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8004416:	b580      	push	{r7, lr}
 8004418:	b082      	sub	sp, #8
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004424:	2b01      	cmp	r3, #1
 8004426:	d101      	bne.n	800442c <HAL_ETH_Start+0x16>
 8004428:	2302      	movs	r3, #2
 800442a:	e01f      	b.n	800446c <HAL_ETH_Start+0x56>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 fb45 	bl	8004acc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fb7c 	bl	8004b40 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 fc13 	bl	8004c74 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fbb0 	bl	8004bb4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 fbdd 	bl	8004c14 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004482:	2b01      	cmp	r3, #1
 8004484:	d101      	bne.n	800448a <HAL_ETH_Stop+0x16>
 8004486:	2302      	movs	r3, #2
 8004488:	e01f      	b.n	80044ca <HAL_ETH_Stop+0x56>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2202      	movs	r2, #2
 8004496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fba2 	bl	8004be4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 fbcf 	bl	8004c44 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 fb67 	bl	8004b7a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 fbe1 	bl	8004c74 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 fb27 	bl	8004b06 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d101      	bne.n	80044f0 <HAL_ETH_ConfigMAC+0x1c>
 80044ec:	2302      	movs	r3, #2
 80044ee:	e0e4      	b.n	80046ba <HAL_ETH_ConfigMAC+0x1e6>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 80b1 	beq.w	800466a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	4b6c      	ldr	r3, [pc, #432]	; (80046c4 <HAL_ETH_ConfigMAC+0x1f0>)
 8004514:	4013      	ands	r3, r2
 8004516:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8004520:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8004526:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800452c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8004532:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8004538:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800453e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8004544:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800454a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8004550:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8004556:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 800455c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8004562:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800457a:	2001      	movs	r0, #1
 800457c:	f7ff f91a 	bl	80037b4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004590:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8004596:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800459c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80045a2:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80045a8:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80045ae:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80045ba:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80045bc:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80045c6:	2001      	movs	r0, #1
 80045c8:	f7ff f8f4 	bl	80037b4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80045dc:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80045e6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80045f6:	4013      	ands	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045fe:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8004604:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800460a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8004610:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8004616:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800461c:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	4313      	orrs	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004634:	2001      	movs	r0, #1
 8004636:	f7ff f8bd 	bl	80037b4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800465a:	2001      	movs	r0, #1
 800465c:	f7ff f8aa 	bl	80037b4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	61da      	str	r2, [r3, #28]
 8004668:	e01e      	b.n	80046a8 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004678:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689a      	ldr	r2, [r3, #8]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	4313      	orrs	r3, r2
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800469a:	2001      	movs	r0, #1
 800469c:	f7ff f88a 	bl	80037b4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	ff20810f 	.word	0xff20810f

080046c8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b0b0      	sub	sp, #192	; 0xc0
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80046d2:	2300      	movs	r3, #0
 80046d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d007      	beq.n	80046ee <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046e4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80046ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80046ee:	2300      	movs	r3, #0
 80046f0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80046f2:	2300      	movs	r3, #0
 80046f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80046f6:	2300      	movs	r3, #0
 80046f8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80046fa:	2300      	movs	r3, #0
 80046fc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80046fe:	2300      	movs	r3, #0
 8004700:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8004702:	2300      	movs	r3, #0
 8004704:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d103      	bne.n	8004716 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800470e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004712:	663b      	str	r3, [r7, #96]	; 0x60
 8004714:	e001      	b.n	800471a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8004716:	2300      	movs	r3, #0
 8004718:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800471a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800471e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8004720:	2300      	movs	r3, #0
 8004722:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004724:	2300      	movs	r3, #0
 8004726:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8004728:	2300      	movs	r3, #0
 800472a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800472c:	2300      	movs	r3, #0
 800472e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8004730:	2300      	movs	r3, #0
 8004732:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8004734:	2340      	movs	r3, #64	; 0x40
 8004736:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8004738:	2300      	movs	r3, #0
 800473a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800473e:	2300      	movs	r3, #0
 8004740:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8004744:	2300      	movs	r3, #0
 8004746:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800474a:	2300      	movs	r3, #0
 800474c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8004750:	2300      	movs	r3, #0
 8004752:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8004756:	2300      	movs	r3, #0
 8004758:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 800475c:	2300      	movs	r3, #0
 800475e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8004762:	2300      	movs	r3, #0
 8004764:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8004768:	2380      	movs	r3, #128	; 0x80
 800476a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800476e:	2300      	movs	r3, #0
 8004770:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004774:	2300      	movs	r3, #0
 8004776:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800477a:	2300      	movs	r3, #0
 800477c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004780:	2300      	movs	r3, #0
 8004782:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8004786:	2300      	movs	r3, #0
 8004788:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 800478c:	2300      	movs	r3, #0
 800478e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800479c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80047a0:	4bab      	ldr	r3, [pc, #684]	; (8004a50 <ETH_MACDMAConfig+0x388>)
 80047a2:	4013      	ands	r3, r2
 80047a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80047a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80047aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80047ac:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80047ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80047b0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80047b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80047b4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80047ba:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80047bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80047be:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80047c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80047c2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80047c8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80047ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80047cc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80047ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80047d0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80047d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80047d4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80047d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80047d8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80047da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80047dc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80047de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80047f0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80047fc:	2001      	movs	r0, #1
 80047fe:	f7fe ffd9 	bl	80037b4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800480a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800480c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800480e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004810:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8004812:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8004814:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8004816:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800481a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800481c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8004820:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8004822:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8004826:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8004828:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800482c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8004830:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8004838:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800483a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004846:	2001      	movs	r0, #1
 8004848:	f7fe ffb4 	bl	80037b4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004854:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800485e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004868:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8004874:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004878:	f64f 7341 	movw	r3, #65345	; 0xff41
 800487c:	4013      	ands	r3, r2
 800487e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004882:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004886:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004888:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800488c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800488e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004892:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004894:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004898:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800489a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800489e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80048a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80048a4:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80048a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80048b8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80048c4:	2001      	movs	r0, #1
 80048c6:	f7fe ff75 	bl	80037b4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80048d2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80048d4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80048d8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80048ee:	2001      	movs	r0, #1
 80048f0:	f7fe ff60 	bl	80037b4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80048fc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80048fe:	2300      	movs	r3, #0
 8004900:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8004902:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004906:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004908:	2300      	movs	r3, #0
 800490a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800490c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004910:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004912:	2300      	movs	r3, #0
 8004914:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8004916:	2300      	movs	r3, #0
 8004918:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800491a:	2300      	movs	r3, #0
 800491c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800491e:	2300      	movs	r3, #0
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8004922:	2304      	movs	r3, #4
 8004924:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8004926:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800492a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800492c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004930:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004932:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004936:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004938:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800493c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800493e:	2380      	movs	r3, #128	; 0x80
 8004940:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8004942:	2300      	movs	r3, #0
 8004944:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004946:	2300      	movs	r3, #0
 8004948:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	f241 0318 	movw	r3, #4120	; 0x1018
 8004952:	4413      	add	r3, r2
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800495a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800495e:	4b3d      	ldr	r3, [pc, #244]	; (8004a54 <ETH_MACDMAConfig+0x38c>)
 8004960:	4013      	ands	r3, r2
 8004962:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004966:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8004968:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800496a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800496c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800496e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8004970:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8004972:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8004974:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8004976:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8004978:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800497a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800497c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800497e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8004982:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004984:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8004986:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004988:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800498c:	4313      	orrs	r3, r2
 800498e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	f241 0318 	movw	r3, #4120	; 0x1018
 800499a:	4413      	add	r3, r2
 800499c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80049a0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	f241 0318 	movw	r3, #4120	; 0x1018
 80049aa:	4413      	add	r3, r2
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80049b2:	2001      	movs	r0, #1
 80049b4:	f7fe fefe 	bl	80037b4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	f241 0318 	movw	r3, #4120	; 0x1018
 80049c0:	4413      	add	r3, r2
 80049c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80049c6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80049c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80049ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80049cc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80049ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80049d0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80049d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80049d4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80049d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80049d8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80049da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049dc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80049de:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80049e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80049e2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80049ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049f0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a00:	2001      	movs	r0, #1
 8004a02:	f7fe fed7 	bl	80037b4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a0e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004a12:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d10d      	bne.n	8004a38 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	f241 031c 	movw	r3, #4124	; 0x101c
 8004a24:	4413      	add	r3, r2
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6811      	ldr	r1, [r2, #0]
 8004a2c:	4a0a      	ldr	r2, [pc, #40]	; (8004a58 <ETH_MACDMAConfig+0x390>)
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	f241 031c 	movw	r3, #4124	; 0x101c
 8004a34:	440b      	add	r3, r1
 8004a36:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	2100      	movs	r1, #0
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f80b 	bl	8004a5c <ETH_MACAddressConfig>
}
 8004a46:	bf00      	nop
 8004a48:	37c0      	adds	r7, #192	; 0xc0
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	ff20810f 	.word	0xff20810f
 8004a54:	f8de3f23 	.word	0xf8de3f23
 8004a58:	00010040 	.word	0x00010040

08004a5c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3305      	adds	r3, #5
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	021b      	lsls	r3, r3, #8
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	3204      	adds	r2, #4
 8004a74:	7812      	ldrb	r2, [r2, #0]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	4b11      	ldr	r3, [pc, #68]	; (8004ac4 <ETH_MACAddressConfig+0x68>)
 8004a7e:	4413      	add	r3, r2
 8004a80:	461a      	mov	r2, r3
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3303      	adds	r3, #3
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	061a      	lsls	r2, r3, #24
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	3302      	adds	r3, #2
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	041b      	lsls	r3, r3, #16
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	021b      	lsls	r3, r3, #8
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	7812      	ldrb	r2, [r2, #0]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	4b06      	ldr	r3, [pc, #24]	; (8004ac8 <ETH_MACAddressConfig+0x6c>)
 8004aae:	4413      	add	r3, r2
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	6013      	str	r3, [r2, #0]
}
 8004ab6:	bf00      	nop
 8004ab8:	371c      	adds	r7, #28
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	40028040 	.word	0x40028040
 8004ac8:	40028044 	.word	0x40028044

08004acc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0208 	orr.w	r2, r2, #8
 8004ae6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004af0:	2001      	movs	r0, #1
 8004af2:	f7fe fe5f 	bl	80037b4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	601a      	str	r2, [r3, #0]
}
 8004afe:	bf00      	nop
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b084      	sub	sp, #16
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f022 0208 	bic.w	r2, r2, #8
 8004b20:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b2a:	2001      	movs	r0, #1
 8004b2c:	f7fe fe42 	bl	80037b4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	601a      	str	r2, [r3, #0]
}
 8004b38:	bf00      	nop
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 0204 	orr.w	r2, r2, #4
 8004b5a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b64:	2001      	movs	r0, #1
 8004b66:	f7fe fe25 	bl	80037b4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	601a      	str	r2, [r3, #0]
}
 8004b72:	bf00      	nop
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b084      	sub	sp, #16
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004b82:	2300      	movs	r3, #0
 8004b84:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0204 	bic.w	r2, r2, #4
 8004b94:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b9e:	2001      	movs	r0, #1
 8004ba0:	f7fe fe08 	bl	80037b4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	601a      	str	r2, [r3, #0]
}
 8004bac:	bf00      	nop
 8004bae:	3710      	adds	r7, #16
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	f241 0318 	movw	r3, #4120	; 0x1018
 8004bc4:	4413      	add	r3, r2
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6811      	ldr	r1, [r2, #0]
 8004bcc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004bd0:	f241 0318 	movw	r3, #4120	; 0x1018
 8004bd4:	440b      	add	r3, r1
 8004bd6:	601a      	str	r2, [r3, #0]
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	f241 0318 	movw	r3, #4120	; 0x1018
 8004bf4:	4413      	add	r3, r2
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6811      	ldr	r1, [r2, #0]
 8004bfc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004c00:	f241 0318 	movw	r3, #4120	; 0x1018
 8004c04:	440b      	add	r3, r1
 8004c06:	601a      	str	r2, [r3, #0]
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	f241 0318 	movw	r3, #4120	; 0x1018
 8004c24:	4413      	add	r3, r2
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	6811      	ldr	r1, [r2, #0]
 8004c2c:	f043 0202 	orr.w	r2, r3, #2
 8004c30:	f241 0318 	movw	r3, #4120	; 0x1018
 8004c34:	440b      	add	r3, r1
 8004c36:	601a      	str	r2, [r3, #0]
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	f241 0318 	movw	r3, #4120	; 0x1018
 8004c54:	4413      	add	r3, r2
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6811      	ldr	r1, [r2, #0]
 8004c5c:	f023 0202 	bic.w	r2, r3, #2
 8004c60:	f241 0318 	movw	r3, #4120	; 0x1018
 8004c64:	440b      	add	r3, r1
 8004c66:	601a      	str	r2, [r3, #0]
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	f241 0318 	movw	r3, #4120	; 0x1018
 8004c88:	4413      	add	r3, r2
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	6811      	ldr	r1, [r2, #0]
 8004c90:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c94:	f241 0318 	movw	r3, #4120	; 0x1018
 8004c98:	440b      	add	r3, r1
 8004c9a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	f241 0318 	movw	r3, #4120	; 0x1018
 8004ca4:	4413      	add	r3, r2
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004caa:	2001      	movs	r0, #1
 8004cac:	f7fe fd82 	bl	80037b4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6819      	ldr	r1, [r3, #0]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	f241 0318 	movw	r3, #4120	; 0x1018
 8004cba:	440b      	add	r3, r1
 8004cbc:	601a      	str	r2, [r3, #0]
}
 8004cbe:	bf00      	nop
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
	...

08004cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b089      	sub	sp, #36	; 0x24
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61fb      	str	r3, [r7, #28]
 8004ce6:	e175      	b.n	8004fd4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004ce8:	2201      	movs	r2, #1
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004cfc:	693a      	ldr	r2, [r7, #16]
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	f040 8164 	bne.w	8004fce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d005      	beq.n	8004d1e <HAL_GPIO_Init+0x56>
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d130      	bne.n	8004d80 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	2203      	movs	r2, #3
 8004d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2e:	43db      	mvns	r3, r3
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	4013      	ands	r3, r2
 8004d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d54:	2201      	movs	r2, #1
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5c:	43db      	mvns	r3, r3
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	4013      	ands	r3, r2
 8004d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	091b      	lsrs	r3, r3, #4
 8004d6a:	f003 0201 	and.w	r2, r3, #1
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f003 0303 	and.w	r3, r3, #3
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d017      	beq.n	8004dbc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	2203      	movs	r2, #3
 8004d98:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9c:	43db      	mvns	r3, r3
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	4013      	ands	r3, r2
 8004da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	005b      	lsls	r3, r3, #1
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f003 0303 	and.w	r3, r3, #3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d123      	bne.n	8004e10 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	08da      	lsrs	r2, r3, #3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	3208      	adds	r2, #8
 8004dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	220f      	movs	r2, #15
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	43db      	mvns	r3, r3
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	4013      	ands	r3, r2
 8004dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	691a      	ldr	r2, [r3, #16]
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	08da      	lsrs	r2, r3, #3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	3208      	adds	r2, #8
 8004e0a:	69b9      	ldr	r1, [r7, #24]
 8004e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	2203      	movs	r2, #3
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	43db      	mvns	r3, r3
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	4013      	ands	r3, r2
 8004e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f003 0203 	and.w	r2, r3, #3
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	fa02 f303 	lsl.w	r3, r2, r3
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 80be 	beq.w	8004fce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e52:	4b66      	ldr	r3, [pc, #408]	; (8004fec <HAL_GPIO_Init+0x324>)
 8004e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e56:	4a65      	ldr	r2, [pc, #404]	; (8004fec <HAL_GPIO_Init+0x324>)
 8004e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8004e5e:	4b63      	ldr	r3, [pc, #396]	; (8004fec <HAL_GPIO_Init+0x324>)
 8004e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e66:	60fb      	str	r3, [r7, #12]
 8004e68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004e6a:	4a61      	ldr	r2, [pc, #388]	; (8004ff0 <HAL_GPIO_Init+0x328>)
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	089b      	lsrs	r3, r3, #2
 8004e70:	3302      	adds	r3, #2
 8004e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	220f      	movs	r2, #15
 8004e82:	fa02 f303 	lsl.w	r3, r2, r3
 8004e86:	43db      	mvns	r3, r3
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a58      	ldr	r2, [pc, #352]	; (8004ff4 <HAL_GPIO_Init+0x32c>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d037      	beq.n	8004f06 <HAL_GPIO_Init+0x23e>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a57      	ldr	r2, [pc, #348]	; (8004ff8 <HAL_GPIO_Init+0x330>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d031      	beq.n	8004f02 <HAL_GPIO_Init+0x23a>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a56      	ldr	r2, [pc, #344]	; (8004ffc <HAL_GPIO_Init+0x334>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d02b      	beq.n	8004efe <HAL_GPIO_Init+0x236>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a55      	ldr	r2, [pc, #340]	; (8005000 <HAL_GPIO_Init+0x338>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d025      	beq.n	8004efa <HAL_GPIO_Init+0x232>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a54      	ldr	r2, [pc, #336]	; (8005004 <HAL_GPIO_Init+0x33c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d01f      	beq.n	8004ef6 <HAL_GPIO_Init+0x22e>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a53      	ldr	r2, [pc, #332]	; (8005008 <HAL_GPIO_Init+0x340>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d019      	beq.n	8004ef2 <HAL_GPIO_Init+0x22a>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a52      	ldr	r2, [pc, #328]	; (800500c <HAL_GPIO_Init+0x344>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d013      	beq.n	8004eee <HAL_GPIO_Init+0x226>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a51      	ldr	r2, [pc, #324]	; (8005010 <HAL_GPIO_Init+0x348>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d00d      	beq.n	8004eea <HAL_GPIO_Init+0x222>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a50      	ldr	r2, [pc, #320]	; (8005014 <HAL_GPIO_Init+0x34c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d007      	beq.n	8004ee6 <HAL_GPIO_Init+0x21e>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a4f      	ldr	r2, [pc, #316]	; (8005018 <HAL_GPIO_Init+0x350>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d101      	bne.n	8004ee2 <HAL_GPIO_Init+0x21a>
 8004ede:	2309      	movs	r3, #9
 8004ee0:	e012      	b.n	8004f08 <HAL_GPIO_Init+0x240>
 8004ee2:	230a      	movs	r3, #10
 8004ee4:	e010      	b.n	8004f08 <HAL_GPIO_Init+0x240>
 8004ee6:	2308      	movs	r3, #8
 8004ee8:	e00e      	b.n	8004f08 <HAL_GPIO_Init+0x240>
 8004eea:	2307      	movs	r3, #7
 8004eec:	e00c      	b.n	8004f08 <HAL_GPIO_Init+0x240>
 8004eee:	2306      	movs	r3, #6
 8004ef0:	e00a      	b.n	8004f08 <HAL_GPIO_Init+0x240>
 8004ef2:	2305      	movs	r3, #5
 8004ef4:	e008      	b.n	8004f08 <HAL_GPIO_Init+0x240>
 8004ef6:	2304      	movs	r3, #4
 8004ef8:	e006      	b.n	8004f08 <HAL_GPIO_Init+0x240>
 8004efa:	2303      	movs	r3, #3
 8004efc:	e004      	b.n	8004f08 <HAL_GPIO_Init+0x240>
 8004efe:	2302      	movs	r3, #2
 8004f00:	e002      	b.n	8004f08 <HAL_GPIO_Init+0x240>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e000      	b.n	8004f08 <HAL_GPIO_Init+0x240>
 8004f06:	2300      	movs	r3, #0
 8004f08:	69fa      	ldr	r2, [r7, #28]
 8004f0a:	f002 0203 	and.w	r2, r2, #3
 8004f0e:	0092      	lsls	r2, r2, #2
 8004f10:	4093      	lsls	r3, r2
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004f18:	4935      	ldr	r1, [pc, #212]	; (8004ff0 <HAL_GPIO_Init+0x328>)
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	089b      	lsrs	r3, r3, #2
 8004f1e:	3302      	adds	r3, #2
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f26:	4b3d      	ldr	r3, [pc, #244]	; (800501c <HAL_GPIO_Init+0x354>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	43db      	mvns	r3, r3
 8004f30:	69ba      	ldr	r2, [r7, #24]
 8004f32:	4013      	ands	r3, r2
 8004f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f4a:	4a34      	ldr	r2, [pc, #208]	; (800501c <HAL_GPIO_Init+0x354>)
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f50:	4b32      	ldr	r3, [pc, #200]	; (800501c <HAL_GPIO_Init+0x354>)
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	43db      	mvns	r3, r3
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004f74:	4a29      	ldr	r2, [pc, #164]	; (800501c <HAL_GPIO_Init+0x354>)
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004f7a:	4b28      	ldr	r3, [pc, #160]	; (800501c <HAL_GPIO_Init+0x354>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	43db      	mvns	r3, r3
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	4013      	ands	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004f9e:	4a1f      	ldr	r2, [pc, #124]	; (800501c <HAL_GPIO_Init+0x354>)
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fa4:	4b1d      	ldr	r3, [pc, #116]	; (800501c <HAL_GPIO_Init+0x354>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	43db      	mvns	r3, r3
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004fc0:	69ba      	ldr	r2, [r7, #24]
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fc8:	4a14      	ldr	r2, [pc, #80]	; (800501c <HAL_GPIO_Init+0x354>)
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	61fb      	str	r3, [r7, #28]
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	2b0f      	cmp	r3, #15
 8004fd8:	f67f ae86 	bls.w	8004ce8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004fdc:	bf00      	nop
 8004fde:	bf00      	nop
 8004fe0:	3724      	adds	r7, #36	; 0x24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	40013800 	.word	0x40013800
 8004ff4:	40020000 	.word	0x40020000
 8004ff8:	40020400 	.word	0x40020400
 8004ffc:	40020800 	.word	0x40020800
 8005000:	40020c00 	.word	0x40020c00
 8005004:	40021000 	.word	0x40021000
 8005008:	40021400 	.word	0x40021400
 800500c:	40021800 	.word	0x40021800
 8005010:	40021c00 	.word	0x40021c00
 8005014:	40022000 	.word	0x40022000
 8005018:	40022400 	.word	0x40022400
 800501c:	40013c00 	.word	0x40013c00

08005020 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	460b      	mov	r3, r1
 800502a:	807b      	strh	r3, [r7, #2]
 800502c:	4613      	mov	r3, r2
 800502e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005030:	787b      	ldrb	r3, [r7, #1]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005036:	887a      	ldrh	r2, [r7, #2]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800503c:	e003      	b.n	8005046 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800503e:	887b      	ldrh	r3, [r7, #2]
 8005040:	041a      	lsls	r2, r3, #16
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	619a      	str	r2, [r3, #24]
}
 8005046:	bf00      	nop
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005052:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005054:	b08f      	sub	sp, #60	; 0x3c
 8005056:	af0a      	add	r7, sp, #40	; 0x28
 8005058:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e054      	b.n	800510e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d106      	bne.n	8005084 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f01b fd38 	bl	8020af4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2203      	movs	r2, #3
 8005088:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005094:	2b00      	cmp	r3, #0
 8005096:	d102      	bne.n	800509e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f003 fdb3 	bl	8008c0e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	603b      	str	r3, [r7, #0]
 80050ae:	687e      	ldr	r6, [r7, #4]
 80050b0:	466d      	mov	r5, sp
 80050b2:	f106 0410 	add.w	r4, r6, #16
 80050b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80050c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80050c6:	1d33      	adds	r3, r6, #4
 80050c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050ca:	6838      	ldr	r0, [r7, #0]
 80050cc:	f003 fd36 	bl	8008b3c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2101      	movs	r1, #1
 80050d6:	4618      	mov	r0, r3
 80050d8:	f003 fdaa 	bl	8008c30 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	603b      	str	r3, [r7, #0]
 80050e2:	687e      	ldr	r6, [r7, #4]
 80050e4:	466d      	mov	r5, sp
 80050e6:	f106 0410 	add.w	r4, r6, #16
 80050ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80050f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80050fa:	1d33      	adds	r3, r6, #4
 80050fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050fe:	6838      	ldr	r0, [r7, #0]
 8005100:	f003 ff2c 	bl	8008f5c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005116 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8005116:	b590      	push	{r4, r7, lr}
 8005118:	b089      	sub	sp, #36	; 0x24
 800511a:	af04      	add	r7, sp, #16
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	4608      	mov	r0, r1
 8005120:	4611      	mov	r1, r2
 8005122:	461a      	mov	r2, r3
 8005124:	4603      	mov	r3, r0
 8005126:	70fb      	strb	r3, [r7, #3]
 8005128:	460b      	mov	r3, r1
 800512a:	70bb      	strb	r3, [r7, #2]
 800512c:	4613      	mov	r3, r2
 800512e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005136:	2b01      	cmp	r3, #1
 8005138:	d101      	bne.n	800513e <HAL_HCD_HC_Init+0x28>
 800513a:	2302      	movs	r3, #2
 800513c:	e076      	b.n	800522c <HAL_HCD_HC_Init+0x116>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8005146:	78fb      	ldrb	r3, [r7, #3]
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	212c      	movs	r1, #44	; 0x2c
 800514c:	fb01 f303 	mul.w	r3, r1, r3
 8005150:	4413      	add	r3, r2
 8005152:	333d      	adds	r3, #61	; 0x3d
 8005154:	2200      	movs	r2, #0
 8005156:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005158:	78fb      	ldrb	r3, [r7, #3]
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	212c      	movs	r1, #44	; 0x2c
 800515e:	fb01 f303 	mul.w	r3, r1, r3
 8005162:	4413      	add	r3, r2
 8005164:	3338      	adds	r3, #56	; 0x38
 8005166:	787a      	ldrb	r2, [r7, #1]
 8005168:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800516a:	78fb      	ldrb	r3, [r7, #3]
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	212c      	movs	r1, #44	; 0x2c
 8005170:	fb01 f303 	mul.w	r3, r1, r3
 8005174:	4413      	add	r3, r2
 8005176:	3340      	adds	r3, #64	; 0x40
 8005178:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800517a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800517c:	78fb      	ldrb	r3, [r7, #3]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	212c      	movs	r1, #44	; 0x2c
 8005182:	fb01 f303 	mul.w	r3, r1, r3
 8005186:	4413      	add	r3, r2
 8005188:	3339      	adds	r3, #57	; 0x39
 800518a:	78fa      	ldrb	r2, [r7, #3]
 800518c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800518e:	78fb      	ldrb	r3, [r7, #3]
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	212c      	movs	r1, #44	; 0x2c
 8005194:	fb01 f303 	mul.w	r3, r1, r3
 8005198:	4413      	add	r3, r2
 800519a:	333f      	adds	r3, #63	; 0x3f
 800519c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80051a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80051a2:	78fb      	ldrb	r3, [r7, #3]
 80051a4:	78ba      	ldrb	r2, [r7, #2]
 80051a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051aa:	b2d0      	uxtb	r0, r2
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	212c      	movs	r1, #44	; 0x2c
 80051b0:	fb01 f303 	mul.w	r3, r1, r3
 80051b4:	4413      	add	r3, r2
 80051b6:	333a      	adds	r3, #58	; 0x3a
 80051b8:	4602      	mov	r2, r0
 80051ba:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80051bc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	da09      	bge.n	80051d8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80051c4:	78fb      	ldrb	r3, [r7, #3]
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	212c      	movs	r1, #44	; 0x2c
 80051ca:	fb01 f303 	mul.w	r3, r1, r3
 80051ce:	4413      	add	r3, r2
 80051d0:	333b      	adds	r3, #59	; 0x3b
 80051d2:	2201      	movs	r2, #1
 80051d4:	701a      	strb	r2, [r3, #0]
 80051d6:	e008      	b.n	80051ea <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80051d8:	78fb      	ldrb	r3, [r7, #3]
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	212c      	movs	r1, #44	; 0x2c
 80051de:	fb01 f303 	mul.w	r3, r1, r3
 80051e2:	4413      	add	r3, r2
 80051e4:	333b      	adds	r3, #59	; 0x3b
 80051e6:	2200      	movs	r2, #0
 80051e8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80051ea:	78fb      	ldrb	r3, [r7, #3]
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	212c      	movs	r1, #44	; 0x2c
 80051f0:	fb01 f303 	mul.w	r3, r1, r3
 80051f4:	4413      	add	r3, r2
 80051f6:	333c      	adds	r3, #60	; 0x3c
 80051f8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80051fc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	787c      	ldrb	r4, [r7, #1]
 8005204:	78ba      	ldrb	r2, [r7, #2]
 8005206:	78f9      	ldrb	r1, [r7, #3]
 8005208:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800520a:	9302      	str	r3, [sp, #8]
 800520c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005210:	9301      	str	r3, [sp, #4]
 8005212:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005216:	9300      	str	r3, [sp, #0]
 8005218:	4623      	mov	r3, r4
 800521a:	f004 f819 	bl	8009250 <USB_HC_Init>
 800521e:	4603      	mov	r3, r0
 8005220:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800522a:	7bfb      	ldrb	r3, [r7, #15]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	bd90      	pop	{r4, r7, pc}

08005234 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	460b      	mov	r3, r1
 800523e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8005240:	2300      	movs	r3, #0
 8005242:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800524a:	2b01      	cmp	r3, #1
 800524c:	d101      	bne.n	8005252 <HAL_HCD_HC_Halt+0x1e>
 800524e:	2302      	movs	r3, #2
 8005250:	e00f      	b.n	8005272 <HAL_HCD_HC_Halt+0x3e>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	78fa      	ldrb	r2, [r7, #3]
 8005260:	4611      	mov	r1, r2
 8005262:	4618      	mov	r0, r3
 8005264:	f004 fa65 	bl	8009732 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8005270:	7bfb      	ldrb	r3, [r7, #15]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
	...

0800527c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	4608      	mov	r0, r1
 8005286:	4611      	mov	r1, r2
 8005288:	461a      	mov	r2, r3
 800528a:	4603      	mov	r3, r0
 800528c:	70fb      	strb	r3, [r7, #3]
 800528e:	460b      	mov	r3, r1
 8005290:	70bb      	strb	r3, [r7, #2]
 8005292:	4613      	mov	r3, r2
 8005294:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8005296:	78fb      	ldrb	r3, [r7, #3]
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	212c      	movs	r1, #44	; 0x2c
 800529c:	fb01 f303 	mul.w	r3, r1, r3
 80052a0:	4413      	add	r3, r2
 80052a2:	333b      	adds	r3, #59	; 0x3b
 80052a4:	78ba      	ldrb	r2, [r7, #2]
 80052a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80052a8:	78fb      	ldrb	r3, [r7, #3]
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	212c      	movs	r1, #44	; 0x2c
 80052ae:	fb01 f303 	mul.w	r3, r1, r3
 80052b2:	4413      	add	r3, r2
 80052b4:	333f      	adds	r3, #63	; 0x3f
 80052b6:	787a      	ldrb	r2, [r7, #1]
 80052b8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80052ba:	7c3b      	ldrb	r3, [r7, #16]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d112      	bne.n	80052e6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80052c0:	78fb      	ldrb	r3, [r7, #3]
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	212c      	movs	r1, #44	; 0x2c
 80052c6:	fb01 f303 	mul.w	r3, r1, r3
 80052ca:	4413      	add	r3, r2
 80052cc:	3342      	adds	r3, #66	; 0x42
 80052ce:	2203      	movs	r2, #3
 80052d0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80052d2:	78fb      	ldrb	r3, [r7, #3]
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	212c      	movs	r1, #44	; 0x2c
 80052d8:	fb01 f303 	mul.w	r3, r1, r3
 80052dc:	4413      	add	r3, r2
 80052de:	333d      	adds	r3, #61	; 0x3d
 80052e0:	7f3a      	ldrb	r2, [r7, #28]
 80052e2:	701a      	strb	r2, [r3, #0]
 80052e4:	e008      	b.n	80052f8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80052e6:	78fb      	ldrb	r3, [r7, #3]
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	212c      	movs	r1, #44	; 0x2c
 80052ec:	fb01 f303 	mul.w	r3, r1, r3
 80052f0:	4413      	add	r3, r2
 80052f2:	3342      	adds	r3, #66	; 0x42
 80052f4:	2202      	movs	r2, #2
 80052f6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80052f8:	787b      	ldrb	r3, [r7, #1]
 80052fa:	2b03      	cmp	r3, #3
 80052fc:	f200 80c6 	bhi.w	800548c <HAL_HCD_HC_SubmitRequest+0x210>
 8005300:	a201      	add	r2, pc, #4	; (adr r2, 8005308 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8005302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005306:	bf00      	nop
 8005308:	08005319 	.word	0x08005319
 800530c:	08005479 	.word	0x08005479
 8005310:	0800537d 	.word	0x0800537d
 8005314:	080053fb 	.word	0x080053fb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8005318:	7c3b      	ldrb	r3, [r7, #16]
 800531a:	2b01      	cmp	r3, #1
 800531c:	f040 80b8 	bne.w	8005490 <HAL_HCD_HC_SubmitRequest+0x214>
 8005320:	78bb      	ldrb	r3, [r7, #2]
 8005322:	2b00      	cmp	r3, #0
 8005324:	f040 80b4 	bne.w	8005490 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8005328:	8b3b      	ldrh	r3, [r7, #24]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d108      	bne.n	8005340 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800532e:	78fb      	ldrb	r3, [r7, #3]
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	212c      	movs	r1, #44	; 0x2c
 8005334:	fb01 f303 	mul.w	r3, r1, r3
 8005338:	4413      	add	r3, r2
 800533a:	3355      	adds	r3, #85	; 0x55
 800533c:	2201      	movs	r2, #1
 800533e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005340:	78fb      	ldrb	r3, [r7, #3]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	212c      	movs	r1, #44	; 0x2c
 8005346:	fb01 f303 	mul.w	r3, r1, r3
 800534a:	4413      	add	r3, r2
 800534c:	3355      	adds	r3, #85	; 0x55
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d109      	bne.n	8005368 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005354:	78fb      	ldrb	r3, [r7, #3]
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	212c      	movs	r1, #44	; 0x2c
 800535a:	fb01 f303 	mul.w	r3, r1, r3
 800535e:	4413      	add	r3, r2
 8005360:	3342      	adds	r3, #66	; 0x42
 8005362:	2200      	movs	r2, #0
 8005364:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005366:	e093      	b.n	8005490 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005368:	78fb      	ldrb	r3, [r7, #3]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	212c      	movs	r1, #44	; 0x2c
 800536e:	fb01 f303 	mul.w	r3, r1, r3
 8005372:	4413      	add	r3, r2
 8005374:	3342      	adds	r3, #66	; 0x42
 8005376:	2202      	movs	r2, #2
 8005378:	701a      	strb	r2, [r3, #0]
      break;
 800537a:	e089      	b.n	8005490 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800537c:	78bb      	ldrb	r3, [r7, #2]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d11d      	bne.n	80053be <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005382:	78fb      	ldrb	r3, [r7, #3]
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	212c      	movs	r1, #44	; 0x2c
 8005388:	fb01 f303 	mul.w	r3, r1, r3
 800538c:	4413      	add	r3, r2
 800538e:	3355      	adds	r3, #85	; 0x55
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d109      	bne.n	80053aa <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005396:	78fb      	ldrb	r3, [r7, #3]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	212c      	movs	r1, #44	; 0x2c
 800539c:	fb01 f303 	mul.w	r3, r1, r3
 80053a0:	4413      	add	r3, r2
 80053a2:	3342      	adds	r3, #66	; 0x42
 80053a4:	2200      	movs	r2, #0
 80053a6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80053a8:	e073      	b.n	8005492 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80053aa:	78fb      	ldrb	r3, [r7, #3]
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	212c      	movs	r1, #44	; 0x2c
 80053b0:	fb01 f303 	mul.w	r3, r1, r3
 80053b4:	4413      	add	r3, r2
 80053b6:	3342      	adds	r3, #66	; 0x42
 80053b8:	2202      	movs	r2, #2
 80053ba:	701a      	strb	r2, [r3, #0]
      break;
 80053bc:	e069      	b.n	8005492 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80053be:	78fb      	ldrb	r3, [r7, #3]
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	212c      	movs	r1, #44	; 0x2c
 80053c4:	fb01 f303 	mul.w	r3, r1, r3
 80053c8:	4413      	add	r3, r2
 80053ca:	3354      	adds	r3, #84	; 0x54
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d109      	bne.n	80053e6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80053d2:	78fb      	ldrb	r3, [r7, #3]
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	212c      	movs	r1, #44	; 0x2c
 80053d8:	fb01 f303 	mul.w	r3, r1, r3
 80053dc:	4413      	add	r3, r2
 80053de:	3342      	adds	r3, #66	; 0x42
 80053e0:	2200      	movs	r2, #0
 80053e2:	701a      	strb	r2, [r3, #0]
      break;
 80053e4:	e055      	b.n	8005492 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80053e6:	78fb      	ldrb	r3, [r7, #3]
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	212c      	movs	r1, #44	; 0x2c
 80053ec:	fb01 f303 	mul.w	r3, r1, r3
 80053f0:	4413      	add	r3, r2
 80053f2:	3342      	adds	r3, #66	; 0x42
 80053f4:	2202      	movs	r2, #2
 80053f6:	701a      	strb	r2, [r3, #0]
      break;
 80053f8:	e04b      	b.n	8005492 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80053fa:	78bb      	ldrb	r3, [r7, #2]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d11d      	bne.n	800543c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8005400:	78fb      	ldrb	r3, [r7, #3]
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	212c      	movs	r1, #44	; 0x2c
 8005406:	fb01 f303 	mul.w	r3, r1, r3
 800540a:	4413      	add	r3, r2
 800540c:	3355      	adds	r3, #85	; 0x55
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d109      	bne.n	8005428 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005414:	78fb      	ldrb	r3, [r7, #3]
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	212c      	movs	r1, #44	; 0x2c
 800541a:	fb01 f303 	mul.w	r3, r1, r3
 800541e:	4413      	add	r3, r2
 8005420:	3342      	adds	r3, #66	; 0x42
 8005422:	2200      	movs	r2, #0
 8005424:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005426:	e034      	b.n	8005492 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005428:	78fb      	ldrb	r3, [r7, #3]
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	212c      	movs	r1, #44	; 0x2c
 800542e:	fb01 f303 	mul.w	r3, r1, r3
 8005432:	4413      	add	r3, r2
 8005434:	3342      	adds	r3, #66	; 0x42
 8005436:	2202      	movs	r2, #2
 8005438:	701a      	strb	r2, [r3, #0]
      break;
 800543a:	e02a      	b.n	8005492 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800543c:	78fb      	ldrb	r3, [r7, #3]
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	212c      	movs	r1, #44	; 0x2c
 8005442:	fb01 f303 	mul.w	r3, r1, r3
 8005446:	4413      	add	r3, r2
 8005448:	3354      	adds	r3, #84	; 0x54
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d109      	bne.n	8005464 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005450:	78fb      	ldrb	r3, [r7, #3]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	212c      	movs	r1, #44	; 0x2c
 8005456:	fb01 f303 	mul.w	r3, r1, r3
 800545a:	4413      	add	r3, r2
 800545c:	3342      	adds	r3, #66	; 0x42
 800545e:	2200      	movs	r2, #0
 8005460:	701a      	strb	r2, [r3, #0]
      break;
 8005462:	e016      	b.n	8005492 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005464:	78fb      	ldrb	r3, [r7, #3]
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	212c      	movs	r1, #44	; 0x2c
 800546a:	fb01 f303 	mul.w	r3, r1, r3
 800546e:	4413      	add	r3, r2
 8005470:	3342      	adds	r3, #66	; 0x42
 8005472:	2202      	movs	r2, #2
 8005474:	701a      	strb	r2, [r3, #0]
      break;
 8005476:	e00c      	b.n	8005492 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005478:	78fb      	ldrb	r3, [r7, #3]
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	212c      	movs	r1, #44	; 0x2c
 800547e:	fb01 f303 	mul.w	r3, r1, r3
 8005482:	4413      	add	r3, r2
 8005484:	3342      	adds	r3, #66	; 0x42
 8005486:	2200      	movs	r2, #0
 8005488:	701a      	strb	r2, [r3, #0]
      break;
 800548a:	e002      	b.n	8005492 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 800548c:	bf00      	nop
 800548e:	e000      	b.n	8005492 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8005490:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005492:	78fb      	ldrb	r3, [r7, #3]
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	212c      	movs	r1, #44	; 0x2c
 8005498:	fb01 f303 	mul.w	r3, r1, r3
 800549c:	4413      	add	r3, r2
 800549e:	3344      	adds	r3, #68	; 0x44
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80054a4:	78fb      	ldrb	r3, [r7, #3]
 80054a6:	8b3a      	ldrh	r2, [r7, #24]
 80054a8:	6879      	ldr	r1, [r7, #4]
 80054aa:	202c      	movs	r0, #44	; 0x2c
 80054ac:	fb00 f303 	mul.w	r3, r0, r3
 80054b0:	440b      	add	r3, r1
 80054b2:	334c      	adds	r3, #76	; 0x4c
 80054b4:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80054b6:	78fb      	ldrb	r3, [r7, #3]
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	212c      	movs	r1, #44	; 0x2c
 80054bc:	fb01 f303 	mul.w	r3, r1, r3
 80054c0:	4413      	add	r3, r2
 80054c2:	3360      	adds	r3, #96	; 0x60
 80054c4:	2200      	movs	r2, #0
 80054c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80054c8:	78fb      	ldrb	r3, [r7, #3]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	212c      	movs	r1, #44	; 0x2c
 80054ce:	fb01 f303 	mul.w	r3, r1, r3
 80054d2:	4413      	add	r3, r2
 80054d4:	3350      	adds	r3, #80	; 0x50
 80054d6:	2200      	movs	r2, #0
 80054d8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80054da:	78fb      	ldrb	r3, [r7, #3]
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	212c      	movs	r1, #44	; 0x2c
 80054e0:	fb01 f303 	mul.w	r3, r1, r3
 80054e4:	4413      	add	r3, r2
 80054e6:	3339      	adds	r3, #57	; 0x39
 80054e8:	78fa      	ldrb	r2, [r7, #3]
 80054ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80054ec:	78fb      	ldrb	r3, [r7, #3]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	212c      	movs	r1, #44	; 0x2c
 80054f2:	fb01 f303 	mul.w	r3, r1, r3
 80054f6:	4413      	add	r3, r2
 80054f8:	3361      	adds	r3, #97	; 0x61
 80054fa:	2200      	movs	r2, #0
 80054fc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6818      	ldr	r0, [r3, #0]
 8005502:	78fb      	ldrb	r3, [r7, #3]
 8005504:	222c      	movs	r2, #44	; 0x2c
 8005506:	fb02 f303 	mul.w	r3, r2, r3
 800550a:	3338      	adds	r3, #56	; 0x38
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	18d1      	adds	r1, r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	b2db      	uxtb	r3, r3
 8005516:	461a      	mov	r2, r3
 8005518:	f003 ffb8 	bl	800948c <USB_HC_StartXfer>
 800551c:	4603      	mov	r3, r0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop

08005528 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4618      	mov	r0, r3
 8005540:	f003 fccb 	bl	8008eda <USB_GetMode>
 8005544:	4603      	mov	r3, r0
 8005546:	2b01      	cmp	r3, #1
 8005548:	f040 80f6 	bne.w	8005738 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4618      	mov	r0, r3
 8005552:	f003 fcaf 	bl	8008eb4 <USB_ReadInterrupts>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	f000 80ec 	beq.w	8005736 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4618      	mov	r0, r3
 8005564:	f003 fca6 	bl	8008eb4 <USB_ReadInterrupts>
 8005568:	4603      	mov	r3, r0
 800556a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800556e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005572:	d104      	bne.n	800557e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800557c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4618      	mov	r0, r3
 8005584:	f003 fc96 	bl	8008eb4 <USB_ReadInterrupts>
 8005588:	4603      	mov	r3, r0
 800558a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800558e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005592:	d104      	bne.n	800559e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800559c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f003 fc86 	bl	8008eb4 <USB_ReadInterrupts>
 80055a8:	4603      	mov	r3, r0
 80055aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055b2:	d104      	bne.n	80055be <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80055bc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f003 fc76 	bl	8008eb4 <USB_ReadInterrupts>
 80055c8:	4603      	mov	r3, r0
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d103      	bne.n	80055da <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2202      	movs	r2, #2
 80055d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4618      	mov	r0, r3
 80055e0:	f003 fc68 	bl	8008eb4 <USB_ReadInterrupts>
 80055e4:	4603      	mov	r3, r0
 80055e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ee:	d11c      	bne.n	800562a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80055f8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10f      	bne.n	800562a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800560a:	2110      	movs	r1, #16
 800560c:	6938      	ldr	r0, [r7, #16]
 800560e:	f003 fb5b 	bl	8008cc8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8005612:	6938      	ldr	r0, [r7, #16]
 8005614:	f003 fb8a 	bl	8008d2c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2101      	movs	r1, #1
 800561e:	4618      	mov	r0, r3
 8005620:	f003 fd50 	bl	80090c4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f01b fb03 	bl	8020c30 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4618      	mov	r0, r3
 8005630:	f003 fc40 	bl	8008eb4 <USB_ReadInterrupts>
 8005634:	4603      	mov	r3, r0
 8005636:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800563a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800563e:	d102      	bne.n	8005646 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f001 f8ca 	bl	80067da <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4618      	mov	r0, r3
 800564c:	f003 fc32 	bl	8008eb4 <USB_ReadInterrupts>
 8005650:	4603      	mov	r3, r0
 8005652:	f003 0308 	and.w	r3, r3, #8
 8005656:	2b08      	cmp	r3, #8
 8005658:	d106      	bne.n	8005668 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f01b facc 	bl	8020bf8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2208      	movs	r2, #8
 8005666:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4618      	mov	r0, r3
 800566e:	f003 fc21 	bl	8008eb4 <USB_ReadInterrupts>
 8005672:	4603      	mov	r3, r0
 8005674:	f003 0310 	and.w	r3, r3, #16
 8005678:	2b10      	cmp	r3, #16
 800567a:	d101      	bne.n	8005680 <HAL_HCD_IRQHandler+0x158>
 800567c:	2301      	movs	r3, #1
 800567e:	e000      	b.n	8005682 <HAL_HCD_IRQHandler+0x15a>
 8005680:	2300      	movs	r3, #0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d012      	beq.n	80056ac <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	699a      	ldr	r2, [r3, #24]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 0210 	bic.w	r2, r2, #16
 8005694:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 ffcd 	bl	8006636 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	699a      	ldr	r2, [r3, #24]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0210 	orr.w	r2, r2, #16
 80056aa:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f003 fbff 	bl	8008eb4 <USB_ReadInterrupts>
 80056b6:	4603      	mov	r3, r0
 80056b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056c0:	d13a      	bne.n	8005738 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f004 f822 	bl	8009710 <USB_HC_ReadInterrupt>
 80056cc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80056ce:	2300      	movs	r3, #0
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	e025      	b.n	8005720 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f003 030f 	and.w	r3, r3, #15
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	fa22 f303 	lsr.w	r3, r2, r3
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d018      	beq.n	800571a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056fe:	d106      	bne.n	800570e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	b2db      	uxtb	r3, r3
 8005704:	4619      	mov	r1, r3
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f8ab 	bl	8005862 <HCD_HC_IN_IRQHandler>
 800570c:	e005      	b.n	800571a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	b2db      	uxtb	r3, r3
 8005712:	4619      	mov	r1, r3
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 fc25 	bl	8005f64 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	3301      	adds	r3, #1
 800571e:	617b      	str	r3, [r7, #20]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	429a      	cmp	r2, r3
 8005728:	d3d4      	bcc.n	80056d4 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005732:	615a      	str	r2, [r3, #20]
 8005734:	e000      	b.n	8005738 <HAL_HCD_IRQHandler+0x210>
      return;
 8005736:	bf00      	nop
    }
  }
}
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b082      	sub	sp, #8
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800574c:	2b01      	cmp	r3, #1
 800574e:	d101      	bne.n	8005754 <HAL_HCD_Start+0x16>
 8005750:	2302      	movs	r3, #2
 8005752:	e013      	b.n	800577c <HAL_HCD_Start+0x3e>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2101      	movs	r1, #1
 8005762:	4618      	mov	r0, r3
 8005764:	f003 fd12 	bl	800918c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4618      	mov	r0, r3
 800576e:	f003 fa3d 	bl	8008bec <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8005792:	2b01      	cmp	r3, #1
 8005794:	d101      	bne.n	800579a <HAL_HCD_Stop+0x16>
 8005796:	2302      	movs	r3, #2
 8005798:	e00d      	b.n	80057b6 <HAL_HCD_Stop+0x32>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f004 f8fa 	bl	80099a0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3708      	adds	r7, #8
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}

080057be <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b082      	sub	sp, #8
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f003 fcb4 	bl	8009138 <USB_ResetPort>
 80057d0:	4603      	mov	r3, r0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	460b      	mov	r3, r1
 80057e4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80057e6:	78fb      	ldrb	r3, [r7, #3]
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	212c      	movs	r1, #44	; 0x2c
 80057ec:	fb01 f303 	mul.w	r3, r1, r3
 80057f0:	4413      	add	r3, r2
 80057f2:	3360      	adds	r3, #96	; 0x60
 80057f4:	781b      	ldrb	r3, [r3, #0]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
 800580a:	460b      	mov	r3, r1
 800580c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800580e:	78fb      	ldrb	r3, [r7, #3]
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	212c      	movs	r1, #44	; 0x2c
 8005814:	fb01 f303 	mul.w	r3, r1, r3
 8005818:	4413      	add	r3, r2
 800581a:	3350      	adds	r3, #80	; 0x50
 800581c:	681b      	ldr	r3, [r3, #0]
}
 800581e:	4618      	mov	r0, r3
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b082      	sub	sp, #8
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4618      	mov	r0, r3
 8005838:	f003 fcf8 	bl	800922c <USB_GetCurrentFrame>
 800583c:	4603      	mov	r3, r0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b082      	sub	sp, #8
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4618      	mov	r0, r3
 8005854:	f003 fcd3 	bl	80091fe <USB_GetHostSpeed>
 8005858:	4603      	mov	r3, r0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3708      	adds	r7, #8
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b086      	sub	sp, #24
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
 800586a:	460b      	mov	r3, r1
 800586c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005878:	78fb      	ldrb	r3, [r7, #3]
 800587a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	4413      	add	r3, r2
 8005884:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f003 0304 	and.w	r3, r3, #4
 800588e:	2b04      	cmp	r3, #4
 8005890:	d11a      	bne.n	80058c8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	4413      	add	r3, r2
 800589a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800589e:	461a      	mov	r2, r3
 80058a0:	2304      	movs	r3, #4
 80058a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	212c      	movs	r1, #44	; 0x2c
 80058aa:	fb01 f303 	mul.w	r3, r1, r3
 80058ae:	4413      	add	r3, r2
 80058b0:	3361      	adds	r3, #97	; 0x61
 80058b2:	2206      	movs	r2, #6
 80058b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	b2d2      	uxtb	r2, r2
 80058be:	4611      	mov	r1, r2
 80058c0:	4618      	mov	r0, r3
 80058c2:	f003 ff36 	bl	8009732 <USB_HC_Halt>
 80058c6:	e0af      	b.n	8005a28 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058de:	d11b      	bne.n	8005918 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ec:	461a      	mov	r2, r3
 80058ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	212c      	movs	r1, #44	; 0x2c
 80058fa:	fb01 f303 	mul.w	r3, r1, r3
 80058fe:	4413      	add	r3, r2
 8005900:	3361      	adds	r3, #97	; 0x61
 8005902:	2207      	movs	r2, #7
 8005904:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	b2d2      	uxtb	r2, r2
 800590e:	4611      	mov	r1, r2
 8005910:	4618      	mov	r0, r3
 8005912:	f003 ff0e 	bl	8009732 <USB_HC_Halt>
 8005916:	e087      	b.n	8005a28 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	4413      	add	r3, r2
 8005920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f003 0320 	and.w	r3, r3, #32
 800592a:	2b20      	cmp	r3, #32
 800592c:	d109      	bne.n	8005942 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	015a      	lsls	r2, r3, #5
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	4413      	add	r3, r2
 8005936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800593a:	461a      	mov	r2, r3
 800593c:	2320      	movs	r3, #32
 800593e:	6093      	str	r3, [r2, #8]
 8005940:	e072      	b.n	8005a28 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	015a      	lsls	r2, r3, #5
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	4413      	add	r3, r2
 800594a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f003 0308 	and.w	r3, r3, #8
 8005954:	2b08      	cmp	r3, #8
 8005956:	d11a      	bne.n	800598e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	4413      	add	r3, r2
 8005960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005964:	461a      	mov	r2, r3
 8005966:	2308      	movs	r3, #8
 8005968:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	212c      	movs	r1, #44	; 0x2c
 8005970:	fb01 f303 	mul.w	r3, r1, r3
 8005974:	4413      	add	r3, r2
 8005976:	3361      	adds	r3, #97	; 0x61
 8005978:	2205      	movs	r2, #5
 800597a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	b2d2      	uxtb	r2, r2
 8005984:	4611      	mov	r1, r2
 8005986:	4618      	mov	r0, r3
 8005988:	f003 fed3 	bl	8009732 <USB_HC_Halt>
 800598c:	e04c      	b.n	8005a28 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	4413      	add	r3, r2
 8005996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059a4:	d11b      	bne.n	80059de <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b2:	461a      	mov	r2, r3
 80059b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059b8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	212c      	movs	r1, #44	; 0x2c
 80059c0:	fb01 f303 	mul.w	r3, r1, r3
 80059c4:	4413      	add	r3, r2
 80059c6:	3361      	adds	r3, #97	; 0x61
 80059c8:	2208      	movs	r2, #8
 80059ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	b2d2      	uxtb	r2, r2
 80059d4:	4611      	mov	r1, r2
 80059d6:	4618      	mov	r0, r3
 80059d8:	f003 feab 	bl	8009732 <USB_HC_Halt>
 80059dc:	e024      	b.n	8005a28 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f0:	2b80      	cmp	r3, #128	; 0x80
 80059f2:	d119      	bne.n	8005a28 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a00:	461a      	mov	r2, r3
 8005a02:	2380      	movs	r3, #128	; 0x80
 8005a04:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	212c      	movs	r1, #44	; 0x2c
 8005a0c:	fb01 f303 	mul.w	r3, r1, r3
 8005a10:	4413      	add	r3, r2
 8005a12:	3361      	adds	r3, #97	; 0x61
 8005a14:	2206      	movs	r2, #6
 8005a16:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	b2d2      	uxtb	r2, r2
 8005a20:	4611      	mov	r1, r2
 8005a22:	4618      	mov	r0, r3
 8005a24:	f003 fe85 	bl	8009732 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a3e:	d112      	bne.n	8005a66 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68fa      	ldr	r2, [r7, #12]
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	4611      	mov	r1, r2
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f003 fe71 	bl	8009732 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a62:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8005a64:	e27a      	b.n	8005f5c <HCD_HC_IN_IRQHandler+0x6fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	f040 810b 	bne.w	8005c94 <HCD_HC_IN_IRQHandler+0x432>
    if (hhcd->Init.dma_enable != 0U)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d019      	beq.n	8005aba <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	212c      	movs	r1, #44	; 0x2c
 8005a8c:	fb01 f303 	mul.w	r3, r1, r3
 8005a90:	4413      	add	r3, r2
 8005a92:	3348      	adds	r3, #72	; 0x48
 8005a94:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	0159      	lsls	r1, r3, #5
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	440b      	add	r3, r1
 8005a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8005aa8:	1ad2      	subs	r2, r2, r3
 8005aaa:	6879      	ldr	r1, [r7, #4]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	202c      	movs	r0, #44	; 0x2c
 8005ab0:	fb00 f303 	mul.w	r3, r0, r3
 8005ab4:	440b      	add	r3, r1
 8005ab6:	3350      	adds	r3, #80	; 0x50
 8005ab8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	212c      	movs	r1, #44	; 0x2c
 8005ac0:	fb01 f303 	mul.w	r3, r1, r3
 8005ac4:	4413      	add	r3, r2
 8005ac6:	3361      	adds	r3, #97	; 0x61
 8005ac8:	2201      	movs	r2, #1
 8005aca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	212c      	movs	r1, #44	; 0x2c
 8005ad2:	fb01 f303 	mul.w	r3, r1, r3
 8005ad6:	4413      	add	r3, r2
 8005ad8:	335c      	adds	r3, #92	; 0x5c
 8005ada:	2200      	movs	r2, #0
 8005adc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aea:	461a      	mov	r2, r3
 8005aec:	2301      	movs	r3, #1
 8005aee:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	212c      	movs	r1, #44	; 0x2c
 8005af6:	fb01 f303 	mul.w	r3, r1, r3
 8005afa:	4413      	add	r3, r2
 8005afc:	333f      	adds	r3, #63	; 0x3f
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d009      	beq.n	8005b18 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	212c      	movs	r1, #44	; 0x2c
 8005b0a:	fb01 f303 	mul.w	r3, r1, r3
 8005b0e:	4413      	add	r3, r2
 8005b10:	333f      	adds	r3, #63	; 0x3f
 8005b12:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d111      	bne.n	8005b3c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	4611      	mov	r1, r2
 8005b22:	4618      	mov	r0, r3
 8005b24:	f003 fe05 	bl	8009732 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b34:	461a      	mov	r2, r3
 8005b36:	2310      	movs	r3, #16
 8005b38:	6093      	str	r3, [r2, #8]
 8005b3a:	e066      	b.n	8005c0a <HCD_HC_IN_IRQHandler+0x3a8>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	212c      	movs	r1, #44	; 0x2c
 8005b42:	fb01 f303 	mul.w	r3, r1, r3
 8005b46:	4413      	add	r3, r2
 8005b48:	333f      	adds	r3, #63	; 0x3f
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d127      	bne.n	8005ba0 <HCD_HC_IN_IRQHandler+0x33e>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	0151      	lsls	r1, r2, #5
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	440a      	add	r2, r1
 8005b66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b6e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	212c      	movs	r1, #44	; 0x2c
 8005b76:	fb01 f303 	mul.w	r3, r1, r3
 8005b7a:	4413      	add	r3, r2
 8005b7c:	3360      	adds	r3, #96	; 0x60
 8005b7e:	2201      	movs	r2, #1
 8005b80:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	b2d9      	uxtb	r1, r3
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	202c      	movs	r0, #44	; 0x2c
 8005b8c:	fb00 f303 	mul.w	r3, r0, r3
 8005b90:	4413      	add	r3, r2
 8005b92:	3360      	adds	r3, #96	; 0x60
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	461a      	mov	r2, r3
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f01b f857 	bl	8020c4c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005b9e:	e034      	b.n	8005c0a <HCD_HC_IN_IRQHandler+0x3a8>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	212c      	movs	r1, #44	; 0x2c
 8005ba6:	fb01 f303 	mul.w	r3, r1, r3
 8005baa:	4413      	add	r3, r2
 8005bac:	333f      	adds	r3, #63	; 0x3f
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d12a      	bne.n	8005c0a <HCD_HC_IN_IRQHandler+0x3a8>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	212c      	movs	r1, #44	; 0x2c
 8005bba:	fb01 f303 	mul.w	r3, r1, r3
 8005bbe:	4413      	add	r3, r2
 8005bc0:	3360      	adds	r3, #96	; 0x60
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	212c      	movs	r1, #44	; 0x2c
 8005bcc:	fb01 f303 	mul.w	r3, r1, r3
 8005bd0:	4413      	add	r3, r2
 8005bd2:	3354      	adds	r3, #84	; 0x54
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	f083 0301 	eor.w	r3, r3, #1
 8005bda:	b2d8      	uxtb	r0, r3
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	212c      	movs	r1, #44	; 0x2c
 8005be2:	fb01 f303 	mul.w	r3, r1, r3
 8005be6:	4413      	add	r3, r2
 8005be8:	3354      	adds	r3, #84	; 0x54
 8005bea:	4602      	mov	r2, r0
 8005bec:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	b2d9      	uxtb	r1, r3
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	202c      	movs	r0, #44	; 0x2c
 8005bf8:	fb00 f303 	mul.w	r3, r0, r3
 8005bfc:	4413      	add	r3, r2
 8005bfe:	3360      	adds	r3, #96	; 0x60
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	461a      	mov	r2, r3
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f01b f821 	bl	8020c4c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d12b      	bne.n	8005c6a <HCD_HC_IN_IRQHandler+0x408>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	212c      	movs	r1, #44	; 0x2c
 8005c18:	fb01 f303 	mul.w	r3, r1, r3
 8005c1c:	4413      	add	r3, r2
 8005c1e:	3348      	adds	r3, #72	; 0x48
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6879      	ldr	r1, [r7, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	202c      	movs	r0, #44	; 0x2c
 8005c28:	fb00 f202 	mul.w	r2, r0, r2
 8005c2c:	440a      	add	r2, r1
 8005c2e:	3240      	adds	r2, #64	; 0x40
 8005c30:	8812      	ldrh	r2, [r2, #0]
 8005c32:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 818e 	beq.w	8005f5c <HCD_HC_IN_IRQHandler+0x6fa>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	212c      	movs	r1, #44	; 0x2c
 8005c46:	fb01 f303 	mul.w	r3, r1, r3
 8005c4a:	4413      	add	r3, r2
 8005c4c:	3354      	adds	r3, #84	; 0x54
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	f083 0301 	eor.w	r3, r3, #1
 8005c54:	b2d8      	uxtb	r0, r3
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	212c      	movs	r1, #44	; 0x2c
 8005c5c:	fb01 f303 	mul.w	r3, r1, r3
 8005c60:	4413      	add	r3, r2
 8005c62:	3354      	adds	r3, #84	; 0x54
 8005c64:	4602      	mov	r2, r0
 8005c66:	701a      	strb	r2, [r3, #0]
}
 8005c68:	e178      	b.n	8005f5c <HCD_HC_IN_IRQHandler+0x6fa>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	212c      	movs	r1, #44	; 0x2c
 8005c70:	fb01 f303 	mul.w	r3, r1, r3
 8005c74:	4413      	add	r3, r2
 8005c76:	3354      	adds	r3, #84	; 0x54
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	f083 0301 	eor.w	r3, r3, #1
 8005c7e:	b2d8      	uxtb	r0, r3
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	212c      	movs	r1, #44	; 0x2c
 8005c86:	fb01 f303 	mul.w	r3, r1, r3
 8005c8a:	4413      	add	r3, r2
 8005c8c:	3354      	adds	r3, #84	; 0x54
 8005c8e:	4602      	mov	r2, r0
 8005c90:	701a      	strb	r2, [r3, #0]
}
 8005c92:	e163      	b.n	8005f5c <HCD_HC_IN_IRQHandler+0x6fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	f040 80f6 	bne.w	8005e98 <HCD_HC_IN_IRQHandler+0x636>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	212c      	movs	r1, #44	; 0x2c
 8005cb2:	fb01 f303 	mul.w	r3, r1, r3
 8005cb6:	4413      	add	r3, r2
 8005cb8:	3361      	adds	r3, #97	; 0x61
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d109      	bne.n	8005cd4 <HCD_HC_IN_IRQHandler+0x472>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	212c      	movs	r1, #44	; 0x2c
 8005cc6:	fb01 f303 	mul.w	r3, r1, r3
 8005cca:	4413      	add	r3, r2
 8005ccc:	3360      	adds	r3, #96	; 0x60
 8005cce:	2201      	movs	r2, #1
 8005cd0:	701a      	strb	r2, [r3, #0]
 8005cd2:	e0c9      	b.n	8005e68 <HCD_HC_IN_IRQHandler+0x606>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	212c      	movs	r1, #44	; 0x2c
 8005cda:	fb01 f303 	mul.w	r3, r1, r3
 8005cde:	4413      	add	r3, r2
 8005ce0:	3361      	adds	r3, #97	; 0x61
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	2b05      	cmp	r3, #5
 8005ce6:	d109      	bne.n	8005cfc <HCD_HC_IN_IRQHandler+0x49a>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	212c      	movs	r1, #44	; 0x2c
 8005cee:	fb01 f303 	mul.w	r3, r1, r3
 8005cf2:	4413      	add	r3, r2
 8005cf4:	3360      	adds	r3, #96	; 0x60
 8005cf6:	2205      	movs	r2, #5
 8005cf8:	701a      	strb	r2, [r3, #0]
 8005cfa:	e0b5      	b.n	8005e68 <HCD_HC_IN_IRQHandler+0x606>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	212c      	movs	r1, #44	; 0x2c
 8005d02:	fb01 f303 	mul.w	r3, r1, r3
 8005d06:	4413      	add	r3, r2
 8005d08:	3361      	adds	r3, #97	; 0x61
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	2b06      	cmp	r3, #6
 8005d0e:	d009      	beq.n	8005d24 <HCD_HC_IN_IRQHandler+0x4c2>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	212c      	movs	r1, #44	; 0x2c
 8005d16:	fb01 f303 	mul.w	r3, r1, r3
 8005d1a:	4413      	add	r3, r2
 8005d1c:	3361      	adds	r3, #97	; 0x61
 8005d1e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005d20:	2b08      	cmp	r3, #8
 8005d22:	d150      	bne.n	8005dc6 <HCD_HC_IN_IRQHandler+0x564>
      hhcd->hc[ch_num].ErrCnt++;
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	212c      	movs	r1, #44	; 0x2c
 8005d2a:	fb01 f303 	mul.w	r3, r1, r3
 8005d2e:	4413      	add	r3, r2
 8005d30:	335c      	adds	r3, #92	; 0x5c
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	6879      	ldr	r1, [r7, #4]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	202c      	movs	r0, #44	; 0x2c
 8005d3c:	fb00 f303 	mul.w	r3, r0, r3
 8005d40:	440b      	add	r3, r1
 8005d42:	335c      	adds	r3, #92	; 0x5c
 8005d44:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	212c      	movs	r1, #44	; 0x2c
 8005d4c:	fb01 f303 	mul.w	r3, r1, r3
 8005d50:	4413      	add	r3, r2
 8005d52:	335c      	adds	r3, #92	; 0x5c
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d912      	bls.n	8005d80 <HCD_HC_IN_IRQHandler+0x51e>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	212c      	movs	r1, #44	; 0x2c
 8005d60:	fb01 f303 	mul.w	r3, r1, r3
 8005d64:	4413      	add	r3, r2
 8005d66:	335c      	adds	r3, #92	; 0x5c
 8005d68:	2200      	movs	r2, #0
 8005d6a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	212c      	movs	r1, #44	; 0x2c
 8005d72:	fb01 f303 	mul.w	r3, r1, r3
 8005d76:	4413      	add	r3, r2
 8005d78:	3360      	adds	r3, #96	; 0x60
 8005d7a:	2204      	movs	r2, #4
 8005d7c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005d7e:	e073      	b.n	8005e68 <HCD_HC_IN_IRQHandler+0x606>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	212c      	movs	r1, #44	; 0x2c
 8005d86:	fb01 f303 	mul.w	r3, r1, r3
 8005d8a:	4413      	add	r3, r2
 8005d8c:	3360      	adds	r3, #96	; 0x60
 8005d8e:	2202      	movs	r2, #2
 8005d90:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005da8:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005db0:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005dc4:	e050      	b.n	8005e68 <HCD_HC_IN_IRQHandler+0x606>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	212c      	movs	r1, #44	; 0x2c
 8005dcc:	fb01 f303 	mul.w	r3, r1, r3
 8005dd0:	4413      	add	r3, r2
 8005dd2:	3361      	adds	r3, #97	; 0x61
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	d122      	bne.n	8005e20 <HCD_HC_IN_IRQHandler+0x5be>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	212c      	movs	r1, #44	; 0x2c
 8005de0:	fb01 f303 	mul.w	r3, r1, r3
 8005de4:	4413      	add	r3, r2
 8005de6:	3360      	adds	r3, #96	; 0x60
 8005de8:	2202      	movs	r2, #2
 8005dea:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e02:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e0a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e18:	461a      	mov	r2, r3
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	6013      	str	r3, [r2, #0]
 8005e1e:	e023      	b.n	8005e68 <HCD_HC_IN_IRQHandler+0x606>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	212c      	movs	r1, #44	; 0x2c
 8005e26:	fb01 f303 	mul.w	r3, r1, r3
 8005e2a:	4413      	add	r3, r2
 8005e2c:	3361      	adds	r3, #97	; 0x61
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	2b07      	cmp	r3, #7
 8005e32:	d119      	bne.n	8005e68 <HCD_HC_IN_IRQHandler+0x606>
      hhcd->hc[ch_num].ErrCnt++;
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	212c      	movs	r1, #44	; 0x2c
 8005e3a:	fb01 f303 	mul.w	r3, r1, r3
 8005e3e:	4413      	add	r3, r2
 8005e40:	335c      	adds	r3, #92	; 0x5c
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	6879      	ldr	r1, [r7, #4]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	202c      	movs	r0, #44	; 0x2c
 8005e4c:	fb00 f303 	mul.w	r3, r0, r3
 8005e50:	440b      	add	r3, r1
 8005e52:	335c      	adds	r3, #92	; 0x5c
 8005e54:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	212c      	movs	r1, #44	; 0x2c
 8005e5c:	fb01 f303 	mul.w	r3, r1, r3
 8005e60:	4413      	add	r3, r2
 8005e62:	3360      	adds	r3, #96	; 0x60
 8005e64:	2204      	movs	r2, #4
 8005e66:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	015a      	lsls	r2, r3, #5
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e74:	461a      	mov	r2, r3
 8005e76:	2302      	movs	r3, #2
 8005e78:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	b2d9      	uxtb	r1, r3
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	202c      	movs	r0, #44	; 0x2c
 8005e84:	fb00 f303 	mul.w	r3, r0, r3
 8005e88:	4413      	add	r3, r2
 8005e8a:	3360      	adds	r3, #96	; 0x60
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	461a      	mov	r2, r3
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f01a fedb 	bl	8020c4c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005e96:	e061      	b.n	8005f5c <HCD_HC_IN_IRQHandler+0x6fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f003 0310 	and.w	r3, r3, #16
 8005eaa:	2b10      	cmp	r3, #16
 8005eac:	d156      	bne.n	8005f5c <HCD_HC_IN_IRQHandler+0x6fa>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	212c      	movs	r1, #44	; 0x2c
 8005eb4:	fb01 f303 	mul.w	r3, r1, r3
 8005eb8:	4413      	add	r3, r2
 8005eba:	333f      	adds	r3, #63	; 0x3f
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	d111      	bne.n	8005ee6 <HCD_HC_IN_IRQHandler+0x684>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	212c      	movs	r1, #44	; 0x2c
 8005ec8:	fb01 f303 	mul.w	r3, r1, r3
 8005ecc:	4413      	add	r3, r2
 8005ece:	335c      	adds	r3, #92	; 0x5c
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	4611      	mov	r1, r2
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f003 fc27 	bl	8009732 <USB_HC_Halt>
 8005ee4:	e031      	b.n	8005f4a <HCD_HC_IN_IRQHandler+0x6e8>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	212c      	movs	r1, #44	; 0x2c
 8005eec:	fb01 f303 	mul.w	r3, r1, r3
 8005ef0:	4413      	add	r3, r2
 8005ef2:	333f      	adds	r3, #63	; 0x3f
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d009      	beq.n	8005f0e <HCD_HC_IN_IRQHandler+0x6ac>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	212c      	movs	r1, #44	; 0x2c
 8005f00:	fb01 f303 	mul.w	r3, r1, r3
 8005f04:	4413      	add	r3, r2
 8005f06:	333f      	adds	r3, #63	; 0x3f
 8005f08:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d11d      	bne.n	8005f4a <HCD_HC_IN_IRQHandler+0x6e8>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	212c      	movs	r1, #44	; 0x2c
 8005f14:	fb01 f303 	mul.w	r3, r1, r3
 8005f18:	4413      	add	r3, r2
 8005f1a:	335c      	adds	r3, #92	; 0x5c
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d110      	bne.n	8005f4a <HCD_HC_IN_IRQHandler+0x6e8>
        hhcd->hc[ch_num].state = HC_NAK;
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	212c      	movs	r1, #44	; 0x2c
 8005f2e:	fb01 f303 	mul.w	r3, r1, r3
 8005f32:	4413      	add	r3, r2
 8005f34:	3361      	adds	r3, #97	; 0x61
 8005f36:	2203      	movs	r2, #3
 8005f38:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	b2d2      	uxtb	r2, r2
 8005f42:	4611      	mov	r1, r2
 8005f44:	4618      	mov	r0, r3
 8005f46:	f003 fbf4 	bl	8009732 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	015a      	lsls	r2, r3, #5
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	4413      	add	r3, r2
 8005f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f56:	461a      	mov	r2, r3
 8005f58:	2310      	movs	r3, #16
 8005f5a:	6093      	str	r3, [r2, #8]
}
 8005f5c:	bf00      	nop
 8005f5e:	3718      	adds	r7, #24
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b088      	sub	sp, #32
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8005f7a:	78fb      	ldrb	r3, [r7, #3]
 8005f7c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f003 0304 	and.w	r3, r3, #4
 8005f90:	2b04      	cmp	r3, #4
 8005f92:	d11a      	bne.n	8005fca <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	2304      	movs	r3, #4
 8005fa4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	212c      	movs	r1, #44	; 0x2c
 8005fac:	fb01 f303 	mul.w	r3, r1, r3
 8005fb0:	4413      	add	r3, r2
 8005fb2:	3361      	adds	r3, #97	; 0x61
 8005fb4:	2206      	movs	r2, #6
 8005fb6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	b2d2      	uxtb	r2, r2
 8005fc0:	4611      	mov	r1, r2
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f003 fbb5 	bl	8009732 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8005fc8:	e331      	b.n	800662e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	015a      	lsls	r2, r3, #5
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f003 0320 	and.w	r3, r3, #32
 8005fdc:	2b20      	cmp	r3, #32
 8005fde:	d12e      	bne.n	800603e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fec:	461a      	mov	r2, r3
 8005fee:	2320      	movs	r3, #32
 8005ff0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	212c      	movs	r1, #44	; 0x2c
 8005ff8:	fb01 f303 	mul.w	r3, r1, r3
 8005ffc:	4413      	add	r3, r2
 8005ffe:	333d      	adds	r3, #61	; 0x3d
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	2b01      	cmp	r3, #1
 8006004:	f040 8313 	bne.w	800662e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	212c      	movs	r1, #44	; 0x2c
 800600e:	fb01 f303 	mul.w	r3, r1, r3
 8006012:	4413      	add	r3, r2
 8006014:	333d      	adds	r3, #61	; 0x3d
 8006016:	2200      	movs	r2, #0
 8006018:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	212c      	movs	r1, #44	; 0x2c
 8006020:	fb01 f303 	mul.w	r3, r1, r3
 8006024:	4413      	add	r3, r2
 8006026:	3360      	adds	r3, #96	; 0x60
 8006028:	2202      	movs	r2, #2
 800602a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	b2d2      	uxtb	r2, r2
 8006034:	4611      	mov	r1, r2
 8006036:	4618      	mov	r0, r3
 8006038:	f003 fb7b 	bl	8009732 <USB_HC_Halt>
}
 800603c:	e2f7      	b.n	800662e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	4413      	add	r3, r2
 8006046:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006054:	d112      	bne.n	800607c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	4413      	add	r3, r2
 800605e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006062:	461a      	mov	r2, r3
 8006064:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006068:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	b2d2      	uxtb	r2, r2
 8006072:	4611      	mov	r1, r2
 8006074:	4618      	mov	r0, r3
 8006076:	f003 fb5c 	bl	8009732 <USB_HC_Halt>
}
 800607a:	e2d8      	b.n	800662e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	4413      	add	r3, r2
 8006084:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b01      	cmp	r3, #1
 8006090:	d140      	bne.n	8006114 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	212c      	movs	r1, #44	; 0x2c
 8006098:	fb01 f303 	mul.w	r3, r1, r3
 800609c:	4413      	add	r3, r2
 800609e:	335c      	adds	r3, #92	; 0x5c
 80060a0:	2200      	movs	r2, #0
 80060a2:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b6:	2b40      	cmp	r3, #64	; 0x40
 80060b8:	d111      	bne.n	80060de <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	212c      	movs	r1, #44	; 0x2c
 80060c0:	fb01 f303 	mul.w	r3, r1, r3
 80060c4:	4413      	add	r3, r2
 80060c6:	333d      	adds	r3, #61	; 0x3d
 80060c8:	2201      	movs	r2, #1
 80060ca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060d8:	461a      	mov	r2, r3
 80060da:	2340      	movs	r3, #64	; 0x40
 80060dc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	015a      	lsls	r2, r3, #5
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	4413      	add	r3, r2
 80060e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ea:	461a      	mov	r2, r3
 80060ec:	2301      	movs	r3, #1
 80060ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	212c      	movs	r1, #44	; 0x2c
 80060f6:	fb01 f303 	mul.w	r3, r1, r3
 80060fa:	4413      	add	r3, r2
 80060fc:	3361      	adds	r3, #97	; 0x61
 80060fe:	2201      	movs	r2, #1
 8006100:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	b2d2      	uxtb	r2, r2
 800610a:	4611      	mov	r1, r2
 800610c:	4618      	mov	r0, r3
 800610e:	f003 fb10 	bl	8009732 <USB_HC_Halt>
}
 8006112:	e28c      	b.n	800662e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	4413      	add	r3, r2
 800611c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006126:	2b40      	cmp	r3, #64	; 0x40
 8006128:	d12c      	bne.n	8006184 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	212c      	movs	r1, #44	; 0x2c
 8006130:	fb01 f303 	mul.w	r3, r1, r3
 8006134:	4413      	add	r3, r2
 8006136:	3361      	adds	r3, #97	; 0x61
 8006138:	2204      	movs	r2, #4
 800613a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	212c      	movs	r1, #44	; 0x2c
 8006142:	fb01 f303 	mul.w	r3, r1, r3
 8006146:	4413      	add	r3, r2
 8006148:	333d      	adds	r3, #61	; 0x3d
 800614a:	2201      	movs	r2, #1
 800614c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	212c      	movs	r1, #44	; 0x2c
 8006154:	fb01 f303 	mul.w	r3, r1, r3
 8006158:	4413      	add	r3, r2
 800615a:	335c      	adds	r3, #92	; 0x5c
 800615c:	2200      	movs	r2, #0
 800615e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	b2d2      	uxtb	r2, r2
 8006168:	4611      	mov	r1, r2
 800616a:	4618      	mov	r0, r3
 800616c:	f003 fae1 	bl	8009732 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	4413      	add	r3, r2
 8006178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800617c:	461a      	mov	r2, r3
 800617e:	2340      	movs	r3, #64	; 0x40
 8006180:	6093      	str	r3, [r2, #8]
}
 8006182:	e254      	b.n	800662e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	4413      	add	r3, r2
 800618c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f003 0308 	and.w	r3, r3, #8
 8006196:	2b08      	cmp	r3, #8
 8006198:	d11a      	bne.n	80061d0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a6:	461a      	mov	r2, r3
 80061a8:	2308      	movs	r3, #8
 80061aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	212c      	movs	r1, #44	; 0x2c
 80061b2:	fb01 f303 	mul.w	r3, r1, r3
 80061b6:	4413      	add	r3, r2
 80061b8:	3361      	adds	r3, #97	; 0x61
 80061ba:	2205      	movs	r2, #5
 80061bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	b2d2      	uxtb	r2, r2
 80061c6:	4611      	mov	r1, r2
 80061c8:	4618      	mov	r0, r3
 80061ca:	f003 fab2 	bl	8009732 <USB_HC_Halt>
}
 80061ce:	e22e      	b.n	800662e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	015a      	lsls	r2, r3, #5
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	4413      	add	r3, r2
 80061d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f003 0310 	and.w	r3, r3, #16
 80061e2:	2b10      	cmp	r3, #16
 80061e4:	d140      	bne.n	8006268 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	212c      	movs	r1, #44	; 0x2c
 80061ec:	fb01 f303 	mul.w	r3, r1, r3
 80061f0:	4413      	add	r3, r2
 80061f2:	335c      	adds	r3, #92	; 0x5c
 80061f4:	2200      	movs	r2, #0
 80061f6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	212c      	movs	r1, #44	; 0x2c
 80061fe:	fb01 f303 	mul.w	r3, r1, r3
 8006202:	4413      	add	r3, r2
 8006204:	3361      	adds	r3, #97	; 0x61
 8006206:	2203      	movs	r2, #3
 8006208:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	212c      	movs	r1, #44	; 0x2c
 8006210:	fb01 f303 	mul.w	r3, r1, r3
 8006214:	4413      	add	r3, r2
 8006216:	333d      	adds	r3, #61	; 0x3d
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d112      	bne.n	8006244 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	212c      	movs	r1, #44	; 0x2c
 8006224:	fb01 f303 	mul.w	r3, r1, r3
 8006228:	4413      	add	r3, r2
 800622a:	333c      	adds	r3, #60	; 0x3c
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d108      	bne.n	8006244 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	212c      	movs	r1, #44	; 0x2c
 8006238:	fb01 f303 	mul.w	r3, r1, r3
 800623c:	4413      	add	r3, r2
 800623e:	333d      	adds	r3, #61	; 0x3d
 8006240:	2201      	movs	r2, #1
 8006242:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	b2d2      	uxtb	r2, r2
 800624c:	4611      	mov	r1, r2
 800624e:	4618      	mov	r0, r3
 8006250:	f003 fa6f 	bl	8009732 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	4413      	add	r3, r2
 800625c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006260:	461a      	mov	r2, r3
 8006262:	2310      	movs	r3, #16
 8006264:	6093      	str	r3, [r2, #8]
}
 8006266:	e1e2      	b.n	800662e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	015a      	lsls	r2, r3, #5
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	4413      	add	r3, r2
 8006270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800627a:	2b80      	cmp	r3, #128	; 0x80
 800627c:	d164      	bne.n	8006348 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d111      	bne.n	80062aa <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	212c      	movs	r1, #44	; 0x2c
 800628c:	fb01 f303 	mul.w	r3, r1, r3
 8006290:	4413      	add	r3, r2
 8006292:	3361      	adds	r3, #97	; 0x61
 8006294:	2206      	movs	r2, #6
 8006296:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	4611      	mov	r1, r2
 80062a2:	4618      	mov	r0, r3
 80062a4:	f003 fa45 	bl	8009732 <USB_HC_Halt>
 80062a8:	e044      	b.n	8006334 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80062aa:	687a      	ldr	r2, [r7, #4]
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	212c      	movs	r1, #44	; 0x2c
 80062b0:	fb01 f303 	mul.w	r3, r1, r3
 80062b4:	4413      	add	r3, r2
 80062b6:	335c      	adds	r3, #92	; 0x5c
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	6879      	ldr	r1, [r7, #4]
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	202c      	movs	r0, #44	; 0x2c
 80062c2:	fb00 f303 	mul.w	r3, r0, r3
 80062c6:	440b      	add	r3, r1
 80062c8:	335c      	adds	r3, #92	; 0x5c
 80062ca:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	212c      	movs	r1, #44	; 0x2c
 80062d2:	fb01 f303 	mul.w	r3, r1, r3
 80062d6:	4413      	add	r3, r2
 80062d8:	335c      	adds	r3, #92	; 0x5c
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d920      	bls.n	8006322 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	212c      	movs	r1, #44	; 0x2c
 80062e6:	fb01 f303 	mul.w	r3, r1, r3
 80062ea:	4413      	add	r3, r2
 80062ec:	335c      	adds	r3, #92	; 0x5c
 80062ee:	2200      	movs	r2, #0
 80062f0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	212c      	movs	r1, #44	; 0x2c
 80062f8:	fb01 f303 	mul.w	r3, r1, r3
 80062fc:	4413      	add	r3, r2
 80062fe:	3360      	adds	r3, #96	; 0x60
 8006300:	2204      	movs	r2, #4
 8006302:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	b2d9      	uxtb	r1, r3
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	202c      	movs	r0, #44	; 0x2c
 800630e:	fb00 f303 	mul.w	r3, r0, r3
 8006312:	4413      	add	r3, r2
 8006314:	3360      	adds	r3, #96	; 0x60
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	461a      	mov	r2, r3
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f01a fc96 	bl	8020c4c <HAL_HCD_HC_NotifyURBChange_Callback>
 8006320:	e008      	b.n	8006334 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	212c      	movs	r1, #44	; 0x2c
 8006328:	fb01 f303 	mul.w	r3, r1, r3
 800632c:	4413      	add	r3, r2
 800632e:	3360      	adds	r3, #96	; 0x60
 8006330:	2202      	movs	r2, #2
 8006332:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	4413      	add	r3, r2
 800633c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006340:	461a      	mov	r2, r3
 8006342:	2380      	movs	r3, #128	; 0x80
 8006344:	6093      	str	r3, [r2, #8]
}
 8006346:	e172      	b.n	800662e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	015a      	lsls	r2, r3, #5
 800634c:	69bb      	ldr	r3, [r7, #24]
 800634e:	4413      	add	r3, r2
 8006350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800635a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800635e:	d11b      	bne.n	8006398 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	212c      	movs	r1, #44	; 0x2c
 8006366:	fb01 f303 	mul.w	r3, r1, r3
 800636a:	4413      	add	r3, r2
 800636c:	3361      	adds	r3, #97	; 0x61
 800636e:	2208      	movs	r2, #8
 8006370:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	b2d2      	uxtb	r2, r2
 800637a:	4611      	mov	r1, r2
 800637c:	4618      	mov	r0, r3
 800637e:	f003 f9d8 	bl	8009732 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	4413      	add	r3, r2
 800638a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800638e:	461a      	mov	r2, r3
 8006390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006394:	6093      	str	r3, [r2, #8]
}
 8006396:	e14a      	b.n	800662e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	f003 0302 	and.w	r3, r3, #2
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	f040 813f 	bne.w	800662e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	212c      	movs	r1, #44	; 0x2c
 80063b6:	fb01 f303 	mul.w	r3, r1, r3
 80063ba:	4413      	add	r3, r2
 80063bc:	3361      	adds	r3, #97	; 0x61
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d17d      	bne.n	80064c0 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	212c      	movs	r1, #44	; 0x2c
 80063ca:	fb01 f303 	mul.w	r3, r1, r3
 80063ce:	4413      	add	r3, r2
 80063d0:	3360      	adds	r3, #96	; 0x60
 80063d2:	2201      	movs	r2, #1
 80063d4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	212c      	movs	r1, #44	; 0x2c
 80063dc:	fb01 f303 	mul.w	r3, r1, r3
 80063e0:	4413      	add	r3, r2
 80063e2:	333f      	adds	r3, #63	; 0x3f
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d00a      	beq.n	8006400 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	212c      	movs	r1, #44	; 0x2c
 80063f0:	fb01 f303 	mul.w	r3, r1, r3
 80063f4:	4413      	add	r3, r2
 80063f6:	333f      	adds	r3, #63	; 0x3f
 80063f8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80063fa:	2b03      	cmp	r3, #3
 80063fc:	f040 8100 	bne.w	8006600 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d113      	bne.n	8006430 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	212c      	movs	r1, #44	; 0x2c
 800640e:	fb01 f303 	mul.w	r3, r1, r3
 8006412:	4413      	add	r3, r2
 8006414:	3355      	adds	r3, #85	; 0x55
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	f083 0301 	eor.w	r3, r3, #1
 800641c:	b2d8      	uxtb	r0, r3
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	212c      	movs	r1, #44	; 0x2c
 8006424:	fb01 f303 	mul.w	r3, r1, r3
 8006428:	4413      	add	r3, r2
 800642a:	3355      	adds	r3, #85	; 0x55
 800642c:	4602      	mov	r2, r0
 800642e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	2b01      	cmp	r3, #1
 8006436:	f040 80e3 	bne.w	8006600 <HCD_HC_OUT_IRQHandler+0x69c>
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	212c      	movs	r1, #44	; 0x2c
 8006440:	fb01 f303 	mul.w	r3, r1, r3
 8006444:	4413      	add	r3, r2
 8006446:	334c      	adds	r3, #76	; 0x4c
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	f000 80d8 	beq.w	8006600 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	212c      	movs	r1, #44	; 0x2c
 8006456:	fb01 f303 	mul.w	r3, r1, r3
 800645a:	4413      	add	r3, r2
 800645c:	334c      	adds	r3, #76	; 0x4c
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6879      	ldr	r1, [r7, #4]
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	202c      	movs	r0, #44	; 0x2c
 8006466:	fb00 f202 	mul.w	r2, r0, r2
 800646a:	440a      	add	r2, r1
 800646c:	3240      	adds	r2, #64	; 0x40
 800646e:	8812      	ldrh	r2, [r2, #0]
 8006470:	4413      	add	r3, r2
 8006472:	3b01      	subs	r3, #1
 8006474:	6879      	ldr	r1, [r7, #4]
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	202c      	movs	r0, #44	; 0x2c
 800647a:	fb00 f202 	mul.w	r2, r0, r2
 800647e:	440a      	add	r2, r1
 8006480:	3240      	adds	r2, #64	; 0x40
 8006482:	8812      	ldrh	r2, [r2, #0]
 8006484:	fbb3 f3f2 	udiv	r3, r3, r2
 8006488:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 80b5 	beq.w	8006600 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	212c      	movs	r1, #44	; 0x2c
 800649c:	fb01 f303 	mul.w	r3, r1, r3
 80064a0:	4413      	add	r3, r2
 80064a2:	3355      	adds	r3, #85	; 0x55
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	f083 0301 	eor.w	r3, r3, #1
 80064aa:	b2d8      	uxtb	r0, r3
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	212c      	movs	r1, #44	; 0x2c
 80064b2:	fb01 f303 	mul.w	r3, r1, r3
 80064b6:	4413      	add	r3, r2
 80064b8:	3355      	adds	r3, #85	; 0x55
 80064ba:	4602      	mov	r2, r0
 80064bc:	701a      	strb	r2, [r3, #0]
 80064be:	e09f      	b.n	8006600 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	212c      	movs	r1, #44	; 0x2c
 80064c6:	fb01 f303 	mul.w	r3, r1, r3
 80064ca:	4413      	add	r3, r2
 80064cc:	3361      	adds	r3, #97	; 0x61
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	2b03      	cmp	r3, #3
 80064d2:	d109      	bne.n	80064e8 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	212c      	movs	r1, #44	; 0x2c
 80064da:	fb01 f303 	mul.w	r3, r1, r3
 80064de:	4413      	add	r3, r2
 80064e0:	3360      	adds	r3, #96	; 0x60
 80064e2:	2202      	movs	r2, #2
 80064e4:	701a      	strb	r2, [r3, #0]
 80064e6:	e08b      	b.n	8006600 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	212c      	movs	r1, #44	; 0x2c
 80064ee:	fb01 f303 	mul.w	r3, r1, r3
 80064f2:	4413      	add	r3, r2
 80064f4:	3361      	adds	r3, #97	; 0x61
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	2b04      	cmp	r3, #4
 80064fa:	d109      	bne.n	8006510 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	212c      	movs	r1, #44	; 0x2c
 8006502:	fb01 f303 	mul.w	r3, r1, r3
 8006506:	4413      	add	r3, r2
 8006508:	3360      	adds	r3, #96	; 0x60
 800650a:	2202      	movs	r2, #2
 800650c:	701a      	strb	r2, [r3, #0]
 800650e:	e077      	b.n	8006600 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	212c      	movs	r1, #44	; 0x2c
 8006516:	fb01 f303 	mul.w	r3, r1, r3
 800651a:	4413      	add	r3, r2
 800651c:	3361      	adds	r3, #97	; 0x61
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2b05      	cmp	r3, #5
 8006522:	d109      	bne.n	8006538 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	212c      	movs	r1, #44	; 0x2c
 800652a:	fb01 f303 	mul.w	r3, r1, r3
 800652e:	4413      	add	r3, r2
 8006530:	3360      	adds	r3, #96	; 0x60
 8006532:	2205      	movs	r2, #5
 8006534:	701a      	strb	r2, [r3, #0]
 8006536:	e063      	b.n	8006600 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	212c      	movs	r1, #44	; 0x2c
 800653e:	fb01 f303 	mul.w	r3, r1, r3
 8006542:	4413      	add	r3, r2
 8006544:	3361      	adds	r3, #97	; 0x61
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	2b06      	cmp	r3, #6
 800654a:	d009      	beq.n	8006560 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	212c      	movs	r1, #44	; 0x2c
 8006552:	fb01 f303 	mul.w	r3, r1, r3
 8006556:	4413      	add	r3, r2
 8006558:	3361      	adds	r3, #97	; 0x61
 800655a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800655c:	2b08      	cmp	r3, #8
 800655e:	d14f      	bne.n	8006600 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8006560:	687a      	ldr	r2, [r7, #4]
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	212c      	movs	r1, #44	; 0x2c
 8006566:	fb01 f303 	mul.w	r3, r1, r3
 800656a:	4413      	add	r3, r2
 800656c:	335c      	adds	r3, #92	; 0x5c
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	6879      	ldr	r1, [r7, #4]
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	202c      	movs	r0, #44	; 0x2c
 8006578:	fb00 f303 	mul.w	r3, r0, r3
 800657c:	440b      	add	r3, r1
 800657e:	335c      	adds	r3, #92	; 0x5c
 8006580:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	212c      	movs	r1, #44	; 0x2c
 8006588:	fb01 f303 	mul.w	r3, r1, r3
 800658c:	4413      	add	r3, r2
 800658e:	335c      	adds	r3, #92	; 0x5c
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b02      	cmp	r3, #2
 8006594:	d912      	bls.n	80065bc <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	212c      	movs	r1, #44	; 0x2c
 800659c:	fb01 f303 	mul.w	r3, r1, r3
 80065a0:	4413      	add	r3, r2
 80065a2:	335c      	adds	r3, #92	; 0x5c
 80065a4:	2200      	movs	r2, #0
 80065a6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	212c      	movs	r1, #44	; 0x2c
 80065ae:	fb01 f303 	mul.w	r3, r1, r3
 80065b2:	4413      	add	r3, r2
 80065b4:	3360      	adds	r3, #96	; 0x60
 80065b6:	2204      	movs	r2, #4
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	e021      	b.n	8006600 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	212c      	movs	r1, #44	; 0x2c
 80065c2:	fb01 f303 	mul.w	r3, r1, r3
 80065c6:	4413      	add	r3, r2
 80065c8:	3360      	adds	r3, #96	; 0x60
 80065ca:	2202      	movs	r2, #2
 80065cc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065e4:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065ec:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065fa:	461a      	mov	r2, r3
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	4413      	add	r3, r2
 8006608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800660c:	461a      	mov	r2, r3
 800660e:	2302      	movs	r3, #2
 8006610:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	b2d9      	uxtb	r1, r3
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	202c      	movs	r0, #44	; 0x2c
 800661c:	fb00 f303 	mul.w	r3, r0, r3
 8006620:	4413      	add	r3, r2
 8006622:	3360      	adds	r3, #96	; 0x60
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	461a      	mov	r2, r3
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f01a fb0f 	bl	8020c4c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800662e:	bf00      	nop
 8006630:	3720      	adds	r7, #32
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b08a      	sub	sp, #40	; 0x28
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	6a1b      	ldr	r3, [r3, #32]
 800664e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	f003 030f 	and.w	r3, r3, #15
 8006656:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	0c5b      	lsrs	r3, r3, #17
 800665c:	f003 030f 	and.w	r3, r3, #15
 8006660:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	091b      	lsrs	r3, r3, #4
 8006666:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800666a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	2b02      	cmp	r3, #2
 8006670:	d004      	beq.n	800667c <HCD_RXQLVL_IRQHandler+0x46>
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2b05      	cmp	r3, #5
 8006676:	f000 80a9 	beq.w	80067cc <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800667a:	e0aa      	b.n	80067d2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	2b00      	cmp	r3, #0
 8006680:	f000 80a6 	beq.w	80067d0 <HCD_RXQLVL_IRQHandler+0x19a>
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	212c      	movs	r1, #44	; 0x2c
 800668a:	fb01 f303 	mul.w	r3, r1, r3
 800668e:	4413      	add	r3, r2
 8006690:	3344      	adds	r3, #68	; 0x44
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 809b 	beq.w	80067d0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	212c      	movs	r1, #44	; 0x2c
 80066a0:	fb01 f303 	mul.w	r3, r1, r3
 80066a4:	4413      	add	r3, r2
 80066a6:	3350      	adds	r3, #80	; 0x50
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	441a      	add	r2, r3
 80066ae:	6879      	ldr	r1, [r7, #4]
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	202c      	movs	r0, #44	; 0x2c
 80066b4:	fb00 f303 	mul.w	r3, r0, r3
 80066b8:	440b      	add	r3, r1
 80066ba:	334c      	adds	r3, #76	; 0x4c
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d87a      	bhi.n	80067b8 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6818      	ldr	r0, [r3, #0]
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	212c      	movs	r1, #44	; 0x2c
 80066cc:	fb01 f303 	mul.w	r3, r1, r3
 80066d0:	4413      	add	r3, r2
 80066d2:	3344      	adds	r3, #68	; 0x44
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	b292      	uxth	r2, r2
 80066da:	4619      	mov	r1, r3
 80066dc:	f002 fb92 	bl	8008e04 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	212c      	movs	r1, #44	; 0x2c
 80066e6:	fb01 f303 	mul.w	r3, r1, r3
 80066ea:	4413      	add	r3, r2
 80066ec:	3344      	adds	r3, #68	; 0x44
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	441a      	add	r2, r3
 80066f4:	6879      	ldr	r1, [r7, #4]
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	202c      	movs	r0, #44	; 0x2c
 80066fa:	fb00 f303 	mul.w	r3, r0, r3
 80066fe:	440b      	add	r3, r1
 8006700:	3344      	adds	r3, #68	; 0x44
 8006702:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	212c      	movs	r1, #44	; 0x2c
 800670a:	fb01 f303 	mul.w	r3, r1, r3
 800670e:	4413      	add	r3, r2
 8006710:	3350      	adds	r3, #80	; 0x50
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	441a      	add	r2, r3
 8006718:	6879      	ldr	r1, [r7, #4]
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	202c      	movs	r0, #44	; 0x2c
 800671e:	fb00 f303 	mul.w	r3, r0, r3
 8006722:	440b      	add	r3, r1
 8006724:	3350      	adds	r3, #80	; 0x50
 8006726:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	015a      	lsls	r2, r3, #5
 800672c:	6a3b      	ldr	r3, [r7, #32]
 800672e:	4413      	add	r3, r2
 8006730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	0cdb      	lsrs	r3, r3, #19
 8006738:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800673c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	212c      	movs	r1, #44	; 0x2c
 8006744:	fb01 f303 	mul.w	r3, r1, r3
 8006748:	4413      	add	r3, r2
 800674a:	3340      	adds	r3, #64	; 0x40
 800674c:	881b      	ldrh	r3, [r3, #0]
 800674e:	461a      	mov	r2, r3
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	4293      	cmp	r3, r2
 8006754:	d13c      	bne.n	80067d0 <HCD_RXQLVL_IRQHandler+0x19a>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d039      	beq.n	80067d0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	015a      	lsls	r2, r3, #5
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	4413      	add	r3, r2
 8006764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006772:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800677a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	6a3b      	ldr	r3, [r7, #32]
 8006782:	4413      	add	r3, r2
 8006784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006788:	461a      	mov	r2, r3
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	212c      	movs	r1, #44	; 0x2c
 8006794:	fb01 f303 	mul.w	r3, r1, r3
 8006798:	4413      	add	r3, r2
 800679a:	3354      	adds	r3, #84	; 0x54
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	f083 0301 	eor.w	r3, r3, #1
 80067a2:	b2d8      	uxtb	r0, r3
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	212c      	movs	r1, #44	; 0x2c
 80067aa:	fb01 f303 	mul.w	r3, r1, r3
 80067ae:	4413      	add	r3, r2
 80067b0:	3354      	adds	r3, #84	; 0x54
 80067b2:	4602      	mov	r2, r0
 80067b4:	701a      	strb	r2, [r3, #0]
      break;
 80067b6:	e00b      	b.n	80067d0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	212c      	movs	r1, #44	; 0x2c
 80067be:	fb01 f303 	mul.w	r3, r1, r3
 80067c2:	4413      	add	r3, r2
 80067c4:	3360      	adds	r3, #96	; 0x60
 80067c6:	2204      	movs	r2, #4
 80067c8:	701a      	strb	r2, [r3, #0]
      break;
 80067ca:	e001      	b.n	80067d0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80067cc:	bf00      	nop
 80067ce:	e000      	b.n	80067d2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80067d0:	bf00      	nop
  }
}
 80067d2:	bf00      	nop
 80067d4:	3728      	adds	r7, #40	; 0x28
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b086      	sub	sp, #24
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006806:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b02      	cmp	r3, #2
 8006810:	d10b      	bne.n	800682a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	2b01      	cmp	r3, #1
 800681a:	d102      	bne.n	8006822 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f01a f9f9 	bl	8020c14 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	f043 0302 	orr.w	r3, r3, #2
 8006828:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f003 0308 	and.w	r3, r3, #8
 8006830:	2b08      	cmp	r3, #8
 8006832:	d132      	bne.n	800689a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	f043 0308 	orr.w	r3, r3, #8
 800683a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f003 0304 	and.w	r3, r3, #4
 8006842:	2b04      	cmp	r3, #4
 8006844:	d126      	bne.n	8006894 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	2b02      	cmp	r3, #2
 800684c:	d113      	bne.n	8006876 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006854:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006858:	d106      	bne.n	8006868 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2102      	movs	r1, #2
 8006860:	4618      	mov	r0, r3
 8006862:	f002 fc2f 	bl	80090c4 <USB_InitFSLSPClkSel>
 8006866:	e011      	b.n	800688c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2101      	movs	r1, #1
 800686e:	4618      	mov	r0, r3
 8006870:	f002 fc28 	bl	80090c4 <USB_InitFSLSPClkSel>
 8006874:	e00a      	b.n	800688c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d106      	bne.n	800688c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006884:	461a      	mov	r2, r3
 8006886:	f64e 2360 	movw	r3, #60000	; 0xea60
 800688a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f01a f9ef 	bl	8020c70 <HAL_HCD_PortEnabled_Callback>
 8006892:	e002      	b.n	800689a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f01a f9f9 	bl	8020c8c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f003 0320 	and.w	r3, r3, #32
 80068a0:	2b20      	cmp	r3, #32
 80068a2:	d103      	bne.n	80068ac <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	f043 0320 	orr.w	r3, r3, #32
 80068aa:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80068b2:	461a      	mov	r2, r3
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	6013      	str	r3, [r2, #0]
}
 80068b8:	bf00      	nop
 80068ba:	3718      	adds	r7, #24
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80068c0:	b480      	push	{r7}
 80068c2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068c4:	4b05      	ldr	r3, [pc, #20]	; (80068dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a04      	ldr	r2, [pc, #16]	; (80068dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80068ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ce:	6013      	str	r3, [r2, #0]
}
 80068d0:	bf00      	nop
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	40007000 	.word	0x40007000

080068e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80068e6:	2300      	movs	r3, #0
 80068e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80068ea:	4b23      	ldr	r3, [pc, #140]	; (8006978 <HAL_PWREx_EnableOverDrive+0x98>)
 80068ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ee:	4a22      	ldr	r2, [pc, #136]	; (8006978 <HAL_PWREx_EnableOverDrive+0x98>)
 80068f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068f4:	6413      	str	r3, [r2, #64]	; 0x40
 80068f6:	4b20      	ldr	r3, [pc, #128]	; (8006978 <HAL_PWREx_EnableOverDrive+0x98>)
 80068f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068fe:	603b      	str	r3, [r7, #0]
 8006900:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006902:	4b1e      	ldr	r3, [pc, #120]	; (800697c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a1d      	ldr	r2, [pc, #116]	; (800697c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800690c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800690e:	f7fc ff45 	bl	800379c <HAL_GetTick>
 8006912:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006914:	e009      	b.n	800692a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006916:	f7fc ff41 	bl	800379c <HAL_GetTick>
 800691a:	4602      	mov	r2, r0
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006924:	d901      	bls.n	800692a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e022      	b.n	8006970 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800692a:	4b14      	ldr	r3, [pc, #80]	; (800697c <HAL_PWREx_EnableOverDrive+0x9c>)
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006932:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006936:	d1ee      	bne.n	8006916 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006938:	4b10      	ldr	r3, [pc, #64]	; (800697c <HAL_PWREx_EnableOverDrive+0x9c>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a0f      	ldr	r2, [pc, #60]	; (800697c <HAL_PWREx_EnableOverDrive+0x9c>)
 800693e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006942:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006944:	f7fc ff2a 	bl	800379c <HAL_GetTick>
 8006948:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800694a:	e009      	b.n	8006960 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800694c:	f7fc ff26 	bl	800379c <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800695a:	d901      	bls.n	8006960 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e007      	b.n	8006970 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006960:	4b06      	ldr	r3, [pc, #24]	; (800697c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006968:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800696c:	d1ee      	bne.n	800694c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	40023800 	.word	0x40023800
 800697c:	40007000 	.word	0x40007000

08006980 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b086      	sub	sp, #24
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006988:	2300      	movs	r3, #0
 800698a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e29b      	b.n	8006ece <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f000 8087 	beq.w	8006ab2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80069a4:	4b96      	ldr	r3, [pc, #600]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	f003 030c 	and.w	r3, r3, #12
 80069ac:	2b04      	cmp	r3, #4
 80069ae:	d00c      	beq.n	80069ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80069b0:	4b93      	ldr	r3, [pc, #588]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	f003 030c 	and.w	r3, r3, #12
 80069b8:	2b08      	cmp	r3, #8
 80069ba:	d112      	bne.n	80069e2 <HAL_RCC_OscConfig+0x62>
 80069bc:	4b90      	ldr	r3, [pc, #576]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069c8:	d10b      	bne.n	80069e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069ca:	4b8d      	ldr	r3, [pc, #564]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d06c      	beq.n	8006ab0 <HAL_RCC_OscConfig+0x130>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d168      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e275      	b.n	8006ece <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ea:	d106      	bne.n	80069fa <HAL_RCC_OscConfig+0x7a>
 80069ec:	4b84      	ldr	r3, [pc, #528]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a83      	ldr	r2, [pc, #524]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 80069f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069f6:	6013      	str	r3, [r2, #0]
 80069f8:	e02e      	b.n	8006a58 <HAL_RCC_OscConfig+0xd8>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10c      	bne.n	8006a1c <HAL_RCC_OscConfig+0x9c>
 8006a02:	4b7f      	ldr	r3, [pc, #508]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a7e      	ldr	r2, [pc, #504]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a0c:	6013      	str	r3, [r2, #0]
 8006a0e:	4b7c      	ldr	r3, [pc, #496]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a7b      	ldr	r2, [pc, #492]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006a14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a18:	6013      	str	r3, [r2, #0]
 8006a1a:	e01d      	b.n	8006a58 <HAL_RCC_OscConfig+0xd8>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a24:	d10c      	bne.n	8006a40 <HAL_RCC_OscConfig+0xc0>
 8006a26:	4b76      	ldr	r3, [pc, #472]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a75      	ldr	r2, [pc, #468]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006a2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a30:	6013      	str	r3, [r2, #0]
 8006a32:	4b73      	ldr	r3, [pc, #460]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a72      	ldr	r2, [pc, #456]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a3c:	6013      	str	r3, [r2, #0]
 8006a3e:	e00b      	b.n	8006a58 <HAL_RCC_OscConfig+0xd8>
 8006a40:	4b6f      	ldr	r3, [pc, #444]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a6e      	ldr	r2, [pc, #440]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a4a:	6013      	str	r3, [r2, #0]
 8006a4c:	4b6c      	ldr	r3, [pc, #432]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a6b      	ldr	r2, [pc, #428]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006a52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d013      	beq.n	8006a88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a60:	f7fc fe9c 	bl	800379c <HAL_GetTick>
 8006a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a66:	e008      	b.n	8006a7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a68:	f7fc fe98 	bl	800379c <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	2b64      	cmp	r3, #100	; 0x64
 8006a74:	d901      	bls.n	8006a7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e229      	b.n	8006ece <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a7a:	4b61      	ldr	r3, [pc, #388]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0f0      	beq.n	8006a68 <HAL_RCC_OscConfig+0xe8>
 8006a86:	e014      	b.n	8006ab2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a88:	f7fc fe88 	bl	800379c <HAL_GetTick>
 8006a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a8e:	e008      	b.n	8006aa2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a90:	f7fc fe84 	bl	800379c <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	2b64      	cmp	r3, #100	; 0x64
 8006a9c:	d901      	bls.n	8006aa2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e215      	b.n	8006ece <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006aa2:	4b57      	ldr	r3, [pc, #348]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1f0      	bne.n	8006a90 <HAL_RCC_OscConfig+0x110>
 8006aae:	e000      	b.n	8006ab2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 0302 	and.w	r3, r3, #2
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d069      	beq.n	8006b92 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006abe:	4b50      	ldr	r3, [pc, #320]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f003 030c 	and.w	r3, r3, #12
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00b      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006aca:	4b4d      	ldr	r3, [pc, #308]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f003 030c 	and.w	r3, r3, #12
 8006ad2:	2b08      	cmp	r3, #8
 8006ad4:	d11c      	bne.n	8006b10 <HAL_RCC_OscConfig+0x190>
 8006ad6:	4b4a      	ldr	r3, [pc, #296]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d116      	bne.n	8006b10 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ae2:	4b47      	ldr	r3, [pc, #284]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0302 	and.w	r3, r3, #2
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d005      	beq.n	8006afa <HAL_RCC_OscConfig+0x17a>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d001      	beq.n	8006afa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e1e9      	b.n	8006ece <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006afa:	4b41      	ldr	r3, [pc, #260]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	00db      	lsls	r3, r3, #3
 8006b08:	493d      	ldr	r1, [pc, #244]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b0e:	e040      	b.n	8006b92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d023      	beq.n	8006b60 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b18:	4b39      	ldr	r3, [pc, #228]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a38      	ldr	r2, [pc, #224]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006b1e:	f043 0301 	orr.w	r3, r3, #1
 8006b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b24:	f7fc fe3a 	bl	800379c <HAL_GetTick>
 8006b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b2a:	e008      	b.n	8006b3e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b2c:	f7fc fe36 	bl	800379c <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d901      	bls.n	8006b3e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e1c7      	b.n	8006ece <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b3e:	4b30      	ldr	r3, [pc, #192]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0302 	and.w	r3, r3, #2
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d0f0      	beq.n	8006b2c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b4a:	4b2d      	ldr	r3, [pc, #180]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	00db      	lsls	r3, r3, #3
 8006b58:	4929      	ldr	r1, [pc, #164]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	600b      	str	r3, [r1, #0]
 8006b5e:	e018      	b.n	8006b92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b60:	4b27      	ldr	r3, [pc, #156]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a26      	ldr	r2, [pc, #152]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006b66:	f023 0301 	bic.w	r3, r3, #1
 8006b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b6c:	f7fc fe16 	bl	800379c <HAL_GetTick>
 8006b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b72:	e008      	b.n	8006b86 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b74:	f7fc fe12 	bl	800379c <HAL_GetTick>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	1ad3      	subs	r3, r2, r3
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	d901      	bls.n	8006b86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e1a3      	b.n	8006ece <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b86:	4b1e      	ldr	r3, [pc, #120]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1f0      	bne.n	8006b74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0308 	and.w	r3, r3, #8
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d038      	beq.n	8006c10 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d019      	beq.n	8006bda <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ba6:	4b16      	ldr	r3, [pc, #88]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006baa:	4a15      	ldr	r2, [pc, #84]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006bac:	f043 0301 	orr.w	r3, r3, #1
 8006bb0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bb2:	f7fc fdf3 	bl	800379c <HAL_GetTick>
 8006bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bb8:	e008      	b.n	8006bcc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bba:	f7fc fdef 	bl	800379c <HAL_GetTick>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d901      	bls.n	8006bcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	e180      	b.n	8006ece <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bcc:	4b0c      	ldr	r3, [pc, #48]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bd0:	f003 0302 	and.w	r3, r3, #2
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d0f0      	beq.n	8006bba <HAL_RCC_OscConfig+0x23a>
 8006bd8:	e01a      	b.n	8006c10 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bda:	4b09      	ldr	r3, [pc, #36]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bde:	4a08      	ldr	r2, [pc, #32]	; (8006c00 <HAL_RCC_OscConfig+0x280>)
 8006be0:	f023 0301 	bic.w	r3, r3, #1
 8006be4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006be6:	f7fc fdd9 	bl	800379c <HAL_GetTick>
 8006bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bec:	e00a      	b.n	8006c04 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bee:	f7fc fdd5 	bl	800379c <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d903      	bls.n	8006c04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e166      	b.n	8006ece <HAL_RCC_OscConfig+0x54e>
 8006c00:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c04:	4b92      	ldr	r3, [pc, #584]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c08:	f003 0302 	and.w	r3, r3, #2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1ee      	bne.n	8006bee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0304 	and.w	r3, r3, #4
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 80a4 	beq.w	8006d66 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c1e:	4b8c      	ldr	r3, [pc, #560]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10d      	bne.n	8006c46 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c2a:	4b89      	ldr	r3, [pc, #548]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2e:	4a88      	ldr	r2, [pc, #544]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c34:	6413      	str	r3, [r2, #64]	; 0x40
 8006c36:	4b86      	ldr	r3, [pc, #536]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c3e:	60bb      	str	r3, [r7, #8]
 8006c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c42:	2301      	movs	r3, #1
 8006c44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c46:	4b83      	ldr	r3, [pc, #524]	; (8006e54 <HAL_RCC_OscConfig+0x4d4>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d118      	bne.n	8006c84 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006c52:	4b80      	ldr	r3, [pc, #512]	; (8006e54 <HAL_RCC_OscConfig+0x4d4>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a7f      	ldr	r2, [pc, #508]	; (8006e54 <HAL_RCC_OscConfig+0x4d4>)
 8006c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c5e:	f7fc fd9d 	bl	800379c <HAL_GetTick>
 8006c62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c64:	e008      	b.n	8006c78 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c66:	f7fc fd99 	bl	800379c <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	2b64      	cmp	r3, #100	; 0x64
 8006c72:	d901      	bls.n	8006c78 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e12a      	b.n	8006ece <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c78:	4b76      	ldr	r3, [pc, #472]	; (8006e54 <HAL_RCC_OscConfig+0x4d4>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d0f0      	beq.n	8006c66 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d106      	bne.n	8006c9a <HAL_RCC_OscConfig+0x31a>
 8006c8c:	4b70      	ldr	r3, [pc, #448]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c90:	4a6f      	ldr	r2, [pc, #444]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006c92:	f043 0301 	orr.w	r3, r3, #1
 8006c96:	6713      	str	r3, [r2, #112]	; 0x70
 8006c98:	e02d      	b.n	8006cf6 <HAL_RCC_OscConfig+0x376>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10c      	bne.n	8006cbc <HAL_RCC_OscConfig+0x33c>
 8006ca2:	4b6b      	ldr	r3, [pc, #428]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca6:	4a6a      	ldr	r2, [pc, #424]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006ca8:	f023 0301 	bic.w	r3, r3, #1
 8006cac:	6713      	str	r3, [r2, #112]	; 0x70
 8006cae:	4b68      	ldr	r3, [pc, #416]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb2:	4a67      	ldr	r2, [pc, #412]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006cb4:	f023 0304 	bic.w	r3, r3, #4
 8006cb8:	6713      	str	r3, [r2, #112]	; 0x70
 8006cba:	e01c      	b.n	8006cf6 <HAL_RCC_OscConfig+0x376>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	689b      	ldr	r3, [r3, #8]
 8006cc0:	2b05      	cmp	r3, #5
 8006cc2:	d10c      	bne.n	8006cde <HAL_RCC_OscConfig+0x35e>
 8006cc4:	4b62      	ldr	r3, [pc, #392]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc8:	4a61      	ldr	r2, [pc, #388]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006cca:	f043 0304 	orr.w	r3, r3, #4
 8006cce:	6713      	str	r3, [r2, #112]	; 0x70
 8006cd0:	4b5f      	ldr	r3, [pc, #380]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd4:	4a5e      	ldr	r2, [pc, #376]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006cd6:	f043 0301 	orr.w	r3, r3, #1
 8006cda:	6713      	str	r3, [r2, #112]	; 0x70
 8006cdc:	e00b      	b.n	8006cf6 <HAL_RCC_OscConfig+0x376>
 8006cde:	4b5c      	ldr	r3, [pc, #368]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce2:	4a5b      	ldr	r2, [pc, #364]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006ce4:	f023 0301 	bic.w	r3, r3, #1
 8006ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8006cea:	4b59      	ldr	r3, [pc, #356]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cee:	4a58      	ldr	r2, [pc, #352]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006cf0:	f023 0304 	bic.w	r3, r3, #4
 8006cf4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d015      	beq.n	8006d2a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cfe:	f7fc fd4d 	bl	800379c <HAL_GetTick>
 8006d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d04:	e00a      	b.n	8006d1c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d06:	f7fc fd49 	bl	800379c <HAL_GetTick>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d901      	bls.n	8006d1c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e0d8      	b.n	8006ece <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d1c:	4b4c      	ldr	r3, [pc, #304]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d20:	f003 0302 	and.w	r3, r3, #2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d0ee      	beq.n	8006d06 <HAL_RCC_OscConfig+0x386>
 8006d28:	e014      	b.n	8006d54 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d2a:	f7fc fd37 	bl	800379c <HAL_GetTick>
 8006d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d30:	e00a      	b.n	8006d48 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d32:	f7fc fd33 	bl	800379c <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d901      	bls.n	8006d48 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006d44:	2303      	movs	r3, #3
 8006d46:	e0c2      	b.n	8006ece <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d48:	4b41      	ldr	r3, [pc, #260]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d4c:	f003 0302 	and.w	r3, r3, #2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1ee      	bne.n	8006d32 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d54:	7dfb      	ldrb	r3, [r7, #23]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d105      	bne.n	8006d66 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d5a:	4b3d      	ldr	r3, [pc, #244]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5e:	4a3c      	ldr	r2, [pc, #240]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f000 80ae 	beq.w	8006ecc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d70:	4b37      	ldr	r3, [pc, #220]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f003 030c 	and.w	r3, r3, #12
 8006d78:	2b08      	cmp	r3, #8
 8006d7a:	d06d      	beq.n	8006e58 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d14b      	bne.n	8006e1c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d84:	4b32      	ldr	r3, [pc, #200]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a31      	ldr	r2, [pc, #196]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006d8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d90:	f7fc fd04 	bl	800379c <HAL_GetTick>
 8006d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d96:	e008      	b.n	8006daa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d98:	f7fc fd00 	bl	800379c <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d901      	bls.n	8006daa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e091      	b.n	8006ece <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006daa:	4b29      	ldr	r3, [pc, #164]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1f0      	bne.n	8006d98 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	69da      	ldr	r2, [r3, #28]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc4:	019b      	lsls	r3, r3, #6
 8006dc6:	431a      	orrs	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dcc:	085b      	lsrs	r3, r3, #1
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	041b      	lsls	r3, r3, #16
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd8:	061b      	lsls	r3, r3, #24
 8006dda:	431a      	orrs	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de0:	071b      	lsls	r3, r3, #28
 8006de2:	491b      	ldr	r1, [pc, #108]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006de4:	4313      	orrs	r3, r2
 8006de6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006de8:	4b19      	ldr	r3, [pc, #100]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a18      	ldr	r2, [pc, #96]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006dee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df4:	f7fc fcd2 	bl	800379c <HAL_GetTick>
 8006df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dfa:	e008      	b.n	8006e0e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dfc:	f7fc fcce 	bl	800379c <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d901      	bls.n	8006e0e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e05f      	b.n	8006ece <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e0e:	4b10      	ldr	r3, [pc, #64]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d0f0      	beq.n	8006dfc <HAL_RCC_OscConfig+0x47c>
 8006e1a:	e057      	b.n	8006ecc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e1c:	4b0c      	ldr	r3, [pc, #48]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a0b      	ldr	r2, [pc, #44]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006e22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e28:	f7fc fcb8 	bl	800379c <HAL_GetTick>
 8006e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e2e:	e008      	b.n	8006e42 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e30:	f7fc fcb4 	bl	800379c <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d901      	bls.n	8006e42 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e045      	b.n	8006ece <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e42:	4b03      	ldr	r3, [pc, #12]	; (8006e50 <HAL_RCC_OscConfig+0x4d0>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1f0      	bne.n	8006e30 <HAL_RCC_OscConfig+0x4b0>
 8006e4e:	e03d      	b.n	8006ecc <HAL_RCC_OscConfig+0x54c>
 8006e50:	40023800 	.word	0x40023800
 8006e54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006e58:	4b1f      	ldr	r3, [pc, #124]	; (8006ed8 <HAL_RCC_OscConfig+0x558>)
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d030      	beq.n	8006ec8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d129      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d122      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e88:	4013      	ands	r3, r2
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e8e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d119      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9e:	085b      	lsrs	r3, r3, #1
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d10f      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d107      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d001      	beq.n	8006ecc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e000      	b.n	8006ece <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3718      	adds	r7, #24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	40023800 	.word	0x40023800

08006edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d101      	bne.n	8006ef4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e0d0      	b.n	8007096 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ef4:	4b6a      	ldr	r3, [pc, #424]	; (80070a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 030f 	and.w	r3, r3, #15
 8006efc:	683a      	ldr	r2, [r7, #0]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d910      	bls.n	8006f24 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f02:	4b67      	ldr	r3, [pc, #412]	; (80070a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f023 020f 	bic.w	r2, r3, #15
 8006f0a:	4965      	ldr	r1, [pc, #404]	; (80070a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f12:	4b63      	ldr	r3, [pc, #396]	; (80070a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 030f 	and.w	r3, r3, #15
 8006f1a:	683a      	ldr	r2, [r7, #0]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d001      	beq.n	8006f24 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e0b8      	b.n	8007096 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0302 	and.w	r3, r3, #2
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d020      	beq.n	8006f72 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0304 	and.w	r3, r3, #4
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d005      	beq.n	8006f48 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f3c:	4b59      	ldr	r3, [pc, #356]	; (80070a4 <HAL_RCC_ClockConfig+0x1c8>)
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	4a58      	ldr	r2, [pc, #352]	; (80070a4 <HAL_RCC_ClockConfig+0x1c8>)
 8006f42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006f46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0308 	and.w	r3, r3, #8
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d005      	beq.n	8006f60 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f54:	4b53      	ldr	r3, [pc, #332]	; (80070a4 <HAL_RCC_ClockConfig+0x1c8>)
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	4a52      	ldr	r2, [pc, #328]	; (80070a4 <HAL_RCC_ClockConfig+0x1c8>)
 8006f5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f60:	4b50      	ldr	r3, [pc, #320]	; (80070a4 <HAL_RCC_ClockConfig+0x1c8>)
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	494d      	ldr	r1, [pc, #308]	; (80070a4 <HAL_RCC_ClockConfig+0x1c8>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d040      	beq.n	8007000 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d107      	bne.n	8006f96 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f86:	4b47      	ldr	r3, [pc, #284]	; (80070a4 <HAL_RCC_ClockConfig+0x1c8>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d115      	bne.n	8006fbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e07f      	b.n	8007096 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	2b02      	cmp	r3, #2
 8006f9c:	d107      	bne.n	8006fae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f9e:	4b41      	ldr	r3, [pc, #260]	; (80070a4 <HAL_RCC_ClockConfig+0x1c8>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d109      	bne.n	8006fbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e073      	b.n	8007096 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fae:	4b3d      	ldr	r3, [pc, #244]	; (80070a4 <HAL_RCC_ClockConfig+0x1c8>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d101      	bne.n	8006fbe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e06b      	b.n	8007096 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fbe:	4b39      	ldr	r3, [pc, #228]	; (80070a4 <HAL_RCC_ClockConfig+0x1c8>)
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f023 0203 	bic.w	r2, r3, #3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	4936      	ldr	r1, [pc, #216]	; (80070a4 <HAL_RCC_ClockConfig+0x1c8>)
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fd0:	f7fc fbe4 	bl	800379c <HAL_GetTick>
 8006fd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fd6:	e00a      	b.n	8006fee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fd8:	f7fc fbe0 	bl	800379c <HAL_GetTick>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d901      	bls.n	8006fee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e053      	b.n	8007096 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fee:	4b2d      	ldr	r3, [pc, #180]	; (80070a4 <HAL_RCC_ClockConfig+0x1c8>)
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f003 020c 	and.w	r2, r3, #12
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d1eb      	bne.n	8006fd8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007000:	4b27      	ldr	r3, [pc, #156]	; (80070a0 <HAL_RCC_ClockConfig+0x1c4>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f003 030f 	and.w	r3, r3, #15
 8007008:	683a      	ldr	r2, [r7, #0]
 800700a:	429a      	cmp	r2, r3
 800700c:	d210      	bcs.n	8007030 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800700e:	4b24      	ldr	r3, [pc, #144]	; (80070a0 <HAL_RCC_ClockConfig+0x1c4>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f023 020f 	bic.w	r2, r3, #15
 8007016:	4922      	ldr	r1, [pc, #136]	; (80070a0 <HAL_RCC_ClockConfig+0x1c4>)
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	4313      	orrs	r3, r2
 800701c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800701e:	4b20      	ldr	r3, [pc, #128]	; (80070a0 <HAL_RCC_ClockConfig+0x1c4>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 030f 	and.w	r3, r3, #15
 8007026:	683a      	ldr	r2, [r7, #0]
 8007028:	429a      	cmp	r2, r3
 800702a:	d001      	beq.n	8007030 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	e032      	b.n	8007096 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0304 	and.w	r3, r3, #4
 8007038:	2b00      	cmp	r3, #0
 800703a:	d008      	beq.n	800704e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800703c:	4b19      	ldr	r3, [pc, #100]	; (80070a4 <HAL_RCC_ClockConfig+0x1c8>)
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	4916      	ldr	r1, [pc, #88]	; (80070a4 <HAL_RCC_ClockConfig+0x1c8>)
 800704a:	4313      	orrs	r3, r2
 800704c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0308 	and.w	r3, r3, #8
 8007056:	2b00      	cmp	r3, #0
 8007058:	d009      	beq.n	800706e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800705a:	4b12      	ldr	r3, [pc, #72]	; (80070a4 <HAL_RCC_ClockConfig+0x1c8>)
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	00db      	lsls	r3, r3, #3
 8007068:	490e      	ldr	r1, [pc, #56]	; (80070a4 <HAL_RCC_ClockConfig+0x1c8>)
 800706a:	4313      	orrs	r3, r2
 800706c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800706e:	f000 f821 	bl	80070b4 <HAL_RCC_GetSysClockFreq>
 8007072:	4602      	mov	r2, r0
 8007074:	4b0b      	ldr	r3, [pc, #44]	; (80070a4 <HAL_RCC_ClockConfig+0x1c8>)
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	091b      	lsrs	r3, r3, #4
 800707a:	f003 030f 	and.w	r3, r3, #15
 800707e:	490a      	ldr	r1, [pc, #40]	; (80070a8 <HAL_RCC_ClockConfig+0x1cc>)
 8007080:	5ccb      	ldrb	r3, [r1, r3]
 8007082:	fa22 f303 	lsr.w	r3, r2, r3
 8007086:	4a09      	ldr	r2, [pc, #36]	; (80070ac <HAL_RCC_ClockConfig+0x1d0>)
 8007088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800708a:	4b09      	ldr	r3, [pc, #36]	; (80070b0 <HAL_RCC_ClockConfig+0x1d4>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4618      	mov	r0, r3
 8007090:	f7fb f9f0 	bl	8002474 <HAL_InitTick>

  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	40023c00 	.word	0x40023c00
 80070a4:	40023800 	.word	0x40023800
 80070a8:	08027030 	.word	0x08027030
 80070ac:	20000700 	.word	0x20000700
 80070b0:	20000718 	.word	0x20000718

080070b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80070b8:	b084      	sub	sp, #16
 80070ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80070bc:	2300      	movs	r3, #0
 80070be:	607b      	str	r3, [r7, #4]
 80070c0:	2300      	movs	r3, #0
 80070c2:	60fb      	str	r3, [r7, #12]
 80070c4:	2300      	movs	r3, #0
 80070c6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80070c8:	2300      	movs	r3, #0
 80070ca:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070cc:	4b67      	ldr	r3, [pc, #412]	; (800726c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	f003 030c 	and.w	r3, r3, #12
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	d00d      	beq.n	80070f4 <HAL_RCC_GetSysClockFreq+0x40>
 80070d8:	2b08      	cmp	r3, #8
 80070da:	f200 80bd 	bhi.w	8007258 <HAL_RCC_GetSysClockFreq+0x1a4>
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d002      	beq.n	80070e8 <HAL_RCC_GetSysClockFreq+0x34>
 80070e2:	2b04      	cmp	r3, #4
 80070e4:	d003      	beq.n	80070ee <HAL_RCC_GetSysClockFreq+0x3a>
 80070e6:	e0b7      	b.n	8007258 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80070e8:	4b61      	ldr	r3, [pc, #388]	; (8007270 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80070ea:	60bb      	str	r3, [r7, #8]
      break;
 80070ec:	e0b7      	b.n	800725e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80070ee:	4b61      	ldr	r3, [pc, #388]	; (8007274 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80070f0:	60bb      	str	r3, [r7, #8]
      break;
 80070f2:	e0b4      	b.n	800725e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070f4:	4b5d      	ldr	r3, [pc, #372]	; (800726c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070fc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80070fe:	4b5b      	ldr	r3, [pc, #364]	; (800726c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d04d      	beq.n	80071a6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800710a:	4b58      	ldr	r3, [pc, #352]	; (800726c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	099b      	lsrs	r3, r3, #6
 8007110:	461a      	mov	r2, r3
 8007112:	f04f 0300 	mov.w	r3, #0
 8007116:	f240 10ff 	movw	r0, #511	; 0x1ff
 800711a:	f04f 0100 	mov.w	r1, #0
 800711e:	ea02 0800 	and.w	r8, r2, r0
 8007122:	ea03 0901 	and.w	r9, r3, r1
 8007126:	4640      	mov	r0, r8
 8007128:	4649      	mov	r1, r9
 800712a:	f04f 0200 	mov.w	r2, #0
 800712e:	f04f 0300 	mov.w	r3, #0
 8007132:	014b      	lsls	r3, r1, #5
 8007134:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007138:	0142      	lsls	r2, r0, #5
 800713a:	4610      	mov	r0, r2
 800713c:	4619      	mov	r1, r3
 800713e:	ebb0 0008 	subs.w	r0, r0, r8
 8007142:	eb61 0109 	sbc.w	r1, r1, r9
 8007146:	f04f 0200 	mov.w	r2, #0
 800714a:	f04f 0300 	mov.w	r3, #0
 800714e:	018b      	lsls	r3, r1, #6
 8007150:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007154:	0182      	lsls	r2, r0, #6
 8007156:	1a12      	subs	r2, r2, r0
 8007158:	eb63 0301 	sbc.w	r3, r3, r1
 800715c:	f04f 0000 	mov.w	r0, #0
 8007160:	f04f 0100 	mov.w	r1, #0
 8007164:	00d9      	lsls	r1, r3, #3
 8007166:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800716a:	00d0      	lsls	r0, r2, #3
 800716c:	4602      	mov	r2, r0
 800716e:	460b      	mov	r3, r1
 8007170:	eb12 0208 	adds.w	r2, r2, r8
 8007174:	eb43 0309 	adc.w	r3, r3, r9
 8007178:	f04f 0000 	mov.w	r0, #0
 800717c:	f04f 0100 	mov.w	r1, #0
 8007180:	0259      	lsls	r1, r3, #9
 8007182:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007186:	0250      	lsls	r0, r2, #9
 8007188:	4602      	mov	r2, r0
 800718a:	460b      	mov	r3, r1
 800718c:	4610      	mov	r0, r2
 800718e:	4619      	mov	r1, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	461a      	mov	r2, r3
 8007194:	f04f 0300 	mov.w	r3, #0
 8007198:	f7f9 f8ba 	bl	8000310 <__aeabi_uldivmod>
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	4613      	mov	r3, r2
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	e04a      	b.n	800723c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071a6:	4b31      	ldr	r3, [pc, #196]	; (800726c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	099b      	lsrs	r3, r3, #6
 80071ac:	461a      	mov	r2, r3
 80071ae:	f04f 0300 	mov.w	r3, #0
 80071b2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80071b6:	f04f 0100 	mov.w	r1, #0
 80071ba:	ea02 0400 	and.w	r4, r2, r0
 80071be:	ea03 0501 	and.w	r5, r3, r1
 80071c2:	4620      	mov	r0, r4
 80071c4:	4629      	mov	r1, r5
 80071c6:	f04f 0200 	mov.w	r2, #0
 80071ca:	f04f 0300 	mov.w	r3, #0
 80071ce:	014b      	lsls	r3, r1, #5
 80071d0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80071d4:	0142      	lsls	r2, r0, #5
 80071d6:	4610      	mov	r0, r2
 80071d8:	4619      	mov	r1, r3
 80071da:	1b00      	subs	r0, r0, r4
 80071dc:	eb61 0105 	sbc.w	r1, r1, r5
 80071e0:	f04f 0200 	mov.w	r2, #0
 80071e4:	f04f 0300 	mov.w	r3, #0
 80071e8:	018b      	lsls	r3, r1, #6
 80071ea:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80071ee:	0182      	lsls	r2, r0, #6
 80071f0:	1a12      	subs	r2, r2, r0
 80071f2:	eb63 0301 	sbc.w	r3, r3, r1
 80071f6:	f04f 0000 	mov.w	r0, #0
 80071fa:	f04f 0100 	mov.w	r1, #0
 80071fe:	00d9      	lsls	r1, r3, #3
 8007200:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007204:	00d0      	lsls	r0, r2, #3
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	1912      	adds	r2, r2, r4
 800720c:	eb45 0303 	adc.w	r3, r5, r3
 8007210:	f04f 0000 	mov.w	r0, #0
 8007214:	f04f 0100 	mov.w	r1, #0
 8007218:	0299      	lsls	r1, r3, #10
 800721a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800721e:	0290      	lsls	r0, r2, #10
 8007220:	4602      	mov	r2, r0
 8007222:	460b      	mov	r3, r1
 8007224:	4610      	mov	r0, r2
 8007226:	4619      	mov	r1, r3
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	461a      	mov	r2, r3
 800722c:	f04f 0300 	mov.w	r3, #0
 8007230:	f7f9 f86e 	bl	8000310 <__aeabi_uldivmod>
 8007234:	4602      	mov	r2, r0
 8007236:	460b      	mov	r3, r1
 8007238:	4613      	mov	r3, r2
 800723a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800723c:	4b0b      	ldr	r3, [pc, #44]	; (800726c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	0c1b      	lsrs	r3, r3, #16
 8007242:	f003 0303 	and.w	r3, r3, #3
 8007246:	3301      	adds	r3, #1
 8007248:	005b      	lsls	r3, r3, #1
 800724a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	fbb2 f3f3 	udiv	r3, r2, r3
 8007254:	60bb      	str	r3, [r7, #8]
      break;
 8007256:	e002      	b.n	800725e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007258:	4b05      	ldr	r3, [pc, #20]	; (8007270 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800725a:	60bb      	str	r3, [r7, #8]
      break;
 800725c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800725e:	68bb      	ldr	r3, [r7, #8]
}
 8007260:	4618      	mov	r0, r3
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800726a:	bf00      	nop
 800726c:	40023800 	.word	0x40023800
 8007270:	00f42400 	.word	0x00f42400
 8007274:	007a1200 	.word	0x007a1200

08007278 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007278:	b480      	push	{r7}
 800727a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800727c:	4b03      	ldr	r3, [pc, #12]	; (800728c <HAL_RCC_GetHCLKFreq+0x14>)
 800727e:	681b      	ldr	r3, [r3, #0]
}
 8007280:	4618      	mov	r0, r3
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	20000700 	.word	0x20000700

08007290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007294:	f7ff fff0 	bl	8007278 <HAL_RCC_GetHCLKFreq>
 8007298:	4602      	mov	r2, r0
 800729a:	4b05      	ldr	r3, [pc, #20]	; (80072b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	0a9b      	lsrs	r3, r3, #10
 80072a0:	f003 0307 	and.w	r3, r3, #7
 80072a4:	4903      	ldr	r1, [pc, #12]	; (80072b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072a6:	5ccb      	ldrb	r3, [r1, r3]
 80072a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	40023800 	.word	0x40023800
 80072b4:	08027040 	.word	0x08027040

080072b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80072bc:	f7ff ffdc 	bl	8007278 <HAL_RCC_GetHCLKFreq>
 80072c0:	4602      	mov	r2, r0
 80072c2:	4b05      	ldr	r3, [pc, #20]	; (80072d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	0b5b      	lsrs	r3, r3, #13
 80072c8:	f003 0307 	and.w	r3, r3, #7
 80072cc:	4903      	ldr	r1, [pc, #12]	; (80072dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80072ce:	5ccb      	ldrb	r3, [r1, r3]
 80072d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	40023800 	.word	0x40023800
 80072dc:	08027040 	.word	0x08027040

080072e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	220f      	movs	r2, #15
 80072ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80072f0:	4b12      	ldr	r3, [pc, #72]	; (800733c <HAL_RCC_GetClockConfig+0x5c>)
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	f003 0203 	and.w	r2, r3, #3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80072fc:	4b0f      	ldr	r3, [pc, #60]	; (800733c <HAL_RCC_GetClockConfig+0x5c>)
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007308:	4b0c      	ldr	r3, [pc, #48]	; (800733c <HAL_RCC_GetClockConfig+0x5c>)
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007314:	4b09      	ldr	r3, [pc, #36]	; (800733c <HAL_RCC_GetClockConfig+0x5c>)
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	08db      	lsrs	r3, r3, #3
 800731a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007322:	4b07      	ldr	r3, [pc, #28]	; (8007340 <HAL_RCC_GetClockConfig+0x60>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f003 020f 	and.w	r2, r3, #15
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	601a      	str	r2, [r3, #0]
}
 800732e:	bf00      	nop
 8007330:	370c      	adds	r7, #12
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	40023800 	.word	0x40023800
 8007340:	40023c00 	.word	0x40023c00

08007344 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b088      	sub	sp, #32
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800734c:	2300      	movs	r3, #0
 800734e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007350:	2300      	movs	r3, #0
 8007352:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007354:	2300      	movs	r3, #0
 8007356:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007358:	2300      	movs	r3, #0
 800735a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800735c:	2300      	movs	r3, #0
 800735e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0301 	and.w	r3, r3, #1
 8007368:	2b00      	cmp	r3, #0
 800736a:	d012      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800736c:	4b69      	ldr	r3, [pc, #420]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	4a68      	ldr	r2, [pc, #416]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007372:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007376:	6093      	str	r3, [r2, #8]
 8007378:	4b66      	ldr	r3, [pc, #408]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800737a:	689a      	ldr	r2, [r3, #8]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007380:	4964      	ldr	r1, [pc, #400]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007382:	4313      	orrs	r3, r2
 8007384:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800738a:	2b00      	cmp	r3, #0
 800738c:	d101      	bne.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800738e:	2301      	movs	r3, #1
 8007390:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d017      	beq.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800739e:	4b5d      	ldr	r3, [pc, #372]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ac:	4959      	ldr	r1, [pc, #356]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ae:	4313      	orrs	r3, r2
 80073b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073bc:	d101      	bne.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80073be:	2301      	movs	r3, #1
 80073c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d101      	bne.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80073ca:	2301      	movs	r3, #1
 80073cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d017      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80073da:	4b4e      	ldr	r3, [pc, #312]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e8:	494a      	ldr	r1, [pc, #296]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ea:	4313      	orrs	r3, r2
 80073ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073f8:	d101      	bne.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80073fa:	2301      	movs	r3, #1
 80073fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007402:	2b00      	cmp	r3, #0
 8007404:	d101      	bne.n	800740a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007406:	2301      	movs	r3, #1
 8007408:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d001      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007416:	2301      	movs	r3, #1
 8007418:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0320 	and.w	r3, r3, #32
 8007422:	2b00      	cmp	r3, #0
 8007424:	f000 808b 	beq.w	800753e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007428:	4b3a      	ldr	r3, [pc, #232]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800742a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742c:	4a39      	ldr	r2, [pc, #228]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800742e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007432:	6413      	str	r3, [r2, #64]	; 0x40
 8007434:	4b37      	ldr	r3, [pc, #220]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800743c:	60bb      	str	r3, [r7, #8]
 800743e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007440:	4b35      	ldr	r3, [pc, #212]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a34      	ldr	r2, [pc, #208]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800744a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800744c:	f7fc f9a6 	bl	800379c <HAL_GetTick>
 8007450:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007452:	e008      	b.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007454:	f7fc f9a2 	bl	800379c <HAL_GetTick>
 8007458:	4602      	mov	r2, r0
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	2b64      	cmp	r3, #100	; 0x64
 8007460:	d901      	bls.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e38f      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007466:	4b2c      	ldr	r3, [pc, #176]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800746e:	2b00      	cmp	r3, #0
 8007470:	d0f0      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007472:	4b28      	ldr	r3, [pc, #160]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800747a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d035      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	429a      	cmp	r2, r3
 800748e:	d02e      	beq.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007490:	4b20      	ldr	r3, [pc, #128]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007498:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800749a:	4b1e      	ldr	r3, [pc, #120]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800749c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800749e:	4a1d      	ldr	r2, [pc, #116]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074a4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80074a6:	4b1b      	ldr	r3, [pc, #108]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074aa:	4a1a      	ldr	r2, [pc, #104]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80074b2:	4a18      	ldr	r2, [pc, #96]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80074b8:	4b16      	ldr	r3, [pc, #88]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074bc:	f003 0301 	and.w	r3, r3, #1
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d114      	bne.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074c4:	f7fc f96a 	bl	800379c <HAL_GetTick>
 80074c8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074ca:	e00a      	b.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074cc:	f7fc f966 	bl	800379c <HAL_GetTick>
 80074d0:	4602      	mov	r2, r0
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074da:	4293      	cmp	r3, r2
 80074dc:	d901      	bls.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	e351      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074e2:	4b0c      	ldr	r3, [pc, #48]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e6:	f003 0302 	and.w	r3, r3, #2
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d0ee      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074fa:	d111      	bne.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80074fc:	4b05      	ldr	r3, [pc, #20]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007508:	4b04      	ldr	r3, [pc, #16]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800750a:	400b      	ands	r3, r1
 800750c:	4901      	ldr	r1, [pc, #4]	; (8007514 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800750e:	4313      	orrs	r3, r2
 8007510:	608b      	str	r3, [r1, #8]
 8007512:	e00b      	b.n	800752c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007514:	40023800 	.word	0x40023800
 8007518:	40007000 	.word	0x40007000
 800751c:	0ffffcff 	.word	0x0ffffcff
 8007520:	4bb3      	ldr	r3, [pc, #716]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	4ab2      	ldr	r2, [pc, #712]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007526:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800752a:	6093      	str	r3, [r2, #8]
 800752c:	4bb0      	ldr	r3, [pc, #704]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800752e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007538:	49ad      	ldr	r1, [pc, #692]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800753a:	4313      	orrs	r3, r2
 800753c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 0310 	and.w	r3, r3, #16
 8007546:	2b00      	cmp	r3, #0
 8007548:	d010      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800754a:	4ba9      	ldr	r3, [pc, #676]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800754c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007550:	4aa7      	ldr	r2, [pc, #668]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007552:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007556:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800755a:	4ba5      	ldr	r3, [pc, #660]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800755c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007564:	49a2      	ldr	r1, [pc, #648]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007566:	4313      	orrs	r3, r2
 8007568:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00a      	beq.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007578:	4b9d      	ldr	r3, [pc, #628]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800757a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800757e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007586:	499a      	ldr	r1, [pc, #616]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007588:	4313      	orrs	r3, r2
 800758a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00a      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800759a:	4b95      	ldr	r3, [pc, #596]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800759c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075a8:	4991      	ldr	r1, [pc, #580]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80075aa:	4313      	orrs	r3, r2
 80075ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00a      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80075bc:	4b8c      	ldr	r3, [pc, #560]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80075be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075ca:	4989      	ldr	r1, [pc, #548]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80075cc:	4313      	orrs	r3, r2
 80075ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00a      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80075de:	4b84      	ldr	r3, [pc, #528]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80075e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ec:	4980      	ldr	r1, [pc, #512]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80075ee:	4313      	orrs	r3, r2
 80075f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00a      	beq.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007600:	4b7b      	ldr	r3, [pc, #492]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007606:	f023 0203 	bic.w	r2, r3, #3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800760e:	4978      	ldr	r1, [pc, #480]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007610:	4313      	orrs	r3, r2
 8007612:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00a      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007622:	4b73      	ldr	r3, [pc, #460]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007628:	f023 020c 	bic.w	r2, r3, #12
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007630:	496f      	ldr	r1, [pc, #444]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007632:	4313      	orrs	r3, r2
 8007634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00a      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007644:	4b6a      	ldr	r3, [pc, #424]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800764a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007652:	4967      	ldr	r1, [pc, #412]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007654:	4313      	orrs	r3, r2
 8007656:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00a      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007666:	4b62      	ldr	r3, [pc, #392]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800766c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007674:	495e      	ldr	r1, [pc, #376]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007676:	4313      	orrs	r3, r2
 8007678:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00a      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007688:	4b59      	ldr	r3, [pc, #356]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800768a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800768e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007696:	4956      	ldr	r1, [pc, #344]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007698:	4313      	orrs	r3, r2
 800769a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00a      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80076aa:	4b51      	ldr	r3, [pc, #324]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80076ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076b8:	494d      	ldr	r1, [pc, #308]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00a      	beq.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80076cc:	4b48      	ldr	r3, [pc, #288]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80076ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076da:	4945      	ldr	r1, [pc, #276]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80076dc:	4313      	orrs	r3, r2
 80076de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00a      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80076ee:	4b40      	ldr	r3, [pc, #256]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80076f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076fc:	493c      	ldr	r1, [pc, #240]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80076fe:	4313      	orrs	r3, r2
 8007700:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00a      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007710:	4b37      	ldr	r3, [pc, #220]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007716:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800771e:	4934      	ldr	r1, [pc, #208]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007720:	4313      	orrs	r3, r2
 8007722:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d011      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007732:	4b2f      	ldr	r3, [pc, #188]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007738:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007740:	492b      	ldr	r1, [pc, #172]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007742:	4313      	orrs	r3, r2
 8007744:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800774c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007750:	d101      	bne.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007752:	2301      	movs	r3, #1
 8007754:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0308 	and.w	r3, r3, #8
 800775e:	2b00      	cmp	r3, #0
 8007760:	d001      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007762:	2301      	movs	r3, #1
 8007764:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00a      	beq.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007772:	4b1f      	ldr	r3, [pc, #124]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007778:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007780:	491b      	ldr	r1, [pc, #108]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007782:	4313      	orrs	r3, r2
 8007784:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00b      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007794:	4b16      	ldr	r3, [pc, #88]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8007796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800779a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077a4:	4912      	ldr	r1, [pc, #72]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80077a6:	4313      	orrs	r3, r2
 80077a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00b      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80077b8:	4b0d      	ldr	r3, [pc, #52]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80077ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077be:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077c8:	4909      	ldr	r1, [pc, #36]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80077ca:	4313      	orrs	r3, r2
 80077cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00f      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80077dc:	4b04      	ldr	r3, [pc, #16]	; (80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80077de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077e2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ec:	e002      	b.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80077ee:	bf00      	nop
 80077f0:	40023800 	.word	0x40023800
 80077f4:	4986      	ldr	r1, [pc, #536]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80077f6:	4313      	orrs	r3, r2
 80077f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00b      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007808:	4b81      	ldr	r3, [pc, #516]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800780a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800780e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007818:	497d      	ldr	r1, [pc, #500]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800781a:	4313      	orrs	r3, r2
 800781c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	2b01      	cmp	r3, #1
 8007824:	d006      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800782e:	2b00      	cmp	r3, #0
 8007830:	f000 80d6 	beq.w	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007834:	4b76      	ldr	r3, [pc, #472]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a75      	ldr	r2, [pc, #468]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800783a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800783e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007840:	f7fb ffac 	bl	800379c <HAL_GetTick>
 8007844:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007846:	e008      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007848:	f7fb ffa8 	bl	800379c <HAL_GetTick>
 800784c:	4602      	mov	r2, r0
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	2b64      	cmp	r3, #100	; 0x64
 8007854:	d901      	bls.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e195      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800785a:	4b6d      	ldr	r3, [pc, #436]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007862:	2b00      	cmp	r3, #0
 8007864:	d1f0      	bne.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0301 	and.w	r3, r3, #1
 800786e:	2b00      	cmp	r3, #0
 8007870:	d021      	beq.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007876:	2b00      	cmp	r3, #0
 8007878:	d11d      	bne.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800787a:	4b65      	ldr	r3, [pc, #404]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800787c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007880:	0c1b      	lsrs	r3, r3, #16
 8007882:	f003 0303 	and.w	r3, r3, #3
 8007886:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007888:	4b61      	ldr	r3, [pc, #388]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800788a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800788e:	0e1b      	lsrs	r3, r3, #24
 8007890:	f003 030f 	and.w	r3, r3, #15
 8007894:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	019a      	lsls	r2, r3, #6
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	041b      	lsls	r3, r3, #16
 80078a0:	431a      	orrs	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	061b      	lsls	r3, r3, #24
 80078a6:	431a      	orrs	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	071b      	lsls	r3, r3, #28
 80078ae:	4958      	ldr	r1, [pc, #352]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80078b0:	4313      	orrs	r3, r2
 80078b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d004      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078ca:	d00a      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d02e      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078e0:	d129      	bne.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80078e2:	4b4b      	ldr	r3, [pc, #300]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80078e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078e8:	0c1b      	lsrs	r3, r3, #16
 80078ea:	f003 0303 	and.w	r3, r3, #3
 80078ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80078f0:	4b47      	ldr	r3, [pc, #284]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80078f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078f6:	0f1b      	lsrs	r3, r3, #28
 80078f8:	f003 0307 	and.w	r3, r3, #7
 80078fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	019a      	lsls	r2, r3, #6
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	041b      	lsls	r3, r3, #16
 8007908:	431a      	orrs	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	061b      	lsls	r3, r3, #24
 8007910:	431a      	orrs	r2, r3
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	071b      	lsls	r3, r3, #28
 8007916:	493e      	ldr	r1, [pc, #248]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007918:	4313      	orrs	r3, r2
 800791a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800791e:	4b3c      	ldr	r3, [pc, #240]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007924:	f023 021f 	bic.w	r2, r3, #31
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792c:	3b01      	subs	r3, #1
 800792e:	4938      	ldr	r1, [pc, #224]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007930:	4313      	orrs	r3, r2
 8007932:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800793e:	2b00      	cmp	r3, #0
 8007940:	d01d      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007942:	4b33      	ldr	r3, [pc, #204]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007948:	0e1b      	lsrs	r3, r3, #24
 800794a:	f003 030f 	and.w	r3, r3, #15
 800794e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007950:	4b2f      	ldr	r3, [pc, #188]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007956:	0f1b      	lsrs	r3, r3, #28
 8007958:	f003 0307 	and.w	r3, r3, #7
 800795c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	019a      	lsls	r2, r3, #6
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	041b      	lsls	r3, r3, #16
 800796a:	431a      	orrs	r2, r3
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	061b      	lsls	r3, r3, #24
 8007970:	431a      	orrs	r2, r3
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	071b      	lsls	r3, r3, #28
 8007976:	4926      	ldr	r1, [pc, #152]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007978:	4313      	orrs	r3, r2
 800797a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007986:	2b00      	cmp	r3, #0
 8007988:	d011      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	019a      	lsls	r2, r3, #6
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	691b      	ldr	r3, [r3, #16]
 8007994:	041b      	lsls	r3, r3, #16
 8007996:	431a      	orrs	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	061b      	lsls	r3, r3, #24
 800799e:	431a      	orrs	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	071b      	lsls	r3, r3, #28
 80079a6:	491a      	ldr	r1, [pc, #104]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079a8:	4313      	orrs	r3, r2
 80079aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80079ae:	4b18      	ldr	r3, [pc, #96]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a17      	ldr	r2, [pc, #92]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80079b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079ba:	f7fb feef 	bl	800379c <HAL_GetTick>
 80079be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80079c0:	e008      	b.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80079c2:	f7fb feeb 	bl	800379c <HAL_GetTick>
 80079c6:	4602      	mov	r2, r0
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	1ad3      	subs	r3, r2, r3
 80079cc:	2b64      	cmp	r3, #100	; 0x64
 80079ce:	d901      	bls.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079d0:	2303      	movs	r3, #3
 80079d2:	e0d8      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80079d4:	4b0e      	ldr	r3, [pc, #56]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d0f0      	beq.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	f040 80ce 	bne.w	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80079e8:	4b09      	ldr	r3, [pc, #36]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a08      	ldr	r2, [pc, #32]	; (8007a10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079f4:	f7fb fed2 	bl	800379c <HAL_GetTick>
 80079f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80079fa:	e00b      	b.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80079fc:	f7fb fece 	bl	800379c <HAL_GetTick>
 8007a00:	4602      	mov	r2, r0
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	2b64      	cmp	r3, #100	; 0x64
 8007a08:	d904      	bls.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e0bb      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007a0e:	bf00      	nop
 8007a10:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007a14:	4b5e      	ldr	r3, [pc, #376]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a20:	d0ec      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d003      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d009      	beq.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d02e      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d12a      	bne.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007a4a:	4b51      	ldr	r3, [pc, #324]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a50:	0c1b      	lsrs	r3, r3, #16
 8007a52:	f003 0303 	and.w	r3, r3, #3
 8007a56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007a58:	4b4d      	ldr	r3, [pc, #308]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a5e:	0f1b      	lsrs	r3, r3, #28
 8007a60:	f003 0307 	and.w	r3, r3, #7
 8007a64:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	019a      	lsls	r2, r3, #6
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	041b      	lsls	r3, r3, #16
 8007a70:	431a      	orrs	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	061b      	lsls	r3, r3, #24
 8007a78:	431a      	orrs	r2, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	071b      	lsls	r3, r3, #28
 8007a7e:	4944      	ldr	r1, [pc, #272]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007a80:	4313      	orrs	r3, r2
 8007a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007a86:	4b42      	ldr	r3, [pc, #264]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a8c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a94:	3b01      	subs	r3, #1
 8007a96:	021b      	lsls	r3, r3, #8
 8007a98:	493d      	ldr	r1, [pc, #244]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d022      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ab0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ab4:	d11d      	bne.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007ab6:	4b36      	ldr	r3, [pc, #216]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007abc:	0e1b      	lsrs	r3, r3, #24
 8007abe:	f003 030f 	and.w	r3, r3, #15
 8007ac2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007ac4:	4b32      	ldr	r3, [pc, #200]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aca:	0f1b      	lsrs	r3, r3, #28
 8007acc:	f003 0307 	and.w	r3, r3, #7
 8007ad0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	019a      	lsls	r2, r3, #6
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6a1b      	ldr	r3, [r3, #32]
 8007adc:	041b      	lsls	r3, r3, #16
 8007ade:	431a      	orrs	r2, r3
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	061b      	lsls	r3, r3, #24
 8007ae4:	431a      	orrs	r2, r3
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	071b      	lsls	r3, r3, #28
 8007aea:	4929      	ldr	r1, [pc, #164]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007aec:	4313      	orrs	r3, r2
 8007aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0308 	and.w	r3, r3, #8
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d028      	beq.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007afe:	4b24      	ldr	r3, [pc, #144]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b04:	0e1b      	lsrs	r3, r3, #24
 8007b06:	f003 030f 	and.w	r3, r3, #15
 8007b0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007b0c:	4b20      	ldr	r3, [pc, #128]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b12:	0c1b      	lsrs	r3, r3, #16
 8007b14:	f003 0303 	and.w	r3, r3, #3
 8007b18:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	019a      	lsls	r2, r3, #6
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	041b      	lsls	r3, r3, #16
 8007b24:	431a      	orrs	r2, r3
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	061b      	lsls	r3, r3, #24
 8007b2a:	431a      	orrs	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	69db      	ldr	r3, [r3, #28]
 8007b30:	071b      	lsls	r3, r3, #28
 8007b32:	4917      	ldr	r1, [pc, #92]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b34:	4313      	orrs	r3, r2
 8007b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007b3a:	4b15      	ldr	r3, [pc, #84]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b48:	4911      	ldr	r1, [pc, #68]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007b50:	4b0f      	ldr	r3, [pc, #60]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a0e      	ldr	r2, [pc, #56]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b5c:	f7fb fe1e 	bl	800379c <HAL_GetTick>
 8007b60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007b62:	e008      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007b64:	f7fb fe1a 	bl	800379c <HAL_GetTick>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	2b64      	cmp	r3, #100	; 0x64
 8007b70:	d901      	bls.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b72:	2303      	movs	r3, #3
 8007b74:	e007      	b.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007b76:	4b06      	ldr	r3, [pc, #24]	; (8007b90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b82:	d1ef      	bne.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3720      	adds	r7, #32
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	40023800 	.word	0x40023800

08007b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d101      	bne.n	8007ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e049      	b.n	8007c3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d106      	bne.n	8007bc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f841 	bl	8007c42 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2202      	movs	r2, #2
 8007bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	3304      	adds	r3, #4
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	4610      	mov	r0, r2
 8007bd4:	f000 fa00 	bl	8007fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2201      	movs	r2, #1
 8007bec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2201      	movs	r2, #1
 8007c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3708      	adds	r7, #8
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007c42:	b480      	push	{r7}
 8007c44:	b083      	sub	sp, #12
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007c4a:	bf00      	nop
 8007c4c:	370c      	adds	r7, #12
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr
	...

08007c58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d001      	beq.n	8007c70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e054      	b.n	8007d1a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2202      	movs	r2, #2
 8007c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68da      	ldr	r2, [r3, #12]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f042 0201 	orr.w	r2, r2, #1
 8007c86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a26      	ldr	r2, [pc, #152]	; (8007d28 <HAL_TIM_Base_Start_IT+0xd0>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d022      	beq.n	8007cd8 <HAL_TIM_Base_Start_IT+0x80>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c9a:	d01d      	beq.n	8007cd8 <HAL_TIM_Base_Start_IT+0x80>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a22      	ldr	r2, [pc, #136]	; (8007d2c <HAL_TIM_Base_Start_IT+0xd4>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d018      	beq.n	8007cd8 <HAL_TIM_Base_Start_IT+0x80>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a21      	ldr	r2, [pc, #132]	; (8007d30 <HAL_TIM_Base_Start_IT+0xd8>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d013      	beq.n	8007cd8 <HAL_TIM_Base_Start_IT+0x80>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a1f      	ldr	r2, [pc, #124]	; (8007d34 <HAL_TIM_Base_Start_IT+0xdc>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d00e      	beq.n	8007cd8 <HAL_TIM_Base_Start_IT+0x80>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a1e      	ldr	r2, [pc, #120]	; (8007d38 <HAL_TIM_Base_Start_IT+0xe0>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d009      	beq.n	8007cd8 <HAL_TIM_Base_Start_IT+0x80>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a1c      	ldr	r2, [pc, #112]	; (8007d3c <HAL_TIM_Base_Start_IT+0xe4>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d004      	beq.n	8007cd8 <HAL_TIM_Base_Start_IT+0x80>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a1b      	ldr	r2, [pc, #108]	; (8007d40 <HAL_TIM_Base_Start_IT+0xe8>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d115      	bne.n	8007d04 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	689a      	ldr	r2, [r3, #8]
 8007cde:	4b19      	ldr	r3, [pc, #100]	; (8007d44 <HAL_TIM_Base_Start_IT+0xec>)
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2b06      	cmp	r3, #6
 8007ce8:	d015      	beq.n	8007d16 <HAL_TIM_Base_Start_IT+0xbe>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cf0:	d011      	beq.n	8007d16 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f042 0201 	orr.w	r2, r2, #1
 8007d00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d02:	e008      	b.n	8007d16 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f042 0201 	orr.w	r2, r2, #1
 8007d12:	601a      	str	r2, [r3, #0]
 8007d14:	e000      	b.n	8007d18 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	40010000 	.word	0x40010000
 8007d2c:	40000400 	.word	0x40000400
 8007d30:	40000800 	.word	0x40000800
 8007d34:	40000c00 	.word	0x40000c00
 8007d38:	40010400 	.word	0x40010400
 8007d3c:	40014000 	.word	0x40014000
 8007d40:	40001800 	.word	0x40001800
 8007d44:	00010007 	.word	0x00010007

08007d48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	f003 0302 	and.w	r3, r3, #2
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d122      	bne.n	8007da4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	f003 0302 	and.w	r3, r3, #2
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d11b      	bne.n	8007da4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f06f 0202 	mvn.w	r2, #2
 8007d74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	f003 0303 	and.w	r3, r3, #3
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d003      	beq.n	8007d92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f905 	bl	8007f9a <HAL_TIM_IC_CaptureCallback>
 8007d90:	e005      	b.n	8007d9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 f8f7 	bl	8007f86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 f908 	bl	8007fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	f003 0304 	and.w	r3, r3, #4
 8007dae:	2b04      	cmp	r3, #4
 8007db0:	d122      	bne.n	8007df8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	f003 0304 	and.w	r3, r3, #4
 8007dbc:	2b04      	cmp	r3, #4
 8007dbe:	d11b      	bne.n	8007df8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f06f 0204 	mvn.w	r2, #4
 8007dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2202      	movs	r2, #2
 8007dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	699b      	ldr	r3, [r3, #24]
 8007dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d003      	beq.n	8007de6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f8db 	bl	8007f9a <HAL_TIM_IC_CaptureCallback>
 8007de4:	e005      	b.n	8007df2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 f8cd 	bl	8007f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f8de 	bl	8007fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	f003 0308 	and.w	r3, r3, #8
 8007e02:	2b08      	cmp	r3, #8
 8007e04:	d122      	bne.n	8007e4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	f003 0308 	and.w	r3, r3, #8
 8007e10:	2b08      	cmp	r3, #8
 8007e12:	d11b      	bne.n	8007e4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f06f 0208 	mvn.w	r2, #8
 8007e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2204      	movs	r2, #4
 8007e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	f003 0303 	and.w	r3, r3, #3
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d003      	beq.n	8007e3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 f8b1 	bl	8007f9a <HAL_TIM_IC_CaptureCallback>
 8007e38:	e005      	b.n	8007e46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f8a3 	bl	8007f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 f8b4 	bl	8007fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	f003 0310 	and.w	r3, r3, #16
 8007e56:	2b10      	cmp	r3, #16
 8007e58:	d122      	bne.n	8007ea0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	f003 0310 	and.w	r3, r3, #16
 8007e64:	2b10      	cmp	r3, #16
 8007e66:	d11b      	bne.n	8007ea0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f06f 0210 	mvn.w	r2, #16
 8007e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2208      	movs	r2, #8
 8007e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	69db      	ldr	r3, [r3, #28]
 8007e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d003      	beq.n	8007e8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f887 	bl	8007f9a <HAL_TIM_IC_CaptureCallback>
 8007e8c:	e005      	b.n	8007e9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f879 	bl	8007f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f88a 	bl	8007fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	f003 0301 	and.w	r3, r3, #1
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d10e      	bne.n	8007ecc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	f003 0301 	and.w	r3, r3, #1
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d107      	bne.n	8007ecc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f06f 0201 	mvn.w	r2, #1
 8007ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f7fa fa34 	bl	8002334 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ed6:	2b80      	cmp	r3, #128	; 0x80
 8007ed8:	d10e      	bne.n	8007ef8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ee4:	2b80      	cmp	r3, #128	; 0x80
 8007ee6:	d107      	bne.n	8007ef8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f91a 	bl	800812c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	691b      	ldr	r3, [r3, #16]
 8007efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f06:	d10e      	bne.n	8007f26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f12:	2b80      	cmp	r3, #128	; 0x80
 8007f14:	d107      	bne.n	8007f26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f90d 	bl	8008140 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f30:	2b40      	cmp	r3, #64	; 0x40
 8007f32:	d10e      	bne.n	8007f52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f3e:	2b40      	cmp	r3, #64	; 0x40
 8007f40:	d107      	bne.n	8007f52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 f838 	bl	8007fc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	f003 0320 	and.w	r3, r3, #32
 8007f5c:	2b20      	cmp	r3, #32
 8007f5e:	d10e      	bne.n	8007f7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	f003 0320 	and.w	r3, r3, #32
 8007f6a:	2b20      	cmp	r3, #32
 8007f6c:	d107      	bne.n	8007f7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f06f 0220 	mvn.w	r2, #32
 8007f76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f8cd 	bl	8008118 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f7e:	bf00      	nop
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f86:	b480      	push	{r7}
 8007f88:	b083      	sub	sp, #12
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f8e:	bf00      	nop
 8007f90:	370c      	adds	r7, #12
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b083      	sub	sp, #12
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007fa2:	bf00      	nop
 8007fa4:	370c      	adds	r7, #12
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr

08007fae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b083      	sub	sp, #12
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007fb6:	bf00      	nop
 8007fb8:	370c      	adds	r7, #12
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr

08007fc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007fc2:	b480      	push	{r7}
 8007fc4:	b083      	sub	sp, #12
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007fca:	bf00      	nop
 8007fcc:	370c      	adds	r7, #12
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
	...

08007fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a40      	ldr	r2, [pc, #256]	; (80080ec <TIM_Base_SetConfig+0x114>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d013      	beq.n	8008018 <TIM_Base_SetConfig+0x40>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ff6:	d00f      	beq.n	8008018 <TIM_Base_SetConfig+0x40>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a3d      	ldr	r2, [pc, #244]	; (80080f0 <TIM_Base_SetConfig+0x118>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d00b      	beq.n	8008018 <TIM_Base_SetConfig+0x40>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a3c      	ldr	r2, [pc, #240]	; (80080f4 <TIM_Base_SetConfig+0x11c>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d007      	beq.n	8008018 <TIM_Base_SetConfig+0x40>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a3b      	ldr	r2, [pc, #236]	; (80080f8 <TIM_Base_SetConfig+0x120>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d003      	beq.n	8008018 <TIM_Base_SetConfig+0x40>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a3a      	ldr	r2, [pc, #232]	; (80080fc <TIM_Base_SetConfig+0x124>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d108      	bne.n	800802a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800801e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	4313      	orrs	r3, r2
 8008028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4a2f      	ldr	r2, [pc, #188]	; (80080ec <TIM_Base_SetConfig+0x114>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d02b      	beq.n	800808a <TIM_Base_SetConfig+0xb2>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008038:	d027      	beq.n	800808a <TIM_Base_SetConfig+0xb2>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4a2c      	ldr	r2, [pc, #176]	; (80080f0 <TIM_Base_SetConfig+0x118>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d023      	beq.n	800808a <TIM_Base_SetConfig+0xb2>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a2b      	ldr	r2, [pc, #172]	; (80080f4 <TIM_Base_SetConfig+0x11c>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d01f      	beq.n	800808a <TIM_Base_SetConfig+0xb2>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4a2a      	ldr	r2, [pc, #168]	; (80080f8 <TIM_Base_SetConfig+0x120>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d01b      	beq.n	800808a <TIM_Base_SetConfig+0xb2>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	4a29      	ldr	r2, [pc, #164]	; (80080fc <TIM_Base_SetConfig+0x124>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d017      	beq.n	800808a <TIM_Base_SetConfig+0xb2>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4a28      	ldr	r2, [pc, #160]	; (8008100 <TIM_Base_SetConfig+0x128>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d013      	beq.n	800808a <TIM_Base_SetConfig+0xb2>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4a27      	ldr	r2, [pc, #156]	; (8008104 <TIM_Base_SetConfig+0x12c>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d00f      	beq.n	800808a <TIM_Base_SetConfig+0xb2>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	4a26      	ldr	r2, [pc, #152]	; (8008108 <TIM_Base_SetConfig+0x130>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d00b      	beq.n	800808a <TIM_Base_SetConfig+0xb2>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a25      	ldr	r2, [pc, #148]	; (800810c <TIM_Base_SetConfig+0x134>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d007      	beq.n	800808a <TIM_Base_SetConfig+0xb2>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4a24      	ldr	r2, [pc, #144]	; (8008110 <TIM_Base_SetConfig+0x138>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d003      	beq.n	800808a <TIM_Base_SetConfig+0xb2>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	4a23      	ldr	r2, [pc, #140]	; (8008114 <TIM_Base_SetConfig+0x13c>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d108      	bne.n	800809c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	4313      	orrs	r3, r2
 800809a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	689a      	ldr	r2, [r3, #8]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a0a      	ldr	r2, [pc, #40]	; (80080ec <TIM_Base_SetConfig+0x114>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d003      	beq.n	80080d0 <TIM_Base_SetConfig+0xf8>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4a0c      	ldr	r2, [pc, #48]	; (80080fc <TIM_Base_SetConfig+0x124>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d103      	bne.n	80080d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	691a      	ldr	r2, [r3, #16]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	615a      	str	r2, [r3, #20]
}
 80080de:	bf00      	nop
 80080e0:	3714      	adds	r7, #20
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr
 80080ea:	bf00      	nop
 80080ec:	40010000 	.word	0x40010000
 80080f0:	40000400 	.word	0x40000400
 80080f4:	40000800 	.word	0x40000800
 80080f8:	40000c00 	.word	0x40000c00
 80080fc:	40010400 	.word	0x40010400
 8008100:	40014000 	.word	0x40014000
 8008104:	40014400 	.word	0x40014400
 8008108:	40014800 	.word	0x40014800
 800810c:	40001800 	.word	0x40001800
 8008110:	40001c00 	.word	0x40001c00
 8008114:	40002000 	.word	0x40002000

08008118 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008148:	bf00      	nop
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d101      	bne.n	8008166 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	e040      	b.n	80081e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800816a:	2b00      	cmp	r3, #0
 800816c:	d106      	bne.n	800817c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f7fa f91c 	bl	80023b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2224      	movs	r2, #36	; 0x24
 8008180:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f022 0201 	bic.w	r2, r2, #1
 8008190:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 f8c0 	bl	8008318 <UART_SetConfig>
 8008198:	4603      	mov	r3, r0
 800819a:	2b01      	cmp	r3, #1
 800819c:	d101      	bne.n	80081a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	e022      	b.n	80081e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d002      	beq.n	80081b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fb16 	bl	80087dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	685a      	ldr	r2, [r3, #4]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	689a      	ldr	r2, [r3, #8]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f042 0201 	orr.w	r2, r2, #1
 80081de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fb9d 	bl	8008920 <UART_CheckIdleState>
 80081e6:	4603      	mov	r3, r0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b08a      	sub	sp, #40	; 0x28
 80081f4:	af02      	add	r7, sp, #8
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	603b      	str	r3, [r7, #0]
 80081fc:	4613      	mov	r3, r2
 80081fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008204:	2b20      	cmp	r3, #32
 8008206:	f040 8081 	bne.w	800830c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d002      	beq.n	8008216 <HAL_UART_Transmit+0x26>
 8008210:	88fb      	ldrh	r3, [r7, #6]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d101      	bne.n	800821a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e079      	b.n	800830e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008220:	2b01      	cmp	r3, #1
 8008222:	d101      	bne.n	8008228 <HAL_UART_Transmit+0x38>
 8008224:	2302      	movs	r3, #2
 8008226:	e072      	b.n	800830e <HAL_UART_Transmit+0x11e>
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2200      	movs	r2, #0
 8008234:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	2221      	movs	r2, #33	; 0x21
 800823c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800823e:	f7fb faad 	bl	800379c <HAL_GetTick>
 8008242:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	88fa      	ldrh	r2, [r7, #6]
 8008248:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	88fa      	ldrh	r2, [r7, #6]
 8008250:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800825c:	d108      	bne.n	8008270 <HAL_UART_Transmit+0x80>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d104      	bne.n	8008270 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008266:	2300      	movs	r3, #0
 8008268:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	61bb      	str	r3, [r7, #24]
 800826e:	e003      	b.n	8008278 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008274:	2300      	movs	r3, #0
 8008276:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008280:	e02c      	b.n	80082dc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	9300      	str	r3, [sp, #0]
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	2200      	movs	r2, #0
 800828a:	2180      	movs	r1, #128	; 0x80
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f000 fb90 	bl	80089b2 <UART_WaitOnFlagUntilTimeout>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d001      	beq.n	800829c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008298:	2303      	movs	r3, #3
 800829a:	e038      	b.n	800830e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10b      	bne.n	80082ba <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	881b      	ldrh	r3, [r3, #0]
 80082a6:	461a      	mov	r2, r3
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	3302      	adds	r3, #2
 80082b6:	61bb      	str	r3, [r7, #24]
 80082b8:	e007      	b.n	80082ca <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	781a      	ldrb	r2, [r3, #0]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	3301      	adds	r3, #1
 80082c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	3b01      	subs	r3, #1
 80082d4:	b29a      	uxth	r2, r3
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d1cc      	bne.n	8008282 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	9300      	str	r3, [sp, #0]
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	2200      	movs	r2, #0
 80082f0:	2140      	movs	r1, #64	; 0x40
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f000 fb5d 	bl	80089b2 <UART_WaitOnFlagUntilTimeout>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d001      	beq.n	8008302 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80082fe:	2303      	movs	r3, #3
 8008300:	e005      	b.n	800830e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2220      	movs	r2, #32
 8008306:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008308:	2300      	movs	r3, #0
 800830a:	e000      	b.n	800830e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800830c:	2302      	movs	r3, #2
  }
}
 800830e:	4618      	mov	r0, r3
 8008310:	3720      	adds	r7, #32
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
	...

08008318 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b088      	sub	sp, #32
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008320:	2300      	movs	r3, #0
 8008322:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	689a      	ldr	r2, [r3, #8]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	691b      	ldr	r3, [r3, #16]
 800832c:	431a      	orrs	r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	695b      	ldr	r3, [r3, #20]
 8008332:	431a      	orrs	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	69db      	ldr	r3, [r3, #28]
 8008338:	4313      	orrs	r3, r2
 800833a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	4ba7      	ldr	r3, [pc, #668]	; (80085e0 <UART_SetConfig+0x2c8>)
 8008344:	4013      	ands	r3, r2
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	6812      	ldr	r2, [r2, #0]
 800834a:	6979      	ldr	r1, [r7, #20]
 800834c:	430b      	orrs	r3, r1
 800834e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	68da      	ldr	r2, [r3, #12]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	430a      	orrs	r2, r1
 8008364:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	699b      	ldr	r3, [r3, #24]
 800836a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6a1b      	ldr	r3, [r3, #32]
 8008370:	697a      	ldr	r2, [r7, #20]
 8008372:	4313      	orrs	r3, r2
 8008374:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	697a      	ldr	r2, [r7, #20]
 8008386:	430a      	orrs	r2, r1
 8008388:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a95      	ldr	r2, [pc, #596]	; (80085e4 <UART_SetConfig+0x2cc>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d120      	bne.n	80083d6 <UART_SetConfig+0xbe>
 8008394:	4b94      	ldr	r3, [pc, #592]	; (80085e8 <UART_SetConfig+0x2d0>)
 8008396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800839a:	f003 0303 	and.w	r3, r3, #3
 800839e:	2b03      	cmp	r3, #3
 80083a0:	d816      	bhi.n	80083d0 <UART_SetConfig+0xb8>
 80083a2:	a201      	add	r2, pc, #4	; (adr r2, 80083a8 <UART_SetConfig+0x90>)
 80083a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a8:	080083b9 	.word	0x080083b9
 80083ac:	080083c5 	.word	0x080083c5
 80083b0:	080083bf 	.word	0x080083bf
 80083b4:	080083cb 	.word	0x080083cb
 80083b8:	2301      	movs	r3, #1
 80083ba:	77fb      	strb	r3, [r7, #31]
 80083bc:	e14f      	b.n	800865e <UART_SetConfig+0x346>
 80083be:	2302      	movs	r3, #2
 80083c0:	77fb      	strb	r3, [r7, #31]
 80083c2:	e14c      	b.n	800865e <UART_SetConfig+0x346>
 80083c4:	2304      	movs	r3, #4
 80083c6:	77fb      	strb	r3, [r7, #31]
 80083c8:	e149      	b.n	800865e <UART_SetConfig+0x346>
 80083ca:	2308      	movs	r3, #8
 80083cc:	77fb      	strb	r3, [r7, #31]
 80083ce:	e146      	b.n	800865e <UART_SetConfig+0x346>
 80083d0:	2310      	movs	r3, #16
 80083d2:	77fb      	strb	r3, [r7, #31]
 80083d4:	e143      	b.n	800865e <UART_SetConfig+0x346>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a84      	ldr	r2, [pc, #528]	; (80085ec <UART_SetConfig+0x2d4>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d132      	bne.n	8008446 <UART_SetConfig+0x12e>
 80083e0:	4b81      	ldr	r3, [pc, #516]	; (80085e8 <UART_SetConfig+0x2d0>)
 80083e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083e6:	f003 030c 	and.w	r3, r3, #12
 80083ea:	2b0c      	cmp	r3, #12
 80083ec:	d828      	bhi.n	8008440 <UART_SetConfig+0x128>
 80083ee:	a201      	add	r2, pc, #4	; (adr r2, 80083f4 <UART_SetConfig+0xdc>)
 80083f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f4:	08008429 	.word	0x08008429
 80083f8:	08008441 	.word	0x08008441
 80083fc:	08008441 	.word	0x08008441
 8008400:	08008441 	.word	0x08008441
 8008404:	08008435 	.word	0x08008435
 8008408:	08008441 	.word	0x08008441
 800840c:	08008441 	.word	0x08008441
 8008410:	08008441 	.word	0x08008441
 8008414:	0800842f 	.word	0x0800842f
 8008418:	08008441 	.word	0x08008441
 800841c:	08008441 	.word	0x08008441
 8008420:	08008441 	.word	0x08008441
 8008424:	0800843b 	.word	0x0800843b
 8008428:	2300      	movs	r3, #0
 800842a:	77fb      	strb	r3, [r7, #31]
 800842c:	e117      	b.n	800865e <UART_SetConfig+0x346>
 800842e:	2302      	movs	r3, #2
 8008430:	77fb      	strb	r3, [r7, #31]
 8008432:	e114      	b.n	800865e <UART_SetConfig+0x346>
 8008434:	2304      	movs	r3, #4
 8008436:	77fb      	strb	r3, [r7, #31]
 8008438:	e111      	b.n	800865e <UART_SetConfig+0x346>
 800843a:	2308      	movs	r3, #8
 800843c:	77fb      	strb	r3, [r7, #31]
 800843e:	e10e      	b.n	800865e <UART_SetConfig+0x346>
 8008440:	2310      	movs	r3, #16
 8008442:	77fb      	strb	r3, [r7, #31]
 8008444:	e10b      	b.n	800865e <UART_SetConfig+0x346>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a69      	ldr	r2, [pc, #420]	; (80085f0 <UART_SetConfig+0x2d8>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d120      	bne.n	8008492 <UART_SetConfig+0x17a>
 8008450:	4b65      	ldr	r3, [pc, #404]	; (80085e8 <UART_SetConfig+0x2d0>)
 8008452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008456:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800845a:	2b30      	cmp	r3, #48	; 0x30
 800845c:	d013      	beq.n	8008486 <UART_SetConfig+0x16e>
 800845e:	2b30      	cmp	r3, #48	; 0x30
 8008460:	d814      	bhi.n	800848c <UART_SetConfig+0x174>
 8008462:	2b20      	cmp	r3, #32
 8008464:	d009      	beq.n	800847a <UART_SetConfig+0x162>
 8008466:	2b20      	cmp	r3, #32
 8008468:	d810      	bhi.n	800848c <UART_SetConfig+0x174>
 800846a:	2b00      	cmp	r3, #0
 800846c:	d002      	beq.n	8008474 <UART_SetConfig+0x15c>
 800846e:	2b10      	cmp	r3, #16
 8008470:	d006      	beq.n	8008480 <UART_SetConfig+0x168>
 8008472:	e00b      	b.n	800848c <UART_SetConfig+0x174>
 8008474:	2300      	movs	r3, #0
 8008476:	77fb      	strb	r3, [r7, #31]
 8008478:	e0f1      	b.n	800865e <UART_SetConfig+0x346>
 800847a:	2302      	movs	r3, #2
 800847c:	77fb      	strb	r3, [r7, #31]
 800847e:	e0ee      	b.n	800865e <UART_SetConfig+0x346>
 8008480:	2304      	movs	r3, #4
 8008482:	77fb      	strb	r3, [r7, #31]
 8008484:	e0eb      	b.n	800865e <UART_SetConfig+0x346>
 8008486:	2308      	movs	r3, #8
 8008488:	77fb      	strb	r3, [r7, #31]
 800848a:	e0e8      	b.n	800865e <UART_SetConfig+0x346>
 800848c:	2310      	movs	r3, #16
 800848e:	77fb      	strb	r3, [r7, #31]
 8008490:	e0e5      	b.n	800865e <UART_SetConfig+0x346>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a57      	ldr	r2, [pc, #348]	; (80085f4 <UART_SetConfig+0x2dc>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d120      	bne.n	80084de <UART_SetConfig+0x1c6>
 800849c:	4b52      	ldr	r3, [pc, #328]	; (80085e8 <UART_SetConfig+0x2d0>)
 800849e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80084a6:	2bc0      	cmp	r3, #192	; 0xc0
 80084a8:	d013      	beq.n	80084d2 <UART_SetConfig+0x1ba>
 80084aa:	2bc0      	cmp	r3, #192	; 0xc0
 80084ac:	d814      	bhi.n	80084d8 <UART_SetConfig+0x1c0>
 80084ae:	2b80      	cmp	r3, #128	; 0x80
 80084b0:	d009      	beq.n	80084c6 <UART_SetConfig+0x1ae>
 80084b2:	2b80      	cmp	r3, #128	; 0x80
 80084b4:	d810      	bhi.n	80084d8 <UART_SetConfig+0x1c0>
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d002      	beq.n	80084c0 <UART_SetConfig+0x1a8>
 80084ba:	2b40      	cmp	r3, #64	; 0x40
 80084bc:	d006      	beq.n	80084cc <UART_SetConfig+0x1b4>
 80084be:	e00b      	b.n	80084d8 <UART_SetConfig+0x1c0>
 80084c0:	2300      	movs	r3, #0
 80084c2:	77fb      	strb	r3, [r7, #31]
 80084c4:	e0cb      	b.n	800865e <UART_SetConfig+0x346>
 80084c6:	2302      	movs	r3, #2
 80084c8:	77fb      	strb	r3, [r7, #31]
 80084ca:	e0c8      	b.n	800865e <UART_SetConfig+0x346>
 80084cc:	2304      	movs	r3, #4
 80084ce:	77fb      	strb	r3, [r7, #31]
 80084d0:	e0c5      	b.n	800865e <UART_SetConfig+0x346>
 80084d2:	2308      	movs	r3, #8
 80084d4:	77fb      	strb	r3, [r7, #31]
 80084d6:	e0c2      	b.n	800865e <UART_SetConfig+0x346>
 80084d8:	2310      	movs	r3, #16
 80084da:	77fb      	strb	r3, [r7, #31]
 80084dc:	e0bf      	b.n	800865e <UART_SetConfig+0x346>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a45      	ldr	r2, [pc, #276]	; (80085f8 <UART_SetConfig+0x2e0>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d125      	bne.n	8008534 <UART_SetConfig+0x21c>
 80084e8:	4b3f      	ldr	r3, [pc, #252]	; (80085e8 <UART_SetConfig+0x2d0>)
 80084ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084f6:	d017      	beq.n	8008528 <UART_SetConfig+0x210>
 80084f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80084fc:	d817      	bhi.n	800852e <UART_SetConfig+0x216>
 80084fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008502:	d00b      	beq.n	800851c <UART_SetConfig+0x204>
 8008504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008508:	d811      	bhi.n	800852e <UART_SetConfig+0x216>
 800850a:	2b00      	cmp	r3, #0
 800850c:	d003      	beq.n	8008516 <UART_SetConfig+0x1fe>
 800850e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008512:	d006      	beq.n	8008522 <UART_SetConfig+0x20a>
 8008514:	e00b      	b.n	800852e <UART_SetConfig+0x216>
 8008516:	2300      	movs	r3, #0
 8008518:	77fb      	strb	r3, [r7, #31]
 800851a:	e0a0      	b.n	800865e <UART_SetConfig+0x346>
 800851c:	2302      	movs	r3, #2
 800851e:	77fb      	strb	r3, [r7, #31]
 8008520:	e09d      	b.n	800865e <UART_SetConfig+0x346>
 8008522:	2304      	movs	r3, #4
 8008524:	77fb      	strb	r3, [r7, #31]
 8008526:	e09a      	b.n	800865e <UART_SetConfig+0x346>
 8008528:	2308      	movs	r3, #8
 800852a:	77fb      	strb	r3, [r7, #31]
 800852c:	e097      	b.n	800865e <UART_SetConfig+0x346>
 800852e:	2310      	movs	r3, #16
 8008530:	77fb      	strb	r3, [r7, #31]
 8008532:	e094      	b.n	800865e <UART_SetConfig+0x346>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a30      	ldr	r2, [pc, #192]	; (80085fc <UART_SetConfig+0x2e4>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d125      	bne.n	800858a <UART_SetConfig+0x272>
 800853e:	4b2a      	ldr	r3, [pc, #168]	; (80085e8 <UART_SetConfig+0x2d0>)
 8008540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008544:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008548:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800854c:	d017      	beq.n	800857e <UART_SetConfig+0x266>
 800854e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008552:	d817      	bhi.n	8008584 <UART_SetConfig+0x26c>
 8008554:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008558:	d00b      	beq.n	8008572 <UART_SetConfig+0x25a>
 800855a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800855e:	d811      	bhi.n	8008584 <UART_SetConfig+0x26c>
 8008560:	2b00      	cmp	r3, #0
 8008562:	d003      	beq.n	800856c <UART_SetConfig+0x254>
 8008564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008568:	d006      	beq.n	8008578 <UART_SetConfig+0x260>
 800856a:	e00b      	b.n	8008584 <UART_SetConfig+0x26c>
 800856c:	2301      	movs	r3, #1
 800856e:	77fb      	strb	r3, [r7, #31]
 8008570:	e075      	b.n	800865e <UART_SetConfig+0x346>
 8008572:	2302      	movs	r3, #2
 8008574:	77fb      	strb	r3, [r7, #31]
 8008576:	e072      	b.n	800865e <UART_SetConfig+0x346>
 8008578:	2304      	movs	r3, #4
 800857a:	77fb      	strb	r3, [r7, #31]
 800857c:	e06f      	b.n	800865e <UART_SetConfig+0x346>
 800857e:	2308      	movs	r3, #8
 8008580:	77fb      	strb	r3, [r7, #31]
 8008582:	e06c      	b.n	800865e <UART_SetConfig+0x346>
 8008584:	2310      	movs	r3, #16
 8008586:	77fb      	strb	r3, [r7, #31]
 8008588:	e069      	b.n	800865e <UART_SetConfig+0x346>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a1c      	ldr	r2, [pc, #112]	; (8008600 <UART_SetConfig+0x2e8>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d137      	bne.n	8008604 <UART_SetConfig+0x2ec>
 8008594:	4b14      	ldr	r3, [pc, #80]	; (80085e8 <UART_SetConfig+0x2d0>)
 8008596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800859a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800859e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085a2:	d017      	beq.n	80085d4 <UART_SetConfig+0x2bc>
 80085a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80085a8:	d817      	bhi.n	80085da <UART_SetConfig+0x2c2>
 80085aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085ae:	d00b      	beq.n	80085c8 <UART_SetConfig+0x2b0>
 80085b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085b4:	d811      	bhi.n	80085da <UART_SetConfig+0x2c2>
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d003      	beq.n	80085c2 <UART_SetConfig+0x2aa>
 80085ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085be:	d006      	beq.n	80085ce <UART_SetConfig+0x2b6>
 80085c0:	e00b      	b.n	80085da <UART_SetConfig+0x2c2>
 80085c2:	2300      	movs	r3, #0
 80085c4:	77fb      	strb	r3, [r7, #31]
 80085c6:	e04a      	b.n	800865e <UART_SetConfig+0x346>
 80085c8:	2302      	movs	r3, #2
 80085ca:	77fb      	strb	r3, [r7, #31]
 80085cc:	e047      	b.n	800865e <UART_SetConfig+0x346>
 80085ce:	2304      	movs	r3, #4
 80085d0:	77fb      	strb	r3, [r7, #31]
 80085d2:	e044      	b.n	800865e <UART_SetConfig+0x346>
 80085d4:	2308      	movs	r3, #8
 80085d6:	77fb      	strb	r3, [r7, #31]
 80085d8:	e041      	b.n	800865e <UART_SetConfig+0x346>
 80085da:	2310      	movs	r3, #16
 80085dc:	77fb      	strb	r3, [r7, #31]
 80085de:	e03e      	b.n	800865e <UART_SetConfig+0x346>
 80085e0:	efff69f3 	.word	0xefff69f3
 80085e4:	40011000 	.word	0x40011000
 80085e8:	40023800 	.word	0x40023800
 80085ec:	40004400 	.word	0x40004400
 80085f0:	40004800 	.word	0x40004800
 80085f4:	40004c00 	.word	0x40004c00
 80085f8:	40005000 	.word	0x40005000
 80085fc:	40011400 	.word	0x40011400
 8008600:	40007800 	.word	0x40007800
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a71      	ldr	r2, [pc, #452]	; (80087d0 <UART_SetConfig+0x4b8>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d125      	bne.n	800865a <UART_SetConfig+0x342>
 800860e:	4b71      	ldr	r3, [pc, #452]	; (80087d4 <UART_SetConfig+0x4bc>)
 8008610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008614:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008618:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800861c:	d017      	beq.n	800864e <UART_SetConfig+0x336>
 800861e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008622:	d817      	bhi.n	8008654 <UART_SetConfig+0x33c>
 8008624:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008628:	d00b      	beq.n	8008642 <UART_SetConfig+0x32a>
 800862a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800862e:	d811      	bhi.n	8008654 <UART_SetConfig+0x33c>
 8008630:	2b00      	cmp	r3, #0
 8008632:	d003      	beq.n	800863c <UART_SetConfig+0x324>
 8008634:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008638:	d006      	beq.n	8008648 <UART_SetConfig+0x330>
 800863a:	e00b      	b.n	8008654 <UART_SetConfig+0x33c>
 800863c:	2300      	movs	r3, #0
 800863e:	77fb      	strb	r3, [r7, #31]
 8008640:	e00d      	b.n	800865e <UART_SetConfig+0x346>
 8008642:	2302      	movs	r3, #2
 8008644:	77fb      	strb	r3, [r7, #31]
 8008646:	e00a      	b.n	800865e <UART_SetConfig+0x346>
 8008648:	2304      	movs	r3, #4
 800864a:	77fb      	strb	r3, [r7, #31]
 800864c:	e007      	b.n	800865e <UART_SetConfig+0x346>
 800864e:	2308      	movs	r3, #8
 8008650:	77fb      	strb	r3, [r7, #31]
 8008652:	e004      	b.n	800865e <UART_SetConfig+0x346>
 8008654:	2310      	movs	r3, #16
 8008656:	77fb      	strb	r3, [r7, #31]
 8008658:	e001      	b.n	800865e <UART_SetConfig+0x346>
 800865a:	2310      	movs	r3, #16
 800865c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	69db      	ldr	r3, [r3, #28]
 8008662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008666:	d15a      	bne.n	800871e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8008668:	7ffb      	ldrb	r3, [r7, #31]
 800866a:	2b08      	cmp	r3, #8
 800866c:	d827      	bhi.n	80086be <UART_SetConfig+0x3a6>
 800866e:	a201      	add	r2, pc, #4	; (adr r2, 8008674 <UART_SetConfig+0x35c>)
 8008670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008674:	08008699 	.word	0x08008699
 8008678:	080086a1 	.word	0x080086a1
 800867c:	080086a9 	.word	0x080086a9
 8008680:	080086bf 	.word	0x080086bf
 8008684:	080086af 	.word	0x080086af
 8008688:	080086bf 	.word	0x080086bf
 800868c:	080086bf 	.word	0x080086bf
 8008690:	080086bf 	.word	0x080086bf
 8008694:	080086b7 	.word	0x080086b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008698:	f7fe fdfa 	bl	8007290 <HAL_RCC_GetPCLK1Freq>
 800869c:	61b8      	str	r0, [r7, #24]
        break;
 800869e:	e013      	b.n	80086c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086a0:	f7fe fe0a 	bl	80072b8 <HAL_RCC_GetPCLK2Freq>
 80086a4:	61b8      	str	r0, [r7, #24]
        break;
 80086a6:	e00f      	b.n	80086c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086a8:	4b4b      	ldr	r3, [pc, #300]	; (80087d8 <UART_SetConfig+0x4c0>)
 80086aa:	61bb      	str	r3, [r7, #24]
        break;
 80086ac:	e00c      	b.n	80086c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086ae:	f7fe fd01 	bl	80070b4 <HAL_RCC_GetSysClockFreq>
 80086b2:	61b8      	str	r0, [r7, #24]
        break;
 80086b4:	e008      	b.n	80086c8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086ba:	61bb      	str	r3, [r7, #24]
        break;
 80086bc:	e004      	b.n	80086c8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80086be:	2300      	movs	r3, #0
 80086c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	77bb      	strb	r3, [r7, #30]
        break;
 80086c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d074      	beq.n	80087b8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	005a      	lsls	r2, r3, #1
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	085b      	lsrs	r3, r3, #1
 80086d8:	441a      	add	r2, r3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	fbb2 f3f3 	udiv	r3, r2, r3
 80086e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	2b0f      	cmp	r3, #15
 80086e8:	d916      	bls.n	8008718 <UART_SetConfig+0x400>
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086f0:	d212      	bcs.n	8008718 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	f023 030f 	bic.w	r3, r3, #15
 80086fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	085b      	lsrs	r3, r3, #1
 8008700:	b29b      	uxth	r3, r3
 8008702:	f003 0307 	and.w	r3, r3, #7
 8008706:	b29a      	uxth	r2, r3
 8008708:	89fb      	ldrh	r3, [r7, #14]
 800870a:	4313      	orrs	r3, r2
 800870c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	89fa      	ldrh	r2, [r7, #14]
 8008714:	60da      	str	r2, [r3, #12]
 8008716:	e04f      	b.n	80087b8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8008718:	2301      	movs	r3, #1
 800871a:	77bb      	strb	r3, [r7, #30]
 800871c:	e04c      	b.n	80087b8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800871e:	7ffb      	ldrb	r3, [r7, #31]
 8008720:	2b08      	cmp	r3, #8
 8008722:	d828      	bhi.n	8008776 <UART_SetConfig+0x45e>
 8008724:	a201      	add	r2, pc, #4	; (adr r2, 800872c <UART_SetConfig+0x414>)
 8008726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800872a:	bf00      	nop
 800872c:	08008751 	.word	0x08008751
 8008730:	08008759 	.word	0x08008759
 8008734:	08008761 	.word	0x08008761
 8008738:	08008777 	.word	0x08008777
 800873c:	08008767 	.word	0x08008767
 8008740:	08008777 	.word	0x08008777
 8008744:	08008777 	.word	0x08008777
 8008748:	08008777 	.word	0x08008777
 800874c:	0800876f 	.word	0x0800876f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008750:	f7fe fd9e 	bl	8007290 <HAL_RCC_GetPCLK1Freq>
 8008754:	61b8      	str	r0, [r7, #24]
        break;
 8008756:	e013      	b.n	8008780 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008758:	f7fe fdae 	bl	80072b8 <HAL_RCC_GetPCLK2Freq>
 800875c:	61b8      	str	r0, [r7, #24]
        break;
 800875e:	e00f      	b.n	8008780 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008760:	4b1d      	ldr	r3, [pc, #116]	; (80087d8 <UART_SetConfig+0x4c0>)
 8008762:	61bb      	str	r3, [r7, #24]
        break;
 8008764:	e00c      	b.n	8008780 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008766:	f7fe fca5 	bl	80070b4 <HAL_RCC_GetSysClockFreq>
 800876a:	61b8      	str	r0, [r7, #24]
        break;
 800876c:	e008      	b.n	8008780 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800876e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008772:	61bb      	str	r3, [r7, #24]
        break;
 8008774:	e004      	b.n	8008780 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8008776:	2300      	movs	r3, #0
 8008778:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	77bb      	strb	r3, [r7, #30]
        break;
 800877e:	bf00      	nop
    }

    if (pclk != 0U)
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d018      	beq.n	80087b8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	085a      	lsrs	r2, r3, #1
 800878c:	69bb      	ldr	r3, [r7, #24]
 800878e:	441a      	add	r2, r3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	685b      	ldr	r3, [r3, #4]
 8008794:	fbb2 f3f3 	udiv	r3, r2, r3
 8008798:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	2b0f      	cmp	r3, #15
 800879e:	d909      	bls.n	80087b4 <UART_SetConfig+0x49c>
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087a6:	d205      	bcs.n	80087b4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	b29a      	uxth	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	60da      	str	r2, [r3, #12]
 80087b2:	e001      	b.n	80087b8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80087c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3720      	adds	r7, #32
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	40007c00 	.word	0x40007c00
 80087d4:	40023800 	.word	0x40023800
 80087d8:	00f42400 	.word	0x00f42400

080087dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e8:	f003 0301 	and.w	r3, r3, #1
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00a      	beq.n	8008806 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	430a      	orrs	r2, r1
 8008804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880a:	f003 0302 	and.w	r3, r3, #2
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00a      	beq.n	8008828 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	430a      	orrs	r2, r1
 8008826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882c:	f003 0304 	and.w	r3, r3, #4
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00a      	beq.n	800884a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	430a      	orrs	r2, r1
 8008848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884e:	f003 0308 	and.w	r3, r3, #8
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00a      	beq.n	800886c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	430a      	orrs	r2, r1
 800886a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008870:	f003 0310 	and.w	r3, r3, #16
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00a      	beq.n	800888e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	430a      	orrs	r2, r1
 800888c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008892:	f003 0320 	and.w	r3, r3, #32
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00a      	beq.n	80088b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	430a      	orrs	r2, r1
 80088ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d01a      	beq.n	80088f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	430a      	orrs	r2, r1
 80088d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088da:	d10a      	bne.n	80088f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	430a      	orrs	r2, r1
 80088f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00a      	beq.n	8008914 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	430a      	orrs	r2, r1
 8008912:	605a      	str	r2, [r3, #4]
  }
}
 8008914:	bf00      	nop
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b086      	sub	sp, #24
 8008924:	af02      	add	r7, sp, #8
 8008926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008930:	f7fa ff34 	bl	800379c <HAL_GetTick>
 8008934:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 0308 	and.w	r3, r3, #8
 8008940:	2b08      	cmp	r3, #8
 8008942:	d10e      	bne.n	8008962 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008944:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008948:	9300      	str	r3, [sp, #0]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2200      	movs	r2, #0
 800894e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 f82d 	bl	80089b2 <UART_WaitOnFlagUntilTimeout>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d001      	beq.n	8008962 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800895e:	2303      	movs	r3, #3
 8008960:	e023      	b.n	80089aa <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 0304 	and.w	r3, r3, #4
 800896c:	2b04      	cmp	r3, #4
 800896e:	d10e      	bne.n	800898e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008970:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008974:	9300      	str	r3, [sp, #0]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 f817 	bl	80089b2 <UART_WaitOnFlagUntilTimeout>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d001      	beq.n	800898e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800898a:	2303      	movs	r3, #3
 800898c:	e00d      	b.n	80089aa <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2220      	movs	r2, #32
 8008992:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2220      	movs	r2, #32
 8008998:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b09c      	sub	sp, #112	; 0x70
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	60f8      	str	r0, [r7, #12]
 80089ba:	60b9      	str	r1, [r7, #8]
 80089bc:	603b      	str	r3, [r7, #0]
 80089be:	4613      	mov	r3, r2
 80089c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089c2:	e0a5      	b.n	8008b10 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089ca:	f000 80a1 	beq.w	8008b10 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089ce:	f7fa fee5 	bl	800379c <HAL_GetTick>
 80089d2:	4602      	mov	r2, r0
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	1ad3      	subs	r3, r2, r3
 80089d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80089da:	429a      	cmp	r2, r3
 80089dc:	d302      	bcc.n	80089e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80089de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d13e      	bne.n	8008a62 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089ec:	e853 3f00 	ldrex	r3, [r3]
 80089f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80089f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80089f8:	667b      	str	r3, [r7, #100]	; 0x64
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	461a      	mov	r2, r3
 8008a00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a04:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a0a:	e841 2300 	strex	r3, r2, [r1]
 8008a0e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008a10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d1e6      	bne.n	80089e4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	3308      	adds	r3, #8
 8008a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a20:	e853 3f00 	ldrex	r3, [r3]
 8008a24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a28:	f023 0301 	bic.w	r3, r3, #1
 8008a2c:	663b      	str	r3, [r7, #96]	; 0x60
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	3308      	adds	r3, #8
 8008a34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a36:	64ba      	str	r2, [r7, #72]	; 0x48
 8008a38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a3e:	e841 2300 	strex	r3, r2, [r1]
 8008a42:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d1e5      	bne.n	8008a16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2220      	movs	r2, #32
 8008a4e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2220      	movs	r2, #32
 8008a54:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	e067      	b.n	8008b32 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 0304 	and.w	r3, r3, #4
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d04f      	beq.n	8008b10 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	69db      	ldr	r3, [r3, #28]
 8008a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a7e:	d147      	bne.n	8008b10 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a92:	e853 3f00 	ldrex	r3, [r3]
 8008a96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8008aaa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008aae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ab0:	e841 2300 	strex	r3, r2, [r1]
 8008ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d1e6      	bne.n	8008a8a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	3308      	adds	r3, #8
 8008ac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	e853 3f00 	ldrex	r3, [r3]
 8008aca:	613b      	str	r3, [r7, #16]
   return(result);
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	f023 0301 	bic.w	r3, r3, #1
 8008ad2:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	3308      	adds	r3, #8
 8008ada:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008adc:	623a      	str	r2, [r7, #32]
 8008ade:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae0:	69f9      	ldr	r1, [r7, #28]
 8008ae2:	6a3a      	ldr	r2, [r7, #32]
 8008ae4:	e841 2300 	strex	r3, r2, [r1]
 8008ae8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008aea:	69bb      	ldr	r3, [r7, #24]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d1e5      	bne.n	8008abc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2220      	movs	r2, #32
 8008af4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2220      	movs	r2, #32
 8008afa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2220      	movs	r2, #32
 8008b00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e010      	b.n	8008b32 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	69da      	ldr	r2, [r3, #28]
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	4013      	ands	r3, r2
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	bf0c      	ite	eq
 8008b20:	2301      	moveq	r3, #1
 8008b22:	2300      	movne	r3, #0
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	461a      	mov	r2, r3
 8008b28:	79fb      	ldrb	r3, [r7, #7]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	f43f af4a 	beq.w	80089c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3770      	adds	r7, #112	; 0x70
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
	...

08008b3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b3c:	b084      	sub	sp, #16
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b084      	sub	sp, #16
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
 8008b46:	f107 001c 	add.w	r0, r7, #28
 8008b4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d120      	bne.n	8008b96 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b58:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	68da      	ldr	r2, [r3, #12]
 8008b64:	4b20      	ldr	r3, [pc, #128]	; (8008be8 <USB_CoreInit+0xac>)
 8008b66:	4013      	ands	r3, r2
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d105      	bne.n	8008b8a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f9b4 	bl	8008ef8 <USB_CoreReset>
 8008b90:	4603      	mov	r3, r0
 8008b92:	73fb      	strb	r3, [r7, #15]
 8008b94:	e010      	b.n	8008bb8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 f9a8 	bl	8008ef8 <USB_CoreReset>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d10b      	bne.n	8008bd6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	f043 0206 	orr.w	r2, r3, #6
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	f043 0220 	orr.w	r2, r3, #32
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3710      	adds	r7, #16
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008be2:	b004      	add	sp, #16
 8008be4:	4770      	bx	lr
 8008be6:	bf00      	nop
 8008be8:	ffbdffbf 	.word	0xffbdffbf

08008bec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	f043 0201 	orr.w	r2, r3, #1
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	370c      	adds	r7, #12
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b083      	sub	sp, #12
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	f023 0201 	bic.w	r2, r3, #1
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c4c:	78fb      	ldrb	r3, [r7, #3]
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d115      	bne.n	8008c7e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008c5e:	2001      	movs	r0, #1
 8008c60:	f7fa fda8 	bl	80037b4 <HAL_Delay>
      ms++;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	3301      	adds	r3, #1
 8008c68:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f935 	bl	8008eda <USB_GetMode>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d01e      	beq.n	8008cb4 <USB_SetCurrentMode+0x84>
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2b31      	cmp	r3, #49	; 0x31
 8008c7a:	d9f0      	bls.n	8008c5e <USB_SetCurrentMode+0x2e>
 8008c7c:	e01a      	b.n	8008cb4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008c7e:	78fb      	ldrb	r3, [r7, #3]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d115      	bne.n	8008cb0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008c90:	2001      	movs	r0, #1
 8008c92:	f7fa fd8f 	bl	80037b4 <HAL_Delay>
      ms++;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	3301      	adds	r3, #1
 8008c9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 f91c 	bl	8008eda <USB_GetMode>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d005      	beq.n	8008cb4 <USB_SetCurrentMode+0x84>
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2b31      	cmp	r3, #49	; 0x31
 8008cac:	d9f0      	bls.n	8008c90 <USB_SetCurrentMode+0x60>
 8008cae:	e001      	b.n	8008cb4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e005      	b.n	8008cc0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2b32      	cmp	r3, #50	; 0x32
 8008cb8:	d101      	bne.n	8008cbe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e000      	b.n	8008cc0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b085      	sub	sp, #20
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	60fb      	str	r3, [r7, #12]
 8008cdc:	4a12      	ldr	r2, [pc, #72]	; (8008d28 <USB_FlushTxFifo+0x60>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d901      	bls.n	8008ce6 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	e01a      	b.n	8008d1c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	daf3      	bge.n	8008cd6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	019b      	lsls	r3, r3, #6
 8008cf6:	f043 0220 	orr.w	r2, r3, #32
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	3301      	adds	r3, #1
 8008d02:	60fb      	str	r3, [r7, #12]
 8008d04:	4a08      	ldr	r2, [pc, #32]	; (8008d28 <USB_FlushTxFifo+0x60>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d901      	bls.n	8008d0e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8008d0a:	2303      	movs	r3, #3
 8008d0c:	e006      	b.n	8008d1c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	691b      	ldr	r3, [r3, #16]
 8008d12:	f003 0320 	and.w	r3, r3, #32
 8008d16:	2b20      	cmp	r3, #32
 8008d18:	d0f1      	beq.n	8008cfe <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3714      	adds	r7, #20
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	00030d40 	.word	0x00030d40

08008d2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d34:	2300      	movs	r3, #0
 8008d36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	60fb      	str	r3, [r7, #12]
 8008d3e:	4a11      	ldr	r2, [pc, #68]	; (8008d84 <USB_FlushRxFifo+0x58>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d901      	bls.n	8008d48 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8008d44:	2303      	movs	r3, #3
 8008d46:	e017      	b.n	8008d78 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	691b      	ldr	r3, [r3, #16]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	daf3      	bge.n	8008d38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008d50:	2300      	movs	r3, #0
 8008d52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2210      	movs	r2, #16
 8008d58:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	60fb      	str	r3, [r7, #12]
 8008d60:	4a08      	ldr	r2, [pc, #32]	; (8008d84 <USB_FlushRxFifo+0x58>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d901      	bls.n	8008d6a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8008d66:	2303      	movs	r3, #3
 8008d68:	e006      	b.n	8008d78 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	f003 0310 	and.w	r3, r3, #16
 8008d72:	2b10      	cmp	r3, #16
 8008d74:	d0f1      	beq.n	8008d5a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3714      	adds	r7, #20
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr
 8008d84:	00030d40 	.word	0x00030d40

08008d88 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b089      	sub	sp, #36	; 0x24
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	4611      	mov	r1, r2
 8008d94:	461a      	mov	r2, r3
 8008d96:	460b      	mov	r3, r1
 8008d98:	71fb      	strb	r3, [r7, #7]
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008da6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d123      	bne.n	8008df6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008dae:	88bb      	ldrh	r3, [r7, #4]
 8008db0:	3303      	adds	r3, #3
 8008db2:	089b      	lsrs	r3, r3, #2
 8008db4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008db6:	2300      	movs	r3, #0
 8008db8:	61bb      	str	r3, [r7, #24]
 8008dba:	e018      	b.n	8008dee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008dbc:	79fb      	ldrb	r3, [r7, #7]
 8008dbe:	031a      	lsls	r2, r3, #12
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	4413      	add	r3, r2
 8008dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dc8:	461a      	mov	r2, r3
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dd6:	69fb      	ldr	r3, [r7, #28]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	3301      	adds	r3, #1
 8008de0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008de2:	69fb      	ldr	r3, [r7, #28]
 8008de4:	3301      	adds	r3, #1
 8008de6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	3301      	adds	r3, #1
 8008dec:	61bb      	str	r3, [r7, #24]
 8008dee:	69ba      	ldr	r2, [r7, #24]
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d3e2      	bcc.n	8008dbc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3724      	adds	r7, #36	; 0x24
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b08b      	sub	sp, #44	; 0x2c
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008e1a:	88fb      	ldrh	r3, [r7, #6]
 8008e1c:	089b      	lsrs	r3, r3, #2
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008e22:	88fb      	ldrh	r3, [r7, #6]
 8008e24:	f003 0303 	and.w	r3, r3, #3
 8008e28:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	623b      	str	r3, [r7, #32]
 8008e2e:	e014      	b.n	8008e5a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3a:	601a      	str	r2, [r3, #0]
    pDest++;
 8008e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3e:	3301      	adds	r3, #1
 8008e40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e44:	3301      	adds	r3, #1
 8008e46:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e50:	3301      	adds	r3, #1
 8008e52:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008e54:	6a3b      	ldr	r3, [r7, #32]
 8008e56:	3301      	adds	r3, #1
 8008e58:	623b      	str	r3, [r7, #32]
 8008e5a:	6a3a      	ldr	r2, [r7, #32]
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d3e6      	bcc.n	8008e30 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008e62:	8bfb      	ldrh	r3, [r7, #30]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d01e      	beq.n	8008ea6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e72:	461a      	mov	r2, r3
 8008e74:	f107 0310 	add.w	r3, r7, #16
 8008e78:	6812      	ldr	r2, [r2, #0]
 8008e7a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008e7c:	693a      	ldr	r2, [r7, #16]
 8008e7e:	6a3b      	ldr	r3, [r7, #32]
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	00db      	lsls	r3, r3, #3
 8008e84:	fa22 f303 	lsr.w	r3, r2, r3
 8008e88:	b2da      	uxtb	r2, r3
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8c:	701a      	strb	r2, [r3, #0]
      i++;
 8008e8e:	6a3b      	ldr	r3, [r7, #32]
 8008e90:	3301      	adds	r3, #1
 8008e92:	623b      	str	r3, [r7, #32]
      pDest++;
 8008e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e96:	3301      	adds	r3, #1
 8008e98:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008e9a:	8bfb      	ldrh	r3, [r7, #30]
 8008e9c:	3b01      	subs	r3, #1
 8008e9e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008ea0:	8bfb      	ldrh	r3, [r7, #30]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1ea      	bne.n	8008e7c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	372c      	adds	r7, #44	; 0x2c
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	695b      	ldr	r3, [r3, #20]
 8008ec0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	68fa      	ldr	r2, [r7, #12]
 8008ec8:	4013      	ands	r3, r2
 8008eca:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
}
 8008ece:	4618      	mov	r0, r3
 8008ed0:	3714      	adds	r7, #20
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed8:	4770      	bx	lr

08008eda <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008eda:	b480      	push	{r7}
 8008edc:	b083      	sub	sp, #12
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	695b      	ldr	r3, [r3, #20]
 8008ee6:	f003 0301 	and.w	r3, r3, #1
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	370c      	adds	r7, #12
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
	...

08008ef8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008f00:	2300      	movs	r3, #0
 8008f02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	3301      	adds	r3, #1
 8008f08:	60fb      	str	r3, [r7, #12]
 8008f0a:	4a13      	ldr	r2, [pc, #76]	; (8008f58 <USB_CoreReset+0x60>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d901      	bls.n	8008f14 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8008f10:	2303      	movs	r3, #3
 8008f12:	e01a      	b.n	8008f4a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	691b      	ldr	r3, [r3, #16]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	daf3      	bge.n	8008f04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	691b      	ldr	r3, [r3, #16]
 8008f24:	f043 0201 	orr.w	r2, r3, #1
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	60fb      	str	r3, [r7, #12]
 8008f32:	4a09      	ldr	r2, [pc, #36]	; (8008f58 <USB_CoreReset+0x60>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d901      	bls.n	8008f3c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8008f38:	2303      	movs	r3, #3
 8008f3a:	e006      	b.n	8008f4a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	691b      	ldr	r3, [r3, #16]
 8008f40:	f003 0301 	and.w	r3, r3, #1
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d0f1      	beq.n	8008f2c <USB_CoreReset+0x34>

  return HAL_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3714      	adds	r7, #20
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop
 8008f58:	00030d40 	.word	0x00030d40

08008f5c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f5c:	b084      	sub	sp, #16
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b086      	sub	sp, #24
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
 8008f66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008f6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	2300      	movs	r3, #0
 8008f80:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f86:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d018      	beq.n	8008fcc <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d10a      	bne.n	8008fb6 <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68fa      	ldr	r2, [r7, #12]
 8008faa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008fae:	f043 0304 	orr.w	r3, r3, #4
 8008fb2:	6013      	str	r3, [r2, #0]
 8008fb4:	e014      	b.n	8008fe0 <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	68fa      	ldr	r2, [r7, #12]
 8008fc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008fc4:	f023 0304 	bic.w	r3, r3, #4
 8008fc8:	6013      	str	r3, [r2, #0]
 8008fca:	e009      	b.n	8008fe0 <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68fa      	ldr	r2, [r7, #12]
 8008fd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008fda:	f023 0304 	bic.w	r3, r3, #4
 8008fde:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008fe0:	2110      	movs	r1, #16
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f7ff fe70 	bl	8008cc8 <USB_FlushTxFifo>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d001      	beq.n	8008ff2 <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f7ff fe9a 	bl	8008d2c <USB_FlushRxFifo>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d001      	beq.n	8009002 <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009002:	2300      	movs	r3, #0
 8009004:	613b      	str	r3, [r7, #16]
 8009006:	e015      	b.n	8009034 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	015a      	lsls	r2, r3, #5
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	4413      	add	r3, r2
 8009010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009014:	461a      	mov	r2, r3
 8009016:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800901a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	015a      	lsls	r2, r3, #5
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	4413      	add	r3, r2
 8009024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009028:	461a      	mov	r2, r3
 800902a:	2300      	movs	r3, #0
 800902c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	3301      	adds	r3, #1
 8009032:	613b      	str	r3, [r7, #16]
 8009034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009036:	693a      	ldr	r2, [r7, #16]
 8009038:	429a      	cmp	r2, r3
 800903a:	d3e5      	bcc.n	8009008 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009048:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800904e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009052:	2b00      	cmp	r3, #0
 8009054:	d00b      	beq.n	800906e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f44f 7200 	mov.w	r2, #512	; 0x200
 800905c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4a13      	ldr	r2, [pc, #76]	; (80090b0 <USB_HostInit+0x154>)
 8009062:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a13      	ldr	r2, [pc, #76]	; (80090b4 <USB_HostInit+0x158>)
 8009068:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800906c:	e009      	b.n	8009082 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2280      	movs	r2, #128	; 0x80
 8009072:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a10      	ldr	r2, [pc, #64]	; (80090b8 <USB_HostInit+0x15c>)
 8009078:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	4a0f      	ldr	r2, [pc, #60]	; (80090bc <USB_HostInit+0x160>)
 800907e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009084:	2b00      	cmp	r3, #0
 8009086:	d105      	bne.n	8009094 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	699b      	ldr	r3, [r3, #24]
 800908c:	f043 0210 	orr.w	r2, r3, #16
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	699a      	ldr	r2, [r3, #24]
 8009098:	4b09      	ldr	r3, [pc, #36]	; (80090c0 <USB_HostInit+0x164>)
 800909a:	4313      	orrs	r3, r2
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80090a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3718      	adds	r7, #24
 80090a6:	46bd      	mov	sp, r7
 80090a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090ac:	b004      	add	sp, #16
 80090ae:	4770      	bx	lr
 80090b0:	01000200 	.word	0x01000200
 80090b4:	00e00300 	.word	0x00e00300
 80090b8:	00600080 	.word	0x00600080
 80090bc:	004000e0 	.word	0x004000e0
 80090c0:	a3200008 	.word	0xa3200008

080090c4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	460b      	mov	r3, r1
 80090ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80090e2:	f023 0303 	bic.w	r3, r3, #3
 80090e6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	78fb      	ldrb	r3, [r7, #3]
 80090f2:	f003 0303 	and.w	r3, r3, #3
 80090f6:	68f9      	ldr	r1, [r7, #12]
 80090f8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80090fc:	4313      	orrs	r3, r2
 80090fe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009100:	78fb      	ldrb	r3, [r7, #3]
 8009102:	2b01      	cmp	r3, #1
 8009104:	d107      	bne.n	8009116 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800910c:	461a      	mov	r2, r3
 800910e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009112:	6053      	str	r3, [r2, #4]
 8009114:	e009      	b.n	800912a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009116:	78fb      	ldrb	r3, [r7, #3]
 8009118:	2b02      	cmp	r3, #2
 800911a:	d106      	bne.n	800912a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009122:	461a      	mov	r2, r3
 8009124:	f241 7370 	movw	r3, #6000	; 0x1770
 8009128:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800912a:	2300      	movs	r3, #0
}
 800912c:	4618      	mov	r0, r3
 800912e:	3714      	adds	r7, #20
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009144:	2300      	movs	r3, #0
 8009146:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009158:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	68fa      	ldr	r2, [r7, #12]
 800915e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009166:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009168:	2064      	movs	r0, #100	; 0x64
 800916a:	f7fa fb23 	bl	80037b4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	68fa      	ldr	r2, [r7, #12]
 8009172:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009176:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800917a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800917c:	200a      	movs	r0, #10
 800917e:	f7fa fb19 	bl	80037b4 <HAL_Delay>

  return HAL_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800918c:	b480      	push	{r7}
 800918e:	b085      	sub	sp, #20
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	460b      	mov	r3, r1
 8009196:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800919c:	2300      	movs	r3, #0
 800919e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80091b0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d109      	bne.n	80091d0 <USB_DriveVbus+0x44>
 80091bc:	78fb      	ldrb	r3, [r7, #3]
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d106      	bne.n	80091d0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80091ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80091ce:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80091d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091da:	d109      	bne.n	80091f0 <USB_DriveVbus+0x64>
 80091dc:	78fb      	ldrb	r3, [r7, #3]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d106      	bne.n	80091f0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80091ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091ee:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3714      	adds	r7, #20
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr

080091fe <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80091fe:	b480      	push	{r7}
 8009200:	b085      	sub	sp, #20
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800920a:	2300      	movs	r3, #0
 800920c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	0c5b      	lsrs	r3, r3, #17
 800921c:	f003 0303 	and.w	r3, r3, #3
}
 8009220:	4618      	mov	r0, r3
 8009222:	3714      	adds	r7, #20
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800922c:	b480      	push	{r7}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	b29b      	uxth	r3, r3
}
 8009242:	4618      	mov	r0, r3
 8009244:	3714      	adds	r7, #20
 8009246:	46bd      	mov	sp, r7
 8009248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924c:	4770      	bx	lr
	...

08009250 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b088      	sub	sp, #32
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	4608      	mov	r0, r1
 800925a:	4611      	mov	r1, r2
 800925c:	461a      	mov	r2, r3
 800925e:	4603      	mov	r3, r0
 8009260:	70fb      	strb	r3, [r7, #3]
 8009262:	460b      	mov	r3, r1
 8009264:	70bb      	strb	r3, [r7, #2]
 8009266:	4613      	mov	r3, r2
 8009268:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800926a:	2300      	movs	r3, #0
 800926c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009272:	78fb      	ldrb	r3, [r7, #3]
 8009274:	015a      	lsls	r2, r3, #5
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	4413      	add	r3, r2
 800927a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800927e:	461a      	mov	r2, r3
 8009280:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009284:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009286:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800928a:	2b03      	cmp	r3, #3
 800928c:	d87e      	bhi.n	800938c <USB_HC_Init+0x13c>
 800928e:	a201      	add	r2, pc, #4	; (adr r2, 8009294 <USB_HC_Init+0x44>)
 8009290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009294:	080092a5 	.word	0x080092a5
 8009298:	0800934f 	.word	0x0800934f
 800929c:	080092a5 	.word	0x080092a5
 80092a0:	08009311 	.word	0x08009311
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80092a4:	78fb      	ldrb	r3, [r7, #3]
 80092a6:	015a      	lsls	r2, r3, #5
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	4413      	add	r3, r2
 80092ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092b0:	461a      	mov	r2, r3
 80092b2:	f240 439d 	movw	r3, #1181	; 0x49d
 80092b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80092b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	da10      	bge.n	80092e2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80092c0:	78fb      	ldrb	r3, [r7, #3]
 80092c2:	015a      	lsls	r2, r3, #5
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	4413      	add	r3, r2
 80092c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	78fa      	ldrb	r2, [r7, #3]
 80092d0:	0151      	lsls	r1, r2, #5
 80092d2:	693a      	ldr	r2, [r7, #16]
 80092d4:	440a      	add	r2, r1
 80092d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092de:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80092e0:	e057      	b.n	8009392 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d051      	beq.n	8009392 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80092ee:	78fb      	ldrb	r3, [r7, #3]
 80092f0:	015a      	lsls	r2, r3, #5
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	4413      	add	r3, r2
 80092f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	78fa      	ldrb	r2, [r7, #3]
 80092fe:	0151      	lsls	r1, r2, #5
 8009300:	693a      	ldr	r2, [r7, #16]
 8009302:	440a      	add	r2, r1
 8009304:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009308:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800930c:	60d3      	str	r3, [r2, #12]
      break;
 800930e:	e040      	b.n	8009392 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009310:	78fb      	ldrb	r3, [r7, #3]
 8009312:	015a      	lsls	r2, r3, #5
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	4413      	add	r3, r2
 8009318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800931c:	461a      	mov	r2, r3
 800931e:	f240 639d 	movw	r3, #1693	; 0x69d
 8009322:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009324:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009328:	2b00      	cmp	r3, #0
 800932a:	da34      	bge.n	8009396 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800932c:	78fb      	ldrb	r3, [r7, #3]
 800932e:	015a      	lsls	r2, r3, #5
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	4413      	add	r3, r2
 8009334:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	78fa      	ldrb	r2, [r7, #3]
 800933c:	0151      	lsls	r1, r2, #5
 800933e:	693a      	ldr	r2, [r7, #16]
 8009340:	440a      	add	r2, r1
 8009342:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800934a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800934c:	e023      	b.n	8009396 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800934e:	78fb      	ldrb	r3, [r7, #3]
 8009350:	015a      	lsls	r2, r3, #5
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	4413      	add	r3, r2
 8009356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800935a:	461a      	mov	r2, r3
 800935c:	f240 2325 	movw	r3, #549	; 0x225
 8009360:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009362:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009366:	2b00      	cmp	r3, #0
 8009368:	da17      	bge.n	800939a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800936a:	78fb      	ldrb	r3, [r7, #3]
 800936c:	015a      	lsls	r2, r3, #5
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	4413      	add	r3, r2
 8009372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	78fa      	ldrb	r2, [r7, #3]
 800937a:	0151      	lsls	r1, r2, #5
 800937c:	693a      	ldr	r2, [r7, #16]
 800937e:	440a      	add	r2, r1
 8009380:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009384:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009388:	60d3      	str	r3, [r2, #12]
      }
      break;
 800938a:	e006      	b.n	800939a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	77fb      	strb	r3, [r7, #31]
      break;
 8009390:	e004      	b.n	800939c <USB_HC_Init+0x14c>
      break;
 8009392:	bf00      	nop
 8009394:	e002      	b.n	800939c <USB_HC_Init+0x14c>
      break;
 8009396:	bf00      	nop
 8009398:	e000      	b.n	800939c <USB_HC_Init+0x14c>
      break;
 800939a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800939c:	78fb      	ldrb	r3, [r7, #3]
 800939e:	015a      	lsls	r2, r3, #5
 80093a0:	693b      	ldr	r3, [r7, #16]
 80093a2:	4413      	add	r3, r2
 80093a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	78fa      	ldrb	r2, [r7, #3]
 80093ac:	0151      	lsls	r1, r2, #5
 80093ae:	693a      	ldr	r2, [r7, #16]
 80093b0:	440a      	add	r2, r1
 80093b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093b6:	f043 0302 	orr.w	r3, r3, #2
 80093ba:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093c2:	699a      	ldr	r2, [r3, #24]
 80093c4:	78fb      	ldrb	r3, [r7, #3]
 80093c6:	f003 030f 	and.w	r3, r3, #15
 80093ca:	2101      	movs	r1, #1
 80093cc:	fa01 f303 	lsl.w	r3, r1, r3
 80093d0:	6939      	ldr	r1, [r7, #16]
 80093d2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80093d6:	4313      	orrs	r3, r2
 80093d8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	699b      	ldr	r3, [r3, #24]
 80093de:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80093e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	da03      	bge.n	80093f6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80093ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093f2:	61bb      	str	r3, [r7, #24]
 80093f4:	e001      	b.n	80093fa <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80093f6:	2300      	movs	r3, #0
 80093f8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f7ff feff 	bl	80091fe <USB_GetHostSpeed>
 8009400:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009402:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009406:	2b02      	cmp	r3, #2
 8009408:	d106      	bne.n	8009418 <USB_HC_Init+0x1c8>
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2b02      	cmp	r3, #2
 800940e:	d003      	beq.n	8009418 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009410:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009414:	617b      	str	r3, [r7, #20]
 8009416:	e001      	b.n	800941c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009418:	2300      	movs	r3, #0
 800941a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800941c:	787b      	ldrb	r3, [r7, #1]
 800941e:	059b      	lsls	r3, r3, #22
 8009420:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009424:	78bb      	ldrb	r3, [r7, #2]
 8009426:	02db      	lsls	r3, r3, #11
 8009428:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800942c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800942e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009432:	049b      	lsls	r3, r3, #18
 8009434:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009438:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800943a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800943c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009440:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009442:	69bb      	ldr	r3, [r7, #24]
 8009444:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009446:	78fb      	ldrb	r3, [r7, #3]
 8009448:	0159      	lsls	r1, r3, #5
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	440b      	add	r3, r1
 800944e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009452:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009458:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800945a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800945e:	2b03      	cmp	r3, #3
 8009460:	d10f      	bne.n	8009482 <USB_HC_Init+0x232>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8009462:	78fb      	ldrb	r3, [r7, #3]
 8009464:	015a      	lsls	r2, r3, #5
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	4413      	add	r3, r2
 800946a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	78fa      	ldrb	r2, [r7, #3]
 8009472:	0151      	lsls	r1, r2, #5
 8009474:	693a      	ldr	r2, [r7, #16]
 8009476:	440a      	add	r2, r1
 8009478:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800947c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009480:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009482:	7ffb      	ldrb	r3, [r7, #31]
}
 8009484:	4618      	mov	r0, r3
 8009486:	3720      	adds	r7, #32
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b08c      	sub	sp, #48	; 0x30
 8009490:	af02      	add	r7, sp, #8
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	4613      	mov	r3, r2
 8009498:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	785b      	ldrb	r3, [r3, #1]
 80094a2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80094a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094a8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d02d      	beq.n	8009512 <USB_HC_StartXfer+0x86>
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	791b      	ldrb	r3, [r3, #4]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d129      	bne.n	8009512 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80094be:	79fb      	ldrb	r3, [r7, #7]
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d117      	bne.n	80094f4 <USB_HC_StartXfer+0x68>
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	79db      	ldrb	r3, [r3, #7]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d003      	beq.n	80094d4 <USB_HC_StartXfer+0x48>
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	79db      	ldrb	r3, [r3, #7]
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	d10f      	bne.n	80094f4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80094d4:	69fb      	ldr	r3, [r7, #28]
 80094d6:	015a      	lsls	r2, r3, #5
 80094d8:	6a3b      	ldr	r3, [r7, #32]
 80094da:	4413      	add	r3, r2
 80094dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094e0:	68db      	ldr	r3, [r3, #12]
 80094e2:	69fa      	ldr	r2, [r7, #28]
 80094e4:	0151      	lsls	r1, r2, #5
 80094e6:	6a3a      	ldr	r2, [r7, #32]
 80094e8:	440a      	add	r2, r1
 80094ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094f2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80094f4:	79fb      	ldrb	r3, [r7, #7]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d10b      	bne.n	8009512 <USB_HC_StartXfer+0x86>
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	795b      	ldrb	r3, [r3, #5]
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d107      	bne.n	8009512 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	785b      	ldrb	r3, [r3, #1]
 8009506:	4619      	mov	r1, r3
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f000 fa0d 	bl	8009928 <USB_DoPing>
      return HAL_OK;
 800950e:	2300      	movs	r3, #0
 8009510:	e0f8      	b.n	8009704 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	695b      	ldr	r3, [r3, #20]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d018      	beq.n	800954c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	695b      	ldr	r3, [r3, #20]
 800951e:	68ba      	ldr	r2, [r7, #8]
 8009520:	8912      	ldrh	r2, [r2, #8]
 8009522:	4413      	add	r3, r2
 8009524:	3b01      	subs	r3, #1
 8009526:	68ba      	ldr	r2, [r7, #8]
 8009528:	8912      	ldrh	r2, [r2, #8]
 800952a:	fbb3 f3f2 	udiv	r3, r3, r2
 800952e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8009530:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009532:	8b7b      	ldrh	r3, [r7, #26]
 8009534:	429a      	cmp	r2, r3
 8009536:	d90b      	bls.n	8009550 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8009538:	8b7b      	ldrh	r3, [r7, #26]
 800953a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800953c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800953e:	68ba      	ldr	r2, [r7, #8]
 8009540:	8912      	ldrh	r2, [r2, #8]
 8009542:	fb02 f203 	mul.w	r2, r2, r3
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	611a      	str	r2, [r3, #16]
 800954a:	e001      	b.n	8009550 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800954c:	2301      	movs	r3, #1
 800954e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	78db      	ldrb	r3, [r3, #3]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d007      	beq.n	8009568 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009558:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800955a:	68ba      	ldr	r2, [r7, #8]
 800955c:	8912      	ldrh	r2, [r2, #8]
 800955e:	fb02 f203 	mul.w	r2, r2, r3
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	611a      	str	r2, [r3, #16]
 8009566:	e003      	b.n	8009570 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	695a      	ldr	r2, [r3, #20]
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	691b      	ldr	r3, [r3, #16]
 8009574:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009578:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800957a:	04d9      	lsls	r1, r3, #19
 800957c:	4b63      	ldr	r3, [pc, #396]	; (800970c <USB_HC_StartXfer+0x280>)
 800957e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009580:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	7a9b      	ldrb	r3, [r3, #10]
 8009586:	075b      	lsls	r3, r3, #29
 8009588:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800958c:	69f9      	ldr	r1, [r7, #28]
 800958e:	0148      	lsls	r0, r1, #5
 8009590:	6a39      	ldr	r1, [r7, #32]
 8009592:	4401      	add	r1, r0
 8009594:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009598:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800959a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800959c:	79fb      	ldrb	r3, [r7, #7]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d009      	beq.n	80095b6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	68d9      	ldr	r1, [r3, #12]
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	015a      	lsls	r2, r3, #5
 80095aa:	6a3b      	ldr	r3, [r7, #32]
 80095ac:	4413      	add	r3, r2
 80095ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095b2:	460a      	mov	r2, r1
 80095b4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80095b6:	6a3b      	ldr	r3, [r7, #32]
 80095b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	f003 0301 	and.w	r3, r3, #1
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	bf0c      	ite	eq
 80095c6:	2301      	moveq	r3, #1
 80095c8:	2300      	movne	r3, #0
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	015a      	lsls	r2, r3, #5
 80095d2:	6a3b      	ldr	r3, [r7, #32]
 80095d4:	4413      	add	r3, r2
 80095d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	69fa      	ldr	r2, [r7, #28]
 80095de:	0151      	lsls	r1, r2, #5
 80095e0:	6a3a      	ldr	r2, [r7, #32]
 80095e2:	440a      	add	r2, r1
 80095e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095e8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80095ec:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	015a      	lsls	r2, r3, #5
 80095f2:	6a3b      	ldr	r3, [r7, #32]
 80095f4:	4413      	add	r3, r2
 80095f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	7e7b      	ldrb	r3, [r7, #25]
 80095fe:	075b      	lsls	r3, r3, #29
 8009600:	69f9      	ldr	r1, [r7, #28]
 8009602:	0148      	lsls	r0, r1, #5
 8009604:	6a39      	ldr	r1, [r7, #32]
 8009606:	4401      	add	r1, r0
 8009608:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800960c:	4313      	orrs	r3, r2
 800960e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009610:	69fb      	ldr	r3, [r7, #28]
 8009612:	015a      	lsls	r2, r3, #5
 8009614:	6a3b      	ldr	r3, [r7, #32]
 8009616:	4413      	add	r3, r2
 8009618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009626:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	78db      	ldrb	r3, [r3, #3]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d004      	beq.n	800963a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009636:	613b      	str	r3, [r7, #16]
 8009638:	e003      	b.n	8009642 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009640:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009648:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	015a      	lsls	r2, r3, #5
 800964e:	6a3b      	ldr	r3, [r7, #32]
 8009650:	4413      	add	r3, r2
 8009652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009656:	461a      	mov	r2, r3
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800965c:	79fb      	ldrb	r3, [r7, #7]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d001      	beq.n	8009666 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8009662:	2300      	movs	r3, #0
 8009664:	e04e      	b.n	8009704 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	78db      	ldrb	r3, [r3, #3]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d149      	bne.n	8009702 <USB_HC_StartXfer+0x276>
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	695b      	ldr	r3, [r3, #20]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d045      	beq.n	8009702 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	79db      	ldrb	r3, [r3, #7]
 800967a:	2b03      	cmp	r3, #3
 800967c:	d830      	bhi.n	80096e0 <USB_HC_StartXfer+0x254>
 800967e:	a201      	add	r2, pc, #4	; (adr r2, 8009684 <USB_HC_StartXfer+0x1f8>)
 8009680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009684:	08009695 	.word	0x08009695
 8009688:	080096b9 	.word	0x080096b9
 800968c:	08009695 	.word	0x08009695
 8009690:	080096b9 	.word	0x080096b9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	695b      	ldr	r3, [r3, #20]
 8009698:	3303      	adds	r3, #3
 800969a:	089b      	lsrs	r3, r3, #2
 800969c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800969e:	8afa      	ldrh	r2, [r7, #22]
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d91c      	bls.n	80096e4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	699b      	ldr	r3, [r3, #24]
 80096ae:	f043 0220 	orr.w	r2, r3, #32
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	619a      	str	r2, [r3, #24]
        }
        break;
 80096b6:	e015      	b.n	80096e4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	695b      	ldr	r3, [r3, #20]
 80096bc:	3303      	adds	r3, #3
 80096be:	089b      	lsrs	r3, r3, #2
 80096c0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80096c2:	8afa      	ldrh	r2, [r7, #22]
 80096c4:	6a3b      	ldr	r3, [r7, #32]
 80096c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	b29b      	uxth	r3, r3
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d90a      	bls.n	80096e8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	699b      	ldr	r3, [r3, #24]
 80096d6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	619a      	str	r2, [r3, #24]
        }
        break;
 80096de:	e003      	b.n	80096e8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80096e0:	bf00      	nop
 80096e2:	e002      	b.n	80096ea <USB_HC_StartXfer+0x25e>
        break;
 80096e4:	bf00      	nop
 80096e6:	e000      	b.n	80096ea <USB_HC_StartXfer+0x25e>
        break;
 80096e8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	68d9      	ldr	r1, [r3, #12]
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	785a      	ldrb	r2, [r3, #1]
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	695b      	ldr	r3, [r3, #20]
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	2000      	movs	r0, #0
 80096fa:	9000      	str	r0, [sp, #0]
 80096fc:	68f8      	ldr	r0, [r7, #12]
 80096fe:	f7ff fb43 	bl	8008d88 <USB_WritePacket>
  }

  return HAL_OK;
 8009702:	2300      	movs	r3, #0
}
 8009704:	4618      	mov	r0, r3
 8009706:	3728      	adds	r7, #40	; 0x28
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	1ff80000 	.word	0x1ff80000

08009710 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009710:	b480      	push	{r7}
 8009712:	b085      	sub	sp, #20
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009722:	695b      	ldr	r3, [r3, #20]
 8009724:	b29b      	uxth	r3, r3
}
 8009726:	4618      	mov	r0, r3
 8009728:	3714      	adds	r7, #20
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr

08009732 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009732:	b480      	push	{r7}
 8009734:	b089      	sub	sp, #36	; 0x24
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	460b      	mov	r3, r1
 800973c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009742:	78fb      	ldrb	r3, [r7, #3]
 8009744:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009746:	2300      	movs	r3, #0
 8009748:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	015a      	lsls	r2, r3, #5
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	4413      	add	r3, r2
 8009752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	0c9b      	lsrs	r3, r3, #18
 800975a:	f003 0303 	and.w	r3, r3, #3
 800975e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	015a      	lsls	r2, r3, #5
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	4413      	add	r3, r2
 8009768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	0fdb      	lsrs	r3, r3, #31
 8009770:	f003 0301 	and.w	r3, r3, #1
 8009774:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	f003 0320 	and.w	r3, r3, #32
 800977e:	2b20      	cmp	r3, #32
 8009780:	d104      	bne.n	800978c <USB_HC_Halt+0x5a>
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d101      	bne.n	800978c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009788:	2300      	movs	r3, #0
 800978a:	e0c6      	b.n	800991a <USB_HC_Halt+0x1e8>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d002      	beq.n	8009798 <USB_HC_Halt+0x66>
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	2b02      	cmp	r3, #2
 8009796:	d162      	bne.n	800985e <USB_HC_Halt+0x12c>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009798:	69bb      	ldr	r3, [r7, #24]
 800979a:	015a      	lsls	r2, r3, #5
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	4413      	add	r3, r2
 80097a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	69ba      	ldr	r2, [r7, #24]
 80097a8:	0151      	lsls	r1, r2, #5
 80097aa:	69fa      	ldr	r2, [r7, #28]
 80097ac:	440a      	add	r2, r1
 80097ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097b6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	f003 0320 	and.w	r3, r3, #32
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	f040 80a9 	bne.w	8009918 <USB_HC_Halt+0x1e6>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d132      	bne.n	8009838 <USB_HC_Halt+0x106>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	015a      	lsls	r2, r3, #5
 80097d6:	69fb      	ldr	r3, [r7, #28]
 80097d8:	4413      	add	r3, r2
 80097da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	69ba      	ldr	r2, [r7, #24]
 80097e2:	0151      	lsls	r1, r2, #5
 80097e4:	69fa      	ldr	r2, [r7, #28]
 80097e6:	440a      	add	r2, r1
 80097e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80097f0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80097f2:	69bb      	ldr	r3, [r7, #24]
 80097f4:	015a      	lsls	r2, r3, #5
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	4413      	add	r3, r2
 80097fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	69ba      	ldr	r2, [r7, #24]
 8009802:	0151      	lsls	r1, r2, #5
 8009804:	69fa      	ldr	r2, [r7, #28]
 8009806:	440a      	add	r2, r1
 8009808:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800980c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009810:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	3301      	adds	r3, #1
 8009816:	60fb      	str	r3, [r7, #12]
 8009818:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800981c:	d81d      	bhi.n	800985a <USB_HC_Halt+0x128>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	015a      	lsls	r2, r3, #5
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	4413      	add	r3, r2
 8009826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009830:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009834:	d0ed      	beq.n	8009812 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009836:	e06f      	b.n	8009918 <USB_HC_Halt+0x1e6>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009838:	69bb      	ldr	r3, [r7, #24]
 800983a:	015a      	lsls	r2, r3, #5
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	4413      	add	r3, r2
 8009840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	69ba      	ldr	r2, [r7, #24]
 8009848:	0151      	lsls	r1, r2, #5
 800984a:	69fa      	ldr	r2, [r7, #28]
 800984c:	440a      	add	r2, r1
 800984e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009852:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009856:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009858:	e05e      	b.n	8009918 <USB_HC_Halt+0x1e6>
            break;
 800985a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800985c:	e05c      	b.n	8009918 <USB_HC_Halt+0x1e6>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	015a      	lsls	r2, r3, #5
 8009862:	69fb      	ldr	r3, [r7, #28]
 8009864:	4413      	add	r3, r2
 8009866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	69ba      	ldr	r2, [r7, #24]
 800986e:	0151      	lsls	r1, r2, #5
 8009870:	69fa      	ldr	r2, [r7, #28]
 8009872:	440a      	add	r2, r1
 8009874:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009878:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800987c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800988a:	2b00      	cmp	r3, #0
 800988c:	d132      	bne.n	80098f4 <USB_HC_Halt+0x1c2>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	015a      	lsls	r2, r3, #5
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	4413      	add	r3, r2
 8009896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	69ba      	ldr	r2, [r7, #24]
 800989e:	0151      	lsls	r1, r2, #5
 80098a0:	69fa      	ldr	r2, [r7, #28]
 80098a2:	440a      	add	r2, r1
 80098a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80098ac:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80098ae:	69bb      	ldr	r3, [r7, #24]
 80098b0:	015a      	lsls	r2, r3, #5
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	4413      	add	r3, r2
 80098b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	69ba      	ldr	r2, [r7, #24]
 80098be:	0151      	lsls	r1, r2, #5
 80098c0:	69fa      	ldr	r2, [r7, #28]
 80098c2:	440a      	add	r2, r1
 80098c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098cc:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	3301      	adds	r3, #1
 80098d2:	60fb      	str	r3, [r7, #12]
 80098d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80098d8:	d81d      	bhi.n	8009916 <USB_HC_Halt+0x1e4>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	015a      	lsls	r2, r3, #5
 80098de:	69fb      	ldr	r3, [r7, #28]
 80098e0:	4413      	add	r3, r2
 80098e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098f0:	d0ed      	beq.n	80098ce <USB_HC_Halt+0x19c>
 80098f2:	e011      	b.n	8009918 <USB_HC_Halt+0x1e6>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80098f4:	69bb      	ldr	r3, [r7, #24]
 80098f6:	015a      	lsls	r2, r3, #5
 80098f8:	69fb      	ldr	r3, [r7, #28]
 80098fa:	4413      	add	r3, r2
 80098fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	69ba      	ldr	r2, [r7, #24]
 8009904:	0151      	lsls	r1, r2, #5
 8009906:	69fa      	ldr	r2, [r7, #28]
 8009908:	440a      	add	r2, r1
 800990a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800990e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009912:	6013      	str	r3, [r2, #0]
 8009914:	e000      	b.n	8009918 <USB_HC_Halt+0x1e6>
          break;
 8009916:	bf00      	nop
    }
  }

  return HAL_OK;
 8009918:	2300      	movs	r3, #0
}
 800991a:	4618      	mov	r0, r3
 800991c:	3724      	adds	r7, #36	; 0x24
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr
	...

08009928 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009928:	b480      	push	{r7}
 800992a:	b087      	sub	sp, #28
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	460b      	mov	r3, r1
 8009932:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009938:	78fb      	ldrb	r3, [r7, #3]
 800993a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800993c:	2301      	movs	r3, #1
 800993e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	04da      	lsls	r2, r3, #19
 8009944:	4b15      	ldr	r3, [pc, #84]	; (800999c <USB_DoPing+0x74>)
 8009946:	4013      	ands	r3, r2
 8009948:	693a      	ldr	r2, [r7, #16]
 800994a:	0151      	lsls	r1, r2, #5
 800994c:	697a      	ldr	r2, [r7, #20]
 800994e:	440a      	add	r2, r1
 8009950:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009954:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009958:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	015a      	lsls	r2, r3, #5
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	4413      	add	r3, r2
 8009962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009970:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009978:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	015a      	lsls	r2, r3, #5
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	4413      	add	r3, r2
 8009982:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009986:	461a      	mov	r2, r3
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800998c:	2300      	movs	r3, #0
}
 800998e:	4618      	mov	r0, r3
 8009990:	371c      	adds	r7, #28
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr
 800999a:	bf00      	nop
 800999c:	1ff80000 	.word	0x1ff80000

080099a0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b088      	sub	sp, #32
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80099a8:	2300      	movs	r3, #0
 80099aa:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80099b0:	2300      	movs	r3, #0
 80099b2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f7ff f92a 	bl	8008c0e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80099ba:	2110      	movs	r1, #16
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f7ff f983 	bl	8008cc8 <USB_FlushTxFifo>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d001      	beq.n	80099cc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f7ff f9ad 	bl	8008d2c <USB_FlushRxFifo>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d001      	beq.n	80099dc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80099dc:	2300      	movs	r3, #0
 80099de:	61bb      	str	r3, [r7, #24]
 80099e0:	e01f      	b.n	8009a22 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80099e2:	69bb      	ldr	r3, [r7, #24]
 80099e4:	015a      	lsls	r2, r3, #5
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	4413      	add	r3, r2
 80099ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099f8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a00:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009a08:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	015a      	lsls	r2, r3, #5
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	4413      	add	r3, r2
 8009a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a16:	461a      	mov	r2, r3
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009a1c:	69bb      	ldr	r3, [r7, #24]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	61bb      	str	r3, [r7, #24]
 8009a22:	69bb      	ldr	r3, [r7, #24]
 8009a24:	2b0f      	cmp	r3, #15
 8009a26:	d9dc      	bls.n	80099e2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009a28:	2300      	movs	r3, #0
 8009a2a:	61bb      	str	r3, [r7, #24]
 8009a2c:	e033      	b.n	8009a96 <USB_StopHost+0xf6>
  {
    value = USBx_HC(i)->HCCHAR;
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	015a      	lsls	r2, r3, #5
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	4413      	add	r3, r2
 8009a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a44:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009a4c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009a54:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	015a      	lsls	r2, r3, #5
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	4413      	add	r3, r2
 8009a5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a62:	461a      	mov	r2, r3
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	60fb      	str	r3, [r7, #12]
 8009a6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a72:	d80c      	bhi.n	8009a8e <USB_StopHost+0xee>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009a74:	69bb      	ldr	r3, [r7, #24]
 8009a76:	015a      	lsls	r2, r3, #5
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	4413      	add	r3, r2
 8009a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a8a:	d0ed      	beq.n	8009a68 <USB_StopHost+0xc8>
 8009a8c:	e000      	b.n	8009a90 <USB_StopHost+0xf0>
        break;
 8009a8e:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009a90:	69bb      	ldr	r3, [r7, #24]
 8009a92:	3301      	adds	r3, #1
 8009a94:	61bb      	str	r3, [r7, #24]
 8009a96:	69bb      	ldr	r3, [r7, #24]
 8009a98:	2b0f      	cmp	r3, #15
 8009a9a:	d9c8      	bls.n	8009a2e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009aa8:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ab0:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	f7ff f89a 	bl	8008bec <USB_EnableGlobalInt>

  return ret;
 8009ab8:	7ffb      	ldrb	r3, [r7, #31]
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3720      	adds	r7, #32
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
	...

08009ac4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8009ac8:	4904      	ldr	r1, [pc, #16]	; (8009adc <MX_FATFS_Init+0x18>)
 8009aca:	4805      	ldr	r0, [pc, #20]	; (8009ae0 <MX_FATFS_Init+0x1c>)
 8009acc:	f006 ff7e 	bl	80109cc <FATFS_LinkDriver>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	4b03      	ldr	r3, [pc, #12]	; (8009ae4 <MX_FATFS_Init+0x20>)
 8009ad6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009ad8:	bf00      	nop
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	2000becc 	.word	0x2000becc
 8009ae0:	080270d8 	.word	0x080270d8
 8009ae4:	2000df38 	.word	0x2000df38

08009ae8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009aec:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	4603      	mov	r3, r0
 8009b00:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8009b02:	2300      	movs	r3, #0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	370c      	adds	r7, #12
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr

08009b10 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b084      	sub	sp, #16
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	4603      	mov	r3, r0
 8009b18:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8009b1e:	79fb      	ldrb	r3, [r7, #7]
 8009b20:	4619      	mov	r1, r3
 8009b22:	4808      	ldr	r0, [pc, #32]	; (8009b44 <USBH_status+0x34>)
 8009b24:	f001 fbdb 	bl	800b2de <USBH_MSC_UnitIsReady>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d002      	beq.n	8009b34 <USBH_status+0x24>
  {
    res = RES_OK;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	73fb      	strb	r3, [r7, #15]
 8009b32:	e001      	b.n	8009b38 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8009b34:	2301      	movs	r3, #1
 8009b36:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3710      	adds	r7, #16
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	2001b9b4 	.word	0x2001b9b4

08009b48 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b094      	sub	sp, #80	; 0x50
 8009b4c:	af02      	add	r7, sp, #8
 8009b4e:	60b9      	str	r1, [r7, #8]
 8009b50:	607a      	str	r2, [r7, #4]
 8009b52:	603b      	str	r3, [r7, #0]
 8009b54:	4603      	mov	r3, r0
 8009b56:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8009b5e:	7bf9      	ldrb	r1, [r7, #15]
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	9300      	str	r3, [sp, #0]
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	4813      	ldr	r0, [pc, #76]	; (8009bb8 <USBH_read+0x70>)
 8009b6a:	f001 fc02 	bl	800b372 <USBH_MSC_Read>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d103      	bne.n	8009b7c <USBH_read+0x34>
  {
    res = RES_OK;
 8009b74:	2300      	movs	r3, #0
 8009b76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009b7a:	e017      	b.n	8009bac <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009b7c:	f107 0210 	add.w	r2, r7, #16
 8009b80:	7bfb      	ldrb	r3, [r7, #15]
 8009b82:	4619      	mov	r1, r3
 8009b84:	480c      	ldr	r0, [pc, #48]	; (8009bb8 <USBH_read+0x70>)
 8009b86:	f001 fbd0 	bl	800b32a <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8009b8a:	7f7b      	ldrb	r3, [r7, #29]
 8009b8c:	2b3a      	cmp	r3, #58	; 0x3a
 8009b8e:	d005      	beq.n	8009b9c <USBH_read+0x54>
 8009b90:	2b3a      	cmp	r3, #58	; 0x3a
 8009b92:	dc07      	bgt.n	8009ba4 <USBH_read+0x5c>
 8009b94:	2b04      	cmp	r3, #4
 8009b96:	d001      	beq.n	8009b9c <USBH_read+0x54>
 8009b98:	2b28      	cmp	r3, #40	; 0x28
 8009b9a:	d103      	bne.n	8009ba4 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009b9c:	2303      	movs	r3, #3
 8009b9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009ba2:	e003      	b.n	8009bac <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009baa:	bf00      	nop
    }
  }

  return res;
 8009bac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3748      	adds	r7, #72	; 0x48
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}
 8009bb8:	2001b9b4 	.word	0x2001b9b4

08009bbc <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b094      	sub	sp, #80	; 0x50
 8009bc0:	af02      	add	r7, sp, #8
 8009bc2:	60b9      	str	r1, [r7, #8]
 8009bc4:	607a      	str	r2, [r7, #4]
 8009bc6:	603b      	str	r3, [r7, #0]
 8009bc8:	4603      	mov	r3, r0
 8009bca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8009bd2:	7bf9      	ldrb	r1, [r7, #15]
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	9300      	str	r3, [sp, #0]
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	4817      	ldr	r0, [pc, #92]	; (8009c3c <USBH_write+0x80>)
 8009bde:	f001 fc31 	bl	800b444 <USBH_MSC_Write>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d103      	bne.n	8009bf0 <USBH_write+0x34>
  {
    res = RES_OK;
 8009be8:	2300      	movs	r3, #0
 8009bea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009bee:	e01f      	b.n	8009c30 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009bf0:	f107 0210 	add.w	r2, r7, #16
 8009bf4:	7bfb      	ldrb	r3, [r7, #15]
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	4810      	ldr	r0, [pc, #64]	; (8009c3c <USBH_write+0x80>)
 8009bfa:	f001 fb96 	bl	800b32a <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8009bfe:	7f7b      	ldrb	r3, [r7, #29]
 8009c00:	2b3a      	cmp	r3, #58	; 0x3a
 8009c02:	d00d      	beq.n	8009c20 <USBH_write+0x64>
 8009c04:	2b3a      	cmp	r3, #58	; 0x3a
 8009c06:	dc0f      	bgt.n	8009c28 <USBH_write+0x6c>
 8009c08:	2b28      	cmp	r3, #40	; 0x28
 8009c0a:	d009      	beq.n	8009c20 <USBH_write+0x64>
 8009c0c:	2b28      	cmp	r3, #40	; 0x28
 8009c0e:	dc0b      	bgt.n	8009c28 <USBH_write+0x6c>
 8009c10:	2b04      	cmp	r3, #4
 8009c12:	d005      	beq.n	8009c20 <USBH_write+0x64>
 8009c14:	2b27      	cmp	r3, #39	; 0x27
 8009c16:	d107      	bne.n	8009c28 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8009c18:	2302      	movs	r3, #2
 8009c1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009c1e:	e007      	b.n	8009c30 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009c20:	2303      	movs	r3, #3
 8009c22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009c26:	e003      	b.n	8009c30 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009c2e:	bf00      	nop
    }
  }

  return res;
 8009c30:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3748      	adds	r7, #72	; 0x48
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	2001b9b4 	.word	0x2001b9b4

08009c40 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b090      	sub	sp, #64	; 0x40
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	4603      	mov	r3, r0
 8009c48:	603a      	str	r2, [r7, #0]
 8009c4a:	71fb      	strb	r3, [r7, #7]
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8009c56:	79bb      	ldrb	r3, [r7, #6]
 8009c58:	2b03      	cmp	r3, #3
 8009c5a:	d852      	bhi.n	8009d02 <USBH_ioctl+0xc2>
 8009c5c:	a201      	add	r2, pc, #4	; (adr r2, 8009c64 <USBH_ioctl+0x24>)
 8009c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c62:	bf00      	nop
 8009c64:	08009c75 	.word	0x08009c75
 8009c68:	08009c7d 	.word	0x08009c7d
 8009c6c:	08009ca7 	.word	0x08009ca7
 8009c70:	08009cd3 	.word	0x08009cd3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8009c74:	2300      	movs	r3, #0
 8009c76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009c7a:	e045      	b.n	8009d08 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009c7c:	f107 0208 	add.w	r2, r7, #8
 8009c80:	79fb      	ldrb	r3, [r7, #7]
 8009c82:	4619      	mov	r1, r3
 8009c84:	4823      	ldr	r0, [pc, #140]	; (8009d14 <USBH_ioctl+0xd4>)
 8009c86:	f001 fb50 	bl	800b32a <USBH_MSC_GetLUNInfo>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d106      	bne.n	8009c9e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8009c90:	68fa      	ldr	r2, [r7, #12]
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009c96:	2300      	movs	r3, #0
 8009c98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009c9c:	e034      	b.n	8009d08 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009ca4:	e030      	b.n	8009d08 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009ca6:	f107 0208 	add.w	r2, r7, #8
 8009caa:	79fb      	ldrb	r3, [r7, #7]
 8009cac:	4619      	mov	r1, r3
 8009cae:	4819      	ldr	r0, [pc, #100]	; (8009d14 <USBH_ioctl+0xd4>)
 8009cb0:	f001 fb3b 	bl	800b32a <USBH_MSC_GetLUNInfo>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d107      	bne.n	8009cca <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8009cba:	8a3b      	ldrh	r3, [r7, #16]
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009cc8:	e01e      	b.n	8009d08 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009cd0:	e01a      	b.n	8009d08 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009cd2:	f107 0208 	add.w	r2, r7, #8
 8009cd6:	79fb      	ldrb	r3, [r7, #7]
 8009cd8:	4619      	mov	r1, r3
 8009cda:	480e      	ldr	r0, [pc, #56]	; (8009d14 <USBH_ioctl+0xd4>)
 8009cdc:	f001 fb25 	bl	800b32a <USBH_MSC_GetLUNInfo>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d109      	bne.n	8009cfa <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8009ce6:	8a3b      	ldrh	r3, [r7, #16]
 8009ce8:	0a5b      	lsrs	r3, r3, #9
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	461a      	mov	r2, r3
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009cf8:	e006      	b.n	8009d08 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009d00:	e002      	b.n	8009d08 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8009d02:	2304      	movs	r3, #4
 8009d04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8009d08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3740      	adds	r7, #64	; 0x40
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	2001b9b4 	.word	0x2001b9b4

08009d18 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009d18:	b5b0      	push	{r4, r5, r7, lr}
 8009d1a:	b08e      	sub	sp, #56	; 0x38
 8009d1c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8009d1e:	4ba0      	ldr	r3, [pc, #640]	; (8009fa0 <MX_LWIP_Init+0x288>)
 8009d20:	22c0      	movs	r2, #192	; 0xc0
 8009d22:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8009d24:	4b9e      	ldr	r3, [pc, #632]	; (8009fa0 <MX_LWIP_Init+0x288>)
 8009d26:	22a8      	movs	r2, #168	; 0xa8
 8009d28:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
 8009d2a:	4b9d      	ldr	r3, [pc, #628]	; (8009fa0 <MX_LWIP_Init+0x288>)
 8009d2c:	2212      	movs	r2, #18
 8009d2e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 88;
 8009d30:	4b9b      	ldr	r3, [pc, #620]	; (8009fa0 <MX_LWIP_Init+0x288>)
 8009d32:	2258      	movs	r2, #88	; 0x58
 8009d34:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8009d36:	4b9b      	ldr	r3, [pc, #620]	; (8009fa4 <MX_LWIP_Init+0x28c>)
 8009d38:	22ff      	movs	r2, #255	; 0xff
 8009d3a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009d3c:	4b99      	ldr	r3, [pc, #612]	; (8009fa4 <MX_LWIP_Init+0x28c>)
 8009d3e:	22ff      	movs	r2, #255	; 0xff
 8009d40:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8009d42:	4b98      	ldr	r3, [pc, #608]	; (8009fa4 <MX_LWIP_Init+0x28c>)
 8009d44:	22ff      	movs	r2, #255	; 0xff
 8009d46:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8009d48:	4b96      	ldr	r3, [pc, #600]	; (8009fa4 <MX_LWIP_Init+0x28c>)
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8009d4e:	4b96      	ldr	r3, [pc, #600]	; (8009fa8 <MX_LWIP_Init+0x290>)
 8009d50:	22c0      	movs	r2, #192	; 0xc0
 8009d52:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8009d54:	4b94      	ldr	r3, [pc, #592]	; (8009fa8 <MX_LWIP_Init+0x290>)
 8009d56:	22a8      	movs	r2, #168	; 0xa8
 8009d58:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
 8009d5a:	4b93      	ldr	r3, [pc, #588]	; (8009fa8 <MX_LWIP_Init+0x290>)
 8009d5c:	2212      	movs	r2, #18
 8009d5e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8009d60:	4b91      	ldr	r3, [pc, #580]	; (8009fa8 <MX_LWIP_Init+0x290>)
 8009d62:	2201      	movs	r2, #1
 8009d64:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8009d66:	2100      	movs	r1, #0
 8009d68:	2000      	movs	r0, #0
 8009d6a:	f009 ffd7 	bl	8013d1c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8009d6e:	4b8c      	ldr	r3, [pc, #560]	; (8009fa0 <MX_LWIP_Init+0x288>)
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	061a      	lsls	r2, r3, #24
 8009d74:	4b8a      	ldr	r3, [pc, #552]	; (8009fa0 <MX_LWIP_Init+0x288>)
 8009d76:	785b      	ldrb	r3, [r3, #1]
 8009d78:	041b      	lsls	r3, r3, #16
 8009d7a:	431a      	orrs	r2, r3
 8009d7c:	4b88      	ldr	r3, [pc, #544]	; (8009fa0 <MX_LWIP_Init+0x288>)
 8009d7e:	789b      	ldrb	r3, [r3, #2]
 8009d80:	021b      	lsls	r3, r3, #8
 8009d82:	4313      	orrs	r3, r2
 8009d84:	4a86      	ldr	r2, [pc, #536]	; (8009fa0 <MX_LWIP_Init+0x288>)
 8009d86:	78d2      	ldrb	r2, [r2, #3]
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	061a      	lsls	r2, r3, #24
 8009d8c:	4b84      	ldr	r3, [pc, #528]	; (8009fa0 <MX_LWIP_Init+0x288>)
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	0619      	lsls	r1, r3, #24
 8009d92:	4b83      	ldr	r3, [pc, #524]	; (8009fa0 <MX_LWIP_Init+0x288>)
 8009d94:	785b      	ldrb	r3, [r3, #1]
 8009d96:	041b      	lsls	r3, r3, #16
 8009d98:	4319      	orrs	r1, r3
 8009d9a:	4b81      	ldr	r3, [pc, #516]	; (8009fa0 <MX_LWIP_Init+0x288>)
 8009d9c:	789b      	ldrb	r3, [r3, #2]
 8009d9e:	021b      	lsls	r3, r3, #8
 8009da0:	430b      	orrs	r3, r1
 8009da2:	497f      	ldr	r1, [pc, #508]	; (8009fa0 <MX_LWIP_Init+0x288>)
 8009da4:	78c9      	ldrb	r1, [r1, #3]
 8009da6:	430b      	orrs	r3, r1
 8009da8:	021b      	lsls	r3, r3, #8
 8009daa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009dae:	431a      	orrs	r2, r3
 8009db0:	4b7b      	ldr	r3, [pc, #492]	; (8009fa0 <MX_LWIP_Init+0x288>)
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	0619      	lsls	r1, r3, #24
 8009db6:	4b7a      	ldr	r3, [pc, #488]	; (8009fa0 <MX_LWIP_Init+0x288>)
 8009db8:	785b      	ldrb	r3, [r3, #1]
 8009dba:	041b      	lsls	r3, r3, #16
 8009dbc:	4319      	orrs	r1, r3
 8009dbe:	4b78      	ldr	r3, [pc, #480]	; (8009fa0 <MX_LWIP_Init+0x288>)
 8009dc0:	789b      	ldrb	r3, [r3, #2]
 8009dc2:	021b      	lsls	r3, r3, #8
 8009dc4:	430b      	orrs	r3, r1
 8009dc6:	4976      	ldr	r1, [pc, #472]	; (8009fa0 <MX_LWIP_Init+0x288>)
 8009dc8:	78c9      	ldrb	r1, [r1, #3]
 8009dca:	430b      	orrs	r3, r1
 8009dcc:	0a1b      	lsrs	r3, r3, #8
 8009dce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009dd2:	431a      	orrs	r2, r3
 8009dd4:	4b72      	ldr	r3, [pc, #456]	; (8009fa0 <MX_LWIP_Init+0x288>)
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	0619      	lsls	r1, r3, #24
 8009dda:	4b71      	ldr	r3, [pc, #452]	; (8009fa0 <MX_LWIP_Init+0x288>)
 8009ddc:	785b      	ldrb	r3, [r3, #1]
 8009dde:	041b      	lsls	r3, r3, #16
 8009de0:	4319      	orrs	r1, r3
 8009de2:	4b6f      	ldr	r3, [pc, #444]	; (8009fa0 <MX_LWIP_Init+0x288>)
 8009de4:	789b      	ldrb	r3, [r3, #2]
 8009de6:	021b      	lsls	r3, r3, #8
 8009de8:	430b      	orrs	r3, r1
 8009dea:	496d      	ldr	r1, [pc, #436]	; (8009fa0 <MX_LWIP_Init+0x288>)
 8009dec:	78c9      	ldrb	r1, [r1, #3]
 8009dee:	430b      	orrs	r3, r1
 8009df0:	0e1b      	lsrs	r3, r3, #24
 8009df2:	4313      	orrs	r3, r2
 8009df4:	4a6d      	ldr	r2, [pc, #436]	; (8009fac <MX_LWIP_Init+0x294>)
 8009df6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009df8:	4b6a      	ldr	r3, [pc, #424]	; (8009fa4 <MX_LWIP_Init+0x28c>)
 8009dfa:	781b      	ldrb	r3, [r3, #0]
 8009dfc:	061a      	lsls	r2, r3, #24
 8009dfe:	4b69      	ldr	r3, [pc, #420]	; (8009fa4 <MX_LWIP_Init+0x28c>)
 8009e00:	785b      	ldrb	r3, [r3, #1]
 8009e02:	041b      	lsls	r3, r3, #16
 8009e04:	431a      	orrs	r2, r3
 8009e06:	4b67      	ldr	r3, [pc, #412]	; (8009fa4 <MX_LWIP_Init+0x28c>)
 8009e08:	789b      	ldrb	r3, [r3, #2]
 8009e0a:	021b      	lsls	r3, r3, #8
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	4a65      	ldr	r2, [pc, #404]	; (8009fa4 <MX_LWIP_Init+0x28c>)
 8009e10:	78d2      	ldrb	r2, [r2, #3]
 8009e12:	4313      	orrs	r3, r2
 8009e14:	061a      	lsls	r2, r3, #24
 8009e16:	4b63      	ldr	r3, [pc, #396]	; (8009fa4 <MX_LWIP_Init+0x28c>)
 8009e18:	781b      	ldrb	r3, [r3, #0]
 8009e1a:	0619      	lsls	r1, r3, #24
 8009e1c:	4b61      	ldr	r3, [pc, #388]	; (8009fa4 <MX_LWIP_Init+0x28c>)
 8009e1e:	785b      	ldrb	r3, [r3, #1]
 8009e20:	041b      	lsls	r3, r3, #16
 8009e22:	4319      	orrs	r1, r3
 8009e24:	4b5f      	ldr	r3, [pc, #380]	; (8009fa4 <MX_LWIP_Init+0x28c>)
 8009e26:	789b      	ldrb	r3, [r3, #2]
 8009e28:	021b      	lsls	r3, r3, #8
 8009e2a:	430b      	orrs	r3, r1
 8009e2c:	495d      	ldr	r1, [pc, #372]	; (8009fa4 <MX_LWIP_Init+0x28c>)
 8009e2e:	78c9      	ldrb	r1, [r1, #3]
 8009e30:	430b      	orrs	r3, r1
 8009e32:	021b      	lsls	r3, r3, #8
 8009e34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009e38:	431a      	orrs	r2, r3
 8009e3a:	4b5a      	ldr	r3, [pc, #360]	; (8009fa4 <MX_LWIP_Init+0x28c>)
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	0619      	lsls	r1, r3, #24
 8009e40:	4b58      	ldr	r3, [pc, #352]	; (8009fa4 <MX_LWIP_Init+0x28c>)
 8009e42:	785b      	ldrb	r3, [r3, #1]
 8009e44:	041b      	lsls	r3, r3, #16
 8009e46:	4319      	orrs	r1, r3
 8009e48:	4b56      	ldr	r3, [pc, #344]	; (8009fa4 <MX_LWIP_Init+0x28c>)
 8009e4a:	789b      	ldrb	r3, [r3, #2]
 8009e4c:	021b      	lsls	r3, r3, #8
 8009e4e:	430b      	orrs	r3, r1
 8009e50:	4954      	ldr	r1, [pc, #336]	; (8009fa4 <MX_LWIP_Init+0x28c>)
 8009e52:	78c9      	ldrb	r1, [r1, #3]
 8009e54:	430b      	orrs	r3, r1
 8009e56:	0a1b      	lsrs	r3, r3, #8
 8009e58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009e5c:	431a      	orrs	r2, r3
 8009e5e:	4b51      	ldr	r3, [pc, #324]	; (8009fa4 <MX_LWIP_Init+0x28c>)
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	0619      	lsls	r1, r3, #24
 8009e64:	4b4f      	ldr	r3, [pc, #316]	; (8009fa4 <MX_LWIP_Init+0x28c>)
 8009e66:	785b      	ldrb	r3, [r3, #1]
 8009e68:	041b      	lsls	r3, r3, #16
 8009e6a:	4319      	orrs	r1, r3
 8009e6c:	4b4d      	ldr	r3, [pc, #308]	; (8009fa4 <MX_LWIP_Init+0x28c>)
 8009e6e:	789b      	ldrb	r3, [r3, #2]
 8009e70:	021b      	lsls	r3, r3, #8
 8009e72:	430b      	orrs	r3, r1
 8009e74:	494b      	ldr	r1, [pc, #300]	; (8009fa4 <MX_LWIP_Init+0x28c>)
 8009e76:	78c9      	ldrb	r1, [r1, #3]
 8009e78:	430b      	orrs	r3, r1
 8009e7a:	0e1b      	lsrs	r3, r3, #24
 8009e7c:	4313      	orrs	r3, r2
 8009e7e:	4a4c      	ldr	r2, [pc, #304]	; (8009fb0 <MX_LWIP_Init+0x298>)
 8009e80:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009e82:	4b49      	ldr	r3, [pc, #292]	; (8009fa8 <MX_LWIP_Init+0x290>)
 8009e84:	781b      	ldrb	r3, [r3, #0]
 8009e86:	061a      	lsls	r2, r3, #24
 8009e88:	4b47      	ldr	r3, [pc, #284]	; (8009fa8 <MX_LWIP_Init+0x290>)
 8009e8a:	785b      	ldrb	r3, [r3, #1]
 8009e8c:	041b      	lsls	r3, r3, #16
 8009e8e:	431a      	orrs	r2, r3
 8009e90:	4b45      	ldr	r3, [pc, #276]	; (8009fa8 <MX_LWIP_Init+0x290>)
 8009e92:	789b      	ldrb	r3, [r3, #2]
 8009e94:	021b      	lsls	r3, r3, #8
 8009e96:	4313      	orrs	r3, r2
 8009e98:	4a43      	ldr	r2, [pc, #268]	; (8009fa8 <MX_LWIP_Init+0x290>)
 8009e9a:	78d2      	ldrb	r2, [r2, #3]
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	061a      	lsls	r2, r3, #24
 8009ea0:	4b41      	ldr	r3, [pc, #260]	; (8009fa8 <MX_LWIP_Init+0x290>)
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	0619      	lsls	r1, r3, #24
 8009ea6:	4b40      	ldr	r3, [pc, #256]	; (8009fa8 <MX_LWIP_Init+0x290>)
 8009ea8:	785b      	ldrb	r3, [r3, #1]
 8009eaa:	041b      	lsls	r3, r3, #16
 8009eac:	4319      	orrs	r1, r3
 8009eae:	4b3e      	ldr	r3, [pc, #248]	; (8009fa8 <MX_LWIP_Init+0x290>)
 8009eb0:	789b      	ldrb	r3, [r3, #2]
 8009eb2:	021b      	lsls	r3, r3, #8
 8009eb4:	430b      	orrs	r3, r1
 8009eb6:	493c      	ldr	r1, [pc, #240]	; (8009fa8 <MX_LWIP_Init+0x290>)
 8009eb8:	78c9      	ldrb	r1, [r1, #3]
 8009eba:	430b      	orrs	r3, r1
 8009ebc:	021b      	lsls	r3, r3, #8
 8009ebe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009ec2:	431a      	orrs	r2, r3
 8009ec4:	4b38      	ldr	r3, [pc, #224]	; (8009fa8 <MX_LWIP_Init+0x290>)
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	0619      	lsls	r1, r3, #24
 8009eca:	4b37      	ldr	r3, [pc, #220]	; (8009fa8 <MX_LWIP_Init+0x290>)
 8009ecc:	785b      	ldrb	r3, [r3, #1]
 8009ece:	041b      	lsls	r3, r3, #16
 8009ed0:	4319      	orrs	r1, r3
 8009ed2:	4b35      	ldr	r3, [pc, #212]	; (8009fa8 <MX_LWIP_Init+0x290>)
 8009ed4:	789b      	ldrb	r3, [r3, #2]
 8009ed6:	021b      	lsls	r3, r3, #8
 8009ed8:	430b      	orrs	r3, r1
 8009eda:	4933      	ldr	r1, [pc, #204]	; (8009fa8 <MX_LWIP_Init+0x290>)
 8009edc:	78c9      	ldrb	r1, [r1, #3]
 8009ede:	430b      	orrs	r3, r1
 8009ee0:	0a1b      	lsrs	r3, r3, #8
 8009ee2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009ee6:	431a      	orrs	r2, r3
 8009ee8:	4b2f      	ldr	r3, [pc, #188]	; (8009fa8 <MX_LWIP_Init+0x290>)
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	0619      	lsls	r1, r3, #24
 8009eee:	4b2e      	ldr	r3, [pc, #184]	; (8009fa8 <MX_LWIP_Init+0x290>)
 8009ef0:	785b      	ldrb	r3, [r3, #1]
 8009ef2:	041b      	lsls	r3, r3, #16
 8009ef4:	4319      	orrs	r1, r3
 8009ef6:	4b2c      	ldr	r3, [pc, #176]	; (8009fa8 <MX_LWIP_Init+0x290>)
 8009ef8:	789b      	ldrb	r3, [r3, #2]
 8009efa:	021b      	lsls	r3, r3, #8
 8009efc:	430b      	orrs	r3, r1
 8009efe:	492a      	ldr	r1, [pc, #168]	; (8009fa8 <MX_LWIP_Init+0x290>)
 8009f00:	78c9      	ldrb	r1, [r1, #3]
 8009f02:	430b      	orrs	r3, r1
 8009f04:	0e1b      	lsrs	r3, r3, #24
 8009f06:	4313      	orrs	r3, r2
 8009f08:	4a2a      	ldr	r2, [pc, #168]	; (8009fb4 <MX_LWIP_Init+0x29c>)
 8009f0a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8009f0c:	4b2a      	ldr	r3, [pc, #168]	; (8009fb8 <MX_LWIP_Init+0x2a0>)
 8009f0e:	9302      	str	r3, [sp, #8]
 8009f10:	4b2a      	ldr	r3, [pc, #168]	; (8009fbc <MX_LWIP_Init+0x2a4>)
 8009f12:	9301      	str	r3, [sp, #4]
 8009f14:	2300      	movs	r3, #0
 8009f16:	9300      	str	r3, [sp, #0]
 8009f18:	4b26      	ldr	r3, [pc, #152]	; (8009fb4 <MX_LWIP_Init+0x29c>)
 8009f1a:	4a25      	ldr	r2, [pc, #148]	; (8009fb0 <MX_LWIP_Init+0x298>)
 8009f1c:	4923      	ldr	r1, [pc, #140]	; (8009fac <MX_LWIP_Init+0x294>)
 8009f1e:	4828      	ldr	r0, [pc, #160]	; (8009fc0 <MX_LWIP_Init+0x2a8>)
 8009f20:	f00c fd28 	bl	8016974 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009f24:	4826      	ldr	r0, [pc, #152]	; (8009fc0 <MX_LWIP_Init+0x2a8>)
 8009f26:	f00c fed7 	bl	8016cd8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8009f2a:	4b25      	ldr	r3, [pc, #148]	; (8009fc0 <MX_LWIP_Init+0x2a8>)
 8009f2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f30:	089b      	lsrs	r3, r3, #2
 8009f32:	f003 0301 	and.w	r3, r3, #1
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d003      	beq.n	8009f44 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009f3c:	4820      	ldr	r0, [pc, #128]	; (8009fc0 <MX_LWIP_Init+0x2a8>)
 8009f3e:	f00c fedb 	bl	8016cf8 <netif_set_up>
 8009f42:	e002      	b.n	8009f4a <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8009f44:	481e      	ldr	r0, [pc, #120]	; (8009fc0 <MX_LWIP_Init+0x2a8>)
 8009f46:	f00c ff43 	bl	8016dd0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8009f4a:	491e      	ldr	r1, [pc, #120]	; (8009fc4 <MX_LWIP_Init+0x2ac>)
 8009f4c:	481c      	ldr	r0, [pc, #112]	; (8009fc0 <MX_LWIP_Init+0x2a8>)
 8009f4e:	f00c ffd5 	bl	8016efc <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8009f52:	2300      	movs	r3, #0
 8009f54:	623b      	str	r3, [r7, #32]
 8009f56:	2300      	movs	r3, #0
 8009f58:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8009f5a:	f107 0320 	add.w	r3, r7, #32
 8009f5e:	2101      	movs	r1, #1
 8009f60:	4618      	mov	r0, r3
 8009f62:	f006 fecb 	bl	8010cfc <osSemaphoreCreate>
 8009f66:	4603      	mov	r3, r0
 8009f68:	4a17      	ldr	r2, [pc, #92]	; (8009fc8 <MX_LWIP_Init+0x2b0>)
 8009f6a:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8009f6c:	4b17      	ldr	r3, [pc, #92]	; (8009fcc <MX_LWIP_Init+0x2b4>)
 8009f6e:	4a14      	ldr	r2, [pc, #80]	; (8009fc0 <MX_LWIP_Init+0x2a8>)
 8009f70:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8009f72:	4b15      	ldr	r3, [pc, #84]	; (8009fc8 <MX_LWIP_Init+0x2b0>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a15      	ldr	r2, [pc, #84]	; (8009fcc <MX_LWIP_Init+0x2b4>)
 8009f78:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8009f7a:	4b15      	ldr	r3, [pc, #84]	; (8009fd0 <MX_LWIP_Init+0x2b8>)
 8009f7c:	1d3c      	adds	r4, r7, #4
 8009f7e:	461d      	mov	r5, r3
 8009f80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009f84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009f88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8009f8c:	1d3b      	adds	r3, r7, #4
 8009f8e:	490f      	ldr	r1, [pc, #60]	; (8009fcc <MX_LWIP_Init+0x2b4>)
 8009f90:	4618      	mov	r0, r3
 8009f92:	f006 fdb7 	bl	8010b04 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009f96:	bf00      	nop
 8009f98:	3728      	adds	r7, #40	; 0x28
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bdb0      	pop	{r4, r5, r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	2000df84 	.word	0x2000df84
 8009fa4:	2000df80 	.word	0x2000df80
 8009fa8:	2000df44 	.word	0x2000df44
 8009fac:	2000df7c 	.word	0x2000df7c
 8009fb0:	2000df88 	.word	0x2000df88
 8009fb4:	2000df8c 	.word	0x2000df8c
 8009fb8:	08013c59 	.word	0x08013c59
 8009fbc:	0800a629 	.word	0x0800a629
 8009fc0:	2000df48 	.word	0x2000df48
 8009fc4:	0800a70d 	.word	0x0800a70d
 8009fc8:	200010ac 	.word	0x200010ac
 8009fcc:	2000df3c 	.word	0x2000df3c
 8009fd0:	08023cdc 	.word	0x08023cdc

08009fd4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b08e      	sub	sp, #56	; 0x38
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	601a      	str	r2, [r3, #0]
 8009fe4:	605a      	str	r2, [r3, #4]
 8009fe6:	609a      	str	r2, [r3, #8]
 8009fe8:	60da      	str	r2, [r3, #12]
 8009fea:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a52      	ldr	r2, [pc, #328]	; (800a13c <HAL_ETH_MspInit+0x168>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	f040 809e 	bne.w	800a134 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009ff8:	4b51      	ldr	r3, [pc, #324]	; (800a140 <HAL_ETH_MspInit+0x16c>)
 8009ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ffc:	4a50      	ldr	r2, [pc, #320]	; (800a140 <HAL_ETH_MspInit+0x16c>)
 8009ffe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a002:	6313      	str	r3, [r2, #48]	; 0x30
 800a004:	4b4e      	ldr	r3, [pc, #312]	; (800a140 <HAL_ETH_MspInit+0x16c>)
 800a006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a00c:	623b      	str	r3, [r7, #32]
 800a00e:	6a3b      	ldr	r3, [r7, #32]
 800a010:	4b4b      	ldr	r3, [pc, #300]	; (800a140 <HAL_ETH_MspInit+0x16c>)
 800a012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a014:	4a4a      	ldr	r2, [pc, #296]	; (800a140 <HAL_ETH_MspInit+0x16c>)
 800a016:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a01a:	6313      	str	r3, [r2, #48]	; 0x30
 800a01c:	4b48      	ldr	r3, [pc, #288]	; (800a140 <HAL_ETH_MspInit+0x16c>)
 800a01e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a020:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a024:	61fb      	str	r3, [r7, #28]
 800a026:	69fb      	ldr	r3, [r7, #28]
 800a028:	4b45      	ldr	r3, [pc, #276]	; (800a140 <HAL_ETH_MspInit+0x16c>)
 800a02a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a02c:	4a44      	ldr	r2, [pc, #272]	; (800a140 <HAL_ETH_MspInit+0x16c>)
 800a02e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a032:	6313      	str	r3, [r2, #48]	; 0x30
 800a034:	4b42      	ldr	r3, [pc, #264]	; (800a140 <HAL_ETH_MspInit+0x16c>)
 800a036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a03c:	61bb      	str	r3, [r7, #24]
 800a03e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a040:	4b3f      	ldr	r3, [pc, #252]	; (800a140 <HAL_ETH_MspInit+0x16c>)
 800a042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a044:	4a3e      	ldr	r2, [pc, #248]	; (800a140 <HAL_ETH_MspInit+0x16c>)
 800a046:	f043 0304 	orr.w	r3, r3, #4
 800a04a:	6313      	str	r3, [r2, #48]	; 0x30
 800a04c:	4b3c      	ldr	r3, [pc, #240]	; (800a140 <HAL_ETH_MspInit+0x16c>)
 800a04e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a050:	f003 0304 	and.w	r3, r3, #4
 800a054:	617b      	str	r3, [r7, #20]
 800a056:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a058:	4b39      	ldr	r3, [pc, #228]	; (800a140 <HAL_ETH_MspInit+0x16c>)
 800a05a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a05c:	4a38      	ldr	r2, [pc, #224]	; (800a140 <HAL_ETH_MspInit+0x16c>)
 800a05e:	f043 0301 	orr.w	r3, r3, #1
 800a062:	6313      	str	r3, [r2, #48]	; 0x30
 800a064:	4b36      	ldr	r3, [pc, #216]	; (800a140 <HAL_ETH_MspInit+0x16c>)
 800a066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a068:	f003 0301 	and.w	r3, r3, #1
 800a06c:	613b      	str	r3, [r7, #16]
 800a06e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a070:	4b33      	ldr	r3, [pc, #204]	; (800a140 <HAL_ETH_MspInit+0x16c>)
 800a072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a074:	4a32      	ldr	r2, [pc, #200]	; (800a140 <HAL_ETH_MspInit+0x16c>)
 800a076:	f043 0302 	orr.w	r3, r3, #2
 800a07a:	6313      	str	r3, [r2, #48]	; 0x30
 800a07c:	4b30      	ldr	r3, [pc, #192]	; (800a140 <HAL_ETH_MspInit+0x16c>)
 800a07e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a080:	f003 0302 	and.w	r3, r3, #2
 800a084:	60fb      	str	r3, [r7, #12]
 800a086:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a088:	4b2d      	ldr	r3, [pc, #180]	; (800a140 <HAL_ETH_MspInit+0x16c>)
 800a08a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a08c:	4a2c      	ldr	r2, [pc, #176]	; (800a140 <HAL_ETH_MspInit+0x16c>)
 800a08e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a092:	6313      	str	r3, [r2, #48]	; 0x30
 800a094:	4b2a      	ldr	r3, [pc, #168]	; (800a140 <HAL_ETH_MspInit+0x16c>)
 800a096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a09c:	60bb      	str	r3, [r7, #8]
 800a09e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800a0a0:	2332      	movs	r3, #50	; 0x32
 800a0a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0a4:	2302      	movs	r3, #2
 800a0a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0ac:	2303      	movs	r3, #3
 800a0ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a0b0:	230b      	movs	r3, #11
 800a0b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a0b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	4822      	ldr	r0, [pc, #136]	; (800a144 <HAL_ETH_MspInit+0x170>)
 800a0bc:	f7fa fe04 	bl	8004cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800a0c0:	2386      	movs	r3, #134	; 0x86
 800a0c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0c4:	2302      	movs	r3, #2
 800a0c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0cc:	2303      	movs	r3, #3
 800a0ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a0d0:	230b      	movs	r3, #11
 800a0d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a0d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0d8:	4619      	mov	r1, r3
 800a0da:	481b      	ldr	r0, [pc, #108]	; (800a148 <HAL_ETH_MspInit+0x174>)
 800a0dc:	f7fa fdf4 	bl	8004cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800a0e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a0e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0e6:	2302      	movs	r3, #2
 800a0e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0ee:	2303      	movs	r3, #3
 800a0f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a0f2:	230b      	movs	r3, #11
 800a0f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800a0f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	4813      	ldr	r0, [pc, #76]	; (800a14c <HAL_ETH_MspInit+0x178>)
 800a0fe:	f7fa fde3 	bl	8004cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800a102:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a106:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a108:	2302      	movs	r3, #2
 800a10a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a10c:	2300      	movs	r3, #0
 800a10e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a110:	2303      	movs	r3, #3
 800a112:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a114:	230b      	movs	r3, #11
 800a116:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a11c:	4619      	mov	r1, r3
 800a11e:	480c      	ldr	r0, [pc, #48]	; (800a150 <HAL_ETH_MspInit+0x17c>)
 800a120:	f7fa fdd2 	bl	8004cc8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800a124:	2200      	movs	r2, #0
 800a126:	2105      	movs	r1, #5
 800a128:	203d      	movs	r0, #61	; 0x3d
 800a12a:	f7f9 fc1f 	bl	800396c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800a12e:	203d      	movs	r0, #61	; 0x3d
 800a130:	f7f9 fc38 	bl	80039a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800a134:	bf00      	nop
 800a136:	3738      	adds	r7, #56	; 0x38
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	40028000 	.word	0x40028000
 800a140:	40023800 	.word	0x40023800
 800a144:	40020800 	.word	0x40020800
 800a148:	40020000 	.word	0x40020000
 800a14c:	40020400 	.word	0x40020400
 800a150:	40021800 	.word	0x40021800

0800a154 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800a15c:	4b04      	ldr	r3, [pc, #16]	; (800a170 <HAL_ETH_RxCpltCallback+0x1c>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4618      	mov	r0, r3
 800a162:	f006 fe4b 	bl	8010dfc <osSemaphoreRelease>
}
 800a166:	bf00      	nop
 800a168:	3708      	adds	r7, #8
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	200010b0 	.word	0x200010b0

0800a174 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a174:	b5b0      	push	{r4, r5, r7, lr}
 800a176:	b090      	sub	sp, #64	; 0x40
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800a17c:	2300      	movs	r3, #0
 800a17e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a180:	4b60      	ldr	r3, [pc, #384]	; (800a304 <low_level_init+0x190>)
 800a182:	4a61      	ldr	r2, [pc, #388]	; (800a308 <low_level_init+0x194>)
 800a184:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800a186:	4b5f      	ldr	r3, [pc, #380]	; (800a304 <low_level_init+0x190>)
 800a188:	2201      	movs	r2, #1
 800a18a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800a18c:	4b5d      	ldr	r3, [pc, #372]	; (800a304 <low_level_init+0x190>)
 800a18e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a192:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800a194:	4b5b      	ldr	r3, [pc, #364]	; (800a304 <low_level_init+0x190>)
 800a196:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a19a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800a19c:	4b59      	ldr	r3, [pc, #356]	; (800a304 <low_level_init+0x190>)
 800a19e:	2200      	movs	r2, #0
 800a1a0:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800a1a8:	2380      	movs	r3, #128	; 0x80
 800a1aa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800a1ae:	23e1      	movs	r3, #225	; 0xe1
 800a1b0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800a1c6:	4a4f      	ldr	r2, [pc, #316]	; (800a304 <low_level_init+0x190>)
 800a1c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a1cc:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800a1ce:	4b4d      	ldr	r3, [pc, #308]	; (800a304 <low_level_init+0x190>)
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800a1d4:	4b4b      	ldr	r3, [pc, #300]	; (800a304 <low_level_init+0x190>)
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800a1da:	4b4a      	ldr	r3, [pc, #296]	; (800a304 <low_level_init+0x190>)
 800a1dc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800a1e0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a1e2:	4848      	ldr	r0, [pc, #288]	; (800a304 <low_level_init+0x190>)
 800a1e4:	f7f9 fbec 	bl	80039c0 <HAL_ETH_Init>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800a1ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d108      	bne.n	800a208 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a1fc:	f043 0304 	orr.w	r3, r3, #4
 800a200:	b2da      	uxtb	r2, r3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800a208:	2304      	movs	r3, #4
 800a20a:	4a40      	ldr	r2, [pc, #256]	; (800a30c <low_level_init+0x198>)
 800a20c:	4940      	ldr	r1, [pc, #256]	; (800a310 <low_level_init+0x19c>)
 800a20e:	483d      	ldr	r0, [pc, #244]	; (800a304 <low_level_init+0x190>)
 800a210:	f7f9 fd70 	bl	8003cf4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800a214:	2304      	movs	r3, #4
 800a216:	4a3f      	ldr	r2, [pc, #252]	; (800a314 <low_level_init+0x1a0>)
 800a218:	493f      	ldr	r1, [pc, #252]	; (800a318 <low_level_init+0x1a4>)
 800a21a:	483a      	ldr	r0, [pc, #232]	; (800a304 <low_level_init+0x190>)
 800a21c:	f7f9 fdd3 	bl	8003dc6 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2206      	movs	r2, #6
 800a224:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a228:	4b36      	ldr	r3, [pc, #216]	; (800a304 <low_level_init+0x190>)
 800a22a:	695b      	ldr	r3, [r3, #20]
 800a22c:	781a      	ldrb	r2, [r3, #0]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a234:	4b33      	ldr	r3, [pc, #204]	; (800a304 <low_level_init+0x190>)
 800a236:	695b      	ldr	r3, [r3, #20]
 800a238:	785a      	ldrb	r2, [r3, #1]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a240:	4b30      	ldr	r3, [pc, #192]	; (800a304 <low_level_init+0x190>)
 800a242:	695b      	ldr	r3, [r3, #20]
 800a244:	789a      	ldrb	r2, [r3, #2]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a24c:	4b2d      	ldr	r3, [pc, #180]	; (800a304 <low_level_init+0x190>)
 800a24e:	695b      	ldr	r3, [r3, #20]
 800a250:	78da      	ldrb	r2, [r3, #3]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a258:	4b2a      	ldr	r3, [pc, #168]	; (800a304 <low_level_init+0x190>)
 800a25a:	695b      	ldr	r3, [r3, #20]
 800a25c:	791a      	ldrb	r2, [r3, #4]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a264:	4b27      	ldr	r3, [pc, #156]	; (800a304 <low_level_init+0x190>)
 800a266:	695b      	ldr	r3, [r3, #20]
 800a268:	795a      	ldrb	r2, [r3, #5]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800a276:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a27e:	f043 030a 	orr.w	r3, r3, #10
 800a282:	b2da      	uxtb	r2, r3
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800a28a:	2300      	movs	r3, #0
 800a28c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a28e:	2300      	movs	r3, #0
 800a290:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800a292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a296:	2101      	movs	r1, #1
 800a298:	4618      	mov	r0, r3
 800a29a:	f006 fd2f 	bl	8010cfc <osSemaphoreCreate>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	4a1e      	ldr	r2, [pc, #120]	; (800a31c <low_level_init+0x1a8>)
 800a2a2:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800a2a4:	4b1e      	ldr	r3, [pc, #120]	; (800a320 <low_level_init+0x1ac>)
 800a2a6:	f107 040c 	add.w	r4, r7, #12
 800a2aa:	461d      	mov	r5, r3
 800a2ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a2ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a2b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a2b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800a2b8:	f107 030c 	add.w	r3, r7, #12
 800a2bc:	6879      	ldr	r1, [r7, #4]
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f006 fc20 	bl	8010b04 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800a2c4:	480f      	ldr	r0, [pc, #60]	; (800a304 <low_level_init+0x190>)
 800a2c6:	f7fa f8a6 	bl	8004416 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800a2ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a2ce:	461a      	mov	r2, r3
 800a2d0:	211d      	movs	r1, #29
 800a2d2:	480c      	ldr	r0, [pc, #48]	; (800a304 <low_level_init+0x190>)
 800a2d4:	f7f9 ffd1 	bl	800427a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800a2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2da:	f043 030b 	orr.w	r3, r3, #11
 800a2de:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800a2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	211d      	movs	r1, #29
 800a2e6:	4807      	ldr	r0, [pc, #28]	; (800a304 <low_level_init+0x190>)
 800a2e8:	f7fa f82f 	bl	800434a <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800a2ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	211d      	movs	r1, #29
 800a2f4:	4803      	ldr	r0, [pc, #12]	; (800a304 <low_level_init+0x190>)
 800a2f6:	f7f9 ffc0 	bl	800427a <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a2fa:	bf00      	nop
 800a2fc:	3740      	adds	r7, #64	; 0x40
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bdb0      	pop	{r4, r5, r7, pc}
 800a302:	bf00      	nop
 800a304:	2000f860 	.word	0x2000f860
 800a308:	40028000 	.word	0x40028000
 800a30c:	2000f8a8 	.word	0x2000f8a8
 800a310:	2000df90 	.word	0x2000df90
 800a314:	2000e010 	.word	0x2000e010
 800a318:	2000f7e0 	.word	0x2000f7e0
 800a31c:	200010b0 	.word	0x200010b0
 800a320:	08023d00 	.word	0x08023d00

0800a324 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b08a      	sub	sp, #40	; 0x28
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800a32e:	4b4b      	ldr	r3, [pc, #300]	; (800a45c <low_level_output+0x138>)
 800a330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800a336:	2300      	movs	r3, #0
 800a338:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800a33a:	2300      	movs	r3, #0
 800a33c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800a33e:	2300      	movs	r3, #0
 800a340:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800a342:	2300      	movs	r3, #0
 800a344:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800a346:	4b45      	ldr	r3, [pc, #276]	; (800a45c <low_level_output+0x138>)
 800a348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800a34c:	2300      	movs	r3, #0
 800a34e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	623b      	str	r3, [r7, #32]
 800a354:	e05a      	b.n	800a40c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	da03      	bge.n	800a366 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800a35e:	23f8      	movs	r3, #248	; 0xf8
 800a360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800a364:	e05c      	b.n	800a420 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800a366:	6a3b      	ldr	r3, [r7, #32]
 800a368:	895b      	ldrh	r3, [r3, #10]
 800a36a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800a36c:	2300      	movs	r3, #0
 800a36e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a370:	e02f      	b.n	800a3d2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800a372:	69fa      	ldr	r2, [r7, #28]
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	18d0      	adds	r0, r2, r3
 800a378:	6a3b      	ldr	r3, [r7, #32]
 800a37a:	685a      	ldr	r2, [r3, #4]
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	18d1      	adds	r1, r2, r3
 800a380:	693a      	ldr	r2, [r7, #16]
 800a382:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800a386:	1a9b      	subs	r3, r3, r2
 800a388:	461a      	mov	r2, r3
 800a38a:	f016 fff1 	bl	8021370 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800a38e:	69bb      	ldr	r3, [r7, #24]
 800a390:	68db      	ldr	r3, [r3, #12]
 800a392:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a394:	69bb      	ldr	r3, [r7, #24]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	da03      	bge.n	800a3a4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800a39c:	23f8      	movs	r3, #248	; 0xf8
 800a39e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800a3a2:	e03d      	b.n	800a420 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800a3a4:	69bb      	ldr	r3, [r7, #24]
 800a3a6:	689b      	ldr	r3, [r3, #8]
 800a3a8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800a3aa:	693a      	ldr	r2, [r7, #16]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800a3b4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800a3b6:	68ba      	ldr	r2, [r7, #8]
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	1ad3      	subs	r3, r2, r3
 800a3bc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a3c0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800a3c2:	697a      	ldr	r2, [r7, #20]
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	1ad3      	subs	r3, r2, r3
 800a3c8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a3cc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a3d2:	68fa      	ldr	r2, [r7, #12]
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	4413      	add	r3, r2
 800a3d8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d8c8      	bhi.n	800a372 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800a3e0:	69fa      	ldr	r2, [r7, #28]
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	18d0      	adds	r0, r2, r3
 800a3e6:	6a3b      	ldr	r3, [r7, #32]
 800a3e8:	685a      	ldr	r2, [r3, #4]
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	4413      	add	r3, r2
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	f016 ffbd 	bl	8021370 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800a3f6:	693a      	ldr	r2, [r7, #16]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800a3fe:	697a      	ldr	r2, [r7, #20]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	4413      	add	r3, r2
 800a404:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800a406:	6a3b      	ldr	r3, [r7, #32]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	623b      	str	r3, [r7, #32]
 800a40c:	6a3b      	ldr	r3, [r7, #32]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d1a1      	bne.n	800a356 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800a412:	6979      	ldr	r1, [r7, #20]
 800a414:	4811      	ldr	r0, [pc, #68]	; (800a45c <low_level_output+0x138>)
 800a416:	f7f9 fd43 	bl	8003ea0 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800a41a:	2300      	movs	r3, #0
 800a41c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800a420:	4b0e      	ldr	r3, [pc, #56]	; (800a45c <low_level_output+0x138>)
 800a422:	681a      	ldr	r2, [r3, #0]
 800a424:	f241 0314 	movw	r3, #4116	; 0x1014
 800a428:	4413      	add	r3, r2
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f003 0320 	and.w	r3, r3, #32
 800a430:	2b00      	cmp	r3, #0
 800a432:	d00d      	beq.n	800a450 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800a434:	4b09      	ldr	r3, [pc, #36]	; (800a45c <low_level_output+0x138>)
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	f241 0314 	movw	r3, #4116	; 0x1014
 800a43c:	4413      	add	r3, r2
 800a43e:	2220      	movs	r2, #32
 800a440:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800a442:	4b06      	ldr	r3, [pc, #24]	; (800a45c <low_level_output+0x138>)
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	f241 0304 	movw	r3, #4100	; 0x1004
 800a44a:	4413      	add	r3, r2
 800a44c:	2200      	movs	r2, #0
 800a44e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800a450:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a454:	4618      	mov	r0, r3
 800a456:	3728      	adds	r7, #40	; 0x28
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	2000f860 	.word	0x2000f860

0800a460 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b08c      	sub	sp, #48	; 0x30
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a468:	2300      	movs	r3, #0
 800a46a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800a46c:	2300      	movs	r3, #0
 800a46e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800a470:	2300      	movs	r3, #0
 800a472:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800a474:	2300      	movs	r3, #0
 800a476:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800a478:	2300      	movs	r3, #0
 800a47a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800a47c:	2300      	movs	r3, #0
 800a47e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800a480:	2300      	movs	r3, #0
 800a482:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800a484:	484f      	ldr	r0, [pc, #316]	; (800a5c4 <low_level_input+0x164>)
 800a486:	f7f9 fdf5 	bl	8004074 <HAL_ETH_GetReceivedFrame_IT>
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d001      	beq.n	800a494 <low_level_input+0x34>

    return NULL;
 800a490:	2300      	movs	r3, #0
 800a492:	e092      	b.n	800a5ba <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800a494:	4b4b      	ldr	r3, [pc, #300]	; (800a5c4 <low_level_input+0x164>)
 800a496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a498:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800a49a:	4b4a      	ldr	r3, [pc, #296]	; (800a5c4 <low_level_input+0x164>)
 800a49c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a49e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800a4a0:	89fb      	ldrh	r3, [r7, #14]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d007      	beq.n	800a4b6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800a4a6:	89fb      	ldrh	r3, [r7, #14]
 800a4a8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	2000      	movs	r0, #0
 800a4b0:	f00c fdee 	bl	8017090 <pbuf_alloc>
 800a4b4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800a4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d04b      	beq.n	800a554 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800a4bc:	4b41      	ldr	r3, [pc, #260]	; (800a5c4 <low_level_input+0x164>)
 800a4be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4c0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800a4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4ca:	e040      	b.n	800a54e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800a4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ce:	895b      	ldrh	r3, [r3, #10]
 800a4d0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800a4d6:	e021      	b.n	800a51c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800a4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4da:	685a      	ldr	r2, [r3, #4]
 800a4dc:	69bb      	ldr	r3, [r7, #24]
 800a4de:	18d0      	adds	r0, r2, r3
 800a4e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4e2:	69fb      	ldr	r3, [r7, #28]
 800a4e4:	18d1      	adds	r1, r2, r3
 800a4e6:	69fa      	ldr	r2, [r7, #28]
 800a4e8:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800a4ec:	1a9b      	subs	r3, r3, r2
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	f016 ff3e 	bl	8021370 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800a4f4:	6a3b      	ldr	r3, [r7, #32]
 800a4f6:	68db      	ldr	r3, [r3, #12]
 800a4f8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800a4fa:	6a3b      	ldr	r3, [r7, #32]
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800a500:	69fa      	ldr	r2, [r7, #28]
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	4413      	add	r3, r2
 800a506:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800a50a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800a50c:	69ba      	ldr	r2, [r7, #24]
 800a50e:	69fb      	ldr	r3, [r7, #28]
 800a510:	1ad3      	subs	r3, r2, r3
 800a512:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800a516:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800a518:	2300      	movs	r3, #0
 800a51a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800a51c:	697a      	ldr	r2, [r7, #20]
 800a51e:	69fb      	ldr	r3, [r7, #28]
 800a520:	4413      	add	r3, r2
 800a522:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800a526:	4293      	cmp	r3, r2
 800a528:	d8d6      	bhi.n	800a4d8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800a52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a52c:	685a      	ldr	r2, [r3, #4]
 800a52e:	69bb      	ldr	r3, [r7, #24]
 800a530:	18d0      	adds	r0, r2, r3
 800a532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a534:	69fb      	ldr	r3, [r7, #28]
 800a536:	4413      	add	r3, r2
 800a538:	697a      	ldr	r2, [r7, #20]
 800a53a:	4619      	mov	r1, r3
 800a53c:	f016 ff18 	bl	8021370 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800a540:	69fa      	ldr	r2, [r7, #28]
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	4413      	add	r3, r2
 800a546:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800a548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a550:	2b00      	cmp	r3, #0
 800a552:	d1bb      	bne.n	800a4cc <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800a554:	4b1b      	ldr	r3, [pc, #108]	; (800a5c4 <low_level_input+0x164>)
 800a556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a558:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800a55a:	2300      	movs	r3, #0
 800a55c:	613b      	str	r3, [r7, #16]
 800a55e:	e00b      	b.n	800a578 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800a560:	6a3b      	ldr	r3, [r7, #32]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a568:	6a3b      	ldr	r3, [r7, #32]
 800a56a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800a56c:	6a3b      	ldr	r3, [r7, #32]
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	3301      	adds	r3, #1
 800a576:	613b      	str	r3, [r7, #16]
 800a578:	4b12      	ldr	r3, [pc, #72]	; (800a5c4 <low_level_input+0x164>)
 800a57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a57c:	693a      	ldr	r2, [r7, #16]
 800a57e:	429a      	cmp	r2, r3
 800a580:	d3ee      	bcc.n	800a560 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800a582:	4b10      	ldr	r3, [pc, #64]	; (800a5c4 <low_level_input+0x164>)
 800a584:	2200      	movs	r2, #0
 800a586:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800a588:	4b0e      	ldr	r3, [pc, #56]	; (800a5c4 <low_level_input+0x164>)
 800a58a:	681a      	ldr	r2, [r3, #0]
 800a58c:	f241 0314 	movw	r3, #4116	; 0x1014
 800a590:	4413      	add	r3, r2
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d00d      	beq.n	800a5b8 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800a59c:	4b09      	ldr	r3, [pc, #36]	; (800a5c4 <low_level_input+0x164>)
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	f241 0314 	movw	r3, #4116	; 0x1014
 800a5a4:	4413      	add	r3, r2
 800a5a6:	2280      	movs	r2, #128	; 0x80
 800a5a8:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800a5aa:	4b06      	ldr	r3, [pc, #24]	; (800a5c4 <low_level_input+0x164>)
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	f241 0308 	movw	r3, #4104	; 0x1008
 800a5b2:	4413      	add	r3, r2
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	601a      	str	r2, [r3, #0]
  }
  return p;
 800a5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3730      	adds	r7, #48	; 0x30
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	2000f860 	.word	0x2000f860

0800a5c8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a5d4:	4b12      	ldr	r3, [pc, #72]	; (800a620 <ethernetif_input+0x58>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f006 fbbf 	bl	8010d60 <osSemaphoreWait>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d1f5      	bne.n	800a5d4 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800a5e8:	480e      	ldr	r0, [pc, #56]	; (800a624 <ethernetif_input+0x5c>)
 800a5ea:	f016 f9cf 	bl	802098c <sys_mutex_lock>
        p = low_level_input( netif );
 800a5ee:	68f8      	ldr	r0, [r7, #12]
 800a5f0:	f7ff ff36 	bl	800a460 <low_level_input>
 800a5f4:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d00a      	beq.n	800a612 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	691b      	ldr	r3, [r3, #16]
 800a600:	68f9      	ldr	r1, [r7, #12]
 800a602:	68b8      	ldr	r0, [r7, #8]
 800a604:	4798      	blx	r3
 800a606:	4603      	mov	r3, r0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d002      	beq.n	800a612 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800a60c:	68b8      	ldr	r0, [r7, #8]
 800a60e:	f00d f823 	bl	8017658 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800a612:	4804      	ldr	r0, [pc, #16]	; (800a624 <ethernetif_input+0x5c>)
 800a614:	f016 f9c9 	bl	80209aa <sys_mutex_unlock>
      } while(p!=NULL);
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d1e4      	bne.n	800a5e8 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a61e:	e7d9      	b.n	800a5d4 <ethernetif_input+0xc>
 800a620:	200010b0 	.word	0x200010b0
 800a624:	200110b8 	.word	0x200110b8

0800a628 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d106      	bne.n	800a644 <ethernetif_init+0x1c>
 800a636:	4b0e      	ldr	r3, [pc, #56]	; (800a670 <ethernetif_init+0x48>)
 800a638:	f240 2236 	movw	r2, #566	; 0x236
 800a63c:	490d      	ldr	r1, [pc, #52]	; (800a674 <ethernetif_init+0x4c>)
 800a63e:	480e      	ldr	r0, [pc, #56]	; (800a678 <ethernetif_init+0x50>)
 800a640:	f016 ff70 	bl	8021524 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2273      	movs	r2, #115	; 0x73
 800a648:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2274      	movs	r2, #116	; 0x74
 800a650:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	4a09      	ldr	r2, [pc, #36]	; (800a67c <ethernetif_init+0x54>)
 800a658:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	4a08      	ldr	r2, [pc, #32]	; (800a680 <ethernetif_init+0x58>)
 800a65e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f7ff fd87 	bl	800a174 <low_level_init>

  return ERR_OK;
 800a666:	2300      	movs	r3, #0
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3708      	adds	r7, #8
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}
 800a670:	08023d1c 	.word	0x08023d1c
 800a674:	08023d38 	.word	0x08023d38
 800a678:	08023d48 	.word	0x08023d48
 800a67c:	0801eb39 	.word	0x0801eb39
 800a680:	0800a325 	.word	0x0800a325

0800a684 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a688:	f7f9 f888 	bl	800379c <HAL_GetTick>
 800a68c:	4603      	mov	r3, r0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	bd80      	pop	{r7, pc}
	...

0800a694 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800a69c:	2300      	movs	r3, #0
 800a69e:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800a6a4:	f107 0308 	add.w	r3, r7, #8
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	2101      	movs	r1, #1
 800a6ac:	4816      	ldr	r0, [pc, #88]	; (800a708 <ethernetif_set_link+0x74>)
 800a6ae:	f7f9 fde4 	bl	800427a <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	f003 0304 	and.w	r3, r3, #4
 800a6b8:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a6c2:	f003 0304 	and.w	r3, r3, #4
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d108      	bne.n	800a6dc <ethernetif_set_link+0x48>
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d005      	beq.n	800a6dc <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f00c fbad 	bl	8016e34 <netif_set_link_up>
 800a6da:	e011      	b.n	800a700 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a6e4:	089b      	lsrs	r3, r3, #2
 800a6e6:	f003 0301 	and.w	r3, r3, #1
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d007      	beq.n	800a700 <ethernetif_set_link+0x6c>
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d104      	bne.n	800a700 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f00c fbce 	bl	8016e9c <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 800a700:	20c8      	movs	r0, #200	; 0xc8
 800a702:	f006 fa4b 	bl	8010b9c <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800a706:	e7cd      	b.n	800a6a4 <ethernetif_set_link+0x10>
 800a708:	2000f860 	.word	0x2000f860

0800a70c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800a714:	2300      	movs	r3, #0
 800a716:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800a718:	2300      	movs	r3, #0
 800a71a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a722:	089b      	lsrs	r3, r3, #2
 800a724:	f003 0301 	and.w	r3, r3, #1
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d05d      	beq.n	800a7ea <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800a72e:	4b34      	ldr	r3, [pc, #208]	; (800a800 <ethernetif_update_config+0xf4>)
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d03f      	beq.n	800a7b6 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800a736:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a73a:	2100      	movs	r1, #0
 800a73c:	4830      	ldr	r0, [pc, #192]	; (800a800 <ethernetif_update_config+0xf4>)
 800a73e:	f7f9 fe04 	bl	800434a <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800a742:	f7f9 f82b 	bl	800379c <HAL_GetTick>
 800a746:	4603      	mov	r3, r0
 800a748:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800a74a:	f107 0308 	add.w	r3, r7, #8
 800a74e:	461a      	mov	r2, r3
 800a750:	2101      	movs	r1, #1
 800a752:	482b      	ldr	r0, [pc, #172]	; (800a800 <ethernetif_update_config+0xf4>)
 800a754:	f7f9 fd91 	bl	800427a <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800a758:	f7f9 f820 	bl	800379c <HAL_GetTick>
 800a75c:	4602      	mov	r2, r0
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	1ad3      	subs	r3, r2, r3
 800a762:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a766:	d828      	bhi.n	800a7ba <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	f003 0320 	and.w	r3, r3, #32
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d0eb      	beq.n	800a74a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800a772:	f107 0308 	add.w	r3, r7, #8
 800a776:	461a      	mov	r2, r3
 800a778:	2110      	movs	r1, #16
 800a77a:	4821      	ldr	r0, [pc, #132]	; (800a800 <ethernetif_update_config+0xf4>)
 800a77c:	f7f9 fd7d 	bl	800427a <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	f003 0304 	and.w	r3, r3, #4
 800a786:	2b00      	cmp	r3, #0
 800a788:	d004      	beq.n	800a794 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800a78a:	4b1d      	ldr	r3, [pc, #116]	; (800a800 <ethernetif_update_config+0xf4>)
 800a78c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a790:	60da      	str	r2, [r3, #12]
 800a792:	e002      	b.n	800a79a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800a794:	4b1a      	ldr	r3, [pc, #104]	; (800a800 <ethernetif_update_config+0xf4>)
 800a796:	2200      	movs	r2, #0
 800a798:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	f003 0302 	and.w	r3, r3, #2
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d003      	beq.n	800a7ac <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800a7a4:	4b16      	ldr	r3, [pc, #88]	; (800a800 <ethernetif_update_config+0xf4>)
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	609a      	str	r2, [r3, #8]
 800a7aa:	e016      	b.n	800a7da <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800a7ac:	4b14      	ldr	r3, [pc, #80]	; (800a800 <ethernetif_update_config+0xf4>)
 800a7ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a7b2:	609a      	str	r2, [r3, #8]
 800a7b4:	e011      	b.n	800a7da <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800a7b6:	bf00      	nop
 800a7b8:	e000      	b.n	800a7bc <ethernetif_update_config+0xb0>
          goto error;
 800a7ba:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800a7bc:	4b10      	ldr	r3, [pc, #64]	; (800a800 <ethernetif_update_config+0xf4>)
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	08db      	lsrs	r3, r3, #3
 800a7c2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800a7c4:	4b0e      	ldr	r3, [pc, #56]	; (800a800 <ethernetif_update_config+0xf4>)
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	085b      	lsrs	r3, r3, #1
 800a7ca:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	2100      	movs	r1, #0
 800a7d4:	480a      	ldr	r0, [pc, #40]	; (800a800 <ethernetif_update_config+0xf4>)
 800a7d6:	f7f9 fdb8 	bl	800434a <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800a7da:	2100      	movs	r1, #0
 800a7dc:	4808      	ldr	r0, [pc, #32]	; (800a800 <ethernetif_update_config+0xf4>)
 800a7de:	f7f9 fe79 	bl	80044d4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800a7e2:	4807      	ldr	r0, [pc, #28]	; (800a800 <ethernetif_update_config+0xf4>)
 800a7e4:	f7f9 fe17 	bl	8004416 <HAL_ETH_Start>
 800a7e8:	e002      	b.n	800a7f0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800a7ea:	4805      	ldr	r0, [pc, #20]	; (800a800 <ethernetif_update_config+0xf4>)
 800a7ec:	f7f9 fe42 	bl	8004474 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 f807 	bl	800a804 <ethernetif_notify_conn_changed>
}
 800a7f6:	bf00      	nop
 800a7f8:	3710      	adds	r7, #16
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	2000f860 	.word	0x2000f860

0800a804 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800a80c:	bf00      	nop
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a818:	b590      	push	{r4, r7, lr}
 800a81a:	b089      	sub	sp, #36	; 0x24
 800a81c:	af04      	add	r7, sp, #16
 800a81e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a826:	7919      	ldrb	r1, [r3, #4]
 800a828:	2350      	movs	r3, #80	; 0x50
 800a82a:	2206      	movs	r2, #6
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f001 fd47 	bl	800c2c0 <USBH_FindInterface>
 800a832:	4603      	mov	r3, r0
 800a834:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800a836:	7bfb      	ldrb	r3, [r7, #15]
 800a838:	2bff      	cmp	r3, #255	; 0xff
 800a83a:	d002      	beq.n	800a842 <USBH_MSC_InterfaceInit+0x2a>
 800a83c:	7bfb      	ldrb	r3, [r7, #15]
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d901      	bls.n	800a846 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a842:	2302      	movs	r3, #2
 800a844:	e0ef      	b.n	800aa26 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800a846:	7bfb      	ldrb	r3, [r7, #15]
 800a848:	4619      	mov	r1, r3
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f001 fd1c 	bl	800c288 <USBH_SelectInterface>
 800a850:	4603      	mov	r3, r0
 800a852:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a854:	7bbb      	ldrb	r3, [r7, #14]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d001      	beq.n	800a85e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800a85a:	2302      	movs	r3, #2
 800a85c:	e0e3      	b.n	800aa26 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a864:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a868:	f016 fd64 	bl	8021334 <malloc>
 800a86c:	4603      	mov	r3, r0
 800a86e:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a876:	69db      	ldr	r3, [r3, #28]
 800a878:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d101      	bne.n	800a884 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800a880:	2302      	movs	r3, #2
 800a882:	e0d0      	b.n	800aa26 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800a884:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a888:	2100      	movs	r1, #0
 800a88a:	68b8      	ldr	r0, [r7, #8]
 800a88c:	f016 fd98 	bl	80213c0 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a890:	7bfb      	ldrb	r3, [r7, #15]
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	211a      	movs	r1, #26
 800a896:	fb01 f303 	mul.w	r3, r1, r3
 800a89a:	4413      	add	r3, r2
 800a89c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a8a0:	781b      	ldrb	r3, [r3, #0]
 800a8a2:	b25b      	sxtb	r3, r3
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	da16      	bge.n	800a8d6 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800a8a8:	7bfb      	ldrb	r3, [r7, #15]
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	211a      	movs	r1, #26
 800a8ae:	fb01 f303 	mul.w	r3, r1, r3
 800a8b2:	4413      	add	r3, r2
 800a8b4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a8b8:	781a      	ldrb	r2, [r3, #0]
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a8be:	7bfb      	ldrb	r3, [r7, #15]
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	211a      	movs	r1, #26
 800a8c4:	fb01 f303 	mul.w	r3, r1, r3
 800a8c8:	4413      	add	r3, r2
 800a8ca:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a8ce:	881a      	ldrh	r2, [r3, #0]
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	815a      	strh	r2, [r3, #10]
 800a8d4:	e015      	b.n	800a902 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800a8d6:	7bfb      	ldrb	r3, [r7, #15]
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	211a      	movs	r1, #26
 800a8dc:	fb01 f303 	mul.w	r3, r1, r3
 800a8e0:	4413      	add	r3, r2
 800a8e2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a8e6:	781a      	ldrb	r2, [r3, #0]
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a8ec:	7bfb      	ldrb	r3, [r7, #15]
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	211a      	movs	r1, #26
 800a8f2:	fb01 f303 	mul.w	r3, r1, r3
 800a8f6:	4413      	add	r3, r2
 800a8f8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a8fc:	881a      	ldrh	r2, [r3, #0]
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800a902:	7bfb      	ldrb	r3, [r7, #15]
 800a904:	687a      	ldr	r2, [r7, #4]
 800a906:	211a      	movs	r1, #26
 800a908:	fb01 f303 	mul.w	r3, r1, r3
 800a90c:	4413      	add	r3, r2
 800a90e:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	b25b      	sxtb	r3, r3
 800a916:	2b00      	cmp	r3, #0
 800a918:	da16      	bge.n	800a948 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800a91a:	7bfb      	ldrb	r3, [r7, #15]
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	211a      	movs	r1, #26
 800a920:	fb01 f303 	mul.w	r3, r1, r3
 800a924:	4413      	add	r3, r2
 800a926:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a92a:	781a      	ldrb	r2, [r3, #0]
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a930:	7bfb      	ldrb	r3, [r7, #15]
 800a932:	687a      	ldr	r2, [r7, #4]
 800a934:	211a      	movs	r1, #26
 800a936:	fb01 f303 	mul.w	r3, r1, r3
 800a93a:	4413      	add	r3, r2
 800a93c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a940:	881a      	ldrh	r2, [r3, #0]
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	815a      	strh	r2, [r3, #10]
 800a946:	e015      	b.n	800a974 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800a948:	7bfb      	ldrb	r3, [r7, #15]
 800a94a:	687a      	ldr	r2, [r7, #4]
 800a94c:	211a      	movs	r1, #26
 800a94e:	fb01 f303 	mul.w	r3, r1, r3
 800a952:	4413      	add	r3, r2
 800a954:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a958:	781a      	ldrb	r2, [r3, #0]
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a95e:	7bfb      	ldrb	r3, [r7, #15]
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	211a      	movs	r1, #26
 800a964:	fb01 f303 	mul.w	r3, r1, r3
 800a968:	4413      	add	r3, r2
 800a96a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a96e:	881a      	ldrh	r2, [r3, #0]
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	2200      	movs	r2, #0
 800a978:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	2200      	movs	r2, #0
 800a97e:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	2200      	movs	r2, #0
 800a984:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	799b      	ldrb	r3, [r3, #6]
 800a98a:	4619      	mov	r1, r3
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f003 f8c4 	bl	800db1a <USBH_AllocPipe>
 800a992:	4603      	mov	r3, r0
 800a994:	461a      	mov	r2, r3
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	79db      	ldrb	r3, [r3, #7]
 800a99e:	4619      	mov	r1, r3
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f003 f8ba 	bl	800db1a <USBH_AllocPipe>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 fdec 	bl	800b58c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	7959      	ldrb	r1, [r3, #5]
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	7998      	ldrb	r0, [r3, #6]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a9c8:	68ba      	ldr	r2, [r7, #8]
 800a9ca:	8912      	ldrh	r2, [r2, #8]
 800a9cc:	9202      	str	r2, [sp, #8]
 800a9ce:	2202      	movs	r2, #2
 800a9d0:	9201      	str	r2, [sp, #4]
 800a9d2:	9300      	str	r3, [sp, #0]
 800a9d4:	4623      	mov	r3, r4
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f003 f86f 	bl	800dabc <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	7919      	ldrb	r1, [r3, #4]
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	79d8      	ldrb	r0, [r3, #7]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a9f2:	68ba      	ldr	r2, [r7, #8]
 800a9f4:	8952      	ldrh	r2, [r2, #10]
 800a9f6:	9202      	str	r2, [sp, #8]
 800a9f8:	2202      	movs	r2, #2
 800a9fa:	9201      	str	r2, [sp, #4]
 800a9fc:	9300      	str	r3, [sp, #0]
 800a9fe:	4623      	mov	r3, r4
 800aa00:	4602      	mov	r2, r0
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f003 f85a 	bl	800dabc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	791b      	ldrb	r3, [r3, #4]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	4619      	mov	r1, r3
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f016 fab9 	bl	8020f88 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	795b      	ldrb	r3, [r3, #5]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f016 fab2 	bl	8020f88 <USBH_LL_SetToggle>

  return USBH_OK;
 800aa24:	2300      	movs	r3, #0
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3714      	adds	r7, #20
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd90      	pop	{r4, r7, pc}

0800aa2e <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800aa2e:	b580      	push	{r7, lr}
 800aa30:	b084      	sub	sp, #16
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa3c:	69db      	ldr	r3, [r3, #28]
 800aa3e:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	795b      	ldrb	r3, [r3, #5]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d00e      	beq.n	800aa66 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	795b      	ldrb	r3, [r3, #5]
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f003 f853 	bl	800dafa <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	795b      	ldrb	r3, [r3, #5]
 800aa58:	4619      	mov	r1, r3
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f003 f87e 	bl	800db5c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2200      	movs	r2, #0
 800aa64:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	791b      	ldrb	r3, [r3, #4]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00e      	beq.n	800aa8c <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	791b      	ldrb	r3, [r3, #4]
 800aa72:	4619      	mov	r1, r3
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f003 f840 	bl	800dafa <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	791b      	ldrb	r3, [r3, #4]
 800aa7e:	4619      	mov	r1, r3
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f003 f86b 	bl	800db5c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa92:	69db      	ldr	r3, [r3, #28]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d00b      	beq.n	800aab0 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa9e:	69db      	ldr	r3, [r3, #28]
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f016 fc4f 	bl	8021344 <free>
    phost->pActiveClass->pData = 0U;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aaac:	2200      	movs	r2, #0
 800aaae:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800aab0:	2300      	movs	r3, #0
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3710      	adds	r7, #16
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}

0800aaba <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b084      	sub	sp, #16
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aac8:	69db      	ldr	r3, [r3, #28]
 800aaca:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800aacc:	2301      	movs	r3, #1
 800aace:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	7b9b      	ldrb	r3, [r3, #14]
 800aad4:	2b03      	cmp	r3, #3
 800aad6:	d041      	beq.n	800ab5c <USBH_MSC_ClassRequest+0xa2>
 800aad8:	2b03      	cmp	r3, #3
 800aada:	dc4b      	bgt.n	800ab74 <USBH_MSC_ClassRequest+0xba>
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d001      	beq.n	800aae4 <USBH_MSC_ClassRequest+0x2a>
 800aae0:	2b02      	cmp	r3, #2
 800aae2:	d147      	bne.n	800ab74 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	4619      	mov	r1, r3
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f000 fd31 	bl	800b550 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800aaf2:	7bfb      	ldrb	r3, [r7, #15]
 800aaf4:	2b03      	cmp	r3, #3
 800aaf6:	d104      	bne.n	800ab02 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	2200      	movs	r2, #0
 800aafc:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800aafe:	2300      	movs	r3, #0
 800ab00:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800ab02:	7bfb      	ldrb	r3, [r7, #15]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d137      	bne.n	800ab78 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	2b02      	cmp	r3, #2
 800ab0e:	d804      	bhi.n	800ab1a <USBH_MSC_ClassRequest+0x60>
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	3301      	adds	r3, #1
 800ab16:	b2da      	uxtb	r2, r3
 800ab18:	e000      	b.n	800ab1c <USBH_MSC_ClassRequest+0x62>
 800ab1a:	2202      	movs	r2, #2
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800ab20:	2300      	movs	r3, #0
 800ab22:	73bb      	strb	r3, [r7, #14]
 800ab24:	e014      	b.n	800ab50 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800ab26:	7bbb      	ldrb	r3, [r7, #14]
 800ab28:	68ba      	ldr	r2, [r7, #8]
 800ab2a:	2134      	movs	r1, #52	; 0x34
 800ab2c:	fb01 f303 	mul.w	r3, r1, r3
 800ab30:	4413      	add	r3, r2
 800ab32:	3392      	adds	r3, #146	; 0x92
 800ab34:	2202      	movs	r2, #2
 800ab36:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800ab38:	7bbb      	ldrb	r3, [r7, #14]
 800ab3a:	68ba      	ldr	r2, [r7, #8]
 800ab3c:	2134      	movs	r1, #52	; 0x34
 800ab3e:	fb01 f303 	mul.w	r3, r1, r3
 800ab42:	4413      	add	r3, r2
 800ab44:	33c1      	adds	r3, #193	; 0xc1
 800ab46:	2200      	movs	r2, #0
 800ab48:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800ab4a:	7bbb      	ldrb	r3, [r7, #14]
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	73bb      	strb	r3, [r7, #14]
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	7bba      	ldrb	r2, [r7, #14]
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d3e5      	bcc.n	800ab26 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800ab5a:	e00d      	b.n	800ab78 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800ab5c:	2100      	movs	r1, #0
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f002 fa8b 	bl	800d07a <USBH_ClrFeature>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d108      	bne.n	800ab7c <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	7bda      	ldrb	r2, [r3, #15]
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	739a      	strb	r2, [r3, #14]
      }
      break;
 800ab72:	e003      	b.n	800ab7c <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800ab74:	bf00      	nop
 800ab76:	e002      	b.n	800ab7e <USBH_MSC_ClassRequest+0xc4>
      break;
 800ab78:	bf00      	nop
 800ab7a:	e000      	b.n	800ab7e <USBH_MSC_ClassRequest+0xc4>
      break;
 800ab7c:	bf00      	nop
  }

  return status;
 800ab7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3710      	adds	r7, #16
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}

0800ab88 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b086      	sub	sp, #24
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab96:	69db      	ldr	r3, [r3, #28]
 800ab98:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800aba2:	2301      	movs	r3, #1
 800aba4:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	7b1b      	ldrb	r3, [r3, #12]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d003      	beq.n	800abb6 <USBH_MSC_Process+0x2e>
 800abae:	2b01      	cmp	r3, #1
 800abb0:	f000 828d 	beq.w	800b0ce <USBH_MSC_Process+0x546>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800abb4:	e28e      	b.n	800b0d4 <USBH_MSC_Process+0x54c>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	b29b      	uxth	r3, r3
 800abc2:	429a      	cmp	r2, r3
 800abc4:	f080 8267 	bcs.w	800b096 <USBH_MSC_Process+0x50e>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800abce:	4619      	mov	r1, r3
 800abd0:	693a      	ldr	r2, [r7, #16]
 800abd2:	2334      	movs	r3, #52	; 0x34
 800abd4:	fb03 f301 	mul.w	r3, r3, r1
 800abd8:	4413      	add	r3, r2
 800abda:	3391      	adds	r3, #145	; 0x91
 800abdc:	2201      	movs	r2, #1
 800abde:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800abe6:	4619      	mov	r1, r3
 800abe8:	693a      	ldr	r2, [r7, #16]
 800abea:	2334      	movs	r3, #52	; 0x34
 800abec:	fb03 f301 	mul.w	r3, r3, r1
 800abf0:	4413      	add	r3, r2
 800abf2:	3390      	adds	r3, #144	; 0x90
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	2b08      	cmp	r3, #8
 800abf8:	f200 8235 	bhi.w	800b066 <USBH_MSC_Process+0x4de>
 800abfc:	a201      	add	r2, pc, #4	; (adr r2, 800ac04 <USBH_MSC_Process+0x7c>)
 800abfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac02:	bf00      	nop
 800ac04:	0800ac29 	.word	0x0800ac29
 800ac08:	0800b067 	.word	0x0800b067
 800ac0c:	0800acf1 	.word	0x0800acf1
 800ac10:	0800ae75 	.word	0x0800ae75
 800ac14:	0800ac4f 	.word	0x0800ac4f
 800ac18:	0800af41 	.word	0x0800af41
 800ac1c:	0800b067 	.word	0x0800b067
 800ac20:	0800b067 	.word	0x0800b067
 800ac24:	0800b055 	.word	0x0800b055
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ac2e:	4619      	mov	r1, r3
 800ac30:	693a      	ldr	r2, [r7, #16]
 800ac32:	2334      	movs	r3, #52	; 0x34
 800ac34:	fb03 f301 	mul.w	r3, r3, r1
 800ac38:	4413      	add	r3, r2
 800ac3a:	3390      	adds	r3, #144	; 0x90
 800ac3c:	2204      	movs	r2, #4
 800ac3e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800ac4c:	e214      	b.n	800b078 <USBH_MSC_Process+0x4f0>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ac54:	b2d9      	uxtb	r1, r3
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ac5c:	461a      	mov	r2, r3
 800ac5e:	2334      	movs	r3, #52	; 0x34
 800ac60:	fb03 f302 	mul.w	r3, r3, r2
 800ac64:	3398      	adds	r3, #152	; 0x98
 800ac66:	693a      	ldr	r2, [r7, #16]
 800ac68:	4413      	add	r3, r2
 800ac6a:	3307      	adds	r3, #7
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f001 f836 	bl	800bce0 <USBH_MSC_SCSI_Inquiry>
 800ac74:	4603      	mov	r3, r0
 800ac76:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800ac78:	7bfb      	ldrb	r3, [r7, #15]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d10b      	bne.n	800ac96 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ac84:	4619      	mov	r1, r3
 800ac86:	693a      	ldr	r2, [r7, #16]
 800ac88:	2334      	movs	r3, #52	; 0x34
 800ac8a:	fb03 f301 	mul.w	r3, r3, r1
 800ac8e:	4413      	add	r3, r2
 800ac90:	3390      	adds	r3, #144	; 0x90
 800ac92:	2202      	movs	r2, #2
 800ac94:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800ac96:	7bfb      	ldrb	r3, [r7, #15]
 800ac98:	2b02      	cmp	r3, #2
 800ac9a:	d10c      	bne.n	800acb6 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aca2:	4619      	mov	r1, r3
 800aca4:	693a      	ldr	r2, [r7, #16]
 800aca6:	2334      	movs	r3, #52	; 0x34
 800aca8:	fb03 f301 	mul.w	r3, r3, r1
 800acac:	4413      	add	r3, r2
 800acae:	3390      	adds	r3, #144	; 0x90
 800acb0:	2205      	movs	r2, #5
 800acb2:	701a      	strb	r2, [r3, #0]
            break;
 800acb4:	e1d9      	b.n	800b06a <USBH_MSC_Process+0x4e2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800acb6:	7bfb      	ldrb	r3, [r7, #15]
 800acb8:	2b04      	cmp	r3, #4
 800acba:	f040 81d6 	bne.w	800b06a <USBH_MSC_Process+0x4e2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800acc4:	4619      	mov	r1, r3
 800acc6:	693a      	ldr	r2, [r7, #16]
 800acc8:	2334      	movs	r3, #52	; 0x34
 800acca:	fb03 f301 	mul.w	r3, r3, r1
 800acce:	4413      	add	r3, r2
 800acd0:	3390      	adds	r3, #144	; 0x90
 800acd2:	2201      	movs	r2, #1
 800acd4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800acdc:	4619      	mov	r1, r3
 800acde:	693a      	ldr	r2, [r7, #16]
 800ace0:	2334      	movs	r3, #52	; 0x34
 800ace2:	fb03 f301 	mul.w	r3, r3, r1
 800ace6:	4413      	add	r3, r2
 800ace8:	3391      	adds	r3, #145	; 0x91
 800acea:	2202      	movs	r2, #2
 800acec:	701a      	strb	r2, [r3, #0]
            break;
 800acee:	e1bc      	b.n	800b06a <USBH_MSC_Process+0x4e2>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800acf6:	b2db      	uxtb	r3, r3
 800acf8:	4619      	mov	r1, r3
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 ff32 	bl	800bb64 <USBH_MSC_SCSI_TestUnitReady>
 800ad00:	4603      	mov	r3, r0
 800ad02:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800ad04:	7bbb      	ldrb	r3, [r7, #14]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d149      	bne.n	800ad9e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ad10:	4619      	mov	r1, r3
 800ad12:	693a      	ldr	r2, [r7, #16]
 800ad14:	2334      	movs	r3, #52	; 0x34
 800ad16:	fb03 f301 	mul.w	r3, r3, r1
 800ad1a:	4413      	add	r3, r2
 800ad1c:	3392      	adds	r3, #146	; 0x92
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d00c      	beq.n	800ad3e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	693a      	ldr	r2, [r7, #16]
 800ad2e:	2334      	movs	r3, #52	; 0x34
 800ad30:	fb03 f301 	mul.w	r3, r3, r1
 800ad34:	4413      	add	r3, r2
 800ad36:	33c1      	adds	r3, #193	; 0xc1
 800ad38:	2201      	movs	r2, #1
 800ad3a:	701a      	strb	r2, [r3, #0]
 800ad3c:	e00b      	b.n	800ad56 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ad44:	4619      	mov	r1, r3
 800ad46:	693a      	ldr	r2, [r7, #16]
 800ad48:	2334      	movs	r3, #52	; 0x34
 800ad4a:	fb03 f301 	mul.w	r3, r3, r1
 800ad4e:	4413      	add	r3, r2
 800ad50:	33c1      	adds	r3, #193	; 0xc1
 800ad52:	2200      	movs	r2, #0
 800ad54:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	693a      	ldr	r2, [r7, #16]
 800ad60:	2334      	movs	r3, #52	; 0x34
 800ad62:	fb03 f301 	mul.w	r3, r3, r1
 800ad66:	4413      	add	r3, r2
 800ad68:	3390      	adds	r3, #144	; 0x90
 800ad6a:	2203      	movs	r2, #3
 800ad6c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ad74:	4619      	mov	r1, r3
 800ad76:	693a      	ldr	r2, [r7, #16]
 800ad78:	2334      	movs	r3, #52	; 0x34
 800ad7a:	fb03 f301 	mul.w	r3, r3, r1
 800ad7e:	4413      	add	r3, r2
 800ad80:	3391      	adds	r3, #145	; 0x91
 800ad82:	2200      	movs	r2, #0
 800ad84:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ad8c:	4619      	mov	r1, r3
 800ad8e:	693a      	ldr	r2, [r7, #16]
 800ad90:	2334      	movs	r3, #52	; 0x34
 800ad92:	fb03 f301 	mul.w	r3, r3, r1
 800ad96:	4413      	add	r3, r2
 800ad98:	3392      	adds	r3, #146	; 0x92
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800ad9e:	7bbb      	ldrb	r3, [r7, #14]
 800ada0:	2b02      	cmp	r3, #2
 800ada2:	d14a      	bne.n	800ae3a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800ada4:	693b      	ldr	r3, [r7, #16]
 800ada6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800adaa:	4619      	mov	r1, r3
 800adac:	693a      	ldr	r2, [r7, #16]
 800adae:	2334      	movs	r3, #52	; 0x34
 800adb0:	fb03 f301 	mul.w	r3, r3, r1
 800adb4:	4413      	add	r3, r2
 800adb6:	3392      	adds	r3, #146	; 0x92
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	2b02      	cmp	r3, #2
 800adbc:	d00c      	beq.n	800add8 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800adc4:	4619      	mov	r1, r3
 800adc6:	693a      	ldr	r2, [r7, #16]
 800adc8:	2334      	movs	r3, #52	; 0x34
 800adca:	fb03 f301 	mul.w	r3, r3, r1
 800adce:	4413      	add	r3, r2
 800add0:	33c1      	adds	r3, #193	; 0xc1
 800add2:	2201      	movs	r2, #1
 800add4:	701a      	strb	r2, [r3, #0]
 800add6:	e00b      	b.n	800adf0 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800adde:	4619      	mov	r1, r3
 800ade0:	693a      	ldr	r2, [r7, #16]
 800ade2:	2334      	movs	r3, #52	; 0x34
 800ade4:	fb03 f301 	mul.w	r3, r3, r1
 800ade8:	4413      	add	r3, r2
 800adea:	33c1      	adds	r3, #193	; 0xc1
 800adec:	2200      	movs	r2, #0
 800adee:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800adf6:	4619      	mov	r1, r3
 800adf8:	693a      	ldr	r2, [r7, #16]
 800adfa:	2334      	movs	r3, #52	; 0x34
 800adfc:	fb03 f301 	mul.w	r3, r3, r1
 800ae00:	4413      	add	r3, r2
 800ae02:	3390      	adds	r3, #144	; 0x90
 800ae04:	2205      	movs	r2, #5
 800ae06:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ae0e:	4619      	mov	r1, r3
 800ae10:	693a      	ldr	r2, [r7, #16]
 800ae12:	2334      	movs	r3, #52	; 0x34
 800ae14:	fb03 f301 	mul.w	r3, r3, r1
 800ae18:	4413      	add	r3, r2
 800ae1a:	3391      	adds	r3, #145	; 0x91
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ae26:	4619      	mov	r1, r3
 800ae28:	693a      	ldr	r2, [r7, #16]
 800ae2a:	2334      	movs	r3, #52	; 0x34
 800ae2c:	fb03 f301 	mul.w	r3, r3, r1
 800ae30:	4413      	add	r3, r2
 800ae32:	3392      	adds	r3, #146	; 0x92
 800ae34:	2202      	movs	r2, #2
 800ae36:	701a      	strb	r2, [r3, #0]
            break;
 800ae38:	e119      	b.n	800b06e <USBH_MSC_Process+0x4e6>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800ae3a:	7bbb      	ldrb	r3, [r7, #14]
 800ae3c:	2b04      	cmp	r3, #4
 800ae3e:	f040 8116 	bne.w	800b06e <USBH_MSC_Process+0x4e6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ae48:	4619      	mov	r1, r3
 800ae4a:	693a      	ldr	r2, [r7, #16]
 800ae4c:	2334      	movs	r3, #52	; 0x34
 800ae4e:	fb03 f301 	mul.w	r3, r3, r1
 800ae52:	4413      	add	r3, r2
 800ae54:	3390      	adds	r3, #144	; 0x90
 800ae56:	2201      	movs	r2, #1
 800ae58:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ae60:	4619      	mov	r1, r3
 800ae62:	693a      	ldr	r2, [r7, #16]
 800ae64:	2334      	movs	r3, #52	; 0x34
 800ae66:	fb03 f301 	mul.w	r3, r3, r1
 800ae6a:	4413      	add	r3, r2
 800ae6c:	3391      	adds	r3, #145	; 0x91
 800ae6e:	2202      	movs	r2, #2
 800ae70:	701a      	strb	r2, [r3, #0]
            break;
 800ae72:	e0fc      	b.n	800b06e <USBH_MSC_Process+0x4e6>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ae7a:	b2d9      	uxtb	r1, r3
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ae82:	461a      	mov	r2, r3
 800ae84:	2334      	movs	r3, #52	; 0x34
 800ae86:	fb03 f302 	mul.w	r3, r3, r2
 800ae8a:	3390      	adds	r3, #144	; 0x90
 800ae8c:	693a      	ldr	r2, [r7, #16]
 800ae8e:	4413      	add	r3, r2
 800ae90:	3304      	adds	r3, #4
 800ae92:	461a      	mov	r2, r3
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 fea8 	bl	800bbea <USBH_MSC_SCSI_ReadCapacity>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800ae9e:	7bfb      	ldrb	r3, [r7, #15]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d120      	bne.n	800aee6 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aeaa:	4619      	mov	r1, r3
 800aeac:	693a      	ldr	r2, [r7, #16]
 800aeae:	2334      	movs	r3, #52	; 0x34
 800aeb0:	fb03 f301 	mul.w	r3, r3, r1
 800aeb4:	4413      	add	r3, r2
 800aeb6:	3390      	adds	r3, #144	; 0x90
 800aeb8:	2201      	movs	r2, #1
 800aeba:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aec2:	4619      	mov	r1, r3
 800aec4:	693a      	ldr	r2, [r7, #16]
 800aec6:	2334      	movs	r3, #52	; 0x34
 800aec8:	fb03 f301 	mul.w	r3, r3, r1
 800aecc:	4413      	add	r3, r2
 800aece:	3391      	adds	r3, #145	; 0x91
 800aed0:	2200      	movs	r2, #0
 800aed2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aeda:	3301      	adds	r3, #1
 800aedc:	b29a      	uxth	r2, r3
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800aee4:	e0c5      	b.n	800b072 <USBH_MSC_Process+0x4ea>
            else if (scsi_status == USBH_FAIL)
 800aee6:	7bfb      	ldrb	r3, [r7, #15]
 800aee8:	2b02      	cmp	r3, #2
 800aeea:	d10c      	bne.n	800af06 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aef2:	4619      	mov	r1, r3
 800aef4:	693a      	ldr	r2, [r7, #16]
 800aef6:	2334      	movs	r3, #52	; 0x34
 800aef8:	fb03 f301 	mul.w	r3, r3, r1
 800aefc:	4413      	add	r3, r2
 800aefe:	3390      	adds	r3, #144	; 0x90
 800af00:	2205      	movs	r2, #5
 800af02:	701a      	strb	r2, [r3, #0]
            break;
 800af04:	e0b5      	b.n	800b072 <USBH_MSC_Process+0x4ea>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800af06:	7bfb      	ldrb	r3, [r7, #15]
 800af08:	2b04      	cmp	r3, #4
 800af0a:	f040 80b2 	bne.w	800b072 <USBH_MSC_Process+0x4ea>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af14:	4619      	mov	r1, r3
 800af16:	693a      	ldr	r2, [r7, #16]
 800af18:	2334      	movs	r3, #52	; 0x34
 800af1a:	fb03 f301 	mul.w	r3, r3, r1
 800af1e:	4413      	add	r3, r2
 800af20:	3390      	adds	r3, #144	; 0x90
 800af22:	2201      	movs	r2, #1
 800af24:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af2c:	4619      	mov	r1, r3
 800af2e:	693a      	ldr	r2, [r7, #16]
 800af30:	2334      	movs	r3, #52	; 0x34
 800af32:	fb03 f301 	mul.w	r3, r3, r1
 800af36:	4413      	add	r3, r2
 800af38:	3391      	adds	r3, #145	; 0x91
 800af3a:	2202      	movs	r2, #2
 800af3c:	701a      	strb	r2, [r3, #0]
            break;
 800af3e:	e098      	b.n	800b072 <USBH_MSC_Process+0x4ea>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af46:	b2d9      	uxtb	r1, r3
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af4e:	461a      	mov	r2, r3
 800af50:	2334      	movs	r3, #52	; 0x34
 800af52:	fb03 f302 	mul.w	r3, r3, r2
 800af56:	3398      	adds	r3, #152	; 0x98
 800af58:	693a      	ldr	r2, [r7, #16]
 800af5a:	4413      	add	r3, r2
 800af5c:	3304      	adds	r3, #4
 800af5e:	461a      	mov	r2, r3
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 ff62 	bl	800be2a <USBH_MSC_SCSI_RequestSense>
 800af66:	4603      	mov	r3, r0
 800af68:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800af6a:	7bfb      	ldrb	r3, [r7, #15]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d145      	bne.n	800affc <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af76:	4619      	mov	r1, r3
 800af78:	693a      	ldr	r2, [r7, #16]
 800af7a:	2334      	movs	r3, #52	; 0x34
 800af7c:	fb03 f301 	mul.w	r3, r3, r1
 800af80:	4413      	add	r3, r2
 800af82:	339c      	adds	r3, #156	; 0x9c
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	2b06      	cmp	r3, #6
 800af88:	d00c      	beq.n	800afa4 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800af90:	4619      	mov	r1, r3
 800af92:	693a      	ldr	r2, [r7, #16]
 800af94:	2334      	movs	r3, #52	; 0x34
 800af96:	fb03 f301 	mul.w	r3, r3, r1
 800af9a:	4413      	add	r3, r2
 800af9c:	339c      	adds	r3, #156	; 0x9c
 800af9e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800afa0:	2b02      	cmp	r3, #2
 800afa2:	d117      	bne.n	800afd4 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800afb0:	1ad3      	subs	r3, r2, r3
 800afb2:	f242 720f 	movw	r2, #9999	; 0x270f
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d80c      	bhi.n	800afd4 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800afc0:	4619      	mov	r1, r3
 800afc2:	693a      	ldr	r2, [r7, #16]
 800afc4:	2334      	movs	r3, #52	; 0x34
 800afc6:	fb03 f301 	mul.w	r3, r3, r1
 800afca:	4413      	add	r3, r2
 800afcc:	3390      	adds	r3, #144	; 0x90
 800afce:	2202      	movs	r2, #2
 800afd0:	701a      	strb	r2, [r3, #0]
                  break;
 800afd2:	e051      	b.n	800b078 <USBH_MSC_Process+0x4f0>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800afda:	4619      	mov	r1, r3
 800afdc:	693a      	ldr	r2, [r7, #16]
 800afde:	2334      	movs	r3, #52	; 0x34
 800afe0:	fb03 f301 	mul.w	r3, r3, r1
 800afe4:	4413      	add	r3, r2
 800afe6:	3390      	adds	r3, #144	; 0x90
 800afe8:	2201      	movs	r2, #1
 800afea:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800aff2:	3301      	adds	r3, #1
 800aff4:	b29a      	uxth	r2, r3
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800affc:	7bfb      	ldrb	r3, [r7, #15]
 800affe:	2b02      	cmp	r3, #2
 800b000:	d10c      	bne.n	800b01c <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b008:	4619      	mov	r1, r3
 800b00a:	693a      	ldr	r2, [r7, #16]
 800b00c:	2334      	movs	r3, #52	; 0x34
 800b00e:	fb03 f301 	mul.w	r3, r3, r1
 800b012:	4413      	add	r3, r2
 800b014:	3390      	adds	r3, #144	; 0x90
 800b016:	2208      	movs	r2, #8
 800b018:	701a      	strb	r2, [r3, #0]
            break;
 800b01a:	e02c      	b.n	800b076 <USBH_MSC_Process+0x4ee>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b01c:	7bfb      	ldrb	r3, [r7, #15]
 800b01e:	2b04      	cmp	r3, #4
 800b020:	d129      	bne.n	800b076 <USBH_MSC_Process+0x4ee>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b028:	4619      	mov	r1, r3
 800b02a:	693a      	ldr	r2, [r7, #16]
 800b02c:	2334      	movs	r3, #52	; 0x34
 800b02e:	fb03 f301 	mul.w	r3, r3, r1
 800b032:	4413      	add	r3, r2
 800b034:	3390      	adds	r3, #144	; 0x90
 800b036:	2201      	movs	r2, #1
 800b038:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b040:	4619      	mov	r1, r3
 800b042:	693a      	ldr	r2, [r7, #16]
 800b044:	2334      	movs	r3, #52	; 0x34
 800b046:	fb03 f301 	mul.w	r3, r3, r1
 800b04a:	4413      	add	r3, r2
 800b04c:	3391      	adds	r3, #145	; 0x91
 800b04e:	2202      	movs	r2, #2
 800b050:	701a      	strb	r2, [r3, #0]
            break;
 800b052:	e010      	b.n	800b076 <USBH_MSC_Process+0x4ee>
            MSC_Handle->current_lun++;
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b05a:	3301      	adds	r3, #1
 800b05c:	b29a      	uxth	r2, r3
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800b064:	e008      	b.n	800b078 <USBH_MSC_Process+0x4f0>
            break;
 800b066:	bf00      	nop
 800b068:	e006      	b.n	800b078 <USBH_MSC_Process+0x4f0>
            break;
 800b06a:	bf00      	nop
 800b06c:	e004      	b.n	800b078 <USBH_MSC_Process+0x4f0>
            break;
 800b06e:	bf00      	nop
 800b070:	e002      	b.n	800b078 <USBH_MSC_Process+0x4f0>
            break;
 800b072:	bf00      	nop
 800b074:	e000      	b.n	800b078 <USBH_MSC_Process+0x4f0>
            break;
 800b076:	bf00      	nop
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2204      	movs	r2, #4
 800b07c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b08c:	2200      	movs	r2, #0
 800b08e:	4619      	mov	r1, r3
 800b090:	f005 ff26 	bl	8010ee0 <osMessagePut>
      break;
 800b094:	e01e      	b.n	800b0d4 <USBH_MSC_Process+0x54c>
        MSC_Handle->current_lun = 0U;
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	2200      	movs	r2, #0
 800b09a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	731a      	strb	r2, [r3, #12]
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2204      	movs	r2, #4
 800b0a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	f005 ff10 	bl	8010ee0 <osMessagePut>
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b0c6:	2102      	movs	r1, #2
 800b0c8:	6878      	ldr	r0, [r7, #4]
 800b0ca:	4798      	blx	r3
      break;
 800b0cc:	e002      	b.n	800b0d4 <USBH_MSC_Process+0x54c>
      error = USBH_OK;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	75fb      	strb	r3, [r7, #23]
      break;
 800b0d2:	bf00      	nop
  }
  return error;
 800b0d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3718      	adds	r7, #24
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop

0800b0e0 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b083      	sub	sp, #12
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b0e8:	2300      	movs	r3, #0
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	370c      	adds	r7, #12
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr

0800b0f6 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b0f6:	b580      	push	{r7, lr}
 800b0f8:	b088      	sub	sp, #32
 800b0fa:	af02      	add	r7, sp, #8
 800b0fc:	6078      	str	r0, [r7, #4]
 800b0fe:	460b      	mov	r3, r1
 800b100:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b108:	69db      	ldr	r3, [r3, #28]
 800b10a:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800b10c:	2301      	movs	r3, #1
 800b10e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800b110:	2301      	movs	r3, #1
 800b112:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800b114:	78fb      	ldrb	r3, [r7, #3]
 800b116:	693a      	ldr	r2, [r7, #16]
 800b118:	2134      	movs	r1, #52	; 0x34
 800b11a:	fb01 f303 	mul.w	r3, r1, r3
 800b11e:	4413      	add	r3, r2
 800b120:	3390      	adds	r3, #144	; 0x90
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	2b07      	cmp	r3, #7
 800b126:	d04b      	beq.n	800b1c0 <USBH_MSC_RdWrProcess+0xca>
 800b128:	2b07      	cmp	r3, #7
 800b12a:	f300 80d2 	bgt.w	800b2d2 <USBH_MSC_RdWrProcess+0x1dc>
 800b12e:	2b05      	cmp	r3, #5
 800b130:	f000 8089 	beq.w	800b246 <USBH_MSC_RdWrProcess+0x150>
 800b134:	2b06      	cmp	r3, #6
 800b136:	f040 80cc 	bne.w	800b2d2 <USBH_MSC_RdWrProcess+0x1dc>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800b13a:	78f9      	ldrb	r1, [r7, #3]
 800b13c:	2300      	movs	r3, #0
 800b13e:	9300      	str	r3, [sp, #0]
 800b140:	2300      	movs	r3, #0
 800b142:	2200      	movs	r2, #0
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 ff54 	bl	800bff2 <USBH_MSC_SCSI_Read>
 800b14a:	4603      	mov	r3, r0
 800b14c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b14e:	7bfb      	ldrb	r3, [r7, #15]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d10b      	bne.n	800b16c <USBH_MSC_RdWrProcess+0x76>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b154:	78fb      	ldrb	r3, [r7, #3]
 800b156:	693a      	ldr	r2, [r7, #16]
 800b158:	2134      	movs	r1, #52	; 0x34
 800b15a:	fb01 f303 	mul.w	r3, r1, r3
 800b15e:	4413      	add	r3, r2
 800b160:	3390      	adds	r3, #144	; 0x90
 800b162:	2201      	movs	r2, #1
 800b164:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b166:	2300      	movs	r3, #0
 800b168:	75fb      	strb	r3, [r7, #23]
 800b16a:	e01a      	b.n	800b1a2 <USBH_MSC_RdWrProcess+0xac>
      }
      else if (scsi_status == USBH_FAIL)
 800b16c:	7bfb      	ldrb	r3, [r7, #15]
 800b16e:	2b02      	cmp	r3, #2
 800b170:	d109      	bne.n	800b186 <USBH_MSC_RdWrProcess+0x90>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b172:	78fb      	ldrb	r3, [r7, #3]
 800b174:	693a      	ldr	r2, [r7, #16]
 800b176:	2134      	movs	r1, #52	; 0x34
 800b178:	fb01 f303 	mul.w	r3, r1, r3
 800b17c:	4413      	add	r3, r2
 800b17e:	3390      	adds	r3, #144	; 0x90
 800b180:	2205      	movs	r2, #5
 800b182:	701a      	strb	r2, [r3, #0]
 800b184:	e00d      	b.n	800b1a2 <USBH_MSC_RdWrProcess+0xac>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b186:	7bfb      	ldrb	r3, [r7, #15]
 800b188:	2b04      	cmp	r3, #4
 800b18a:	d10a      	bne.n	800b1a2 <USBH_MSC_RdWrProcess+0xac>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b18c:	78fb      	ldrb	r3, [r7, #3]
 800b18e:	693a      	ldr	r2, [r7, #16]
 800b190:	2134      	movs	r1, #52	; 0x34
 800b192:	fb01 f303 	mul.w	r3, r1, r3
 800b196:	4413      	add	r3, r2
 800b198:	3390      	adds	r3, #144	; 0x90
 800b19a:	2208      	movs	r2, #8
 800b19c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b19e:	2302      	movs	r3, #2
 800b1a0:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2204      	movs	r2, #4
 800b1a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	f005 fe91 	bl	8010ee0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b1be:	e089      	b.n	800b2d4 <USBH_MSC_RdWrProcess+0x1de>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800b1c0:	78f9      	ldrb	r1, [r7, #3]
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	9300      	str	r3, [sp, #0]
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 fea6 	bl	800bf1c <USBH_MSC_SCSI_Write>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b1d4:	7bfb      	ldrb	r3, [r7, #15]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d10b      	bne.n	800b1f2 <USBH_MSC_RdWrProcess+0xfc>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b1da:	78fb      	ldrb	r3, [r7, #3]
 800b1dc:	693a      	ldr	r2, [r7, #16]
 800b1de:	2134      	movs	r1, #52	; 0x34
 800b1e0:	fb01 f303 	mul.w	r3, r1, r3
 800b1e4:	4413      	add	r3, r2
 800b1e6:	3390      	adds	r3, #144	; 0x90
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	75fb      	strb	r3, [r7, #23]
 800b1f0:	e01a      	b.n	800b228 <USBH_MSC_RdWrProcess+0x132>
      }
      else if (scsi_status == USBH_FAIL)
 800b1f2:	7bfb      	ldrb	r3, [r7, #15]
 800b1f4:	2b02      	cmp	r3, #2
 800b1f6:	d109      	bne.n	800b20c <USBH_MSC_RdWrProcess+0x116>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800b1f8:	78fb      	ldrb	r3, [r7, #3]
 800b1fa:	693a      	ldr	r2, [r7, #16]
 800b1fc:	2134      	movs	r1, #52	; 0x34
 800b1fe:	fb01 f303 	mul.w	r3, r1, r3
 800b202:	4413      	add	r3, r2
 800b204:	3390      	adds	r3, #144	; 0x90
 800b206:	2205      	movs	r2, #5
 800b208:	701a      	strb	r2, [r3, #0]
 800b20a:	e00d      	b.n	800b228 <USBH_MSC_RdWrProcess+0x132>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b20c:	7bfb      	ldrb	r3, [r7, #15]
 800b20e:	2b04      	cmp	r3, #4
 800b210:	d10a      	bne.n	800b228 <USBH_MSC_RdWrProcess+0x132>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b212:	78fb      	ldrb	r3, [r7, #3]
 800b214:	693a      	ldr	r2, [r7, #16]
 800b216:	2134      	movs	r1, #52	; 0x34
 800b218:	fb01 f303 	mul.w	r3, r1, r3
 800b21c:	4413      	add	r3, r2
 800b21e:	3390      	adds	r3, #144	; 0x90
 800b220:	2208      	movs	r2, #8
 800b222:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b224:	2302      	movs	r3, #2
 800b226:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2204      	movs	r2, #4
 800b22c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b23c:	2200      	movs	r2, #0
 800b23e:	4619      	mov	r1, r3
 800b240:	f005 fe4e 	bl	8010ee0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b244:	e046      	b.n	800b2d4 <USBH_MSC_RdWrProcess+0x1de>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800b246:	78fb      	ldrb	r3, [r7, #3]
 800b248:	2234      	movs	r2, #52	; 0x34
 800b24a:	fb02 f303 	mul.w	r3, r2, r3
 800b24e:	3398      	adds	r3, #152	; 0x98
 800b250:	693a      	ldr	r2, [r7, #16]
 800b252:	4413      	add	r3, r2
 800b254:	1d1a      	adds	r2, r3, #4
 800b256:	78fb      	ldrb	r3, [r7, #3]
 800b258:	4619      	mov	r1, r3
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 fde5 	bl	800be2a <USBH_MSC_SCSI_RequestSense>
 800b260:	4603      	mov	r3, r0
 800b262:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800b264:	7bfb      	ldrb	r3, [r7, #15]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d113      	bne.n	800b292 <USBH_MSC_RdWrProcess+0x19c>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800b26a:	78fb      	ldrb	r3, [r7, #3]
 800b26c:	693a      	ldr	r2, [r7, #16]
 800b26e:	2134      	movs	r1, #52	; 0x34
 800b270:	fb01 f303 	mul.w	r3, r1, r3
 800b274:	4413      	add	r3, r2
 800b276:	3390      	adds	r3, #144	; 0x90
 800b278:	2201      	movs	r2, #1
 800b27a:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800b27c:	78fb      	ldrb	r3, [r7, #3]
 800b27e:	693a      	ldr	r2, [r7, #16]
 800b280:	2134      	movs	r1, #52	; 0x34
 800b282:	fb01 f303 	mul.w	r3, r1, r3
 800b286:	4413      	add	r3, r2
 800b288:	3391      	adds	r3, #145	; 0x91
 800b28a:	2202      	movs	r2, #2
 800b28c:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800b28e:	2302      	movs	r3, #2
 800b290:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800b292:	7bfb      	ldrb	r3, [r7, #15]
 800b294:	2b02      	cmp	r3, #2
 800b296:	d00d      	beq.n	800b2b4 <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b298:	7bfb      	ldrb	r3, [r7, #15]
 800b29a:	2b04      	cmp	r3, #4
 800b29c:	d10a      	bne.n	800b2b4 <USBH_MSC_RdWrProcess+0x1be>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800b29e:	78fb      	ldrb	r3, [r7, #3]
 800b2a0:	693a      	ldr	r2, [r7, #16]
 800b2a2:	2134      	movs	r1, #52	; 0x34
 800b2a4:	fb01 f303 	mul.w	r3, r1, r3
 800b2a8:	4413      	add	r3, r2
 800b2aa:	3390      	adds	r3, #144	; 0x90
 800b2ac:	2208      	movs	r2, #8
 800b2ae:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800b2b0:	2302      	movs	r3, #2
 800b2b2:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2204      	movs	r2, #4
 800b2b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	f005 fe08 	bl	8010ee0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b2d0:	e000      	b.n	800b2d4 <USBH_MSC_RdWrProcess+0x1de>

    default:
      break;
 800b2d2:	bf00      	nop

  }
  return error;
 800b2d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3718      	adds	r7, #24
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}

0800b2de <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b2de:	b480      	push	{r7}
 800b2e0:	b085      	sub	sp, #20
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	6078      	str	r0, [r7, #4]
 800b2e6:	460b      	mov	r3, r1
 800b2e8:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2f0:	69db      	ldr	r3, [r3, #28]
 800b2f2:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	b2db      	uxtb	r3, r3
 800b2fa:	2b0b      	cmp	r3, #11
 800b2fc:	d10c      	bne.n	800b318 <USBH_MSC_UnitIsReady+0x3a>
 800b2fe:	78fb      	ldrb	r3, [r7, #3]
 800b300:	68ba      	ldr	r2, [r7, #8]
 800b302:	2134      	movs	r1, #52	; 0x34
 800b304:	fb01 f303 	mul.w	r3, r1, r3
 800b308:	4413      	add	r3, r2
 800b30a:	3391      	adds	r3, #145	; 0x91
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d102      	bne.n	800b318 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800b312:	2301      	movs	r3, #1
 800b314:	73fb      	strb	r3, [r7, #15]
 800b316:	e001      	b.n	800b31c <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800b318:	2300      	movs	r3, #0
 800b31a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800b31c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3714      	adds	r7, #20
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr

0800b32a <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800b32a:	b580      	push	{r7, lr}
 800b32c:	b086      	sub	sp, #24
 800b32e:	af00      	add	r7, sp, #0
 800b330:	60f8      	str	r0, [r7, #12]
 800b332:	460b      	mov	r3, r1
 800b334:	607a      	str	r2, [r7, #4]
 800b336:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b33e:	69db      	ldr	r3, [r3, #28]
 800b340:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	b2db      	uxtb	r3, r3
 800b348:	2b0b      	cmp	r3, #11
 800b34a:	d10d      	bne.n	800b368 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800b34c:	7afb      	ldrb	r3, [r7, #11]
 800b34e:	2234      	movs	r2, #52	; 0x34
 800b350:	fb02 f303 	mul.w	r3, r2, r3
 800b354:	3390      	adds	r3, #144	; 0x90
 800b356:	697a      	ldr	r2, [r7, #20]
 800b358:	4413      	add	r3, r2
 800b35a:	2234      	movs	r2, #52	; 0x34
 800b35c:	4619      	mov	r1, r3
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f016 f806 	bl	8021370 <memcpy>
    return USBH_OK;
 800b364:	2300      	movs	r3, #0
 800b366:	e000      	b.n	800b36a <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800b368:	2302      	movs	r3, #2
  }
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3718      	adds	r7, #24
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800b372:	b580      	push	{r7, lr}
 800b374:	b088      	sub	sp, #32
 800b376:	af02      	add	r7, sp, #8
 800b378:	60f8      	str	r0, [r7, #12]
 800b37a:	607a      	str	r2, [r7, #4]
 800b37c:	603b      	str	r3, [r7, #0]
 800b37e:	460b      	mov	r3, r1
 800b380:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b388:	69db      	ldr	r3, [r3, #28]
 800b38a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b392:	b2db      	uxtb	r3, r3
 800b394:	2b00      	cmp	r3, #0
 800b396:	d00e      	beq.n	800b3b6 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800b39e:	2b0b      	cmp	r3, #11
 800b3a0:	d109      	bne.n	800b3b6 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800b3a2:	7afb      	ldrb	r3, [r7, #11]
 800b3a4:	697a      	ldr	r2, [r7, #20]
 800b3a6:	2134      	movs	r1, #52	; 0x34
 800b3a8:	fb01 f303 	mul.w	r3, r1, r3
 800b3ac:	4413      	add	r3, r2
 800b3ae:	3390      	adds	r3, #144	; 0x90
 800b3b0:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d001      	beq.n	800b3ba <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800b3b6:	2302      	movs	r3, #2
 800b3b8:	e040      	b.n	800b43c <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	2206      	movs	r2, #6
 800b3be:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800b3c0:	7afb      	ldrb	r3, [r7, #11]
 800b3c2:	697a      	ldr	r2, [r7, #20]
 800b3c4:	2134      	movs	r1, #52	; 0x34
 800b3c6:	fb01 f303 	mul.w	r3, r1, r3
 800b3ca:	4413      	add	r3, r2
 800b3cc:	3390      	adds	r3, #144	; 0x90
 800b3ce:	2206      	movs	r2, #6
 800b3d0:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800b3d2:	7afb      	ldrb	r3, [r7, #11]
 800b3d4:	b29a      	uxth	r2, r3
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800b3dc:	7af9      	ldrb	r1, [r7, #11]
 800b3de:	6a3b      	ldr	r3, [r7, #32]
 800b3e0:	9300      	str	r3, [sp, #0]
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	68f8      	ldr	r0, [r7, #12]
 800b3e8:	f000 fe03 	bl	800bff2 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b3f2:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b3f4:	e016      	b.n	800b424 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	1ad2      	subs	r2, r2, r3
 800b400:	6a3b      	ldr	r3, [r7, #32]
 800b402:	f242 7110 	movw	r1, #10000	; 0x2710
 800b406:	fb01 f303 	mul.w	r3, r1, r3
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d805      	bhi.n	800b41a <USBH_MSC_Read+0xa8>
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b414:	b2db      	uxtb	r3, r3
 800b416:	2b00      	cmp	r3, #0
 800b418:	d104      	bne.n	800b424 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	2201      	movs	r2, #1
 800b41e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800b420:	2302      	movs	r3, #2
 800b422:	e00b      	b.n	800b43c <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b424:	7afb      	ldrb	r3, [r7, #11]
 800b426:	4619      	mov	r1, r3
 800b428:	68f8      	ldr	r0, [r7, #12]
 800b42a:	f7ff fe64 	bl	800b0f6 <USBH_MSC_RdWrProcess>
 800b42e:	4603      	mov	r3, r0
 800b430:	2b01      	cmp	r3, #1
 800b432:	d0e0      	beq.n	800b3f6 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	2201      	movs	r2, #1
 800b438:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800b43a:	2300      	movs	r3, #0
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3718      	adds	r7, #24
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b088      	sub	sp, #32
 800b448:	af02      	add	r7, sp, #8
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	607a      	str	r2, [r7, #4]
 800b44e:	603b      	str	r3, [r7, #0]
 800b450:	460b      	mov	r3, r1
 800b452:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b45a:	69db      	ldr	r3, [r3, #28]
 800b45c:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b464:	b2db      	uxtb	r3, r3
 800b466:	2b00      	cmp	r3, #0
 800b468:	d00e      	beq.n	800b488 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800b470:	2b0b      	cmp	r3, #11
 800b472:	d109      	bne.n	800b488 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800b474:	7afb      	ldrb	r3, [r7, #11]
 800b476:	697a      	ldr	r2, [r7, #20]
 800b478:	2134      	movs	r1, #52	; 0x34
 800b47a:	fb01 f303 	mul.w	r3, r1, r3
 800b47e:	4413      	add	r3, r2
 800b480:	3390      	adds	r3, #144	; 0x90
 800b482:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800b484:	2b01      	cmp	r3, #1
 800b486:	d001      	beq.n	800b48c <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800b488:	2302      	movs	r3, #2
 800b48a:	e040      	b.n	800b50e <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	2207      	movs	r2, #7
 800b490:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800b492:	7afb      	ldrb	r3, [r7, #11]
 800b494:	697a      	ldr	r2, [r7, #20]
 800b496:	2134      	movs	r1, #52	; 0x34
 800b498:	fb01 f303 	mul.w	r3, r1, r3
 800b49c:	4413      	add	r3, r2
 800b49e:	3390      	adds	r3, #144	; 0x90
 800b4a0:	2207      	movs	r2, #7
 800b4a2:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800b4a4:	7afb      	ldrb	r3, [r7, #11]
 800b4a6:	b29a      	uxth	r2, r3
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800b4ae:	7af9      	ldrb	r1, [r7, #11]
 800b4b0:	6a3b      	ldr	r3, [r7, #32]
 800b4b2:	9300      	str	r3, [sp, #0]
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	687a      	ldr	r2, [r7, #4]
 800b4b8:	68f8      	ldr	r0, [r7, #12]
 800b4ba:	f000 fd2f 	bl	800bf1c <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b4c4:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b4c6:	e016      	b.n	800b4f6 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	1ad2      	subs	r2, r2, r3
 800b4d2:	6a3b      	ldr	r3, [r7, #32]
 800b4d4:	f242 7110 	movw	r1, #10000	; 0x2710
 800b4d8:	fb01 f303 	mul.w	r3, r1, r3
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d805      	bhi.n	800b4ec <USBH_MSC_Write+0xa8>
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b4e6:	b2db      	uxtb	r3, r3
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d104      	bne.n	800b4f6 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800b4f2:	2302      	movs	r3, #2
 800b4f4:	e00b      	b.n	800b50e <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800b4f6:	7afb      	ldrb	r3, [r7, #11]
 800b4f8:	4619      	mov	r1, r3
 800b4fa:	68f8      	ldr	r0, [r7, #12]
 800b4fc:	f7ff fdfb 	bl	800b0f6 <USBH_MSC_RdWrProcess>
 800b500:	4603      	mov	r3, r0
 800b502:	2b01      	cmp	r3, #1
 800b504:	d0e0      	beq.n	800b4c8 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	2201      	movs	r2, #1
 800b50a:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800b50c:	2300      	movs	r3, #0
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3718      	adds	r7, #24
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}

0800b516 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800b516:	b580      	push	{r7, lr}
 800b518:	b082      	sub	sp, #8
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2221      	movs	r2, #33	; 0x21
 800b522:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	22ff      	movs	r2, #255	; 0xff
 800b528:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2200      	movs	r2, #0
 800b52e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2200      	movs	r2, #0
 800b534:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800b53c:	2200      	movs	r2, #0
 800b53e:	2100      	movs	r1, #0
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f001 ff7a 	bl	800d43a <USBH_CtlReq>
 800b546:	4603      	mov	r3, r0
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3708      	adds	r7, #8
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b082      	sub	sp, #8
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	22a1      	movs	r2, #161	; 0xa1
 800b55e:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	22fe      	movs	r2, #254	; 0xfe
 800b564:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2200      	movs	r2, #0
 800b56a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2201      	movs	r2, #1
 800b576:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800b578:	2201      	movs	r2, #1
 800b57a:	6839      	ldr	r1, [r7, #0]
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f001 ff5c 	bl	800d43a <USBH_CtlReq>
 800b582:	4603      	mov	r3, r0
}
 800b584:	4618      	mov	r0, r3
 800b586:	3708      	adds	r7, #8
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}

0800b58c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b085      	sub	sp, #20
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b59a:	69db      	ldr	r3, [r3, #28]
 800b59c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	4a09      	ldr	r2, [pc, #36]	; (800b5c8 <USBH_MSC_BOT_Init+0x3c>)
 800b5a2:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	4a09      	ldr	r2, [pc, #36]	; (800b5cc <USBH_MSC_BOT_Init+0x40>)
 800b5a8:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2201      	movs	r2, #1
 800b5ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800b5ba:	2300      	movs	r3, #0
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3714      	adds	r7, #20
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr
 800b5c8:	43425355 	.word	0x43425355
 800b5cc:	20304050 	.word	0x20304050

0800b5d0 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b088      	sub	sp, #32
 800b5d4:	af02      	add	r7, sp, #8
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	460b      	mov	r3, r1
 800b5da:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5f2:	69db      	ldr	r3, [r3, #28]
 800b5f4:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b600:	3b01      	subs	r3, #1
 800b602:	2b0a      	cmp	r3, #10
 800b604:	f200 822a 	bhi.w	800ba5c <USBH_MSC_BOT_Process+0x48c>
 800b608:	a201      	add	r2, pc, #4	; (adr r2, 800b610 <USBH_MSC_BOT_Process+0x40>)
 800b60a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b60e:	bf00      	nop
 800b610:	0800b63d 	.word	0x0800b63d
 800b614:	0800b665 	.word	0x0800b665
 800b618:	0800b723 	.word	0x0800b723
 800b61c:	0800b741 	.word	0x0800b741
 800b620:	0800b7fd 	.word	0x0800b7fd
 800b624:	0800b81f 	.word	0x0800b81f
 800b628:	0800b90b 	.word	0x0800b90b
 800b62c:	0800b927 	.word	0x0800b927
 800b630:	0800b9b1 	.word	0x0800b9b1
 800b634:	0800b9e1 	.word	0x0800b9e1
 800b638:	0800ba43 	.word	0x0800ba43
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	78fa      	ldrb	r2, [r7, #3]
 800b640:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	2202      	movs	r2, #2
 800b648:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	795b      	ldrb	r3, [r3, #5]
 800b656:	2201      	movs	r2, #1
 800b658:	9200      	str	r2, [sp, #0]
 800b65a:	221f      	movs	r2, #31
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f002 f9ea 	bl	800da36 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800b662:	e20a      	b.n	800ba7a <USBH_MSC_BOT_Process+0x4aa>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	795b      	ldrb	r3, [r3, #5]
 800b668:	4619      	mov	r1, r3
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f015 fc62 	bl	8020f34 <USBH_LL_GetURBState>
 800b670:	4603      	mov	r3, r0
 800b672:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b674:	7d3b      	ldrb	r3, [r7, #20]
 800b676:	2b01      	cmp	r3, #1
 800b678:	d126      	bne.n	800b6c8 <USBH_MSC_BOT_Process+0xf8>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d00f      	beq.n	800b6a2 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800b688:	b25b      	sxtb	r3, r3
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	da04      	bge.n	800b698 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	2203      	movs	r2, #3
 800b692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800b696:	e008      	b.n	800b6aa <USBH_MSC_BOT_Process+0xda>
          }
          else
          {
            /* Data Direction is OUT */
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	2205      	movs	r2, #5
 800b69c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800b6a0:	e003      	b.n	800b6aa <USBH_MSC_BOT_Process+0xda>
        }

        else
        {
          /* If there is NO Data Transfer Stage */
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	2207      	movs	r2, #7
 800b6a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2202      	movs	r2, #2
 800b6ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b6be:	2200      	movs	r2, #0
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	f005 fc0d 	bl	8010ee0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b6c6:	e1cb      	b.n	800ba60 <USBH_MSC_BOT_Process+0x490>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b6c8:	7d3b      	ldrb	r3, [r7, #20]
 800b6ca:	2b02      	cmp	r3, #2
 800b6cc:	d112      	bne.n	800b6f4 <USBH_MSC_BOT_Process+0x124>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	2201      	movs	r2, #1
 800b6d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2202      	movs	r2, #2
 800b6da:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	f005 fbf7 	bl	8010ee0 <osMessagePut>
      break;
 800b6f2:	e1b5      	b.n	800ba60 <USBH_MSC_BOT_Process+0x490>
        if (URB_Status == USBH_URB_STALL)
 800b6f4:	7d3b      	ldrb	r3, [r7, #20]
 800b6f6:	2b05      	cmp	r3, #5
 800b6f8:	f040 81b2 	bne.w	800ba60 <USBH_MSC_BOT_Process+0x490>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	220a      	movs	r2, #10
 800b700:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2202      	movs	r2, #2
 800b708:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b718:	2200      	movs	r2, #0
 800b71a:	4619      	mov	r1, r3
 800b71c:	f005 fbe0 	bl	8010ee0 <osMessagePut>
      break;
 800b720:	e19e      	b.n	800ba60 <USBH_MSC_BOT_Process+0x490>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	895a      	ldrh	r2, [r3, #10]
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	791b      	ldrb	r3, [r3, #4]
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f002 f9a5 	bl	800da80 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	2204      	movs	r2, #4
 800b73a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800b73e:	e19c      	b.n	800ba7a <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	791b      	ldrb	r3, [r3, #4]
 800b744:	4619      	mov	r1, r3
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f015 fbf4 	bl	8020f34 <USBH_LL_GetURBState>
 800b74c:	4603      	mov	r3, r0
 800b74e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b750:	7d3b      	ldrb	r3, [r7, #20]
 800b752:	2b01      	cmp	r3, #1
 800b754:	d13b      	bne.n	800b7ce <USBH_MSC_BOT_Process+0x1fe>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b75a:	693a      	ldr	r2, [r7, #16]
 800b75c:	8952      	ldrh	r2, [r2, #10]
 800b75e:	4293      	cmp	r3, r2
 800b760:	d910      	bls.n	800b784 <USBH_MSC_BOT_Process+0x1b4>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b768:	693a      	ldr	r2, [r7, #16]
 800b76a:	8952      	ldrh	r2, [r2, #10]
 800b76c:	441a      	add	r2, r3
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b778:	693a      	ldr	r2, [r7, #16]
 800b77a:	8952      	ldrh	r2, [r2, #10]
 800b77c:	1a9a      	subs	r2, r3, r2
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	65da      	str	r2, [r3, #92]	; 0x5c
 800b782:	e002      	b.n	800b78a <USBH_MSC_BOT_Process+0x1ba>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	2200      	movs	r2, #0
 800b788:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d00a      	beq.n	800b7a8 <USBH_MSC_BOT_Process+0x1d8>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	895a      	ldrh	r2, [r3, #10]
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	791b      	ldrb	r3, [r3, #4]
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f002 f96d 	bl	800da80 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800b7a6:	e15d      	b.n	800ba64 <USBH_MSC_BOT_Process+0x494>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	2207      	movs	r2, #7
 800b7ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2202      	movs	r2, #2
 800b7b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	f005 fb8a 	bl	8010ee0 <osMessagePut>
      break;
 800b7cc:	e14a      	b.n	800ba64 <USBH_MSC_BOT_Process+0x494>
      else if (URB_Status == USBH_URB_STALL)
 800b7ce:	7d3b      	ldrb	r3, [r7, #20]
 800b7d0:	2b05      	cmp	r3, #5
 800b7d2:	f040 8147 	bne.w	800ba64 <USBH_MSC_BOT_Process+0x494>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	2209      	movs	r2, #9
 800b7da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2202      	movs	r2, #2
 800b7e2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	f005 fb73 	bl	8010ee0 <osMessagePut>
      break;
 800b7fa:	e133      	b.n	800ba64 <USBH_MSC_BOT_Process+0x494>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	891a      	ldrh	r2, [r3, #8]
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	795b      	ldrb	r3, [r3, #5]
 800b80a:	2001      	movs	r0, #1
 800b80c:	9000      	str	r0, [sp, #0]
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f002 f911 	bl	800da36 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	2206      	movs	r2, #6
 800b818:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b81c:	e12d      	b.n	800ba7a <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	795b      	ldrb	r3, [r3, #5]
 800b822:	4619      	mov	r1, r3
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f015 fb85 	bl	8020f34 <USBH_LL_GetURBState>
 800b82a:	4603      	mov	r3, r0
 800b82c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800b82e:	7d3b      	ldrb	r3, [r7, #20]
 800b830:	2b01      	cmp	r3, #1
 800b832:	d13d      	bne.n	800b8b0 <USBH_MSC_BOT_Process+0x2e0>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b838:	693a      	ldr	r2, [r7, #16]
 800b83a:	8912      	ldrh	r2, [r2, #8]
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d910      	bls.n	800b862 <USBH_MSC_BOT_Process+0x292>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b846:	693a      	ldr	r2, [r7, #16]
 800b848:	8912      	ldrh	r2, [r2, #8]
 800b84a:	441a      	add	r2, r3
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b856:	693a      	ldr	r2, [r7, #16]
 800b858:	8912      	ldrh	r2, [r2, #8]
 800b85a:	1a9a      	subs	r2, r3, r2
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	65da      	str	r2, [r3, #92]	; 0x5c
 800b860:	e002      	b.n	800b868 <USBH_MSC_BOT_Process+0x298>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	2200      	movs	r2, #0
 800b866:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d00c      	beq.n	800b88a <USBH_MSC_BOT_Process+0x2ba>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	891a      	ldrh	r2, [r3, #8]
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	795b      	ldrb	r3, [r3, #5]
 800b87e:	2001      	movs	r0, #1
 800b880:	9000      	str	r0, [sp, #0]
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f002 f8d7 	bl	800da36 <USBH_BulkSendData>
 800b888:	e003      	b.n	800b892 <USBH_MSC_BOT_Process+0x2c2>
                            MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);
        }
        else
        {
          /* If value was 0, and successful transfer, then change the state */
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	2207      	movs	r2, #7
 800b88e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2202      	movs	r2, #2
 800b896:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	f005 fb19 	bl	8010ee0 <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 800b8ae:	e0db      	b.n	800ba68 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b8b0:	7d3b      	ldrb	r3, [r7, #20]
 800b8b2:	2b02      	cmp	r3, #2
 800b8b4:	d112      	bne.n	800b8dc <USBH_MSC_BOT_Process+0x30c>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	2205      	movs	r2, #5
 800b8ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2202      	movs	r2, #2
 800b8c2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	f005 fb03 	bl	8010ee0 <osMessagePut>
      break;
 800b8da:	e0c5      	b.n	800ba68 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_STALL)
 800b8dc:	7d3b      	ldrb	r3, [r7, #20]
 800b8de:	2b05      	cmp	r3, #5
 800b8e0:	f040 80c2 	bne.w	800ba68 <USBH_MSC_BOT_Process+0x498>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	220a      	movs	r2, #10
 800b8e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2202      	movs	r2, #2
 800b8f0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b900:	2200      	movs	r2, #0
 800b902:	4619      	mov	r1, r3
 800b904:	f005 faec 	bl	8010ee0 <osMessagePut>
      break;
 800b908:	e0ae      	b.n	800ba68 <USBH_MSC_BOT_Process+0x498>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	791b      	ldrb	r3, [r3, #4]
 800b914:	220d      	movs	r2, #13
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f002 f8b2 	bl	800da80 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	2208      	movs	r2, #8
 800b920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b924:	e0a9      	b.n	800ba7a <USBH_MSC_BOT_Process+0x4aa>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800b926:	693b      	ldr	r3, [r7, #16]
 800b928:	791b      	ldrb	r3, [r3, #4]
 800b92a:	4619      	mov	r1, r3
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f015 fb01 	bl	8020f34 <USBH_LL_GetURBState>
 800b932:	4603      	mov	r3, r0
 800b934:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800b936:	7d3b      	ldrb	r3, [r7, #20]
 800b938:	2b01      	cmp	r3, #1
 800b93a:	d123      	bne.n	800b984 <USBH_MSC_BOT_Process+0x3b4>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	2201      	movs	r2, #1
 800b940:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	2201      	movs	r2, #1
 800b948:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f000 f8c5 	bl	800badc <USBH_MSC_DecodeCSW>
 800b952:	4603      	mov	r3, r0
 800b954:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800b956:	7d7b      	ldrb	r3, [r7, #21]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d102      	bne.n	800b962 <USBH_MSC_BOT_Process+0x392>
        {
          status = USBH_OK;
 800b95c:	2300      	movs	r3, #0
 800b95e:	75fb      	strb	r3, [r7, #23]
 800b960:	e001      	b.n	800b966 <USBH_MSC_BOT_Process+0x396>
        }
        else
        {
          status = USBH_FAIL;
 800b962:	2302      	movs	r3, #2
 800b964:	75fb      	strb	r3, [r7, #23]
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2202      	movs	r2, #2
 800b96a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b97a:	2200      	movs	r2, #0
 800b97c:	4619      	mov	r1, r3
 800b97e:	f005 faaf 	bl	8010ee0 <osMessagePut>
#endif
      }
      else
      {
      }
      break;
 800b982:	e073      	b.n	800ba6c <USBH_MSC_BOT_Process+0x49c>
      else if (URB_Status == USBH_URB_STALL)
 800b984:	7d3b      	ldrb	r3, [r7, #20]
 800b986:	2b05      	cmp	r3, #5
 800b988:	d170      	bne.n	800ba6c <USBH_MSC_BOT_Process+0x49c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	2209      	movs	r2, #9
 800b98e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2202      	movs	r2, #2
 800b996:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	f005 fa99 	bl	8010ee0 <osMessagePut>
      break;
 800b9ae:	e05d      	b.n	800ba6c <USBH_MSC_BOT_Process+0x49c>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800b9b0:	78fb      	ldrb	r3, [r7, #3]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 f864 	bl	800ba84 <USBH_MSC_BOT_Abort>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800b9c0:	7dbb      	ldrb	r3, [r7, #22]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d104      	bne.n	800b9d0 <USBH_MSC_BOT_Process+0x400>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	2207      	movs	r2, #7
 800b9ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800b9ce:	e04f      	b.n	800ba70 <USBH_MSC_BOT_Process+0x4a0>
      else if (error == USBH_UNRECOVERED_ERROR)
 800b9d0:	7dbb      	ldrb	r3, [r7, #22]
 800b9d2:	2b04      	cmp	r3, #4
 800b9d4:	d14c      	bne.n	800ba70 <USBH_MSC_BOT_Process+0x4a0>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	220b      	movs	r2, #11
 800b9da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800b9de:	e047      	b.n	800ba70 <USBH_MSC_BOT_Process+0x4a0>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800b9e0:	78fb      	ldrb	r3, [r7, #3]
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 f84c 	bl	800ba84 <USBH_MSC_BOT_Abort>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800b9f0:	7dbb      	ldrb	r3, [r7, #22]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d11d      	bne.n	800ba32 <USBH_MSC_BOT_Process+0x462>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	795b      	ldrb	r3, [r3, #5]
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f015 faf3 	bl	8020fe8 <USBH_LL_GetToggle>
 800ba02:	4603      	mov	r3, r0
 800ba04:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	7959      	ldrb	r1, [r3, #5]
 800ba0a:	7bfb      	ldrb	r3, [r7, #15]
 800ba0c:	f1c3 0301 	rsb	r3, r3, #1
 800ba10:	b2db      	uxtb	r3, r3
 800ba12:	461a      	mov	r2, r3
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f015 fab7 	bl	8020f88 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	791b      	ldrb	r3, [r3, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	4619      	mov	r1, r3
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f015 fab0 	bl	8020f88 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	2209      	movs	r2, #9
 800ba2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800ba30:	e020      	b.n	800ba74 <USBH_MSC_BOT_Process+0x4a4>
        if (error == USBH_UNRECOVERED_ERROR)
 800ba32:	7dbb      	ldrb	r3, [r7, #22]
 800ba34:	2b04      	cmp	r3, #4
 800ba36:	d11d      	bne.n	800ba74 <USBH_MSC_BOT_Process+0x4a4>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	220b      	movs	r2, #11
 800ba3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800ba40:	e018      	b.n	800ba74 <USBH_MSC_BOT_Process+0x4a4>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f7ff fd67 	bl	800b516 <USBH_MSC_BOT_REQ_Reset>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800ba4c:	7dfb      	ldrb	r3, [r7, #23]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d112      	bne.n	800ba78 <USBH_MSC_BOT_Process+0x4a8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	2201      	movs	r2, #1
 800ba56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800ba5a:	e00d      	b.n	800ba78 <USBH_MSC_BOT_Process+0x4a8>

    default:
      break;
 800ba5c:	bf00      	nop
 800ba5e:	e00c      	b.n	800ba7a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800ba60:	bf00      	nop
 800ba62:	e00a      	b.n	800ba7a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800ba64:	bf00      	nop
 800ba66:	e008      	b.n	800ba7a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800ba68:	bf00      	nop
 800ba6a:	e006      	b.n	800ba7a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800ba6c:	bf00      	nop
 800ba6e:	e004      	b.n	800ba7a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800ba70:	bf00      	nop
 800ba72:	e002      	b.n	800ba7a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800ba74:	bf00      	nop
 800ba76:	e000      	b.n	800ba7a <USBH_MSC_BOT_Process+0x4aa>
      break;
 800ba78:	bf00      	nop
  }
  return status;
 800ba7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3718      	adds	r7, #24
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}

0800ba84 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b084      	sub	sp, #16
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	70fb      	strb	r3, [r7, #3]
 800ba90:	4613      	mov	r3, r2
 800ba92:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800ba94:	2302      	movs	r3, #2
 800ba96:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ba9e:	69db      	ldr	r3, [r3, #28]
 800baa0:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800baa2:	78bb      	ldrb	r3, [r7, #2]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d002      	beq.n	800baae <USBH_MSC_BOT_Abort+0x2a>
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d009      	beq.n	800bac0 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800baac:	e011      	b.n	800bad2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	79db      	ldrb	r3, [r3, #7]
 800bab2:	4619      	mov	r1, r3
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f001 fae0 	bl	800d07a <USBH_ClrFeature>
 800baba:	4603      	mov	r3, r0
 800babc:	73fb      	strb	r3, [r7, #15]
      break;
 800babe:	e008      	b.n	800bad2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	799b      	ldrb	r3, [r3, #6]
 800bac4:	4619      	mov	r1, r3
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f001 fad7 	bl	800d07a <USBH_ClrFeature>
 800bacc:	4603      	mov	r3, r0
 800bace:	73fb      	strb	r3, [r7, #15]
      break;
 800bad0:	bf00      	nop
  }
  return status;
 800bad2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3710      	adds	r7, #16
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b084      	sub	sp, #16
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800baea:	69db      	ldr	r3, [r3, #28]
 800baec:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800baee:	2301      	movs	r3, #1
 800baf0:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	791b      	ldrb	r3, [r3, #4]
 800baf6:	4619      	mov	r1, r3
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f015 f989 	bl	8020e10 <USBH_LL_GetLastXferSize>
 800bafe:	4603      	mov	r3, r0
 800bb00:	2b0d      	cmp	r3, #13
 800bb02:	d002      	beq.n	800bb0a <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800bb04:	2302      	movs	r3, #2
 800bb06:	73fb      	strb	r3, [r7, #15]
 800bb08:	e024      	b.n	800bb54 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb0e:	4a14      	ldr	r2, [pc, #80]	; (800bb60 <USBH_MSC_DecodeCSW+0x84>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d11d      	bne.n	800bb50 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb1c:	429a      	cmp	r2, r3
 800bb1e:	d119      	bne.n	800bb54 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d102      	bne.n	800bb30 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	73fb      	strb	r3, [r7, #15]
 800bb2e:	e011      	b.n	800bb54 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bb36:	2b01      	cmp	r3, #1
 800bb38:	d102      	bne.n	800bb40 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	73fb      	strb	r3, [r7, #15]
 800bb3e:	e009      	b.n	800bb54 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bb46:	2b02      	cmp	r3, #2
 800bb48:	d104      	bne.n	800bb54 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800bb4a:	2302      	movs	r3, #2
 800bb4c:	73fb      	strb	r3, [r7, #15]
 800bb4e:	e001      	b.n	800bb54 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800bb50:	2302      	movs	r3, #2
 800bb52:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800bb54:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3710      	adds	r7, #16
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
 800bb5e:	bf00      	nop
 800bb60:	53425355 	.word	0x53425355

0800bb64 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b084      	sub	sp, #16
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	460b      	mov	r3, r1
 800bb6e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800bb70:	2302      	movs	r3, #2
 800bb72:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bb7a:	69db      	ldr	r3, [r3, #28]
 800bb7c:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bb84:	2b01      	cmp	r3, #1
 800bb86:	d002      	beq.n	800bb8e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800bb88:	2b02      	cmp	r3, #2
 800bb8a:	d021      	beq.n	800bbd0 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800bb8c:	e028      	b.n	800bbe0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	2200      	movs	r2, #0
 800bb92:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	2200      	movs	r2, #0
 800bb98:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	220a      	movs	r2, #10
 800bba0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	3363      	adds	r3, #99	; 0x63
 800bba8:	2210      	movs	r2, #16
 800bbaa:	2100      	movs	r1, #0
 800bbac:	4618      	mov	r0, r3
 800bbae:	f015 fc07 	bl	80213c0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	2202      	movs	r2, #2
 800bbc6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	73fb      	strb	r3, [r7, #15]
      break;
 800bbce:	e007      	b.n	800bbe0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bbd0:	78fb      	ldrb	r3, [r7, #3]
 800bbd2:	4619      	mov	r1, r3
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f7ff fcfb 	bl	800b5d0 <USBH_MSC_BOT_Process>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	73fb      	strb	r3, [r7, #15]
      break;
 800bbde:	bf00      	nop
  }

  return error;
 800bbe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3710      	adds	r7, #16
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}

0800bbea <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800bbea:	b580      	push	{r7, lr}
 800bbec:	b086      	sub	sp, #24
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	60f8      	str	r0, [r7, #12]
 800bbf2:	460b      	mov	r3, r1
 800bbf4:	607a      	str	r2, [r7, #4]
 800bbf6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800bbf8:	2301      	movs	r3, #1
 800bbfa:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bc02:	69db      	ldr	r3, [r3, #28]
 800bc04:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d002      	beq.n	800bc16 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800bc10:	2b02      	cmp	r3, #2
 800bc12:	d027      	beq.n	800bc64 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800bc14:	e05f      	b.n	800bcd6 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	2208      	movs	r2, #8
 800bc1a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	2280      	movs	r2, #128	; 0x80
 800bc20:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	220a      	movs	r2, #10
 800bc28:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	3363      	adds	r3, #99	; 0x63
 800bc30:	2210      	movs	r2, #16
 800bc32:	2100      	movs	r1, #0
 800bc34:	4618      	mov	r0, r3
 800bc36:	f015 fbc3 	bl	80213c0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	2225      	movs	r2, #37	; 0x25
 800bc3e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	2201      	movs	r2, #1
 800bc46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	2202      	movs	r2, #2
 800bc4e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	f103 0210 	add.w	r2, r3, #16
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	75fb      	strb	r3, [r7, #23]
      break;
 800bc62:	e038      	b.n	800bcd6 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bc64:	7afb      	ldrb	r3, [r7, #11]
 800bc66:	4619      	mov	r1, r3
 800bc68:	68f8      	ldr	r0, [r7, #12]
 800bc6a:	f7ff fcb1 	bl	800b5d0 <USBH_MSC_BOT_Process>
 800bc6e:	4603      	mov	r3, r0
 800bc70:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800bc72:	7dfb      	ldrb	r3, [r7, #23]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d12d      	bne.n	800bcd4 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc7e:	3303      	adds	r3, #3
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	461a      	mov	r2, r3
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc8a:	3302      	adds	r3, #2
 800bc8c:	781b      	ldrb	r3, [r3, #0]
 800bc8e:	021b      	lsls	r3, r3, #8
 800bc90:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc98:	3301      	adds	r3, #1
 800bc9a:	781b      	ldrb	r3, [r3, #0]
 800bc9c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800bc9e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	061b      	lsls	r3, r3, #24
 800bcaa:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcb6:	3307      	adds	r3, #7
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	b29a      	uxth	r2, r3
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcc2:	3306      	adds	r3, #6
 800bcc4:	781b      	ldrb	r3, [r3, #0]
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	021b      	lsls	r3, r3, #8
 800bcca:	b29b      	uxth	r3, r3
 800bccc:	4313      	orrs	r3, r2
 800bcce:	b29a      	uxth	r2, r3
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	809a      	strh	r2, [r3, #4]
      break;
 800bcd4:	bf00      	nop
  }

  return error;
 800bcd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3718      	adds	r7, #24
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b086      	sub	sp, #24
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	460b      	mov	r3, r1
 800bcea:	607a      	str	r2, [r7, #4]
 800bcec:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800bcee:	2302      	movs	r3, #2
 800bcf0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bcf8:	69db      	ldr	r3, [r3, #28]
 800bcfa:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bd02:	2b01      	cmp	r3, #1
 800bd04:	d002      	beq.n	800bd0c <USBH_MSC_SCSI_Inquiry+0x2c>
 800bd06:	2b02      	cmp	r3, #2
 800bd08:	d03d      	beq.n	800bd86 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800bd0a:	e089      	b.n	800be20 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	2224      	movs	r2, #36	; 0x24
 800bd10:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	2280      	movs	r2, #128	; 0x80
 800bd16:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	220a      	movs	r2, #10
 800bd1e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	3363      	adds	r3, #99	; 0x63
 800bd26:	220a      	movs	r2, #10
 800bd28:	2100      	movs	r1, #0
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f015 fb48 	bl	80213c0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	2212      	movs	r2, #18
 800bd34:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800bd38:	7afb      	ldrb	r3, [r7, #11]
 800bd3a:	015b      	lsls	r3, r3, #5
 800bd3c:	b2da      	uxtb	r2, r3
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	2200      	movs	r2, #0
 800bd48:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	2224      	movs	r2, #36	; 0x24
 800bd58:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	2201      	movs	r2, #1
 800bd68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	2202      	movs	r2, #2
 800bd70:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	f103 0210 	add.w	r2, r3, #16
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800bd80:	2301      	movs	r3, #1
 800bd82:	75fb      	strb	r3, [r7, #23]
      break;
 800bd84:	e04c      	b.n	800be20 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bd86:	7afb      	ldrb	r3, [r7, #11]
 800bd88:	4619      	mov	r1, r3
 800bd8a:	68f8      	ldr	r0, [r7, #12]
 800bd8c:	f7ff fc20 	bl	800b5d0 <USBH_MSC_BOT_Process>
 800bd90:	4603      	mov	r3, r0
 800bd92:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800bd94:	7dfb      	ldrb	r3, [r7, #23]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d141      	bne.n	800be1e <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800bd9a:	2222      	movs	r2, #34	; 0x22
 800bd9c:	2100      	movs	r1, #0
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f015 fb0e 	bl	80213c0 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	f003 031f 	and.w	r3, r3, #31
 800bdb0:	b2da      	uxtb	r2, r3
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	095b      	lsrs	r3, r3, #5
 800bdc0:	b2da      	uxtb	r2, r3
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bdcc:	3301      	adds	r3, #1
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	b25b      	sxtb	r3, r3
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	da03      	bge.n	800bdde <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2201      	movs	r2, #1
 800bdda:	709a      	strb	r2, [r3, #2]
 800bddc:	e002      	b.n	800bde4 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2200      	movs	r2, #0
 800bde2:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	1cd8      	adds	r0, r3, #3
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bdee:	3308      	adds	r3, #8
 800bdf0:	2208      	movs	r2, #8
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	f015 fabc 	bl	8021370 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f103 000c 	add.w	r0, r3, #12
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be04:	3310      	adds	r3, #16
 800be06:	2210      	movs	r2, #16
 800be08:	4619      	mov	r1, r3
 800be0a:	f015 fab1 	bl	8021370 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	331d      	adds	r3, #29
 800be12:	693a      	ldr	r2, [r7, #16]
 800be14:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800be18:	3220      	adds	r2, #32
 800be1a:	6812      	ldr	r2, [r2, #0]
 800be1c:	601a      	str	r2, [r3, #0]
      break;
 800be1e:	bf00      	nop
  }

  return error;
 800be20:	7dfb      	ldrb	r3, [r7, #23]
}
 800be22:	4618      	mov	r0, r3
 800be24:	3718      	adds	r7, #24
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}

0800be2a <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800be2a:	b580      	push	{r7, lr}
 800be2c:	b086      	sub	sp, #24
 800be2e:	af00      	add	r7, sp, #0
 800be30:	60f8      	str	r0, [r7, #12]
 800be32:	460b      	mov	r3, r1
 800be34:	607a      	str	r2, [r7, #4]
 800be36:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800be38:	2302      	movs	r3, #2
 800be3a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800be42:	69db      	ldr	r3, [r3, #28]
 800be44:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d002      	beq.n	800be56 <USBH_MSC_SCSI_RequestSense+0x2c>
 800be50:	2b02      	cmp	r3, #2
 800be52:	d03d      	beq.n	800bed0 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800be54:	e05d      	b.n	800bf12 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	220e      	movs	r2, #14
 800be5a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	2280      	movs	r2, #128	; 0x80
 800be60:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	220a      	movs	r2, #10
 800be68:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	3363      	adds	r3, #99	; 0x63
 800be70:	2210      	movs	r2, #16
 800be72:	2100      	movs	r1, #0
 800be74:	4618      	mov	r0, r3
 800be76:	f015 faa3 	bl	80213c0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	2203      	movs	r2, #3
 800be7e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800be82:	7afb      	ldrb	r3, [r7, #11]
 800be84:	015b      	lsls	r3, r3, #5
 800be86:	b2da      	uxtb	r2, r3
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	2200      	movs	r2, #0
 800be92:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	2200      	movs	r2, #0
 800be9a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	220e      	movs	r2, #14
 800bea2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	2200      	movs	r2, #0
 800beaa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	2201      	movs	r2, #1
 800beb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	2202      	movs	r2, #2
 800beba:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800bebe:	693b      	ldr	r3, [r7, #16]
 800bec0:	f103 0210 	add.w	r2, r3, #16
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800beca:	2301      	movs	r3, #1
 800becc:	75fb      	strb	r3, [r7, #23]
      break;
 800bece:	e020      	b.n	800bf12 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bed0:	7afb      	ldrb	r3, [r7, #11]
 800bed2:	4619      	mov	r1, r3
 800bed4:	68f8      	ldr	r0, [r7, #12]
 800bed6:	f7ff fb7b 	bl	800b5d0 <USBH_MSC_BOT_Process>
 800beda:	4603      	mov	r3, r0
 800bedc:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800bede:	7dfb      	ldrb	r3, [r7, #23]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d115      	bne.n	800bf10 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800beea:	3302      	adds	r3, #2
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	f003 030f 	and.w	r3, r3, #15
 800bef2:	b2da      	uxtb	r2, r3
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800befe:	7b1a      	ldrb	r2, [r3, #12]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf0a:	7b5a      	ldrb	r2, [r3, #13]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	709a      	strb	r2, [r3, #2]
      break;
 800bf10:	bf00      	nop
  }

  return error;
 800bf12:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3718      	adds	r7, #24
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b086      	sub	sp, #24
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	607a      	str	r2, [r7, #4]
 800bf26:	603b      	str	r3, [r7, #0]
 800bf28:	460b      	mov	r3, r1
 800bf2a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800bf2c:	2302      	movs	r3, #2
 800bf2e:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf36:	69db      	ldr	r3, [r3, #28]
 800bf38:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800bf40:	2b01      	cmp	r3, #1
 800bf42:	d002      	beq.n	800bf4a <USBH_MSC_SCSI_Write+0x2e>
 800bf44:	2b02      	cmp	r3, #2
 800bf46:	d047      	beq.n	800bfd8 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800bf48:	e04e      	b.n	800bfe8 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800bf50:	461a      	mov	r2, r3
 800bf52:	6a3b      	ldr	r3, [r7, #32]
 800bf54:	fb03 f202 	mul.w	r2, r3, r2
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	220a      	movs	r2, #10
 800bf68:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800bf6c:	693b      	ldr	r3, [r7, #16]
 800bf6e:	3363      	adds	r3, #99	; 0x63
 800bf70:	2210      	movs	r2, #16
 800bf72:	2100      	movs	r1, #0
 800bf74:	4618      	mov	r0, r3
 800bf76:	f015 fa23 	bl	80213c0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800bf7a:	693b      	ldr	r3, [r7, #16]
 800bf7c:	222a      	movs	r2, #42	; 0x2a
 800bf7e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800bf82:	79fa      	ldrb	r2, [r7, #7]
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800bf8a:	79ba      	ldrb	r2, [r7, #6]
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800bf92:	797a      	ldrb	r2, [r7, #5]
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800bf9a:	1d3b      	adds	r3, r7, #4
 800bf9c:	781a      	ldrb	r2, [r3, #0]
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800bfa4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800bfae:	f107 0320 	add.w	r3, r7, #32
 800bfb2:	781a      	ldrb	r2, [r3, #0]
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	2201      	movs	r2, #1
 800bfbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	2202      	movs	r2, #2
 800bfc6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	683a      	ldr	r2, [r7, #0]
 800bfce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	75fb      	strb	r3, [r7, #23]
      break;
 800bfd6:	e007      	b.n	800bfe8 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800bfd8:	7afb      	ldrb	r3, [r7, #11]
 800bfda:	4619      	mov	r1, r3
 800bfdc:	68f8      	ldr	r0, [r7, #12]
 800bfde:	f7ff faf7 	bl	800b5d0 <USBH_MSC_BOT_Process>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	75fb      	strb	r3, [r7, #23]
      break;
 800bfe6:	bf00      	nop
  }

  return error;
 800bfe8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfea:	4618      	mov	r0, r3
 800bfec:	3718      	adds	r7, #24
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}

0800bff2 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800bff2:	b580      	push	{r7, lr}
 800bff4:	b086      	sub	sp, #24
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	60f8      	str	r0, [r7, #12]
 800bffa:	607a      	str	r2, [r7, #4]
 800bffc:	603b      	str	r3, [r7, #0]
 800bffe:	460b      	mov	r3, r1
 800c000:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c002:	2302      	movs	r3, #2
 800c004:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c00c:	69db      	ldr	r3, [r3, #28]
 800c00e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c010:	693b      	ldr	r3, [r7, #16]
 800c012:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c016:	2b01      	cmp	r3, #1
 800c018:	d002      	beq.n	800c020 <USBH_MSC_SCSI_Read+0x2e>
 800c01a:	2b02      	cmp	r3, #2
 800c01c:	d047      	beq.n	800c0ae <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c01e:	e04e      	b.n	800c0be <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800c026:	461a      	mov	r2, r3
 800c028:	6a3b      	ldr	r3, [r7, #32]
 800c02a:	fb03 f202 	mul.w	r2, r3, r2
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	2280      	movs	r2, #128	; 0x80
 800c036:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	220a      	movs	r2, #10
 800c03e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	3363      	adds	r3, #99	; 0x63
 800c046:	2210      	movs	r2, #16
 800c048:	2100      	movs	r1, #0
 800c04a:	4618      	mov	r0, r3
 800c04c:	f015 f9b8 	bl	80213c0 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	2228      	movs	r2, #40	; 0x28
 800c054:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c058:	79fa      	ldrb	r2, [r7, #7]
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c060:	79ba      	ldrb	r2, [r7, #6]
 800c062:	693b      	ldr	r3, [r7, #16]
 800c064:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c068:	797a      	ldrb	r2, [r7, #5]
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c070:	1d3b      	adds	r3, r7, #4
 800c072:	781a      	ldrb	r2, [r3, #0]
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800c07a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800c084:	f107 0320 	add.w	r3, r7, #32
 800c088:	781a      	ldrb	r2, [r3, #0]
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	2201      	movs	r2, #1
 800c094:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	2202      	movs	r2, #2
 800c09c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	683a      	ldr	r2, [r7, #0]
 800c0a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	75fb      	strb	r3, [r7, #23]
      break;
 800c0ac:	e007      	b.n	800c0be <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c0ae:	7afb      	ldrb	r3, [r7, #11]
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	68f8      	ldr	r0, [r7, #12]
 800c0b4:	f7ff fa8c 	bl	800b5d0 <USBH_MSC_BOT_Process>
 800c0b8:	4603      	mov	r3, r0
 800c0ba:	75fb      	strb	r3, [r7, #23]
      break;
 800c0bc:	bf00      	nop
  }

  return error;
 800c0be:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3718      	adds	r7, #24
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}

0800c0c8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800c0c8:	b5b0      	push	{r4, r5, r7, lr}
 800c0ca:	b090      	sub	sp, #64	; 0x40
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	60f8      	str	r0, [r7, #12]
 800c0d0:	60b9      	str	r1, [r7, #8]
 800c0d2:	4613      	mov	r3, r2
 800c0d4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d101      	bne.n	800c0e0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c0dc:	2302      	movs	r3, #2
 800c0de:	e04d      	b.n	800c17c <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	79fa      	ldrb	r2, [r7, #7]
 800c0e4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800c0f8:	68f8      	ldr	r0, [r7, #12]
 800c0fa:	f000 f847 	bl	800c18c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2200      	movs	r2, #0
 800c102:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2200      	movs	r2, #0
 800c10a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	2200      	movs	r2, #0
 800c112:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	2200      	movs	r2, #0
 800c11a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d003      	beq.n	800c12c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	68ba      	ldr	r2, [r7, #8]
 800c128:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800c12c:	4b15      	ldr	r3, [pc, #84]	; (800c184 <USBH_Init+0xbc>)
 800c12e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800c132:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c134:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800c138:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c13c:	2100      	movs	r1, #0
 800c13e:	4618      	mov	r0, r3
 800c140:	f004 fea5 	bl	8010e8e <osMessageCreate>
 800c144:	4602      	mov	r2, r0
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800c14c:	4b0e      	ldr	r3, [pc, #56]	; (800c188 <USBH_Init+0xc0>)
 800c14e:	f107 0414 	add.w	r4, r7, #20
 800c152:	461d      	mov	r5, r3
 800c154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c158:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c15c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800c160:	f107 0314 	add.w	r3, r7, #20
 800c164:	68f9      	ldr	r1, [r7, #12]
 800c166:	4618      	mov	r0, r3
 800c168:	f004 fccc 	bl	8010b04 <osThreadCreate>
 800c16c:	4602      	mov	r2, r0
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800c174:	68f8      	ldr	r0, [r7, #12]
 800c176:	f014 fd97 	bl	8020ca8 <USBH_LL_Init>

  return USBH_OK;
 800c17a:	2300      	movs	r3, #0
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3740      	adds	r7, #64	; 0x40
 800c180:	46bd      	mov	sp, r7
 800c182:	bdb0      	pop	{r4, r5, r7, pc}
 800c184:	08023d80 	.word	0x08023d80
 800c188:	08023d90 	.word	0x08023d90

0800c18c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b085      	sub	sp, #20
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c194:	2300      	movs	r3, #0
 800c196:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c198:	2300      	movs	r3, #0
 800c19a:	60fb      	str	r3, [r7, #12]
 800c19c:	e009      	b.n	800c1b2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800c19e:	687a      	ldr	r2, [r7, #4]
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	33e0      	adds	r3, #224	; 0xe0
 800c1a4:	009b      	lsls	r3, r3, #2
 800c1a6:	4413      	add	r3, r2
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	3301      	adds	r3, #1
 800c1b0:	60fb      	str	r3, [r7, #12]
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2b0e      	cmp	r3, #14
 800c1b6:	d9f2      	bls.n	800c19e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	60fb      	str	r3, [r7, #12]
 800c1bc:	e009      	b.n	800c1d2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	4413      	add	r3, r2
 800c1c4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	60fb      	str	r3, [r7, #12]
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c1d8:	d3f1      	bcc.n	800c1be <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2201      	movs	r2, #1
 800c1ea:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2240      	movs	r2, #64	; 0x40
 800c1fe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2200      	movs	r2, #0
 800c204:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2200      	movs	r2, #0
 800c20a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2201      	movs	r2, #1
 800c212:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2200      	movs	r2, #0
 800c21a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2200      	movs	r2, #0
 800c222:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800c226:	2300      	movs	r3, #0
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3714      	adds	r7, #20
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr

0800c234 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c234:	b480      	push	{r7}
 800c236:	b085      	sub	sp, #20
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c23e:	2300      	movs	r3, #0
 800c240:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d016      	beq.n	800c276 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d10e      	bne.n	800c270 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c258:	1c59      	adds	r1, r3, #1
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	33de      	adds	r3, #222	; 0xde
 800c264:	6839      	ldr	r1, [r7, #0]
 800c266:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c26a:	2300      	movs	r3, #0
 800c26c:	73fb      	strb	r3, [r7, #15]
 800c26e:	e004      	b.n	800c27a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c270:	2302      	movs	r3, #2
 800c272:	73fb      	strb	r3, [r7, #15]
 800c274:	e001      	b.n	800c27a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c276:	2302      	movs	r3, #2
 800c278:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c27a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3714      	adds	r7, #20
 800c280:	46bd      	mov	sp, r7
 800c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c286:	4770      	bx	lr

0800c288 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c288:	b480      	push	{r7}
 800c28a:	b085      	sub	sp, #20
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	460b      	mov	r3, r1
 800c292:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c294:	2300      	movs	r3, #0
 800c296:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800c29e:	78fa      	ldrb	r2, [r7, #3]
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d204      	bcs.n	800c2ae <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	78fa      	ldrb	r2, [r7, #3]
 800c2a8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800c2ac:	e001      	b.n	800c2b2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c2ae:	2302      	movs	r3, #2
 800c2b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c2b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3714      	adds	r7, #20
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr

0800c2c0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b087      	sub	sp, #28
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	4608      	mov	r0, r1
 800c2ca:	4611      	mov	r1, r2
 800c2cc:	461a      	mov	r2, r3
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	70fb      	strb	r3, [r7, #3]
 800c2d2:	460b      	mov	r3, r1
 800c2d4:	70bb      	strb	r3, [r7, #2]
 800c2d6:	4613      	mov	r3, r2
 800c2d8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800c2e8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c2ea:	e025      	b.n	800c338 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c2ec:	7dfb      	ldrb	r3, [r7, #23]
 800c2ee:	221a      	movs	r2, #26
 800c2f0:	fb02 f303 	mul.w	r3, r2, r3
 800c2f4:	3308      	adds	r3, #8
 800c2f6:	68fa      	ldr	r2, [r7, #12]
 800c2f8:	4413      	add	r3, r2
 800c2fa:	3302      	adds	r3, #2
 800c2fc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	795b      	ldrb	r3, [r3, #5]
 800c302:	78fa      	ldrb	r2, [r7, #3]
 800c304:	429a      	cmp	r2, r3
 800c306:	d002      	beq.n	800c30e <USBH_FindInterface+0x4e>
 800c308:	78fb      	ldrb	r3, [r7, #3]
 800c30a:	2bff      	cmp	r3, #255	; 0xff
 800c30c:	d111      	bne.n	800c332 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c312:	78ba      	ldrb	r2, [r7, #2]
 800c314:	429a      	cmp	r2, r3
 800c316:	d002      	beq.n	800c31e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c318:	78bb      	ldrb	r3, [r7, #2]
 800c31a:	2bff      	cmp	r3, #255	; 0xff
 800c31c:	d109      	bne.n	800c332 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c322:	787a      	ldrb	r2, [r7, #1]
 800c324:	429a      	cmp	r2, r3
 800c326:	d002      	beq.n	800c32e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c328:	787b      	ldrb	r3, [r7, #1]
 800c32a:	2bff      	cmp	r3, #255	; 0xff
 800c32c:	d101      	bne.n	800c332 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c32e:	7dfb      	ldrb	r3, [r7, #23]
 800c330:	e006      	b.n	800c340 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c332:	7dfb      	ldrb	r3, [r7, #23]
 800c334:	3301      	adds	r3, #1
 800c336:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c338:	7dfb      	ldrb	r3, [r7, #23]
 800c33a:	2b01      	cmp	r3, #1
 800c33c:	d9d6      	bls.n	800c2ec <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c33e:	23ff      	movs	r3, #255	; 0xff
}
 800c340:	4618      	mov	r0, r3
 800c342:	371c      	adds	r7, #28
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr

0800c34c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b082      	sub	sp, #8
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f014 fce3 	bl	8020d20 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800c35a:	2101      	movs	r1, #1
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f014 fdfc 	bl	8020f5a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c362:	2300      	movs	r3, #0
}
 800c364:	4618      	mov	r0, r3
 800c366:	3708      	adds	r7, #8
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b088      	sub	sp, #32
 800c370:	af04      	add	r7, sp, #16
 800c372:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c374:	2302      	movs	r3, #2
 800c376:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c378:	2300      	movs	r3, #0
 800c37a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800c382:	b2db      	uxtb	r3, r3
 800c384:	2b01      	cmp	r3, #1
 800c386:	d102      	bne.n	800c38e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2203      	movs	r2, #3
 800c38c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	781b      	ldrb	r3, [r3, #0]
 800c392:	b2db      	uxtb	r3, r3
 800c394:	2b0b      	cmp	r3, #11
 800c396:	f200 823c 	bhi.w	800c812 <USBH_Process+0x4a6>
 800c39a:	a201      	add	r2, pc, #4	; (adr r2, 800c3a0 <USBH_Process+0x34>)
 800c39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3a0:	0800c3d1 	.word	0x0800c3d1
 800c3a4:	0800c41f 	.word	0x0800c41f
 800c3a8:	0800c4a3 	.word	0x0800c4a3
 800c3ac:	0800c791 	.word	0x0800c791
 800c3b0:	0800c813 	.word	0x0800c813
 800c3b4:	0800c563 	.word	0x0800c563
 800c3b8:	0800c71b 	.word	0x0800c71b
 800c3bc:	0800c5b5 	.word	0x0800c5b5
 800c3c0:	0800c5f1 	.word	0x0800c5f1
 800c3c4:	0800c62b 	.word	0x0800c62b
 800c3c8:	0800c673 	.word	0x0800c673
 800c3cc:	0800c779 	.word	0x0800c779
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	f000 821c 	beq.w	800c816 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c3e4:	20c8      	movs	r0, #200	; 0xc8
 800c3e6:	f014 fe2f 	bl	8021048 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f014 fcf5 	bl	8020dda <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2201      	movs	r2, #1
 800c404:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c414:	2200      	movs	r2, #0
 800c416:	4619      	mov	r1, r3
 800c418:	f004 fd62 	bl	8010ee0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c41c:	e1fb      	b.n	800c816 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800c424:	2b01      	cmp	r3, #1
 800c426:	d107      	bne.n	800c438 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2200      	movs	r2, #0
 800c42c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2202      	movs	r2, #2
 800c434:	701a      	strb	r2, [r3, #0]
 800c436:	e025      	b.n	800c484 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c43e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c442:	d914      	bls.n	800c46e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c44a:	3301      	adds	r3, #1
 800c44c:	b2da      	uxtb	r2, r3
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800c45a:	2b03      	cmp	r3, #3
 800c45c:	d903      	bls.n	800c466 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	220d      	movs	r2, #13
 800c462:	701a      	strb	r2, [r3, #0]
 800c464:	e00e      	b.n	800c484 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2200      	movs	r2, #0
 800c46a:	701a      	strb	r2, [r3, #0]
 800c46c:	e00a      	b.n	800c484 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c474:	f103 020a 	add.w	r2, r3, #10
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800c47e:	200a      	movs	r0, #10
 800c480:	f014 fde2 	bl	8021048 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2201      	movs	r2, #1
 800c488:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c498:	2200      	movs	r2, #0
 800c49a:	4619      	mov	r1, r3
 800c49c:	f004 fd20 	bl	8010ee0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c4a0:	e1c0      	b.n	800c824 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d005      	beq.n	800c4b8 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c4b2:	2104      	movs	r1, #4
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800c4b8:	2064      	movs	r0, #100	; 0x64
 800c4ba:	f014 fdc5 	bl	8021048 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f014 fc64 	bl	8020d8c <USBH_LL_GetSpeed>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2205      	movs	r2, #5
 800c4d2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800c4d4:	2100      	movs	r1, #0
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f001 fb1f 	bl	800db1a <USBH_AllocPipe>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	461a      	mov	r2, r3
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800c4e4:	2180      	movs	r1, #128	; 0x80
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f001 fb17 	bl	800db1a <USBH_AllocPipe>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	7919      	ldrb	r1, [r3, #4]
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c504:	687a      	ldr	r2, [r7, #4]
 800c506:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800c508:	b292      	uxth	r2, r2
 800c50a:	9202      	str	r2, [sp, #8]
 800c50c:	2200      	movs	r2, #0
 800c50e:	9201      	str	r2, [sp, #4]
 800c510:	9300      	str	r3, [sp, #0]
 800c512:	4603      	mov	r3, r0
 800c514:	2280      	movs	r2, #128	; 0x80
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f001 fad0 	bl	800dabc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	7959      	ldrb	r1, [r3, #5]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800c530:	b292      	uxth	r2, r2
 800c532:	9202      	str	r2, [sp, #8]
 800c534:	2200      	movs	r2, #0
 800c536:	9201      	str	r2, [sp, #4]
 800c538:	9300      	str	r3, [sp, #0]
 800c53a:	4603      	mov	r3, r0
 800c53c:	2200      	movs	r2, #0
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f001 fabc 	bl	800dabc <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2201      	movs	r2, #1
 800c548:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c558:	2200      	movs	r2, #0
 800c55a:	4619      	mov	r1, r3
 800c55c:	f004 fcc0 	bl	8010ee0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c560:	e160      	b.n	800c824 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f000 f964 	bl	800c830 <USBH_HandleEnum>
 800c568:	4603      	mov	r3, r0
 800c56a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800c56c:	7bbb      	ldrb	r3, [r7, #14]
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	2b00      	cmp	r3, #0
 800c572:	f040 8152 	bne.w	800c81a <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2200      	movs	r2, #0
 800c57a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800c584:	2b01      	cmp	r3, #1
 800c586:	d103      	bne.n	800c590 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2208      	movs	r2, #8
 800c58c:	701a      	strb	r2, [r3, #0]
 800c58e:	e002      	b.n	800c596 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2207      	movs	r2, #7
 800c594:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2205      	movs	r2, #5
 800c59a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	f004 fc97 	bl	8010ee0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800c5b2:	e132      	b.n	800c81a <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	f000 812f 	beq.w	800c81e <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c5c6:	2101      	movs	r1, #1
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2208      	movs	r2, #8
 800c5d0:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2205      	movs	r2, #5
 800c5d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	f004 fc79 	bl	8010ee0 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800c5ee:	e116      	b.n	800c81e <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800c5f6:	b29b      	uxth	r3, r3
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f000 fcf6 	bl	800cfec <USBH_SetCfg>
 800c600:	4603      	mov	r3, r0
 800c602:	2b00      	cmp	r3, #0
 800c604:	d102      	bne.n	800c60c <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2209      	movs	r2, #9
 800c60a:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2201      	movs	r2, #1
 800c610:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c620:	2200      	movs	r2, #0
 800c622:	4619      	mov	r1, r3
 800c624:	f004 fc5c 	bl	8010ee0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c628:	e0fc      	b.n	800c824 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800c630:	f003 0320 	and.w	r3, r3, #32
 800c634:	2b00      	cmp	r3, #0
 800c636:	d00a      	beq.n	800c64e <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800c638:	2101      	movs	r1, #1
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f000 fcf9 	bl	800d032 <USBH_SetFeature>
 800c640:	4603      	mov	r3, r0
 800c642:	2b00      	cmp	r3, #0
 800c644:	d106      	bne.n	800c654 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	220a      	movs	r2, #10
 800c64a:	701a      	strb	r2, [r3, #0]
 800c64c:	e002      	b.n	800c654 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	220a      	movs	r2, #10
 800c652:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2201      	movs	r2, #1
 800c658:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c668:	2200      	movs	r2, #0
 800c66a:	4619      	mov	r1, r3
 800c66c:	f004 fc38 	bl	8010ee0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c670:	e0d8      	b.n	800c824 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d03f      	beq.n	800c6fc <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2200      	movs	r2, #0
 800c680:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c684:	2300      	movs	r3, #0
 800c686:	73fb      	strb	r3, [r7, #15]
 800c688:	e016      	b.n	800c6b8 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800c68a:	7bfa      	ldrb	r2, [r7, #15]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	32de      	adds	r2, #222	; 0xde
 800c690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c694:	791a      	ldrb	r2, [r3, #4]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d108      	bne.n	800c6b2 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800c6a0:	7bfa      	ldrb	r2, [r7, #15]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	32de      	adds	r2, #222	; 0xde
 800c6a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800c6b0:	e005      	b.n	800c6be <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800c6b2:	7bfb      	ldrb	r3, [r7, #15]
 800c6b4:	3301      	adds	r3, #1
 800c6b6:	73fb      	strb	r3, [r7, #15]
 800c6b8:	7bfb      	ldrb	r3, [r7, #15]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d0e5      	beq.n	800c68a <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d016      	beq.n	800c6f6 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c6ce:	689b      	ldr	r3, [r3, #8]
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	4798      	blx	r3
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d109      	bne.n	800c6ee <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2206      	movs	r2, #6
 800c6de:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c6e6:	2103      	movs	r1, #3
 800c6e8:	6878      	ldr	r0, [r7, #4]
 800c6ea:	4798      	blx	r3
 800c6ec:	e006      	b.n	800c6fc <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	220d      	movs	r2, #13
 800c6f2:	701a      	strb	r2, [r3, #0]
 800c6f4:	e002      	b.n	800c6fc <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	220d      	movs	r2, #13
 800c6fa:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2205      	movs	r2, #5
 800c700:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c710:	2200      	movs	r2, #0
 800c712:	4619      	mov	r1, r3
 800c714:	f004 fbe4 	bl	8010ee0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c718:	e084      	b.n	800c824 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c720:	2b00      	cmp	r3, #0
 800c722:	d017      	beq.n	800c754 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c72a:	691b      	ldr	r3, [r3, #16]
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	4798      	blx	r3
 800c730:	4603      	mov	r3, r0
 800c732:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800c734:	7bbb      	ldrb	r3, [r7, #14]
 800c736:	b2db      	uxtb	r3, r3
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d103      	bne.n	800c744 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	220b      	movs	r2, #11
 800c740:	701a      	strb	r2, [r3, #0]
 800c742:	e00a      	b.n	800c75a <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800c744:	7bbb      	ldrb	r3, [r7, #14]
 800c746:	b2db      	uxtb	r3, r3
 800c748:	2b02      	cmp	r3, #2
 800c74a:	d106      	bne.n	800c75a <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	220d      	movs	r2, #13
 800c750:	701a      	strb	r2, [r3, #0]
 800c752:	e002      	b.n	800c75a <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	220d      	movs	r2, #13
 800c758:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2205      	movs	r2, #5
 800c75e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c76e:	2200      	movs	r2, #0
 800c770:	4619      	mov	r1, r3
 800c772:	f004 fbb5 	bl	8010ee0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c776:	e055      	b.n	800c824 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d04f      	beq.n	800c822 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c788:	695b      	ldr	r3, [r3, #20]
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	4798      	blx	r3
      }
      break;
 800c78e:	e048      	b.n	800c822 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2200      	movs	r2, #0
 800c794:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f7ff fcf7 	bl	800c18c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d009      	beq.n	800c7bc <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c7ae:	68db      	ldr	r3, [r3, #12]
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d005      	beq.n	800c7d2 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c7cc:	2105      	movs	r1, #5
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800c7d8:	b2db      	uxtb	r3, r3
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d107      	bne.n	800c7ee <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f7ff fdb0 	bl	800c34c <USBH_Start>
 800c7ec:	e002      	b.n	800c7f4 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f014 fa96 	bl	8020d20 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800c808:	2200      	movs	r2, #0
 800c80a:	4619      	mov	r1, r3
 800c80c:	f004 fb68 	bl	8010ee0 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800c810:	e008      	b.n	800c824 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800c812:	bf00      	nop
 800c814:	e006      	b.n	800c824 <USBH_Process+0x4b8>
      break;
 800c816:	bf00      	nop
 800c818:	e004      	b.n	800c824 <USBH_Process+0x4b8>
      break;
 800c81a:	bf00      	nop
 800c81c:	e002      	b.n	800c824 <USBH_Process+0x4b8>
    break;
 800c81e:	bf00      	nop
 800c820:	e000      	b.n	800c824 <USBH_Process+0x4b8>
      break;
 800c822:	bf00      	nop
  }
  return USBH_OK;
 800c824:	2300      	movs	r3, #0
}
 800c826:	4618      	mov	r0, r3
 800c828:	3710      	adds	r7, #16
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}
 800c82e:	bf00      	nop

0800c830 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b088      	sub	sp, #32
 800c834:	af04      	add	r7, sp, #16
 800c836:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800c838:	2301      	movs	r3, #1
 800c83a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800c83c:	2301      	movs	r3, #1
 800c83e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	785b      	ldrb	r3, [r3, #1]
 800c844:	2b07      	cmp	r3, #7
 800c846:	f200 8208 	bhi.w	800cc5a <USBH_HandleEnum+0x42a>
 800c84a:	a201      	add	r2, pc, #4	; (adr r2, 800c850 <USBH_HandleEnum+0x20>)
 800c84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c850:	0800c871 	.word	0x0800c871
 800c854:	0800c92f 	.word	0x0800c92f
 800c858:	0800c999 	.word	0x0800c999
 800c85c:	0800ca27 	.word	0x0800ca27
 800c860:	0800ca91 	.word	0x0800ca91
 800c864:	0800cb01 	.word	0x0800cb01
 800c868:	0800cb9d 	.word	0x0800cb9d
 800c86c:	0800cc1b 	.word	0x0800cc1b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800c870:	2108      	movs	r1, #8
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f000 faea 	bl	800ce4c <USBH_Get_DevDesc>
 800c878:	4603      	mov	r3, r0
 800c87a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c87c:	7bbb      	ldrb	r3, [r7, #14]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d130      	bne.n	800c8e4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2201      	movs	r2, #1
 800c890:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	7919      	ldrb	r1, [r3, #4]
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800c8a6:	b292      	uxth	r2, r2
 800c8a8:	9202      	str	r2, [sp, #8]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	9201      	str	r2, [sp, #4]
 800c8ae:	9300      	str	r3, [sp, #0]
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	2280      	movs	r2, #128	; 0x80
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f001 f901 	bl	800dabc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	7959      	ldrb	r1, [r3, #5]
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c8ca:	687a      	ldr	r2, [r7, #4]
 800c8cc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c8ce:	b292      	uxth	r2, r2
 800c8d0:	9202      	str	r2, [sp, #8]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	9201      	str	r2, [sp, #4]
 800c8d6:	9300      	str	r3, [sp, #0]
 800c8d8:	4603      	mov	r3, r0
 800c8da:	2200      	movs	r2, #0
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f001 f8ed 	bl	800dabc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800c8e2:	e1bc      	b.n	800cc5e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c8e4:	7bbb      	ldrb	r3, [r7, #14]
 800c8e6:	2b03      	cmp	r3, #3
 800c8e8:	f040 81b9 	bne.w	800cc5e <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c8f2:	3301      	adds	r3, #1
 800c8f4:	b2da      	uxtb	r2, r3
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c902:	2b03      	cmp	r3, #3
 800c904:	d903      	bls.n	800c90e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	220d      	movs	r2, #13
 800c90a:	701a      	strb	r2, [r3, #0]
      break;
 800c90c:	e1a7      	b.n	800cc5e <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	795b      	ldrb	r3, [r3, #5]
 800c912:	4619      	mov	r1, r3
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f001 f921 	bl	800db5c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	791b      	ldrb	r3, [r3, #4]
 800c91e:	4619      	mov	r1, r3
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f001 f91b 	bl	800db5c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2200      	movs	r2, #0
 800c92a:	701a      	strb	r2, [r3, #0]
      break;
 800c92c:	e197      	b.n	800cc5e <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800c92e:	2112      	movs	r1, #18
 800c930:	6878      	ldr	r0, [r7, #4]
 800c932:	f000 fa8b 	bl	800ce4c <USBH_Get_DevDesc>
 800c936:	4603      	mov	r3, r0
 800c938:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c93a:	7bbb      	ldrb	r3, [r7, #14]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d103      	bne.n	800c948 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2202      	movs	r2, #2
 800c944:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c946:	e18c      	b.n	800cc62 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c948:	7bbb      	ldrb	r3, [r7, #14]
 800c94a:	2b03      	cmp	r3, #3
 800c94c:	f040 8189 	bne.w	800cc62 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c956:	3301      	adds	r3, #1
 800c958:	b2da      	uxtb	r2, r3
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800c966:	2b03      	cmp	r3, #3
 800c968:	d903      	bls.n	800c972 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	220d      	movs	r2, #13
 800c96e:	701a      	strb	r2, [r3, #0]
      break;
 800c970:	e177      	b.n	800cc62 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	795b      	ldrb	r3, [r3, #5]
 800c976:	4619      	mov	r1, r3
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f001 f8ef 	bl	800db5c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	791b      	ldrb	r3, [r3, #4]
 800c982:	4619      	mov	r1, r3
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f001 f8e9 	bl	800db5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2200      	movs	r2, #0
 800c98e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2200      	movs	r2, #0
 800c994:	701a      	strb	r2, [r3, #0]
      break;
 800c996:	e164      	b.n	800cc62 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800c998:	2101      	movs	r1, #1
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 fb02 	bl	800cfa4 <USBH_SetAddress>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c9a4:	7bbb      	ldrb	r3, [r7, #14]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d132      	bne.n	800ca10 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800c9aa:	2002      	movs	r0, #2
 800c9ac:	f014 fb4c 	bl	8021048 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2203      	movs	r2, #3
 800c9bc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	7919      	ldrb	r1, [r3, #4]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c9ce:	687a      	ldr	r2, [r7, #4]
 800c9d0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800c9d2:	b292      	uxth	r2, r2
 800c9d4:	9202      	str	r2, [sp, #8]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	9201      	str	r2, [sp, #4]
 800c9da:	9300      	str	r3, [sp, #0]
 800c9dc:	4603      	mov	r3, r0
 800c9de:	2280      	movs	r2, #128	; 0x80
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f001 f86b 	bl	800dabc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	7959      	ldrb	r1, [r3, #5]
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800c9f6:	687a      	ldr	r2, [r7, #4]
 800c9f8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800c9fa:	b292      	uxth	r2, r2
 800c9fc:	9202      	str	r2, [sp, #8]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	9201      	str	r2, [sp, #4]
 800ca02:	9300      	str	r3, [sp, #0]
 800ca04:	4603      	mov	r3, r0
 800ca06:	2200      	movs	r2, #0
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f001 f857 	bl	800dabc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ca0e:	e12a      	b.n	800cc66 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ca10:	7bbb      	ldrb	r3, [r7, #14]
 800ca12:	2b03      	cmp	r3, #3
 800ca14:	f040 8127 	bne.w	800cc66 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	220d      	movs	r2, #13
 800ca1c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2200      	movs	r2, #0
 800ca22:	705a      	strb	r2, [r3, #1]
      break;
 800ca24:	e11f      	b.n	800cc66 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ca26:	2109      	movs	r1, #9
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f000 fa37 	bl	800ce9c <USBH_Get_CfgDesc>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ca32:	7bbb      	ldrb	r3, [r7, #14]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d103      	bne.n	800ca40 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2204      	movs	r2, #4
 800ca3c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ca3e:	e114      	b.n	800cc6a <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ca40:	7bbb      	ldrb	r3, [r7, #14]
 800ca42:	2b03      	cmp	r3, #3
 800ca44:	f040 8111 	bne.w	800cc6a <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ca4e:	3301      	adds	r3, #1
 800ca50:	b2da      	uxtb	r2, r3
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ca5e:	2b03      	cmp	r3, #3
 800ca60:	d903      	bls.n	800ca6a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	220d      	movs	r2, #13
 800ca66:	701a      	strb	r2, [r3, #0]
      break;
 800ca68:	e0ff      	b.n	800cc6a <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	795b      	ldrb	r3, [r3, #5]
 800ca6e:	4619      	mov	r1, r3
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f001 f873 	bl	800db5c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	791b      	ldrb	r3, [r3, #4]
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f001 f86d 	bl	800db5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2200      	movs	r2, #0
 800ca86:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	701a      	strb	r2, [r3, #0]
      break;
 800ca8e:	e0ec      	b.n	800cc6a <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800ca96:	4619      	mov	r1, r3
 800ca98:	6878      	ldr	r0, [r7, #4]
 800ca9a:	f000 f9ff 	bl	800ce9c <USBH_Get_CfgDesc>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800caa2:	7bbb      	ldrb	r3, [r7, #14]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d103      	bne.n	800cab0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2205      	movs	r2, #5
 800caac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800caae:	e0de      	b.n	800cc6e <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cab0:	7bbb      	ldrb	r3, [r7, #14]
 800cab2:	2b03      	cmp	r3, #3
 800cab4:	f040 80db 	bne.w	800cc6e <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cabe:	3301      	adds	r3, #1
 800cac0:	b2da      	uxtb	r2, r3
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cace:	2b03      	cmp	r3, #3
 800cad0:	d903      	bls.n	800cada <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	220d      	movs	r2, #13
 800cad6:	701a      	strb	r2, [r3, #0]
      break;
 800cad8:	e0c9      	b.n	800cc6e <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	795b      	ldrb	r3, [r3, #5]
 800cade:	4619      	mov	r1, r3
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f001 f83b 	bl	800db5c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	791b      	ldrb	r3, [r3, #4]
 800caea:	4619      	mov	r1, r3
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f001 f835 	bl	800db5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2200      	movs	r2, #0
 800caf6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2200      	movs	r2, #0
 800cafc:	701a      	strb	r2, [r3, #0]
      break;
 800cafe:	e0b6      	b.n	800cc6e <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d036      	beq.n	800cb78 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800cb16:	23ff      	movs	r3, #255	; 0xff
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f000 f9e3 	bl	800cee4 <USBH_Get_StringDesc>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cb22:	7bbb      	ldrb	r3, [r7, #14]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d111      	bne.n	800cb4c <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2206      	movs	r2, #6
 800cb2c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2205      	movs	r2, #5
 800cb32:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cb42:	2200      	movs	r2, #0
 800cb44:	4619      	mov	r1, r3
 800cb46:	f004 f9cb 	bl	8010ee0 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800cb4a:	e092      	b.n	800cc72 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cb4c:	7bbb      	ldrb	r3, [r7, #14]
 800cb4e:	2b03      	cmp	r3, #3
 800cb50:	f040 808f 	bne.w	800cc72 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2206      	movs	r2, #6
 800cb58:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2205      	movs	r2, #5
 800cb5e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cb6e:	2200      	movs	r2, #0
 800cb70:	4619      	mov	r1, r3
 800cb72:	f004 f9b5 	bl	8010ee0 <osMessagePut>
      break;
 800cb76:	e07c      	b.n	800cc72 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2206      	movs	r2, #6
 800cb7c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2205      	movs	r2, #5
 800cb82:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cb92:	2200      	movs	r2, #0
 800cb94:	4619      	mov	r1, r3
 800cb96:	f004 f9a3 	bl	8010ee0 <osMessagePut>
      break;
 800cb9a:	e06a      	b.n	800cc72 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d027      	beq.n	800cbf6 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800cbb2:	23ff      	movs	r3, #255	; 0xff
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f000 f995 	bl	800cee4 <USBH_Get_StringDesc>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cbbe:	7bbb      	ldrb	r3, [r7, #14]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d103      	bne.n	800cbcc <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2207      	movs	r2, #7
 800cbc8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800cbca:	e054      	b.n	800cc76 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cbcc:	7bbb      	ldrb	r3, [r7, #14]
 800cbce:	2b03      	cmp	r3, #3
 800cbd0:	d151      	bne.n	800cc76 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2207      	movs	r2, #7
 800cbd6:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2205      	movs	r2, #5
 800cbdc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cbec:	2200      	movs	r2, #0
 800cbee:	4619      	mov	r1, r3
 800cbf0:	f004 f976 	bl	8010ee0 <osMessagePut>
      break;
 800cbf4:	e03f      	b.n	800cc76 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2207      	movs	r2, #7
 800cbfa:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2205      	movs	r2, #5
 800cc00:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cc10:	2200      	movs	r2, #0
 800cc12:	4619      	mov	r1, r3
 800cc14:	f004 f964 	bl	8010ee0 <osMessagePut>
      break;
 800cc18:	e02d      	b.n	800cc76 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d017      	beq.n	800cc54 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800cc30:	23ff      	movs	r3, #255	; 0xff
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f000 f956 	bl	800cee4 <USBH_Get_StringDesc>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800cc3c:	7bbb      	ldrb	r3, [r7, #14]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d102      	bne.n	800cc48 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800cc42:	2300      	movs	r3, #0
 800cc44:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800cc46:	e018      	b.n	800cc7a <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cc48:	7bbb      	ldrb	r3, [r7, #14]
 800cc4a:	2b03      	cmp	r3, #3
 800cc4c:	d115      	bne.n	800cc7a <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	73fb      	strb	r3, [r7, #15]
      break;
 800cc52:	e012      	b.n	800cc7a <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800cc54:	2300      	movs	r3, #0
 800cc56:	73fb      	strb	r3, [r7, #15]
      break;
 800cc58:	e00f      	b.n	800cc7a <USBH_HandleEnum+0x44a>

    default:
      break;
 800cc5a:	bf00      	nop
 800cc5c:	e00e      	b.n	800cc7c <USBH_HandleEnum+0x44c>
      break;
 800cc5e:	bf00      	nop
 800cc60:	e00c      	b.n	800cc7c <USBH_HandleEnum+0x44c>
      break;
 800cc62:	bf00      	nop
 800cc64:	e00a      	b.n	800cc7c <USBH_HandleEnum+0x44c>
      break;
 800cc66:	bf00      	nop
 800cc68:	e008      	b.n	800cc7c <USBH_HandleEnum+0x44c>
      break;
 800cc6a:	bf00      	nop
 800cc6c:	e006      	b.n	800cc7c <USBH_HandleEnum+0x44c>
      break;
 800cc6e:	bf00      	nop
 800cc70:	e004      	b.n	800cc7c <USBH_HandleEnum+0x44c>
      break;
 800cc72:	bf00      	nop
 800cc74:	e002      	b.n	800cc7c <USBH_HandleEnum+0x44c>
      break;
 800cc76:	bf00      	nop
 800cc78:	e000      	b.n	800cc7c <USBH_HandleEnum+0x44c>
      break;
 800cc7a:	bf00      	nop
  }
  return Status;
 800cc7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3710      	adds	r7, #16
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop

0800cc88 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b083      	sub	sp, #12
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	683a      	ldr	r2, [r7, #0]
 800cc96:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800cc9a:	bf00      	nop
 800cc9c:	370c      	adds	r7, #12
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca4:	4770      	bx	lr

0800cca6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800cca6:	b580      	push	{r7, lr}
 800cca8:	b082      	sub	sp, #8
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ccb4:	1c5a      	adds	r2, r3, #1
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ccbc:	6878      	ldr	r0, [r7, #4]
 800ccbe:	f000 f804 	bl	800ccca <USBH_HandleSof>
}
 800ccc2:	bf00      	nop
 800ccc4:	3708      	adds	r7, #8
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}

0800ccca <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ccca:	b580      	push	{r7, lr}
 800cccc:	b082      	sub	sp, #8
 800ccce:	af00      	add	r7, sp, #0
 800ccd0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	781b      	ldrb	r3, [r3, #0]
 800ccd6:	b2db      	uxtb	r3, r3
 800ccd8:	2b0b      	cmp	r3, #11
 800ccda:	d10a      	bne.n	800ccf2 <USBH_HandleSof+0x28>
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d005      	beq.n	800ccf2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ccec:	699b      	ldr	r3, [r3, #24]
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	4798      	blx	r3
  }
}
 800ccf2:	bf00      	nop
 800ccf4:	3708      	adds	r7, #8
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	bd80      	pop	{r7, pc}

0800ccfa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ccfa:	b580      	push	{r7, lr}
 800ccfc:	b082      	sub	sp, #8
 800ccfe:	af00      	add	r7, sp, #0
 800cd00:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2201      	movs	r2, #1
 800cd06:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2201      	movs	r2, #1
 800cd0e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cd1e:	2200      	movs	r2, #0
 800cd20:	4619      	mov	r1, r3
 800cd22:	f004 f8dd 	bl	8010ee0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800cd26:	bf00      	nop
}
 800cd28:	3708      	adds	r7, #8
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}

0800cd2e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800cd2e:	b480      	push	{r7}
 800cd30:	b083      	sub	sp, #12
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2200      	movs	r2, #0
 800cd3a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800cd3e:	bf00      	nop
}
 800cd40:	370c      	adds	r7, #12
 800cd42:	46bd      	mov	sp, r7
 800cd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd48:	4770      	bx	lr

0800cd4a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800cd4a:	b580      	push	{r7, lr}
 800cd4c:	b082      	sub	sp, #8
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2201      	movs	r2, #1
 800cd56:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2200      	movs	r2, #0
 800cd66:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cd7e:	2200      	movs	r2, #0
 800cd80:	4619      	mov	r1, r3
 800cd82:	f004 f8ad 	bl	8010ee0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800cd86:	2300      	movs	r3, #0
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3708      	adds	r7, #8
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}

0800cd90 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b082      	sub	sp, #8
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2201      	movs	r2, #1
 800cd9c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2200      	movs	r2, #0
 800cda4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	f013 ffd0 	bl	8020d56 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	791b      	ldrb	r3, [r3, #4]
 800cdba:	4619      	mov	r1, r3
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f000 fecd 	bl	800db5c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	795b      	ldrb	r3, [r3, #5]
 800cdc6:	4619      	mov	r1, r3
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	f000 fec7 	bl	800db5c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2201      	movs	r2, #1
 800cdd2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800cde2:	2200      	movs	r2, #0
 800cde4:	4619      	mov	r1, r3
 800cde6:	f004 f87b 	bl	8010ee0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800cdea:	2300      	movs	r3, #0
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3708      	adds	r7, #8
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}

0800cdf4 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b086      	sub	sp, #24
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800ce02:	f107 030c 	add.w	r3, r7, #12
 800ce06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f004 f8a8 	bl	8010f60 <osMessageGet>
    if (event.status == osEventMessage)
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	2b10      	cmp	r3, #16
 800ce14:	d1f2      	bne.n	800cdfc <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f7ff faa8 	bl	800c36c <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800ce1c:	e7ee      	b.n	800cdfc <USBH_Process_OS+0x8>

0800ce1e <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800ce1e:	b580      	push	{r7, lr}
 800ce20:	b082      	sub	sp, #8
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2201      	movs	r2, #1
 800ce2a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	f004 f84f 	bl	8010ee0 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800ce42:	2300      	movs	r3, #0
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3708      	adds	r7, #8
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}

0800ce4c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b086      	sub	sp, #24
 800ce50:	af02      	add	r7, sp, #8
 800ce52:	6078      	str	r0, [r7, #4]
 800ce54:	460b      	mov	r3, r1
 800ce56:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ce5e:	78fb      	ldrb	r3, [r7, #3]
 800ce60:	b29b      	uxth	r3, r3
 800ce62:	9300      	str	r3, [sp, #0]
 800ce64:	4613      	mov	r3, r2
 800ce66:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ce6a:	2100      	movs	r1, #0
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f000 f864 	bl	800cf3a <USBH_GetDescriptor>
 800ce72:	4603      	mov	r3, r0
 800ce74:	73fb      	strb	r3, [r7, #15]
 800ce76:	7bfb      	ldrb	r3, [r7, #15]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d10a      	bne.n	800ce92 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ce88:	78fa      	ldrb	r2, [r7, #3]
 800ce8a:	b292      	uxth	r2, r2
 800ce8c:	4619      	mov	r1, r3
 800ce8e:	f000 f918 	bl	800d0c2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ce92:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce94:	4618      	mov	r0, r3
 800ce96:	3710      	adds	r7, #16
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	bd80      	pop	{r7, pc}

0800ce9c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b086      	sub	sp, #24
 800cea0:	af02      	add	r7, sp, #8
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	460b      	mov	r3, r1
 800cea6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	331c      	adds	r3, #28
 800ceac:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ceae:	887b      	ldrh	r3, [r7, #2]
 800ceb0:	9300      	str	r3, [sp, #0]
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ceb8:	2100      	movs	r1, #0
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f000 f83d 	bl	800cf3a <USBH_GetDescriptor>
 800cec0:	4603      	mov	r3, r0
 800cec2:	72fb      	strb	r3, [r7, #11]
 800cec4:	7afb      	ldrb	r3, [r7, #11]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d107      	bne.n	800ceda <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ced0:	887a      	ldrh	r2, [r7, #2]
 800ced2:	68f9      	ldr	r1, [r7, #12]
 800ced4:	4618      	mov	r0, r3
 800ced6:	f000 f964 	bl	800d1a2 <USBH_ParseCfgDesc>
  }

  return status;
 800ceda:	7afb      	ldrb	r3, [r7, #11]
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3710      	adds	r7, #16
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b088      	sub	sp, #32
 800cee8:	af02      	add	r7, sp, #8
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	607a      	str	r2, [r7, #4]
 800ceee:	461a      	mov	r2, r3
 800cef0:	460b      	mov	r3, r1
 800cef2:	72fb      	strb	r3, [r7, #11]
 800cef4:	4613      	mov	r3, r2
 800cef6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800cef8:	7afb      	ldrb	r3, [r7, #11]
 800cefa:	b29b      	uxth	r3, r3
 800cefc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800cf00:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800cf08:	893b      	ldrh	r3, [r7, #8]
 800cf0a:	9300      	str	r3, [sp, #0]
 800cf0c:	460b      	mov	r3, r1
 800cf0e:	2100      	movs	r1, #0
 800cf10:	68f8      	ldr	r0, [r7, #12]
 800cf12:	f000 f812 	bl	800cf3a <USBH_GetDescriptor>
 800cf16:	4603      	mov	r3, r0
 800cf18:	75fb      	strb	r3, [r7, #23]
 800cf1a:	7dfb      	ldrb	r3, [r7, #23]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d107      	bne.n	800cf30 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cf26:	893a      	ldrh	r2, [r7, #8]
 800cf28:	6879      	ldr	r1, [r7, #4]
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f000 fa37 	bl	800d39e <USBH_ParseStringDesc>
  }

  return status;
 800cf30:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3718      	adds	r7, #24
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}

0800cf3a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800cf3a:	b580      	push	{r7, lr}
 800cf3c:	b084      	sub	sp, #16
 800cf3e:	af00      	add	r7, sp, #0
 800cf40:	60f8      	str	r0, [r7, #12]
 800cf42:	607b      	str	r3, [r7, #4]
 800cf44:	460b      	mov	r3, r1
 800cf46:	72fb      	strb	r3, [r7, #11]
 800cf48:	4613      	mov	r3, r2
 800cf4a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	789b      	ldrb	r3, [r3, #2]
 800cf50:	2b01      	cmp	r3, #1
 800cf52:	d11c      	bne.n	800cf8e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800cf54:	7afb      	ldrb	r3, [r7, #11]
 800cf56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cf5a:	b2da      	uxtb	r2, r3
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	2206      	movs	r2, #6
 800cf64:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	893a      	ldrh	r2, [r7, #8]
 800cf6a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800cf6c:	893b      	ldrh	r3, [r7, #8]
 800cf6e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cf72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf76:	d104      	bne.n	800cf82 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f240 4209 	movw	r2, #1033	; 0x409
 800cf7e:	829a      	strh	r2, [r3, #20]
 800cf80:	e002      	b.n	800cf88 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2200      	movs	r2, #0
 800cf86:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	8b3a      	ldrh	r2, [r7, #24]
 800cf8c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800cf8e:	8b3b      	ldrh	r3, [r7, #24]
 800cf90:	461a      	mov	r2, r3
 800cf92:	6879      	ldr	r1, [r7, #4]
 800cf94:	68f8      	ldr	r0, [r7, #12]
 800cf96:	f000 fa50 	bl	800d43a <USBH_CtlReq>
 800cf9a:	4603      	mov	r3, r0
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3710      	adds	r7, #16
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b082      	sub	sp, #8
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
 800cfac:	460b      	mov	r3, r1
 800cfae:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	789b      	ldrb	r3, [r3, #2]
 800cfb4:	2b01      	cmp	r3, #1
 800cfb6:	d10f      	bne.n	800cfd8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2205      	movs	r2, #5
 800cfc2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800cfc4:	78fb      	ldrb	r3, [r7, #3]
 800cfc6:	b29a      	uxth	r2, r3
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800cfd8:	2200      	movs	r2, #0
 800cfda:	2100      	movs	r1, #0
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f000 fa2c 	bl	800d43a <USBH_CtlReq>
 800cfe2:	4603      	mov	r3, r0
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3708      	adds	r7, #8
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b082      	sub	sp, #8
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	460b      	mov	r3, r1
 800cff6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	789b      	ldrb	r3, [r3, #2]
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d10e      	bne.n	800d01e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2200      	movs	r2, #0
 800d004:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2209      	movs	r2, #9
 800d00a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	887a      	ldrh	r2, [r7, #2]
 800d010:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2200      	movs	r2, #0
 800d016:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2200      	movs	r2, #0
 800d01c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d01e:	2200      	movs	r2, #0
 800d020:	2100      	movs	r1, #0
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f000 fa09 	bl	800d43a <USBH_CtlReq>
 800d028:	4603      	mov	r3, r0
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3708      	adds	r7, #8
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}

0800d032 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d032:	b580      	push	{r7, lr}
 800d034:	b082      	sub	sp, #8
 800d036:	af00      	add	r7, sp, #0
 800d038:	6078      	str	r0, [r7, #4]
 800d03a:	460b      	mov	r3, r1
 800d03c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	789b      	ldrb	r3, [r3, #2]
 800d042:	2b01      	cmp	r3, #1
 800d044:	d10f      	bne.n	800d066 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2200      	movs	r2, #0
 800d04a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2203      	movs	r2, #3
 800d050:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d052:	78fb      	ldrb	r3, [r7, #3]
 800d054:	b29a      	uxth	r2, r3
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2200      	movs	r2, #0
 800d05e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2200      	movs	r2, #0
 800d064:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d066:	2200      	movs	r2, #0
 800d068:	2100      	movs	r1, #0
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f000 f9e5 	bl	800d43a <USBH_CtlReq>
 800d070:	4603      	mov	r3, r0
}
 800d072:	4618      	mov	r0, r3
 800d074:	3708      	adds	r7, #8
 800d076:	46bd      	mov	sp, r7
 800d078:	bd80      	pop	{r7, pc}

0800d07a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d07a:	b580      	push	{r7, lr}
 800d07c:	b082      	sub	sp, #8
 800d07e:	af00      	add	r7, sp, #0
 800d080:	6078      	str	r0, [r7, #4]
 800d082:	460b      	mov	r3, r1
 800d084:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	789b      	ldrb	r3, [r3, #2]
 800d08a:	2b01      	cmp	r3, #1
 800d08c:	d10f      	bne.n	800d0ae <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2202      	movs	r2, #2
 800d092:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2201      	movs	r2, #1
 800d098:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2200      	movs	r2, #0
 800d09e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d0a0:	78fb      	ldrb	r3, [r7, #3]
 800d0a2:	b29a      	uxth	r2, r3
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	2100      	movs	r1, #0
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f000 f9c1 	bl	800d43a <USBH_CtlReq>
 800d0b8:	4603      	mov	r3, r0
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3708      	adds	r7, #8
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}

0800d0c2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800d0c2:	b480      	push	{r7}
 800d0c4:	b085      	sub	sp, #20
 800d0c6:	af00      	add	r7, sp, #0
 800d0c8:	60f8      	str	r0, [r7, #12]
 800d0ca:	60b9      	str	r1, [r7, #8]
 800d0cc:	4613      	mov	r3, r2
 800d0ce:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	781a      	ldrb	r2, [r3, #0]
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	785a      	ldrb	r2, [r3, #1]
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	3302      	adds	r3, #2
 800d0e4:	781b      	ldrb	r3, [r3, #0]
 800d0e6:	b29a      	uxth	r2, r3
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	3303      	adds	r3, #3
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	b29b      	uxth	r3, r3
 800d0f0:	021b      	lsls	r3, r3, #8
 800d0f2:	b29b      	uxth	r3, r3
 800d0f4:	4313      	orrs	r3, r2
 800d0f6:	b29a      	uxth	r2, r3
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	791a      	ldrb	r2, [r3, #4]
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	795a      	ldrb	r2, [r3, #5]
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	799a      	ldrb	r2, [r3, #6]
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	79da      	ldrb	r2, [r3, #7]
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800d11c:	88fb      	ldrh	r3, [r7, #6]
 800d11e:	2b08      	cmp	r3, #8
 800d120:	d939      	bls.n	800d196 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	3308      	adds	r3, #8
 800d126:	781b      	ldrb	r3, [r3, #0]
 800d128:	b29a      	uxth	r2, r3
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	3309      	adds	r3, #9
 800d12e:	781b      	ldrb	r3, [r3, #0]
 800d130:	b29b      	uxth	r3, r3
 800d132:	021b      	lsls	r3, r3, #8
 800d134:	b29b      	uxth	r3, r3
 800d136:	4313      	orrs	r3, r2
 800d138:	b29a      	uxth	r2, r3
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	330a      	adds	r3, #10
 800d142:	781b      	ldrb	r3, [r3, #0]
 800d144:	b29a      	uxth	r2, r3
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	330b      	adds	r3, #11
 800d14a:	781b      	ldrb	r3, [r3, #0]
 800d14c:	b29b      	uxth	r3, r3
 800d14e:	021b      	lsls	r3, r3, #8
 800d150:	b29b      	uxth	r3, r3
 800d152:	4313      	orrs	r3, r2
 800d154:	b29a      	uxth	r2, r3
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	330c      	adds	r3, #12
 800d15e:	781b      	ldrb	r3, [r3, #0]
 800d160:	b29a      	uxth	r2, r3
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	330d      	adds	r3, #13
 800d166:	781b      	ldrb	r3, [r3, #0]
 800d168:	b29b      	uxth	r3, r3
 800d16a:	021b      	lsls	r3, r3, #8
 800d16c:	b29b      	uxth	r3, r3
 800d16e:	4313      	orrs	r3, r2
 800d170:	b29a      	uxth	r2, r3
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800d176:	68bb      	ldr	r3, [r7, #8]
 800d178:	7b9a      	ldrb	r2, [r3, #14]
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	7bda      	ldrb	r2, [r3, #15]
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	7c1a      	ldrb	r2, [r3, #16]
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	7c5a      	ldrb	r2, [r3, #17]
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	745a      	strb	r2, [r3, #17]
  }
}
 800d196:	bf00      	nop
 800d198:	3714      	adds	r7, #20
 800d19a:	46bd      	mov	sp, r7
 800d19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a0:	4770      	bx	lr

0800d1a2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800d1a2:	b580      	push	{r7, lr}
 800d1a4:	b08a      	sub	sp, #40	; 0x28
 800d1a6:	af00      	add	r7, sp, #0
 800d1a8:	60f8      	str	r0, [r7, #12]
 800d1aa:	60b9      	str	r1, [r7, #8]
 800d1ac:	4613      	mov	r3, r2
 800d1ae:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d1b0:	68bb      	ldr	r3, [r7, #8]
 800d1b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	781a      	ldrb	r2, [r3, #0]
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	785a      	ldrb	r2, [r3, #1]
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	3302      	adds	r3, #2
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	b29a      	uxth	r2, r3
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	3303      	adds	r3, #3
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	b29b      	uxth	r3, r3
 800d1e4:	021b      	lsls	r3, r3, #8
 800d1e6:	b29b      	uxth	r3, r3
 800d1e8:	4313      	orrs	r3, r2
 800d1ea:	b29a      	uxth	r2, r3
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	791a      	ldrb	r2, [r3, #4]
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	795a      	ldrb	r2, [r3, #5]
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	799a      	ldrb	r2, [r3, #6]
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	79da      	ldrb	r2, [r3, #7]
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	7a1a      	ldrb	r2, [r3, #8]
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d218:	88fb      	ldrh	r3, [r7, #6]
 800d21a:	2b09      	cmp	r3, #9
 800d21c:	d95f      	bls.n	800d2de <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800d21e:	2309      	movs	r3, #9
 800d220:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800d222:	2300      	movs	r3, #0
 800d224:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d226:	e051      	b.n	800d2cc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d228:	f107 0316 	add.w	r3, r7, #22
 800d22c:	4619      	mov	r1, r3
 800d22e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d230:	f000 f8e8 	bl	800d404 <USBH_GetNextDesc>
 800d234:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800d236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d238:	785b      	ldrb	r3, [r3, #1]
 800d23a:	2b04      	cmp	r3, #4
 800d23c:	d146      	bne.n	800d2cc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800d23e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d242:	221a      	movs	r2, #26
 800d244:	fb02 f303 	mul.w	r3, r2, r3
 800d248:	3308      	adds	r3, #8
 800d24a:	68fa      	ldr	r2, [r7, #12]
 800d24c:	4413      	add	r3, r2
 800d24e:	3302      	adds	r3, #2
 800d250:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d252:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d254:	69f8      	ldr	r0, [r7, #28]
 800d256:	f000 f846 	bl	800d2e6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d25a:	2300      	movs	r3, #0
 800d25c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800d260:	2300      	movs	r3, #0
 800d262:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d264:	e022      	b.n	800d2ac <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d266:	f107 0316 	add.w	r3, r7, #22
 800d26a:	4619      	mov	r1, r3
 800d26c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d26e:	f000 f8c9 	bl	800d404 <USBH_GetNextDesc>
 800d272:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800d274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d276:	785b      	ldrb	r3, [r3, #1]
 800d278:	2b05      	cmp	r3, #5
 800d27a:	d117      	bne.n	800d2ac <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d27c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d280:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d284:	3201      	adds	r2, #1
 800d286:	00d2      	lsls	r2, r2, #3
 800d288:	211a      	movs	r1, #26
 800d28a:	fb01 f303 	mul.w	r3, r1, r3
 800d28e:	4413      	add	r3, r2
 800d290:	3308      	adds	r3, #8
 800d292:	68fa      	ldr	r2, [r7, #12]
 800d294:	4413      	add	r3, r2
 800d296:	3304      	adds	r3, #4
 800d298:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800d29a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d29c:	69b8      	ldr	r0, [r7, #24]
 800d29e:	f000 f851 	bl	800d344 <USBH_ParseEPDesc>
            ep_ix++;
 800d2a2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800d2a6:	3301      	adds	r3, #1
 800d2a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d2ac:	69fb      	ldr	r3, [r7, #28]
 800d2ae:	791b      	ldrb	r3, [r3, #4]
 800d2b0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d204      	bcs.n	800d2c2 <USBH_ParseCfgDesc+0x120>
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	885a      	ldrh	r2, [r3, #2]
 800d2bc:	8afb      	ldrh	r3, [r7, #22]
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d8d1      	bhi.n	800d266 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800d2c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d2cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d2d0:	2b01      	cmp	r3, #1
 800d2d2:	d804      	bhi.n	800d2de <USBH_ParseCfgDesc+0x13c>
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	885a      	ldrh	r2, [r3, #2]
 800d2d8:	8afb      	ldrh	r3, [r7, #22]
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	d8a4      	bhi.n	800d228 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800d2de:	bf00      	nop
 800d2e0:	3728      	adds	r7, #40	; 0x28
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}

0800d2e6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800d2e6:	b480      	push	{r7}
 800d2e8:	b083      	sub	sp, #12
 800d2ea:	af00      	add	r7, sp, #0
 800d2ec:	6078      	str	r0, [r7, #4]
 800d2ee:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	781a      	ldrb	r2, [r3, #0]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	785a      	ldrb	r2, [r3, #1]
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	789a      	ldrb	r2, [r3, #2]
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	78da      	ldrb	r2, [r3, #3]
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	791a      	ldrb	r2, [r3, #4]
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	795a      	ldrb	r2, [r3, #5]
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	799a      	ldrb	r2, [r3, #6]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	79da      	ldrb	r2, [r3, #7]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	7a1a      	ldrb	r2, [r3, #8]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	721a      	strb	r2, [r3, #8]
}
 800d338:	bf00      	nop
 800d33a:	370c      	adds	r7, #12
 800d33c:	46bd      	mov	sp, r7
 800d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d342:	4770      	bx	lr

0800d344 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800d344:	b480      	push	{r7}
 800d346:	b083      	sub	sp, #12
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	781a      	ldrb	r2, [r3, #0]
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	785a      	ldrb	r2, [r3, #1]
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	789a      	ldrb	r2, [r3, #2]
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	78da      	ldrb	r2, [r3, #3]
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	3304      	adds	r3, #4
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	b29a      	uxth	r2, r3
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	3305      	adds	r3, #5
 800d37a:	781b      	ldrb	r3, [r3, #0]
 800d37c:	b29b      	uxth	r3, r3
 800d37e:	021b      	lsls	r3, r3, #8
 800d380:	b29b      	uxth	r3, r3
 800d382:	4313      	orrs	r3, r2
 800d384:	b29a      	uxth	r2, r3
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	799a      	ldrb	r2, [r3, #6]
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	719a      	strb	r2, [r3, #6]
}
 800d392:	bf00      	nop
 800d394:	370c      	adds	r7, #12
 800d396:	46bd      	mov	sp, r7
 800d398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39c:	4770      	bx	lr

0800d39e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800d39e:	b480      	push	{r7}
 800d3a0:	b087      	sub	sp, #28
 800d3a2:	af00      	add	r7, sp, #0
 800d3a4:	60f8      	str	r0, [r7, #12]
 800d3a6:	60b9      	str	r1, [r7, #8]
 800d3a8:	4613      	mov	r3, r2
 800d3aa:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	3301      	adds	r3, #1
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	2b03      	cmp	r3, #3
 800d3b4:	d120      	bne.n	800d3f8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	781b      	ldrb	r3, [r3, #0]
 800d3ba:	1e9a      	subs	r2, r3, #2
 800d3bc:	88fb      	ldrh	r3, [r7, #6]
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	bf28      	it	cs
 800d3c2:	4613      	movcs	r3, r2
 800d3c4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	3302      	adds	r3, #2
 800d3ca:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	82fb      	strh	r3, [r7, #22]
 800d3d0:	e00b      	b.n	800d3ea <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800d3d2:	8afb      	ldrh	r3, [r7, #22]
 800d3d4:	68fa      	ldr	r2, [r7, #12]
 800d3d6:	4413      	add	r3, r2
 800d3d8:	781a      	ldrb	r2, [r3, #0]
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	701a      	strb	r2, [r3, #0]
      pdest++;
 800d3de:	68bb      	ldr	r3, [r7, #8]
 800d3e0:	3301      	adds	r3, #1
 800d3e2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800d3e4:	8afb      	ldrh	r3, [r7, #22]
 800d3e6:	3302      	adds	r3, #2
 800d3e8:	82fb      	strh	r3, [r7, #22]
 800d3ea:	8afa      	ldrh	r2, [r7, #22]
 800d3ec:	8abb      	ldrh	r3, [r7, #20]
 800d3ee:	429a      	cmp	r2, r3
 800d3f0:	d3ef      	bcc.n	800d3d2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	701a      	strb	r2, [r3, #0]
  }
}
 800d3f8:	bf00      	nop
 800d3fa:	371c      	adds	r7, #28
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d402:	4770      	bx	lr

0800d404 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800d404:	b480      	push	{r7}
 800d406:	b085      	sub	sp, #20
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	881a      	ldrh	r2, [r3, #0]
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	b29b      	uxth	r3, r3
 800d418:	4413      	add	r3, r2
 800d41a:	b29a      	uxth	r2, r3
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	781b      	ldrb	r3, [r3, #0]
 800d424:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	4413      	add	r3, r2
 800d42a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d42c:	68fb      	ldr	r3, [r7, #12]
}
 800d42e:	4618      	mov	r0, r3
 800d430:	3714      	adds	r7, #20
 800d432:	46bd      	mov	sp, r7
 800d434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d438:	4770      	bx	lr

0800d43a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800d43a:	b580      	push	{r7, lr}
 800d43c:	b086      	sub	sp, #24
 800d43e:	af00      	add	r7, sp, #0
 800d440:	60f8      	str	r0, [r7, #12]
 800d442:	60b9      	str	r1, [r7, #8]
 800d444:	4613      	mov	r3, r2
 800d446:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800d448:	2301      	movs	r3, #1
 800d44a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	789b      	ldrb	r3, [r3, #2]
 800d450:	2b01      	cmp	r3, #1
 800d452:	d002      	beq.n	800d45a <USBH_CtlReq+0x20>
 800d454:	2b02      	cmp	r3, #2
 800d456:	d01d      	beq.n	800d494 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800d458:	e043      	b.n	800d4e2 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	68ba      	ldr	r2, [r7, #8]
 800d45e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	88fa      	ldrh	r2, [r7, #6]
 800d464:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	2201      	movs	r2, #1
 800d46a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	2202      	movs	r2, #2
 800d470:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800d472:	2301      	movs	r3, #1
 800d474:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	2203      	movs	r2, #3
 800d47a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d48a:	2200      	movs	r2, #0
 800d48c:	4619      	mov	r1, r3
 800d48e:	f003 fd27 	bl	8010ee0 <osMessagePut>
      break;
 800d492:	e026      	b.n	800d4e2 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800d494:	68f8      	ldr	r0, [r7, #12]
 800d496:	f000 f829 	bl	800d4ec <USBH_HandleControl>
 800d49a:	4603      	mov	r3, r0
 800d49c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800d49e:	7dfb      	ldrb	r3, [r7, #23]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d002      	beq.n	800d4aa <USBH_CtlReq+0x70>
 800d4a4:	7dfb      	ldrb	r3, [r7, #23]
 800d4a6:	2b03      	cmp	r3, #3
 800d4a8:	d106      	bne.n	800d4b8 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	761a      	strb	r2, [r3, #24]
 800d4b6:	e005      	b.n	800d4c4 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800d4b8:	7dfb      	ldrb	r3, [r7, #23]
 800d4ba:	2b02      	cmp	r3, #2
 800d4bc:	d102      	bne.n	800d4c4 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2203      	movs	r2, #3
 800d4c8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d4d8:	2200      	movs	r2, #0
 800d4da:	4619      	mov	r1, r3
 800d4dc:	f003 fd00 	bl	8010ee0 <osMessagePut>
      break;
 800d4e0:	bf00      	nop
  }
  return status;
 800d4e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3718      	adds	r7, #24
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}

0800d4ec <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b086      	sub	sp, #24
 800d4f0:	af02      	add	r7, sp, #8
 800d4f2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	7e1b      	ldrb	r3, [r3, #24]
 800d500:	3b01      	subs	r3, #1
 800d502:	2b0a      	cmp	r3, #10
 800d504:	f200 8229 	bhi.w	800d95a <USBH_HandleControl+0x46e>
 800d508:	a201      	add	r2, pc, #4	; (adr r2, 800d510 <USBH_HandleControl+0x24>)
 800d50a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d50e:	bf00      	nop
 800d510:	0800d53d 	.word	0x0800d53d
 800d514:	0800d557 	.word	0x0800d557
 800d518:	0800d5f9 	.word	0x0800d5f9
 800d51c:	0800d61f 	.word	0x0800d61f
 800d520:	0800d6ab 	.word	0x0800d6ab
 800d524:	0800d6d5 	.word	0x0800d6d5
 800d528:	0800d797 	.word	0x0800d797
 800d52c:	0800d7b9 	.word	0x0800d7b9
 800d530:	0800d84b 	.word	0x0800d84b
 800d534:	0800d871 	.word	0x0800d871
 800d538:	0800d903 	.word	0x0800d903
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f103 0110 	add.w	r1, r3, #16
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	795b      	ldrb	r3, [r3, #5]
 800d546:	461a      	mov	r2, r3
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f000 fa17 	bl	800d97c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2202      	movs	r2, #2
 800d552:	761a      	strb	r2, [r3, #24]
      break;
 800d554:	e20c      	b.n	800d970 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	795b      	ldrb	r3, [r3, #5]
 800d55a:	4619      	mov	r1, r3
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f013 fce9 	bl	8020f34 <USBH_LL_GetURBState>
 800d562:	4603      	mov	r3, r0
 800d564:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800d566:	7bbb      	ldrb	r3, [r7, #14]
 800d568:	2b01      	cmp	r3, #1
 800d56a:	d12c      	bne.n	800d5c6 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	7c1b      	ldrb	r3, [r3, #16]
 800d570:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d574:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	8adb      	ldrh	r3, [r3, #22]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d00a      	beq.n	800d594 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800d57e:	7b7b      	ldrb	r3, [r7, #13]
 800d580:	2b80      	cmp	r3, #128	; 0x80
 800d582:	d103      	bne.n	800d58c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2203      	movs	r2, #3
 800d588:	761a      	strb	r2, [r3, #24]
 800d58a:	e00d      	b.n	800d5a8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2205      	movs	r2, #5
 800d590:	761a      	strb	r2, [r3, #24]
 800d592:	e009      	b.n	800d5a8 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800d594:	7b7b      	ldrb	r3, [r7, #13]
 800d596:	2b80      	cmp	r3, #128	; 0x80
 800d598:	d103      	bne.n	800d5a2 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2209      	movs	r2, #9
 800d59e:	761a      	strb	r2, [r3, #24]
 800d5a0:	e002      	b.n	800d5a8 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2207      	movs	r2, #7
 800d5a6:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2203      	movs	r2, #3
 800d5ac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d5bc:	2200      	movs	r2, #0
 800d5be:	4619      	mov	r1, r3
 800d5c0:	f003 fc8e 	bl	8010ee0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d5c4:	e1cb      	b.n	800d95e <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800d5c6:	7bbb      	ldrb	r3, [r7, #14]
 800d5c8:	2b04      	cmp	r3, #4
 800d5ca:	d003      	beq.n	800d5d4 <USBH_HandleControl+0xe8>
 800d5cc:	7bbb      	ldrb	r3, [r7, #14]
 800d5ce:	2b02      	cmp	r3, #2
 800d5d0:	f040 81c5 	bne.w	800d95e <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	220b      	movs	r2, #11
 800d5d8:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2203      	movs	r2, #3
 800d5de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	f003 fc75 	bl	8010ee0 <osMessagePut>
      break;
 800d5f6:	e1b2      	b.n	800d95e <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d5fe:	b29a      	uxth	r2, r3
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6899      	ldr	r1, [r3, #8]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	899a      	ldrh	r2, [r3, #12]
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	791b      	ldrb	r3, [r3, #4]
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f000 f9f2 	bl	800d9fa <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2204      	movs	r2, #4
 800d61a:	761a      	strb	r2, [r3, #24]
      break;
 800d61c:	e1a8      	b.n	800d970 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	791b      	ldrb	r3, [r3, #4]
 800d622:	4619      	mov	r1, r3
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f013 fc85 	bl	8020f34 <USBH_LL_GetURBState>
 800d62a:	4603      	mov	r3, r0
 800d62c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800d62e:	7bbb      	ldrb	r3, [r7, #14]
 800d630:	2b01      	cmp	r3, #1
 800d632:	d110      	bne.n	800d656 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2209      	movs	r2, #9
 800d638:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2203      	movs	r2, #3
 800d63e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d64e:	2200      	movs	r2, #0
 800d650:	4619      	mov	r1, r3
 800d652:	f003 fc45 	bl	8010ee0 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800d656:	7bbb      	ldrb	r3, [r7, #14]
 800d658:	2b05      	cmp	r3, #5
 800d65a:	d110      	bne.n	800d67e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800d65c:	2303      	movs	r3, #3
 800d65e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2203      	movs	r2, #3
 800d664:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d674:	2200      	movs	r2, #0
 800d676:	4619      	mov	r1, r3
 800d678:	f003 fc32 	bl	8010ee0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d67c:	e171      	b.n	800d962 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800d67e:	7bbb      	ldrb	r3, [r7, #14]
 800d680:	2b04      	cmp	r3, #4
 800d682:	f040 816e 	bne.w	800d962 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	220b      	movs	r2, #11
 800d68a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2203      	movs	r2, #3
 800d690:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	4619      	mov	r1, r3
 800d6a4:	f003 fc1c 	bl	8010ee0 <osMessagePut>
      break;
 800d6a8:	e15b      	b.n	800d962 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6899      	ldr	r1, [r3, #8]
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	899a      	ldrh	r2, [r3, #12]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	795b      	ldrb	r3, [r3, #5]
 800d6b6:	2001      	movs	r0, #1
 800d6b8:	9000      	str	r0, [sp, #0]
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f000 f978 	bl	800d9b0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d6c6:	b29a      	uxth	r2, r3
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2206      	movs	r2, #6
 800d6d0:	761a      	strb	r2, [r3, #24]
      break;
 800d6d2:	e14d      	b.n	800d970 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	795b      	ldrb	r3, [r3, #5]
 800d6d8:	4619      	mov	r1, r3
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f013 fc2a 	bl	8020f34 <USBH_LL_GetURBState>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d6e4:	7bbb      	ldrb	r3, [r7, #14]
 800d6e6:	2b01      	cmp	r3, #1
 800d6e8:	d111      	bne.n	800d70e <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2207      	movs	r2, #7
 800d6ee:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2203      	movs	r2, #3
 800d6f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d704:	2200      	movs	r2, #0
 800d706:	4619      	mov	r1, r3
 800d708:	f003 fbea 	bl	8010ee0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d70c:	e12b      	b.n	800d966 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800d70e:	7bbb      	ldrb	r3, [r7, #14]
 800d710:	2b05      	cmp	r3, #5
 800d712:	d113      	bne.n	800d73c <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	220c      	movs	r2, #12
 800d718:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800d71a:	2303      	movs	r3, #3
 800d71c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2203      	movs	r2, #3
 800d722:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d732:	2200      	movs	r2, #0
 800d734:	4619      	mov	r1, r3
 800d736:	f003 fbd3 	bl	8010ee0 <osMessagePut>
      break;
 800d73a:	e114      	b.n	800d966 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d73c:	7bbb      	ldrb	r3, [r7, #14]
 800d73e:	2b02      	cmp	r3, #2
 800d740:	d111      	bne.n	800d766 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2205      	movs	r2, #5
 800d746:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2203      	movs	r2, #3
 800d74c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d75c:	2200      	movs	r2, #0
 800d75e:	4619      	mov	r1, r3
 800d760:	f003 fbbe 	bl	8010ee0 <osMessagePut>
      break;
 800d764:	e0ff      	b.n	800d966 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800d766:	7bbb      	ldrb	r3, [r7, #14]
 800d768:	2b04      	cmp	r3, #4
 800d76a:	f040 80fc 	bne.w	800d966 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	220b      	movs	r2, #11
 800d772:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800d774:	2302      	movs	r3, #2
 800d776:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2203      	movs	r2, #3
 800d77c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d78c:	2200      	movs	r2, #0
 800d78e:	4619      	mov	r1, r3
 800d790:	f003 fba6 	bl	8010ee0 <osMessagePut>
      break;
 800d794:	e0e7      	b.n	800d966 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	791b      	ldrb	r3, [r3, #4]
 800d79a:	2200      	movs	r2, #0
 800d79c:	2100      	movs	r1, #0
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f000 f92b 	bl	800d9fa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d7aa:	b29a      	uxth	r2, r3
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2208      	movs	r2, #8
 800d7b4:	761a      	strb	r2, [r3, #24]

      break;
 800d7b6:	e0db      	b.n	800d970 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	791b      	ldrb	r3, [r3, #4]
 800d7bc:	4619      	mov	r1, r3
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f013 fbb8 	bl	8020f34 <USBH_LL_GetURBState>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800d7c8:	7bbb      	ldrb	r3, [r7, #14]
 800d7ca:	2b01      	cmp	r3, #1
 800d7cc:	d113      	bne.n	800d7f6 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	220d      	movs	r2, #13
 800d7d2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2203      	movs	r2, #3
 800d7dc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	4619      	mov	r1, r3
 800d7f0:	f003 fb76 	bl	8010ee0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d7f4:	e0b9      	b.n	800d96a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800d7f6:	7bbb      	ldrb	r3, [r7, #14]
 800d7f8:	2b04      	cmp	r3, #4
 800d7fa:	d111      	bne.n	800d820 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	220b      	movs	r2, #11
 800d800:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2203      	movs	r2, #3
 800d806:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d816:	2200      	movs	r2, #0
 800d818:	4619      	mov	r1, r3
 800d81a:	f003 fb61 	bl	8010ee0 <osMessagePut>
      break;
 800d81e:	e0a4      	b.n	800d96a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800d820:	7bbb      	ldrb	r3, [r7, #14]
 800d822:	2b05      	cmp	r3, #5
 800d824:	f040 80a1 	bne.w	800d96a <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800d828:	2303      	movs	r3, #3
 800d82a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2203      	movs	r2, #3
 800d830:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d840:	2200      	movs	r2, #0
 800d842:	4619      	mov	r1, r3
 800d844:	f003 fb4c 	bl	8010ee0 <osMessagePut>
      break;
 800d848:	e08f      	b.n	800d96a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	795b      	ldrb	r3, [r3, #5]
 800d84e:	2201      	movs	r2, #1
 800d850:	9200      	str	r2, [sp, #0]
 800d852:	2200      	movs	r2, #0
 800d854:	2100      	movs	r1, #0
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f000 f8aa 	bl	800d9b0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d862:	b29a      	uxth	r2, r3
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	220a      	movs	r2, #10
 800d86c:	761a      	strb	r2, [r3, #24]
      break;
 800d86e:	e07f      	b.n	800d970 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	795b      	ldrb	r3, [r3, #5]
 800d874:	4619      	mov	r1, r3
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f013 fb5c 	bl	8020f34 <USBH_LL_GetURBState>
 800d87c:	4603      	mov	r3, r0
 800d87e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800d880:	7bbb      	ldrb	r3, [r7, #14]
 800d882:	2b01      	cmp	r3, #1
 800d884:	d113      	bne.n	800d8ae <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800d886:	2300      	movs	r3, #0
 800d888:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	220d      	movs	r2, #13
 800d88e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2203      	movs	r2, #3
 800d894:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	f003 fb1a 	bl	8010ee0 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800d8ac:	e05f      	b.n	800d96e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800d8ae:	7bbb      	ldrb	r3, [r7, #14]
 800d8b0:	2b02      	cmp	r3, #2
 800d8b2:	d111      	bne.n	800d8d8 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2209      	movs	r2, #9
 800d8b8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2203      	movs	r2, #3
 800d8be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	4619      	mov	r1, r3
 800d8d2:	f003 fb05 	bl	8010ee0 <osMessagePut>
      break;
 800d8d6:	e04a      	b.n	800d96e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800d8d8:	7bbb      	ldrb	r3, [r7, #14]
 800d8da:	2b04      	cmp	r3, #4
 800d8dc:	d147      	bne.n	800d96e <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	220b      	movs	r2, #11
 800d8e2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2203      	movs	r2, #3
 800d8e8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	4619      	mov	r1, r3
 800d8fc:	f003 faf0 	bl	8010ee0 <osMessagePut>
      break;
 800d900:	e035      	b.n	800d96e <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	7e5b      	ldrb	r3, [r3, #25]
 800d906:	3301      	adds	r3, #1
 800d908:	b2da      	uxtb	r2, r3
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	765a      	strb	r2, [r3, #25]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	7e5b      	ldrb	r3, [r3, #25]
 800d912:	2b02      	cmp	r3, #2
 800d914:	d806      	bhi.n	800d924 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2201      	movs	r2, #1
 800d91a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2201      	movs	r2, #1
 800d920:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800d922:	e025      	b.n	800d970 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d92a:	2106      	movs	r1, #6
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2200      	movs	r2, #0
 800d934:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	795b      	ldrb	r3, [r3, #5]
 800d93a:	4619      	mov	r1, r3
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f000 f90d 	bl	800db5c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	791b      	ldrb	r3, [r3, #4]
 800d946:	4619      	mov	r1, r3
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f000 f907 	bl	800db5c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2200      	movs	r2, #0
 800d952:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800d954:	2302      	movs	r3, #2
 800d956:	73fb      	strb	r3, [r7, #15]
      break;
 800d958:	e00a      	b.n	800d970 <USBH_HandleControl+0x484>

    default:
      break;
 800d95a:	bf00      	nop
 800d95c:	e008      	b.n	800d970 <USBH_HandleControl+0x484>
      break;
 800d95e:	bf00      	nop
 800d960:	e006      	b.n	800d970 <USBH_HandleControl+0x484>
      break;
 800d962:	bf00      	nop
 800d964:	e004      	b.n	800d970 <USBH_HandleControl+0x484>
      break;
 800d966:	bf00      	nop
 800d968:	e002      	b.n	800d970 <USBH_HandleControl+0x484>
      break;
 800d96a:	bf00      	nop
 800d96c:	e000      	b.n	800d970 <USBH_HandleControl+0x484>
      break;
 800d96e:	bf00      	nop
  }

  return status;
 800d970:	7bfb      	ldrb	r3, [r7, #15]
}
 800d972:	4618      	mov	r0, r3
 800d974:	3710      	adds	r7, #16
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
 800d97a:	bf00      	nop

0800d97c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b088      	sub	sp, #32
 800d980:	af04      	add	r7, sp, #16
 800d982:	60f8      	str	r0, [r7, #12]
 800d984:	60b9      	str	r1, [r7, #8]
 800d986:	4613      	mov	r3, r2
 800d988:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d98a:	79f9      	ldrb	r1, [r7, #7]
 800d98c:	2300      	movs	r3, #0
 800d98e:	9303      	str	r3, [sp, #12]
 800d990:	2308      	movs	r3, #8
 800d992:	9302      	str	r3, [sp, #8]
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	9301      	str	r3, [sp, #4]
 800d998:	2300      	movs	r3, #0
 800d99a:	9300      	str	r3, [sp, #0]
 800d99c:	2300      	movs	r3, #0
 800d99e:	2200      	movs	r2, #0
 800d9a0:	68f8      	ldr	r0, [r7, #12]
 800d9a2:	f013 fa96 	bl	8020ed2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800d9a6:	2300      	movs	r3, #0
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3710      	adds	r7, #16
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}

0800d9b0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b088      	sub	sp, #32
 800d9b4:	af04      	add	r7, sp, #16
 800d9b6:	60f8      	str	r0, [r7, #12]
 800d9b8:	60b9      	str	r1, [r7, #8]
 800d9ba:	4611      	mov	r1, r2
 800d9bc:	461a      	mov	r2, r3
 800d9be:	460b      	mov	r3, r1
 800d9c0:	80fb      	strh	r3, [r7, #6]
 800d9c2:	4613      	mov	r3, r2
 800d9c4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d001      	beq.n	800d9d4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800d9d4:	7979      	ldrb	r1, [r7, #5]
 800d9d6:	7e3b      	ldrb	r3, [r7, #24]
 800d9d8:	9303      	str	r3, [sp, #12]
 800d9da:	88fb      	ldrh	r3, [r7, #6]
 800d9dc:	9302      	str	r3, [sp, #8]
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	9301      	str	r3, [sp, #4]
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	9300      	str	r3, [sp, #0]
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	68f8      	ldr	r0, [r7, #12]
 800d9ec:	f013 fa71 	bl	8020ed2 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800d9f0:	2300      	movs	r3, #0
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3710      	adds	r7, #16
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}

0800d9fa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800d9fa:	b580      	push	{r7, lr}
 800d9fc:	b088      	sub	sp, #32
 800d9fe:	af04      	add	r7, sp, #16
 800da00:	60f8      	str	r0, [r7, #12]
 800da02:	60b9      	str	r1, [r7, #8]
 800da04:	4611      	mov	r1, r2
 800da06:	461a      	mov	r2, r3
 800da08:	460b      	mov	r3, r1
 800da0a:	80fb      	strh	r3, [r7, #6]
 800da0c:	4613      	mov	r3, r2
 800da0e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800da10:	7979      	ldrb	r1, [r7, #5]
 800da12:	2300      	movs	r3, #0
 800da14:	9303      	str	r3, [sp, #12]
 800da16:	88fb      	ldrh	r3, [r7, #6]
 800da18:	9302      	str	r3, [sp, #8]
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	9301      	str	r3, [sp, #4]
 800da1e:	2301      	movs	r3, #1
 800da20:	9300      	str	r3, [sp, #0]
 800da22:	2300      	movs	r3, #0
 800da24:	2201      	movs	r2, #1
 800da26:	68f8      	ldr	r0, [r7, #12]
 800da28:	f013 fa53 	bl	8020ed2 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800da2c:	2300      	movs	r3, #0

}
 800da2e:	4618      	mov	r0, r3
 800da30:	3710      	adds	r7, #16
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}

0800da36 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800da36:	b580      	push	{r7, lr}
 800da38:	b088      	sub	sp, #32
 800da3a:	af04      	add	r7, sp, #16
 800da3c:	60f8      	str	r0, [r7, #12]
 800da3e:	60b9      	str	r1, [r7, #8]
 800da40:	4611      	mov	r1, r2
 800da42:	461a      	mov	r2, r3
 800da44:	460b      	mov	r3, r1
 800da46:	80fb      	strh	r3, [r7, #6]
 800da48:	4613      	mov	r3, r2
 800da4a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800da52:	2b00      	cmp	r3, #0
 800da54:	d001      	beq.n	800da5a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800da56:	2300      	movs	r3, #0
 800da58:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800da5a:	7979      	ldrb	r1, [r7, #5]
 800da5c:	7e3b      	ldrb	r3, [r7, #24]
 800da5e:	9303      	str	r3, [sp, #12]
 800da60:	88fb      	ldrh	r3, [r7, #6]
 800da62:	9302      	str	r3, [sp, #8]
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	9301      	str	r3, [sp, #4]
 800da68:	2301      	movs	r3, #1
 800da6a:	9300      	str	r3, [sp, #0]
 800da6c:	2302      	movs	r3, #2
 800da6e:	2200      	movs	r2, #0
 800da70:	68f8      	ldr	r0, [r7, #12]
 800da72:	f013 fa2e 	bl	8020ed2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800da76:	2300      	movs	r3, #0
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3710      	adds	r7, #16
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}

0800da80 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b088      	sub	sp, #32
 800da84:	af04      	add	r7, sp, #16
 800da86:	60f8      	str	r0, [r7, #12]
 800da88:	60b9      	str	r1, [r7, #8]
 800da8a:	4611      	mov	r1, r2
 800da8c:	461a      	mov	r2, r3
 800da8e:	460b      	mov	r3, r1
 800da90:	80fb      	strh	r3, [r7, #6]
 800da92:	4613      	mov	r3, r2
 800da94:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800da96:	7979      	ldrb	r1, [r7, #5]
 800da98:	2300      	movs	r3, #0
 800da9a:	9303      	str	r3, [sp, #12]
 800da9c:	88fb      	ldrh	r3, [r7, #6]
 800da9e:	9302      	str	r3, [sp, #8]
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	9301      	str	r3, [sp, #4]
 800daa4:	2301      	movs	r3, #1
 800daa6:	9300      	str	r3, [sp, #0]
 800daa8:	2302      	movs	r3, #2
 800daaa:	2201      	movs	r2, #1
 800daac:	68f8      	ldr	r0, [r7, #12]
 800daae:	f013 fa10 	bl	8020ed2 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800dab2:	2300      	movs	r3, #0
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3710      	adds	r7, #16
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}

0800dabc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b086      	sub	sp, #24
 800dac0:	af04      	add	r7, sp, #16
 800dac2:	6078      	str	r0, [r7, #4]
 800dac4:	4608      	mov	r0, r1
 800dac6:	4611      	mov	r1, r2
 800dac8:	461a      	mov	r2, r3
 800daca:	4603      	mov	r3, r0
 800dacc:	70fb      	strb	r3, [r7, #3]
 800dace:	460b      	mov	r3, r1
 800dad0:	70bb      	strb	r3, [r7, #2]
 800dad2:	4613      	mov	r3, r2
 800dad4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800dad6:	7878      	ldrb	r0, [r7, #1]
 800dad8:	78ba      	ldrb	r2, [r7, #2]
 800dada:	78f9      	ldrb	r1, [r7, #3]
 800dadc:	8b3b      	ldrh	r3, [r7, #24]
 800dade:	9302      	str	r3, [sp, #8]
 800dae0:	7d3b      	ldrb	r3, [r7, #20]
 800dae2:	9301      	str	r3, [sp, #4]
 800dae4:	7c3b      	ldrb	r3, [r7, #16]
 800dae6:	9300      	str	r3, [sp, #0]
 800dae8:	4603      	mov	r3, r0
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f013 f9a3 	bl	8020e36 <USBH_LL_OpenPipe>

  return USBH_OK;
 800daf0:	2300      	movs	r3, #0
}
 800daf2:	4618      	mov	r0, r3
 800daf4:	3708      	adds	r7, #8
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}

0800dafa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800dafa:	b580      	push	{r7, lr}
 800dafc:	b082      	sub	sp, #8
 800dafe:	af00      	add	r7, sp, #0
 800db00:	6078      	str	r0, [r7, #4]
 800db02:	460b      	mov	r3, r1
 800db04:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800db06:	78fb      	ldrb	r3, [r7, #3]
 800db08:	4619      	mov	r1, r3
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f013 f9c2 	bl	8020e94 <USBH_LL_ClosePipe>

  return USBH_OK;
 800db10:	2300      	movs	r3, #0
}
 800db12:	4618      	mov	r0, r3
 800db14:	3708      	adds	r7, #8
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}

0800db1a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800db1a:	b580      	push	{r7, lr}
 800db1c:	b084      	sub	sp, #16
 800db1e:	af00      	add	r7, sp, #0
 800db20:	6078      	str	r0, [r7, #4]
 800db22:	460b      	mov	r3, r1
 800db24:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f000 f836 	bl	800db98 <USBH_GetFreePipe>
 800db2c:	4603      	mov	r3, r0
 800db2e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800db30:	89fb      	ldrh	r3, [r7, #14]
 800db32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800db36:	4293      	cmp	r3, r2
 800db38:	d00a      	beq.n	800db50 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800db3a:	78fa      	ldrb	r2, [r7, #3]
 800db3c:	89fb      	ldrh	r3, [r7, #14]
 800db3e:	f003 030f 	and.w	r3, r3, #15
 800db42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800db46:	6879      	ldr	r1, [r7, #4]
 800db48:	33e0      	adds	r3, #224	; 0xe0
 800db4a:	009b      	lsls	r3, r3, #2
 800db4c:	440b      	add	r3, r1
 800db4e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800db50:	89fb      	ldrh	r3, [r7, #14]
 800db52:	b2db      	uxtb	r3, r3
}
 800db54:	4618      	mov	r0, r3
 800db56:	3710      	adds	r7, #16
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}

0800db5c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800db5c:	b480      	push	{r7}
 800db5e:	b083      	sub	sp, #12
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
 800db64:	460b      	mov	r3, r1
 800db66:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800db68:	78fb      	ldrb	r3, [r7, #3]
 800db6a:	2b0a      	cmp	r3, #10
 800db6c:	d80d      	bhi.n	800db8a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800db6e:	78fb      	ldrb	r3, [r7, #3]
 800db70:	687a      	ldr	r2, [r7, #4]
 800db72:	33e0      	adds	r3, #224	; 0xe0
 800db74:	009b      	lsls	r3, r3, #2
 800db76:	4413      	add	r3, r2
 800db78:	685a      	ldr	r2, [r3, #4]
 800db7a:	78fb      	ldrb	r3, [r7, #3]
 800db7c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800db80:	6879      	ldr	r1, [r7, #4]
 800db82:	33e0      	adds	r3, #224	; 0xe0
 800db84:	009b      	lsls	r3, r3, #2
 800db86:	440b      	add	r3, r1
 800db88:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800db8a:	2300      	movs	r3, #0
}
 800db8c:	4618      	mov	r0, r3
 800db8e:	370c      	adds	r7, #12
 800db90:	46bd      	mov	sp, r7
 800db92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db96:	4770      	bx	lr

0800db98 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800db98:	b480      	push	{r7}
 800db9a:	b085      	sub	sp, #20
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800dba0:	2300      	movs	r3, #0
 800dba2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800dba4:	2300      	movs	r3, #0
 800dba6:	73fb      	strb	r3, [r7, #15]
 800dba8:	e00f      	b.n	800dbca <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800dbaa:	7bfb      	ldrb	r3, [r7, #15]
 800dbac:	687a      	ldr	r2, [r7, #4]
 800dbae:	33e0      	adds	r3, #224	; 0xe0
 800dbb0:	009b      	lsls	r3, r3, #2
 800dbb2:	4413      	add	r3, r2
 800dbb4:	685b      	ldr	r3, [r3, #4]
 800dbb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d102      	bne.n	800dbc4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800dbbe:	7bfb      	ldrb	r3, [r7, #15]
 800dbc0:	b29b      	uxth	r3, r3
 800dbc2:	e007      	b.n	800dbd4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800dbc4:	7bfb      	ldrb	r3, [r7, #15]
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	73fb      	strb	r3, [r7, #15]
 800dbca:	7bfb      	ldrb	r3, [r7, #15]
 800dbcc:	2b0a      	cmp	r3, #10
 800dbce:	d9ec      	bls.n	800dbaa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800dbd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	3714      	adds	r7, #20
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbde:	4770      	bx	lr

0800dbe0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b084      	sub	sp, #16
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800dbea:	79fb      	ldrb	r3, [r7, #7]
 800dbec:	4a08      	ldr	r2, [pc, #32]	; (800dc10 <disk_status+0x30>)
 800dbee:	009b      	lsls	r3, r3, #2
 800dbf0:	4413      	add	r3, r2
 800dbf2:	685b      	ldr	r3, [r3, #4]
 800dbf4:	685b      	ldr	r3, [r3, #4]
 800dbf6:	79fa      	ldrb	r2, [r7, #7]
 800dbf8:	4905      	ldr	r1, [pc, #20]	; (800dc10 <disk_status+0x30>)
 800dbfa:	440a      	add	r2, r1
 800dbfc:	7a12      	ldrb	r2, [r2, #8]
 800dbfe:	4610      	mov	r0, r2
 800dc00:	4798      	blx	r3
 800dc02:	4603      	mov	r3, r0
 800dc04:	73fb      	strb	r3, [r7, #15]
  return stat;
 800dc06:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3710      	adds	r7, #16
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}
 800dc10:	200010dc 	.word	0x200010dc

0800dc14 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b084      	sub	sp, #16
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800dc22:	79fb      	ldrb	r3, [r7, #7]
 800dc24:	4a0d      	ldr	r2, [pc, #52]	; (800dc5c <disk_initialize+0x48>)
 800dc26:	5cd3      	ldrb	r3, [r2, r3]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d111      	bne.n	800dc50 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800dc2c:	79fb      	ldrb	r3, [r7, #7]
 800dc2e:	4a0b      	ldr	r2, [pc, #44]	; (800dc5c <disk_initialize+0x48>)
 800dc30:	2101      	movs	r1, #1
 800dc32:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800dc34:	79fb      	ldrb	r3, [r7, #7]
 800dc36:	4a09      	ldr	r2, [pc, #36]	; (800dc5c <disk_initialize+0x48>)
 800dc38:	009b      	lsls	r3, r3, #2
 800dc3a:	4413      	add	r3, r2
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	79fa      	ldrb	r2, [r7, #7]
 800dc42:	4906      	ldr	r1, [pc, #24]	; (800dc5c <disk_initialize+0x48>)
 800dc44:	440a      	add	r2, r1
 800dc46:	7a12      	ldrb	r2, [r2, #8]
 800dc48:	4610      	mov	r0, r2
 800dc4a:	4798      	blx	r3
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800dc50:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3710      	adds	r7, #16
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	200010dc 	.word	0x200010dc

0800dc60 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800dc60:	b590      	push	{r4, r7, lr}
 800dc62:	b087      	sub	sp, #28
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	60b9      	str	r1, [r7, #8]
 800dc68:	607a      	str	r2, [r7, #4]
 800dc6a:	603b      	str	r3, [r7, #0]
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800dc70:	7bfb      	ldrb	r3, [r7, #15]
 800dc72:	4a0a      	ldr	r2, [pc, #40]	; (800dc9c <disk_read+0x3c>)
 800dc74:	009b      	lsls	r3, r3, #2
 800dc76:	4413      	add	r3, r2
 800dc78:	685b      	ldr	r3, [r3, #4]
 800dc7a:	689c      	ldr	r4, [r3, #8]
 800dc7c:	7bfb      	ldrb	r3, [r7, #15]
 800dc7e:	4a07      	ldr	r2, [pc, #28]	; (800dc9c <disk_read+0x3c>)
 800dc80:	4413      	add	r3, r2
 800dc82:	7a18      	ldrb	r0, [r3, #8]
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	687a      	ldr	r2, [r7, #4]
 800dc88:	68b9      	ldr	r1, [r7, #8]
 800dc8a:	47a0      	blx	r4
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	75fb      	strb	r3, [r7, #23]
  return res;
 800dc90:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	371c      	adds	r7, #28
 800dc96:	46bd      	mov	sp, r7
 800dc98:	bd90      	pop	{r4, r7, pc}
 800dc9a:	bf00      	nop
 800dc9c:	200010dc 	.word	0x200010dc

0800dca0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800dca0:	b590      	push	{r4, r7, lr}
 800dca2:	b087      	sub	sp, #28
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	60b9      	str	r1, [r7, #8]
 800dca8:	607a      	str	r2, [r7, #4]
 800dcaa:	603b      	str	r3, [r7, #0]
 800dcac:	4603      	mov	r3, r0
 800dcae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800dcb0:	7bfb      	ldrb	r3, [r7, #15]
 800dcb2:	4a0a      	ldr	r2, [pc, #40]	; (800dcdc <disk_write+0x3c>)
 800dcb4:	009b      	lsls	r3, r3, #2
 800dcb6:	4413      	add	r3, r2
 800dcb8:	685b      	ldr	r3, [r3, #4]
 800dcba:	68dc      	ldr	r4, [r3, #12]
 800dcbc:	7bfb      	ldrb	r3, [r7, #15]
 800dcbe:	4a07      	ldr	r2, [pc, #28]	; (800dcdc <disk_write+0x3c>)
 800dcc0:	4413      	add	r3, r2
 800dcc2:	7a18      	ldrb	r0, [r3, #8]
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	687a      	ldr	r2, [r7, #4]
 800dcc8:	68b9      	ldr	r1, [r7, #8]
 800dcca:	47a0      	blx	r4
 800dccc:	4603      	mov	r3, r0
 800dcce:	75fb      	strb	r3, [r7, #23]
  return res;
 800dcd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	371c      	adds	r7, #28
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd90      	pop	{r4, r7, pc}
 800dcda:	bf00      	nop
 800dcdc:	200010dc 	.word	0x200010dc

0800dce0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b084      	sub	sp, #16
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	4603      	mov	r3, r0
 800dce8:	603a      	str	r2, [r7, #0]
 800dcea:	71fb      	strb	r3, [r7, #7]
 800dcec:	460b      	mov	r3, r1
 800dcee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800dcf0:	79fb      	ldrb	r3, [r7, #7]
 800dcf2:	4a09      	ldr	r2, [pc, #36]	; (800dd18 <disk_ioctl+0x38>)
 800dcf4:	009b      	lsls	r3, r3, #2
 800dcf6:	4413      	add	r3, r2
 800dcf8:	685b      	ldr	r3, [r3, #4]
 800dcfa:	691b      	ldr	r3, [r3, #16]
 800dcfc:	79fa      	ldrb	r2, [r7, #7]
 800dcfe:	4906      	ldr	r1, [pc, #24]	; (800dd18 <disk_ioctl+0x38>)
 800dd00:	440a      	add	r2, r1
 800dd02:	7a10      	ldrb	r0, [r2, #8]
 800dd04:	79b9      	ldrb	r1, [r7, #6]
 800dd06:	683a      	ldr	r2, [r7, #0]
 800dd08:	4798      	blx	r3
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	73fb      	strb	r3, [r7, #15]
  return res;
 800dd0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	3710      	adds	r7, #16
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}
 800dd18:	200010dc 	.word	0x200010dc

0800dd1c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b085      	sub	sp, #20
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	3301      	adds	r3, #1
 800dd28:	781b      	ldrb	r3, [r3, #0]
 800dd2a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800dd2c:	89fb      	ldrh	r3, [r7, #14]
 800dd2e:	021b      	lsls	r3, r3, #8
 800dd30:	b21a      	sxth	r2, r3
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	b21b      	sxth	r3, r3
 800dd38:	4313      	orrs	r3, r2
 800dd3a:	b21b      	sxth	r3, r3
 800dd3c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800dd3e:	89fb      	ldrh	r3, [r7, #14]
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3714      	adds	r7, #20
 800dd44:	46bd      	mov	sp, r7
 800dd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4a:	4770      	bx	lr

0800dd4c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b085      	sub	sp, #20
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	3303      	adds	r3, #3
 800dd58:	781b      	ldrb	r3, [r3, #0]
 800dd5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	021b      	lsls	r3, r3, #8
 800dd60:	687a      	ldr	r2, [r7, #4]
 800dd62:	3202      	adds	r2, #2
 800dd64:	7812      	ldrb	r2, [r2, #0]
 800dd66:	4313      	orrs	r3, r2
 800dd68:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	021b      	lsls	r3, r3, #8
 800dd6e:	687a      	ldr	r2, [r7, #4]
 800dd70:	3201      	adds	r2, #1
 800dd72:	7812      	ldrb	r2, [r2, #0]
 800dd74:	4313      	orrs	r3, r2
 800dd76:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	021b      	lsls	r3, r3, #8
 800dd7c:	687a      	ldr	r2, [r7, #4]
 800dd7e:	7812      	ldrb	r2, [r2, #0]
 800dd80:	4313      	orrs	r3, r2
 800dd82:	60fb      	str	r3, [r7, #12]
	return rv;
 800dd84:	68fb      	ldr	r3, [r7, #12]
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	3714      	adds	r7, #20
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd90:	4770      	bx	lr

0800dd92 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800dd92:	b480      	push	{r7}
 800dd94:	b083      	sub	sp, #12
 800dd96:	af00      	add	r7, sp, #0
 800dd98:	6078      	str	r0, [r7, #4]
 800dd9a:	460b      	mov	r3, r1
 800dd9c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	1c5a      	adds	r2, r3, #1
 800dda2:	607a      	str	r2, [r7, #4]
 800dda4:	887a      	ldrh	r2, [r7, #2]
 800dda6:	b2d2      	uxtb	r2, r2
 800dda8:	701a      	strb	r2, [r3, #0]
 800ddaa:	887b      	ldrh	r3, [r7, #2]
 800ddac:	0a1b      	lsrs	r3, r3, #8
 800ddae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	1c5a      	adds	r2, r3, #1
 800ddb4:	607a      	str	r2, [r7, #4]
 800ddb6:	887a      	ldrh	r2, [r7, #2]
 800ddb8:	b2d2      	uxtb	r2, r2
 800ddba:	701a      	strb	r2, [r3, #0]
}
 800ddbc:	bf00      	nop
 800ddbe:	370c      	adds	r7, #12
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	4770      	bx	lr

0800ddc8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b083      	sub	sp, #12
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	1c5a      	adds	r2, r3, #1
 800ddd6:	607a      	str	r2, [r7, #4]
 800ddd8:	683a      	ldr	r2, [r7, #0]
 800ddda:	b2d2      	uxtb	r2, r2
 800dddc:	701a      	strb	r2, [r3, #0]
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	0a1b      	lsrs	r3, r3, #8
 800dde2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	1c5a      	adds	r2, r3, #1
 800dde8:	607a      	str	r2, [r7, #4]
 800ddea:	683a      	ldr	r2, [r7, #0]
 800ddec:	b2d2      	uxtb	r2, r2
 800ddee:	701a      	strb	r2, [r3, #0]
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	0a1b      	lsrs	r3, r3, #8
 800ddf4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	1c5a      	adds	r2, r3, #1
 800ddfa:	607a      	str	r2, [r7, #4]
 800ddfc:	683a      	ldr	r2, [r7, #0]
 800ddfe:	b2d2      	uxtb	r2, r2
 800de00:	701a      	strb	r2, [r3, #0]
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	0a1b      	lsrs	r3, r3, #8
 800de06:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	1c5a      	adds	r2, r3, #1
 800de0c:	607a      	str	r2, [r7, #4]
 800de0e:	683a      	ldr	r2, [r7, #0]
 800de10:	b2d2      	uxtb	r2, r2
 800de12:	701a      	strb	r2, [r3, #0]
}
 800de14:	bf00      	nop
 800de16:	370c      	adds	r7, #12
 800de18:	46bd      	mov	sp, r7
 800de1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1e:	4770      	bx	lr

0800de20 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800de20:	b480      	push	{r7}
 800de22:	b087      	sub	sp, #28
 800de24:	af00      	add	r7, sp, #0
 800de26:	60f8      	str	r0, [r7, #12]
 800de28:	60b9      	str	r1, [r7, #8]
 800de2a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d00d      	beq.n	800de56 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800de3a:	693a      	ldr	r2, [r7, #16]
 800de3c:	1c53      	adds	r3, r2, #1
 800de3e:	613b      	str	r3, [r7, #16]
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	1c59      	adds	r1, r3, #1
 800de44:	6179      	str	r1, [r7, #20]
 800de46:	7812      	ldrb	r2, [r2, #0]
 800de48:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	3b01      	subs	r3, #1
 800de4e:	607b      	str	r3, [r7, #4]
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d1f1      	bne.n	800de3a <mem_cpy+0x1a>
	}
}
 800de56:	bf00      	nop
 800de58:	371c      	adds	r7, #28
 800de5a:	46bd      	mov	sp, r7
 800de5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de60:	4770      	bx	lr

0800de62 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800de62:	b480      	push	{r7}
 800de64:	b087      	sub	sp, #28
 800de66:	af00      	add	r7, sp, #0
 800de68:	60f8      	str	r0, [r7, #12]
 800de6a:	60b9      	str	r1, [r7, #8]
 800de6c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	1c5a      	adds	r2, r3, #1
 800de76:	617a      	str	r2, [r7, #20]
 800de78:	68ba      	ldr	r2, [r7, #8]
 800de7a:	b2d2      	uxtb	r2, r2
 800de7c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	3b01      	subs	r3, #1
 800de82:	607b      	str	r3, [r7, #4]
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d1f3      	bne.n	800de72 <mem_set+0x10>
}
 800de8a:	bf00      	nop
 800de8c:	bf00      	nop
 800de8e:	371c      	adds	r7, #28
 800de90:	46bd      	mov	sp, r7
 800de92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de96:	4770      	bx	lr

0800de98 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800de98:	b480      	push	{r7}
 800de9a:	b089      	sub	sp, #36	; 0x24
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	60f8      	str	r0, [r7, #12]
 800dea0:	60b9      	str	r1, [r7, #8]
 800dea2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	61fb      	str	r3, [r7, #28]
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800deac:	2300      	movs	r3, #0
 800deae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800deb0:	69fb      	ldr	r3, [r7, #28]
 800deb2:	1c5a      	adds	r2, r3, #1
 800deb4:	61fa      	str	r2, [r7, #28]
 800deb6:	781b      	ldrb	r3, [r3, #0]
 800deb8:	4619      	mov	r1, r3
 800deba:	69bb      	ldr	r3, [r7, #24]
 800debc:	1c5a      	adds	r2, r3, #1
 800debe:	61ba      	str	r2, [r7, #24]
 800dec0:	781b      	ldrb	r3, [r3, #0]
 800dec2:	1acb      	subs	r3, r1, r3
 800dec4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	3b01      	subs	r3, #1
 800deca:	607b      	str	r3, [r7, #4]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d002      	beq.n	800ded8 <mem_cmp+0x40>
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d0eb      	beq.n	800deb0 <mem_cmp+0x18>

	return r;
 800ded8:	697b      	ldr	r3, [r7, #20]
}
 800deda:	4618      	mov	r0, r3
 800dedc:	3724      	adds	r7, #36	; 0x24
 800dede:	46bd      	mov	sp, r7
 800dee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee4:	4770      	bx	lr

0800dee6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800dee6:	b480      	push	{r7}
 800dee8:	b083      	sub	sp, #12
 800deea:	af00      	add	r7, sp, #0
 800deec:	6078      	str	r0, [r7, #4]
 800deee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800def0:	e002      	b.n	800def8 <chk_chr+0x12>
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	3301      	adds	r3, #1
 800def6:	607b      	str	r3, [r7, #4]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	781b      	ldrb	r3, [r3, #0]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d005      	beq.n	800df0c <chk_chr+0x26>
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	781b      	ldrb	r3, [r3, #0]
 800df04:	461a      	mov	r2, r3
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	4293      	cmp	r3, r2
 800df0a:	d1f2      	bne.n	800def2 <chk_chr+0xc>
	return *str;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	781b      	ldrb	r3, [r3, #0]
}
 800df10:	4618      	mov	r0, r3
 800df12:	370c      	adds	r7, #12
 800df14:	46bd      	mov	sp, r7
 800df16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1a:	4770      	bx	lr

0800df1c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b082      	sub	sp, #8
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d009      	beq.n	800df3e <lock_fs+0x22>
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	691b      	ldr	r3, [r3, #16]
 800df2e:	4618      	mov	r0, r3
 800df30:	f002 fd87 	bl	8010a42 <ff_req_grant>
 800df34:	4603      	mov	r3, r0
 800df36:	2b00      	cmp	r3, #0
 800df38:	d001      	beq.n	800df3e <lock_fs+0x22>
 800df3a:	2301      	movs	r3, #1
 800df3c:	e000      	b.n	800df40 <lock_fs+0x24>
 800df3e:	2300      	movs	r3, #0
}
 800df40:	4618      	mov	r0, r3
 800df42:	3708      	adds	r7, #8
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}

0800df48 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b082      	sub	sp, #8
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	460b      	mov	r3, r1
 800df52:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d00d      	beq.n	800df76 <unlock_fs+0x2e>
 800df5a:	78fb      	ldrb	r3, [r7, #3]
 800df5c:	2b0c      	cmp	r3, #12
 800df5e:	d00a      	beq.n	800df76 <unlock_fs+0x2e>
 800df60:	78fb      	ldrb	r3, [r7, #3]
 800df62:	2b0b      	cmp	r3, #11
 800df64:	d007      	beq.n	800df76 <unlock_fs+0x2e>
 800df66:	78fb      	ldrb	r3, [r7, #3]
 800df68:	2b0f      	cmp	r3, #15
 800df6a:	d004      	beq.n	800df76 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	691b      	ldr	r3, [r3, #16]
 800df70:	4618      	mov	r0, r3
 800df72:	f002 fd7b 	bl	8010a6c <ff_rel_grant>
	}
}
 800df76:	bf00      	nop
 800df78:	3708      	adds	r7, #8
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}
	...

0800df80 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800df80:	b480      	push	{r7}
 800df82:	b085      	sub	sp, #20
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
 800df88:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800df8a:	2300      	movs	r3, #0
 800df8c:	60bb      	str	r3, [r7, #8]
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	60fb      	str	r3, [r7, #12]
 800df92:	e029      	b.n	800dfe8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800df94:	4a27      	ldr	r2, [pc, #156]	; (800e034 <chk_lock+0xb4>)
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	011b      	lsls	r3, r3, #4
 800df9a:	4413      	add	r3, r2
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d01d      	beq.n	800dfde <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800dfa2:	4a24      	ldr	r2, [pc, #144]	; (800e034 <chk_lock+0xb4>)
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	011b      	lsls	r3, r3, #4
 800dfa8:	4413      	add	r3, r2
 800dfaa:	681a      	ldr	r2, [r3, #0]
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	429a      	cmp	r2, r3
 800dfb2:	d116      	bne.n	800dfe2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800dfb4:	4a1f      	ldr	r2, [pc, #124]	; (800e034 <chk_lock+0xb4>)
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	011b      	lsls	r3, r3, #4
 800dfba:	4413      	add	r3, r2
 800dfbc:	3304      	adds	r3, #4
 800dfbe:	681a      	ldr	r2, [r3, #0]
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	d10c      	bne.n	800dfe2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800dfc8:	4a1a      	ldr	r2, [pc, #104]	; (800e034 <chk_lock+0xb4>)
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	011b      	lsls	r3, r3, #4
 800dfce:	4413      	add	r3, r2
 800dfd0:	3308      	adds	r3, #8
 800dfd2:	681a      	ldr	r2, [r3, #0]
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800dfd8:	429a      	cmp	r2, r3
 800dfda:	d102      	bne.n	800dfe2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800dfdc:	e007      	b.n	800dfee <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800dfde:	2301      	movs	r3, #1
 800dfe0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	3301      	adds	r3, #1
 800dfe6:	60fb      	str	r3, [r7, #12]
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	2b01      	cmp	r3, #1
 800dfec:	d9d2      	bls.n	800df94 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	2b02      	cmp	r3, #2
 800dff2:	d109      	bne.n	800e008 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d102      	bne.n	800e000 <chk_lock+0x80>
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	2b02      	cmp	r3, #2
 800dffe:	d101      	bne.n	800e004 <chk_lock+0x84>
 800e000:	2300      	movs	r3, #0
 800e002:	e010      	b.n	800e026 <chk_lock+0xa6>
 800e004:	2312      	movs	r3, #18
 800e006:	e00e      	b.n	800e026 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d108      	bne.n	800e020 <chk_lock+0xa0>
 800e00e:	4a09      	ldr	r2, [pc, #36]	; (800e034 <chk_lock+0xb4>)
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	011b      	lsls	r3, r3, #4
 800e014:	4413      	add	r3, r2
 800e016:	330c      	adds	r3, #12
 800e018:	881b      	ldrh	r3, [r3, #0]
 800e01a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e01e:	d101      	bne.n	800e024 <chk_lock+0xa4>
 800e020:	2310      	movs	r3, #16
 800e022:	e000      	b.n	800e026 <chk_lock+0xa6>
 800e024:	2300      	movs	r3, #0
}
 800e026:	4618      	mov	r0, r3
 800e028:	3714      	adds	r7, #20
 800e02a:	46bd      	mov	sp, r7
 800e02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e030:	4770      	bx	lr
 800e032:	bf00      	nop
 800e034:	200010bc 	.word	0x200010bc

0800e038 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e038:	b480      	push	{r7}
 800e03a:	b083      	sub	sp, #12
 800e03c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e03e:	2300      	movs	r3, #0
 800e040:	607b      	str	r3, [r7, #4]
 800e042:	e002      	b.n	800e04a <enq_lock+0x12>
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	3301      	adds	r3, #1
 800e048:	607b      	str	r3, [r7, #4]
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2b01      	cmp	r3, #1
 800e04e:	d806      	bhi.n	800e05e <enq_lock+0x26>
 800e050:	4a09      	ldr	r2, [pc, #36]	; (800e078 <enq_lock+0x40>)
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	011b      	lsls	r3, r3, #4
 800e056:	4413      	add	r3, r2
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d1f2      	bne.n	800e044 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2b02      	cmp	r3, #2
 800e062:	bf14      	ite	ne
 800e064:	2301      	movne	r3, #1
 800e066:	2300      	moveq	r3, #0
 800e068:	b2db      	uxtb	r3, r3
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	370c      	adds	r7, #12
 800e06e:	46bd      	mov	sp, r7
 800e070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e074:	4770      	bx	lr
 800e076:	bf00      	nop
 800e078:	200010bc 	.word	0x200010bc

0800e07c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e07c:	b480      	push	{r7}
 800e07e:	b085      	sub	sp, #20
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
 800e084:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e086:	2300      	movs	r3, #0
 800e088:	60fb      	str	r3, [r7, #12]
 800e08a:	e01f      	b.n	800e0cc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e08c:	4a41      	ldr	r2, [pc, #260]	; (800e194 <inc_lock+0x118>)
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	011b      	lsls	r3, r3, #4
 800e092:	4413      	add	r3, r2
 800e094:	681a      	ldr	r2, [r3, #0]
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	429a      	cmp	r2, r3
 800e09c:	d113      	bne.n	800e0c6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e09e:	4a3d      	ldr	r2, [pc, #244]	; (800e194 <inc_lock+0x118>)
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	011b      	lsls	r3, r3, #4
 800e0a4:	4413      	add	r3, r2
 800e0a6:	3304      	adds	r3, #4
 800e0a8:	681a      	ldr	r2, [r3, #0]
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	d109      	bne.n	800e0c6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e0b2:	4a38      	ldr	r2, [pc, #224]	; (800e194 <inc_lock+0x118>)
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	011b      	lsls	r3, r3, #4
 800e0b8:	4413      	add	r3, r2
 800e0ba:	3308      	adds	r3, #8
 800e0bc:	681a      	ldr	r2, [r3, #0]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	d006      	beq.n	800e0d4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	3301      	adds	r3, #1
 800e0ca:	60fb      	str	r3, [r7, #12]
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	2b01      	cmp	r3, #1
 800e0d0:	d9dc      	bls.n	800e08c <inc_lock+0x10>
 800e0d2:	e000      	b.n	800e0d6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e0d4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	2b02      	cmp	r3, #2
 800e0da:	d132      	bne.n	800e142 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e0dc:	2300      	movs	r3, #0
 800e0de:	60fb      	str	r3, [r7, #12]
 800e0e0:	e002      	b.n	800e0e8 <inc_lock+0x6c>
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	3301      	adds	r3, #1
 800e0e6:	60fb      	str	r3, [r7, #12]
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	2b01      	cmp	r3, #1
 800e0ec:	d806      	bhi.n	800e0fc <inc_lock+0x80>
 800e0ee:	4a29      	ldr	r2, [pc, #164]	; (800e194 <inc_lock+0x118>)
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	011b      	lsls	r3, r3, #4
 800e0f4:	4413      	add	r3, r2
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d1f2      	bne.n	800e0e2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	2b02      	cmp	r3, #2
 800e100:	d101      	bne.n	800e106 <inc_lock+0x8a>
 800e102:	2300      	movs	r3, #0
 800e104:	e040      	b.n	800e188 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681a      	ldr	r2, [r3, #0]
 800e10a:	4922      	ldr	r1, [pc, #136]	; (800e194 <inc_lock+0x118>)
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	011b      	lsls	r3, r3, #4
 800e110:	440b      	add	r3, r1
 800e112:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	689a      	ldr	r2, [r3, #8]
 800e118:	491e      	ldr	r1, [pc, #120]	; (800e194 <inc_lock+0x118>)
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	011b      	lsls	r3, r3, #4
 800e11e:	440b      	add	r3, r1
 800e120:	3304      	adds	r3, #4
 800e122:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	695a      	ldr	r2, [r3, #20]
 800e128:	491a      	ldr	r1, [pc, #104]	; (800e194 <inc_lock+0x118>)
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	011b      	lsls	r3, r3, #4
 800e12e:	440b      	add	r3, r1
 800e130:	3308      	adds	r3, #8
 800e132:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e134:	4a17      	ldr	r2, [pc, #92]	; (800e194 <inc_lock+0x118>)
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	011b      	lsls	r3, r3, #4
 800e13a:	4413      	add	r3, r2
 800e13c:	330c      	adds	r3, #12
 800e13e:	2200      	movs	r2, #0
 800e140:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d009      	beq.n	800e15c <inc_lock+0xe0>
 800e148:	4a12      	ldr	r2, [pc, #72]	; (800e194 <inc_lock+0x118>)
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	011b      	lsls	r3, r3, #4
 800e14e:	4413      	add	r3, r2
 800e150:	330c      	adds	r3, #12
 800e152:	881b      	ldrh	r3, [r3, #0]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d001      	beq.n	800e15c <inc_lock+0xe0>
 800e158:	2300      	movs	r3, #0
 800e15a:	e015      	b.n	800e188 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d108      	bne.n	800e174 <inc_lock+0xf8>
 800e162:	4a0c      	ldr	r2, [pc, #48]	; (800e194 <inc_lock+0x118>)
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	011b      	lsls	r3, r3, #4
 800e168:	4413      	add	r3, r2
 800e16a:	330c      	adds	r3, #12
 800e16c:	881b      	ldrh	r3, [r3, #0]
 800e16e:	3301      	adds	r3, #1
 800e170:	b29a      	uxth	r2, r3
 800e172:	e001      	b.n	800e178 <inc_lock+0xfc>
 800e174:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e178:	4906      	ldr	r1, [pc, #24]	; (800e194 <inc_lock+0x118>)
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	011b      	lsls	r3, r3, #4
 800e17e:	440b      	add	r3, r1
 800e180:	330c      	adds	r3, #12
 800e182:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	3301      	adds	r3, #1
}
 800e188:	4618      	mov	r0, r3
 800e18a:	3714      	adds	r7, #20
 800e18c:	46bd      	mov	sp, r7
 800e18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e192:	4770      	bx	lr
 800e194:	200010bc 	.word	0x200010bc

0800e198 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e198:	b480      	push	{r7}
 800e19a:	b085      	sub	sp, #20
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	3b01      	subs	r3, #1
 800e1a4:	607b      	str	r3, [r7, #4]
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2b01      	cmp	r3, #1
 800e1aa:	d825      	bhi.n	800e1f8 <dec_lock+0x60>
		n = Files[i].ctr;
 800e1ac:	4a17      	ldr	r2, [pc, #92]	; (800e20c <dec_lock+0x74>)
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	011b      	lsls	r3, r3, #4
 800e1b2:	4413      	add	r3, r2
 800e1b4:	330c      	adds	r3, #12
 800e1b6:	881b      	ldrh	r3, [r3, #0]
 800e1b8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e1ba:	89fb      	ldrh	r3, [r7, #14]
 800e1bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e1c0:	d101      	bne.n	800e1c6 <dec_lock+0x2e>
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e1c6:	89fb      	ldrh	r3, [r7, #14]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d002      	beq.n	800e1d2 <dec_lock+0x3a>
 800e1cc:	89fb      	ldrh	r3, [r7, #14]
 800e1ce:	3b01      	subs	r3, #1
 800e1d0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e1d2:	4a0e      	ldr	r2, [pc, #56]	; (800e20c <dec_lock+0x74>)
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	011b      	lsls	r3, r3, #4
 800e1d8:	4413      	add	r3, r2
 800e1da:	330c      	adds	r3, #12
 800e1dc:	89fa      	ldrh	r2, [r7, #14]
 800e1de:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e1e0:	89fb      	ldrh	r3, [r7, #14]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d105      	bne.n	800e1f2 <dec_lock+0x5a>
 800e1e6:	4a09      	ldr	r2, [pc, #36]	; (800e20c <dec_lock+0x74>)
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	011b      	lsls	r3, r3, #4
 800e1ec:	4413      	add	r3, r2
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	737b      	strb	r3, [r7, #13]
 800e1f6:	e001      	b.n	800e1fc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e1f8:	2302      	movs	r3, #2
 800e1fa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e1fc:	7b7b      	ldrb	r3, [r7, #13]
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	3714      	adds	r7, #20
 800e202:	46bd      	mov	sp, r7
 800e204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e208:	4770      	bx	lr
 800e20a:	bf00      	nop
 800e20c:	200010bc 	.word	0x200010bc

0800e210 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e210:	b480      	push	{r7}
 800e212:	b085      	sub	sp, #20
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e218:	2300      	movs	r3, #0
 800e21a:	60fb      	str	r3, [r7, #12]
 800e21c:	e010      	b.n	800e240 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e21e:	4a0d      	ldr	r2, [pc, #52]	; (800e254 <clear_lock+0x44>)
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	011b      	lsls	r3, r3, #4
 800e224:	4413      	add	r3, r2
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	687a      	ldr	r2, [r7, #4]
 800e22a:	429a      	cmp	r2, r3
 800e22c:	d105      	bne.n	800e23a <clear_lock+0x2a>
 800e22e:	4a09      	ldr	r2, [pc, #36]	; (800e254 <clear_lock+0x44>)
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	011b      	lsls	r3, r3, #4
 800e234:	4413      	add	r3, r2
 800e236:	2200      	movs	r2, #0
 800e238:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	3301      	adds	r3, #1
 800e23e:	60fb      	str	r3, [r7, #12]
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2b01      	cmp	r3, #1
 800e244:	d9eb      	bls.n	800e21e <clear_lock+0xe>
	}
}
 800e246:	bf00      	nop
 800e248:	bf00      	nop
 800e24a:	3714      	adds	r7, #20
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr
 800e254:	200010bc 	.word	0x200010bc

0800e258 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b086      	sub	sp, #24
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e260:	2300      	movs	r3, #0
 800e262:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	78db      	ldrb	r3, [r3, #3]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d034      	beq.n	800e2d6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e270:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	7858      	ldrb	r0, [r3, #1]
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e27c:	2301      	movs	r3, #1
 800e27e:	697a      	ldr	r2, [r7, #20]
 800e280:	f7ff fd0e 	bl	800dca0 <disk_write>
 800e284:	4603      	mov	r3, r0
 800e286:	2b00      	cmp	r3, #0
 800e288:	d002      	beq.n	800e290 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e28a:	2301      	movs	r3, #1
 800e28c:	73fb      	strb	r3, [r7, #15]
 800e28e:	e022      	b.n	800e2d6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2200      	movs	r2, #0
 800e294:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e29a:	697a      	ldr	r2, [r7, #20]
 800e29c:	1ad2      	subs	r2, r2, r3
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6a1b      	ldr	r3, [r3, #32]
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	d217      	bcs.n	800e2d6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	789b      	ldrb	r3, [r3, #2]
 800e2aa:	613b      	str	r3, [r7, #16]
 800e2ac:	e010      	b.n	800e2d0 <sync_window+0x78>
					wsect += fs->fsize;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6a1b      	ldr	r3, [r3, #32]
 800e2b2:	697a      	ldr	r2, [r7, #20]
 800e2b4:	4413      	add	r3, r2
 800e2b6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	7858      	ldrb	r0, [r3, #1]
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	697a      	ldr	r2, [r7, #20]
 800e2c6:	f7ff fceb 	bl	800dca0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e2ca:	693b      	ldr	r3, [r7, #16]
 800e2cc:	3b01      	subs	r3, #1
 800e2ce:	613b      	str	r3, [r7, #16]
 800e2d0:	693b      	ldr	r3, [r7, #16]
 800e2d2:	2b01      	cmp	r3, #1
 800e2d4:	d8eb      	bhi.n	800e2ae <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e2d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	3718      	adds	r7, #24
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}

0800e2e0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b084      	sub	sp, #16
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
 800e2e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2f2:	683a      	ldr	r2, [r7, #0]
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d01b      	beq.n	800e330 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e2f8:	6878      	ldr	r0, [r7, #4]
 800e2fa:	f7ff ffad 	bl	800e258 <sync_window>
 800e2fe:	4603      	mov	r3, r0
 800e300:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e302:	7bfb      	ldrb	r3, [r7, #15]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d113      	bne.n	800e330 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	7858      	ldrb	r0, [r3, #1]
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e312:	2301      	movs	r3, #1
 800e314:	683a      	ldr	r2, [r7, #0]
 800e316:	f7ff fca3 	bl	800dc60 <disk_read>
 800e31a:	4603      	mov	r3, r0
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d004      	beq.n	800e32a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e324:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e326:	2301      	movs	r3, #1
 800e328:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	683a      	ldr	r2, [r7, #0]
 800e32e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800e330:	7bfb      	ldrb	r3, [r7, #15]
}
 800e332:	4618      	mov	r0, r3
 800e334:	3710      	adds	r7, #16
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}
	...

0800e33c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b084      	sub	sp, #16
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f7ff ff87 	bl	800e258 <sync_window>
 800e34a:	4603      	mov	r3, r0
 800e34c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e34e:	7bfb      	ldrb	r3, [r7, #15]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d159      	bne.n	800e408 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	781b      	ldrb	r3, [r3, #0]
 800e358:	2b03      	cmp	r3, #3
 800e35a:	d149      	bne.n	800e3f0 <sync_fs+0xb4>
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	791b      	ldrb	r3, [r3, #4]
 800e360:	2b01      	cmp	r3, #1
 800e362:	d145      	bne.n	800e3f0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	899b      	ldrh	r3, [r3, #12]
 800e36e:	461a      	mov	r2, r3
 800e370:	2100      	movs	r1, #0
 800e372:	f7ff fd76 	bl	800de62 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	3338      	adds	r3, #56	; 0x38
 800e37a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e37e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e382:	4618      	mov	r0, r3
 800e384:	f7ff fd05 	bl	800dd92 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	3338      	adds	r3, #56	; 0x38
 800e38c:	4921      	ldr	r1, [pc, #132]	; (800e414 <sync_fs+0xd8>)
 800e38e:	4618      	mov	r0, r3
 800e390:	f7ff fd1a 	bl	800ddc8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	3338      	adds	r3, #56	; 0x38
 800e398:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e39c:	491e      	ldr	r1, [pc, #120]	; (800e418 <sync_fs+0xdc>)
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f7ff fd12 	bl	800ddc8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	3338      	adds	r3, #56	; 0x38
 800e3a8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	699b      	ldr	r3, [r3, #24]
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	4610      	mov	r0, r2
 800e3b4:	f7ff fd08 	bl	800ddc8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	3338      	adds	r3, #56	; 0x38
 800e3bc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	695b      	ldr	r3, [r3, #20]
 800e3c4:	4619      	mov	r1, r3
 800e3c6:	4610      	mov	r0, r2
 800e3c8:	f7ff fcfe 	bl	800ddc8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3d0:	1c5a      	adds	r2, r3, #1
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	7858      	ldrb	r0, [r3, #1]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	f7ff fc5b 	bl	800dca0 <disk_write>
			fs->fsi_flag = 0;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	785b      	ldrb	r3, [r3, #1]
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	2100      	movs	r1, #0
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f7ff fc71 	bl	800dce0 <disk_ioctl>
 800e3fe:	4603      	mov	r3, r0
 800e400:	2b00      	cmp	r3, #0
 800e402:	d001      	beq.n	800e408 <sync_fs+0xcc>
 800e404:	2301      	movs	r3, #1
 800e406:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e408:	7bfb      	ldrb	r3, [r7, #15]
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3710      	adds	r7, #16
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop
 800e414:	41615252 	.word	0x41615252
 800e418:	61417272 	.word	0x61417272

0800e41c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e41c:	b480      	push	{r7}
 800e41e:	b083      	sub	sp, #12
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
 800e424:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	3b02      	subs	r3, #2
 800e42a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	69db      	ldr	r3, [r3, #28]
 800e430:	3b02      	subs	r3, #2
 800e432:	683a      	ldr	r2, [r7, #0]
 800e434:	429a      	cmp	r2, r3
 800e436:	d301      	bcc.n	800e43c <clust2sect+0x20>
 800e438:	2300      	movs	r3, #0
 800e43a:	e008      	b.n	800e44e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	895b      	ldrh	r3, [r3, #10]
 800e440:	461a      	mov	r2, r3
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	fb03 f202 	mul.w	r2, r3, r2
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e44c:	4413      	add	r3, r2
}
 800e44e:	4618      	mov	r0, r3
 800e450:	370c      	adds	r7, #12
 800e452:	46bd      	mov	sp, r7
 800e454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e458:	4770      	bx	lr

0800e45a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e45a:	b580      	push	{r7, lr}
 800e45c:	b086      	sub	sp, #24
 800e45e:	af00      	add	r7, sp, #0
 800e460:	6078      	str	r0, [r7, #4]
 800e462:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	2b01      	cmp	r3, #1
 800e46e:	d904      	bls.n	800e47a <get_fat+0x20>
 800e470:	693b      	ldr	r3, [r7, #16]
 800e472:	69db      	ldr	r3, [r3, #28]
 800e474:	683a      	ldr	r2, [r7, #0]
 800e476:	429a      	cmp	r2, r3
 800e478:	d302      	bcc.n	800e480 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e47a:	2301      	movs	r3, #1
 800e47c:	617b      	str	r3, [r7, #20]
 800e47e:	e0bb      	b.n	800e5f8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e480:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e484:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e486:	693b      	ldr	r3, [r7, #16]
 800e488:	781b      	ldrb	r3, [r3, #0]
 800e48a:	2b03      	cmp	r3, #3
 800e48c:	f000 8083 	beq.w	800e596 <get_fat+0x13c>
 800e490:	2b03      	cmp	r3, #3
 800e492:	f300 80a7 	bgt.w	800e5e4 <get_fat+0x18a>
 800e496:	2b01      	cmp	r3, #1
 800e498:	d002      	beq.n	800e4a0 <get_fat+0x46>
 800e49a:	2b02      	cmp	r3, #2
 800e49c:	d056      	beq.n	800e54c <get_fat+0xf2>
 800e49e:	e0a1      	b.n	800e5e4 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	60fb      	str	r3, [r7, #12]
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	085b      	lsrs	r3, r3, #1
 800e4a8:	68fa      	ldr	r2, [r7, #12]
 800e4aa:	4413      	add	r3, r2
 800e4ac:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e4ae:	693b      	ldr	r3, [r7, #16]
 800e4b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e4b2:	693b      	ldr	r3, [r7, #16]
 800e4b4:	899b      	ldrh	r3, [r3, #12]
 800e4b6:	4619      	mov	r1, r3
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	fbb3 f3f1 	udiv	r3, r3, r1
 800e4be:	4413      	add	r3, r2
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	6938      	ldr	r0, [r7, #16]
 800e4c4:	f7ff ff0c 	bl	800e2e0 <move_window>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	f040 808d 	bne.w	800e5ea <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	1c5a      	adds	r2, r3, #1
 800e4d4:	60fa      	str	r2, [r7, #12]
 800e4d6:	693a      	ldr	r2, [r7, #16]
 800e4d8:	8992      	ldrh	r2, [r2, #12]
 800e4da:	fbb3 f1f2 	udiv	r1, r3, r2
 800e4de:	fb02 f201 	mul.w	r2, r2, r1
 800e4e2:	1a9b      	subs	r3, r3, r2
 800e4e4:	693a      	ldr	r2, [r7, #16]
 800e4e6:	4413      	add	r3, r2
 800e4e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e4ec:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e4ee:	693b      	ldr	r3, [r7, #16]
 800e4f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e4f2:	693b      	ldr	r3, [r7, #16]
 800e4f4:	899b      	ldrh	r3, [r3, #12]
 800e4f6:	4619      	mov	r1, r3
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	fbb3 f3f1 	udiv	r3, r3, r1
 800e4fe:	4413      	add	r3, r2
 800e500:	4619      	mov	r1, r3
 800e502:	6938      	ldr	r0, [r7, #16]
 800e504:	f7ff feec 	bl	800e2e0 <move_window>
 800e508:	4603      	mov	r3, r0
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d16f      	bne.n	800e5ee <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e50e:	693b      	ldr	r3, [r7, #16]
 800e510:	899b      	ldrh	r3, [r3, #12]
 800e512:	461a      	mov	r2, r3
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	fbb3 f1f2 	udiv	r1, r3, r2
 800e51a:	fb02 f201 	mul.w	r2, r2, r1
 800e51e:	1a9b      	subs	r3, r3, r2
 800e520:	693a      	ldr	r2, [r7, #16]
 800e522:	4413      	add	r3, r2
 800e524:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e528:	021b      	lsls	r3, r3, #8
 800e52a:	461a      	mov	r2, r3
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	4313      	orrs	r3, r2
 800e530:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	f003 0301 	and.w	r3, r3, #1
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d002      	beq.n	800e542 <get_fat+0xe8>
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	091b      	lsrs	r3, r3, #4
 800e540:	e002      	b.n	800e548 <get_fat+0xee>
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e548:	617b      	str	r3, [r7, #20]
			break;
 800e54a:	e055      	b.n	800e5f8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e54c:	693b      	ldr	r3, [r7, #16]
 800e54e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	899b      	ldrh	r3, [r3, #12]
 800e554:	085b      	lsrs	r3, r3, #1
 800e556:	b29b      	uxth	r3, r3
 800e558:	4619      	mov	r1, r3
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	fbb3 f3f1 	udiv	r3, r3, r1
 800e560:	4413      	add	r3, r2
 800e562:	4619      	mov	r1, r3
 800e564:	6938      	ldr	r0, [r7, #16]
 800e566:	f7ff febb 	bl	800e2e0 <move_window>
 800e56a:	4603      	mov	r3, r0
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d140      	bne.n	800e5f2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e570:	693b      	ldr	r3, [r7, #16]
 800e572:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	005b      	lsls	r3, r3, #1
 800e57a:	693a      	ldr	r2, [r7, #16]
 800e57c:	8992      	ldrh	r2, [r2, #12]
 800e57e:	fbb3 f0f2 	udiv	r0, r3, r2
 800e582:	fb02 f200 	mul.w	r2, r2, r0
 800e586:	1a9b      	subs	r3, r3, r2
 800e588:	440b      	add	r3, r1
 800e58a:	4618      	mov	r0, r3
 800e58c:	f7ff fbc6 	bl	800dd1c <ld_word>
 800e590:	4603      	mov	r3, r0
 800e592:	617b      	str	r3, [r7, #20]
			break;
 800e594:	e030      	b.n	800e5f8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e59a:	693b      	ldr	r3, [r7, #16]
 800e59c:	899b      	ldrh	r3, [r3, #12]
 800e59e:	089b      	lsrs	r3, r3, #2
 800e5a0:	b29b      	uxth	r3, r3
 800e5a2:	4619      	mov	r1, r3
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	fbb3 f3f1 	udiv	r3, r3, r1
 800e5aa:	4413      	add	r3, r2
 800e5ac:	4619      	mov	r1, r3
 800e5ae:	6938      	ldr	r0, [r7, #16]
 800e5b0:	f7ff fe96 	bl	800e2e0 <move_window>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d11d      	bne.n	800e5f6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e5ba:	693b      	ldr	r3, [r7, #16]
 800e5bc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	009b      	lsls	r3, r3, #2
 800e5c4:	693a      	ldr	r2, [r7, #16]
 800e5c6:	8992      	ldrh	r2, [r2, #12]
 800e5c8:	fbb3 f0f2 	udiv	r0, r3, r2
 800e5cc:	fb02 f200 	mul.w	r2, r2, r0
 800e5d0:	1a9b      	subs	r3, r3, r2
 800e5d2:	440b      	add	r3, r1
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f7ff fbb9 	bl	800dd4c <ld_dword>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e5e0:	617b      	str	r3, [r7, #20]
			break;
 800e5e2:	e009      	b.n	800e5f8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	617b      	str	r3, [r7, #20]
 800e5e8:	e006      	b.n	800e5f8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e5ea:	bf00      	nop
 800e5ec:	e004      	b.n	800e5f8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e5ee:	bf00      	nop
 800e5f0:	e002      	b.n	800e5f8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e5f2:	bf00      	nop
 800e5f4:	e000      	b.n	800e5f8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e5f6:	bf00      	nop
		}
	}

	return val;
 800e5f8:	697b      	ldr	r3, [r7, #20]
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3718      	adds	r7, #24
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}

0800e602 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e602:	b590      	push	{r4, r7, lr}
 800e604:	b089      	sub	sp, #36	; 0x24
 800e606:	af00      	add	r7, sp, #0
 800e608:	60f8      	str	r0, [r7, #12]
 800e60a:	60b9      	str	r1, [r7, #8]
 800e60c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e60e:	2302      	movs	r3, #2
 800e610:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	2b01      	cmp	r3, #1
 800e616:	f240 8102 	bls.w	800e81e <put_fat+0x21c>
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	69db      	ldr	r3, [r3, #28]
 800e61e:	68ba      	ldr	r2, [r7, #8]
 800e620:	429a      	cmp	r2, r3
 800e622:	f080 80fc 	bcs.w	800e81e <put_fat+0x21c>
		switch (fs->fs_type) {
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	781b      	ldrb	r3, [r3, #0]
 800e62a:	2b03      	cmp	r3, #3
 800e62c:	f000 80b6 	beq.w	800e79c <put_fat+0x19a>
 800e630:	2b03      	cmp	r3, #3
 800e632:	f300 80fd 	bgt.w	800e830 <put_fat+0x22e>
 800e636:	2b01      	cmp	r3, #1
 800e638:	d003      	beq.n	800e642 <put_fat+0x40>
 800e63a:	2b02      	cmp	r3, #2
 800e63c:	f000 8083 	beq.w	800e746 <put_fat+0x144>
 800e640:	e0f6      	b.n	800e830 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e642:	68bb      	ldr	r3, [r7, #8]
 800e644:	61bb      	str	r3, [r7, #24]
 800e646:	69bb      	ldr	r3, [r7, #24]
 800e648:	085b      	lsrs	r3, r3, #1
 800e64a:	69ba      	ldr	r2, [r7, #24]
 800e64c:	4413      	add	r3, r2
 800e64e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	899b      	ldrh	r3, [r3, #12]
 800e658:	4619      	mov	r1, r3
 800e65a:	69bb      	ldr	r3, [r7, #24]
 800e65c:	fbb3 f3f1 	udiv	r3, r3, r1
 800e660:	4413      	add	r3, r2
 800e662:	4619      	mov	r1, r3
 800e664:	68f8      	ldr	r0, [r7, #12]
 800e666:	f7ff fe3b 	bl	800e2e0 <move_window>
 800e66a:	4603      	mov	r3, r0
 800e66c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e66e:	7ffb      	ldrb	r3, [r7, #31]
 800e670:	2b00      	cmp	r3, #0
 800e672:	f040 80d6 	bne.w	800e822 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e67c:	69bb      	ldr	r3, [r7, #24]
 800e67e:	1c5a      	adds	r2, r3, #1
 800e680:	61ba      	str	r2, [r7, #24]
 800e682:	68fa      	ldr	r2, [r7, #12]
 800e684:	8992      	ldrh	r2, [r2, #12]
 800e686:	fbb3 f0f2 	udiv	r0, r3, r2
 800e68a:	fb02 f200 	mul.w	r2, r2, r0
 800e68e:	1a9b      	subs	r3, r3, r2
 800e690:	440b      	add	r3, r1
 800e692:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	f003 0301 	and.w	r3, r3, #1
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d00d      	beq.n	800e6ba <put_fat+0xb8>
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	781b      	ldrb	r3, [r3, #0]
 800e6a2:	b25b      	sxtb	r3, r3
 800e6a4:	f003 030f 	and.w	r3, r3, #15
 800e6a8:	b25a      	sxtb	r2, r3
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	b2db      	uxtb	r3, r3
 800e6ae:	011b      	lsls	r3, r3, #4
 800e6b0:	b25b      	sxtb	r3, r3
 800e6b2:	4313      	orrs	r3, r2
 800e6b4:	b25b      	sxtb	r3, r3
 800e6b6:	b2db      	uxtb	r3, r3
 800e6b8:	e001      	b.n	800e6be <put_fat+0xbc>
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	b2db      	uxtb	r3, r3
 800e6be:	697a      	ldr	r2, [r7, #20]
 800e6c0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	2201      	movs	r2, #1
 800e6c6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	899b      	ldrh	r3, [r3, #12]
 800e6d0:	4619      	mov	r1, r3
 800e6d2:	69bb      	ldr	r3, [r7, #24]
 800e6d4:	fbb3 f3f1 	udiv	r3, r3, r1
 800e6d8:	4413      	add	r3, r2
 800e6da:	4619      	mov	r1, r3
 800e6dc:	68f8      	ldr	r0, [r7, #12]
 800e6de:	f7ff fdff 	bl	800e2e0 <move_window>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e6e6:	7ffb      	ldrb	r3, [r7, #31]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	f040 809c 	bne.w	800e826 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	899b      	ldrh	r3, [r3, #12]
 800e6f8:	461a      	mov	r2, r3
 800e6fa:	69bb      	ldr	r3, [r7, #24]
 800e6fc:	fbb3 f0f2 	udiv	r0, r3, r2
 800e700:	fb02 f200 	mul.w	r2, r2, r0
 800e704:	1a9b      	subs	r3, r3, r2
 800e706:	440b      	add	r3, r1
 800e708:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	f003 0301 	and.w	r3, r3, #1
 800e710:	2b00      	cmp	r3, #0
 800e712:	d003      	beq.n	800e71c <put_fat+0x11a>
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	091b      	lsrs	r3, r3, #4
 800e718:	b2db      	uxtb	r3, r3
 800e71a:	e00e      	b.n	800e73a <put_fat+0x138>
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	781b      	ldrb	r3, [r3, #0]
 800e720:	b25b      	sxtb	r3, r3
 800e722:	f023 030f 	bic.w	r3, r3, #15
 800e726:	b25a      	sxtb	r2, r3
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	0a1b      	lsrs	r3, r3, #8
 800e72c:	b25b      	sxtb	r3, r3
 800e72e:	f003 030f 	and.w	r3, r3, #15
 800e732:	b25b      	sxtb	r3, r3
 800e734:	4313      	orrs	r3, r2
 800e736:	b25b      	sxtb	r3, r3
 800e738:	b2db      	uxtb	r3, r3
 800e73a:	697a      	ldr	r2, [r7, #20]
 800e73c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	2201      	movs	r2, #1
 800e742:	70da      	strb	r2, [r3, #3]
			break;
 800e744:	e074      	b.n	800e830 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	899b      	ldrh	r3, [r3, #12]
 800e74e:	085b      	lsrs	r3, r3, #1
 800e750:	b29b      	uxth	r3, r3
 800e752:	4619      	mov	r1, r3
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	fbb3 f3f1 	udiv	r3, r3, r1
 800e75a:	4413      	add	r3, r2
 800e75c:	4619      	mov	r1, r3
 800e75e:	68f8      	ldr	r0, [r7, #12]
 800e760:	f7ff fdbe 	bl	800e2e0 <move_window>
 800e764:	4603      	mov	r3, r0
 800e766:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e768:	7ffb      	ldrb	r3, [r7, #31]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d15d      	bne.n	800e82a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e774:	68bb      	ldr	r3, [r7, #8]
 800e776:	005b      	lsls	r3, r3, #1
 800e778:	68fa      	ldr	r2, [r7, #12]
 800e77a:	8992      	ldrh	r2, [r2, #12]
 800e77c:	fbb3 f0f2 	udiv	r0, r3, r2
 800e780:	fb02 f200 	mul.w	r2, r2, r0
 800e784:	1a9b      	subs	r3, r3, r2
 800e786:	440b      	add	r3, r1
 800e788:	687a      	ldr	r2, [r7, #4]
 800e78a:	b292      	uxth	r2, r2
 800e78c:	4611      	mov	r1, r2
 800e78e:	4618      	mov	r0, r3
 800e790:	f7ff faff 	bl	800dd92 <st_word>
			fs->wflag = 1;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	2201      	movs	r2, #1
 800e798:	70da      	strb	r2, [r3, #3]
			break;
 800e79a:	e049      	b.n	800e830 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	899b      	ldrh	r3, [r3, #12]
 800e7a4:	089b      	lsrs	r3, r3, #2
 800e7a6:	b29b      	uxth	r3, r3
 800e7a8:	4619      	mov	r1, r3
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	fbb3 f3f1 	udiv	r3, r3, r1
 800e7b0:	4413      	add	r3, r2
 800e7b2:	4619      	mov	r1, r3
 800e7b4:	68f8      	ldr	r0, [r7, #12]
 800e7b6:	f7ff fd93 	bl	800e2e0 <move_window>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e7be:	7ffb      	ldrb	r3, [r7, #31]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d134      	bne.n	800e82e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	009b      	lsls	r3, r3, #2
 800e7d4:	68fa      	ldr	r2, [r7, #12]
 800e7d6:	8992      	ldrh	r2, [r2, #12]
 800e7d8:	fbb3 f0f2 	udiv	r0, r3, r2
 800e7dc:	fb02 f200 	mul.w	r2, r2, r0
 800e7e0:	1a9b      	subs	r3, r3, r2
 800e7e2:	440b      	add	r3, r1
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f7ff fab1 	bl	800dd4c <ld_dword>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e7f0:	4323      	orrs	r3, r4
 800e7f2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e7fa:	68bb      	ldr	r3, [r7, #8]
 800e7fc:	009b      	lsls	r3, r3, #2
 800e7fe:	68fa      	ldr	r2, [r7, #12]
 800e800:	8992      	ldrh	r2, [r2, #12]
 800e802:	fbb3 f0f2 	udiv	r0, r3, r2
 800e806:	fb02 f200 	mul.w	r2, r2, r0
 800e80a:	1a9b      	subs	r3, r3, r2
 800e80c:	440b      	add	r3, r1
 800e80e:	6879      	ldr	r1, [r7, #4]
 800e810:	4618      	mov	r0, r3
 800e812:	f7ff fad9 	bl	800ddc8 <st_dword>
			fs->wflag = 1;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	2201      	movs	r2, #1
 800e81a:	70da      	strb	r2, [r3, #3]
			break;
 800e81c:	e008      	b.n	800e830 <put_fat+0x22e>
		}
	}
 800e81e:	bf00      	nop
 800e820:	e006      	b.n	800e830 <put_fat+0x22e>
			if (res != FR_OK) break;
 800e822:	bf00      	nop
 800e824:	e004      	b.n	800e830 <put_fat+0x22e>
			if (res != FR_OK) break;
 800e826:	bf00      	nop
 800e828:	e002      	b.n	800e830 <put_fat+0x22e>
			if (res != FR_OK) break;
 800e82a:	bf00      	nop
 800e82c:	e000      	b.n	800e830 <put_fat+0x22e>
			if (res != FR_OK) break;
 800e82e:	bf00      	nop
	return res;
 800e830:	7ffb      	ldrb	r3, [r7, #31]
}
 800e832:	4618      	mov	r0, r3
 800e834:	3724      	adds	r7, #36	; 0x24
 800e836:	46bd      	mov	sp, r7
 800e838:	bd90      	pop	{r4, r7, pc}

0800e83a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e83a:	b580      	push	{r7, lr}
 800e83c:	b088      	sub	sp, #32
 800e83e:	af00      	add	r7, sp, #0
 800e840:	60f8      	str	r0, [r7, #12]
 800e842:	60b9      	str	r1, [r7, #8]
 800e844:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e846:	2300      	movs	r3, #0
 800e848:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e850:	68bb      	ldr	r3, [r7, #8]
 800e852:	2b01      	cmp	r3, #1
 800e854:	d904      	bls.n	800e860 <remove_chain+0x26>
 800e856:	69bb      	ldr	r3, [r7, #24]
 800e858:	69db      	ldr	r3, [r3, #28]
 800e85a:	68ba      	ldr	r2, [r7, #8]
 800e85c:	429a      	cmp	r2, r3
 800e85e:	d301      	bcc.n	800e864 <remove_chain+0x2a>
 800e860:	2302      	movs	r3, #2
 800e862:	e04b      	b.n	800e8fc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d00c      	beq.n	800e884 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e86a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e86e:	6879      	ldr	r1, [r7, #4]
 800e870:	69b8      	ldr	r0, [r7, #24]
 800e872:	f7ff fec6 	bl	800e602 <put_fat>
 800e876:	4603      	mov	r3, r0
 800e878:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e87a:	7ffb      	ldrb	r3, [r7, #31]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d001      	beq.n	800e884 <remove_chain+0x4a>
 800e880:	7ffb      	ldrb	r3, [r7, #31]
 800e882:	e03b      	b.n	800e8fc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e884:	68b9      	ldr	r1, [r7, #8]
 800e886:	68f8      	ldr	r0, [r7, #12]
 800e888:	f7ff fde7 	bl	800e45a <get_fat>
 800e88c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d031      	beq.n	800e8f8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e894:	697b      	ldr	r3, [r7, #20]
 800e896:	2b01      	cmp	r3, #1
 800e898:	d101      	bne.n	800e89e <remove_chain+0x64>
 800e89a:	2302      	movs	r3, #2
 800e89c:	e02e      	b.n	800e8fc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e89e:	697b      	ldr	r3, [r7, #20]
 800e8a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e8a4:	d101      	bne.n	800e8aa <remove_chain+0x70>
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	e028      	b.n	800e8fc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	68b9      	ldr	r1, [r7, #8]
 800e8ae:	69b8      	ldr	r0, [r7, #24]
 800e8b0:	f7ff fea7 	bl	800e602 <put_fat>
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e8b8:	7ffb      	ldrb	r3, [r7, #31]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d001      	beq.n	800e8c2 <remove_chain+0x88>
 800e8be:	7ffb      	ldrb	r3, [r7, #31]
 800e8c0:	e01c      	b.n	800e8fc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e8c2:	69bb      	ldr	r3, [r7, #24]
 800e8c4:	699a      	ldr	r2, [r3, #24]
 800e8c6:	69bb      	ldr	r3, [r7, #24]
 800e8c8:	69db      	ldr	r3, [r3, #28]
 800e8ca:	3b02      	subs	r3, #2
 800e8cc:	429a      	cmp	r2, r3
 800e8ce:	d20b      	bcs.n	800e8e8 <remove_chain+0xae>
			fs->free_clst++;
 800e8d0:	69bb      	ldr	r3, [r7, #24]
 800e8d2:	699b      	ldr	r3, [r3, #24]
 800e8d4:	1c5a      	adds	r2, r3, #1
 800e8d6:	69bb      	ldr	r3, [r7, #24]
 800e8d8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800e8da:	69bb      	ldr	r3, [r7, #24]
 800e8dc:	791b      	ldrb	r3, [r3, #4]
 800e8de:	f043 0301 	orr.w	r3, r3, #1
 800e8e2:	b2da      	uxtb	r2, r3
 800e8e4:	69bb      	ldr	r3, [r7, #24]
 800e8e6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e8e8:	697b      	ldr	r3, [r7, #20]
 800e8ea:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e8ec:	69bb      	ldr	r3, [r7, #24]
 800e8ee:	69db      	ldr	r3, [r3, #28]
 800e8f0:	68ba      	ldr	r2, [r7, #8]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d3c6      	bcc.n	800e884 <remove_chain+0x4a>
 800e8f6:	e000      	b.n	800e8fa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e8f8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e8fa:	2300      	movs	r3, #0
}
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	3720      	adds	r7, #32
 800e900:	46bd      	mov	sp, r7
 800e902:	bd80      	pop	{r7, pc}

0800e904 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b088      	sub	sp, #32
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
 800e90c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d10d      	bne.n	800e936 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	695b      	ldr	r3, [r3, #20]
 800e91e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e920:	69bb      	ldr	r3, [r7, #24]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d004      	beq.n	800e930 <create_chain+0x2c>
 800e926:	693b      	ldr	r3, [r7, #16]
 800e928:	69db      	ldr	r3, [r3, #28]
 800e92a:	69ba      	ldr	r2, [r7, #24]
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d31b      	bcc.n	800e968 <create_chain+0x64>
 800e930:	2301      	movs	r3, #1
 800e932:	61bb      	str	r3, [r7, #24]
 800e934:	e018      	b.n	800e968 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e936:	6839      	ldr	r1, [r7, #0]
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f7ff fd8e 	bl	800e45a <get_fat>
 800e93e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	2b01      	cmp	r3, #1
 800e944:	d801      	bhi.n	800e94a <create_chain+0x46>
 800e946:	2301      	movs	r3, #1
 800e948:	e070      	b.n	800ea2c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e950:	d101      	bne.n	800e956 <create_chain+0x52>
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	e06a      	b.n	800ea2c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e956:	693b      	ldr	r3, [r7, #16]
 800e958:	69db      	ldr	r3, [r3, #28]
 800e95a:	68fa      	ldr	r2, [r7, #12]
 800e95c:	429a      	cmp	r2, r3
 800e95e:	d201      	bcs.n	800e964 <create_chain+0x60>
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	e063      	b.n	800ea2c <create_chain+0x128>
		scl = clst;
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e968:	69bb      	ldr	r3, [r7, #24]
 800e96a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e96c:	69fb      	ldr	r3, [r7, #28]
 800e96e:	3301      	adds	r3, #1
 800e970:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e972:	693b      	ldr	r3, [r7, #16]
 800e974:	69db      	ldr	r3, [r3, #28]
 800e976:	69fa      	ldr	r2, [r7, #28]
 800e978:	429a      	cmp	r2, r3
 800e97a:	d307      	bcc.n	800e98c <create_chain+0x88>
				ncl = 2;
 800e97c:	2302      	movs	r3, #2
 800e97e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e980:	69fa      	ldr	r2, [r7, #28]
 800e982:	69bb      	ldr	r3, [r7, #24]
 800e984:	429a      	cmp	r2, r3
 800e986:	d901      	bls.n	800e98c <create_chain+0x88>
 800e988:	2300      	movs	r3, #0
 800e98a:	e04f      	b.n	800ea2c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e98c:	69f9      	ldr	r1, [r7, #28]
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f7ff fd63 	bl	800e45a <get_fat>
 800e994:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d00e      	beq.n	800e9ba <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	2b01      	cmp	r3, #1
 800e9a0:	d003      	beq.n	800e9aa <create_chain+0xa6>
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e9a8:	d101      	bne.n	800e9ae <create_chain+0xaa>
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	e03e      	b.n	800ea2c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e9ae:	69fa      	ldr	r2, [r7, #28]
 800e9b0:	69bb      	ldr	r3, [r7, #24]
 800e9b2:	429a      	cmp	r2, r3
 800e9b4:	d1da      	bne.n	800e96c <create_chain+0x68>
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	e038      	b.n	800ea2c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e9ba:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e9bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e9c0:	69f9      	ldr	r1, [r7, #28]
 800e9c2:	6938      	ldr	r0, [r7, #16]
 800e9c4:	f7ff fe1d 	bl	800e602 <put_fat>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e9cc:	7dfb      	ldrb	r3, [r7, #23]
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d109      	bne.n	800e9e6 <create_chain+0xe2>
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d006      	beq.n	800e9e6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e9d8:	69fa      	ldr	r2, [r7, #28]
 800e9da:	6839      	ldr	r1, [r7, #0]
 800e9dc:	6938      	ldr	r0, [r7, #16]
 800e9de:	f7ff fe10 	bl	800e602 <put_fat>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e9e6:	7dfb      	ldrb	r3, [r7, #23]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d116      	bne.n	800ea1a <create_chain+0x116>
		fs->last_clst = ncl;
 800e9ec:	693b      	ldr	r3, [r7, #16]
 800e9ee:	69fa      	ldr	r2, [r7, #28]
 800e9f0:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e9f2:	693b      	ldr	r3, [r7, #16]
 800e9f4:	699a      	ldr	r2, [r3, #24]
 800e9f6:	693b      	ldr	r3, [r7, #16]
 800e9f8:	69db      	ldr	r3, [r3, #28]
 800e9fa:	3b02      	subs	r3, #2
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	d804      	bhi.n	800ea0a <create_chain+0x106>
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	699b      	ldr	r3, [r3, #24]
 800ea04:	1e5a      	subs	r2, r3, #1
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800ea0a:	693b      	ldr	r3, [r7, #16]
 800ea0c:	791b      	ldrb	r3, [r3, #4]
 800ea0e:	f043 0301 	orr.w	r3, r3, #1
 800ea12:	b2da      	uxtb	r2, r3
 800ea14:	693b      	ldr	r3, [r7, #16]
 800ea16:	711a      	strb	r2, [r3, #4]
 800ea18:	e007      	b.n	800ea2a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ea1a:	7dfb      	ldrb	r3, [r7, #23]
 800ea1c:	2b01      	cmp	r3, #1
 800ea1e:	d102      	bne.n	800ea26 <create_chain+0x122>
 800ea20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea24:	e000      	b.n	800ea28 <create_chain+0x124>
 800ea26:	2301      	movs	r3, #1
 800ea28:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ea2a:	69fb      	ldr	r3, [r7, #28]
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3720      	adds	r7, #32
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}

0800ea34 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ea34:	b480      	push	{r7}
 800ea36:	b087      	sub	sp, #28
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
 800ea3c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea48:	3304      	adds	r3, #4
 800ea4a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	899b      	ldrh	r3, [r3, #12]
 800ea50:	461a      	mov	r2, r3
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea58:	68fa      	ldr	r2, [r7, #12]
 800ea5a:	8952      	ldrh	r2, [r2, #10]
 800ea5c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea60:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ea62:	693b      	ldr	r3, [r7, #16]
 800ea64:	1d1a      	adds	r2, r3, #4
 800ea66:	613a      	str	r2, [r7, #16]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d101      	bne.n	800ea76 <clmt_clust+0x42>
 800ea72:	2300      	movs	r3, #0
 800ea74:	e010      	b.n	800ea98 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800ea76:	697a      	ldr	r2, [r7, #20]
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	429a      	cmp	r2, r3
 800ea7c:	d307      	bcc.n	800ea8e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800ea7e:	697a      	ldr	r2, [r7, #20]
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	1ad3      	subs	r3, r2, r3
 800ea84:	617b      	str	r3, [r7, #20]
 800ea86:	693b      	ldr	r3, [r7, #16]
 800ea88:	3304      	adds	r3, #4
 800ea8a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ea8c:	e7e9      	b.n	800ea62 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800ea8e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ea90:	693b      	ldr	r3, [r7, #16]
 800ea92:	681a      	ldr	r2, [r3, #0]
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	4413      	add	r3, r2
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	371c      	adds	r7, #28
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa2:	4770      	bx	lr

0800eaa4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b086      	sub	sp, #24
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eaba:	d204      	bcs.n	800eac6 <dir_sdi+0x22>
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	f003 031f 	and.w	r3, r3, #31
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d001      	beq.n	800eaca <dir_sdi+0x26>
		return FR_INT_ERR;
 800eac6:	2302      	movs	r3, #2
 800eac8:	e071      	b.n	800ebae <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	683a      	ldr	r2, [r7, #0]
 800eace:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	689b      	ldr	r3, [r3, #8]
 800ead4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d106      	bne.n	800eaea <dir_sdi+0x46>
 800eadc:	693b      	ldr	r3, [r7, #16]
 800eade:	781b      	ldrb	r3, [r3, #0]
 800eae0:	2b02      	cmp	r3, #2
 800eae2:	d902      	bls.n	800eaea <dir_sdi+0x46>
		clst = fs->dirbase;
 800eae4:	693b      	ldr	r3, [r7, #16]
 800eae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eae8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800eaea:	697b      	ldr	r3, [r7, #20]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d10c      	bne.n	800eb0a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	095b      	lsrs	r3, r3, #5
 800eaf4:	693a      	ldr	r2, [r7, #16]
 800eaf6:	8912      	ldrh	r2, [r2, #8]
 800eaf8:	4293      	cmp	r3, r2
 800eafa:	d301      	bcc.n	800eb00 <dir_sdi+0x5c>
 800eafc:	2302      	movs	r3, #2
 800eafe:	e056      	b.n	800ebae <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	61da      	str	r2, [r3, #28]
 800eb08:	e02d      	b.n	800eb66 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800eb0a:	693b      	ldr	r3, [r7, #16]
 800eb0c:	895b      	ldrh	r3, [r3, #10]
 800eb0e:	461a      	mov	r2, r3
 800eb10:	693b      	ldr	r3, [r7, #16]
 800eb12:	899b      	ldrh	r3, [r3, #12]
 800eb14:	fb03 f302 	mul.w	r3, r3, r2
 800eb18:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800eb1a:	e019      	b.n	800eb50 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	6979      	ldr	r1, [r7, #20]
 800eb20:	4618      	mov	r0, r3
 800eb22:	f7ff fc9a 	bl	800e45a <get_fat>
 800eb26:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800eb28:	697b      	ldr	r3, [r7, #20]
 800eb2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eb2e:	d101      	bne.n	800eb34 <dir_sdi+0x90>
 800eb30:	2301      	movs	r3, #1
 800eb32:	e03c      	b.n	800ebae <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	2b01      	cmp	r3, #1
 800eb38:	d904      	bls.n	800eb44 <dir_sdi+0xa0>
 800eb3a:	693b      	ldr	r3, [r7, #16]
 800eb3c:	69db      	ldr	r3, [r3, #28]
 800eb3e:	697a      	ldr	r2, [r7, #20]
 800eb40:	429a      	cmp	r2, r3
 800eb42:	d301      	bcc.n	800eb48 <dir_sdi+0xa4>
 800eb44:	2302      	movs	r3, #2
 800eb46:	e032      	b.n	800ebae <dir_sdi+0x10a>
			ofs -= csz;
 800eb48:	683a      	ldr	r2, [r7, #0]
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	1ad3      	subs	r3, r2, r3
 800eb4e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800eb50:	683a      	ldr	r2, [r7, #0]
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	429a      	cmp	r2, r3
 800eb56:	d2e1      	bcs.n	800eb1c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800eb58:	6979      	ldr	r1, [r7, #20]
 800eb5a:	6938      	ldr	r0, [r7, #16]
 800eb5c:	f7ff fc5e 	bl	800e41c <clust2sect>
 800eb60:	4602      	mov	r2, r0
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	697a      	ldr	r2, [r7, #20]
 800eb6a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	69db      	ldr	r3, [r3, #28]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d101      	bne.n	800eb78 <dir_sdi+0xd4>
 800eb74:	2302      	movs	r3, #2
 800eb76:	e01a      	b.n	800ebae <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	69da      	ldr	r2, [r3, #28]
 800eb7c:	693b      	ldr	r3, [r7, #16]
 800eb7e:	899b      	ldrh	r3, [r3, #12]
 800eb80:	4619      	mov	r1, r3
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	fbb3 f3f1 	udiv	r3, r3, r1
 800eb88:	441a      	add	r2, r3
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800eb8e:	693b      	ldr	r3, [r7, #16]
 800eb90:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800eb94:	693b      	ldr	r3, [r7, #16]
 800eb96:	899b      	ldrh	r3, [r3, #12]
 800eb98:	461a      	mov	r2, r3
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	fbb3 f0f2 	udiv	r0, r3, r2
 800eba0:	fb02 f200 	mul.w	r2, r2, r0
 800eba4:	1a9b      	subs	r3, r3, r2
 800eba6:	18ca      	adds	r2, r1, r3
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ebac:	2300      	movs	r3, #0
}
 800ebae:	4618      	mov	r0, r3
 800ebb0:	3718      	adds	r7, #24
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	bd80      	pop	{r7, pc}

0800ebb6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ebb6:	b580      	push	{r7, lr}
 800ebb8:	b086      	sub	sp, #24
 800ebba:	af00      	add	r7, sp, #0
 800ebbc:	6078      	str	r0, [r7, #4]
 800ebbe:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	695b      	ldr	r3, [r3, #20]
 800ebca:	3320      	adds	r3, #32
 800ebcc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	69db      	ldr	r3, [r3, #28]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d003      	beq.n	800ebde <dir_next+0x28>
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ebdc:	d301      	bcc.n	800ebe2 <dir_next+0x2c>
 800ebde:	2304      	movs	r3, #4
 800ebe0:	e0bb      	b.n	800ed5a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	899b      	ldrh	r3, [r3, #12]
 800ebe6:	461a      	mov	r2, r3
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	fbb3 f1f2 	udiv	r1, r3, r2
 800ebee:	fb02 f201 	mul.w	r2, r2, r1
 800ebf2:	1a9b      	subs	r3, r3, r2
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	f040 809d 	bne.w	800ed34 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	69db      	ldr	r3, [r3, #28]
 800ebfe:	1c5a      	adds	r2, r3, #1
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	699b      	ldr	r3, [r3, #24]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d10b      	bne.n	800ec24 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ec0c:	68bb      	ldr	r3, [r7, #8]
 800ec0e:	095b      	lsrs	r3, r3, #5
 800ec10:	68fa      	ldr	r2, [r7, #12]
 800ec12:	8912      	ldrh	r2, [r2, #8]
 800ec14:	4293      	cmp	r3, r2
 800ec16:	f0c0 808d 	bcc.w	800ed34 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	61da      	str	r2, [r3, #28]
 800ec20:	2304      	movs	r3, #4
 800ec22:	e09a      	b.n	800ed5a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	899b      	ldrh	r3, [r3, #12]
 800ec28:	461a      	mov	r2, r3
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec30:	68fa      	ldr	r2, [r7, #12]
 800ec32:	8952      	ldrh	r2, [r2, #10]
 800ec34:	3a01      	subs	r2, #1
 800ec36:	4013      	ands	r3, r2
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d17b      	bne.n	800ed34 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ec3c:	687a      	ldr	r2, [r7, #4]
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	699b      	ldr	r3, [r3, #24]
 800ec42:	4619      	mov	r1, r3
 800ec44:	4610      	mov	r0, r2
 800ec46:	f7ff fc08 	bl	800e45a <get_fat>
 800ec4a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	2b01      	cmp	r3, #1
 800ec50:	d801      	bhi.n	800ec56 <dir_next+0xa0>
 800ec52:	2302      	movs	r3, #2
 800ec54:	e081      	b.n	800ed5a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ec5c:	d101      	bne.n	800ec62 <dir_next+0xac>
 800ec5e:	2301      	movs	r3, #1
 800ec60:	e07b      	b.n	800ed5a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	69db      	ldr	r3, [r3, #28]
 800ec66:	697a      	ldr	r2, [r7, #20]
 800ec68:	429a      	cmp	r2, r3
 800ec6a:	d359      	bcc.n	800ed20 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d104      	bne.n	800ec7c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2200      	movs	r2, #0
 800ec76:	61da      	str	r2, [r3, #28]
 800ec78:	2304      	movs	r3, #4
 800ec7a:	e06e      	b.n	800ed5a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ec7c:	687a      	ldr	r2, [r7, #4]
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	699b      	ldr	r3, [r3, #24]
 800ec82:	4619      	mov	r1, r3
 800ec84:	4610      	mov	r0, r2
 800ec86:	f7ff fe3d 	bl	800e904 <create_chain>
 800ec8a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d101      	bne.n	800ec96 <dir_next+0xe0>
 800ec92:	2307      	movs	r3, #7
 800ec94:	e061      	b.n	800ed5a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	2b01      	cmp	r3, #1
 800ec9a:	d101      	bne.n	800eca0 <dir_next+0xea>
 800ec9c:	2302      	movs	r3, #2
 800ec9e:	e05c      	b.n	800ed5a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eca6:	d101      	bne.n	800ecac <dir_next+0xf6>
 800eca8:	2301      	movs	r3, #1
 800ecaa:	e056      	b.n	800ed5a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ecac:	68f8      	ldr	r0, [r7, #12]
 800ecae:	f7ff fad3 	bl	800e258 <sync_window>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d001      	beq.n	800ecbc <dir_next+0x106>
 800ecb8:	2301      	movs	r3, #1
 800ecba:	e04e      	b.n	800ed5a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	899b      	ldrh	r3, [r3, #12]
 800ecc6:	461a      	mov	r2, r3
 800ecc8:	2100      	movs	r1, #0
 800ecca:	f7ff f8ca 	bl	800de62 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ecce:	2300      	movs	r3, #0
 800ecd0:	613b      	str	r3, [r7, #16]
 800ecd2:	6979      	ldr	r1, [r7, #20]
 800ecd4:	68f8      	ldr	r0, [r7, #12]
 800ecd6:	f7ff fba1 	bl	800e41c <clust2sect>
 800ecda:	4602      	mov	r2, r0
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	635a      	str	r2, [r3, #52]	; 0x34
 800ece0:	e012      	b.n	800ed08 <dir_next+0x152>
						fs->wflag = 1;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	2201      	movs	r2, #1
 800ece6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ece8:	68f8      	ldr	r0, [r7, #12]
 800ecea:	f7ff fab5 	bl	800e258 <sync_window>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d001      	beq.n	800ecf8 <dir_next+0x142>
 800ecf4:	2301      	movs	r3, #1
 800ecf6:	e030      	b.n	800ed5a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ecf8:	693b      	ldr	r3, [r7, #16]
 800ecfa:	3301      	adds	r3, #1
 800ecfc:	613b      	str	r3, [r7, #16]
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed02:	1c5a      	adds	r2, r3, #1
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	635a      	str	r2, [r3, #52]	; 0x34
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	895b      	ldrh	r3, [r3, #10]
 800ed0c:	461a      	mov	r2, r3
 800ed0e:	693b      	ldr	r3, [r7, #16]
 800ed10:	4293      	cmp	r3, r2
 800ed12:	d3e6      	bcc.n	800ece2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed18:	693b      	ldr	r3, [r7, #16]
 800ed1a:	1ad2      	subs	r2, r2, r3
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	697a      	ldr	r2, [r7, #20]
 800ed24:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ed26:	6979      	ldr	r1, [r7, #20]
 800ed28:	68f8      	ldr	r0, [r7, #12]
 800ed2a:	f7ff fb77 	bl	800e41c <clust2sect>
 800ed2e:	4602      	mov	r2, r0
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	68ba      	ldr	r2, [r7, #8]
 800ed38:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	899b      	ldrh	r3, [r3, #12]
 800ed44:	461a      	mov	r2, r3
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	fbb3 f0f2 	udiv	r0, r3, r2
 800ed4c:	fb02 f200 	mul.w	r2, r2, r0
 800ed50:	1a9b      	subs	r3, r3, r2
 800ed52:	18ca      	adds	r2, r1, r3
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ed58:	2300      	movs	r3, #0
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3718      	adds	r7, #24
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}

0800ed62 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ed62:	b580      	push	{r7, lr}
 800ed64:	b086      	sub	sp, #24
 800ed66:	af00      	add	r7, sp, #0
 800ed68:	6078      	str	r0, [r7, #4]
 800ed6a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ed72:	2100      	movs	r1, #0
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f7ff fe95 	bl	800eaa4 <dir_sdi>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ed7e:	7dfb      	ldrb	r3, [r7, #23]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d12b      	bne.n	800eddc <dir_alloc+0x7a>
		n = 0;
 800ed84:	2300      	movs	r3, #0
 800ed86:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	69db      	ldr	r3, [r3, #28]
 800ed8c:	4619      	mov	r1, r3
 800ed8e:	68f8      	ldr	r0, [r7, #12]
 800ed90:	f7ff faa6 	bl	800e2e0 <move_window>
 800ed94:	4603      	mov	r3, r0
 800ed96:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ed98:	7dfb      	ldrb	r3, [r7, #23]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d11d      	bne.n	800edda <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6a1b      	ldr	r3, [r3, #32]
 800eda2:	781b      	ldrb	r3, [r3, #0]
 800eda4:	2be5      	cmp	r3, #229	; 0xe5
 800eda6:	d004      	beq.n	800edb2 <dir_alloc+0x50>
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	6a1b      	ldr	r3, [r3, #32]
 800edac:	781b      	ldrb	r3, [r3, #0]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d107      	bne.n	800edc2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800edb2:	693b      	ldr	r3, [r7, #16]
 800edb4:	3301      	adds	r3, #1
 800edb6:	613b      	str	r3, [r7, #16]
 800edb8:	693a      	ldr	r2, [r7, #16]
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	429a      	cmp	r2, r3
 800edbe:	d102      	bne.n	800edc6 <dir_alloc+0x64>
 800edc0:	e00c      	b.n	800eddc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800edc2:	2300      	movs	r3, #0
 800edc4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800edc6:	2101      	movs	r1, #1
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	f7ff fef4 	bl	800ebb6 <dir_next>
 800edce:	4603      	mov	r3, r0
 800edd0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800edd2:	7dfb      	ldrb	r3, [r7, #23]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d0d7      	beq.n	800ed88 <dir_alloc+0x26>
 800edd8:	e000      	b.n	800eddc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800edda:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800eddc:	7dfb      	ldrb	r3, [r7, #23]
 800edde:	2b04      	cmp	r3, #4
 800ede0:	d101      	bne.n	800ede6 <dir_alloc+0x84>
 800ede2:	2307      	movs	r3, #7
 800ede4:	75fb      	strb	r3, [r7, #23]
	return res;
 800ede6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3718      	adds	r7, #24
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b084      	sub	sp, #16
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	331a      	adds	r3, #26
 800edfe:	4618      	mov	r0, r3
 800ee00:	f7fe ff8c 	bl	800dd1c <ld_word>
 800ee04:	4603      	mov	r3, r0
 800ee06:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	781b      	ldrb	r3, [r3, #0]
 800ee0c:	2b03      	cmp	r3, #3
 800ee0e:	d109      	bne.n	800ee24 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ee10:	683b      	ldr	r3, [r7, #0]
 800ee12:	3314      	adds	r3, #20
 800ee14:	4618      	mov	r0, r3
 800ee16:	f7fe ff81 	bl	800dd1c <ld_word>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	041b      	lsls	r3, r3, #16
 800ee1e:	68fa      	ldr	r2, [r7, #12]
 800ee20:	4313      	orrs	r3, r2
 800ee22:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ee24:	68fb      	ldr	r3, [r7, #12]
}
 800ee26:	4618      	mov	r0, r3
 800ee28:	3710      	adds	r7, #16
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}

0800ee2e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ee2e:	b580      	push	{r7, lr}
 800ee30:	b084      	sub	sp, #16
 800ee32:	af00      	add	r7, sp, #0
 800ee34:	60f8      	str	r0, [r7, #12]
 800ee36:	60b9      	str	r1, [r7, #8]
 800ee38:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ee3a:	68bb      	ldr	r3, [r7, #8]
 800ee3c:	331a      	adds	r3, #26
 800ee3e:	687a      	ldr	r2, [r7, #4]
 800ee40:	b292      	uxth	r2, r2
 800ee42:	4611      	mov	r1, r2
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7fe ffa4 	bl	800dd92 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	781b      	ldrb	r3, [r3, #0]
 800ee4e:	2b03      	cmp	r3, #3
 800ee50:	d109      	bne.n	800ee66 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	f103 0214 	add.w	r2, r3, #20
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	0c1b      	lsrs	r3, r3, #16
 800ee5c:	b29b      	uxth	r3, r3
 800ee5e:	4619      	mov	r1, r3
 800ee60:	4610      	mov	r0, r2
 800ee62:	f7fe ff96 	bl	800dd92 <st_word>
	}
}
 800ee66:	bf00      	nop
 800ee68:	3710      	adds	r7, #16
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}

0800ee6e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800ee6e:	b580      	push	{r7, lr}
 800ee70:	b086      	sub	sp, #24
 800ee72:	af00      	add	r7, sp, #0
 800ee74:	6078      	str	r0, [r7, #4]
 800ee76:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800ee78:	2304      	movs	r3, #4
 800ee7a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800ee82:	e03c      	b.n	800eefe <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	69db      	ldr	r3, [r3, #28]
 800ee88:	4619      	mov	r1, r3
 800ee8a:	6938      	ldr	r0, [r7, #16]
 800ee8c:	f7ff fa28 	bl	800e2e0 <move_window>
 800ee90:	4603      	mov	r3, r0
 800ee92:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ee94:	7dfb      	ldrb	r3, [r7, #23]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d136      	bne.n	800ef08 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6a1b      	ldr	r3, [r3, #32]
 800ee9e:	781b      	ldrb	r3, [r3, #0]
 800eea0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800eea2:	7bfb      	ldrb	r3, [r7, #15]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d102      	bne.n	800eeae <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800eea8:	2304      	movs	r3, #4
 800eeaa:	75fb      	strb	r3, [r7, #23]
 800eeac:	e031      	b.n	800ef12 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	6a1b      	ldr	r3, [r3, #32]
 800eeb2:	330b      	adds	r3, #11
 800eeb4:	781b      	ldrb	r3, [r3, #0]
 800eeb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eeba:	73bb      	strb	r3, [r7, #14]
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	7bba      	ldrb	r2, [r7, #14]
 800eec0:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800eec2:	7bfb      	ldrb	r3, [r7, #15]
 800eec4:	2be5      	cmp	r3, #229	; 0xe5
 800eec6:	d011      	beq.n	800eeec <dir_read+0x7e>
 800eec8:	7bfb      	ldrb	r3, [r7, #15]
 800eeca:	2b2e      	cmp	r3, #46	; 0x2e
 800eecc:	d00e      	beq.n	800eeec <dir_read+0x7e>
 800eece:	7bbb      	ldrb	r3, [r7, #14]
 800eed0:	2b0f      	cmp	r3, #15
 800eed2:	d00b      	beq.n	800eeec <dir_read+0x7e>
 800eed4:	7bbb      	ldrb	r3, [r7, #14]
 800eed6:	f023 0320 	bic.w	r3, r3, #32
 800eeda:	2b08      	cmp	r3, #8
 800eedc:	bf0c      	ite	eq
 800eede:	2301      	moveq	r3, #1
 800eee0:	2300      	movne	r3, #0
 800eee2:	b2db      	uxtb	r3, r3
 800eee4:	461a      	mov	r2, r3
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	4293      	cmp	r3, r2
 800eeea:	d00f      	beq.n	800ef0c <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800eeec:	2100      	movs	r1, #0
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	f7ff fe61 	bl	800ebb6 <dir_next>
 800eef4:	4603      	mov	r3, r0
 800eef6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800eef8:	7dfb      	ldrb	r3, [r7, #23]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d108      	bne.n	800ef10 <dir_read+0xa2>
	while (dp->sect) {
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	69db      	ldr	r3, [r3, #28]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d1be      	bne.n	800ee84 <dir_read+0x16>
 800ef06:	e004      	b.n	800ef12 <dir_read+0xa4>
		if (res != FR_OK) break;
 800ef08:	bf00      	nop
 800ef0a:	e002      	b.n	800ef12 <dir_read+0xa4>
				break;
 800ef0c:	bf00      	nop
 800ef0e:	e000      	b.n	800ef12 <dir_read+0xa4>
		if (res != FR_OK) break;
 800ef10:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ef12:	7dfb      	ldrb	r3, [r7, #23]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d002      	beq.n	800ef1e <dir_read+0xb0>
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	61da      	str	r2, [r3, #28]
	return res;
 800ef1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef20:	4618      	mov	r0, r3
 800ef22:	3718      	adds	r7, #24
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}

0800ef28 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b086      	sub	sp, #24
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ef36:	2100      	movs	r1, #0
 800ef38:	6878      	ldr	r0, [r7, #4]
 800ef3a:	f7ff fdb3 	bl	800eaa4 <dir_sdi>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ef42:	7dfb      	ldrb	r3, [r7, #23]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d001      	beq.n	800ef4c <dir_find+0x24>
 800ef48:	7dfb      	ldrb	r3, [r7, #23]
 800ef4a:	e03e      	b.n	800efca <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	69db      	ldr	r3, [r3, #28]
 800ef50:	4619      	mov	r1, r3
 800ef52:	6938      	ldr	r0, [r7, #16]
 800ef54:	f7ff f9c4 	bl	800e2e0 <move_window>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ef5c:	7dfb      	ldrb	r3, [r7, #23]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d12f      	bne.n	800efc2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6a1b      	ldr	r3, [r3, #32]
 800ef66:	781b      	ldrb	r3, [r3, #0]
 800ef68:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ef6a:	7bfb      	ldrb	r3, [r7, #15]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d102      	bne.n	800ef76 <dir_find+0x4e>
 800ef70:	2304      	movs	r3, #4
 800ef72:	75fb      	strb	r3, [r7, #23]
 800ef74:	e028      	b.n	800efc8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	6a1b      	ldr	r3, [r3, #32]
 800ef7a:	330b      	adds	r3, #11
 800ef7c:	781b      	ldrb	r3, [r3, #0]
 800ef7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ef82:	b2da      	uxtb	r2, r3
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	6a1b      	ldr	r3, [r3, #32]
 800ef8c:	330b      	adds	r3, #11
 800ef8e:	781b      	ldrb	r3, [r3, #0]
 800ef90:	f003 0308 	and.w	r3, r3, #8
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d10a      	bne.n	800efae <dir_find+0x86>
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	6a18      	ldr	r0, [r3, #32]
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	3324      	adds	r3, #36	; 0x24
 800efa0:	220b      	movs	r2, #11
 800efa2:	4619      	mov	r1, r3
 800efa4:	f7fe ff78 	bl	800de98 <mem_cmp>
 800efa8:	4603      	mov	r3, r0
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d00b      	beq.n	800efc6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800efae:	2100      	movs	r1, #0
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f7ff fe00 	bl	800ebb6 <dir_next>
 800efb6:	4603      	mov	r3, r0
 800efb8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800efba:	7dfb      	ldrb	r3, [r7, #23]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d0c5      	beq.n	800ef4c <dir_find+0x24>
 800efc0:	e002      	b.n	800efc8 <dir_find+0xa0>
		if (res != FR_OK) break;
 800efc2:	bf00      	nop
 800efc4:	e000      	b.n	800efc8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800efc6:	bf00      	nop

	return res;
 800efc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800efca:	4618      	mov	r0, r3
 800efcc:	3718      	adds	r7, #24
 800efce:	46bd      	mov	sp, r7
 800efd0:	bd80      	pop	{r7, pc}

0800efd2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800efd2:	b580      	push	{r7, lr}
 800efd4:	b084      	sub	sp, #16
 800efd6:	af00      	add	r7, sp, #0
 800efd8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800efe0:	2101      	movs	r1, #1
 800efe2:	6878      	ldr	r0, [r7, #4]
 800efe4:	f7ff febd 	bl	800ed62 <dir_alloc>
 800efe8:	4603      	mov	r3, r0
 800efea:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800efec:	7bfb      	ldrb	r3, [r7, #15]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d11c      	bne.n	800f02c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	69db      	ldr	r3, [r3, #28]
 800eff6:	4619      	mov	r1, r3
 800eff8:	68b8      	ldr	r0, [r7, #8]
 800effa:	f7ff f971 	bl	800e2e0 <move_window>
 800effe:	4603      	mov	r3, r0
 800f000:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f002:	7bfb      	ldrb	r3, [r7, #15]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d111      	bne.n	800f02c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	6a1b      	ldr	r3, [r3, #32]
 800f00c:	2220      	movs	r2, #32
 800f00e:	2100      	movs	r1, #0
 800f010:	4618      	mov	r0, r3
 800f012:	f7fe ff26 	bl	800de62 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	6a18      	ldr	r0, [r3, #32]
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	3324      	adds	r3, #36	; 0x24
 800f01e:	220b      	movs	r2, #11
 800f020:	4619      	mov	r1, r3
 800f022:	f7fe fefd 	bl	800de20 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	2201      	movs	r2, #1
 800f02a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f02e:	4618      	mov	r0, r3
 800f030:	3710      	adds	r7, #16
 800f032:	46bd      	mov	sp, r7
 800f034:	bd80      	pop	{r7, pc}

0800f036 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800f036:	b580      	push	{r7, lr}
 800f038:	b086      	sub	sp, #24
 800f03a:	af00      	add	r7, sp, #0
 800f03c:	6078      	str	r0, [r7, #4]
 800f03e:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	2200      	movs	r2, #0
 800f044:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	69db      	ldr	r3, [r3, #28]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d04e      	beq.n	800f0ec <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800f04e:	2300      	movs	r3, #0
 800f050:	613b      	str	r3, [r7, #16]
 800f052:	693b      	ldr	r3, [r7, #16]
 800f054:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800f056:	e021      	b.n	800f09c <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	6a1a      	ldr	r2, [r3, #32]
 800f05c:	697b      	ldr	r3, [r7, #20]
 800f05e:	1c59      	adds	r1, r3, #1
 800f060:	6179      	str	r1, [r7, #20]
 800f062:	4413      	add	r3, r2
 800f064:	781b      	ldrb	r3, [r3, #0]
 800f066:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800f068:	7bfb      	ldrb	r3, [r7, #15]
 800f06a:	2b20      	cmp	r3, #32
 800f06c:	d100      	bne.n	800f070 <get_fileinfo+0x3a>
 800f06e:	e015      	b.n	800f09c <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800f070:	7bfb      	ldrb	r3, [r7, #15]
 800f072:	2b05      	cmp	r3, #5
 800f074:	d101      	bne.n	800f07a <get_fileinfo+0x44>
 800f076:	23e5      	movs	r3, #229	; 0xe5
 800f078:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800f07a:	697b      	ldr	r3, [r7, #20]
 800f07c:	2b09      	cmp	r3, #9
 800f07e:	d106      	bne.n	800f08e <get_fileinfo+0x58>
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	1c5a      	adds	r2, r3, #1
 800f084:	613a      	str	r2, [r7, #16]
 800f086:	683a      	ldr	r2, [r7, #0]
 800f088:	4413      	add	r3, r2
 800f08a:	222e      	movs	r2, #46	; 0x2e
 800f08c:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800f08e:	693b      	ldr	r3, [r7, #16]
 800f090:	1c5a      	adds	r2, r3, #1
 800f092:	613a      	str	r2, [r7, #16]
 800f094:	683a      	ldr	r2, [r7, #0]
 800f096:	4413      	add	r3, r2
 800f098:	7bfa      	ldrb	r2, [r7, #15]
 800f09a:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800f09c:	697b      	ldr	r3, [r7, #20]
 800f09e:	2b0a      	cmp	r3, #10
 800f0a0:	d9da      	bls.n	800f058 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800f0a2:	683a      	ldr	r2, [r7, #0]
 800f0a4:	693b      	ldr	r3, [r7, #16]
 800f0a6:	4413      	add	r3, r2
 800f0a8:	3309      	adds	r3, #9
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	6a1b      	ldr	r3, [r3, #32]
 800f0b2:	7ada      	ldrb	r2, [r3, #11]
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	6a1b      	ldr	r3, [r3, #32]
 800f0bc:	331c      	adds	r3, #28
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f7fe fe44 	bl	800dd4c <ld_dword>
 800f0c4:	4602      	mov	r2, r0
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	6a1b      	ldr	r3, [r3, #32]
 800f0ce:	3316      	adds	r3, #22
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f7fe fe3b 	bl	800dd4c <ld_dword>
 800f0d6:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	b29a      	uxth	r2, r3
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	80da      	strh	r2, [r3, #6]
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	0c1b      	lsrs	r3, r3, #16
 800f0e4:	b29a      	uxth	r2, r3
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	809a      	strh	r2, [r3, #4]
 800f0ea:	e000      	b.n	800f0ee <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f0ec:	bf00      	nop
}
 800f0ee:	3718      	adds	r7, #24
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	bd80      	pop	{r7, pc}

0800f0f4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b088      	sub	sp, #32
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
 800f0fc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	60fb      	str	r3, [r7, #12]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	3324      	adds	r3, #36	; 0x24
 800f108:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f10a:	220b      	movs	r2, #11
 800f10c:	2120      	movs	r1, #32
 800f10e:	68b8      	ldr	r0, [r7, #8]
 800f110:	f7fe fea7 	bl	800de62 <mem_set>
	si = i = 0; ni = 8;
 800f114:	2300      	movs	r3, #0
 800f116:	613b      	str	r3, [r7, #16]
 800f118:	693b      	ldr	r3, [r7, #16]
 800f11a:	61fb      	str	r3, [r7, #28]
 800f11c:	2308      	movs	r3, #8
 800f11e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f120:	69fb      	ldr	r3, [r7, #28]
 800f122:	1c5a      	adds	r2, r3, #1
 800f124:	61fa      	str	r2, [r7, #28]
 800f126:	68fa      	ldr	r2, [r7, #12]
 800f128:	4413      	add	r3, r2
 800f12a:	781b      	ldrb	r3, [r3, #0]
 800f12c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f12e:	7efb      	ldrb	r3, [r7, #27]
 800f130:	2b20      	cmp	r3, #32
 800f132:	d94e      	bls.n	800f1d2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f134:	7efb      	ldrb	r3, [r7, #27]
 800f136:	2b2f      	cmp	r3, #47	; 0x2f
 800f138:	d006      	beq.n	800f148 <create_name+0x54>
 800f13a:	7efb      	ldrb	r3, [r7, #27]
 800f13c:	2b5c      	cmp	r3, #92	; 0x5c
 800f13e:	d110      	bne.n	800f162 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f140:	e002      	b.n	800f148 <create_name+0x54>
 800f142:	69fb      	ldr	r3, [r7, #28]
 800f144:	3301      	adds	r3, #1
 800f146:	61fb      	str	r3, [r7, #28]
 800f148:	68fa      	ldr	r2, [r7, #12]
 800f14a:	69fb      	ldr	r3, [r7, #28]
 800f14c:	4413      	add	r3, r2
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	2b2f      	cmp	r3, #47	; 0x2f
 800f152:	d0f6      	beq.n	800f142 <create_name+0x4e>
 800f154:	68fa      	ldr	r2, [r7, #12]
 800f156:	69fb      	ldr	r3, [r7, #28]
 800f158:	4413      	add	r3, r2
 800f15a:	781b      	ldrb	r3, [r3, #0]
 800f15c:	2b5c      	cmp	r3, #92	; 0x5c
 800f15e:	d0f0      	beq.n	800f142 <create_name+0x4e>
			break;
 800f160:	e038      	b.n	800f1d4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f162:	7efb      	ldrb	r3, [r7, #27]
 800f164:	2b2e      	cmp	r3, #46	; 0x2e
 800f166:	d003      	beq.n	800f170 <create_name+0x7c>
 800f168:	693a      	ldr	r2, [r7, #16]
 800f16a:	697b      	ldr	r3, [r7, #20]
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d30c      	bcc.n	800f18a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	2b0b      	cmp	r3, #11
 800f174:	d002      	beq.n	800f17c <create_name+0x88>
 800f176:	7efb      	ldrb	r3, [r7, #27]
 800f178:	2b2e      	cmp	r3, #46	; 0x2e
 800f17a:	d001      	beq.n	800f180 <create_name+0x8c>
 800f17c:	2306      	movs	r3, #6
 800f17e:	e044      	b.n	800f20a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800f180:	2308      	movs	r3, #8
 800f182:	613b      	str	r3, [r7, #16]
 800f184:	230b      	movs	r3, #11
 800f186:	617b      	str	r3, [r7, #20]
			continue;
 800f188:	e022      	b.n	800f1d0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f18a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	da04      	bge.n	800f19c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f192:	7efb      	ldrb	r3, [r7, #27]
 800f194:	3b80      	subs	r3, #128	; 0x80
 800f196:	4a1f      	ldr	r2, [pc, #124]	; (800f214 <create_name+0x120>)
 800f198:	5cd3      	ldrb	r3, [r2, r3]
 800f19a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f19c:	7efb      	ldrb	r3, [r7, #27]
 800f19e:	4619      	mov	r1, r3
 800f1a0:	481d      	ldr	r0, [pc, #116]	; (800f218 <create_name+0x124>)
 800f1a2:	f7fe fea0 	bl	800dee6 <chk_chr>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d001      	beq.n	800f1b0 <create_name+0xbc>
 800f1ac:	2306      	movs	r3, #6
 800f1ae:	e02c      	b.n	800f20a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f1b0:	7efb      	ldrb	r3, [r7, #27]
 800f1b2:	2b60      	cmp	r3, #96	; 0x60
 800f1b4:	d905      	bls.n	800f1c2 <create_name+0xce>
 800f1b6:	7efb      	ldrb	r3, [r7, #27]
 800f1b8:	2b7a      	cmp	r3, #122	; 0x7a
 800f1ba:	d802      	bhi.n	800f1c2 <create_name+0xce>
 800f1bc:	7efb      	ldrb	r3, [r7, #27]
 800f1be:	3b20      	subs	r3, #32
 800f1c0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800f1c2:	693b      	ldr	r3, [r7, #16]
 800f1c4:	1c5a      	adds	r2, r3, #1
 800f1c6:	613a      	str	r2, [r7, #16]
 800f1c8:	68ba      	ldr	r2, [r7, #8]
 800f1ca:	4413      	add	r3, r2
 800f1cc:	7efa      	ldrb	r2, [r7, #27]
 800f1ce:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f1d0:	e7a6      	b.n	800f120 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f1d2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f1d4:	68fa      	ldr	r2, [r7, #12]
 800f1d6:	69fb      	ldr	r3, [r7, #28]
 800f1d8:	441a      	add	r2, r3
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f1de:	693b      	ldr	r3, [r7, #16]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d101      	bne.n	800f1e8 <create_name+0xf4>
 800f1e4:	2306      	movs	r3, #6
 800f1e6:	e010      	b.n	800f20a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f1e8:	68bb      	ldr	r3, [r7, #8]
 800f1ea:	781b      	ldrb	r3, [r3, #0]
 800f1ec:	2be5      	cmp	r3, #229	; 0xe5
 800f1ee:	d102      	bne.n	800f1f6 <create_name+0x102>
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	2205      	movs	r2, #5
 800f1f4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f1f6:	7efb      	ldrb	r3, [r7, #27]
 800f1f8:	2b20      	cmp	r3, #32
 800f1fa:	d801      	bhi.n	800f200 <create_name+0x10c>
 800f1fc:	2204      	movs	r2, #4
 800f1fe:	e000      	b.n	800f202 <create_name+0x10e>
 800f200:	2200      	movs	r2, #0
 800f202:	68bb      	ldr	r3, [r7, #8]
 800f204:	330b      	adds	r3, #11
 800f206:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f208:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f20a:	4618      	mov	r0, r3
 800f20c:	3720      	adds	r7, #32
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}
 800f212:	bf00      	nop
 800f214:	080270ec 	.word	0x080270ec
 800f218:	08023dac 	.word	0x08023dac

0800f21c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b086      	sub	sp, #24
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
 800f224:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f22a:	693b      	ldr	r3, [r7, #16]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f230:	e002      	b.n	800f238 <follow_path+0x1c>
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	3301      	adds	r3, #1
 800f236:	603b      	str	r3, [r7, #0]
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	781b      	ldrb	r3, [r3, #0]
 800f23c:	2b2f      	cmp	r3, #47	; 0x2f
 800f23e:	d0f8      	beq.n	800f232 <follow_path+0x16>
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	781b      	ldrb	r3, [r3, #0]
 800f244:	2b5c      	cmp	r3, #92	; 0x5c
 800f246:	d0f4      	beq.n	800f232 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f248:	693b      	ldr	r3, [r7, #16]
 800f24a:	2200      	movs	r2, #0
 800f24c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f24e:	683b      	ldr	r3, [r7, #0]
 800f250:	781b      	ldrb	r3, [r3, #0]
 800f252:	2b1f      	cmp	r3, #31
 800f254:	d80a      	bhi.n	800f26c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2280      	movs	r2, #128	; 0x80
 800f25a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f25e:	2100      	movs	r1, #0
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	f7ff fc1f 	bl	800eaa4 <dir_sdi>
 800f266:	4603      	mov	r3, r0
 800f268:	75fb      	strb	r3, [r7, #23]
 800f26a:	e048      	b.n	800f2fe <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f26c:	463b      	mov	r3, r7
 800f26e:	4619      	mov	r1, r3
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f7ff ff3f 	bl	800f0f4 <create_name>
 800f276:	4603      	mov	r3, r0
 800f278:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f27a:	7dfb      	ldrb	r3, [r7, #23]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d139      	bne.n	800f2f4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f280:	6878      	ldr	r0, [r7, #4]
 800f282:	f7ff fe51 	bl	800ef28 <dir_find>
 800f286:	4603      	mov	r3, r0
 800f288:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f290:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f292:	7dfb      	ldrb	r3, [r7, #23]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d00a      	beq.n	800f2ae <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f298:	7dfb      	ldrb	r3, [r7, #23]
 800f29a:	2b04      	cmp	r3, #4
 800f29c:	d12c      	bne.n	800f2f8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f29e:	7afb      	ldrb	r3, [r7, #11]
 800f2a0:	f003 0304 	and.w	r3, r3, #4
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d127      	bne.n	800f2f8 <follow_path+0xdc>
 800f2a8:	2305      	movs	r3, #5
 800f2aa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f2ac:	e024      	b.n	800f2f8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f2ae:	7afb      	ldrb	r3, [r7, #11]
 800f2b0:	f003 0304 	and.w	r3, r3, #4
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d121      	bne.n	800f2fc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f2b8:	693b      	ldr	r3, [r7, #16]
 800f2ba:	799b      	ldrb	r3, [r3, #6]
 800f2bc:	f003 0310 	and.w	r3, r3, #16
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d102      	bne.n	800f2ca <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f2c4:	2305      	movs	r3, #5
 800f2c6:	75fb      	strb	r3, [r7, #23]
 800f2c8:	e019      	b.n	800f2fe <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	695b      	ldr	r3, [r3, #20]
 800f2d4:	68fa      	ldr	r2, [r7, #12]
 800f2d6:	8992      	ldrh	r2, [r2, #12]
 800f2d8:	fbb3 f0f2 	udiv	r0, r3, r2
 800f2dc:	fb02 f200 	mul.w	r2, r2, r0
 800f2e0:	1a9b      	subs	r3, r3, r2
 800f2e2:	440b      	add	r3, r1
 800f2e4:	4619      	mov	r1, r3
 800f2e6:	68f8      	ldr	r0, [r7, #12]
 800f2e8:	f7ff fd82 	bl	800edf0 <ld_clust>
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	693b      	ldr	r3, [r7, #16]
 800f2f0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f2f2:	e7bb      	b.n	800f26c <follow_path+0x50>
			if (res != FR_OK) break;
 800f2f4:	bf00      	nop
 800f2f6:	e002      	b.n	800f2fe <follow_path+0xe2>
				break;
 800f2f8:	bf00      	nop
 800f2fa:	e000      	b.n	800f2fe <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f2fc:	bf00      	nop
			}
		}
	}

	return res;
 800f2fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800f300:	4618      	mov	r0, r3
 800f302:	3718      	adds	r7, #24
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}

0800f308 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f308:	b480      	push	{r7}
 800f30a:	b087      	sub	sp, #28
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f310:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f314:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d031      	beq.n	800f382 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	617b      	str	r3, [r7, #20]
 800f324:	e002      	b.n	800f32c <get_ldnumber+0x24>
 800f326:	697b      	ldr	r3, [r7, #20]
 800f328:	3301      	adds	r3, #1
 800f32a:	617b      	str	r3, [r7, #20]
 800f32c:	697b      	ldr	r3, [r7, #20]
 800f32e:	781b      	ldrb	r3, [r3, #0]
 800f330:	2b20      	cmp	r3, #32
 800f332:	d903      	bls.n	800f33c <get_ldnumber+0x34>
 800f334:	697b      	ldr	r3, [r7, #20]
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	2b3a      	cmp	r3, #58	; 0x3a
 800f33a:	d1f4      	bne.n	800f326 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f33c:	697b      	ldr	r3, [r7, #20]
 800f33e:	781b      	ldrb	r3, [r3, #0]
 800f340:	2b3a      	cmp	r3, #58	; 0x3a
 800f342:	d11c      	bne.n	800f37e <get_ldnumber+0x76>
			tp = *path;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	1c5a      	adds	r2, r3, #1
 800f34e:	60fa      	str	r2, [r7, #12]
 800f350:	781b      	ldrb	r3, [r3, #0]
 800f352:	3b30      	subs	r3, #48	; 0x30
 800f354:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	2b09      	cmp	r3, #9
 800f35a:	d80e      	bhi.n	800f37a <get_ldnumber+0x72>
 800f35c:	68fa      	ldr	r2, [r7, #12]
 800f35e:	697b      	ldr	r3, [r7, #20]
 800f360:	429a      	cmp	r2, r3
 800f362:	d10a      	bne.n	800f37a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d107      	bne.n	800f37a <get_ldnumber+0x72>
					vol = (int)i;
 800f36a:	68bb      	ldr	r3, [r7, #8]
 800f36c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f36e:	697b      	ldr	r3, [r7, #20]
 800f370:	3301      	adds	r3, #1
 800f372:	617b      	str	r3, [r7, #20]
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	697a      	ldr	r2, [r7, #20]
 800f378:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f37a:	693b      	ldr	r3, [r7, #16]
 800f37c:	e002      	b.n	800f384 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f37e:	2300      	movs	r3, #0
 800f380:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f382:	693b      	ldr	r3, [r7, #16]
}
 800f384:	4618      	mov	r0, r3
 800f386:	371c      	adds	r7, #28
 800f388:	46bd      	mov	sp, r7
 800f38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38e:	4770      	bx	lr

0800f390 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b082      	sub	sp, #8
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
 800f398:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	2200      	movs	r2, #0
 800f39e:	70da      	strb	r2, [r3, #3]
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f3a6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f3a8:	6839      	ldr	r1, [r7, #0]
 800f3aa:	6878      	ldr	r0, [r7, #4]
 800f3ac:	f7fe ff98 	bl	800e2e0 <move_window>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d001      	beq.n	800f3ba <check_fs+0x2a>
 800f3b6:	2304      	movs	r3, #4
 800f3b8:	e038      	b.n	800f42c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	3338      	adds	r3, #56	; 0x38
 800f3be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	f7fe fcaa 	bl	800dd1c <ld_word>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	461a      	mov	r2, r3
 800f3cc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f3d0:	429a      	cmp	r2, r3
 800f3d2:	d001      	beq.n	800f3d8 <check_fs+0x48>
 800f3d4:	2303      	movs	r3, #3
 800f3d6:	e029      	b.n	800f42c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f3de:	2be9      	cmp	r3, #233	; 0xe9
 800f3e0:	d009      	beq.n	800f3f6 <check_fs+0x66>
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f3e8:	2beb      	cmp	r3, #235	; 0xeb
 800f3ea:	d11e      	bne.n	800f42a <check_fs+0x9a>
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800f3f2:	2b90      	cmp	r3, #144	; 0x90
 800f3f4:	d119      	bne.n	800f42a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	3338      	adds	r3, #56	; 0x38
 800f3fa:	3336      	adds	r3, #54	; 0x36
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f7fe fca5 	bl	800dd4c <ld_dword>
 800f402:	4603      	mov	r3, r0
 800f404:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f408:	4a0a      	ldr	r2, [pc, #40]	; (800f434 <check_fs+0xa4>)
 800f40a:	4293      	cmp	r3, r2
 800f40c:	d101      	bne.n	800f412 <check_fs+0x82>
 800f40e:	2300      	movs	r3, #0
 800f410:	e00c      	b.n	800f42c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	3338      	adds	r3, #56	; 0x38
 800f416:	3352      	adds	r3, #82	; 0x52
 800f418:	4618      	mov	r0, r3
 800f41a:	f7fe fc97 	bl	800dd4c <ld_dword>
 800f41e:	4603      	mov	r3, r0
 800f420:	4a05      	ldr	r2, [pc, #20]	; (800f438 <check_fs+0xa8>)
 800f422:	4293      	cmp	r3, r2
 800f424:	d101      	bne.n	800f42a <check_fs+0x9a>
 800f426:	2300      	movs	r3, #0
 800f428:	e000      	b.n	800f42c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f42a:	2302      	movs	r3, #2
}
 800f42c:	4618      	mov	r0, r3
 800f42e:	3708      	adds	r7, #8
 800f430:	46bd      	mov	sp, r7
 800f432:	bd80      	pop	{r7, pc}
 800f434:	00544146 	.word	0x00544146
 800f438:	33544146 	.word	0x33544146

0800f43c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b096      	sub	sp, #88	; 0x58
 800f440:	af00      	add	r7, sp, #0
 800f442:	60f8      	str	r0, [r7, #12]
 800f444:	60b9      	str	r1, [r7, #8]
 800f446:	4613      	mov	r3, r2
 800f448:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	2200      	movs	r2, #0
 800f44e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f450:	68f8      	ldr	r0, [r7, #12]
 800f452:	f7ff ff59 	bl	800f308 <get_ldnumber>
 800f456:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	da01      	bge.n	800f462 <find_volume+0x26>
 800f45e:	230b      	movs	r3, #11
 800f460:	e26c      	b.n	800f93c <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f462:	4aa4      	ldr	r2, [pc, #656]	; (800f6f4 <find_volume+0x2b8>)
 800f464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f46a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d101      	bne.n	800f476 <find_volume+0x3a>
 800f472:	230c      	movs	r3, #12
 800f474:	e262      	b.n	800f93c <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 800f476:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f478:	f7fe fd50 	bl	800df1c <lock_fs>
 800f47c:	4603      	mov	r3, r0
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d101      	bne.n	800f486 <find_volume+0x4a>
 800f482:	230f      	movs	r3, #15
 800f484:	e25a      	b.n	800f93c <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 800f486:	68bb      	ldr	r3, [r7, #8]
 800f488:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f48a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f48c:	79fb      	ldrb	r3, [r7, #7]
 800f48e:	f023 0301 	bic.w	r3, r3, #1
 800f492:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f496:	781b      	ldrb	r3, [r3, #0]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d01a      	beq.n	800f4d2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800f49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f49e:	785b      	ldrb	r3, [r3, #1]
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	f7fe fb9d 	bl	800dbe0 <disk_status>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f4ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f4b0:	f003 0301 	and.w	r3, r3, #1
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d10c      	bne.n	800f4d2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f4b8:	79fb      	ldrb	r3, [r7, #7]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d007      	beq.n	800f4ce <find_volume+0x92>
 800f4be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f4c2:	f003 0304 	and.w	r3, r3, #4
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d001      	beq.n	800f4ce <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800f4ca:	230a      	movs	r3, #10
 800f4cc:	e236      	b.n	800f93c <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	e234      	b.n	800f93c <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f4d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4da:	b2da      	uxtb	r2, r3
 800f4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4de:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4e2:	785b      	ldrb	r3, [r3, #1]
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	f7fe fb95 	bl	800dc14 <disk_initialize>
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f4f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f4f4:	f003 0301 	and.w	r3, r3, #1
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d001      	beq.n	800f500 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f4fc:	2303      	movs	r3, #3
 800f4fe:	e21d      	b.n	800f93c <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f500:	79fb      	ldrb	r3, [r7, #7]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d007      	beq.n	800f516 <find_volume+0xda>
 800f506:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f50a:	f003 0304 	and.w	r3, r3, #4
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d001      	beq.n	800f516 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800f512:	230a      	movs	r3, #10
 800f514:	e212      	b.n	800f93c <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800f516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f518:	7858      	ldrb	r0, [r3, #1]
 800f51a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f51c:	330c      	adds	r3, #12
 800f51e:	461a      	mov	r2, r3
 800f520:	2102      	movs	r1, #2
 800f522:	f7fe fbdd 	bl	800dce0 <disk_ioctl>
 800f526:	4603      	mov	r3, r0
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d001      	beq.n	800f530 <find_volume+0xf4>
 800f52c:	2301      	movs	r3, #1
 800f52e:	e205      	b.n	800f93c <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800f530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f532:	899b      	ldrh	r3, [r3, #12]
 800f534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f538:	d80d      	bhi.n	800f556 <find_volume+0x11a>
 800f53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f53c:	899b      	ldrh	r3, [r3, #12]
 800f53e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f542:	d308      	bcc.n	800f556 <find_volume+0x11a>
 800f544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f546:	899b      	ldrh	r3, [r3, #12]
 800f548:	461a      	mov	r2, r3
 800f54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f54c:	899b      	ldrh	r3, [r3, #12]
 800f54e:	3b01      	subs	r3, #1
 800f550:	4013      	ands	r3, r2
 800f552:	2b00      	cmp	r3, #0
 800f554:	d001      	beq.n	800f55a <find_volume+0x11e>
 800f556:	2301      	movs	r3, #1
 800f558:	e1f0      	b.n	800f93c <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f55a:	2300      	movs	r3, #0
 800f55c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f55e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f560:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f562:	f7ff ff15 	bl	800f390 <check_fs>
 800f566:	4603      	mov	r3, r0
 800f568:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f56c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f570:	2b02      	cmp	r3, #2
 800f572:	d14b      	bne.n	800f60c <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f574:	2300      	movs	r3, #0
 800f576:	643b      	str	r3, [r7, #64]	; 0x40
 800f578:	e01f      	b.n	800f5ba <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f57c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800f580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f582:	011b      	lsls	r3, r3, #4
 800f584:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f588:	4413      	add	r3, r2
 800f58a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f58e:	3304      	adds	r3, #4
 800f590:	781b      	ldrb	r3, [r3, #0]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d006      	beq.n	800f5a4 <find_volume+0x168>
 800f596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f598:	3308      	adds	r3, #8
 800f59a:	4618      	mov	r0, r3
 800f59c:	f7fe fbd6 	bl	800dd4c <ld_dword>
 800f5a0:	4602      	mov	r2, r0
 800f5a2:	e000      	b.n	800f5a6 <find_volume+0x16a>
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5a8:	009b      	lsls	r3, r3, #2
 800f5aa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f5ae:	440b      	add	r3, r1
 800f5b0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f5b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5b6:	3301      	adds	r3, #1
 800f5b8:	643b      	str	r3, [r7, #64]	; 0x40
 800f5ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5bc:	2b03      	cmp	r3, #3
 800f5be:	d9dc      	bls.n	800f57a <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f5c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d002      	beq.n	800f5d0 <find_volume+0x194>
 800f5ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5cc:	3b01      	subs	r3, #1
 800f5ce:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f5d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5d2:	009b      	lsls	r3, r3, #2
 800f5d4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f5d8:	4413      	add	r3, r2
 800f5da:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f5de:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f5e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d005      	beq.n	800f5f2 <find_volume+0x1b6>
 800f5e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f5e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f5ea:	f7ff fed1 	bl	800f390 <check_fs>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	e000      	b.n	800f5f4 <find_volume+0x1b8>
 800f5f2:	2303      	movs	r3, #3
 800f5f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f5f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f5fc:	2b01      	cmp	r3, #1
 800f5fe:	d905      	bls.n	800f60c <find_volume+0x1d0>
 800f600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f602:	3301      	adds	r3, #1
 800f604:	643b      	str	r3, [r7, #64]	; 0x40
 800f606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f608:	2b03      	cmp	r3, #3
 800f60a:	d9e1      	bls.n	800f5d0 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f60c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f610:	2b04      	cmp	r3, #4
 800f612:	d101      	bne.n	800f618 <find_volume+0x1dc>
 800f614:	2301      	movs	r3, #1
 800f616:	e191      	b.n	800f93c <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f618:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f61c:	2b01      	cmp	r3, #1
 800f61e:	d901      	bls.n	800f624 <find_volume+0x1e8>
 800f620:	230d      	movs	r3, #13
 800f622:	e18b      	b.n	800f93c <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f626:	3338      	adds	r3, #56	; 0x38
 800f628:	330b      	adds	r3, #11
 800f62a:	4618      	mov	r0, r3
 800f62c:	f7fe fb76 	bl	800dd1c <ld_word>
 800f630:	4603      	mov	r3, r0
 800f632:	461a      	mov	r2, r3
 800f634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f636:	899b      	ldrh	r3, [r3, #12]
 800f638:	429a      	cmp	r2, r3
 800f63a:	d001      	beq.n	800f640 <find_volume+0x204>
 800f63c:	230d      	movs	r3, #13
 800f63e:	e17d      	b.n	800f93c <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f642:	3338      	adds	r3, #56	; 0x38
 800f644:	3316      	adds	r3, #22
 800f646:	4618      	mov	r0, r3
 800f648:	f7fe fb68 	bl	800dd1c <ld_word>
 800f64c:	4603      	mov	r3, r0
 800f64e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f652:	2b00      	cmp	r3, #0
 800f654:	d106      	bne.n	800f664 <find_volume+0x228>
 800f656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f658:	3338      	adds	r3, #56	; 0x38
 800f65a:	3324      	adds	r3, #36	; 0x24
 800f65c:	4618      	mov	r0, r3
 800f65e:	f7fe fb75 	bl	800dd4c <ld_dword>
 800f662:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f666:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f668:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f66a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f66c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800f670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f672:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f676:	789b      	ldrb	r3, [r3, #2]
 800f678:	2b01      	cmp	r3, #1
 800f67a:	d005      	beq.n	800f688 <find_volume+0x24c>
 800f67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f67e:	789b      	ldrb	r3, [r3, #2]
 800f680:	2b02      	cmp	r3, #2
 800f682:	d001      	beq.n	800f688 <find_volume+0x24c>
 800f684:	230d      	movs	r3, #13
 800f686:	e159      	b.n	800f93c <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f68a:	789b      	ldrb	r3, [r3, #2]
 800f68c:	461a      	mov	r2, r3
 800f68e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f690:	fb02 f303 	mul.w	r3, r2, r3
 800f694:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f698:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f69c:	b29a      	uxth	r2, r3
 800f69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6a0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6a4:	895b      	ldrh	r3, [r3, #10]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d008      	beq.n	800f6bc <find_volume+0x280>
 800f6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ac:	895b      	ldrh	r3, [r3, #10]
 800f6ae:	461a      	mov	r2, r3
 800f6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b2:	895b      	ldrh	r3, [r3, #10]
 800f6b4:	3b01      	subs	r3, #1
 800f6b6:	4013      	ands	r3, r2
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d001      	beq.n	800f6c0 <find_volume+0x284>
 800f6bc:	230d      	movs	r3, #13
 800f6be:	e13d      	b.n	800f93c <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f6c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6c2:	3338      	adds	r3, #56	; 0x38
 800f6c4:	3311      	adds	r3, #17
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f7fe fb28 	bl	800dd1c <ld_word>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	461a      	mov	r2, r3
 800f6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6d2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6d6:	891b      	ldrh	r3, [r3, #8]
 800f6d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f6da:	8992      	ldrh	r2, [r2, #12]
 800f6dc:	0952      	lsrs	r2, r2, #5
 800f6de:	b292      	uxth	r2, r2
 800f6e0:	fbb3 f1f2 	udiv	r1, r3, r2
 800f6e4:	fb02 f201 	mul.w	r2, r2, r1
 800f6e8:	1a9b      	subs	r3, r3, r2
 800f6ea:	b29b      	uxth	r3, r3
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d003      	beq.n	800f6f8 <find_volume+0x2bc>
 800f6f0:	230d      	movs	r3, #13
 800f6f2:	e123      	b.n	800f93c <find_volume+0x500>
 800f6f4:	200010b4 	.word	0x200010b4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f6f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6fa:	3338      	adds	r3, #56	; 0x38
 800f6fc:	3313      	adds	r3, #19
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7fe fb0c 	bl	800dd1c <ld_word>
 800f704:	4603      	mov	r3, r0
 800f706:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d106      	bne.n	800f71c <find_volume+0x2e0>
 800f70e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f710:	3338      	adds	r3, #56	; 0x38
 800f712:	3320      	adds	r3, #32
 800f714:	4618      	mov	r0, r3
 800f716:	f7fe fb19 	bl	800dd4c <ld_dword>
 800f71a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f71e:	3338      	adds	r3, #56	; 0x38
 800f720:	330e      	adds	r3, #14
 800f722:	4618      	mov	r0, r3
 800f724:	f7fe fafa 	bl	800dd1c <ld_word>
 800f728:	4603      	mov	r3, r0
 800f72a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f72c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d101      	bne.n	800f736 <find_volume+0x2fa>
 800f732:	230d      	movs	r3, #13
 800f734:	e102      	b.n	800f93c <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f736:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f73a:	4413      	add	r3, r2
 800f73c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f73e:	8911      	ldrh	r1, [r2, #8]
 800f740:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f742:	8992      	ldrh	r2, [r2, #12]
 800f744:	0952      	lsrs	r2, r2, #5
 800f746:	b292      	uxth	r2, r2
 800f748:	fbb1 f2f2 	udiv	r2, r1, r2
 800f74c:	b292      	uxth	r2, r2
 800f74e:	4413      	add	r3, r2
 800f750:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f752:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f756:	429a      	cmp	r2, r3
 800f758:	d201      	bcs.n	800f75e <find_volume+0x322>
 800f75a:	230d      	movs	r3, #13
 800f75c:	e0ee      	b.n	800f93c <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f75e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f762:	1ad3      	subs	r3, r2, r3
 800f764:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f766:	8952      	ldrh	r2, [r2, #10]
 800f768:	fbb3 f3f2 	udiv	r3, r3, r2
 800f76c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f770:	2b00      	cmp	r3, #0
 800f772:	d101      	bne.n	800f778 <find_volume+0x33c>
 800f774:	230d      	movs	r3, #13
 800f776:	e0e1      	b.n	800f93c <find_volume+0x500>
		fmt = FS_FAT32;
 800f778:	2303      	movs	r3, #3
 800f77a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f780:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f784:	4293      	cmp	r3, r2
 800f786:	d802      	bhi.n	800f78e <find_volume+0x352>
 800f788:	2302      	movs	r3, #2
 800f78a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f790:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f794:	4293      	cmp	r3, r2
 800f796:	d802      	bhi.n	800f79e <find_volume+0x362>
 800f798:	2301      	movs	r3, #1
 800f79a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7a0:	1c9a      	adds	r2, r3, #2
 800f7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7a4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800f7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f7aa:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f7ac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f7ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7b0:	441a      	add	r2, r3
 800f7b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7b4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800f7b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ba:	441a      	add	r2, r3
 800f7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7be:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800f7c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f7c4:	2b03      	cmp	r3, #3
 800f7c6:	d11e      	bne.n	800f806 <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ca:	3338      	adds	r3, #56	; 0x38
 800f7cc:	332a      	adds	r3, #42	; 0x2a
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f7fe faa4 	bl	800dd1c <ld_word>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d001      	beq.n	800f7de <find_volume+0x3a2>
 800f7da:	230d      	movs	r3, #13
 800f7dc:	e0ae      	b.n	800f93c <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e0:	891b      	ldrh	r3, [r3, #8]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d001      	beq.n	800f7ea <find_volume+0x3ae>
 800f7e6:	230d      	movs	r3, #13
 800f7e8:	e0a8      	b.n	800f93c <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ec:	3338      	adds	r3, #56	; 0x38
 800f7ee:	332c      	adds	r3, #44	; 0x2c
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f7fe faab 	bl	800dd4c <ld_dword>
 800f7f6:	4602      	mov	r2, r0
 800f7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7fa:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7fe:	69db      	ldr	r3, [r3, #28]
 800f800:	009b      	lsls	r3, r3, #2
 800f802:	647b      	str	r3, [r7, #68]	; 0x44
 800f804:	e01f      	b.n	800f846 <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f808:	891b      	ldrh	r3, [r3, #8]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d101      	bne.n	800f812 <find_volume+0x3d6>
 800f80e:	230d      	movs	r3, #13
 800f810:	e094      	b.n	800f93c <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f814:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f818:	441a      	add	r2, r3
 800f81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f81c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f81e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f822:	2b02      	cmp	r3, #2
 800f824:	d103      	bne.n	800f82e <find_volume+0x3f2>
 800f826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f828:	69db      	ldr	r3, [r3, #28]
 800f82a:	005b      	lsls	r3, r3, #1
 800f82c:	e00a      	b.n	800f844 <find_volume+0x408>
 800f82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f830:	69da      	ldr	r2, [r3, #28]
 800f832:	4613      	mov	r3, r2
 800f834:	005b      	lsls	r3, r3, #1
 800f836:	4413      	add	r3, r2
 800f838:	085a      	lsrs	r2, r3, #1
 800f83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f83c:	69db      	ldr	r3, [r3, #28]
 800f83e:	f003 0301 	and.w	r3, r3, #1
 800f842:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f844:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f848:	6a1a      	ldr	r2, [r3, #32]
 800f84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f84c:	899b      	ldrh	r3, [r3, #12]
 800f84e:	4619      	mov	r1, r3
 800f850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f852:	440b      	add	r3, r1
 800f854:	3b01      	subs	r3, #1
 800f856:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f858:	8989      	ldrh	r1, [r1, #12]
 800f85a:	fbb3 f3f1 	udiv	r3, r3, r1
 800f85e:	429a      	cmp	r2, r3
 800f860:	d201      	bcs.n	800f866 <find_volume+0x42a>
 800f862:	230d      	movs	r3, #13
 800f864:	e06a      	b.n	800f93c <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f868:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f86c:	619a      	str	r2, [r3, #24]
 800f86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f870:	699a      	ldr	r2, [r3, #24]
 800f872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f874:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800f876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f878:	2280      	movs	r2, #128	; 0x80
 800f87a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f87c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f880:	2b03      	cmp	r3, #3
 800f882:	d149      	bne.n	800f918 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f886:	3338      	adds	r3, #56	; 0x38
 800f888:	3330      	adds	r3, #48	; 0x30
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7fe fa46 	bl	800dd1c <ld_word>
 800f890:	4603      	mov	r3, r0
 800f892:	2b01      	cmp	r3, #1
 800f894:	d140      	bne.n	800f918 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f898:	3301      	adds	r3, #1
 800f89a:	4619      	mov	r1, r3
 800f89c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f89e:	f7fe fd1f 	bl	800e2e0 <move_window>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d137      	bne.n	800f918 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 800f8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8b0:	3338      	adds	r3, #56	; 0x38
 800f8b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	f7fe fa30 	bl	800dd1c <ld_word>
 800f8bc:	4603      	mov	r3, r0
 800f8be:	461a      	mov	r2, r3
 800f8c0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	d127      	bne.n	800f918 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f8c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ca:	3338      	adds	r3, #56	; 0x38
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	f7fe fa3d 	bl	800dd4c <ld_dword>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	4a1b      	ldr	r2, [pc, #108]	; (800f944 <find_volume+0x508>)
 800f8d6:	4293      	cmp	r3, r2
 800f8d8:	d11e      	bne.n	800f918 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8dc:	3338      	adds	r3, #56	; 0x38
 800f8de:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f7fe fa32 	bl	800dd4c <ld_dword>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	4a17      	ldr	r2, [pc, #92]	; (800f948 <find_volume+0x50c>)
 800f8ec:	4293      	cmp	r3, r2
 800f8ee:	d113      	bne.n	800f918 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8f2:	3338      	adds	r3, #56	; 0x38
 800f8f4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f7fe fa27 	bl	800dd4c <ld_dword>
 800f8fe:	4602      	mov	r2, r0
 800f900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f902:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f906:	3338      	adds	r3, #56	; 0x38
 800f908:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f90c:	4618      	mov	r0, r3
 800f90e:	f7fe fa1d 	bl	800dd4c <ld_dword>
 800f912:	4602      	mov	r2, r0
 800f914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f916:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f91a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f91e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f920:	4b0a      	ldr	r3, [pc, #40]	; (800f94c <find_volume+0x510>)
 800f922:	881b      	ldrh	r3, [r3, #0]
 800f924:	3301      	adds	r3, #1
 800f926:	b29a      	uxth	r2, r3
 800f928:	4b08      	ldr	r3, [pc, #32]	; (800f94c <find_volume+0x510>)
 800f92a:	801a      	strh	r2, [r3, #0]
 800f92c:	4b07      	ldr	r3, [pc, #28]	; (800f94c <find_volume+0x510>)
 800f92e:	881a      	ldrh	r2, [r3, #0]
 800f930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f932:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f934:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f936:	f7fe fc6b 	bl	800e210 <clear_lock>
#endif
	return FR_OK;
 800f93a:	2300      	movs	r3, #0
}
 800f93c:	4618      	mov	r0, r3
 800f93e:	3758      	adds	r7, #88	; 0x58
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}
 800f944:	41615252 	.word	0x41615252
 800f948:	61417272 	.word	0x61417272
 800f94c:	200010b8 	.word	0x200010b8

0800f950 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b084      	sub	sp, #16
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f95a:	2309      	movs	r3, #9
 800f95c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d02e      	beq.n	800f9c2 <validate+0x72>
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d02a      	beq.n	800f9c2 <validate+0x72>
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	781b      	ldrb	r3, [r3, #0]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d025      	beq.n	800f9c2 <validate+0x72>
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	889a      	ldrh	r2, [r3, #4]
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	88db      	ldrh	r3, [r3, #6]
 800f980:	429a      	cmp	r2, r3
 800f982:	d11e      	bne.n	800f9c2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	4618      	mov	r0, r3
 800f98a:	f7fe fac7 	bl	800df1c <lock_fs>
 800f98e:	4603      	mov	r3, r0
 800f990:	2b00      	cmp	r3, #0
 800f992:	d014      	beq.n	800f9be <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	785b      	ldrb	r3, [r3, #1]
 800f99a:	4618      	mov	r0, r3
 800f99c:	f7fe f920 	bl	800dbe0 <disk_status>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	f003 0301 	and.w	r3, r3, #1
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d102      	bne.n	800f9b0 <validate+0x60>
				res = FR_OK;
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	73fb      	strb	r3, [r7, #15]
 800f9ae:	e008      	b.n	800f9c2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	2100      	movs	r1, #0
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f7fe fac6 	bl	800df48 <unlock_fs>
 800f9bc:	e001      	b.n	800f9c2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800f9be:	230f      	movs	r3, #15
 800f9c0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f9c2:	7bfb      	ldrb	r3, [r7, #15]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d102      	bne.n	800f9ce <validate+0x7e>
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	e000      	b.n	800f9d0 <validate+0x80>
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	683a      	ldr	r2, [r7, #0]
 800f9d2:	6013      	str	r3, [r2, #0]
	return res;
 800f9d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	3710      	adds	r7, #16
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}
	...

0800f9e0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b088      	sub	sp, #32
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	60f8      	str	r0, [r7, #12]
 800f9e8:	60b9      	str	r1, [r7, #8]
 800f9ea:	4613      	mov	r3, r2
 800f9ec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f9f2:	f107 0310 	add.w	r3, r7, #16
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7ff fc86 	bl	800f308 <get_ldnumber>
 800f9fc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f9fe:	69fb      	ldr	r3, [r7, #28]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	da01      	bge.n	800fa08 <f_mount+0x28>
 800fa04:	230b      	movs	r3, #11
 800fa06:	e048      	b.n	800fa9a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fa08:	4a26      	ldr	r2, [pc, #152]	; (800faa4 <f_mount+0xc4>)
 800fa0a:	69fb      	ldr	r3, [r7, #28]
 800fa0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa10:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fa12:	69bb      	ldr	r3, [r7, #24]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d00f      	beq.n	800fa38 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fa18:	69b8      	ldr	r0, [r7, #24]
 800fa1a:	f7fe fbf9 	bl	800e210 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800fa1e:	69bb      	ldr	r3, [r7, #24]
 800fa20:	691b      	ldr	r3, [r3, #16]
 800fa22:	4618      	mov	r0, r3
 800fa24:	f001 f801 	bl	8010a2a <ff_del_syncobj>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d101      	bne.n	800fa32 <f_mount+0x52>
 800fa2e:	2302      	movs	r3, #2
 800fa30:	e033      	b.n	800fa9a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fa32:	69bb      	ldr	r3, [r7, #24]
 800fa34:	2200      	movs	r2, #0
 800fa36:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d00f      	beq.n	800fa5e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	2200      	movs	r2, #0
 800fa42:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800fa44:	69fb      	ldr	r3, [r7, #28]
 800fa46:	b2da      	uxtb	r2, r3
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	3310      	adds	r3, #16
 800fa4c:	4619      	mov	r1, r3
 800fa4e:	4610      	mov	r0, r2
 800fa50:	f000 ffcb 	bl	80109ea <ff_cre_syncobj>
 800fa54:	4603      	mov	r3, r0
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d101      	bne.n	800fa5e <f_mount+0x7e>
 800fa5a:	2302      	movs	r3, #2
 800fa5c:	e01d      	b.n	800fa9a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fa5e:	68fa      	ldr	r2, [r7, #12]
 800fa60:	4910      	ldr	r1, [pc, #64]	; (800faa4 <f_mount+0xc4>)
 800fa62:	69fb      	ldr	r3, [r7, #28]
 800fa64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d002      	beq.n	800fa74 <f_mount+0x94>
 800fa6e:	79fb      	ldrb	r3, [r7, #7]
 800fa70:	2b01      	cmp	r3, #1
 800fa72:	d001      	beq.n	800fa78 <f_mount+0x98>
 800fa74:	2300      	movs	r3, #0
 800fa76:	e010      	b.n	800fa9a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fa78:	f107 010c 	add.w	r1, r7, #12
 800fa7c:	f107 0308 	add.w	r3, r7, #8
 800fa80:	2200      	movs	r2, #0
 800fa82:	4618      	mov	r0, r3
 800fa84:	f7ff fcda 	bl	800f43c <find_volume>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	7dfa      	ldrb	r2, [r7, #23]
 800fa90:	4611      	mov	r1, r2
 800fa92:	4618      	mov	r0, r3
 800fa94:	f7fe fa58 	bl	800df48 <unlock_fs>
 800fa98:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	3720      	adds	r7, #32
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd80      	pop	{r7, pc}
 800faa2:	bf00      	nop
 800faa4:	200010b4 	.word	0x200010b4

0800faa8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b098      	sub	sp, #96	; 0x60
 800faac:	af00      	add	r7, sp, #0
 800faae:	60f8      	str	r0, [r7, #12]
 800fab0:	60b9      	str	r1, [r7, #8]
 800fab2:	4613      	mov	r3, r2
 800fab4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d101      	bne.n	800fac0 <f_open+0x18>
 800fabc:	2309      	movs	r3, #9
 800fabe:	e1c2      	b.n	800fe46 <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fac0:	79fb      	ldrb	r3, [r7, #7]
 800fac2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fac6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800fac8:	79fa      	ldrb	r2, [r7, #7]
 800faca:	f107 0110 	add.w	r1, r7, #16
 800face:	f107 0308 	add.w	r3, r7, #8
 800fad2:	4618      	mov	r0, r3
 800fad4:	f7ff fcb2 	bl	800f43c <find_volume>
 800fad8:	4603      	mov	r3, r0
 800fada:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800fade:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	f040 819f 	bne.w	800fe26 <f_open+0x37e>
		dj.obj.fs = fs;
 800fae8:	693b      	ldr	r3, [r7, #16]
 800faea:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800faec:	68ba      	ldr	r2, [r7, #8]
 800faee:	f107 0314 	add.w	r3, r7, #20
 800faf2:	4611      	mov	r1, r2
 800faf4:	4618      	mov	r0, r3
 800faf6:	f7ff fb91 	bl	800f21c <follow_path>
 800fafa:	4603      	mov	r3, r0
 800fafc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fb00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d11a      	bne.n	800fb3e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fb08:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fb0c:	b25b      	sxtb	r3, r3
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	da03      	bge.n	800fb1a <f_open+0x72>
				res = FR_INVALID_NAME;
 800fb12:	2306      	movs	r3, #6
 800fb14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fb18:	e011      	b.n	800fb3e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fb1a:	79fb      	ldrb	r3, [r7, #7]
 800fb1c:	f023 0301 	bic.w	r3, r3, #1
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	bf14      	ite	ne
 800fb24:	2301      	movne	r3, #1
 800fb26:	2300      	moveq	r3, #0
 800fb28:	b2db      	uxtb	r3, r3
 800fb2a:	461a      	mov	r2, r3
 800fb2c:	f107 0314 	add.w	r3, r7, #20
 800fb30:	4611      	mov	r1, r2
 800fb32:	4618      	mov	r0, r3
 800fb34:	f7fe fa24 	bl	800df80 <chk_lock>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fb3e:	79fb      	ldrb	r3, [r7, #7]
 800fb40:	f003 031c 	and.w	r3, r3, #28
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d07f      	beq.n	800fc48 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800fb48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d017      	beq.n	800fb80 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fb50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fb54:	2b04      	cmp	r3, #4
 800fb56:	d10e      	bne.n	800fb76 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fb58:	f7fe fa6e 	bl	800e038 <enq_lock>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d006      	beq.n	800fb70 <f_open+0xc8>
 800fb62:	f107 0314 	add.w	r3, r7, #20
 800fb66:	4618      	mov	r0, r3
 800fb68:	f7ff fa33 	bl	800efd2 <dir_register>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	e000      	b.n	800fb72 <f_open+0xca>
 800fb70:	2312      	movs	r3, #18
 800fb72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fb76:	79fb      	ldrb	r3, [r7, #7]
 800fb78:	f043 0308 	orr.w	r3, r3, #8
 800fb7c:	71fb      	strb	r3, [r7, #7]
 800fb7e:	e010      	b.n	800fba2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fb80:	7ebb      	ldrb	r3, [r7, #26]
 800fb82:	f003 0311 	and.w	r3, r3, #17
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d003      	beq.n	800fb92 <f_open+0xea>
					res = FR_DENIED;
 800fb8a:	2307      	movs	r3, #7
 800fb8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fb90:	e007      	b.n	800fba2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fb92:	79fb      	ldrb	r3, [r7, #7]
 800fb94:	f003 0304 	and.w	r3, r3, #4
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d002      	beq.n	800fba2 <f_open+0xfa>
 800fb9c:	2308      	movs	r3, #8
 800fb9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fba2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d168      	bne.n	800fc7c <f_open+0x1d4>
 800fbaa:	79fb      	ldrb	r3, [r7, #7]
 800fbac:	f003 0308 	and.w	r3, r3, #8
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d063      	beq.n	800fc7c <f_open+0x1d4>
				dw = GET_FATTIME();
 800fbb4:	f7f9 ff98 	bl	8009ae8 <get_fattime>
 800fbb8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fbba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbbc:	330e      	adds	r3, #14
 800fbbe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f7fe f901 	bl	800ddc8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fbc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbc8:	3316      	adds	r3, #22
 800fbca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f7fe f8fb 	bl	800ddc8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fbd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbd4:	330b      	adds	r3, #11
 800fbd6:	2220      	movs	r2, #32
 800fbd8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fbda:	693b      	ldr	r3, [r7, #16]
 800fbdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fbde:	4611      	mov	r1, r2
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	f7ff f905 	bl	800edf0 <ld_clust>
 800fbe6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fbe8:	693b      	ldr	r3, [r7, #16]
 800fbea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fbec:	2200      	movs	r2, #0
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f7ff f91d 	bl	800ee2e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fbf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbf6:	331c      	adds	r3, #28
 800fbf8:	2100      	movs	r1, #0
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	f7fe f8e4 	bl	800ddc8 <st_dword>
					fs->wflag = 1;
 800fc00:	693b      	ldr	r3, [r7, #16]
 800fc02:	2201      	movs	r2, #1
 800fc04:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fc06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d037      	beq.n	800fc7c <f_open+0x1d4>
						dw = fs->winsect;
 800fc0c:	693b      	ldr	r3, [r7, #16]
 800fc0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc10:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800fc12:	f107 0314 	add.w	r3, r7, #20
 800fc16:	2200      	movs	r2, #0
 800fc18:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f7fe fe0d 	bl	800e83a <remove_chain>
 800fc20:	4603      	mov	r3, r0
 800fc22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800fc26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d126      	bne.n	800fc7c <f_open+0x1d4>
							res = move_window(fs, dw);
 800fc2e:	693b      	ldr	r3, [r7, #16]
 800fc30:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7fe fb54 	bl	800e2e0 <move_window>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fc3e:	693b      	ldr	r3, [r7, #16]
 800fc40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fc42:	3a01      	subs	r2, #1
 800fc44:	615a      	str	r2, [r3, #20]
 800fc46:	e019      	b.n	800fc7c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fc48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d115      	bne.n	800fc7c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fc50:	7ebb      	ldrb	r3, [r7, #26]
 800fc52:	f003 0310 	and.w	r3, r3, #16
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d003      	beq.n	800fc62 <f_open+0x1ba>
					res = FR_NO_FILE;
 800fc5a:	2304      	movs	r3, #4
 800fc5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fc60:	e00c      	b.n	800fc7c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fc62:	79fb      	ldrb	r3, [r7, #7]
 800fc64:	f003 0302 	and.w	r3, r3, #2
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d007      	beq.n	800fc7c <f_open+0x1d4>
 800fc6c:	7ebb      	ldrb	r3, [r7, #26]
 800fc6e:	f003 0301 	and.w	r3, r3, #1
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d002      	beq.n	800fc7c <f_open+0x1d4>
						res = FR_DENIED;
 800fc76:	2307      	movs	r3, #7
 800fc78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800fc7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d128      	bne.n	800fcd6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fc84:	79fb      	ldrb	r3, [r7, #7]
 800fc86:	f003 0308 	and.w	r3, r3, #8
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d003      	beq.n	800fc96 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800fc8e:	79fb      	ldrb	r3, [r7, #7]
 800fc90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc94:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fc96:	693b      	ldr	r3, [r7, #16]
 800fc98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800fc9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fca4:	79fb      	ldrb	r3, [r7, #7]
 800fca6:	f023 0301 	bic.w	r3, r3, #1
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	bf14      	ite	ne
 800fcae:	2301      	movne	r3, #1
 800fcb0:	2300      	moveq	r3, #0
 800fcb2:	b2db      	uxtb	r3, r3
 800fcb4:	461a      	mov	r2, r3
 800fcb6:	f107 0314 	add.w	r3, r7, #20
 800fcba:	4611      	mov	r1, r2
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f7fe f9dd 	bl	800e07c <inc_lock>
 800fcc2:	4602      	mov	r2, r0
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	691b      	ldr	r3, [r3, #16]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d102      	bne.n	800fcd6 <f_open+0x22e>
 800fcd0:	2302      	movs	r3, #2
 800fcd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fcd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	f040 80a3 	bne.w	800fe26 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fce0:	693b      	ldr	r3, [r7, #16]
 800fce2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fce4:	4611      	mov	r1, r2
 800fce6:	4618      	mov	r0, r3
 800fce8:	f7ff f882 	bl	800edf0 <ld_clust>
 800fcec:	4602      	mov	r2, r0
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fcf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcf4:	331c      	adds	r3, #28
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f7fe f828 	bl	800dd4c <ld_dword>
 800fcfc:	4602      	mov	r2, r0
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	2200      	movs	r2, #0
 800fd06:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fd08:	693a      	ldr	r2, [r7, #16]
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fd0e:	693b      	ldr	r3, [r7, #16]
 800fd10:	88da      	ldrh	r2, [r3, #6]
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	79fa      	ldrb	r2, [r7, #7]
 800fd1a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	2200      	movs	r2, #0
 800fd20:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	2200      	movs	r2, #0
 800fd26:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	3330      	adds	r3, #48	; 0x30
 800fd32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fd36:	2100      	movs	r1, #0
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f7fe f892 	bl	800de62 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fd3e:	79fb      	ldrb	r3, [r7, #7]
 800fd40:	f003 0320 	and.w	r3, r3, #32
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d06e      	beq.n	800fe26 <f_open+0x37e>
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	68db      	ldr	r3, [r3, #12]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d06a      	beq.n	800fe26 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	68da      	ldr	r2, [r3, #12]
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fd58:	693b      	ldr	r3, [r7, #16]
 800fd5a:	895b      	ldrh	r3, [r3, #10]
 800fd5c:	461a      	mov	r2, r3
 800fd5e:	693b      	ldr	r3, [r7, #16]
 800fd60:	899b      	ldrh	r3, [r3, #12]
 800fd62:	fb03 f302 	mul.w	r3, r3, r2
 800fd66:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	689b      	ldr	r3, [r3, #8]
 800fd6c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	68db      	ldr	r3, [r3, #12]
 800fd72:	657b      	str	r3, [r7, #84]	; 0x54
 800fd74:	e016      	b.n	800fda4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f7fe fb6d 	bl	800e45a <get_fat>
 800fd80:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800fd82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fd84:	2b01      	cmp	r3, #1
 800fd86:	d802      	bhi.n	800fd8e <f_open+0x2e6>
 800fd88:	2302      	movs	r3, #2
 800fd8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fd8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fd90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd94:	d102      	bne.n	800fd9c <f_open+0x2f4>
 800fd96:	2301      	movs	r3, #1
 800fd98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fd9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fd9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fda0:	1ad3      	subs	r3, r2, r3
 800fda2:	657b      	str	r3, [r7, #84]	; 0x54
 800fda4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d103      	bne.n	800fdb4 <f_open+0x30c>
 800fdac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fdae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdb0:	429a      	cmp	r2, r3
 800fdb2:	d8e0      	bhi.n	800fd76 <f_open+0x2ce>
				}
				fp->clust = clst;
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fdb8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fdba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d131      	bne.n	800fe26 <f_open+0x37e>
 800fdc2:	693b      	ldr	r3, [r7, #16]
 800fdc4:	899b      	ldrh	r3, [r3, #12]
 800fdc6:	461a      	mov	r2, r3
 800fdc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fdca:	fbb3 f1f2 	udiv	r1, r3, r2
 800fdce:	fb02 f201 	mul.w	r2, r2, r1
 800fdd2:	1a9b      	subs	r3, r3, r2
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d026      	beq.n	800fe26 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fdd8:	693b      	ldr	r3, [r7, #16]
 800fdda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fddc:	4618      	mov	r0, r3
 800fdde:	f7fe fb1d 	bl	800e41c <clust2sect>
 800fde2:	6478      	str	r0, [r7, #68]	; 0x44
 800fde4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d103      	bne.n	800fdf2 <f_open+0x34a>
						res = FR_INT_ERR;
 800fdea:	2302      	movs	r3, #2
 800fdec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fdf0:	e019      	b.n	800fe26 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fdf2:	693b      	ldr	r3, [r7, #16]
 800fdf4:	899b      	ldrh	r3, [r3, #12]
 800fdf6:	461a      	mov	r2, r3
 800fdf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fdfa:	fbb3 f2f2 	udiv	r2, r3, r2
 800fdfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe00:	441a      	add	r2, r3
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fe06:	693b      	ldr	r3, [r7, #16]
 800fe08:	7858      	ldrb	r0, [r3, #1]
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	6a1a      	ldr	r2, [r3, #32]
 800fe14:	2301      	movs	r3, #1
 800fe16:	f7fd ff23 	bl	800dc60 <disk_read>
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d002      	beq.n	800fe26 <f_open+0x37e>
 800fe20:	2301      	movs	r3, #1
 800fe22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fe26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d002      	beq.n	800fe34 <f_open+0x38c>
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	2200      	movs	r2, #0
 800fe32:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fe34:	693b      	ldr	r3, [r7, #16]
 800fe36:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800fe3a:	4611      	mov	r1, r2
 800fe3c:	4618      	mov	r0, r3
 800fe3e:	f7fe f883 	bl	800df48 <unlock_fs>
 800fe42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800fe46:	4618      	mov	r0, r3
 800fe48:	3760      	adds	r7, #96	; 0x60
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd80      	pop	{r7, pc}

0800fe4e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800fe4e:	b580      	push	{r7, lr}
 800fe50:	b08c      	sub	sp, #48	; 0x30
 800fe52:	af00      	add	r7, sp, #0
 800fe54:	60f8      	str	r0, [r7, #12]
 800fe56:	60b9      	str	r1, [r7, #8]
 800fe58:	607a      	str	r2, [r7, #4]
 800fe5a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800fe5c:	68bb      	ldr	r3, [r7, #8]
 800fe5e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	2200      	movs	r2, #0
 800fe64:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	f107 0210 	add.w	r2, r7, #16
 800fe6c:	4611      	mov	r1, r2
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f7ff fd6e 	bl	800f950 <validate>
 800fe74:	4603      	mov	r3, r0
 800fe76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fe7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d107      	bne.n	800fe92 <f_write+0x44>
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	7d5b      	ldrb	r3, [r3, #21]
 800fe86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800fe8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d009      	beq.n	800fea6 <f_write+0x58>
 800fe92:	693b      	ldr	r3, [r7, #16]
 800fe94:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800fe98:	4611      	mov	r1, r2
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	f7fe f854 	bl	800df48 <unlock_fs>
 800fea0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fea4:	e192      	b.n	80101cc <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	7d1b      	ldrb	r3, [r3, #20]
 800feaa:	f003 0302 	and.w	r3, r3, #2
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d106      	bne.n	800fec0 <f_write+0x72>
 800feb2:	693b      	ldr	r3, [r7, #16]
 800feb4:	2107      	movs	r1, #7
 800feb6:	4618      	mov	r0, r3
 800feb8:	f7fe f846 	bl	800df48 <unlock_fs>
 800febc:	2307      	movs	r3, #7
 800febe:	e185      	b.n	80101cc <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	699a      	ldr	r2, [r3, #24]
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	441a      	add	r2, r3
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	699b      	ldr	r3, [r3, #24]
 800fecc:	429a      	cmp	r2, r3
 800fece:	f080 816a 	bcs.w	80101a6 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	699b      	ldr	r3, [r3, #24]
 800fed6:	43db      	mvns	r3, r3
 800fed8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800feda:	e164      	b.n	80101a6 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	699b      	ldr	r3, [r3, #24]
 800fee0:	693a      	ldr	r2, [r7, #16]
 800fee2:	8992      	ldrh	r2, [r2, #12]
 800fee4:	fbb3 f1f2 	udiv	r1, r3, r2
 800fee8:	fb02 f201 	mul.w	r2, r2, r1
 800feec:	1a9b      	subs	r3, r3, r2
 800feee:	2b00      	cmp	r3, #0
 800fef0:	f040 810f 	bne.w	8010112 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	699b      	ldr	r3, [r3, #24]
 800fef8:	693a      	ldr	r2, [r7, #16]
 800fefa:	8992      	ldrh	r2, [r2, #12]
 800fefc:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff00:	693a      	ldr	r2, [r7, #16]
 800ff02:	8952      	ldrh	r2, [r2, #10]
 800ff04:	3a01      	subs	r2, #1
 800ff06:	4013      	ands	r3, r2
 800ff08:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ff0a:	69bb      	ldr	r3, [r7, #24]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d14d      	bne.n	800ffac <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	699b      	ldr	r3, [r3, #24]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d10c      	bne.n	800ff32 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	689b      	ldr	r3, [r3, #8]
 800ff1c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800ff1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d11a      	bne.n	800ff5a <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	2100      	movs	r1, #0
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f7fe fceb 	bl	800e904 <create_chain>
 800ff2e:	62b8      	str	r0, [r7, #40]	; 0x28
 800ff30:	e013      	b.n	800ff5a <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d007      	beq.n	800ff4a <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	699b      	ldr	r3, [r3, #24]
 800ff3e:	4619      	mov	r1, r3
 800ff40:	68f8      	ldr	r0, [r7, #12]
 800ff42:	f7fe fd77 	bl	800ea34 <clmt_clust>
 800ff46:	62b8      	str	r0, [r7, #40]	; 0x28
 800ff48:	e007      	b.n	800ff5a <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ff4a:	68fa      	ldr	r2, [r7, #12]
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	69db      	ldr	r3, [r3, #28]
 800ff50:	4619      	mov	r1, r3
 800ff52:	4610      	mov	r0, r2
 800ff54:	f7fe fcd6 	bl	800e904 <create_chain>
 800ff58:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ff5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	f000 8127 	beq.w	80101b0 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ff62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff64:	2b01      	cmp	r3, #1
 800ff66:	d109      	bne.n	800ff7c <f_write+0x12e>
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	2202      	movs	r2, #2
 800ff6c:	755a      	strb	r2, [r3, #21]
 800ff6e:	693b      	ldr	r3, [r7, #16]
 800ff70:	2102      	movs	r1, #2
 800ff72:	4618      	mov	r0, r3
 800ff74:	f7fd ffe8 	bl	800df48 <unlock_fs>
 800ff78:	2302      	movs	r3, #2
 800ff7a:	e127      	b.n	80101cc <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ff7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ff82:	d109      	bne.n	800ff98 <f_write+0x14a>
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	2201      	movs	r2, #1
 800ff88:	755a      	strb	r2, [r3, #21]
 800ff8a:	693b      	ldr	r3, [r7, #16]
 800ff8c:	2101      	movs	r1, #1
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f7fd ffda 	bl	800df48 <unlock_fs>
 800ff94:	2301      	movs	r3, #1
 800ff96:	e119      	b.n	80101cc <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff9c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	689b      	ldr	r3, [r3, #8]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d102      	bne.n	800ffac <f_write+0x15e>
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ffaa:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	7d1b      	ldrb	r3, [r3, #20]
 800ffb0:	b25b      	sxtb	r3, r3
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	da1d      	bge.n	800fff2 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ffb6:	693b      	ldr	r3, [r7, #16]
 800ffb8:	7858      	ldrb	r0, [r3, #1]
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	6a1a      	ldr	r2, [r3, #32]
 800ffc4:	2301      	movs	r3, #1
 800ffc6:	f7fd fe6b 	bl	800dca0 <disk_write>
 800ffca:	4603      	mov	r3, r0
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d009      	beq.n	800ffe4 <f_write+0x196>
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	2201      	movs	r2, #1
 800ffd4:	755a      	strb	r2, [r3, #21]
 800ffd6:	693b      	ldr	r3, [r7, #16]
 800ffd8:	2101      	movs	r1, #1
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f7fd ffb4 	bl	800df48 <unlock_fs>
 800ffe0:	2301      	movs	r3, #1
 800ffe2:	e0f3      	b.n	80101cc <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	7d1b      	ldrb	r3, [r3, #20]
 800ffe8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ffec:	b2da      	uxtb	r2, r3
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fff2:	693a      	ldr	r2, [r7, #16]
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	69db      	ldr	r3, [r3, #28]
 800fff8:	4619      	mov	r1, r3
 800fffa:	4610      	mov	r0, r2
 800fffc:	f7fe fa0e 	bl	800e41c <clust2sect>
 8010000:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010002:	697b      	ldr	r3, [r7, #20]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d109      	bne.n	801001c <f_write+0x1ce>
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	2202      	movs	r2, #2
 801000c:	755a      	strb	r2, [r3, #21]
 801000e:	693b      	ldr	r3, [r7, #16]
 8010010:	2102      	movs	r1, #2
 8010012:	4618      	mov	r0, r3
 8010014:	f7fd ff98 	bl	800df48 <unlock_fs>
 8010018:	2302      	movs	r3, #2
 801001a:	e0d7      	b.n	80101cc <f_write+0x37e>
			sect += csect;
 801001c:	697a      	ldr	r2, [r7, #20]
 801001e:	69bb      	ldr	r3, [r7, #24]
 8010020:	4413      	add	r3, r2
 8010022:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010024:	693b      	ldr	r3, [r7, #16]
 8010026:	899b      	ldrh	r3, [r3, #12]
 8010028:	461a      	mov	r2, r3
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010030:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010032:	6a3b      	ldr	r3, [r7, #32]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d048      	beq.n	80100ca <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010038:	69ba      	ldr	r2, [r7, #24]
 801003a:	6a3b      	ldr	r3, [r7, #32]
 801003c:	4413      	add	r3, r2
 801003e:	693a      	ldr	r2, [r7, #16]
 8010040:	8952      	ldrh	r2, [r2, #10]
 8010042:	4293      	cmp	r3, r2
 8010044:	d905      	bls.n	8010052 <f_write+0x204>
					cc = fs->csize - csect;
 8010046:	693b      	ldr	r3, [r7, #16]
 8010048:	895b      	ldrh	r3, [r3, #10]
 801004a:	461a      	mov	r2, r3
 801004c:	69bb      	ldr	r3, [r7, #24]
 801004e:	1ad3      	subs	r3, r2, r3
 8010050:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010052:	693b      	ldr	r3, [r7, #16]
 8010054:	7858      	ldrb	r0, [r3, #1]
 8010056:	6a3b      	ldr	r3, [r7, #32]
 8010058:	697a      	ldr	r2, [r7, #20]
 801005a:	69f9      	ldr	r1, [r7, #28]
 801005c:	f7fd fe20 	bl	800dca0 <disk_write>
 8010060:	4603      	mov	r3, r0
 8010062:	2b00      	cmp	r3, #0
 8010064:	d009      	beq.n	801007a <f_write+0x22c>
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	2201      	movs	r2, #1
 801006a:	755a      	strb	r2, [r3, #21]
 801006c:	693b      	ldr	r3, [r7, #16]
 801006e:	2101      	movs	r1, #1
 8010070:	4618      	mov	r0, r3
 8010072:	f7fd ff69 	bl	800df48 <unlock_fs>
 8010076:	2301      	movs	r3, #1
 8010078:	e0a8      	b.n	80101cc <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	6a1a      	ldr	r2, [r3, #32]
 801007e:	697b      	ldr	r3, [r7, #20]
 8010080:	1ad3      	subs	r3, r2, r3
 8010082:	6a3a      	ldr	r2, [r7, #32]
 8010084:	429a      	cmp	r2, r3
 8010086:	d918      	bls.n	80100ba <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	6a1a      	ldr	r2, [r3, #32]
 8010092:	697b      	ldr	r3, [r7, #20]
 8010094:	1ad3      	subs	r3, r2, r3
 8010096:	693a      	ldr	r2, [r7, #16]
 8010098:	8992      	ldrh	r2, [r2, #12]
 801009a:	fb02 f303 	mul.w	r3, r2, r3
 801009e:	69fa      	ldr	r2, [r7, #28]
 80100a0:	18d1      	adds	r1, r2, r3
 80100a2:	693b      	ldr	r3, [r7, #16]
 80100a4:	899b      	ldrh	r3, [r3, #12]
 80100a6:	461a      	mov	r2, r3
 80100a8:	f7fd feba 	bl	800de20 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	7d1b      	ldrb	r3, [r3, #20]
 80100b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80100b4:	b2da      	uxtb	r2, r3
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80100ba:	693b      	ldr	r3, [r7, #16]
 80100bc:	899b      	ldrh	r3, [r3, #12]
 80100be:	461a      	mov	r2, r3
 80100c0:	6a3b      	ldr	r3, [r7, #32]
 80100c2:	fb02 f303 	mul.w	r3, r2, r3
 80100c6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80100c8:	e050      	b.n	801016c <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	6a1b      	ldr	r3, [r3, #32]
 80100ce:	697a      	ldr	r2, [r7, #20]
 80100d0:	429a      	cmp	r2, r3
 80100d2:	d01b      	beq.n	801010c <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	699a      	ldr	r2, [r3, #24]
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80100dc:	429a      	cmp	r2, r3
 80100de:	d215      	bcs.n	801010c <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80100e0:	693b      	ldr	r3, [r7, #16]
 80100e2:	7858      	ldrb	r0, [r3, #1]
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80100ea:	2301      	movs	r3, #1
 80100ec:	697a      	ldr	r2, [r7, #20]
 80100ee:	f7fd fdb7 	bl	800dc60 <disk_read>
 80100f2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	d009      	beq.n	801010c <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	2201      	movs	r2, #1
 80100fc:	755a      	strb	r2, [r3, #21]
 80100fe:	693b      	ldr	r3, [r7, #16]
 8010100:	2101      	movs	r1, #1
 8010102:	4618      	mov	r0, r3
 8010104:	f7fd ff20 	bl	800df48 <unlock_fs>
 8010108:	2301      	movs	r3, #1
 801010a:	e05f      	b.n	80101cc <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	697a      	ldr	r2, [r7, #20]
 8010110:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010112:	693b      	ldr	r3, [r7, #16]
 8010114:	899b      	ldrh	r3, [r3, #12]
 8010116:	4618      	mov	r0, r3
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	699b      	ldr	r3, [r3, #24]
 801011c:	693a      	ldr	r2, [r7, #16]
 801011e:	8992      	ldrh	r2, [r2, #12]
 8010120:	fbb3 f1f2 	udiv	r1, r3, r2
 8010124:	fb02 f201 	mul.w	r2, r2, r1
 8010128:	1a9b      	subs	r3, r3, r2
 801012a:	1ac3      	subs	r3, r0, r3
 801012c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801012e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	429a      	cmp	r2, r3
 8010134:	d901      	bls.n	801013a <f_write+0x2ec>
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	699b      	ldr	r3, [r3, #24]
 8010144:	693a      	ldr	r2, [r7, #16]
 8010146:	8992      	ldrh	r2, [r2, #12]
 8010148:	fbb3 f0f2 	udiv	r0, r3, r2
 801014c:	fb02 f200 	mul.w	r2, r2, r0
 8010150:	1a9b      	subs	r3, r3, r2
 8010152:	440b      	add	r3, r1
 8010154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010156:	69f9      	ldr	r1, [r7, #28]
 8010158:	4618      	mov	r0, r3
 801015a:	f7fd fe61 	bl	800de20 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	7d1b      	ldrb	r3, [r3, #20]
 8010162:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010166:	b2da      	uxtb	r2, r3
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801016c:	69fa      	ldr	r2, [r7, #28]
 801016e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010170:	4413      	add	r3, r2
 8010172:	61fb      	str	r3, [r7, #28]
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	699a      	ldr	r2, [r3, #24]
 8010178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801017a:	441a      	add	r2, r3
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	619a      	str	r2, [r3, #24]
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	68da      	ldr	r2, [r3, #12]
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	699b      	ldr	r3, [r3, #24]
 8010188:	429a      	cmp	r2, r3
 801018a:	bf38      	it	cc
 801018c:	461a      	movcc	r2, r3
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	60da      	str	r2, [r3, #12]
 8010192:	683b      	ldr	r3, [r7, #0]
 8010194:	681a      	ldr	r2, [r3, #0]
 8010196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010198:	441a      	add	r2, r3
 801019a:	683b      	ldr	r3, [r7, #0]
 801019c:	601a      	str	r2, [r3, #0]
 801019e:	687a      	ldr	r2, [r7, #4]
 80101a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a2:	1ad3      	subs	r3, r2, r3
 80101a4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	f47f ae97 	bne.w	800fedc <f_write+0x8e>
 80101ae:	e000      	b.n	80101b2 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80101b0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	7d1b      	ldrb	r3, [r3, #20]
 80101b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80101ba:	b2da      	uxtb	r2, r3
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80101c0:	693b      	ldr	r3, [r7, #16]
 80101c2:	2100      	movs	r1, #0
 80101c4:	4618      	mov	r0, r3
 80101c6:	f7fd febf 	bl	800df48 <unlock_fs>
 80101ca:	2300      	movs	r3, #0
}
 80101cc:	4618      	mov	r0, r3
 80101ce:	3730      	adds	r7, #48	; 0x30
 80101d0:	46bd      	mov	sp, r7
 80101d2:	bd80      	pop	{r7, pc}

080101d4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b086      	sub	sp, #24
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	f107 0208 	add.w	r2, r7, #8
 80101e2:	4611      	mov	r1, r2
 80101e4:	4618      	mov	r0, r3
 80101e6:	f7ff fbb3 	bl	800f950 <validate>
 80101ea:	4603      	mov	r3, r0
 80101ec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80101ee:	7dfb      	ldrb	r3, [r7, #23]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d16d      	bne.n	80102d0 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	7d1b      	ldrb	r3, [r3, #20]
 80101f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d067      	beq.n	80102d0 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	7d1b      	ldrb	r3, [r3, #20]
 8010204:	b25b      	sxtb	r3, r3
 8010206:	2b00      	cmp	r3, #0
 8010208:	da1a      	bge.n	8010240 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801020a:	68bb      	ldr	r3, [r7, #8]
 801020c:	7858      	ldrb	r0, [r3, #1]
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	6a1a      	ldr	r2, [r3, #32]
 8010218:	2301      	movs	r3, #1
 801021a:	f7fd fd41 	bl	800dca0 <disk_write>
 801021e:	4603      	mov	r3, r0
 8010220:	2b00      	cmp	r3, #0
 8010222:	d006      	beq.n	8010232 <f_sync+0x5e>
 8010224:	68bb      	ldr	r3, [r7, #8]
 8010226:	2101      	movs	r1, #1
 8010228:	4618      	mov	r0, r3
 801022a:	f7fd fe8d 	bl	800df48 <unlock_fs>
 801022e:	2301      	movs	r3, #1
 8010230:	e055      	b.n	80102de <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	7d1b      	ldrb	r3, [r3, #20]
 8010236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801023a:	b2da      	uxtb	r2, r3
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010240:	f7f9 fc52 	bl	8009ae8 <get_fattime>
 8010244:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010246:	68ba      	ldr	r2, [r7, #8]
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801024c:	4619      	mov	r1, r3
 801024e:	4610      	mov	r0, r2
 8010250:	f7fe f846 	bl	800e2e0 <move_window>
 8010254:	4603      	mov	r3, r0
 8010256:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010258:	7dfb      	ldrb	r3, [r7, #23]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d138      	bne.n	80102d0 <f_sync+0xfc>
					dir = fp->dir_ptr;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010262:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	330b      	adds	r3, #11
 8010268:	781a      	ldrb	r2, [r3, #0]
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	330b      	adds	r3, #11
 801026e:	f042 0220 	orr.w	r2, r2, #32
 8010272:	b2d2      	uxtb	r2, r2
 8010274:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	6818      	ldr	r0, [r3, #0]
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	689b      	ldr	r3, [r3, #8]
 801027e:	461a      	mov	r2, r3
 8010280:	68f9      	ldr	r1, [r7, #12]
 8010282:	f7fe fdd4 	bl	800ee2e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	f103 021c 	add.w	r2, r3, #28
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	68db      	ldr	r3, [r3, #12]
 8010290:	4619      	mov	r1, r3
 8010292:	4610      	mov	r0, r2
 8010294:	f7fd fd98 	bl	800ddc8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	3316      	adds	r3, #22
 801029c:	6939      	ldr	r1, [r7, #16]
 801029e:	4618      	mov	r0, r3
 80102a0:	f7fd fd92 	bl	800ddc8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	3312      	adds	r3, #18
 80102a8:	2100      	movs	r1, #0
 80102aa:	4618      	mov	r0, r3
 80102ac:	f7fd fd71 	bl	800dd92 <st_word>
					fs->wflag = 1;
 80102b0:	68bb      	ldr	r3, [r7, #8]
 80102b2:	2201      	movs	r2, #1
 80102b4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80102b6:	68bb      	ldr	r3, [r7, #8]
 80102b8:	4618      	mov	r0, r3
 80102ba:	f7fe f83f 	bl	800e33c <sync_fs>
 80102be:	4603      	mov	r3, r0
 80102c0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	7d1b      	ldrb	r3, [r3, #20]
 80102c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80102ca:	b2da      	uxtb	r2, r3
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80102d0:	68bb      	ldr	r3, [r7, #8]
 80102d2:	7dfa      	ldrb	r2, [r7, #23]
 80102d4:	4611      	mov	r1, r2
 80102d6:	4618      	mov	r0, r3
 80102d8:	f7fd fe36 	bl	800df48 <unlock_fs>
 80102dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80102de:	4618      	mov	r0, r3
 80102e0:	3718      	adds	r7, #24
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bd80      	pop	{r7, pc}

080102e6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80102e6:	b580      	push	{r7, lr}
 80102e8:	b084      	sub	sp, #16
 80102ea:	af00      	add	r7, sp, #0
 80102ec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80102ee:	6878      	ldr	r0, [r7, #4]
 80102f0:	f7ff ff70 	bl	80101d4 <f_sync>
 80102f4:	4603      	mov	r3, r0
 80102f6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80102f8:	7bfb      	ldrb	r3, [r7, #15]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d11d      	bne.n	801033a <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	f107 0208 	add.w	r2, r7, #8
 8010304:	4611      	mov	r1, r2
 8010306:	4618      	mov	r0, r3
 8010308:	f7ff fb22 	bl	800f950 <validate>
 801030c:	4603      	mov	r3, r0
 801030e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010310:	7bfb      	ldrb	r3, [r7, #15]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d111      	bne.n	801033a <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	691b      	ldr	r3, [r3, #16]
 801031a:	4618      	mov	r0, r3
 801031c:	f7fd ff3c 	bl	800e198 <dec_lock>
 8010320:	4603      	mov	r3, r0
 8010322:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010324:	7bfb      	ldrb	r3, [r7, #15]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d102      	bne.n	8010330 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	2200      	movs	r2, #0
 801032e:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	2100      	movs	r1, #0
 8010334:	4618      	mov	r0, r3
 8010336:	f7fd fe07 	bl	800df48 <unlock_fs>
#endif
		}
	}
	return res;
 801033a:	7bfb      	ldrb	r3, [r7, #15]
}
 801033c:	4618      	mov	r0, r3
 801033e:	3710      	adds	r7, #16
 8010340:	46bd      	mov	sp, r7
 8010342:	bd80      	pop	{r7, pc}

08010344 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b086      	sub	sp, #24
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
 801034c:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d101      	bne.n	8010358 <f_opendir+0x14>
 8010354:	2309      	movs	r3, #9
 8010356:	e06a      	b.n	801042e <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801035c:	f107 010c 	add.w	r1, r7, #12
 8010360:	463b      	mov	r3, r7
 8010362:	2200      	movs	r2, #0
 8010364:	4618      	mov	r0, r3
 8010366:	f7ff f869 	bl	800f43c <find_volume>
 801036a:	4603      	mov	r3, r0
 801036c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801036e:	7dfb      	ldrb	r3, [r7, #23]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d14f      	bne.n	8010414 <f_opendir+0xd0>
		obj->fs = fs;
 8010374:	68fa      	ldr	r2, [r7, #12]
 8010376:	693b      	ldr	r3, [r7, #16]
 8010378:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801037a:	683b      	ldr	r3, [r7, #0]
 801037c:	4619      	mov	r1, r3
 801037e:	6878      	ldr	r0, [r7, #4]
 8010380:	f7fe ff4c 	bl	800f21c <follow_path>
 8010384:	4603      	mov	r3, r0
 8010386:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8010388:	7dfb      	ldrb	r3, [r7, #23]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d13d      	bne.n	801040a <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010394:	b25b      	sxtb	r3, r3
 8010396:	2b00      	cmp	r3, #0
 8010398:	db12      	blt.n	80103c0 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801039a:	693b      	ldr	r3, [r7, #16]
 801039c:	799b      	ldrb	r3, [r3, #6]
 801039e:	f003 0310 	and.w	r3, r3, #16
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d00a      	beq.n	80103bc <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80103a6:	68fa      	ldr	r2, [r7, #12]
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	6a1b      	ldr	r3, [r3, #32]
 80103ac:	4619      	mov	r1, r3
 80103ae:	4610      	mov	r0, r2
 80103b0:	f7fe fd1e 	bl	800edf0 <ld_clust>
 80103b4:	4602      	mov	r2, r0
 80103b6:	693b      	ldr	r3, [r7, #16]
 80103b8:	609a      	str	r2, [r3, #8]
 80103ba:	e001      	b.n	80103c0 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80103bc:	2305      	movs	r3, #5
 80103be:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80103c0:	7dfb      	ldrb	r3, [r7, #23]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d121      	bne.n	801040a <f_opendir+0xc6>
				obj->id = fs->id;
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	88da      	ldrh	r2, [r3, #6]
 80103ca:	693b      	ldr	r3, [r7, #16]
 80103cc:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80103ce:	2100      	movs	r1, #0
 80103d0:	6878      	ldr	r0, [r7, #4]
 80103d2:	f7fe fb67 	bl	800eaa4 <dir_sdi>
 80103d6:	4603      	mov	r3, r0
 80103d8:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80103da:	7dfb      	ldrb	r3, [r7, #23]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d114      	bne.n	801040a <f_opendir+0xc6>
					if (obj->sclust) {
 80103e0:	693b      	ldr	r3, [r7, #16]
 80103e2:	689b      	ldr	r3, [r3, #8]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d00d      	beq.n	8010404 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80103e8:	2100      	movs	r1, #0
 80103ea:	6878      	ldr	r0, [r7, #4]
 80103ec:	f7fd fe46 	bl	800e07c <inc_lock>
 80103f0:	4602      	mov	r2, r0
 80103f2:	693b      	ldr	r3, [r7, #16]
 80103f4:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80103f6:	693b      	ldr	r3, [r7, #16]
 80103f8:	691b      	ldr	r3, [r3, #16]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d105      	bne.n	801040a <f_opendir+0xc6>
 80103fe:	2312      	movs	r3, #18
 8010400:	75fb      	strb	r3, [r7, #23]
 8010402:	e002      	b.n	801040a <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8010404:	693b      	ldr	r3, [r7, #16]
 8010406:	2200      	movs	r2, #0
 8010408:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801040a:	7dfb      	ldrb	r3, [r7, #23]
 801040c:	2b04      	cmp	r3, #4
 801040e:	d101      	bne.n	8010414 <f_opendir+0xd0>
 8010410:	2305      	movs	r3, #5
 8010412:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8010414:	7dfb      	ldrb	r3, [r7, #23]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d002      	beq.n	8010420 <f_opendir+0xdc>
 801041a:	693b      	ldr	r3, [r7, #16]
 801041c:	2200      	movs	r2, #0
 801041e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	7dfa      	ldrb	r2, [r7, #23]
 8010424:	4611      	mov	r1, r2
 8010426:	4618      	mov	r0, r3
 8010428:	f7fd fd8e 	bl	800df48 <unlock_fs>
 801042c:	7dfb      	ldrb	r3, [r7, #23]
}
 801042e:	4618      	mov	r0, r3
 8010430:	3718      	adds	r7, #24
 8010432:	46bd      	mov	sp, r7
 8010434:	bd80      	pop	{r7, pc}

08010436 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8010436:	b580      	push	{r7, lr}
 8010438:	b084      	sub	sp, #16
 801043a:	af00      	add	r7, sp, #0
 801043c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	f107 0208 	add.w	r2, r7, #8
 8010444:	4611      	mov	r1, r2
 8010446:	4618      	mov	r0, r3
 8010448:	f7ff fa82 	bl	800f950 <validate>
 801044c:	4603      	mov	r3, r0
 801044e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010450:	7bfb      	ldrb	r3, [r7, #15]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d115      	bne.n	8010482 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	691b      	ldr	r3, [r3, #16]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d006      	beq.n	801046c <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	691b      	ldr	r3, [r3, #16]
 8010462:	4618      	mov	r0, r3
 8010464:	f7fd fe98 	bl	800e198 <dec_lock>
 8010468:	4603      	mov	r3, r0
 801046a:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 801046c:	7bfb      	ldrb	r3, [r7, #15]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d102      	bne.n	8010478 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	2200      	movs	r2, #0
 8010476:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 8010478:	68bb      	ldr	r3, [r7, #8]
 801047a:	2100      	movs	r1, #0
 801047c:	4618      	mov	r0, r3
 801047e:	f7fd fd63 	bl	800df48 <unlock_fs>
#endif
	}
	return res;
 8010482:	7bfb      	ldrb	r3, [r7, #15]
}
 8010484:	4618      	mov	r0, r3
 8010486:	3710      	adds	r7, #16
 8010488:	46bd      	mov	sp, r7
 801048a:	bd80      	pop	{r7, pc}

0801048c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b084      	sub	sp, #16
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	f107 0208 	add.w	r2, r7, #8
 801049c:	4611      	mov	r1, r2
 801049e:	4618      	mov	r0, r3
 80104a0:	f7ff fa56 	bl	800f950 <validate>
 80104a4:	4603      	mov	r3, r0
 80104a6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80104a8:	7bfb      	ldrb	r3, [r7, #15]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d126      	bne.n	80104fc <f_readdir+0x70>
		if (!fno) {
 80104ae:	683b      	ldr	r3, [r7, #0]
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d106      	bne.n	80104c2 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80104b4:	2100      	movs	r1, #0
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	f7fe faf4 	bl	800eaa4 <dir_sdi>
 80104bc:	4603      	mov	r3, r0
 80104be:	73fb      	strb	r3, [r7, #15]
 80104c0:	e01c      	b.n	80104fc <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80104c2:	2100      	movs	r1, #0
 80104c4:	6878      	ldr	r0, [r7, #4]
 80104c6:	f7fe fcd2 	bl	800ee6e <dir_read>
 80104ca:	4603      	mov	r3, r0
 80104cc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80104ce:	7bfb      	ldrb	r3, [r7, #15]
 80104d0:	2b04      	cmp	r3, #4
 80104d2:	d101      	bne.n	80104d8 <f_readdir+0x4c>
 80104d4:	2300      	movs	r3, #0
 80104d6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80104d8:	7bfb      	ldrb	r3, [r7, #15]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d10e      	bne.n	80104fc <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80104de:	6839      	ldr	r1, [r7, #0]
 80104e0:	6878      	ldr	r0, [r7, #4]
 80104e2:	f7fe fda8 	bl	800f036 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80104e6:	2100      	movs	r1, #0
 80104e8:	6878      	ldr	r0, [r7, #4]
 80104ea:	f7fe fb64 	bl	800ebb6 <dir_next>
 80104ee:	4603      	mov	r3, r0
 80104f0:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80104f2:	7bfb      	ldrb	r3, [r7, #15]
 80104f4:	2b04      	cmp	r3, #4
 80104f6:	d101      	bne.n	80104fc <f_readdir+0x70>
 80104f8:	2300      	movs	r3, #0
 80104fa:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80104fc:	68bb      	ldr	r3, [r7, #8]
 80104fe:	7bfa      	ldrb	r2, [r7, #15]
 8010500:	4611      	mov	r1, r2
 8010502:	4618      	mov	r0, r3
 8010504:	f7fd fd20 	bl	800df48 <unlock_fs>
 8010508:	7bfb      	ldrb	r3, [r7, #15]
}
 801050a:	4618      	mov	r0, r3
 801050c:	3710      	adds	r7, #16
 801050e:	46bd      	mov	sp, r7
 8010510:	bd80      	pop	{r7, pc}

08010512 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010512:	b580      	push	{r7, lr}
 8010514:	b090      	sub	sp, #64	; 0x40
 8010516:	af00      	add	r7, sp, #0
 8010518:	6078      	str	r0, [r7, #4]
 801051a:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 801051c:	f107 010c 	add.w	r1, r7, #12
 8010520:	1d3b      	adds	r3, r7, #4
 8010522:	2200      	movs	r2, #0
 8010524:	4618      	mov	r0, r3
 8010526:	f7fe ff89 	bl	800f43c <find_volume>
 801052a:	4603      	mov	r3, r0
 801052c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8010530:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010534:	2b00      	cmp	r3, #0
 8010536:	d11f      	bne.n	8010578 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010538:	687a      	ldr	r2, [r7, #4]
 801053a:	f107 030c 	add.w	r3, r7, #12
 801053e:	4611      	mov	r1, r2
 8010540:	4618      	mov	r0, r3
 8010542:	f7fe fe6b 	bl	800f21c <follow_path>
 8010546:	4603      	mov	r3, r0
 8010548:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 801054c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010550:	2b00      	cmp	r3, #0
 8010552:	d111      	bne.n	8010578 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8010554:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010558:	b25b      	sxtb	r3, r3
 801055a:	2b00      	cmp	r3, #0
 801055c:	da03      	bge.n	8010566 <f_stat+0x54>
				res = FR_INVALID_NAME;
 801055e:	2306      	movs	r3, #6
 8010560:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010564:	e008      	b.n	8010578 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d005      	beq.n	8010578 <f_stat+0x66>
 801056c:	f107 030c 	add.w	r3, r7, #12
 8010570:	6839      	ldr	r1, [r7, #0]
 8010572:	4618      	mov	r0, r3
 8010574:	f7fe fd5f 	bl	800f036 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801057e:	4611      	mov	r1, r2
 8010580:	4618      	mov	r0, r3
 8010582:	f7fd fce1 	bl	800df48 <unlock_fs>
 8010586:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801058a:	4618      	mov	r0, r3
 801058c:	3740      	adds	r7, #64	; 0x40
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}

08010592 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8010592:	b580      	push	{r7, lr}
 8010594:	b092      	sub	sp, #72	; 0x48
 8010596:	af00      	add	r7, sp, #0
 8010598:	60f8      	str	r0, [r7, #12]
 801059a:	60b9      	str	r1, [r7, #8]
 801059c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801059e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80105a2:	f107 030c 	add.w	r3, r7, #12
 80105a6:	2200      	movs	r2, #0
 80105a8:	4618      	mov	r0, r3
 80105aa:	f7fe ff47 	bl	800f43c <find_volume>
 80105ae:	4603      	mov	r3, r0
 80105b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80105b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	f040 8099 	bne.w	80106f0 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80105be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80105c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105c6:	699a      	ldr	r2, [r3, #24]
 80105c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ca:	69db      	ldr	r3, [r3, #28]
 80105cc:	3b02      	subs	r3, #2
 80105ce:	429a      	cmp	r2, r3
 80105d0:	d804      	bhi.n	80105dc <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80105d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d4:	699a      	ldr	r2, [r3, #24]
 80105d6:	68bb      	ldr	r3, [r7, #8]
 80105d8:	601a      	str	r2, [r3, #0]
 80105da:	e089      	b.n	80106f0 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80105dc:	2300      	movs	r3, #0
 80105de:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80105e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e2:	781b      	ldrb	r3, [r3, #0]
 80105e4:	2b01      	cmp	r3, #1
 80105e6:	d128      	bne.n	801063a <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80105e8:	2302      	movs	r3, #2
 80105ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80105ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ee:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80105f0:	f107 0314 	add.w	r3, r7, #20
 80105f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80105f6:	4618      	mov	r0, r3
 80105f8:	f7fd ff2f 	bl	800e45a <get_fat>
 80105fc:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80105fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010600:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010604:	d103      	bne.n	801060e <f_getfree+0x7c>
 8010606:	2301      	movs	r3, #1
 8010608:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801060c:	e063      	b.n	80106d6 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 801060e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010610:	2b01      	cmp	r3, #1
 8010612:	d103      	bne.n	801061c <f_getfree+0x8a>
 8010614:	2302      	movs	r3, #2
 8010616:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801061a:	e05c      	b.n	80106d6 <f_getfree+0x144>
					if (stat == 0) nfree++;
 801061c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801061e:	2b00      	cmp	r3, #0
 8010620:	d102      	bne.n	8010628 <f_getfree+0x96>
 8010622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010624:	3301      	adds	r3, #1
 8010626:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8010628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801062a:	3301      	adds	r3, #1
 801062c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801062e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010630:	69db      	ldr	r3, [r3, #28]
 8010632:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010634:	429a      	cmp	r2, r3
 8010636:	d3db      	bcc.n	80105f0 <f_getfree+0x5e>
 8010638:	e04d      	b.n	80106d6 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 801063a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801063c:	69db      	ldr	r3, [r3, #28]
 801063e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010644:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8010646:	2300      	movs	r3, #0
 8010648:	637b      	str	r3, [r7, #52]	; 0x34
 801064a:	2300      	movs	r3, #0
 801064c:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 801064e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010650:	2b00      	cmp	r3, #0
 8010652:	d113      	bne.n	801067c <f_getfree+0xea>
							res = move_window(fs, sect++);
 8010654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010658:	1c5a      	adds	r2, r3, #1
 801065a:	63ba      	str	r2, [r7, #56]	; 0x38
 801065c:	4619      	mov	r1, r3
 801065e:	f7fd fe3f 	bl	800e2e0 <move_window>
 8010662:	4603      	mov	r3, r0
 8010664:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8010668:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801066c:	2b00      	cmp	r3, #0
 801066e:	d131      	bne.n	80106d4 <f_getfree+0x142>
							p = fs->win;
 8010670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010672:	3338      	adds	r3, #56	; 0x38
 8010674:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8010676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010678:	899b      	ldrh	r3, [r3, #12]
 801067a:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 801067c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801067e:	781b      	ldrb	r3, [r3, #0]
 8010680:	2b02      	cmp	r3, #2
 8010682:	d10f      	bne.n	80106a4 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8010684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010686:	f7fd fb49 	bl	800dd1c <ld_word>
 801068a:	4603      	mov	r3, r0
 801068c:	2b00      	cmp	r3, #0
 801068e:	d102      	bne.n	8010696 <f_getfree+0x104>
 8010690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010692:	3301      	adds	r3, #1
 8010694:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8010696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010698:	3302      	adds	r3, #2
 801069a:	633b      	str	r3, [r7, #48]	; 0x30
 801069c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801069e:	3b02      	subs	r3, #2
 80106a0:	637b      	str	r3, [r7, #52]	; 0x34
 80106a2:	e010      	b.n	80106c6 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80106a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80106a6:	f7fd fb51 	bl	800dd4c <ld_dword>
 80106aa:	4603      	mov	r3, r0
 80106ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d102      	bne.n	80106ba <f_getfree+0x128>
 80106b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106b6:	3301      	adds	r3, #1
 80106b8:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80106ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106bc:	3304      	adds	r3, #4
 80106be:	633b      	str	r3, [r7, #48]	; 0x30
 80106c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106c2:	3b04      	subs	r3, #4
 80106c4:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80106c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106c8:	3b01      	subs	r3, #1
 80106ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d1bd      	bne.n	801064e <f_getfree+0xbc>
 80106d2:	e000      	b.n	80106d6 <f_getfree+0x144>
							if (res != FR_OK) break;
 80106d4:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80106d6:	68bb      	ldr	r3, [r7, #8]
 80106d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80106da:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80106dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80106e0:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80106e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106e4:	791a      	ldrb	r2, [r3, #4]
 80106e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106e8:	f042 0201 	orr.w	r2, r2, #1
 80106ec:	b2d2      	uxtb	r2, r2
 80106ee:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80106f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106f2:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80106f6:	4611      	mov	r1, r2
 80106f8:	4618      	mov	r0, r3
 80106fa:	f7fd fc25 	bl	800df48 <unlock_fs>
 80106fe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8010702:	4618      	mov	r0, r3
 8010704:	3748      	adds	r7, #72	; 0x48
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}

0801070a <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 801070a:	b580      	push	{r7, lr}
 801070c:	b096      	sub	sp, #88	; 0x58
 801070e:	af00      	add	r7, sp, #0
 8010710:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8010712:	f107 0108 	add.w	r1, r7, #8
 8010716:	1d3b      	adds	r3, r7, #4
 8010718:	2202      	movs	r2, #2
 801071a:	4618      	mov	r0, r3
 801071c:	f7fe fe8e 	bl	800f43c <find_volume>
 8010720:	4603      	mov	r3, r0
 8010722:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8010726:	68bb      	ldr	r3, [r7, #8]
 8010728:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 801072a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801072e:	2b00      	cmp	r3, #0
 8010730:	f040 80f2 	bne.w	8010918 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8010734:	687a      	ldr	r2, [r7, #4]
 8010736:	f107 030c 	add.w	r3, r7, #12
 801073a:	4611      	mov	r1, r2
 801073c:	4618      	mov	r0, r3
 801073e:	f7fe fd6d 	bl	800f21c <follow_path>
 8010742:	4603      	mov	r3, r0
 8010744:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8010748:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801074c:	2b00      	cmp	r3, #0
 801074e:	d102      	bne.n	8010756 <f_mkdir+0x4c>
 8010750:	2308      	movs	r3, #8
 8010752:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8010756:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801075a:	2b04      	cmp	r3, #4
 801075c:	f040 80dc 	bne.w	8010918 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8010760:	f107 030c 	add.w	r3, r7, #12
 8010764:	2100      	movs	r1, #0
 8010766:	4618      	mov	r0, r3
 8010768:	f7fe f8cc 	bl	800e904 <create_chain>
 801076c:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801076e:	68bb      	ldr	r3, [r7, #8]
 8010770:	895b      	ldrh	r3, [r3, #10]
 8010772:	461a      	mov	r2, r3
 8010774:	68bb      	ldr	r3, [r7, #8]
 8010776:	899b      	ldrh	r3, [r3, #12]
 8010778:	fb03 f302 	mul.w	r3, r3, r2
 801077c:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 801077e:	2300      	movs	r3, #0
 8010780:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8010784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010786:	2b00      	cmp	r3, #0
 8010788:	d102      	bne.n	8010790 <f_mkdir+0x86>
 801078a:	2307      	movs	r3, #7
 801078c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8010790:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010792:	2b01      	cmp	r3, #1
 8010794:	d102      	bne.n	801079c <f_mkdir+0x92>
 8010796:	2302      	movs	r3, #2
 8010798:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801079c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801079e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80107a2:	d102      	bne.n	80107aa <f_mkdir+0xa0>
 80107a4:	2301      	movs	r3, #1
 80107a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80107aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d106      	bne.n	80107c0 <f_mkdir+0xb6>
 80107b2:	68bb      	ldr	r3, [r7, #8]
 80107b4:	4618      	mov	r0, r3
 80107b6:	f7fd fd4f 	bl	800e258 <sync_window>
 80107ba:	4603      	mov	r3, r0
 80107bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80107c0:	f7f9 f992 	bl	8009ae8 <get_fattime>
 80107c4:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80107c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d16c      	bne.n	80108a8 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80107d2:	4618      	mov	r0, r3
 80107d4:	f7fd fe22 	bl	800e41c <clust2sect>
 80107d8:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80107da:	68bb      	ldr	r3, [r7, #8]
 80107dc:	3338      	adds	r3, #56	; 0x38
 80107de:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80107e0:	68bb      	ldr	r3, [r7, #8]
 80107e2:	899b      	ldrh	r3, [r3, #12]
 80107e4:	461a      	mov	r2, r3
 80107e6:	2100      	movs	r1, #0
 80107e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80107ea:	f7fd fb3a 	bl	800de62 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80107ee:	220b      	movs	r2, #11
 80107f0:	2120      	movs	r1, #32
 80107f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80107f4:	f7fd fb35 	bl	800de62 <mem_set>
					dir[DIR_Name] = '.';
 80107f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107fa:	222e      	movs	r2, #46	; 0x2e
 80107fc:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80107fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010800:	330b      	adds	r3, #11
 8010802:	2210      	movs	r2, #16
 8010804:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8010806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010808:	3316      	adds	r3, #22
 801080a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801080c:	4618      	mov	r0, r3
 801080e:	f7fd fadb 	bl	800ddc8 <st_dword>
					st_clust(fs, dir, dcl);
 8010812:	68bb      	ldr	r3, [r7, #8]
 8010814:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010816:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010818:	4618      	mov	r0, r3
 801081a:	f7fe fb08 	bl	800ee2e <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 801081e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010820:	3320      	adds	r3, #32
 8010822:	2220      	movs	r2, #32
 8010824:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010826:	4618      	mov	r0, r3
 8010828:	f7fd fafa 	bl	800de20 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801082c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801082e:	3321      	adds	r3, #33	; 0x21
 8010830:	222e      	movs	r2, #46	; 0x2e
 8010832:	701a      	strb	r2, [r3, #0]
 8010834:	697b      	ldr	r3, [r7, #20]
 8010836:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8010838:	68bb      	ldr	r3, [r7, #8]
 801083a:	781b      	ldrb	r3, [r3, #0]
 801083c:	2b03      	cmp	r3, #3
 801083e:	d106      	bne.n	801084e <f_mkdir+0x144>
 8010840:	68bb      	ldr	r3, [r7, #8]
 8010842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010844:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010846:	429a      	cmp	r2, r3
 8010848:	d101      	bne.n	801084e <f_mkdir+0x144>
 801084a:	2300      	movs	r3, #0
 801084c:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 801084e:	68b8      	ldr	r0, [r7, #8]
 8010850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010852:	3320      	adds	r3, #32
 8010854:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010856:	4619      	mov	r1, r3
 8010858:	f7fe fae9 	bl	800ee2e <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801085c:	68bb      	ldr	r3, [r7, #8]
 801085e:	895b      	ldrh	r3, [r3, #10]
 8010860:	653b      	str	r3, [r7, #80]	; 0x50
 8010862:	e01c      	b.n	801089e <f_mkdir+0x194>
					fs->winsect = dsc++;
 8010864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010866:	1c5a      	adds	r2, r3, #1
 8010868:	64fa      	str	r2, [r7, #76]	; 0x4c
 801086a:	68ba      	ldr	r2, [r7, #8]
 801086c:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 801086e:	68bb      	ldr	r3, [r7, #8]
 8010870:	2201      	movs	r2, #1
 8010872:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8010874:	68bb      	ldr	r3, [r7, #8]
 8010876:	4618      	mov	r0, r3
 8010878:	f7fd fcee 	bl	800e258 <sync_window>
 801087c:	4603      	mov	r3, r0
 801087e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8010882:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010886:	2b00      	cmp	r3, #0
 8010888:	d10d      	bne.n	80108a6 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 801088a:	68bb      	ldr	r3, [r7, #8]
 801088c:	899b      	ldrh	r3, [r3, #12]
 801088e:	461a      	mov	r2, r3
 8010890:	2100      	movs	r1, #0
 8010892:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010894:	f7fd fae5 	bl	800de62 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8010898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801089a:	3b01      	subs	r3, #1
 801089c:	653b      	str	r3, [r7, #80]	; 0x50
 801089e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d1df      	bne.n	8010864 <f_mkdir+0x15a>
 80108a4:	e000      	b.n	80108a8 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 80108a6:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80108a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d107      	bne.n	80108c0 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80108b0:	f107 030c 	add.w	r3, r7, #12
 80108b4:	4618      	mov	r0, r3
 80108b6:	f7fe fb8c 	bl	800efd2 <dir_register>
 80108ba:	4603      	mov	r3, r0
 80108bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80108c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d120      	bne.n	801090a <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80108c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ca:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80108cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108ce:	3316      	adds	r3, #22
 80108d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80108d2:	4618      	mov	r0, r3
 80108d4:	f7fd fa78 	bl	800ddc8 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80108d8:	68bb      	ldr	r3, [r7, #8]
 80108da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80108dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80108de:	4618      	mov	r0, r3
 80108e0:	f7fe faa5 	bl	800ee2e <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80108e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108e6:	330b      	adds	r3, #11
 80108e8:	2210      	movs	r2, #16
 80108ea:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	2201      	movs	r2, #1
 80108f0:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80108f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d10e      	bne.n	8010918 <f_mkdir+0x20e>
					res = sync_fs(fs);
 80108fa:	68bb      	ldr	r3, [r7, #8]
 80108fc:	4618      	mov	r0, r3
 80108fe:	f7fd fd1d 	bl	800e33c <sync_fs>
 8010902:	4603      	mov	r3, r0
 8010904:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8010908:	e006      	b.n	8010918 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 801090a:	f107 030c 	add.w	r3, r7, #12
 801090e:	2200      	movs	r2, #0
 8010910:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010912:	4618      	mov	r0, r3
 8010914:	f7fd ff91 	bl	800e83a <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8010918:	68bb      	ldr	r3, [r7, #8]
 801091a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801091e:	4611      	mov	r1, r2
 8010920:	4618      	mov	r0, r3
 8010922:	f7fd fb11 	bl	800df48 <unlock_fs>
 8010926:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801092a:	4618      	mov	r0, r3
 801092c:	3758      	adds	r7, #88	; 0x58
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}
	...

08010934 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010934:	b480      	push	{r7}
 8010936:	b087      	sub	sp, #28
 8010938:	af00      	add	r7, sp, #0
 801093a:	60f8      	str	r0, [r7, #12]
 801093c:	60b9      	str	r1, [r7, #8]
 801093e:	4613      	mov	r3, r2
 8010940:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010942:	2301      	movs	r3, #1
 8010944:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010946:	2300      	movs	r3, #0
 8010948:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801094a:	4b1f      	ldr	r3, [pc, #124]	; (80109c8 <FATFS_LinkDriverEx+0x94>)
 801094c:	7a5b      	ldrb	r3, [r3, #9]
 801094e:	b2db      	uxtb	r3, r3
 8010950:	2b00      	cmp	r3, #0
 8010952:	d131      	bne.n	80109b8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010954:	4b1c      	ldr	r3, [pc, #112]	; (80109c8 <FATFS_LinkDriverEx+0x94>)
 8010956:	7a5b      	ldrb	r3, [r3, #9]
 8010958:	b2db      	uxtb	r3, r3
 801095a:	461a      	mov	r2, r3
 801095c:	4b1a      	ldr	r3, [pc, #104]	; (80109c8 <FATFS_LinkDriverEx+0x94>)
 801095e:	2100      	movs	r1, #0
 8010960:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010962:	4b19      	ldr	r3, [pc, #100]	; (80109c8 <FATFS_LinkDriverEx+0x94>)
 8010964:	7a5b      	ldrb	r3, [r3, #9]
 8010966:	b2db      	uxtb	r3, r3
 8010968:	4a17      	ldr	r2, [pc, #92]	; (80109c8 <FATFS_LinkDriverEx+0x94>)
 801096a:	009b      	lsls	r3, r3, #2
 801096c:	4413      	add	r3, r2
 801096e:	68fa      	ldr	r2, [r7, #12]
 8010970:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010972:	4b15      	ldr	r3, [pc, #84]	; (80109c8 <FATFS_LinkDriverEx+0x94>)
 8010974:	7a5b      	ldrb	r3, [r3, #9]
 8010976:	b2db      	uxtb	r3, r3
 8010978:	461a      	mov	r2, r3
 801097a:	4b13      	ldr	r3, [pc, #76]	; (80109c8 <FATFS_LinkDriverEx+0x94>)
 801097c:	4413      	add	r3, r2
 801097e:	79fa      	ldrb	r2, [r7, #7]
 8010980:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010982:	4b11      	ldr	r3, [pc, #68]	; (80109c8 <FATFS_LinkDriverEx+0x94>)
 8010984:	7a5b      	ldrb	r3, [r3, #9]
 8010986:	b2db      	uxtb	r3, r3
 8010988:	1c5a      	adds	r2, r3, #1
 801098a:	b2d1      	uxtb	r1, r2
 801098c:	4a0e      	ldr	r2, [pc, #56]	; (80109c8 <FATFS_LinkDriverEx+0x94>)
 801098e:	7251      	strb	r1, [r2, #9]
 8010990:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010992:	7dbb      	ldrb	r3, [r7, #22]
 8010994:	3330      	adds	r3, #48	; 0x30
 8010996:	b2da      	uxtb	r2, r3
 8010998:	68bb      	ldr	r3, [r7, #8]
 801099a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801099c:	68bb      	ldr	r3, [r7, #8]
 801099e:	3301      	adds	r3, #1
 80109a0:	223a      	movs	r2, #58	; 0x3a
 80109a2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80109a4:	68bb      	ldr	r3, [r7, #8]
 80109a6:	3302      	adds	r3, #2
 80109a8:	222f      	movs	r2, #47	; 0x2f
 80109aa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80109ac:	68bb      	ldr	r3, [r7, #8]
 80109ae:	3303      	adds	r3, #3
 80109b0:	2200      	movs	r2, #0
 80109b2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80109b4:	2300      	movs	r3, #0
 80109b6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80109b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80109ba:	4618      	mov	r0, r3
 80109bc:	371c      	adds	r7, #28
 80109be:	46bd      	mov	sp, r7
 80109c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c4:	4770      	bx	lr
 80109c6:	bf00      	nop
 80109c8:	200010dc 	.word	0x200010dc

080109cc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b082      	sub	sp, #8
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
 80109d4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80109d6:	2200      	movs	r2, #0
 80109d8:	6839      	ldr	r1, [r7, #0]
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f7ff ffaa 	bl	8010934 <FATFS_LinkDriverEx>
 80109e0:	4603      	mov	r3, r0
}
 80109e2:	4618      	mov	r0, r3
 80109e4:	3708      	adds	r7, #8
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bd80      	pop	{r7, pc}

080109ea <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80109ea:	b580      	push	{r7, lr}
 80109ec:	b086      	sub	sp, #24
 80109ee:	af00      	add	r7, sp, #0
 80109f0:	4603      	mov	r3, r0
 80109f2:	6039      	str	r1, [r7, #0]
 80109f4:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 80109f6:	2300      	movs	r3, #0
 80109f8:	60fb      	str	r3, [r7, #12]
 80109fa:	2300      	movs	r3, #0
 80109fc:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 80109fe:	f107 030c 	add.w	r3, r7, #12
 8010a02:	2101      	movs	r1, #1
 8010a04:	4618      	mov	r0, r3
 8010a06:	f000 f979 	bl	8010cfc <osSemaphoreCreate>
 8010a0a:	4602      	mov	r2, r0
 8010a0c:	683b      	ldr	r3, [r7, #0]
 8010a0e:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8010a10:	683b      	ldr	r3, [r7, #0]
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	bf14      	ite	ne
 8010a18:	2301      	movne	r3, #1
 8010a1a:	2300      	moveq	r3, #0
 8010a1c:	b2db      	uxtb	r3, r3
 8010a1e:	617b      	str	r3, [r7, #20]

    return ret;
 8010a20:	697b      	ldr	r3, [r7, #20]
}
 8010a22:	4618      	mov	r0, r3
 8010a24:	3718      	adds	r7, #24
 8010a26:	46bd      	mov	sp, r7
 8010a28:	bd80      	pop	{r7, pc}

08010a2a <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8010a2a:	b580      	push	{r7, lr}
 8010a2c:	b082      	sub	sp, #8
 8010a2e:	af00      	add	r7, sp, #0
 8010a30:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8010a32:	6878      	ldr	r0, [r7, #4]
 8010a34:	f000 fa18 	bl	8010e68 <osSemaphoreDelete>
#endif
    return 1;
 8010a38:	2301      	movs	r3, #1
}
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	3708      	adds	r7, #8
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}

08010a42 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8010a42:	b580      	push	{r7, lr}
 8010a44:	b084      	sub	sp, #16
 8010a46:	af00      	add	r7, sp, #0
 8010a48:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8010a4e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	f000 f984 	bl	8010d60 <osSemaphoreWait>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d101      	bne.n	8010a62 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8010a5e:	2301      	movs	r3, #1
 8010a60:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8010a62:	68fb      	ldr	r3, [r7, #12]
}
 8010a64:	4618      	mov	r0, r3
 8010a66:	3710      	adds	r7, #16
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}

08010a6c <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b082      	sub	sp, #8
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8010a74:	6878      	ldr	r0, [r7, #4]
 8010a76:	f000 f9c1 	bl	8010dfc <osSemaphoreRelease>
#endif
}
 8010a7a:	bf00      	nop
 8010a7c:	3708      	adds	r7, #8
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	bd80      	pop	{r7, pc}

08010a82 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8010a82:	b480      	push	{r7}
 8010a84:	b085      	sub	sp, #20
 8010a86:	af00      	add	r7, sp, #0
 8010a88:	4603      	mov	r3, r0
 8010a8a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8010a90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010a94:	2b84      	cmp	r3, #132	; 0x84
 8010a96:	d005      	beq.n	8010aa4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8010a98:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	4413      	add	r3, r2
 8010aa0:	3303      	adds	r3, #3
 8010aa2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8010aa4:	68fb      	ldr	r3, [r7, #12]
}
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3714      	adds	r7, #20
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab0:	4770      	bx	lr

08010ab2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8010ab2:	b480      	push	{r7}
 8010ab4:	b083      	sub	sp, #12
 8010ab6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010ab8:	f3ef 8305 	mrs	r3, IPSR
 8010abc:	607b      	str	r3, [r7, #4]
  return(result);
 8010abe:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	bf14      	ite	ne
 8010ac4:	2301      	movne	r3, #1
 8010ac6:	2300      	moveq	r3, #0
 8010ac8:	b2db      	uxtb	r3, r3
}
 8010aca:	4618      	mov	r0, r3
 8010acc:	370c      	adds	r7, #12
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad4:	4770      	bx	lr

08010ad6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010ad6:	b580      	push	{r7, lr}
 8010ad8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8010ada:	f001 fd1f 	bl	801251c <vTaskStartScheduler>
  
  return osOK;
 8010ade:	2300      	movs	r3, #0
}
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	bd80      	pop	{r7, pc}

08010ae4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8010ae8:	f7ff ffe3 	bl	8010ab2 <inHandlerMode>
 8010aec:	4603      	mov	r3, r0
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d003      	beq.n	8010afa <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8010af2:	f001 fe3d 	bl	8012770 <xTaskGetTickCountFromISR>
 8010af6:	4603      	mov	r3, r0
 8010af8:	e002      	b.n	8010b00 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8010afa:	f001 fe29 	bl	8012750 <xTaskGetTickCount>
 8010afe:	4603      	mov	r3, r0
  }
}
 8010b00:	4618      	mov	r0, r3
 8010b02:	bd80      	pop	{r7, pc}

08010b04 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b06:	b089      	sub	sp, #36	; 0x24
 8010b08:	af04      	add	r7, sp, #16
 8010b0a:	6078      	str	r0, [r7, #4]
 8010b0c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	695b      	ldr	r3, [r3, #20]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d020      	beq.n	8010b58 <osThreadCreate+0x54>
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	699b      	ldr	r3, [r3, #24]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d01c      	beq.n	8010b58 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	685c      	ldr	r4, [r3, #4]
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681d      	ldr	r5, [r3, #0]
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	691e      	ldr	r6, [r3, #16]
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010b30:	4618      	mov	r0, r3
 8010b32:	f7ff ffa6 	bl	8010a82 <makeFreeRtosPriority>
 8010b36:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	695b      	ldr	r3, [r3, #20]
 8010b3c:	687a      	ldr	r2, [r7, #4]
 8010b3e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010b40:	9202      	str	r2, [sp, #8]
 8010b42:	9301      	str	r3, [sp, #4]
 8010b44:	9100      	str	r1, [sp, #0]
 8010b46:	683b      	ldr	r3, [r7, #0]
 8010b48:	4632      	mov	r2, r6
 8010b4a:	4629      	mov	r1, r5
 8010b4c:	4620      	mov	r0, r4
 8010b4e:	f001 fafd 	bl	801214c <xTaskCreateStatic>
 8010b52:	4603      	mov	r3, r0
 8010b54:	60fb      	str	r3, [r7, #12]
 8010b56:	e01c      	b.n	8010b92 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	685c      	ldr	r4, [r3, #4]
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010b64:	b29e      	uxth	r6, r3
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f7ff ff88 	bl	8010a82 <makeFreeRtosPriority>
 8010b72:	4602      	mov	r2, r0
 8010b74:	f107 030c 	add.w	r3, r7, #12
 8010b78:	9301      	str	r3, [sp, #4]
 8010b7a:	9200      	str	r2, [sp, #0]
 8010b7c:	683b      	ldr	r3, [r7, #0]
 8010b7e:	4632      	mov	r2, r6
 8010b80:	4629      	mov	r1, r5
 8010b82:	4620      	mov	r0, r4
 8010b84:	f001 fb45 	bl	8012212 <xTaskCreate>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	2b01      	cmp	r3, #1
 8010b8c:	d001      	beq.n	8010b92 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8010b8e:	2300      	movs	r3, #0
 8010b90:	e000      	b.n	8010b94 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8010b92:	68fb      	ldr	r3, [r7, #12]
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	3714      	adds	r7, #20
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010b9c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b084      	sub	sp, #16
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d001      	beq.n	8010bb2 <osDelay+0x16>
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	e000      	b.n	8010bb4 <osDelay+0x18>
 8010bb2:	2301      	movs	r3, #1
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f001 fc7b 	bl	80124b0 <vTaskDelay>
  
  return osOK;
 8010bba:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	3710      	adds	r7, #16
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd80      	pop	{r7, pc}

08010bc4 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b082      	sub	sp, #8
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	685b      	ldr	r3, [r3, #4]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d007      	beq.n	8010be4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	685b      	ldr	r3, [r3, #4]
 8010bd8:	4619      	mov	r1, r3
 8010bda:	2001      	movs	r0, #1
 8010bdc:	f000 fc67 	bl	80114ae <xQueueCreateMutexStatic>
 8010be0:	4603      	mov	r3, r0
 8010be2:	e003      	b.n	8010bec <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8010be4:	2001      	movs	r0, #1
 8010be6:	f000 fc4a 	bl	801147e <xQueueCreateMutex>
 8010bea:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8010bec:	4618      	mov	r0, r3
 8010bee:	3708      	adds	r7, #8
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	bd80      	pop	{r7, pc}

08010bf4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b084      	sub	sp, #16
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
 8010bfc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8010bfe:	2300      	movs	r3, #0
 8010c00:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d101      	bne.n	8010c0c <osMutexWait+0x18>
    return osErrorParameter;
 8010c08:	2380      	movs	r3, #128	; 0x80
 8010c0a:	e03a      	b.n	8010c82 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8010c10:	683b      	ldr	r3, [r7, #0]
 8010c12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010c16:	d103      	bne.n	8010c20 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8010c18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c1c:	60fb      	str	r3, [r7, #12]
 8010c1e:	e009      	b.n	8010c34 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8010c20:	683b      	ldr	r3, [r7, #0]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d006      	beq.n	8010c34 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d101      	bne.n	8010c34 <osMutexWait+0x40>
      ticks = 1;
 8010c30:	2301      	movs	r3, #1
 8010c32:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8010c34:	f7ff ff3d 	bl	8010ab2 <inHandlerMode>
 8010c38:	4603      	mov	r3, r0
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d017      	beq.n	8010c6e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8010c3e:	f107 0308 	add.w	r3, r7, #8
 8010c42:	461a      	mov	r2, r3
 8010c44:	2100      	movs	r1, #0
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f001 f882 	bl	8011d50 <xQueueReceiveFromISR>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	2b01      	cmp	r3, #1
 8010c50:	d001      	beq.n	8010c56 <osMutexWait+0x62>
      return osErrorOS;
 8010c52:	23ff      	movs	r3, #255	; 0xff
 8010c54:	e015      	b.n	8010c82 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8010c56:	68bb      	ldr	r3, [r7, #8]
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d011      	beq.n	8010c80 <osMutexWait+0x8c>
 8010c5c:	4b0b      	ldr	r3, [pc, #44]	; (8010c8c <osMutexWait+0x98>)
 8010c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c62:	601a      	str	r2, [r3, #0]
 8010c64:	f3bf 8f4f 	dsb	sy
 8010c68:	f3bf 8f6f 	isb	sy
 8010c6c:	e008      	b.n	8010c80 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8010c6e:	68f9      	ldr	r1, [r7, #12]
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	f000 ff59 	bl	8011b28 <xQueueSemaphoreTake>
 8010c76:	4603      	mov	r3, r0
 8010c78:	2b01      	cmp	r3, #1
 8010c7a:	d001      	beq.n	8010c80 <osMutexWait+0x8c>
    return osErrorOS;
 8010c7c:	23ff      	movs	r3, #255	; 0xff
 8010c7e:	e000      	b.n	8010c82 <osMutexWait+0x8e>
  }
  
  return osOK;
 8010c80:	2300      	movs	r3, #0
}
 8010c82:	4618      	mov	r0, r3
 8010c84:	3710      	adds	r7, #16
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bd80      	pop	{r7, pc}
 8010c8a:	bf00      	nop
 8010c8c:	e000ed04 	.word	0xe000ed04

08010c90 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b084      	sub	sp, #16
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8010c98:	2300      	movs	r3, #0
 8010c9a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8010ca0:	f7ff ff07 	bl	8010ab2 <inHandlerMode>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d016      	beq.n	8010cd8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8010caa:	f107 0308 	add.w	r3, r7, #8
 8010cae:	4619      	mov	r1, r3
 8010cb0:	6878      	ldr	r0, [r7, #4]
 8010cb2:	f000 fdbd 	bl	8011830 <xQueueGiveFromISR>
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	2b01      	cmp	r3, #1
 8010cba:	d001      	beq.n	8010cc0 <osMutexRelease+0x30>
      return osErrorOS;
 8010cbc:	23ff      	movs	r3, #255	; 0xff
 8010cbe:	e017      	b.n	8010cf0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d013      	beq.n	8010cee <osMutexRelease+0x5e>
 8010cc6:	4b0c      	ldr	r3, [pc, #48]	; (8010cf8 <osMutexRelease+0x68>)
 8010cc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ccc:	601a      	str	r2, [r3, #0]
 8010cce:	f3bf 8f4f 	dsb	sy
 8010cd2:	f3bf 8f6f 	isb	sy
 8010cd6:	e00a      	b.n	8010cee <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8010cd8:	2300      	movs	r3, #0
 8010cda:	2200      	movs	r2, #0
 8010cdc:	2100      	movs	r1, #0
 8010cde:	6878      	ldr	r0, [r7, #4]
 8010ce0:	f000 fc00 	bl	80114e4 <xQueueGenericSend>
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	2b01      	cmp	r3, #1
 8010ce8:	d001      	beq.n	8010cee <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8010cea:	23ff      	movs	r3, #255	; 0xff
 8010cec:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8010cee:	68fb      	ldr	r3, [r7, #12]
}
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	3710      	adds	r7, #16
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	bd80      	pop	{r7, pc}
 8010cf8:	e000ed04 	.word	0xe000ed04

08010cfc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b086      	sub	sp, #24
 8010d00:	af02      	add	r7, sp, #8
 8010d02:	6078      	str	r0, [r7, #4]
 8010d04:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	685b      	ldr	r3, [r3, #4]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d00f      	beq.n	8010d2e <osSemaphoreCreate+0x32>
    if (count == 1) {
 8010d0e:	683b      	ldr	r3, [r7, #0]
 8010d10:	2b01      	cmp	r3, #1
 8010d12:	d10a      	bne.n	8010d2a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	685b      	ldr	r3, [r3, #4]
 8010d18:	2203      	movs	r2, #3
 8010d1a:	9200      	str	r2, [sp, #0]
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	2100      	movs	r1, #0
 8010d20:	2001      	movs	r0, #1
 8010d22:	f000 faaf 	bl	8011284 <xQueueGenericCreateStatic>
 8010d26:	4603      	mov	r3, r0
 8010d28:	e016      	b.n	8010d58 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	e014      	b.n	8010d58 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8010d2e:	683b      	ldr	r3, [r7, #0]
 8010d30:	2b01      	cmp	r3, #1
 8010d32:	d110      	bne.n	8010d56 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8010d34:	2203      	movs	r2, #3
 8010d36:	2100      	movs	r1, #0
 8010d38:	2001      	movs	r0, #1
 8010d3a:	f000 fb25 	bl	8011388 <xQueueGenericCreate>
 8010d3e:	60f8      	str	r0, [r7, #12]
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d005      	beq.n	8010d52 <osSemaphoreCreate+0x56>
 8010d46:	2300      	movs	r3, #0
 8010d48:	2200      	movs	r2, #0
 8010d4a:	2100      	movs	r1, #0
 8010d4c:	68f8      	ldr	r0, [r7, #12]
 8010d4e:	f000 fbc9 	bl	80114e4 <xQueueGenericSend>
      return sema;
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	e000      	b.n	8010d58 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8010d56:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8010d58:	4618      	mov	r0, r3
 8010d5a:	3710      	adds	r7, #16
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	bd80      	pop	{r7, pc}

08010d60 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b084      	sub	sp, #16
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
 8010d68:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d101      	bne.n	8010d78 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8010d74:	2380      	movs	r3, #128	; 0x80
 8010d76:	e03a      	b.n	8010dee <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8010d78:	2300      	movs	r3, #0
 8010d7a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8010d7c:	683b      	ldr	r3, [r7, #0]
 8010d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010d82:	d103      	bne.n	8010d8c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8010d84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d88:	60fb      	str	r3, [r7, #12]
 8010d8a:	e009      	b.n	8010da0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8010d8c:	683b      	ldr	r3, [r7, #0]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d006      	beq.n	8010da0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d101      	bne.n	8010da0 <osSemaphoreWait+0x40>
      ticks = 1;
 8010d9c:	2301      	movs	r3, #1
 8010d9e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8010da0:	f7ff fe87 	bl	8010ab2 <inHandlerMode>
 8010da4:	4603      	mov	r3, r0
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d017      	beq.n	8010dda <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8010daa:	f107 0308 	add.w	r3, r7, #8
 8010dae:	461a      	mov	r2, r3
 8010db0:	2100      	movs	r1, #0
 8010db2:	6878      	ldr	r0, [r7, #4]
 8010db4:	f000 ffcc 	bl	8011d50 <xQueueReceiveFromISR>
 8010db8:	4603      	mov	r3, r0
 8010dba:	2b01      	cmp	r3, #1
 8010dbc:	d001      	beq.n	8010dc2 <osSemaphoreWait+0x62>
      return osErrorOS;
 8010dbe:	23ff      	movs	r3, #255	; 0xff
 8010dc0:	e015      	b.n	8010dee <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8010dc2:	68bb      	ldr	r3, [r7, #8]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d011      	beq.n	8010dec <osSemaphoreWait+0x8c>
 8010dc8:	4b0b      	ldr	r3, [pc, #44]	; (8010df8 <osSemaphoreWait+0x98>)
 8010dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010dce:	601a      	str	r2, [r3, #0]
 8010dd0:	f3bf 8f4f 	dsb	sy
 8010dd4:	f3bf 8f6f 	isb	sy
 8010dd8:	e008      	b.n	8010dec <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8010dda:	68f9      	ldr	r1, [r7, #12]
 8010ddc:	6878      	ldr	r0, [r7, #4]
 8010dde:	f000 fea3 	bl	8011b28 <xQueueSemaphoreTake>
 8010de2:	4603      	mov	r3, r0
 8010de4:	2b01      	cmp	r3, #1
 8010de6:	d001      	beq.n	8010dec <osSemaphoreWait+0x8c>
    return osErrorOS;
 8010de8:	23ff      	movs	r3, #255	; 0xff
 8010dea:	e000      	b.n	8010dee <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8010dec:	2300      	movs	r3, #0
}
 8010dee:	4618      	mov	r0, r3
 8010df0:	3710      	adds	r7, #16
 8010df2:	46bd      	mov	sp, r7
 8010df4:	bd80      	pop	{r7, pc}
 8010df6:	bf00      	nop
 8010df8:	e000ed04 	.word	0xe000ed04

08010dfc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b084      	sub	sp, #16
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8010e04:	2300      	movs	r3, #0
 8010e06:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8010e08:	2300      	movs	r3, #0
 8010e0a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8010e0c:	f7ff fe51 	bl	8010ab2 <inHandlerMode>
 8010e10:	4603      	mov	r3, r0
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d016      	beq.n	8010e44 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8010e16:	f107 0308 	add.w	r3, r7, #8
 8010e1a:	4619      	mov	r1, r3
 8010e1c:	6878      	ldr	r0, [r7, #4]
 8010e1e:	f000 fd07 	bl	8011830 <xQueueGiveFromISR>
 8010e22:	4603      	mov	r3, r0
 8010e24:	2b01      	cmp	r3, #1
 8010e26:	d001      	beq.n	8010e2c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8010e28:	23ff      	movs	r3, #255	; 0xff
 8010e2a:	e017      	b.n	8010e5c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010e2c:	68bb      	ldr	r3, [r7, #8]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d013      	beq.n	8010e5a <osSemaphoreRelease+0x5e>
 8010e32:	4b0c      	ldr	r3, [pc, #48]	; (8010e64 <osSemaphoreRelease+0x68>)
 8010e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e38:	601a      	str	r2, [r3, #0]
 8010e3a:	f3bf 8f4f 	dsb	sy
 8010e3e:	f3bf 8f6f 	isb	sy
 8010e42:	e00a      	b.n	8010e5a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8010e44:	2300      	movs	r3, #0
 8010e46:	2200      	movs	r2, #0
 8010e48:	2100      	movs	r1, #0
 8010e4a:	6878      	ldr	r0, [r7, #4]
 8010e4c:	f000 fb4a 	bl	80114e4 <xQueueGenericSend>
 8010e50:	4603      	mov	r3, r0
 8010e52:	2b01      	cmp	r3, #1
 8010e54:	d001      	beq.n	8010e5a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8010e56:	23ff      	movs	r3, #255	; 0xff
 8010e58:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8010e5a:	68fb      	ldr	r3, [r7, #12]
}
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	3710      	adds	r7, #16
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd80      	pop	{r7, pc}
 8010e64:	e000ed04 	.word	0xe000ed04

08010e68 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b082      	sub	sp, #8
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8010e70:	f7ff fe1f 	bl	8010ab2 <inHandlerMode>
 8010e74:	4603      	mov	r3, r0
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d001      	beq.n	8010e7e <osSemaphoreDelete+0x16>
    return osErrorISR;
 8010e7a:	2382      	movs	r3, #130	; 0x82
 8010e7c:	e003      	b.n	8010e86 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8010e7e:	6878      	ldr	r0, [r7, #4]
 8010e80:	f000 ffec 	bl	8011e5c <vQueueDelete>

  return osOK; 
 8010e84:	2300      	movs	r3, #0
}
 8010e86:	4618      	mov	r0, r3
 8010e88:	3708      	adds	r7, #8
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	bd80      	pop	{r7, pc}

08010e8e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8010e8e:	b590      	push	{r4, r7, lr}
 8010e90:	b085      	sub	sp, #20
 8010e92:	af02      	add	r7, sp, #8
 8010e94:	6078      	str	r0, [r7, #4]
 8010e96:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	689b      	ldr	r3, [r3, #8]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d011      	beq.n	8010ec4 <osMessageCreate+0x36>
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	68db      	ldr	r3, [r3, #12]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d00d      	beq.n	8010ec4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	6818      	ldr	r0, [r3, #0]
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	6859      	ldr	r1, [r3, #4]
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	689a      	ldr	r2, [r3, #8]
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	68db      	ldr	r3, [r3, #12]
 8010eb8:	2400      	movs	r4, #0
 8010eba:	9400      	str	r4, [sp, #0]
 8010ebc:	f000 f9e2 	bl	8011284 <xQueueGenericCreateStatic>
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	e008      	b.n	8010ed6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	6818      	ldr	r0, [r3, #0]
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	685b      	ldr	r3, [r3, #4]
 8010ecc:	2200      	movs	r2, #0
 8010ece:	4619      	mov	r1, r3
 8010ed0:	f000 fa5a 	bl	8011388 <xQueueGenericCreate>
 8010ed4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	370c      	adds	r7, #12
 8010eda:	46bd      	mov	sp, r7
 8010edc:	bd90      	pop	{r4, r7, pc}
	...

08010ee0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b086      	sub	sp, #24
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	60f8      	str	r0, [r7, #12]
 8010ee8:	60b9      	str	r1, [r7, #8]
 8010eea:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8010eec:	2300      	movs	r3, #0
 8010eee:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8010ef4:	697b      	ldr	r3, [r7, #20]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d101      	bne.n	8010efe <osMessagePut+0x1e>
    ticks = 1;
 8010efa:	2301      	movs	r3, #1
 8010efc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8010efe:	f7ff fdd8 	bl	8010ab2 <inHandlerMode>
 8010f02:	4603      	mov	r3, r0
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d018      	beq.n	8010f3a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8010f08:	f107 0210 	add.w	r2, r7, #16
 8010f0c:	f107 0108 	add.w	r1, r7, #8
 8010f10:	2300      	movs	r3, #0
 8010f12:	68f8      	ldr	r0, [r7, #12]
 8010f14:	f000 fbec 	bl	80116f0 <xQueueGenericSendFromISR>
 8010f18:	4603      	mov	r3, r0
 8010f1a:	2b01      	cmp	r3, #1
 8010f1c:	d001      	beq.n	8010f22 <osMessagePut+0x42>
      return osErrorOS;
 8010f1e:	23ff      	movs	r3, #255	; 0xff
 8010f20:	e018      	b.n	8010f54 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010f22:	693b      	ldr	r3, [r7, #16]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d014      	beq.n	8010f52 <osMessagePut+0x72>
 8010f28:	4b0c      	ldr	r3, [pc, #48]	; (8010f5c <osMessagePut+0x7c>)
 8010f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f2e:	601a      	str	r2, [r3, #0]
 8010f30:	f3bf 8f4f 	dsb	sy
 8010f34:	f3bf 8f6f 	isb	sy
 8010f38:	e00b      	b.n	8010f52 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8010f3a:	f107 0108 	add.w	r1, r7, #8
 8010f3e:	2300      	movs	r3, #0
 8010f40:	697a      	ldr	r2, [r7, #20]
 8010f42:	68f8      	ldr	r0, [r7, #12]
 8010f44:	f000 face 	bl	80114e4 <xQueueGenericSend>
 8010f48:	4603      	mov	r3, r0
 8010f4a:	2b01      	cmp	r3, #1
 8010f4c:	d001      	beq.n	8010f52 <osMessagePut+0x72>
      return osErrorOS;
 8010f4e:	23ff      	movs	r3, #255	; 0xff
 8010f50:	e000      	b.n	8010f54 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8010f52:	2300      	movs	r3, #0
}
 8010f54:	4618      	mov	r0, r3
 8010f56:	3718      	adds	r7, #24
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	bd80      	pop	{r7, pc}
 8010f5c:	e000ed04 	.word	0xe000ed04

08010f60 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8010f60:	b590      	push	{r4, r7, lr}
 8010f62:	b08b      	sub	sp, #44	; 0x2c
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	60f8      	str	r0, [r7, #12]
 8010f68:	60b9      	str	r1, [r7, #8]
 8010f6a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8010f6c:	68bb      	ldr	r3, [r7, #8]
 8010f6e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8010f70:	2300      	movs	r3, #0
 8010f72:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8010f74:	68bb      	ldr	r3, [r7, #8]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d10a      	bne.n	8010f90 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8010f7a:	2380      	movs	r3, #128	; 0x80
 8010f7c:	617b      	str	r3, [r7, #20]
    return event;
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	461c      	mov	r4, r3
 8010f82:	f107 0314 	add.w	r3, r7, #20
 8010f86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010f8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010f8e:	e054      	b.n	801103a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8010f90:	2300      	movs	r3, #0
 8010f92:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8010f94:	2300      	movs	r3, #0
 8010f96:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010f9e:	d103      	bne.n	8010fa8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8010fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8010fa6:	e009      	b.n	8010fbc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d006      	beq.n	8010fbc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8010fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d101      	bne.n	8010fbc <osMessageGet+0x5c>
      ticks = 1;
 8010fb8:	2301      	movs	r3, #1
 8010fba:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8010fbc:	f7ff fd79 	bl	8010ab2 <inHandlerMode>
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d01c      	beq.n	8011000 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8010fc6:	f107 0220 	add.w	r2, r7, #32
 8010fca:	f107 0314 	add.w	r3, r7, #20
 8010fce:	3304      	adds	r3, #4
 8010fd0:	4619      	mov	r1, r3
 8010fd2:	68b8      	ldr	r0, [r7, #8]
 8010fd4:	f000 febc 	bl	8011d50 <xQueueReceiveFromISR>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	2b01      	cmp	r3, #1
 8010fdc:	d102      	bne.n	8010fe4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8010fde:	2310      	movs	r3, #16
 8010fe0:	617b      	str	r3, [r7, #20]
 8010fe2:	e001      	b.n	8010fe8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010fe8:	6a3b      	ldr	r3, [r7, #32]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d01d      	beq.n	801102a <osMessageGet+0xca>
 8010fee:	4b15      	ldr	r3, [pc, #84]	; (8011044 <osMessageGet+0xe4>)
 8010ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ff4:	601a      	str	r2, [r3, #0]
 8010ff6:	f3bf 8f4f 	dsb	sy
 8010ffa:	f3bf 8f6f 	isb	sy
 8010ffe:	e014      	b.n	801102a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8011000:	f107 0314 	add.w	r3, r7, #20
 8011004:	3304      	adds	r3, #4
 8011006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011008:	4619      	mov	r1, r3
 801100a:	68b8      	ldr	r0, [r7, #8]
 801100c:	f000 fca6 	bl	801195c <xQueueReceive>
 8011010:	4603      	mov	r3, r0
 8011012:	2b01      	cmp	r3, #1
 8011014:	d102      	bne.n	801101c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8011016:	2310      	movs	r3, #16
 8011018:	617b      	str	r3, [r7, #20]
 801101a:	e006      	b.n	801102a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 801101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801101e:	2b00      	cmp	r3, #0
 8011020:	d101      	bne.n	8011026 <osMessageGet+0xc6>
 8011022:	2300      	movs	r3, #0
 8011024:	e000      	b.n	8011028 <osMessageGet+0xc8>
 8011026:	2340      	movs	r3, #64	; 0x40
 8011028:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	461c      	mov	r4, r3
 801102e:	f107 0314 	add.w	r3, r7, #20
 8011032:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011036:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801103a:	68f8      	ldr	r0, [r7, #12]
 801103c:	372c      	adds	r7, #44	; 0x2c
 801103e:	46bd      	mov	sp, r7
 8011040:	bd90      	pop	{r4, r7, pc}
 8011042:	bf00      	nop
 8011044:	e000ed04 	.word	0xe000ed04

08011048 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011048:	b480      	push	{r7}
 801104a:	b083      	sub	sp, #12
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	f103 0208 	add.w	r2, r3, #8
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011060:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	f103 0208 	add.w	r2, r3, #8
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	f103 0208 	add.w	r2, r3, #8
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	2200      	movs	r2, #0
 801107a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801107c:	bf00      	nop
 801107e:	370c      	adds	r7, #12
 8011080:	46bd      	mov	sp, r7
 8011082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011086:	4770      	bx	lr

08011088 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011088:	b480      	push	{r7}
 801108a:	b083      	sub	sp, #12
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	2200      	movs	r2, #0
 8011094:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011096:	bf00      	nop
 8011098:	370c      	adds	r7, #12
 801109a:	46bd      	mov	sp, r7
 801109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a0:	4770      	bx	lr

080110a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80110a2:	b480      	push	{r7}
 80110a4:	b085      	sub	sp, #20
 80110a6:	af00      	add	r7, sp, #0
 80110a8:	6078      	str	r0, [r7, #4]
 80110aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	685b      	ldr	r3, [r3, #4]
 80110b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80110b2:	683b      	ldr	r3, [r7, #0]
 80110b4:	68fa      	ldr	r2, [r7, #12]
 80110b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	689a      	ldr	r2, [r3, #8]
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	689b      	ldr	r3, [r3, #8]
 80110c4:	683a      	ldr	r2, [r7, #0]
 80110c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	683a      	ldr	r2, [r7, #0]
 80110cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80110ce:	683b      	ldr	r3, [r7, #0]
 80110d0:	687a      	ldr	r2, [r7, #4]
 80110d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	1c5a      	adds	r2, r3, #1
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	601a      	str	r2, [r3, #0]
}
 80110de:	bf00      	nop
 80110e0:	3714      	adds	r7, #20
 80110e2:	46bd      	mov	sp, r7
 80110e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e8:	4770      	bx	lr

080110ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80110ea:	b480      	push	{r7}
 80110ec:	b085      	sub	sp, #20
 80110ee:	af00      	add	r7, sp, #0
 80110f0:	6078      	str	r0, [r7, #4]
 80110f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80110f4:	683b      	ldr	r3, [r7, #0]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80110fa:	68bb      	ldr	r3, [r7, #8]
 80110fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011100:	d103      	bne.n	801110a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	691b      	ldr	r3, [r3, #16]
 8011106:	60fb      	str	r3, [r7, #12]
 8011108:	e00c      	b.n	8011124 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	3308      	adds	r3, #8
 801110e:	60fb      	str	r3, [r7, #12]
 8011110:	e002      	b.n	8011118 <vListInsert+0x2e>
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	685b      	ldr	r3, [r3, #4]
 8011116:	60fb      	str	r3, [r7, #12]
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	685b      	ldr	r3, [r3, #4]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	68ba      	ldr	r2, [r7, #8]
 8011120:	429a      	cmp	r2, r3
 8011122:	d2f6      	bcs.n	8011112 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	685a      	ldr	r2, [r3, #4]
 8011128:	683b      	ldr	r3, [r7, #0]
 801112a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	685b      	ldr	r3, [r3, #4]
 8011130:	683a      	ldr	r2, [r7, #0]
 8011132:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011134:	683b      	ldr	r3, [r7, #0]
 8011136:	68fa      	ldr	r2, [r7, #12]
 8011138:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	683a      	ldr	r2, [r7, #0]
 801113e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011140:	683b      	ldr	r3, [r7, #0]
 8011142:	687a      	ldr	r2, [r7, #4]
 8011144:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	1c5a      	adds	r2, r3, #1
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	601a      	str	r2, [r3, #0]
}
 8011150:	bf00      	nop
 8011152:	3714      	adds	r7, #20
 8011154:	46bd      	mov	sp, r7
 8011156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115a:	4770      	bx	lr

0801115c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801115c:	b480      	push	{r7}
 801115e:	b085      	sub	sp, #20
 8011160:	af00      	add	r7, sp, #0
 8011162:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	691b      	ldr	r3, [r3, #16]
 8011168:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	685b      	ldr	r3, [r3, #4]
 801116e:	687a      	ldr	r2, [r7, #4]
 8011170:	6892      	ldr	r2, [r2, #8]
 8011172:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	689b      	ldr	r3, [r3, #8]
 8011178:	687a      	ldr	r2, [r7, #4]
 801117a:	6852      	ldr	r2, [r2, #4]
 801117c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	685b      	ldr	r3, [r3, #4]
 8011182:	687a      	ldr	r2, [r7, #4]
 8011184:	429a      	cmp	r2, r3
 8011186:	d103      	bne.n	8011190 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	689a      	ldr	r2, [r3, #8]
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	2200      	movs	r2, #0
 8011194:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	1e5a      	subs	r2, r3, #1
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	681b      	ldr	r3, [r3, #0]
}
 80111a4:	4618      	mov	r0, r3
 80111a6:	3714      	adds	r7, #20
 80111a8:	46bd      	mov	sp, r7
 80111aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ae:	4770      	bx	lr

080111b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b084      	sub	sp, #16
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
 80111b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d10c      	bne.n	80111de <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80111c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111c8:	b672      	cpsid	i
 80111ca:	f383 8811 	msr	BASEPRI, r3
 80111ce:	f3bf 8f6f 	isb	sy
 80111d2:	f3bf 8f4f 	dsb	sy
 80111d6:	b662      	cpsie	i
 80111d8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80111da:	bf00      	nop
 80111dc:	e7fe      	b.n	80111dc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80111de:	f002 f935 	bl	801344c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	681a      	ldr	r2, [r3, #0]
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111ea:	68f9      	ldr	r1, [r7, #12]
 80111ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80111ee:	fb01 f303 	mul.w	r3, r1, r3
 80111f2:	441a      	add	r2, r3
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	2200      	movs	r2, #0
 80111fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	681a      	ldr	r2, [r3, #0]
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	681a      	ldr	r2, [r3, #0]
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801120e:	3b01      	subs	r3, #1
 8011210:	68f9      	ldr	r1, [r7, #12]
 8011212:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011214:	fb01 f303 	mul.w	r3, r1, r3
 8011218:	441a      	add	r2, r3
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	22ff      	movs	r2, #255	; 0xff
 8011222:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	22ff      	movs	r2, #255	; 0xff
 801122a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801122e:	683b      	ldr	r3, [r7, #0]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d114      	bne.n	801125e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	691b      	ldr	r3, [r3, #16]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d01a      	beq.n	8011272 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	3310      	adds	r3, #16
 8011240:	4618      	mov	r0, r3
 8011242:	f001 fbeb 	bl	8012a1c <xTaskRemoveFromEventList>
 8011246:	4603      	mov	r3, r0
 8011248:	2b00      	cmp	r3, #0
 801124a:	d012      	beq.n	8011272 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801124c:	4b0c      	ldr	r3, [pc, #48]	; (8011280 <xQueueGenericReset+0xd0>)
 801124e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011252:	601a      	str	r2, [r3, #0]
 8011254:	f3bf 8f4f 	dsb	sy
 8011258:	f3bf 8f6f 	isb	sy
 801125c:	e009      	b.n	8011272 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	3310      	adds	r3, #16
 8011262:	4618      	mov	r0, r3
 8011264:	f7ff fef0 	bl	8011048 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	3324      	adds	r3, #36	; 0x24
 801126c:	4618      	mov	r0, r3
 801126e:	f7ff feeb 	bl	8011048 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011272:	f002 f91f 	bl	80134b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011276:	2301      	movs	r3, #1
}
 8011278:	4618      	mov	r0, r3
 801127a:	3710      	adds	r7, #16
 801127c:	46bd      	mov	sp, r7
 801127e:	bd80      	pop	{r7, pc}
 8011280:	e000ed04 	.word	0xe000ed04

08011284 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011284:	b580      	push	{r7, lr}
 8011286:	b08e      	sub	sp, #56	; 0x38
 8011288:	af02      	add	r7, sp, #8
 801128a:	60f8      	str	r0, [r7, #12]
 801128c:	60b9      	str	r1, [r7, #8]
 801128e:	607a      	str	r2, [r7, #4]
 8011290:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d10c      	bne.n	80112b2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8011298:	f04f 0350 	mov.w	r3, #80	; 0x50
 801129c:	b672      	cpsid	i
 801129e:	f383 8811 	msr	BASEPRI, r3
 80112a2:	f3bf 8f6f 	isb	sy
 80112a6:	f3bf 8f4f 	dsb	sy
 80112aa:	b662      	cpsie	i
 80112ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80112ae:	bf00      	nop
 80112b0:	e7fe      	b.n	80112b0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80112b2:	683b      	ldr	r3, [r7, #0]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d10c      	bne.n	80112d2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80112b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112bc:	b672      	cpsid	i
 80112be:	f383 8811 	msr	BASEPRI, r3
 80112c2:	f3bf 8f6f 	isb	sy
 80112c6:	f3bf 8f4f 	dsb	sy
 80112ca:	b662      	cpsie	i
 80112cc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80112ce:	bf00      	nop
 80112d0:	e7fe      	b.n	80112d0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d002      	beq.n	80112de <xQueueGenericCreateStatic+0x5a>
 80112d8:	68bb      	ldr	r3, [r7, #8]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d001      	beq.n	80112e2 <xQueueGenericCreateStatic+0x5e>
 80112de:	2301      	movs	r3, #1
 80112e0:	e000      	b.n	80112e4 <xQueueGenericCreateStatic+0x60>
 80112e2:	2300      	movs	r3, #0
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d10c      	bne.n	8011302 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80112e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ec:	b672      	cpsid	i
 80112ee:	f383 8811 	msr	BASEPRI, r3
 80112f2:	f3bf 8f6f 	isb	sy
 80112f6:	f3bf 8f4f 	dsb	sy
 80112fa:	b662      	cpsie	i
 80112fc:	623b      	str	r3, [r7, #32]
}
 80112fe:	bf00      	nop
 8011300:	e7fe      	b.n	8011300 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d102      	bne.n	801130e <xQueueGenericCreateStatic+0x8a>
 8011308:	68bb      	ldr	r3, [r7, #8]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d101      	bne.n	8011312 <xQueueGenericCreateStatic+0x8e>
 801130e:	2301      	movs	r3, #1
 8011310:	e000      	b.n	8011314 <xQueueGenericCreateStatic+0x90>
 8011312:	2300      	movs	r3, #0
 8011314:	2b00      	cmp	r3, #0
 8011316:	d10c      	bne.n	8011332 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8011318:	f04f 0350 	mov.w	r3, #80	; 0x50
 801131c:	b672      	cpsid	i
 801131e:	f383 8811 	msr	BASEPRI, r3
 8011322:	f3bf 8f6f 	isb	sy
 8011326:	f3bf 8f4f 	dsb	sy
 801132a:	b662      	cpsie	i
 801132c:	61fb      	str	r3, [r7, #28]
}
 801132e:	bf00      	nop
 8011330:	e7fe      	b.n	8011330 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011332:	2348      	movs	r3, #72	; 0x48
 8011334:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011336:	697b      	ldr	r3, [r7, #20]
 8011338:	2b48      	cmp	r3, #72	; 0x48
 801133a:	d00c      	beq.n	8011356 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 801133c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011340:	b672      	cpsid	i
 8011342:	f383 8811 	msr	BASEPRI, r3
 8011346:	f3bf 8f6f 	isb	sy
 801134a:	f3bf 8f4f 	dsb	sy
 801134e:	b662      	cpsie	i
 8011350:	61bb      	str	r3, [r7, #24]
}
 8011352:	bf00      	nop
 8011354:	e7fe      	b.n	8011354 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011356:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011358:	683b      	ldr	r3, [r7, #0]
 801135a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801135c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801135e:	2b00      	cmp	r3, #0
 8011360:	d00d      	beq.n	801137e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011364:	2201      	movs	r2, #1
 8011366:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801136a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801136e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011370:	9300      	str	r3, [sp, #0]
 8011372:	4613      	mov	r3, r2
 8011374:	687a      	ldr	r2, [r7, #4]
 8011376:	68b9      	ldr	r1, [r7, #8]
 8011378:	68f8      	ldr	r0, [r7, #12]
 801137a:	f000 f847 	bl	801140c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801137e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011380:	4618      	mov	r0, r3
 8011382:	3730      	adds	r7, #48	; 0x30
 8011384:	46bd      	mov	sp, r7
 8011386:	bd80      	pop	{r7, pc}

08011388 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011388:	b580      	push	{r7, lr}
 801138a:	b08a      	sub	sp, #40	; 0x28
 801138c:	af02      	add	r7, sp, #8
 801138e:	60f8      	str	r0, [r7, #12]
 8011390:	60b9      	str	r1, [r7, #8]
 8011392:	4613      	mov	r3, r2
 8011394:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d10c      	bne.n	80113b6 <xQueueGenericCreate+0x2e>
	__asm volatile
 801139c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113a0:	b672      	cpsid	i
 80113a2:	f383 8811 	msr	BASEPRI, r3
 80113a6:	f3bf 8f6f 	isb	sy
 80113aa:	f3bf 8f4f 	dsb	sy
 80113ae:	b662      	cpsie	i
 80113b0:	613b      	str	r3, [r7, #16]
}
 80113b2:	bf00      	nop
 80113b4:	e7fe      	b.n	80113b4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80113b6:	68bb      	ldr	r3, [r7, #8]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d102      	bne.n	80113c2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80113bc:	2300      	movs	r3, #0
 80113be:	61fb      	str	r3, [r7, #28]
 80113c0:	e004      	b.n	80113cc <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	68ba      	ldr	r2, [r7, #8]
 80113c6:	fb02 f303 	mul.w	r3, r2, r3
 80113ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80113cc:	69fb      	ldr	r3, [r7, #28]
 80113ce:	3348      	adds	r3, #72	; 0x48
 80113d0:	4618      	mov	r0, r3
 80113d2:	f002 f967 	bl	80136a4 <pvPortMalloc>
 80113d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80113d8:	69bb      	ldr	r3, [r7, #24]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d011      	beq.n	8011402 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80113de:	69bb      	ldr	r3, [r7, #24]
 80113e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80113e2:	697b      	ldr	r3, [r7, #20]
 80113e4:	3348      	adds	r3, #72	; 0x48
 80113e6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80113e8:	69bb      	ldr	r3, [r7, #24]
 80113ea:	2200      	movs	r2, #0
 80113ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80113f0:	79fa      	ldrb	r2, [r7, #7]
 80113f2:	69bb      	ldr	r3, [r7, #24]
 80113f4:	9300      	str	r3, [sp, #0]
 80113f6:	4613      	mov	r3, r2
 80113f8:	697a      	ldr	r2, [r7, #20]
 80113fa:	68b9      	ldr	r1, [r7, #8]
 80113fc:	68f8      	ldr	r0, [r7, #12]
 80113fe:	f000 f805 	bl	801140c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011402:	69bb      	ldr	r3, [r7, #24]
	}
 8011404:	4618      	mov	r0, r3
 8011406:	3720      	adds	r7, #32
 8011408:	46bd      	mov	sp, r7
 801140a:	bd80      	pop	{r7, pc}

0801140c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801140c:	b580      	push	{r7, lr}
 801140e:	b084      	sub	sp, #16
 8011410:	af00      	add	r7, sp, #0
 8011412:	60f8      	str	r0, [r7, #12]
 8011414:	60b9      	str	r1, [r7, #8]
 8011416:	607a      	str	r2, [r7, #4]
 8011418:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801141a:	68bb      	ldr	r3, [r7, #8]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d103      	bne.n	8011428 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011420:	69bb      	ldr	r3, [r7, #24]
 8011422:	69ba      	ldr	r2, [r7, #24]
 8011424:	601a      	str	r2, [r3, #0]
 8011426:	e002      	b.n	801142e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011428:	69bb      	ldr	r3, [r7, #24]
 801142a:	687a      	ldr	r2, [r7, #4]
 801142c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801142e:	69bb      	ldr	r3, [r7, #24]
 8011430:	68fa      	ldr	r2, [r7, #12]
 8011432:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011434:	69bb      	ldr	r3, [r7, #24]
 8011436:	68ba      	ldr	r2, [r7, #8]
 8011438:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801143a:	2101      	movs	r1, #1
 801143c:	69b8      	ldr	r0, [r7, #24]
 801143e:	f7ff feb7 	bl	80111b0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011442:	bf00      	nop
 8011444:	3710      	adds	r7, #16
 8011446:	46bd      	mov	sp, r7
 8011448:	bd80      	pop	{r7, pc}

0801144a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801144a:	b580      	push	{r7, lr}
 801144c:	b082      	sub	sp, #8
 801144e:	af00      	add	r7, sp, #0
 8011450:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d00e      	beq.n	8011476 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	2200      	movs	r2, #0
 801145c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	2200      	movs	r2, #0
 8011462:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	2200      	movs	r2, #0
 8011468:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801146a:	2300      	movs	r3, #0
 801146c:	2200      	movs	r2, #0
 801146e:	2100      	movs	r1, #0
 8011470:	6878      	ldr	r0, [r7, #4]
 8011472:	f000 f837 	bl	80114e4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8011476:	bf00      	nop
 8011478:	3708      	adds	r7, #8
 801147a:	46bd      	mov	sp, r7
 801147c:	bd80      	pop	{r7, pc}

0801147e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 801147e:	b580      	push	{r7, lr}
 8011480:	b086      	sub	sp, #24
 8011482:	af00      	add	r7, sp, #0
 8011484:	4603      	mov	r3, r0
 8011486:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011488:	2301      	movs	r3, #1
 801148a:	617b      	str	r3, [r7, #20]
 801148c:	2300      	movs	r3, #0
 801148e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8011490:	79fb      	ldrb	r3, [r7, #7]
 8011492:	461a      	mov	r2, r3
 8011494:	6939      	ldr	r1, [r7, #16]
 8011496:	6978      	ldr	r0, [r7, #20]
 8011498:	f7ff ff76 	bl	8011388 <xQueueGenericCreate>
 801149c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801149e:	68f8      	ldr	r0, [r7, #12]
 80114a0:	f7ff ffd3 	bl	801144a <prvInitialiseMutex>

		return xNewQueue;
 80114a4:	68fb      	ldr	r3, [r7, #12]
	}
 80114a6:	4618      	mov	r0, r3
 80114a8:	3718      	adds	r7, #24
 80114aa:	46bd      	mov	sp, r7
 80114ac:	bd80      	pop	{r7, pc}

080114ae <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80114ae:	b580      	push	{r7, lr}
 80114b0:	b088      	sub	sp, #32
 80114b2:	af02      	add	r7, sp, #8
 80114b4:	4603      	mov	r3, r0
 80114b6:	6039      	str	r1, [r7, #0]
 80114b8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80114ba:	2301      	movs	r3, #1
 80114bc:	617b      	str	r3, [r7, #20]
 80114be:	2300      	movs	r3, #0
 80114c0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80114c2:	79fb      	ldrb	r3, [r7, #7]
 80114c4:	9300      	str	r3, [sp, #0]
 80114c6:	683b      	ldr	r3, [r7, #0]
 80114c8:	2200      	movs	r2, #0
 80114ca:	6939      	ldr	r1, [r7, #16]
 80114cc:	6978      	ldr	r0, [r7, #20]
 80114ce:	f7ff fed9 	bl	8011284 <xQueueGenericCreateStatic>
 80114d2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80114d4:	68f8      	ldr	r0, [r7, #12]
 80114d6:	f7ff ffb8 	bl	801144a <prvInitialiseMutex>

		return xNewQueue;
 80114da:	68fb      	ldr	r3, [r7, #12]
	}
 80114dc:	4618      	mov	r0, r3
 80114de:	3718      	adds	r7, #24
 80114e0:	46bd      	mov	sp, r7
 80114e2:	bd80      	pop	{r7, pc}

080114e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b08e      	sub	sp, #56	; 0x38
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	60f8      	str	r0, [r7, #12]
 80114ec:	60b9      	str	r1, [r7, #8]
 80114ee:	607a      	str	r2, [r7, #4]
 80114f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80114f2:	2300      	movs	r3, #0
 80114f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80114fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d10c      	bne.n	801151a <xQueueGenericSend+0x36>
	__asm volatile
 8011500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011504:	b672      	cpsid	i
 8011506:	f383 8811 	msr	BASEPRI, r3
 801150a:	f3bf 8f6f 	isb	sy
 801150e:	f3bf 8f4f 	dsb	sy
 8011512:	b662      	cpsie	i
 8011514:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011516:	bf00      	nop
 8011518:	e7fe      	b.n	8011518 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801151a:	68bb      	ldr	r3, [r7, #8]
 801151c:	2b00      	cmp	r3, #0
 801151e:	d103      	bne.n	8011528 <xQueueGenericSend+0x44>
 8011520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011524:	2b00      	cmp	r3, #0
 8011526:	d101      	bne.n	801152c <xQueueGenericSend+0x48>
 8011528:	2301      	movs	r3, #1
 801152a:	e000      	b.n	801152e <xQueueGenericSend+0x4a>
 801152c:	2300      	movs	r3, #0
 801152e:	2b00      	cmp	r3, #0
 8011530:	d10c      	bne.n	801154c <xQueueGenericSend+0x68>
	__asm volatile
 8011532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011536:	b672      	cpsid	i
 8011538:	f383 8811 	msr	BASEPRI, r3
 801153c:	f3bf 8f6f 	isb	sy
 8011540:	f3bf 8f4f 	dsb	sy
 8011544:	b662      	cpsie	i
 8011546:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011548:	bf00      	nop
 801154a:	e7fe      	b.n	801154a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801154c:	683b      	ldr	r3, [r7, #0]
 801154e:	2b02      	cmp	r3, #2
 8011550:	d103      	bne.n	801155a <xQueueGenericSend+0x76>
 8011552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011556:	2b01      	cmp	r3, #1
 8011558:	d101      	bne.n	801155e <xQueueGenericSend+0x7a>
 801155a:	2301      	movs	r3, #1
 801155c:	e000      	b.n	8011560 <xQueueGenericSend+0x7c>
 801155e:	2300      	movs	r3, #0
 8011560:	2b00      	cmp	r3, #0
 8011562:	d10c      	bne.n	801157e <xQueueGenericSend+0x9a>
	__asm volatile
 8011564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011568:	b672      	cpsid	i
 801156a:	f383 8811 	msr	BASEPRI, r3
 801156e:	f3bf 8f6f 	isb	sy
 8011572:	f3bf 8f4f 	dsb	sy
 8011576:	b662      	cpsie	i
 8011578:	623b      	str	r3, [r7, #32]
}
 801157a:	bf00      	nop
 801157c:	e7fe      	b.n	801157c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801157e:	f001 fc15 	bl	8012dac <xTaskGetSchedulerState>
 8011582:	4603      	mov	r3, r0
 8011584:	2b00      	cmp	r3, #0
 8011586:	d102      	bne.n	801158e <xQueueGenericSend+0xaa>
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d101      	bne.n	8011592 <xQueueGenericSend+0xae>
 801158e:	2301      	movs	r3, #1
 8011590:	e000      	b.n	8011594 <xQueueGenericSend+0xb0>
 8011592:	2300      	movs	r3, #0
 8011594:	2b00      	cmp	r3, #0
 8011596:	d10c      	bne.n	80115b2 <xQueueGenericSend+0xce>
	__asm volatile
 8011598:	f04f 0350 	mov.w	r3, #80	; 0x50
 801159c:	b672      	cpsid	i
 801159e:	f383 8811 	msr	BASEPRI, r3
 80115a2:	f3bf 8f6f 	isb	sy
 80115a6:	f3bf 8f4f 	dsb	sy
 80115aa:	b662      	cpsie	i
 80115ac:	61fb      	str	r3, [r7, #28]
}
 80115ae:	bf00      	nop
 80115b0:	e7fe      	b.n	80115b0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80115b2:	f001 ff4b 	bl	801344c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80115b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80115ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80115be:	429a      	cmp	r2, r3
 80115c0:	d302      	bcc.n	80115c8 <xQueueGenericSend+0xe4>
 80115c2:	683b      	ldr	r3, [r7, #0]
 80115c4:	2b02      	cmp	r3, #2
 80115c6:	d129      	bne.n	801161c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80115c8:	683a      	ldr	r2, [r7, #0]
 80115ca:	68b9      	ldr	r1, [r7, #8]
 80115cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80115ce:	f000 fc82 	bl	8011ed6 <prvCopyDataToQueue>
 80115d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80115d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d010      	beq.n	80115fe <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80115dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115de:	3324      	adds	r3, #36	; 0x24
 80115e0:	4618      	mov	r0, r3
 80115e2:	f001 fa1b 	bl	8012a1c <xTaskRemoveFromEventList>
 80115e6:	4603      	mov	r3, r0
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d013      	beq.n	8011614 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80115ec:	4b3f      	ldr	r3, [pc, #252]	; (80116ec <xQueueGenericSend+0x208>)
 80115ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115f2:	601a      	str	r2, [r3, #0]
 80115f4:	f3bf 8f4f 	dsb	sy
 80115f8:	f3bf 8f6f 	isb	sy
 80115fc:	e00a      	b.n	8011614 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80115fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011600:	2b00      	cmp	r3, #0
 8011602:	d007      	beq.n	8011614 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011604:	4b39      	ldr	r3, [pc, #228]	; (80116ec <xQueueGenericSend+0x208>)
 8011606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801160a:	601a      	str	r2, [r3, #0]
 801160c:	f3bf 8f4f 	dsb	sy
 8011610:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011614:	f001 ff4e 	bl	80134b4 <vPortExitCritical>
				return pdPASS;
 8011618:	2301      	movs	r3, #1
 801161a:	e063      	b.n	80116e4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d103      	bne.n	801162a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011622:	f001 ff47 	bl	80134b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011626:	2300      	movs	r3, #0
 8011628:	e05c      	b.n	80116e4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 801162a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801162c:	2b00      	cmp	r3, #0
 801162e:	d106      	bne.n	801163e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011630:	f107 0314 	add.w	r3, r7, #20
 8011634:	4618      	mov	r0, r3
 8011636:	f001 fa55 	bl	8012ae4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801163a:	2301      	movs	r3, #1
 801163c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801163e:	f001 ff39 	bl	80134b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011642:	f000 ffd9 	bl	80125f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011646:	f001 ff01 	bl	801344c <vPortEnterCritical>
 801164a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801164c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011650:	b25b      	sxtb	r3, r3
 8011652:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011656:	d103      	bne.n	8011660 <xQueueGenericSend+0x17c>
 8011658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801165a:	2200      	movs	r2, #0
 801165c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011662:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011666:	b25b      	sxtb	r3, r3
 8011668:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801166c:	d103      	bne.n	8011676 <xQueueGenericSend+0x192>
 801166e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011670:	2200      	movs	r2, #0
 8011672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011676:	f001 ff1d 	bl	80134b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801167a:	1d3a      	adds	r2, r7, #4
 801167c:	f107 0314 	add.w	r3, r7, #20
 8011680:	4611      	mov	r1, r2
 8011682:	4618      	mov	r0, r3
 8011684:	f001 fa44 	bl	8012b10 <xTaskCheckForTimeOut>
 8011688:	4603      	mov	r3, r0
 801168a:	2b00      	cmp	r3, #0
 801168c:	d124      	bne.n	80116d8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801168e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011690:	f000 fd19 	bl	80120c6 <prvIsQueueFull>
 8011694:	4603      	mov	r3, r0
 8011696:	2b00      	cmp	r3, #0
 8011698:	d018      	beq.n	80116cc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801169a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801169c:	3310      	adds	r3, #16
 801169e:	687a      	ldr	r2, [r7, #4]
 80116a0:	4611      	mov	r1, r2
 80116a2:	4618      	mov	r0, r3
 80116a4:	f001 f994 	bl	80129d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80116a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116aa:	f000 fca4 	bl	8011ff6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80116ae:	f000 ffb1 	bl	8012614 <xTaskResumeAll>
 80116b2:	4603      	mov	r3, r0
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	f47f af7c 	bne.w	80115b2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80116ba:	4b0c      	ldr	r3, [pc, #48]	; (80116ec <xQueueGenericSend+0x208>)
 80116bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116c0:	601a      	str	r2, [r3, #0]
 80116c2:	f3bf 8f4f 	dsb	sy
 80116c6:	f3bf 8f6f 	isb	sy
 80116ca:	e772      	b.n	80115b2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80116cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116ce:	f000 fc92 	bl	8011ff6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80116d2:	f000 ff9f 	bl	8012614 <xTaskResumeAll>
 80116d6:	e76c      	b.n	80115b2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80116d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116da:	f000 fc8c 	bl	8011ff6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80116de:	f000 ff99 	bl	8012614 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80116e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80116e4:	4618      	mov	r0, r3
 80116e6:	3738      	adds	r7, #56	; 0x38
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd80      	pop	{r7, pc}
 80116ec:	e000ed04 	.word	0xe000ed04

080116f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b08e      	sub	sp, #56	; 0x38
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	60f8      	str	r0, [r7, #12]
 80116f8:	60b9      	str	r1, [r7, #8]
 80116fa:	607a      	str	r2, [r7, #4]
 80116fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011704:	2b00      	cmp	r3, #0
 8011706:	d10c      	bne.n	8011722 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8011708:	f04f 0350 	mov.w	r3, #80	; 0x50
 801170c:	b672      	cpsid	i
 801170e:	f383 8811 	msr	BASEPRI, r3
 8011712:	f3bf 8f6f 	isb	sy
 8011716:	f3bf 8f4f 	dsb	sy
 801171a:	b662      	cpsie	i
 801171c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801171e:	bf00      	nop
 8011720:	e7fe      	b.n	8011720 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011722:	68bb      	ldr	r3, [r7, #8]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d103      	bne.n	8011730 <xQueueGenericSendFromISR+0x40>
 8011728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801172c:	2b00      	cmp	r3, #0
 801172e:	d101      	bne.n	8011734 <xQueueGenericSendFromISR+0x44>
 8011730:	2301      	movs	r3, #1
 8011732:	e000      	b.n	8011736 <xQueueGenericSendFromISR+0x46>
 8011734:	2300      	movs	r3, #0
 8011736:	2b00      	cmp	r3, #0
 8011738:	d10c      	bne.n	8011754 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 801173a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801173e:	b672      	cpsid	i
 8011740:	f383 8811 	msr	BASEPRI, r3
 8011744:	f3bf 8f6f 	isb	sy
 8011748:	f3bf 8f4f 	dsb	sy
 801174c:	b662      	cpsie	i
 801174e:	623b      	str	r3, [r7, #32]
}
 8011750:	bf00      	nop
 8011752:	e7fe      	b.n	8011752 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011754:	683b      	ldr	r3, [r7, #0]
 8011756:	2b02      	cmp	r3, #2
 8011758:	d103      	bne.n	8011762 <xQueueGenericSendFromISR+0x72>
 801175a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801175c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801175e:	2b01      	cmp	r3, #1
 8011760:	d101      	bne.n	8011766 <xQueueGenericSendFromISR+0x76>
 8011762:	2301      	movs	r3, #1
 8011764:	e000      	b.n	8011768 <xQueueGenericSendFromISR+0x78>
 8011766:	2300      	movs	r3, #0
 8011768:	2b00      	cmp	r3, #0
 801176a:	d10c      	bne.n	8011786 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 801176c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011770:	b672      	cpsid	i
 8011772:	f383 8811 	msr	BASEPRI, r3
 8011776:	f3bf 8f6f 	isb	sy
 801177a:	f3bf 8f4f 	dsb	sy
 801177e:	b662      	cpsie	i
 8011780:	61fb      	str	r3, [r7, #28]
}
 8011782:	bf00      	nop
 8011784:	e7fe      	b.n	8011784 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011786:	f001 ff49 	bl	801361c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801178a:	f3ef 8211 	mrs	r2, BASEPRI
 801178e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011792:	b672      	cpsid	i
 8011794:	f383 8811 	msr	BASEPRI, r3
 8011798:	f3bf 8f6f 	isb	sy
 801179c:	f3bf 8f4f 	dsb	sy
 80117a0:	b662      	cpsie	i
 80117a2:	61ba      	str	r2, [r7, #24]
 80117a4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80117a6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80117a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80117aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80117ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117b2:	429a      	cmp	r2, r3
 80117b4:	d302      	bcc.n	80117bc <xQueueGenericSendFromISR+0xcc>
 80117b6:	683b      	ldr	r3, [r7, #0]
 80117b8:	2b02      	cmp	r3, #2
 80117ba:	d12c      	bne.n	8011816 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80117bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80117c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80117c6:	683a      	ldr	r2, [r7, #0]
 80117c8:	68b9      	ldr	r1, [r7, #8]
 80117ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80117cc:	f000 fb83 	bl	8011ed6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80117d0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80117d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80117d8:	d112      	bne.n	8011800 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80117da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d016      	beq.n	8011810 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80117e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117e4:	3324      	adds	r3, #36	; 0x24
 80117e6:	4618      	mov	r0, r3
 80117e8:	f001 f918 	bl	8012a1c <xTaskRemoveFromEventList>
 80117ec:	4603      	mov	r3, r0
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d00e      	beq.n	8011810 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d00b      	beq.n	8011810 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	2201      	movs	r2, #1
 80117fc:	601a      	str	r2, [r3, #0]
 80117fe:	e007      	b.n	8011810 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011800:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011804:	3301      	adds	r3, #1
 8011806:	b2db      	uxtb	r3, r3
 8011808:	b25a      	sxtb	r2, r3
 801180a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801180c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011810:	2301      	movs	r3, #1
 8011812:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8011814:	e001      	b.n	801181a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011816:	2300      	movs	r3, #0
 8011818:	637b      	str	r3, [r7, #52]	; 0x34
 801181a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801181c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801181e:	693b      	ldr	r3, [r7, #16]
 8011820:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011824:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011828:	4618      	mov	r0, r3
 801182a:	3738      	adds	r7, #56	; 0x38
 801182c:	46bd      	mov	sp, r7
 801182e:	bd80      	pop	{r7, pc}

08011830 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011830:	b580      	push	{r7, lr}
 8011832:	b08e      	sub	sp, #56	; 0x38
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
 8011838:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801183e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011840:	2b00      	cmp	r3, #0
 8011842:	d10c      	bne.n	801185e <xQueueGiveFromISR+0x2e>
	__asm volatile
 8011844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011848:	b672      	cpsid	i
 801184a:	f383 8811 	msr	BASEPRI, r3
 801184e:	f3bf 8f6f 	isb	sy
 8011852:	f3bf 8f4f 	dsb	sy
 8011856:	b662      	cpsie	i
 8011858:	623b      	str	r3, [r7, #32]
}
 801185a:	bf00      	nop
 801185c:	e7fe      	b.n	801185c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801185e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011862:	2b00      	cmp	r3, #0
 8011864:	d00c      	beq.n	8011880 <xQueueGiveFromISR+0x50>
	__asm volatile
 8011866:	f04f 0350 	mov.w	r3, #80	; 0x50
 801186a:	b672      	cpsid	i
 801186c:	f383 8811 	msr	BASEPRI, r3
 8011870:	f3bf 8f6f 	isb	sy
 8011874:	f3bf 8f4f 	dsb	sy
 8011878:	b662      	cpsie	i
 801187a:	61fb      	str	r3, [r7, #28]
}
 801187c:	bf00      	nop
 801187e:	e7fe      	b.n	801187e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	2b00      	cmp	r3, #0
 8011886:	d103      	bne.n	8011890 <xQueueGiveFromISR+0x60>
 8011888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801188a:	689b      	ldr	r3, [r3, #8]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d101      	bne.n	8011894 <xQueueGiveFromISR+0x64>
 8011890:	2301      	movs	r3, #1
 8011892:	e000      	b.n	8011896 <xQueueGiveFromISR+0x66>
 8011894:	2300      	movs	r3, #0
 8011896:	2b00      	cmp	r3, #0
 8011898:	d10c      	bne.n	80118b4 <xQueueGiveFromISR+0x84>
	__asm volatile
 801189a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801189e:	b672      	cpsid	i
 80118a0:	f383 8811 	msr	BASEPRI, r3
 80118a4:	f3bf 8f6f 	isb	sy
 80118a8:	f3bf 8f4f 	dsb	sy
 80118ac:	b662      	cpsie	i
 80118ae:	61bb      	str	r3, [r7, #24]
}
 80118b0:	bf00      	nop
 80118b2:	e7fe      	b.n	80118b2 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80118b4:	f001 feb2 	bl	801361c <vPortValidateInterruptPriority>
	__asm volatile
 80118b8:	f3ef 8211 	mrs	r2, BASEPRI
 80118bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118c0:	b672      	cpsid	i
 80118c2:	f383 8811 	msr	BASEPRI, r3
 80118c6:	f3bf 8f6f 	isb	sy
 80118ca:	f3bf 8f4f 	dsb	sy
 80118ce:	b662      	cpsie	i
 80118d0:	617a      	str	r2, [r7, #20]
 80118d2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80118d4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80118d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80118d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118dc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80118de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80118e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80118e4:	429a      	cmp	r2, r3
 80118e6:	d22b      	bcs.n	8011940 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80118e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80118ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80118f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118f4:	1c5a      	adds	r2, r3, #1
 80118f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118f8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80118fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80118fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011902:	d112      	bne.n	801192a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011908:	2b00      	cmp	r3, #0
 801190a:	d016      	beq.n	801193a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801190c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801190e:	3324      	adds	r3, #36	; 0x24
 8011910:	4618      	mov	r0, r3
 8011912:	f001 f883 	bl	8012a1c <xTaskRemoveFromEventList>
 8011916:	4603      	mov	r3, r0
 8011918:	2b00      	cmp	r3, #0
 801191a:	d00e      	beq.n	801193a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801191c:	683b      	ldr	r3, [r7, #0]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d00b      	beq.n	801193a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011922:	683b      	ldr	r3, [r7, #0]
 8011924:	2201      	movs	r2, #1
 8011926:	601a      	str	r2, [r3, #0]
 8011928:	e007      	b.n	801193a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801192a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801192e:	3301      	adds	r3, #1
 8011930:	b2db      	uxtb	r3, r3
 8011932:	b25a      	sxtb	r2, r3
 8011934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801193a:	2301      	movs	r3, #1
 801193c:	637b      	str	r3, [r7, #52]	; 0x34
 801193e:	e001      	b.n	8011944 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011940:	2300      	movs	r3, #0
 8011942:	637b      	str	r3, [r7, #52]	; 0x34
 8011944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011946:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	f383 8811 	msr	BASEPRI, r3
}
 801194e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011952:	4618      	mov	r0, r3
 8011954:	3738      	adds	r7, #56	; 0x38
 8011956:	46bd      	mov	sp, r7
 8011958:	bd80      	pop	{r7, pc}
	...

0801195c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801195c:	b580      	push	{r7, lr}
 801195e:	b08c      	sub	sp, #48	; 0x30
 8011960:	af00      	add	r7, sp, #0
 8011962:	60f8      	str	r0, [r7, #12]
 8011964:	60b9      	str	r1, [r7, #8]
 8011966:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011968:	2300      	movs	r3, #0
 801196a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011972:	2b00      	cmp	r3, #0
 8011974:	d10c      	bne.n	8011990 <xQueueReceive+0x34>
	__asm volatile
 8011976:	f04f 0350 	mov.w	r3, #80	; 0x50
 801197a:	b672      	cpsid	i
 801197c:	f383 8811 	msr	BASEPRI, r3
 8011980:	f3bf 8f6f 	isb	sy
 8011984:	f3bf 8f4f 	dsb	sy
 8011988:	b662      	cpsie	i
 801198a:	623b      	str	r3, [r7, #32]
}
 801198c:	bf00      	nop
 801198e:	e7fe      	b.n	801198e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011990:	68bb      	ldr	r3, [r7, #8]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d103      	bne.n	801199e <xQueueReceive+0x42>
 8011996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801199a:	2b00      	cmp	r3, #0
 801199c:	d101      	bne.n	80119a2 <xQueueReceive+0x46>
 801199e:	2301      	movs	r3, #1
 80119a0:	e000      	b.n	80119a4 <xQueueReceive+0x48>
 80119a2:	2300      	movs	r3, #0
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d10c      	bne.n	80119c2 <xQueueReceive+0x66>
	__asm volatile
 80119a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119ac:	b672      	cpsid	i
 80119ae:	f383 8811 	msr	BASEPRI, r3
 80119b2:	f3bf 8f6f 	isb	sy
 80119b6:	f3bf 8f4f 	dsb	sy
 80119ba:	b662      	cpsie	i
 80119bc:	61fb      	str	r3, [r7, #28]
}
 80119be:	bf00      	nop
 80119c0:	e7fe      	b.n	80119c0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80119c2:	f001 f9f3 	bl	8012dac <xTaskGetSchedulerState>
 80119c6:	4603      	mov	r3, r0
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d102      	bne.n	80119d2 <xQueueReceive+0x76>
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d101      	bne.n	80119d6 <xQueueReceive+0x7a>
 80119d2:	2301      	movs	r3, #1
 80119d4:	e000      	b.n	80119d8 <xQueueReceive+0x7c>
 80119d6:	2300      	movs	r3, #0
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d10c      	bne.n	80119f6 <xQueueReceive+0x9a>
	__asm volatile
 80119dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119e0:	b672      	cpsid	i
 80119e2:	f383 8811 	msr	BASEPRI, r3
 80119e6:	f3bf 8f6f 	isb	sy
 80119ea:	f3bf 8f4f 	dsb	sy
 80119ee:	b662      	cpsie	i
 80119f0:	61bb      	str	r3, [r7, #24]
}
 80119f2:	bf00      	nop
 80119f4:	e7fe      	b.n	80119f4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80119f6:	f001 fd29 	bl	801344c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80119fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d01f      	beq.n	8011a46 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011a06:	68b9      	ldr	r1, [r7, #8]
 8011a08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a0a:	f000 face 	bl	8011faa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a10:	1e5a      	subs	r2, r3, #1
 8011a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a18:	691b      	ldr	r3, [r3, #16]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d00f      	beq.n	8011a3e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a20:	3310      	adds	r3, #16
 8011a22:	4618      	mov	r0, r3
 8011a24:	f000 fffa 	bl	8012a1c <xTaskRemoveFromEventList>
 8011a28:	4603      	mov	r3, r0
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d007      	beq.n	8011a3e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011a2e:	4b3d      	ldr	r3, [pc, #244]	; (8011b24 <xQueueReceive+0x1c8>)
 8011a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a34:	601a      	str	r2, [r3, #0]
 8011a36:	f3bf 8f4f 	dsb	sy
 8011a3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011a3e:	f001 fd39 	bl	80134b4 <vPortExitCritical>
				return pdPASS;
 8011a42:	2301      	movs	r3, #1
 8011a44:	e069      	b.n	8011b1a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d103      	bne.n	8011a54 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011a4c:	f001 fd32 	bl	80134b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011a50:	2300      	movs	r3, #0
 8011a52:	e062      	b.n	8011b1a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d106      	bne.n	8011a68 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011a5a:	f107 0310 	add.w	r3, r7, #16
 8011a5e:	4618      	mov	r0, r3
 8011a60:	f001 f840 	bl	8012ae4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011a64:	2301      	movs	r3, #1
 8011a66:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011a68:	f001 fd24 	bl	80134b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011a6c:	f000 fdc4 	bl	80125f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011a70:	f001 fcec 	bl	801344c <vPortEnterCritical>
 8011a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011a7a:	b25b      	sxtb	r3, r3
 8011a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011a80:	d103      	bne.n	8011a8a <xQueueReceive+0x12e>
 8011a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a84:	2200      	movs	r2, #0
 8011a86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011a90:	b25b      	sxtb	r3, r3
 8011a92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011a96:	d103      	bne.n	8011aa0 <xQueueReceive+0x144>
 8011a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011aa0:	f001 fd08 	bl	80134b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011aa4:	1d3a      	adds	r2, r7, #4
 8011aa6:	f107 0310 	add.w	r3, r7, #16
 8011aaa:	4611      	mov	r1, r2
 8011aac:	4618      	mov	r0, r3
 8011aae:	f001 f82f 	bl	8012b10 <xTaskCheckForTimeOut>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d123      	bne.n	8011b00 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011ab8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011aba:	f000 faee 	bl	801209a <prvIsQueueEmpty>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d017      	beq.n	8011af4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ac6:	3324      	adds	r3, #36	; 0x24
 8011ac8:	687a      	ldr	r2, [r7, #4]
 8011aca:	4611      	mov	r1, r2
 8011acc:	4618      	mov	r0, r3
 8011ace:	f000 ff7f 	bl	80129d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011ad2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ad4:	f000 fa8f 	bl	8011ff6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011ad8:	f000 fd9c 	bl	8012614 <xTaskResumeAll>
 8011adc:	4603      	mov	r3, r0
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d189      	bne.n	80119f6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8011ae2:	4b10      	ldr	r3, [pc, #64]	; (8011b24 <xQueueReceive+0x1c8>)
 8011ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ae8:	601a      	str	r2, [r3, #0]
 8011aea:	f3bf 8f4f 	dsb	sy
 8011aee:	f3bf 8f6f 	isb	sy
 8011af2:	e780      	b.n	80119f6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011af6:	f000 fa7e 	bl	8011ff6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011afa:	f000 fd8b 	bl	8012614 <xTaskResumeAll>
 8011afe:	e77a      	b.n	80119f6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011b00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b02:	f000 fa78 	bl	8011ff6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011b06:	f000 fd85 	bl	8012614 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011b0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011b0c:	f000 fac5 	bl	801209a <prvIsQueueEmpty>
 8011b10:	4603      	mov	r3, r0
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	f43f af6f 	beq.w	80119f6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011b18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	3730      	adds	r7, #48	; 0x30
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	bd80      	pop	{r7, pc}
 8011b22:	bf00      	nop
 8011b24:	e000ed04 	.word	0xe000ed04

08011b28 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b08e      	sub	sp, #56	; 0x38
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
 8011b30:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011b32:	2300      	movs	r3, #0
 8011b34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d10c      	bne.n	8011b5e <xQueueSemaphoreTake+0x36>
	__asm volatile
 8011b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b48:	b672      	cpsid	i
 8011b4a:	f383 8811 	msr	BASEPRI, r3
 8011b4e:	f3bf 8f6f 	isb	sy
 8011b52:	f3bf 8f4f 	dsb	sy
 8011b56:	b662      	cpsie	i
 8011b58:	623b      	str	r3, [r7, #32]
}
 8011b5a:	bf00      	nop
 8011b5c:	e7fe      	b.n	8011b5c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d00c      	beq.n	8011b80 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8011b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b6a:	b672      	cpsid	i
 8011b6c:	f383 8811 	msr	BASEPRI, r3
 8011b70:	f3bf 8f6f 	isb	sy
 8011b74:	f3bf 8f4f 	dsb	sy
 8011b78:	b662      	cpsie	i
 8011b7a:	61fb      	str	r3, [r7, #28]
}
 8011b7c:	bf00      	nop
 8011b7e:	e7fe      	b.n	8011b7e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011b80:	f001 f914 	bl	8012dac <xTaskGetSchedulerState>
 8011b84:	4603      	mov	r3, r0
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d102      	bne.n	8011b90 <xQueueSemaphoreTake+0x68>
 8011b8a:	683b      	ldr	r3, [r7, #0]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d101      	bne.n	8011b94 <xQueueSemaphoreTake+0x6c>
 8011b90:	2301      	movs	r3, #1
 8011b92:	e000      	b.n	8011b96 <xQueueSemaphoreTake+0x6e>
 8011b94:	2300      	movs	r3, #0
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d10c      	bne.n	8011bb4 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8011b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b9e:	b672      	cpsid	i
 8011ba0:	f383 8811 	msr	BASEPRI, r3
 8011ba4:	f3bf 8f6f 	isb	sy
 8011ba8:	f3bf 8f4f 	dsb	sy
 8011bac:	b662      	cpsie	i
 8011bae:	61bb      	str	r3, [r7, #24]
}
 8011bb0:	bf00      	nop
 8011bb2:	e7fe      	b.n	8011bb2 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011bb4:	f001 fc4a 	bl	801344c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bbc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d024      	beq.n	8011c0e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bc6:	1e5a      	subs	r2, r3, #1
 8011bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d104      	bne.n	8011bde <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011bd4:	f001 fab0 	bl	8013138 <pvTaskIncrementMutexHeldCount>
 8011bd8:	4602      	mov	r2, r0
 8011bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bdc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011be0:	691b      	ldr	r3, [r3, #16]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d00f      	beq.n	8011c06 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011be8:	3310      	adds	r3, #16
 8011bea:	4618      	mov	r0, r3
 8011bec:	f000 ff16 	bl	8012a1c <xTaskRemoveFromEventList>
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d007      	beq.n	8011c06 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011bf6:	4b55      	ldr	r3, [pc, #340]	; (8011d4c <xQueueSemaphoreTake+0x224>)
 8011bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bfc:	601a      	str	r2, [r3, #0]
 8011bfe:	f3bf 8f4f 	dsb	sy
 8011c02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011c06:	f001 fc55 	bl	80134b4 <vPortExitCritical>
				return pdPASS;
 8011c0a:	2301      	movs	r3, #1
 8011c0c:	e099      	b.n	8011d42 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d113      	bne.n	8011c3c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d00c      	beq.n	8011c34 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8011c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c1e:	b672      	cpsid	i
 8011c20:	f383 8811 	msr	BASEPRI, r3
 8011c24:	f3bf 8f6f 	isb	sy
 8011c28:	f3bf 8f4f 	dsb	sy
 8011c2c:	b662      	cpsie	i
 8011c2e:	617b      	str	r3, [r7, #20]
}
 8011c30:	bf00      	nop
 8011c32:	e7fe      	b.n	8011c32 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011c34:	f001 fc3e 	bl	80134b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011c38:	2300      	movs	r3, #0
 8011c3a:	e082      	b.n	8011d42 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d106      	bne.n	8011c50 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011c42:	f107 030c 	add.w	r3, r7, #12
 8011c46:	4618      	mov	r0, r3
 8011c48:	f000 ff4c 	bl	8012ae4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011c4c:	2301      	movs	r3, #1
 8011c4e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011c50:	f001 fc30 	bl	80134b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011c54:	f000 fcd0 	bl	80125f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011c58:	f001 fbf8 	bl	801344c <vPortEnterCritical>
 8011c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011c62:	b25b      	sxtb	r3, r3
 8011c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011c68:	d103      	bne.n	8011c72 <xQueueSemaphoreTake+0x14a>
 8011c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011c78:	b25b      	sxtb	r3, r3
 8011c7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011c7e:	d103      	bne.n	8011c88 <xQueueSemaphoreTake+0x160>
 8011c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c82:	2200      	movs	r2, #0
 8011c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011c88:	f001 fc14 	bl	80134b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011c8c:	463a      	mov	r2, r7
 8011c8e:	f107 030c 	add.w	r3, r7, #12
 8011c92:	4611      	mov	r1, r2
 8011c94:	4618      	mov	r0, r3
 8011c96:	f000 ff3b 	bl	8012b10 <xTaskCheckForTimeOut>
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d132      	bne.n	8011d06 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011ca0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011ca2:	f000 f9fa 	bl	801209a <prvIsQueueEmpty>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d026      	beq.n	8011cfa <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d109      	bne.n	8011cc8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8011cb4:	f001 fbca 	bl	801344c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cba:	689b      	ldr	r3, [r3, #8]
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	f001 f893 	bl	8012de8 <xTaskPriorityInherit>
 8011cc2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011cc4:	f001 fbf6 	bl	80134b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cca:	3324      	adds	r3, #36	; 0x24
 8011ccc:	683a      	ldr	r2, [r7, #0]
 8011cce:	4611      	mov	r1, r2
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	f000 fe7d 	bl	80129d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011cd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cd8:	f000 f98d 	bl	8011ff6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011cdc:	f000 fc9a 	bl	8012614 <xTaskResumeAll>
 8011ce0:	4603      	mov	r3, r0
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	f47f af66 	bne.w	8011bb4 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8011ce8:	4b18      	ldr	r3, [pc, #96]	; (8011d4c <xQueueSemaphoreTake+0x224>)
 8011cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cee:	601a      	str	r2, [r3, #0]
 8011cf0:	f3bf 8f4f 	dsb	sy
 8011cf4:	f3bf 8f6f 	isb	sy
 8011cf8:	e75c      	b.n	8011bb4 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011cfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cfc:	f000 f97b 	bl	8011ff6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011d00:	f000 fc88 	bl	8012614 <xTaskResumeAll>
 8011d04:	e756      	b.n	8011bb4 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011d06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d08:	f000 f975 	bl	8011ff6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011d0c:	f000 fc82 	bl	8012614 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011d10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d12:	f000 f9c2 	bl	801209a <prvIsQueueEmpty>
 8011d16:	4603      	mov	r3, r0
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	f43f af4b 	beq.w	8011bb4 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d00d      	beq.n	8011d40 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8011d24:	f001 fb92 	bl	801344c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011d28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d2a:	f000 f8bc 	bl	8011ea6 <prvGetDisinheritPriorityAfterTimeout>
 8011d2e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d32:	689b      	ldr	r3, [r3, #8]
 8011d34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011d36:	4618      	mov	r0, r3
 8011d38:	f001 f960 	bl	8012ffc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011d3c:	f001 fbba 	bl	80134b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011d40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011d42:	4618      	mov	r0, r3
 8011d44:	3738      	adds	r7, #56	; 0x38
 8011d46:	46bd      	mov	sp, r7
 8011d48:	bd80      	pop	{r7, pc}
 8011d4a:	bf00      	nop
 8011d4c:	e000ed04 	.word	0xe000ed04

08011d50 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011d50:	b580      	push	{r7, lr}
 8011d52:	b08e      	sub	sp, #56	; 0x38
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	60f8      	str	r0, [r7, #12]
 8011d58:	60b9      	str	r1, [r7, #8]
 8011d5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d10c      	bne.n	8011d80 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8011d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d6a:	b672      	cpsid	i
 8011d6c:	f383 8811 	msr	BASEPRI, r3
 8011d70:	f3bf 8f6f 	isb	sy
 8011d74:	f3bf 8f4f 	dsb	sy
 8011d78:	b662      	cpsie	i
 8011d7a:	623b      	str	r3, [r7, #32]
}
 8011d7c:	bf00      	nop
 8011d7e:	e7fe      	b.n	8011d7e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011d80:	68bb      	ldr	r3, [r7, #8]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d103      	bne.n	8011d8e <xQueueReceiveFromISR+0x3e>
 8011d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d101      	bne.n	8011d92 <xQueueReceiveFromISR+0x42>
 8011d8e:	2301      	movs	r3, #1
 8011d90:	e000      	b.n	8011d94 <xQueueReceiveFromISR+0x44>
 8011d92:	2300      	movs	r3, #0
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d10c      	bne.n	8011db2 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8011d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d9c:	b672      	cpsid	i
 8011d9e:	f383 8811 	msr	BASEPRI, r3
 8011da2:	f3bf 8f6f 	isb	sy
 8011da6:	f3bf 8f4f 	dsb	sy
 8011daa:	b662      	cpsie	i
 8011dac:	61fb      	str	r3, [r7, #28]
}
 8011dae:	bf00      	nop
 8011db0:	e7fe      	b.n	8011db0 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011db2:	f001 fc33 	bl	801361c <vPortValidateInterruptPriority>
	__asm volatile
 8011db6:	f3ef 8211 	mrs	r2, BASEPRI
 8011dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dbe:	b672      	cpsid	i
 8011dc0:	f383 8811 	msr	BASEPRI, r3
 8011dc4:	f3bf 8f6f 	isb	sy
 8011dc8:	f3bf 8f4f 	dsb	sy
 8011dcc:	b662      	cpsie	i
 8011dce:	61ba      	str	r2, [r7, #24]
 8011dd0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011dd2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011dda:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d02f      	beq.n	8011e42 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011de4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011de8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011dec:	68b9      	ldr	r1, [r7, #8]
 8011dee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011df0:	f000 f8db 	bl	8011faa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011df6:	1e5a      	subs	r2, r3, #1
 8011df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dfa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011dfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011e00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e04:	d112      	bne.n	8011e2c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e08:	691b      	ldr	r3, [r3, #16]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d016      	beq.n	8011e3c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e10:	3310      	adds	r3, #16
 8011e12:	4618      	mov	r0, r3
 8011e14:	f000 fe02 	bl	8012a1c <xTaskRemoveFromEventList>
 8011e18:	4603      	mov	r3, r0
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d00e      	beq.n	8011e3c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d00b      	beq.n	8011e3c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	2201      	movs	r2, #1
 8011e28:	601a      	str	r2, [r3, #0]
 8011e2a:	e007      	b.n	8011e3c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e30:	3301      	adds	r3, #1
 8011e32:	b2db      	uxtb	r3, r3
 8011e34:	b25a      	sxtb	r2, r3
 8011e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011e3c:	2301      	movs	r3, #1
 8011e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8011e40:	e001      	b.n	8011e46 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8011e42:	2300      	movs	r3, #0
 8011e44:	637b      	str	r3, [r7, #52]	; 0x34
 8011e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e48:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011e4a:	693b      	ldr	r3, [r7, #16]
 8011e4c:	f383 8811 	msr	BASEPRI, r3
}
 8011e50:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011e54:	4618      	mov	r0, r3
 8011e56:	3738      	adds	r7, #56	; 0x38
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	bd80      	pop	{r7, pc}

08011e5c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b084      	sub	sp, #16
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d10c      	bne.n	8011e88 <vQueueDelete+0x2c>
	__asm volatile
 8011e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e72:	b672      	cpsid	i
 8011e74:	f383 8811 	msr	BASEPRI, r3
 8011e78:	f3bf 8f6f 	isb	sy
 8011e7c:	f3bf 8f4f 	dsb	sy
 8011e80:	b662      	cpsie	i
 8011e82:	60bb      	str	r3, [r7, #8]
}
 8011e84:	bf00      	nop
 8011e86:	e7fe      	b.n	8011e86 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011e88:	68f8      	ldr	r0, [r7, #12]
 8011e8a:	f000 f935 	bl	80120f8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d102      	bne.n	8011e9e <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8011e98:	68f8      	ldr	r0, [r7, #12]
 8011e9a:	f001 fccd 	bl	8013838 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011e9e:	bf00      	nop
 8011ea0:	3710      	adds	r7, #16
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	bd80      	pop	{r7, pc}

08011ea6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011ea6:	b480      	push	{r7}
 8011ea8:	b085      	sub	sp, #20
 8011eaa:	af00      	add	r7, sp, #0
 8011eac:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d006      	beq.n	8011ec4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	f1c3 0307 	rsb	r3, r3, #7
 8011ec0:	60fb      	str	r3, [r7, #12]
 8011ec2:	e001      	b.n	8011ec8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011ec8:	68fb      	ldr	r3, [r7, #12]
	}
 8011eca:	4618      	mov	r0, r3
 8011ecc:	3714      	adds	r7, #20
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed4:	4770      	bx	lr

08011ed6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011ed6:	b580      	push	{r7, lr}
 8011ed8:	b086      	sub	sp, #24
 8011eda:	af00      	add	r7, sp, #0
 8011edc:	60f8      	str	r0, [r7, #12]
 8011ede:	60b9      	str	r1, [r7, #8]
 8011ee0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011eea:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d10d      	bne.n	8011f10 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d14d      	bne.n	8011f98 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	689b      	ldr	r3, [r3, #8]
 8011f00:	4618      	mov	r0, r3
 8011f02:	f000 fff1 	bl	8012ee8 <xTaskPriorityDisinherit>
 8011f06:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	609a      	str	r2, [r3, #8]
 8011f0e:	e043      	b.n	8011f98 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d119      	bne.n	8011f4a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	6858      	ldr	r0, [r3, #4]
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f1e:	461a      	mov	r2, r3
 8011f20:	68b9      	ldr	r1, [r7, #8]
 8011f22:	f00f fa25 	bl	8021370 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	685a      	ldr	r2, [r3, #4]
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f2e:	441a      	add	r2, r3
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	685a      	ldr	r2, [r3, #4]
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	689b      	ldr	r3, [r3, #8]
 8011f3c:	429a      	cmp	r2, r3
 8011f3e:	d32b      	bcc.n	8011f98 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	681a      	ldr	r2, [r3, #0]
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	605a      	str	r2, [r3, #4]
 8011f48:	e026      	b.n	8011f98 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	68d8      	ldr	r0, [r3, #12]
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f52:	461a      	mov	r2, r3
 8011f54:	68b9      	ldr	r1, [r7, #8]
 8011f56:	f00f fa0b 	bl	8021370 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	68da      	ldr	r2, [r3, #12]
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f62:	425b      	negs	r3, r3
 8011f64:	441a      	add	r2, r3
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	68da      	ldr	r2, [r3, #12]
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	429a      	cmp	r2, r3
 8011f74:	d207      	bcs.n	8011f86 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	689a      	ldr	r2, [r3, #8]
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f7e:	425b      	negs	r3, r3
 8011f80:	441a      	add	r2, r3
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	2b02      	cmp	r3, #2
 8011f8a:	d105      	bne.n	8011f98 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011f8c:	693b      	ldr	r3, [r7, #16]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d002      	beq.n	8011f98 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011f92:	693b      	ldr	r3, [r7, #16]
 8011f94:	3b01      	subs	r3, #1
 8011f96:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011f98:	693b      	ldr	r3, [r7, #16]
 8011f9a:	1c5a      	adds	r2, r3, #1
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011fa0:	697b      	ldr	r3, [r7, #20]
}
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	3718      	adds	r7, #24
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	bd80      	pop	{r7, pc}

08011faa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011faa:	b580      	push	{r7, lr}
 8011fac:	b082      	sub	sp, #8
 8011fae:	af00      	add	r7, sp, #0
 8011fb0:	6078      	str	r0, [r7, #4]
 8011fb2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d018      	beq.n	8011fee <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	68da      	ldr	r2, [r3, #12]
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011fc4:	441a      	add	r2, r3
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	68da      	ldr	r2, [r3, #12]
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	689b      	ldr	r3, [r3, #8]
 8011fd2:	429a      	cmp	r2, r3
 8011fd4:	d303      	bcc.n	8011fde <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	681a      	ldr	r2, [r3, #0]
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	68d9      	ldr	r1, [r3, #12]
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011fe6:	461a      	mov	r2, r3
 8011fe8:	6838      	ldr	r0, [r7, #0]
 8011fea:	f00f f9c1 	bl	8021370 <memcpy>
	}
}
 8011fee:	bf00      	nop
 8011ff0:	3708      	adds	r7, #8
 8011ff2:	46bd      	mov	sp, r7
 8011ff4:	bd80      	pop	{r7, pc}

08011ff6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011ff6:	b580      	push	{r7, lr}
 8011ff8:	b084      	sub	sp, #16
 8011ffa:	af00      	add	r7, sp, #0
 8011ffc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011ffe:	f001 fa25 	bl	801344c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012008:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801200a:	e011      	b.n	8012030 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012010:	2b00      	cmp	r3, #0
 8012012:	d012      	beq.n	801203a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	3324      	adds	r3, #36	; 0x24
 8012018:	4618      	mov	r0, r3
 801201a:	f000 fcff 	bl	8012a1c <xTaskRemoveFromEventList>
 801201e:	4603      	mov	r3, r0
 8012020:	2b00      	cmp	r3, #0
 8012022:	d001      	beq.n	8012028 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012024:	f000 fdda 	bl	8012bdc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012028:	7bfb      	ldrb	r3, [r7, #15]
 801202a:	3b01      	subs	r3, #1
 801202c:	b2db      	uxtb	r3, r3
 801202e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012034:	2b00      	cmp	r3, #0
 8012036:	dce9      	bgt.n	801200c <prvUnlockQueue+0x16>
 8012038:	e000      	b.n	801203c <prvUnlockQueue+0x46>
					break;
 801203a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	22ff      	movs	r2, #255	; 0xff
 8012040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012044:	f001 fa36 	bl	80134b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012048:	f001 fa00 	bl	801344c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012052:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012054:	e011      	b.n	801207a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	691b      	ldr	r3, [r3, #16]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d012      	beq.n	8012084 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	3310      	adds	r3, #16
 8012062:	4618      	mov	r0, r3
 8012064:	f000 fcda 	bl	8012a1c <xTaskRemoveFromEventList>
 8012068:	4603      	mov	r3, r0
 801206a:	2b00      	cmp	r3, #0
 801206c:	d001      	beq.n	8012072 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801206e:	f000 fdb5 	bl	8012bdc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012072:	7bbb      	ldrb	r3, [r7, #14]
 8012074:	3b01      	subs	r3, #1
 8012076:	b2db      	uxtb	r3, r3
 8012078:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801207a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801207e:	2b00      	cmp	r3, #0
 8012080:	dce9      	bgt.n	8012056 <prvUnlockQueue+0x60>
 8012082:	e000      	b.n	8012086 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012084:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	22ff      	movs	r2, #255	; 0xff
 801208a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801208e:	f001 fa11 	bl	80134b4 <vPortExitCritical>
}
 8012092:	bf00      	nop
 8012094:	3710      	adds	r7, #16
 8012096:	46bd      	mov	sp, r7
 8012098:	bd80      	pop	{r7, pc}

0801209a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801209a:	b580      	push	{r7, lr}
 801209c:	b084      	sub	sp, #16
 801209e:	af00      	add	r7, sp, #0
 80120a0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80120a2:	f001 f9d3 	bl	801344c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d102      	bne.n	80120b4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80120ae:	2301      	movs	r3, #1
 80120b0:	60fb      	str	r3, [r7, #12]
 80120b2:	e001      	b.n	80120b8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80120b4:	2300      	movs	r3, #0
 80120b6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80120b8:	f001 f9fc 	bl	80134b4 <vPortExitCritical>

	return xReturn;
 80120bc:	68fb      	ldr	r3, [r7, #12]
}
 80120be:	4618      	mov	r0, r3
 80120c0:	3710      	adds	r7, #16
 80120c2:	46bd      	mov	sp, r7
 80120c4:	bd80      	pop	{r7, pc}

080120c6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80120c6:	b580      	push	{r7, lr}
 80120c8:	b084      	sub	sp, #16
 80120ca:	af00      	add	r7, sp, #0
 80120cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80120ce:	f001 f9bd 	bl	801344c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120da:	429a      	cmp	r2, r3
 80120dc:	d102      	bne.n	80120e4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80120de:	2301      	movs	r3, #1
 80120e0:	60fb      	str	r3, [r7, #12]
 80120e2:	e001      	b.n	80120e8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80120e4:	2300      	movs	r3, #0
 80120e6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80120e8:	f001 f9e4 	bl	80134b4 <vPortExitCritical>

	return xReturn;
 80120ec:	68fb      	ldr	r3, [r7, #12]
}
 80120ee:	4618      	mov	r0, r3
 80120f0:	3710      	adds	r7, #16
 80120f2:	46bd      	mov	sp, r7
 80120f4:	bd80      	pop	{r7, pc}
	...

080120f8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80120f8:	b480      	push	{r7}
 80120fa:	b085      	sub	sp, #20
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012100:	2300      	movs	r3, #0
 8012102:	60fb      	str	r3, [r7, #12]
 8012104:	e016      	b.n	8012134 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012106:	4a10      	ldr	r2, [pc, #64]	; (8012148 <vQueueUnregisterQueue+0x50>)
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	00db      	lsls	r3, r3, #3
 801210c:	4413      	add	r3, r2
 801210e:	685b      	ldr	r3, [r3, #4]
 8012110:	687a      	ldr	r2, [r7, #4]
 8012112:	429a      	cmp	r2, r3
 8012114:	d10b      	bne.n	801212e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8012116:	4a0c      	ldr	r2, [pc, #48]	; (8012148 <vQueueUnregisterQueue+0x50>)
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	2100      	movs	r1, #0
 801211c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8012120:	4a09      	ldr	r2, [pc, #36]	; (8012148 <vQueueUnregisterQueue+0x50>)
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	00db      	lsls	r3, r3, #3
 8012126:	4413      	add	r3, r2
 8012128:	2200      	movs	r2, #0
 801212a:	605a      	str	r2, [r3, #4]
				break;
 801212c:	e006      	b.n	801213c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	3301      	adds	r3, #1
 8012132:	60fb      	str	r3, [r7, #12]
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	2b07      	cmp	r3, #7
 8012138:	d9e5      	bls.n	8012106 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801213a:	bf00      	nop
 801213c:	bf00      	nop
 801213e:	3714      	adds	r7, #20
 8012140:	46bd      	mov	sp, r7
 8012142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012146:	4770      	bx	lr
 8012148:	20011078 	.word	0x20011078

0801214c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801214c:	b580      	push	{r7, lr}
 801214e:	b08e      	sub	sp, #56	; 0x38
 8012150:	af04      	add	r7, sp, #16
 8012152:	60f8      	str	r0, [r7, #12]
 8012154:	60b9      	str	r1, [r7, #8]
 8012156:	607a      	str	r2, [r7, #4]
 8012158:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801215a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801215c:	2b00      	cmp	r3, #0
 801215e:	d10c      	bne.n	801217a <xTaskCreateStatic+0x2e>
	__asm volatile
 8012160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012164:	b672      	cpsid	i
 8012166:	f383 8811 	msr	BASEPRI, r3
 801216a:	f3bf 8f6f 	isb	sy
 801216e:	f3bf 8f4f 	dsb	sy
 8012172:	b662      	cpsie	i
 8012174:	623b      	str	r3, [r7, #32]
}
 8012176:	bf00      	nop
 8012178:	e7fe      	b.n	8012178 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 801217a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801217c:	2b00      	cmp	r3, #0
 801217e:	d10c      	bne.n	801219a <xTaskCreateStatic+0x4e>
	__asm volatile
 8012180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012184:	b672      	cpsid	i
 8012186:	f383 8811 	msr	BASEPRI, r3
 801218a:	f3bf 8f6f 	isb	sy
 801218e:	f3bf 8f4f 	dsb	sy
 8012192:	b662      	cpsie	i
 8012194:	61fb      	str	r3, [r7, #28]
}
 8012196:	bf00      	nop
 8012198:	e7fe      	b.n	8012198 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801219a:	23b4      	movs	r3, #180	; 0xb4
 801219c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801219e:	693b      	ldr	r3, [r7, #16]
 80121a0:	2bb4      	cmp	r3, #180	; 0xb4
 80121a2:	d00c      	beq.n	80121be <xTaskCreateStatic+0x72>
	__asm volatile
 80121a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121a8:	b672      	cpsid	i
 80121aa:	f383 8811 	msr	BASEPRI, r3
 80121ae:	f3bf 8f6f 	isb	sy
 80121b2:	f3bf 8f4f 	dsb	sy
 80121b6:	b662      	cpsie	i
 80121b8:	61bb      	str	r3, [r7, #24]
}
 80121ba:	bf00      	nop
 80121bc:	e7fe      	b.n	80121bc <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80121be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80121c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d01e      	beq.n	8012204 <xTaskCreateStatic+0xb8>
 80121c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d01b      	beq.n	8012204 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80121cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80121d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80121d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80121d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121d8:	2202      	movs	r2, #2
 80121da:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80121de:	2300      	movs	r3, #0
 80121e0:	9303      	str	r3, [sp, #12]
 80121e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121e4:	9302      	str	r3, [sp, #8]
 80121e6:	f107 0314 	add.w	r3, r7, #20
 80121ea:	9301      	str	r3, [sp, #4]
 80121ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ee:	9300      	str	r3, [sp, #0]
 80121f0:	683b      	ldr	r3, [r7, #0]
 80121f2:	687a      	ldr	r2, [r7, #4]
 80121f4:	68b9      	ldr	r1, [r7, #8]
 80121f6:	68f8      	ldr	r0, [r7, #12]
 80121f8:	f000 f850 	bl	801229c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80121fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80121fe:	f000 f8ed 	bl	80123dc <prvAddNewTaskToReadyList>
 8012202:	e001      	b.n	8012208 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8012204:	2300      	movs	r3, #0
 8012206:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012208:	697b      	ldr	r3, [r7, #20]
	}
 801220a:	4618      	mov	r0, r3
 801220c:	3728      	adds	r7, #40	; 0x28
 801220e:	46bd      	mov	sp, r7
 8012210:	bd80      	pop	{r7, pc}

08012212 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012212:	b580      	push	{r7, lr}
 8012214:	b08c      	sub	sp, #48	; 0x30
 8012216:	af04      	add	r7, sp, #16
 8012218:	60f8      	str	r0, [r7, #12]
 801221a:	60b9      	str	r1, [r7, #8]
 801221c:	603b      	str	r3, [r7, #0]
 801221e:	4613      	mov	r3, r2
 8012220:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012222:	88fb      	ldrh	r3, [r7, #6]
 8012224:	009b      	lsls	r3, r3, #2
 8012226:	4618      	mov	r0, r3
 8012228:	f001 fa3c 	bl	80136a4 <pvPortMalloc>
 801222c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801222e:	697b      	ldr	r3, [r7, #20]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d00e      	beq.n	8012252 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012234:	20b4      	movs	r0, #180	; 0xb4
 8012236:	f001 fa35 	bl	80136a4 <pvPortMalloc>
 801223a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801223c:	69fb      	ldr	r3, [r7, #28]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d003      	beq.n	801224a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012242:	69fb      	ldr	r3, [r7, #28]
 8012244:	697a      	ldr	r2, [r7, #20]
 8012246:	631a      	str	r2, [r3, #48]	; 0x30
 8012248:	e005      	b.n	8012256 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801224a:	6978      	ldr	r0, [r7, #20]
 801224c:	f001 faf4 	bl	8013838 <vPortFree>
 8012250:	e001      	b.n	8012256 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012252:	2300      	movs	r3, #0
 8012254:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012256:	69fb      	ldr	r3, [r7, #28]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d017      	beq.n	801228c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801225c:	69fb      	ldr	r3, [r7, #28]
 801225e:	2200      	movs	r2, #0
 8012260:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012264:	88fa      	ldrh	r2, [r7, #6]
 8012266:	2300      	movs	r3, #0
 8012268:	9303      	str	r3, [sp, #12]
 801226a:	69fb      	ldr	r3, [r7, #28]
 801226c:	9302      	str	r3, [sp, #8]
 801226e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012270:	9301      	str	r3, [sp, #4]
 8012272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012274:	9300      	str	r3, [sp, #0]
 8012276:	683b      	ldr	r3, [r7, #0]
 8012278:	68b9      	ldr	r1, [r7, #8]
 801227a:	68f8      	ldr	r0, [r7, #12]
 801227c:	f000 f80e 	bl	801229c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012280:	69f8      	ldr	r0, [r7, #28]
 8012282:	f000 f8ab 	bl	80123dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012286:	2301      	movs	r3, #1
 8012288:	61bb      	str	r3, [r7, #24]
 801228a:	e002      	b.n	8012292 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801228c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012290:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012292:	69bb      	ldr	r3, [r7, #24]
	}
 8012294:	4618      	mov	r0, r3
 8012296:	3720      	adds	r7, #32
 8012298:	46bd      	mov	sp, r7
 801229a:	bd80      	pop	{r7, pc}

0801229c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801229c:	b580      	push	{r7, lr}
 801229e:	b088      	sub	sp, #32
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	60f8      	str	r0, [r7, #12]
 80122a4:	60b9      	str	r1, [r7, #8]
 80122a6:	607a      	str	r2, [r7, #4]
 80122a8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80122aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80122ae:	6879      	ldr	r1, [r7, #4]
 80122b0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80122b4:	440b      	add	r3, r1
 80122b6:	009b      	lsls	r3, r3, #2
 80122b8:	4413      	add	r3, r2
 80122ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80122bc:	69bb      	ldr	r3, [r7, #24]
 80122be:	f023 0307 	bic.w	r3, r3, #7
 80122c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80122c4:	69bb      	ldr	r3, [r7, #24]
 80122c6:	f003 0307 	and.w	r3, r3, #7
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d00c      	beq.n	80122e8 <prvInitialiseNewTask+0x4c>
	__asm volatile
 80122ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122d2:	b672      	cpsid	i
 80122d4:	f383 8811 	msr	BASEPRI, r3
 80122d8:	f3bf 8f6f 	isb	sy
 80122dc:	f3bf 8f4f 	dsb	sy
 80122e0:	b662      	cpsie	i
 80122e2:	617b      	str	r3, [r7, #20]
}
 80122e4:	bf00      	nop
 80122e6:	e7fe      	b.n	80122e6 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80122e8:	68bb      	ldr	r3, [r7, #8]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d01f      	beq.n	801232e <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80122ee:	2300      	movs	r3, #0
 80122f0:	61fb      	str	r3, [r7, #28]
 80122f2:	e012      	b.n	801231a <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80122f4:	68ba      	ldr	r2, [r7, #8]
 80122f6:	69fb      	ldr	r3, [r7, #28]
 80122f8:	4413      	add	r3, r2
 80122fa:	7819      	ldrb	r1, [r3, #0]
 80122fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80122fe:	69fb      	ldr	r3, [r7, #28]
 8012300:	4413      	add	r3, r2
 8012302:	3334      	adds	r3, #52	; 0x34
 8012304:	460a      	mov	r2, r1
 8012306:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012308:	68ba      	ldr	r2, [r7, #8]
 801230a:	69fb      	ldr	r3, [r7, #28]
 801230c:	4413      	add	r3, r2
 801230e:	781b      	ldrb	r3, [r3, #0]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d006      	beq.n	8012322 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012314:	69fb      	ldr	r3, [r7, #28]
 8012316:	3301      	adds	r3, #1
 8012318:	61fb      	str	r3, [r7, #28]
 801231a:	69fb      	ldr	r3, [r7, #28]
 801231c:	2b0f      	cmp	r3, #15
 801231e:	d9e9      	bls.n	80122f4 <prvInitialiseNewTask+0x58>
 8012320:	e000      	b.n	8012324 <prvInitialiseNewTask+0x88>
			{
				break;
 8012322:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012326:	2200      	movs	r2, #0
 8012328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801232c:	e003      	b.n	8012336 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801232e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012330:	2200      	movs	r2, #0
 8012332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012338:	2b06      	cmp	r3, #6
 801233a:	d901      	bls.n	8012340 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801233c:	2306      	movs	r3, #6
 801233e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012344:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801234a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801234c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801234e:	2200      	movs	r2, #0
 8012350:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012354:	3304      	adds	r3, #4
 8012356:	4618      	mov	r0, r3
 8012358:	f7fe fe96 	bl	8011088 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801235c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801235e:	3318      	adds	r3, #24
 8012360:	4618      	mov	r0, r3
 8012362:	f7fe fe91 	bl	8011088 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801236a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801236c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801236e:	f1c3 0207 	rsb	r2, r3, #7
 8012372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012374:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801237a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801237c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801237e:	2200      	movs	r2, #0
 8012380:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012386:	2200      	movs	r2, #0
 8012388:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801238c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801238e:	334c      	adds	r3, #76	; 0x4c
 8012390:	2260      	movs	r2, #96	; 0x60
 8012392:	2100      	movs	r1, #0
 8012394:	4618      	mov	r0, r3
 8012396:	f00f f813 	bl	80213c0 <memset>
 801239a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801239c:	4a0c      	ldr	r2, [pc, #48]	; (80123d0 <prvInitialiseNewTask+0x134>)
 801239e:	651a      	str	r2, [r3, #80]	; 0x50
 80123a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123a2:	4a0c      	ldr	r2, [pc, #48]	; (80123d4 <prvInitialiseNewTask+0x138>)
 80123a4:	655a      	str	r2, [r3, #84]	; 0x54
 80123a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123a8:	4a0b      	ldr	r2, [pc, #44]	; (80123d8 <prvInitialiseNewTask+0x13c>)
 80123aa:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80123ac:	683a      	ldr	r2, [r7, #0]
 80123ae:	68f9      	ldr	r1, [r7, #12]
 80123b0:	69b8      	ldr	r0, [r7, #24]
 80123b2:	f000 ff3b 	bl	801322c <pxPortInitialiseStack>
 80123b6:	4602      	mov	r2, r0
 80123b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80123bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d002      	beq.n	80123c8 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80123c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80123c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80123c8:	bf00      	nop
 80123ca:	3720      	adds	r7, #32
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bd80      	pop	{r7, pc}
 80123d0:	0802b0c8 	.word	0x0802b0c8
 80123d4:	0802b0e8 	.word	0x0802b0e8
 80123d8:	0802b0a8 	.word	0x0802b0a8

080123dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b082      	sub	sp, #8
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80123e4:	f001 f832 	bl	801344c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80123e8:	4b2a      	ldr	r3, [pc, #168]	; (8012494 <prvAddNewTaskToReadyList+0xb8>)
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	3301      	adds	r3, #1
 80123ee:	4a29      	ldr	r2, [pc, #164]	; (8012494 <prvAddNewTaskToReadyList+0xb8>)
 80123f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80123f2:	4b29      	ldr	r3, [pc, #164]	; (8012498 <prvAddNewTaskToReadyList+0xbc>)
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d109      	bne.n	801240e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80123fa:	4a27      	ldr	r2, [pc, #156]	; (8012498 <prvAddNewTaskToReadyList+0xbc>)
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012400:	4b24      	ldr	r3, [pc, #144]	; (8012494 <prvAddNewTaskToReadyList+0xb8>)
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	2b01      	cmp	r3, #1
 8012406:	d110      	bne.n	801242a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012408:	f000 fc0c 	bl	8012c24 <prvInitialiseTaskLists>
 801240c:	e00d      	b.n	801242a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801240e:	4b23      	ldr	r3, [pc, #140]	; (801249c <prvAddNewTaskToReadyList+0xc0>)
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d109      	bne.n	801242a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012416:	4b20      	ldr	r3, [pc, #128]	; (8012498 <prvAddNewTaskToReadyList+0xbc>)
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012420:	429a      	cmp	r2, r3
 8012422:	d802      	bhi.n	801242a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012424:	4a1c      	ldr	r2, [pc, #112]	; (8012498 <prvAddNewTaskToReadyList+0xbc>)
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801242a:	4b1d      	ldr	r3, [pc, #116]	; (80124a0 <prvAddNewTaskToReadyList+0xc4>)
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	3301      	adds	r3, #1
 8012430:	4a1b      	ldr	r2, [pc, #108]	; (80124a0 <prvAddNewTaskToReadyList+0xc4>)
 8012432:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012438:	2201      	movs	r2, #1
 801243a:	409a      	lsls	r2, r3
 801243c:	4b19      	ldr	r3, [pc, #100]	; (80124a4 <prvAddNewTaskToReadyList+0xc8>)
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	4313      	orrs	r3, r2
 8012442:	4a18      	ldr	r2, [pc, #96]	; (80124a4 <prvAddNewTaskToReadyList+0xc8>)
 8012444:	6013      	str	r3, [r2, #0]
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801244a:	4613      	mov	r3, r2
 801244c:	009b      	lsls	r3, r3, #2
 801244e:	4413      	add	r3, r2
 8012450:	009b      	lsls	r3, r3, #2
 8012452:	4a15      	ldr	r2, [pc, #84]	; (80124a8 <prvAddNewTaskToReadyList+0xcc>)
 8012454:	441a      	add	r2, r3
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	3304      	adds	r3, #4
 801245a:	4619      	mov	r1, r3
 801245c:	4610      	mov	r0, r2
 801245e:	f7fe fe20 	bl	80110a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012462:	f001 f827 	bl	80134b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012466:	4b0d      	ldr	r3, [pc, #52]	; (801249c <prvAddNewTaskToReadyList+0xc0>)
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d00e      	beq.n	801248c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801246e:	4b0a      	ldr	r3, [pc, #40]	; (8012498 <prvAddNewTaskToReadyList+0xbc>)
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012478:	429a      	cmp	r2, r3
 801247a:	d207      	bcs.n	801248c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801247c:	4b0b      	ldr	r3, [pc, #44]	; (80124ac <prvAddNewTaskToReadyList+0xd0>)
 801247e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012482:	601a      	str	r2, [r3, #0]
 8012484:	f3bf 8f4f 	dsb	sy
 8012488:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801248c:	bf00      	nop
 801248e:	3708      	adds	r7, #8
 8012490:	46bd      	mov	sp, r7
 8012492:	bd80      	pop	{r7, pc}
 8012494:	200011e8 	.word	0x200011e8
 8012498:	200010e8 	.word	0x200010e8
 801249c:	200011f4 	.word	0x200011f4
 80124a0:	20001204 	.word	0x20001204
 80124a4:	200011f0 	.word	0x200011f0
 80124a8:	200010ec 	.word	0x200010ec
 80124ac:	e000ed04 	.word	0xe000ed04

080124b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b084      	sub	sp, #16
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80124b8:	2300      	movs	r3, #0
 80124ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d019      	beq.n	80124f6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80124c2:	4b14      	ldr	r3, [pc, #80]	; (8012514 <vTaskDelay+0x64>)
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d00c      	beq.n	80124e4 <vTaskDelay+0x34>
	__asm volatile
 80124ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124ce:	b672      	cpsid	i
 80124d0:	f383 8811 	msr	BASEPRI, r3
 80124d4:	f3bf 8f6f 	isb	sy
 80124d8:	f3bf 8f4f 	dsb	sy
 80124dc:	b662      	cpsie	i
 80124de:	60bb      	str	r3, [r7, #8]
}
 80124e0:	bf00      	nop
 80124e2:	e7fe      	b.n	80124e2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80124e4:	f000 f888 	bl	80125f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80124e8:	2100      	movs	r1, #0
 80124ea:	6878      	ldr	r0, [r7, #4]
 80124ec:	f000 fe38 	bl	8013160 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80124f0:	f000 f890 	bl	8012614 <xTaskResumeAll>
 80124f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d107      	bne.n	801250c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80124fc:	4b06      	ldr	r3, [pc, #24]	; (8012518 <vTaskDelay+0x68>)
 80124fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012502:	601a      	str	r2, [r3, #0]
 8012504:	f3bf 8f4f 	dsb	sy
 8012508:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801250c:	bf00      	nop
 801250e:	3710      	adds	r7, #16
 8012510:	46bd      	mov	sp, r7
 8012512:	bd80      	pop	{r7, pc}
 8012514:	20001210 	.word	0x20001210
 8012518:	e000ed04 	.word	0xe000ed04

0801251c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801251c:	b580      	push	{r7, lr}
 801251e:	b08a      	sub	sp, #40	; 0x28
 8012520:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012522:	2300      	movs	r3, #0
 8012524:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012526:	2300      	movs	r3, #0
 8012528:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801252a:	463a      	mov	r2, r7
 801252c:	1d39      	adds	r1, r7, #4
 801252e:	f107 0308 	add.w	r3, r7, #8
 8012532:	4618      	mov	r0, r3
 8012534:	f7ef fcac 	bl	8001e90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012538:	6839      	ldr	r1, [r7, #0]
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	68ba      	ldr	r2, [r7, #8]
 801253e:	9202      	str	r2, [sp, #8]
 8012540:	9301      	str	r3, [sp, #4]
 8012542:	2300      	movs	r3, #0
 8012544:	9300      	str	r3, [sp, #0]
 8012546:	2300      	movs	r3, #0
 8012548:	460a      	mov	r2, r1
 801254a:	4923      	ldr	r1, [pc, #140]	; (80125d8 <vTaskStartScheduler+0xbc>)
 801254c:	4823      	ldr	r0, [pc, #140]	; (80125dc <vTaskStartScheduler+0xc0>)
 801254e:	f7ff fdfd 	bl	801214c <xTaskCreateStatic>
 8012552:	4603      	mov	r3, r0
 8012554:	4a22      	ldr	r2, [pc, #136]	; (80125e0 <vTaskStartScheduler+0xc4>)
 8012556:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012558:	4b21      	ldr	r3, [pc, #132]	; (80125e0 <vTaskStartScheduler+0xc4>)
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d002      	beq.n	8012566 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012560:	2301      	movs	r3, #1
 8012562:	617b      	str	r3, [r7, #20]
 8012564:	e001      	b.n	801256a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012566:	2300      	movs	r3, #0
 8012568:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801256a:	697b      	ldr	r3, [r7, #20]
 801256c:	2b01      	cmp	r3, #1
 801256e:	d11d      	bne.n	80125ac <vTaskStartScheduler+0x90>
	__asm volatile
 8012570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012574:	b672      	cpsid	i
 8012576:	f383 8811 	msr	BASEPRI, r3
 801257a:	f3bf 8f6f 	isb	sy
 801257e:	f3bf 8f4f 	dsb	sy
 8012582:	b662      	cpsie	i
 8012584:	613b      	str	r3, [r7, #16]
}
 8012586:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012588:	4b16      	ldr	r3, [pc, #88]	; (80125e4 <vTaskStartScheduler+0xc8>)
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	334c      	adds	r3, #76	; 0x4c
 801258e:	4a16      	ldr	r2, [pc, #88]	; (80125e8 <vTaskStartScheduler+0xcc>)
 8012590:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012592:	4b16      	ldr	r3, [pc, #88]	; (80125ec <vTaskStartScheduler+0xd0>)
 8012594:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012598:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801259a:	4b15      	ldr	r3, [pc, #84]	; (80125f0 <vTaskStartScheduler+0xd4>)
 801259c:	2201      	movs	r2, #1
 801259e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80125a0:	4b14      	ldr	r3, [pc, #80]	; (80125f4 <vTaskStartScheduler+0xd8>)
 80125a2:	2200      	movs	r2, #0
 80125a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80125a6:	f000 fed3 	bl	8013350 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80125aa:	e010      	b.n	80125ce <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80125ac:	697b      	ldr	r3, [r7, #20]
 80125ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80125b2:	d10c      	bne.n	80125ce <vTaskStartScheduler+0xb2>
	__asm volatile
 80125b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125b8:	b672      	cpsid	i
 80125ba:	f383 8811 	msr	BASEPRI, r3
 80125be:	f3bf 8f6f 	isb	sy
 80125c2:	f3bf 8f4f 	dsb	sy
 80125c6:	b662      	cpsie	i
 80125c8:	60fb      	str	r3, [r7, #12]
}
 80125ca:	bf00      	nop
 80125cc:	e7fe      	b.n	80125cc <vTaskStartScheduler+0xb0>
}
 80125ce:	bf00      	nop
 80125d0:	3718      	adds	r7, #24
 80125d2:	46bd      	mov	sp, r7
 80125d4:	bd80      	pop	{r7, pc}
 80125d6:	bf00      	nop
 80125d8:	08023df0 	.word	0x08023df0
 80125dc:	08012bf5 	.word	0x08012bf5
 80125e0:	2000120c 	.word	0x2000120c
 80125e4:	200010e8 	.word	0x200010e8
 80125e8:	20000750 	.word	0x20000750
 80125ec:	20001208 	.word	0x20001208
 80125f0:	200011f4 	.word	0x200011f4
 80125f4:	200011ec 	.word	0x200011ec

080125f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80125f8:	b480      	push	{r7}
 80125fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80125fc:	4b04      	ldr	r3, [pc, #16]	; (8012610 <vTaskSuspendAll+0x18>)
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	3301      	adds	r3, #1
 8012602:	4a03      	ldr	r2, [pc, #12]	; (8012610 <vTaskSuspendAll+0x18>)
 8012604:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8012606:	bf00      	nop
 8012608:	46bd      	mov	sp, r7
 801260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801260e:	4770      	bx	lr
 8012610:	20001210 	.word	0x20001210

08012614 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012614:	b580      	push	{r7, lr}
 8012616:	b084      	sub	sp, #16
 8012618:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801261a:	2300      	movs	r3, #0
 801261c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801261e:	2300      	movs	r3, #0
 8012620:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012622:	4b42      	ldr	r3, [pc, #264]	; (801272c <xTaskResumeAll+0x118>)
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d10c      	bne.n	8012644 <xTaskResumeAll+0x30>
	__asm volatile
 801262a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801262e:	b672      	cpsid	i
 8012630:	f383 8811 	msr	BASEPRI, r3
 8012634:	f3bf 8f6f 	isb	sy
 8012638:	f3bf 8f4f 	dsb	sy
 801263c:	b662      	cpsie	i
 801263e:	603b      	str	r3, [r7, #0]
}
 8012640:	bf00      	nop
 8012642:	e7fe      	b.n	8012642 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012644:	f000 ff02 	bl	801344c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012648:	4b38      	ldr	r3, [pc, #224]	; (801272c <xTaskResumeAll+0x118>)
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	3b01      	subs	r3, #1
 801264e:	4a37      	ldr	r2, [pc, #220]	; (801272c <xTaskResumeAll+0x118>)
 8012650:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012652:	4b36      	ldr	r3, [pc, #216]	; (801272c <xTaskResumeAll+0x118>)
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d161      	bne.n	801271e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801265a:	4b35      	ldr	r3, [pc, #212]	; (8012730 <xTaskResumeAll+0x11c>)
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d05d      	beq.n	801271e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012662:	e02e      	b.n	80126c2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012664:	4b33      	ldr	r3, [pc, #204]	; (8012734 <xTaskResumeAll+0x120>)
 8012666:	68db      	ldr	r3, [r3, #12]
 8012668:	68db      	ldr	r3, [r3, #12]
 801266a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	3318      	adds	r3, #24
 8012670:	4618      	mov	r0, r3
 8012672:	f7fe fd73 	bl	801115c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	3304      	adds	r3, #4
 801267a:	4618      	mov	r0, r3
 801267c:	f7fe fd6e 	bl	801115c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012684:	2201      	movs	r2, #1
 8012686:	409a      	lsls	r2, r3
 8012688:	4b2b      	ldr	r3, [pc, #172]	; (8012738 <xTaskResumeAll+0x124>)
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	4313      	orrs	r3, r2
 801268e:	4a2a      	ldr	r2, [pc, #168]	; (8012738 <xTaskResumeAll+0x124>)
 8012690:	6013      	str	r3, [r2, #0]
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012696:	4613      	mov	r3, r2
 8012698:	009b      	lsls	r3, r3, #2
 801269a:	4413      	add	r3, r2
 801269c:	009b      	lsls	r3, r3, #2
 801269e:	4a27      	ldr	r2, [pc, #156]	; (801273c <xTaskResumeAll+0x128>)
 80126a0:	441a      	add	r2, r3
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	3304      	adds	r3, #4
 80126a6:	4619      	mov	r1, r3
 80126a8:	4610      	mov	r0, r2
 80126aa:	f7fe fcfa 	bl	80110a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126b2:	4b23      	ldr	r3, [pc, #140]	; (8012740 <xTaskResumeAll+0x12c>)
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126b8:	429a      	cmp	r2, r3
 80126ba:	d302      	bcc.n	80126c2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80126bc:	4b21      	ldr	r3, [pc, #132]	; (8012744 <xTaskResumeAll+0x130>)
 80126be:	2201      	movs	r2, #1
 80126c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80126c2:	4b1c      	ldr	r3, [pc, #112]	; (8012734 <xTaskResumeAll+0x120>)
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d1cc      	bne.n	8012664 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d001      	beq.n	80126d4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80126d0:	f000 fb4c 	bl	8012d6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80126d4:	4b1c      	ldr	r3, [pc, #112]	; (8012748 <xTaskResumeAll+0x134>)
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d010      	beq.n	8012702 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80126e0:	f000 f858 	bl	8012794 <xTaskIncrementTick>
 80126e4:	4603      	mov	r3, r0
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d002      	beq.n	80126f0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80126ea:	4b16      	ldr	r3, [pc, #88]	; (8012744 <xTaskResumeAll+0x130>)
 80126ec:	2201      	movs	r2, #1
 80126ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	3b01      	subs	r3, #1
 80126f4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d1f1      	bne.n	80126e0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80126fc:	4b12      	ldr	r3, [pc, #72]	; (8012748 <xTaskResumeAll+0x134>)
 80126fe:	2200      	movs	r2, #0
 8012700:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012702:	4b10      	ldr	r3, [pc, #64]	; (8012744 <xTaskResumeAll+0x130>)
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d009      	beq.n	801271e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801270a:	2301      	movs	r3, #1
 801270c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801270e:	4b0f      	ldr	r3, [pc, #60]	; (801274c <xTaskResumeAll+0x138>)
 8012710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012714:	601a      	str	r2, [r3, #0]
 8012716:	f3bf 8f4f 	dsb	sy
 801271a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801271e:	f000 fec9 	bl	80134b4 <vPortExitCritical>

	return xAlreadyYielded;
 8012722:	68bb      	ldr	r3, [r7, #8]
}
 8012724:	4618      	mov	r0, r3
 8012726:	3710      	adds	r7, #16
 8012728:	46bd      	mov	sp, r7
 801272a:	bd80      	pop	{r7, pc}
 801272c:	20001210 	.word	0x20001210
 8012730:	200011e8 	.word	0x200011e8
 8012734:	200011a8 	.word	0x200011a8
 8012738:	200011f0 	.word	0x200011f0
 801273c:	200010ec 	.word	0x200010ec
 8012740:	200010e8 	.word	0x200010e8
 8012744:	200011fc 	.word	0x200011fc
 8012748:	200011f8 	.word	0x200011f8
 801274c:	e000ed04 	.word	0xe000ed04

08012750 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012750:	b480      	push	{r7}
 8012752:	b083      	sub	sp, #12
 8012754:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012756:	4b05      	ldr	r3, [pc, #20]	; (801276c <xTaskGetTickCount+0x1c>)
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801275c:	687b      	ldr	r3, [r7, #4]
}
 801275e:	4618      	mov	r0, r3
 8012760:	370c      	adds	r7, #12
 8012762:	46bd      	mov	sp, r7
 8012764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012768:	4770      	bx	lr
 801276a:	bf00      	nop
 801276c:	200011ec 	.word	0x200011ec

08012770 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b082      	sub	sp, #8
 8012774:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012776:	f000 ff51 	bl	801361c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801277a:	2300      	movs	r3, #0
 801277c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801277e:	4b04      	ldr	r3, [pc, #16]	; (8012790 <xTaskGetTickCountFromISR+0x20>)
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012784:	683b      	ldr	r3, [r7, #0]
}
 8012786:	4618      	mov	r0, r3
 8012788:	3708      	adds	r7, #8
 801278a:	46bd      	mov	sp, r7
 801278c:	bd80      	pop	{r7, pc}
 801278e:	bf00      	nop
 8012790:	200011ec 	.word	0x200011ec

08012794 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b086      	sub	sp, #24
 8012798:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801279a:	2300      	movs	r3, #0
 801279c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801279e:	4b4f      	ldr	r3, [pc, #316]	; (80128dc <xTaskIncrementTick+0x148>)
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	f040 808a 	bne.w	80128bc <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80127a8:	4b4d      	ldr	r3, [pc, #308]	; (80128e0 <xTaskIncrementTick+0x14c>)
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	3301      	adds	r3, #1
 80127ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80127b0:	4a4b      	ldr	r2, [pc, #300]	; (80128e0 <xTaskIncrementTick+0x14c>)
 80127b2:	693b      	ldr	r3, [r7, #16]
 80127b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80127b6:	693b      	ldr	r3, [r7, #16]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d122      	bne.n	8012802 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80127bc:	4b49      	ldr	r3, [pc, #292]	; (80128e4 <xTaskIncrementTick+0x150>)
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d00c      	beq.n	80127e0 <xTaskIncrementTick+0x4c>
	__asm volatile
 80127c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127ca:	b672      	cpsid	i
 80127cc:	f383 8811 	msr	BASEPRI, r3
 80127d0:	f3bf 8f6f 	isb	sy
 80127d4:	f3bf 8f4f 	dsb	sy
 80127d8:	b662      	cpsie	i
 80127da:	603b      	str	r3, [r7, #0]
}
 80127dc:	bf00      	nop
 80127de:	e7fe      	b.n	80127de <xTaskIncrementTick+0x4a>
 80127e0:	4b40      	ldr	r3, [pc, #256]	; (80128e4 <xTaskIncrementTick+0x150>)
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	60fb      	str	r3, [r7, #12]
 80127e6:	4b40      	ldr	r3, [pc, #256]	; (80128e8 <xTaskIncrementTick+0x154>)
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	4a3e      	ldr	r2, [pc, #248]	; (80128e4 <xTaskIncrementTick+0x150>)
 80127ec:	6013      	str	r3, [r2, #0]
 80127ee:	4a3e      	ldr	r2, [pc, #248]	; (80128e8 <xTaskIncrementTick+0x154>)
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	6013      	str	r3, [r2, #0]
 80127f4:	4b3d      	ldr	r3, [pc, #244]	; (80128ec <xTaskIncrementTick+0x158>)
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	3301      	adds	r3, #1
 80127fa:	4a3c      	ldr	r2, [pc, #240]	; (80128ec <xTaskIncrementTick+0x158>)
 80127fc:	6013      	str	r3, [r2, #0]
 80127fe:	f000 fab5 	bl	8012d6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012802:	4b3b      	ldr	r3, [pc, #236]	; (80128f0 <xTaskIncrementTick+0x15c>)
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	693a      	ldr	r2, [r7, #16]
 8012808:	429a      	cmp	r2, r3
 801280a:	d348      	bcc.n	801289e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801280c:	4b35      	ldr	r3, [pc, #212]	; (80128e4 <xTaskIncrementTick+0x150>)
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d104      	bne.n	8012820 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012816:	4b36      	ldr	r3, [pc, #216]	; (80128f0 <xTaskIncrementTick+0x15c>)
 8012818:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801281c:	601a      	str	r2, [r3, #0]
					break;
 801281e:	e03e      	b.n	801289e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012820:	4b30      	ldr	r3, [pc, #192]	; (80128e4 <xTaskIncrementTick+0x150>)
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	68db      	ldr	r3, [r3, #12]
 8012826:	68db      	ldr	r3, [r3, #12]
 8012828:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801282a:	68bb      	ldr	r3, [r7, #8]
 801282c:	685b      	ldr	r3, [r3, #4]
 801282e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012830:	693a      	ldr	r2, [r7, #16]
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	429a      	cmp	r2, r3
 8012836:	d203      	bcs.n	8012840 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012838:	4a2d      	ldr	r2, [pc, #180]	; (80128f0 <xTaskIncrementTick+0x15c>)
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801283e:	e02e      	b.n	801289e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012840:	68bb      	ldr	r3, [r7, #8]
 8012842:	3304      	adds	r3, #4
 8012844:	4618      	mov	r0, r3
 8012846:	f7fe fc89 	bl	801115c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801284a:	68bb      	ldr	r3, [r7, #8]
 801284c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801284e:	2b00      	cmp	r3, #0
 8012850:	d004      	beq.n	801285c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012852:	68bb      	ldr	r3, [r7, #8]
 8012854:	3318      	adds	r3, #24
 8012856:	4618      	mov	r0, r3
 8012858:	f7fe fc80 	bl	801115c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801285c:	68bb      	ldr	r3, [r7, #8]
 801285e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012860:	2201      	movs	r2, #1
 8012862:	409a      	lsls	r2, r3
 8012864:	4b23      	ldr	r3, [pc, #140]	; (80128f4 <xTaskIncrementTick+0x160>)
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	4313      	orrs	r3, r2
 801286a:	4a22      	ldr	r2, [pc, #136]	; (80128f4 <xTaskIncrementTick+0x160>)
 801286c:	6013      	str	r3, [r2, #0]
 801286e:	68bb      	ldr	r3, [r7, #8]
 8012870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012872:	4613      	mov	r3, r2
 8012874:	009b      	lsls	r3, r3, #2
 8012876:	4413      	add	r3, r2
 8012878:	009b      	lsls	r3, r3, #2
 801287a:	4a1f      	ldr	r2, [pc, #124]	; (80128f8 <xTaskIncrementTick+0x164>)
 801287c:	441a      	add	r2, r3
 801287e:	68bb      	ldr	r3, [r7, #8]
 8012880:	3304      	adds	r3, #4
 8012882:	4619      	mov	r1, r3
 8012884:	4610      	mov	r0, r2
 8012886:	f7fe fc0c 	bl	80110a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801288a:	68bb      	ldr	r3, [r7, #8]
 801288c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801288e:	4b1b      	ldr	r3, [pc, #108]	; (80128fc <xTaskIncrementTick+0x168>)
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012894:	429a      	cmp	r2, r3
 8012896:	d3b9      	bcc.n	801280c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8012898:	2301      	movs	r3, #1
 801289a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801289c:	e7b6      	b.n	801280c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801289e:	4b17      	ldr	r3, [pc, #92]	; (80128fc <xTaskIncrementTick+0x168>)
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128a4:	4914      	ldr	r1, [pc, #80]	; (80128f8 <xTaskIncrementTick+0x164>)
 80128a6:	4613      	mov	r3, r2
 80128a8:	009b      	lsls	r3, r3, #2
 80128aa:	4413      	add	r3, r2
 80128ac:	009b      	lsls	r3, r3, #2
 80128ae:	440b      	add	r3, r1
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	2b01      	cmp	r3, #1
 80128b4:	d907      	bls.n	80128c6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80128b6:	2301      	movs	r3, #1
 80128b8:	617b      	str	r3, [r7, #20]
 80128ba:	e004      	b.n	80128c6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80128bc:	4b10      	ldr	r3, [pc, #64]	; (8012900 <xTaskIncrementTick+0x16c>)
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	3301      	adds	r3, #1
 80128c2:	4a0f      	ldr	r2, [pc, #60]	; (8012900 <xTaskIncrementTick+0x16c>)
 80128c4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80128c6:	4b0f      	ldr	r3, [pc, #60]	; (8012904 <xTaskIncrementTick+0x170>)
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d001      	beq.n	80128d2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80128ce:	2301      	movs	r3, #1
 80128d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80128d2:	697b      	ldr	r3, [r7, #20]
}
 80128d4:	4618      	mov	r0, r3
 80128d6:	3718      	adds	r7, #24
 80128d8:	46bd      	mov	sp, r7
 80128da:	bd80      	pop	{r7, pc}
 80128dc:	20001210 	.word	0x20001210
 80128e0:	200011ec 	.word	0x200011ec
 80128e4:	200011a0 	.word	0x200011a0
 80128e8:	200011a4 	.word	0x200011a4
 80128ec:	20001200 	.word	0x20001200
 80128f0:	20001208 	.word	0x20001208
 80128f4:	200011f0 	.word	0x200011f0
 80128f8:	200010ec 	.word	0x200010ec
 80128fc:	200010e8 	.word	0x200010e8
 8012900:	200011f8 	.word	0x200011f8
 8012904:	200011fc 	.word	0x200011fc

08012908 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012908:	b480      	push	{r7}
 801290a:	b087      	sub	sp, #28
 801290c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801290e:	4b2a      	ldr	r3, [pc, #168]	; (80129b8 <vTaskSwitchContext+0xb0>)
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d003      	beq.n	801291e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012916:	4b29      	ldr	r3, [pc, #164]	; (80129bc <vTaskSwitchContext+0xb4>)
 8012918:	2201      	movs	r2, #1
 801291a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801291c:	e046      	b.n	80129ac <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 801291e:	4b27      	ldr	r3, [pc, #156]	; (80129bc <vTaskSwitchContext+0xb4>)
 8012920:	2200      	movs	r2, #0
 8012922:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012924:	4b26      	ldr	r3, [pc, #152]	; (80129c0 <vTaskSwitchContext+0xb8>)
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	fab3 f383 	clz	r3, r3
 8012930:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012932:	7afb      	ldrb	r3, [r7, #11]
 8012934:	f1c3 031f 	rsb	r3, r3, #31
 8012938:	617b      	str	r3, [r7, #20]
 801293a:	4922      	ldr	r1, [pc, #136]	; (80129c4 <vTaskSwitchContext+0xbc>)
 801293c:	697a      	ldr	r2, [r7, #20]
 801293e:	4613      	mov	r3, r2
 8012940:	009b      	lsls	r3, r3, #2
 8012942:	4413      	add	r3, r2
 8012944:	009b      	lsls	r3, r3, #2
 8012946:	440b      	add	r3, r1
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d10c      	bne.n	8012968 <vTaskSwitchContext+0x60>
	__asm volatile
 801294e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012952:	b672      	cpsid	i
 8012954:	f383 8811 	msr	BASEPRI, r3
 8012958:	f3bf 8f6f 	isb	sy
 801295c:	f3bf 8f4f 	dsb	sy
 8012960:	b662      	cpsie	i
 8012962:	607b      	str	r3, [r7, #4]
}
 8012964:	bf00      	nop
 8012966:	e7fe      	b.n	8012966 <vTaskSwitchContext+0x5e>
 8012968:	697a      	ldr	r2, [r7, #20]
 801296a:	4613      	mov	r3, r2
 801296c:	009b      	lsls	r3, r3, #2
 801296e:	4413      	add	r3, r2
 8012970:	009b      	lsls	r3, r3, #2
 8012972:	4a14      	ldr	r2, [pc, #80]	; (80129c4 <vTaskSwitchContext+0xbc>)
 8012974:	4413      	add	r3, r2
 8012976:	613b      	str	r3, [r7, #16]
 8012978:	693b      	ldr	r3, [r7, #16]
 801297a:	685b      	ldr	r3, [r3, #4]
 801297c:	685a      	ldr	r2, [r3, #4]
 801297e:	693b      	ldr	r3, [r7, #16]
 8012980:	605a      	str	r2, [r3, #4]
 8012982:	693b      	ldr	r3, [r7, #16]
 8012984:	685a      	ldr	r2, [r3, #4]
 8012986:	693b      	ldr	r3, [r7, #16]
 8012988:	3308      	adds	r3, #8
 801298a:	429a      	cmp	r2, r3
 801298c:	d104      	bne.n	8012998 <vTaskSwitchContext+0x90>
 801298e:	693b      	ldr	r3, [r7, #16]
 8012990:	685b      	ldr	r3, [r3, #4]
 8012992:	685a      	ldr	r2, [r3, #4]
 8012994:	693b      	ldr	r3, [r7, #16]
 8012996:	605a      	str	r2, [r3, #4]
 8012998:	693b      	ldr	r3, [r7, #16]
 801299a:	685b      	ldr	r3, [r3, #4]
 801299c:	68db      	ldr	r3, [r3, #12]
 801299e:	4a0a      	ldr	r2, [pc, #40]	; (80129c8 <vTaskSwitchContext+0xc0>)
 80129a0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80129a2:	4b09      	ldr	r3, [pc, #36]	; (80129c8 <vTaskSwitchContext+0xc0>)
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	334c      	adds	r3, #76	; 0x4c
 80129a8:	4a08      	ldr	r2, [pc, #32]	; (80129cc <vTaskSwitchContext+0xc4>)
 80129aa:	6013      	str	r3, [r2, #0]
}
 80129ac:	bf00      	nop
 80129ae:	371c      	adds	r7, #28
 80129b0:	46bd      	mov	sp, r7
 80129b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b6:	4770      	bx	lr
 80129b8:	20001210 	.word	0x20001210
 80129bc:	200011fc 	.word	0x200011fc
 80129c0:	200011f0 	.word	0x200011f0
 80129c4:	200010ec 	.word	0x200010ec
 80129c8:	200010e8 	.word	0x200010e8
 80129cc:	20000750 	.word	0x20000750

080129d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b084      	sub	sp, #16
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	6078      	str	r0, [r7, #4]
 80129d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d10c      	bne.n	80129fa <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80129e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129e4:	b672      	cpsid	i
 80129e6:	f383 8811 	msr	BASEPRI, r3
 80129ea:	f3bf 8f6f 	isb	sy
 80129ee:	f3bf 8f4f 	dsb	sy
 80129f2:	b662      	cpsie	i
 80129f4:	60fb      	str	r3, [r7, #12]
}
 80129f6:	bf00      	nop
 80129f8:	e7fe      	b.n	80129f8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80129fa:	4b07      	ldr	r3, [pc, #28]	; (8012a18 <vTaskPlaceOnEventList+0x48>)
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	3318      	adds	r3, #24
 8012a00:	4619      	mov	r1, r3
 8012a02:	6878      	ldr	r0, [r7, #4]
 8012a04:	f7fe fb71 	bl	80110ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012a08:	2101      	movs	r1, #1
 8012a0a:	6838      	ldr	r0, [r7, #0]
 8012a0c:	f000 fba8 	bl	8013160 <prvAddCurrentTaskToDelayedList>
}
 8012a10:	bf00      	nop
 8012a12:	3710      	adds	r7, #16
 8012a14:	46bd      	mov	sp, r7
 8012a16:	bd80      	pop	{r7, pc}
 8012a18:	200010e8 	.word	0x200010e8

08012a1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b086      	sub	sp, #24
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	68db      	ldr	r3, [r3, #12]
 8012a28:	68db      	ldr	r3, [r3, #12]
 8012a2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012a2c:	693b      	ldr	r3, [r7, #16]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d10c      	bne.n	8012a4c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8012a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a36:	b672      	cpsid	i
 8012a38:	f383 8811 	msr	BASEPRI, r3
 8012a3c:	f3bf 8f6f 	isb	sy
 8012a40:	f3bf 8f4f 	dsb	sy
 8012a44:	b662      	cpsie	i
 8012a46:	60fb      	str	r3, [r7, #12]
}
 8012a48:	bf00      	nop
 8012a4a:	e7fe      	b.n	8012a4a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012a4c:	693b      	ldr	r3, [r7, #16]
 8012a4e:	3318      	adds	r3, #24
 8012a50:	4618      	mov	r0, r3
 8012a52:	f7fe fb83 	bl	801115c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012a56:	4b1d      	ldr	r3, [pc, #116]	; (8012acc <xTaskRemoveFromEventList+0xb0>)
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d11c      	bne.n	8012a98 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012a5e:	693b      	ldr	r3, [r7, #16]
 8012a60:	3304      	adds	r3, #4
 8012a62:	4618      	mov	r0, r3
 8012a64:	f7fe fb7a 	bl	801115c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012a68:	693b      	ldr	r3, [r7, #16]
 8012a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a6c:	2201      	movs	r2, #1
 8012a6e:	409a      	lsls	r2, r3
 8012a70:	4b17      	ldr	r3, [pc, #92]	; (8012ad0 <xTaskRemoveFromEventList+0xb4>)
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	4313      	orrs	r3, r2
 8012a76:	4a16      	ldr	r2, [pc, #88]	; (8012ad0 <xTaskRemoveFromEventList+0xb4>)
 8012a78:	6013      	str	r3, [r2, #0]
 8012a7a:	693b      	ldr	r3, [r7, #16]
 8012a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a7e:	4613      	mov	r3, r2
 8012a80:	009b      	lsls	r3, r3, #2
 8012a82:	4413      	add	r3, r2
 8012a84:	009b      	lsls	r3, r3, #2
 8012a86:	4a13      	ldr	r2, [pc, #76]	; (8012ad4 <xTaskRemoveFromEventList+0xb8>)
 8012a88:	441a      	add	r2, r3
 8012a8a:	693b      	ldr	r3, [r7, #16]
 8012a8c:	3304      	adds	r3, #4
 8012a8e:	4619      	mov	r1, r3
 8012a90:	4610      	mov	r0, r2
 8012a92:	f7fe fb06 	bl	80110a2 <vListInsertEnd>
 8012a96:	e005      	b.n	8012aa4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012a98:	693b      	ldr	r3, [r7, #16]
 8012a9a:	3318      	adds	r3, #24
 8012a9c:	4619      	mov	r1, r3
 8012a9e:	480e      	ldr	r0, [pc, #56]	; (8012ad8 <xTaskRemoveFromEventList+0xbc>)
 8012aa0:	f7fe faff 	bl	80110a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012aa4:	693b      	ldr	r3, [r7, #16]
 8012aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012aa8:	4b0c      	ldr	r3, [pc, #48]	; (8012adc <xTaskRemoveFromEventList+0xc0>)
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012aae:	429a      	cmp	r2, r3
 8012ab0:	d905      	bls.n	8012abe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012ab2:	2301      	movs	r3, #1
 8012ab4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012ab6:	4b0a      	ldr	r3, [pc, #40]	; (8012ae0 <xTaskRemoveFromEventList+0xc4>)
 8012ab8:	2201      	movs	r2, #1
 8012aba:	601a      	str	r2, [r3, #0]
 8012abc:	e001      	b.n	8012ac2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8012abe:	2300      	movs	r3, #0
 8012ac0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012ac2:	697b      	ldr	r3, [r7, #20]
}
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	3718      	adds	r7, #24
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	bd80      	pop	{r7, pc}
 8012acc:	20001210 	.word	0x20001210
 8012ad0:	200011f0 	.word	0x200011f0
 8012ad4:	200010ec 	.word	0x200010ec
 8012ad8:	200011a8 	.word	0x200011a8
 8012adc:	200010e8 	.word	0x200010e8
 8012ae0:	200011fc 	.word	0x200011fc

08012ae4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012ae4:	b480      	push	{r7}
 8012ae6:	b083      	sub	sp, #12
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012aec:	4b06      	ldr	r3, [pc, #24]	; (8012b08 <vTaskInternalSetTimeOutState+0x24>)
 8012aee:	681a      	ldr	r2, [r3, #0]
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012af4:	4b05      	ldr	r3, [pc, #20]	; (8012b0c <vTaskInternalSetTimeOutState+0x28>)
 8012af6:	681a      	ldr	r2, [r3, #0]
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	605a      	str	r2, [r3, #4]
}
 8012afc:	bf00      	nop
 8012afe:	370c      	adds	r7, #12
 8012b00:	46bd      	mov	sp, r7
 8012b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b06:	4770      	bx	lr
 8012b08:	20001200 	.word	0x20001200
 8012b0c:	200011ec 	.word	0x200011ec

08012b10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b088      	sub	sp, #32
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	6078      	str	r0, [r7, #4]
 8012b18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d10c      	bne.n	8012b3a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8012b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b24:	b672      	cpsid	i
 8012b26:	f383 8811 	msr	BASEPRI, r3
 8012b2a:	f3bf 8f6f 	isb	sy
 8012b2e:	f3bf 8f4f 	dsb	sy
 8012b32:	b662      	cpsie	i
 8012b34:	613b      	str	r3, [r7, #16]
}
 8012b36:	bf00      	nop
 8012b38:	e7fe      	b.n	8012b38 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8012b3a:	683b      	ldr	r3, [r7, #0]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d10c      	bne.n	8012b5a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8012b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b44:	b672      	cpsid	i
 8012b46:	f383 8811 	msr	BASEPRI, r3
 8012b4a:	f3bf 8f6f 	isb	sy
 8012b4e:	f3bf 8f4f 	dsb	sy
 8012b52:	b662      	cpsie	i
 8012b54:	60fb      	str	r3, [r7, #12]
}
 8012b56:	bf00      	nop
 8012b58:	e7fe      	b.n	8012b58 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8012b5a:	f000 fc77 	bl	801344c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012b5e:	4b1d      	ldr	r3, [pc, #116]	; (8012bd4 <xTaskCheckForTimeOut+0xc4>)
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	685b      	ldr	r3, [r3, #4]
 8012b68:	69ba      	ldr	r2, [r7, #24]
 8012b6a:	1ad3      	subs	r3, r2, r3
 8012b6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012b6e:	683b      	ldr	r3, [r7, #0]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012b76:	d102      	bne.n	8012b7e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012b78:	2300      	movs	r3, #0
 8012b7a:	61fb      	str	r3, [r7, #28]
 8012b7c:	e023      	b.n	8012bc6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	681a      	ldr	r2, [r3, #0]
 8012b82:	4b15      	ldr	r3, [pc, #84]	; (8012bd8 <xTaskCheckForTimeOut+0xc8>)
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	429a      	cmp	r2, r3
 8012b88:	d007      	beq.n	8012b9a <xTaskCheckForTimeOut+0x8a>
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	685b      	ldr	r3, [r3, #4]
 8012b8e:	69ba      	ldr	r2, [r7, #24]
 8012b90:	429a      	cmp	r2, r3
 8012b92:	d302      	bcc.n	8012b9a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012b94:	2301      	movs	r3, #1
 8012b96:	61fb      	str	r3, [r7, #28]
 8012b98:	e015      	b.n	8012bc6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012b9a:	683b      	ldr	r3, [r7, #0]
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	697a      	ldr	r2, [r7, #20]
 8012ba0:	429a      	cmp	r2, r3
 8012ba2:	d20b      	bcs.n	8012bbc <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012ba4:	683b      	ldr	r3, [r7, #0]
 8012ba6:	681a      	ldr	r2, [r3, #0]
 8012ba8:	697b      	ldr	r3, [r7, #20]
 8012baa:	1ad2      	subs	r2, r2, r3
 8012bac:	683b      	ldr	r3, [r7, #0]
 8012bae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012bb0:	6878      	ldr	r0, [r7, #4]
 8012bb2:	f7ff ff97 	bl	8012ae4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	61fb      	str	r3, [r7, #28]
 8012bba:	e004      	b.n	8012bc6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8012bbc:	683b      	ldr	r3, [r7, #0]
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012bc2:	2301      	movs	r3, #1
 8012bc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012bc6:	f000 fc75 	bl	80134b4 <vPortExitCritical>

	return xReturn;
 8012bca:	69fb      	ldr	r3, [r7, #28]
}
 8012bcc:	4618      	mov	r0, r3
 8012bce:	3720      	adds	r7, #32
 8012bd0:	46bd      	mov	sp, r7
 8012bd2:	bd80      	pop	{r7, pc}
 8012bd4:	200011ec 	.word	0x200011ec
 8012bd8:	20001200 	.word	0x20001200

08012bdc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012bdc:	b480      	push	{r7}
 8012bde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012be0:	4b03      	ldr	r3, [pc, #12]	; (8012bf0 <vTaskMissedYield+0x14>)
 8012be2:	2201      	movs	r2, #1
 8012be4:	601a      	str	r2, [r3, #0]
}
 8012be6:	bf00      	nop
 8012be8:	46bd      	mov	sp, r7
 8012bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bee:	4770      	bx	lr
 8012bf0:	200011fc 	.word	0x200011fc

08012bf4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b082      	sub	sp, #8
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012bfc:	f000 f852 	bl	8012ca4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012c00:	4b06      	ldr	r3, [pc, #24]	; (8012c1c <prvIdleTask+0x28>)
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	2b01      	cmp	r3, #1
 8012c06:	d9f9      	bls.n	8012bfc <prvIdleTask+0x8>
			{
				taskYIELD();
 8012c08:	4b05      	ldr	r3, [pc, #20]	; (8012c20 <prvIdleTask+0x2c>)
 8012c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c0e:	601a      	str	r2, [r3, #0]
 8012c10:	f3bf 8f4f 	dsb	sy
 8012c14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012c18:	e7f0      	b.n	8012bfc <prvIdleTask+0x8>
 8012c1a:	bf00      	nop
 8012c1c:	200010ec 	.word	0x200010ec
 8012c20:	e000ed04 	.word	0xe000ed04

08012c24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012c24:	b580      	push	{r7, lr}
 8012c26:	b082      	sub	sp, #8
 8012c28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	607b      	str	r3, [r7, #4]
 8012c2e:	e00c      	b.n	8012c4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012c30:	687a      	ldr	r2, [r7, #4]
 8012c32:	4613      	mov	r3, r2
 8012c34:	009b      	lsls	r3, r3, #2
 8012c36:	4413      	add	r3, r2
 8012c38:	009b      	lsls	r3, r3, #2
 8012c3a:	4a12      	ldr	r2, [pc, #72]	; (8012c84 <prvInitialiseTaskLists+0x60>)
 8012c3c:	4413      	add	r3, r2
 8012c3e:	4618      	mov	r0, r3
 8012c40:	f7fe fa02 	bl	8011048 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	3301      	adds	r3, #1
 8012c48:	607b      	str	r3, [r7, #4]
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	2b06      	cmp	r3, #6
 8012c4e:	d9ef      	bls.n	8012c30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012c50:	480d      	ldr	r0, [pc, #52]	; (8012c88 <prvInitialiseTaskLists+0x64>)
 8012c52:	f7fe f9f9 	bl	8011048 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012c56:	480d      	ldr	r0, [pc, #52]	; (8012c8c <prvInitialiseTaskLists+0x68>)
 8012c58:	f7fe f9f6 	bl	8011048 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012c5c:	480c      	ldr	r0, [pc, #48]	; (8012c90 <prvInitialiseTaskLists+0x6c>)
 8012c5e:	f7fe f9f3 	bl	8011048 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012c62:	480c      	ldr	r0, [pc, #48]	; (8012c94 <prvInitialiseTaskLists+0x70>)
 8012c64:	f7fe f9f0 	bl	8011048 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012c68:	480b      	ldr	r0, [pc, #44]	; (8012c98 <prvInitialiseTaskLists+0x74>)
 8012c6a:	f7fe f9ed 	bl	8011048 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012c6e:	4b0b      	ldr	r3, [pc, #44]	; (8012c9c <prvInitialiseTaskLists+0x78>)
 8012c70:	4a05      	ldr	r2, [pc, #20]	; (8012c88 <prvInitialiseTaskLists+0x64>)
 8012c72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012c74:	4b0a      	ldr	r3, [pc, #40]	; (8012ca0 <prvInitialiseTaskLists+0x7c>)
 8012c76:	4a05      	ldr	r2, [pc, #20]	; (8012c8c <prvInitialiseTaskLists+0x68>)
 8012c78:	601a      	str	r2, [r3, #0]
}
 8012c7a:	bf00      	nop
 8012c7c:	3708      	adds	r7, #8
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	bd80      	pop	{r7, pc}
 8012c82:	bf00      	nop
 8012c84:	200010ec 	.word	0x200010ec
 8012c88:	20001178 	.word	0x20001178
 8012c8c:	2000118c 	.word	0x2000118c
 8012c90:	200011a8 	.word	0x200011a8
 8012c94:	200011bc 	.word	0x200011bc
 8012c98:	200011d4 	.word	0x200011d4
 8012c9c:	200011a0 	.word	0x200011a0
 8012ca0:	200011a4 	.word	0x200011a4

08012ca4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b082      	sub	sp, #8
 8012ca8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012caa:	e019      	b.n	8012ce0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012cac:	f000 fbce 	bl	801344c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012cb0:	4b10      	ldr	r3, [pc, #64]	; (8012cf4 <prvCheckTasksWaitingTermination+0x50>)
 8012cb2:	68db      	ldr	r3, [r3, #12]
 8012cb4:	68db      	ldr	r3, [r3, #12]
 8012cb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	3304      	adds	r3, #4
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	f7fe fa4d 	bl	801115c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012cc2:	4b0d      	ldr	r3, [pc, #52]	; (8012cf8 <prvCheckTasksWaitingTermination+0x54>)
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	3b01      	subs	r3, #1
 8012cc8:	4a0b      	ldr	r2, [pc, #44]	; (8012cf8 <prvCheckTasksWaitingTermination+0x54>)
 8012cca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012ccc:	4b0b      	ldr	r3, [pc, #44]	; (8012cfc <prvCheckTasksWaitingTermination+0x58>)
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	3b01      	subs	r3, #1
 8012cd2:	4a0a      	ldr	r2, [pc, #40]	; (8012cfc <prvCheckTasksWaitingTermination+0x58>)
 8012cd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012cd6:	f000 fbed 	bl	80134b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012cda:	6878      	ldr	r0, [r7, #4]
 8012cdc:	f000 f810 	bl	8012d00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012ce0:	4b06      	ldr	r3, [pc, #24]	; (8012cfc <prvCheckTasksWaitingTermination+0x58>)
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d1e1      	bne.n	8012cac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012ce8:	bf00      	nop
 8012cea:	bf00      	nop
 8012cec:	3708      	adds	r7, #8
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	bd80      	pop	{r7, pc}
 8012cf2:	bf00      	nop
 8012cf4:	200011bc 	.word	0x200011bc
 8012cf8:	200011e8 	.word	0x200011e8
 8012cfc:	200011d0 	.word	0x200011d0

08012d00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b084      	sub	sp, #16
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	334c      	adds	r3, #76	; 0x4c
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	f00e fced 	bl	80216ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d108      	bne.n	8012d2e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d20:	4618      	mov	r0, r3
 8012d22:	f000 fd89 	bl	8013838 <vPortFree>
				vPortFree( pxTCB );
 8012d26:	6878      	ldr	r0, [r7, #4]
 8012d28:	f000 fd86 	bl	8013838 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012d2c:	e01a      	b.n	8012d64 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8012d34:	2b01      	cmp	r3, #1
 8012d36:	d103      	bne.n	8012d40 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8012d38:	6878      	ldr	r0, [r7, #4]
 8012d3a:	f000 fd7d 	bl	8013838 <vPortFree>
	}
 8012d3e:	e011      	b.n	8012d64 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8012d46:	2b02      	cmp	r3, #2
 8012d48:	d00c      	beq.n	8012d64 <prvDeleteTCB+0x64>
	__asm volatile
 8012d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d4e:	b672      	cpsid	i
 8012d50:	f383 8811 	msr	BASEPRI, r3
 8012d54:	f3bf 8f6f 	isb	sy
 8012d58:	f3bf 8f4f 	dsb	sy
 8012d5c:	b662      	cpsie	i
 8012d5e:	60fb      	str	r3, [r7, #12]
}
 8012d60:	bf00      	nop
 8012d62:	e7fe      	b.n	8012d62 <prvDeleteTCB+0x62>
	}
 8012d64:	bf00      	nop
 8012d66:	3710      	adds	r7, #16
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	bd80      	pop	{r7, pc}

08012d6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012d6c:	b480      	push	{r7}
 8012d6e:	b083      	sub	sp, #12
 8012d70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012d72:	4b0c      	ldr	r3, [pc, #48]	; (8012da4 <prvResetNextTaskUnblockTime+0x38>)
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d104      	bne.n	8012d86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012d7c:	4b0a      	ldr	r3, [pc, #40]	; (8012da8 <prvResetNextTaskUnblockTime+0x3c>)
 8012d7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012d82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012d84:	e008      	b.n	8012d98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012d86:	4b07      	ldr	r3, [pc, #28]	; (8012da4 <prvResetNextTaskUnblockTime+0x38>)
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	68db      	ldr	r3, [r3, #12]
 8012d8c:	68db      	ldr	r3, [r3, #12]
 8012d8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	685b      	ldr	r3, [r3, #4]
 8012d94:	4a04      	ldr	r2, [pc, #16]	; (8012da8 <prvResetNextTaskUnblockTime+0x3c>)
 8012d96:	6013      	str	r3, [r2, #0]
}
 8012d98:	bf00      	nop
 8012d9a:	370c      	adds	r7, #12
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da2:	4770      	bx	lr
 8012da4:	200011a0 	.word	0x200011a0
 8012da8:	20001208 	.word	0x20001208

08012dac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012dac:	b480      	push	{r7}
 8012dae:	b083      	sub	sp, #12
 8012db0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012db2:	4b0b      	ldr	r3, [pc, #44]	; (8012de0 <xTaskGetSchedulerState+0x34>)
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	d102      	bne.n	8012dc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012dba:	2301      	movs	r3, #1
 8012dbc:	607b      	str	r3, [r7, #4]
 8012dbe:	e008      	b.n	8012dd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012dc0:	4b08      	ldr	r3, [pc, #32]	; (8012de4 <xTaskGetSchedulerState+0x38>)
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d102      	bne.n	8012dce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012dc8:	2302      	movs	r3, #2
 8012dca:	607b      	str	r3, [r7, #4]
 8012dcc:	e001      	b.n	8012dd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012dce:	2300      	movs	r3, #0
 8012dd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012dd2:	687b      	ldr	r3, [r7, #4]
	}
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	370c      	adds	r7, #12
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dde:	4770      	bx	lr
 8012de0:	200011f4 	.word	0x200011f4
 8012de4:	20001210 	.word	0x20001210

08012de8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012de8:	b580      	push	{r7, lr}
 8012dea:	b084      	sub	sp, #16
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012df4:	2300      	movs	r3, #0
 8012df6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d069      	beq.n	8012ed2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012dfe:	68bb      	ldr	r3, [r7, #8]
 8012e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e02:	4b36      	ldr	r3, [pc, #216]	; (8012edc <xTaskPriorityInherit+0xf4>)
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e08:	429a      	cmp	r2, r3
 8012e0a:	d259      	bcs.n	8012ec0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012e0c:	68bb      	ldr	r3, [r7, #8]
 8012e0e:	699b      	ldr	r3, [r3, #24]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	db06      	blt.n	8012e22 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012e14:	4b31      	ldr	r3, [pc, #196]	; (8012edc <xTaskPriorityInherit+0xf4>)
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e1a:	f1c3 0207 	rsb	r2, r3, #7
 8012e1e:	68bb      	ldr	r3, [r7, #8]
 8012e20:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012e22:	68bb      	ldr	r3, [r7, #8]
 8012e24:	6959      	ldr	r1, [r3, #20]
 8012e26:	68bb      	ldr	r3, [r7, #8]
 8012e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e2a:	4613      	mov	r3, r2
 8012e2c:	009b      	lsls	r3, r3, #2
 8012e2e:	4413      	add	r3, r2
 8012e30:	009b      	lsls	r3, r3, #2
 8012e32:	4a2b      	ldr	r2, [pc, #172]	; (8012ee0 <xTaskPriorityInherit+0xf8>)
 8012e34:	4413      	add	r3, r2
 8012e36:	4299      	cmp	r1, r3
 8012e38:	d13a      	bne.n	8012eb0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012e3a:	68bb      	ldr	r3, [r7, #8]
 8012e3c:	3304      	adds	r3, #4
 8012e3e:	4618      	mov	r0, r3
 8012e40:	f7fe f98c 	bl	801115c <uxListRemove>
 8012e44:	4603      	mov	r3, r0
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d115      	bne.n	8012e76 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8012e4a:	68bb      	ldr	r3, [r7, #8]
 8012e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e4e:	4924      	ldr	r1, [pc, #144]	; (8012ee0 <xTaskPriorityInherit+0xf8>)
 8012e50:	4613      	mov	r3, r2
 8012e52:	009b      	lsls	r3, r3, #2
 8012e54:	4413      	add	r3, r2
 8012e56:	009b      	lsls	r3, r3, #2
 8012e58:	440b      	add	r3, r1
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d10a      	bne.n	8012e76 <xTaskPriorityInherit+0x8e>
 8012e60:	68bb      	ldr	r3, [r7, #8]
 8012e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e64:	2201      	movs	r2, #1
 8012e66:	fa02 f303 	lsl.w	r3, r2, r3
 8012e6a:	43da      	mvns	r2, r3
 8012e6c:	4b1d      	ldr	r3, [pc, #116]	; (8012ee4 <xTaskPriorityInherit+0xfc>)
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	4013      	ands	r3, r2
 8012e72:	4a1c      	ldr	r2, [pc, #112]	; (8012ee4 <xTaskPriorityInherit+0xfc>)
 8012e74:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012e76:	4b19      	ldr	r3, [pc, #100]	; (8012edc <xTaskPriorityInherit+0xf4>)
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e7c:	68bb      	ldr	r3, [r7, #8]
 8012e7e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012e80:	68bb      	ldr	r3, [r7, #8]
 8012e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e84:	2201      	movs	r2, #1
 8012e86:	409a      	lsls	r2, r3
 8012e88:	4b16      	ldr	r3, [pc, #88]	; (8012ee4 <xTaskPriorityInherit+0xfc>)
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	4313      	orrs	r3, r2
 8012e8e:	4a15      	ldr	r2, [pc, #84]	; (8012ee4 <xTaskPriorityInherit+0xfc>)
 8012e90:	6013      	str	r3, [r2, #0]
 8012e92:	68bb      	ldr	r3, [r7, #8]
 8012e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e96:	4613      	mov	r3, r2
 8012e98:	009b      	lsls	r3, r3, #2
 8012e9a:	4413      	add	r3, r2
 8012e9c:	009b      	lsls	r3, r3, #2
 8012e9e:	4a10      	ldr	r2, [pc, #64]	; (8012ee0 <xTaskPriorityInherit+0xf8>)
 8012ea0:	441a      	add	r2, r3
 8012ea2:	68bb      	ldr	r3, [r7, #8]
 8012ea4:	3304      	adds	r3, #4
 8012ea6:	4619      	mov	r1, r3
 8012ea8:	4610      	mov	r0, r2
 8012eaa:	f7fe f8fa 	bl	80110a2 <vListInsertEnd>
 8012eae:	e004      	b.n	8012eba <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012eb0:	4b0a      	ldr	r3, [pc, #40]	; (8012edc <xTaskPriorityInherit+0xf4>)
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012eb6:	68bb      	ldr	r3, [r7, #8]
 8012eb8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012eba:	2301      	movs	r3, #1
 8012ebc:	60fb      	str	r3, [r7, #12]
 8012ebe:	e008      	b.n	8012ed2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012ec0:	68bb      	ldr	r3, [r7, #8]
 8012ec2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012ec4:	4b05      	ldr	r3, [pc, #20]	; (8012edc <xTaskPriorityInherit+0xf4>)
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012eca:	429a      	cmp	r2, r3
 8012ecc:	d201      	bcs.n	8012ed2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012ece:	2301      	movs	r3, #1
 8012ed0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012ed2:	68fb      	ldr	r3, [r7, #12]
	}
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	3710      	adds	r7, #16
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	bd80      	pop	{r7, pc}
 8012edc:	200010e8 	.word	0x200010e8
 8012ee0:	200010ec 	.word	0x200010ec
 8012ee4:	200011f0 	.word	0x200011f0

08012ee8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b086      	sub	sp, #24
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d072      	beq.n	8012fe4 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012efe:	4b3c      	ldr	r3, [pc, #240]	; (8012ff0 <xTaskPriorityDisinherit+0x108>)
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	693a      	ldr	r2, [r7, #16]
 8012f04:	429a      	cmp	r2, r3
 8012f06:	d00c      	beq.n	8012f22 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8012f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f0c:	b672      	cpsid	i
 8012f0e:	f383 8811 	msr	BASEPRI, r3
 8012f12:	f3bf 8f6f 	isb	sy
 8012f16:	f3bf 8f4f 	dsb	sy
 8012f1a:	b662      	cpsie	i
 8012f1c:	60fb      	str	r3, [r7, #12]
}
 8012f1e:	bf00      	nop
 8012f20:	e7fe      	b.n	8012f20 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8012f22:	693b      	ldr	r3, [r7, #16]
 8012f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d10c      	bne.n	8012f44 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8012f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f2e:	b672      	cpsid	i
 8012f30:	f383 8811 	msr	BASEPRI, r3
 8012f34:	f3bf 8f6f 	isb	sy
 8012f38:	f3bf 8f4f 	dsb	sy
 8012f3c:	b662      	cpsie	i
 8012f3e:	60bb      	str	r3, [r7, #8]
}
 8012f40:	bf00      	nop
 8012f42:	e7fe      	b.n	8012f42 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8012f44:	693b      	ldr	r3, [r7, #16]
 8012f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012f48:	1e5a      	subs	r2, r3, #1
 8012f4a:	693b      	ldr	r3, [r7, #16]
 8012f4c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012f4e:	693b      	ldr	r3, [r7, #16]
 8012f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f52:	693b      	ldr	r3, [r7, #16]
 8012f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f56:	429a      	cmp	r2, r3
 8012f58:	d044      	beq.n	8012fe4 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012f5a:	693b      	ldr	r3, [r7, #16]
 8012f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d140      	bne.n	8012fe4 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012f62:	693b      	ldr	r3, [r7, #16]
 8012f64:	3304      	adds	r3, #4
 8012f66:	4618      	mov	r0, r3
 8012f68:	f7fe f8f8 	bl	801115c <uxListRemove>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d115      	bne.n	8012f9e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012f72:	693b      	ldr	r3, [r7, #16]
 8012f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f76:	491f      	ldr	r1, [pc, #124]	; (8012ff4 <xTaskPriorityDisinherit+0x10c>)
 8012f78:	4613      	mov	r3, r2
 8012f7a:	009b      	lsls	r3, r3, #2
 8012f7c:	4413      	add	r3, r2
 8012f7e:	009b      	lsls	r3, r3, #2
 8012f80:	440b      	add	r3, r1
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d10a      	bne.n	8012f9e <xTaskPriorityDisinherit+0xb6>
 8012f88:	693b      	ldr	r3, [r7, #16]
 8012f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f8c:	2201      	movs	r2, #1
 8012f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8012f92:	43da      	mvns	r2, r3
 8012f94:	4b18      	ldr	r3, [pc, #96]	; (8012ff8 <xTaskPriorityDisinherit+0x110>)
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	4013      	ands	r3, r2
 8012f9a:	4a17      	ldr	r2, [pc, #92]	; (8012ff8 <xTaskPriorityDisinherit+0x110>)
 8012f9c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012f9e:	693b      	ldr	r3, [r7, #16]
 8012fa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012fa2:	693b      	ldr	r3, [r7, #16]
 8012fa4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012fa6:	693b      	ldr	r3, [r7, #16]
 8012fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012faa:	f1c3 0207 	rsb	r2, r3, #7
 8012fae:	693b      	ldr	r3, [r7, #16]
 8012fb0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012fb2:	693b      	ldr	r3, [r7, #16]
 8012fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fb6:	2201      	movs	r2, #1
 8012fb8:	409a      	lsls	r2, r3
 8012fba:	4b0f      	ldr	r3, [pc, #60]	; (8012ff8 <xTaskPriorityDisinherit+0x110>)
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	4313      	orrs	r3, r2
 8012fc0:	4a0d      	ldr	r2, [pc, #52]	; (8012ff8 <xTaskPriorityDisinherit+0x110>)
 8012fc2:	6013      	str	r3, [r2, #0]
 8012fc4:	693b      	ldr	r3, [r7, #16]
 8012fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fc8:	4613      	mov	r3, r2
 8012fca:	009b      	lsls	r3, r3, #2
 8012fcc:	4413      	add	r3, r2
 8012fce:	009b      	lsls	r3, r3, #2
 8012fd0:	4a08      	ldr	r2, [pc, #32]	; (8012ff4 <xTaskPriorityDisinherit+0x10c>)
 8012fd2:	441a      	add	r2, r3
 8012fd4:	693b      	ldr	r3, [r7, #16]
 8012fd6:	3304      	adds	r3, #4
 8012fd8:	4619      	mov	r1, r3
 8012fda:	4610      	mov	r0, r2
 8012fdc:	f7fe f861 	bl	80110a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012fe0:	2301      	movs	r3, #1
 8012fe2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012fe4:	697b      	ldr	r3, [r7, #20]
	}
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	3718      	adds	r7, #24
 8012fea:	46bd      	mov	sp, r7
 8012fec:	bd80      	pop	{r7, pc}
 8012fee:	bf00      	nop
 8012ff0:	200010e8 	.word	0x200010e8
 8012ff4:	200010ec 	.word	0x200010ec
 8012ff8:	200011f0 	.word	0x200011f0

08012ffc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b088      	sub	sp, #32
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]
 8013004:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801300a:	2301      	movs	r3, #1
 801300c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	2b00      	cmp	r3, #0
 8013012:	f000 8087 	beq.w	8013124 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013016:	69bb      	ldr	r3, [r7, #24]
 8013018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801301a:	2b00      	cmp	r3, #0
 801301c:	d10c      	bne.n	8013038 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 801301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013022:	b672      	cpsid	i
 8013024:	f383 8811 	msr	BASEPRI, r3
 8013028:	f3bf 8f6f 	isb	sy
 801302c:	f3bf 8f4f 	dsb	sy
 8013030:	b662      	cpsie	i
 8013032:	60fb      	str	r3, [r7, #12]
}
 8013034:	bf00      	nop
 8013036:	e7fe      	b.n	8013036 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013038:	69bb      	ldr	r3, [r7, #24]
 801303a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801303c:	683a      	ldr	r2, [r7, #0]
 801303e:	429a      	cmp	r2, r3
 8013040:	d902      	bls.n	8013048 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013042:	683b      	ldr	r3, [r7, #0]
 8013044:	61fb      	str	r3, [r7, #28]
 8013046:	e002      	b.n	801304e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013048:	69bb      	ldr	r3, [r7, #24]
 801304a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801304c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801304e:	69bb      	ldr	r3, [r7, #24]
 8013050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013052:	69fa      	ldr	r2, [r7, #28]
 8013054:	429a      	cmp	r2, r3
 8013056:	d065      	beq.n	8013124 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013058:	69bb      	ldr	r3, [r7, #24]
 801305a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801305c:	697a      	ldr	r2, [r7, #20]
 801305e:	429a      	cmp	r2, r3
 8013060:	d160      	bne.n	8013124 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013062:	4b32      	ldr	r3, [pc, #200]	; (801312c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	69ba      	ldr	r2, [r7, #24]
 8013068:	429a      	cmp	r2, r3
 801306a:	d10c      	bne.n	8013086 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 801306c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013070:	b672      	cpsid	i
 8013072:	f383 8811 	msr	BASEPRI, r3
 8013076:	f3bf 8f6f 	isb	sy
 801307a:	f3bf 8f4f 	dsb	sy
 801307e:	b662      	cpsie	i
 8013080:	60bb      	str	r3, [r7, #8]
}
 8013082:	bf00      	nop
 8013084:	e7fe      	b.n	8013084 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013086:	69bb      	ldr	r3, [r7, #24]
 8013088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801308a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801308c:	69bb      	ldr	r3, [r7, #24]
 801308e:	69fa      	ldr	r2, [r7, #28]
 8013090:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013092:	69bb      	ldr	r3, [r7, #24]
 8013094:	699b      	ldr	r3, [r3, #24]
 8013096:	2b00      	cmp	r3, #0
 8013098:	db04      	blt.n	80130a4 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801309a:	69fb      	ldr	r3, [r7, #28]
 801309c:	f1c3 0207 	rsb	r2, r3, #7
 80130a0:	69bb      	ldr	r3, [r7, #24]
 80130a2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80130a4:	69bb      	ldr	r3, [r7, #24]
 80130a6:	6959      	ldr	r1, [r3, #20]
 80130a8:	693a      	ldr	r2, [r7, #16]
 80130aa:	4613      	mov	r3, r2
 80130ac:	009b      	lsls	r3, r3, #2
 80130ae:	4413      	add	r3, r2
 80130b0:	009b      	lsls	r3, r3, #2
 80130b2:	4a1f      	ldr	r2, [pc, #124]	; (8013130 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80130b4:	4413      	add	r3, r2
 80130b6:	4299      	cmp	r1, r3
 80130b8:	d134      	bne.n	8013124 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80130ba:	69bb      	ldr	r3, [r7, #24]
 80130bc:	3304      	adds	r3, #4
 80130be:	4618      	mov	r0, r3
 80130c0:	f7fe f84c 	bl	801115c <uxListRemove>
 80130c4:	4603      	mov	r3, r0
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d115      	bne.n	80130f6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80130ca:	69bb      	ldr	r3, [r7, #24]
 80130cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130ce:	4918      	ldr	r1, [pc, #96]	; (8013130 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80130d0:	4613      	mov	r3, r2
 80130d2:	009b      	lsls	r3, r3, #2
 80130d4:	4413      	add	r3, r2
 80130d6:	009b      	lsls	r3, r3, #2
 80130d8:	440b      	add	r3, r1
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d10a      	bne.n	80130f6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 80130e0:	69bb      	ldr	r3, [r7, #24]
 80130e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130e4:	2201      	movs	r2, #1
 80130e6:	fa02 f303 	lsl.w	r3, r2, r3
 80130ea:	43da      	mvns	r2, r3
 80130ec:	4b11      	ldr	r3, [pc, #68]	; (8013134 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	4013      	ands	r3, r2
 80130f2:	4a10      	ldr	r2, [pc, #64]	; (8013134 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80130f4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80130f6:	69bb      	ldr	r3, [r7, #24]
 80130f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130fa:	2201      	movs	r2, #1
 80130fc:	409a      	lsls	r2, r3
 80130fe:	4b0d      	ldr	r3, [pc, #52]	; (8013134 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	4313      	orrs	r3, r2
 8013104:	4a0b      	ldr	r2, [pc, #44]	; (8013134 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013106:	6013      	str	r3, [r2, #0]
 8013108:	69bb      	ldr	r3, [r7, #24]
 801310a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801310c:	4613      	mov	r3, r2
 801310e:	009b      	lsls	r3, r3, #2
 8013110:	4413      	add	r3, r2
 8013112:	009b      	lsls	r3, r3, #2
 8013114:	4a06      	ldr	r2, [pc, #24]	; (8013130 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8013116:	441a      	add	r2, r3
 8013118:	69bb      	ldr	r3, [r7, #24]
 801311a:	3304      	adds	r3, #4
 801311c:	4619      	mov	r1, r3
 801311e:	4610      	mov	r0, r2
 8013120:	f7fd ffbf 	bl	80110a2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013124:	bf00      	nop
 8013126:	3720      	adds	r7, #32
 8013128:	46bd      	mov	sp, r7
 801312a:	bd80      	pop	{r7, pc}
 801312c:	200010e8 	.word	0x200010e8
 8013130:	200010ec 	.word	0x200010ec
 8013134:	200011f0 	.word	0x200011f0

08013138 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8013138:	b480      	push	{r7}
 801313a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801313c:	4b07      	ldr	r3, [pc, #28]	; (801315c <pvTaskIncrementMutexHeldCount+0x24>)
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d004      	beq.n	801314e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013144:	4b05      	ldr	r3, [pc, #20]	; (801315c <pvTaskIncrementMutexHeldCount+0x24>)
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801314a:	3201      	adds	r2, #1
 801314c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801314e:	4b03      	ldr	r3, [pc, #12]	; (801315c <pvTaskIncrementMutexHeldCount+0x24>)
 8013150:	681b      	ldr	r3, [r3, #0]
	}
 8013152:	4618      	mov	r0, r3
 8013154:	46bd      	mov	sp, r7
 8013156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801315a:	4770      	bx	lr
 801315c:	200010e8 	.word	0x200010e8

08013160 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013160:	b580      	push	{r7, lr}
 8013162:	b084      	sub	sp, #16
 8013164:	af00      	add	r7, sp, #0
 8013166:	6078      	str	r0, [r7, #4]
 8013168:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801316a:	4b29      	ldr	r3, [pc, #164]	; (8013210 <prvAddCurrentTaskToDelayedList+0xb0>)
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013170:	4b28      	ldr	r3, [pc, #160]	; (8013214 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	3304      	adds	r3, #4
 8013176:	4618      	mov	r0, r3
 8013178:	f7fd fff0 	bl	801115c <uxListRemove>
 801317c:	4603      	mov	r3, r0
 801317e:	2b00      	cmp	r3, #0
 8013180:	d10b      	bne.n	801319a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8013182:	4b24      	ldr	r3, [pc, #144]	; (8013214 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013188:	2201      	movs	r2, #1
 801318a:	fa02 f303 	lsl.w	r3, r2, r3
 801318e:	43da      	mvns	r2, r3
 8013190:	4b21      	ldr	r3, [pc, #132]	; (8013218 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	4013      	ands	r3, r2
 8013196:	4a20      	ldr	r2, [pc, #128]	; (8013218 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013198:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80131a0:	d10a      	bne.n	80131b8 <prvAddCurrentTaskToDelayedList+0x58>
 80131a2:	683b      	ldr	r3, [r7, #0]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d007      	beq.n	80131b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80131a8:	4b1a      	ldr	r3, [pc, #104]	; (8013214 <prvAddCurrentTaskToDelayedList+0xb4>)
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	3304      	adds	r3, #4
 80131ae:	4619      	mov	r1, r3
 80131b0:	481a      	ldr	r0, [pc, #104]	; (801321c <prvAddCurrentTaskToDelayedList+0xbc>)
 80131b2:	f7fd ff76 	bl	80110a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80131b6:	e026      	b.n	8013206 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80131b8:	68fa      	ldr	r2, [r7, #12]
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	4413      	add	r3, r2
 80131be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80131c0:	4b14      	ldr	r3, [pc, #80]	; (8013214 <prvAddCurrentTaskToDelayedList+0xb4>)
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	68ba      	ldr	r2, [r7, #8]
 80131c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80131c8:	68ba      	ldr	r2, [r7, #8]
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	429a      	cmp	r2, r3
 80131ce:	d209      	bcs.n	80131e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80131d0:	4b13      	ldr	r3, [pc, #76]	; (8013220 <prvAddCurrentTaskToDelayedList+0xc0>)
 80131d2:	681a      	ldr	r2, [r3, #0]
 80131d4:	4b0f      	ldr	r3, [pc, #60]	; (8013214 <prvAddCurrentTaskToDelayedList+0xb4>)
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	3304      	adds	r3, #4
 80131da:	4619      	mov	r1, r3
 80131dc:	4610      	mov	r0, r2
 80131de:	f7fd ff84 	bl	80110ea <vListInsert>
}
 80131e2:	e010      	b.n	8013206 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80131e4:	4b0f      	ldr	r3, [pc, #60]	; (8013224 <prvAddCurrentTaskToDelayedList+0xc4>)
 80131e6:	681a      	ldr	r2, [r3, #0]
 80131e8:	4b0a      	ldr	r3, [pc, #40]	; (8013214 <prvAddCurrentTaskToDelayedList+0xb4>)
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	3304      	adds	r3, #4
 80131ee:	4619      	mov	r1, r3
 80131f0:	4610      	mov	r0, r2
 80131f2:	f7fd ff7a 	bl	80110ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80131f6:	4b0c      	ldr	r3, [pc, #48]	; (8013228 <prvAddCurrentTaskToDelayedList+0xc8>)
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	68ba      	ldr	r2, [r7, #8]
 80131fc:	429a      	cmp	r2, r3
 80131fe:	d202      	bcs.n	8013206 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013200:	4a09      	ldr	r2, [pc, #36]	; (8013228 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013202:	68bb      	ldr	r3, [r7, #8]
 8013204:	6013      	str	r3, [r2, #0]
}
 8013206:	bf00      	nop
 8013208:	3710      	adds	r7, #16
 801320a:	46bd      	mov	sp, r7
 801320c:	bd80      	pop	{r7, pc}
 801320e:	bf00      	nop
 8013210:	200011ec 	.word	0x200011ec
 8013214:	200010e8 	.word	0x200010e8
 8013218:	200011f0 	.word	0x200011f0
 801321c:	200011d4 	.word	0x200011d4
 8013220:	200011a4 	.word	0x200011a4
 8013224:	200011a0 	.word	0x200011a0
 8013228:	20001208 	.word	0x20001208

0801322c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801322c:	b480      	push	{r7}
 801322e:	b085      	sub	sp, #20
 8013230:	af00      	add	r7, sp, #0
 8013232:	60f8      	str	r0, [r7, #12]
 8013234:	60b9      	str	r1, [r7, #8]
 8013236:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	3b04      	subs	r3, #4
 801323c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013244:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	3b04      	subs	r3, #4
 801324a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801324c:	68bb      	ldr	r3, [r7, #8]
 801324e:	f023 0201 	bic.w	r2, r3, #1
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	3b04      	subs	r3, #4
 801325a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801325c:	4a0c      	ldr	r2, [pc, #48]	; (8013290 <pxPortInitialiseStack+0x64>)
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	3b14      	subs	r3, #20
 8013266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013268:	687a      	ldr	r2, [r7, #4]
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	3b04      	subs	r3, #4
 8013272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	f06f 0202 	mvn.w	r2, #2
 801327a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	3b20      	subs	r3, #32
 8013280:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013282:	68fb      	ldr	r3, [r7, #12]
}
 8013284:	4618      	mov	r0, r3
 8013286:	3714      	adds	r7, #20
 8013288:	46bd      	mov	sp, r7
 801328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801328e:	4770      	bx	lr
 8013290:	08013295 	.word	0x08013295

08013294 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013294:	b480      	push	{r7}
 8013296:	b085      	sub	sp, #20
 8013298:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801329a:	2300      	movs	r3, #0
 801329c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801329e:	4b14      	ldr	r3, [pc, #80]	; (80132f0 <prvTaskExitError+0x5c>)
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80132a6:	d00c      	beq.n	80132c2 <prvTaskExitError+0x2e>
	__asm volatile
 80132a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132ac:	b672      	cpsid	i
 80132ae:	f383 8811 	msr	BASEPRI, r3
 80132b2:	f3bf 8f6f 	isb	sy
 80132b6:	f3bf 8f4f 	dsb	sy
 80132ba:	b662      	cpsie	i
 80132bc:	60fb      	str	r3, [r7, #12]
}
 80132be:	bf00      	nop
 80132c0:	e7fe      	b.n	80132c0 <prvTaskExitError+0x2c>
	__asm volatile
 80132c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132c6:	b672      	cpsid	i
 80132c8:	f383 8811 	msr	BASEPRI, r3
 80132cc:	f3bf 8f6f 	isb	sy
 80132d0:	f3bf 8f4f 	dsb	sy
 80132d4:	b662      	cpsie	i
 80132d6:	60bb      	str	r3, [r7, #8]
}
 80132d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80132da:	bf00      	nop
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d0fc      	beq.n	80132dc <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80132e2:	bf00      	nop
 80132e4:	bf00      	nop
 80132e6:	3714      	adds	r7, #20
 80132e8:	46bd      	mov	sp, r7
 80132ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ee:	4770      	bx	lr
 80132f0:	20000740 	.word	0x20000740
	...

08013300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013300:	4b07      	ldr	r3, [pc, #28]	; (8013320 <pxCurrentTCBConst2>)
 8013302:	6819      	ldr	r1, [r3, #0]
 8013304:	6808      	ldr	r0, [r1, #0]
 8013306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801330a:	f380 8809 	msr	PSP, r0
 801330e:	f3bf 8f6f 	isb	sy
 8013312:	f04f 0000 	mov.w	r0, #0
 8013316:	f380 8811 	msr	BASEPRI, r0
 801331a:	4770      	bx	lr
 801331c:	f3af 8000 	nop.w

08013320 <pxCurrentTCBConst2>:
 8013320:	200010e8 	.word	0x200010e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013324:	bf00      	nop
 8013326:	bf00      	nop

08013328 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013328:	4808      	ldr	r0, [pc, #32]	; (801334c <prvPortStartFirstTask+0x24>)
 801332a:	6800      	ldr	r0, [r0, #0]
 801332c:	6800      	ldr	r0, [r0, #0]
 801332e:	f380 8808 	msr	MSP, r0
 8013332:	f04f 0000 	mov.w	r0, #0
 8013336:	f380 8814 	msr	CONTROL, r0
 801333a:	b662      	cpsie	i
 801333c:	b661      	cpsie	f
 801333e:	f3bf 8f4f 	dsb	sy
 8013342:	f3bf 8f6f 	isb	sy
 8013346:	df00      	svc	0
 8013348:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801334a:	bf00      	nop
 801334c:	e000ed08 	.word	0xe000ed08

08013350 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013350:	b580      	push	{r7, lr}
 8013352:	b084      	sub	sp, #16
 8013354:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013356:	4b37      	ldr	r3, [pc, #220]	; (8013434 <xPortStartScheduler+0xe4>)
 8013358:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	781b      	ldrb	r3, [r3, #0]
 801335e:	b2db      	uxtb	r3, r3
 8013360:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	22ff      	movs	r2, #255	; 0xff
 8013366:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	781b      	ldrb	r3, [r3, #0]
 801336c:	b2db      	uxtb	r3, r3
 801336e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013370:	78fb      	ldrb	r3, [r7, #3]
 8013372:	b2db      	uxtb	r3, r3
 8013374:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013378:	b2da      	uxtb	r2, r3
 801337a:	4b2f      	ldr	r3, [pc, #188]	; (8013438 <xPortStartScheduler+0xe8>)
 801337c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801337e:	4b2f      	ldr	r3, [pc, #188]	; (801343c <xPortStartScheduler+0xec>)
 8013380:	2207      	movs	r2, #7
 8013382:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013384:	e009      	b.n	801339a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8013386:	4b2d      	ldr	r3, [pc, #180]	; (801343c <xPortStartScheduler+0xec>)
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	3b01      	subs	r3, #1
 801338c:	4a2b      	ldr	r2, [pc, #172]	; (801343c <xPortStartScheduler+0xec>)
 801338e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013390:	78fb      	ldrb	r3, [r7, #3]
 8013392:	b2db      	uxtb	r3, r3
 8013394:	005b      	lsls	r3, r3, #1
 8013396:	b2db      	uxtb	r3, r3
 8013398:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801339a:	78fb      	ldrb	r3, [r7, #3]
 801339c:	b2db      	uxtb	r3, r3
 801339e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80133a2:	2b80      	cmp	r3, #128	; 0x80
 80133a4:	d0ef      	beq.n	8013386 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80133a6:	4b25      	ldr	r3, [pc, #148]	; (801343c <xPortStartScheduler+0xec>)
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	f1c3 0307 	rsb	r3, r3, #7
 80133ae:	2b04      	cmp	r3, #4
 80133b0:	d00c      	beq.n	80133cc <xPortStartScheduler+0x7c>
	__asm volatile
 80133b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133b6:	b672      	cpsid	i
 80133b8:	f383 8811 	msr	BASEPRI, r3
 80133bc:	f3bf 8f6f 	isb	sy
 80133c0:	f3bf 8f4f 	dsb	sy
 80133c4:	b662      	cpsie	i
 80133c6:	60bb      	str	r3, [r7, #8]
}
 80133c8:	bf00      	nop
 80133ca:	e7fe      	b.n	80133ca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80133cc:	4b1b      	ldr	r3, [pc, #108]	; (801343c <xPortStartScheduler+0xec>)
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	021b      	lsls	r3, r3, #8
 80133d2:	4a1a      	ldr	r2, [pc, #104]	; (801343c <xPortStartScheduler+0xec>)
 80133d4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80133d6:	4b19      	ldr	r3, [pc, #100]	; (801343c <xPortStartScheduler+0xec>)
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80133de:	4a17      	ldr	r2, [pc, #92]	; (801343c <xPortStartScheduler+0xec>)
 80133e0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	b2da      	uxtb	r2, r3
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80133ea:	4b15      	ldr	r3, [pc, #84]	; (8013440 <xPortStartScheduler+0xf0>)
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	4a14      	ldr	r2, [pc, #80]	; (8013440 <xPortStartScheduler+0xf0>)
 80133f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80133f4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80133f6:	4b12      	ldr	r3, [pc, #72]	; (8013440 <xPortStartScheduler+0xf0>)
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	4a11      	ldr	r2, [pc, #68]	; (8013440 <xPortStartScheduler+0xf0>)
 80133fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013400:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013402:	f000 f8dd 	bl	80135c0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013406:	4b0f      	ldr	r3, [pc, #60]	; (8013444 <xPortStartScheduler+0xf4>)
 8013408:	2200      	movs	r2, #0
 801340a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801340c:	f000 f8fc 	bl	8013608 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013410:	4b0d      	ldr	r3, [pc, #52]	; (8013448 <xPortStartScheduler+0xf8>)
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	4a0c      	ldr	r2, [pc, #48]	; (8013448 <xPortStartScheduler+0xf8>)
 8013416:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801341a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801341c:	f7ff ff84 	bl	8013328 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013420:	f7ff fa72 	bl	8012908 <vTaskSwitchContext>
	prvTaskExitError();
 8013424:	f7ff ff36 	bl	8013294 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013428:	2300      	movs	r3, #0
}
 801342a:	4618      	mov	r0, r3
 801342c:	3710      	adds	r7, #16
 801342e:	46bd      	mov	sp, r7
 8013430:	bd80      	pop	{r7, pc}
 8013432:	bf00      	nop
 8013434:	e000e400 	.word	0xe000e400
 8013438:	20001214 	.word	0x20001214
 801343c:	20001218 	.word	0x20001218
 8013440:	e000ed20 	.word	0xe000ed20
 8013444:	20000740 	.word	0x20000740
 8013448:	e000ef34 	.word	0xe000ef34

0801344c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801344c:	b480      	push	{r7}
 801344e:	b083      	sub	sp, #12
 8013450:	af00      	add	r7, sp, #0
	__asm volatile
 8013452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013456:	b672      	cpsid	i
 8013458:	f383 8811 	msr	BASEPRI, r3
 801345c:	f3bf 8f6f 	isb	sy
 8013460:	f3bf 8f4f 	dsb	sy
 8013464:	b662      	cpsie	i
 8013466:	607b      	str	r3, [r7, #4]
}
 8013468:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801346a:	4b10      	ldr	r3, [pc, #64]	; (80134ac <vPortEnterCritical+0x60>)
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	3301      	adds	r3, #1
 8013470:	4a0e      	ldr	r2, [pc, #56]	; (80134ac <vPortEnterCritical+0x60>)
 8013472:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8013474:	4b0d      	ldr	r3, [pc, #52]	; (80134ac <vPortEnterCritical+0x60>)
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	2b01      	cmp	r3, #1
 801347a:	d111      	bne.n	80134a0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801347c:	4b0c      	ldr	r3, [pc, #48]	; (80134b0 <vPortEnterCritical+0x64>)
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	b2db      	uxtb	r3, r3
 8013482:	2b00      	cmp	r3, #0
 8013484:	d00c      	beq.n	80134a0 <vPortEnterCritical+0x54>
	__asm volatile
 8013486:	f04f 0350 	mov.w	r3, #80	; 0x50
 801348a:	b672      	cpsid	i
 801348c:	f383 8811 	msr	BASEPRI, r3
 8013490:	f3bf 8f6f 	isb	sy
 8013494:	f3bf 8f4f 	dsb	sy
 8013498:	b662      	cpsie	i
 801349a:	603b      	str	r3, [r7, #0]
}
 801349c:	bf00      	nop
 801349e:	e7fe      	b.n	801349e <vPortEnterCritical+0x52>
	}
}
 80134a0:	bf00      	nop
 80134a2:	370c      	adds	r7, #12
 80134a4:	46bd      	mov	sp, r7
 80134a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134aa:	4770      	bx	lr
 80134ac:	20000740 	.word	0x20000740
 80134b0:	e000ed04 	.word	0xe000ed04

080134b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80134b4:	b480      	push	{r7}
 80134b6:	b083      	sub	sp, #12
 80134b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80134ba:	4b13      	ldr	r3, [pc, #76]	; (8013508 <vPortExitCritical+0x54>)
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d10c      	bne.n	80134dc <vPortExitCritical+0x28>
	__asm volatile
 80134c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134c6:	b672      	cpsid	i
 80134c8:	f383 8811 	msr	BASEPRI, r3
 80134cc:	f3bf 8f6f 	isb	sy
 80134d0:	f3bf 8f4f 	dsb	sy
 80134d4:	b662      	cpsie	i
 80134d6:	607b      	str	r3, [r7, #4]
}
 80134d8:	bf00      	nop
 80134da:	e7fe      	b.n	80134da <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80134dc:	4b0a      	ldr	r3, [pc, #40]	; (8013508 <vPortExitCritical+0x54>)
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	3b01      	subs	r3, #1
 80134e2:	4a09      	ldr	r2, [pc, #36]	; (8013508 <vPortExitCritical+0x54>)
 80134e4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80134e6:	4b08      	ldr	r3, [pc, #32]	; (8013508 <vPortExitCritical+0x54>)
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d105      	bne.n	80134fa <vPortExitCritical+0x46>
 80134ee:	2300      	movs	r3, #0
 80134f0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80134f2:	683b      	ldr	r3, [r7, #0]
 80134f4:	f383 8811 	msr	BASEPRI, r3
}
 80134f8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80134fa:	bf00      	nop
 80134fc:	370c      	adds	r7, #12
 80134fe:	46bd      	mov	sp, r7
 8013500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013504:	4770      	bx	lr
 8013506:	bf00      	nop
 8013508:	20000740 	.word	0x20000740
 801350c:	00000000 	.word	0x00000000

08013510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013510:	f3ef 8009 	mrs	r0, PSP
 8013514:	f3bf 8f6f 	isb	sy
 8013518:	4b15      	ldr	r3, [pc, #84]	; (8013570 <pxCurrentTCBConst>)
 801351a:	681a      	ldr	r2, [r3, #0]
 801351c:	f01e 0f10 	tst.w	lr, #16
 8013520:	bf08      	it	eq
 8013522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801352a:	6010      	str	r0, [r2, #0]
 801352c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013530:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013534:	b672      	cpsid	i
 8013536:	f380 8811 	msr	BASEPRI, r0
 801353a:	f3bf 8f4f 	dsb	sy
 801353e:	f3bf 8f6f 	isb	sy
 8013542:	b662      	cpsie	i
 8013544:	f7ff f9e0 	bl	8012908 <vTaskSwitchContext>
 8013548:	f04f 0000 	mov.w	r0, #0
 801354c:	f380 8811 	msr	BASEPRI, r0
 8013550:	bc09      	pop	{r0, r3}
 8013552:	6819      	ldr	r1, [r3, #0]
 8013554:	6808      	ldr	r0, [r1, #0]
 8013556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801355a:	f01e 0f10 	tst.w	lr, #16
 801355e:	bf08      	it	eq
 8013560:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013564:	f380 8809 	msr	PSP, r0
 8013568:	f3bf 8f6f 	isb	sy
 801356c:	4770      	bx	lr
 801356e:	bf00      	nop

08013570 <pxCurrentTCBConst>:
 8013570:	200010e8 	.word	0x200010e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013574:	bf00      	nop
 8013576:	bf00      	nop

08013578 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013578:	b580      	push	{r7, lr}
 801357a:	b082      	sub	sp, #8
 801357c:	af00      	add	r7, sp, #0
	__asm volatile
 801357e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013582:	b672      	cpsid	i
 8013584:	f383 8811 	msr	BASEPRI, r3
 8013588:	f3bf 8f6f 	isb	sy
 801358c:	f3bf 8f4f 	dsb	sy
 8013590:	b662      	cpsie	i
 8013592:	607b      	str	r3, [r7, #4]
}
 8013594:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013596:	f7ff f8fd 	bl	8012794 <xTaskIncrementTick>
 801359a:	4603      	mov	r3, r0
 801359c:	2b00      	cmp	r3, #0
 801359e:	d003      	beq.n	80135a8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80135a0:	4b06      	ldr	r3, [pc, #24]	; (80135bc <SysTick_Handler+0x44>)
 80135a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135a6:	601a      	str	r2, [r3, #0]
 80135a8:	2300      	movs	r3, #0
 80135aa:	603b      	str	r3, [r7, #0]
	__asm volatile
 80135ac:	683b      	ldr	r3, [r7, #0]
 80135ae:	f383 8811 	msr	BASEPRI, r3
}
 80135b2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80135b4:	bf00      	nop
 80135b6:	3708      	adds	r7, #8
 80135b8:	46bd      	mov	sp, r7
 80135ba:	bd80      	pop	{r7, pc}
 80135bc:	e000ed04 	.word	0xe000ed04

080135c0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80135c0:	b480      	push	{r7}
 80135c2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80135c4:	4b0b      	ldr	r3, [pc, #44]	; (80135f4 <vPortSetupTimerInterrupt+0x34>)
 80135c6:	2200      	movs	r2, #0
 80135c8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80135ca:	4b0b      	ldr	r3, [pc, #44]	; (80135f8 <vPortSetupTimerInterrupt+0x38>)
 80135cc:	2200      	movs	r2, #0
 80135ce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80135d0:	4b0a      	ldr	r3, [pc, #40]	; (80135fc <vPortSetupTimerInterrupt+0x3c>)
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	4a0a      	ldr	r2, [pc, #40]	; (8013600 <vPortSetupTimerInterrupt+0x40>)
 80135d6:	fba2 2303 	umull	r2, r3, r2, r3
 80135da:	099b      	lsrs	r3, r3, #6
 80135dc:	4a09      	ldr	r2, [pc, #36]	; (8013604 <vPortSetupTimerInterrupt+0x44>)
 80135de:	3b01      	subs	r3, #1
 80135e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80135e2:	4b04      	ldr	r3, [pc, #16]	; (80135f4 <vPortSetupTimerInterrupt+0x34>)
 80135e4:	2207      	movs	r2, #7
 80135e6:	601a      	str	r2, [r3, #0]
}
 80135e8:	bf00      	nop
 80135ea:	46bd      	mov	sp, r7
 80135ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f0:	4770      	bx	lr
 80135f2:	bf00      	nop
 80135f4:	e000e010 	.word	0xe000e010
 80135f8:	e000e018 	.word	0xe000e018
 80135fc:	20000700 	.word	0x20000700
 8013600:	10624dd3 	.word	0x10624dd3
 8013604:	e000e014 	.word	0xe000e014

08013608 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013608:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013618 <vPortEnableVFP+0x10>
 801360c:	6801      	ldr	r1, [r0, #0]
 801360e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013612:	6001      	str	r1, [r0, #0]
 8013614:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013616:	bf00      	nop
 8013618:	e000ed88 	.word	0xe000ed88

0801361c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801361c:	b480      	push	{r7}
 801361e:	b085      	sub	sp, #20
 8013620:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013622:	f3ef 8305 	mrs	r3, IPSR
 8013626:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	2b0f      	cmp	r3, #15
 801362c:	d916      	bls.n	801365c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801362e:	4a19      	ldr	r2, [pc, #100]	; (8013694 <vPortValidateInterruptPriority+0x78>)
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	4413      	add	r3, r2
 8013634:	781b      	ldrb	r3, [r3, #0]
 8013636:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013638:	4b17      	ldr	r3, [pc, #92]	; (8013698 <vPortValidateInterruptPriority+0x7c>)
 801363a:	781b      	ldrb	r3, [r3, #0]
 801363c:	7afa      	ldrb	r2, [r7, #11]
 801363e:	429a      	cmp	r2, r3
 8013640:	d20c      	bcs.n	801365c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8013642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013646:	b672      	cpsid	i
 8013648:	f383 8811 	msr	BASEPRI, r3
 801364c:	f3bf 8f6f 	isb	sy
 8013650:	f3bf 8f4f 	dsb	sy
 8013654:	b662      	cpsie	i
 8013656:	607b      	str	r3, [r7, #4]
}
 8013658:	bf00      	nop
 801365a:	e7fe      	b.n	801365a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801365c:	4b0f      	ldr	r3, [pc, #60]	; (801369c <vPortValidateInterruptPriority+0x80>)
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013664:	4b0e      	ldr	r3, [pc, #56]	; (80136a0 <vPortValidateInterruptPriority+0x84>)
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	429a      	cmp	r2, r3
 801366a:	d90c      	bls.n	8013686 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801366c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013670:	b672      	cpsid	i
 8013672:	f383 8811 	msr	BASEPRI, r3
 8013676:	f3bf 8f6f 	isb	sy
 801367a:	f3bf 8f4f 	dsb	sy
 801367e:	b662      	cpsie	i
 8013680:	603b      	str	r3, [r7, #0]
}
 8013682:	bf00      	nop
 8013684:	e7fe      	b.n	8013684 <vPortValidateInterruptPriority+0x68>
	}
 8013686:	bf00      	nop
 8013688:	3714      	adds	r7, #20
 801368a:	46bd      	mov	sp, r7
 801368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013690:	4770      	bx	lr
 8013692:	bf00      	nop
 8013694:	e000e3f0 	.word	0xe000e3f0
 8013698:	20001214 	.word	0x20001214
 801369c:	e000ed0c 	.word	0xe000ed0c
 80136a0:	20001218 	.word	0x20001218

080136a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80136a4:	b580      	push	{r7, lr}
 80136a6:	b08a      	sub	sp, #40	; 0x28
 80136a8:	af00      	add	r7, sp, #0
 80136aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80136ac:	2300      	movs	r3, #0
 80136ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80136b0:	f7fe ffa2 	bl	80125f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80136b4:	4b5b      	ldr	r3, [pc, #364]	; (8013824 <pvPortMalloc+0x180>)
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d101      	bne.n	80136c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80136bc:	f000 f91a 	bl	80138f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80136c0:	4b59      	ldr	r3, [pc, #356]	; (8013828 <pvPortMalloc+0x184>)
 80136c2:	681a      	ldr	r2, [r3, #0]
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	4013      	ands	r3, r2
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	f040 8092 	bne.w	80137f2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d01f      	beq.n	8013714 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80136d4:	2208      	movs	r2, #8
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	4413      	add	r3, r2
 80136da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	f003 0307 	and.w	r3, r3, #7
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d016      	beq.n	8013714 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	f023 0307 	bic.w	r3, r3, #7
 80136ec:	3308      	adds	r3, #8
 80136ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	f003 0307 	and.w	r3, r3, #7
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d00c      	beq.n	8013714 <pvPortMalloc+0x70>
	__asm volatile
 80136fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136fe:	b672      	cpsid	i
 8013700:	f383 8811 	msr	BASEPRI, r3
 8013704:	f3bf 8f6f 	isb	sy
 8013708:	f3bf 8f4f 	dsb	sy
 801370c:	b662      	cpsie	i
 801370e:	617b      	str	r3, [r7, #20]
}
 8013710:	bf00      	nop
 8013712:	e7fe      	b.n	8013712 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d06b      	beq.n	80137f2 <pvPortMalloc+0x14e>
 801371a:	4b44      	ldr	r3, [pc, #272]	; (801382c <pvPortMalloc+0x188>)
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	687a      	ldr	r2, [r7, #4]
 8013720:	429a      	cmp	r2, r3
 8013722:	d866      	bhi.n	80137f2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013724:	4b42      	ldr	r3, [pc, #264]	; (8013830 <pvPortMalloc+0x18c>)
 8013726:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013728:	4b41      	ldr	r3, [pc, #260]	; (8013830 <pvPortMalloc+0x18c>)
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801372e:	e004      	b.n	801373a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8013730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013732:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801373c:	685b      	ldr	r3, [r3, #4]
 801373e:	687a      	ldr	r2, [r7, #4]
 8013740:	429a      	cmp	r2, r3
 8013742:	d903      	bls.n	801374c <pvPortMalloc+0xa8>
 8013744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d1f1      	bne.n	8013730 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801374c:	4b35      	ldr	r3, [pc, #212]	; (8013824 <pvPortMalloc+0x180>)
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013752:	429a      	cmp	r2, r3
 8013754:	d04d      	beq.n	80137f2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013756:	6a3b      	ldr	r3, [r7, #32]
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	2208      	movs	r2, #8
 801375c:	4413      	add	r3, r2
 801375e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013762:	681a      	ldr	r2, [r3, #0]
 8013764:	6a3b      	ldr	r3, [r7, #32]
 8013766:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801376a:	685a      	ldr	r2, [r3, #4]
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	1ad2      	subs	r2, r2, r3
 8013770:	2308      	movs	r3, #8
 8013772:	005b      	lsls	r3, r3, #1
 8013774:	429a      	cmp	r2, r3
 8013776:	d921      	bls.n	80137bc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	4413      	add	r3, r2
 801377e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013780:	69bb      	ldr	r3, [r7, #24]
 8013782:	f003 0307 	and.w	r3, r3, #7
 8013786:	2b00      	cmp	r3, #0
 8013788:	d00c      	beq.n	80137a4 <pvPortMalloc+0x100>
	__asm volatile
 801378a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801378e:	b672      	cpsid	i
 8013790:	f383 8811 	msr	BASEPRI, r3
 8013794:	f3bf 8f6f 	isb	sy
 8013798:	f3bf 8f4f 	dsb	sy
 801379c:	b662      	cpsie	i
 801379e:	613b      	str	r3, [r7, #16]
}
 80137a0:	bf00      	nop
 80137a2:	e7fe      	b.n	80137a2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80137a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137a6:	685a      	ldr	r2, [r3, #4]
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	1ad2      	subs	r2, r2, r3
 80137ac:	69bb      	ldr	r3, [r7, #24]
 80137ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80137b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137b2:	687a      	ldr	r2, [r7, #4]
 80137b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80137b6:	69b8      	ldr	r0, [r7, #24]
 80137b8:	f000 f8fe 	bl	80139b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80137bc:	4b1b      	ldr	r3, [pc, #108]	; (801382c <pvPortMalloc+0x188>)
 80137be:	681a      	ldr	r2, [r3, #0]
 80137c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137c2:	685b      	ldr	r3, [r3, #4]
 80137c4:	1ad3      	subs	r3, r2, r3
 80137c6:	4a19      	ldr	r2, [pc, #100]	; (801382c <pvPortMalloc+0x188>)
 80137c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80137ca:	4b18      	ldr	r3, [pc, #96]	; (801382c <pvPortMalloc+0x188>)
 80137cc:	681a      	ldr	r2, [r3, #0]
 80137ce:	4b19      	ldr	r3, [pc, #100]	; (8013834 <pvPortMalloc+0x190>)
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	429a      	cmp	r2, r3
 80137d4:	d203      	bcs.n	80137de <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80137d6:	4b15      	ldr	r3, [pc, #84]	; (801382c <pvPortMalloc+0x188>)
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	4a16      	ldr	r2, [pc, #88]	; (8013834 <pvPortMalloc+0x190>)
 80137dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80137de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137e0:	685a      	ldr	r2, [r3, #4]
 80137e2:	4b11      	ldr	r3, [pc, #68]	; (8013828 <pvPortMalloc+0x184>)
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	431a      	orrs	r2, r3
 80137e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80137ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ee:	2200      	movs	r2, #0
 80137f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80137f2:	f7fe ff0f 	bl	8012614 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80137f6:	69fb      	ldr	r3, [r7, #28]
 80137f8:	f003 0307 	and.w	r3, r3, #7
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d00c      	beq.n	801381a <pvPortMalloc+0x176>
	__asm volatile
 8013800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013804:	b672      	cpsid	i
 8013806:	f383 8811 	msr	BASEPRI, r3
 801380a:	f3bf 8f6f 	isb	sy
 801380e:	f3bf 8f4f 	dsb	sy
 8013812:	b662      	cpsie	i
 8013814:	60fb      	str	r3, [r7, #12]
}
 8013816:	bf00      	nop
 8013818:	e7fe      	b.n	8013818 <pvPortMalloc+0x174>
	return pvReturn;
 801381a:	69fb      	ldr	r3, [r7, #28]
}
 801381c:	4618      	mov	r0, r3
 801381e:	3728      	adds	r7, #40	; 0x28
 8013820:	46bd      	mov	sp, r7
 8013822:	bd80      	pop	{r7, pc}
 8013824:	20004e24 	.word	0x20004e24
 8013828:	20004e30 	.word	0x20004e30
 801382c:	20004e28 	.word	0x20004e28
 8013830:	20004e1c 	.word	0x20004e1c
 8013834:	20004e2c 	.word	0x20004e2c

08013838 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013838:	b580      	push	{r7, lr}
 801383a:	b086      	sub	sp, #24
 801383c:	af00      	add	r7, sp, #0
 801383e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d04c      	beq.n	80138e4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801384a:	2308      	movs	r3, #8
 801384c:	425b      	negs	r3, r3
 801384e:	697a      	ldr	r2, [r7, #20]
 8013850:	4413      	add	r3, r2
 8013852:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013854:	697b      	ldr	r3, [r7, #20]
 8013856:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013858:	693b      	ldr	r3, [r7, #16]
 801385a:	685a      	ldr	r2, [r3, #4]
 801385c:	4b23      	ldr	r3, [pc, #140]	; (80138ec <vPortFree+0xb4>)
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	4013      	ands	r3, r2
 8013862:	2b00      	cmp	r3, #0
 8013864:	d10c      	bne.n	8013880 <vPortFree+0x48>
	__asm volatile
 8013866:	f04f 0350 	mov.w	r3, #80	; 0x50
 801386a:	b672      	cpsid	i
 801386c:	f383 8811 	msr	BASEPRI, r3
 8013870:	f3bf 8f6f 	isb	sy
 8013874:	f3bf 8f4f 	dsb	sy
 8013878:	b662      	cpsie	i
 801387a:	60fb      	str	r3, [r7, #12]
}
 801387c:	bf00      	nop
 801387e:	e7fe      	b.n	801387e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013880:	693b      	ldr	r3, [r7, #16]
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d00c      	beq.n	80138a2 <vPortFree+0x6a>
	__asm volatile
 8013888:	f04f 0350 	mov.w	r3, #80	; 0x50
 801388c:	b672      	cpsid	i
 801388e:	f383 8811 	msr	BASEPRI, r3
 8013892:	f3bf 8f6f 	isb	sy
 8013896:	f3bf 8f4f 	dsb	sy
 801389a:	b662      	cpsie	i
 801389c:	60bb      	str	r3, [r7, #8]
}
 801389e:	bf00      	nop
 80138a0:	e7fe      	b.n	80138a0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80138a2:	693b      	ldr	r3, [r7, #16]
 80138a4:	685a      	ldr	r2, [r3, #4]
 80138a6:	4b11      	ldr	r3, [pc, #68]	; (80138ec <vPortFree+0xb4>)
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	4013      	ands	r3, r2
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d019      	beq.n	80138e4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80138b0:	693b      	ldr	r3, [r7, #16]
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d115      	bne.n	80138e4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80138b8:	693b      	ldr	r3, [r7, #16]
 80138ba:	685a      	ldr	r2, [r3, #4]
 80138bc:	4b0b      	ldr	r3, [pc, #44]	; (80138ec <vPortFree+0xb4>)
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	43db      	mvns	r3, r3
 80138c2:	401a      	ands	r2, r3
 80138c4:	693b      	ldr	r3, [r7, #16]
 80138c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80138c8:	f7fe fe96 	bl	80125f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80138cc:	693b      	ldr	r3, [r7, #16]
 80138ce:	685a      	ldr	r2, [r3, #4]
 80138d0:	4b07      	ldr	r3, [pc, #28]	; (80138f0 <vPortFree+0xb8>)
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	4413      	add	r3, r2
 80138d6:	4a06      	ldr	r2, [pc, #24]	; (80138f0 <vPortFree+0xb8>)
 80138d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80138da:	6938      	ldr	r0, [r7, #16]
 80138dc:	f000 f86c 	bl	80139b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80138e0:	f7fe fe98 	bl	8012614 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80138e4:	bf00      	nop
 80138e6:	3718      	adds	r7, #24
 80138e8:	46bd      	mov	sp, r7
 80138ea:	bd80      	pop	{r7, pc}
 80138ec:	20004e30 	.word	0x20004e30
 80138f0:	20004e28 	.word	0x20004e28

080138f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80138f4:	b480      	push	{r7}
 80138f6:	b085      	sub	sp, #20
 80138f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80138fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80138fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013900:	4b27      	ldr	r3, [pc, #156]	; (80139a0 <prvHeapInit+0xac>)
 8013902:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	f003 0307 	and.w	r3, r3, #7
 801390a:	2b00      	cmp	r3, #0
 801390c:	d00c      	beq.n	8013928 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	3307      	adds	r3, #7
 8013912:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	f023 0307 	bic.w	r3, r3, #7
 801391a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801391c:	68ba      	ldr	r2, [r7, #8]
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	1ad3      	subs	r3, r2, r3
 8013922:	4a1f      	ldr	r2, [pc, #124]	; (80139a0 <prvHeapInit+0xac>)
 8013924:	4413      	add	r3, r2
 8013926:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801392c:	4a1d      	ldr	r2, [pc, #116]	; (80139a4 <prvHeapInit+0xb0>)
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013932:	4b1c      	ldr	r3, [pc, #112]	; (80139a4 <prvHeapInit+0xb0>)
 8013934:	2200      	movs	r2, #0
 8013936:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	68ba      	ldr	r2, [r7, #8]
 801393c:	4413      	add	r3, r2
 801393e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013940:	2208      	movs	r2, #8
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	1a9b      	subs	r3, r3, r2
 8013946:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	f023 0307 	bic.w	r3, r3, #7
 801394e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	4a15      	ldr	r2, [pc, #84]	; (80139a8 <prvHeapInit+0xb4>)
 8013954:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013956:	4b14      	ldr	r3, [pc, #80]	; (80139a8 <prvHeapInit+0xb4>)
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	2200      	movs	r2, #0
 801395c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801395e:	4b12      	ldr	r3, [pc, #72]	; (80139a8 <prvHeapInit+0xb4>)
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	2200      	movs	r2, #0
 8013964:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801396a:	683b      	ldr	r3, [r7, #0]
 801396c:	68fa      	ldr	r2, [r7, #12]
 801396e:	1ad2      	subs	r2, r2, r3
 8013970:	683b      	ldr	r3, [r7, #0]
 8013972:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013974:	4b0c      	ldr	r3, [pc, #48]	; (80139a8 <prvHeapInit+0xb4>)
 8013976:	681a      	ldr	r2, [r3, #0]
 8013978:	683b      	ldr	r3, [r7, #0]
 801397a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801397c:	683b      	ldr	r3, [r7, #0]
 801397e:	685b      	ldr	r3, [r3, #4]
 8013980:	4a0a      	ldr	r2, [pc, #40]	; (80139ac <prvHeapInit+0xb8>)
 8013982:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013984:	683b      	ldr	r3, [r7, #0]
 8013986:	685b      	ldr	r3, [r3, #4]
 8013988:	4a09      	ldr	r2, [pc, #36]	; (80139b0 <prvHeapInit+0xbc>)
 801398a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801398c:	4b09      	ldr	r3, [pc, #36]	; (80139b4 <prvHeapInit+0xc0>)
 801398e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013992:	601a      	str	r2, [r3, #0]
}
 8013994:	bf00      	nop
 8013996:	3714      	adds	r7, #20
 8013998:	46bd      	mov	sp, r7
 801399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801399e:	4770      	bx	lr
 80139a0:	2000121c 	.word	0x2000121c
 80139a4:	20004e1c 	.word	0x20004e1c
 80139a8:	20004e24 	.word	0x20004e24
 80139ac:	20004e2c 	.word	0x20004e2c
 80139b0:	20004e28 	.word	0x20004e28
 80139b4:	20004e30 	.word	0x20004e30

080139b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80139b8:	b480      	push	{r7}
 80139ba:	b085      	sub	sp, #20
 80139bc:	af00      	add	r7, sp, #0
 80139be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80139c0:	4b28      	ldr	r3, [pc, #160]	; (8013a64 <prvInsertBlockIntoFreeList+0xac>)
 80139c2:	60fb      	str	r3, [r7, #12]
 80139c4:	e002      	b.n	80139cc <prvInsertBlockIntoFreeList+0x14>
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	60fb      	str	r3, [r7, #12]
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	687a      	ldr	r2, [r7, #4]
 80139d2:	429a      	cmp	r2, r3
 80139d4:	d8f7      	bhi.n	80139c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	685b      	ldr	r3, [r3, #4]
 80139de:	68ba      	ldr	r2, [r7, #8]
 80139e0:	4413      	add	r3, r2
 80139e2:	687a      	ldr	r2, [r7, #4]
 80139e4:	429a      	cmp	r2, r3
 80139e6:	d108      	bne.n	80139fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	685a      	ldr	r2, [r3, #4]
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	685b      	ldr	r3, [r3, #4]
 80139f0:	441a      	add	r2, r3
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	685b      	ldr	r3, [r3, #4]
 8013a02:	68ba      	ldr	r2, [r7, #8]
 8013a04:	441a      	add	r2, r3
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	429a      	cmp	r2, r3
 8013a0c:	d118      	bne.n	8013a40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	681a      	ldr	r2, [r3, #0]
 8013a12:	4b15      	ldr	r3, [pc, #84]	; (8013a68 <prvInsertBlockIntoFreeList+0xb0>)
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	429a      	cmp	r2, r3
 8013a18:	d00d      	beq.n	8013a36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	685a      	ldr	r2, [r3, #4]
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	685b      	ldr	r3, [r3, #4]
 8013a24:	441a      	add	r2, r3
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	681a      	ldr	r2, [r3, #0]
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	601a      	str	r2, [r3, #0]
 8013a34:	e008      	b.n	8013a48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013a36:	4b0c      	ldr	r3, [pc, #48]	; (8013a68 <prvInsertBlockIntoFreeList+0xb0>)
 8013a38:	681a      	ldr	r2, [r3, #0]
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	601a      	str	r2, [r3, #0]
 8013a3e:	e003      	b.n	8013a48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	681a      	ldr	r2, [r3, #0]
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013a48:	68fa      	ldr	r2, [r7, #12]
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	429a      	cmp	r2, r3
 8013a4e:	d002      	beq.n	8013a56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	687a      	ldr	r2, [r7, #4]
 8013a54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013a56:	bf00      	nop
 8013a58:	3714      	adds	r7, #20
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a60:	4770      	bx	lr
 8013a62:	bf00      	nop
 8013a64:	20004e1c 	.word	0x20004e1c
 8013a68:	20004e24 	.word	0x20004e24

08013a6c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	b084      	sub	sp, #16
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]
 8013a74:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8013a76:	f00a fa21 	bl	801debc <sys_timeouts_sleeptime>
 8013a7a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013a82:	d10b      	bne.n	8013a9c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8013a84:	4813      	ldr	r0, [pc, #76]	; (8013ad4 <tcpip_timeouts_mbox_fetch+0x68>)
 8013a86:	f00c ff90 	bl	80209aa <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8013a8a:	2200      	movs	r2, #0
 8013a8c:	6839      	ldr	r1, [r7, #0]
 8013a8e:	6878      	ldr	r0, [r7, #4]
 8013a90:	f00c ff02 	bl	8020898 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8013a94:	480f      	ldr	r0, [pc, #60]	; (8013ad4 <tcpip_timeouts_mbox_fetch+0x68>)
 8013a96:	f00c ff79 	bl	802098c <sys_mutex_lock>
    return;
 8013a9a:	e018      	b.n	8013ace <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d102      	bne.n	8013aa8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8013aa2:	f00a f9d1 	bl	801de48 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8013aa6:	e7e6      	b.n	8013a76 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8013aa8:	480a      	ldr	r0, [pc, #40]	; (8013ad4 <tcpip_timeouts_mbox_fetch+0x68>)
 8013aaa:	f00c ff7e 	bl	80209aa <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8013aae:	68fa      	ldr	r2, [r7, #12]
 8013ab0:	6839      	ldr	r1, [r7, #0]
 8013ab2:	6878      	ldr	r0, [r7, #4]
 8013ab4:	f00c fef0 	bl	8020898 <sys_arch_mbox_fetch>
 8013ab8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8013aba:	4806      	ldr	r0, [pc, #24]	; (8013ad4 <tcpip_timeouts_mbox_fetch+0x68>)
 8013abc:	f00c ff66 	bl	802098c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8013ac0:	68bb      	ldr	r3, [r7, #8]
 8013ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013ac6:	d102      	bne.n	8013ace <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8013ac8:	f00a f9be 	bl	801de48 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8013acc:	e7d3      	b.n	8013a76 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8013ace:	3710      	adds	r7, #16
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	bd80      	pop	{r7, pc}
 8013ad4:	200110b8 	.word	0x200110b8

08013ad8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	b084      	sub	sp, #16
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8013ae0:	4810      	ldr	r0, [pc, #64]	; (8013b24 <tcpip_thread+0x4c>)
 8013ae2:	f00c ff53 	bl	802098c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8013ae6:	4b10      	ldr	r3, [pc, #64]	; (8013b28 <tcpip_thread+0x50>)
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d005      	beq.n	8013afa <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8013aee:	4b0e      	ldr	r3, [pc, #56]	; (8013b28 <tcpip_thread+0x50>)
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	4a0e      	ldr	r2, [pc, #56]	; (8013b2c <tcpip_thread+0x54>)
 8013af4:	6812      	ldr	r2, [r2, #0]
 8013af6:	4610      	mov	r0, r2
 8013af8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8013afa:	f107 030c 	add.w	r3, r7, #12
 8013afe:	4619      	mov	r1, r3
 8013b00:	480b      	ldr	r0, [pc, #44]	; (8013b30 <tcpip_thread+0x58>)
 8013b02:	f7ff ffb3 	bl	8013a6c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d106      	bne.n	8013b1a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8013b0c:	4b09      	ldr	r3, [pc, #36]	; (8013b34 <tcpip_thread+0x5c>)
 8013b0e:	2291      	movs	r2, #145	; 0x91
 8013b10:	4909      	ldr	r1, [pc, #36]	; (8013b38 <tcpip_thread+0x60>)
 8013b12:	480a      	ldr	r0, [pc, #40]	; (8013b3c <tcpip_thread+0x64>)
 8013b14:	f00d fd06 	bl	8021524 <iprintf>
      continue;
 8013b18:	e003      	b.n	8013b22 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	f000 f80f 	bl	8013b40 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8013b22:	e7ea      	b.n	8013afa <tcpip_thread+0x22>
 8013b24:	200110b8 	.word	0x200110b8
 8013b28:	20004e34 	.word	0x20004e34
 8013b2c:	20004e38 	.word	0x20004e38
 8013b30:	20004e3c 	.word	0x20004e3c
 8013b34:	08023df8 	.word	0x08023df8
 8013b38:	08023e28 	.word	0x08023e28
 8013b3c:	08023e48 	.word	0x08023e48

08013b40 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8013b40:	b580      	push	{r7, lr}
 8013b42:	b082      	sub	sp, #8
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	781b      	ldrb	r3, [r3, #0]
 8013b4c:	2b02      	cmp	r3, #2
 8013b4e:	d026      	beq.n	8013b9e <tcpip_thread_handle_msg+0x5e>
 8013b50:	2b02      	cmp	r3, #2
 8013b52:	dc2b      	bgt.n	8013bac <tcpip_thread_handle_msg+0x6c>
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d002      	beq.n	8013b5e <tcpip_thread_handle_msg+0x1e>
 8013b58:	2b01      	cmp	r3, #1
 8013b5a:	d015      	beq.n	8013b88 <tcpip_thread_handle_msg+0x48>
 8013b5c:	e026      	b.n	8013bac <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	68db      	ldr	r3, [r3, #12]
 8013b62:	687a      	ldr	r2, [r7, #4]
 8013b64:	6850      	ldr	r0, [r2, #4]
 8013b66:	687a      	ldr	r2, [r7, #4]
 8013b68:	6892      	ldr	r2, [r2, #8]
 8013b6a:	4611      	mov	r1, r2
 8013b6c:	4798      	blx	r3
 8013b6e:	4603      	mov	r3, r0
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d004      	beq.n	8013b7e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	685b      	ldr	r3, [r3, #4]
 8013b78:	4618      	mov	r0, r3
 8013b7a:	f003 fd6d 	bl	8017658 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8013b7e:	6879      	ldr	r1, [r7, #4]
 8013b80:	2009      	movs	r0, #9
 8013b82:	f002 fec5 	bl	8016910 <memp_free>
      break;
 8013b86:	e018      	b.n	8013bba <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	685b      	ldr	r3, [r3, #4]
 8013b8c:	687a      	ldr	r2, [r7, #4]
 8013b8e:	6892      	ldr	r2, [r2, #8]
 8013b90:	4610      	mov	r0, r2
 8013b92:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8013b94:	6879      	ldr	r1, [r7, #4]
 8013b96:	2008      	movs	r0, #8
 8013b98:	f002 feba 	bl	8016910 <memp_free>
      break;
 8013b9c:	e00d      	b.n	8013bba <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	685b      	ldr	r3, [r3, #4]
 8013ba2:	687a      	ldr	r2, [r7, #4]
 8013ba4:	6892      	ldr	r2, [r2, #8]
 8013ba6:	4610      	mov	r0, r2
 8013ba8:	4798      	blx	r3
      break;
 8013baa:	e006      	b.n	8013bba <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8013bac:	4b05      	ldr	r3, [pc, #20]	; (8013bc4 <tcpip_thread_handle_msg+0x84>)
 8013bae:	22cf      	movs	r2, #207	; 0xcf
 8013bb0:	4905      	ldr	r1, [pc, #20]	; (8013bc8 <tcpip_thread_handle_msg+0x88>)
 8013bb2:	4806      	ldr	r0, [pc, #24]	; (8013bcc <tcpip_thread_handle_msg+0x8c>)
 8013bb4:	f00d fcb6 	bl	8021524 <iprintf>
      break;
 8013bb8:	bf00      	nop
  }
}
 8013bba:	bf00      	nop
 8013bbc:	3708      	adds	r7, #8
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	bd80      	pop	{r7, pc}
 8013bc2:	bf00      	nop
 8013bc4:	08023df8 	.word	0x08023df8
 8013bc8:	08023e28 	.word	0x08023e28
 8013bcc:	08023e48 	.word	0x08023e48

08013bd0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8013bd0:	b580      	push	{r7, lr}
 8013bd2:	b086      	sub	sp, #24
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	60f8      	str	r0, [r7, #12]
 8013bd8:	60b9      	str	r1, [r7, #8]
 8013bda:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8013bdc:	481a      	ldr	r0, [pc, #104]	; (8013c48 <tcpip_inpkt+0x78>)
 8013bde:	f00c fe9a 	bl	8020916 <sys_mbox_valid>
 8013be2:	4603      	mov	r3, r0
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d105      	bne.n	8013bf4 <tcpip_inpkt+0x24>
 8013be8:	4b18      	ldr	r3, [pc, #96]	; (8013c4c <tcpip_inpkt+0x7c>)
 8013bea:	22fc      	movs	r2, #252	; 0xfc
 8013bec:	4918      	ldr	r1, [pc, #96]	; (8013c50 <tcpip_inpkt+0x80>)
 8013bee:	4819      	ldr	r0, [pc, #100]	; (8013c54 <tcpip_inpkt+0x84>)
 8013bf0:	f00d fc98 	bl	8021524 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8013bf4:	2009      	movs	r0, #9
 8013bf6:	f002 fe39 	bl	801686c <memp_malloc>
 8013bfa:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8013bfc:	697b      	ldr	r3, [r7, #20]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d102      	bne.n	8013c08 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8013c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013c06:	e01a      	b.n	8013c3e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8013c08:	697b      	ldr	r3, [r7, #20]
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8013c0e:	697b      	ldr	r3, [r7, #20]
 8013c10:	68fa      	ldr	r2, [r7, #12]
 8013c12:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8013c14:	697b      	ldr	r3, [r7, #20]
 8013c16:	68ba      	ldr	r2, [r7, #8]
 8013c18:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8013c1a:	697b      	ldr	r3, [r7, #20]
 8013c1c:	687a      	ldr	r2, [r7, #4]
 8013c1e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8013c20:	6979      	ldr	r1, [r7, #20]
 8013c22:	4809      	ldr	r0, [pc, #36]	; (8013c48 <tcpip_inpkt+0x78>)
 8013c24:	f00c fe1e 	bl	8020864 <sys_mbox_trypost>
 8013c28:	4603      	mov	r3, r0
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d006      	beq.n	8013c3c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8013c2e:	6979      	ldr	r1, [r7, #20]
 8013c30:	2009      	movs	r0, #9
 8013c32:	f002 fe6d 	bl	8016910 <memp_free>
    return ERR_MEM;
 8013c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013c3a:	e000      	b.n	8013c3e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8013c3c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8013c3e:	4618      	mov	r0, r3
 8013c40:	3718      	adds	r7, #24
 8013c42:	46bd      	mov	sp, r7
 8013c44:	bd80      	pop	{r7, pc}
 8013c46:	bf00      	nop
 8013c48:	20004e3c 	.word	0x20004e3c
 8013c4c:	08023df8 	.word	0x08023df8
 8013c50:	08023e70 	.word	0x08023e70
 8013c54:	08023e48 	.word	0x08023e48

08013c58 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	b082      	sub	sp, #8
 8013c5c:	af00      	add	r7, sp, #0
 8013c5e:	6078      	str	r0, [r7, #4]
 8013c60:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8013c62:	683b      	ldr	r3, [r7, #0]
 8013c64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013c68:	f003 0318 	and.w	r3, r3, #24
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d006      	beq.n	8013c7e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8013c70:	4a08      	ldr	r2, [pc, #32]	; (8013c94 <tcpip_input+0x3c>)
 8013c72:	6839      	ldr	r1, [r7, #0]
 8013c74:	6878      	ldr	r0, [r7, #4]
 8013c76:	f7ff ffab 	bl	8013bd0 <tcpip_inpkt>
 8013c7a:	4603      	mov	r3, r0
 8013c7c:	e005      	b.n	8013c8a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8013c7e:	4a06      	ldr	r2, [pc, #24]	; (8013c98 <tcpip_input+0x40>)
 8013c80:	6839      	ldr	r1, [r7, #0]
 8013c82:	6878      	ldr	r0, [r7, #4]
 8013c84:	f7ff ffa4 	bl	8013bd0 <tcpip_inpkt>
 8013c88:	4603      	mov	r3, r0
}
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	3708      	adds	r7, #8
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	bd80      	pop	{r7, pc}
 8013c92:	bf00      	nop
 8013c94:	08020675 	.word	0x08020675
 8013c98:	0801f589 	.word	0x0801f589

08013c9c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8013c9c:	b580      	push	{r7, lr}
 8013c9e:	b084      	sub	sp, #16
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
 8013ca4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8013ca6:	4819      	ldr	r0, [pc, #100]	; (8013d0c <tcpip_try_callback+0x70>)
 8013ca8:	f00c fe35 	bl	8020916 <sys_mbox_valid>
 8013cac:	4603      	mov	r3, r0
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d106      	bne.n	8013cc0 <tcpip_try_callback+0x24>
 8013cb2:	4b17      	ldr	r3, [pc, #92]	; (8013d10 <tcpip_try_callback+0x74>)
 8013cb4:	f240 125d 	movw	r2, #349	; 0x15d
 8013cb8:	4916      	ldr	r1, [pc, #88]	; (8013d14 <tcpip_try_callback+0x78>)
 8013cba:	4817      	ldr	r0, [pc, #92]	; (8013d18 <tcpip_try_callback+0x7c>)
 8013cbc:	f00d fc32 	bl	8021524 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8013cc0:	2008      	movs	r0, #8
 8013cc2:	f002 fdd3 	bl	801686c <memp_malloc>
 8013cc6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d102      	bne.n	8013cd4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8013cce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013cd2:	e017      	b.n	8013d04 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	2201      	movs	r2, #1
 8013cd8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	687a      	ldr	r2, [r7, #4]
 8013cde:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	683a      	ldr	r2, [r7, #0]
 8013ce4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8013ce6:	68f9      	ldr	r1, [r7, #12]
 8013ce8:	4808      	ldr	r0, [pc, #32]	; (8013d0c <tcpip_try_callback+0x70>)
 8013cea:	f00c fdbb 	bl	8020864 <sys_mbox_trypost>
 8013cee:	4603      	mov	r3, r0
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d006      	beq.n	8013d02 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8013cf4:	68f9      	ldr	r1, [r7, #12]
 8013cf6:	2008      	movs	r0, #8
 8013cf8:	f002 fe0a 	bl	8016910 <memp_free>
    return ERR_MEM;
 8013cfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013d00:	e000      	b.n	8013d04 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8013d02:	2300      	movs	r3, #0
}
 8013d04:	4618      	mov	r0, r3
 8013d06:	3710      	adds	r7, #16
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	bd80      	pop	{r7, pc}
 8013d0c:	20004e3c 	.word	0x20004e3c
 8013d10:	08023df8 	.word	0x08023df8
 8013d14:	08023e70 	.word	0x08023e70
 8013d18:	08023e48 	.word	0x08023e48

08013d1c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8013d1c:	b580      	push	{r7, lr}
 8013d1e:	b084      	sub	sp, #16
 8013d20:	af02      	add	r7, sp, #8
 8013d22:	6078      	str	r0, [r7, #4]
 8013d24:	6039      	str	r1, [r7, #0]
  lwip_init();
 8013d26:	f002 f919 	bl	8015f5c <lwip_init>

  tcpip_init_done = initfunc;
 8013d2a:	4a17      	ldr	r2, [pc, #92]	; (8013d88 <tcpip_init+0x6c>)
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8013d30:	4a16      	ldr	r2, [pc, #88]	; (8013d8c <tcpip_init+0x70>)
 8013d32:	683b      	ldr	r3, [r7, #0]
 8013d34:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8013d36:	2106      	movs	r1, #6
 8013d38:	4815      	ldr	r0, [pc, #84]	; (8013d90 <tcpip_init+0x74>)
 8013d3a:	f00c fd71 	bl	8020820 <sys_mbox_new>
 8013d3e:	4603      	mov	r3, r0
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d006      	beq.n	8013d52 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8013d44:	4b13      	ldr	r3, [pc, #76]	; (8013d94 <tcpip_init+0x78>)
 8013d46:	f240 2261 	movw	r2, #609	; 0x261
 8013d4a:	4913      	ldr	r1, [pc, #76]	; (8013d98 <tcpip_init+0x7c>)
 8013d4c:	4813      	ldr	r0, [pc, #76]	; (8013d9c <tcpip_init+0x80>)
 8013d4e:	f00d fbe9 	bl	8021524 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8013d52:	4813      	ldr	r0, [pc, #76]	; (8013da0 <tcpip_init+0x84>)
 8013d54:	f00c fdfe 	bl	8020954 <sys_mutex_new>
 8013d58:	4603      	mov	r3, r0
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d006      	beq.n	8013d6c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8013d5e:	4b0d      	ldr	r3, [pc, #52]	; (8013d94 <tcpip_init+0x78>)
 8013d60:	f240 2265 	movw	r2, #613	; 0x265
 8013d64:	490f      	ldr	r1, [pc, #60]	; (8013da4 <tcpip_init+0x88>)
 8013d66:	480d      	ldr	r0, [pc, #52]	; (8013d9c <tcpip_init+0x80>)
 8013d68:	f00d fbdc 	bl	8021524 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8013d6c:	2300      	movs	r3, #0
 8013d6e:	9300      	str	r3, [sp, #0]
 8013d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013d74:	2200      	movs	r2, #0
 8013d76:	490c      	ldr	r1, [pc, #48]	; (8013da8 <tcpip_init+0x8c>)
 8013d78:	480c      	ldr	r0, [pc, #48]	; (8013dac <tcpip_init+0x90>)
 8013d7a:	f00c fe23 	bl	80209c4 <sys_thread_new>
}
 8013d7e:	bf00      	nop
 8013d80:	3708      	adds	r7, #8
 8013d82:	46bd      	mov	sp, r7
 8013d84:	bd80      	pop	{r7, pc}
 8013d86:	bf00      	nop
 8013d88:	20004e34 	.word	0x20004e34
 8013d8c:	20004e38 	.word	0x20004e38
 8013d90:	20004e3c 	.word	0x20004e3c
 8013d94:	08023df8 	.word	0x08023df8
 8013d98:	08023e80 	.word	0x08023e80
 8013d9c:	08023e48 	.word	0x08023e48
 8013da0:	200110b8 	.word	0x200110b8
 8013da4:	08023ea4 	.word	0x08023ea4
 8013da8:	08013ad9 	.word	0x08013ad9
 8013dac:	08023ec8 	.word	0x08023ec8

08013db0 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8013db0:	b580      	push	{r7, lr}
 8013db2:	b084      	sub	sp, #16
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]
 8013db8:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d002      	beq.n	8013dc6 <fs_open+0x16>
 8013dc0:	683b      	ldr	r3, [r7, #0]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d102      	bne.n	8013dcc <fs_open+0x1c>
    return ERR_ARG;
 8013dc6:	f06f 030f 	mvn.w	r3, #15
 8013dca:	e028      	b.n	8013e1e <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8013dcc:	4b16      	ldr	r3, [pc, #88]	; (8013e28 <fs_open+0x78>)
 8013dce:	60fb      	str	r3, [r7, #12]
 8013dd0:	e020      	b.n	8013e14 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	685b      	ldr	r3, [r3, #4]
 8013dd6:	4619      	mov	r1, r3
 8013dd8:	6838      	ldr	r0, [r7, #0]
 8013dda:	f7ec fa31 	bl	8000240 <strcmp>
 8013dde:	4603      	mov	r3, r0
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d114      	bne.n	8013e0e <fs_open+0x5e>
      file->data = (const char *)f->data;
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	689a      	ldr	r2, [r3, #8]
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	68da      	ldr	r2, [r3, #12]
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	68da      	ldr	r2, [r3, #12]
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	2200      	movs	r2, #0
 8013e00:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	7c1a      	ldrb	r2, [r3, #16]
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8013e0a:	2300      	movs	r3, #0
 8013e0c:	e007      	b.n	8013e1e <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	681b      	ldr	r3, [r3, #0]
 8013e12:	60fb      	str	r3, [r7, #12]
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d1db      	bne.n	8013dd2 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8013e1a:	f06f 0305 	mvn.w	r3, #5
}
 8013e1e:	4618      	mov	r0, r3
 8013e20:	3710      	adds	r7, #16
 8013e22:	46bd      	mov	sp, r7
 8013e24:	bd80      	pop	{r7, pc}
 8013e26:	bf00      	nop
 8013e28:	0802ad78 	.word	0x0802ad78

08013e2c <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8013e2c:	b480      	push	{r7}
 8013e2e:	b083      	sub	sp, #12
 8013e30:	af00      	add	r7, sp, #0
 8013e32:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8013e34:	bf00      	nop
 8013e36:	370c      	adds	r7, #12
 8013e38:	46bd      	mov	sp, r7
 8013e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e3e:	4770      	bx	lr

08013e40 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8013e40:	b480      	push	{r7}
 8013e42:	b083      	sub	sp, #12
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	685a      	ldr	r2, [r3, #4]
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	689b      	ldr	r3, [r3, #8]
 8013e50:	1ad3      	subs	r3, r2, r3
}
 8013e52:	4618      	mov	r0, r3
 8013e54:	370c      	adds	r7, #12
 8013e56:	46bd      	mov	sp, r7
 8013e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e5c:	4770      	bx	lr

08013e5e <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 8013e5e:	b580      	push	{r7, lr}
 8013e60:	b082      	sub	sp, #8
 8013e62:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8013e64:	f240 4024 	movw	r0, #1060	; 0x424
 8013e68:	f002 fb7e 	bl	8016568 <mem_malloc>
 8013e6c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d005      	beq.n	8013e80 <http_ssi_state_alloc+0x22>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8013e74:	f240 4224 	movw	r2, #1060	; 0x424
 8013e78:	2100      	movs	r1, #0
 8013e7a:	6878      	ldr	r0, [r7, #4]
 8013e7c:	f00d faa0 	bl	80213c0 <memset>
  }
  return ret;
 8013e80:	687b      	ldr	r3, [r7, #4]
}
 8013e82:	4618      	mov	r0, r3
 8013e84:	3708      	adds	r7, #8
 8013e86:	46bd      	mov	sp, r7
 8013e88:	bd80      	pop	{r7, pc}

08013e8a <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 8013e8a:	b580      	push	{r7, lr}
 8013e8c:	b082      	sub	sp, #8
 8013e8e:	af00      	add	r7, sp, #0
 8013e90:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d002      	beq.n	8013e9e <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 8013e98:	6878      	ldr	r0, [r7, #4]
 8013e9a:	f002 f9cb 	bl	8016234 <mem_free>
  }
}
 8013e9e:	bf00      	nop
 8013ea0:	3708      	adds	r7, #8
 8013ea2:	46bd      	mov	sp, r7
 8013ea4:	bd80      	pop	{r7, pc}

08013ea6 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8013ea6:	b580      	push	{r7, lr}
 8013ea8:	b082      	sub	sp, #8
 8013eaa:	af00      	add	r7, sp, #0
 8013eac:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8013eae:	22d8      	movs	r2, #216	; 0xd8
 8013eb0:	2100      	movs	r1, #0
 8013eb2:	6878      	ldr	r0, [r7, #4]
 8013eb4:	f00d fa84 	bl	80213c0 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	2205      	movs	r2, #5
 8013ebc:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8013ec0:	bf00      	nop
 8013ec2:	3708      	adds	r7, #8
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	bd80      	pop	{r7, pc}

08013ec8 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b082      	sub	sp, #8
 8013ecc:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8013ece:	20d8      	movs	r0, #216	; 0xd8
 8013ed0:	f002 fb4a 	bl	8016568 <mem_malloc>
 8013ed4:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d002      	beq.n	8013ee2 <http_state_alloc+0x1a>
    http_state_init(ret);
 8013edc:	6878      	ldr	r0, [r7, #4]
 8013ede:	f7ff ffe2 	bl	8013ea6 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8013ee2:	687b      	ldr	r3, [r7, #4]
}
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	3708      	adds	r7, #8
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	bd80      	pop	{r7, pc}

08013eec <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b082      	sub	sp, #8
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	695b      	ldr	r3, [r3, #20]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d007      	beq.n	8013f0c <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	695b      	ldr	r3, [r3, #20]
 8013f00:	4618      	mov	r0, r3
 8013f02:	f7ff ff93 	bl	8013e2c <fs_close>
    hs->handle = NULL;
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	2200      	movs	r2, #0
 8013f0a:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d007      	beq.n	8013f24 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f18:	4618      	mov	r0, r3
 8013f1a:	f7ff ffb6 	bl	8013e8a <http_ssi_state_free>
    hs->ssi = NULL;
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	2200      	movs	r2, #0
 8013f22:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	6a1b      	ldr	r3, [r3, #32]
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d007      	beq.n	8013f3c <http_state_eof+0x50>
    pbuf_free(hs->req);
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	6a1b      	ldr	r3, [r3, #32]
 8013f30:	4618      	mov	r0, r3
 8013f32:	f003 fb91 	bl	8017658 <pbuf_free>
    hs->req = NULL;
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	2200      	movs	r2, #0
 8013f3a:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8013f3c:	bf00      	nop
 8013f3e:	3708      	adds	r7, #8
 8013f40:	46bd      	mov	sp, r7
 8013f42:	bd80      	pop	{r7, pc}

08013f44 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8013f44:	b580      	push	{r7, lr}
 8013f46:	b082      	sub	sp, #8
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d005      	beq.n	8013f5e <http_state_free+0x1a>
    http_state_eof(hs);
 8013f52:	6878      	ldr	r0, [r7, #4]
 8013f54:	f7ff ffca 	bl	8013eec <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8013f58:	6878      	ldr	r0, [r7, #4]
 8013f5a:	f002 f96b 	bl	8016234 <mem_free>
  }
}
 8013f5e:	bf00      	nop
 8013f60:	3708      	adds	r7, #8
 8013f62:	46bd      	mov	sp, r7
 8013f64:	bd80      	pop	{r7, pc}
	...

08013f68 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b086      	sub	sp, #24
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	60f8      	str	r0, [r7, #12]
 8013f70:	60b9      	str	r1, [r7, #8]
 8013f72:	607a      	str	r2, [r7, #4]
 8013f74:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d106      	bne.n	8013f8a <http_write+0x22>
 8013f7c:	4b2c      	ldr	r3, [pc, #176]	; (8014030 <http_write+0xc8>)
 8013f7e:	f240 2219 	movw	r2, #537	; 0x219
 8013f82:	492c      	ldr	r1, [pc, #176]	; (8014034 <http_write+0xcc>)
 8013f84:	482c      	ldr	r0, [pc, #176]	; (8014038 <http_write+0xd0>)
 8013f86:	f00d facd 	bl	8021524 <iprintf>
  len = *length;
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	881b      	ldrh	r3, [r3, #0]
 8013f8e:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8013f90:	8afb      	ldrh	r3, [r7, #22]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d101      	bne.n	8013f9a <http_write+0x32>
    return ERR_OK;
 8013f96:	2300      	movs	r3, #0
 8013f98:	e045      	b.n	8014026 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013fa0:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8013fa2:	8aba      	ldrh	r2, [r7, #20]
 8013fa4:	8afb      	ldrh	r3, [r7, #22]
 8013fa6:	429a      	cmp	r2, r3
 8013fa8:	d201      	bcs.n	8013fae <http_write+0x46>
    len = max_len;
 8013faa:	8abb      	ldrh	r3, [r7, #20]
 8013fac:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013fb2:	005b      	lsls	r3, r3, #1
 8013fb4:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8013fb6:	8afa      	ldrh	r2, [r7, #22]
 8013fb8:	8abb      	ldrh	r3, [r7, #20]
 8013fba:	429a      	cmp	r2, r3
 8013fbc:	d901      	bls.n	8013fc2 <http_write+0x5a>
    len = max_len;
 8013fbe:	8abb      	ldrh	r3, [r7, #20]
 8013fc0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8013fc2:	78fb      	ldrb	r3, [r7, #3]
 8013fc4:	8afa      	ldrh	r2, [r7, #22]
 8013fc6:	68b9      	ldr	r1, [r7, #8]
 8013fc8:	68f8      	ldr	r0, [r7, #12]
 8013fca:	f008 f8d5 	bl	801c178 <tcp_write>
 8013fce:	4603      	mov	r3, r0
 8013fd0:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8013fd2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013fda:	d10f      	bne.n	8013ffc <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d004      	beq.n	8013ff0 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8013fec:	2b08      	cmp	r3, #8
 8013fee:	d902      	bls.n	8013ff6 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8013ff0:	2301      	movs	r3, #1
 8013ff2:	82fb      	strh	r3, [r7, #22]
 8013ff4:	e002      	b.n	8013ffc <http_write+0x94>
      } else {
        len /= 2;
 8013ff6:	8afb      	ldrh	r3, [r7, #22]
 8013ff8:	085b      	lsrs	r3, r3, #1
 8013ffa:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8013ffc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014004:	d102      	bne.n	801400c <http_write+0xa4>
 8014006:	8afb      	ldrh	r3, [r7, #22]
 8014008:	2b01      	cmp	r3, #1
 801400a:	d8da      	bhi.n	8013fc2 <http_write+0x5a>

  if (err == ERR_OK) {
 801400c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014010:	2b00      	cmp	r3, #0
 8014012:	d103      	bne.n	801401c <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	8afa      	ldrh	r2, [r7, #22]
 8014018:	801a      	strh	r2, [r3, #0]
 801401a:	e002      	b.n	8014022 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	2200      	movs	r2, #0
 8014020:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8014022:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8014026:	4618      	mov	r0, r3
 8014028:	3718      	adds	r7, #24
 801402a:	46bd      	mov	sp, r7
 801402c:	bd80      	pop	{r7, pc}
 801402e:	bf00      	nop
 8014030:	080243a8 	.word	0x080243a8
 8014034:	080243e0 	.word	0x080243e0
 8014038:	080243f0 	.word	0x080243f0

0801403c <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 801403c:	b580      	push	{r7, lr}
 801403e:	b086      	sub	sp, #24
 8014040:	af00      	add	r7, sp, #0
 8014042:	60f8      	str	r0, [r7, #12]
 8014044:	60b9      	str	r1, [r7, #8]
 8014046:	4613      	mov	r3, r2
 8014048:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void *)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 801404a:	68bb      	ldr	r3, [r7, #8]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d00c      	beq.n	801406a <http_close_or_abort_conn+0x2e>
    if ((hs->post_content_len_left != 0)
 8014050:	68bb      	ldr	r3, [r7, #8]
 8014052:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8014056:	2b00      	cmp	r3, #0
 8014058:	d007      	beq.n	801406a <http_close_or_abort_conn+0x2e>
#if LWIP_HTTPD_POST_MANUAL_WND
        || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 801405a:	4b1f      	ldr	r3, [pc, #124]	; (80140d8 <http_close_or_abort_conn+0x9c>)
 801405c:	2200      	movs	r2, #0
 801405e:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8014060:	223f      	movs	r2, #63	; 0x3f
 8014062:	491d      	ldr	r1, [pc, #116]	; (80140d8 <http_close_or_abort_conn+0x9c>)
 8014064:	68b8      	ldr	r0, [r7, #8]
 8014066:	f7ef fb0b 	bl	8003680 <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 801406a:	2100      	movs	r1, #0
 801406c:	68f8      	ldr	r0, [r7, #12]
 801406e:	f005 f945 	bl	80192fc <tcp_arg>
  altcp_recv(pcb, NULL);
 8014072:	2100      	movs	r1, #0
 8014074:	68f8      	ldr	r0, [r7, #12]
 8014076:	f005 f953 	bl	8019320 <tcp_recv>
  altcp_err(pcb, NULL);
 801407a:	2100      	movs	r1, #0
 801407c:	68f8      	ldr	r0, [r7, #12]
 801407e:	f005 f993 	bl	80193a8 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8014082:	2200      	movs	r2, #0
 8014084:	2100      	movs	r1, #0
 8014086:	68f8      	ldr	r0, [r7, #12]
 8014088:	f005 f9c8 	bl	801941c <tcp_poll>
  altcp_sent(pcb, NULL);
 801408c:	2100      	movs	r1, #0
 801408e:	68f8      	ldr	r0, [r7, #12]
 8014090:	f005 f968 	bl	8019364 <tcp_sent>
  if (hs != NULL) {
 8014094:	68bb      	ldr	r3, [r7, #8]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d002      	beq.n	80140a0 <http_close_or_abort_conn+0x64>
    http_state_free(hs);
 801409a:	68b8      	ldr	r0, [r7, #8]
 801409c:	f7ff ff52 	bl	8013f44 <http_state_free>
  }

  if (abort_conn) {
 80140a0:	79fb      	ldrb	r3, [r7, #7]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d004      	beq.n	80140b0 <http_close_or_abort_conn+0x74>
    altcp_abort(pcb);
 80140a6:	68f8      	ldr	r0, [r7, #12]
 80140a8:	f004 f86a 	bl	8018180 <tcp_abort>
    return ERR_OK;
 80140ac:	2300      	movs	r3, #0
 80140ae:	e00f      	b.n	80140d0 <http_close_or_abort_conn+0x94>
  }
  err = altcp_close(pcb);
 80140b0:	68f8      	ldr	r0, [r7, #12]
 80140b2:	f003 ff7b 	bl	8017fac <tcp_close>
 80140b6:	4603      	mov	r3, r0
 80140b8:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 80140ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d004      	beq.n	80140cc <http_close_or_abort_conn+0x90>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80140c2:	2204      	movs	r2, #4
 80140c4:	4905      	ldr	r1, [pc, #20]	; (80140dc <http_close_or_abort_conn+0xa0>)
 80140c6:	68f8      	ldr	r0, [r7, #12]
 80140c8:	f005 f9a8 	bl	801941c <tcp_poll>
  }
  return err;
 80140cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80140d0:	4618      	mov	r0, r3
 80140d2:	3718      	adds	r7, #24
 80140d4:	46bd      	mov	sp, r7
 80140d6:	bd80      	pop	{r7, pc}
 80140d8:	20005240 	.word	0x20005240
 80140dc:	0801595b 	.word	0x0801595b

080140e0 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 80140e0:	b580      	push	{r7, lr}
 80140e2:	b082      	sub	sp, #8
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	6078      	str	r0, [r7, #4]
 80140e8:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 80140ea:	2200      	movs	r2, #0
 80140ec:	6839      	ldr	r1, [r7, #0]
 80140ee:	6878      	ldr	r0, [r7, #4]
 80140f0:	f7ff ffa4 	bl	801403c <http_close_or_abort_conn>
 80140f4:	4603      	mov	r3, r0
}
 80140f6:	4618      	mov	r0, r3
 80140f8:	3708      	adds	r7, #8
 80140fa:	46bd      	mov	sp, r7
 80140fc:	bd80      	pop	{r7, pc}

080140fe <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 80140fe:	b580      	push	{r7, lr}
 8014100:	b082      	sub	sp, #8
 8014102:	af00      	add	r7, sp, #0
 8014104:	6078      	str	r0, [r7, #4]
 8014106:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8014108:	6839      	ldr	r1, [r7, #0]
 801410a:	6878      	ldr	r0, [r7, #4]
 801410c:	f7ff ffe8 	bl	80140e0 <http_close_conn>
  }
}
 8014110:	bf00      	nop
 8014112:	3708      	adds	r7, #8
 8014114:	46bd      	mov	sp, r7
 8014116:	bd80      	pop	{r7, pc}

08014118 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 8014118:	b580      	push	{r7, lr}
 801411a:	b086      	sub	sp, #24
 801411c:	af00      	add	r7, sp, #0
 801411e:	6078      	str	r0, [r7, #4]
 8014120:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 8014122:	683b      	ldr	r3, [r7, #0]
 8014124:	2b00      	cmp	r3, #0
 8014126:	d003      	beq.n	8014130 <extract_uri_parameters+0x18>
 8014128:	683b      	ldr	r3, [r7, #0]
 801412a:	781b      	ldrb	r3, [r3, #0]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d101      	bne.n	8014134 <extract_uri_parameters+0x1c>
    return (0);
 8014130:	2300      	movs	r3, #0
 8014132:	e04b      	b.n	80141cc <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8014134:	683b      	ldr	r3, [r7, #0]
 8014136:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8014138:	2300      	movs	r3, #0
 801413a:	613b      	str	r3, [r7, #16]
 801413c:	e03f      	b.n	80141be <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	693a      	ldr	r2, [r7, #16]
 8014142:	320c      	adds	r2, #12
 8014144:	6979      	ldr	r1, [r7, #20]
 8014146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 801414a:	697b      	ldr	r3, [r7, #20]
 801414c:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 801414e:	2126      	movs	r1, #38	; 0x26
 8014150:	6978      	ldr	r0, [r7, #20]
 8014152:	f00d fc0b 	bl	802196c <strchr>
 8014156:	6178      	str	r0, [r7, #20]
    if (pair) {
 8014158:	697b      	ldr	r3, [r7, #20]
 801415a:	2b00      	cmp	r3, #0
 801415c:	d006      	beq.n	801416c <extract_uri_parameters+0x54>
      *pair = '\0';
 801415e:	697b      	ldr	r3, [r7, #20]
 8014160:	2200      	movs	r2, #0
 8014162:	701a      	strb	r2, [r3, #0]
      pair++;
 8014164:	697b      	ldr	r3, [r7, #20]
 8014166:	3301      	adds	r3, #1
 8014168:	617b      	str	r3, [r7, #20]
 801416a:	e00c      	b.n	8014186 <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 801416c:	2120      	movs	r1, #32
 801416e:	68f8      	ldr	r0, [r7, #12]
 8014170:	f00d fbfc 	bl	802196c <strchr>
 8014174:	6178      	str	r0, [r7, #20]
      if (pair) {
 8014176:	697b      	ldr	r3, [r7, #20]
 8014178:	2b00      	cmp	r3, #0
 801417a:	d002      	beq.n	8014182 <extract_uri_parameters+0x6a>
        *pair = '\0';
 801417c:	697b      	ldr	r3, [r7, #20]
 801417e:	2200      	movs	r2, #0
 8014180:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 8014182:	2300      	movs	r3, #0
 8014184:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 8014186:	213d      	movs	r1, #61	; 0x3d
 8014188:	68f8      	ldr	r0, [r7, #12]
 801418a:	f00d fbef 	bl	802196c <strchr>
 801418e:	60f8      	str	r0, [r7, #12]
    if (equals) {
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d00a      	beq.n	80141ac <extract_uri_parameters+0x94>
      *equals = '\0';
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	2200      	movs	r2, #0
 801419a:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	1c59      	adds	r1, r3, #1
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	693a      	ldr	r2, [r7, #16]
 80141a4:	321c      	adds	r2, #28
 80141a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80141aa:	e005      	b.n	80141b8 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	693a      	ldr	r2, [r7, #16]
 80141b0:	321c      	adds	r2, #28
 80141b2:	2100      	movs	r1, #0
 80141b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 80141b8:	693b      	ldr	r3, [r7, #16]
 80141ba:	3301      	adds	r3, #1
 80141bc:	613b      	str	r3, [r7, #16]
 80141be:	693b      	ldr	r3, [r7, #16]
 80141c0:	2b0f      	cmp	r3, #15
 80141c2:	dc02      	bgt.n	80141ca <extract_uri_parameters+0xb2>
 80141c4:	697b      	ldr	r3, [r7, #20]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d1b9      	bne.n	801413e <extract_uri_parameters+0x26>
    }
  }

  return loop;
 80141ca:	693b      	ldr	r3, [r7, #16]
}
 80141cc:	4618      	mov	r0, r3
 80141ce:	3718      	adds	r7, #24
 80141d0:	46bd      	mov	sp, r7
 80141d2:	bd80      	pop	{r7, pc}

080141d4 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 80141d4:	b590      	push	{r4, r7, lr}
 80141d6:	b089      	sub	sp, #36	; 0x24
 80141d8:	af02      	add	r7, sp, #8
 80141da:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d106      	bne.n	80141f0 <get_tag_insert+0x1c>
 80141e2:	4b5b      	ldr	r3, [pc, #364]	; (8014350 <get_tag_insert+0x17c>)
 80141e4:	f44f 7241 	mov.w	r2, #772	; 0x304
 80141e8:	495a      	ldr	r1, [pc, #360]	; (8014354 <get_tag_insert+0x180>)
 80141ea:	485b      	ldr	r0, [pc, #364]	; (8014358 <get_tag_insert+0x184>)
 80141ec:	f00d f99a 	bl	8021524 <iprintf>
  ssi = hs->ssi;
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141f4:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 80141f6:	693b      	ldr	r3, [r7, #16]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d106      	bne.n	801420a <get_tag_insert+0x36>
 80141fc:	4b54      	ldr	r3, [pc, #336]	; (8014350 <get_tag_insert+0x17c>)
 80141fe:	f240 3206 	movw	r2, #774	; 0x306
 8014202:	4956      	ldr	r1, [pc, #344]	; (801435c <get_tag_insert+0x188>)
 8014204:	4854      	ldr	r0, [pc, #336]	; (8014358 <get_tag_insert+0x184>)
 8014206:	f00d f98d 	bl	8021524 <iprintf>
#if LWIP_HTTPD_SSI_MULTIPART
  current_tag_part = ssi->tag_part;
 801420a:	693b      	ldr	r3, [r7, #16]
 801420c:	8a9b      	ldrh	r3, [r3, #20]
 801420e:	81fb      	strh	r3, [r7, #14]
  ssi->tag_part = HTTPD_LAST_TAG_PART;
 8014210:	693b      	ldr	r3, [r7, #16]
 8014212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014216:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 8014218:	4b51      	ldr	r3, [pc, #324]	; (8014360 <get_tag_insert+0x18c>)
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	2b00      	cmp	r3, #0
 801421e:	d034      	beq.n	801428a <get_tag_insert+0xb6>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 8014220:	4b50      	ldr	r3, [pc, #320]	; (8014364 <get_tag_insert+0x190>)
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	2b00      	cmp	r3, #0
 8014226:	d030      	beq.n	801428a <get_tag_insert+0xb6>
 8014228:	4b4f      	ldr	r3, [pc, #316]	; (8014368 <get_tag_insert+0x194>)
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d02c      	beq.n	801428a <get_tag_insert+0xb6>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8014230:	2300      	movs	r3, #0
 8014232:	617b      	str	r3, [r7, #20]
 8014234:	e024      	b.n	8014280 <get_tag_insert+0xac>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8014236:	693b      	ldr	r3, [r7, #16]
 8014238:	f103 0018 	add.w	r0, r3, #24
 801423c:	4b49      	ldr	r3, [pc, #292]	; (8014364 <get_tag_insert+0x190>)
 801423e:	681a      	ldr	r2, [r3, #0]
 8014240:	697b      	ldr	r3, [r7, #20]
 8014242:	009b      	lsls	r3, r3, #2
 8014244:	4413      	add	r3, r2
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	4619      	mov	r1, r3
 801424a:	f7eb fff9 	bl	8000240 <strcmp>
 801424e:	4603      	mov	r3, r0
 8014250:	2b00      	cmp	r3, #0
 8014252:	d112      	bne.n	801427a <get_tag_insert+0xa6>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8014254:	4b42      	ldr	r3, [pc, #264]	; (8014360 <get_tag_insert+0x18c>)
 8014256:	681c      	ldr	r4, [r3, #0]
 8014258:	693b      	ldr	r3, [r7, #16]
 801425a:	f103 0121 	add.w	r1, r3, #33	; 0x21
 801425e:	693b      	ldr	r3, [r7, #16]
 8014260:	3314      	adds	r3, #20
 8014262:	89fa      	ldrh	r2, [r7, #14]
 8014264:	9300      	str	r3, [sp, #0]
 8014266:	4613      	mov	r3, r2
 8014268:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801426c:	6978      	ldr	r0, [r7, #20]
 801426e:	47a0      	blx	r4
 8014270:	4603      	mov	r3, r0
 8014272:	461a      	mov	r2, r3
 8014274:	693b      	ldr	r3, [r7, #16]
 8014276:	825a      	strh	r2, [r3, #18]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 8014278:	e066      	b.n	8014348 <get_tag_insert+0x174>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 801427a:	697b      	ldr	r3, [r7, #20]
 801427c:	3301      	adds	r3, #1
 801427e:	617b      	str	r3, [r7, #20]
 8014280:	4b39      	ldr	r3, [pc, #228]	; (8014368 <get_tag_insert+0x194>)
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	697a      	ldr	r2, [r7, #20]
 8014286:	429a      	cmp	r2, r3
 8014288:	dbd5      	blt.n	8014236 <get_tag_insert+0x62>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 801428a:	693b      	ldr	r3, [r7, #16]
 801428c:	3318      	adds	r3, #24
 801428e:	4618      	mov	r0, r3
 8014290:	f7eb ffe0 	bl	8000254 <strlen>
 8014294:	4603      	mov	r3, r0
 8014296:	f240 32e6 	movw	r2, #998	; 0x3e6
 801429a:	4293      	cmp	r3, r2
 801429c:	d81b      	bhi.n	80142d6 <get_tag_insert+0x102>
 801429e:	693b      	ldr	r3, [r7, #16]
 80142a0:	3318      	adds	r3, #24
 80142a2:	4618      	mov	r0, r3
 80142a4:	f7eb ffd6 	bl	8000254 <strlen>
 80142a8:	4603      	mov	r3, r0
 80142aa:	2b09      	cmp	r3, #9
 80142ac:	d813      	bhi.n	80142d6 <get_tag_insert+0x102>
 80142ae:	693b      	ldr	r3, [r7, #16]
 80142b0:	3318      	adds	r3, #24
 80142b2:	4618      	mov	r0, r3
 80142b4:	f7eb ffce 	bl	8000254 <strlen>
 80142b8:	4603      	mov	r3, r0
 80142ba:	f240 32e6 	movw	r2, #998	; 0x3e6
 80142be:	4293      	cmp	r3, r2
 80142c0:	d806      	bhi.n	80142d0 <get_tag_insert+0xfc>
 80142c2:	693b      	ldr	r3, [r7, #16]
 80142c4:	3318      	adds	r3, #24
 80142c6:	4618      	mov	r0, r3
 80142c8:	f7eb ffc4 	bl	8000254 <strlen>
 80142cc:	4603      	mov	r3, r0
 80142ce:	e003      	b.n	80142d8 <get_tag_insert+0x104>
 80142d0:	f240 33e7 	movw	r3, #999	; 0x3e7
 80142d4:	e000      	b.n	80142d8 <get_tag_insert+0x104>
 80142d6:	2309      	movs	r3, #9
 80142d8:	60bb      	str	r3, [r7, #8]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 80142da:	693b      	ldr	r3, [r7, #16]
 80142dc:	3321      	adds	r3, #33	; 0x21
 80142de:	2212      	movs	r2, #18
 80142e0:	4922      	ldr	r1, [pc, #136]	; (801436c <get_tag_insert+0x198>)
 80142e2:	4618      	mov	r0, r3
 80142e4:	f00d f844 	bl	8021370 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 80142e8:	693b      	ldr	r3, [r7, #16]
 80142ea:	f103 0033 	add.w	r0, r3, #51	; 0x33
 80142ee:	693b      	ldr	r3, [r7, #16]
 80142f0:	3318      	adds	r3, #24
 80142f2:	68ba      	ldr	r2, [r7, #8]
 80142f4:	4619      	mov	r1, r3
 80142f6:	f00d f83b 	bl	8021370 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 80142fa:	68bb      	ldr	r3, [r7, #8]
 80142fc:	3312      	adds	r3, #18
 80142fe:	3320      	adds	r3, #32
 8014300:	693a      	ldr	r2, [r7, #16]
 8014302:	4413      	add	r3, r2
 8014304:	3301      	adds	r3, #1
 8014306:	2207      	movs	r2, #7
 8014308:	4919      	ldr	r1, [pc, #100]	; (8014370 <get_tag_insert+0x19c>)
 801430a:	4618      	mov	r0, r3
 801430c:	f00d f830 	bl	8021370 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8014310:	68bb      	ldr	r3, [r7, #8]
 8014312:	3319      	adds	r3, #25
 8014314:	693a      	ldr	r2, [r7, #16]
 8014316:	4413      	add	r3, r2
 8014318:	2200      	movs	r2, #0
 801431a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  len = strlen(ssi->tag_insert);
 801431e:	693b      	ldr	r3, [r7, #16]
 8014320:	3321      	adds	r3, #33	; 0x21
 8014322:	4618      	mov	r0, r3
 8014324:	f7eb ff96 	bl	8000254 <strlen>
 8014328:	60b8      	str	r0, [r7, #8]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 801432a:	68bb      	ldr	r3, [r7, #8]
 801432c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014330:	d306      	bcc.n	8014340 <get_tag_insert+0x16c>
 8014332:	4b07      	ldr	r3, [pc, #28]	; (8014350 <get_tag_insert+0x17c>)
 8014334:	f240 323f 	movw	r2, #831	; 0x33f
 8014338:	490e      	ldr	r1, [pc, #56]	; (8014374 <get_tag_insert+0x1a0>)
 801433a:	4807      	ldr	r0, [pc, #28]	; (8014358 <get_tag_insert+0x184>)
 801433c:	f00d f8f2 	bl	8021524 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 8014340:	68bb      	ldr	r3, [r7, #8]
 8014342:	b29a      	uxth	r2, r3
 8014344:	693b      	ldr	r3, [r7, #16]
 8014346:	825a      	strh	r2, [r3, #18]
}
 8014348:	371c      	adds	r7, #28
 801434a:	46bd      	mov	sp, r7
 801434c:	bd90      	pop	{r4, r7, pc}
 801434e:	bf00      	nop
 8014350:	080243a8 	.word	0x080243a8
 8014354:	08024418 	.word	0x08024418
 8014358:	080243f0 	.word	0x080243f0
 801435c:	08024424 	.word	0x08024424
 8014360:	20005280 	.word	0x20005280
 8014364:	20005288 	.word	0x20005288
 8014368:	20005284 	.word	0x20005284
 801436c:	08024430 	.word	0x08024430
 8014370:	08024444 	.word	0x08024444
 8014374:	0802444c 	.word	0x0802444c

08014378 <get_http_headers>:
 * Generate the relevant HTTP headers for the given filename and write
 * them into the supplied buffer.
 */
static void
get_http_headers(struct http_state *hs, const char *uri)
{
 8014378:	b580      	push	{r7, lr}
 801437a:	b086      	sub	sp, #24
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]
 8014380:	6039      	str	r1, [r7, #0]
  char *ext;
  char *vars;

  /* In all cases, the second header we send is the server identification
     so set it here. */
  hs->hdrs[HDR_STRINGS_IDX_SERVER_NAME] = g_psHTTPHeaderStrings[HTTP_HDR_SERVER];
 8014382:	4a55      	ldr	r2, [pc, #340]	; (80144d8 <get_http_headers+0x160>)
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = NULL;
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	2200      	movs	r2, #0
 801438e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = NULL;
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	2200      	movs	r2, #0
 8014396:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

  /* Is this a normal file or the special case we use to send back the
     default "404: Page not found" response? */
  if (uri == NULL) {
 801439a:	683b      	ldr	r3, [r7, #0]
 801439c:	2b00      	cmp	r3, #0
 801439e:	d110      	bne.n	80143c2 <get_http_headers+0x4a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 80143a0:	4a4e      	ldr	r2, [pc, #312]	; (80144dc <get_http_headers+0x164>)
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if (hs->keepalive) {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML_PERSISTENT];
    } else
#endif
    {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML];
 80143a8:	4a4d      	ldr	r2, [pc, #308]	; (80144e0 <get_http_headers+0x168>)
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    }

    /* Set up to send the first header string. */
    hs->hdr_index = 0;
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	2200      	movs	r2, #0
 80143b4:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    hs->hdr_pos = 0;
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	2200      	movs	r2, #0
 80143bc:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    return;
 80143c0:	e087      	b.n	80144d2 <get_http_headers+0x15a>
  }
  /* We are dealing with a particular filename. Look for one other
      special case.  We assume that any filename with "404" in it must be
      indicative of a 404 server error whereas all other files require
      the 200 OK header. */
  if (strstr(uri, "404")) {
 80143c2:	4948      	ldr	r1, [pc, #288]	; (80144e4 <get_http_headers+0x16c>)
 80143c4:	6838      	ldr	r0, [r7, #0]
 80143c6:	f00d fb0b 	bl	80219e0 <strstr>
 80143ca:	4603      	mov	r3, r0
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d004      	beq.n	80143da <get_http_headers+0x62>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 80143d0:	4a42      	ldr	r2, [pc, #264]	; (80144dc <get_http_headers+0x164>)
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80143d8:	e01b      	b.n	8014412 <get_http_headers+0x9a>
  } else if (strstr(uri, "400")) {
 80143da:	4943      	ldr	r1, [pc, #268]	; (80144e8 <get_http_headers+0x170>)
 80143dc:	6838      	ldr	r0, [r7, #0]
 80143de:	f00d faff 	bl	80219e0 <strstr>
 80143e2:	4603      	mov	r3, r0
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d004      	beq.n	80143f2 <get_http_headers+0x7a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_BAD_REQUEST];
 80143e8:	4a40      	ldr	r2, [pc, #256]	; (80144ec <get_http_headers+0x174>)
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80143f0:	e00f      	b.n	8014412 <get_http_headers+0x9a>
  } else if (strstr(uri, "501")) {
 80143f2:	493f      	ldr	r1, [pc, #252]	; (80144f0 <get_http_headers+0x178>)
 80143f4:	6838      	ldr	r0, [r7, #0]
 80143f6:	f00d faf3 	bl	80219e0 <strstr>
 80143fa:	4603      	mov	r3, r0
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d004      	beq.n	801440a <get_http_headers+0x92>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_IMPL];
 8014400:	4a3c      	ldr	r2, [pc, #240]	; (80144f4 <get_http_headers+0x17c>)
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8014408:	e003      	b.n	8014412 <get_http_headers+0x9a>
  } else {
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_OK];
 801440a:	4a3b      	ldr	r2, [pc, #236]	; (80144f8 <get_http_headers+0x180>)
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  /* Determine if the URI has any variables and, if so, temporarily remove
      them. */
  vars = strchr(uri, '?');
 8014412:	213f      	movs	r1, #63	; 0x3f
 8014414:	6838      	ldr	r0, [r7, #0]
 8014416:	f00d faa9 	bl	802196c <strchr>
 801441a:	60b8      	str	r0, [r7, #8]
  if (vars) {
 801441c:	68bb      	ldr	r3, [r7, #8]
 801441e:	2b00      	cmp	r3, #0
 8014420:	d002      	beq.n	8014428 <get_http_headers+0xb0>
    *vars = '\0';
 8014422:	68bb      	ldr	r3, [r7, #8]
 8014424:	2200      	movs	r2, #0
 8014426:	701a      	strb	r2, [r3, #0]
  }

  /* Get a pointer to the file extension.  We find this by looking for the
      last occurrence of "." in the filename passed. */
  ext = NULL;
 8014428:	2300      	movs	r3, #0
 801442a:	60fb      	str	r3, [r7, #12]
  tmp = strchr(uri, '.');
 801442c:	212e      	movs	r1, #46	; 0x2e
 801442e:	6838      	ldr	r0, [r7, #0]
 8014430:	f00d fa9c 	bl	802196c <strchr>
 8014434:	6138      	str	r0, [r7, #16]
  while (tmp) {
 8014436:	e007      	b.n	8014448 <get_http_headers+0xd0>
    ext = tmp + 1;
 8014438:	693b      	ldr	r3, [r7, #16]
 801443a:	3301      	adds	r3, #1
 801443c:	60fb      	str	r3, [r7, #12]
    tmp = strchr(ext, '.');
 801443e:	212e      	movs	r1, #46	; 0x2e
 8014440:	68f8      	ldr	r0, [r7, #12]
 8014442:	f00d fa93 	bl	802196c <strchr>
 8014446:	6138      	str	r0, [r7, #16]
  while (tmp) {
 8014448:	693b      	ldr	r3, [r7, #16]
 801444a:	2b00      	cmp	r3, #0
 801444c:	d1f4      	bne.n	8014438 <get_http_headers+0xc0>
  }
  if (ext != NULL) {
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	2b00      	cmp	r3, #0
 8014452:	d014      	beq.n	801447e <get_http_headers+0x106>
    /* Now determine the content type and add the relevant header for that. */
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 8014454:	2300      	movs	r3, #0
 8014456:	617b      	str	r3, [r7, #20]
 8014458:	e00d      	b.n	8014476 <get_http_headers+0xfe>
      /* Have we found a matching extension? */
      if (!lwip_stricmp(g_psHTTPHeaders[content_type].extension, ext)) {
 801445a:	4a28      	ldr	r2, [pc, #160]	; (80144fc <get_http_headers+0x184>)
 801445c:	697b      	ldr	r3, [r7, #20]
 801445e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014462:	68f9      	ldr	r1, [r7, #12]
 8014464:	4618      	mov	r0, r3
 8014466:	f001 fcd1 	bl	8015e0c <lwip_stricmp>
 801446a:	4603      	mov	r3, r0
 801446c:	2b00      	cmp	r3, #0
 801446e:	d009      	beq.n	8014484 <get_http_headers+0x10c>
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 8014470:	697b      	ldr	r3, [r7, #20]
 8014472:	3301      	adds	r3, #1
 8014474:	617b      	str	r3, [r7, #20]
 8014476:	697b      	ldr	r3, [r7, #20]
 8014478:	2b13      	cmp	r3, #19
 801447a:	d9ee      	bls.n	801445a <get_http_headers+0xe2>
 801447c:	e003      	b.n	8014486 <get_http_headers+0x10e>
        break;
      }
    }
  } else {
    content_type = NUM_HTTP_HEADERS;
 801447e:	2314      	movs	r3, #20
 8014480:	617b      	str	r3, [r7, #20]
 8014482:	e000      	b.n	8014486 <get_http_headers+0x10e>
        break;
 8014484:	bf00      	nop
  }

  /* Reinstate the parameter marker if there was one in the original URI. */
  if (vars) {
 8014486:	68bb      	ldr	r3, [r7, #8]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d002      	beq.n	8014492 <get_http_headers+0x11a>
    *vars = '?';
 801448c:	68bb      	ldr	r3, [r7, #8]
 801448e:	223f      	movs	r2, #63	; 0x3f
 8014490:	701a      	strb	r2, [r3, #0]
    hs->hdr_index = NUM_FILE_HDR_STRINGS;
    return;
  }
#endif /* LWIP_HTTPD_OMIT_HEADER_FOR_EXTENSIONLESS_URI */
  /* Did we find a matching extension? */
  if (content_type < NUM_HTTP_HEADERS) {
 8014492:	697b      	ldr	r3, [r7, #20]
 8014494:	2b13      	cmp	r3, #19
 8014496:	d808      	bhi.n	80144aa <get_http_headers+0x132>
    /* yes, store it */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaders[content_type].content_type;
 8014498:	4a18      	ldr	r2, [pc, #96]	; (80144fc <get_http_headers+0x184>)
 801449a:	697b      	ldr	r3, [r7, #20]
 801449c:	00db      	lsls	r3, r3, #3
 801449e:	4413      	add	r3, r2
 80144a0:	685a      	ldr	r2, [r3, #4]
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80144a8:	e00b      	b.n	80144c2 <get_http_headers+0x14a>
  } else if (!ext) {
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d104      	bne.n	80144ba <get_http_headers+0x142>
    /* no, no extension found -> use binary transfer to prevent the browser adding '.txt' on save */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_APP;
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	4a13      	ldr	r2, [pc, #76]	; (8014500 <get_http_headers+0x188>)
 80144b4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80144b8:	e003      	b.n	80144c2 <get_http_headers+0x14a>
  } else {
    /* No - use the default, plain text file type. */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_DEFAULT_TYPE;
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	4a11      	ldr	r2, [pc, #68]	; (8014504 <get_http_headers+0x18c>)
 80144be:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }
  /* Set up to send the first header string. */
  hs->hdr_index = 0;
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	2200      	movs	r2, #0
 80144c6:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
  hs->hdr_pos = 0;
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	2200      	movs	r2, #0
 80144ce:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
}
 80144d2:	3718      	adds	r7, #24
 80144d4:	46bd      	mov	sp, r7
 80144d6:	bd80      	pop	{r7, pc}
 80144d8:	08024028 	.word	0x08024028
 80144dc:	08023eec 	.word	0x08023eec
 80144e0:	08024068 	.word	0x08024068
 80144e4:	0802445c 	.word	0x0802445c
 80144e8:	08024460 	.word	0x08024460
 80144ec:	08023f0c 	.word	0x08023f0c
 80144f0:	08024464 	.word	0x08024464
 80144f4:	08023f28 	.word	0x08023f28
 80144f8:	08023ed8 	.word	0x08023ed8
 80144fc:	0802ad8c 	.word	0x0802ad8c
 8014500:	080241fc 	.word	0x080241fc
 8014504:	08024468 	.word	0x08024468

08014508 <get_http_content_length>:

/* Add content-length header? */
static void
get_http_content_length(struct http_state *hs)
{
 8014508:	b580      	push	{r7, lr}
 801450a:	b084      	sub	sp, #16
 801450c:	af00      	add	r7, sp, #0
 801450e:	6078      	str	r0, [r7, #4]
  u8_t add_content_len = 0;
 8014510:	2300      	movs	r3, #0
 8014512:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("already been here?", hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL);
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801451a:	2b00      	cmp	r3, #0
 801451c:	d006      	beq.n	801452c <get_http_content_length+0x24>
 801451e:	4b27      	ldr	r3, [pc, #156]	; (80145bc <get_http_content_length+0xb4>)
 8014520:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 8014524:	4926      	ldr	r1, [pc, #152]	; (80145c0 <get_http_content_length+0xb8>)
 8014526:	4827      	ldr	r0, [pc, #156]	; (80145c4 <get_http_content_length+0xbc>)
 8014528:	f00c fffc 	bl	8021524 <iprintf>

  add_content_len = 0;
 801452c:	2300      	movs	r3, #0
 801452e:	73fb      	strb	r3, [r7, #15]
#if LWIP_HTTPD_SSI
  if (hs->ssi == NULL) /* @todo: get maximum file length from SSI */
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014534:	2b00      	cmp	r3, #0
 8014536:	d10c      	bne.n	8014552 <get_http_content_length+0x4a>
#endif /* LWIP_HTTPD_SSI */
  {
    if ((hs->handle != NULL) && (hs->handle->flags & FS_FILE_FLAGS_HEADER_PERSISTENT)) {
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	695b      	ldr	r3, [r3, #20]
 801453c:	2b00      	cmp	r3, #0
 801453e:	d008      	beq.n	8014552 <get_http_content_length+0x4a>
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	695b      	ldr	r3, [r3, #20]
 8014544:	7c1b      	ldrb	r3, [r3, #16]
 8014546:	f003 0302 	and.w	r3, r3, #2
 801454a:	2b00      	cmp	r3, #0
 801454c:	d001      	beq.n	8014552 <get_http_content_length+0x4a>
      add_content_len = 1;
 801454e:	2301      	movs	r3, #1
 8014550:	73fb      	strb	r3, [r7, #15]
    }
  }
  if (add_content_len) {
 8014552:	7bfb      	ldrb	r3, [r7, #15]
 8014554:	2b00      	cmp	r3, #0
 8014556:	d025      	beq.n	80145a4 <get_http_content_length+0x9c>
    size_t len;
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
              hs->handle->len);
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	695b      	ldr	r3, [r3, #20]
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 8014562:	685b      	ldr	r3, [r3, #4]
 8014564:	461a      	mov	r2, r3
 8014566:	210c      	movs	r1, #12
 8014568:	f001 fc84 	bl	8015e74 <lwip_itoa>
    len = strlen(hs->hdr_content_len);
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	33c4      	adds	r3, #196	; 0xc4
 8014570:	4618      	mov	r0, r3
 8014572:	f7eb fe6f 	bl	8000254 <strlen>
 8014576:	60b8      	str	r0, [r7, #8]
    if (len <= LWIP_HTTPD_MAX_CONTENT_LEN_SIZE - LWIP_HTTPD_MAX_CONTENT_LEN_OFFSET) {
 8014578:	68bb      	ldr	r3, [r7, #8]
 801457a:	2b09      	cmp	r3, #9
 801457c:	d810      	bhi.n	80145a0 <get_http_content_length+0x98>
      SMEMCPY(&hs->hdr_content_len[len], CRLF, 3);
 801457e:	68bb      	ldr	r3, [r7, #8]
 8014580:	33c0      	adds	r3, #192	; 0xc0
 8014582:	687a      	ldr	r2, [r7, #4]
 8014584:	4413      	add	r3, r2
 8014586:	3304      	adds	r3, #4
 8014588:	2203      	movs	r2, #3
 801458a:	490f      	ldr	r1, [pc, #60]	; (80145c8 <get_http_content_length+0xc0>)
 801458c:	4618      	mov	r0, r3
 801458e:	f00c feef 	bl	8021370 <memcpy>
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = hs->hdr_content_len;
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 801459e:	e001      	b.n	80145a4 <get_http_content_length+0x9c>
    } else {
      add_content_len = 0;
 80145a0:	2300      	movs	r3, #0
 80145a2:	73fb      	strb	r3, [r7, #15]
  } else {
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONN_CLOSE];
    hs->keepalive = 0;
  }
#else /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  if (add_content_len) {
 80145a4:	7bfb      	ldrb	r3, [r7, #15]
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d003      	beq.n	80145b2 <get_http_content_length+0xaa>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONTENT_LENGTH];
 80145aa:	4a08      	ldr	r2, [pc, #32]	; (80145cc <get_http_content_length+0xc4>)
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
}
 80145b2:	bf00      	nop
 80145b4:	3710      	adds	r7, #16
 80145b6:	46bd      	mov	sp, r7
 80145b8:	bd80      	pop	{r7, pc}
 80145ba:	bf00      	nop
 80145bc:	080243a8 	.word	0x080243a8
 80145c0:	08024488 	.word	0x08024488
 80145c4:	080243f0 	.word	0x080243f0
 80145c8:	0802449c 	.word	0x0802449c
 80145cc:	08023fb8 	.word	0x08023fb8

080145d0 <http_send_headers>:
 *                                      so don't send HTTP body yet
 *           - HTTP_DATA_TO_SEND_FREED: http_state and pcb are already freed
 */
static u8_t
http_send_headers(struct altcp_pcb *pcb, struct http_state *hs)
{
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b088      	sub	sp, #32
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	6078      	str	r0, [r7, #4]
 80145d8:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 80145da:	2300      	movs	r3, #0
 80145dc:	777b      	strb	r3, [r7, #29]
  u16_t hdrlen, sendlen;

  if (hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL) {
 80145de:	683b      	ldr	r3, [r7, #0]
 80145e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d102      	bne.n	80145ee <http_send_headers+0x1e>
    /* set up "content-length" and "connection:" headers */
    get_http_content_length(hs);
 80145e8:	6838      	ldr	r0, [r7, #0]
 80145ea:	f7ff ff8d 	bl	8014508 <get_http_content_length>
  }

  /* How much data can we send? */
  len = altcp_sndbuf(pcb);
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80145f4:	83fb      	strh	r3, [r7, #30]
  sendlen = len;
 80145f6:	8bfb      	ldrh	r3, [r7, #30]
 80145f8:	81fb      	strh	r3, [r7, #14]

  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 80145fa:	e08b      	b.n	8014714 <http_send_headers+0x144>
    const void *ptr;
    u16_t old_sendlen;
    u8_t apiflags;
    /* How much do we have to send from the current header? */
    hdrlen = (u16_t)strlen(hs->hdrs[hs->hdr_index]);
 80145fc:	683b      	ldr	r3, [r7, #0]
 80145fe:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8014602:	461a      	mov	r2, r3
 8014604:	683b      	ldr	r3, [r7, #0]
 8014606:	322c      	adds	r2, #44	; 0x2c
 8014608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801460c:	4618      	mov	r0, r3
 801460e:	f7eb fe21 	bl	8000254 <strlen>
 8014612:	4603      	mov	r3, r0
 8014614:	837b      	strh	r3, [r7, #26]

    /* How much of this can we send? */
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 8014616:	8b7b      	ldrh	r3, [r7, #26]
 8014618:	683a      	ldr	r2, [r7, #0]
 801461a:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 801461e:	1a9a      	subs	r2, r3, r2
 8014620:	8bfb      	ldrh	r3, [r7, #30]
 8014622:	4293      	cmp	r3, r2
 8014624:	bfa8      	it	ge
 8014626:	4613      	movge	r3, r2
 8014628:	b29b      	uxth	r3, r3
 801462a:	81fb      	strh	r3, [r7, #14]

    /* Send this amount of data or as much as we can given memory
     * constraints. */
    ptr = (const void *)(hs->hdrs[hs->hdr_index] + hs->hdr_pos);
 801462c:	683b      	ldr	r3, [r7, #0]
 801462e:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8014632:	461a      	mov	r2, r3
 8014634:	683b      	ldr	r3, [r7, #0]
 8014636:	322c      	adds	r2, #44	; 0x2c
 8014638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801463c:	683a      	ldr	r2, [r7, #0]
 801463e:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 8014642:	4413      	add	r3, r2
 8014644:	617b      	str	r3, [r7, #20]
    old_sendlen = sendlen;
 8014646:	89fb      	ldrh	r3, [r7, #14]
 8014648:	827b      	strh	r3, [r7, #18]
    apiflags = HTTP_IS_HDR_VOLATILE(hs, ptr);
 801464a:	2300      	movs	r3, #0
 801464c:	773b      	strb	r3, [r7, #28]
    if (hs->hdr_index == HDR_STRINGS_IDX_CONTENT_LEN_NR) {
 801464e:	683b      	ldr	r3, [r7, #0]
 8014650:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8014654:	2b03      	cmp	r3, #3
 8014656:	d103      	bne.n	8014660 <http_send_headers+0x90>
      /* content-length is always volatile */
      apiflags |= TCP_WRITE_FLAG_COPY;
 8014658:	7f3b      	ldrb	r3, [r7, #28]
 801465a:	f043 0301 	orr.w	r3, r3, #1
 801465e:	773b      	strb	r3, [r7, #28]
    }
    if (hs->hdr_index < NUM_FILE_HDR_STRINGS - 1) {
 8014660:	683b      	ldr	r3, [r7, #0]
 8014662:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8014666:	2b03      	cmp	r3, #3
 8014668:	d803      	bhi.n	8014672 <http_send_headers+0xa2>
      apiflags |= TCP_WRITE_FLAG_MORE;
 801466a:	7f3b      	ldrb	r3, [r7, #28]
 801466c:	f043 0302 	orr.w	r3, r3, #2
 8014670:	773b      	strb	r3, [r7, #28]
    }
    err = http_write(pcb, ptr, &sendlen, apiflags);
 8014672:	7f3b      	ldrb	r3, [r7, #28]
 8014674:	f107 020e 	add.w	r2, r7, #14
 8014678:	6979      	ldr	r1, [r7, #20]
 801467a:	6878      	ldr	r0, [r7, #4]
 801467c:	f7ff fc74 	bl	8013f68 <http_write>
 8014680:	4603      	mov	r3, r0
 8014682:	747b      	strb	r3, [r7, #17]
    if ((err == ERR_OK) && (old_sendlen != sendlen)) {
 8014684:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8014688:	2b00      	cmp	r3, #0
 801468a:	d106      	bne.n	801469a <http_send_headers+0xca>
 801468c:	89fb      	ldrh	r3, [r7, #14]
 801468e:	8a7a      	ldrh	r2, [r7, #18]
 8014690:	429a      	cmp	r2, r3
 8014692:	d002      	beq.n	801469a <http_send_headers+0xca>
      /* Remember that we added some more data to be transmitted. */
      data_to_send = HTTP_DATA_TO_SEND_CONTINUE;
 8014694:	2301      	movs	r3, #1
 8014696:	777b      	strb	r3, [r7, #29]
 8014698:	e005      	b.n	80146a6 <http_send_headers+0xd6>
    } else if (err != ERR_OK) {
 801469a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d001      	beq.n	80146a6 <http_send_headers+0xd6>
      /* special case: http_write does not try to send 1 byte */
      sendlen = 0;
 80146a2:	2300      	movs	r3, #0
 80146a4:	81fb      	strh	r3, [r7, #14]
    }

    /* Fix up the header position for the next time round. */
    hs->hdr_pos += sendlen;
 80146a6:	683b      	ldr	r3, [r7, #0]
 80146a8:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 80146ac:	89fb      	ldrh	r3, [r7, #14]
 80146ae:	4413      	add	r3, r2
 80146b0:	b29a      	uxth	r2, r3
 80146b2:	683b      	ldr	r3, [r7, #0]
 80146b4:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    len -= sendlen;
 80146b8:	89fb      	ldrh	r3, [r7, #14]
 80146ba:	8bfa      	ldrh	r2, [r7, #30]
 80146bc:	1ad3      	subs	r3, r2, r3
 80146be:	83fb      	strh	r3, [r7, #30]

    /* Have we finished sending this string? */
    if (hs->hdr_pos == hdrlen) {
 80146c0:	683b      	ldr	r3, [r7, #0]
 80146c2:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 80146c6:	8b7a      	ldrh	r2, [r7, #26]
 80146c8:	429a      	cmp	r2, r3
 80146ca:	d123      	bne.n	8014714 <http_send_headers+0x144>
      /* Yes - move on to the next one */
      hs->hdr_index++;
 80146cc:	683b      	ldr	r3, [r7, #0]
 80146ce:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80146d2:	3301      	adds	r3, #1
 80146d4:	b29a      	uxth	r2, r3
 80146d6:	683b      	ldr	r3, [r7, #0]
 80146d8:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      /* skip headers that are NULL (not all headers are required) */
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 80146dc:	e007      	b.n	80146ee <http_send_headers+0x11e>
             (hs->hdrs[hs->hdr_index] == NULL)) {
        hs->hdr_index++;
 80146de:	683b      	ldr	r3, [r7, #0]
 80146e0:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80146e4:	3301      	adds	r3, #1
 80146e6:	b29a      	uxth	r2, r3
 80146e8:	683b      	ldr	r3, [r7, #0]
 80146ea:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 80146ee:	683b      	ldr	r3, [r7, #0]
 80146f0:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80146f4:	2b04      	cmp	r3, #4
 80146f6:	d809      	bhi.n	801470c <http_send_headers+0x13c>
             (hs->hdrs[hs->hdr_index] == NULL)) {
 80146f8:	683b      	ldr	r3, [r7, #0]
 80146fa:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80146fe:	461a      	mov	r2, r3
 8014700:	683b      	ldr	r3, [r7, #0]
 8014702:	322c      	adds	r2, #44	; 0x2c
 8014704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 8014708:	2b00      	cmp	r3, #0
 801470a:	d0e8      	beq.n	80146de <http_send_headers+0x10e>
      }
      hs->hdr_pos = 0;
 801470c:	683b      	ldr	r3, [r7, #0]
 801470e:	2200      	movs	r2, #0
 8014710:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 8014714:	8bfb      	ldrh	r3, [r7, #30]
 8014716:	2b00      	cmp	r3, #0
 8014718:	d008      	beq.n	801472c <http_send_headers+0x15c>
 801471a:	683b      	ldr	r3, [r7, #0]
 801471c:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8014720:	2b04      	cmp	r3, #4
 8014722:	d803      	bhi.n	801472c <http_send_headers+0x15c>
 8014724:	89fb      	ldrh	r3, [r7, #14]
 8014726:	2b00      	cmp	r3, #0
 8014728:	f47f af68 	bne.w	80145fc <http_send_headers+0x2c>
    }
  }

  if ((hs->hdr_index >= NUM_FILE_HDR_STRINGS) && (hs->file == NULL)) {
 801472c:	683b      	ldr	r3, [r7, #0]
 801472e:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8014732:	2b04      	cmp	r3, #4
 8014734:	d90f      	bls.n	8014756 <http_send_headers+0x186>
 8014736:	683b      	ldr	r3, [r7, #0]
 8014738:	699b      	ldr	r3, [r3, #24]
 801473a:	2b00      	cmp	r3, #0
 801473c:	d10b      	bne.n	8014756 <http_send_headers+0x186>
    /* When we are at the end of the headers, check for data to send
     * instead of waiting for ACK from remote side to continue
     * (which would happen when sending files from async read). */
    if (http_check_eof(pcb, hs)) {
 801473e:	6839      	ldr	r1, [r7, #0]
 8014740:	6878      	ldr	r0, [r7, #4]
 8014742:	f000 f819 	bl	8014778 <http_check_eof>
 8014746:	4603      	mov	r3, r0
 8014748:	2b00      	cmp	r3, #0
 801474a:	d002      	beq.n	8014752 <http_send_headers+0x182>
      data_to_send = HTTP_DATA_TO_SEND_BREAK;
 801474c:	2302      	movs	r3, #2
 801474e:	777b      	strb	r3, [r7, #29]
 8014750:	e001      	b.n	8014756 <http_send_headers+0x186>
    } else {
      /* At this point, for non-keepalive connections, hs is deallocated an
         pcb is closed. */
      return HTTP_DATA_TO_SEND_FREED;
 8014752:	2303      	movs	r3, #3
 8014754:	e00b      	b.n	801476e <http_send_headers+0x19e>
  }
  /* If we get here and there are still header bytes to send, we send
   * the header information we just wrote immediately. If there are no
   * more headers to send, but we do have file data to send, drop through
   * to try to send some file data too. */
  if ((hs->hdr_index < NUM_FILE_HDR_STRINGS) || !hs->file) {
 8014756:	683b      	ldr	r3, [r7, #0]
 8014758:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 801475c:	2b04      	cmp	r3, #4
 801475e:	d903      	bls.n	8014768 <http_send_headers+0x198>
 8014760:	683b      	ldr	r3, [r7, #0]
 8014762:	699b      	ldr	r3, [r3, #24]
 8014764:	2b00      	cmp	r3, #0
 8014766:	d101      	bne.n	801476c <http_send_headers+0x19c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("tcp_output\n"));
    return HTTP_DATA_TO_SEND_BREAK;
 8014768:	2302      	movs	r3, #2
 801476a:	e000      	b.n	801476e <http_send_headers+0x19e>
  }
  return data_to_send;
 801476c:	7f7b      	ldrb	r3, [r7, #29]
}
 801476e:	4618      	mov	r0, r3
 8014770:	3720      	adds	r7, #32
 8014772:	46bd      	mov	sp, r7
 8014774:	bd80      	pop	{r7, pc}
	...

08014778 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8014778:	b580      	push	{r7, lr}
 801477a:	b084      	sub	sp, #16
 801477c:	af00      	add	r7, sp, #0
 801477e:	6078      	str	r0, [r7, #4]
 8014780:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8014782:	683b      	ldr	r3, [r7, #0]
 8014784:	695b      	ldr	r3, [r3, #20]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d105      	bne.n	8014796 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 801478a:	6839      	ldr	r1, [r7, #0]
 801478c:	6878      	ldr	r0, [r7, #4]
 801478e:	f7ff fcb6 	bl	80140fe <http_eof>
    return 0;
 8014792:	2300      	movs	r3, #0
 8014794:	e016      	b.n	80147c4 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8014796:	683b      	ldr	r3, [r7, #0]
 8014798:	695b      	ldr	r3, [r3, #20]
 801479a:	4618      	mov	r0, r3
 801479c:	f7ff fb50 	bl	8013e40 <fs_bytes_left>
 80147a0:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	dc05      	bgt.n	80147b4 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 80147a8:	6839      	ldr	r1, [r7, #0]
 80147aa:	6878      	ldr	r0, [r7, #4]
 80147ac:	f7ff fca7 	bl	80140fe <http_eof>
    return 0;
 80147b0:	2300      	movs	r3, #0
 80147b2:	e007      	b.n	80147c4 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 80147b4:	4b05      	ldr	r3, [pc, #20]	; (80147cc <http_check_eof+0x54>)
 80147b6:	f240 429d 	movw	r2, #1181	; 0x49d
 80147ba:	4905      	ldr	r1, [pc, #20]	; (80147d0 <http_check_eof+0x58>)
 80147bc:	4805      	ldr	r0, [pc, #20]	; (80147d4 <http_check_eof+0x5c>)
 80147be:	f00c feb1 	bl	8021524 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 80147c2:	2301      	movs	r3, #1
}
 80147c4:	4618      	mov	r0, r3
 80147c6:	3710      	adds	r7, #16
 80147c8:	46bd      	mov	sp, r7
 80147ca:	bd80      	pop	{r7, pc}
 80147cc:	080243a8 	.word	0x080243a8
 80147d0:	080244a0 	.word	0x080244a0
 80147d4:	080243f0 	.word	0x080243f0

080147d8 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 80147d8:	b580      	push	{r7, lr}
 80147da:	b084      	sub	sp, #16
 80147dc:	af00      	add	r7, sp, #0
 80147de:	6078      	str	r0, [r7, #4]
 80147e0:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 80147e2:	2300      	movs	r3, #0
 80147e4:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80147e6:	683b      	ldr	r3, [r7, #0]
 80147e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80147ee:	4293      	cmp	r3, r2
 80147f0:	d803      	bhi.n	80147fa <http_send_data_nonssi+0x22>
 80147f2:	683b      	ldr	r3, [r7, #0]
 80147f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147f6:	b29b      	uxth	r3, r3
 80147f8:	e001      	b.n	80147fe <http_send_data_nonssi+0x26>
 80147fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80147fe:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8014800:	683b      	ldr	r3, [r7, #0]
 8014802:	6999      	ldr	r1, [r3, #24]
 8014804:	f107 020c 	add.w	r2, r7, #12
 8014808:	2300      	movs	r3, #0
 801480a:	6878      	ldr	r0, [r7, #4]
 801480c:	f7ff fbac 	bl	8013f68 <http_write>
 8014810:	4603      	mov	r3, r0
 8014812:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8014814:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d10d      	bne.n	8014838 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 801481c:	2301      	movs	r3, #1
 801481e:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8014820:	683b      	ldr	r3, [r7, #0]
 8014822:	699b      	ldr	r3, [r3, #24]
 8014824:	89ba      	ldrh	r2, [r7, #12]
 8014826:	441a      	add	r2, r3
 8014828:	683b      	ldr	r3, [r7, #0]
 801482a:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 801482c:	683b      	ldr	r3, [r7, #0]
 801482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014830:	89ba      	ldrh	r2, [r7, #12]
 8014832:	1a9a      	subs	r2, r3, r2
 8014834:	683b      	ldr	r3, [r7, #0]
 8014836:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8014838:	7bfb      	ldrb	r3, [r7, #15]
}
 801483a:	4618      	mov	r0, r3
 801483c:	3710      	adds	r7, #16
 801483e:	46bd      	mov	sp, r7
 8014840:	bd80      	pop	{r7, pc}
	...

08014844 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8014844:	b580      	push	{r7, lr}
 8014846:	b086      	sub	sp, #24
 8014848:	af00      	add	r7, sp, #0
 801484a:	6078      	str	r0, [r7, #4]
 801484c:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 801484e:	2300      	movs	r3, #0
 8014850:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 8014852:	2300      	movs	r3, #0
 8014854:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 8014856:	683b      	ldr	r3, [r7, #0]
 8014858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801485a:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 801485c:	693b      	ldr	r3, [r7, #16]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d106      	bne.n	8014870 <http_send_data_ssi+0x2c>
 8014862:	4b89      	ldr	r3, [pc, #548]	; (8014a88 <http_send_data_ssi+0x244>)
 8014864:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8014868:	4988      	ldr	r1, [pc, #544]	; (8014a8c <http_send_data_ssi+0x248>)
 801486a:	4889      	ldr	r0, [pc, #548]	; (8014a90 <http_send_data_ssi+0x24c>)
 801486c:	f00c fe5a 	bl	8021524 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014876:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 8014878:	693b      	ldr	r3, [r7, #16]
 801487a:	681a      	ldr	r2, [r3, #0]
 801487c:	683b      	ldr	r3, [r7, #0]
 801487e:	699b      	ldr	r3, [r3, #24]
 8014880:	429a      	cmp	r2, r3
 8014882:	f240 82c5 	bls.w	8014e10 <http_send_data_ssi+0x5cc>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8014886:	693b      	ldr	r3, [r7, #16]
 8014888:	681a      	ldr	r2, [r3, #0]
 801488a:	683b      	ldr	r3, [r7, #0]
 801488c:	699b      	ldr	r3, [r3, #24]
 801488e:	1ad3      	subs	r3, r2, r3
 8014890:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014894:	4293      	cmp	r3, r2
 8014896:	dc06      	bgt.n	80148a6 <http_send_data_ssi+0x62>
 8014898:	693b      	ldr	r3, [r7, #16]
 801489a:	681a      	ldr	r2, [r3, #0]
 801489c:	683b      	ldr	r3, [r7, #0]
 801489e:	699b      	ldr	r3, [r3, #24]
 80148a0:	1ad3      	subs	r3, r2, r3
 80148a2:	b29b      	uxth	r3, r3
 80148a4:	e001      	b.n	80148aa <http_send_data_ssi+0x66>
 80148a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80148aa:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80148ac:	683b      	ldr	r3, [r7, #0]
 80148ae:	6999      	ldr	r1, [r3, #24]
 80148b0:	f107 020e 	add.w	r2, r7, #14
 80148b4:	2300      	movs	r3, #0
 80148b6:	6878      	ldr	r0, [r7, #4]
 80148b8:	f7ff fb56 	bl	8013f68 <http_write>
 80148bc:	4603      	mov	r3, r0
 80148be:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 80148c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80148c4:	2b00      	cmp	r3, #0
 80148c6:	d10d      	bne.n	80148e4 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 80148c8:	2301      	movs	r3, #1
 80148ca:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 80148cc:	683b      	ldr	r3, [r7, #0]
 80148ce:	699b      	ldr	r3, [r3, #24]
 80148d0:	89fa      	ldrh	r2, [r7, #14]
 80148d2:	441a      	add	r2, r3
 80148d4:	683b      	ldr	r3, [r7, #0]
 80148d6:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 80148d8:	683b      	ldr	r3, [r7, #0]
 80148da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148dc:	89fa      	ldrh	r2, [r7, #14]
 80148de:	1a9a      	subs	r2, r3, r2
 80148e0:	683b      	ldr	r3, [r7, #0]
 80148e2:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	f040 8290 	bne.w	8014e10 <http_send_data_ssi+0x5cc>
      return data_to_send;
 80148f0:	7dbb      	ldrb	r3, [r7, #22]
 80148f2:	e2d6      	b.n	8014ea2 <http_send_data_ssi+0x65e>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 80148f4:	89fb      	ldrh	r3, [r7, #14]
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d101      	bne.n	80148fe <http_send_data_ssi+0xba>
      return data_to_send;
 80148fa:	7dbb      	ldrb	r3, [r7, #22]
 80148fc:	e2d1      	b.n	8014ea2 <http_send_data_ssi+0x65e>
    }
    switch (ssi->tag_state) {
 80148fe:	693b      	ldr	r3, [r7, #16]
 8014900:	f893 3422 	ldrb.w	r3, [r3, #1058]	; 0x422
 8014904:	2b04      	cmp	r3, #4
 8014906:	f200 8282 	bhi.w	8014e0e <http_send_data_ssi+0x5ca>
 801490a:	a201      	add	r2, pc, #4	; (adr r2, 8014910 <http_send_data_ssi+0xcc>)
 801490c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014910:	08014925 	.word	0x08014925
 8014914:	0801497f 	.word	0x0801497f
 8014918:	080149f1 	.word	0x080149f1
 801491c:	08014b39 	.word	0x08014b39
 8014920:	08014caf 	.word	0x08014caf
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8014924:	2300      	movs	r3, #0
 8014926:	757b      	strb	r3, [r7, #21]
 8014928:	e01b      	b.n	8014962 <http_send_data_ssi+0x11e>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 801492a:	693b      	ldr	r3, [r7, #16]
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	781a      	ldrb	r2, [r3, #0]
 8014930:	7d7b      	ldrb	r3, [r7, #21]
 8014932:	4958      	ldr	r1, [pc, #352]	; (8014a94 <http_send_data_ssi+0x250>)
 8014934:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8014938:	781b      	ldrb	r3, [r3, #0]
 801493a:	429a      	cmp	r2, r3
 801493c:	d10e      	bne.n	801495c <http_send_data_ssi+0x118>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 801493e:	693b      	ldr	r3, [r7, #16]
 8014940:	7d7a      	ldrb	r2, [r7, #21]
 8014942:	759a      	strb	r2, [r3, #22]
            ssi->tag_state = TAG_LEADIN;
 8014944:	693b      	ldr	r3, [r7, #16]
 8014946:	2201      	movs	r2, #1
 8014948:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
            ssi->tag_index = 1;
 801494c:	693b      	ldr	r3, [r7, #16]
 801494e:	2201      	movs	r2, #1
 8014950:	821a      	strh	r2, [r3, #16]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
 8014952:	693b      	ldr	r3, [r7, #16]
 8014954:	681a      	ldr	r2, [r3, #0]
 8014956:	693b      	ldr	r3, [r7, #16]
 8014958:	605a      	str	r2, [r3, #4]
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 801495a:	e005      	b.n	8014968 <http_send_data_ssi+0x124>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 801495c:	7d7b      	ldrb	r3, [r7, #21]
 801495e:	3301      	adds	r3, #1
 8014960:	757b      	strb	r3, [r7, #21]
 8014962:	7d7b      	ldrb	r3, [r7, #21]
 8014964:	2b01      	cmp	r3, #1
 8014966:	d9e0      	bls.n	801492a <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8014968:	693b      	ldr	r3, [r7, #16]
 801496a:	68db      	ldr	r3, [r3, #12]
 801496c:	1e5a      	subs	r2, r3, #1
 801496e:	693b      	ldr	r3, [r7, #16]
 8014970:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 8014972:	693b      	ldr	r3, [r7, #16]
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	1c5a      	adds	r2, r3, #1
 8014978:	693b      	ldr	r3, [r7, #16]
 801497a:	601a      	str	r2, [r3, #0]
        break;
 801497c:	e248      	b.n	8014e10 <http_send_data_ssi+0x5cc>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 801497e:	693b      	ldr	r3, [r7, #16]
 8014980:	7d9b      	ldrb	r3, [r3, #22]
 8014982:	461a      	mov	r2, r3
 8014984:	4b43      	ldr	r3, [pc, #268]	; (8014a94 <http_send_data_ssi+0x250>)
 8014986:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 801498a:	693a      	ldr	r2, [r7, #16]
 801498c:	8a12      	ldrh	r2, [r2, #16]
 801498e:	4413      	add	r3, r2
 8014990:	781b      	ldrb	r3, [r3, #0]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d107      	bne.n	80149a6 <http_send_data_ssi+0x162>
          ssi->tag_index = 0;
 8014996:	693b      	ldr	r3, [r7, #16]
 8014998:	2200      	movs	r2, #0
 801499a:	821a      	strh	r2, [r3, #16]
          ssi->tag_state = TAG_FOUND;
 801499c:	693b      	ldr	r3, [r7, #16]
 801499e:	2202      	movs	r2, #2
 80149a0:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
 80149a4:	e234      	b.n	8014e10 <http_send_data_ssi+0x5cc>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 80149a6:	693b      	ldr	r3, [r7, #16]
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	781a      	ldrb	r2, [r3, #0]
 80149ac:	693b      	ldr	r3, [r7, #16]
 80149ae:	7d9b      	ldrb	r3, [r3, #22]
 80149b0:	4619      	mov	r1, r3
 80149b2:	4b38      	ldr	r3, [pc, #224]	; (8014a94 <http_send_data_ssi+0x250>)
 80149b4:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 80149b8:	6939      	ldr	r1, [r7, #16]
 80149ba:	8a09      	ldrh	r1, [r1, #16]
 80149bc:	440b      	add	r3, r1
 80149be:	781b      	ldrb	r3, [r3, #0]
 80149c0:	429a      	cmp	r2, r3
 80149c2:	d106      	bne.n	80149d2 <http_send_data_ssi+0x18e>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 80149c4:	693b      	ldr	r3, [r7, #16]
 80149c6:	8a1b      	ldrh	r3, [r3, #16]
 80149c8:	3301      	adds	r3, #1
 80149ca:	b29a      	uxth	r2, r3
 80149cc:	693b      	ldr	r3, [r7, #16]
 80149ce:	821a      	strh	r2, [r3, #16]
 80149d0:	e003      	b.n	80149da <http_send_data_ssi+0x196>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 80149d2:	693b      	ldr	r3, [r7, #16]
 80149d4:	2200      	movs	r2, #0
 80149d6:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 80149da:	693b      	ldr	r3, [r7, #16]
 80149dc:	68db      	ldr	r3, [r3, #12]
 80149de:	1e5a      	subs	r2, r3, #1
 80149e0:	693b      	ldr	r3, [r7, #16]
 80149e2:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 80149e4:	693b      	ldr	r3, [r7, #16]
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	1c5a      	adds	r2, r3, #1
 80149ea:	693b      	ldr	r3, [r7, #16]
 80149ec:	601a      	str	r2, [r3, #0]
        }
        break;
 80149ee:	e20f      	b.n	8014e10 <http_send_data_ssi+0x5cc>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80149f0:	693b      	ldr	r3, [r7, #16]
 80149f2:	8a1b      	ldrh	r3, [r3, #16]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d11e      	bne.n	8014a36 <http_send_data_ssi+0x1f2>
 80149f8:	693b      	ldr	r3, [r7, #16]
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	781b      	ldrb	r3, [r3, #0]
 80149fe:	2b20      	cmp	r3, #32
 8014a00:	d00e      	beq.n	8014a20 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8014a02:	693b      	ldr	r3, [r7, #16]
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8014a08:	2b09      	cmp	r3, #9
 8014a0a:	d009      	beq.n	8014a20 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8014a0c:	693b      	ldr	r3, [r7, #16]
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	781b      	ldrb	r3, [r3, #0]
 8014a12:	2b0a      	cmp	r3, #10
 8014a14:	d004      	beq.n	8014a20 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\r'))) {
 8014a16:	693b      	ldr	r3, [r7, #16]
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8014a1c:	2b0d      	cmp	r3, #13
 8014a1e:	d10a      	bne.n	8014a36 <http_send_data_ssi+0x1f2>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8014a20:	693b      	ldr	r3, [r7, #16]
 8014a22:	68db      	ldr	r3, [r3, #12]
 8014a24:	1e5a      	subs	r2, r3, #1
 8014a26:	693b      	ldr	r3, [r7, #16]
 8014a28:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 8014a2a:	693b      	ldr	r3, [r7, #16]
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	1c5a      	adds	r2, r3, #1
 8014a30:	693b      	ldr	r3, [r7, #16]
 8014a32:	601a      	str	r2, [r3, #0]
          break;
 8014a34:	e1ec      	b.n	8014e10 <http_send_data_ssi+0x5cc>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8014a36:	693b      	ldr	r3, [r7, #16]
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	781a      	ldrb	r2, [r3, #0]
 8014a3c:	693b      	ldr	r3, [r7, #16]
 8014a3e:	7d9b      	ldrb	r3, [r3, #22]
 8014a40:	4914      	ldr	r1, [pc, #80]	; (8014a94 <http_send_data_ssi+0x250>)
 8014a42:	00db      	lsls	r3, r3, #3
 8014a44:	440b      	add	r3, r1
 8014a46:	685b      	ldr	r3, [r3, #4]
 8014a48:	781b      	ldrb	r3, [r3, #0]
 8014a4a:	429a      	cmp	r2, r3
 8014a4c:	d013      	beq.n	8014a76 <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8014a4e:	693b      	ldr	r3, [r7, #16]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8014a54:	2b20      	cmp	r3, #32
 8014a56:	d00e      	beq.n	8014a76 <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8014a58:	693b      	ldr	r3, [r7, #16]
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	781b      	ldrb	r3, [r3, #0]
 8014a5e:	2b09      	cmp	r3, #9
 8014a60:	d009      	beq.n	8014a76 <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8014a62:	693b      	ldr	r3, [r7, #16]
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8014a68:	2b0a      	cmp	r3, #10
 8014a6a:	d004      	beq.n	8014a76 <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8014a6c:	693b      	ldr	r3, [r7, #16]
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	781b      	ldrb	r3, [r3, #0]
 8014a72:	2b0d      	cmp	r3, #13
 8014a74:	d13f      	bne.n	8014af6 <http_send_data_ssi+0x2b2>

          if (ssi->tag_index == 0) {
 8014a76:	693b      	ldr	r3, [r7, #16]
 8014a78:	8a1b      	ldrh	r3, [r3, #16]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d10c      	bne.n	8014a98 <http_send_data_ssi+0x254>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 8014a7e:	693b      	ldr	r3, [r7, #16]
 8014a80:	2200      	movs	r2, #0
 8014a82:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
          if (ssi->tag_index == 0) {
 8014a86:	e04c      	b.n	8014b22 <http_send_data_ssi+0x2de>
 8014a88:	080243a8 	.word	0x080243a8
 8014a8c:	08024424 	.word	0x08024424
 8014a90:	080243f0 	.word	0x080243f0
 8014a94:	0802ae68 	.word	0x0802ae68
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 8014a98:	693b      	ldr	r3, [r7, #16]
 8014a9a:	2203      	movs	r2, #3
 8014a9c:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8014aa0:	693b      	ldr	r3, [r7, #16]
 8014aa2:	8a1b      	ldrh	r3, [r3, #16]
 8014aa4:	2bff      	cmp	r3, #255	; 0xff
 8014aa6:	d906      	bls.n	8014ab6 <http_send_data_ssi+0x272>
 8014aa8:	4b92      	ldr	r3, [pc, #584]	; (8014cf4 <http_send_data_ssi+0x4b0>)
 8014aaa:	f240 523a 	movw	r2, #1338	; 0x53a
 8014aae:	4992      	ldr	r1, [pc, #584]	; (8014cf8 <http_send_data_ssi+0x4b4>)
 8014ab0:	4892      	ldr	r0, [pc, #584]	; (8014cfc <http_send_data_ssi+0x4b8>)
 8014ab2:	f00c fd37 	bl	8021524 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8014ab6:	693b      	ldr	r3, [r7, #16]
 8014ab8:	8a1b      	ldrh	r3, [r3, #16]
 8014aba:	b2da      	uxtb	r2, r3
 8014abc:	693b      	ldr	r3, [r7, #16]
 8014abe:	75da      	strb	r2, [r3, #23]
            ssi->tag_name[ssi->tag_index] = '\0';
 8014ac0:	693b      	ldr	r3, [r7, #16]
 8014ac2:	8a1b      	ldrh	r3, [r3, #16]
 8014ac4:	461a      	mov	r2, r3
 8014ac6:	693b      	ldr	r3, [r7, #16]
 8014ac8:	4413      	add	r3, r2
 8014aca:	2200      	movs	r2, #0
 8014acc:	761a      	strb	r2, [r3, #24]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8014ace:	693b      	ldr	r3, [r7, #16]
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	781a      	ldrb	r2, [r3, #0]
 8014ad4:	693b      	ldr	r3, [r7, #16]
 8014ad6:	7d9b      	ldrb	r3, [r3, #22]
 8014ad8:	4989      	ldr	r1, [pc, #548]	; (8014d00 <http_send_data_ssi+0x4bc>)
 8014ada:	00db      	lsls	r3, r3, #3
 8014adc:	440b      	add	r3, r1
 8014ade:	685b      	ldr	r3, [r3, #4]
 8014ae0:	781b      	ldrb	r3, [r3, #0]
 8014ae2:	429a      	cmp	r2, r3
 8014ae4:	d103      	bne.n	8014aee <http_send_data_ssi+0x2aa>
              ssi->tag_index = 1;
 8014ae6:	693b      	ldr	r3, [r7, #16]
 8014ae8:	2201      	movs	r2, #1
 8014aea:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 8014aec:	e019      	b.n	8014b22 <http_send_data_ssi+0x2de>
            } else {
              ssi->tag_index = 0;
 8014aee:	693b      	ldr	r3, [r7, #16]
 8014af0:	2200      	movs	r2, #0
 8014af2:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 8014af4:	e015      	b.n	8014b22 <http_send_data_ssi+0x2de>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8014af6:	693b      	ldr	r3, [r7, #16]
 8014af8:	8a1b      	ldrh	r3, [r3, #16]
 8014afa:	2b07      	cmp	r3, #7
 8014afc:	d80d      	bhi.n	8014b1a <http_send_data_ssi+0x2d6>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8014afe:	693b      	ldr	r3, [r7, #16]
 8014b00:	681a      	ldr	r2, [r3, #0]
 8014b02:	693b      	ldr	r3, [r7, #16]
 8014b04:	8a1b      	ldrh	r3, [r3, #16]
 8014b06:	1c59      	adds	r1, r3, #1
 8014b08:	b288      	uxth	r0, r1
 8014b0a:	6939      	ldr	r1, [r7, #16]
 8014b0c:	8208      	strh	r0, [r1, #16]
 8014b0e:	4619      	mov	r1, r3
 8014b10:	7812      	ldrb	r2, [r2, #0]
 8014b12:	693b      	ldr	r3, [r7, #16]
 8014b14:	440b      	add	r3, r1
 8014b16:	761a      	strb	r2, [r3, #24]
 8014b18:	e003      	b.n	8014b22 <http_send_data_ssi+0x2de>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 8014b1a:	693b      	ldr	r3, [r7, #16]
 8014b1c:	2200      	movs	r2, #0
 8014b1e:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8014b22:	693b      	ldr	r3, [r7, #16]
 8014b24:	68db      	ldr	r3, [r3, #12]
 8014b26:	1e5a      	subs	r2, r3, #1
 8014b28:	693b      	ldr	r3, [r7, #16]
 8014b2a:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 8014b2c:	693b      	ldr	r3, [r7, #16]
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	1c5a      	adds	r2, r3, #1
 8014b32:	693b      	ldr	r3, [r7, #16]
 8014b34:	601a      	str	r2, [r3, #0]

        break;
 8014b36:	e16b      	b.n	8014e10 <http_send_data_ssi+0x5cc>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8014b38:	693b      	ldr	r3, [r7, #16]
 8014b3a:	8a1b      	ldrh	r3, [r3, #16]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d11e      	bne.n	8014b7e <http_send_data_ssi+0x33a>
 8014b40:	693b      	ldr	r3, [r7, #16]
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	781b      	ldrb	r3, [r3, #0]
 8014b46:	2b20      	cmp	r3, #32
 8014b48:	d00e      	beq.n	8014b68 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8014b4a:	693b      	ldr	r3, [r7, #16]
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8014b50:	2b09      	cmp	r3, #9
 8014b52:	d009      	beq.n	8014b68 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8014b54:	693b      	ldr	r3, [r7, #16]
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	781b      	ldrb	r3, [r3, #0]
 8014b5a:	2b0a      	cmp	r3, #10
 8014b5c:	d004      	beq.n	8014b68 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\r'))) {
 8014b5e:	693b      	ldr	r3, [r7, #16]
 8014b60:	681b      	ldr	r3, [r3, #0]
 8014b62:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8014b64:	2b0d      	cmp	r3, #13
 8014b66:	d10a      	bne.n	8014b7e <http_send_data_ssi+0x33a>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8014b68:	693b      	ldr	r3, [r7, #16]
 8014b6a:	68db      	ldr	r3, [r3, #12]
 8014b6c:	1e5a      	subs	r2, r3, #1
 8014b6e:	693b      	ldr	r3, [r7, #16]
 8014b70:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 8014b72:	693b      	ldr	r3, [r7, #16]
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	1c5a      	adds	r2, r3, #1
 8014b78:	693b      	ldr	r3, [r7, #16]
 8014b7a:	601a      	str	r2, [r3, #0]
          break;
 8014b7c:	e148      	b.n	8014e10 <http_send_data_ssi+0x5cc>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8014b7e:	693b      	ldr	r3, [r7, #16]
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	781a      	ldrb	r2, [r3, #0]
 8014b84:	693b      	ldr	r3, [r7, #16]
 8014b86:	7d9b      	ldrb	r3, [r3, #22]
 8014b88:	495d      	ldr	r1, [pc, #372]	; (8014d00 <http_send_data_ssi+0x4bc>)
 8014b8a:	00db      	lsls	r3, r3, #3
 8014b8c:	440b      	add	r3, r1
 8014b8e:	685b      	ldr	r3, [r3, #4]
 8014b90:	6939      	ldr	r1, [r7, #16]
 8014b92:	8a09      	ldrh	r1, [r1, #16]
 8014b94:	440b      	add	r3, r1
 8014b96:	781b      	ldrb	r3, [r3, #0]
 8014b98:	429a      	cmp	r2, r3
 8014b9a:	d179      	bne.n	8014c90 <http_send_data_ssi+0x44c>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8014b9c:	693b      	ldr	r3, [r7, #16]
 8014b9e:	68db      	ldr	r3, [r3, #12]
 8014ba0:	1e5a      	subs	r2, r3, #1
 8014ba2:	693b      	ldr	r3, [r7, #16]
 8014ba4:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 8014ba6:	693b      	ldr	r3, [r7, #16]
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	1c5a      	adds	r2, r3, #1
 8014bac:	693b      	ldr	r3, [r7, #16]
 8014bae:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 8014bb0:	693b      	ldr	r3, [r7, #16]
 8014bb2:	8a1b      	ldrh	r3, [r3, #16]
 8014bb4:	3301      	adds	r3, #1
 8014bb6:	b29a      	uxth	r2, r3
 8014bb8:	693b      	ldr	r3, [r7, #16]
 8014bba:	821a      	strh	r2, [r3, #16]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8014bbc:	693b      	ldr	r3, [r7, #16]
 8014bbe:	7d9b      	ldrb	r3, [r3, #22]
 8014bc0:	4a4f      	ldr	r2, [pc, #316]	; (8014d00 <http_send_data_ssi+0x4bc>)
 8014bc2:	00db      	lsls	r3, r3, #3
 8014bc4:	4413      	add	r3, r2
 8014bc6:	685b      	ldr	r3, [r3, #4]
 8014bc8:	693a      	ldr	r2, [r7, #16]
 8014bca:	8a12      	ldrh	r2, [r2, #16]
 8014bcc:	4413      	add	r3, r2
 8014bce:	781b      	ldrb	r3, [r3, #0]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	f040 811d 	bne.w	8014e10 <http_send_data_ssi+0x5cc>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
 8014bd6:	693b      	ldr	r3, [r7, #16]
 8014bd8:	2200      	movs	r2, #0
 8014bda:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 8014bdc:	6838      	ldr	r0, [r7, #0]
 8014bde:	f7ff faf9 	bl	80141d4 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 8014be2:	693b      	ldr	r3, [r7, #16]
 8014be4:	2200      	movs	r2, #0
 8014be6:	821a      	strh	r2, [r3, #16]
            ssi->tag_state = TAG_SENDING;
 8014be8:	693b      	ldr	r3, [r7, #16]
 8014bea:	2204      	movs	r2, #4
 8014bec:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
            ssi->tag_end = ssi->parsed;
 8014bf0:	693b      	ldr	r3, [r7, #16]
 8014bf2:	681a      	ldr	r2, [r3, #0]
 8014bf4:	693b      	ldr	r3, [r7, #16]
 8014bf6:	609a      	str	r2, [r3, #8]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->parsed = ssi->tag_started;
 8014bf8:	693b      	ldr	r3, [r7, #16]
 8014bfa:	685a      	ldr	r2, [r3, #4]
 8014bfc:	693b      	ldr	r3, [r7, #16]
 8014bfe:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 8014c00:	693b      	ldr	r3, [r7, #16]
 8014c02:	689a      	ldr	r2, [r3, #8]
 8014c04:	683b      	ldr	r3, [r7, #0]
 8014c06:	699b      	ldr	r3, [r3, #24]
 8014c08:	429a      	cmp	r2, r3
 8014c0a:	f240 8101 	bls.w	8014e10 <http_send_data_ssi+0x5cc>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8014c0e:	693b      	ldr	r3, [r7, #16]
 8014c10:	685a      	ldr	r2, [r3, #4]
 8014c12:	683b      	ldr	r3, [r7, #0]
 8014c14:	699b      	ldr	r3, [r3, #24]
 8014c16:	1ad3      	subs	r3, r2, r3
 8014c18:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014c1c:	4293      	cmp	r3, r2
 8014c1e:	dc06      	bgt.n	8014c2e <http_send_data_ssi+0x3ea>
 8014c20:	693b      	ldr	r3, [r7, #16]
 8014c22:	685a      	ldr	r2, [r3, #4]
 8014c24:	683b      	ldr	r3, [r7, #0]
 8014c26:	699b      	ldr	r3, [r3, #24]
 8014c28:	1ad3      	subs	r3, r2, r3
 8014c2a:	b29b      	uxth	r3, r3
 8014c2c:	e001      	b.n	8014c32 <http_send_data_ssi+0x3ee>
 8014c2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014c32:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8014c34:	683b      	ldr	r3, [r7, #0]
 8014c36:	6999      	ldr	r1, [r3, #24]
 8014c38:	f107 020e 	add.w	r2, r7, #14
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	6878      	ldr	r0, [r7, #4]
 8014c40:	f7ff f992 	bl	8013f68 <http_write>
 8014c44:	4603      	mov	r3, r0
 8014c46:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 8014c48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	f040 80df 	bne.w	8014e10 <http_send_data_ssi+0x5cc>
                data_to_send = 1;
 8014c52:	2301      	movs	r3, #1
 8014c54:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
                if (ssi->tag_started <= hs->file) {
 8014c56:	693b      	ldr	r3, [r7, #16]
 8014c58:	685a      	ldr	r2, [r3, #4]
 8014c5a:	683b      	ldr	r3, [r7, #0]
 8014c5c:	699b      	ldr	r3, [r3, #24]
 8014c5e:	429a      	cmp	r2, r3
 8014c60:	d809      	bhi.n	8014c76 <http_send_data_ssi+0x432>
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8014c62:	693b      	ldr	r3, [r7, #16]
 8014c64:	689a      	ldr	r2, [r3, #8]
 8014c66:	693b      	ldr	r3, [r7, #16]
 8014c68:	685b      	ldr	r3, [r3, #4]
 8014c6a:	1ad3      	subs	r3, r2, r3
 8014c6c:	b29a      	uxth	r2, r3
 8014c6e:	89fb      	ldrh	r3, [r7, #14]
 8014c70:	4413      	add	r3, r2
 8014c72:	b29b      	uxth	r3, r3
 8014c74:	81fb      	strh	r3, [r7, #14]
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 8014c76:	683b      	ldr	r3, [r7, #0]
 8014c78:	699b      	ldr	r3, [r3, #24]
 8014c7a:	89fa      	ldrh	r2, [r7, #14]
 8014c7c:	441a      	add	r2, r3
 8014c7e:	683b      	ldr	r3, [r7, #0]
 8014c80:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 8014c82:	683b      	ldr	r3, [r7, #0]
 8014c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c86:	89fa      	ldrh	r2, [r7, #14]
 8014c88:	1a9a      	subs	r2, r3, r2
 8014c8a:	683b      	ldr	r3, [r7, #0]
 8014c8c:	625a      	str	r2, [r3, #36]	; 0x24
 8014c8e:	e0bf      	b.n	8014e10 <http_send_data_ssi+0x5cc>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 8014c90:	693b      	ldr	r3, [r7, #16]
 8014c92:	68db      	ldr	r3, [r3, #12]
 8014c94:	1e5a      	subs	r2, r3, #1
 8014c96:	693b      	ldr	r3, [r7, #16]
 8014c98:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 8014c9a:	693b      	ldr	r3, [r7, #16]
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	1c5a      	adds	r2, r3, #1
 8014ca0:	693b      	ldr	r3, [r7, #16]
 8014ca2:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 8014ca4:	693b      	ldr	r3, [r7, #16]
 8014ca6:	2200      	movs	r2, #0
 8014ca8:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
        }
        break;
 8014cac:	e0b0      	b.n	8014e10 <http_send_data_ssi+0x5cc>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 8014cae:	693b      	ldr	r3, [r7, #16]
 8014cb0:	689a      	ldr	r2, [r3, #8]
 8014cb2:	683b      	ldr	r3, [r7, #0]
 8014cb4:	699b      	ldr	r3, [r3, #24]
 8014cb6:	429a      	cmp	r2, r3
 8014cb8:	d95c      	bls.n	8014d74 <http_send_data_ssi+0x530>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8014cba:	693b      	ldr	r3, [r7, #16]
 8014cbc:	685a      	ldr	r2, [r3, #4]
 8014cbe:	683b      	ldr	r3, [r7, #0]
 8014cc0:	699b      	ldr	r3, [r3, #24]
 8014cc2:	429a      	cmp	r2, r3
 8014cc4:	d206      	bcs.n	8014cd4 <http_send_data_ssi+0x490>
 8014cc6:	4b0b      	ldr	r3, [pc, #44]	; (8014cf4 <http_send_data_ssi+0x4b0>)
 8014cc8:	f240 52ac 	movw	r2, #1452	; 0x5ac
 8014ccc:	490d      	ldr	r1, [pc, #52]	; (8014d04 <http_send_data_ssi+0x4c0>)
 8014cce:	480b      	ldr	r0, [pc, #44]	; (8014cfc <http_send_data_ssi+0x4b8>)
 8014cd0:	f00c fc28 	bl	8021524 <iprintf>
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8014cd4:	693b      	ldr	r3, [r7, #16]
 8014cd6:	685a      	ldr	r2, [r3, #4]
 8014cd8:	683b      	ldr	r3, [r7, #0]
 8014cda:	699b      	ldr	r3, [r3, #24]
 8014cdc:	1ad3      	subs	r3, r2, r3
 8014cde:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014ce2:	4293      	cmp	r3, r2
 8014ce4:	dc10      	bgt.n	8014d08 <http_send_data_ssi+0x4c4>
 8014ce6:	693b      	ldr	r3, [r7, #16]
 8014ce8:	685a      	ldr	r2, [r3, #4]
 8014cea:	683b      	ldr	r3, [r7, #0]
 8014cec:	699b      	ldr	r3, [r3, #24]
 8014cee:	1ad3      	subs	r3, r2, r3
 8014cf0:	b29b      	uxth	r3, r3
 8014cf2:	e00b      	b.n	8014d0c <http_send_data_ssi+0x4c8>
 8014cf4:	080243a8 	.word	0x080243a8
 8014cf8:	080244d8 	.word	0x080244d8
 8014cfc:	080243f0 	.word	0x080243f0
 8014d00:	0802ae68 	.word	0x0802ae68
 8014d04:	080244f0 	.word	0x080244f0
 8014d08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014d0c:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 8014d0e:	89fb      	ldrh	r3, [r7, #14]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d00a      	beq.n	8014d2a <http_send_data_ssi+0x4e6>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8014d14:	683b      	ldr	r3, [r7, #0]
 8014d16:	6999      	ldr	r1, [r3, #24]
 8014d18:	f107 020e 	add.w	r2, r7, #14
 8014d1c:	2300      	movs	r3, #0
 8014d1e:	6878      	ldr	r0, [r7, #4]
 8014d20:	f7ff f922 	bl	8013f68 <http_write>
 8014d24:	4603      	mov	r3, r0
 8014d26:	75fb      	strb	r3, [r7, #23]
 8014d28:	e001      	b.n	8014d2e <http_send_data_ssi+0x4ea>
          } else {
            err = ERR_OK;
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 8014d2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d16c      	bne.n	8014e10 <http_send_data_ssi+0x5cc>
            data_to_send = 1;
 8014d36:	2301      	movs	r3, #1
 8014d38:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            if (ssi->tag_started <= hs->file) {
 8014d3a:	693b      	ldr	r3, [r7, #16]
 8014d3c:	685a      	ldr	r2, [r3, #4]
 8014d3e:	683b      	ldr	r3, [r7, #0]
 8014d40:	699b      	ldr	r3, [r3, #24]
 8014d42:	429a      	cmp	r2, r3
 8014d44:	d809      	bhi.n	8014d5a <http_send_data_ssi+0x516>
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8014d46:	693b      	ldr	r3, [r7, #16]
 8014d48:	689a      	ldr	r2, [r3, #8]
 8014d4a:	693b      	ldr	r3, [r7, #16]
 8014d4c:	685b      	ldr	r3, [r3, #4]
 8014d4e:	1ad3      	subs	r3, r2, r3
 8014d50:	b29a      	uxth	r2, r3
 8014d52:	89fb      	ldrh	r3, [r7, #14]
 8014d54:	4413      	add	r3, r2
 8014d56:	b29b      	uxth	r3, r3
 8014d58:	81fb      	strh	r3, [r7, #14]
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 8014d5a:	683b      	ldr	r3, [r7, #0]
 8014d5c:	699b      	ldr	r3, [r3, #24]
 8014d5e:	89fa      	ldrh	r2, [r7, #14]
 8014d60:	441a      	add	r2, r3
 8014d62:	683b      	ldr	r3, [r7, #0]
 8014d64:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 8014d66:	683b      	ldr	r3, [r7, #0]
 8014d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d6a:	89fa      	ldrh	r2, [r7, #14]
 8014d6c:	1a9a      	subs	r2, r3, r2
 8014d6e:	683b      	ldr	r3, [r7, #0]
 8014d70:	625a      	str	r2, [r3, #36]	; 0x24
 8014d72:	e04d      	b.n	8014e10 <http_send_data_ssi+0x5cc>
          }
        } else {
#if LWIP_HTTPD_SSI_MULTIPART
          if (ssi->tag_index >= ssi->tag_insert_len) {
 8014d74:	693b      	ldr	r3, [r7, #16]
 8014d76:	8a1a      	ldrh	r2, [r3, #16]
 8014d78:	693b      	ldr	r3, [r7, #16]
 8014d7a:	8a5b      	ldrh	r3, [r3, #18]
 8014d7c:	429a      	cmp	r2, r3
 8014d7e:	d30b      	bcc.n	8014d98 <http_send_data_ssi+0x554>
            /* Did the last SSIHandler have more to send? */
            if (ssi->tag_part != HTTPD_LAST_TAG_PART) {
 8014d80:	693b      	ldr	r3, [r7, #16]
 8014d82:	8a9b      	ldrh	r3, [r3, #20]
 8014d84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014d88:	4293      	cmp	r3, r2
 8014d8a:	d005      	beq.n	8014d98 <http_send_data_ssi+0x554>
              /* If so, call it again */
              ssi->tag_index = 0;
 8014d8c:	693b      	ldr	r3, [r7, #16]
 8014d8e:	2200      	movs	r2, #0
 8014d90:	821a      	strh	r2, [r3, #16]
              get_tag_insert(hs);
 8014d92:	6838      	ldr	r0, [r7, #0]
 8014d94:	f7ff fa1e 	bl	80141d4 <get_tag_insert>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 8014d98:	693b      	ldr	r3, [r7, #16]
 8014d9a:	8a1a      	ldrh	r2, [r3, #16]
 8014d9c:	693b      	ldr	r3, [r7, #16]
 8014d9e:	8a5b      	ldrh	r3, [r3, #18]
 8014da0:	429a      	cmp	r2, r3
 8014da2:	d222      	bcs.n	8014dea <http_send_data_ssi+0x5a6>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 8014da4:	693b      	ldr	r3, [r7, #16]
 8014da6:	8a5a      	ldrh	r2, [r3, #18]
 8014da8:	693b      	ldr	r3, [r7, #16]
 8014daa:	8a1b      	ldrh	r3, [r3, #16]
 8014dac:	1ad3      	subs	r3, r2, r3
 8014dae:	b29b      	uxth	r3, r3
 8014db0:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8014db2:	693b      	ldr	r3, [r7, #16]
 8014db4:	8a1b      	ldrh	r3, [r3, #16]
 8014db6:	3320      	adds	r3, #32
 8014db8:	693a      	ldr	r2, [r7, #16]
 8014dba:	4413      	add	r3, r2
 8014dbc:	1c59      	adds	r1, r3, #1
 8014dbe:	f107 020e 	add.w	r2, r7, #14
 8014dc2:	2301      	movs	r3, #1
 8014dc4:	6878      	ldr	r0, [r7, #4]
 8014dc6:	f7ff f8cf 	bl	8013f68 <http_write>
 8014dca:	4603      	mov	r3, r0
 8014dcc:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 8014dce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d11c      	bne.n	8014e10 <http_send_data_ssi+0x5cc>
              data_to_send = 1;
 8014dd6:	2301      	movs	r3, #1
 8014dd8:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 8014dda:	693b      	ldr	r3, [r7, #16]
 8014ddc:	8a1a      	ldrh	r2, [r3, #16]
 8014dde:	89fb      	ldrh	r3, [r7, #14]
 8014de0:	4413      	add	r3, r2
 8014de2:	b29a      	uxth	r2, r3
 8014de4:	693b      	ldr	r3, [r7, #16]
 8014de6:	821a      	strh	r2, [r3, #16]
 8014de8:	e012      	b.n	8014e10 <http_send_data_ssi+0x5cc>
              /* Don't return here: keep on sending data */
            }
          } else {
#if LWIP_HTTPD_SSI_MULTIPART
            if (ssi->tag_part == HTTPD_LAST_TAG_PART)
 8014dea:	693b      	ldr	r3, [r7, #16]
 8014dec:	8a9b      	ldrh	r3, [r3, #20]
 8014dee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014df2:	4293      	cmp	r3, r2
 8014df4:	d10c      	bne.n	8014e10 <http_send_data_ssi+0x5cc>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 8014df6:	693b      	ldr	r3, [r7, #16]
 8014df8:	2200      	movs	r2, #0
 8014dfa:	821a      	strh	r2, [r3, #16]
              ssi->tag_state = TAG_NONE;
 8014dfc:	693b      	ldr	r3, [r7, #16]
 8014dfe:	2200      	movs	r2, #0
 8014e00:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
 8014e04:	693b      	ldr	r3, [r7, #16]
 8014e06:	689a      	ldr	r2, [r3, #8]
 8014e08:	693b      	ldr	r3, [r7, #16]
 8014e0a:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 8014e0c:	e000      	b.n	8014e10 <http_send_data_ssi+0x5cc>
        default:
          break;
 8014e0e:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8014e10:	693b      	ldr	r3, [r7, #16]
 8014e12:	f893 3422 	ldrb.w	r3, [r3, #1058]	; 0x422
 8014e16:	2b04      	cmp	r3, #4
 8014e18:	d003      	beq.n	8014e22 <http_send_data_ssi+0x5de>
 8014e1a:	693b      	ldr	r3, [r7, #16]
 8014e1c:	68db      	ldr	r3, [r3, #12]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d004      	beq.n	8014e2c <http_send_data_ssi+0x5e8>
 8014e22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	f43f ad64 	beq.w	80148f4 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8014e2c:	693b      	ldr	r3, [r7, #16]
 8014e2e:	f893 3422 	ldrb.w	r3, [r3, #1058]	; 0x422
 8014e32:	2b04      	cmp	r3, #4
 8014e34:	d034      	beq.n	8014ea0 <http_send_data_ssi+0x65c>
 8014e36:	693b      	ldr	r3, [r7, #16]
 8014e38:	681a      	ldr	r2, [r3, #0]
 8014e3a:	683b      	ldr	r3, [r7, #0]
 8014e3c:	699b      	ldr	r3, [r3, #24]
 8014e3e:	429a      	cmp	r2, r3
 8014e40:	d92e      	bls.n	8014ea0 <http_send_data_ssi+0x65c>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8014e42:	693b      	ldr	r3, [r7, #16]
 8014e44:	681a      	ldr	r2, [r3, #0]
 8014e46:	683b      	ldr	r3, [r7, #0]
 8014e48:	699b      	ldr	r3, [r3, #24]
 8014e4a:	1ad3      	subs	r3, r2, r3
 8014e4c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014e50:	4293      	cmp	r3, r2
 8014e52:	dc06      	bgt.n	8014e62 <http_send_data_ssi+0x61e>
 8014e54:	693b      	ldr	r3, [r7, #16]
 8014e56:	681a      	ldr	r2, [r3, #0]
 8014e58:	683b      	ldr	r3, [r7, #0]
 8014e5a:	699b      	ldr	r3, [r3, #24]
 8014e5c:	1ad3      	subs	r3, r2, r3
 8014e5e:	b29b      	uxth	r3, r3
 8014e60:	e001      	b.n	8014e66 <http_send_data_ssi+0x622>
 8014e62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014e66:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8014e68:	683b      	ldr	r3, [r7, #0]
 8014e6a:	6999      	ldr	r1, [r3, #24]
 8014e6c:	f107 020e 	add.w	r2, r7, #14
 8014e70:	2300      	movs	r3, #0
 8014e72:	6878      	ldr	r0, [r7, #4]
 8014e74:	f7ff f878 	bl	8013f68 <http_write>
 8014e78:	4603      	mov	r3, r0
 8014e7a:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8014e7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d10d      	bne.n	8014ea0 <http_send_data_ssi+0x65c>
      data_to_send = 1;
 8014e84:	2301      	movs	r3, #1
 8014e86:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8014e88:	683b      	ldr	r3, [r7, #0]
 8014e8a:	699b      	ldr	r3, [r3, #24]
 8014e8c:	89fa      	ldrh	r2, [r7, #14]
 8014e8e:	441a      	add	r2, r3
 8014e90:	683b      	ldr	r3, [r7, #0]
 8014e92:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8014e94:	683b      	ldr	r3, [r7, #0]
 8014e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e98:	89fa      	ldrh	r2, [r7, #14]
 8014e9a:	1a9a      	subs	r2, r3, r2
 8014e9c:	683b      	ldr	r3, [r7, #0]
 8014e9e:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 8014ea0:	7dbb      	ldrb	r3, [r7, #22]
}
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	3718      	adds	r7, #24
 8014ea6:	46bd      	mov	sp, r7
 8014ea8:	bd80      	pop	{r7, pc}
 8014eaa:	bf00      	nop

08014eac <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8014eac:	b580      	push	{r7, lr}
 8014eae:	b084      	sub	sp, #16
 8014eb0:	af00      	add	r7, sp, #0
 8014eb2:	6078      	str	r0, [r7, #4]
 8014eb4:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8014eba:	683b      	ldr	r3, [r7, #0]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d101      	bne.n	8014ec4 <http_send+0x18>
    return 0;
 8014ec0:	2300      	movs	r3, #0
 8014ec2:	e048      	b.n	8014f56 <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_FS_ASYNC_READ */

#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Do we have any more header data to send for this file? */
  if (hs->hdr_index < NUM_FILE_HDR_STRINGS) {
 8014ec4:	683b      	ldr	r3, [r7, #0]
 8014ec6:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 8014eca:	2b04      	cmp	r3, #4
 8014ecc:	d812      	bhi.n	8014ef4 <http_send+0x48>
    data_to_send = http_send_headers(pcb, hs);
 8014ece:	6839      	ldr	r1, [r7, #0]
 8014ed0:	6878      	ldr	r0, [r7, #4]
 8014ed2:	f7ff fb7d 	bl	80145d0 <http_send_headers>
 8014ed6:	4603      	mov	r3, r0
 8014ed8:	73fb      	strb	r3, [r7, #15]
    if ((data_to_send == HTTP_DATA_TO_SEND_FREED) ||
 8014eda:	7bfb      	ldrb	r3, [r7, #15]
 8014edc:	2b03      	cmp	r3, #3
 8014ede:	d007      	beq.n	8014ef0 <http_send+0x44>
 8014ee0:	7bfb      	ldrb	r3, [r7, #15]
 8014ee2:	2b01      	cmp	r3, #1
 8014ee4:	d006      	beq.n	8014ef4 <http_send+0x48>
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
         (hs->hdr_index < NUM_FILE_HDR_STRINGS))) {
 8014ee6:	683b      	ldr	r3, [r7, #0]
 8014ee8:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
 8014eec:	2b04      	cmp	r3, #4
 8014eee:	d801      	bhi.n	8014ef4 <http_send+0x48>
      return data_to_send;
 8014ef0:	7bfb      	ldrb	r3, [r7, #15]
 8014ef2:	e030      	b.n	8014f56 <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8014ef4:	683b      	ldr	r3, [r7, #0]
 8014ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d108      	bne.n	8014f0e <http_send+0x62>
    if (!http_check_eof(pcb, hs)) {
 8014efc:	6839      	ldr	r1, [r7, #0]
 8014efe:	6878      	ldr	r0, [r7, #4]
 8014f00:	f7ff fc3a 	bl	8014778 <http_check_eof>
 8014f04:	4603      	mov	r3, r0
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d101      	bne.n	8014f0e <http_send+0x62>
      return 0;
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	e023      	b.n	8014f56 <http_send+0xaa>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8014f0e:	683b      	ldr	r3, [r7, #0]
 8014f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d006      	beq.n	8014f24 <http_send+0x78>
    data_to_send = http_send_data_ssi(pcb, hs);
 8014f16:	6839      	ldr	r1, [r7, #0]
 8014f18:	6878      	ldr	r0, [r7, #4]
 8014f1a:	f7ff fc93 	bl	8014844 <http_send_data_ssi>
 8014f1e:	4603      	mov	r3, r0
 8014f20:	73fb      	strb	r3, [r7, #15]
 8014f22:	e005      	b.n	8014f30 <http_send+0x84>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8014f24:	6839      	ldr	r1, [r7, #0]
 8014f26:	6878      	ldr	r0, [r7, #4]
 8014f28:	f7ff fc56 	bl	80147d8 <http_send_data_nonssi>
 8014f2c:	4603      	mov	r3, r0
 8014f2e:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8014f30:	683b      	ldr	r3, [r7, #0]
 8014f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d10d      	bne.n	8014f54 <http_send+0xa8>
 8014f38:	683b      	ldr	r3, [r7, #0]
 8014f3a:	695b      	ldr	r3, [r3, #20]
 8014f3c:	4618      	mov	r0, r3
 8014f3e:	f7fe ff7f 	bl	8013e40 <fs_bytes_left>
 8014f42:	4603      	mov	r3, r0
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	dc05      	bgt.n	8014f54 <http_send+0xa8>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8014f48:	6839      	ldr	r1, [r7, #0]
 8014f4a:	6878      	ldr	r0, [r7, #4]
 8014f4c:	f7ff f8d7 	bl	80140fe <http_eof>
    return 0;
 8014f50:	2300      	movs	r3, #0
 8014f52:	e000      	b.n	8014f56 <http_send+0xaa>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8014f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f56:	4618      	mov	r0, r3
 8014f58:	3710      	adds	r7, #16
 8014f5a:	46bd      	mov	sp, r7
 8014f5c:	bd80      	pop	{r7, pc}
	...

08014f60 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b084      	sub	sp, #16
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	6078      	str	r0, [r7, #4]
 8014f68:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8014f6a:	683b      	ldr	r3, [r7, #0]
 8014f6c:	4a1c      	ldr	r2, [pc, #112]	; (8014fe0 <http_get_404_file+0x80>)
 8014f6e:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8014f70:	687a      	ldr	r2, [r7, #4]
 8014f72:	683b      	ldr	r3, [r7, #0]
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	4619      	mov	r1, r3
 8014f78:	4610      	mov	r0, r2
 8014f7a:	f7fe ff19 	bl	8013db0 <fs_open>
 8014f7e:	4603      	mov	r3, r0
 8014f80:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d024      	beq.n	8014fd4 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8014f8a:	683b      	ldr	r3, [r7, #0]
 8014f8c:	4a15      	ldr	r2, [pc, #84]	; (8014fe4 <http_get_404_file+0x84>)
 8014f8e:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8014f90:	687a      	ldr	r2, [r7, #4]
 8014f92:	683b      	ldr	r3, [r7, #0]
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	4619      	mov	r1, r3
 8014f98:	4610      	mov	r0, r2
 8014f9a:	f7fe ff09 	bl	8013db0 <fs_open>
 8014f9e:	4603      	mov	r3, r0
 8014fa0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d014      	beq.n	8014fd4 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8014faa:	683b      	ldr	r3, [r7, #0]
 8014fac:	4a0e      	ldr	r2, [pc, #56]	; (8014fe8 <http_get_404_file+0x88>)
 8014fae:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8014fb0:	687a      	ldr	r2, [r7, #4]
 8014fb2:	683b      	ldr	r3, [r7, #0]
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	4619      	mov	r1, r3
 8014fb8:	4610      	mov	r0, r2
 8014fba:	f7fe fef9 	bl	8013db0 <fs_open>
 8014fbe:	4603      	mov	r3, r0
 8014fc0:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8014fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d004      	beq.n	8014fd4 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8014fca:	683b      	ldr	r3, [r7, #0]
 8014fcc:	2200      	movs	r2, #0
 8014fce:	601a      	str	r2, [r3, #0]
        return NULL;
 8014fd0:	2300      	movs	r3, #0
 8014fd2:	e000      	b.n	8014fd6 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8014fd4:	687b      	ldr	r3, [r7, #4]
}
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	3710      	adds	r7, #16
 8014fda:	46bd      	mov	sp, r7
 8014fdc:	bd80      	pop	{r7, pc}
 8014fde:	bf00      	nop
 8014fe0:	08024508 	.word	0x08024508
 8014fe4:	08024514 	.word	0x08024514
 8014fe8:	08024520 	.word	0x08024520

08014fec <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 8014fec:	b580      	push	{r7, lr}
 8014fee:	b082      	sub	sp, #8
 8014ff0:	af00      	add	r7, sp, #0
 8014ff2:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 8014ff4:	4b08      	ldr	r3, [pc, #32]	; (8015018 <http_handle_post_finished+0x2c>)
 8014ff6:	2200      	movs	r2, #0
 8014ff8:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8014ffa:	223f      	movs	r2, #63	; 0x3f
 8014ffc:	4906      	ldr	r1, [pc, #24]	; (8015018 <http_handle_post_finished+0x2c>)
 8014ffe:	6878      	ldr	r0, [r7, #4]
 8015000:	f7ee fb3e 	bl	8003680 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 8015004:	2200      	movs	r2, #0
 8015006:	4904      	ldr	r1, [pc, #16]	; (8015018 <http_handle_post_finished+0x2c>)
 8015008:	6878      	ldr	r0, [r7, #4]
 801500a:	f000 faab 	bl	8015564 <http_find_file>
 801500e:	4603      	mov	r3, r0
}
 8015010:	4618      	mov	r0, r3
 8015012:	3708      	adds	r7, #8
 8015014:	46bd      	mov	sp, r7
 8015016:	bd80      	pop	{r7, pc}
 8015018:	20005240 	.word	0x20005240

0801501c <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 801501c:	b580      	push	{r7, lr}
 801501e:	b084      	sub	sp, #16
 8015020:	af00      	add	r7, sp, #0
 8015022:	6078      	str	r0, [r7, #4]
 8015024:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 8015026:	683b      	ldr	r3, [r7, #0]
 8015028:	2b00      	cmp	r3, #0
 801502a:	d014      	beq.n	8015056 <http_post_rxpbuf+0x3a>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8015032:	683a      	ldr	r2, [r7, #0]
 8015034:	8912      	ldrh	r2, [r2, #8]
 8015036:	4293      	cmp	r3, r2
 8015038:	d204      	bcs.n	8015044 <http_post_rxpbuf+0x28>
      hs->post_content_len_left = 0;
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	2200      	movs	r2, #0
 801503e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8015042:	e008      	b.n	8015056 <http_post_rxpbuf+0x3a>
    } else {
      hs->post_content_len_left -= p->tot_len;
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 801504a:	683a      	ldr	r2, [r7, #0]
 801504c:	8912      	ldrh	r2, [r2, #8]
 801504e:	1a9a      	subs	r2, r3, r2
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  if (p != NULL) {
 8015056:	683b      	ldr	r3, [r7, #0]
 8015058:	2b00      	cmp	r3, #0
 801505a:	d006      	beq.n	801506a <http_post_rxpbuf+0x4e>
    err = httpd_post_receive_data(hs, p);
 801505c:	6839      	ldr	r1, [r7, #0]
 801505e:	6878      	ldr	r0, [r7, #4]
 8015060:	f7ee facc 	bl	80035fc <httpd_post_receive_data>
 8015064:	4603      	mov	r3, r0
 8015066:	73fb      	strb	r3, [r7, #15]
 8015068:	e001      	b.n	801506e <http_post_rxpbuf+0x52>
  } else {
    err = ERR_OK;
 801506a:	2300      	movs	r3, #0
 801506c:	73fb      	strb	r3, [r7, #15]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 801506e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d003      	beq.n	801507e <http_post_rxpbuf+0x62>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	2200      	movs	r2, #0
 801507a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
  if (hs->post_content_len_left == 0) {
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8015084:	2b00      	cmp	r3, #0
 8015086:	d104      	bne.n	8015092 <http_post_rxpbuf+0x76>
    if (hs->unrecved_bytes != 0) {
      return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 8015088:	6878      	ldr	r0, [r7, #4]
 801508a:	f7ff ffaf 	bl	8014fec <http_handle_post_finished>
 801508e:	4603      	mov	r3, r0
 8015090:	e000      	b.n	8015094 <http_post_rxpbuf+0x78>
  }

  return ERR_OK;
 8015092:	2300      	movs	r3, #0
}
 8015094:	4618      	mov	r0, r3
 8015096:	3710      	adds	r7, #16
 8015098:	46bd      	mov	sp, r7
 801509a:	bd80      	pop	{r7, pc}

0801509c <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 801509c:	b580      	push	{r7, lr}
 801509e:	b092      	sub	sp, #72	; 0x48
 80150a0:	af04      	add	r7, sp, #16
 80150a2:	60f8      	str	r0, [r7, #12]
 80150a4:	60b9      	str	r1, [r7, #8]
 80150a6:	607a      	str	r2, [r7, #4]
 80150a8:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 80150aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80150ac:	1c58      	adds	r0, r3, #1
 80150ae:	887a      	ldrh	r2, [r7, #2]
 80150b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80150b2:	1c59      	adds	r1, r3, #1
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	1acb      	subs	r3, r1, r3
 80150b8:	1ad3      	subs	r3, r2, r3
 80150ba:	461a      	mov	r2, r3
 80150bc:	4965      	ldr	r1, [pc, #404]	; (8015254 <http_post_request+0x1b8>)
 80150be:	f000 fe6f 	bl	8015da0 <lwip_strnstr>
 80150c2:	62b8      	str	r0, [r7, #40]	; 0x28

  if (crlfcrlf != NULL) {
 80150c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	f000 80be 	beq.w	8015248 <http_post_request+0x1ac>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 80150cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80150ce:	1c58      	adds	r0, r3, #1
 80150d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80150d2:	3301      	adds	r3, #1
 80150d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80150d6:	1ad3      	subs	r3, r2, r3
 80150d8:	461a      	mov	r2, r3
 80150da:	495f      	ldr	r1, [pc, #380]	; (8015258 <http_post_request+0x1bc>)
 80150dc:	f000 fe60 	bl	8015da0 <lwip_strnstr>
 80150e0:	6278      	str	r0, [r7, #36]	; 0x24
    if (scontent_len != NULL) {
 80150e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	f000 80ac 	beq.w	8015242 <http_post_request+0x1a6>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 80150ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150ec:	3310      	adds	r3, #16
 80150ee:	220a      	movs	r2, #10
 80150f0:	495a      	ldr	r1, [pc, #360]	; (801525c <http_post_request+0x1c0>)
 80150f2:	4618      	mov	r0, r3
 80150f4:	f000 fe54 	bl	8015da0 <lwip_strnstr>
 80150f8:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 80150fa:	6a3b      	ldr	r3, [r7, #32]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	f000 80a0 	beq.w	8015242 <http_post_request+0x1a6>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 8015102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015104:	3310      	adds	r3, #16
 8015106:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 8015108:	69f8      	ldr	r0, [r7, #28]
 801510a:	f00b fff1 	bl	80210f0 <atoi>
 801510e:	6378      	str	r0, [r7, #52]	; 0x34
        if (content_len == 0) {
 8015110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015112:	2b00      	cmp	r3, #0
 8015114:	d10b      	bne.n	801512e <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 8015116:	69fb      	ldr	r3, [r7, #28]
 8015118:	781b      	ldrb	r3, [r3, #0]
 801511a:	2b30      	cmp	r3, #48	; 0x30
 801511c:	d104      	bne.n	8015128 <http_post_request+0x8c>
 801511e:	69fb      	ldr	r3, [r7, #28]
 8015120:	3301      	adds	r3, #1
 8015122:	781b      	ldrb	r3, [r3, #0]
 8015124:	2b0d      	cmp	r3, #13
 8015126:	d002      	beq.n	801512e <http_post_request+0x92>
            content_len = -1;
 8015128:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801512c:	637b      	str	r3, [r7, #52]	; 0x34
          }
        }
        if (content_len >= 0) {
 801512e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015130:	2b00      	cmp	r3, #0
 8015132:	f2c0 8083 	blt.w	801523c <http_post_request+0x1a0>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 8015136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015138:	3301      	adds	r3, #1
 801513a:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 801513c:	887a      	ldrh	r2, [r7, #2]
 801513e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015140:	1d19      	adds	r1, r3, #4
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	1acb      	subs	r3, r1, r3
 8015146:	429a      	cmp	r2, r3
 8015148:	db05      	blt.n	8015156 <http_post_request+0xba>
 801514a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801514c:	1d1a      	adds	r2, r3, #4
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	1ad3      	subs	r3, r2, r3
 8015152:	b29b      	uxth	r3, r3
 8015154:	e000      	b.n	8015158 <http_post_request+0xbc>
 8015156:	887b      	ldrh	r3, [r7, #2]
 8015158:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 801515a:	887a      	ldrh	r2, [r7, #2]
 801515c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801515e:	1d19      	adds	r1, r3, #4
 8015160:	69bb      	ldr	r3, [r7, #24]
 8015162:	1acb      	subs	r3, r1, r3
 8015164:	429a      	cmp	r2, r3
 8015166:	db05      	blt.n	8015174 <http_post_request+0xd8>
 8015168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801516a:	1d1a      	adds	r2, r3, #4
 801516c:	69bb      	ldr	r3, [r7, #24]
 801516e:	1ad3      	subs	r3, r2, r3
 8015170:	b29b      	uxth	r3, r3
 8015172:	e000      	b.n	8015176 <http_post_request+0xda>
 8015174:	887b      	ldrh	r3, [r7, #2]
 8015176:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 8015178:	2301      	movs	r3, #1
 801517a:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 801517c:	4b38      	ldr	r3, [pc, #224]	; (8015260 <http_post_request+0x1c4>)
 801517e:	2200      	movs	r2, #0
 8015180:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 8015182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015184:	2200      	movs	r2, #0
 8015186:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8015188:	8aba      	ldrh	r2, [r7, #20]
 801518a:	f107 0312 	add.w	r3, r7, #18
 801518e:	9303      	str	r3, [sp, #12]
 8015190:	233f      	movs	r3, #63	; 0x3f
 8015192:	9302      	str	r3, [sp, #8]
 8015194:	4b32      	ldr	r3, [pc, #200]	; (8015260 <http_post_request+0x1c4>)
 8015196:	9301      	str	r3, [sp, #4]
 8015198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801519a:	9300      	str	r3, [sp, #0]
 801519c:	4613      	mov	r3, r2
 801519e:	69ba      	ldr	r2, [r7, #24]
 80151a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80151a2:	68b8      	ldr	r0, [r7, #8]
 80151a4:	f7ee f9ec 	bl	8003580 <httpd_post_begin>
 80151a8:	4603      	mov	r3, r0
 80151aa:	74fb      	strb	r3, [r7, #19]
                                 http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 80151ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d13c      	bne.n	801522e <http_post_request+0x192>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	633b      	str	r3, [r7, #48]	; 0x30
            u16_t start_offset = hdr_len;
 80151b8:	8afb      	ldrh	r3, [r7, #22]
 80151ba:	85fb      	strh	r3, [r7, #46]	; 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 80151bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80151be:	68bb      	ldr	r3, [r7, #8]
 80151c0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

            /* get to the pbuf where the body starts */
            while ((q != NULL) && (q->len <= start_offset)) {
 80151c4:	e007      	b.n	80151d6 <http_post_request+0x13a>
              start_offset -= q->len;
 80151c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151c8:	895b      	ldrh	r3, [r3, #10]
 80151ca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80151cc:	1ad3      	subs	r3, r2, r3
 80151ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
              q = q->next;
 80151d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	633b      	str	r3, [r7, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 80151d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d004      	beq.n	80151e6 <http_post_request+0x14a>
 80151dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151de:	895b      	ldrh	r3, [r3, #10]
 80151e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80151e2:	429a      	cmp	r2, r3
 80151e4:	d2ef      	bcs.n	80151c6 <http_post_request+0x12a>
            }
            if (q != NULL) {
 80151e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d00d      	beq.n	8015208 <http_post_request+0x16c>
              /* hide the remaining HTTP header */
              pbuf_remove_header(q, start_offset);
 80151ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80151ee:	4619      	mov	r1, r3
 80151f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80151f2:	f002 f9ab 	bl	801754c <pbuf_remove_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 80151f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80151f8:	f002 fad4 	bl	80177a4 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 80151fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80151fe:	68b8      	ldr	r0, [r7, #8]
 8015200:	f7ff ff0c 	bl	801501c <http_post_rxpbuf>
 8015204:	4603      	mov	r3, r0
 8015206:	e021      	b.n	801524c <http_post_request+0x1b0>
            } else if (hs->post_content_len_left == 0) {
 8015208:	68bb      	ldr	r3, [r7, #8]
 801520a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 801520e:	2b00      	cmp	r3, #0
 8015210:	d10b      	bne.n	801522a <http_post_request+0x18e>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 8015212:	2241      	movs	r2, #65	; 0x41
 8015214:	2100      	movs	r1, #0
 8015216:	2000      	movs	r0, #0
 8015218:	f001 ff3a 	bl	8017090 <pbuf_alloc>
 801521c:	6338      	str	r0, [r7, #48]	; 0x30
              return http_post_rxpbuf(hs, q);
 801521e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015220:	68b8      	ldr	r0, [r7, #8]
 8015222:	f7ff fefb 	bl	801501c <http_post_rxpbuf>
 8015226:	4603      	mov	r3, r0
 8015228:	e010      	b.n	801524c <http_post_request+0x1b0>
            } else {
              return ERR_OK;
 801522a:	2300      	movs	r3, #0
 801522c:	e00e      	b.n	801524c <http_post_request+0x1b0>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 801522e:	2200      	movs	r2, #0
 8015230:	490b      	ldr	r1, [pc, #44]	; (8015260 <http_post_request+0x1c4>)
 8015232:	68b8      	ldr	r0, [r7, #8]
 8015234:	f000 f996 	bl	8015564 <http_find_file>
 8015238:	4603      	mov	r3, r0
 801523a:	e007      	b.n	801524c <http_post_request+0x1b0>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
                                    content_len_num));
          return ERR_ARG;
 801523c:	f06f 030f 	mvn.w	r3, #15
 8015240:	e004      	b.n	801524c <http_post_request+0x1b0>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 8015242:	f06f 030f 	mvn.w	r3, #15
 8015246:	e001      	b.n	801524c <http_post_request+0x1b0>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 8015248:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 801524c:	4618      	mov	r0, r3
 801524e:	3738      	adds	r7, #56	; 0x38
 8015250:	46bd      	mov	sp, r7
 8015252:	bd80      	pop	{r7, pc}
 8015254:	0802452c 	.word	0x0802452c
 8015258:	08023fb8 	.word	0x08023fb8
 801525c:	0802449c 	.word	0x0802449c
 8015260:	20005240 	.word	0x20005240

08015264 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8015264:	b580      	push	{r7, lr}
 8015266:	b092      	sub	sp, #72	; 0x48
 8015268:	af02      	add	r7, sp, #8
 801526a:	60f8      	str	r0, [r7, #12]
 801526c:	60b9      	str	r1, [r7, #8]
 801526e:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8015274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015276:	2b00      	cmp	r3, #0
 8015278:	d106      	bne.n	8015288 <http_parse_request+0x24>
 801527a:	4b87      	ldr	r3, [pc, #540]	; (8015498 <http_parse_request+0x234>)
 801527c:	f240 72ae 	movw	r2, #1966	; 0x7ae
 8015280:	4986      	ldr	r1, [pc, #536]	; (801549c <http_parse_request+0x238>)
 8015282:	4887      	ldr	r0, [pc, #540]	; (80154a0 <http_parse_request+0x23c>)
 8015284:	f00c f94e 	bl	8021524 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8015288:	68bb      	ldr	r3, [r7, #8]
 801528a:	2b00      	cmp	r3, #0
 801528c:	d106      	bne.n	801529c <http_parse_request+0x38>
 801528e:	4b82      	ldr	r3, [pc, #520]	; (8015498 <http_parse_request+0x234>)
 8015290:	f240 72af 	movw	r2, #1967	; 0x7af
 8015294:	4983      	ldr	r1, [pc, #524]	; (80154a4 <http_parse_request+0x240>)
 8015296:	4882      	ldr	r0, [pc, #520]	; (80154a0 <http_parse_request+0x23c>)
 8015298:	f00c f944 	bl	8021524 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 801529c:	68bb      	ldr	r3, [r7, #8]
 801529e:	695b      	ldr	r3, [r3, #20]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d103      	bne.n	80152ac <http_parse_request+0x48>
 80152a4:	68bb      	ldr	r3, [r7, #8]
 80152a6:	699b      	ldr	r3, [r3, #24]
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d002      	beq.n	80152b2 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 80152ac:	f06f 0307 	mvn.w	r3, #7
 80152b0:	e0ed      	b.n	801548e <http_parse_request+0x22a>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 80152b2:	68bb      	ldr	r3, [r7, #8]
 80152b4:	6a1b      	ldr	r3, [r3, #32]
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d103      	bne.n	80152c2 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 80152ba:	68bb      	ldr	r3, [r7, #8]
 80152bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80152be:	621a      	str	r2, [r3, #32]
 80152c0:	e005      	b.n	80152ce <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 80152c2:	68bb      	ldr	r3, [r7, #8]
 80152c4:	6a1b      	ldr	r3, [r3, #32]
 80152c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80152c8:	4618      	mov	r0, r3
 80152ca:	f002 fa93 	bl	80177f4 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 80152ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80152d0:	f002 fa68 	bl	80177a4 <pbuf_ref>

  if (hs->req->next != NULL) {
 80152d4:	68bb      	ldr	r3, [r7, #8]
 80152d6:	6a1b      	ldr	r3, [r3, #32]
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d012      	beq.n	8015304 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 80152de:	68bb      	ldr	r3, [r7, #8]
 80152e0:	6a1b      	ldr	r3, [r3, #32]
 80152e2:	891b      	ldrh	r3, [r3, #8]
 80152e4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80152e8:	4293      	cmp	r3, r2
 80152ea:	bf28      	it	cs
 80152ec:	4613      	movcs	r3, r2
 80152ee:	877b      	strh	r3, [r7, #58]	; 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 80152f0:	68bb      	ldr	r3, [r7, #8]
 80152f2:	6a18      	ldr	r0, [r3, #32]
 80152f4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80152f6:	2300      	movs	r3, #0
 80152f8:	496b      	ldr	r1, [pc, #428]	; (80154a8 <http_parse_request+0x244>)
 80152fa:	f002 fba3 	bl	8017a44 <pbuf_copy_partial>
    data = httpd_req_buf;
 80152fe:	4b6a      	ldr	r3, [pc, #424]	; (80154a8 <http_parse_request+0x244>)
 8015300:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015302:	e005      	b.n	8015310 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8015304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015306:	685b      	ldr	r3, [r3, #4]
 8015308:	63fb      	str	r3, [r7, #60]	; 0x3c
    data_len = p->len;
 801530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801530c:	895b      	ldrh	r3, [r3, #10]
 801530e:	877b      	strh	r3, [r7, #58]	; 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8015310:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015312:	2b06      	cmp	r3, #6
 8015314:	f240 80a1 	bls.w	801545a <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8015318:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801531a:	461a      	mov	r2, r3
 801531c:	4963      	ldr	r1, [pc, #396]	; (80154ac <http_parse_request+0x248>)
 801531e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015320:	f000 fd3e 	bl	8015da0 <lwip_strnstr>
 8015324:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8015326:	6a3b      	ldr	r3, [r7, #32]
 8015328:	2b00      	cmp	r3, #0
 801532a:	f000 8096 	beq.w	801545a <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 801532e:	2300      	movs	r3, #0
 8015330:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8015332:	2300      	movs	r3, #0
 8015334:	633b      	str	r3, [r7, #48]	; 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8015336:	2204      	movs	r2, #4
 8015338:	495d      	ldr	r1, [pc, #372]	; (80154b0 <http_parse_request+0x24c>)
 801533a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801533c:	f00c fb2b 	bl	8021996 <strncmp>
 8015340:	4603      	mov	r3, r0
 8015342:	2b00      	cmp	r3, #0
 8015344:	d103      	bne.n	801534e <http_parse_request+0xea>
        sp1 = data + 3;
 8015346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015348:	3303      	adds	r3, #3
 801534a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801534c:	e014      	b.n	8015378 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 801534e:	2205      	movs	r2, #5
 8015350:	4958      	ldr	r1, [pc, #352]	; (80154b4 <http_parse_request+0x250>)
 8015352:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015354:	f00c fb1f 	bl	8021996 <strncmp>
 8015358:	4603      	mov	r3, r0
 801535a:	2b00      	cmp	r3, #0
 801535c:	d105      	bne.n	801536a <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 801535e:	2301      	movs	r3, #1
 8015360:	637b      	str	r3, [r7, #52]	; 0x34
        sp1 = data + 4;
 8015362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015364:	3304      	adds	r3, #4
 8015366:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015368:	e006      	b.n	8015378 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 801536a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801536c:	3304      	adds	r3, #4
 801536e:	2200      	movs	r2, #0
 8015370:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
 8015372:	f06f 030f 	mvn.w	r3, #15
 8015376:	e08a      	b.n	801548e <http_parse_request+0x22a>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8015378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801537a:	1c5a      	adds	r2, r3, #1
 801537c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801537e:	1ad3      	subs	r3, r2, r3
 8015380:	b29b      	uxth	r3, r3
 8015382:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015384:	1ad3      	subs	r3, r2, r3
 8015386:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8015388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801538a:	3301      	adds	r3, #1
 801538c:	8bfa      	ldrh	r2, [r7, #30]
 801538e:	494a      	ldr	r1, [pc, #296]	; (80154b8 <http_parse_request+0x254>)
 8015390:	4618      	mov	r0, r3
 8015392:	f000 fd05 	bl	8015da0 <lwip_strnstr>
 8015396:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8015398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801539a:	2b00      	cmp	r3, #0
 801539c:	d10c      	bne.n	80153b8 <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 801539e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153a0:	3301      	adds	r3, #1
 80153a2:	8bfa      	ldrh	r2, [r7, #30]
 80153a4:	4941      	ldr	r1, [pc, #260]	; (80154ac <http_parse_request+0x248>)
 80153a6:	4618      	mov	r0, r3
 80153a8:	f000 fcfa 	bl	8015da0 <lwip_strnstr>
 80153ac:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 80153ae:	2301      	movs	r3, #1
 80153b0:	633b      	str	r3, [r7, #48]	; 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 80153b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d163      	bne.n	8015480 <http_parse_request+0x21c>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 80153b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153ba:	3301      	adds	r3, #1
 80153bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80153be:	1ad3      	subs	r3, r2, r3
 80153c0:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 80153c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d048      	beq.n	801545a <http_parse_request+0x1f6>
 80153c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80153ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153cc:	429a      	cmp	r2, r3
 80153ce:	d944      	bls.n	801545a <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 80153d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80153d2:	461a      	mov	r2, r3
 80153d4:	4939      	ldr	r1, [pc, #228]	; (80154bc <http_parse_request+0x258>)
 80153d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80153d8:	f000 fce2 	bl	8015da0 <lwip_strnstr>
 80153dc:	4603      	mov	r3, r0
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d03b      	beq.n	801545a <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 80153e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153e4:	3301      	adds	r3, #1
 80153e6:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 80153e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153ea:	2200      	movs	r2, #0
 80153ec:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 80153ee:	8bbb      	ldrh	r3, [r7, #28]
 80153f0:	69ba      	ldr	r2, [r7, #24]
 80153f2:	4413      	add	r3, r2
 80153f4:	2200      	movs	r2, #0
 80153f6:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                                    data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 80153f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d026      	beq.n	801544c <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 80153fe:	68bb      	ldr	r3, [r7, #8]
 8015400:	6a1b      	ldr	r3, [r3, #32]
 8015402:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 8015404:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015408:	9301      	str	r3, [sp, #4]
 801540a:	69bb      	ldr	r3, [r7, #24]
 801540c:	9300      	str	r3, [sp, #0]
 801540e:	4613      	mov	r3, r2
 8015410:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015412:	68b9      	ldr	r1, [r7, #8]
 8015414:	6978      	ldr	r0, [r7, #20]
 8015416:	f7ff fe41 	bl	801509c <http_post_request>
 801541a:	4603      	mov	r3, r0
 801541c:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 801541e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015422:	2b00      	cmp	r3, #0
 8015424:	d00a      	beq.n	801543c <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 8015426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015428:	2220      	movs	r2, #32
 801542a:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 801542c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801542e:	2220      	movs	r2, #32
 8015430:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 8015432:	8bbb      	ldrh	r3, [r7, #28]
 8015434:	69ba      	ldr	r2, [r7, #24]
 8015436:	4413      	add	r3, r2
 8015438:	2220      	movs	r2, #32
 801543a:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 801543c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015440:	f113 0f10 	cmn.w	r3, #16
 8015444:	d01e      	beq.n	8015484 <http_parse_request+0x220>
              goto badrequest;
            }
            return err;
 8015446:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801544a:	e020      	b.n	801548e <http_parse_request+0x22a>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 801544c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801544e:	69b9      	ldr	r1, [r7, #24]
 8015450:	68b8      	ldr	r0, [r7, #8]
 8015452:	f000 f887 	bl	8015564 <http_find_file>
 8015456:	4603      	mov	r3, r0
 8015458:	e019      	b.n	801548e <http_parse_request+0x22a>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 801545a:	68bb      	ldr	r3, [r7, #8]
 801545c:	6a1b      	ldr	r3, [r3, #32]
 801545e:	4618      	mov	r0, r3
 8015460:	f002 f988 	bl	8017774 <pbuf_clen>
 8015464:	4603      	mov	r3, r0
 8015466:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8015468:	68bb      	ldr	r3, [r7, #8]
 801546a:	6a1b      	ldr	r3, [r3, #32]
 801546c:	891b      	ldrh	r3, [r3, #8]
 801546e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015472:	d209      	bcs.n	8015488 <http_parse_request+0x224>
 8015474:	8a3b      	ldrh	r3, [r7, #16]
 8015476:	2b05      	cmp	r3, #5
 8015478:	d806      	bhi.n	8015488 <http_parse_request+0x224>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 801547a:	f06f 0304 	mvn.w	r3, #4
 801547e:	e006      	b.n	801548e <http_parse_request+0x22a>
          goto badrequest;
 8015480:	bf00      	nop
 8015482:	e002      	b.n	801548a <http_parse_request+0x226>
              goto badrequest;
 8015484:	bf00      	nop
 8015486:	e000      	b.n	801548a <http_parse_request+0x226>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 8015488:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 801548a:	f06f 030f 	mvn.w	r3, #15
  }
}
 801548e:	4618      	mov	r0, r3
 8015490:	3740      	adds	r7, #64	; 0x40
 8015492:	46bd      	mov	sp, r7
 8015494:	bd80      	pop	{r7, pc}
 8015496:	bf00      	nop
 8015498:	080243a8 	.word	0x080243a8
 801549c:	08024534 	.word	0x08024534
 80154a0:	080243f0 	.word	0x080243f0
 80154a4:	08024418 	.word	0x08024418
 80154a8:	20004e40 	.word	0x20004e40
 80154ac:	0802449c 	.word	0x0802449c
 80154b0:	08024540 	.word	0x08024540
 80154b4:	08024548 	.word	0x08024548
 80154b8:	08024550 	.word	0x08024550
 80154bc:	0802452c 	.word	0x0802452c

080154c0 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b088      	sub	sp, #32
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	6078      	str	r0, [r7, #4]
 80154c8:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 80154ca:	2300      	movs	r3, #0
 80154cc:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d040      	beq.n	8015556 <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 80154d4:	2300      	movs	r3, #0
 80154d6:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 80154d8:	213f      	movs	r1, #63	; 0x3f
 80154da:	6838      	ldr	r0, [r7, #0]
 80154dc:	f00c fa46 	bl	802196c <strchr>
 80154e0:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d002      	beq.n	80154ee <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	2200      	movs	r2, #0
 80154ec:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 80154ee:	683b      	ldr	r3, [r7, #0]
 80154f0:	613b      	str	r3, [r7, #16]
    ext = uri;
 80154f2:	683b      	ldr	r3, [r7, #0]
 80154f4:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 80154f6:	212e      	movs	r1, #46	; 0x2e
 80154f8:	6938      	ldr	r0, [r7, #16]
 80154fa:	f00c fa37 	bl	802196c <strchr>
 80154fe:	6138      	str	r0, [r7, #16]
 8015500:	e009      	b.n	8015516 <http_uri_is_ssi+0x56>
      ext = sub;
 8015502:	693b      	ldr	r3, [r7, #16]
 8015504:	617b      	str	r3, [r7, #20]
      sub++;
 8015506:	693b      	ldr	r3, [r7, #16]
 8015508:	3301      	adds	r3, #1
 801550a:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 801550c:	212e      	movs	r1, #46	; 0x2e
 801550e:	6938      	ldr	r0, [r7, #16]
 8015510:	f00c fa2c 	bl	802196c <strchr>
 8015514:	6138      	str	r0, [r7, #16]
 8015516:	693b      	ldr	r3, [r7, #16]
 8015518:	2b00      	cmp	r3, #0
 801551a:	d1f2      	bne.n	8015502 <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 801551c:	2300      	movs	r3, #0
 801551e:	61fb      	str	r3, [r7, #28]
 8015520:	e010      	b.n	8015544 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8015522:	4a0f      	ldr	r2, [pc, #60]	; (8015560 <http_uri_is_ssi+0xa0>)
 8015524:	69fb      	ldr	r3, [r7, #28]
 8015526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801552a:	4619      	mov	r1, r3
 801552c:	6978      	ldr	r0, [r7, #20]
 801552e:	f000 fc6d 	bl	8015e0c <lwip_stricmp>
 8015532:	4603      	mov	r3, r0
 8015534:	2b00      	cmp	r3, #0
 8015536:	d102      	bne.n	801553e <http_uri_is_ssi+0x7e>
        tag_check = 1;
 8015538:	2301      	movs	r3, #1
 801553a:	76fb      	strb	r3, [r7, #27]
        break;
 801553c:	e005      	b.n	801554a <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 801553e:	69fb      	ldr	r3, [r7, #28]
 8015540:	3301      	adds	r3, #1
 8015542:	61fb      	str	r3, [r7, #28]
 8015544:	69fb      	ldr	r3, [r7, #28]
 8015546:	2b04      	cmp	r3, #4
 8015548:	d9eb      	bls.n	8015522 <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	2b00      	cmp	r3, #0
 801554e:	d002      	beq.n	8015556 <http_uri_is_ssi+0x96>
      *param = '?';
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	223f      	movs	r2, #63	; 0x3f
 8015554:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 8015556:	7efb      	ldrb	r3, [r7, #27]
}
 8015558:	4618      	mov	r0, r3
 801555a:	3720      	adds	r7, #32
 801555c:	46bd      	mov	sp, r7
 801555e:	bd80      	pop	{r7, pc}
 8015560:	0802ae2c 	.word	0x0802ae2c

08015564 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8015564:	b590      	push	{r4, r7, lr}
 8015566:	b093      	sub	sp, #76	; 0x4c
 8015568:	af02      	add	r7, sp, #8
 801556a:	60f8      	str	r0, [r7, #12]
 801556c:	60b9      	str	r1, [r7, #8]
 801556e:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8015570:	2300      	movs	r3, #0
 8015572:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8015574:	2300      	movs	r3, #0
 8015576:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8015578:	2300      	movs	r3, #0
 801557a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 801557e:	68bb      	ldr	r3, [r7, #8]
 8015580:	4618      	mov	r0, r3
 8015582:	f7ea fe67 	bl	8000254 <strlen>
 8015586:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8015588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801558a:	2b00      	cmp	r3, #0
 801558c:	d072      	beq.n	8015674 <http_find_file+0x110>
 801558e:	68ba      	ldr	r2, [r7, #8]
 8015590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015592:	3b01      	subs	r3, #1
 8015594:	4413      	add	r3, r2
 8015596:	781b      	ldrb	r3, [r3, #0]
 8015598:	2b2f      	cmp	r3, #47	; 0x2f
 801559a:	d16b      	bne.n	8015674 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 801559c:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 801559e:	4a80      	ldr	r2, [pc, #512]	; (80157a0 <http_find_file+0x23c>)
 80155a0:	4293      	cmp	r3, r2
 80155a2:	d102      	bne.n	80155aa <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80155a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155a6:	2b01      	cmp	r3, #1
 80155a8:	d164      	bne.n	8015674 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 80155aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155ac:	3b01      	subs	r3, #1
 80155ae:	2b3f      	cmp	r3, #63	; 0x3f
 80155b0:	bf28      	it	cs
 80155b2:	233f      	movcs	r3, #63	; 0x3f
 80155b4:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 80155b6:	6a3b      	ldr	r3, [r7, #32]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d00a      	beq.n	80155d2 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 80155bc:	68bb      	ldr	r3, [r7, #8]
 80155be:	6a3a      	ldr	r2, [r7, #32]
 80155c0:	4619      	mov	r1, r3
 80155c2:	4877      	ldr	r0, [pc, #476]	; (80157a0 <http_find_file+0x23c>)
 80155c4:	f00b fed4 	bl	8021370 <memcpy>
      http_uri_buf[copy_len] = 0;
 80155c8:	4a75      	ldr	r2, [pc, #468]	; (80157a0 <http_find_file+0x23c>)
 80155ca:	6a3b      	ldr	r3, [r7, #32]
 80155cc:	4413      	add	r3, r2
 80155ce:	2200      	movs	r2, #0
 80155d0:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 80155d2:	2300      	movs	r3, #0
 80155d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80155d6:	e04a      	b.n	801566e <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 80155d8:	6a3b      	ldr	r3, [r7, #32]
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d028      	beq.n	8015630 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 80155de:	6a3b      	ldr	r3, [r7, #32]
 80155e0:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80155e4:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 80155e6:	69fb      	ldr	r3, [r7, #28]
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d01e      	beq.n	801562a <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 80155ec:	4a6d      	ldr	r2, [pc, #436]	; (80157a4 <http_find_file+0x240>)
 80155ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80155f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80155f4:	4618      	mov	r0, r3
 80155f6:	f7ea fe2d 	bl	8000254 <strlen>
 80155fa:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 80155fc:	69ba      	ldr	r2, [r7, #24]
 80155fe:	69fb      	ldr	r3, [r7, #28]
 8015600:	4293      	cmp	r3, r2
 8015602:	bf28      	it	cs
 8015604:	4613      	movcs	r3, r2
 8015606:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8015608:	6a3b      	ldr	r3, [r7, #32]
 801560a:	4a65      	ldr	r2, [pc, #404]	; (80157a0 <http_find_file+0x23c>)
 801560c:	1898      	adds	r0, r3, r2
 801560e:	4a65      	ldr	r2, [pc, #404]	; (80157a4 <http_find_file+0x240>)
 8015610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015612:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8015616:	697a      	ldr	r2, [r7, #20]
 8015618:	4619      	mov	r1, r3
 801561a:	f00b fea9 	bl	8021370 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 801561e:	6a3a      	ldr	r2, [r7, #32]
 8015620:	697b      	ldr	r3, [r7, #20]
 8015622:	4413      	add	r3, r2
 8015624:	4a5e      	ldr	r2, [pc, #376]	; (80157a0 <http_find_file+0x23c>)
 8015626:	2100      	movs	r1, #0
 8015628:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 801562a:	4b5d      	ldr	r3, [pc, #372]	; (80157a0 <http_find_file+0x23c>)
 801562c:	62bb      	str	r3, [r7, #40]	; 0x28
 801562e:	e004      	b.n	801563a <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8015630:	4a5c      	ldr	r2, [pc, #368]	; (80157a4 <http_find_file+0x240>)
 8015632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015634:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8015638:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 801563a:	68fb      	ldr	r3, [r7, #12]
 801563c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801563e:	4618      	mov	r0, r3
 8015640:	f7fe fbb6 	bl	8013db0 <fs_open>
 8015644:	4603      	mov	r3, r0
 8015646:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 8015648:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801564c:	2b00      	cmp	r3, #0
 801564e:	d10b      	bne.n	8015668 <http_find_file+0x104>
        uri = file_name;
 8015650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015652:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 8015658:	4a52      	ldr	r2, [pc, #328]	; (80157a4 <http_find_file+0x240>)
 801565a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801565c:	00db      	lsls	r3, r3, #3
 801565e:	4413      	add	r3, r2
 8015660:	791b      	ldrb	r3, [r3, #4]
 8015662:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 8015666:	e005      	b.n	8015674 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8015668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801566a:	3301      	adds	r3, #1
 801566c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801566e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015670:	2b04      	cmp	r3, #4
 8015672:	d9b1      	bls.n	80155d8 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8015674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015676:	2b00      	cmp	r3, #0
 8015678:	d176      	bne.n	8015768 <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 801567a:	68bb      	ldr	r3, [r7, #8]
 801567c:	213f      	movs	r1, #63	; 0x3f
 801567e:	4618      	mov	r0, r3
 8015680:	f00c f974 	bl	802196c <strchr>
 8015684:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 8015686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015688:	2b00      	cmp	r3, #0
 801568a:	d005      	beq.n	8015698 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 801568c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801568e:	2200      	movs	r2, #0
 8015690:	701a      	strb	r2, [r3, #0]
      params++;
 8015692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015694:	3301      	adds	r3, #1
 8015696:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 8015698:	4b43      	ldr	r3, [pc, #268]	; (80157a8 <http_find_file+0x244>)
 801569a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801569e:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 80156a0:	4b42      	ldr	r3, [pc, #264]	; (80157ac <http_find_file+0x248>)
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d034      	beq.n	8015712 <http_find_file+0x1ae>
 80156a8:	4b41      	ldr	r3, [pc, #260]	; (80157b0 <http_find_file+0x24c>)
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d030      	beq.n	8015712 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 80156b0:	2300      	movs	r3, #0
 80156b2:	633b      	str	r3, [r7, #48]	; 0x30
 80156b4:	e028      	b.n	8015708 <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 80156b6:	68b8      	ldr	r0, [r7, #8]
 80156b8:	4b3d      	ldr	r3, [pc, #244]	; (80157b0 <http_find_file+0x24c>)
 80156ba:	681a      	ldr	r2, [r3, #0]
 80156bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156be:	00db      	lsls	r3, r3, #3
 80156c0:	4413      	add	r3, r2
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	4619      	mov	r1, r3
 80156c6:	f7ea fdbb 	bl	8000240 <strcmp>
 80156ca:	4603      	mov	r3, r0
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d118      	bne.n	8015702 <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 80156d0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80156d2:	68f8      	ldr	r0, [r7, #12]
 80156d4:	f7fe fd20 	bl	8014118 <extract_uri_parameters>
 80156d8:	4603      	mov	r3, r0
 80156da:	4a33      	ldr	r2, [pc, #204]	; (80157a8 <http_find_file+0x244>)
 80156dc:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 80156de:	4b34      	ldr	r3, [pc, #208]	; (80157b0 <http_find_file+0x24c>)
 80156e0:	681a      	ldr	r2, [r3, #0]
 80156e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80156e4:	00db      	lsls	r3, r3, #3
 80156e6:	4413      	add	r3, r2
 80156e8:	685c      	ldr	r4, [r3, #4]
 80156ea:	4b2f      	ldr	r3, [pc, #188]	; (80157a8 <http_find_file+0x244>)
 80156ec:	6819      	ldr	r1, [r3, #0]
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 80156f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80156fa:	47a0      	blx	r4
 80156fc:	4603      	mov	r3, r0
 80156fe:	60bb      	str	r3, [r7, #8]
          break;
 8015700:	e007      	b.n	8015712 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 8015702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015704:	3301      	adds	r3, #1
 8015706:	633b      	str	r3, [r7, #48]	; 0x30
 8015708:	4b28      	ldr	r3, [pc, #160]	; (80157ac <http_find_file+0x248>)
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801570e:	429a      	cmp	r2, r3
 8015710:	dbd1      	blt.n	80156b6 <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	68ba      	ldr	r2, [r7, #8]
 8015716:	4611      	mov	r1, r2
 8015718:	4618      	mov	r0, r3
 801571a:	f7fe fb49 	bl	8013db0 <fs_open>
 801571e:	4603      	mov	r3, r0
 8015720:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 8015722:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015726:	2b00      	cmp	r3, #0
 8015728:	d102      	bne.n	8015730 <http_find_file+0x1cc>
      file = &hs->file_handle;
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	63bb      	str	r3, [r7, #56]	; 0x38
 801572e:	e006      	b.n	801573e <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 8015730:	f107 0308 	add.w	r3, r7, #8
 8015734:	4619      	mov	r1, r3
 8015736:	68f8      	ldr	r0, [r7, #12]
 8015738:	f7ff fc12 	bl	8014f60 <http_get_404_file>
 801573c:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 801573e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015740:	2b00      	cmp	r3, #0
 8015742:	d011      	beq.n	8015768 <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8015744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015746:	7c1b      	ldrb	r3, [r3, #16]
 8015748:	f003 0308 	and.w	r3, r3, #8
 801574c:	2b00      	cmp	r3, #0
 801574e:	d003      	beq.n	8015758 <http_find_file+0x1f4>
        tag_check = 1;
 8015750:	2301      	movs	r3, #1
 8015752:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8015756:	e007      	b.n	8015768 <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 8015758:	68bb      	ldr	r3, [r7, #8]
 801575a:	4619      	mov	r1, r3
 801575c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801575e:	f7ff feaf 	bl	80154c0 <http_uri_is_ssi>
 8015762:	4603      	mov	r3, r0
 8015764:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8015768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801576a:	2b00      	cmp	r3, #0
 801576c:	d106      	bne.n	801577c <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 801576e:	f107 0308 	add.w	r3, r7, #8
 8015772:	4619      	mov	r1, r3
 8015774:	68f8      	ldr	r0, [r7, #12]
 8015776:	f7ff fbf3 	bl	8014f60 <http_get_404_file>
 801577a:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 801577c:	68ba      	ldr	r2, [r7, #8]
 801577e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015780:	9301      	str	r3, [sp, #4]
 8015782:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015786:	9300      	str	r3, [sp, #0]
 8015788:	4613      	mov	r3, r2
 801578a:	687a      	ldr	r2, [r7, #4]
 801578c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801578e:	68f8      	ldr	r0, [r7, #12]
 8015790:	f000 f810 	bl	80157b4 <http_init_file>
 8015794:	4603      	mov	r3, r0
}
 8015796:	4618      	mov	r0, r3
 8015798:	3744      	adds	r7, #68	; 0x44
 801579a:	46bd      	mov	sp, r7
 801579c:	bd90      	pop	{r4, r7, pc}
 801579e:	bf00      	nop
 80157a0:	20005240 	.word	0x20005240
 80157a4:	0802ae40 	.word	0x0802ae40
 80157a8:	20005294 	.word	0x20005294
 80157ac:	20005290 	.word	0x20005290
 80157b0:	2000528c 	.word	0x2000528c

080157b4 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 80157b4:	b580      	push	{r7, lr}
 80157b6:	b088      	sub	sp, #32
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	60f8      	str	r0, [r7, #12]
 80157bc:	60b9      	str	r1, [r7, #8]
 80157be:	607a      	str	r2, [r7, #4]
 80157c0:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 80157c2:	68bb      	ldr	r3, [r7, #8]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d06f      	beq.n	80158a8 <http_init_file+0xf4>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80157c8:	68bb      	ldr	r3, [r7, #8]
 80157ca:	681b      	ldr	r3, [r3, #0]
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d106      	bne.n	80157de <http_init_file+0x2a>
 80157d0:	4b46      	ldr	r3, [pc, #280]	; (80158ec <http_init_file+0x138>)
 80157d2:	f640 120b 	movw	r2, #2315	; 0x90b
 80157d6:	4946      	ldr	r1, [pc, #280]	; (80158f0 <http_init_file+0x13c>)
 80157d8:	4846      	ldr	r0, [pc, #280]	; (80158f4 <http_init_file+0x140>)
 80157da:	f00b fea3 	bl	8021524 <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 80157de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d01c      	beq.n	8015820 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 80157e6:	f7fe fb3a 	bl	8013e5e <http_ssi_state_alloc>
 80157ea:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 80157ec:	69fb      	ldr	r3, [r7, #28]
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d016      	beq.n	8015820 <http_init_file+0x6c>
        ssi->tag_index = 0;
 80157f2:	69fb      	ldr	r3, [r7, #28]
 80157f4:	2200      	movs	r2, #0
 80157f6:	821a      	strh	r2, [r3, #16]
        ssi->tag_state = TAG_NONE;
 80157f8:	69fb      	ldr	r3, [r7, #28]
 80157fa:	2200      	movs	r2, #0
 80157fc:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
        ssi->parsed = file->data;
 8015800:	68bb      	ldr	r3, [r7, #8]
 8015802:	681a      	ldr	r2, [r3, #0]
 8015804:	69fb      	ldr	r3, [r7, #28]
 8015806:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 8015808:	68bb      	ldr	r3, [r7, #8]
 801580a:	685b      	ldr	r3, [r3, #4]
 801580c:	461a      	mov	r2, r3
 801580e:	69fb      	ldr	r3, [r7, #28]
 8015810:	60da      	str	r2, [r3, #12]
        ssi->tag_end = file->data;
 8015812:	68bb      	ldr	r3, [r7, #8]
 8015814:	681a      	ldr	r2, [r3, #0]
 8015816:	69fb      	ldr	r3, [r7, #28]
 8015818:	609a      	str	r2, [r3, #8]
        hs->ssi = ssi;
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	69fa      	ldr	r2, [r7, #28]
 801581e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	68ba      	ldr	r2, [r7, #8]
 8015824:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8015826:	68bb      	ldr	r3, [r7, #8]
 8015828:	681a      	ldr	r2, [r3, #0]
 801582a:	68fb      	ldr	r3, [r7, #12]
 801582c:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 801582e:	68bb      	ldr	r3, [r7, #8]
 8015830:	685b      	ldr	r3, [r3, #4]
 8015832:	2b00      	cmp	r3, #0
 8015834:	da06      	bge.n	8015844 <http_init_file+0x90>
 8015836:	4b2d      	ldr	r3, [pc, #180]	; (80158ec <http_init_file+0x138>)
 8015838:	f640 1234 	movw	r2, #2356	; 0x934
 801583c:	492e      	ldr	r1, [pc, #184]	; (80158f8 <http_init_file+0x144>)
 801583e:	482d      	ldr	r0, [pc, #180]	; (80158f4 <http_init_file+0x140>)
 8015840:	f00b fe70 	bl	8021524 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8015844:	68bb      	ldr	r3, [r7, #8]
 8015846:	685b      	ldr	r3, [r3, #4]
 8015848:	461a      	mov	r2, r3
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	2200      	movs	r2, #0
 8015852:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	2b00      	cmp	r3, #0
 801585a:	d032      	beq.n	80158c2 <http_init_file+0x10e>
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	695b      	ldr	r3, [r3, #20]
 8015860:	7c1b      	ldrb	r3, [r3, #16]
 8015862:	f003 0301 	and.w	r3, r3, #1
 8015866:	2b00      	cmp	r3, #0
 8015868:	d02b      	beq.n	80158c2 <http_init_file+0x10e>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	6998      	ldr	r0, [r3, #24]
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015872:	461a      	mov	r2, r3
 8015874:	4921      	ldr	r1, [pc, #132]	; (80158fc <http_init_file+0x148>)
 8015876:	f000 fa93 	bl	8015da0 <lwip_strnstr>
 801587a:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 801587c:	69bb      	ldr	r3, [r7, #24]
 801587e:	2b00      	cmp	r3, #0
 8015880:	d01f      	beq.n	80158c2 <http_init_file+0x10e>
        int diff = file_start + 4 - hs->file;
 8015882:	69bb      	ldr	r3, [r7, #24]
 8015884:	1d1a      	adds	r2, r3, #4
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	699b      	ldr	r3, [r3, #24]
 801588a:	1ad3      	subs	r3, r2, r3
 801588c:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	699a      	ldr	r2, [r3, #24]
 8015892:	697b      	ldr	r3, [r7, #20]
 8015894:	441a      	add	r2, r3
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801589e:	697b      	ldr	r3, [r7, #20]
 80158a0:	1ad2      	subs	r2, r2, r3
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	625a      	str	r2, [r3, #36]	; 0x24
 80158a6:	e00c      	b.n	80158c2 <http_init_file+0x10e>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	2200      	movs	r2, #0
 80158ac:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	2200      	movs	r2, #0
 80158b2:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 80158b4:	68fb      	ldr	r3, [r7, #12]
 80158b6:	2200      	movs	r2, #0
 80158b8:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 80158ba:	68fb      	ldr	r3, [r7, #12]
 80158bc:	2200      	movs	r2, #0
 80158be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  }
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Determine the HTTP headers to send based on the file extension of
   * the requested URI. */
  if ((hs->handle == NULL) || ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) == 0)) {
 80158c2:	68fb      	ldr	r3, [r7, #12]
 80158c4:	695b      	ldr	r3, [r3, #20]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d006      	beq.n	80158d8 <http_init_file+0x124>
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	695b      	ldr	r3, [r3, #20]
 80158ce:	7c1b      	ldrb	r3, [r3, #16]
 80158d0:	f003 0301 	and.w	r3, r3, #1
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	d103      	bne.n	80158e0 <http_init_file+0x12c>
    get_http_headers(hs, uri);
 80158d8:	6839      	ldr	r1, [r7, #0]
 80158da:	68f8      	ldr	r0, [r7, #12]
 80158dc:	f7fe fd4c 	bl	8014378 <get_http_headers>
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 80158e0:	2300      	movs	r3, #0
}
 80158e2:	4618      	mov	r0, r3
 80158e4:	3720      	adds	r7, #32
 80158e6:	46bd      	mov	sp, r7
 80158e8:	bd80      	pop	{r7, pc}
 80158ea:	bf00      	nop
 80158ec:	080243a8 	.word	0x080243a8
 80158f0:	08024554 	.word	0x08024554
 80158f4:	080243f0 	.word	0x080243f0
 80158f8:	08024568 	.word	0x08024568
 80158fc:	0802452c 	.word	0x0802452c

08015900 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 8015900:	b580      	push	{r7, lr}
 8015902:	b084      	sub	sp, #16
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]
 8015908:	460b      	mov	r3, r1
 801590a:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	2b00      	cmp	r3, #0
 8015914:	d002      	beq.n	801591c <http_err+0x1c>
    http_state_free(hs);
 8015916:	68f8      	ldr	r0, [r7, #12]
 8015918:	f7fe fb14 	bl	8013f44 <http_state_free>
  }
}
 801591c:	bf00      	nop
 801591e:	3710      	adds	r7, #16
 8015920:	46bd      	mov	sp, r7
 8015922:	bd80      	pop	{r7, pc}

08015924 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 8015924:	b580      	push	{r7, lr}
 8015926:	b086      	sub	sp, #24
 8015928:	af00      	add	r7, sp, #0
 801592a:	60f8      	str	r0, [r7, #12]
 801592c:	60b9      	str	r1, [r7, #8]
 801592e:	4613      	mov	r3, r2
 8015930:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 8015936:	697b      	ldr	r3, [r7, #20]
 8015938:	2b00      	cmp	r3, #0
 801593a:	d101      	bne.n	8015940 <http_sent+0x1c>
    return ERR_OK;
 801593c:	2300      	movs	r3, #0
 801593e:	e008      	b.n	8015952 <http_sent+0x2e>
  }

  hs->retries = 0;
 8015940:	697b      	ldr	r3, [r7, #20]
 8015942:	2200      	movs	r2, #0
 8015944:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 8015948:	6979      	ldr	r1, [r7, #20]
 801594a:	68b8      	ldr	r0, [r7, #8]
 801594c:	f7ff faae 	bl	8014eac <http_send>

  return ERR_OK;
 8015950:	2300      	movs	r3, #0
}
 8015952:	4618      	mov	r0, r3
 8015954:	3718      	adds	r7, #24
 8015956:	46bd      	mov	sp, r7
 8015958:	bd80      	pop	{r7, pc}

0801595a <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 801595a:	b580      	push	{r7, lr}
 801595c:	b084      	sub	sp, #16
 801595e:	af00      	add	r7, sp, #0
 8015960:	6078      	str	r0, [r7, #4]
 8015962:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	2b00      	cmp	r3, #0
 801596c:	d107      	bne.n	801597e <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 801596e:	2100      	movs	r1, #0
 8015970:	6838      	ldr	r0, [r7, #0]
 8015972:	f7fe fbb5 	bl	80140e0 <http_close_conn>
 8015976:	4603      	mov	r3, r0
 8015978:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 801597a:	2300      	movs	r3, #0
 801597c:	e021      	b.n	80159c2 <http_poll+0x68>
  } else {
    hs->retries++;
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015984:	3301      	adds	r3, #1
 8015986:	b2da      	uxtb	r2, r3
 8015988:	68fb      	ldr	r3, [r7, #12]
 801598a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015994:	2b04      	cmp	r3, #4
 8015996:	d105      	bne.n	80159a4 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 8015998:	68f9      	ldr	r1, [r7, #12]
 801599a:	6838      	ldr	r0, [r7, #0]
 801599c:	f7fe fba0 	bl	80140e0 <http_close_conn>
      return ERR_OK;
 80159a0:	2300      	movs	r3, #0
 80159a2:	e00e      	b.n	80159c2 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	695b      	ldr	r3, [r3, #20]
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d009      	beq.n	80159c0 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 80159ac:	68f9      	ldr	r1, [r7, #12]
 80159ae:	6838      	ldr	r0, [r7, #0]
 80159b0:	f7ff fa7c 	bl	8014eac <http_send>
 80159b4:	4603      	mov	r3, r0
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d002      	beq.n	80159c0 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 80159ba:	6838      	ldr	r0, [r7, #0]
 80159bc:	f007 f9c6 	bl	801cd4c <tcp_output>
      }
    }
  }

  return ERR_OK;
 80159c0:	2300      	movs	r3, #0
}
 80159c2:	4618      	mov	r0, r3
 80159c4:	3710      	adds	r7, #16
 80159c6:	46bd      	mov	sp, r7
 80159c8:	bd80      	pop	{r7, pc}
	...

080159cc <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80159cc:	b580      	push	{r7, lr}
 80159ce:	b086      	sub	sp, #24
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	60f8      	str	r0, [r7, #12]
 80159d4:	60b9      	str	r1, [r7, #8]
 80159d6:	607a      	str	r2, [r7, #4]
 80159d8:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 80159de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d105      	bne.n	80159f2 <http_recv+0x26>
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d002      	beq.n	80159f2 <http_recv+0x26>
 80159ec:	697b      	ldr	r3, [r7, #20]
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d111      	bne.n	8015a16 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d008      	beq.n	8015a0a <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	891b      	ldrh	r3, [r3, #8]
 80159fc:	4619      	mov	r1, r3
 80159fe:	68b8      	ldr	r0, [r7, #8]
 8015a00:	f002 fd98 	bl	8018534 <tcp_recved>
      pbuf_free(p);
 8015a04:	6878      	ldr	r0, [r7, #4]
 8015a06:	f001 fe27 	bl	8017658 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 8015a0a:	6979      	ldr	r1, [r7, #20]
 8015a0c:	68b8      	ldr	r0, [r7, #8]
 8015a0e:	f7fe fb67 	bl	80140e0 <http_close_conn>
    return ERR_OK;
 8015a12:	2300      	movs	r3, #0
 8015a14:	e072      	b.n	8015afc <http_recv+0x130>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	891b      	ldrh	r3, [r3, #8]
 8015a1a:	4619      	mov	r1, r3
 8015a1c:	68b8      	ldr	r0, [r7, #8]
 8015a1e:	f002 fd89 	bl	8018534 <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 8015a22:	697b      	ldr	r3, [r7, #20]
 8015a24:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d012      	beq.n	8015a52 <http_recv+0x86>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 8015a2c:	697b      	ldr	r3, [r7, #20]
 8015a2e:	2200      	movs	r2, #0
 8015a30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 8015a34:	6879      	ldr	r1, [r7, #4]
 8015a36:	6978      	ldr	r0, [r7, #20]
 8015a38:	f7ff faf0 	bl	801501c <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 8015a3c:	697b      	ldr	r3, [r7, #20]
 8015a3e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d103      	bne.n	8015a4e <http_recv+0x82>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 8015a46:	6979      	ldr	r1, [r7, #20]
 8015a48:	68b8      	ldr	r0, [r7, #8]
 8015a4a:	f7ff fa2f 	bl	8014eac <http_send>
    }
    return ERR_OK;
 8015a4e:	2300      	movs	r3, #0
 8015a50:	e054      	b.n	8015afc <http_recv+0x130>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 8015a52:	697b      	ldr	r3, [r7, #20]
 8015a54:	695b      	ldr	r3, [r3, #20]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d14c      	bne.n	8015af4 <http_recv+0x128>
      err_t parsed = http_parse_request(p, hs, pcb);
 8015a5a:	68ba      	ldr	r2, [r7, #8]
 8015a5c:	6979      	ldr	r1, [r7, #20]
 8015a5e:	6878      	ldr	r0, [r7, #4]
 8015a60:	f7ff fc00 	bl	8015264 <http_parse_request>
 8015a64:	4603      	mov	r3, r0
 8015a66:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8015a68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d015      	beq.n	8015a9c <http_recv+0xd0>
 8015a70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015a74:	f113 0f05 	cmn.w	r3, #5
 8015a78:	d010      	beq.n	8015a9c <http_recv+0xd0>
 8015a7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015a7e:	f113 0f10 	cmn.w	r3, #16
 8015a82:	d00b      	beq.n	8015a9c <http_recv+0xd0>
 8015a84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015a88:	f113 0f08 	cmn.w	r3, #8
 8015a8c:	d006      	beq.n	8015a9c <http_recv+0xd0>
 8015a8e:	4b1d      	ldr	r3, [pc, #116]	; (8015b04 <http_recv+0x138>)
 8015a90:	f640 2204 	movw	r2, #2564	; 0xa04
 8015a94:	491c      	ldr	r1, [pc, #112]	; (8015b08 <http_recv+0x13c>)
 8015a96:	481d      	ldr	r0, [pc, #116]	; (8015b0c <http_recv+0x140>)
 8015a98:	f00b fd44 	bl	8021524 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 8015a9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015aa0:	f113 0f05 	cmn.w	r3, #5
 8015aa4:	d00b      	beq.n	8015abe <http_recv+0xf2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 8015aa6:	697b      	ldr	r3, [r7, #20]
 8015aa8:	6a1b      	ldr	r3, [r3, #32]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d007      	beq.n	8015abe <http_recv+0xf2>
          pbuf_free(hs->req);
 8015aae:	697b      	ldr	r3, [r7, #20]
 8015ab0:	6a1b      	ldr	r3, [r3, #32]
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	f001 fdd0 	bl	8017658 <pbuf_free>
          hs->req = NULL;
 8015ab8:	697b      	ldr	r3, [r7, #20]
 8015aba:	2200      	movs	r2, #0
 8015abc:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 8015abe:	6878      	ldr	r0, [r7, #4]
 8015ac0:	f001 fdca 	bl	8017658 <pbuf_free>
      if (parsed == ERR_OK) {
 8015ac4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d109      	bne.n	8015ae0 <http_recv+0x114>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
 8015acc:	697b      	ldr	r3, [r7, #20]
 8015ace:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d111      	bne.n	8015afa <http_recv+0x12e>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 8015ad6:	6979      	ldr	r1, [r7, #20]
 8015ad8:	68b8      	ldr	r0, [r7, #8]
 8015ada:	f7ff f9e7 	bl	8014eac <http_send>
 8015ade:	e00c      	b.n	8015afa <http_recv+0x12e>
        }
      } else if (parsed == ERR_ARG) {
 8015ae0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015ae4:	f113 0f10 	cmn.w	r3, #16
 8015ae8:	d107      	bne.n	8015afa <http_recv+0x12e>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 8015aea:	6979      	ldr	r1, [r7, #20]
 8015aec:	68b8      	ldr	r0, [r7, #8]
 8015aee:	f7fe faf7 	bl	80140e0 <http_close_conn>
 8015af2:	e002      	b.n	8015afa <http_recv+0x12e>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 8015af4:	6878      	ldr	r0, [r7, #4]
 8015af6:	f001 fdaf 	bl	8017658 <pbuf_free>
    }
  }
  return ERR_OK;
 8015afa:	2300      	movs	r3, #0
}
 8015afc:	4618      	mov	r0, r3
 8015afe:	3718      	adds	r7, #24
 8015b00:	46bd      	mov	sp, r7
 8015b02:	bd80      	pop	{r7, pc}
 8015b04:	080243a8 	.word	0x080243a8
 8015b08:	08024588 	.word	0x08024588
 8015b0c:	080243f0 	.word	0x080243f0

08015b10 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 8015b10:	b580      	push	{r7, lr}
 8015b12:	b086      	sub	sp, #24
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	60f8      	str	r0, [r7, #12]
 8015b18:	60b9      	str	r1, [r7, #8]
 8015b1a:	4613      	mov	r3, r2
 8015b1c:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8015b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d102      	bne.n	8015b2c <http_accept+0x1c>
 8015b26:	68bb      	ldr	r3, [r7, #8]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d102      	bne.n	8015b32 <http_accept+0x22>
    return ERR_VAL;
 8015b2c:	f06f 0305 	mvn.w	r3, #5
 8015b30:	e025      	b.n	8015b7e <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8015b32:	2101      	movs	r1, #1
 8015b34:	68b8      	ldr	r0, [r7, #8]
 8015b36:	f003 f9e1 	bl	8018efc <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 8015b3a:	f7fe f9c5 	bl	8013ec8 <http_state_alloc>
 8015b3e:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 8015b40:	697b      	ldr	r3, [r7, #20]
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d102      	bne.n	8015b4c <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 8015b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015b4a:	e018      	b.n	8015b7e <http_accept+0x6e>
  }
  hs->pcb = pcb;
 8015b4c:	697b      	ldr	r3, [r7, #20]
 8015b4e:	68ba      	ldr	r2, [r7, #8]
 8015b50:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8015b52:	6979      	ldr	r1, [r7, #20]
 8015b54:	68b8      	ldr	r0, [r7, #8]
 8015b56:	f003 fbd1 	bl	80192fc <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8015b5a:	490b      	ldr	r1, [pc, #44]	; (8015b88 <http_accept+0x78>)
 8015b5c:	68b8      	ldr	r0, [r7, #8]
 8015b5e:	f003 fbdf 	bl	8019320 <tcp_recv>
  altcp_err(pcb, http_err);
 8015b62:	490a      	ldr	r1, [pc, #40]	; (8015b8c <http_accept+0x7c>)
 8015b64:	68b8      	ldr	r0, [r7, #8]
 8015b66:	f003 fc1f 	bl	80193a8 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8015b6a:	2204      	movs	r2, #4
 8015b6c:	4908      	ldr	r1, [pc, #32]	; (8015b90 <http_accept+0x80>)
 8015b6e:	68b8      	ldr	r0, [r7, #8]
 8015b70:	f003 fc54 	bl	801941c <tcp_poll>
  altcp_sent(pcb, http_sent);
 8015b74:	4907      	ldr	r1, [pc, #28]	; (8015b94 <http_accept+0x84>)
 8015b76:	68b8      	ldr	r0, [r7, #8]
 8015b78:	f003 fbf4 	bl	8019364 <tcp_sent>

  return ERR_OK;
 8015b7c:	2300      	movs	r3, #0
}
 8015b7e:	4618      	mov	r0, r3
 8015b80:	3718      	adds	r7, #24
 8015b82:	46bd      	mov	sp, r7
 8015b84:	bd80      	pop	{r7, pc}
 8015b86:	bf00      	nop
 8015b88:	080159cd 	.word	0x080159cd
 8015b8c:	08015901 	.word	0x08015901
 8015b90:	0801595b 	.word	0x0801595b
 8015b94:	08015925 	.word	0x08015925

08015b98 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 8015b98:	b580      	push	{r7, lr}
 8015b9a:	b084      	sub	sp, #16
 8015b9c:	af00      	add	r7, sp, #0
 8015b9e:	6078      	str	r0, [r7, #4]
 8015ba0:	460b      	mov	r3, r1
 8015ba2:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d029      	beq.n	8015bfe <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8015baa:	2101      	movs	r1, #1
 8015bac:	6878      	ldr	r0, [r7, #4]
 8015bae:	f003 f9a5 	bl	8018efc <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8015bb2:	887b      	ldrh	r3, [r7, #2]
 8015bb4:	461a      	mov	r2, r3
 8015bb6:	4914      	ldr	r1, [pc, #80]	; (8015c08 <httpd_init_pcb+0x70>)
 8015bb8:	6878      	ldr	r0, [r7, #4]
 8015bba:	f002 faed 	bl	8018198 <tcp_bind>
 8015bbe:	4603      	mov	r3, r0
 8015bc0:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8015bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d006      	beq.n	8015bd8 <httpd_init_pcb+0x40>
 8015bca:	4b10      	ldr	r3, [pc, #64]	; (8015c0c <httpd_init_pcb+0x74>)
 8015bcc:	f640 2257 	movw	r2, #2647	; 0xa57
 8015bd0:	490f      	ldr	r1, [pc, #60]	; (8015c10 <httpd_init_pcb+0x78>)
 8015bd2:	4810      	ldr	r0, [pc, #64]	; (8015c14 <httpd_init_pcb+0x7c>)
 8015bd4:	f00b fca6 	bl	8021524 <iprintf>
    pcb = altcp_listen(pcb);
 8015bd8:	21ff      	movs	r1, #255	; 0xff
 8015bda:	6878      	ldr	r0, [r7, #4]
 8015bdc:	f002 fb94 	bl	8018308 <tcp_listen_with_backlog>
 8015be0:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d106      	bne.n	8015bf6 <httpd_init_pcb+0x5e>
 8015be8:	4b08      	ldr	r3, [pc, #32]	; (8015c0c <httpd_init_pcb+0x74>)
 8015bea:	f640 2259 	movw	r2, #2649	; 0xa59
 8015bee:	490a      	ldr	r1, [pc, #40]	; (8015c18 <httpd_init_pcb+0x80>)
 8015bf0:	4808      	ldr	r0, [pc, #32]	; (8015c14 <httpd_init_pcb+0x7c>)
 8015bf2:	f00b fc97 	bl	8021524 <iprintf>
    altcp_accept(pcb, http_accept);
 8015bf6:	4909      	ldr	r1, [pc, #36]	; (8015c1c <httpd_init_pcb+0x84>)
 8015bf8:	6878      	ldr	r0, [r7, #4]
 8015bfa:	f003 fbf7 	bl	80193ec <tcp_accept>
  }
}
 8015bfe:	bf00      	nop
 8015c00:	3710      	adds	r7, #16
 8015c02:	46bd      	mov	sp, r7
 8015c04:	bd80      	pop	{r7, pc}
 8015c06:	bf00      	nop
 8015c08:	0802af88 	.word	0x0802af88
 8015c0c:	080243a8 	.word	0x080243a8
 8015c10:	080245b4 	.word	0x080245b4
 8015c14:	080243f0 	.word	0x080243f0
 8015c18:	080245d0 	.word	0x080245d0
 8015c1c:	08015b11 	.word	0x08015b11

08015c20 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8015c20:	b580      	push	{r7, lr}
 8015c22:	b082      	sub	sp, #8
 8015c24:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8015c26:	202e      	movs	r0, #46	; 0x2e
 8015c28:	f003 fb5a 	bl	80192e0 <tcp_new_ip_type>
 8015c2c:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d106      	bne.n	8015c42 <httpd_init+0x22>
 8015c34:	4b07      	ldr	r3, [pc, #28]	; (8015c54 <httpd_init+0x34>)
 8015c36:	f640 2272 	movw	r2, #2674	; 0xa72
 8015c3a:	4907      	ldr	r1, [pc, #28]	; (8015c58 <httpd_init+0x38>)
 8015c3c:	4807      	ldr	r0, [pc, #28]	; (8015c5c <httpd_init+0x3c>)
 8015c3e:	f00b fc71 	bl	8021524 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8015c42:	2150      	movs	r1, #80	; 0x50
 8015c44:	6878      	ldr	r0, [r7, #4]
 8015c46:	f7ff ffa7 	bl	8015b98 <httpd_init_pcb>
}
 8015c4a:	bf00      	nop
 8015c4c:	3708      	adds	r7, #8
 8015c4e:	46bd      	mov	sp, r7
 8015c50:	bd80      	pop	{r7, pc}
 8015c52:	bf00      	nop
 8015c54:	080243a8 	.word	0x080243a8
 8015c58:	080245f0 	.word	0x080245f0
 8015c5c:	080243f0 	.word	0x080243f0

08015c60 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 8015c60:	b580      	push	{r7, lr}
 8015c62:	b084      	sub	sp, #16
 8015c64:	af00      	add	r7, sp, #0
 8015c66:	60f8      	str	r0, [r7, #12]
 8015c68:	60b9      	str	r1, [r7, #8]
 8015c6a:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8015c6c:	68fb      	ldr	r3, [r7, #12]
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d106      	bne.n	8015c80 <http_set_ssi_handler+0x20>
 8015c72:	4b14      	ldr	r3, [pc, #80]	; (8015cc4 <http_set_ssi_handler+0x64>)
 8015c74:	f640 2297 	movw	r2, #2711	; 0xa97
 8015c78:	4913      	ldr	r1, [pc, #76]	; (8015cc8 <http_set_ssi_handler+0x68>)
 8015c7a:	4814      	ldr	r0, [pc, #80]	; (8015ccc <http_set_ssi_handler+0x6c>)
 8015c7c:	f00b fc52 	bl	8021524 <iprintf>
  httpd_ssi_handler = ssi_handler;
 8015c80:	4a13      	ldr	r2, [pc, #76]	; (8015cd0 <http_set_ssi_handler+0x70>)
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 8015c86:	68bb      	ldr	r3, [r7, #8]
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d106      	bne.n	8015c9a <http_set_ssi_handler+0x3a>
 8015c8c:	4b0d      	ldr	r3, [pc, #52]	; (8015cc4 <http_set_ssi_handler+0x64>)
 8015c8e:	f640 229e 	movw	r2, #2718	; 0xa9e
 8015c92:	4910      	ldr	r1, [pc, #64]	; (8015cd4 <http_set_ssi_handler+0x74>)
 8015c94:	480d      	ldr	r0, [pc, #52]	; (8015ccc <http_set_ssi_handler+0x6c>)
 8015c96:	f00b fc45 	bl	8021524 <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	dc06      	bgt.n	8015cae <http_set_ssi_handler+0x4e>
 8015ca0:	4b08      	ldr	r3, [pc, #32]	; (8015cc4 <http_set_ssi_handler+0x64>)
 8015ca2:	f640 229f 	movw	r2, #2719	; 0xa9f
 8015ca6:	490c      	ldr	r1, [pc, #48]	; (8015cd8 <http_set_ssi_handler+0x78>)
 8015ca8:	4808      	ldr	r0, [pc, #32]	; (8015ccc <http_set_ssi_handler+0x6c>)
 8015caa:	f00b fc3b 	bl	8021524 <iprintf>

  httpd_tags = tags;
 8015cae:	4a0b      	ldr	r2, [pc, #44]	; (8015cdc <http_set_ssi_handler+0x7c>)
 8015cb0:	68bb      	ldr	r3, [r7, #8]
 8015cb2:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 8015cb4:	4a0a      	ldr	r2, [pc, #40]	; (8015ce0 <http_set_ssi_handler+0x80>)
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 8015cba:	bf00      	nop
 8015cbc:	3710      	adds	r7, #16
 8015cbe:	46bd      	mov	sp, r7
 8015cc0:	bd80      	pop	{r7, pc}
 8015cc2:	bf00      	nop
 8015cc4:	080243a8 	.word	0x080243a8
 8015cc8:	0802460c 	.word	0x0802460c
 8015ccc:	080243f0 	.word	0x080243f0
 8015cd0:	20005280 	.word	0x20005280
 8015cd4:	08024624 	.word	0x08024624
 8015cd8:	08024634 	.word	0x08024634
 8015cdc:	20005288 	.word	0x20005288
 8015ce0:	20005284 	.word	0x20005284

08015ce4 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b082      	sub	sp, #8
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	6078      	str	r0, [r7, #4]
 8015cec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 8015cee:	687b      	ldr	r3, [r7, #4]
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d106      	bne.n	8015d02 <http_set_cgi_handlers+0x1e>
 8015cf4:	4b0d      	ldr	r3, [pc, #52]	; (8015d2c <http_set_cgi_handlers+0x48>)
 8015cf6:	f640 22b2 	movw	r2, #2738	; 0xab2
 8015cfa:	490d      	ldr	r1, [pc, #52]	; (8015d30 <http_set_cgi_handlers+0x4c>)
 8015cfc:	480d      	ldr	r0, [pc, #52]	; (8015d34 <http_set_cgi_handlers+0x50>)
 8015cfe:	f00b fc11 	bl	8021524 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 8015d02:	683b      	ldr	r3, [r7, #0]
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	dc06      	bgt.n	8015d16 <http_set_cgi_handlers+0x32>
 8015d08:	4b08      	ldr	r3, [pc, #32]	; (8015d2c <http_set_cgi_handlers+0x48>)
 8015d0a:	f640 22b3 	movw	r2, #2739	; 0xab3
 8015d0e:	490a      	ldr	r1, [pc, #40]	; (8015d38 <http_set_cgi_handlers+0x54>)
 8015d10:	4808      	ldr	r0, [pc, #32]	; (8015d34 <http_set_cgi_handlers+0x50>)
 8015d12:	f00b fc07 	bl	8021524 <iprintf>

  httpd_cgis = cgis;
 8015d16:	4a09      	ldr	r2, [pc, #36]	; (8015d3c <http_set_cgi_handlers+0x58>)
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 8015d1c:	4a08      	ldr	r2, [pc, #32]	; (8015d40 <http_set_cgi_handlers+0x5c>)
 8015d1e:	683b      	ldr	r3, [r7, #0]
 8015d20:	6013      	str	r3, [r2, #0]
}
 8015d22:	bf00      	nop
 8015d24:	3708      	adds	r7, #8
 8015d26:	46bd      	mov	sp, r7
 8015d28:	bd80      	pop	{r7, pc}
 8015d2a:	bf00      	nop
 8015d2c:	080243a8 	.word	0x080243a8
 8015d30:	0802464c 	.word	0x0802464c
 8015d34:	080243f0 	.word	0x080243f0
 8015d38:	0802465c 	.word	0x0802465c
 8015d3c:	2000528c 	.word	0x2000528c
 8015d40:	20005290 	.word	0x20005290

08015d44 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8015d44:	b480      	push	{r7}
 8015d46:	b083      	sub	sp, #12
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	4603      	mov	r3, r0
 8015d4c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8015d4e:	88fb      	ldrh	r3, [r7, #6]
 8015d50:	021b      	lsls	r3, r3, #8
 8015d52:	b21a      	sxth	r2, r3
 8015d54:	88fb      	ldrh	r3, [r7, #6]
 8015d56:	0a1b      	lsrs	r3, r3, #8
 8015d58:	b29b      	uxth	r3, r3
 8015d5a:	b21b      	sxth	r3, r3
 8015d5c:	4313      	orrs	r3, r2
 8015d5e:	b21b      	sxth	r3, r3
 8015d60:	b29b      	uxth	r3, r3
}
 8015d62:	4618      	mov	r0, r3
 8015d64:	370c      	adds	r7, #12
 8015d66:	46bd      	mov	sp, r7
 8015d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d6c:	4770      	bx	lr

08015d6e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8015d6e:	b480      	push	{r7}
 8015d70:	b083      	sub	sp, #12
 8015d72:	af00      	add	r7, sp, #0
 8015d74:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	061a      	lsls	r2, r3, #24
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	021b      	lsls	r3, r3, #8
 8015d7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8015d82:	431a      	orrs	r2, r3
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	0a1b      	lsrs	r3, r3, #8
 8015d88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015d8c:	431a      	orrs	r2, r3
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	0e1b      	lsrs	r3, r3, #24
 8015d92:	4313      	orrs	r3, r2
}
 8015d94:	4618      	mov	r0, r3
 8015d96:	370c      	adds	r7, #12
 8015d98:	46bd      	mov	sp, r7
 8015d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d9e:	4770      	bx	lr

08015da0 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8015da0:	b580      	push	{r7, lr}
 8015da2:	b086      	sub	sp, #24
 8015da4:	af00      	add	r7, sp, #0
 8015da6:	60f8      	str	r0, [r7, #12]
 8015da8:	60b9      	str	r1, [r7, #8]
 8015daa:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 8015dac:	68b8      	ldr	r0, [r7, #8]
 8015dae:	f7ea fa51 	bl	8000254 <strlen>
 8015db2:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 8015db4:	693b      	ldr	r3, [r7, #16]
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d101      	bne.n	8015dbe <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	e022      	b.n	8015e04 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	617b      	str	r3, [r7, #20]
 8015dc2:	e012      	b.n	8015dea <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8015dc4:	697b      	ldr	r3, [r7, #20]
 8015dc6:	781a      	ldrb	r2, [r3, #0]
 8015dc8:	68bb      	ldr	r3, [r7, #8]
 8015dca:	781b      	ldrb	r3, [r3, #0]
 8015dcc:	429a      	cmp	r2, r3
 8015dce:	d109      	bne.n	8015de4 <lwip_strnstr+0x44>
 8015dd0:	693a      	ldr	r2, [r7, #16]
 8015dd2:	68b9      	ldr	r1, [r7, #8]
 8015dd4:	6978      	ldr	r0, [r7, #20]
 8015dd6:	f00b fdde 	bl	8021996 <strncmp>
 8015dda:	4603      	mov	r3, r0
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d101      	bne.n	8015de4 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 8015de0:	697b      	ldr	r3, [r7, #20]
 8015de2:	e00f      	b.n	8015e04 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8015de4:	697b      	ldr	r3, [r7, #20]
 8015de6:	3301      	adds	r3, #1
 8015de8:	617b      	str	r3, [r7, #20]
 8015dea:	697b      	ldr	r3, [r7, #20]
 8015dec:	781b      	ldrb	r3, [r3, #0]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d007      	beq.n	8015e02 <lwip_strnstr+0x62>
 8015df2:	697a      	ldr	r2, [r7, #20]
 8015df4:	693b      	ldr	r3, [r7, #16]
 8015df6:	441a      	add	r2, r3
 8015df8:	68f9      	ldr	r1, [r7, #12]
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	440b      	add	r3, r1
 8015dfe:	429a      	cmp	r2, r3
 8015e00:	d9e0      	bls.n	8015dc4 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 8015e02:	2300      	movs	r3, #0
}
 8015e04:	4618      	mov	r0, r3
 8015e06:	3718      	adds	r7, #24
 8015e08:	46bd      	mov	sp, r7
 8015e0a:	bd80      	pop	{r7, pc}

08015e0c <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 8015e0c:	b480      	push	{r7}
 8015e0e:	b085      	sub	sp, #20
 8015e10:	af00      	add	r7, sp, #0
 8015e12:	6078      	str	r0, [r7, #4]
 8015e14:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	1c5a      	adds	r2, r3, #1
 8015e1a:	607a      	str	r2, [r7, #4]
 8015e1c:	781b      	ldrb	r3, [r3, #0]
 8015e1e:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 8015e20:	683b      	ldr	r3, [r7, #0]
 8015e22:	1c5a      	adds	r2, r3, #1
 8015e24:	603a      	str	r2, [r7, #0]
 8015e26:	781b      	ldrb	r3, [r3, #0]
 8015e28:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 8015e2a:	7bfa      	ldrb	r2, [r7, #15]
 8015e2c:	7bbb      	ldrb	r3, [r7, #14]
 8015e2e:	429a      	cmp	r2, r3
 8015e30:	d016      	beq.n	8015e60 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 8015e32:	7bfb      	ldrb	r3, [r7, #15]
 8015e34:	f043 0320 	orr.w	r3, r3, #32
 8015e38:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8015e3a:	7b7b      	ldrb	r3, [r7, #13]
 8015e3c:	2b60      	cmp	r3, #96	; 0x60
 8015e3e:	d90c      	bls.n	8015e5a <lwip_stricmp+0x4e>
 8015e40:	7b7b      	ldrb	r3, [r7, #13]
 8015e42:	2b7a      	cmp	r3, #122	; 0x7a
 8015e44:	d809      	bhi.n	8015e5a <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 8015e46:	7bbb      	ldrb	r3, [r7, #14]
 8015e48:	f043 0320 	orr.w	r3, r3, #32
 8015e4c:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 8015e4e:	7b7a      	ldrb	r2, [r7, #13]
 8015e50:	7b3b      	ldrb	r3, [r7, #12]
 8015e52:	429a      	cmp	r2, r3
 8015e54:	d003      	beq.n	8015e5e <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 8015e56:	2301      	movs	r3, #1
 8015e58:	e006      	b.n	8015e68 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 8015e5a:	2301      	movs	r3, #1
 8015e5c:	e004      	b.n	8015e68 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8015e5e:	bf00      	nop
      }
    }
  } while (c1 != 0);
 8015e60:	7bfb      	ldrb	r3, [r7, #15]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d1d7      	bne.n	8015e16 <lwip_stricmp+0xa>
  return 0;
 8015e66:	2300      	movs	r3, #0
}
 8015e68:	4618      	mov	r0, r3
 8015e6a:	3714      	adds	r7, #20
 8015e6c:	46bd      	mov	sp, r7
 8015e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e72:	4770      	bx	lr

08015e74 <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char *result, size_t bufsize, int number)
{
 8015e74:	b580      	push	{r7, lr}
 8015e76:	b088      	sub	sp, #32
 8015e78:	af00      	add	r7, sp, #0
 8015e7a:	60f8      	str	r0, [r7, #12]
 8015e7c:	60b9      	str	r1, [r7, #8]
 8015e7e:	607a      	str	r2, [r7, #4]
  char *res = result;
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	61fb      	str	r3, [r7, #28]
  char *tmp = result + bufsize - 1;
 8015e84:	68bb      	ldr	r3, [r7, #8]
 8015e86:	3b01      	subs	r3, #1
 8015e88:	68fa      	ldr	r2, [r7, #12]
 8015e8a:	4413      	add	r3, r2
 8015e8c:	61bb      	str	r3, [r7, #24]
  int n = (number >= 0) ? number : -number;
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	bfb8      	it	lt
 8015e94:	425b      	neglt	r3, r3
 8015e96:	617b      	str	r3, [r7, #20]

  /* handle invalid bufsize */
  if (bufsize < 2) {
 8015e98:	68bb      	ldr	r3, [r7, #8]
 8015e9a:	2b01      	cmp	r3, #1
 8015e9c:	d806      	bhi.n	8015eac <lwip_itoa+0x38>
    if (bufsize == 1) {
 8015e9e:	68bb      	ldr	r3, [r7, #8]
 8015ea0:	2b01      	cmp	r3, #1
 8015ea2:	d154      	bne.n	8015f4e <lwip_itoa+0xda>
      *result = 0;
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	2200      	movs	r2, #0
 8015ea8:	701a      	strb	r2, [r3, #0]
    }
    return;
 8015eaa:	e050      	b.n	8015f4e <lwip_itoa+0xda>
  }

  /* First, add sign */
  if (number < 0) {
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	da04      	bge.n	8015ebc <lwip_itoa+0x48>
    *res++ = '-';
 8015eb2:	69fb      	ldr	r3, [r7, #28]
 8015eb4:	1c5a      	adds	r2, r3, #1
 8015eb6:	61fa      	str	r2, [r7, #28]
 8015eb8:	222d      	movs	r2, #45	; 0x2d
 8015eba:	701a      	strb	r2, [r3, #0]
  }
  /* Then create the string from the end and stop if buffer full,
     and ensure output string is zero terminated */
  *tmp = 0;
 8015ebc:	69bb      	ldr	r3, [r7, #24]
 8015ebe:	2200      	movs	r2, #0
 8015ec0:	701a      	strb	r2, [r3, #0]
  while ((n != 0) && (tmp > res)) {
 8015ec2:	e01c      	b.n	8015efe <lwip_itoa+0x8a>
    char val = (char)('0' + (n % 10));
 8015ec4:	697a      	ldr	r2, [r7, #20]
 8015ec6:	4b24      	ldr	r3, [pc, #144]	; (8015f58 <lwip_itoa+0xe4>)
 8015ec8:	fb83 1302 	smull	r1, r3, r3, r2
 8015ecc:	1099      	asrs	r1, r3, #2
 8015ece:	17d3      	asrs	r3, r2, #31
 8015ed0:	1ac9      	subs	r1, r1, r3
 8015ed2:	460b      	mov	r3, r1
 8015ed4:	009b      	lsls	r3, r3, #2
 8015ed6:	440b      	add	r3, r1
 8015ed8:	005b      	lsls	r3, r3, #1
 8015eda:	1ad1      	subs	r1, r2, r3
 8015edc:	b2cb      	uxtb	r3, r1
 8015ede:	3330      	adds	r3, #48	; 0x30
 8015ee0:	74fb      	strb	r3, [r7, #19]
    tmp--;
 8015ee2:	69bb      	ldr	r3, [r7, #24]
 8015ee4:	3b01      	subs	r3, #1
 8015ee6:	61bb      	str	r3, [r7, #24]
    *tmp = val;
 8015ee8:	69bb      	ldr	r3, [r7, #24]
 8015eea:	7cfa      	ldrb	r2, [r7, #19]
 8015eec:	701a      	strb	r2, [r3, #0]
    n = n / 10;
 8015eee:	697b      	ldr	r3, [r7, #20]
 8015ef0:	4a19      	ldr	r2, [pc, #100]	; (8015f58 <lwip_itoa+0xe4>)
 8015ef2:	fb82 1203 	smull	r1, r2, r2, r3
 8015ef6:	1092      	asrs	r2, r2, #2
 8015ef8:	17db      	asrs	r3, r3, #31
 8015efa:	1ad3      	subs	r3, r2, r3
 8015efc:	617b      	str	r3, [r7, #20]
  while ((n != 0) && (tmp > res)) {
 8015efe:	697b      	ldr	r3, [r7, #20]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d003      	beq.n	8015f0c <lwip_itoa+0x98>
 8015f04:	69ba      	ldr	r2, [r7, #24]
 8015f06:	69fb      	ldr	r3, [r7, #28]
 8015f08:	429a      	cmp	r2, r3
 8015f0a:	d8db      	bhi.n	8015ec4 <lwip_itoa+0x50>
  }
  if (n) {
 8015f0c:	697b      	ldr	r3, [r7, #20]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d003      	beq.n	8015f1a <lwip_itoa+0xa6>
    /* buffer is too small */
    *result = 0;
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	2200      	movs	r2, #0
 8015f16:	701a      	strb	r2, [r3, #0]
    return;
 8015f18:	e01a      	b.n	8015f50 <lwip_itoa+0xdc>
  }
  if (*tmp == 0) {
 8015f1a:	69bb      	ldr	r3, [r7, #24]
 8015f1c:	781b      	ldrb	r3, [r3, #0]
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d10a      	bne.n	8015f38 <lwip_itoa+0xc4>
    /* Nothing added? */
    *res++ = '0';
 8015f22:	69fb      	ldr	r3, [r7, #28]
 8015f24:	1c5a      	adds	r2, r3, #1
 8015f26:	61fa      	str	r2, [r7, #28]
 8015f28:	2230      	movs	r2, #48	; 0x30
 8015f2a:	701a      	strb	r2, [r3, #0]
    *res++ = 0;
 8015f2c:	69fb      	ldr	r3, [r7, #28]
 8015f2e:	1c5a      	adds	r2, r3, #1
 8015f30:	61fa      	str	r2, [r7, #28]
 8015f32:	2200      	movs	r2, #0
 8015f34:	701a      	strb	r2, [r3, #0]
    return;
 8015f36:	e00b      	b.n	8015f50 <lwip_itoa+0xdc>
  }
  /* move from temporary buffer to output buffer (sign is not moved) */
  memmove(res, tmp, (size_t)((result + bufsize) - tmp));
 8015f38:	68fa      	ldr	r2, [r7, #12]
 8015f3a:	68bb      	ldr	r3, [r7, #8]
 8015f3c:	441a      	add	r2, r3
 8015f3e:	69bb      	ldr	r3, [r7, #24]
 8015f40:	1ad3      	subs	r3, r2, r3
 8015f42:	461a      	mov	r2, r3
 8015f44:	69b9      	ldr	r1, [r7, #24]
 8015f46:	69f8      	ldr	r0, [r7, #28]
 8015f48:	f00b fa20 	bl	802138c <memmove>
 8015f4c:	e000      	b.n	8015f50 <lwip_itoa+0xdc>
    return;
 8015f4e:	bf00      	nop
}
 8015f50:	3720      	adds	r7, #32
 8015f52:	46bd      	mov	sp, r7
 8015f54:	bd80      	pop	{r7, pc}
 8015f56:	bf00      	nop
 8015f58:	66666667 	.word	0x66666667

08015f5c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8015f5c:	b580      	push	{r7, lr}
 8015f5e:	b082      	sub	sp, #8
 8015f60:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8015f62:	2300      	movs	r3, #0
 8015f64:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8015f66:	f00a fce7 	bl	8020938 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8015f6a:	f000 f8d5 	bl	8016118 <mem_init>
  memp_init();
 8015f6e:	f000 fc31 	bl	80167d4 <memp_init>
  pbuf_init();
  netif_init();
 8015f72:	f000 fcf7 	bl	8016964 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8015f76:	f007 ffd9 	bl	801df2c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8015f7a:	f001 fe07 	bl	8017b8c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8015f7e:	f007 ff1b 	bl	801ddb8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8015f82:	bf00      	nop
 8015f84:	3708      	adds	r7, #8
 8015f86:	46bd      	mov	sp, r7
 8015f88:	bd80      	pop	{r7, pc}
	...

08015f8c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8015f8c:	b480      	push	{r7}
 8015f8e:	b083      	sub	sp, #12
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	4603      	mov	r3, r0
 8015f94:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8015f96:	4b05      	ldr	r3, [pc, #20]	; (8015fac <ptr_to_mem+0x20>)
 8015f98:	681a      	ldr	r2, [r3, #0]
 8015f9a:	88fb      	ldrh	r3, [r7, #6]
 8015f9c:	4413      	add	r3, r2
}
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	370c      	adds	r7, #12
 8015fa2:	46bd      	mov	sp, r7
 8015fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fa8:	4770      	bx	lr
 8015faa:	bf00      	nop
 8015fac:	20005298 	.word	0x20005298

08015fb0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8015fb0:	b480      	push	{r7}
 8015fb2:	b083      	sub	sp, #12
 8015fb4:	af00      	add	r7, sp, #0
 8015fb6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8015fb8:	4b05      	ldr	r3, [pc, #20]	; (8015fd0 <mem_to_ptr+0x20>)
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	687a      	ldr	r2, [r7, #4]
 8015fbe:	1ad3      	subs	r3, r2, r3
 8015fc0:	b29b      	uxth	r3, r3
}
 8015fc2:	4618      	mov	r0, r3
 8015fc4:	370c      	adds	r7, #12
 8015fc6:	46bd      	mov	sp, r7
 8015fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fcc:	4770      	bx	lr
 8015fce:	bf00      	nop
 8015fd0:	20005298 	.word	0x20005298

08015fd4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8015fd4:	b590      	push	{r4, r7, lr}
 8015fd6:	b085      	sub	sp, #20
 8015fd8:	af00      	add	r7, sp, #0
 8015fda:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8015fdc:	4b45      	ldr	r3, [pc, #276]	; (80160f4 <plug_holes+0x120>)
 8015fde:	681b      	ldr	r3, [r3, #0]
 8015fe0:	687a      	ldr	r2, [r7, #4]
 8015fe2:	429a      	cmp	r2, r3
 8015fe4:	d206      	bcs.n	8015ff4 <plug_holes+0x20>
 8015fe6:	4b44      	ldr	r3, [pc, #272]	; (80160f8 <plug_holes+0x124>)
 8015fe8:	f240 12df 	movw	r2, #479	; 0x1df
 8015fec:	4943      	ldr	r1, [pc, #268]	; (80160fc <plug_holes+0x128>)
 8015fee:	4844      	ldr	r0, [pc, #272]	; (8016100 <plug_holes+0x12c>)
 8015ff0:	f00b fa98 	bl	8021524 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8015ff4:	4b43      	ldr	r3, [pc, #268]	; (8016104 <plug_holes+0x130>)
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	687a      	ldr	r2, [r7, #4]
 8015ffa:	429a      	cmp	r2, r3
 8015ffc:	d306      	bcc.n	801600c <plug_holes+0x38>
 8015ffe:	4b3e      	ldr	r3, [pc, #248]	; (80160f8 <plug_holes+0x124>)
 8016000:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016004:	4940      	ldr	r1, [pc, #256]	; (8016108 <plug_holes+0x134>)
 8016006:	483e      	ldr	r0, [pc, #248]	; (8016100 <plug_holes+0x12c>)
 8016008:	f00b fa8c 	bl	8021524 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	791b      	ldrb	r3, [r3, #4]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d006      	beq.n	8016022 <plug_holes+0x4e>
 8016014:	4b38      	ldr	r3, [pc, #224]	; (80160f8 <plug_holes+0x124>)
 8016016:	f240 12e1 	movw	r2, #481	; 0x1e1
 801601a:	493c      	ldr	r1, [pc, #240]	; (801610c <plug_holes+0x138>)
 801601c:	4838      	ldr	r0, [pc, #224]	; (8016100 <plug_holes+0x12c>)
 801601e:	f00b fa81 	bl	8021524 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	881b      	ldrh	r3, [r3, #0]
 8016026:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 801602a:	d906      	bls.n	801603a <plug_holes+0x66>
 801602c:	4b32      	ldr	r3, [pc, #200]	; (80160f8 <plug_holes+0x124>)
 801602e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8016032:	4937      	ldr	r1, [pc, #220]	; (8016110 <plug_holes+0x13c>)
 8016034:	4832      	ldr	r0, [pc, #200]	; (8016100 <plug_holes+0x12c>)
 8016036:	f00b fa75 	bl	8021524 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	881b      	ldrh	r3, [r3, #0]
 801603e:	4618      	mov	r0, r3
 8016040:	f7ff ffa4 	bl	8015f8c <ptr_to_mem>
 8016044:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8016046:	687a      	ldr	r2, [r7, #4]
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	429a      	cmp	r2, r3
 801604c:	d024      	beq.n	8016098 <plug_holes+0xc4>
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	791b      	ldrb	r3, [r3, #4]
 8016052:	2b00      	cmp	r3, #0
 8016054:	d120      	bne.n	8016098 <plug_holes+0xc4>
 8016056:	4b2b      	ldr	r3, [pc, #172]	; (8016104 <plug_holes+0x130>)
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	68fa      	ldr	r2, [r7, #12]
 801605c:	429a      	cmp	r2, r3
 801605e:	d01b      	beq.n	8016098 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8016060:	4b2c      	ldr	r3, [pc, #176]	; (8016114 <plug_holes+0x140>)
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	68fa      	ldr	r2, [r7, #12]
 8016066:	429a      	cmp	r2, r3
 8016068:	d102      	bne.n	8016070 <plug_holes+0x9c>
      lfree = mem;
 801606a:	4a2a      	ldr	r2, [pc, #168]	; (8016114 <plug_holes+0x140>)
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	881a      	ldrh	r2, [r3, #0]
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	881b      	ldrh	r3, [r3, #0]
 801607c:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 8016080:	d00a      	beq.n	8016098 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	881b      	ldrh	r3, [r3, #0]
 8016086:	4618      	mov	r0, r3
 8016088:	f7ff ff80 	bl	8015f8c <ptr_to_mem>
 801608c:	4604      	mov	r4, r0
 801608e:	6878      	ldr	r0, [r7, #4]
 8016090:	f7ff ff8e 	bl	8015fb0 <mem_to_ptr>
 8016094:	4603      	mov	r3, r0
 8016096:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	885b      	ldrh	r3, [r3, #2]
 801609c:	4618      	mov	r0, r3
 801609e:	f7ff ff75 	bl	8015f8c <ptr_to_mem>
 80160a2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80160a4:	68ba      	ldr	r2, [r7, #8]
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	429a      	cmp	r2, r3
 80160aa:	d01f      	beq.n	80160ec <plug_holes+0x118>
 80160ac:	68bb      	ldr	r3, [r7, #8]
 80160ae:	791b      	ldrb	r3, [r3, #4]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d11b      	bne.n	80160ec <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80160b4:	4b17      	ldr	r3, [pc, #92]	; (8016114 <plug_holes+0x140>)
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	687a      	ldr	r2, [r7, #4]
 80160ba:	429a      	cmp	r2, r3
 80160bc:	d102      	bne.n	80160c4 <plug_holes+0xf0>
      lfree = pmem;
 80160be:	4a15      	ldr	r2, [pc, #84]	; (8016114 <plug_holes+0x140>)
 80160c0:	68bb      	ldr	r3, [r7, #8]
 80160c2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	881a      	ldrh	r2, [r3, #0]
 80160c8:	68bb      	ldr	r3, [r7, #8]
 80160ca:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	881b      	ldrh	r3, [r3, #0]
 80160d0:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 80160d4:	d00a      	beq.n	80160ec <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	881b      	ldrh	r3, [r3, #0]
 80160da:	4618      	mov	r0, r3
 80160dc:	f7ff ff56 	bl	8015f8c <ptr_to_mem>
 80160e0:	4604      	mov	r4, r0
 80160e2:	68b8      	ldr	r0, [r7, #8]
 80160e4:	f7ff ff64 	bl	8015fb0 <mem_to_ptr>
 80160e8:	4603      	mov	r3, r0
 80160ea:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80160ec:	bf00      	nop
 80160ee:	3714      	adds	r7, #20
 80160f0:	46bd      	mov	sp, r7
 80160f2:	bd90      	pop	{r4, r7, pc}
 80160f4:	20005298 	.word	0x20005298
 80160f8:	08024678 	.word	0x08024678
 80160fc:	080246a8 	.word	0x080246a8
 8016100:	080246c0 	.word	0x080246c0
 8016104:	2000529c 	.word	0x2000529c
 8016108:	080246e8 	.word	0x080246e8
 801610c:	08024704 	.word	0x08024704
 8016110:	08024720 	.word	0x08024720
 8016114:	200052a4 	.word	0x200052a4

08016118 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8016118:	b580      	push	{r7, lr}
 801611a:	b082      	sub	sp, #8
 801611c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801611e:	4b1f      	ldr	r3, [pc, #124]	; (801619c <mem_init+0x84>)
 8016120:	3303      	adds	r3, #3
 8016122:	f023 0303 	bic.w	r3, r3, #3
 8016126:	461a      	mov	r2, r3
 8016128:	4b1d      	ldr	r3, [pc, #116]	; (80161a0 <mem_init+0x88>)
 801612a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801612c:	4b1c      	ldr	r3, [pc, #112]	; (80161a0 <mem_init+0x88>)
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8016138:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	2200      	movs	r2, #0
 801613e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	2200      	movs	r2, #0
 8016144:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8016146:	f44f 40f0 	mov.w	r0, #30720	; 0x7800
 801614a:	f7ff ff1f 	bl	8015f8c <ptr_to_mem>
 801614e:	4603      	mov	r3, r0
 8016150:	4a14      	ldr	r2, [pc, #80]	; (80161a4 <mem_init+0x8c>)
 8016152:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8016154:	4b13      	ldr	r3, [pc, #76]	; (80161a4 <mem_init+0x8c>)
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	2201      	movs	r2, #1
 801615a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 801615c:	4b11      	ldr	r3, [pc, #68]	; (80161a4 <mem_init+0x8c>)
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8016164:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8016166:	4b0f      	ldr	r3, [pc, #60]	; (80161a4 <mem_init+0x8c>)
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 801616e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8016170:	4b0b      	ldr	r3, [pc, #44]	; (80161a0 <mem_init+0x88>)
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	4a0c      	ldr	r2, [pc, #48]	; (80161a8 <mem_init+0x90>)
 8016176:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8016178:	480c      	ldr	r0, [pc, #48]	; (80161ac <mem_init+0x94>)
 801617a:	f00a fbeb 	bl	8020954 <sys_mutex_new>
 801617e:	4603      	mov	r3, r0
 8016180:	2b00      	cmp	r3, #0
 8016182:	d006      	beq.n	8016192 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8016184:	4b0a      	ldr	r3, [pc, #40]	; (80161b0 <mem_init+0x98>)
 8016186:	f240 221f 	movw	r2, #543	; 0x21f
 801618a:	490a      	ldr	r1, [pc, #40]	; (80161b4 <mem_init+0x9c>)
 801618c:	480a      	ldr	r0, [pc, #40]	; (80161b8 <mem_init+0xa0>)
 801618e:	f00b f9c9 	bl	8021524 <iprintf>
  }
}
 8016192:	bf00      	nop
 8016194:	3708      	adds	r7, #8
 8016196:	46bd      	mov	sp, r7
 8016198:	bd80      	pop	{r7, pc}
 801619a:	bf00      	nop
 801619c:	200110d4 	.word	0x200110d4
 80161a0:	20005298 	.word	0x20005298
 80161a4:	2000529c 	.word	0x2000529c
 80161a8:	200052a4 	.word	0x200052a4
 80161ac:	200052a0 	.word	0x200052a0
 80161b0:	08024678 	.word	0x08024678
 80161b4:	0802474c 	.word	0x0802474c
 80161b8:	080246c0 	.word	0x080246c0

080161bc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80161bc:	b580      	push	{r7, lr}
 80161be:	b086      	sub	sp, #24
 80161c0:	af00      	add	r7, sp, #0
 80161c2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80161c4:	6878      	ldr	r0, [r7, #4]
 80161c6:	f7ff fef3 	bl	8015fb0 <mem_to_ptr>
 80161ca:	4603      	mov	r3, r0
 80161cc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	881b      	ldrh	r3, [r3, #0]
 80161d2:	4618      	mov	r0, r3
 80161d4:	f7ff feda 	bl	8015f8c <ptr_to_mem>
 80161d8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	885b      	ldrh	r3, [r3, #2]
 80161de:	4618      	mov	r0, r3
 80161e0:	f7ff fed4 	bl	8015f8c <ptr_to_mem>
 80161e4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	881b      	ldrh	r3, [r3, #0]
 80161ea:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 80161ee:	d818      	bhi.n	8016222 <mem_link_valid+0x66>
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	885b      	ldrh	r3, [r3, #2]
 80161f4:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 80161f8:	d813      	bhi.n	8016222 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80161fe:	8afa      	ldrh	r2, [r7, #22]
 8016200:	429a      	cmp	r2, r3
 8016202:	d004      	beq.n	801620e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	881b      	ldrh	r3, [r3, #0]
 8016208:	8afa      	ldrh	r2, [r7, #22]
 801620a:	429a      	cmp	r2, r3
 801620c:	d109      	bne.n	8016222 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801620e:	4b08      	ldr	r3, [pc, #32]	; (8016230 <mem_link_valid+0x74>)
 8016210:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8016212:	693a      	ldr	r2, [r7, #16]
 8016214:	429a      	cmp	r2, r3
 8016216:	d006      	beq.n	8016226 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8016218:	693b      	ldr	r3, [r7, #16]
 801621a:	885b      	ldrh	r3, [r3, #2]
 801621c:	8afa      	ldrh	r2, [r7, #22]
 801621e:	429a      	cmp	r2, r3
 8016220:	d001      	beq.n	8016226 <mem_link_valid+0x6a>
    return 0;
 8016222:	2300      	movs	r3, #0
 8016224:	e000      	b.n	8016228 <mem_link_valid+0x6c>
  }
  return 1;
 8016226:	2301      	movs	r3, #1
}
 8016228:	4618      	mov	r0, r3
 801622a:	3718      	adds	r7, #24
 801622c:	46bd      	mov	sp, r7
 801622e:	bd80      	pop	{r7, pc}
 8016230:	2000529c 	.word	0x2000529c

08016234 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8016234:	b580      	push	{r7, lr}
 8016236:	b088      	sub	sp, #32
 8016238:	af00      	add	r7, sp, #0
 801623a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	2b00      	cmp	r3, #0
 8016240:	d070      	beq.n	8016324 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	f003 0303 	and.w	r3, r3, #3
 8016248:	2b00      	cmp	r3, #0
 801624a:	d00d      	beq.n	8016268 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801624c:	4b37      	ldr	r3, [pc, #220]	; (801632c <mem_free+0xf8>)
 801624e:	f240 2273 	movw	r2, #627	; 0x273
 8016252:	4937      	ldr	r1, [pc, #220]	; (8016330 <mem_free+0xfc>)
 8016254:	4837      	ldr	r0, [pc, #220]	; (8016334 <mem_free+0x100>)
 8016256:	f00b f965 	bl	8021524 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801625a:	f00a fbd9 	bl	8020a10 <sys_arch_protect>
 801625e:	60f8      	str	r0, [r7, #12]
 8016260:	68f8      	ldr	r0, [r7, #12]
 8016262:	f00a fbe3 	bl	8020a2c <sys_arch_unprotect>
    return;
 8016266:	e05e      	b.n	8016326 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	3b08      	subs	r3, #8
 801626c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801626e:	4b32      	ldr	r3, [pc, #200]	; (8016338 <mem_free+0x104>)
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	69fa      	ldr	r2, [r7, #28]
 8016274:	429a      	cmp	r2, r3
 8016276:	d306      	bcc.n	8016286 <mem_free+0x52>
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	f103 020c 	add.w	r2, r3, #12
 801627e:	4b2f      	ldr	r3, [pc, #188]	; (801633c <mem_free+0x108>)
 8016280:	681b      	ldr	r3, [r3, #0]
 8016282:	429a      	cmp	r2, r3
 8016284:	d90d      	bls.n	80162a2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8016286:	4b29      	ldr	r3, [pc, #164]	; (801632c <mem_free+0xf8>)
 8016288:	f240 227f 	movw	r2, #639	; 0x27f
 801628c:	492c      	ldr	r1, [pc, #176]	; (8016340 <mem_free+0x10c>)
 801628e:	4829      	ldr	r0, [pc, #164]	; (8016334 <mem_free+0x100>)
 8016290:	f00b f948 	bl	8021524 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8016294:	f00a fbbc 	bl	8020a10 <sys_arch_protect>
 8016298:	6138      	str	r0, [r7, #16]
 801629a:	6938      	ldr	r0, [r7, #16]
 801629c:	f00a fbc6 	bl	8020a2c <sys_arch_unprotect>
    return;
 80162a0:	e041      	b.n	8016326 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80162a2:	4828      	ldr	r0, [pc, #160]	; (8016344 <mem_free+0x110>)
 80162a4:	f00a fb72 	bl	802098c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80162a8:	69fb      	ldr	r3, [r7, #28]
 80162aa:	791b      	ldrb	r3, [r3, #4]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d110      	bne.n	80162d2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80162b0:	4b1e      	ldr	r3, [pc, #120]	; (801632c <mem_free+0xf8>)
 80162b2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80162b6:	4924      	ldr	r1, [pc, #144]	; (8016348 <mem_free+0x114>)
 80162b8:	481e      	ldr	r0, [pc, #120]	; (8016334 <mem_free+0x100>)
 80162ba:	f00b f933 	bl	8021524 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80162be:	4821      	ldr	r0, [pc, #132]	; (8016344 <mem_free+0x110>)
 80162c0:	f00a fb73 	bl	80209aa <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80162c4:	f00a fba4 	bl	8020a10 <sys_arch_protect>
 80162c8:	6178      	str	r0, [r7, #20]
 80162ca:	6978      	ldr	r0, [r7, #20]
 80162cc:	f00a fbae 	bl	8020a2c <sys_arch_unprotect>
    return;
 80162d0:	e029      	b.n	8016326 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80162d2:	69f8      	ldr	r0, [r7, #28]
 80162d4:	f7ff ff72 	bl	80161bc <mem_link_valid>
 80162d8:	4603      	mov	r3, r0
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d110      	bne.n	8016300 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80162de:	4b13      	ldr	r3, [pc, #76]	; (801632c <mem_free+0xf8>)
 80162e0:	f240 2295 	movw	r2, #661	; 0x295
 80162e4:	4919      	ldr	r1, [pc, #100]	; (801634c <mem_free+0x118>)
 80162e6:	4813      	ldr	r0, [pc, #76]	; (8016334 <mem_free+0x100>)
 80162e8:	f00b f91c 	bl	8021524 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80162ec:	4815      	ldr	r0, [pc, #84]	; (8016344 <mem_free+0x110>)
 80162ee:	f00a fb5c 	bl	80209aa <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80162f2:	f00a fb8d 	bl	8020a10 <sys_arch_protect>
 80162f6:	61b8      	str	r0, [r7, #24]
 80162f8:	69b8      	ldr	r0, [r7, #24]
 80162fa:	f00a fb97 	bl	8020a2c <sys_arch_unprotect>
    return;
 80162fe:	e012      	b.n	8016326 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8016300:	69fb      	ldr	r3, [r7, #28]
 8016302:	2200      	movs	r2, #0
 8016304:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8016306:	4b12      	ldr	r3, [pc, #72]	; (8016350 <mem_free+0x11c>)
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	69fa      	ldr	r2, [r7, #28]
 801630c:	429a      	cmp	r2, r3
 801630e:	d202      	bcs.n	8016316 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8016310:	4a0f      	ldr	r2, [pc, #60]	; (8016350 <mem_free+0x11c>)
 8016312:	69fb      	ldr	r3, [r7, #28]
 8016314:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8016316:	69f8      	ldr	r0, [r7, #28]
 8016318:	f7ff fe5c 	bl	8015fd4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801631c:	4809      	ldr	r0, [pc, #36]	; (8016344 <mem_free+0x110>)
 801631e:	f00a fb44 	bl	80209aa <sys_mutex_unlock>
 8016322:	e000      	b.n	8016326 <mem_free+0xf2>
    return;
 8016324:	bf00      	nop
}
 8016326:	3720      	adds	r7, #32
 8016328:	46bd      	mov	sp, r7
 801632a:	bd80      	pop	{r7, pc}
 801632c:	08024678 	.word	0x08024678
 8016330:	08024768 	.word	0x08024768
 8016334:	080246c0 	.word	0x080246c0
 8016338:	20005298 	.word	0x20005298
 801633c:	2000529c 	.word	0x2000529c
 8016340:	0802478c 	.word	0x0802478c
 8016344:	200052a0 	.word	0x200052a0
 8016348:	080247a8 	.word	0x080247a8
 801634c:	080247d0 	.word	0x080247d0
 8016350:	200052a4 	.word	0x200052a4

08016354 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8016354:	b580      	push	{r7, lr}
 8016356:	b088      	sub	sp, #32
 8016358:	af00      	add	r7, sp, #0
 801635a:	6078      	str	r0, [r7, #4]
 801635c:	460b      	mov	r3, r1
 801635e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8016360:	887b      	ldrh	r3, [r7, #2]
 8016362:	3303      	adds	r3, #3
 8016364:	b29b      	uxth	r3, r3
 8016366:	f023 0303 	bic.w	r3, r3, #3
 801636a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801636c:	8bfb      	ldrh	r3, [r7, #30]
 801636e:	2b0b      	cmp	r3, #11
 8016370:	d801      	bhi.n	8016376 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8016372:	230c      	movs	r3, #12
 8016374:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8016376:	8bfb      	ldrh	r3, [r7, #30]
 8016378:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 801637c:	d803      	bhi.n	8016386 <mem_trim+0x32>
 801637e:	8bfa      	ldrh	r2, [r7, #30]
 8016380:	887b      	ldrh	r3, [r7, #2]
 8016382:	429a      	cmp	r2, r3
 8016384:	d201      	bcs.n	801638a <mem_trim+0x36>
    return NULL;
 8016386:	2300      	movs	r3, #0
 8016388:	e0d8      	b.n	801653c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801638a:	4b6e      	ldr	r3, [pc, #440]	; (8016544 <mem_trim+0x1f0>)
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	687a      	ldr	r2, [r7, #4]
 8016390:	429a      	cmp	r2, r3
 8016392:	d304      	bcc.n	801639e <mem_trim+0x4a>
 8016394:	4b6c      	ldr	r3, [pc, #432]	; (8016548 <mem_trim+0x1f4>)
 8016396:	681b      	ldr	r3, [r3, #0]
 8016398:	687a      	ldr	r2, [r7, #4]
 801639a:	429a      	cmp	r2, r3
 801639c:	d306      	bcc.n	80163ac <mem_trim+0x58>
 801639e:	4b6b      	ldr	r3, [pc, #428]	; (801654c <mem_trim+0x1f8>)
 80163a0:	f240 22d1 	movw	r2, #721	; 0x2d1
 80163a4:	496a      	ldr	r1, [pc, #424]	; (8016550 <mem_trim+0x1fc>)
 80163a6:	486b      	ldr	r0, [pc, #428]	; (8016554 <mem_trim+0x200>)
 80163a8:	f00b f8bc 	bl	8021524 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80163ac:	4b65      	ldr	r3, [pc, #404]	; (8016544 <mem_trim+0x1f0>)
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	687a      	ldr	r2, [r7, #4]
 80163b2:	429a      	cmp	r2, r3
 80163b4:	d304      	bcc.n	80163c0 <mem_trim+0x6c>
 80163b6:	4b64      	ldr	r3, [pc, #400]	; (8016548 <mem_trim+0x1f4>)
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	687a      	ldr	r2, [r7, #4]
 80163bc:	429a      	cmp	r2, r3
 80163be:	d307      	bcc.n	80163d0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80163c0:	f00a fb26 	bl	8020a10 <sys_arch_protect>
 80163c4:	60b8      	str	r0, [r7, #8]
 80163c6:	68b8      	ldr	r0, [r7, #8]
 80163c8:	f00a fb30 	bl	8020a2c <sys_arch_unprotect>
    return rmem;
 80163cc:	687b      	ldr	r3, [r7, #4]
 80163ce:	e0b5      	b.n	801653c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	3b08      	subs	r3, #8
 80163d4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80163d6:	69b8      	ldr	r0, [r7, #24]
 80163d8:	f7ff fdea 	bl	8015fb0 <mem_to_ptr>
 80163dc:	4603      	mov	r3, r0
 80163de:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80163e0:	69bb      	ldr	r3, [r7, #24]
 80163e2:	881a      	ldrh	r2, [r3, #0]
 80163e4:	8afb      	ldrh	r3, [r7, #22]
 80163e6:	1ad3      	subs	r3, r2, r3
 80163e8:	b29b      	uxth	r3, r3
 80163ea:	3b08      	subs	r3, #8
 80163ec:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80163ee:	8bfa      	ldrh	r2, [r7, #30]
 80163f0:	8abb      	ldrh	r3, [r7, #20]
 80163f2:	429a      	cmp	r2, r3
 80163f4:	d906      	bls.n	8016404 <mem_trim+0xb0>
 80163f6:	4b55      	ldr	r3, [pc, #340]	; (801654c <mem_trim+0x1f8>)
 80163f8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80163fc:	4956      	ldr	r1, [pc, #344]	; (8016558 <mem_trim+0x204>)
 80163fe:	4855      	ldr	r0, [pc, #340]	; (8016554 <mem_trim+0x200>)
 8016400:	f00b f890 	bl	8021524 <iprintf>
  if (newsize > size) {
 8016404:	8bfa      	ldrh	r2, [r7, #30]
 8016406:	8abb      	ldrh	r3, [r7, #20]
 8016408:	429a      	cmp	r2, r3
 801640a:	d901      	bls.n	8016410 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 801640c:	2300      	movs	r3, #0
 801640e:	e095      	b.n	801653c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8016410:	8bfa      	ldrh	r2, [r7, #30]
 8016412:	8abb      	ldrh	r3, [r7, #20]
 8016414:	429a      	cmp	r2, r3
 8016416:	d101      	bne.n	801641c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	e08f      	b.n	801653c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801641c:	484f      	ldr	r0, [pc, #316]	; (801655c <mem_trim+0x208>)
 801641e:	f00a fab5 	bl	802098c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8016422:	69bb      	ldr	r3, [r7, #24]
 8016424:	881b      	ldrh	r3, [r3, #0]
 8016426:	4618      	mov	r0, r3
 8016428:	f7ff fdb0 	bl	8015f8c <ptr_to_mem>
 801642c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801642e:	693b      	ldr	r3, [r7, #16]
 8016430:	791b      	ldrb	r3, [r3, #4]
 8016432:	2b00      	cmp	r3, #0
 8016434:	d13f      	bne.n	80164b6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8016436:	69bb      	ldr	r3, [r7, #24]
 8016438:	881b      	ldrh	r3, [r3, #0]
 801643a:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 801643e:	d106      	bne.n	801644e <mem_trim+0xfa>
 8016440:	4b42      	ldr	r3, [pc, #264]	; (801654c <mem_trim+0x1f8>)
 8016442:	f240 22f5 	movw	r2, #757	; 0x2f5
 8016446:	4946      	ldr	r1, [pc, #280]	; (8016560 <mem_trim+0x20c>)
 8016448:	4842      	ldr	r0, [pc, #264]	; (8016554 <mem_trim+0x200>)
 801644a:	f00b f86b 	bl	8021524 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801644e:	693b      	ldr	r3, [r7, #16]
 8016450:	881b      	ldrh	r3, [r3, #0]
 8016452:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8016454:	8afa      	ldrh	r2, [r7, #22]
 8016456:	8bfb      	ldrh	r3, [r7, #30]
 8016458:	4413      	add	r3, r2
 801645a:	b29b      	uxth	r3, r3
 801645c:	3308      	adds	r3, #8
 801645e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8016460:	4b40      	ldr	r3, [pc, #256]	; (8016564 <mem_trim+0x210>)
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	693a      	ldr	r2, [r7, #16]
 8016466:	429a      	cmp	r2, r3
 8016468:	d106      	bne.n	8016478 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 801646a:	89fb      	ldrh	r3, [r7, #14]
 801646c:	4618      	mov	r0, r3
 801646e:	f7ff fd8d 	bl	8015f8c <ptr_to_mem>
 8016472:	4603      	mov	r3, r0
 8016474:	4a3b      	ldr	r2, [pc, #236]	; (8016564 <mem_trim+0x210>)
 8016476:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8016478:	89fb      	ldrh	r3, [r7, #14]
 801647a:	4618      	mov	r0, r3
 801647c:	f7ff fd86 	bl	8015f8c <ptr_to_mem>
 8016480:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8016482:	693b      	ldr	r3, [r7, #16]
 8016484:	2200      	movs	r2, #0
 8016486:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8016488:	693b      	ldr	r3, [r7, #16]
 801648a:	89ba      	ldrh	r2, [r7, #12]
 801648c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801648e:	693b      	ldr	r3, [r7, #16]
 8016490:	8afa      	ldrh	r2, [r7, #22]
 8016492:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8016494:	69bb      	ldr	r3, [r7, #24]
 8016496:	89fa      	ldrh	r2, [r7, #14]
 8016498:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801649a:	693b      	ldr	r3, [r7, #16]
 801649c:	881b      	ldrh	r3, [r3, #0]
 801649e:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 80164a2:	d047      	beq.n	8016534 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80164a4:	693b      	ldr	r3, [r7, #16]
 80164a6:	881b      	ldrh	r3, [r3, #0]
 80164a8:	4618      	mov	r0, r3
 80164aa:	f7ff fd6f 	bl	8015f8c <ptr_to_mem>
 80164ae:	4602      	mov	r2, r0
 80164b0:	89fb      	ldrh	r3, [r7, #14]
 80164b2:	8053      	strh	r3, [r2, #2]
 80164b4:	e03e      	b.n	8016534 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80164b6:	8bfb      	ldrh	r3, [r7, #30]
 80164b8:	f103 0214 	add.w	r2, r3, #20
 80164bc:	8abb      	ldrh	r3, [r7, #20]
 80164be:	429a      	cmp	r2, r3
 80164c0:	d838      	bhi.n	8016534 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80164c2:	8afa      	ldrh	r2, [r7, #22]
 80164c4:	8bfb      	ldrh	r3, [r7, #30]
 80164c6:	4413      	add	r3, r2
 80164c8:	b29b      	uxth	r3, r3
 80164ca:	3308      	adds	r3, #8
 80164cc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80164ce:	69bb      	ldr	r3, [r7, #24]
 80164d0:	881b      	ldrh	r3, [r3, #0]
 80164d2:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 80164d6:	d106      	bne.n	80164e6 <mem_trim+0x192>
 80164d8:	4b1c      	ldr	r3, [pc, #112]	; (801654c <mem_trim+0x1f8>)
 80164da:	f240 3216 	movw	r2, #790	; 0x316
 80164de:	4920      	ldr	r1, [pc, #128]	; (8016560 <mem_trim+0x20c>)
 80164e0:	481c      	ldr	r0, [pc, #112]	; (8016554 <mem_trim+0x200>)
 80164e2:	f00b f81f 	bl	8021524 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80164e6:	89fb      	ldrh	r3, [r7, #14]
 80164e8:	4618      	mov	r0, r3
 80164ea:	f7ff fd4f 	bl	8015f8c <ptr_to_mem>
 80164ee:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80164f0:	4b1c      	ldr	r3, [pc, #112]	; (8016564 <mem_trim+0x210>)
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	693a      	ldr	r2, [r7, #16]
 80164f6:	429a      	cmp	r2, r3
 80164f8:	d202      	bcs.n	8016500 <mem_trim+0x1ac>
      lfree = mem2;
 80164fa:	4a1a      	ldr	r2, [pc, #104]	; (8016564 <mem_trim+0x210>)
 80164fc:	693b      	ldr	r3, [r7, #16]
 80164fe:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8016500:	693b      	ldr	r3, [r7, #16]
 8016502:	2200      	movs	r2, #0
 8016504:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8016506:	69bb      	ldr	r3, [r7, #24]
 8016508:	881a      	ldrh	r2, [r3, #0]
 801650a:	693b      	ldr	r3, [r7, #16]
 801650c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801650e:	693b      	ldr	r3, [r7, #16]
 8016510:	8afa      	ldrh	r2, [r7, #22]
 8016512:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8016514:	69bb      	ldr	r3, [r7, #24]
 8016516:	89fa      	ldrh	r2, [r7, #14]
 8016518:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801651a:	693b      	ldr	r3, [r7, #16]
 801651c:	881b      	ldrh	r3, [r3, #0]
 801651e:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 8016522:	d007      	beq.n	8016534 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8016524:	693b      	ldr	r3, [r7, #16]
 8016526:	881b      	ldrh	r3, [r3, #0]
 8016528:	4618      	mov	r0, r3
 801652a:	f7ff fd2f 	bl	8015f8c <ptr_to_mem>
 801652e:	4602      	mov	r2, r0
 8016530:	89fb      	ldrh	r3, [r7, #14]
 8016532:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8016534:	4809      	ldr	r0, [pc, #36]	; (801655c <mem_trim+0x208>)
 8016536:	f00a fa38 	bl	80209aa <sys_mutex_unlock>
  return rmem;
 801653a:	687b      	ldr	r3, [r7, #4]
}
 801653c:	4618      	mov	r0, r3
 801653e:	3720      	adds	r7, #32
 8016540:	46bd      	mov	sp, r7
 8016542:	bd80      	pop	{r7, pc}
 8016544:	20005298 	.word	0x20005298
 8016548:	2000529c 	.word	0x2000529c
 801654c:	08024678 	.word	0x08024678
 8016550:	08024804 	.word	0x08024804
 8016554:	080246c0 	.word	0x080246c0
 8016558:	0802481c 	.word	0x0802481c
 801655c:	200052a0 	.word	0x200052a0
 8016560:	0802483c 	.word	0x0802483c
 8016564:	200052a4 	.word	0x200052a4

08016568 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8016568:	b580      	push	{r7, lr}
 801656a:	b088      	sub	sp, #32
 801656c:	af00      	add	r7, sp, #0
 801656e:	4603      	mov	r3, r0
 8016570:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8016572:	88fb      	ldrh	r3, [r7, #6]
 8016574:	2b00      	cmp	r3, #0
 8016576:	d101      	bne.n	801657c <mem_malloc+0x14>
    return NULL;
 8016578:	2300      	movs	r3, #0
 801657a:	e0e2      	b.n	8016742 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801657c:	88fb      	ldrh	r3, [r7, #6]
 801657e:	3303      	adds	r3, #3
 8016580:	b29b      	uxth	r3, r3
 8016582:	f023 0303 	bic.w	r3, r3, #3
 8016586:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8016588:	8bbb      	ldrh	r3, [r7, #28]
 801658a:	2b0b      	cmp	r3, #11
 801658c:	d801      	bhi.n	8016592 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801658e:	230c      	movs	r3, #12
 8016590:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8016592:	8bbb      	ldrh	r3, [r7, #28]
 8016594:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 8016598:	d803      	bhi.n	80165a2 <mem_malloc+0x3a>
 801659a:	8bba      	ldrh	r2, [r7, #28]
 801659c:	88fb      	ldrh	r3, [r7, #6]
 801659e:	429a      	cmp	r2, r3
 80165a0:	d201      	bcs.n	80165a6 <mem_malloc+0x3e>
    return NULL;
 80165a2:	2300      	movs	r3, #0
 80165a4:	e0cd      	b.n	8016742 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80165a6:	4869      	ldr	r0, [pc, #420]	; (801674c <mem_malloc+0x1e4>)
 80165a8:	f00a f9f0 	bl	802098c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80165ac:	4b68      	ldr	r3, [pc, #416]	; (8016750 <mem_malloc+0x1e8>)
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	4618      	mov	r0, r3
 80165b2:	f7ff fcfd 	bl	8015fb0 <mem_to_ptr>
 80165b6:	4603      	mov	r3, r0
 80165b8:	83fb      	strh	r3, [r7, #30]
 80165ba:	e0b7      	b.n	801672c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80165bc:	8bfb      	ldrh	r3, [r7, #30]
 80165be:	4618      	mov	r0, r3
 80165c0:	f7ff fce4 	bl	8015f8c <ptr_to_mem>
 80165c4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80165c6:	697b      	ldr	r3, [r7, #20]
 80165c8:	791b      	ldrb	r3, [r3, #4]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	f040 80a7 	bne.w	801671e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80165d0:	697b      	ldr	r3, [r7, #20]
 80165d2:	881b      	ldrh	r3, [r3, #0]
 80165d4:	461a      	mov	r2, r3
 80165d6:	8bfb      	ldrh	r3, [r7, #30]
 80165d8:	1ad3      	subs	r3, r2, r3
 80165da:	f1a3 0208 	sub.w	r2, r3, #8
 80165de:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80165e0:	429a      	cmp	r2, r3
 80165e2:	f0c0 809c 	bcc.w	801671e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80165e6:	697b      	ldr	r3, [r7, #20]
 80165e8:	881b      	ldrh	r3, [r3, #0]
 80165ea:	461a      	mov	r2, r3
 80165ec:	8bfb      	ldrh	r3, [r7, #30]
 80165ee:	1ad3      	subs	r3, r2, r3
 80165f0:	f1a3 0208 	sub.w	r2, r3, #8
 80165f4:	8bbb      	ldrh	r3, [r7, #28]
 80165f6:	3314      	adds	r3, #20
 80165f8:	429a      	cmp	r2, r3
 80165fa:	d333      	bcc.n	8016664 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80165fc:	8bfa      	ldrh	r2, [r7, #30]
 80165fe:	8bbb      	ldrh	r3, [r7, #28]
 8016600:	4413      	add	r3, r2
 8016602:	b29b      	uxth	r3, r3
 8016604:	3308      	adds	r3, #8
 8016606:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8016608:	8a7b      	ldrh	r3, [r7, #18]
 801660a:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 801660e:	d106      	bne.n	801661e <mem_malloc+0xb6>
 8016610:	4b50      	ldr	r3, [pc, #320]	; (8016754 <mem_malloc+0x1ec>)
 8016612:	f240 3287 	movw	r2, #903	; 0x387
 8016616:	4950      	ldr	r1, [pc, #320]	; (8016758 <mem_malloc+0x1f0>)
 8016618:	4850      	ldr	r0, [pc, #320]	; (801675c <mem_malloc+0x1f4>)
 801661a:	f00a ff83 	bl	8021524 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801661e:	8a7b      	ldrh	r3, [r7, #18]
 8016620:	4618      	mov	r0, r3
 8016622:	f7ff fcb3 	bl	8015f8c <ptr_to_mem>
 8016626:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	2200      	movs	r2, #0
 801662c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801662e:	697b      	ldr	r3, [r7, #20]
 8016630:	881a      	ldrh	r2, [r3, #0]
 8016632:	68fb      	ldr	r3, [r7, #12]
 8016634:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	8bfa      	ldrh	r2, [r7, #30]
 801663a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801663c:	697b      	ldr	r3, [r7, #20]
 801663e:	8a7a      	ldrh	r2, [r7, #18]
 8016640:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8016642:	697b      	ldr	r3, [r7, #20]
 8016644:	2201      	movs	r2, #1
 8016646:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	881b      	ldrh	r3, [r3, #0]
 801664c:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 8016650:	d00b      	beq.n	801666a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8016652:	68fb      	ldr	r3, [r7, #12]
 8016654:	881b      	ldrh	r3, [r3, #0]
 8016656:	4618      	mov	r0, r3
 8016658:	f7ff fc98 	bl	8015f8c <ptr_to_mem>
 801665c:	4602      	mov	r2, r0
 801665e:	8a7b      	ldrh	r3, [r7, #18]
 8016660:	8053      	strh	r3, [r2, #2]
 8016662:	e002      	b.n	801666a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8016664:	697b      	ldr	r3, [r7, #20]
 8016666:	2201      	movs	r2, #1
 8016668:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801666a:	4b39      	ldr	r3, [pc, #228]	; (8016750 <mem_malloc+0x1e8>)
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	697a      	ldr	r2, [r7, #20]
 8016670:	429a      	cmp	r2, r3
 8016672:	d127      	bne.n	80166c4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8016674:	4b36      	ldr	r3, [pc, #216]	; (8016750 <mem_malloc+0x1e8>)
 8016676:	681b      	ldr	r3, [r3, #0]
 8016678:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801667a:	e005      	b.n	8016688 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801667c:	69bb      	ldr	r3, [r7, #24]
 801667e:	881b      	ldrh	r3, [r3, #0]
 8016680:	4618      	mov	r0, r3
 8016682:	f7ff fc83 	bl	8015f8c <ptr_to_mem>
 8016686:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8016688:	69bb      	ldr	r3, [r7, #24]
 801668a:	791b      	ldrb	r3, [r3, #4]
 801668c:	2b00      	cmp	r3, #0
 801668e:	d004      	beq.n	801669a <mem_malloc+0x132>
 8016690:	4b33      	ldr	r3, [pc, #204]	; (8016760 <mem_malloc+0x1f8>)
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	69ba      	ldr	r2, [r7, #24]
 8016696:	429a      	cmp	r2, r3
 8016698:	d1f0      	bne.n	801667c <mem_malloc+0x114>
          }
          lfree = cur;
 801669a:	4a2d      	ldr	r2, [pc, #180]	; (8016750 <mem_malloc+0x1e8>)
 801669c:	69bb      	ldr	r3, [r7, #24]
 801669e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80166a0:	4b2b      	ldr	r3, [pc, #172]	; (8016750 <mem_malloc+0x1e8>)
 80166a2:	681a      	ldr	r2, [r3, #0]
 80166a4:	4b2e      	ldr	r3, [pc, #184]	; (8016760 <mem_malloc+0x1f8>)
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	429a      	cmp	r2, r3
 80166aa:	d00b      	beq.n	80166c4 <mem_malloc+0x15c>
 80166ac:	4b28      	ldr	r3, [pc, #160]	; (8016750 <mem_malloc+0x1e8>)
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	791b      	ldrb	r3, [r3, #4]
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d006      	beq.n	80166c4 <mem_malloc+0x15c>
 80166b6:	4b27      	ldr	r3, [pc, #156]	; (8016754 <mem_malloc+0x1ec>)
 80166b8:	f240 32b5 	movw	r2, #949	; 0x3b5
 80166bc:	4929      	ldr	r1, [pc, #164]	; (8016764 <mem_malloc+0x1fc>)
 80166be:	4827      	ldr	r0, [pc, #156]	; (801675c <mem_malloc+0x1f4>)
 80166c0:	f00a ff30 	bl	8021524 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80166c4:	4821      	ldr	r0, [pc, #132]	; (801674c <mem_malloc+0x1e4>)
 80166c6:	f00a f970 	bl	80209aa <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80166ca:	8bba      	ldrh	r2, [r7, #28]
 80166cc:	697b      	ldr	r3, [r7, #20]
 80166ce:	4413      	add	r3, r2
 80166d0:	3308      	adds	r3, #8
 80166d2:	4a23      	ldr	r2, [pc, #140]	; (8016760 <mem_malloc+0x1f8>)
 80166d4:	6812      	ldr	r2, [r2, #0]
 80166d6:	4293      	cmp	r3, r2
 80166d8:	d906      	bls.n	80166e8 <mem_malloc+0x180>
 80166da:	4b1e      	ldr	r3, [pc, #120]	; (8016754 <mem_malloc+0x1ec>)
 80166dc:	f240 32b9 	movw	r2, #953	; 0x3b9
 80166e0:	4921      	ldr	r1, [pc, #132]	; (8016768 <mem_malloc+0x200>)
 80166e2:	481e      	ldr	r0, [pc, #120]	; (801675c <mem_malloc+0x1f4>)
 80166e4:	f00a ff1e 	bl	8021524 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80166e8:	697b      	ldr	r3, [r7, #20]
 80166ea:	f003 0303 	and.w	r3, r3, #3
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d006      	beq.n	8016700 <mem_malloc+0x198>
 80166f2:	4b18      	ldr	r3, [pc, #96]	; (8016754 <mem_malloc+0x1ec>)
 80166f4:	f240 32bb 	movw	r2, #955	; 0x3bb
 80166f8:	491c      	ldr	r1, [pc, #112]	; (801676c <mem_malloc+0x204>)
 80166fa:	4818      	ldr	r0, [pc, #96]	; (801675c <mem_malloc+0x1f4>)
 80166fc:	f00a ff12 	bl	8021524 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8016700:	697b      	ldr	r3, [r7, #20]
 8016702:	f003 0303 	and.w	r3, r3, #3
 8016706:	2b00      	cmp	r3, #0
 8016708:	d006      	beq.n	8016718 <mem_malloc+0x1b0>
 801670a:	4b12      	ldr	r3, [pc, #72]	; (8016754 <mem_malloc+0x1ec>)
 801670c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8016710:	4917      	ldr	r1, [pc, #92]	; (8016770 <mem_malloc+0x208>)
 8016712:	4812      	ldr	r0, [pc, #72]	; (801675c <mem_malloc+0x1f4>)
 8016714:	f00a ff06 	bl	8021524 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8016718:	697b      	ldr	r3, [r7, #20]
 801671a:	3308      	adds	r3, #8
 801671c:	e011      	b.n	8016742 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801671e:	8bfb      	ldrh	r3, [r7, #30]
 8016720:	4618      	mov	r0, r3
 8016722:	f7ff fc33 	bl	8015f8c <ptr_to_mem>
 8016726:	4603      	mov	r3, r0
 8016728:	881b      	ldrh	r3, [r3, #0]
 801672a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801672c:	8bfa      	ldrh	r2, [r7, #30]
 801672e:	8bbb      	ldrh	r3, [r7, #28]
 8016730:	f5c3 43f0 	rsb	r3, r3, #30720	; 0x7800
 8016734:	429a      	cmp	r2, r3
 8016736:	f4ff af41 	bcc.w	80165bc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801673a:	4804      	ldr	r0, [pc, #16]	; (801674c <mem_malloc+0x1e4>)
 801673c:	f00a f935 	bl	80209aa <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8016740:	2300      	movs	r3, #0
}
 8016742:	4618      	mov	r0, r3
 8016744:	3720      	adds	r7, #32
 8016746:	46bd      	mov	sp, r7
 8016748:	bd80      	pop	{r7, pc}
 801674a:	bf00      	nop
 801674c:	200052a0 	.word	0x200052a0
 8016750:	200052a4 	.word	0x200052a4
 8016754:	08024678 	.word	0x08024678
 8016758:	0802483c 	.word	0x0802483c
 801675c:	080246c0 	.word	0x080246c0
 8016760:	2000529c 	.word	0x2000529c
 8016764:	08024850 	.word	0x08024850
 8016768:	0802486c 	.word	0x0802486c
 801676c:	0802489c 	.word	0x0802489c
 8016770:	080248cc 	.word	0x080248cc

08016774 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8016774:	b480      	push	{r7}
 8016776:	b085      	sub	sp, #20
 8016778:	af00      	add	r7, sp, #0
 801677a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	689b      	ldr	r3, [r3, #8]
 8016780:	2200      	movs	r2, #0
 8016782:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	685b      	ldr	r3, [r3, #4]
 8016788:	3303      	adds	r3, #3
 801678a:	f023 0303 	bic.w	r3, r3, #3
 801678e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8016790:	2300      	movs	r3, #0
 8016792:	60fb      	str	r3, [r7, #12]
 8016794:	e011      	b.n	80167ba <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	689b      	ldr	r3, [r3, #8]
 801679a:	681a      	ldr	r2, [r3, #0]
 801679c:	68bb      	ldr	r3, [r7, #8]
 801679e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	689b      	ldr	r3, [r3, #8]
 80167a4:	68ba      	ldr	r2, [r7, #8]
 80167a6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	881b      	ldrh	r3, [r3, #0]
 80167ac:	461a      	mov	r2, r3
 80167ae:	68bb      	ldr	r3, [r7, #8]
 80167b0:	4413      	add	r3, r2
 80167b2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80167b4:	68fb      	ldr	r3, [r7, #12]
 80167b6:	3301      	adds	r3, #1
 80167b8:	60fb      	str	r3, [r7, #12]
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	885b      	ldrh	r3, [r3, #2]
 80167be:	461a      	mov	r2, r3
 80167c0:	68fb      	ldr	r3, [r7, #12]
 80167c2:	4293      	cmp	r3, r2
 80167c4:	dbe7      	blt.n	8016796 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80167c6:	bf00      	nop
 80167c8:	bf00      	nop
 80167ca:	3714      	adds	r7, #20
 80167cc:	46bd      	mov	sp, r7
 80167ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167d2:	4770      	bx	lr

080167d4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80167d4:	b580      	push	{r7, lr}
 80167d6:	b082      	sub	sp, #8
 80167d8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80167da:	2300      	movs	r3, #0
 80167dc:	80fb      	strh	r3, [r7, #6]
 80167de:	e009      	b.n	80167f4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80167e0:	88fb      	ldrh	r3, [r7, #6]
 80167e2:	4a08      	ldr	r2, [pc, #32]	; (8016804 <memp_init+0x30>)
 80167e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80167e8:	4618      	mov	r0, r3
 80167ea:	f7ff ffc3 	bl	8016774 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80167ee:	88fb      	ldrh	r3, [r7, #6]
 80167f0:	3301      	adds	r3, #1
 80167f2:	80fb      	strh	r3, [r7, #6]
 80167f4:	88fb      	ldrh	r3, [r7, #6]
 80167f6:	2b0c      	cmp	r3, #12
 80167f8:	d9f2      	bls.n	80167e0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80167fa:	bf00      	nop
 80167fc:	bf00      	nop
 80167fe:	3708      	adds	r7, #8
 8016800:	46bd      	mov	sp, r7
 8016802:	bd80      	pop	{r7, pc}
 8016804:	0802af14 	.word	0x0802af14

08016808 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8016808:	b580      	push	{r7, lr}
 801680a:	b084      	sub	sp, #16
 801680c:	af00      	add	r7, sp, #0
 801680e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8016810:	f00a f8fe 	bl	8020a10 <sys_arch_protect>
 8016814:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	689b      	ldr	r3, [r3, #8]
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801681e:	68bb      	ldr	r3, [r7, #8]
 8016820:	2b00      	cmp	r3, #0
 8016822:	d015      	beq.n	8016850 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	689b      	ldr	r3, [r3, #8]
 8016828:	68ba      	ldr	r2, [r7, #8]
 801682a:	6812      	ldr	r2, [r2, #0]
 801682c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801682e:	68bb      	ldr	r3, [r7, #8]
 8016830:	f003 0303 	and.w	r3, r3, #3
 8016834:	2b00      	cmp	r3, #0
 8016836:	d006      	beq.n	8016846 <do_memp_malloc_pool+0x3e>
 8016838:	4b09      	ldr	r3, [pc, #36]	; (8016860 <do_memp_malloc_pool+0x58>)
 801683a:	f44f 728c 	mov.w	r2, #280	; 0x118
 801683e:	4909      	ldr	r1, [pc, #36]	; (8016864 <do_memp_malloc_pool+0x5c>)
 8016840:	4809      	ldr	r0, [pc, #36]	; (8016868 <do_memp_malloc_pool+0x60>)
 8016842:	f00a fe6f 	bl	8021524 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8016846:	68f8      	ldr	r0, [r7, #12]
 8016848:	f00a f8f0 	bl	8020a2c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801684c:	68bb      	ldr	r3, [r7, #8]
 801684e:	e003      	b.n	8016858 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8016850:	68f8      	ldr	r0, [r7, #12]
 8016852:	f00a f8eb 	bl	8020a2c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8016856:	2300      	movs	r3, #0
}
 8016858:	4618      	mov	r0, r3
 801685a:	3710      	adds	r7, #16
 801685c:	46bd      	mov	sp, r7
 801685e:	bd80      	pop	{r7, pc}
 8016860:	080248f0 	.word	0x080248f0
 8016864:	08024920 	.word	0x08024920
 8016868:	08024944 	.word	0x08024944

0801686c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801686c:	b580      	push	{r7, lr}
 801686e:	b084      	sub	sp, #16
 8016870:	af00      	add	r7, sp, #0
 8016872:	4603      	mov	r3, r0
 8016874:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8016876:	79fb      	ldrb	r3, [r7, #7]
 8016878:	2b0c      	cmp	r3, #12
 801687a:	d908      	bls.n	801688e <memp_malloc+0x22>
 801687c:	4b0a      	ldr	r3, [pc, #40]	; (80168a8 <memp_malloc+0x3c>)
 801687e:	f240 1257 	movw	r2, #343	; 0x157
 8016882:	490a      	ldr	r1, [pc, #40]	; (80168ac <memp_malloc+0x40>)
 8016884:	480a      	ldr	r0, [pc, #40]	; (80168b0 <memp_malloc+0x44>)
 8016886:	f00a fe4d 	bl	8021524 <iprintf>
 801688a:	2300      	movs	r3, #0
 801688c:	e008      	b.n	80168a0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801688e:	79fb      	ldrb	r3, [r7, #7]
 8016890:	4a08      	ldr	r2, [pc, #32]	; (80168b4 <memp_malloc+0x48>)
 8016892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016896:	4618      	mov	r0, r3
 8016898:	f7ff ffb6 	bl	8016808 <do_memp_malloc_pool>
 801689c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801689e:	68fb      	ldr	r3, [r7, #12]
}
 80168a0:	4618      	mov	r0, r3
 80168a2:	3710      	adds	r7, #16
 80168a4:	46bd      	mov	sp, r7
 80168a6:	bd80      	pop	{r7, pc}
 80168a8:	080248f0 	.word	0x080248f0
 80168ac:	08024980 	.word	0x08024980
 80168b0:	08024944 	.word	0x08024944
 80168b4:	0802af14 	.word	0x0802af14

080168b8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80168b8:	b580      	push	{r7, lr}
 80168ba:	b084      	sub	sp, #16
 80168bc:	af00      	add	r7, sp, #0
 80168be:	6078      	str	r0, [r7, #4]
 80168c0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80168c2:	683b      	ldr	r3, [r7, #0]
 80168c4:	f003 0303 	and.w	r3, r3, #3
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d006      	beq.n	80168da <do_memp_free_pool+0x22>
 80168cc:	4b0d      	ldr	r3, [pc, #52]	; (8016904 <do_memp_free_pool+0x4c>)
 80168ce:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80168d2:	490d      	ldr	r1, [pc, #52]	; (8016908 <do_memp_free_pool+0x50>)
 80168d4:	480d      	ldr	r0, [pc, #52]	; (801690c <do_memp_free_pool+0x54>)
 80168d6:	f00a fe25 	bl	8021524 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80168da:	683b      	ldr	r3, [r7, #0]
 80168dc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80168de:	f00a f897 	bl	8020a10 <sys_arch_protect>
 80168e2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	689b      	ldr	r3, [r3, #8]
 80168e8:	681a      	ldr	r2, [r3, #0]
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	689b      	ldr	r3, [r3, #8]
 80168f2:	68fa      	ldr	r2, [r7, #12]
 80168f4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80168f6:	68b8      	ldr	r0, [r7, #8]
 80168f8:	f00a f898 	bl	8020a2c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80168fc:	bf00      	nop
 80168fe:	3710      	adds	r7, #16
 8016900:	46bd      	mov	sp, r7
 8016902:	bd80      	pop	{r7, pc}
 8016904:	080248f0 	.word	0x080248f0
 8016908:	080249a0 	.word	0x080249a0
 801690c:	08024944 	.word	0x08024944

08016910 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8016910:	b580      	push	{r7, lr}
 8016912:	b082      	sub	sp, #8
 8016914:	af00      	add	r7, sp, #0
 8016916:	4603      	mov	r3, r0
 8016918:	6039      	str	r1, [r7, #0]
 801691a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801691c:	79fb      	ldrb	r3, [r7, #7]
 801691e:	2b0c      	cmp	r3, #12
 8016920:	d907      	bls.n	8016932 <memp_free+0x22>
 8016922:	4b0c      	ldr	r3, [pc, #48]	; (8016954 <memp_free+0x44>)
 8016924:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8016928:	490b      	ldr	r1, [pc, #44]	; (8016958 <memp_free+0x48>)
 801692a:	480c      	ldr	r0, [pc, #48]	; (801695c <memp_free+0x4c>)
 801692c:	f00a fdfa 	bl	8021524 <iprintf>
 8016930:	e00c      	b.n	801694c <memp_free+0x3c>

  if (mem == NULL) {
 8016932:	683b      	ldr	r3, [r7, #0]
 8016934:	2b00      	cmp	r3, #0
 8016936:	d008      	beq.n	801694a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8016938:	79fb      	ldrb	r3, [r7, #7]
 801693a:	4a09      	ldr	r2, [pc, #36]	; (8016960 <memp_free+0x50>)
 801693c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016940:	6839      	ldr	r1, [r7, #0]
 8016942:	4618      	mov	r0, r3
 8016944:	f7ff ffb8 	bl	80168b8 <do_memp_free_pool>
 8016948:	e000      	b.n	801694c <memp_free+0x3c>
    return;
 801694a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801694c:	3708      	adds	r7, #8
 801694e:	46bd      	mov	sp, r7
 8016950:	bd80      	pop	{r7, pc}
 8016952:	bf00      	nop
 8016954:	080248f0 	.word	0x080248f0
 8016958:	080249c0 	.word	0x080249c0
 801695c:	08024944 	.word	0x08024944
 8016960:	0802af14 	.word	0x0802af14

08016964 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8016964:	b480      	push	{r7}
 8016966:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8016968:	bf00      	nop
 801696a:	46bd      	mov	sp, r7
 801696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016970:	4770      	bx	lr
	...

08016974 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8016974:	b580      	push	{r7, lr}
 8016976:	b086      	sub	sp, #24
 8016978:	af00      	add	r7, sp, #0
 801697a:	60f8      	str	r0, [r7, #12]
 801697c:	60b9      	str	r1, [r7, #8]
 801697e:	607a      	str	r2, [r7, #4]
 8016980:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	2b00      	cmp	r3, #0
 8016986:	d108      	bne.n	801699a <netif_add+0x26>
 8016988:	4b57      	ldr	r3, [pc, #348]	; (8016ae8 <netif_add+0x174>)
 801698a:	f240 1227 	movw	r2, #295	; 0x127
 801698e:	4957      	ldr	r1, [pc, #348]	; (8016aec <netif_add+0x178>)
 8016990:	4857      	ldr	r0, [pc, #348]	; (8016af0 <netif_add+0x17c>)
 8016992:	f00a fdc7 	bl	8021524 <iprintf>
 8016996:	2300      	movs	r3, #0
 8016998:	e0a2      	b.n	8016ae0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801699c:	2b00      	cmp	r3, #0
 801699e:	d108      	bne.n	80169b2 <netif_add+0x3e>
 80169a0:	4b51      	ldr	r3, [pc, #324]	; (8016ae8 <netif_add+0x174>)
 80169a2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80169a6:	4953      	ldr	r1, [pc, #332]	; (8016af4 <netif_add+0x180>)
 80169a8:	4851      	ldr	r0, [pc, #324]	; (8016af0 <netif_add+0x17c>)
 80169aa:	f00a fdbb 	bl	8021524 <iprintf>
 80169ae:	2300      	movs	r3, #0
 80169b0:	e096      	b.n	8016ae0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80169b2:	68bb      	ldr	r3, [r7, #8]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d101      	bne.n	80169bc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80169b8:	4b4f      	ldr	r3, [pc, #316]	; (8016af8 <netif_add+0x184>)
 80169ba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d101      	bne.n	80169c6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80169c2:	4b4d      	ldr	r3, [pc, #308]	; (8016af8 <netif_add+0x184>)
 80169c4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80169c6:	683b      	ldr	r3, [r7, #0]
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d101      	bne.n	80169d0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80169cc:	4b4a      	ldr	r3, [pc, #296]	; (8016af8 <netif_add+0x184>)
 80169ce:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80169d0:	68fb      	ldr	r3, [r7, #12]
 80169d2:	2200      	movs	r2, #0
 80169d4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	2200      	movs	r2, #0
 80169da:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	2200      	movs	r2, #0
 80169e0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80169e2:	68fb      	ldr	r3, [r7, #12]
 80169e4:	4a45      	ldr	r2, [pc, #276]	; (8016afc <netif_add+0x188>)
 80169e6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	2200      	movs	r2, #0
 80169ec:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	2200      	movs	r2, #0
 80169f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	2200      	movs	r2, #0
 80169fa:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	6a3a      	ldr	r2, [r7, #32]
 8016a00:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8016a02:	4b3f      	ldr	r3, [pc, #252]	; (8016b00 <netif_add+0x18c>)
 8016a04:	781a      	ldrb	r2, [r3, #0]
 8016a06:	68fb      	ldr	r3, [r7, #12]
 8016a08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016a10:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8016a12:	683b      	ldr	r3, [r7, #0]
 8016a14:	687a      	ldr	r2, [r7, #4]
 8016a16:	68b9      	ldr	r1, [r7, #8]
 8016a18:	68f8      	ldr	r0, [r7, #12]
 8016a1a:	f000 f913 	bl	8016c44 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8016a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a20:	68f8      	ldr	r0, [r7, #12]
 8016a22:	4798      	blx	r3
 8016a24:	4603      	mov	r3, r0
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d001      	beq.n	8016a2e <netif_add+0xba>
    return NULL;
 8016a2a:	2300      	movs	r3, #0
 8016a2c:	e058      	b.n	8016ae0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016a34:	2bff      	cmp	r3, #255	; 0xff
 8016a36:	d103      	bne.n	8016a40 <netif_add+0xcc>
        netif->num = 0;
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	2200      	movs	r2, #0
 8016a3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8016a40:	2300      	movs	r3, #0
 8016a42:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8016a44:	4b2f      	ldr	r3, [pc, #188]	; (8016b04 <netif_add+0x190>)
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	617b      	str	r3, [r7, #20]
 8016a4a:	e02b      	b.n	8016aa4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8016a4c:	697a      	ldr	r2, [r7, #20]
 8016a4e:	68fb      	ldr	r3, [r7, #12]
 8016a50:	429a      	cmp	r2, r3
 8016a52:	d106      	bne.n	8016a62 <netif_add+0xee>
 8016a54:	4b24      	ldr	r3, [pc, #144]	; (8016ae8 <netif_add+0x174>)
 8016a56:	f240 128b 	movw	r2, #395	; 0x18b
 8016a5a:	492b      	ldr	r1, [pc, #172]	; (8016b08 <netif_add+0x194>)
 8016a5c:	4824      	ldr	r0, [pc, #144]	; (8016af0 <netif_add+0x17c>)
 8016a5e:	f00a fd61 	bl	8021524 <iprintf>
        num_netifs++;
 8016a62:	693b      	ldr	r3, [r7, #16]
 8016a64:	3301      	adds	r3, #1
 8016a66:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8016a68:	693b      	ldr	r3, [r7, #16]
 8016a6a:	2bff      	cmp	r3, #255	; 0xff
 8016a6c:	dd06      	ble.n	8016a7c <netif_add+0x108>
 8016a6e:	4b1e      	ldr	r3, [pc, #120]	; (8016ae8 <netif_add+0x174>)
 8016a70:	f240 128d 	movw	r2, #397	; 0x18d
 8016a74:	4925      	ldr	r1, [pc, #148]	; (8016b0c <netif_add+0x198>)
 8016a76:	481e      	ldr	r0, [pc, #120]	; (8016af0 <netif_add+0x17c>)
 8016a78:	f00a fd54 	bl	8021524 <iprintf>
        if (netif2->num == netif->num) {
 8016a7c:	697b      	ldr	r3, [r7, #20]
 8016a7e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8016a82:	68fb      	ldr	r3, [r7, #12]
 8016a84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016a88:	429a      	cmp	r2, r3
 8016a8a:	d108      	bne.n	8016a9e <netif_add+0x12a>
          netif->num++;
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016a92:	3301      	adds	r3, #1
 8016a94:	b2da      	uxtb	r2, r3
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8016a9c:	e005      	b.n	8016aaa <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8016a9e:	697b      	ldr	r3, [r7, #20]
 8016aa0:	681b      	ldr	r3, [r3, #0]
 8016aa2:	617b      	str	r3, [r7, #20]
 8016aa4:	697b      	ldr	r3, [r7, #20]
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	d1d0      	bne.n	8016a4c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8016aaa:	697b      	ldr	r3, [r7, #20]
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d1be      	bne.n	8016a2e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8016ab0:	68fb      	ldr	r3, [r7, #12]
 8016ab2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016ab6:	2bfe      	cmp	r3, #254	; 0xfe
 8016ab8:	d103      	bne.n	8016ac2 <netif_add+0x14e>
    netif_num = 0;
 8016aba:	4b11      	ldr	r3, [pc, #68]	; (8016b00 <netif_add+0x18c>)
 8016abc:	2200      	movs	r2, #0
 8016abe:	701a      	strb	r2, [r3, #0]
 8016ac0:	e006      	b.n	8016ad0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8016ac2:	68fb      	ldr	r3, [r7, #12]
 8016ac4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016ac8:	3301      	adds	r3, #1
 8016aca:	b2da      	uxtb	r2, r3
 8016acc:	4b0c      	ldr	r3, [pc, #48]	; (8016b00 <netif_add+0x18c>)
 8016ace:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8016ad0:	4b0c      	ldr	r3, [pc, #48]	; (8016b04 <netif_add+0x190>)
 8016ad2:	681a      	ldr	r2, [r3, #0]
 8016ad4:	68fb      	ldr	r3, [r7, #12]
 8016ad6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8016ad8:	4a0a      	ldr	r2, [pc, #40]	; (8016b04 <netif_add+0x190>)
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8016ade:	68fb      	ldr	r3, [r7, #12]
}
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	3718      	adds	r7, #24
 8016ae4:	46bd      	mov	sp, r7
 8016ae6:	bd80      	pop	{r7, pc}
 8016ae8:	080249dc 	.word	0x080249dc
 8016aec:	08024a70 	.word	0x08024a70
 8016af0:	08024a2c 	.word	0x08024a2c
 8016af4:	08024a8c 	.word	0x08024a8c
 8016af8:	0802af88 	.word	0x0802af88
 8016afc:	08016f1f 	.word	0x08016f1f
 8016b00:	200052dc 	.word	0x200052dc
 8016b04:	2001b980 	.word	0x2001b980
 8016b08:	08024ab0 	.word	0x08024ab0
 8016b0c:	08024ac4 	.word	0x08024ac4

08016b10 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016b10:	b580      	push	{r7, lr}
 8016b12:	b082      	sub	sp, #8
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	6078      	str	r0, [r7, #4]
 8016b18:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8016b1a:	6839      	ldr	r1, [r7, #0]
 8016b1c:	6878      	ldr	r0, [r7, #4]
 8016b1e:	f002 fe23 	bl	8019768 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8016b22:	6839      	ldr	r1, [r7, #0]
 8016b24:	6878      	ldr	r0, [r7, #4]
 8016b26:	f007 fb8b 	bl	801e240 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8016b2a:	bf00      	nop
 8016b2c:	3708      	adds	r7, #8
 8016b2e:	46bd      	mov	sp, r7
 8016b30:	bd80      	pop	{r7, pc}
	...

08016b34 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8016b34:	b580      	push	{r7, lr}
 8016b36:	b086      	sub	sp, #24
 8016b38:	af00      	add	r7, sp, #0
 8016b3a:	60f8      	str	r0, [r7, #12]
 8016b3c:	60b9      	str	r1, [r7, #8]
 8016b3e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8016b40:	68bb      	ldr	r3, [r7, #8]
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d106      	bne.n	8016b54 <netif_do_set_ipaddr+0x20>
 8016b46:	4b1d      	ldr	r3, [pc, #116]	; (8016bbc <netif_do_set_ipaddr+0x88>)
 8016b48:	f240 12cb 	movw	r2, #459	; 0x1cb
 8016b4c:	491c      	ldr	r1, [pc, #112]	; (8016bc0 <netif_do_set_ipaddr+0x8c>)
 8016b4e:	481d      	ldr	r0, [pc, #116]	; (8016bc4 <netif_do_set_ipaddr+0x90>)
 8016b50:	f00a fce8 	bl	8021524 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d106      	bne.n	8016b68 <netif_do_set_ipaddr+0x34>
 8016b5a:	4b18      	ldr	r3, [pc, #96]	; (8016bbc <netif_do_set_ipaddr+0x88>)
 8016b5c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8016b60:	4917      	ldr	r1, [pc, #92]	; (8016bc0 <netif_do_set_ipaddr+0x8c>)
 8016b62:	4818      	ldr	r0, [pc, #96]	; (8016bc4 <netif_do_set_ipaddr+0x90>)
 8016b64:	f00a fcde 	bl	8021524 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8016b68:	68bb      	ldr	r3, [r7, #8]
 8016b6a:	681a      	ldr	r2, [r3, #0]
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	3304      	adds	r3, #4
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	429a      	cmp	r2, r3
 8016b74:	d01c      	beq.n	8016bb0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8016b76:	68bb      	ldr	r3, [r7, #8]
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	3304      	adds	r3, #4
 8016b80:	681a      	ldr	r2, [r3, #0]
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8016b86:	f107 0314 	add.w	r3, r7, #20
 8016b8a:	4619      	mov	r1, r3
 8016b8c:	6878      	ldr	r0, [r7, #4]
 8016b8e:	f7ff ffbf 	bl	8016b10 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8016b92:	68bb      	ldr	r3, [r7, #8]
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d002      	beq.n	8016b9e <netif_do_set_ipaddr+0x6a>
 8016b98:	68bb      	ldr	r3, [r7, #8]
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	e000      	b.n	8016ba0 <netif_do_set_ipaddr+0x6c>
 8016b9e:	2300      	movs	r3, #0
 8016ba0:	68fa      	ldr	r2, [r7, #12]
 8016ba2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8016ba4:	2101      	movs	r1, #1
 8016ba6:	68f8      	ldr	r0, [r7, #12]
 8016ba8:	f000 f8d2 	bl	8016d50 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8016bac:	2301      	movs	r3, #1
 8016bae:	e000      	b.n	8016bb2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8016bb0:	2300      	movs	r3, #0
}
 8016bb2:	4618      	mov	r0, r3
 8016bb4:	3718      	adds	r7, #24
 8016bb6:	46bd      	mov	sp, r7
 8016bb8:	bd80      	pop	{r7, pc}
 8016bba:	bf00      	nop
 8016bbc:	080249dc 	.word	0x080249dc
 8016bc0:	08024af4 	.word	0x08024af4
 8016bc4:	08024a2c 	.word	0x08024a2c

08016bc8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8016bc8:	b480      	push	{r7}
 8016bca:	b085      	sub	sp, #20
 8016bcc:	af00      	add	r7, sp, #0
 8016bce:	60f8      	str	r0, [r7, #12]
 8016bd0:	60b9      	str	r1, [r7, #8]
 8016bd2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8016bd4:	68bb      	ldr	r3, [r7, #8]
 8016bd6:	681a      	ldr	r2, [r3, #0]
 8016bd8:	68fb      	ldr	r3, [r7, #12]
 8016bda:	3308      	adds	r3, #8
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	429a      	cmp	r2, r3
 8016be0:	d00a      	beq.n	8016bf8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8016be2:	68bb      	ldr	r3, [r7, #8]
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d002      	beq.n	8016bee <netif_do_set_netmask+0x26>
 8016be8:	68bb      	ldr	r3, [r7, #8]
 8016bea:	681b      	ldr	r3, [r3, #0]
 8016bec:	e000      	b.n	8016bf0 <netif_do_set_netmask+0x28>
 8016bee:	2300      	movs	r3, #0
 8016bf0:	68fa      	ldr	r2, [r7, #12]
 8016bf2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8016bf4:	2301      	movs	r3, #1
 8016bf6:	e000      	b.n	8016bfa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8016bf8:	2300      	movs	r3, #0
}
 8016bfa:	4618      	mov	r0, r3
 8016bfc:	3714      	adds	r7, #20
 8016bfe:	46bd      	mov	sp, r7
 8016c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c04:	4770      	bx	lr

08016c06 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8016c06:	b480      	push	{r7}
 8016c08:	b085      	sub	sp, #20
 8016c0a:	af00      	add	r7, sp, #0
 8016c0c:	60f8      	str	r0, [r7, #12]
 8016c0e:	60b9      	str	r1, [r7, #8]
 8016c10:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8016c12:	68bb      	ldr	r3, [r7, #8]
 8016c14:	681a      	ldr	r2, [r3, #0]
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	330c      	adds	r3, #12
 8016c1a:	681b      	ldr	r3, [r3, #0]
 8016c1c:	429a      	cmp	r2, r3
 8016c1e:	d00a      	beq.n	8016c36 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8016c20:	68bb      	ldr	r3, [r7, #8]
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d002      	beq.n	8016c2c <netif_do_set_gw+0x26>
 8016c26:	68bb      	ldr	r3, [r7, #8]
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	e000      	b.n	8016c2e <netif_do_set_gw+0x28>
 8016c2c:	2300      	movs	r3, #0
 8016c2e:	68fa      	ldr	r2, [r7, #12]
 8016c30:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8016c32:	2301      	movs	r3, #1
 8016c34:	e000      	b.n	8016c38 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8016c36:	2300      	movs	r3, #0
}
 8016c38:	4618      	mov	r0, r3
 8016c3a:	3714      	adds	r7, #20
 8016c3c:	46bd      	mov	sp, r7
 8016c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c42:	4770      	bx	lr

08016c44 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8016c44:	b580      	push	{r7, lr}
 8016c46:	b088      	sub	sp, #32
 8016c48:	af00      	add	r7, sp, #0
 8016c4a:	60f8      	str	r0, [r7, #12]
 8016c4c:	60b9      	str	r1, [r7, #8]
 8016c4e:	607a      	str	r2, [r7, #4]
 8016c50:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8016c52:	2300      	movs	r3, #0
 8016c54:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8016c56:	2300      	movs	r3, #0
 8016c58:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8016c5a:	68bb      	ldr	r3, [r7, #8]
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d101      	bne.n	8016c64 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8016c60:	4b1c      	ldr	r3, [pc, #112]	; (8016cd4 <netif_set_addr+0x90>)
 8016c62:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d101      	bne.n	8016c6e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8016c6a:	4b1a      	ldr	r3, [pc, #104]	; (8016cd4 <netif_set_addr+0x90>)
 8016c6c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8016c6e:	683b      	ldr	r3, [r7, #0]
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d101      	bne.n	8016c78 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8016c74:	4b17      	ldr	r3, [pc, #92]	; (8016cd4 <netif_set_addr+0x90>)
 8016c76:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8016c78:	68bb      	ldr	r3, [r7, #8]
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d003      	beq.n	8016c86 <netif_set_addr+0x42>
 8016c7e:	68bb      	ldr	r3, [r7, #8]
 8016c80:	681b      	ldr	r3, [r3, #0]
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d101      	bne.n	8016c8a <netif_set_addr+0x46>
 8016c86:	2301      	movs	r3, #1
 8016c88:	e000      	b.n	8016c8c <netif_set_addr+0x48>
 8016c8a:	2300      	movs	r3, #0
 8016c8c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8016c8e:	697b      	ldr	r3, [r7, #20]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d006      	beq.n	8016ca2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8016c94:	f107 0310 	add.w	r3, r7, #16
 8016c98:	461a      	mov	r2, r3
 8016c9a:	68b9      	ldr	r1, [r7, #8]
 8016c9c:	68f8      	ldr	r0, [r7, #12]
 8016c9e:	f7ff ff49 	bl	8016b34 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8016ca2:	69fa      	ldr	r2, [r7, #28]
 8016ca4:	6879      	ldr	r1, [r7, #4]
 8016ca6:	68f8      	ldr	r0, [r7, #12]
 8016ca8:	f7ff ff8e 	bl	8016bc8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8016cac:	69ba      	ldr	r2, [r7, #24]
 8016cae:	6839      	ldr	r1, [r7, #0]
 8016cb0:	68f8      	ldr	r0, [r7, #12]
 8016cb2:	f7ff ffa8 	bl	8016c06 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8016cb6:	697b      	ldr	r3, [r7, #20]
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d106      	bne.n	8016cca <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8016cbc:	f107 0310 	add.w	r3, r7, #16
 8016cc0:	461a      	mov	r2, r3
 8016cc2:	68b9      	ldr	r1, [r7, #8]
 8016cc4:	68f8      	ldr	r0, [r7, #12]
 8016cc6:	f7ff ff35 	bl	8016b34 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8016cca:	bf00      	nop
 8016ccc:	3720      	adds	r7, #32
 8016cce:	46bd      	mov	sp, r7
 8016cd0:	bd80      	pop	{r7, pc}
 8016cd2:	bf00      	nop
 8016cd4:	0802af88 	.word	0x0802af88

08016cd8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8016cd8:	b480      	push	{r7}
 8016cda:	b083      	sub	sp, #12
 8016cdc:	af00      	add	r7, sp, #0
 8016cde:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8016ce0:	4a04      	ldr	r2, [pc, #16]	; (8016cf4 <netif_set_default+0x1c>)
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8016ce6:	bf00      	nop
 8016ce8:	370c      	adds	r7, #12
 8016cea:	46bd      	mov	sp, r7
 8016cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cf0:	4770      	bx	lr
 8016cf2:	bf00      	nop
 8016cf4:	2001b984 	.word	0x2001b984

08016cf8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8016cf8:	b580      	push	{r7, lr}
 8016cfa:	b082      	sub	sp, #8
 8016cfc:	af00      	add	r7, sp, #0
 8016cfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d107      	bne.n	8016d16 <netif_set_up+0x1e>
 8016d06:	4b0f      	ldr	r3, [pc, #60]	; (8016d44 <netif_set_up+0x4c>)
 8016d08:	f44f 7254 	mov.w	r2, #848	; 0x350
 8016d0c:	490e      	ldr	r1, [pc, #56]	; (8016d48 <netif_set_up+0x50>)
 8016d0e:	480f      	ldr	r0, [pc, #60]	; (8016d4c <netif_set_up+0x54>)
 8016d10:	f00a fc08 	bl	8021524 <iprintf>
 8016d14:	e013      	b.n	8016d3e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016d1c:	f003 0301 	and.w	r3, r3, #1
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d10c      	bne.n	8016d3e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016d2a:	f043 0301 	orr.w	r3, r3, #1
 8016d2e:	b2da      	uxtb	r2, r3
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8016d36:	2103      	movs	r1, #3
 8016d38:	6878      	ldr	r0, [r7, #4]
 8016d3a:	f000 f809 	bl	8016d50 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8016d3e:	3708      	adds	r7, #8
 8016d40:	46bd      	mov	sp, r7
 8016d42:	bd80      	pop	{r7, pc}
 8016d44:	080249dc 	.word	0x080249dc
 8016d48:	08024b64 	.word	0x08024b64
 8016d4c:	08024a2c 	.word	0x08024a2c

08016d50 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8016d50:	b580      	push	{r7, lr}
 8016d52:	b082      	sub	sp, #8
 8016d54:	af00      	add	r7, sp, #0
 8016d56:	6078      	str	r0, [r7, #4]
 8016d58:	460b      	mov	r3, r1
 8016d5a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d106      	bne.n	8016d70 <netif_issue_reports+0x20>
 8016d62:	4b18      	ldr	r3, [pc, #96]	; (8016dc4 <netif_issue_reports+0x74>)
 8016d64:	f240 326d 	movw	r2, #877	; 0x36d
 8016d68:	4917      	ldr	r1, [pc, #92]	; (8016dc8 <netif_issue_reports+0x78>)
 8016d6a:	4818      	ldr	r0, [pc, #96]	; (8016dcc <netif_issue_reports+0x7c>)
 8016d6c:	f00a fbda 	bl	8021524 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016d76:	f003 0304 	and.w	r3, r3, #4
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d01e      	beq.n	8016dbc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016d84:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d017      	beq.n	8016dbc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8016d8c:	78fb      	ldrb	r3, [r7, #3]
 8016d8e:	f003 0301 	and.w	r3, r3, #1
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d013      	beq.n	8016dbe <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	3304      	adds	r3, #4
 8016d9a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d00e      	beq.n	8016dbe <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016da6:	f003 0308 	and.w	r3, r3, #8
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d007      	beq.n	8016dbe <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	3304      	adds	r3, #4
 8016db2:	4619      	mov	r1, r3
 8016db4:	6878      	ldr	r0, [r7, #4]
 8016db6:	f008 f9ad 	bl	801f114 <etharp_request>
 8016dba:	e000      	b.n	8016dbe <netif_issue_reports+0x6e>
    return;
 8016dbc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8016dbe:	3708      	adds	r7, #8
 8016dc0:	46bd      	mov	sp, r7
 8016dc2:	bd80      	pop	{r7, pc}
 8016dc4:	080249dc 	.word	0x080249dc
 8016dc8:	08024b80 	.word	0x08024b80
 8016dcc:	08024a2c 	.word	0x08024a2c

08016dd0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8016dd0:	b580      	push	{r7, lr}
 8016dd2:	b082      	sub	sp, #8
 8016dd4:	af00      	add	r7, sp, #0
 8016dd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d107      	bne.n	8016dee <netif_set_down+0x1e>
 8016dde:	4b12      	ldr	r3, [pc, #72]	; (8016e28 <netif_set_down+0x58>)
 8016de0:	f240 329b 	movw	r2, #923	; 0x39b
 8016de4:	4911      	ldr	r1, [pc, #68]	; (8016e2c <netif_set_down+0x5c>)
 8016de6:	4812      	ldr	r0, [pc, #72]	; (8016e30 <netif_set_down+0x60>)
 8016de8:	f00a fb9c 	bl	8021524 <iprintf>
 8016dec:	e019      	b.n	8016e22 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016df4:	f003 0301 	and.w	r3, r3, #1
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d012      	beq.n	8016e22 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016e02:	f023 0301 	bic.w	r3, r3, #1
 8016e06:	b2da      	uxtb	r2, r3
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016e14:	f003 0308 	and.w	r3, r3, #8
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d002      	beq.n	8016e22 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8016e1c:	6878      	ldr	r0, [r7, #4]
 8016e1e:	f007 fd37 	bl	801e890 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8016e22:	3708      	adds	r7, #8
 8016e24:	46bd      	mov	sp, r7
 8016e26:	bd80      	pop	{r7, pc}
 8016e28:	080249dc 	.word	0x080249dc
 8016e2c:	08024ba4 	.word	0x08024ba4
 8016e30:	08024a2c 	.word	0x08024a2c

08016e34 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8016e34:	b580      	push	{r7, lr}
 8016e36:	b082      	sub	sp, #8
 8016e38:	af00      	add	r7, sp, #0
 8016e3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d107      	bne.n	8016e52 <netif_set_link_up+0x1e>
 8016e42:	4b13      	ldr	r3, [pc, #76]	; (8016e90 <netif_set_link_up+0x5c>)
 8016e44:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8016e48:	4912      	ldr	r1, [pc, #72]	; (8016e94 <netif_set_link_up+0x60>)
 8016e4a:	4813      	ldr	r0, [pc, #76]	; (8016e98 <netif_set_link_up+0x64>)
 8016e4c:	f00a fb6a 	bl	8021524 <iprintf>
 8016e50:	e01b      	b.n	8016e8a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016e58:	f003 0304 	and.w	r3, r3, #4
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d114      	bne.n	8016e8a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016e66:	f043 0304 	orr.w	r3, r3, #4
 8016e6a:	b2da      	uxtb	r2, r3
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8016e72:	2103      	movs	r1, #3
 8016e74:	6878      	ldr	r0, [r7, #4]
 8016e76:	f7ff ff6b 	bl	8016d50 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8016e7a:	687b      	ldr	r3, [r7, #4]
 8016e7c:	69db      	ldr	r3, [r3, #28]
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d003      	beq.n	8016e8a <netif_set_link_up+0x56>
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	69db      	ldr	r3, [r3, #28]
 8016e86:	6878      	ldr	r0, [r7, #4]
 8016e88:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8016e8a:	3708      	adds	r7, #8
 8016e8c:	46bd      	mov	sp, r7
 8016e8e:	bd80      	pop	{r7, pc}
 8016e90:	080249dc 	.word	0x080249dc
 8016e94:	08024bc4 	.word	0x08024bc4
 8016e98:	08024a2c 	.word	0x08024a2c

08016e9c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8016e9c:	b580      	push	{r7, lr}
 8016e9e:	b082      	sub	sp, #8
 8016ea0:	af00      	add	r7, sp, #0
 8016ea2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	d107      	bne.n	8016eba <netif_set_link_down+0x1e>
 8016eaa:	4b11      	ldr	r3, [pc, #68]	; (8016ef0 <netif_set_link_down+0x54>)
 8016eac:	f240 4206 	movw	r2, #1030	; 0x406
 8016eb0:	4910      	ldr	r1, [pc, #64]	; (8016ef4 <netif_set_link_down+0x58>)
 8016eb2:	4811      	ldr	r0, [pc, #68]	; (8016ef8 <netif_set_link_down+0x5c>)
 8016eb4:	f00a fb36 	bl	8021524 <iprintf>
 8016eb8:	e017      	b.n	8016eea <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016ec0:	f003 0304 	and.w	r3, r3, #4
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d010      	beq.n	8016eea <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016ece:	f023 0304 	bic.w	r3, r3, #4
 8016ed2:	b2da      	uxtb	r2, r3
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	69db      	ldr	r3, [r3, #28]
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d003      	beq.n	8016eea <netif_set_link_down+0x4e>
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	69db      	ldr	r3, [r3, #28]
 8016ee6:	6878      	ldr	r0, [r7, #4]
 8016ee8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8016eea:	3708      	adds	r7, #8
 8016eec:	46bd      	mov	sp, r7
 8016eee:	bd80      	pop	{r7, pc}
 8016ef0:	080249dc 	.word	0x080249dc
 8016ef4:	08024be8 	.word	0x08024be8
 8016ef8:	08024a2c 	.word	0x08024a2c

08016efc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8016efc:	b480      	push	{r7}
 8016efe:	b083      	sub	sp, #12
 8016f00:	af00      	add	r7, sp, #0
 8016f02:	6078      	str	r0, [r7, #4]
 8016f04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d002      	beq.n	8016f12 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	683a      	ldr	r2, [r7, #0]
 8016f10:	61da      	str	r2, [r3, #28]
  }
}
 8016f12:	bf00      	nop
 8016f14:	370c      	adds	r7, #12
 8016f16:	46bd      	mov	sp, r7
 8016f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f1c:	4770      	bx	lr

08016f1e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8016f1e:	b480      	push	{r7}
 8016f20:	b085      	sub	sp, #20
 8016f22:	af00      	add	r7, sp, #0
 8016f24:	60f8      	str	r0, [r7, #12]
 8016f26:	60b9      	str	r1, [r7, #8]
 8016f28:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8016f2a:	f06f 030b 	mvn.w	r3, #11
}
 8016f2e:	4618      	mov	r0, r3
 8016f30:	3714      	adds	r7, #20
 8016f32:	46bd      	mov	sp, r7
 8016f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f38:	4770      	bx	lr
	...

08016f3c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8016f3c:	b480      	push	{r7}
 8016f3e:	b085      	sub	sp, #20
 8016f40:	af00      	add	r7, sp, #0
 8016f42:	4603      	mov	r3, r0
 8016f44:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8016f46:	79fb      	ldrb	r3, [r7, #7]
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d013      	beq.n	8016f74 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8016f4c:	4b0d      	ldr	r3, [pc, #52]	; (8016f84 <netif_get_by_index+0x48>)
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	60fb      	str	r3, [r7, #12]
 8016f52:	e00c      	b.n	8016f6e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8016f54:	68fb      	ldr	r3, [r7, #12]
 8016f56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016f5a:	3301      	adds	r3, #1
 8016f5c:	b2db      	uxtb	r3, r3
 8016f5e:	79fa      	ldrb	r2, [r7, #7]
 8016f60:	429a      	cmp	r2, r3
 8016f62:	d101      	bne.n	8016f68 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	e006      	b.n	8016f76 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8016f68:	68fb      	ldr	r3, [r7, #12]
 8016f6a:	681b      	ldr	r3, [r3, #0]
 8016f6c:	60fb      	str	r3, [r7, #12]
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	d1ef      	bne.n	8016f54 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8016f74:	2300      	movs	r3, #0
}
 8016f76:	4618      	mov	r0, r3
 8016f78:	3714      	adds	r7, #20
 8016f7a:	46bd      	mov	sp, r7
 8016f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f80:	4770      	bx	lr
 8016f82:	bf00      	nop
 8016f84:	2001b980 	.word	0x2001b980

08016f88 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8016f88:	b580      	push	{r7, lr}
 8016f8a:	b082      	sub	sp, #8
 8016f8c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8016f8e:	f009 fd3f 	bl	8020a10 <sys_arch_protect>
 8016f92:	6038      	str	r0, [r7, #0]
 8016f94:	4b0d      	ldr	r3, [pc, #52]	; (8016fcc <pbuf_free_ooseq+0x44>)
 8016f96:	2200      	movs	r2, #0
 8016f98:	701a      	strb	r2, [r3, #0]
 8016f9a:	6838      	ldr	r0, [r7, #0]
 8016f9c:	f009 fd46 	bl	8020a2c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8016fa0:	4b0b      	ldr	r3, [pc, #44]	; (8016fd0 <pbuf_free_ooseq+0x48>)
 8016fa2:	681b      	ldr	r3, [r3, #0]
 8016fa4:	607b      	str	r3, [r7, #4]
 8016fa6:	e00a      	b.n	8016fbe <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d003      	beq.n	8016fb8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8016fb0:	6878      	ldr	r0, [r7, #4]
 8016fb2:	f002 fc17 	bl	80197e4 <tcp_free_ooseq>
      return;
 8016fb6:	e005      	b.n	8016fc4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	68db      	ldr	r3, [r3, #12]
 8016fbc:	607b      	str	r3, [r7, #4]
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d1f1      	bne.n	8016fa8 <pbuf_free_ooseq+0x20>
    }
  }
}
 8016fc4:	3708      	adds	r7, #8
 8016fc6:	46bd      	mov	sp, r7
 8016fc8:	bd80      	pop	{r7, pc}
 8016fca:	bf00      	nop
 8016fcc:	2001b988 	.word	0x2001b988
 8016fd0:	2001b990 	.word	0x2001b990

08016fd4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8016fd4:	b580      	push	{r7, lr}
 8016fd6:	b082      	sub	sp, #8
 8016fd8:	af00      	add	r7, sp, #0
 8016fda:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8016fdc:	f7ff ffd4 	bl	8016f88 <pbuf_free_ooseq>
}
 8016fe0:	bf00      	nop
 8016fe2:	3708      	adds	r7, #8
 8016fe4:	46bd      	mov	sp, r7
 8016fe6:	bd80      	pop	{r7, pc}

08016fe8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8016fe8:	b580      	push	{r7, lr}
 8016fea:	b082      	sub	sp, #8
 8016fec:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8016fee:	f009 fd0f 	bl	8020a10 <sys_arch_protect>
 8016ff2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8016ff4:	4b0f      	ldr	r3, [pc, #60]	; (8017034 <pbuf_pool_is_empty+0x4c>)
 8016ff6:	781b      	ldrb	r3, [r3, #0]
 8016ff8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8016ffa:	4b0e      	ldr	r3, [pc, #56]	; (8017034 <pbuf_pool_is_empty+0x4c>)
 8016ffc:	2201      	movs	r2, #1
 8016ffe:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8017000:	6878      	ldr	r0, [r7, #4]
 8017002:	f009 fd13 	bl	8020a2c <sys_arch_unprotect>

  if (!queued) {
 8017006:	78fb      	ldrb	r3, [r7, #3]
 8017008:	2b00      	cmp	r3, #0
 801700a:	d10f      	bne.n	801702c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801700c:	2100      	movs	r1, #0
 801700e:	480a      	ldr	r0, [pc, #40]	; (8017038 <pbuf_pool_is_empty+0x50>)
 8017010:	f7fc fe44 	bl	8013c9c <tcpip_try_callback>
 8017014:	4603      	mov	r3, r0
 8017016:	2b00      	cmp	r3, #0
 8017018:	d008      	beq.n	801702c <pbuf_pool_is_empty+0x44>
 801701a:	f009 fcf9 	bl	8020a10 <sys_arch_protect>
 801701e:	6078      	str	r0, [r7, #4]
 8017020:	4b04      	ldr	r3, [pc, #16]	; (8017034 <pbuf_pool_is_empty+0x4c>)
 8017022:	2200      	movs	r2, #0
 8017024:	701a      	strb	r2, [r3, #0]
 8017026:	6878      	ldr	r0, [r7, #4]
 8017028:	f009 fd00 	bl	8020a2c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801702c:	bf00      	nop
 801702e:	3708      	adds	r7, #8
 8017030:	46bd      	mov	sp, r7
 8017032:	bd80      	pop	{r7, pc}
 8017034:	2001b988 	.word	0x2001b988
 8017038:	08016fd5 	.word	0x08016fd5

0801703c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801703c:	b480      	push	{r7}
 801703e:	b085      	sub	sp, #20
 8017040:	af00      	add	r7, sp, #0
 8017042:	60f8      	str	r0, [r7, #12]
 8017044:	60b9      	str	r1, [r7, #8]
 8017046:	4611      	mov	r1, r2
 8017048:	461a      	mov	r2, r3
 801704a:	460b      	mov	r3, r1
 801704c:	80fb      	strh	r3, [r7, #6]
 801704e:	4613      	mov	r3, r2
 8017050:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8017052:	68fb      	ldr	r3, [r7, #12]
 8017054:	2200      	movs	r2, #0
 8017056:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8017058:	68fb      	ldr	r3, [r7, #12]
 801705a:	68ba      	ldr	r2, [r7, #8]
 801705c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801705e:	68fb      	ldr	r3, [r7, #12]
 8017060:	88fa      	ldrh	r2, [r7, #6]
 8017062:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	88ba      	ldrh	r2, [r7, #4]
 8017068:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801706a:	8b3b      	ldrh	r3, [r7, #24]
 801706c:	b2da      	uxtb	r2, r3
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8017072:	68fb      	ldr	r3, [r7, #12]
 8017074:	7f3a      	ldrb	r2, [r7, #28]
 8017076:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	2201      	movs	r2, #1
 801707c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	2200      	movs	r2, #0
 8017082:	73da      	strb	r2, [r3, #15]
}
 8017084:	bf00      	nop
 8017086:	3714      	adds	r7, #20
 8017088:	46bd      	mov	sp, r7
 801708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801708e:	4770      	bx	lr

08017090 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8017090:	b580      	push	{r7, lr}
 8017092:	b08c      	sub	sp, #48	; 0x30
 8017094:	af02      	add	r7, sp, #8
 8017096:	4603      	mov	r3, r0
 8017098:	71fb      	strb	r3, [r7, #7]
 801709a:	460b      	mov	r3, r1
 801709c:	80bb      	strh	r3, [r7, #4]
 801709e:	4613      	mov	r3, r2
 80170a0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80170a2:	79fb      	ldrb	r3, [r7, #7]
 80170a4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80170a6:	887b      	ldrh	r3, [r7, #2]
 80170a8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80170ac:	d07f      	beq.n	80171ae <pbuf_alloc+0x11e>
 80170ae:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80170b2:	f300 80c8 	bgt.w	8017246 <pbuf_alloc+0x1b6>
 80170b6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80170ba:	d010      	beq.n	80170de <pbuf_alloc+0x4e>
 80170bc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80170c0:	f300 80c1 	bgt.w	8017246 <pbuf_alloc+0x1b6>
 80170c4:	2b01      	cmp	r3, #1
 80170c6:	d002      	beq.n	80170ce <pbuf_alloc+0x3e>
 80170c8:	2b41      	cmp	r3, #65	; 0x41
 80170ca:	f040 80bc 	bne.w	8017246 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80170ce:	887a      	ldrh	r2, [r7, #2]
 80170d0:	88bb      	ldrh	r3, [r7, #4]
 80170d2:	4619      	mov	r1, r3
 80170d4:	2000      	movs	r0, #0
 80170d6:	f000 f8d1 	bl	801727c <pbuf_alloc_reference>
 80170da:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80170dc:	e0bd      	b.n	801725a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80170de:	2300      	movs	r3, #0
 80170e0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80170e2:	2300      	movs	r3, #0
 80170e4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80170e6:	88bb      	ldrh	r3, [r7, #4]
 80170e8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80170ea:	200c      	movs	r0, #12
 80170ec:	f7ff fbbe 	bl	801686c <memp_malloc>
 80170f0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80170f2:	693b      	ldr	r3, [r7, #16]
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	d109      	bne.n	801710c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80170f8:	f7ff ff76 	bl	8016fe8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80170fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d002      	beq.n	8017108 <pbuf_alloc+0x78>
            pbuf_free(p);
 8017102:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017104:	f000 faa8 	bl	8017658 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8017108:	2300      	movs	r3, #0
 801710a:	e0a7      	b.n	801725c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801710c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801710e:	3303      	adds	r3, #3
 8017110:	b29b      	uxth	r3, r3
 8017112:	f023 0303 	bic.w	r3, r3, #3
 8017116:	b29b      	uxth	r3, r3
 8017118:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 801711c:	b29b      	uxth	r3, r3
 801711e:	8b7a      	ldrh	r2, [r7, #26]
 8017120:	4293      	cmp	r3, r2
 8017122:	bf28      	it	cs
 8017124:	4613      	movcs	r3, r2
 8017126:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8017128:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801712a:	3310      	adds	r3, #16
 801712c:	693a      	ldr	r2, [r7, #16]
 801712e:	4413      	add	r3, r2
 8017130:	3303      	adds	r3, #3
 8017132:	f023 0303 	bic.w	r3, r3, #3
 8017136:	4618      	mov	r0, r3
 8017138:	89f9      	ldrh	r1, [r7, #14]
 801713a:	8b7a      	ldrh	r2, [r7, #26]
 801713c:	2300      	movs	r3, #0
 801713e:	9301      	str	r3, [sp, #4]
 8017140:	887b      	ldrh	r3, [r7, #2]
 8017142:	9300      	str	r3, [sp, #0]
 8017144:	460b      	mov	r3, r1
 8017146:	4601      	mov	r1, r0
 8017148:	6938      	ldr	r0, [r7, #16]
 801714a:	f7ff ff77 	bl	801703c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801714e:	693b      	ldr	r3, [r7, #16]
 8017150:	685b      	ldr	r3, [r3, #4]
 8017152:	f003 0303 	and.w	r3, r3, #3
 8017156:	2b00      	cmp	r3, #0
 8017158:	d006      	beq.n	8017168 <pbuf_alloc+0xd8>
 801715a:	4b42      	ldr	r3, [pc, #264]	; (8017264 <pbuf_alloc+0x1d4>)
 801715c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017160:	4941      	ldr	r1, [pc, #260]	; (8017268 <pbuf_alloc+0x1d8>)
 8017162:	4842      	ldr	r0, [pc, #264]	; (801726c <pbuf_alloc+0x1dc>)
 8017164:	f00a f9de 	bl	8021524 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8017168:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801716a:	3303      	adds	r3, #3
 801716c:	f023 0303 	bic.w	r3, r3, #3
 8017170:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8017174:	d106      	bne.n	8017184 <pbuf_alloc+0xf4>
 8017176:	4b3b      	ldr	r3, [pc, #236]	; (8017264 <pbuf_alloc+0x1d4>)
 8017178:	f44f 7281 	mov.w	r2, #258	; 0x102
 801717c:	493c      	ldr	r1, [pc, #240]	; (8017270 <pbuf_alloc+0x1e0>)
 801717e:	483b      	ldr	r0, [pc, #236]	; (801726c <pbuf_alloc+0x1dc>)
 8017180:	f00a f9d0 	bl	8021524 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8017184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017186:	2b00      	cmp	r3, #0
 8017188:	d102      	bne.n	8017190 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801718a:	693b      	ldr	r3, [r7, #16]
 801718c:	627b      	str	r3, [r7, #36]	; 0x24
 801718e:	e002      	b.n	8017196 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8017190:	69fb      	ldr	r3, [r7, #28]
 8017192:	693a      	ldr	r2, [r7, #16]
 8017194:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8017196:	693b      	ldr	r3, [r7, #16]
 8017198:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801719a:	8b7a      	ldrh	r2, [r7, #26]
 801719c:	89fb      	ldrh	r3, [r7, #14]
 801719e:	1ad3      	subs	r3, r2, r3
 80171a0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80171a2:	2300      	movs	r3, #0
 80171a4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80171a6:	8b7b      	ldrh	r3, [r7, #26]
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d19e      	bne.n	80170ea <pbuf_alloc+0x5a>
      break;
 80171ac:	e055      	b.n	801725a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80171ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80171b0:	3303      	adds	r3, #3
 80171b2:	b29b      	uxth	r3, r3
 80171b4:	f023 0303 	bic.w	r3, r3, #3
 80171b8:	b29a      	uxth	r2, r3
 80171ba:	88bb      	ldrh	r3, [r7, #4]
 80171bc:	3303      	adds	r3, #3
 80171be:	b29b      	uxth	r3, r3
 80171c0:	f023 0303 	bic.w	r3, r3, #3
 80171c4:	b29b      	uxth	r3, r3
 80171c6:	4413      	add	r3, r2
 80171c8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80171ca:	8b3b      	ldrh	r3, [r7, #24]
 80171cc:	3310      	adds	r3, #16
 80171ce:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80171d0:	8b3a      	ldrh	r2, [r7, #24]
 80171d2:	88bb      	ldrh	r3, [r7, #4]
 80171d4:	3303      	adds	r3, #3
 80171d6:	f023 0303 	bic.w	r3, r3, #3
 80171da:	429a      	cmp	r2, r3
 80171dc:	d306      	bcc.n	80171ec <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80171de:	8afa      	ldrh	r2, [r7, #22]
 80171e0:	88bb      	ldrh	r3, [r7, #4]
 80171e2:	3303      	adds	r3, #3
 80171e4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80171e8:	429a      	cmp	r2, r3
 80171ea:	d201      	bcs.n	80171f0 <pbuf_alloc+0x160>
        return NULL;
 80171ec:	2300      	movs	r3, #0
 80171ee:	e035      	b.n	801725c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80171f0:	8afb      	ldrh	r3, [r7, #22]
 80171f2:	4618      	mov	r0, r3
 80171f4:	f7ff f9b8 	bl	8016568 <mem_malloc>
 80171f8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80171fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d101      	bne.n	8017204 <pbuf_alloc+0x174>
        return NULL;
 8017200:	2300      	movs	r3, #0
 8017202:	e02b      	b.n	801725c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8017204:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017206:	3310      	adds	r3, #16
 8017208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801720a:	4413      	add	r3, r2
 801720c:	3303      	adds	r3, #3
 801720e:	f023 0303 	bic.w	r3, r3, #3
 8017212:	4618      	mov	r0, r3
 8017214:	88b9      	ldrh	r1, [r7, #4]
 8017216:	88ba      	ldrh	r2, [r7, #4]
 8017218:	2300      	movs	r3, #0
 801721a:	9301      	str	r3, [sp, #4]
 801721c:	887b      	ldrh	r3, [r7, #2]
 801721e:	9300      	str	r3, [sp, #0]
 8017220:	460b      	mov	r3, r1
 8017222:	4601      	mov	r1, r0
 8017224:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017226:	f7ff ff09 	bl	801703c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801722a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801722c:	685b      	ldr	r3, [r3, #4]
 801722e:	f003 0303 	and.w	r3, r3, #3
 8017232:	2b00      	cmp	r3, #0
 8017234:	d010      	beq.n	8017258 <pbuf_alloc+0x1c8>
 8017236:	4b0b      	ldr	r3, [pc, #44]	; (8017264 <pbuf_alloc+0x1d4>)
 8017238:	f44f 7291 	mov.w	r2, #290	; 0x122
 801723c:	490d      	ldr	r1, [pc, #52]	; (8017274 <pbuf_alloc+0x1e4>)
 801723e:	480b      	ldr	r0, [pc, #44]	; (801726c <pbuf_alloc+0x1dc>)
 8017240:	f00a f970 	bl	8021524 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8017244:	e008      	b.n	8017258 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8017246:	4b07      	ldr	r3, [pc, #28]	; (8017264 <pbuf_alloc+0x1d4>)
 8017248:	f240 1227 	movw	r2, #295	; 0x127
 801724c:	490a      	ldr	r1, [pc, #40]	; (8017278 <pbuf_alloc+0x1e8>)
 801724e:	4807      	ldr	r0, [pc, #28]	; (801726c <pbuf_alloc+0x1dc>)
 8017250:	f00a f968 	bl	8021524 <iprintf>
      return NULL;
 8017254:	2300      	movs	r3, #0
 8017256:	e001      	b.n	801725c <pbuf_alloc+0x1cc>
      break;
 8017258:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801725c:	4618      	mov	r0, r3
 801725e:	3728      	adds	r7, #40	; 0x28
 8017260:	46bd      	mov	sp, r7
 8017262:	bd80      	pop	{r7, pc}
 8017264:	08024c0c 	.word	0x08024c0c
 8017268:	08024c3c 	.word	0x08024c3c
 801726c:	08024c6c 	.word	0x08024c6c
 8017270:	08024c94 	.word	0x08024c94
 8017274:	08024cc8 	.word	0x08024cc8
 8017278:	08024cf4 	.word	0x08024cf4

0801727c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801727c:	b580      	push	{r7, lr}
 801727e:	b086      	sub	sp, #24
 8017280:	af02      	add	r7, sp, #8
 8017282:	6078      	str	r0, [r7, #4]
 8017284:	460b      	mov	r3, r1
 8017286:	807b      	strh	r3, [r7, #2]
 8017288:	4613      	mov	r3, r2
 801728a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801728c:	883b      	ldrh	r3, [r7, #0]
 801728e:	2b41      	cmp	r3, #65	; 0x41
 8017290:	d009      	beq.n	80172a6 <pbuf_alloc_reference+0x2a>
 8017292:	883b      	ldrh	r3, [r7, #0]
 8017294:	2b01      	cmp	r3, #1
 8017296:	d006      	beq.n	80172a6 <pbuf_alloc_reference+0x2a>
 8017298:	4b0f      	ldr	r3, [pc, #60]	; (80172d8 <pbuf_alloc_reference+0x5c>)
 801729a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801729e:	490f      	ldr	r1, [pc, #60]	; (80172dc <pbuf_alloc_reference+0x60>)
 80172a0:	480f      	ldr	r0, [pc, #60]	; (80172e0 <pbuf_alloc_reference+0x64>)
 80172a2:	f00a f93f 	bl	8021524 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80172a6:	200b      	movs	r0, #11
 80172a8:	f7ff fae0 	bl	801686c <memp_malloc>
 80172ac:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d101      	bne.n	80172b8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80172b4:	2300      	movs	r3, #0
 80172b6:	e00b      	b.n	80172d0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80172b8:	8879      	ldrh	r1, [r7, #2]
 80172ba:	887a      	ldrh	r2, [r7, #2]
 80172bc:	2300      	movs	r3, #0
 80172be:	9301      	str	r3, [sp, #4]
 80172c0:	883b      	ldrh	r3, [r7, #0]
 80172c2:	9300      	str	r3, [sp, #0]
 80172c4:	460b      	mov	r3, r1
 80172c6:	6879      	ldr	r1, [r7, #4]
 80172c8:	68f8      	ldr	r0, [r7, #12]
 80172ca:	f7ff feb7 	bl	801703c <pbuf_init_alloced_pbuf>
  return p;
 80172ce:	68fb      	ldr	r3, [r7, #12]
}
 80172d0:	4618      	mov	r0, r3
 80172d2:	3710      	adds	r7, #16
 80172d4:	46bd      	mov	sp, r7
 80172d6:	bd80      	pop	{r7, pc}
 80172d8:	08024c0c 	.word	0x08024c0c
 80172dc:	08024d10 	.word	0x08024d10
 80172e0:	08024c6c 	.word	0x08024c6c

080172e4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80172e4:	b580      	push	{r7, lr}
 80172e6:	b088      	sub	sp, #32
 80172e8:	af02      	add	r7, sp, #8
 80172ea:	607b      	str	r3, [r7, #4]
 80172ec:	4603      	mov	r3, r0
 80172ee:	73fb      	strb	r3, [r7, #15]
 80172f0:	460b      	mov	r3, r1
 80172f2:	81bb      	strh	r3, [r7, #12]
 80172f4:	4613      	mov	r3, r2
 80172f6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80172f8:	7bfb      	ldrb	r3, [r7, #15]
 80172fa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80172fc:	8a7b      	ldrh	r3, [r7, #18]
 80172fe:	3303      	adds	r3, #3
 8017300:	f023 0203 	bic.w	r2, r3, #3
 8017304:	89bb      	ldrh	r3, [r7, #12]
 8017306:	441a      	add	r2, r3
 8017308:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801730a:	429a      	cmp	r2, r3
 801730c:	d901      	bls.n	8017312 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801730e:	2300      	movs	r3, #0
 8017310:	e018      	b.n	8017344 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8017312:	6a3b      	ldr	r3, [r7, #32]
 8017314:	2b00      	cmp	r3, #0
 8017316:	d007      	beq.n	8017328 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8017318:	8a7b      	ldrh	r3, [r7, #18]
 801731a:	3303      	adds	r3, #3
 801731c:	f023 0303 	bic.w	r3, r3, #3
 8017320:	6a3a      	ldr	r2, [r7, #32]
 8017322:	4413      	add	r3, r2
 8017324:	617b      	str	r3, [r7, #20]
 8017326:	e001      	b.n	801732c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8017328:	2300      	movs	r3, #0
 801732a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801732c:	6878      	ldr	r0, [r7, #4]
 801732e:	89b9      	ldrh	r1, [r7, #12]
 8017330:	89ba      	ldrh	r2, [r7, #12]
 8017332:	2302      	movs	r3, #2
 8017334:	9301      	str	r3, [sp, #4]
 8017336:	897b      	ldrh	r3, [r7, #10]
 8017338:	9300      	str	r3, [sp, #0]
 801733a:	460b      	mov	r3, r1
 801733c:	6979      	ldr	r1, [r7, #20]
 801733e:	f7ff fe7d 	bl	801703c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8017342:	687b      	ldr	r3, [r7, #4]
}
 8017344:	4618      	mov	r0, r3
 8017346:	3718      	adds	r7, #24
 8017348:	46bd      	mov	sp, r7
 801734a:	bd80      	pop	{r7, pc}

0801734c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801734c:	b580      	push	{r7, lr}
 801734e:	b084      	sub	sp, #16
 8017350:	af00      	add	r7, sp, #0
 8017352:	6078      	str	r0, [r7, #4]
 8017354:	460b      	mov	r3, r1
 8017356:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	2b00      	cmp	r3, #0
 801735c:	d106      	bne.n	801736c <pbuf_realloc+0x20>
 801735e:	4b3a      	ldr	r3, [pc, #232]	; (8017448 <pbuf_realloc+0xfc>)
 8017360:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8017364:	4939      	ldr	r1, [pc, #228]	; (801744c <pbuf_realloc+0x100>)
 8017366:	483a      	ldr	r0, [pc, #232]	; (8017450 <pbuf_realloc+0x104>)
 8017368:	f00a f8dc 	bl	8021524 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	891b      	ldrh	r3, [r3, #8]
 8017370:	887a      	ldrh	r2, [r7, #2]
 8017372:	429a      	cmp	r2, r3
 8017374:	d263      	bcs.n	801743e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	891a      	ldrh	r2, [r3, #8]
 801737a:	887b      	ldrh	r3, [r7, #2]
 801737c:	1ad3      	subs	r3, r2, r3
 801737e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8017380:	887b      	ldrh	r3, [r7, #2]
 8017382:	817b      	strh	r3, [r7, #10]
  q = p;
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8017388:	e018      	b.n	80173bc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801738a:	68fb      	ldr	r3, [r7, #12]
 801738c:	895b      	ldrh	r3, [r3, #10]
 801738e:	897a      	ldrh	r2, [r7, #10]
 8017390:	1ad3      	subs	r3, r2, r3
 8017392:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8017394:	68fb      	ldr	r3, [r7, #12]
 8017396:	891a      	ldrh	r2, [r3, #8]
 8017398:	893b      	ldrh	r3, [r7, #8]
 801739a:	1ad3      	subs	r3, r2, r3
 801739c:	b29a      	uxth	r2, r3
 801739e:	68fb      	ldr	r3, [r7, #12]
 80173a0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80173a2:	68fb      	ldr	r3, [r7, #12]
 80173a4:	681b      	ldr	r3, [r3, #0]
 80173a6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	d106      	bne.n	80173bc <pbuf_realloc+0x70>
 80173ae:	4b26      	ldr	r3, [pc, #152]	; (8017448 <pbuf_realloc+0xfc>)
 80173b0:	f240 12af 	movw	r2, #431	; 0x1af
 80173b4:	4927      	ldr	r1, [pc, #156]	; (8017454 <pbuf_realloc+0x108>)
 80173b6:	4826      	ldr	r0, [pc, #152]	; (8017450 <pbuf_realloc+0x104>)
 80173b8:	f00a f8b4 	bl	8021524 <iprintf>
  while (rem_len > q->len) {
 80173bc:	68fb      	ldr	r3, [r7, #12]
 80173be:	895b      	ldrh	r3, [r3, #10]
 80173c0:	897a      	ldrh	r2, [r7, #10]
 80173c2:	429a      	cmp	r2, r3
 80173c4:	d8e1      	bhi.n	801738a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80173c6:	68fb      	ldr	r3, [r7, #12]
 80173c8:	7b1b      	ldrb	r3, [r3, #12]
 80173ca:	f003 030f 	and.w	r3, r3, #15
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d121      	bne.n	8017416 <pbuf_realloc+0xca>
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	895b      	ldrh	r3, [r3, #10]
 80173d6:	897a      	ldrh	r2, [r7, #10]
 80173d8:	429a      	cmp	r2, r3
 80173da:	d01c      	beq.n	8017416 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80173dc:	68fb      	ldr	r3, [r7, #12]
 80173de:	7b5b      	ldrb	r3, [r3, #13]
 80173e0:	f003 0302 	and.w	r3, r3, #2
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d116      	bne.n	8017416 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	685a      	ldr	r2, [r3, #4]
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	1ad3      	subs	r3, r2, r3
 80173f0:	b29a      	uxth	r2, r3
 80173f2:	897b      	ldrh	r3, [r7, #10]
 80173f4:	4413      	add	r3, r2
 80173f6:	b29b      	uxth	r3, r3
 80173f8:	4619      	mov	r1, r3
 80173fa:	68f8      	ldr	r0, [r7, #12]
 80173fc:	f7fe ffaa 	bl	8016354 <mem_trim>
 8017400:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	2b00      	cmp	r3, #0
 8017406:	d106      	bne.n	8017416 <pbuf_realloc+0xca>
 8017408:	4b0f      	ldr	r3, [pc, #60]	; (8017448 <pbuf_realloc+0xfc>)
 801740a:	f240 12bd 	movw	r2, #445	; 0x1bd
 801740e:	4912      	ldr	r1, [pc, #72]	; (8017458 <pbuf_realloc+0x10c>)
 8017410:	480f      	ldr	r0, [pc, #60]	; (8017450 <pbuf_realloc+0x104>)
 8017412:	f00a f887 	bl	8021524 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	897a      	ldrh	r2, [r7, #10]
 801741a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	895a      	ldrh	r2, [r3, #10]
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	681b      	ldr	r3, [r3, #0]
 8017428:	2b00      	cmp	r3, #0
 801742a:	d004      	beq.n	8017436 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801742c:	68fb      	ldr	r3, [r7, #12]
 801742e:	681b      	ldr	r3, [r3, #0]
 8017430:	4618      	mov	r0, r3
 8017432:	f000 f911 	bl	8017658 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8017436:	68fb      	ldr	r3, [r7, #12]
 8017438:	2200      	movs	r2, #0
 801743a:	601a      	str	r2, [r3, #0]
 801743c:	e000      	b.n	8017440 <pbuf_realloc+0xf4>
    return;
 801743e:	bf00      	nop

}
 8017440:	3710      	adds	r7, #16
 8017442:	46bd      	mov	sp, r7
 8017444:	bd80      	pop	{r7, pc}
 8017446:	bf00      	nop
 8017448:	08024c0c 	.word	0x08024c0c
 801744c:	08024d24 	.word	0x08024d24
 8017450:	08024c6c 	.word	0x08024c6c
 8017454:	08024d3c 	.word	0x08024d3c
 8017458:	08024d54 	.word	0x08024d54

0801745c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801745c:	b580      	push	{r7, lr}
 801745e:	b086      	sub	sp, #24
 8017460:	af00      	add	r7, sp, #0
 8017462:	60f8      	str	r0, [r7, #12]
 8017464:	60b9      	str	r1, [r7, #8]
 8017466:	4613      	mov	r3, r2
 8017468:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801746a:	68fb      	ldr	r3, [r7, #12]
 801746c:	2b00      	cmp	r3, #0
 801746e:	d106      	bne.n	801747e <pbuf_add_header_impl+0x22>
 8017470:	4b2b      	ldr	r3, [pc, #172]	; (8017520 <pbuf_add_header_impl+0xc4>)
 8017472:	f240 12df 	movw	r2, #479	; 0x1df
 8017476:	492b      	ldr	r1, [pc, #172]	; (8017524 <pbuf_add_header_impl+0xc8>)
 8017478:	482b      	ldr	r0, [pc, #172]	; (8017528 <pbuf_add_header_impl+0xcc>)
 801747a:	f00a f853 	bl	8021524 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	2b00      	cmp	r3, #0
 8017482:	d003      	beq.n	801748c <pbuf_add_header_impl+0x30>
 8017484:	68bb      	ldr	r3, [r7, #8]
 8017486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801748a:	d301      	bcc.n	8017490 <pbuf_add_header_impl+0x34>
    return 1;
 801748c:	2301      	movs	r3, #1
 801748e:	e043      	b.n	8017518 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8017490:	68bb      	ldr	r3, [r7, #8]
 8017492:	2b00      	cmp	r3, #0
 8017494:	d101      	bne.n	801749a <pbuf_add_header_impl+0x3e>
    return 0;
 8017496:	2300      	movs	r3, #0
 8017498:	e03e      	b.n	8017518 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801749a:	68bb      	ldr	r3, [r7, #8]
 801749c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	891a      	ldrh	r2, [r3, #8]
 80174a2:	8a7b      	ldrh	r3, [r7, #18]
 80174a4:	4413      	add	r3, r2
 80174a6:	b29b      	uxth	r3, r3
 80174a8:	8a7a      	ldrh	r2, [r7, #18]
 80174aa:	429a      	cmp	r2, r3
 80174ac:	d901      	bls.n	80174b2 <pbuf_add_header_impl+0x56>
    return 1;
 80174ae:	2301      	movs	r3, #1
 80174b0:	e032      	b.n	8017518 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80174b2:	68fb      	ldr	r3, [r7, #12]
 80174b4:	7b1b      	ldrb	r3, [r3, #12]
 80174b6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80174b8:	8a3b      	ldrh	r3, [r7, #16]
 80174ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d00c      	beq.n	80174dc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80174c2:	68fb      	ldr	r3, [r7, #12]
 80174c4:	685a      	ldr	r2, [r3, #4]
 80174c6:	68bb      	ldr	r3, [r7, #8]
 80174c8:	425b      	negs	r3, r3
 80174ca:	4413      	add	r3, r2
 80174cc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80174ce:	68fb      	ldr	r3, [r7, #12]
 80174d0:	3310      	adds	r3, #16
 80174d2:	697a      	ldr	r2, [r7, #20]
 80174d4:	429a      	cmp	r2, r3
 80174d6:	d20d      	bcs.n	80174f4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80174d8:	2301      	movs	r3, #1
 80174da:	e01d      	b.n	8017518 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80174dc:	79fb      	ldrb	r3, [r7, #7]
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d006      	beq.n	80174f0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80174e2:	68fb      	ldr	r3, [r7, #12]
 80174e4:	685a      	ldr	r2, [r3, #4]
 80174e6:	68bb      	ldr	r3, [r7, #8]
 80174e8:	425b      	negs	r3, r3
 80174ea:	4413      	add	r3, r2
 80174ec:	617b      	str	r3, [r7, #20]
 80174ee:	e001      	b.n	80174f4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80174f0:	2301      	movs	r3, #1
 80174f2:	e011      	b.n	8017518 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80174f4:	68fb      	ldr	r3, [r7, #12]
 80174f6:	697a      	ldr	r2, [r7, #20]
 80174f8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80174fa:	68fb      	ldr	r3, [r7, #12]
 80174fc:	895a      	ldrh	r2, [r3, #10]
 80174fe:	8a7b      	ldrh	r3, [r7, #18]
 8017500:	4413      	add	r3, r2
 8017502:	b29a      	uxth	r2, r3
 8017504:	68fb      	ldr	r3, [r7, #12]
 8017506:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	891a      	ldrh	r2, [r3, #8]
 801750c:	8a7b      	ldrh	r3, [r7, #18]
 801750e:	4413      	add	r3, r2
 8017510:	b29a      	uxth	r2, r3
 8017512:	68fb      	ldr	r3, [r7, #12]
 8017514:	811a      	strh	r2, [r3, #8]


  return 0;
 8017516:	2300      	movs	r3, #0
}
 8017518:	4618      	mov	r0, r3
 801751a:	3718      	adds	r7, #24
 801751c:	46bd      	mov	sp, r7
 801751e:	bd80      	pop	{r7, pc}
 8017520:	08024c0c 	.word	0x08024c0c
 8017524:	08024d70 	.word	0x08024d70
 8017528:	08024c6c 	.word	0x08024c6c

0801752c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801752c:	b580      	push	{r7, lr}
 801752e:	b082      	sub	sp, #8
 8017530:	af00      	add	r7, sp, #0
 8017532:	6078      	str	r0, [r7, #4]
 8017534:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8017536:	2200      	movs	r2, #0
 8017538:	6839      	ldr	r1, [r7, #0]
 801753a:	6878      	ldr	r0, [r7, #4]
 801753c:	f7ff ff8e 	bl	801745c <pbuf_add_header_impl>
 8017540:	4603      	mov	r3, r0
}
 8017542:	4618      	mov	r0, r3
 8017544:	3708      	adds	r7, #8
 8017546:	46bd      	mov	sp, r7
 8017548:	bd80      	pop	{r7, pc}
	...

0801754c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801754c:	b580      	push	{r7, lr}
 801754e:	b084      	sub	sp, #16
 8017550:	af00      	add	r7, sp, #0
 8017552:	6078      	str	r0, [r7, #4]
 8017554:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	2b00      	cmp	r3, #0
 801755a:	d106      	bne.n	801756a <pbuf_remove_header+0x1e>
 801755c:	4b20      	ldr	r3, [pc, #128]	; (80175e0 <pbuf_remove_header+0x94>)
 801755e:	f240 224b 	movw	r2, #587	; 0x24b
 8017562:	4920      	ldr	r1, [pc, #128]	; (80175e4 <pbuf_remove_header+0x98>)
 8017564:	4820      	ldr	r0, [pc, #128]	; (80175e8 <pbuf_remove_header+0x9c>)
 8017566:	f009 ffdd 	bl	8021524 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	2b00      	cmp	r3, #0
 801756e:	d003      	beq.n	8017578 <pbuf_remove_header+0x2c>
 8017570:	683b      	ldr	r3, [r7, #0]
 8017572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017576:	d301      	bcc.n	801757c <pbuf_remove_header+0x30>
    return 1;
 8017578:	2301      	movs	r3, #1
 801757a:	e02c      	b.n	80175d6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801757c:	683b      	ldr	r3, [r7, #0]
 801757e:	2b00      	cmp	r3, #0
 8017580:	d101      	bne.n	8017586 <pbuf_remove_header+0x3a>
    return 0;
 8017582:	2300      	movs	r3, #0
 8017584:	e027      	b.n	80175d6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8017586:	683b      	ldr	r3, [r7, #0]
 8017588:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	895b      	ldrh	r3, [r3, #10]
 801758e:	89fa      	ldrh	r2, [r7, #14]
 8017590:	429a      	cmp	r2, r3
 8017592:	d908      	bls.n	80175a6 <pbuf_remove_header+0x5a>
 8017594:	4b12      	ldr	r3, [pc, #72]	; (80175e0 <pbuf_remove_header+0x94>)
 8017596:	f240 2255 	movw	r2, #597	; 0x255
 801759a:	4914      	ldr	r1, [pc, #80]	; (80175ec <pbuf_remove_header+0xa0>)
 801759c:	4812      	ldr	r0, [pc, #72]	; (80175e8 <pbuf_remove_header+0x9c>)
 801759e:	f009 ffc1 	bl	8021524 <iprintf>
 80175a2:	2301      	movs	r3, #1
 80175a4:	e017      	b.n	80175d6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	685b      	ldr	r3, [r3, #4]
 80175aa:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	685a      	ldr	r2, [r3, #4]
 80175b0:	683b      	ldr	r3, [r7, #0]
 80175b2:	441a      	add	r2, r3
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	895a      	ldrh	r2, [r3, #10]
 80175bc:	89fb      	ldrh	r3, [r7, #14]
 80175be:	1ad3      	subs	r3, r2, r3
 80175c0:	b29a      	uxth	r2, r3
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	891a      	ldrh	r2, [r3, #8]
 80175ca:	89fb      	ldrh	r3, [r7, #14]
 80175cc:	1ad3      	subs	r3, r2, r3
 80175ce:	b29a      	uxth	r2, r3
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80175d4:	2300      	movs	r3, #0
}
 80175d6:	4618      	mov	r0, r3
 80175d8:	3710      	adds	r7, #16
 80175da:	46bd      	mov	sp, r7
 80175dc:	bd80      	pop	{r7, pc}
 80175de:	bf00      	nop
 80175e0:	08024c0c 	.word	0x08024c0c
 80175e4:	08024d70 	.word	0x08024d70
 80175e8:	08024c6c 	.word	0x08024c6c
 80175ec:	08024d7c 	.word	0x08024d7c

080175f0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80175f0:	b580      	push	{r7, lr}
 80175f2:	b082      	sub	sp, #8
 80175f4:	af00      	add	r7, sp, #0
 80175f6:	6078      	str	r0, [r7, #4]
 80175f8:	460b      	mov	r3, r1
 80175fa:	807b      	strh	r3, [r7, #2]
 80175fc:	4613      	mov	r3, r2
 80175fe:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8017600:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017604:	2b00      	cmp	r3, #0
 8017606:	da08      	bge.n	801761a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8017608:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801760c:	425b      	negs	r3, r3
 801760e:	4619      	mov	r1, r3
 8017610:	6878      	ldr	r0, [r7, #4]
 8017612:	f7ff ff9b 	bl	801754c <pbuf_remove_header>
 8017616:	4603      	mov	r3, r0
 8017618:	e007      	b.n	801762a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801761a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801761e:	787a      	ldrb	r2, [r7, #1]
 8017620:	4619      	mov	r1, r3
 8017622:	6878      	ldr	r0, [r7, #4]
 8017624:	f7ff ff1a 	bl	801745c <pbuf_add_header_impl>
 8017628:	4603      	mov	r3, r0
  }
}
 801762a:	4618      	mov	r0, r3
 801762c:	3708      	adds	r7, #8
 801762e:	46bd      	mov	sp, r7
 8017630:	bd80      	pop	{r7, pc}

08017632 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8017632:	b580      	push	{r7, lr}
 8017634:	b082      	sub	sp, #8
 8017636:	af00      	add	r7, sp, #0
 8017638:	6078      	str	r0, [r7, #4]
 801763a:	460b      	mov	r3, r1
 801763c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801763e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017642:	2201      	movs	r2, #1
 8017644:	4619      	mov	r1, r3
 8017646:	6878      	ldr	r0, [r7, #4]
 8017648:	f7ff ffd2 	bl	80175f0 <pbuf_header_impl>
 801764c:	4603      	mov	r3, r0
}
 801764e:	4618      	mov	r0, r3
 8017650:	3708      	adds	r7, #8
 8017652:	46bd      	mov	sp, r7
 8017654:	bd80      	pop	{r7, pc}
	...

08017658 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8017658:	b580      	push	{r7, lr}
 801765a:	b088      	sub	sp, #32
 801765c:	af00      	add	r7, sp, #0
 801765e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	2b00      	cmp	r3, #0
 8017664:	d10b      	bne.n	801767e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	2b00      	cmp	r3, #0
 801766a:	d106      	bne.n	801767a <pbuf_free+0x22>
 801766c:	4b3b      	ldr	r3, [pc, #236]	; (801775c <pbuf_free+0x104>)
 801766e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8017672:	493b      	ldr	r1, [pc, #236]	; (8017760 <pbuf_free+0x108>)
 8017674:	483b      	ldr	r0, [pc, #236]	; (8017764 <pbuf_free+0x10c>)
 8017676:	f009 ff55 	bl	8021524 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801767a:	2300      	movs	r3, #0
 801767c:	e069      	b.n	8017752 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801767e:	2300      	movs	r3, #0
 8017680:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8017682:	e062      	b.n	801774a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8017684:	f009 f9c4 	bl	8020a10 <sys_arch_protect>
 8017688:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	7b9b      	ldrb	r3, [r3, #14]
 801768e:	2b00      	cmp	r3, #0
 8017690:	d106      	bne.n	80176a0 <pbuf_free+0x48>
 8017692:	4b32      	ldr	r3, [pc, #200]	; (801775c <pbuf_free+0x104>)
 8017694:	f240 22f1 	movw	r2, #753	; 0x2f1
 8017698:	4933      	ldr	r1, [pc, #204]	; (8017768 <pbuf_free+0x110>)
 801769a:	4832      	ldr	r0, [pc, #200]	; (8017764 <pbuf_free+0x10c>)
 801769c:	f009 ff42 	bl	8021524 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	7b9b      	ldrb	r3, [r3, #14]
 80176a4:	3b01      	subs	r3, #1
 80176a6:	b2da      	uxtb	r2, r3
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	739a      	strb	r2, [r3, #14]
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	7b9b      	ldrb	r3, [r3, #14]
 80176b0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80176b2:	69b8      	ldr	r0, [r7, #24]
 80176b4:	f009 f9ba 	bl	8020a2c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80176b8:	7dfb      	ldrb	r3, [r7, #23]
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d143      	bne.n	8017746 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	681b      	ldr	r3, [r3, #0]
 80176c2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	7b1b      	ldrb	r3, [r3, #12]
 80176c8:	f003 030f 	and.w	r3, r3, #15
 80176cc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	7b5b      	ldrb	r3, [r3, #13]
 80176d2:	f003 0302 	and.w	r3, r3, #2
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d011      	beq.n	80176fe <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80176de:	68bb      	ldr	r3, [r7, #8]
 80176e0:	691b      	ldr	r3, [r3, #16]
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d106      	bne.n	80176f4 <pbuf_free+0x9c>
 80176e6:	4b1d      	ldr	r3, [pc, #116]	; (801775c <pbuf_free+0x104>)
 80176e8:	f240 22ff 	movw	r2, #767	; 0x2ff
 80176ec:	491f      	ldr	r1, [pc, #124]	; (801776c <pbuf_free+0x114>)
 80176ee:	481d      	ldr	r0, [pc, #116]	; (8017764 <pbuf_free+0x10c>)
 80176f0:	f009 ff18 	bl	8021524 <iprintf>
        pc->custom_free_function(p);
 80176f4:	68bb      	ldr	r3, [r7, #8]
 80176f6:	691b      	ldr	r3, [r3, #16]
 80176f8:	6878      	ldr	r0, [r7, #4]
 80176fa:	4798      	blx	r3
 80176fc:	e01d      	b.n	801773a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80176fe:	7bfb      	ldrb	r3, [r7, #15]
 8017700:	2b02      	cmp	r3, #2
 8017702:	d104      	bne.n	801770e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8017704:	6879      	ldr	r1, [r7, #4]
 8017706:	200c      	movs	r0, #12
 8017708:	f7ff f902 	bl	8016910 <memp_free>
 801770c:	e015      	b.n	801773a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801770e:	7bfb      	ldrb	r3, [r7, #15]
 8017710:	2b01      	cmp	r3, #1
 8017712:	d104      	bne.n	801771e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8017714:	6879      	ldr	r1, [r7, #4]
 8017716:	200b      	movs	r0, #11
 8017718:	f7ff f8fa 	bl	8016910 <memp_free>
 801771c:	e00d      	b.n	801773a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801771e:	7bfb      	ldrb	r3, [r7, #15]
 8017720:	2b00      	cmp	r3, #0
 8017722:	d103      	bne.n	801772c <pbuf_free+0xd4>
          mem_free(p);
 8017724:	6878      	ldr	r0, [r7, #4]
 8017726:	f7fe fd85 	bl	8016234 <mem_free>
 801772a:	e006      	b.n	801773a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801772c:	4b0b      	ldr	r3, [pc, #44]	; (801775c <pbuf_free+0x104>)
 801772e:	f240 320f 	movw	r2, #783	; 0x30f
 8017732:	490f      	ldr	r1, [pc, #60]	; (8017770 <pbuf_free+0x118>)
 8017734:	480b      	ldr	r0, [pc, #44]	; (8017764 <pbuf_free+0x10c>)
 8017736:	f009 fef5 	bl	8021524 <iprintf>
        }
      }
      count++;
 801773a:	7ffb      	ldrb	r3, [r7, #31]
 801773c:	3301      	adds	r3, #1
 801773e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8017740:	693b      	ldr	r3, [r7, #16]
 8017742:	607b      	str	r3, [r7, #4]
 8017744:	e001      	b.n	801774a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8017746:	2300      	movs	r3, #0
 8017748:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	2b00      	cmp	r3, #0
 801774e:	d199      	bne.n	8017684 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8017750:	7ffb      	ldrb	r3, [r7, #31]
}
 8017752:	4618      	mov	r0, r3
 8017754:	3720      	adds	r7, #32
 8017756:	46bd      	mov	sp, r7
 8017758:	bd80      	pop	{r7, pc}
 801775a:	bf00      	nop
 801775c:	08024c0c 	.word	0x08024c0c
 8017760:	08024d70 	.word	0x08024d70
 8017764:	08024c6c 	.word	0x08024c6c
 8017768:	08024d9c 	.word	0x08024d9c
 801776c:	08024db4 	.word	0x08024db4
 8017770:	08024dd8 	.word	0x08024dd8

08017774 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8017774:	b480      	push	{r7}
 8017776:	b085      	sub	sp, #20
 8017778:	af00      	add	r7, sp, #0
 801777a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801777c:	2300      	movs	r3, #0
 801777e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8017780:	e005      	b.n	801778e <pbuf_clen+0x1a>
    ++len;
 8017782:	89fb      	ldrh	r3, [r7, #14]
 8017784:	3301      	adds	r3, #1
 8017786:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	2b00      	cmp	r3, #0
 8017792:	d1f6      	bne.n	8017782 <pbuf_clen+0xe>
  }
  return len;
 8017794:	89fb      	ldrh	r3, [r7, #14]
}
 8017796:	4618      	mov	r0, r3
 8017798:	3714      	adds	r7, #20
 801779a:	46bd      	mov	sp, r7
 801779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177a0:	4770      	bx	lr
	...

080177a4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80177a4:	b580      	push	{r7, lr}
 80177a6:	b084      	sub	sp, #16
 80177a8:	af00      	add	r7, sp, #0
 80177aa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	d016      	beq.n	80177e0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80177b2:	f009 f92d 	bl	8020a10 <sys_arch_protect>
 80177b6:	60f8      	str	r0, [r7, #12]
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	7b9b      	ldrb	r3, [r3, #14]
 80177bc:	3301      	adds	r3, #1
 80177be:	b2da      	uxtb	r2, r3
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	739a      	strb	r2, [r3, #14]
 80177c4:	68f8      	ldr	r0, [r7, #12]
 80177c6:	f009 f931 	bl	8020a2c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	7b9b      	ldrb	r3, [r3, #14]
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d106      	bne.n	80177e0 <pbuf_ref+0x3c>
 80177d2:	4b05      	ldr	r3, [pc, #20]	; (80177e8 <pbuf_ref+0x44>)
 80177d4:	f240 3242 	movw	r2, #834	; 0x342
 80177d8:	4904      	ldr	r1, [pc, #16]	; (80177ec <pbuf_ref+0x48>)
 80177da:	4805      	ldr	r0, [pc, #20]	; (80177f0 <pbuf_ref+0x4c>)
 80177dc:	f009 fea2 	bl	8021524 <iprintf>
  }
}
 80177e0:	bf00      	nop
 80177e2:	3710      	adds	r7, #16
 80177e4:	46bd      	mov	sp, r7
 80177e6:	bd80      	pop	{r7, pc}
 80177e8:	08024c0c 	.word	0x08024c0c
 80177ec:	08024dec 	.word	0x08024dec
 80177f0:	08024c6c 	.word	0x08024c6c

080177f4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80177f4:	b580      	push	{r7, lr}
 80177f6:	b084      	sub	sp, #16
 80177f8:	af00      	add	r7, sp, #0
 80177fa:	6078      	str	r0, [r7, #4]
 80177fc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	2b00      	cmp	r3, #0
 8017802:	d002      	beq.n	801780a <pbuf_cat+0x16>
 8017804:	683b      	ldr	r3, [r7, #0]
 8017806:	2b00      	cmp	r3, #0
 8017808:	d107      	bne.n	801781a <pbuf_cat+0x26>
 801780a:	4b20      	ldr	r3, [pc, #128]	; (801788c <pbuf_cat+0x98>)
 801780c:	f240 3259 	movw	r2, #857	; 0x359
 8017810:	491f      	ldr	r1, [pc, #124]	; (8017890 <pbuf_cat+0x9c>)
 8017812:	4820      	ldr	r0, [pc, #128]	; (8017894 <pbuf_cat+0xa0>)
 8017814:	f009 fe86 	bl	8021524 <iprintf>
 8017818:	e034      	b.n	8017884 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	60fb      	str	r3, [r7, #12]
 801781e:	e00a      	b.n	8017836 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8017820:	68fb      	ldr	r3, [r7, #12]
 8017822:	891a      	ldrh	r2, [r3, #8]
 8017824:	683b      	ldr	r3, [r7, #0]
 8017826:	891b      	ldrh	r3, [r3, #8]
 8017828:	4413      	add	r3, r2
 801782a:	b29a      	uxth	r2, r3
 801782c:	68fb      	ldr	r3, [r7, #12]
 801782e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8017830:	68fb      	ldr	r3, [r7, #12]
 8017832:	681b      	ldr	r3, [r3, #0]
 8017834:	60fb      	str	r3, [r7, #12]
 8017836:	68fb      	ldr	r3, [r7, #12]
 8017838:	681b      	ldr	r3, [r3, #0]
 801783a:	2b00      	cmp	r3, #0
 801783c:	d1f0      	bne.n	8017820 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801783e:	68fb      	ldr	r3, [r7, #12]
 8017840:	891a      	ldrh	r2, [r3, #8]
 8017842:	68fb      	ldr	r3, [r7, #12]
 8017844:	895b      	ldrh	r3, [r3, #10]
 8017846:	429a      	cmp	r2, r3
 8017848:	d006      	beq.n	8017858 <pbuf_cat+0x64>
 801784a:	4b10      	ldr	r3, [pc, #64]	; (801788c <pbuf_cat+0x98>)
 801784c:	f240 3262 	movw	r2, #866	; 0x362
 8017850:	4911      	ldr	r1, [pc, #68]	; (8017898 <pbuf_cat+0xa4>)
 8017852:	4810      	ldr	r0, [pc, #64]	; (8017894 <pbuf_cat+0xa0>)
 8017854:	f009 fe66 	bl	8021524 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	681b      	ldr	r3, [r3, #0]
 801785c:	2b00      	cmp	r3, #0
 801785e:	d006      	beq.n	801786e <pbuf_cat+0x7a>
 8017860:	4b0a      	ldr	r3, [pc, #40]	; (801788c <pbuf_cat+0x98>)
 8017862:	f240 3263 	movw	r2, #867	; 0x363
 8017866:	490d      	ldr	r1, [pc, #52]	; (801789c <pbuf_cat+0xa8>)
 8017868:	480a      	ldr	r0, [pc, #40]	; (8017894 <pbuf_cat+0xa0>)
 801786a:	f009 fe5b 	bl	8021524 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801786e:	68fb      	ldr	r3, [r7, #12]
 8017870:	891a      	ldrh	r2, [r3, #8]
 8017872:	683b      	ldr	r3, [r7, #0]
 8017874:	891b      	ldrh	r3, [r3, #8]
 8017876:	4413      	add	r3, r2
 8017878:	b29a      	uxth	r2, r3
 801787a:	68fb      	ldr	r3, [r7, #12]
 801787c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	683a      	ldr	r2, [r7, #0]
 8017882:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8017884:	3710      	adds	r7, #16
 8017886:	46bd      	mov	sp, r7
 8017888:	bd80      	pop	{r7, pc}
 801788a:	bf00      	nop
 801788c:	08024c0c 	.word	0x08024c0c
 8017890:	08024e00 	.word	0x08024e00
 8017894:	08024c6c 	.word	0x08024c6c
 8017898:	08024e38 	.word	0x08024e38
 801789c:	08024e68 	.word	0x08024e68

080178a0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80178a0:	b580      	push	{r7, lr}
 80178a2:	b086      	sub	sp, #24
 80178a4:	af00      	add	r7, sp, #0
 80178a6:	6078      	str	r0, [r7, #4]
 80178a8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80178aa:	2300      	movs	r3, #0
 80178ac:	617b      	str	r3, [r7, #20]
 80178ae:	2300      	movs	r3, #0
 80178b0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d008      	beq.n	80178ca <pbuf_copy+0x2a>
 80178b8:	683b      	ldr	r3, [r7, #0]
 80178ba:	2b00      	cmp	r3, #0
 80178bc:	d005      	beq.n	80178ca <pbuf_copy+0x2a>
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	891a      	ldrh	r2, [r3, #8]
 80178c2:	683b      	ldr	r3, [r7, #0]
 80178c4:	891b      	ldrh	r3, [r3, #8]
 80178c6:	429a      	cmp	r2, r3
 80178c8:	d209      	bcs.n	80178de <pbuf_copy+0x3e>
 80178ca:	4b57      	ldr	r3, [pc, #348]	; (8017a28 <pbuf_copy+0x188>)
 80178cc:	f240 32c9 	movw	r2, #969	; 0x3c9
 80178d0:	4956      	ldr	r1, [pc, #344]	; (8017a2c <pbuf_copy+0x18c>)
 80178d2:	4857      	ldr	r0, [pc, #348]	; (8017a30 <pbuf_copy+0x190>)
 80178d4:	f009 fe26 	bl	8021524 <iprintf>
 80178d8:	f06f 030f 	mvn.w	r3, #15
 80178dc:	e09f      	b.n	8017a1e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	895b      	ldrh	r3, [r3, #10]
 80178e2:	461a      	mov	r2, r3
 80178e4:	697b      	ldr	r3, [r7, #20]
 80178e6:	1ad2      	subs	r2, r2, r3
 80178e8:	683b      	ldr	r3, [r7, #0]
 80178ea:	895b      	ldrh	r3, [r3, #10]
 80178ec:	4619      	mov	r1, r3
 80178ee:	693b      	ldr	r3, [r7, #16]
 80178f0:	1acb      	subs	r3, r1, r3
 80178f2:	429a      	cmp	r2, r3
 80178f4:	d306      	bcc.n	8017904 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80178f6:	683b      	ldr	r3, [r7, #0]
 80178f8:	895b      	ldrh	r3, [r3, #10]
 80178fa:	461a      	mov	r2, r3
 80178fc:	693b      	ldr	r3, [r7, #16]
 80178fe:	1ad3      	subs	r3, r2, r3
 8017900:	60fb      	str	r3, [r7, #12]
 8017902:	e005      	b.n	8017910 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	895b      	ldrh	r3, [r3, #10]
 8017908:	461a      	mov	r2, r3
 801790a:	697b      	ldr	r3, [r7, #20]
 801790c:	1ad3      	subs	r3, r2, r3
 801790e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	685a      	ldr	r2, [r3, #4]
 8017914:	697b      	ldr	r3, [r7, #20]
 8017916:	18d0      	adds	r0, r2, r3
 8017918:	683b      	ldr	r3, [r7, #0]
 801791a:	685a      	ldr	r2, [r3, #4]
 801791c:	693b      	ldr	r3, [r7, #16]
 801791e:	4413      	add	r3, r2
 8017920:	68fa      	ldr	r2, [r7, #12]
 8017922:	4619      	mov	r1, r3
 8017924:	f009 fd24 	bl	8021370 <memcpy>
    offset_to += len;
 8017928:	697a      	ldr	r2, [r7, #20]
 801792a:	68fb      	ldr	r3, [r7, #12]
 801792c:	4413      	add	r3, r2
 801792e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8017930:	693a      	ldr	r2, [r7, #16]
 8017932:	68fb      	ldr	r3, [r7, #12]
 8017934:	4413      	add	r3, r2
 8017936:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	895b      	ldrh	r3, [r3, #10]
 801793c:	461a      	mov	r2, r3
 801793e:	697b      	ldr	r3, [r7, #20]
 8017940:	4293      	cmp	r3, r2
 8017942:	d906      	bls.n	8017952 <pbuf_copy+0xb2>
 8017944:	4b38      	ldr	r3, [pc, #224]	; (8017a28 <pbuf_copy+0x188>)
 8017946:	f240 32d9 	movw	r2, #985	; 0x3d9
 801794a:	493a      	ldr	r1, [pc, #232]	; (8017a34 <pbuf_copy+0x194>)
 801794c:	4838      	ldr	r0, [pc, #224]	; (8017a30 <pbuf_copy+0x190>)
 801794e:	f009 fde9 	bl	8021524 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8017952:	683b      	ldr	r3, [r7, #0]
 8017954:	895b      	ldrh	r3, [r3, #10]
 8017956:	461a      	mov	r2, r3
 8017958:	693b      	ldr	r3, [r7, #16]
 801795a:	4293      	cmp	r3, r2
 801795c:	d906      	bls.n	801796c <pbuf_copy+0xcc>
 801795e:	4b32      	ldr	r3, [pc, #200]	; (8017a28 <pbuf_copy+0x188>)
 8017960:	f240 32da 	movw	r2, #986	; 0x3da
 8017964:	4934      	ldr	r1, [pc, #208]	; (8017a38 <pbuf_copy+0x198>)
 8017966:	4832      	ldr	r0, [pc, #200]	; (8017a30 <pbuf_copy+0x190>)
 8017968:	f009 fddc 	bl	8021524 <iprintf>
    if (offset_from >= p_from->len) {
 801796c:	683b      	ldr	r3, [r7, #0]
 801796e:	895b      	ldrh	r3, [r3, #10]
 8017970:	461a      	mov	r2, r3
 8017972:	693b      	ldr	r3, [r7, #16]
 8017974:	4293      	cmp	r3, r2
 8017976:	d304      	bcc.n	8017982 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8017978:	2300      	movs	r3, #0
 801797a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801797c:	683b      	ldr	r3, [r7, #0]
 801797e:	681b      	ldr	r3, [r3, #0]
 8017980:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	895b      	ldrh	r3, [r3, #10]
 8017986:	461a      	mov	r2, r3
 8017988:	697b      	ldr	r3, [r7, #20]
 801798a:	4293      	cmp	r3, r2
 801798c:	d114      	bne.n	80179b8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801798e:	2300      	movs	r3, #0
 8017990:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	2b00      	cmp	r3, #0
 801799c:	d10c      	bne.n	80179b8 <pbuf_copy+0x118>
 801799e:	683b      	ldr	r3, [r7, #0]
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d009      	beq.n	80179b8 <pbuf_copy+0x118>
 80179a4:	4b20      	ldr	r3, [pc, #128]	; (8017a28 <pbuf_copy+0x188>)
 80179a6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80179aa:	4924      	ldr	r1, [pc, #144]	; (8017a3c <pbuf_copy+0x19c>)
 80179ac:	4820      	ldr	r0, [pc, #128]	; (8017a30 <pbuf_copy+0x190>)
 80179ae:	f009 fdb9 	bl	8021524 <iprintf>
 80179b2:	f06f 030f 	mvn.w	r3, #15
 80179b6:	e032      	b.n	8017a1e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80179b8:	683b      	ldr	r3, [r7, #0]
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d013      	beq.n	80179e6 <pbuf_copy+0x146>
 80179be:	683b      	ldr	r3, [r7, #0]
 80179c0:	895a      	ldrh	r2, [r3, #10]
 80179c2:	683b      	ldr	r3, [r7, #0]
 80179c4:	891b      	ldrh	r3, [r3, #8]
 80179c6:	429a      	cmp	r2, r3
 80179c8:	d10d      	bne.n	80179e6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80179ca:	683b      	ldr	r3, [r7, #0]
 80179cc:	681b      	ldr	r3, [r3, #0]
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d009      	beq.n	80179e6 <pbuf_copy+0x146>
 80179d2:	4b15      	ldr	r3, [pc, #84]	; (8017a28 <pbuf_copy+0x188>)
 80179d4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80179d8:	4919      	ldr	r1, [pc, #100]	; (8017a40 <pbuf_copy+0x1a0>)
 80179da:	4815      	ldr	r0, [pc, #84]	; (8017a30 <pbuf_copy+0x190>)
 80179dc:	f009 fda2 	bl	8021524 <iprintf>
 80179e0:	f06f 0305 	mvn.w	r3, #5
 80179e4:	e01b      	b.n	8017a1e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d013      	beq.n	8017a14 <pbuf_copy+0x174>
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	895a      	ldrh	r2, [r3, #10]
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	891b      	ldrh	r3, [r3, #8]
 80179f4:	429a      	cmp	r2, r3
 80179f6:	d10d      	bne.n	8017a14 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d009      	beq.n	8017a14 <pbuf_copy+0x174>
 8017a00:	4b09      	ldr	r3, [pc, #36]	; (8017a28 <pbuf_copy+0x188>)
 8017a02:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8017a06:	490e      	ldr	r1, [pc, #56]	; (8017a40 <pbuf_copy+0x1a0>)
 8017a08:	4809      	ldr	r0, [pc, #36]	; (8017a30 <pbuf_copy+0x190>)
 8017a0a:	f009 fd8b 	bl	8021524 <iprintf>
 8017a0e:	f06f 0305 	mvn.w	r3, #5
 8017a12:	e004      	b.n	8017a1e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8017a14:	683b      	ldr	r3, [r7, #0]
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	f47f af61 	bne.w	80178de <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8017a1c:	2300      	movs	r3, #0
}
 8017a1e:	4618      	mov	r0, r3
 8017a20:	3718      	adds	r7, #24
 8017a22:	46bd      	mov	sp, r7
 8017a24:	bd80      	pop	{r7, pc}
 8017a26:	bf00      	nop
 8017a28:	08024c0c 	.word	0x08024c0c
 8017a2c:	08024eb4 	.word	0x08024eb4
 8017a30:	08024c6c 	.word	0x08024c6c
 8017a34:	08024ee4 	.word	0x08024ee4
 8017a38:	08024efc 	.word	0x08024efc
 8017a3c:	08024f18 	.word	0x08024f18
 8017a40:	08024f28 	.word	0x08024f28

08017a44 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8017a44:	b580      	push	{r7, lr}
 8017a46:	b088      	sub	sp, #32
 8017a48:	af00      	add	r7, sp, #0
 8017a4a:	60f8      	str	r0, [r7, #12]
 8017a4c:	60b9      	str	r1, [r7, #8]
 8017a4e:	4611      	mov	r1, r2
 8017a50:	461a      	mov	r2, r3
 8017a52:	460b      	mov	r3, r1
 8017a54:	80fb      	strh	r3, [r7, #6]
 8017a56:	4613      	mov	r3, r2
 8017a58:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8017a5a:	2300      	movs	r3, #0
 8017a5c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8017a5e:	2300      	movs	r3, #0
 8017a60:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d108      	bne.n	8017a7a <pbuf_copy_partial+0x36>
 8017a68:	4b2b      	ldr	r3, [pc, #172]	; (8017b18 <pbuf_copy_partial+0xd4>)
 8017a6a:	f240 420a 	movw	r2, #1034	; 0x40a
 8017a6e:	492b      	ldr	r1, [pc, #172]	; (8017b1c <pbuf_copy_partial+0xd8>)
 8017a70:	482b      	ldr	r0, [pc, #172]	; (8017b20 <pbuf_copy_partial+0xdc>)
 8017a72:	f009 fd57 	bl	8021524 <iprintf>
 8017a76:	2300      	movs	r3, #0
 8017a78:	e04a      	b.n	8017b10 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8017a7a:	68bb      	ldr	r3, [r7, #8]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d108      	bne.n	8017a92 <pbuf_copy_partial+0x4e>
 8017a80:	4b25      	ldr	r3, [pc, #148]	; (8017b18 <pbuf_copy_partial+0xd4>)
 8017a82:	f240 420b 	movw	r2, #1035	; 0x40b
 8017a86:	4927      	ldr	r1, [pc, #156]	; (8017b24 <pbuf_copy_partial+0xe0>)
 8017a88:	4825      	ldr	r0, [pc, #148]	; (8017b20 <pbuf_copy_partial+0xdc>)
 8017a8a:	f009 fd4b 	bl	8021524 <iprintf>
 8017a8e:	2300      	movs	r3, #0
 8017a90:	e03e      	b.n	8017b10 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8017a92:	68fb      	ldr	r3, [r7, #12]
 8017a94:	61fb      	str	r3, [r7, #28]
 8017a96:	e034      	b.n	8017b02 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8017a98:	88bb      	ldrh	r3, [r7, #4]
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d00a      	beq.n	8017ab4 <pbuf_copy_partial+0x70>
 8017a9e:	69fb      	ldr	r3, [r7, #28]
 8017aa0:	895b      	ldrh	r3, [r3, #10]
 8017aa2:	88ba      	ldrh	r2, [r7, #4]
 8017aa4:	429a      	cmp	r2, r3
 8017aa6:	d305      	bcc.n	8017ab4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8017aa8:	69fb      	ldr	r3, [r7, #28]
 8017aaa:	895b      	ldrh	r3, [r3, #10]
 8017aac:	88ba      	ldrh	r2, [r7, #4]
 8017aae:	1ad3      	subs	r3, r2, r3
 8017ab0:	80bb      	strh	r3, [r7, #4]
 8017ab2:	e023      	b.n	8017afc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8017ab4:	69fb      	ldr	r3, [r7, #28]
 8017ab6:	895a      	ldrh	r2, [r3, #10]
 8017ab8:	88bb      	ldrh	r3, [r7, #4]
 8017aba:	1ad3      	subs	r3, r2, r3
 8017abc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8017abe:	8b3a      	ldrh	r2, [r7, #24]
 8017ac0:	88fb      	ldrh	r3, [r7, #6]
 8017ac2:	429a      	cmp	r2, r3
 8017ac4:	d901      	bls.n	8017aca <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8017ac6:	88fb      	ldrh	r3, [r7, #6]
 8017ac8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8017aca:	8b7b      	ldrh	r3, [r7, #26]
 8017acc:	68ba      	ldr	r2, [r7, #8]
 8017ace:	18d0      	adds	r0, r2, r3
 8017ad0:	69fb      	ldr	r3, [r7, #28]
 8017ad2:	685a      	ldr	r2, [r3, #4]
 8017ad4:	88bb      	ldrh	r3, [r7, #4]
 8017ad6:	4413      	add	r3, r2
 8017ad8:	8b3a      	ldrh	r2, [r7, #24]
 8017ada:	4619      	mov	r1, r3
 8017adc:	f009 fc48 	bl	8021370 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8017ae0:	8afa      	ldrh	r2, [r7, #22]
 8017ae2:	8b3b      	ldrh	r3, [r7, #24]
 8017ae4:	4413      	add	r3, r2
 8017ae6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8017ae8:	8b7a      	ldrh	r2, [r7, #26]
 8017aea:	8b3b      	ldrh	r3, [r7, #24]
 8017aec:	4413      	add	r3, r2
 8017aee:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8017af0:	88fa      	ldrh	r2, [r7, #6]
 8017af2:	8b3b      	ldrh	r3, [r7, #24]
 8017af4:	1ad3      	subs	r3, r2, r3
 8017af6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8017af8:	2300      	movs	r3, #0
 8017afa:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8017afc:	69fb      	ldr	r3, [r7, #28]
 8017afe:	681b      	ldr	r3, [r3, #0]
 8017b00:	61fb      	str	r3, [r7, #28]
 8017b02:	88fb      	ldrh	r3, [r7, #6]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d002      	beq.n	8017b0e <pbuf_copy_partial+0xca>
 8017b08:	69fb      	ldr	r3, [r7, #28]
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	d1c4      	bne.n	8017a98 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8017b0e:	8afb      	ldrh	r3, [r7, #22]
}
 8017b10:	4618      	mov	r0, r3
 8017b12:	3720      	adds	r7, #32
 8017b14:	46bd      	mov	sp, r7
 8017b16:	bd80      	pop	{r7, pc}
 8017b18:	08024c0c 	.word	0x08024c0c
 8017b1c:	08024f54 	.word	0x08024f54
 8017b20:	08024c6c 	.word	0x08024c6c
 8017b24:	08024f74 	.word	0x08024f74

08017b28 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8017b28:	b580      	push	{r7, lr}
 8017b2a:	b084      	sub	sp, #16
 8017b2c:	af00      	add	r7, sp, #0
 8017b2e:	4603      	mov	r3, r0
 8017b30:	603a      	str	r2, [r7, #0]
 8017b32:	71fb      	strb	r3, [r7, #7]
 8017b34:	460b      	mov	r3, r1
 8017b36:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8017b38:	683b      	ldr	r3, [r7, #0]
 8017b3a:	8919      	ldrh	r1, [r3, #8]
 8017b3c:	88ba      	ldrh	r2, [r7, #4]
 8017b3e:	79fb      	ldrb	r3, [r7, #7]
 8017b40:	4618      	mov	r0, r3
 8017b42:	f7ff faa5 	bl	8017090 <pbuf_alloc>
 8017b46:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8017b48:	68fb      	ldr	r3, [r7, #12]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d101      	bne.n	8017b52 <pbuf_clone+0x2a>
    return NULL;
 8017b4e:	2300      	movs	r3, #0
 8017b50:	e011      	b.n	8017b76 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8017b52:	6839      	ldr	r1, [r7, #0]
 8017b54:	68f8      	ldr	r0, [r7, #12]
 8017b56:	f7ff fea3 	bl	80178a0 <pbuf_copy>
 8017b5a:	4603      	mov	r3, r0
 8017b5c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8017b5e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d006      	beq.n	8017b74 <pbuf_clone+0x4c>
 8017b66:	4b06      	ldr	r3, [pc, #24]	; (8017b80 <pbuf_clone+0x58>)
 8017b68:	f240 5224 	movw	r2, #1316	; 0x524
 8017b6c:	4905      	ldr	r1, [pc, #20]	; (8017b84 <pbuf_clone+0x5c>)
 8017b6e:	4806      	ldr	r0, [pc, #24]	; (8017b88 <pbuf_clone+0x60>)
 8017b70:	f009 fcd8 	bl	8021524 <iprintf>
  return q;
 8017b74:	68fb      	ldr	r3, [r7, #12]
}
 8017b76:	4618      	mov	r0, r3
 8017b78:	3710      	adds	r7, #16
 8017b7a:	46bd      	mov	sp, r7
 8017b7c:	bd80      	pop	{r7, pc}
 8017b7e:	bf00      	nop
 8017b80:	08024c0c 	.word	0x08024c0c
 8017b84:	08025080 	.word	0x08025080
 8017b88:	08024c6c 	.word	0x08024c6c

08017b8c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8017b8c:	b580      	push	{r7, lr}
 8017b8e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017b90:	f009 fd56 	bl	8021640 <rand>
 8017b94:	4603      	mov	r3, r0
 8017b96:	b29b      	uxth	r3, r3
 8017b98:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017b9c:	b29b      	uxth	r3, r3
 8017b9e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8017ba2:	b29a      	uxth	r2, r3
 8017ba4:	4b01      	ldr	r3, [pc, #4]	; (8017bac <tcp_init+0x20>)
 8017ba6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017ba8:	bf00      	nop
 8017baa:	bd80      	pop	{r7, pc}
 8017bac:	20000744 	.word	0x20000744

08017bb0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8017bb0:	b580      	push	{r7, lr}
 8017bb2:	b082      	sub	sp, #8
 8017bb4:	af00      	add	r7, sp, #0
 8017bb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	7d1b      	ldrb	r3, [r3, #20]
 8017bbc:	2b01      	cmp	r3, #1
 8017bbe:	d105      	bne.n	8017bcc <tcp_free+0x1c>
 8017bc0:	4b06      	ldr	r3, [pc, #24]	; (8017bdc <tcp_free+0x2c>)
 8017bc2:	22d4      	movs	r2, #212	; 0xd4
 8017bc4:	4906      	ldr	r1, [pc, #24]	; (8017be0 <tcp_free+0x30>)
 8017bc6:	4807      	ldr	r0, [pc, #28]	; (8017be4 <tcp_free+0x34>)
 8017bc8:	f009 fcac 	bl	8021524 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8017bcc:	6879      	ldr	r1, [r7, #4]
 8017bce:	2001      	movs	r0, #1
 8017bd0:	f7fe fe9e 	bl	8016910 <memp_free>
}
 8017bd4:	bf00      	nop
 8017bd6:	3708      	adds	r7, #8
 8017bd8:	46bd      	mov	sp, r7
 8017bda:	bd80      	pop	{r7, pc}
 8017bdc:	0802510c 	.word	0x0802510c
 8017be0:	0802513c 	.word	0x0802513c
 8017be4:	08025150 	.word	0x08025150

08017be8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8017be8:	b580      	push	{r7, lr}
 8017bea:	b082      	sub	sp, #8
 8017bec:	af00      	add	r7, sp, #0
 8017bee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	7d1b      	ldrb	r3, [r3, #20]
 8017bf4:	2b01      	cmp	r3, #1
 8017bf6:	d105      	bne.n	8017c04 <tcp_free_listen+0x1c>
 8017bf8:	4b06      	ldr	r3, [pc, #24]	; (8017c14 <tcp_free_listen+0x2c>)
 8017bfa:	22df      	movs	r2, #223	; 0xdf
 8017bfc:	4906      	ldr	r1, [pc, #24]	; (8017c18 <tcp_free_listen+0x30>)
 8017bfe:	4807      	ldr	r0, [pc, #28]	; (8017c1c <tcp_free_listen+0x34>)
 8017c00:	f009 fc90 	bl	8021524 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8017c04:	6879      	ldr	r1, [r7, #4]
 8017c06:	2002      	movs	r0, #2
 8017c08:	f7fe fe82 	bl	8016910 <memp_free>
}
 8017c0c:	bf00      	nop
 8017c0e:	3708      	adds	r7, #8
 8017c10:	46bd      	mov	sp, r7
 8017c12:	bd80      	pop	{r7, pc}
 8017c14:	0802510c 	.word	0x0802510c
 8017c18:	08025178 	.word	0x08025178
 8017c1c:	08025150 	.word	0x08025150

08017c20 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8017c20:	b580      	push	{r7, lr}
 8017c22:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8017c24:	f001 f85c 	bl	8018ce0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8017c28:	4b07      	ldr	r3, [pc, #28]	; (8017c48 <tcp_tmr+0x28>)
 8017c2a:	781b      	ldrb	r3, [r3, #0]
 8017c2c:	3301      	adds	r3, #1
 8017c2e:	b2da      	uxtb	r2, r3
 8017c30:	4b05      	ldr	r3, [pc, #20]	; (8017c48 <tcp_tmr+0x28>)
 8017c32:	701a      	strb	r2, [r3, #0]
 8017c34:	4b04      	ldr	r3, [pc, #16]	; (8017c48 <tcp_tmr+0x28>)
 8017c36:	781b      	ldrb	r3, [r3, #0]
 8017c38:	f003 0301 	and.w	r3, r3, #1
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d001      	beq.n	8017c44 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8017c40:	f000 fd0e 	bl	8018660 <tcp_slowtmr>
  }
}
 8017c44:	bf00      	nop
 8017c46:	bd80      	pop	{r7, pc}
 8017c48:	200052dd 	.word	0x200052dd

08017c4c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8017c4c:	b580      	push	{r7, lr}
 8017c4e:	b084      	sub	sp, #16
 8017c50:	af00      	add	r7, sp, #0
 8017c52:	6078      	str	r0, [r7, #4]
 8017c54:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8017c56:	683b      	ldr	r3, [r7, #0]
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	d105      	bne.n	8017c68 <tcp_remove_listener+0x1c>
 8017c5c:	4b0d      	ldr	r3, [pc, #52]	; (8017c94 <tcp_remove_listener+0x48>)
 8017c5e:	22ff      	movs	r2, #255	; 0xff
 8017c60:	490d      	ldr	r1, [pc, #52]	; (8017c98 <tcp_remove_listener+0x4c>)
 8017c62:	480e      	ldr	r0, [pc, #56]	; (8017c9c <tcp_remove_listener+0x50>)
 8017c64:	f009 fc5e 	bl	8021524 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	60fb      	str	r3, [r7, #12]
 8017c6c:	e00a      	b.n	8017c84 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8017c6e:	68fb      	ldr	r3, [r7, #12]
 8017c70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017c72:	683a      	ldr	r2, [r7, #0]
 8017c74:	429a      	cmp	r2, r3
 8017c76:	d102      	bne.n	8017c7e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8017c78:	68fb      	ldr	r3, [r7, #12]
 8017c7a:	2200      	movs	r2, #0
 8017c7c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	68db      	ldr	r3, [r3, #12]
 8017c82:	60fb      	str	r3, [r7, #12]
 8017c84:	68fb      	ldr	r3, [r7, #12]
 8017c86:	2b00      	cmp	r3, #0
 8017c88:	d1f1      	bne.n	8017c6e <tcp_remove_listener+0x22>
    }
  }
}
 8017c8a:	bf00      	nop
 8017c8c:	bf00      	nop
 8017c8e:	3710      	adds	r7, #16
 8017c90:	46bd      	mov	sp, r7
 8017c92:	bd80      	pop	{r7, pc}
 8017c94:	0802510c 	.word	0x0802510c
 8017c98:	08025194 	.word	0x08025194
 8017c9c:	08025150 	.word	0x08025150

08017ca0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8017ca0:	b580      	push	{r7, lr}
 8017ca2:	b084      	sub	sp, #16
 8017ca4:	af00      	add	r7, sp, #0
 8017ca6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d106      	bne.n	8017cbc <tcp_listen_closed+0x1c>
 8017cae:	4b14      	ldr	r3, [pc, #80]	; (8017d00 <tcp_listen_closed+0x60>)
 8017cb0:	f240 1211 	movw	r2, #273	; 0x111
 8017cb4:	4913      	ldr	r1, [pc, #76]	; (8017d04 <tcp_listen_closed+0x64>)
 8017cb6:	4814      	ldr	r0, [pc, #80]	; (8017d08 <tcp_listen_closed+0x68>)
 8017cb8:	f009 fc34 	bl	8021524 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	7d1b      	ldrb	r3, [r3, #20]
 8017cc0:	2b01      	cmp	r3, #1
 8017cc2:	d006      	beq.n	8017cd2 <tcp_listen_closed+0x32>
 8017cc4:	4b0e      	ldr	r3, [pc, #56]	; (8017d00 <tcp_listen_closed+0x60>)
 8017cc6:	f44f 7289 	mov.w	r2, #274	; 0x112
 8017cca:	4910      	ldr	r1, [pc, #64]	; (8017d0c <tcp_listen_closed+0x6c>)
 8017ccc:	480e      	ldr	r0, [pc, #56]	; (8017d08 <tcp_listen_closed+0x68>)
 8017cce:	f009 fc29 	bl	8021524 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8017cd2:	2301      	movs	r3, #1
 8017cd4:	60fb      	str	r3, [r7, #12]
 8017cd6:	e00b      	b.n	8017cf0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8017cd8:	4a0d      	ldr	r2, [pc, #52]	; (8017d10 <tcp_listen_closed+0x70>)
 8017cda:	68fb      	ldr	r3, [r7, #12]
 8017cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	6879      	ldr	r1, [r7, #4]
 8017ce4:	4618      	mov	r0, r3
 8017ce6:	f7ff ffb1 	bl	8017c4c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8017cea:	68fb      	ldr	r3, [r7, #12]
 8017cec:	3301      	adds	r3, #1
 8017cee:	60fb      	str	r3, [r7, #12]
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	2b03      	cmp	r3, #3
 8017cf4:	d9f0      	bls.n	8017cd8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8017cf6:	bf00      	nop
 8017cf8:	bf00      	nop
 8017cfa:	3710      	adds	r7, #16
 8017cfc:	46bd      	mov	sp, r7
 8017cfe:	bd80      	pop	{r7, pc}
 8017d00:	0802510c 	.word	0x0802510c
 8017d04:	080251bc 	.word	0x080251bc
 8017d08:	08025150 	.word	0x08025150
 8017d0c:	080251c8 	.word	0x080251c8
 8017d10:	0802af60 	.word	0x0802af60

08017d14 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8017d14:	b5b0      	push	{r4, r5, r7, lr}
 8017d16:	b088      	sub	sp, #32
 8017d18:	af04      	add	r7, sp, #16
 8017d1a:	6078      	str	r0, [r7, #4]
 8017d1c:	460b      	mov	r3, r1
 8017d1e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d106      	bne.n	8017d34 <tcp_close_shutdown+0x20>
 8017d26:	4b63      	ldr	r3, [pc, #396]	; (8017eb4 <tcp_close_shutdown+0x1a0>)
 8017d28:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8017d2c:	4962      	ldr	r1, [pc, #392]	; (8017eb8 <tcp_close_shutdown+0x1a4>)
 8017d2e:	4863      	ldr	r0, [pc, #396]	; (8017ebc <tcp_close_shutdown+0x1a8>)
 8017d30:	f009 fbf8 	bl	8021524 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8017d34:	78fb      	ldrb	r3, [r7, #3]
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d066      	beq.n	8017e08 <tcp_close_shutdown+0xf4>
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	7d1b      	ldrb	r3, [r3, #20]
 8017d3e:	2b04      	cmp	r3, #4
 8017d40:	d003      	beq.n	8017d4a <tcp_close_shutdown+0x36>
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	7d1b      	ldrb	r3, [r3, #20]
 8017d46:	2b07      	cmp	r3, #7
 8017d48:	d15e      	bne.n	8017e08 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d104      	bne.n	8017d5c <tcp_close_shutdown+0x48>
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017d56:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8017d5a:	d055      	beq.n	8017e08 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	8b5b      	ldrh	r3, [r3, #26]
 8017d60:	f003 0310 	and.w	r3, r3, #16
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d106      	bne.n	8017d76 <tcp_close_shutdown+0x62>
 8017d68:	4b52      	ldr	r3, [pc, #328]	; (8017eb4 <tcp_close_shutdown+0x1a0>)
 8017d6a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8017d6e:	4954      	ldr	r1, [pc, #336]	; (8017ec0 <tcp_close_shutdown+0x1ac>)
 8017d70:	4852      	ldr	r0, [pc, #328]	; (8017ebc <tcp_close_shutdown+0x1a8>)
 8017d72:	f009 fbd7 	bl	8021524 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8017d7e:	687d      	ldr	r5, [r7, #4]
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	3304      	adds	r3, #4
 8017d84:	687a      	ldr	r2, [r7, #4]
 8017d86:	8ad2      	ldrh	r2, [r2, #22]
 8017d88:	6879      	ldr	r1, [r7, #4]
 8017d8a:	8b09      	ldrh	r1, [r1, #24]
 8017d8c:	9102      	str	r1, [sp, #8]
 8017d8e:	9201      	str	r2, [sp, #4]
 8017d90:	9300      	str	r3, [sp, #0]
 8017d92:	462b      	mov	r3, r5
 8017d94:	4622      	mov	r2, r4
 8017d96:	4601      	mov	r1, r0
 8017d98:	6878      	ldr	r0, [r7, #4]
 8017d9a:	f005 fd8b 	bl	801d8b4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8017d9e:	6878      	ldr	r0, [r7, #4]
 8017da0:	f001 fb6c 	bl	801947c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8017da4:	4b47      	ldr	r3, [pc, #284]	; (8017ec4 <tcp_close_shutdown+0x1b0>)
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	687a      	ldr	r2, [r7, #4]
 8017daa:	429a      	cmp	r2, r3
 8017dac:	d105      	bne.n	8017dba <tcp_close_shutdown+0xa6>
 8017dae:	4b45      	ldr	r3, [pc, #276]	; (8017ec4 <tcp_close_shutdown+0x1b0>)
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	68db      	ldr	r3, [r3, #12]
 8017db4:	4a43      	ldr	r2, [pc, #268]	; (8017ec4 <tcp_close_shutdown+0x1b0>)
 8017db6:	6013      	str	r3, [r2, #0]
 8017db8:	e013      	b.n	8017de2 <tcp_close_shutdown+0xce>
 8017dba:	4b42      	ldr	r3, [pc, #264]	; (8017ec4 <tcp_close_shutdown+0x1b0>)
 8017dbc:	681b      	ldr	r3, [r3, #0]
 8017dbe:	60fb      	str	r3, [r7, #12]
 8017dc0:	e00c      	b.n	8017ddc <tcp_close_shutdown+0xc8>
 8017dc2:	68fb      	ldr	r3, [r7, #12]
 8017dc4:	68db      	ldr	r3, [r3, #12]
 8017dc6:	687a      	ldr	r2, [r7, #4]
 8017dc8:	429a      	cmp	r2, r3
 8017dca:	d104      	bne.n	8017dd6 <tcp_close_shutdown+0xc2>
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	68da      	ldr	r2, [r3, #12]
 8017dd0:	68fb      	ldr	r3, [r7, #12]
 8017dd2:	60da      	str	r2, [r3, #12]
 8017dd4:	e005      	b.n	8017de2 <tcp_close_shutdown+0xce>
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	68db      	ldr	r3, [r3, #12]
 8017dda:	60fb      	str	r3, [r7, #12]
 8017ddc:	68fb      	ldr	r3, [r7, #12]
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d1ef      	bne.n	8017dc2 <tcp_close_shutdown+0xae>
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	2200      	movs	r2, #0
 8017de6:	60da      	str	r2, [r3, #12]
 8017de8:	4b37      	ldr	r3, [pc, #220]	; (8017ec8 <tcp_close_shutdown+0x1b4>)
 8017dea:	2201      	movs	r2, #1
 8017dec:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8017dee:	4b37      	ldr	r3, [pc, #220]	; (8017ecc <tcp_close_shutdown+0x1b8>)
 8017df0:	681b      	ldr	r3, [r3, #0]
 8017df2:	687a      	ldr	r2, [r7, #4]
 8017df4:	429a      	cmp	r2, r3
 8017df6:	d102      	bne.n	8017dfe <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8017df8:	f004 f800 	bl	801bdfc <tcp_trigger_input_pcb_close>
 8017dfc:	e002      	b.n	8017e04 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8017dfe:	6878      	ldr	r0, [r7, #4]
 8017e00:	f7ff fed6 	bl	8017bb0 <tcp_free>
      }
      return ERR_OK;
 8017e04:	2300      	movs	r3, #0
 8017e06:	e050      	b.n	8017eaa <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	7d1b      	ldrb	r3, [r3, #20]
 8017e0c:	2b02      	cmp	r3, #2
 8017e0e:	d03b      	beq.n	8017e88 <tcp_close_shutdown+0x174>
 8017e10:	2b02      	cmp	r3, #2
 8017e12:	dc44      	bgt.n	8017e9e <tcp_close_shutdown+0x18a>
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d002      	beq.n	8017e1e <tcp_close_shutdown+0x10a>
 8017e18:	2b01      	cmp	r3, #1
 8017e1a:	d02a      	beq.n	8017e72 <tcp_close_shutdown+0x15e>
 8017e1c:	e03f      	b.n	8017e9e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	8adb      	ldrh	r3, [r3, #22]
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	d021      	beq.n	8017e6a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8017e26:	4b2a      	ldr	r3, [pc, #168]	; (8017ed0 <tcp_close_shutdown+0x1bc>)
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	687a      	ldr	r2, [r7, #4]
 8017e2c:	429a      	cmp	r2, r3
 8017e2e:	d105      	bne.n	8017e3c <tcp_close_shutdown+0x128>
 8017e30:	4b27      	ldr	r3, [pc, #156]	; (8017ed0 <tcp_close_shutdown+0x1bc>)
 8017e32:	681b      	ldr	r3, [r3, #0]
 8017e34:	68db      	ldr	r3, [r3, #12]
 8017e36:	4a26      	ldr	r2, [pc, #152]	; (8017ed0 <tcp_close_shutdown+0x1bc>)
 8017e38:	6013      	str	r3, [r2, #0]
 8017e3a:	e013      	b.n	8017e64 <tcp_close_shutdown+0x150>
 8017e3c:	4b24      	ldr	r3, [pc, #144]	; (8017ed0 <tcp_close_shutdown+0x1bc>)
 8017e3e:	681b      	ldr	r3, [r3, #0]
 8017e40:	60bb      	str	r3, [r7, #8]
 8017e42:	e00c      	b.n	8017e5e <tcp_close_shutdown+0x14a>
 8017e44:	68bb      	ldr	r3, [r7, #8]
 8017e46:	68db      	ldr	r3, [r3, #12]
 8017e48:	687a      	ldr	r2, [r7, #4]
 8017e4a:	429a      	cmp	r2, r3
 8017e4c:	d104      	bne.n	8017e58 <tcp_close_shutdown+0x144>
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	68da      	ldr	r2, [r3, #12]
 8017e52:	68bb      	ldr	r3, [r7, #8]
 8017e54:	60da      	str	r2, [r3, #12]
 8017e56:	e005      	b.n	8017e64 <tcp_close_shutdown+0x150>
 8017e58:	68bb      	ldr	r3, [r7, #8]
 8017e5a:	68db      	ldr	r3, [r3, #12]
 8017e5c:	60bb      	str	r3, [r7, #8]
 8017e5e:	68bb      	ldr	r3, [r7, #8]
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d1ef      	bne.n	8017e44 <tcp_close_shutdown+0x130>
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	2200      	movs	r2, #0
 8017e68:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8017e6a:	6878      	ldr	r0, [r7, #4]
 8017e6c:	f7ff fea0 	bl	8017bb0 <tcp_free>
      break;
 8017e70:	e01a      	b.n	8017ea8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8017e72:	6878      	ldr	r0, [r7, #4]
 8017e74:	f7ff ff14 	bl	8017ca0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8017e78:	6879      	ldr	r1, [r7, #4]
 8017e7a:	4816      	ldr	r0, [pc, #88]	; (8017ed4 <tcp_close_shutdown+0x1c0>)
 8017e7c:	f001 fb4e 	bl	801951c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8017e80:	6878      	ldr	r0, [r7, #4]
 8017e82:	f7ff feb1 	bl	8017be8 <tcp_free_listen>
      break;
 8017e86:	e00f      	b.n	8017ea8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8017e88:	6879      	ldr	r1, [r7, #4]
 8017e8a:	480e      	ldr	r0, [pc, #56]	; (8017ec4 <tcp_close_shutdown+0x1b0>)
 8017e8c:	f001 fb46 	bl	801951c <tcp_pcb_remove>
 8017e90:	4b0d      	ldr	r3, [pc, #52]	; (8017ec8 <tcp_close_shutdown+0x1b4>)
 8017e92:	2201      	movs	r2, #1
 8017e94:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8017e96:	6878      	ldr	r0, [r7, #4]
 8017e98:	f7ff fe8a 	bl	8017bb0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8017e9c:	e004      	b.n	8017ea8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8017e9e:	6878      	ldr	r0, [r7, #4]
 8017ea0:	f000 f81a 	bl	8017ed8 <tcp_close_shutdown_fin>
 8017ea4:	4603      	mov	r3, r0
 8017ea6:	e000      	b.n	8017eaa <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8017ea8:	2300      	movs	r3, #0
}
 8017eaa:	4618      	mov	r0, r3
 8017eac:	3710      	adds	r7, #16
 8017eae:	46bd      	mov	sp, r7
 8017eb0:	bdb0      	pop	{r4, r5, r7, pc}
 8017eb2:	bf00      	nop
 8017eb4:	0802510c 	.word	0x0802510c
 8017eb8:	080251e0 	.word	0x080251e0
 8017ebc:	08025150 	.word	0x08025150
 8017ec0:	08025200 	.word	0x08025200
 8017ec4:	2001b990 	.word	0x2001b990
 8017ec8:	2001b98c 	.word	0x2001b98c
 8017ecc:	2001b9a4 	.word	0x2001b9a4
 8017ed0:	2001b99c 	.word	0x2001b99c
 8017ed4:	2001b998 	.word	0x2001b998

08017ed8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8017ed8:	b580      	push	{r7, lr}
 8017eda:	b084      	sub	sp, #16
 8017edc:	af00      	add	r7, sp, #0
 8017ede:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	d106      	bne.n	8017ef4 <tcp_close_shutdown_fin+0x1c>
 8017ee6:	4b2e      	ldr	r3, [pc, #184]	; (8017fa0 <tcp_close_shutdown_fin+0xc8>)
 8017ee8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8017eec:	492d      	ldr	r1, [pc, #180]	; (8017fa4 <tcp_close_shutdown_fin+0xcc>)
 8017eee:	482e      	ldr	r0, [pc, #184]	; (8017fa8 <tcp_close_shutdown_fin+0xd0>)
 8017ef0:	f009 fb18 	bl	8021524 <iprintf>

  switch (pcb->state) {
 8017ef4:	687b      	ldr	r3, [r7, #4]
 8017ef6:	7d1b      	ldrb	r3, [r3, #20]
 8017ef8:	2b07      	cmp	r3, #7
 8017efa:	d020      	beq.n	8017f3e <tcp_close_shutdown_fin+0x66>
 8017efc:	2b07      	cmp	r3, #7
 8017efe:	dc2b      	bgt.n	8017f58 <tcp_close_shutdown_fin+0x80>
 8017f00:	2b03      	cmp	r3, #3
 8017f02:	d002      	beq.n	8017f0a <tcp_close_shutdown_fin+0x32>
 8017f04:	2b04      	cmp	r3, #4
 8017f06:	d00d      	beq.n	8017f24 <tcp_close_shutdown_fin+0x4c>
 8017f08:	e026      	b.n	8017f58 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8017f0a:	6878      	ldr	r0, [r7, #4]
 8017f0c:	f004 fde0 	bl	801cad0 <tcp_send_fin>
 8017f10:	4603      	mov	r3, r0
 8017f12:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8017f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d11f      	bne.n	8017f5c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	2205      	movs	r2, #5
 8017f20:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017f22:	e01b      	b.n	8017f5c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8017f24:	6878      	ldr	r0, [r7, #4]
 8017f26:	f004 fdd3 	bl	801cad0 <tcp_send_fin>
 8017f2a:	4603      	mov	r3, r0
 8017f2c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8017f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	d114      	bne.n	8017f60 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	2205      	movs	r2, #5
 8017f3a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017f3c:	e010      	b.n	8017f60 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8017f3e:	6878      	ldr	r0, [r7, #4]
 8017f40:	f004 fdc6 	bl	801cad0 <tcp_send_fin>
 8017f44:	4603      	mov	r3, r0
 8017f46:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8017f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	d109      	bne.n	8017f64 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	2209      	movs	r2, #9
 8017f54:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017f56:	e005      	b.n	8017f64 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8017f58:	2300      	movs	r3, #0
 8017f5a:	e01c      	b.n	8017f96 <tcp_close_shutdown_fin+0xbe>
      break;
 8017f5c:	bf00      	nop
 8017f5e:	e002      	b.n	8017f66 <tcp_close_shutdown_fin+0x8e>
      break;
 8017f60:	bf00      	nop
 8017f62:	e000      	b.n	8017f66 <tcp_close_shutdown_fin+0x8e>
      break;
 8017f64:	bf00      	nop
  }

  if (err == ERR_OK) {
 8017f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d103      	bne.n	8017f76 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8017f6e:	6878      	ldr	r0, [r7, #4]
 8017f70:	f004 feec 	bl	801cd4c <tcp_output>
 8017f74:	e00d      	b.n	8017f92 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8017f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017f7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017f7e:	d108      	bne.n	8017f92 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	8b5b      	ldrh	r3, [r3, #26]
 8017f84:	f043 0308 	orr.w	r3, r3, #8
 8017f88:	b29a      	uxth	r2, r3
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8017f8e:	2300      	movs	r3, #0
 8017f90:	e001      	b.n	8017f96 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8017f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017f96:	4618      	mov	r0, r3
 8017f98:	3710      	adds	r7, #16
 8017f9a:	46bd      	mov	sp, r7
 8017f9c:	bd80      	pop	{r7, pc}
 8017f9e:	bf00      	nop
 8017fa0:	0802510c 	.word	0x0802510c
 8017fa4:	080251bc 	.word	0x080251bc
 8017fa8:	08025150 	.word	0x08025150

08017fac <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8017fac:	b580      	push	{r7, lr}
 8017fae:	b082      	sub	sp, #8
 8017fb0:	af00      	add	r7, sp, #0
 8017fb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	d109      	bne.n	8017fce <tcp_close+0x22>
 8017fba:	4b0f      	ldr	r3, [pc, #60]	; (8017ff8 <tcp_close+0x4c>)
 8017fbc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8017fc0:	490e      	ldr	r1, [pc, #56]	; (8017ffc <tcp_close+0x50>)
 8017fc2:	480f      	ldr	r0, [pc, #60]	; (8018000 <tcp_close+0x54>)
 8017fc4:	f009 faae 	bl	8021524 <iprintf>
 8017fc8:	f06f 030f 	mvn.w	r3, #15
 8017fcc:	e00f      	b.n	8017fee <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	7d1b      	ldrb	r3, [r3, #20]
 8017fd2:	2b01      	cmp	r3, #1
 8017fd4:	d006      	beq.n	8017fe4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	8b5b      	ldrh	r3, [r3, #26]
 8017fda:	f043 0310 	orr.w	r3, r3, #16
 8017fde:	b29a      	uxth	r2, r3
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8017fe4:	2101      	movs	r1, #1
 8017fe6:	6878      	ldr	r0, [r7, #4]
 8017fe8:	f7ff fe94 	bl	8017d14 <tcp_close_shutdown>
 8017fec:	4603      	mov	r3, r0
}
 8017fee:	4618      	mov	r0, r3
 8017ff0:	3708      	adds	r7, #8
 8017ff2:	46bd      	mov	sp, r7
 8017ff4:	bd80      	pop	{r7, pc}
 8017ff6:	bf00      	nop
 8017ff8:	0802510c 	.word	0x0802510c
 8017ffc:	0802521c 	.word	0x0802521c
 8018000:	08025150 	.word	0x08025150

08018004 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8018004:	b580      	push	{r7, lr}
 8018006:	b08e      	sub	sp, #56	; 0x38
 8018008:	af04      	add	r7, sp, #16
 801800a:	6078      	str	r0, [r7, #4]
 801800c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	2b00      	cmp	r3, #0
 8018012:	d107      	bne.n	8018024 <tcp_abandon+0x20>
 8018014:	4b52      	ldr	r3, [pc, #328]	; (8018160 <tcp_abandon+0x15c>)
 8018016:	f240 223d 	movw	r2, #573	; 0x23d
 801801a:	4952      	ldr	r1, [pc, #328]	; (8018164 <tcp_abandon+0x160>)
 801801c:	4852      	ldr	r0, [pc, #328]	; (8018168 <tcp_abandon+0x164>)
 801801e:	f009 fa81 	bl	8021524 <iprintf>
 8018022:	e099      	b.n	8018158 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	7d1b      	ldrb	r3, [r3, #20]
 8018028:	2b01      	cmp	r3, #1
 801802a:	d106      	bne.n	801803a <tcp_abandon+0x36>
 801802c:	4b4c      	ldr	r3, [pc, #304]	; (8018160 <tcp_abandon+0x15c>)
 801802e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8018032:	494e      	ldr	r1, [pc, #312]	; (801816c <tcp_abandon+0x168>)
 8018034:	484c      	ldr	r0, [pc, #304]	; (8018168 <tcp_abandon+0x164>)
 8018036:	f009 fa75 	bl	8021524 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	7d1b      	ldrb	r3, [r3, #20]
 801803e:	2b0a      	cmp	r3, #10
 8018040:	d107      	bne.n	8018052 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8018042:	6879      	ldr	r1, [r7, #4]
 8018044:	484a      	ldr	r0, [pc, #296]	; (8018170 <tcp_abandon+0x16c>)
 8018046:	f001 fa69 	bl	801951c <tcp_pcb_remove>
    tcp_free(pcb);
 801804a:	6878      	ldr	r0, [r7, #4]
 801804c:	f7ff fdb0 	bl	8017bb0 <tcp_free>
 8018050:	e082      	b.n	8018158 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8018052:	2300      	movs	r3, #0
 8018054:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8018056:	2300      	movs	r3, #0
 8018058:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801805e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018064:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801806c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	691b      	ldr	r3, [r3, #16]
 8018072:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	7d1b      	ldrb	r3, [r3, #20]
 8018078:	2b00      	cmp	r3, #0
 801807a:	d126      	bne.n	80180ca <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	8adb      	ldrh	r3, [r3, #22]
 8018080:	2b00      	cmp	r3, #0
 8018082:	d02e      	beq.n	80180e2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8018084:	4b3b      	ldr	r3, [pc, #236]	; (8018174 <tcp_abandon+0x170>)
 8018086:	681b      	ldr	r3, [r3, #0]
 8018088:	687a      	ldr	r2, [r7, #4]
 801808a:	429a      	cmp	r2, r3
 801808c:	d105      	bne.n	801809a <tcp_abandon+0x96>
 801808e:	4b39      	ldr	r3, [pc, #228]	; (8018174 <tcp_abandon+0x170>)
 8018090:	681b      	ldr	r3, [r3, #0]
 8018092:	68db      	ldr	r3, [r3, #12]
 8018094:	4a37      	ldr	r2, [pc, #220]	; (8018174 <tcp_abandon+0x170>)
 8018096:	6013      	str	r3, [r2, #0]
 8018098:	e013      	b.n	80180c2 <tcp_abandon+0xbe>
 801809a:	4b36      	ldr	r3, [pc, #216]	; (8018174 <tcp_abandon+0x170>)
 801809c:	681b      	ldr	r3, [r3, #0]
 801809e:	61fb      	str	r3, [r7, #28]
 80180a0:	e00c      	b.n	80180bc <tcp_abandon+0xb8>
 80180a2:	69fb      	ldr	r3, [r7, #28]
 80180a4:	68db      	ldr	r3, [r3, #12]
 80180a6:	687a      	ldr	r2, [r7, #4]
 80180a8:	429a      	cmp	r2, r3
 80180aa:	d104      	bne.n	80180b6 <tcp_abandon+0xb2>
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	68da      	ldr	r2, [r3, #12]
 80180b0:	69fb      	ldr	r3, [r7, #28]
 80180b2:	60da      	str	r2, [r3, #12]
 80180b4:	e005      	b.n	80180c2 <tcp_abandon+0xbe>
 80180b6:	69fb      	ldr	r3, [r7, #28]
 80180b8:	68db      	ldr	r3, [r3, #12]
 80180ba:	61fb      	str	r3, [r7, #28]
 80180bc:	69fb      	ldr	r3, [r7, #28]
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d1ef      	bne.n	80180a2 <tcp_abandon+0x9e>
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	2200      	movs	r2, #0
 80180c6:	60da      	str	r2, [r3, #12]
 80180c8:	e00b      	b.n	80180e2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80180ca:	683b      	ldr	r3, [r7, #0]
 80180cc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	8adb      	ldrh	r3, [r3, #22]
 80180d2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80180d4:	6879      	ldr	r1, [r7, #4]
 80180d6:	4828      	ldr	r0, [pc, #160]	; (8018178 <tcp_abandon+0x174>)
 80180d8:	f001 fa20 	bl	801951c <tcp_pcb_remove>
 80180dc:	4b27      	ldr	r3, [pc, #156]	; (801817c <tcp_abandon+0x178>)
 80180de:	2201      	movs	r2, #1
 80180e0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	d004      	beq.n	80180f4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80180ee:	4618      	mov	r0, r3
 80180f0:	f000 fed6 	bl	8018ea0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d004      	beq.n	8018106 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018100:	4618      	mov	r0, r3
 8018102:	f000 fecd 	bl	8018ea0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801810a:	2b00      	cmp	r3, #0
 801810c:	d004      	beq.n	8018118 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018112:	4618      	mov	r0, r3
 8018114:	f000 fec4 	bl	8018ea0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8018118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801811a:	2b00      	cmp	r3, #0
 801811c:	d00e      	beq.n	801813c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801811e:	6879      	ldr	r1, [r7, #4]
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	3304      	adds	r3, #4
 8018124:	687a      	ldr	r2, [r7, #4]
 8018126:	8b12      	ldrh	r2, [r2, #24]
 8018128:	9202      	str	r2, [sp, #8]
 801812a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801812c:	9201      	str	r2, [sp, #4]
 801812e:	9300      	str	r3, [sp, #0]
 8018130:	460b      	mov	r3, r1
 8018132:	697a      	ldr	r2, [r7, #20]
 8018134:	69b9      	ldr	r1, [r7, #24]
 8018136:	6878      	ldr	r0, [r7, #4]
 8018138:	f005 fbbc 	bl	801d8b4 <tcp_rst>
    }
    last_state = pcb->state;
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	7d1b      	ldrb	r3, [r3, #20]
 8018140:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8018142:	6878      	ldr	r0, [r7, #4]
 8018144:	f7ff fd34 	bl	8017bb0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8018148:	693b      	ldr	r3, [r7, #16]
 801814a:	2b00      	cmp	r3, #0
 801814c:	d004      	beq.n	8018158 <tcp_abandon+0x154>
 801814e:	693b      	ldr	r3, [r7, #16]
 8018150:	f06f 010c 	mvn.w	r1, #12
 8018154:	68f8      	ldr	r0, [r7, #12]
 8018156:	4798      	blx	r3
  }
}
 8018158:	3728      	adds	r7, #40	; 0x28
 801815a:	46bd      	mov	sp, r7
 801815c:	bd80      	pop	{r7, pc}
 801815e:	bf00      	nop
 8018160:	0802510c 	.word	0x0802510c
 8018164:	08025250 	.word	0x08025250
 8018168:	08025150 	.word	0x08025150
 801816c:	0802526c 	.word	0x0802526c
 8018170:	2001b9a0 	.word	0x2001b9a0
 8018174:	2001b99c 	.word	0x2001b99c
 8018178:	2001b990 	.word	0x2001b990
 801817c:	2001b98c 	.word	0x2001b98c

08018180 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8018180:	b580      	push	{r7, lr}
 8018182:	b082      	sub	sp, #8
 8018184:	af00      	add	r7, sp, #0
 8018186:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8018188:	2101      	movs	r1, #1
 801818a:	6878      	ldr	r0, [r7, #4]
 801818c:	f7ff ff3a 	bl	8018004 <tcp_abandon>
}
 8018190:	bf00      	nop
 8018192:	3708      	adds	r7, #8
 8018194:	46bd      	mov	sp, r7
 8018196:	bd80      	pop	{r7, pc}

08018198 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8018198:	b580      	push	{r7, lr}
 801819a:	b088      	sub	sp, #32
 801819c:	af00      	add	r7, sp, #0
 801819e:	60f8      	str	r0, [r7, #12]
 80181a0:	60b9      	str	r1, [r7, #8]
 80181a2:	4613      	mov	r3, r2
 80181a4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80181a6:	2304      	movs	r3, #4
 80181a8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80181aa:	68bb      	ldr	r3, [r7, #8]
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d101      	bne.n	80181b4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80181b0:	4b3e      	ldr	r3, [pc, #248]	; (80182ac <tcp_bind+0x114>)
 80181b2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80181b4:	68fb      	ldr	r3, [r7, #12]
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d109      	bne.n	80181ce <tcp_bind+0x36>
 80181ba:	4b3d      	ldr	r3, [pc, #244]	; (80182b0 <tcp_bind+0x118>)
 80181bc:	f240 22a9 	movw	r2, #681	; 0x2a9
 80181c0:	493c      	ldr	r1, [pc, #240]	; (80182b4 <tcp_bind+0x11c>)
 80181c2:	483d      	ldr	r0, [pc, #244]	; (80182b8 <tcp_bind+0x120>)
 80181c4:	f009 f9ae 	bl	8021524 <iprintf>
 80181c8:	f06f 030f 	mvn.w	r3, #15
 80181cc:	e06a      	b.n	80182a4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80181ce:	68fb      	ldr	r3, [r7, #12]
 80181d0:	7d1b      	ldrb	r3, [r3, #20]
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d009      	beq.n	80181ea <tcp_bind+0x52>
 80181d6:	4b36      	ldr	r3, [pc, #216]	; (80182b0 <tcp_bind+0x118>)
 80181d8:	f240 22ab 	movw	r2, #683	; 0x2ab
 80181dc:	4937      	ldr	r1, [pc, #220]	; (80182bc <tcp_bind+0x124>)
 80181de:	4836      	ldr	r0, [pc, #216]	; (80182b8 <tcp_bind+0x120>)
 80181e0:	f009 f9a0 	bl	8021524 <iprintf>
 80181e4:	f06f 0305 	mvn.w	r3, #5
 80181e8:	e05c      	b.n	80182a4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80181ea:	88fb      	ldrh	r3, [r7, #6]
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d109      	bne.n	8018204 <tcp_bind+0x6c>
    port = tcp_new_port();
 80181f0:	f000 f9f0 	bl	80185d4 <tcp_new_port>
 80181f4:	4603      	mov	r3, r0
 80181f6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80181f8:	88fb      	ldrh	r3, [r7, #6]
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d135      	bne.n	801826a <tcp_bind+0xd2>
      return ERR_BUF;
 80181fe:	f06f 0301 	mvn.w	r3, #1
 8018202:	e04f      	b.n	80182a4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8018204:	2300      	movs	r3, #0
 8018206:	61fb      	str	r3, [r7, #28]
 8018208:	e02b      	b.n	8018262 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801820a:	4a2d      	ldr	r2, [pc, #180]	; (80182c0 <tcp_bind+0x128>)
 801820c:	69fb      	ldr	r3, [r7, #28]
 801820e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018212:	681b      	ldr	r3, [r3, #0]
 8018214:	61bb      	str	r3, [r7, #24]
 8018216:	e01e      	b.n	8018256 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8018218:	69bb      	ldr	r3, [r7, #24]
 801821a:	8adb      	ldrh	r3, [r3, #22]
 801821c:	88fa      	ldrh	r2, [r7, #6]
 801821e:	429a      	cmp	r2, r3
 8018220:	d116      	bne.n	8018250 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8018222:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8018224:	2b00      	cmp	r3, #0
 8018226:	d010      	beq.n	801824a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8018228:	69bb      	ldr	r3, [r7, #24]
 801822a:	681b      	ldr	r3, [r3, #0]
 801822c:	2b00      	cmp	r3, #0
 801822e:	d00c      	beq.n	801824a <tcp_bind+0xb2>
 8018230:	68bb      	ldr	r3, [r7, #8]
 8018232:	2b00      	cmp	r3, #0
 8018234:	d009      	beq.n	801824a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8018236:	68bb      	ldr	r3, [r7, #8]
 8018238:	681b      	ldr	r3, [r3, #0]
 801823a:	2b00      	cmp	r3, #0
 801823c:	d005      	beq.n	801824a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801823e:	69bb      	ldr	r3, [r7, #24]
 8018240:	681a      	ldr	r2, [r3, #0]
 8018242:	68bb      	ldr	r3, [r7, #8]
 8018244:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8018246:	429a      	cmp	r2, r3
 8018248:	d102      	bne.n	8018250 <tcp_bind+0xb8>
              return ERR_USE;
 801824a:	f06f 0307 	mvn.w	r3, #7
 801824e:	e029      	b.n	80182a4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8018250:	69bb      	ldr	r3, [r7, #24]
 8018252:	68db      	ldr	r3, [r3, #12]
 8018254:	61bb      	str	r3, [r7, #24]
 8018256:	69bb      	ldr	r3, [r7, #24]
 8018258:	2b00      	cmp	r3, #0
 801825a:	d1dd      	bne.n	8018218 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 801825c:	69fb      	ldr	r3, [r7, #28]
 801825e:	3301      	adds	r3, #1
 8018260:	61fb      	str	r3, [r7, #28]
 8018262:	69fa      	ldr	r2, [r7, #28]
 8018264:	697b      	ldr	r3, [r7, #20]
 8018266:	429a      	cmp	r2, r3
 8018268:	dbcf      	blt.n	801820a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 801826a:	68bb      	ldr	r3, [r7, #8]
 801826c:	2b00      	cmp	r3, #0
 801826e:	d00c      	beq.n	801828a <tcp_bind+0xf2>
 8018270:	68bb      	ldr	r3, [r7, #8]
 8018272:	681b      	ldr	r3, [r3, #0]
 8018274:	2b00      	cmp	r3, #0
 8018276:	d008      	beq.n	801828a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8018278:	68bb      	ldr	r3, [r7, #8]
 801827a:	2b00      	cmp	r3, #0
 801827c:	d002      	beq.n	8018284 <tcp_bind+0xec>
 801827e:	68bb      	ldr	r3, [r7, #8]
 8018280:	681b      	ldr	r3, [r3, #0]
 8018282:	e000      	b.n	8018286 <tcp_bind+0xee>
 8018284:	2300      	movs	r3, #0
 8018286:	68fa      	ldr	r2, [r7, #12]
 8018288:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 801828a:	68fb      	ldr	r3, [r7, #12]
 801828c:	88fa      	ldrh	r2, [r7, #6]
 801828e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8018290:	4b0c      	ldr	r3, [pc, #48]	; (80182c4 <tcp_bind+0x12c>)
 8018292:	681a      	ldr	r2, [r3, #0]
 8018294:	68fb      	ldr	r3, [r7, #12]
 8018296:	60da      	str	r2, [r3, #12]
 8018298:	4a0a      	ldr	r2, [pc, #40]	; (80182c4 <tcp_bind+0x12c>)
 801829a:	68fb      	ldr	r3, [r7, #12]
 801829c:	6013      	str	r3, [r2, #0]
 801829e:	f005 fccb 	bl	801dc38 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80182a2:	2300      	movs	r3, #0
}
 80182a4:	4618      	mov	r0, r3
 80182a6:	3720      	adds	r7, #32
 80182a8:	46bd      	mov	sp, r7
 80182aa:	bd80      	pop	{r7, pc}
 80182ac:	0802af88 	.word	0x0802af88
 80182b0:	0802510c 	.word	0x0802510c
 80182b4:	080252a0 	.word	0x080252a0
 80182b8:	08025150 	.word	0x08025150
 80182bc:	080252b8 	.word	0x080252b8
 80182c0:	0802af60 	.word	0x0802af60
 80182c4:	2001b99c 	.word	0x2001b99c

080182c8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80182c8:	b580      	push	{r7, lr}
 80182ca:	b084      	sub	sp, #16
 80182cc:	af00      	add	r7, sp, #0
 80182ce:	60f8      	str	r0, [r7, #12]
 80182d0:	60b9      	str	r1, [r7, #8]
 80182d2:	4613      	mov	r3, r2
 80182d4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80182d6:	68bb      	ldr	r3, [r7, #8]
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d106      	bne.n	80182ea <tcp_accept_null+0x22>
 80182dc:	4b07      	ldr	r3, [pc, #28]	; (80182fc <tcp_accept_null+0x34>)
 80182de:	f240 320f 	movw	r2, #783	; 0x30f
 80182e2:	4907      	ldr	r1, [pc, #28]	; (8018300 <tcp_accept_null+0x38>)
 80182e4:	4807      	ldr	r0, [pc, #28]	; (8018304 <tcp_accept_null+0x3c>)
 80182e6:	f009 f91d 	bl	8021524 <iprintf>

  tcp_abort(pcb);
 80182ea:	68b8      	ldr	r0, [r7, #8]
 80182ec:	f7ff ff48 	bl	8018180 <tcp_abort>

  return ERR_ABRT;
 80182f0:	f06f 030c 	mvn.w	r3, #12
}
 80182f4:	4618      	mov	r0, r3
 80182f6:	3710      	adds	r7, #16
 80182f8:	46bd      	mov	sp, r7
 80182fa:	bd80      	pop	{r7, pc}
 80182fc:	0802510c 	.word	0x0802510c
 8018300:	080252e0 	.word	0x080252e0
 8018304:	08025150 	.word	0x08025150

08018308 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8018308:	b580      	push	{r7, lr}
 801830a:	b082      	sub	sp, #8
 801830c:	af00      	add	r7, sp, #0
 801830e:	6078      	str	r0, [r7, #4]
 8018310:	460b      	mov	r3, r1
 8018312:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8018314:	78fb      	ldrb	r3, [r7, #3]
 8018316:	2200      	movs	r2, #0
 8018318:	4619      	mov	r1, r3
 801831a:	6878      	ldr	r0, [r7, #4]
 801831c:	f000 f806 	bl	801832c <tcp_listen_with_backlog_and_err>
 8018320:	4603      	mov	r3, r0
}
 8018322:	4618      	mov	r0, r3
 8018324:	3708      	adds	r7, #8
 8018326:	46bd      	mov	sp, r7
 8018328:	bd80      	pop	{r7, pc}
	...

0801832c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 801832c:	b580      	push	{r7, lr}
 801832e:	b088      	sub	sp, #32
 8018330:	af00      	add	r7, sp, #0
 8018332:	60f8      	str	r0, [r7, #12]
 8018334:	460b      	mov	r3, r1
 8018336:	607a      	str	r2, [r7, #4]
 8018338:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801833a:	2300      	movs	r3, #0
 801833c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801833e:	68fb      	ldr	r3, [r7, #12]
 8018340:	2b00      	cmp	r3, #0
 8018342:	d109      	bne.n	8018358 <tcp_listen_with_backlog_and_err+0x2c>
 8018344:	4b47      	ldr	r3, [pc, #284]	; (8018464 <tcp_listen_with_backlog_and_err+0x138>)
 8018346:	f240 3259 	movw	r2, #857	; 0x359
 801834a:	4947      	ldr	r1, [pc, #284]	; (8018468 <tcp_listen_with_backlog_and_err+0x13c>)
 801834c:	4847      	ldr	r0, [pc, #284]	; (801846c <tcp_listen_with_backlog_and_err+0x140>)
 801834e:	f009 f8e9 	bl	8021524 <iprintf>
 8018352:	23f0      	movs	r3, #240	; 0xf0
 8018354:	76fb      	strb	r3, [r7, #27]
 8018356:	e079      	b.n	801844c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8018358:	68fb      	ldr	r3, [r7, #12]
 801835a:	7d1b      	ldrb	r3, [r3, #20]
 801835c:	2b00      	cmp	r3, #0
 801835e:	d009      	beq.n	8018374 <tcp_listen_with_backlog_and_err+0x48>
 8018360:	4b40      	ldr	r3, [pc, #256]	; (8018464 <tcp_listen_with_backlog_and_err+0x138>)
 8018362:	f240 325a 	movw	r2, #858	; 0x35a
 8018366:	4942      	ldr	r1, [pc, #264]	; (8018470 <tcp_listen_with_backlog_and_err+0x144>)
 8018368:	4840      	ldr	r0, [pc, #256]	; (801846c <tcp_listen_with_backlog_and_err+0x140>)
 801836a:	f009 f8db 	bl	8021524 <iprintf>
 801836e:	23f1      	movs	r3, #241	; 0xf1
 8018370:	76fb      	strb	r3, [r7, #27]
 8018372:	e06b      	b.n	801844c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8018374:	68fb      	ldr	r3, [r7, #12]
 8018376:	7d1b      	ldrb	r3, [r3, #20]
 8018378:	2b01      	cmp	r3, #1
 801837a:	d104      	bne.n	8018386 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8018380:	23f7      	movs	r3, #247	; 0xf7
 8018382:	76fb      	strb	r3, [r7, #27]
    goto done;
 8018384:	e062      	b.n	801844c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8018386:	2002      	movs	r0, #2
 8018388:	f7fe fa70 	bl	801686c <memp_malloc>
 801838c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801838e:	69fb      	ldr	r3, [r7, #28]
 8018390:	2b00      	cmp	r3, #0
 8018392:	d102      	bne.n	801839a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8018394:	23ff      	movs	r3, #255	; 0xff
 8018396:	76fb      	strb	r3, [r7, #27]
    goto done;
 8018398:	e058      	b.n	801844c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 801839a:	68fb      	ldr	r3, [r7, #12]
 801839c:	691a      	ldr	r2, [r3, #16]
 801839e:	69fb      	ldr	r3, [r7, #28]
 80183a0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80183a2:	68fb      	ldr	r3, [r7, #12]
 80183a4:	8ada      	ldrh	r2, [r3, #22]
 80183a6:	69fb      	ldr	r3, [r7, #28]
 80183a8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80183aa:	69fb      	ldr	r3, [r7, #28]
 80183ac:	2201      	movs	r2, #1
 80183ae:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80183b0:	68fb      	ldr	r3, [r7, #12]
 80183b2:	7d5a      	ldrb	r2, [r3, #21]
 80183b4:	69fb      	ldr	r3, [r7, #28]
 80183b6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80183b8:	68fb      	ldr	r3, [r7, #12]
 80183ba:	7a5a      	ldrb	r2, [r3, #9]
 80183bc:	69fb      	ldr	r3, [r7, #28]
 80183be:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80183c0:	69fb      	ldr	r3, [r7, #28]
 80183c2:	2200      	movs	r2, #0
 80183c4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80183c6:	68fb      	ldr	r3, [r7, #12]
 80183c8:	7ada      	ldrb	r2, [r3, #11]
 80183ca:	69fb      	ldr	r3, [r7, #28]
 80183cc:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	7a9a      	ldrb	r2, [r3, #10]
 80183d2:	69fb      	ldr	r3, [r7, #28]
 80183d4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80183d6:	68fb      	ldr	r3, [r7, #12]
 80183d8:	681a      	ldr	r2, [r3, #0]
 80183da:	69fb      	ldr	r3, [r7, #28]
 80183dc:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80183de:	68fb      	ldr	r3, [r7, #12]
 80183e0:	8adb      	ldrh	r3, [r3, #22]
 80183e2:	2b00      	cmp	r3, #0
 80183e4:	d021      	beq.n	801842a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80183e6:	4b23      	ldr	r3, [pc, #140]	; (8018474 <tcp_listen_with_backlog_and_err+0x148>)
 80183e8:	681b      	ldr	r3, [r3, #0]
 80183ea:	68fa      	ldr	r2, [r7, #12]
 80183ec:	429a      	cmp	r2, r3
 80183ee:	d105      	bne.n	80183fc <tcp_listen_with_backlog_and_err+0xd0>
 80183f0:	4b20      	ldr	r3, [pc, #128]	; (8018474 <tcp_listen_with_backlog_and_err+0x148>)
 80183f2:	681b      	ldr	r3, [r3, #0]
 80183f4:	68db      	ldr	r3, [r3, #12]
 80183f6:	4a1f      	ldr	r2, [pc, #124]	; (8018474 <tcp_listen_with_backlog_and_err+0x148>)
 80183f8:	6013      	str	r3, [r2, #0]
 80183fa:	e013      	b.n	8018424 <tcp_listen_with_backlog_and_err+0xf8>
 80183fc:	4b1d      	ldr	r3, [pc, #116]	; (8018474 <tcp_listen_with_backlog_and_err+0x148>)
 80183fe:	681b      	ldr	r3, [r3, #0]
 8018400:	617b      	str	r3, [r7, #20]
 8018402:	e00c      	b.n	801841e <tcp_listen_with_backlog_and_err+0xf2>
 8018404:	697b      	ldr	r3, [r7, #20]
 8018406:	68db      	ldr	r3, [r3, #12]
 8018408:	68fa      	ldr	r2, [r7, #12]
 801840a:	429a      	cmp	r2, r3
 801840c:	d104      	bne.n	8018418 <tcp_listen_with_backlog_and_err+0xec>
 801840e:	68fb      	ldr	r3, [r7, #12]
 8018410:	68da      	ldr	r2, [r3, #12]
 8018412:	697b      	ldr	r3, [r7, #20]
 8018414:	60da      	str	r2, [r3, #12]
 8018416:	e005      	b.n	8018424 <tcp_listen_with_backlog_and_err+0xf8>
 8018418:	697b      	ldr	r3, [r7, #20]
 801841a:	68db      	ldr	r3, [r3, #12]
 801841c:	617b      	str	r3, [r7, #20]
 801841e:	697b      	ldr	r3, [r7, #20]
 8018420:	2b00      	cmp	r3, #0
 8018422:	d1ef      	bne.n	8018404 <tcp_listen_with_backlog_and_err+0xd8>
 8018424:	68fb      	ldr	r3, [r7, #12]
 8018426:	2200      	movs	r2, #0
 8018428:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 801842a:	68f8      	ldr	r0, [r7, #12]
 801842c:	f7ff fbc0 	bl	8017bb0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8018430:	69fb      	ldr	r3, [r7, #28]
 8018432:	4a11      	ldr	r2, [pc, #68]	; (8018478 <tcp_listen_with_backlog_and_err+0x14c>)
 8018434:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8018436:	4b11      	ldr	r3, [pc, #68]	; (801847c <tcp_listen_with_backlog_and_err+0x150>)
 8018438:	681a      	ldr	r2, [r3, #0]
 801843a:	69fb      	ldr	r3, [r7, #28]
 801843c:	60da      	str	r2, [r3, #12]
 801843e:	4a0f      	ldr	r2, [pc, #60]	; (801847c <tcp_listen_with_backlog_and_err+0x150>)
 8018440:	69fb      	ldr	r3, [r7, #28]
 8018442:	6013      	str	r3, [r2, #0]
 8018444:	f005 fbf8 	bl	801dc38 <tcp_timer_needed>
  res = ERR_OK;
 8018448:	2300      	movs	r3, #0
 801844a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	2b00      	cmp	r3, #0
 8018450:	d002      	beq.n	8018458 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	7efa      	ldrb	r2, [r7, #27]
 8018456:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8018458:	69fb      	ldr	r3, [r7, #28]
}
 801845a:	4618      	mov	r0, r3
 801845c:	3720      	adds	r7, #32
 801845e:	46bd      	mov	sp, r7
 8018460:	bd80      	pop	{r7, pc}
 8018462:	bf00      	nop
 8018464:	0802510c 	.word	0x0802510c
 8018468:	08025300 	.word	0x08025300
 801846c:	08025150 	.word	0x08025150
 8018470:	08025330 	.word	0x08025330
 8018474:	2001b99c 	.word	0x2001b99c
 8018478:	080182c9 	.word	0x080182c9
 801847c:	2001b998 	.word	0x2001b998

08018480 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8018480:	b580      	push	{r7, lr}
 8018482:	b084      	sub	sp, #16
 8018484:	af00      	add	r7, sp, #0
 8018486:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	2b00      	cmp	r3, #0
 801848c:	d106      	bne.n	801849c <tcp_update_rcv_ann_wnd+0x1c>
 801848e:	4b25      	ldr	r3, [pc, #148]	; (8018524 <tcp_update_rcv_ann_wnd+0xa4>)
 8018490:	f240 32a6 	movw	r2, #934	; 0x3a6
 8018494:	4924      	ldr	r1, [pc, #144]	; (8018528 <tcp_update_rcv_ann_wnd+0xa8>)
 8018496:	4825      	ldr	r0, [pc, #148]	; (801852c <tcp_update_rcv_ann_wnd+0xac>)
 8018498:	f009 f844 	bl	8021524 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184a0:	687a      	ldr	r2, [r7, #4]
 80184a2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80184a4:	4413      	add	r3, r2
 80184a6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80184ac:	687a      	ldr	r2, [r7, #4]
 80184ae:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80184b0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80184b4:	bf28      	it	cs
 80184b6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80184ba:	b292      	uxth	r2, r2
 80184bc:	4413      	add	r3, r2
 80184be:	68fa      	ldr	r2, [r7, #12]
 80184c0:	1ad3      	subs	r3, r2, r3
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	db08      	blt.n	80184d8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80184d2:	68fa      	ldr	r2, [r7, #12]
 80184d4:	1ad3      	subs	r3, r2, r3
 80184d6:	e020      	b.n	801851a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80184e0:	1ad3      	subs	r3, r2, r3
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	dd03      	ble.n	80184ee <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	2200      	movs	r2, #0
 80184ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80184ec:	e014      	b.n	8018518 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184f6:	1ad3      	subs	r3, r2, r3
 80184f8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80184fa:	68bb      	ldr	r3, [r7, #8]
 80184fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018500:	d306      	bcc.n	8018510 <tcp_update_rcv_ann_wnd+0x90>
 8018502:	4b08      	ldr	r3, [pc, #32]	; (8018524 <tcp_update_rcv_ann_wnd+0xa4>)
 8018504:	f240 32b6 	movw	r2, #950	; 0x3b6
 8018508:	4909      	ldr	r1, [pc, #36]	; (8018530 <tcp_update_rcv_ann_wnd+0xb0>)
 801850a:	4808      	ldr	r0, [pc, #32]	; (801852c <tcp_update_rcv_ann_wnd+0xac>)
 801850c:	f009 f80a 	bl	8021524 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8018510:	68bb      	ldr	r3, [r7, #8]
 8018512:	b29a      	uxth	r2, r3
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8018518:	2300      	movs	r3, #0
  }
}
 801851a:	4618      	mov	r0, r3
 801851c:	3710      	adds	r7, #16
 801851e:	46bd      	mov	sp, r7
 8018520:	bd80      	pop	{r7, pc}
 8018522:	bf00      	nop
 8018524:	0802510c 	.word	0x0802510c
 8018528:	08025368 	.word	0x08025368
 801852c:	08025150 	.word	0x08025150
 8018530:	0802538c 	.word	0x0802538c

08018534 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8018534:	b580      	push	{r7, lr}
 8018536:	b084      	sub	sp, #16
 8018538:	af00      	add	r7, sp, #0
 801853a:	6078      	str	r0, [r7, #4]
 801853c:	460b      	mov	r3, r1
 801853e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	2b00      	cmp	r3, #0
 8018544:	d107      	bne.n	8018556 <tcp_recved+0x22>
 8018546:	4b1f      	ldr	r3, [pc, #124]	; (80185c4 <tcp_recved+0x90>)
 8018548:	f240 32cf 	movw	r2, #975	; 0x3cf
 801854c:	491e      	ldr	r1, [pc, #120]	; (80185c8 <tcp_recved+0x94>)
 801854e:	481f      	ldr	r0, [pc, #124]	; (80185cc <tcp_recved+0x98>)
 8018550:	f008 ffe8 	bl	8021524 <iprintf>
 8018554:	e032      	b.n	80185bc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	7d1b      	ldrb	r3, [r3, #20]
 801855a:	2b01      	cmp	r3, #1
 801855c:	d106      	bne.n	801856c <tcp_recved+0x38>
 801855e:	4b19      	ldr	r3, [pc, #100]	; (80185c4 <tcp_recved+0x90>)
 8018560:	f240 32d2 	movw	r2, #978	; 0x3d2
 8018564:	491a      	ldr	r1, [pc, #104]	; (80185d0 <tcp_recved+0x9c>)
 8018566:	4819      	ldr	r0, [pc, #100]	; (80185cc <tcp_recved+0x98>)
 8018568:	f008 ffdc 	bl	8021524 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018570:	887b      	ldrh	r3, [r7, #2]
 8018572:	4413      	add	r3, r2
 8018574:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8018576:	89fb      	ldrh	r3, [r7, #14]
 8018578:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801857c:	d804      	bhi.n	8018588 <tcp_recved+0x54>
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018582:	89fa      	ldrh	r2, [r7, #14]
 8018584:	429a      	cmp	r2, r3
 8018586:	d204      	bcs.n	8018592 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801858e:	851a      	strh	r2, [r3, #40]	; 0x28
 8018590:	e002      	b.n	8018598 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	89fa      	ldrh	r2, [r7, #14]
 8018596:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8018598:	6878      	ldr	r0, [r7, #4]
 801859a:	f7ff ff71 	bl	8018480 <tcp_update_rcv_ann_wnd>
 801859e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80185a0:	68bb      	ldr	r3, [r7, #8]
 80185a2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80185a6:	d309      	bcc.n	80185bc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	8b5b      	ldrh	r3, [r3, #26]
 80185ac:	f043 0302 	orr.w	r3, r3, #2
 80185b0:	b29a      	uxth	r2, r3
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80185b6:	6878      	ldr	r0, [r7, #4]
 80185b8:	f004 fbc8 	bl	801cd4c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80185bc:	3710      	adds	r7, #16
 80185be:	46bd      	mov	sp, r7
 80185c0:	bd80      	pop	{r7, pc}
 80185c2:	bf00      	nop
 80185c4:	0802510c 	.word	0x0802510c
 80185c8:	080253a8 	.word	0x080253a8
 80185cc:	08025150 	.word	0x08025150
 80185d0:	080253c0 	.word	0x080253c0

080185d4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80185d4:	b480      	push	{r7}
 80185d6:	b083      	sub	sp, #12
 80185d8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80185da:	2300      	movs	r3, #0
 80185dc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80185de:	4b1e      	ldr	r3, [pc, #120]	; (8018658 <tcp_new_port+0x84>)
 80185e0:	881b      	ldrh	r3, [r3, #0]
 80185e2:	3301      	adds	r3, #1
 80185e4:	b29a      	uxth	r2, r3
 80185e6:	4b1c      	ldr	r3, [pc, #112]	; (8018658 <tcp_new_port+0x84>)
 80185e8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80185ea:	4b1b      	ldr	r3, [pc, #108]	; (8018658 <tcp_new_port+0x84>)
 80185ec:	881b      	ldrh	r3, [r3, #0]
 80185ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80185f2:	4293      	cmp	r3, r2
 80185f4:	d103      	bne.n	80185fe <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80185f6:	4b18      	ldr	r3, [pc, #96]	; (8018658 <tcp_new_port+0x84>)
 80185f8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80185fc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80185fe:	2300      	movs	r3, #0
 8018600:	71fb      	strb	r3, [r7, #7]
 8018602:	e01e      	b.n	8018642 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8018604:	79fb      	ldrb	r3, [r7, #7]
 8018606:	4a15      	ldr	r2, [pc, #84]	; (801865c <tcp_new_port+0x88>)
 8018608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801860c:	681b      	ldr	r3, [r3, #0]
 801860e:	603b      	str	r3, [r7, #0]
 8018610:	e011      	b.n	8018636 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8018612:	683b      	ldr	r3, [r7, #0]
 8018614:	8ada      	ldrh	r2, [r3, #22]
 8018616:	4b10      	ldr	r3, [pc, #64]	; (8018658 <tcp_new_port+0x84>)
 8018618:	881b      	ldrh	r3, [r3, #0]
 801861a:	429a      	cmp	r2, r3
 801861c:	d108      	bne.n	8018630 <tcp_new_port+0x5c>
        n++;
 801861e:	88bb      	ldrh	r3, [r7, #4]
 8018620:	3301      	adds	r3, #1
 8018622:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8018624:	88bb      	ldrh	r3, [r7, #4]
 8018626:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801862a:	d3d8      	bcc.n	80185de <tcp_new_port+0xa>
          return 0;
 801862c:	2300      	movs	r3, #0
 801862e:	e00d      	b.n	801864c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8018630:	683b      	ldr	r3, [r7, #0]
 8018632:	68db      	ldr	r3, [r3, #12]
 8018634:	603b      	str	r3, [r7, #0]
 8018636:	683b      	ldr	r3, [r7, #0]
 8018638:	2b00      	cmp	r3, #0
 801863a:	d1ea      	bne.n	8018612 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801863c:	79fb      	ldrb	r3, [r7, #7]
 801863e:	3301      	adds	r3, #1
 8018640:	71fb      	strb	r3, [r7, #7]
 8018642:	79fb      	ldrb	r3, [r7, #7]
 8018644:	2b03      	cmp	r3, #3
 8018646:	d9dd      	bls.n	8018604 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8018648:	4b03      	ldr	r3, [pc, #12]	; (8018658 <tcp_new_port+0x84>)
 801864a:	881b      	ldrh	r3, [r3, #0]
}
 801864c:	4618      	mov	r0, r3
 801864e:	370c      	adds	r7, #12
 8018650:	46bd      	mov	sp, r7
 8018652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018656:	4770      	bx	lr
 8018658:	20000744 	.word	0x20000744
 801865c:	0802af60 	.word	0x0802af60

08018660 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8018660:	b5b0      	push	{r4, r5, r7, lr}
 8018662:	b090      	sub	sp, #64	; 0x40
 8018664:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8018666:	2300      	movs	r3, #0
 8018668:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 801866c:	4b94      	ldr	r3, [pc, #592]	; (80188c0 <tcp_slowtmr+0x260>)
 801866e:	681b      	ldr	r3, [r3, #0]
 8018670:	3301      	adds	r3, #1
 8018672:	4a93      	ldr	r2, [pc, #588]	; (80188c0 <tcp_slowtmr+0x260>)
 8018674:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8018676:	4b93      	ldr	r3, [pc, #588]	; (80188c4 <tcp_slowtmr+0x264>)
 8018678:	781b      	ldrb	r3, [r3, #0]
 801867a:	3301      	adds	r3, #1
 801867c:	b2da      	uxtb	r2, r3
 801867e:	4b91      	ldr	r3, [pc, #580]	; (80188c4 <tcp_slowtmr+0x264>)
 8018680:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8018682:	2300      	movs	r3, #0
 8018684:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8018686:	4b90      	ldr	r3, [pc, #576]	; (80188c8 <tcp_slowtmr+0x268>)
 8018688:	681b      	ldr	r3, [r3, #0]
 801868a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801868c:	e29d      	b.n	8018bca <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801868e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018690:	7d1b      	ldrb	r3, [r3, #20]
 8018692:	2b00      	cmp	r3, #0
 8018694:	d106      	bne.n	80186a4 <tcp_slowtmr+0x44>
 8018696:	4b8d      	ldr	r3, [pc, #564]	; (80188cc <tcp_slowtmr+0x26c>)
 8018698:	f240 42be 	movw	r2, #1214	; 0x4be
 801869c:	498c      	ldr	r1, [pc, #560]	; (80188d0 <tcp_slowtmr+0x270>)
 801869e:	488d      	ldr	r0, [pc, #564]	; (80188d4 <tcp_slowtmr+0x274>)
 80186a0:	f008 ff40 	bl	8021524 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80186a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186a6:	7d1b      	ldrb	r3, [r3, #20]
 80186a8:	2b01      	cmp	r3, #1
 80186aa:	d106      	bne.n	80186ba <tcp_slowtmr+0x5a>
 80186ac:	4b87      	ldr	r3, [pc, #540]	; (80188cc <tcp_slowtmr+0x26c>)
 80186ae:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80186b2:	4989      	ldr	r1, [pc, #548]	; (80188d8 <tcp_slowtmr+0x278>)
 80186b4:	4887      	ldr	r0, [pc, #540]	; (80188d4 <tcp_slowtmr+0x274>)
 80186b6:	f008 ff35 	bl	8021524 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80186ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186bc:	7d1b      	ldrb	r3, [r3, #20]
 80186be:	2b0a      	cmp	r3, #10
 80186c0:	d106      	bne.n	80186d0 <tcp_slowtmr+0x70>
 80186c2:	4b82      	ldr	r3, [pc, #520]	; (80188cc <tcp_slowtmr+0x26c>)
 80186c4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80186c8:	4984      	ldr	r1, [pc, #528]	; (80188dc <tcp_slowtmr+0x27c>)
 80186ca:	4882      	ldr	r0, [pc, #520]	; (80188d4 <tcp_slowtmr+0x274>)
 80186cc:	f008 ff2a 	bl	8021524 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80186d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186d2:	7f9a      	ldrb	r2, [r3, #30]
 80186d4:	4b7b      	ldr	r3, [pc, #492]	; (80188c4 <tcp_slowtmr+0x264>)
 80186d6:	781b      	ldrb	r3, [r3, #0]
 80186d8:	429a      	cmp	r2, r3
 80186da:	d105      	bne.n	80186e8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80186dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186de:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80186e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186e2:	68db      	ldr	r3, [r3, #12]
 80186e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80186e6:	e270      	b.n	8018bca <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80186e8:	4b76      	ldr	r3, [pc, #472]	; (80188c4 <tcp_slowtmr+0x264>)
 80186ea:	781a      	ldrb	r2, [r3, #0]
 80186ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186ee:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80186f0:	2300      	movs	r3, #0
 80186f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80186f6:	2300      	movs	r3, #0
 80186f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80186fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186fe:	7d1b      	ldrb	r3, [r3, #20]
 8018700:	2b02      	cmp	r3, #2
 8018702:	d10a      	bne.n	801871a <tcp_slowtmr+0xba>
 8018704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018706:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801870a:	2b05      	cmp	r3, #5
 801870c:	d905      	bls.n	801871a <tcp_slowtmr+0xba>
      ++pcb_remove;
 801870e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018712:	3301      	adds	r3, #1
 8018714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018718:	e11e      	b.n	8018958 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801871a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801871c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018720:	2b0b      	cmp	r3, #11
 8018722:	d905      	bls.n	8018730 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8018724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018728:	3301      	adds	r3, #1
 801872a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801872e:	e113      	b.n	8018958 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8018730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018732:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8018736:	2b00      	cmp	r3, #0
 8018738:	d075      	beq.n	8018826 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801873a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801873c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801873e:	2b00      	cmp	r3, #0
 8018740:	d006      	beq.n	8018750 <tcp_slowtmr+0xf0>
 8018742:	4b62      	ldr	r3, [pc, #392]	; (80188cc <tcp_slowtmr+0x26c>)
 8018744:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8018748:	4965      	ldr	r1, [pc, #404]	; (80188e0 <tcp_slowtmr+0x280>)
 801874a:	4862      	ldr	r0, [pc, #392]	; (80188d4 <tcp_slowtmr+0x274>)
 801874c:	f008 feea 	bl	8021524 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8018750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018754:	2b00      	cmp	r3, #0
 8018756:	d106      	bne.n	8018766 <tcp_slowtmr+0x106>
 8018758:	4b5c      	ldr	r3, [pc, #368]	; (80188cc <tcp_slowtmr+0x26c>)
 801875a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801875e:	4961      	ldr	r1, [pc, #388]	; (80188e4 <tcp_slowtmr+0x284>)
 8018760:	485c      	ldr	r0, [pc, #368]	; (80188d4 <tcp_slowtmr+0x274>)
 8018762:	f008 fedf 	bl	8021524 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8018766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018768:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801876c:	2b0b      	cmp	r3, #11
 801876e:	d905      	bls.n	801877c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8018770:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018774:	3301      	adds	r3, #1
 8018776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801877a:	e0ed      	b.n	8018958 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801877c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801877e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8018782:	3b01      	subs	r3, #1
 8018784:	4a58      	ldr	r2, [pc, #352]	; (80188e8 <tcp_slowtmr+0x288>)
 8018786:	5cd3      	ldrb	r3, [r2, r3]
 8018788:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801878a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801878c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8018790:	7c7a      	ldrb	r2, [r7, #17]
 8018792:	429a      	cmp	r2, r3
 8018794:	d907      	bls.n	80187a6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8018796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018798:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801879c:	3301      	adds	r3, #1
 801879e:	b2da      	uxtb	r2, r3
 80187a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187a2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80187a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187a8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80187ac:	7c7a      	ldrb	r2, [r7, #17]
 80187ae:	429a      	cmp	r2, r3
 80187b0:	f200 80d2 	bhi.w	8018958 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80187b4:	2301      	movs	r3, #1
 80187b6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80187b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d108      	bne.n	80187d4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80187c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80187c4:	f005 f96a 	bl	801da9c <tcp_zero_window_probe>
 80187c8:	4603      	mov	r3, r0
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	d014      	beq.n	80187f8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80187ce:	2300      	movs	r3, #0
 80187d0:	623b      	str	r3, [r7, #32]
 80187d2:	e011      	b.n	80187f8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80187d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80187da:	4619      	mov	r1, r3
 80187dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80187de:	f004 f82f 	bl	801c840 <tcp_split_unsent_seg>
 80187e2:	4603      	mov	r3, r0
 80187e4:	2b00      	cmp	r3, #0
 80187e6:	d107      	bne.n	80187f8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80187e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80187ea:	f004 faaf 	bl	801cd4c <tcp_output>
 80187ee:	4603      	mov	r3, r0
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	d101      	bne.n	80187f8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80187f4:	2300      	movs	r3, #0
 80187f6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80187f8:	6a3b      	ldr	r3, [r7, #32]
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	f000 80ac 	beq.w	8018958 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8018800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018802:	2200      	movs	r2, #0
 8018804:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8018808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801880a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801880e:	2b06      	cmp	r3, #6
 8018810:	f200 80a2 	bhi.w	8018958 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8018814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018816:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801881a:	3301      	adds	r3, #1
 801881c:	b2da      	uxtb	r2, r3
 801881e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018820:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8018824:	e098      	b.n	8018958 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8018826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018828:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801882c:	2b00      	cmp	r3, #0
 801882e:	db0f      	blt.n	8018850 <tcp_slowtmr+0x1f0>
 8018830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018832:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018836:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801883a:	4293      	cmp	r3, r2
 801883c:	d008      	beq.n	8018850 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801883e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018840:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018844:	b29b      	uxth	r3, r3
 8018846:	3301      	adds	r3, #1
 8018848:	b29b      	uxth	r3, r3
 801884a:	b21a      	sxth	r2, r3
 801884c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801884e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8018850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018852:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8018856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018858:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801885c:	429a      	cmp	r2, r3
 801885e:	db7b      	blt.n	8018958 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8018860:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018862:	f004 fd65 	bl	801d330 <tcp_rexmit_rto_prepare>
 8018866:	4603      	mov	r3, r0
 8018868:	2b00      	cmp	r3, #0
 801886a:	d007      	beq.n	801887c <tcp_slowtmr+0x21c>
 801886c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801886e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018870:	2b00      	cmp	r3, #0
 8018872:	d171      	bne.n	8018958 <tcp_slowtmr+0x2f8>
 8018874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018878:	2b00      	cmp	r3, #0
 801887a:	d06d      	beq.n	8018958 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801887c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801887e:	7d1b      	ldrb	r3, [r3, #20]
 8018880:	2b02      	cmp	r3, #2
 8018882:	d03a      	beq.n	80188fa <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8018884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018886:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801888a:	2b0c      	cmp	r3, #12
 801888c:	bf28      	it	cs
 801888e:	230c      	movcs	r3, #12
 8018890:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8018892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018894:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018898:	10db      	asrs	r3, r3, #3
 801889a:	b21b      	sxth	r3, r3
 801889c:	461a      	mov	r2, r3
 801889e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188a0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80188a4:	4413      	add	r3, r2
 80188a6:	7efa      	ldrb	r2, [r7, #27]
 80188a8:	4910      	ldr	r1, [pc, #64]	; (80188ec <tcp_slowtmr+0x28c>)
 80188aa:	5c8a      	ldrb	r2, [r1, r2]
 80188ac:	4093      	lsls	r3, r2
 80188ae:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80188b0:	697b      	ldr	r3, [r7, #20]
 80188b2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80188b6:	4293      	cmp	r3, r2
 80188b8:	dc1a      	bgt.n	80188f0 <tcp_slowtmr+0x290>
 80188ba:	697b      	ldr	r3, [r7, #20]
 80188bc:	b21a      	sxth	r2, r3
 80188be:	e019      	b.n	80188f4 <tcp_slowtmr+0x294>
 80188c0:	2001b994 	.word	0x2001b994
 80188c4:	200052de 	.word	0x200052de
 80188c8:	2001b990 	.word	0x2001b990
 80188cc:	0802510c 	.word	0x0802510c
 80188d0:	08025450 	.word	0x08025450
 80188d4:	08025150 	.word	0x08025150
 80188d8:	0802547c 	.word	0x0802547c
 80188dc:	080254a8 	.word	0x080254a8
 80188e0:	080254d8 	.word	0x080254d8
 80188e4:	0802550c 	.word	0x0802550c
 80188e8:	0802af58 	.word	0x0802af58
 80188ec:	0802af48 	.word	0x0802af48
 80188f0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80188f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80188fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188fc:	2200      	movs	r2, #0
 80188fe:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8018900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018902:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018908:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801890c:	4293      	cmp	r3, r2
 801890e:	bf28      	it	cs
 8018910:	4613      	movcs	r3, r2
 8018912:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8018914:	8a7b      	ldrh	r3, [r7, #18]
 8018916:	085b      	lsrs	r3, r3, #1
 8018918:	b29a      	uxth	r2, r3
 801891a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801891c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8018920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018922:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8018926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018928:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801892a:	005b      	lsls	r3, r3, #1
 801892c:	b29b      	uxth	r3, r3
 801892e:	429a      	cmp	r2, r3
 8018930:	d206      	bcs.n	8018940 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8018932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018934:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018936:	005b      	lsls	r3, r3, #1
 8018938:	b29a      	uxth	r2, r3
 801893a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801893c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8018940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018942:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8018944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018946:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801894a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801894c:	2200      	movs	r2, #0
 801894e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8018952:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018954:	f004 fd5c 	bl	801d410 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8018958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801895a:	7d1b      	ldrb	r3, [r3, #20]
 801895c:	2b06      	cmp	r3, #6
 801895e:	d111      	bne.n	8018984 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8018960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018962:	8b5b      	ldrh	r3, [r3, #26]
 8018964:	f003 0310 	and.w	r3, r3, #16
 8018968:	2b00      	cmp	r3, #0
 801896a:	d00b      	beq.n	8018984 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801896c:	4b9c      	ldr	r3, [pc, #624]	; (8018be0 <tcp_slowtmr+0x580>)
 801896e:	681a      	ldr	r2, [r3, #0]
 8018970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018972:	6a1b      	ldr	r3, [r3, #32]
 8018974:	1ad3      	subs	r3, r2, r3
 8018976:	2b28      	cmp	r3, #40	; 0x28
 8018978:	d904      	bls.n	8018984 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801897a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801897e:	3301      	adds	r3, #1
 8018980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8018984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018986:	7a5b      	ldrb	r3, [r3, #9]
 8018988:	f003 0308 	and.w	r3, r3, #8
 801898c:	2b00      	cmp	r3, #0
 801898e:	d04a      	beq.n	8018a26 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8018990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018992:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8018994:	2b04      	cmp	r3, #4
 8018996:	d003      	beq.n	80189a0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8018998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801899a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801899c:	2b07      	cmp	r3, #7
 801899e:	d142      	bne.n	8018a26 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80189a0:	4b8f      	ldr	r3, [pc, #572]	; (8018be0 <tcp_slowtmr+0x580>)
 80189a2:	681a      	ldr	r2, [r3, #0]
 80189a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189a6:	6a1b      	ldr	r3, [r3, #32]
 80189a8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80189aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189ac:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80189b0:	4b8c      	ldr	r3, [pc, #560]	; (8018be4 <tcp_slowtmr+0x584>)
 80189b2:	440b      	add	r3, r1
 80189b4:	498c      	ldr	r1, [pc, #560]	; (8018be8 <tcp_slowtmr+0x588>)
 80189b6:	fba1 1303 	umull	r1, r3, r1, r3
 80189ba:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80189bc:	429a      	cmp	r2, r3
 80189be:	d90a      	bls.n	80189d6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80189c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80189c4:	3301      	adds	r3, #1
 80189c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80189ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80189ce:	3301      	adds	r3, #1
 80189d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80189d4:	e027      	b.n	8018a26 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80189d6:	4b82      	ldr	r3, [pc, #520]	; (8018be0 <tcp_slowtmr+0x580>)
 80189d8:	681a      	ldr	r2, [r3, #0]
 80189da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189dc:	6a1b      	ldr	r3, [r3, #32]
 80189de:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80189e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189e2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80189e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189e8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80189ec:	4618      	mov	r0, r3
 80189ee:	4b7f      	ldr	r3, [pc, #508]	; (8018bec <tcp_slowtmr+0x58c>)
 80189f0:	fb03 f300 	mul.w	r3, r3, r0
 80189f4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80189f6:	497c      	ldr	r1, [pc, #496]	; (8018be8 <tcp_slowtmr+0x588>)
 80189f8:	fba1 1303 	umull	r1, r3, r1, r3
 80189fc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80189fe:	429a      	cmp	r2, r3
 8018a00:	d911      	bls.n	8018a26 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8018a02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018a04:	f005 f80a 	bl	801da1c <tcp_keepalive>
 8018a08:	4603      	mov	r3, r0
 8018a0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8018a0e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	d107      	bne.n	8018a26 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8018a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a18:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8018a1c:	3301      	adds	r3, #1
 8018a1e:	b2da      	uxtb	r2, r3
 8018a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a22:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8018a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	d011      	beq.n	8018a52 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8018a2e:	4b6c      	ldr	r3, [pc, #432]	; (8018be0 <tcp_slowtmr+0x580>)
 8018a30:	681a      	ldr	r2, [r3, #0]
 8018a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a34:	6a1b      	ldr	r3, [r3, #32]
 8018a36:	1ad2      	subs	r2, r2, r3
 8018a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a3a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8018a3e:	4619      	mov	r1, r3
 8018a40:	460b      	mov	r3, r1
 8018a42:	005b      	lsls	r3, r3, #1
 8018a44:	440b      	add	r3, r1
 8018a46:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8018a48:	429a      	cmp	r2, r3
 8018a4a:	d302      	bcc.n	8018a52 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8018a4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018a4e:	f000 fec9 	bl	80197e4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8018a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a54:	7d1b      	ldrb	r3, [r3, #20]
 8018a56:	2b03      	cmp	r3, #3
 8018a58:	d10b      	bne.n	8018a72 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8018a5a:	4b61      	ldr	r3, [pc, #388]	; (8018be0 <tcp_slowtmr+0x580>)
 8018a5c:	681a      	ldr	r2, [r3, #0]
 8018a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a60:	6a1b      	ldr	r3, [r3, #32]
 8018a62:	1ad3      	subs	r3, r2, r3
 8018a64:	2b28      	cmp	r3, #40	; 0x28
 8018a66:	d904      	bls.n	8018a72 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8018a68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a6c:	3301      	adds	r3, #1
 8018a6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8018a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a74:	7d1b      	ldrb	r3, [r3, #20]
 8018a76:	2b09      	cmp	r3, #9
 8018a78:	d10b      	bne.n	8018a92 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8018a7a:	4b59      	ldr	r3, [pc, #356]	; (8018be0 <tcp_slowtmr+0x580>)
 8018a7c:	681a      	ldr	r2, [r3, #0]
 8018a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a80:	6a1b      	ldr	r3, [r3, #32]
 8018a82:	1ad3      	subs	r3, r2, r3
 8018a84:	2bf0      	cmp	r3, #240	; 0xf0
 8018a86:	d904      	bls.n	8018a92 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8018a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a8c:	3301      	adds	r3, #1
 8018a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8018a92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d060      	beq.n	8018b5c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8018a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8018aa0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8018aa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018aa4:	f000 fcea 	bl	801947c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8018aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d010      	beq.n	8018ad0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8018aae:	4b50      	ldr	r3, [pc, #320]	; (8018bf0 <tcp_slowtmr+0x590>)
 8018ab0:	681b      	ldr	r3, [r3, #0]
 8018ab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018ab4:	429a      	cmp	r2, r3
 8018ab6:	d106      	bne.n	8018ac6 <tcp_slowtmr+0x466>
 8018ab8:	4b4e      	ldr	r3, [pc, #312]	; (8018bf4 <tcp_slowtmr+0x594>)
 8018aba:	f240 526d 	movw	r2, #1389	; 0x56d
 8018abe:	494e      	ldr	r1, [pc, #312]	; (8018bf8 <tcp_slowtmr+0x598>)
 8018ac0:	484e      	ldr	r0, [pc, #312]	; (8018bfc <tcp_slowtmr+0x59c>)
 8018ac2:	f008 fd2f 	bl	8021524 <iprintf>
        prev->next = pcb->next;
 8018ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ac8:	68da      	ldr	r2, [r3, #12]
 8018aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018acc:	60da      	str	r2, [r3, #12]
 8018ace:	e00f      	b.n	8018af0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8018ad0:	4b47      	ldr	r3, [pc, #284]	; (8018bf0 <tcp_slowtmr+0x590>)
 8018ad2:	681b      	ldr	r3, [r3, #0]
 8018ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018ad6:	429a      	cmp	r2, r3
 8018ad8:	d006      	beq.n	8018ae8 <tcp_slowtmr+0x488>
 8018ada:	4b46      	ldr	r3, [pc, #280]	; (8018bf4 <tcp_slowtmr+0x594>)
 8018adc:	f240 5271 	movw	r2, #1393	; 0x571
 8018ae0:	4947      	ldr	r1, [pc, #284]	; (8018c00 <tcp_slowtmr+0x5a0>)
 8018ae2:	4846      	ldr	r0, [pc, #280]	; (8018bfc <tcp_slowtmr+0x59c>)
 8018ae4:	f008 fd1e 	bl	8021524 <iprintf>
        tcp_active_pcbs = pcb->next;
 8018ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018aea:	68db      	ldr	r3, [r3, #12]
 8018aec:	4a40      	ldr	r2, [pc, #256]	; (8018bf0 <tcp_slowtmr+0x590>)
 8018aee:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8018af0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018af4:	2b00      	cmp	r3, #0
 8018af6:	d013      	beq.n	8018b20 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8018af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018afa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8018afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018afe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018b00:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8018b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b04:	3304      	adds	r3, #4
 8018b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018b08:	8ad2      	ldrh	r2, [r2, #22]
 8018b0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018b0c:	8b09      	ldrh	r1, [r1, #24]
 8018b0e:	9102      	str	r1, [sp, #8]
 8018b10:	9201      	str	r2, [sp, #4]
 8018b12:	9300      	str	r3, [sp, #0]
 8018b14:	462b      	mov	r3, r5
 8018b16:	4622      	mov	r2, r4
 8018b18:	4601      	mov	r1, r0
 8018b1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018b1c:	f004 feca 	bl	801d8b4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8018b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b22:	691b      	ldr	r3, [r3, #16]
 8018b24:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8018b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b28:	7d1b      	ldrb	r3, [r3, #20]
 8018b2a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8018b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b2e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8018b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b32:	68db      	ldr	r3, [r3, #12]
 8018b34:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8018b36:	6838      	ldr	r0, [r7, #0]
 8018b38:	f7ff f83a 	bl	8017bb0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8018b3c:	4b31      	ldr	r3, [pc, #196]	; (8018c04 <tcp_slowtmr+0x5a4>)
 8018b3e:	2200      	movs	r2, #0
 8018b40:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8018b42:	68fb      	ldr	r3, [r7, #12]
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	d004      	beq.n	8018b52 <tcp_slowtmr+0x4f2>
 8018b48:	68fb      	ldr	r3, [r7, #12]
 8018b4a:	f06f 010c 	mvn.w	r1, #12
 8018b4e:	68b8      	ldr	r0, [r7, #8]
 8018b50:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8018b52:	4b2c      	ldr	r3, [pc, #176]	; (8018c04 <tcp_slowtmr+0x5a4>)
 8018b54:	781b      	ldrb	r3, [r3, #0]
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d037      	beq.n	8018bca <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8018b5a:	e592      	b.n	8018682 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8018b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b5e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8018b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b62:	68db      	ldr	r3, [r3, #12]
 8018b64:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8018b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b68:	7f1b      	ldrb	r3, [r3, #28]
 8018b6a:	3301      	adds	r3, #1
 8018b6c:	b2da      	uxtb	r2, r3
 8018b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b70:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8018b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b74:	7f1a      	ldrb	r2, [r3, #28]
 8018b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b78:	7f5b      	ldrb	r3, [r3, #29]
 8018b7a:	429a      	cmp	r2, r3
 8018b7c:	d325      	bcc.n	8018bca <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8018b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b80:	2200      	movs	r2, #0
 8018b82:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8018b84:	4b1f      	ldr	r3, [pc, #124]	; (8018c04 <tcp_slowtmr+0x5a4>)
 8018b86:	2200      	movs	r2, #0
 8018b88:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8018b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018b90:	2b00      	cmp	r3, #0
 8018b92:	d00b      	beq.n	8018bac <tcp_slowtmr+0x54c>
 8018b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8018b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018b9c:	6912      	ldr	r2, [r2, #16]
 8018b9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018ba0:	4610      	mov	r0, r2
 8018ba2:	4798      	blx	r3
 8018ba4:	4603      	mov	r3, r0
 8018ba6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8018baa:	e002      	b.n	8018bb2 <tcp_slowtmr+0x552>
 8018bac:	2300      	movs	r3, #0
 8018bae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8018bb2:	4b14      	ldr	r3, [pc, #80]	; (8018c04 <tcp_slowtmr+0x5a4>)
 8018bb4:	781b      	ldrb	r3, [r3, #0]
 8018bb6:	2b00      	cmp	r3, #0
 8018bb8:	d000      	beq.n	8018bbc <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8018bba:	e562      	b.n	8018682 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8018bbc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	d102      	bne.n	8018bca <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8018bc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018bc6:	f004 f8c1 	bl	801cd4c <tcp_output>
  while (pcb != NULL) {
 8018bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	f47f ad5e 	bne.w	801868e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8018bd2:	2300      	movs	r3, #0
 8018bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8018bd6:	4b0c      	ldr	r3, [pc, #48]	; (8018c08 <tcp_slowtmr+0x5a8>)
 8018bd8:	681b      	ldr	r3, [r3, #0]
 8018bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8018bdc:	e069      	b.n	8018cb2 <tcp_slowtmr+0x652>
 8018bde:	bf00      	nop
 8018be0:	2001b994 	.word	0x2001b994
 8018be4:	000a4cb8 	.word	0x000a4cb8
 8018be8:	10624dd3 	.word	0x10624dd3
 8018bec:	000124f8 	.word	0x000124f8
 8018bf0:	2001b990 	.word	0x2001b990
 8018bf4:	0802510c 	.word	0x0802510c
 8018bf8:	08025544 	.word	0x08025544
 8018bfc:	08025150 	.word	0x08025150
 8018c00:	08025570 	.word	0x08025570
 8018c04:	2001b98c 	.word	0x2001b98c
 8018c08:	2001b9a0 	.word	0x2001b9a0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8018c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c0e:	7d1b      	ldrb	r3, [r3, #20]
 8018c10:	2b0a      	cmp	r3, #10
 8018c12:	d006      	beq.n	8018c22 <tcp_slowtmr+0x5c2>
 8018c14:	4b2b      	ldr	r3, [pc, #172]	; (8018cc4 <tcp_slowtmr+0x664>)
 8018c16:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8018c1a:	492b      	ldr	r1, [pc, #172]	; (8018cc8 <tcp_slowtmr+0x668>)
 8018c1c:	482b      	ldr	r0, [pc, #172]	; (8018ccc <tcp_slowtmr+0x66c>)
 8018c1e:	f008 fc81 	bl	8021524 <iprintf>
    pcb_remove = 0;
 8018c22:	2300      	movs	r3, #0
 8018c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8018c28:	4b29      	ldr	r3, [pc, #164]	; (8018cd0 <tcp_slowtmr+0x670>)
 8018c2a:	681a      	ldr	r2, [r3, #0]
 8018c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c2e:	6a1b      	ldr	r3, [r3, #32]
 8018c30:	1ad3      	subs	r3, r2, r3
 8018c32:	2bf0      	cmp	r3, #240	; 0xf0
 8018c34:	d904      	bls.n	8018c40 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8018c36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c3a:	3301      	adds	r3, #1
 8018c3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8018c40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	d02f      	beq.n	8018ca8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8018c48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018c4a:	f000 fc17 	bl	801947c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8018c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d010      	beq.n	8018c76 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8018c54:	4b1f      	ldr	r3, [pc, #124]	; (8018cd4 <tcp_slowtmr+0x674>)
 8018c56:	681b      	ldr	r3, [r3, #0]
 8018c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018c5a:	429a      	cmp	r2, r3
 8018c5c:	d106      	bne.n	8018c6c <tcp_slowtmr+0x60c>
 8018c5e:	4b19      	ldr	r3, [pc, #100]	; (8018cc4 <tcp_slowtmr+0x664>)
 8018c60:	f240 52af 	movw	r2, #1455	; 0x5af
 8018c64:	491c      	ldr	r1, [pc, #112]	; (8018cd8 <tcp_slowtmr+0x678>)
 8018c66:	4819      	ldr	r0, [pc, #100]	; (8018ccc <tcp_slowtmr+0x66c>)
 8018c68:	f008 fc5c 	bl	8021524 <iprintf>
        prev->next = pcb->next;
 8018c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c6e:	68da      	ldr	r2, [r3, #12]
 8018c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c72:	60da      	str	r2, [r3, #12]
 8018c74:	e00f      	b.n	8018c96 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8018c76:	4b17      	ldr	r3, [pc, #92]	; (8018cd4 <tcp_slowtmr+0x674>)
 8018c78:	681b      	ldr	r3, [r3, #0]
 8018c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018c7c:	429a      	cmp	r2, r3
 8018c7e:	d006      	beq.n	8018c8e <tcp_slowtmr+0x62e>
 8018c80:	4b10      	ldr	r3, [pc, #64]	; (8018cc4 <tcp_slowtmr+0x664>)
 8018c82:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8018c86:	4915      	ldr	r1, [pc, #84]	; (8018cdc <tcp_slowtmr+0x67c>)
 8018c88:	4810      	ldr	r0, [pc, #64]	; (8018ccc <tcp_slowtmr+0x66c>)
 8018c8a:	f008 fc4b 	bl	8021524 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8018c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c90:	68db      	ldr	r3, [r3, #12]
 8018c92:	4a10      	ldr	r2, [pc, #64]	; (8018cd4 <tcp_slowtmr+0x674>)
 8018c94:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8018c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c98:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8018c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c9c:	68db      	ldr	r3, [r3, #12]
 8018c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8018ca0:	69f8      	ldr	r0, [r7, #28]
 8018ca2:	f7fe ff85 	bl	8017bb0 <tcp_free>
 8018ca6:	e004      	b.n	8018cb2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8018ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018caa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8018cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cae:	68db      	ldr	r3, [r3, #12]
 8018cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8018cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	d1a9      	bne.n	8018c0c <tcp_slowtmr+0x5ac>
    }
  }
}
 8018cb8:	bf00      	nop
 8018cba:	bf00      	nop
 8018cbc:	3730      	adds	r7, #48	; 0x30
 8018cbe:	46bd      	mov	sp, r7
 8018cc0:	bdb0      	pop	{r4, r5, r7, pc}
 8018cc2:	bf00      	nop
 8018cc4:	0802510c 	.word	0x0802510c
 8018cc8:	0802559c 	.word	0x0802559c
 8018ccc:	08025150 	.word	0x08025150
 8018cd0:	2001b994 	.word	0x2001b994
 8018cd4:	2001b9a0 	.word	0x2001b9a0
 8018cd8:	080255cc 	.word	0x080255cc
 8018cdc:	080255f4 	.word	0x080255f4

08018ce0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8018ce0:	b580      	push	{r7, lr}
 8018ce2:	b082      	sub	sp, #8
 8018ce4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8018ce6:	4b2d      	ldr	r3, [pc, #180]	; (8018d9c <tcp_fasttmr+0xbc>)
 8018ce8:	781b      	ldrb	r3, [r3, #0]
 8018cea:	3301      	adds	r3, #1
 8018cec:	b2da      	uxtb	r2, r3
 8018cee:	4b2b      	ldr	r3, [pc, #172]	; (8018d9c <tcp_fasttmr+0xbc>)
 8018cf0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8018cf2:	4b2b      	ldr	r3, [pc, #172]	; (8018da0 <tcp_fasttmr+0xc0>)
 8018cf4:	681b      	ldr	r3, [r3, #0]
 8018cf6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8018cf8:	e048      	b.n	8018d8c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	7f9a      	ldrb	r2, [r3, #30]
 8018cfe:	4b27      	ldr	r3, [pc, #156]	; (8018d9c <tcp_fasttmr+0xbc>)
 8018d00:	781b      	ldrb	r3, [r3, #0]
 8018d02:	429a      	cmp	r2, r3
 8018d04:	d03f      	beq.n	8018d86 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8018d06:	4b25      	ldr	r3, [pc, #148]	; (8018d9c <tcp_fasttmr+0xbc>)
 8018d08:	781a      	ldrb	r2, [r3, #0]
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	8b5b      	ldrh	r3, [r3, #26]
 8018d12:	f003 0301 	and.w	r3, r3, #1
 8018d16:	2b00      	cmp	r3, #0
 8018d18:	d010      	beq.n	8018d3c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	8b5b      	ldrh	r3, [r3, #26]
 8018d1e:	f043 0302 	orr.w	r3, r3, #2
 8018d22:	b29a      	uxth	r2, r3
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8018d28:	6878      	ldr	r0, [r7, #4]
 8018d2a:	f004 f80f 	bl	801cd4c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	8b5b      	ldrh	r3, [r3, #26]
 8018d32:	f023 0303 	bic.w	r3, r3, #3
 8018d36:	b29a      	uxth	r2, r3
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	8b5b      	ldrh	r3, [r3, #26]
 8018d40:	f003 0308 	and.w	r3, r3, #8
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	d009      	beq.n	8018d5c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	8b5b      	ldrh	r3, [r3, #26]
 8018d4c:	f023 0308 	bic.w	r3, r3, #8
 8018d50:	b29a      	uxth	r2, r3
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8018d56:	6878      	ldr	r0, [r7, #4]
 8018d58:	f7ff f8be 	bl	8017ed8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	68db      	ldr	r3, [r3, #12]
 8018d60:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8018d62:	687b      	ldr	r3, [r7, #4]
 8018d64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018d66:	2b00      	cmp	r3, #0
 8018d68:	d00a      	beq.n	8018d80 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8018d6a:	4b0e      	ldr	r3, [pc, #56]	; (8018da4 <tcp_fasttmr+0xc4>)
 8018d6c:	2200      	movs	r2, #0
 8018d6e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8018d70:	6878      	ldr	r0, [r7, #4]
 8018d72:	f000 f819 	bl	8018da8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8018d76:	4b0b      	ldr	r3, [pc, #44]	; (8018da4 <tcp_fasttmr+0xc4>)
 8018d78:	781b      	ldrb	r3, [r3, #0]
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	d000      	beq.n	8018d80 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8018d7e:	e7b8      	b.n	8018cf2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8018d80:	683b      	ldr	r3, [r7, #0]
 8018d82:	607b      	str	r3, [r7, #4]
 8018d84:	e002      	b.n	8018d8c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	68db      	ldr	r3, [r3, #12]
 8018d8a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	2b00      	cmp	r3, #0
 8018d90:	d1b3      	bne.n	8018cfa <tcp_fasttmr+0x1a>
    }
  }
}
 8018d92:	bf00      	nop
 8018d94:	bf00      	nop
 8018d96:	3708      	adds	r7, #8
 8018d98:	46bd      	mov	sp, r7
 8018d9a:	bd80      	pop	{r7, pc}
 8018d9c:	200052de 	.word	0x200052de
 8018da0:	2001b990 	.word	0x2001b990
 8018da4:	2001b98c 	.word	0x2001b98c

08018da8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8018da8:	b590      	push	{r4, r7, lr}
 8018daa:	b085      	sub	sp, #20
 8018dac:	af00      	add	r7, sp, #0
 8018dae:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d109      	bne.n	8018dca <tcp_process_refused_data+0x22>
 8018db6:	4b37      	ldr	r3, [pc, #220]	; (8018e94 <tcp_process_refused_data+0xec>)
 8018db8:	f240 6209 	movw	r2, #1545	; 0x609
 8018dbc:	4936      	ldr	r1, [pc, #216]	; (8018e98 <tcp_process_refused_data+0xf0>)
 8018dbe:	4837      	ldr	r0, [pc, #220]	; (8018e9c <tcp_process_refused_data+0xf4>)
 8018dc0:	f008 fbb0 	bl	8021524 <iprintf>
 8018dc4:	f06f 030f 	mvn.w	r3, #15
 8018dc8:	e060      	b.n	8018e8c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018dce:	7b5b      	ldrb	r3, [r3, #13]
 8018dd0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018dd6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	2200      	movs	r2, #0
 8018ddc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	d00b      	beq.n	8018e00 <tcp_process_refused_data+0x58>
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	6918      	ldr	r0, [r3, #16]
 8018df2:	2300      	movs	r3, #0
 8018df4:	68ba      	ldr	r2, [r7, #8]
 8018df6:	6879      	ldr	r1, [r7, #4]
 8018df8:	47a0      	blx	r4
 8018dfa:	4603      	mov	r3, r0
 8018dfc:	73fb      	strb	r3, [r7, #15]
 8018dfe:	e007      	b.n	8018e10 <tcp_process_refused_data+0x68>
 8018e00:	2300      	movs	r3, #0
 8018e02:	68ba      	ldr	r2, [r7, #8]
 8018e04:	6879      	ldr	r1, [r7, #4]
 8018e06:	2000      	movs	r0, #0
 8018e08:	f000 f8c2 	bl	8018f90 <tcp_recv_null>
 8018e0c:	4603      	mov	r3, r0
 8018e0e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8018e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	d12a      	bne.n	8018e6e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8018e18:	7bbb      	ldrb	r3, [r7, #14]
 8018e1a:	f003 0320 	and.w	r3, r3, #32
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d033      	beq.n	8018e8a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018e26:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8018e2a:	d005      	beq.n	8018e38 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018e30:	3301      	adds	r3, #1
 8018e32:	b29a      	uxth	r2, r3
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d00b      	beq.n	8018e5a <tcp_process_refused_data+0xb2>
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	6918      	ldr	r0, [r3, #16]
 8018e4c:	2300      	movs	r3, #0
 8018e4e:	2200      	movs	r2, #0
 8018e50:	6879      	ldr	r1, [r7, #4]
 8018e52:	47a0      	blx	r4
 8018e54:	4603      	mov	r3, r0
 8018e56:	73fb      	strb	r3, [r7, #15]
 8018e58:	e001      	b.n	8018e5e <tcp_process_refused_data+0xb6>
 8018e5a:	2300      	movs	r3, #0
 8018e5c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8018e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018e62:	f113 0f0d 	cmn.w	r3, #13
 8018e66:	d110      	bne.n	8018e8a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8018e68:	f06f 030c 	mvn.w	r3, #12
 8018e6c:	e00e      	b.n	8018e8c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8018e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018e72:	f113 0f0d 	cmn.w	r3, #13
 8018e76:	d102      	bne.n	8018e7e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8018e78:	f06f 030c 	mvn.w	r3, #12
 8018e7c:	e006      	b.n	8018e8c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	68ba      	ldr	r2, [r7, #8]
 8018e82:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8018e84:	f06f 0304 	mvn.w	r3, #4
 8018e88:	e000      	b.n	8018e8c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8018e8a:	2300      	movs	r3, #0
}
 8018e8c:	4618      	mov	r0, r3
 8018e8e:	3714      	adds	r7, #20
 8018e90:	46bd      	mov	sp, r7
 8018e92:	bd90      	pop	{r4, r7, pc}
 8018e94:	0802510c 	.word	0x0802510c
 8018e98:	0802561c 	.word	0x0802561c
 8018e9c:	08025150 	.word	0x08025150

08018ea0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8018ea0:	b580      	push	{r7, lr}
 8018ea2:	b084      	sub	sp, #16
 8018ea4:	af00      	add	r7, sp, #0
 8018ea6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8018ea8:	e007      	b.n	8018eba <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	681b      	ldr	r3, [r3, #0]
 8018eae:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8018eb0:	6878      	ldr	r0, [r7, #4]
 8018eb2:	f000 f80a 	bl	8018eca <tcp_seg_free>
    seg = next;
 8018eb6:	68fb      	ldr	r3, [r7, #12]
 8018eb8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d1f4      	bne.n	8018eaa <tcp_segs_free+0xa>
  }
}
 8018ec0:	bf00      	nop
 8018ec2:	bf00      	nop
 8018ec4:	3710      	adds	r7, #16
 8018ec6:	46bd      	mov	sp, r7
 8018ec8:	bd80      	pop	{r7, pc}

08018eca <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8018eca:	b580      	push	{r7, lr}
 8018ecc:	b082      	sub	sp, #8
 8018ece:	af00      	add	r7, sp, #0
 8018ed0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	2b00      	cmp	r3, #0
 8018ed6:	d00c      	beq.n	8018ef2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	685b      	ldr	r3, [r3, #4]
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	d004      	beq.n	8018eea <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	685b      	ldr	r3, [r3, #4]
 8018ee4:	4618      	mov	r0, r3
 8018ee6:	f7fe fbb7 	bl	8017658 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8018eea:	6879      	ldr	r1, [r7, #4]
 8018eec:	2003      	movs	r0, #3
 8018eee:	f7fd fd0f 	bl	8016910 <memp_free>
  }
}
 8018ef2:	bf00      	nop
 8018ef4:	3708      	adds	r7, #8
 8018ef6:	46bd      	mov	sp, r7
 8018ef8:	bd80      	pop	{r7, pc}
	...

08018efc <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8018efc:	b580      	push	{r7, lr}
 8018efe:	b082      	sub	sp, #8
 8018f00:	af00      	add	r7, sp, #0
 8018f02:	6078      	str	r0, [r7, #4]
 8018f04:	460b      	mov	r3, r1
 8018f06:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	2b00      	cmp	r3, #0
 8018f0c:	d107      	bne.n	8018f1e <tcp_setprio+0x22>
 8018f0e:	4b07      	ldr	r3, [pc, #28]	; (8018f2c <tcp_setprio+0x30>)
 8018f10:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8018f14:	4906      	ldr	r1, [pc, #24]	; (8018f30 <tcp_setprio+0x34>)
 8018f16:	4807      	ldr	r0, [pc, #28]	; (8018f34 <tcp_setprio+0x38>)
 8018f18:	f008 fb04 	bl	8021524 <iprintf>
 8018f1c:	e002      	b.n	8018f24 <tcp_setprio+0x28>

  pcb->prio = prio;
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	78fa      	ldrb	r2, [r7, #3]
 8018f22:	755a      	strb	r2, [r3, #21]
}
 8018f24:	3708      	adds	r7, #8
 8018f26:	46bd      	mov	sp, r7
 8018f28:	bd80      	pop	{r7, pc}
 8018f2a:	bf00      	nop
 8018f2c:	0802510c 	.word	0x0802510c
 8018f30:	08025644 	.word	0x08025644
 8018f34:	08025150 	.word	0x08025150

08018f38 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8018f38:	b580      	push	{r7, lr}
 8018f3a:	b084      	sub	sp, #16
 8018f3c:	af00      	add	r7, sp, #0
 8018f3e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	d106      	bne.n	8018f54 <tcp_seg_copy+0x1c>
 8018f46:	4b0f      	ldr	r3, [pc, #60]	; (8018f84 <tcp_seg_copy+0x4c>)
 8018f48:	f240 6282 	movw	r2, #1666	; 0x682
 8018f4c:	490e      	ldr	r1, [pc, #56]	; (8018f88 <tcp_seg_copy+0x50>)
 8018f4e:	480f      	ldr	r0, [pc, #60]	; (8018f8c <tcp_seg_copy+0x54>)
 8018f50:	f008 fae8 	bl	8021524 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8018f54:	2003      	movs	r0, #3
 8018f56:	f7fd fc89 	bl	801686c <memp_malloc>
 8018f5a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8018f5c:	68fb      	ldr	r3, [r7, #12]
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	d101      	bne.n	8018f66 <tcp_seg_copy+0x2e>
    return NULL;
 8018f62:	2300      	movs	r3, #0
 8018f64:	e00a      	b.n	8018f7c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8018f66:	2210      	movs	r2, #16
 8018f68:	6879      	ldr	r1, [r7, #4]
 8018f6a:	68f8      	ldr	r0, [r7, #12]
 8018f6c:	f008 fa00 	bl	8021370 <memcpy>
  pbuf_ref(cseg->p);
 8018f70:	68fb      	ldr	r3, [r7, #12]
 8018f72:	685b      	ldr	r3, [r3, #4]
 8018f74:	4618      	mov	r0, r3
 8018f76:	f7fe fc15 	bl	80177a4 <pbuf_ref>
  return cseg;
 8018f7a:	68fb      	ldr	r3, [r7, #12]
}
 8018f7c:	4618      	mov	r0, r3
 8018f7e:	3710      	adds	r7, #16
 8018f80:	46bd      	mov	sp, r7
 8018f82:	bd80      	pop	{r7, pc}
 8018f84:	0802510c 	.word	0x0802510c
 8018f88:	08025660 	.word	0x08025660
 8018f8c:	08025150 	.word	0x08025150

08018f90 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8018f90:	b580      	push	{r7, lr}
 8018f92:	b084      	sub	sp, #16
 8018f94:	af00      	add	r7, sp, #0
 8018f96:	60f8      	str	r0, [r7, #12]
 8018f98:	60b9      	str	r1, [r7, #8]
 8018f9a:	607a      	str	r2, [r7, #4]
 8018f9c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8018f9e:	68bb      	ldr	r3, [r7, #8]
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d109      	bne.n	8018fb8 <tcp_recv_null+0x28>
 8018fa4:	4b12      	ldr	r3, [pc, #72]	; (8018ff0 <tcp_recv_null+0x60>)
 8018fa6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8018faa:	4912      	ldr	r1, [pc, #72]	; (8018ff4 <tcp_recv_null+0x64>)
 8018fac:	4812      	ldr	r0, [pc, #72]	; (8018ff8 <tcp_recv_null+0x68>)
 8018fae:	f008 fab9 	bl	8021524 <iprintf>
 8018fb2:	f06f 030f 	mvn.w	r3, #15
 8018fb6:	e016      	b.n	8018fe6 <tcp_recv_null+0x56>

  if (p != NULL) {
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	2b00      	cmp	r3, #0
 8018fbc:	d009      	beq.n	8018fd2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	891b      	ldrh	r3, [r3, #8]
 8018fc2:	4619      	mov	r1, r3
 8018fc4:	68b8      	ldr	r0, [r7, #8]
 8018fc6:	f7ff fab5 	bl	8018534 <tcp_recved>
    pbuf_free(p);
 8018fca:	6878      	ldr	r0, [r7, #4]
 8018fcc:	f7fe fb44 	bl	8017658 <pbuf_free>
 8018fd0:	e008      	b.n	8018fe4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8018fd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018fd6:	2b00      	cmp	r3, #0
 8018fd8:	d104      	bne.n	8018fe4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8018fda:	68b8      	ldr	r0, [r7, #8]
 8018fdc:	f7fe ffe6 	bl	8017fac <tcp_close>
 8018fe0:	4603      	mov	r3, r0
 8018fe2:	e000      	b.n	8018fe6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8018fe4:	2300      	movs	r3, #0
}
 8018fe6:	4618      	mov	r0, r3
 8018fe8:	3710      	adds	r7, #16
 8018fea:	46bd      	mov	sp, r7
 8018fec:	bd80      	pop	{r7, pc}
 8018fee:	bf00      	nop
 8018ff0:	0802510c 	.word	0x0802510c
 8018ff4:	0802567c 	.word	0x0802567c
 8018ff8:	08025150 	.word	0x08025150

08018ffc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8018ffc:	b580      	push	{r7, lr}
 8018ffe:	b086      	sub	sp, #24
 8019000:	af00      	add	r7, sp, #0
 8019002:	4603      	mov	r3, r0
 8019004:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8019006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801900a:	2b00      	cmp	r3, #0
 801900c:	db01      	blt.n	8019012 <tcp_kill_prio+0x16>
 801900e:	79fb      	ldrb	r3, [r7, #7]
 8019010:	e000      	b.n	8019014 <tcp_kill_prio+0x18>
 8019012:	237f      	movs	r3, #127	; 0x7f
 8019014:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8019016:	7afb      	ldrb	r3, [r7, #11]
 8019018:	2b00      	cmp	r3, #0
 801901a:	d034      	beq.n	8019086 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801901c:	7afb      	ldrb	r3, [r7, #11]
 801901e:	3b01      	subs	r3, #1
 8019020:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8019022:	2300      	movs	r3, #0
 8019024:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8019026:	2300      	movs	r3, #0
 8019028:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801902a:	4b19      	ldr	r3, [pc, #100]	; (8019090 <tcp_kill_prio+0x94>)
 801902c:	681b      	ldr	r3, [r3, #0]
 801902e:	617b      	str	r3, [r7, #20]
 8019030:	e01f      	b.n	8019072 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8019032:	697b      	ldr	r3, [r7, #20]
 8019034:	7d5b      	ldrb	r3, [r3, #21]
 8019036:	7afa      	ldrb	r2, [r7, #11]
 8019038:	429a      	cmp	r2, r3
 801903a:	d80c      	bhi.n	8019056 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801903c:	697b      	ldr	r3, [r7, #20]
 801903e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8019040:	7afa      	ldrb	r2, [r7, #11]
 8019042:	429a      	cmp	r2, r3
 8019044:	d112      	bne.n	801906c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8019046:	4b13      	ldr	r3, [pc, #76]	; (8019094 <tcp_kill_prio+0x98>)
 8019048:	681a      	ldr	r2, [r3, #0]
 801904a:	697b      	ldr	r3, [r7, #20]
 801904c:	6a1b      	ldr	r3, [r3, #32]
 801904e:	1ad3      	subs	r3, r2, r3
 8019050:	68fa      	ldr	r2, [r7, #12]
 8019052:	429a      	cmp	r2, r3
 8019054:	d80a      	bhi.n	801906c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8019056:	4b0f      	ldr	r3, [pc, #60]	; (8019094 <tcp_kill_prio+0x98>)
 8019058:	681a      	ldr	r2, [r3, #0]
 801905a:	697b      	ldr	r3, [r7, #20]
 801905c:	6a1b      	ldr	r3, [r3, #32]
 801905e:	1ad3      	subs	r3, r2, r3
 8019060:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8019062:	697b      	ldr	r3, [r7, #20]
 8019064:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8019066:	697b      	ldr	r3, [r7, #20]
 8019068:	7d5b      	ldrb	r3, [r3, #21]
 801906a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801906c:	697b      	ldr	r3, [r7, #20]
 801906e:	68db      	ldr	r3, [r3, #12]
 8019070:	617b      	str	r3, [r7, #20]
 8019072:	697b      	ldr	r3, [r7, #20]
 8019074:	2b00      	cmp	r3, #0
 8019076:	d1dc      	bne.n	8019032 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8019078:	693b      	ldr	r3, [r7, #16]
 801907a:	2b00      	cmp	r3, #0
 801907c:	d004      	beq.n	8019088 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801907e:	6938      	ldr	r0, [r7, #16]
 8019080:	f7ff f87e 	bl	8018180 <tcp_abort>
 8019084:	e000      	b.n	8019088 <tcp_kill_prio+0x8c>
    return;
 8019086:	bf00      	nop
  }
}
 8019088:	3718      	adds	r7, #24
 801908a:	46bd      	mov	sp, r7
 801908c:	bd80      	pop	{r7, pc}
 801908e:	bf00      	nop
 8019090:	2001b990 	.word	0x2001b990
 8019094:	2001b994 	.word	0x2001b994

08019098 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8019098:	b580      	push	{r7, lr}
 801909a:	b086      	sub	sp, #24
 801909c:	af00      	add	r7, sp, #0
 801909e:	4603      	mov	r3, r0
 80190a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80190a2:	79fb      	ldrb	r3, [r7, #7]
 80190a4:	2b08      	cmp	r3, #8
 80190a6:	d009      	beq.n	80190bc <tcp_kill_state+0x24>
 80190a8:	79fb      	ldrb	r3, [r7, #7]
 80190aa:	2b09      	cmp	r3, #9
 80190ac:	d006      	beq.n	80190bc <tcp_kill_state+0x24>
 80190ae:	4b1a      	ldr	r3, [pc, #104]	; (8019118 <tcp_kill_state+0x80>)
 80190b0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80190b4:	4919      	ldr	r1, [pc, #100]	; (801911c <tcp_kill_state+0x84>)
 80190b6:	481a      	ldr	r0, [pc, #104]	; (8019120 <tcp_kill_state+0x88>)
 80190b8:	f008 fa34 	bl	8021524 <iprintf>

  inactivity = 0;
 80190bc:	2300      	movs	r3, #0
 80190be:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80190c0:	2300      	movs	r3, #0
 80190c2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80190c4:	4b17      	ldr	r3, [pc, #92]	; (8019124 <tcp_kill_state+0x8c>)
 80190c6:	681b      	ldr	r3, [r3, #0]
 80190c8:	617b      	str	r3, [r7, #20]
 80190ca:	e017      	b.n	80190fc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80190cc:	697b      	ldr	r3, [r7, #20]
 80190ce:	7d1b      	ldrb	r3, [r3, #20]
 80190d0:	79fa      	ldrb	r2, [r7, #7]
 80190d2:	429a      	cmp	r2, r3
 80190d4:	d10f      	bne.n	80190f6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80190d6:	4b14      	ldr	r3, [pc, #80]	; (8019128 <tcp_kill_state+0x90>)
 80190d8:	681a      	ldr	r2, [r3, #0]
 80190da:	697b      	ldr	r3, [r7, #20]
 80190dc:	6a1b      	ldr	r3, [r3, #32]
 80190de:	1ad3      	subs	r3, r2, r3
 80190e0:	68fa      	ldr	r2, [r7, #12]
 80190e2:	429a      	cmp	r2, r3
 80190e4:	d807      	bhi.n	80190f6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80190e6:	4b10      	ldr	r3, [pc, #64]	; (8019128 <tcp_kill_state+0x90>)
 80190e8:	681a      	ldr	r2, [r3, #0]
 80190ea:	697b      	ldr	r3, [r7, #20]
 80190ec:	6a1b      	ldr	r3, [r3, #32]
 80190ee:	1ad3      	subs	r3, r2, r3
 80190f0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80190f2:	697b      	ldr	r3, [r7, #20]
 80190f4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80190f6:	697b      	ldr	r3, [r7, #20]
 80190f8:	68db      	ldr	r3, [r3, #12]
 80190fa:	617b      	str	r3, [r7, #20]
 80190fc:	697b      	ldr	r3, [r7, #20]
 80190fe:	2b00      	cmp	r3, #0
 8019100:	d1e4      	bne.n	80190cc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8019102:	693b      	ldr	r3, [r7, #16]
 8019104:	2b00      	cmp	r3, #0
 8019106:	d003      	beq.n	8019110 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8019108:	2100      	movs	r1, #0
 801910a:	6938      	ldr	r0, [r7, #16]
 801910c:	f7fe ff7a 	bl	8018004 <tcp_abandon>
  }
}
 8019110:	bf00      	nop
 8019112:	3718      	adds	r7, #24
 8019114:	46bd      	mov	sp, r7
 8019116:	bd80      	pop	{r7, pc}
 8019118:	0802510c 	.word	0x0802510c
 801911c:	08025698 	.word	0x08025698
 8019120:	08025150 	.word	0x08025150
 8019124:	2001b990 	.word	0x2001b990
 8019128:	2001b994 	.word	0x2001b994

0801912c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801912c:	b580      	push	{r7, lr}
 801912e:	b084      	sub	sp, #16
 8019130:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8019132:	2300      	movs	r3, #0
 8019134:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8019136:	2300      	movs	r3, #0
 8019138:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801913a:	4b12      	ldr	r3, [pc, #72]	; (8019184 <tcp_kill_timewait+0x58>)
 801913c:	681b      	ldr	r3, [r3, #0]
 801913e:	60fb      	str	r3, [r7, #12]
 8019140:	e012      	b.n	8019168 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8019142:	4b11      	ldr	r3, [pc, #68]	; (8019188 <tcp_kill_timewait+0x5c>)
 8019144:	681a      	ldr	r2, [r3, #0]
 8019146:	68fb      	ldr	r3, [r7, #12]
 8019148:	6a1b      	ldr	r3, [r3, #32]
 801914a:	1ad3      	subs	r3, r2, r3
 801914c:	687a      	ldr	r2, [r7, #4]
 801914e:	429a      	cmp	r2, r3
 8019150:	d807      	bhi.n	8019162 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8019152:	4b0d      	ldr	r3, [pc, #52]	; (8019188 <tcp_kill_timewait+0x5c>)
 8019154:	681a      	ldr	r2, [r3, #0]
 8019156:	68fb      	ldr	r3, [r7, #12]
 8019158:	6a1b      	ldr	r3, [r3, #32]
 801915a:	1ad3      	subs	r3, r2, r3
 801915c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801915e:	68fb      	ldr	r3, [r7, #12]
 8019160:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8019162:	68fb      	ldr	r3, [r7, #12]
 8019164:	68db      	ldr	r3, [r3, #12]
 8019166:	60fb      	str	r3, [r7, #12]
 8019168:	68fb      	ldr	r3, [r7, #12]
 801916a:	2b00      	cmp	r3, #0
 801916c:	d1e9      	bne.n	8019142 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801916e:	68bb      	ldr	r3, [r7, #8]
 8019170:	2b00      	cmp	r3, #0
 8019172:	d002      	beq.n	801917a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8019174:	68b8      	ldr	r0, [r7, #8]
 8019176:	f7ff f803 	bl	8018180 <tcp_abort>
  }
}
 801917a:	bf00      	nop
 801917c:	3710      	adds	r7, #16
 801917e:	46bd      	mov	sp, r7
 8019180:	bd80      	pop	{r7, pc}
 8019182:	bf00      	nop
 8019184:	2001b9a0 	.word	0x2001b9a0
 8019188:	2001b994 	.word	0x2001b994

0801918c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801918c:	b580      	push	{r7, lr}
 801918e:	b082      	sub	sp, #8
 8019190:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8019192:	4b10      	ldr	r3, [pc, #64]	; (80191d4 <tcp_handle_closepend+0x48>)
 8019194:	681b      	ldr	r3, [r3, #0]
 8019196:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8019198:	e014      	b.n	80191c4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	68db      	ldr	r3, [r3, #12]
 801919e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	8b5b      	ldrh	r3, [r3, #26]
 80191a4:	f003 0308 	and.w	r3, r3, #8
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	d009      	beq.n	80191c0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	8b5b      	ldrh	r3, [r3, #26]
 80191b0:	f023 0308 	bic.w	r3, r3, #8
 80191b4:	b29a      	uxth	r2, r3
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80191ba:	6878      	ldr	r0, [r7, #4]
 80191bc:	f7fe fe8c 	bl	8017ed8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80191c0:	683b      	ldr	r3, [r7, #0]
 80191c2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	d1e7      	bne.n	801919a <tcp_handle_closepend+0xe>
  }
}
 80191ca:	bf00      	nop
 80191cc:	bf00      	nop
 80191ce:	3708      	adds	r7, #8
 80191d0:	46bd      	mov	sp, r7
 80191d2:	bd80      	pop	{r7, pc}
 80191d4:	2001b990 	.word	0x2001b990

080191d8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80191d8:	b580      	push	{r7, lr}
 80191da:	b084      	sub	sp, #16
 80191dc:	af00      	add	r7, sp, #0
 80191de:	4603      	mov	r3, r0
 80191e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80191e2:	2001      	movs	r0, #1
 80191e4:	f7fd fb42 	bl	801686c <memp_malloc>
 80191e8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80191ea:	68fb      	ldr	r3, [r7, #12]
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	d126      	bne.n	801923e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80191f0:	f7ff ffcc 	bl	801918c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80191f4:	f7ff ff9a 	bl	801912c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80191f8:	2001      	movs	r0, #1
 80191fa:	f7fd fb37 	bl	801686c <memp_malloc>
 80191fe:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8019200:	68fb      	ldr	r3, [r7, #12]
 8019202:	2b00      	cmp	r3, #0
 8019204:	d11b      	bne.n	801923e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8019206:	2009      	movs	r0, #9
 8019208:	f7ff ff46 	bl	8019098 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801920c:	2001      	movs	r0, #1
 801920e:	f7fd fb2d 	bl	801686c <memp_malloc>
 8019212:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8019214:	68fb      	ldr	r3, [r7, #12]
 8019216:	2b00      	cmp	r3, #0
 8019218:	d111      	bne.n	801923e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801921a:	2008      	movs	r0, #8
 801921c:	f7ff ff3c 	bl	8019098 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019220:	2001      	movs	r0, #1
 8019222:	f7fd fb23 	bl	801686c <memp_malloc>
 8019226:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8019228:	68fb      	ldr	r3, [r7, #12]
 801922a:	2b00      	cmp	r3, #0
 801922c:	d107      	bne.n	801923e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801922e:	79fb      	ldrb	r3, [r7, #7]
 8019230:	4618      	mov	r0, r3
 8019232:	f7ff fee3 	bl	8018ffc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8019236:	2001      	movs	r0, #1
 8019238:	f7fd fb18 	bl	801686c <memp_malloc>
 801923c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801923e:	68fb      	ldr	r3, [r7, #12]
 8019240:	2b00      	cmp	r3, #0
 8019242:	d03f      	beq.n	80192c4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8019244:	229c      	movs	r2, #156	; 0x9c
 8019246:	2100      	movs	r1, #0
 8019248:	68f8      	ldr	r0, [r7, #12]
 801924a:	f008 f8b9 	bl	80213c0 <memset>
    pcb->prio = prio;
 801924e:	68fb      	ldr	r3, [r7, #12]
 8019250:	79fa      	ldrb	r2, [r7, #7]
 8019252:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8019254:	68fb      	ldr	r3, [r7, #12]
 8019256:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801925a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801925e:	68fb      	ldr	r3, [r7, #12]
 8019260:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8019264:	855a      	strh	r2, [r3, #42]	; 0x2a
 8019266:	68fb      	ldr	r3, [r7, #12]
 8019268:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801926a:	68fb      	ldr	r3, [r7, #12]
 801926c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801926e:	68fb      	ldr	r3, [r7, #12]
 8019270:	22ff      	movs	r2, #255	; 0xff
 8019272:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8019274:	68fb      	ldr	r3, [r7, #12]
 8019276:	f44f 7206 	mov.w	r2, #536	; 0x218
 801927a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801927c:	68fb      	ldr	r3, [r7, #12]
 801927e:	2206      	movs	r2, #6
 8019280:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8019284:	68fb      	ldr	r3, [r7, #12]
 8019286:	2206      	movs	r2, #6
 8019288:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801928a:	68fb      	ldr	r3, [r7, #12]
 801928c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019290:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8019292:	68fb      	ldr	r3, [r7, #12]
 8019294:	2201      	movs	r2, #1
 8019296:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801929a:	4b0d      	ldr	r3, [pc, #52]	; (80192d0 <tcp_alloc+0xf8>)
 801929c:	681a      	ldr	r2, [r3, #0]
 801929e:	68fb      	ldr	r3, [r7, #12]
 80192a0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80192a2:	4b0c      	ldr	r3, [pc, #48]	; (80192d4 <tcp_alloc+0xfc>)
 80192a4:	781a      	ldrb	r2, [r3, #0]
 80192a6:	68fb      	ldr	r3, [r7, #12]
 80192a8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80192aa:	68fb      	ldr	r3, [r7, #12]
 80192ac:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80192b0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80192b4:	68fb      	ldr	r3, [r7, #12]
 80192b6:	4a08      	ldr	r2, [pc, #32]	; (80192d8 <tcp_alloc+0x100>)
 80192b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80192bc:	68fb      	ldr	r3, [r7, #12]
 80192be:	4a07      	ldr	r2, [pc, #28]	; (80192dc <tcp_alloc+0x104>)
 80192c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80192c4:	68fb      	ldr	r3, [r7, #12]
}
 80192c6:	4618      	mov	r0, r3
 80192c8:	3710      	adds	r7, #16
 80192ca:	46bd      	mov	sp, r7
 80192cc:	bd80      	pop	{r7, pc}
 80192ce:	bf00      	nop
 80192d0:	2001b994 	.word	0x2001b994
 80192d4:	200052de 	.word	0x200052de
 80192d8:	08018f91 	.word	0x08018f91
 80192dc:	006ddd00 	.word	0x006ddd00

080192e0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80192e0:	b580      	push	{r7, lr}
 80192e2:	b084      	sub	sp, #16
 80192e4:	af00      	add	r7, sp, #0
 80192e6:	4603      	mov	r3, r0
 80192e8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80192ea:	2040      	movs	r0, #64	; 0x40
 80192ec:	f7ff ff74 	bl	80191d8 <tcp_alloc>
 80192f0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80192f2:	68fb      	ldr	r3, [r7, #12]
}
 80192f4:	4618      	mov	r0, r3
 80192f6:	3710      	adds	r7, #16
 80192f8:	46bd      	mov	sp, r7
 80192fa:	bd80      	pop	{r7, pc}

080192fc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80192fc:	b480      	push	{r7}
 80192fe:	b083      	sub	sp, #12
 8019300:	af00      	add	r7, sp, #0
 8019302:	6078      	str	r0, [r7, #4]
 8019304:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	2b00      	cmp	r3, #0
 801930a:	d002      	beq.n	8019312 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	683a      	ldr	r2, [r7, #0]
 8019310:	611a      	str	r2, [r3, #16]
  }
}
 8019312:	bf00      	nop
 8019314:	370c      	adds	r7, #12
 8019316:	46bd      	mov	sp, r7
 8019318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801931c:	4770      	bx	lr
	...

08019320 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8019320:	b580      	push	{r7, lr}
 8019322:	b082      	sub	sp, #8
 8019324:	af00      	add	r7, sp, #0
 8019326:	6078      	str	r0, [r7, #4]
 8019328:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	2b00      	cmp	r3, #0
 801932e:	d00e      	beq.n	801934e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	7d1b      	ldrb	r3, [r3, #20]
 8019334:	2b01      	cmp	r3, #1
 8019336:	d106      	bne.n	8019346 <tcp_recv+0x26>
 8019338:	4b07      	ldr	r3, [pc, #28]	; (8019358 <tcp_recv+0x38>)
 801933a:	f240 72df 	movw	r2, #2015	; 0x7df
 801933e:	4907      	ldr	r1, [pc, #28]	; (801935c <tcp_recv+0x3c>)
 8019340:	4807      	ldr	r0, [pc, #28]	; (8019360 <tcp_recv+0x40>)
 8019342:	f008 f8ef 	bl	8021524 <iprintf>
    pcb->recv = recv;
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	683a      	ldr	r2, [r7, #0]
 801934a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801934e:	bf00      	nop
 8019350:	3708      	adds	r7, #8
 8019352:	46bd      	mov	sp, r7
 8019354:	bd80      	pop	{r7, pc}
 8019356:	bf00      	nop
 8019358:	0802510c 	.word	0x0802510c
 801935c:	080256a8 	.word	0x080256a8
 8019360:	08025150 	.word	0x08025150

08019364 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8019364:	b580      	push	{r7, lr}
 8019366:	b082      	sub	sp, #8
 8019368:	af00      	add	r7, sp, #0
 801936a:	6078      	str	r0, [r7, #4]
 801936c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801936e:	687b      	ldr	r3, [r7, #4]
 8019370:	2b00      	cmp	r3, #0
 8019372:	d00e      	beq.n	8019392 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	7d1b      	ldrb	r3, [r3, #20]
 8019378:	2b01      	cmp	r3, #1
 801937a:	d106      	bne.n	801938a <tcp_sent+0x26>
 801937c:	4b07      	ldr	r3, [pc, #28]	; (801939c <tcp_sent+0x38>)
 801937e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8019382:	4907      	ldr	r1, [pc, #28]	; (80193a0 <tcp_sent+0x3c>)
 8019384:	4807      	ldr	r0, [pc, #28]	; (80193a4 <tcp_sent+0x40>)
 8019386:	f008 f8cd 	bl	8021524 <iprintf>
    pcb->sent = sent;
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	683a      	ldr	r2, [r7, #0]
 801938e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8019392:	bf00      	nop
 8019394:	3708      	adds	r7, #8
 8019396:	46bd      	mov	sp, r7
 8019398:	bd80      	pop	{r7, pc}
 801939a:	bf00      	nop
 801939c:	0802510c 	.word	0x0802510c
 80193a0:	080256d0 	.word	0x080256d0
 80193a4:	08025150 	.word	0x08025150

080193a8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80193a8:	b580      	push	{r7, lr}
 80193aa:	b082      	sub	sp, #8
 80193ac:	af00      	add	r7, sp, #0
 80193ae:	6078      	str	r0, [r7, #4]
 80193b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	2b00      	cmp	r3, #0
 80193b6:	d00e      	beq.n	80193d6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80193b8:	687b      	ldr	r3, [r7, #4]
 80193ba:	7d1b      	ldrb	r3, [r3, #20]
 80193bc:	2b01      	cmp	r3, #1
 80193be:	d106      	bne.n	80193ce <tcp_err+0x26>
 80193c0:	4b07      	ldr	r3, [pc, #28]	; (80193e0 <tcp_err+0x38>)
 80193c2:	f640 020d 	movw	r2, #2061	; 0x80d
 80193c6:	4907      	ldr	r1, [pc, #28]	; (80193e4 <tcp_err+0x3c>)
 80193c8:	4807      	ldr	r0, [pc, #28]	; (80193e8 <tcp_err+0x40>)
 80193ca:	f008 f8ab 	bl	8021524 <iprintf>
    pcb->errf = err;
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	683a      	ldr	r2, [r7, #0]
 80193d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80193d6:	bf00      	nop
 80193d8:	3708      	adds	r7, #8
 80193da:	46bd      	mov	sp, r7
 80193dc:	bd80      	pop	{r7, pc}
 80193de:	bf00      	nop
 80193e0:	0802510c 	.word	0x0802510c
 80193e4:	080256f8 	.word	0x080256f8
 80193e8:	08025150 	.word	0x08025150

080193ec <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80193ec:	b480      	push	{r7}
 80193ee:	b085      	sub	sp, #20
 80193f0:	af00      	add	r7, sp, #0
 80193f2:	6078      	str	r0, [r7, #4]
 80193f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	2b00      	cmp	r3, #0
 80193fa:	d008      	beq.n	801940e <tcp_accept+0x22>
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	7d1b      	ldrb	r3, [r3, #20]
 8019400:	2b01      	cmp	r3, #1
 8019402:	d104      	bne.n	801940e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8019408:	68fb      	ldr	r3, [r7, #12]
 801940a:	683a      	ldr	r2, [r7, #0]
 801940c:	619a      	str	r2, [r3, #24]
  }
}
 801940e:	bf00      	nop
 8019410:	3714      	adds	r7, #20
 8019412:	46bd      	mov	sp, r7
 8019414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019418:	4770      	bx	lr
	...

0801941c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801941c:	b580      	push	{r7, lr}
 801941e:	b084      	sub	sp, #16
 8019420:	af00      	add	r7, sp, #0
 8019422:	60f8      	str	r0, [r7, #12]
 8019424:	60b9      	str	r1, [r7, #8]
 8019426:	4613      	mov	r3, r2
 8019428:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801942a:	68fb      	ldr	r3, [r7, #12]
 801942c:	2b00      	cmp	r3, #0
 801942e:	d107      	bne.n	8019440 <tcp_poll+0x24>
 8019430:	4b0e      	ldr	r3, [pc, #56]	; (801946c <tcp_poll+0x50>)
 8019432:	f640 023d 	movw	r2, #2109	; 0x83d
 8019436:	490e      	ldr	r1, [pc, #56]	; (8019470 <tcp_poll+0x54>)
 8019438:	480e      	ldr	r0, [pc, #56]	; (8019474 <tcp_poll+0x58>)
 801943a:	f008 f873 	bl	8021524 <iprintf>
 801943e:	e011      	b.n	8019464 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8019440:	68fb      	ldr	r3, [r7, #12]
 8019442:	7d1b      	ldrb	r3, [r3, #20]
 8019444:	2b01      	cmp	r3, #1
 8019446:	d106      	bne.n	8019456 <tcp_poll+0x3a>
 8019448:	4b08      	ldr	r3, [pc, #32]	; (801946c <tcp_poll+0x50>)
 801944a:	f640 023e 	movw	r2, #2110	; 0x83e
 801944e:	490a      	ldr	r1, [pc, #40]	; (8019478 <tcp_poll+0x5c>)
 8019450:	4808      	ldr	r0, [pc, #32]	; (8019474 <tcp_poll+0x58>)
 8019452:	f008 f867 	bl	8021524 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8019456:	68fb      	ldr	r3, [r7, #12]
 8019458:	68ba      	ldr	r2, [r7, #8]
 801945a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801945e:	68fb      	ldr	r3, [r7, #12]
 8019460:	79fa      	ldrb	r2, [r7, #7]
 8019462:	775a      	strb	r2, [r3, #29]
}
 8019464:	3710      	adds	r7, #16
 8019466:	46bd      	mov	sp, r7
 8019468:	bd80      	pop	{r7, pc}
 801946a:	bf00      	nop
 801946c:	0802510c 	.word	0x0802510c
 8019470:	08025720 	.word	0x08025720
 8019474:	08025150 	.word	0x08025150
 8019478:	08025738 	.word	0x08025738

0801947c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801947c:	b580      	push	{r7, lr}
 801947e:	b082      	sub	sp, #8
 8019480:	af00      	add	r7, sp, #0
 8019482:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	2b00      	cmp	r3, #0
 8019488:	d107      	bne.n	801949a <tcp_pcb_purge+0x1e>
 801948a:	4b21      	ldr	r3, [pc, #132]	; (8019510 <tcp_pcb_purge+0x94>)
 801948c:	f640 0251 	movw	r2, #2129	; 0x851
 8019490:	4920      	ldr	r1, [pc, #128]	; (8019514 <tcp_pcb_purge+0x98>)
 8019492:	4821      	ldr	r0, [pc, #132]	; (8019518 <tcp_pcb_purge+0x9c>)
 8019494:	f008 f846 	bl	8021524 <iprintf>
 8019498:	e037      	b.n	801950a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	7d1b      	ldrb	r3, [r3, #20]
 801949e:	2b00      	cmp	r3, #0
 80194a0:	d033      	beq.n	801950a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80194a6:	2b0a      	cmp	r3, #10
 80194a8:	d02f      	beq.n	801950a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80194aa:	687b      	ldr	r3, [r7, #4]
 80194ac:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80194ae:	2b01      	cmp	r3, #1
 80194b0:	d02b      	beq.n	801950a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	d007      	beq.n	80194ca <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80194be:	4618      	mov	r0, r3
 80194c0:	f7fe f8ca 	bl	8017658 <pbuf_free>
      pcb->refused_data = NULL;
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	2200      	movs	r2, #0
 80194c8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	d002      	beq.n	80194d8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80194d2:	6878      	ldr	r0, [r7, #4]
 80194d4:	f000 f986 	bl	80197e4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80194de:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80194e4:	4618      	mov	r0, r3
 80194e6:	f7ff fcdb 	bl	8018ea0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80194ee:	4618      	mov	r0, r3
 80194f0:	f7ff fcd6 	bl	8018ea0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	2200      	movs	r2, #0
 80194f8:	66da      	str	r2, [r3, #108]	; 0x6c
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	2200      	movs	r2, #0
 8019506:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801950a:	3708      	adds	r7, #8
 801950c:	46bd      	mov	sp, r7
 801950e:	bd80      	pop	{r7, pc}
 8019510:	0802510c 	.word	0x0802510c
 8019514:	08025758 	.word	0x08025758
 8019518:	08025150 	.word	0x08025150

0801951c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801951c:	b580      	push	{r7, lr}
 801951e:	b084      	sub	sp, #16
 8019520:	af00      	add	r7, sp, #0
 8019522:	6078      	str	r0, [r7, #4]
 8019524:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8019526:	683b      	ldr	r3, [r7, #0]
 8019528:	2b00      	cmp	r3, #0
 801952a:	d106      	bne.n	801953a <tcp_pcb_remove+0x1e>
 801952c:	4b3e      	ldr	r3, [pc, #248]	; (8019628 <tcp_pcb_remove+0x10c>)
 801952e:	f640 0283 	movw	r2, #2179	; 0x883
 8019532:	493e      	ldr	r1, [pc, #248]	; (801962c <tcp_pcb_remove+0x110>)
 8019534:	483e      	ldr	r0, [pc, #248]	; (8019630 <tcp_pcb_remove+0x114>)
 8019536:	f007 fff5 	bl	8021524 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	2b00      	cmp	r3, #0
 801953e:	d106      	bne.n	801954e <tcp_pcb_remove+0x32>
 8019540:	4b39      	ldr	r3, [pc, #228]	; (8019628 <tcp_pcb_remove+0x10c>)
 8019542:	f640 0284 	movw	r2, #2180	; 0x884
 8019546:	493b      	ldr	r1, [pc, #236]	; (8019634 <tcp_pcb_remove+0x118>)
 8019548:	4839      	ldr	r0, [pc, #228]	; (8019630 <tcp_pcb_remove+0x114>)
 801954a:	f007 ffeb 	bl	8021524 <iprintf>

  TCP_RMV(pcblist, pcb);
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	683a      	ldr	r2, [r7, #0]
 8019554:	429a      	cmp	r2, r3
 8019556:	d105      	bne.n	8019564 <tcp_pcb_remove+0x48>
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	681b      	ldr	r3, [r3, #0]
 801955c:	68da      	ldr	r2, [r3, #12]
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	601a      	str	r2, [r3, #0]
 8019562:	e013      	b.n	801958c <tcp_pcb_remove+0x70>
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	681b      	ldr	r3, [r3, #0]
 8019568:	60fb      	str	r3, [r7, #12]
 801956a:	e00c      	b.n	8019586 <tcp_pcb_remove+0x6a>
 801956c:	68fb      	ldr	r3, [r7, #12]
 801956e:	68db      	ldr	r3, [r3, #12]
 8019570:	683a      	ldr	r2, [r7, #0]
 8019572:	429a      	cmp	r2, r3
 8019574:	d104      	bne.n	8019580 <tcp_pcb_remove+0x64>
 8019576:	683b      	ldr	r3, [r7, #0]
 8019578:	68da      	ldr	r2, [r3, #12]
 801957a:	68fb      	ldr	r3, [r7, #12]
 801957c:	60da      	str	r2, [r3, #12]
 801957e:	e005      	b.n	801958c <tcp_pcb_remove+0x70>
 8019580:	68fb      	ldr	r3, [r7, #12]
 8019582:	68db      	ldr	r3, [r3, #12]
 8019584:	60fb      	str	r3, [r7, #12]
 8019586:	68fb      	ldr	r3, [r7, #12]
 8019588:	2b00      	cmp	r3, #0
 801958a:	d1ef      	bne.n	801956c <tcp_pcb_remove+0x50>
 801958c:	683b      	ldr	r3, [r7, #0]
 801958e:	2200      	movs	r2, #0
 8019590:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8019592:	6838      	ldr	r0, [r7, #0]
 8019594:	f7ff ff72 	bl	801947c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8019598:	683b      	ldr	r3, [r7, #0]
 801959a:	7d1b      	ldrb	r3, [r3, #20]
 801959c:	2b0a      	cmp	r3, #10
 801959e:	d013      	beq.n	80195c8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80195a0:	683b      	ldr	r3, [r7, #0]
 80195a2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80195a4:	2b01      	cmp	r3, #1
 80195a6:	d00f      	beq.n	80195c8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80195a8:	683b      	ldr	r3, [r7, #0]
 80195aa:	8b5b      	ldrh	r3, [r3, #26]
 80195ac:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	d009      	beq.n	80195c8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80195b4:	683b      	ldr	r3, [r7, #0]
 80195b6:	8b5b      	ldrh	r3, [r3, #26]
 80195b8:	f043 0302 	orr.w	r3, r3, #2
 80195bc:	b29a      	uxth	r2, r3
 80195be:	683b      	ldr	r3, [r7, #0]
 80195c0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80195c2:	6838      	ldr	r0, [r7, #0]
 80195c4:	f003 fbc2 	bl	801cd4c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80195c8:	683b      	ldr	r3, [r7, #0]
 80195ca:	7d1b      	ldrb	r3, [r3, #20]
 80195cc:	2b01      	cmp	r3, #1
 80195ce:	d020      	beq.n	8019612 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80195d0:	683b      	ldr	r3, [r7, #0]
 80195d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80195d4:	2b00      	cmp	r3, #0
 80195d6:	d006      	beq.n	80195e6 <tcp_pcb_remove+0xca>
 80195d8:	4b13      	ldr	r3, [pc, #76]	; (8019628 <tcp_pcb_remove+0x10c>)
 80195da:	f640 0293 	movw	r2, #2195	; 0x893
 80195de:	4916      	ldr	r1, [pc, #88]	; (8019638 <tcp_pcb_remove+0x11c>)
 80195e0:	4813      	ldr	r0, [pc, #76]	; (8019630 <tcp_pcb_remove+0x114>)
 80195e2:	f007 ff9f 	bl	8021524 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80195e6:	683b      	ldr	r3, [r7, #0]
 80195e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80195ea:	2b00      	cmp	r3, #0
 80195ec:	d006      	beq.n	80195fc <tcp_pcb_remove+0xe0>
 80195ee:	4b0e      	ldr	r3, [pc, #56]	; (8019628 <tcp_pcb_remove+0x10c>)
 80195f0:	f640 0294 	movw	r2, #2196	; 0x894
 80195f4:	4911      	ldr	r1, [pc, #68]	; (801963c <tcp_pcb_remove+0x120>)
 80195f6:	480e      	ldr	r0, [pc, #56]	; (8019630 <tcp_pcb_remove+0x114>)
 80195f8:	f007 ff94 	bl	8021524 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80195fc:	683b      	ldr	r3, [r7, #0]
 80195fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019600:	2b00      	cmp	r3, #0
 8019602:	d006      	beq.n	8019612 <tcp_pcb_remove+0xf6>
 8019604:	4b08      	ldr	r3, [pc, #32]	; (8019628 <tcp_pcb_remove+0x10c>)
 8019606:	f640 0296 	movw	r2, #2198	; 0x896
 801960a:	490d      	ldr	r1, [pc, #52]	; (8019640 <tcp_pcb_remove+0x124>)
 801960c:	4808      	ldr	r0, [pc, #32]	; (8019630 <tcp_pcb_remove+0x114>)
 801960e:	f007 ff89 	bl	8021524 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8019612:	683b      	ldr	r3, [r7, #0]
 8019614:	2200      	movs	r2, #0
 8019616:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8019618:	683b      	ldr	r3, [r7, #0]
 801961a:	2200      	movs	r2, #0
 801961c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801961e:	bf00      	nop
 8019620:	3710      	adds	r7, #16
 8019622:	46bd      	mov	sp, r7
 8019624:	bd80      	pop	{r7, pc}
 8019626:	bf00      	nop
 8019628:	0802510c 	.word	0x0802510c
 801962c:	08025774 	.word	0x08025774
 8019630:	08025150 	.word	0x08025150
 8019634:	08025790 	.word	0x08025790
 8019638:	080257b0 	.word	0x080257b0
 801963c:	080257c8 	.word	0x080257c8
 8019640:	080257e4 	.word	0x080257e4

08019644 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8019644:	b580      	push	{r7, lr}
 8019646:	b082      	sub	sp, #8
 8019648:	af00      	add	r7, sp, #0
 801964a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801964c:	687b      	ldr	r3, [r7, #4]
 801964e:	2b00      	cmp	r3, #0
 8019650:	d106      	bne.n	8019660 <tcp_next_iss+0x1c>
 8019652:	4b0a      	ldr	r3, [pc, #40]	; (801967c <tcp_next_iss+0x38>)
 8019654:	f640 02af 	movw	r2, #2223	; 0x8af
 8019658:	4909      	ldr	r1, [pc, #36]	; (8019680 <tcp_next_iss+0x3c>)
 801965a:	480a      	ldr	r0, [pc, #40]	; (8019684 <tcp_next_iss+0x40>)
 801965c:	f007 ff62 	bl	8021524 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8019660:	4b09      	ldr	r3, [pc, #36]	; (8019688 <tcp_next_iss+0x44>)
 8019662:	681a      	ldr	r2, [r3, #0]
 8019664:	4b09      	ldr	r3, [pc, #36]	; (801968c <tcp_next_iss+0x48>)
 8019666:	681b      	ldr	r3, [r3, #0]
 8019668:	4413      	add	r3, r2
 801966a:	4a07      	ldr	r2, [pc, #28]	; (8019688 <tcp_next_iss+0x44>)
 801966c:	6013      	str	r3, [r2, #0]
  return iss;
 801966e:	4b06      	ldr	r3, [pc, #24]	; (8019688 <tcp_next_iss+0x44>)
 8019670:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8019672:	4618      	mov	r0, r3
 8019674:	3708      	adds	r7, #8
 8019676:	46bd      	mov	sp, r7
 8019678:	bd80      	pop	{r7, pc}
 801967a:	bf00      	nop
 801967c:	0802510c 	.word	0x0802510c
 8019680:	080257fc 	.word	0x080257fc
 8019684:	08025150 	.word	0x08025150
 8019688:	20000748 	.word	0x20000748
 801968c:	2001b994 	.word	0x2001b994

08019690 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8019690:	b580      	push	{r7, lr}
 8019692:	b086      	sub	sp, #24
 8019694:	af00      	add	r7, sp, #0
 8019696:	4603      	mov	r3, r0
 8019698:	60b9      	str	r1, [r7, #8]
 801969a:	607a      	str	r2, [r7, #4]
 801969c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	d106      	bne.n	80196b2 <tcp_eff_send_mss_netif+0x22>
 80196a4:	4b14      	ldr	r3, [pc, #80]	; (80196f8 <tcp_eff_send_mss_netif+0x68>)
 80196a6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80196aa:	4914      	ldr	r1, [pc, #80]	; (80196fc <tcp_eff_send_mss_netif+0x6c>)
 80196ac:	4814      	ldr	r0, [pc, #80]	; (8019700 <tcp_eff_send_mss_netif+0x70>)
 80196ae:	f007 ff39 	bl	8021524 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80196b2:	68bb      	ldr	r3, [r7, #8]
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	d101      	bne.n	80196bc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80196b8:	89fb      	ldrh	r3, [r7, #14]
 80196ba:	e019      	b.n	80196f0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80196bc:	68bb      	ldr	r3, [r7, #8]
 80196be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80196c0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80196c2:	8afb      	ldrh	r3, [r7, #22]
 80196c4:	2b00      	cmp	r3, #0
 80196c6:	d012      	beq.n	80196ee <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80196c8:	2328      	movs	r3, #40	; 0x28
 80196ca:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80196cc:	8afa      	ldrh	r2, [r7, #22]
 80196ce:	8abb      	ldrh	r3, [r7, #20]
 80196d0:	429a      	cmp	r2, r3
 80196d2:	d904      	bls.n	80196de <tcp_eff_send_mss_netif+0x4e>
 80196d4:	8afa      	ldrh	r2, [r7, #22]
 80196d6:	8abb      	ldrh	r3, [r7, #20]
 80196d8:	1ad3      	subs	r3, r2, r3
 80196da:	b29b      	uxth	r3, r3
 80196dc:	e000      	b.n	80196e0 <tcp_eff_send_mss_netif+0x50>
 80196de:	2300      	movs	r3, #0
 80196e0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80196e2:	8a7a      	ldrh	r2, [r7, #18]
 80196e4:	89fb      	ldrh	r3, [r7, #14]
 80196e6:	4293      	cmp	r3, r2
 80196e8:	bf28      	it	cs
 80196ea:	4613      	movcs	r3, r2
 80196ec:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80196ee:	89fb      	ldrh	r3, [r7, #14]
}
 80196f0:	4618      	mov	r0, r3
 80196f2:	3718      	adds	r7, #24
 80196f4:	46bd      	mov	sp, r7
 80196f6:	bd80      	pop	{r7, pc}
 80196f8:	0802510c 	.word	0x0802510c
 80196fc:	08025818 	.word	0x08025818
 8019700:	08025150 	.word	0x08025150

08019704 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8019704:	b580      	push	{r7, lr}
 8019706:	b084      	sub	sp, #16
 8019708:	af00      	add	r7, sp, #0
 801970a:	6078      	str	r0, [r7, #4]
 801970c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801970e:	683b      	ldr	r3, [r7, #0]
 8019710:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	2b00      	cmp	r3, #0
 8019716:	d119      	bne.n	801974c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8019718:	4b10      	ldr	r3, [pc, #64]	; (801975c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801971a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801971e:	4910      	ldr	r1, [pc, #64]	; (8019760 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8019720:	4810      	ldr	r0, [pc, #64]	; (8019764 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8019722:	f007 feff 	bl	8021524 <iprintf>

  while (pcb != NULL) {
 8019726:	e011      	b.n	801974c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8019728:	68fb      	ldr	r3, [r7, #12]
 801972a:	681a      	ldr	r2, [r3, #0]
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	681b      	ldr	r3, [r3, #0]
 8019730:	429a      	cmp	r2, r3
 8019732:	d108      	bne.n	8019746 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8019734:	68fb      	ldr	r3, [r7, #12]
 8019736:	68db      	ldr	r3, [r3, #12]
 8019738:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801973a:	68f8      	ldr	r0, [r7, #12]
 801973c:	f7fe fd20 	bl	8018180 <tcp_abort>
      pcb = next;
 8019740:	68bb      	ldr	r3, [r7, #8]
 8019742:	60fb      	str	r3, [r7, #12]
 8019744:	e002      	b.n	801974c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8019746:	68fb      	ldr	r3, [r7, #12]
 8019748:	68db      	ldr	r3, [r3, #12]
 801974a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801974c:	68fb      	ldr	r3, [r7, #12]
 801974e:	2b00      	cmp	r3, #0
 8019750:	d1ea      	bne.n	8019728 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8019752:	bf00      	nop
 8019754:	bf00      	nop
 8019756:	3710      	adds	r7, #16
 8019758:	46bd      	mov	sp, r7
 801975a:	bd80      	pop	{r7, pc}
 801975c:	0802510c 	.word	0x0802510c
 8019760:	08025840 	.word	0x08025840
 8019764:	08025150 	.word	0x08025150

08019768 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8019768:	b580      	push	{r7, lr}
 801976a:	b084      	sub	sp, #16
 801976c:	af00      	add	r7, sp, #0
 801976e:	6078      	str	r0, [r7, #4]
 8019770:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	2b00      	cmp	r3, #0
 8019776:	d02a      	beq.n	80197ce <tcp_netif_ip_addr_changed+0x66>
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	681b      	ldr	r3, [r3, #0]
 801977c:	2b00      	cmp	r3, #0
 801977e:	d026      	beq.n	80197ce <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8019780:	4b15      	ldr	r3, [pc, #84]	; (80197d8 <tcp_netif_ip_addr_changed+0x70>)
 8019782:	681b      	ldr	r3, [r3, #0]
 8019784:	4619      	mov	r1, r3
 8019786:	6878      	ldr	r0, [r7, #4]
 8019788:	f7ff ffbc 	bl	8019704 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801978c:	4b13      	ldr	r3, [pc, #76]	; (80197dc <tcp_netif_ip_addr_changed+0x74>)
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	4619      	mov	r1, r3
 8019792:	6878      	ldr	r0, [r7, #4]
 8019794:	f7ff ffb6 	bl	8019704 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8019798:	683b      	ldr	r3, [r7, #0]
 801979a:	2b00      	cmp	r3, #0
 801979c:	d017      	beq.n	80197ce <tcp_netif_ip_addr_changed+0x66>
 801979e:	683b      	ldr	r3, [r7, #0]
 80197a0:	681b      	ldr	r3, [r3, #0]
 80197a2:	2b00      	cmp	r3, #0
 80197a4:	d013      	beq.n	80197ce <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80197a6:	4b0e      	ldr	r3, [pc, #56]	; (80197e0 <tcp_netif_ip_addr_changed+0x78>)
 80197a8:	681b      	ldr	r3, [r3, #0]
 80197aa:	60fb      	str	r3, [r7, #12]
 80197ac:	e00c      	b.n	80197c8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80197ae:	68fb      	ldr	r3, [r7, #12]
 80197b0:	681a      	ldr	r2, [r3, #0]
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	681b      	ldr	r3, [r3, #0]
 80197b6:	429a      	cmp	r2, r3
 80197b8:	d103      	bne.n	80197c2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80197ba:	683b      	ldr	r3, [r7, #0]
 80197bc:	681a      	ldr	r2, [r3, #0]
 80197be:	68fb      	ldr	r3, [r7, #12]
 80197c0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80197c2:	68fb      	ldr	r3, [r7, #12]
 80197c4:	68db      	ldr	r3, [r3, #12]
 80197c6:	60fb      	str	r3, [r7, #12]
 80197c8:	68fb      	ldr	r3, [r7, #12]
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d1ef      	bne.n	80197ae <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80197ce:	bf00      	nop
 80197d0:	3710      	adds	r7, #16
 80197d2:	46bd      	mov	sp, r7
 80197d4:	bd80      	pop	{r7, pc}
 80197d6:	bf00      	nop
 80197d8:	2001b990 	.word	0x2001b990
 80197dc:	2001b99c 	.word	0x2001b99c
 80197e0:	2001b998 	.word	0x2001b998

080197e4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80197e4:	b580      	push	{r7, lr}
 80197e6:	b082      	sub	sp, #8
 80197e8:	af00      	add	r7, sp, #0
 80197ea:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	d007      	beq.n	8019804 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80197f8:	4618      	mov	r0, r3
 80197fa:	f7ff fb51 	bl	8018ea0 <tcp_segs_free>
    pcb->ooseq = NULL;
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	2200      	movs	r2, #0
 8019802:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8019804:	bf00      	nop
 8019806:	3708      	adds	r7, #8
 8019808:	46bd      	mov	sp, r7
 801980a:	bd80      	pop	{r7, pc}

0801980c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801980c:	b590      	push	{r4, r7, lr}
 801980e:	b08d      	sub	sp, #52	; 0x34
 8019810:	af04      	add	r7, sp, #16
 8019812:	6078      	str	r0, [r7, #4]
 8019814:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	2b00      	cmp	r3, #0
 801981a:	d105      	bne.n	8019828 <tcp_input+0x1c>
 801981c:	4b9b      	ldr	r3, [pc, #620]	; (8019a8c <tcp_input+0x280>)
 801981e:	2283      	movs	r2, #131	; 0x83
 8019820:	499b      	ldr	r1, [pc, #620]	; (8019a90 <tcp_input+0x284>)
 8019822:	489c      	ldr	r0, [pc, #624]	; (8019a94 <tcp_input+0x288>)
 8019824:	f007 fe7e 	bl	8021524 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	685b      	ldr	r3, [r3, #4]
 801982c:	4a9a      	ldr	r2, [pc, #616]	; (8019a98 <tcp_input+0x28c>)
 801982e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	895b      	ldrh	r3, [r3, #10]
 8019834:	2b13      	cmp	r3, #19
 8019836:	f240 83c4 	bls.w	8019fc2 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801983a:	4b98      	ldr	r3, [pc, #608]	; (8019a9c <tcp_input+0x290>)
 801983c:	695b      	ldr	r3, [r3, #20]
 801983e:	4a97      	ldr	r2, [pc, #604]	; (8019a9c <tcp_input+0x290>)
 8019840:	6812      	ldr	r2, [r2, #0]
 8019842:	4611      	mov	r1, r2
 8019844:	4618      	mov	r0, r3
 8019846:	f006 f89b 	bl	801f980 <ip4_addr_isbroadcast_u32>
 801984a:	4603      	mov	r3, r0
 801984c:	2b00      	cmp	r3, #0
 801984e:	f040 83ba 	bne.w	8019fc6 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8019852:	4b92      	ldr	r3, [pc, #584]	; (8019a9c <tcp_input+0x290>)
 8019854:	695b      	ldr	r3, [r3, #20]
 8019856:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801985a:	2be0      	cmp	r3, #224	; 0xe0
 801985c:	f000 83b3 	beq.w	8019fc6 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8019860:	4b8d      	ldr	r3, [pc, #564]	; (8019a98 <tcp_input+0x28c>)
 8019862:	681b      	ldr	r3, [r3, #0]
 8019864:	899b      	ldrh	r3, [r3, #12]
 8019866:	b29b      	uxth	r3, r3
 8019868:	4618      	mov	r0, r3
 801986a:	f7fc fa6b 	bl	8015d44 <lwip_htons>
 801986e:	4603      	mov	r3, r0
 8019870:	0b1b      	lsrs	r3, r3, #12
 8019872:	b29b      	uxth	r3, r3
 8019874:	b2db      	uxtb	r3, r3
 8019876:	009b      	lsls	r3, r3, #2
 8019878:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801987a:	7cbb      	ldrb	r3, [r7, #18]
 801987c:	2b13      	cmp	r3, #19
 801987e:	f240 83a4 	bls.w	8019fca <tcp_input+0x7be>
 8019882:	7cbb      	ldrb	r3, [r7, #18]
 8019884:	b29a      	uxth	r2, r3
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	891b      	ldrh	r3, [r3, #8]
 801988a:	429a      	cmp	r2, r3
 801988c:	f200 839d 	bhi.w	8019fca <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8019890:	7cbb      	ldrb	r3, [r7, #18]
 8019892:	b29b      	uxth	r3, r3
 8019894:	3b14      	subs	r3, #20
 8019896:	b29a      	uxth	r2, r3
 8019898:	4b81      	ldr	r3, [pc, #516]	; (8019aa0 <tcp_input+0x294>)
 801989a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801989c:	4b81      	ldr	r3, [pc, #516]	; (8019aa4 <tcp_input+0x298>)
 801989e:	2200      	movs	r2, #0
 80198a0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80198a2:	687b      	ldr	r3, [r7, #4]
 80198a4:	895a      	ldrh	r2, [r3, #10]
 80198a6:	7cbb      	ldrb	r3, [r7, #18]
 80198a8:	b29b      	uxth	r3, r3
 80198aa:	429a      	cmp	r2, r3
 80198ac:	d309      	bcc.n	80198c2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80198ae:	4b7c      	ldr	r3, [pc, #496]	; (8019aa0 <tcp_input+0x294>)
 80198b0:	881a      	ldrh	r2, [r3, #0]
 80198b2:	4b7d      	ldr	r3, [pc, #500]	; (8019aa8 <tcp_input+0x29c>)
 80198b4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80198b6:	7cbb      	ldrb	r3, [r7, #18]
 80198b8:	4619      	mov	r1, r3
 80198ba:	6878      	ldr	r0, [r7, #4]
 80198bc:	f7fd fe46 	bl	801754c <pbuf_remove_header>
 80198c0:	e04e      	b.n	8019960 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	681b      	ldr	r3, [r3, #0]
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d105      	bne.n	80198d6 <tcp_input+0xca>
 80198ca:	4b70      	ldr	r3, [pc, #448]	; (8019a8c <tcp_input+0x280>)
 80198cc:	22c2      	movs	r2, #194	; 0xc2
 80198ce:	4977      	ldr	r1, [pc, #476]	; (8019aac <tcp_input+0x2a0>)
 80198d0:	4870      	ldr	r0, [pc, #448]	; (8019a94 <tcp_input+0x288>)
 80198d2:	f007 fe27 	bl	8021524 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80198d6:	2114      	movs	r1, #20
 80198d8:	6878      	ldr	r0, [r7, #4]
 80198da:	f7fd fe37 	bl	801754c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	895a      	ldrh	r2, [r3, #10]
 80198e2:	4b71      	ldr	r3, [pc, #452]	; (8019aa8 <tcp_input+0x29c>)
 80198e4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80198e6:	4b6e      	ldr	r3, [pc, #440]	; (8019aa0 <tcp_input+0x294>)
 80198e8:	881a      	ldrh	r2, [r3, #0]
 80198ea:	4b6f      	ldr	r3, [pc, #444]	; (8019aa8 <tcp_input+0x29c>)
 80198ec:	881b      	ldrh	r3, [r3, #0]
 80198ee:	1ad3      	subs	r3, r2, r3
 80198f0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80198f2:	4b6d      	ldr	r3, [pc, #436]	; (8019aa8 <tcp_input+0x29c>)
 80198f4:	881b      	ldrh	r3, [r3, #0]
 80198f6:	4619      	mov	r1, r3
 80198f8:	6878      	ldr	r0, [r7, #4]
 80198fa:	f7fd fe27 	bl	801754c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	681b      	ldr	r3, [r3, #0]
 8019902:	895b      	ldrh	r3, [r3, #10]
 8019904:	8a3a      	ldrh	r2, [r7, #16]
 8019906:	429a      	cmp	r2, r3
 8019908:	f200 8361 	bhi.w	8019fce <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	681b      	ldr	r3, [r3, #0]
 8019910:	685b      	ldr	r3, [r3, #4]
 8019912:	4a64      	ldr	r2, [pc, #400]	; (8019aa4 <tcp_input+0x298>)
 8019914:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	681b      	ldr	r3, [r3, #0]
 801991a:	8a3a      	ldrh	r2, [r7, #16]
 801991c:	4611      	mov	r1, r2
 801991e:	4618      	mov	r0, r3
 8019920:	f7fd fe14 	bl	801754c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	891a      	ldrh	r2, [r3, #8]
 8019928:	8a3b      	ldrh	r3, [r7, #16]
 801992a:	1ad3      	subs	r3, r2, r3
 801992c:	b29a      	uxth	r2, r3
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	895b      	ldrh	r3, [r3, #10]
 8019936:	2b00      	cmp	r3, #0
 8019938:	d005      	beq.n	8019946 <tcp_input+0x13a>
 801993a:	4b54      	ldr	r3, [pc, #336]	; (8019a8c <tcp_input+0x280>)
 801993c:	22df      	movs	r2, #223	; 0xdf
 801993e:	495c      	ldr	r1, [pc, #368]	; (8019ab0 <tcp_input+0x2a4>)
 8019940:	4854      	ldr	r0, [pc, #336]	; (8019a94 <tcp_input+0x288>)
 8019942:	f007 fdef 	bl	8021524 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8019946:	687b      	ldr	r3, [r7, #4]
 8019948:	891a      	ldrh	r2, [r3, #8]
 801994a:	687b      	ldr	r3, [r7, #4]
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	891b      	ldrh	r3, [r3, #8]
 8019950:	429a      	cmp	r2, r3
 8019952:	d005      	beq.n	8019960 <tcp_input+0x154>
 8019954:	4b4d      	ldr	r3, [pc, #308]	; (8019a8c <tcp_input+0x280>)
 8019956:	22e0      	movs	r2, #224	; 0xe0
 8019958:	4956      	ldr	r1, [pc, #344]	; (8019ab4 <tcp_input+0x2a8>)
 801995a:	484e      	ldr	r0, [pc, #312]	; (8019a94 <tcp_input+0x288>)
 801995c:	f007 fde2 	bl	8021524 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8019960:	4b4d      	ldr	r3, [pc, #308]	; (8019a98 <tcp_input+0x28c>)
 8019962:	681b      	ldr	r3, [r3, #0]
 8019964:	881b      	ldrh	r3, [r3, #0]
 8019966:	b29b      	uxth	r3, r3
 8019968:	4a4b      	ldr	r2, [pc, #300]	; (8019a98 <tcp_input+0x28c>)
 801996a:	6814      	ldr	r4, [r2, #0]
 801996c:	4618      	mov	r0, r3
 801996e:	f7fc f9e9 	bl	8015d44 <lwip_htons>
 8019972:	4603      	mov	r3, r0
 8019974:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8019976:	4b48      	ldr	r3, [pc, #288]	; (8019a98 <tcp_input+0x28c>)
 8019978:	681b      	ldr	r3, [r3, #0]
 801997a:	885b      	ldrh	r3, [r3, #2]
 801997c:	b29b      	uxth	r3, r3
 801997e:	4a46      	ldr	r2, [pc, #280]	; (8019a98 <tcp_input+0x28c>)
 8019980:	6814      	ldr	r4, [r2, #0]
 8019982:	4618      	mov	r0, r3
 8019984:	f7fc f9de 	bl	8015d44 <lwip_htons>
 8019988:	4603      	mov	r3, r0
 801998a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801998c:	4b42      	ldr	r3, [pc, #264]	; (8019a98 <tcp_input+0x28c>)
 801998e:	681b      	ldr	r3, [r3, #0]
 8019990:	685b      	ldr	r3, [r3, #4]
 8019992:	4a41      	ldr	r2, [pc, #260]	; (8019a98 <tcp_input+0x28c>)
 8019994:	6814      	ldr	r4, [r2, #0]
 8019996:	4618      	mov	r0, r3
 8019998:	f7fc f9e9 	bl	8015d6e <lwip_htonl>
 801999c:	4603      	mov	r3, r0
 801999e:	6063      	str	r3, [r4, #4]
 80199a0:	6863      	ldr	r3, [r4, #4]
 80199a2:	4a45      	ldr	r2, [pc, #276]	; (8019ab8 <tcp_input+0x2ac>)
 80199a4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80199a6:	4b3c      	ldr	r3, [pc, #240]	; (8019a98 <tcp_input+0x28c>)
 80199a8:	681b      	ldr	r3, [r3, #0]
 80199aa:	689b      	ldr	r3, [r3, #8]
 80199ac:	4a3a      	ldr	r2, [pc, #232]	; (8019a98 <tcp_input+0x28c>)
 80199ae:	6814      	ldr	r4, [r2, #0]
 80199b0:	4618      	mov	r0, r3
 80199b2:	f7fc f9dc 	bl	8015d6e <lwip_htonl>
 80199b6:	4603      	mov	r3, r0
 80199b8:	60a3      	str	r3, [r4, #8]
 80199ba:	68a3      	ldr	r3, [r4, #8]
 80199bc:	4a3f      	ldr	r2, [pc, #252]	; (8019abc <tcp_input+0x2b0>)
 80199be:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80199c0:	4b35      	ldr	r3, [pc, #212]	; (8019a98 <tcp_input+0x28c>)
 80199c2:	681b      	ldr	r3, [r3, #0]
 80199c4:	89db      	ldrh	r3, [r3, #14]
 80199c6:	b29b      	uxth	r3, r3
 80199c8:	4a33      	ldr	r2, [pc, #204]	; (8019a98 <tcp_input+0x28c>)
 80199ca:	6814      	ldr	r4, [r2, #0]
 80199cc:	4618      	mov	r0, r3
 80199ce:	f7fc f9b9 	bl	8015d44 <lwip_htons>
 80199d2:	4603      	mov	r3, r0
 80199d4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80199d6:	4b30      	ldr	r3, [pc, #192]	; (8019a98 <tcp_input+0x28c>)
 80199d8:	681b      	ldr	r3, [r3, #0]
 80199da:	899b      	ldrh	r3, [r3, #12]
 80199dc:	b29b      	uxth	r3, r3
 80199de:	4618      	mov	r0, r3
 80199e0:	f7fc f9b0 	bl	8015d44 <lwip_htons>
 80199e4:	4603      	mov	r3, r0
 80199e6:	b2db      	uxtb	r3, r3
 80199e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80199ec:	b2da      	uxtb	r2, r3
 80199ee:	4b34      	ldr	r3, [pc, #208]	; (8019ac0 <tcp_input+0x2b4>)
 80199f0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80199f2:	687b      	ldr	r3, [r7, #4]
 80199f4:	891a      	ldrh	r2, [r3, #8]
 80199f6:	4b33      	ldr	r3, [pc, #204]	; (8019ac4 <tcp_input+0x2b8>)
 80199f8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80199fa:	4b31      	ldr	r3, [pc, #196]	; (8019ac0 <tcp_input+0x2b4>)
 80199fc:	781b      	ldrb	r3, [r3, #0]
 80199fe:	f003 0303 	and.w	r3, r3, #3
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	d00c      	beq.n	8019a20 <tcp_input+0x214>
    tcplen++;
 8019a06:	4b2f      	ldr	r3, [pc, #188]	; (8019ac4 <tcp_input+0x2b8>)
 8019a08:	881b      	ldrh	r3, [r3, #0]
 8019a0a:	3301      	adds	r3, #1
 8019a0c:	b29a      	uxth	r2, r3
 8019a0e:	4b2d      	ldr	r3, [pc, #180]	; (8019ac4 <tcp_input+0x2b8>)
 8019a10:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8019a12:	687b      	ldr	r3, [r7, #4]
 8019a14:	891a      	ldrh	r2, [r3, #8]
 8019a16:	4b2b      	ldr	r3, [pc, #172]	; (8019ac4 <tcp_input+0x2b8>)
 8019a18:	881b      	ldrh	r3, [r3, #0]
 8019a1a:	429a      	cmp	r2, r3
 8019a1c:	f200 82d9 	bhi.w	8019fd2 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8019a20:	2300      	movs	r3, #0
 8019a22:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019a24:	4b28      	ldr	r3, [pc, #160]	; (8019ac8 <tcp_input+0x2bc>)
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	61fb      	str	r3, [r7, #28]
 8019a2a:	e09d      	b.n	8019b68 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8019a2c:	69fb      	ldr	r3, [r7, #28]
 8019a2e:	7d1b      	ldrb	r3, [r3, #20]
 8019a30:	2b00      	cmp	r3, #0
 8019a32:	d105      	bne.n	8019a40 <tcp_input+0x234>
 8019a34:	4b15      	ldr	r3, [pc, #84]	; (8019a8c <tcp_input+0x280>)
 8019a36:	22fb      	movs	r2, #251	; 0xfb
 8019a38:	4924      	ldr	r1, [pc, #144]	; (8019acc <tcp_input+0x2c0>)
 8019a3a:	4816      	ldr	r0, [pc, #88]	; (8019a94 <tcp_input+0x288>)
 8019a3c:	f007 fd72 	bl	8021524 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8019a40:	69fb      	ldr	r3, [r7, #28]
 8019a42:	7d1b      	ldrb	r3, [r3, #20]
 8019a44:	2b0a      	cmp	r3, #10
 8019a46:	d105      	bne.n	8019a54 <tcp_input+0x248>
 8019a48:	4b10      	ldr	r3, [pc, #64]	; (8019a8c <tcp_input+0x280>)
 8019a4a:	22fc      	movs	r2, #252	; 0xfc
 8019a4c:	4920      	ldr	r1, [pc, #128]	; (8019ad0 <tcp_input+0x2c4>)
 8019a4e:	4811      	ldr	r0, [pc, #68]	; (8019a94 <tcp_input+0x288>)
 8019a50:	f007 fd68 	bl	8021524 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8019a54:	69fb      	ldr	r3, [r7, #28]
 8019a56:	7d1b      	ldrb	r3, [r3, #20]
 8019a58:	2b01      	cmp	r3, #1
 8019a5a:	d105      	bne.n	8019a68 <tcp_input+0x25c>
 8019a5c:	4b0b      	ldr	r3, [pc, #44]	; (8019a8c <tcp_input+0x280>)
 8019a5e:	22fd      	movs	r2, #253	; 0xfd
 8019a60:	491c      	ldr	r1, [pc, #112]	; (8019ad4 <tcp_input+0x2c8>)
 8019a62:	480c      	ldr	r0, [pc, #48]	; (8019a94 <tcp_input+0x288>)
 8019a64:	f007 fd5e 	bl	8021524 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019a68:	69fb      	ldr	r3, [r7, #28]
 8019a6a:	7a1b      	ldrb	r3, [r3, #8]
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d033      	beq.n	8019ad8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019a70:	69fb      	ldr	r3, [r7, #28]
 8019a72:	7a1a      	ldrb	r2, [r3, #8]
 8019a74:	4b09      	ldr	r3, [pc, #36]	; (8019a9c <tcp_input+0x290>)
 8019a76:	685b      	ldr	r3, [r3, #4]
 8019a78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019a7c:	3301      	adds	r3, #1
 8019a7e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019a80:	429a      	cmp	r2, r3
 8019a82:	d029      	beq.n	8019ad8 <tcp_input+0x2cc>
      prev = pcb;
 8019a84:	69fb      	ldr	r3, [r7, #28]
 8019a86:	61bb      	str	r3, [r7, #24]
      continue;
 8019a88:	e06b      	b.n	8019b62 <tcp_input+0x356>
 8019a8a:	bf00      	nop
 8019a8c:	08025874 	.word	0x08025874
 8019a90:	080258a8 	.word	0x080258a8
 8019a94:	080258c0 	.word	0x080258c0
 8019a98:	200052f0 	.word	0x200052f0
 8019a9c:	200110bc 	.word	0x200110bc
 8019aa0:	200052f4 	.word	0x200052f4
 8019aa4:	200052f8 	.word	0x200052f8
 8019aa8:	200052f6 	.word	0x200052f6
 8019aac:	080258e8 	.word	0x080258e8
 8019ab0:	080258f8 	.word	0x080258f8
 8019ab4:	08025904 	.word	0x08025904
 8019ab8:	20005300 	.word	0x20005300
 8019abc:	20005304 	.word	0x20005304
 8019ac0:	2000530c 	.word	0x2000530c
 8019ac4:	2000530a 	.word	0x2000530a
 8019ac8:	2001b990 	.word	0x2001b990
 8019acc:	08025924 	.word	0x08025924
 8019ad0:	0802594c 	.word	0x0802594c
 8019ad4:	08025978 	.word	0x08025978
    }

    if (pcb->remote_port == tcphdr->src &&
 8019ad8:	69fb      	ldr	r3, [r7, #28]
 8019ada:	8b1a      	ldrh	r2, [r3, #24]
 8019adc:	4b94      	ldr	r3, [pc, #592]	; (8019d30 <tcp_input+0x524>)
 8019ade:	681b      	ldr	r3, [r3, #0]
 8019ae0:	881b      	ldrh	r3, [r3, #0]
 8019ae2:	b29b      	uxth	r3, r3
 8019ae4:	429a      	cmp	r2, r3
 8019ae6:	d13a      	bne.n	8019b5e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8019ae8:	69fb      	ldr	r3, [r7, #28]
 8019aea:	8ada      	ldrh	r2, [r3, #22]
 8019aec:	4b90      	ldr	r3, [pc, #576]	; (8019d30 <tcp_input+0x524>)
 8019aee:	681b      	ldr	r3, [r3, #0]
 8019af0:	885b      	ldrh	r3, [r3, #2]
 8019af2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8019af4:	429a      	cmp	r2, r3
 8019af6:	d132      	bne.n	8019b5e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8019af8:	69fb      	ldr	r3, [r7, #28]
 8019afa:	685a      	ldr	r2, [r3, #4]
 8019afc:	4b8d      	ldr	r3, [pc, #564]	; (8019d34 <tcp_input+0x528>)
 8019afe:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8019b00:	429a      	cmp	r2, r3
 8019b02:	d12c      	bne.n	8019b5e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8019b04:	69fb      	ldr	r3, [r7, #28]
 8019b06:	681a      	ldr	r2, [r3, #0]
 8019b08:	4b8a      	ldr	r3, [pc, #552]	; (8019d34 <tcp_input+0x528>)
 8019b0a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8019b0c:	429a      	cmp	r2, r3
 8019b0e:	d126      	bne.n	8019b5e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8019b10:	69fb      	ldr	r3, [r7, #28]
 8019b12:	68db      	ldr	r3, [r3, #12]
 8019b14:	69fa      	ldr	r2, [r7, #28]
 8019b16:	429a      	cmp	r2, r3
 8019b18:	d106      	bne.n	8019b28 <tcp_input+0x31c>
 8019b1a:	4b87      	ldr	r3, [pc, #540]	; (8019d38 <tcp_input+0x52c>)
 8019b1c:	f240 120d 	movw	r2, #269	; 0x10d
 8019b20:	4986      	ldr	r1, [pc, #536]	; (8019d3c <tcp_input+0x530>)
 8019b22:	4887      	ldr	r0, [pc, #540]	; (8019d40 <tcp_input+0x534>)
 8019b24:	f007 fcfe 	bl	8021524 <iprintf>
      if (prev != NULL) {
 8019b28:	69bb      	ldr	r3, [r7, #24]
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d00a      	beq.n	8019b44 <tcp_input+0x338>
        prev->next = pcb->next;
 8019b2e:	69fb      	ldr	r3, [r7, #28]
 8019b30:	68da      	ldr	r2, [r3, #12]
 8019b32:	69bb      	ldr	r3, [r7, #24]
 8019b34:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8019b36:	4b83      	ldr	r3, [pc, #524]	; (8019d44 <tcp_input+0x538>)
 8019b38:	681a      	ldr	r2, [r3, #0]
 8019b3a:	69fb      	ldr	r3, [r7, #28]
 8019b3c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8019b3e:	4a81      	ldr	r2, [pc, #516]	; (8019d44 <tcp_input+0x538>)
 8019b40:	69fb      	ldr	r3, [r7, #28]
 8019b42:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8019b44:	69fb      	ldr	r3, [r7, #28]
 8019b46:	68db      	ldr	r3, [r3, #12]
 8019b48:	69fa      	ldr	r2, [r7, #28]
 8019b4a:	429a      	cmp	r2, r3
 8019b4c:	d111      	bne.n	8019b72 <tcp_input+0x366>
 8019b4e:	4b7a      	ldr	r3, [pc, #488]	; (8019d38 <tcp_input+0x52c>)
 8019b50:	f240 1215 	movw	r2, #277	; 0x115
 8019b54:	497c      	ldr	r1, [pc, #496]	; (8019d48 <tcp_input+0x53c>)
 8019b56:	487a      	ldr	r0, [pc, #488]	; (8019d40 <tcp_input+0x534>)
 8019b58:	f007 fce4 	bl	8021524 <iprintf>
      break;
 8019b5c:	e009      	b.n	8019b72 <tcp_input+0x366>
    }
    prev = pcb;
 8019b5e:	69fb      	ldr	r3, [r7, #28]
 8019b60:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8019b62:	69fb      	ldr	r3, [r7, #28]
 8019b64:	68db      	ldr	r3, [r3, #12]
 8019b66:	61fb      	str	r3, [r7, #28]
 8019b68:	69fb      	ldr	r3, [r7, #28]
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	f47f af5e 	bne.w	8019a2c <tcp_input+0x220>
 8019b70:	e000      	b.n	8019b74 <tcp_input+0x368>
      break;
 8019b72:	bf00      	nop
  }

  if (pcb == NULL) {
 8019b74:	69fb      	ldr	r3, [r7, #28]
 8019b76:	2b00      	cmp	r3, #0
 8019b78:	f040 8095 	bne.w	8019ca6 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8019b7c:	4b73      	ldr	r3, [pc, #460]	; (8019d4c <tcp_input+0x540>)
 8019b7e:	681b      	ldr	r3, [r3, #0]
 8019b80:	61fb      	str	r3, [r7, #28]
 8019b82:	e03f      	b.n	8019c04 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8019b84:	69fb      	ldr	r3, [r7, #28]
 8019b86:	7d1b      	ldrb	r3, [r3, #20]
 8019b88:	2b0a      	cmp	r3, #10
 8019b8a:	d006      	beq.n	8019b9a <tcp_input+0x38e>
 8019b8c:	4b6a      	ldr	r3, [pc, #424]	; (8019d38 <tcp_input+0x52c>)
 8019b8e:	f240 121f 	movw	r2, #287	; 0x11f
 8019b92:	496f      	ldr	r1, [pc, #444]	; (8019d50 <tcp_input+0x544>)
 8019b94:	486a      	ldr	r0, [pc, #424]	; (8019d40 <tcp_input+0x534>)
 8019b96:	f007 fcc5 	bl	8021524 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019b9a:	69fb      	ldr	r3, [r7, #28]
 8019b9c:	7a1b      	ldrb	r3, [r3, #8]
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d009      	beq.n	8019bb6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019ba2:	69fb      	ldr	r3, [r7, #28]
 8019ba4:	7a1a      	ldrb	r2, [r3, #8]
 8019ba6:	4b63      	ldr	r3, [pc, #396]	; (8019d34 <tcp_input+0x528>)
 8019ba8:	685b      	ldr	r3, [r3, #4]
 8019baa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019bae:	3301      	adds	r3, #1
 8019bb0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019bb2:	429a      	cmp	r2, r3
 8019bb4:	d122      	bne.n	8019bfc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8019bb6:	69fb      	ldr	r3, [r7, #28]
 8019bb8:	8b1a      	ldrh	r2, [r3, #24]
 8019bba:	4b5d      	ldr	r3, [pc, #372]	; (8019d30 <tcp_input+0x524>)
 8019bbc:	681b      	ldr	r3, [r3, #0]
 8019bbe:	881b      	ldrh	r3, [r3, #0]
 8019bc0:	b29b      	uxth	r3, r3
 8019bc2:	429a      	cmp	r2, r3
 8019bc4:	d11b      	bne.n	8019bfe <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8019bc6:	69fb      	ldr	r3, [r7, #28]
 8019bc8:	8ada      	ldrh	r2, [r3, #22]
 8019bca:	4b59      	ldr	r3, [pc, #356]	; (8019d30 <tcp_input+0x524>)
 8019bcc:	681b      	ldr	r3, [r3, #0]
 8019bce:	885b      	ldrh	r3, [r3, #2]
 8019bd0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8019bd2:	429a      	cmp	r2, r3
 8019bd4:	d113      	bne.n	8019bfe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8019bd6:	69fb      	ldr	r3, [r7, #28]
 8019bd8:	685a      	ldr	r2, [r3, #4]
 8019bda:	4b56      	ldr	r3, [pc, #344]	; (8019d34 <tcp_input+0x528>)
 8019bdc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8019bde:	429a      	cmp	r2, r3
 8019be0:	d10d      	bne.n	8019bfe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8019be2:	69fb      	ldr	r3, [r7, #28]
 8019be4:	681a      	ldr	r2, [r3, #0]
 8019be6:	4b53      	ldr	r3, [pc, #332]	; (8019d34 <tcp_input+0x528>)
 8019be8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8019bea:	429a      	cmp	r2, r3
 8019bec:	d107      	bne.n	8019bfe <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8019bee:	69f8      	ldr	r0, [r7, #28]
 8019bf0:	f000 fb54 	bl	801a29c <tcp_timewait_input>
        }
        pbuf_free(p);
 8019bf4:	6878      	ldr	r0, [r7, #4]
 8019bf6:	f7fd fd2f 	bl	8017658 <pbuf_free>
        return;
 8019bfa:	e1f0      	b.n	8019fde <tcp_input+0x7d2>
        continue;
 8019bfc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8019bfe:	69fb      	ldr	r3, [r7, #28]
 8019c00:	68db      	ldr	r3, [r3, #12]
 8019c02:	61fb      	str	r3, [r7, #28]
 8019c04:	69fb      	ldr	r3, [r7, #28]
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	d1bc      	bne.n	8019b84 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8019c0a:	2300      	movs	r3, #0
 8019c0c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8019c0e:	4b51      	ldr	r3, [pc, #324]	; (8019d54 <tcp_input+0x548>)
 8019c10:	681b      	ldr	r3, [r3, #0]
 8019c12:	617b      	str	r3, [r7, #20]
 8019c14:	e02a      	b.n	8019c6c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8019c16:	697b      	ldr	r3, [r7, #20]
 8019c18:	7a1b      	ldrb	r3, [r3, #8]
 8019c1a:	2b00      	cmp	r3, #0
 8019c1c:	d00c      	beq.n	8019c38 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019c1e:	697b      	ldr	r3, [r7, #20]
 8019c20:	7a1a      	ldrb	r2, [r3, #8]
 8019c22:	4b44      	ldr	r3, [pc, #272]	; (8019d34 <tcp_input+0x528>)
 8019c24:	685b      	ldr	r3, [r3, #4]
 8019c26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019c2a:	3301      	adds	r3, #1
 8019c2c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8019c2e:	429a      	cmp	r2, r3
 8019c30:	d002      	beq.n	8019c38 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8019c32:	697b      	ldr	r3, [r7, #20]
 8019c34:	61bb      	str	r3, [r7, #24]
        continue;
 8019c36:	e016      	b.n	8019c66 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8019c38:	697b      	ldr	r3, [r7, #20]
 8019c3a:	8ada      	ldrh	r2, [r3, #22]
 8019c3c:	4b3c      	ldr	r3, [pc, #240]	; (8019d30 <tcp_input+0x524>)
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	885b      	ldrh	r3, [r3, #2]
 8019c42:	b29b      	uxth	r3, r3
 8019c44:	429a      	cmp	r2, r3
 8019c46:	d10c      	bne.n	8019c62 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8019c48:	697b      	ldr	r3, [r7, #20]
 8019c4a:	681a      	ldr	r2, [r3, #0]
 8019c4c:	4b39      	ldr	r3, [pc, #228]	; (8019d34 <tcp_input+0x528>)
 8019c4e:	695b      	ldr	r3, [r3, #20]
 8019c50:	429a      	cmp	r2, r3
 8019c52:	d00f      	beq.n	8019c74 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8019c54:	697b      	ldr	r3, [r7, #20]
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	d00d      	beq.n	8019c76 <tcp_input+0x46a>
 8019c5a:	697b      	ldr	r3, [r7, #20]
 8019c5c:	681b      	ldr	r3, [r3, #0]
 8019c5e:	2b00      	cmp	r3, #0
 8019c60:	d009      	beq.n	8019c76 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8019c62:	697b      	ldr	r3, [r7, #20]
 8019c64:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8019c66:	697b      	ldr	r3, [r7, #20]
 8019c68:	68db      	ldr	r3, [r3, #12]
 8019c6a:	617b      	str	r3, [r7, #20]
 8019c6c:	697b      	ldr	r3, [r7, #20]
 8019c6e:	2b00      	cmp	r3, #0
 8019c70:	d1d1      	bne.n	8019c16 <tcp_input+0x40a>
 8019c72:	e000      	b.n	8019c76 <tcp_input+0x46a>
            break;
 8019c74:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8019c76:	697b      	ldr	r3, [r7, #20]
 8019c78:	2b00      	cmp	r3, #0
 8019c7a:	d014      	beq.n	8019ca6 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8019c7c:	69bb      	ldr	r3, [r7, #24]
 8019c7e:	2b00      	cmp	r3, #0
 8019c80:	d00a      	beq.n	8019c98 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8019c82:	697b      	ldr	r3, [r7, #20]
 8019c84:	68da      	ldr	r2, [r3, #12]
 8019c86:	69bb      	ldr	r3, [r7, #24]
 8019c88:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8019c8a:	4b32      	ldr	r3, [pc, #200]	; (8019d54 <tcp_input+0x548>)
 8019c8c:	681a      	ldr	r2, [r3, #0]
 8019c8e:	697b      	ldr	r3, [r7, #20]
 8019c90:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8019c92:	4a30      	ldr	r2, [pc, #192]	; (8019d54 <tcp_input+0x548>)
 8019c94:	697b      	ldr	r3, [r7, #20]
 8019c96:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8019c98:	6978      	ldr	r0, [r7, #20]
 8019c9a:	f000 fa01 	bl	801a0a0 <tcp_listen_input>
      }
      pbuf_free(p);
 8019c9e:	6878      	ldr	r0, [r7, #4]
 8019ca0:	f7fd fcda 	bl	8017658 <pbuf_free>
      return;
 8019ca4:	e19b      	b.n	8019fde <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8019ca6:	69fb      	ldr	r3, [r7, #28]
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	f000 8160 	beq.w	8019f6e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8019cae:	4b2a      	ldr	r3, [pc, #168]	; (8019d58 <tcp_input+0x54c>)
 8019cb0:	2200      	movs	r2, #0
 8019cb2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	891a      	ldrh	r2, [r3, #8]
 8019cb8:	4b27      	ldr	r3, [pc, #156]	; (8019d58 <tcp_input+0x54c>)
 8019cba:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8019cbc:	4a26      	ldr	r2, [pc, #152]	; (8019d58 <tcp_input+0x54c>)
 8019cbe:	687b      	ldr	r3, [r7, #4]
 8019cc0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8019cc2:	4b1b      	ldr	r3, [pc, #108]	; (8019d30 <tcp_input+0x524>)
 8019cc4:	681b      	ldr	r3, [r3, #0]
 8019cc6:	4a24      	ldr	r2, [pc, #144]	; (8019d58 <tcp_input+0x54c>)
 8019cc8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8019cca:	4b24      	ldr	r3, [pc, #144]	; (8019d5c <tcp_input+0x550>)
 8019ccc:	2200      	movs	r2, #0
 8019cce:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8019cd0:	4b23      	ldr	r3, [pc, #140]	; (8019d60 <tcp_input+0x554>)
 8019cd2:	2200      	movs	r2, #0
 8019cd4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8019cd6:	4b23      	ldr	r3, [pc, #140]	; (8019d64 <tcp_input+0x558>)
 8019cd8:	2200      	movs	r2, #0
 8019cda:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8019cdc:	4b22      	ldr	r3, [pc, #136]	; (8019d68 <tcp_input+0x55c>)
 8019cde:	781b      	ldrb	r3, [r3, #0]
 8019ce0:	f003 0308 	and.w	r3, r3, #8
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	d006      	beq.n	8019cf6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8019ce8:	687b      	ldr	r3, [r7, #4]
 8019cea:	7b5b      	ldrb	r3, [r3, #13]
 8019cec:	f043 0301 	orr.w	r3, r3, #1
 8019cf0:	b2da      	uxtb	r2, r3
 8019cf2:	687b      	ldr	r3, [r7, #4]
 8019cf4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8019cf6:	69fb      	ldr	r3, [r7, #28]
 8019cf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	d038      	beq.n	8019d70 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8019cfe:	69f8      	ldr	r0, [r7, #28]
 8019d00:	f7ff f852 	bl	8018da8 <tcp_process_refused_data>
 8019d04:	4603      	mov	r3, r0
 8019d06:	f113 0f0d 	cmn.w	r3, #13
 8019d0a:	d007      	beq.n	8019d1c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8019d0c:	69fb      	ldr	r3, [r7, #28]
 8019d0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8019d10:	2b00      	cmp	r3, #0
 8019d12:	d02d      	beq.n	8019d70 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8019d14:	4b15      	ldr	r3, [pc, #84]	; (8019d6c <tcp_input+0x560>)
 8019d16:	881b      	ldrh	r3, [r3, #0]
 8019d18:	2b00      	cmp	r3, #0
 8019d1a:	d029      	beq.n	8019d70 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8019d1c:	69fb      	ldr	r3, [r7, #28]
 8019d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8019d20:	2b00      	cmp	r3, #0
 8019d22:	f040 8104 	bne.w	8019f2e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8019d26:	69f8      	ldr	r0, [r7, #28]
 8019d28:	f003 fe16 	bl	801d958 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8019d2c:	e0ff      	b.n	8019f2e <tcp_input+0x722>
 8019d2e:	bf00      	nop
 8019d30:	200052f0 	.word	0x200052f0
 8019d34:	200110bc 	.word	0x200110bc
 8019d38:	08025874 	.word	0x08025874
 8019d3c:	080259a0 	.word	0x080259a0
 8019d40:	080258c0 	.word	0x080258c0
 8019d44:	2001b990 	.word	0x2001b990
 8019d48:	080259cc 	.word	0x080259cc
 8019d4c:	2001b9a0 	.word	0x2001b9a0
 8019d50:	080259f8 	.word	0x080259f8
 8019d54:	2001b998 	.word	0x2001b998
 8019d58:	200052e0 	.word	0x200052e0
 8019d5c:	20005310 	.word	0x20005310
 8019d60:	2000530d 	.word	0x2000530d
 8019d64:	20005308 	.word	0x20005308
 8019d68:	2000530c 	.word	0x2000530c
 8019d6c:	2000530a 	.word	0x2000530a
      }
    }
    tcp_input_pcb = pcb;
 8019d70:	4a9c      	ldr	r2, [pc, #624]	; (8019fe4 <tcp_input+0x7d8>)
 8019d72:	69fb      	ldr	r3, [r7, #28]
 8019d74:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8019d76:	69f8      	ldr	r0, [r7, #28]
 8019d78:	f000 fb0a 	bl	801a390 <tcp_process>
 8019d7c:	4603      	mov	r3, r0
 8019d7e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8019d80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019d84:	f113 0f0d 	cmn.w	r3, #13
 8019d88:	f000 80d3 	beq.w	8019f32 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8019d8c:	4b96      	ldr	r3, [pc, #600]	; (8019fe8 <tcp_input+0x7dc>)
 8019d8e:	781b      	ldrb	r3, [r3, #0]
 8019d90:	f003 0308 	and.w	r3, r3, #8
 8019d94:	2b00      	cmp	r3, #0
 8019d96:	d015      	beq.n	8019dc4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8019d98:	69fb      	ldr	r3, [r7, #28]
 8019d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d008      	beq.n	8019db4 <tcp_input+0x5a8>
 8019da2:	69fb      	ldr	r3, [r7, #28]
 8019da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019da8:	69fa      	ldr	r2, [r7, #28]
 8019daa:	6912      	ldr	r2, [r2, #16]
 8019dac:	f06f 010d 	mvn.w	r1, #13
 8019db0:	4610      	mov	r0, r2
 8019db2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8019db4:	69f9      	ldr	r1, [r7, #28]
 8019db6:	488d      	ldr	r0, [pc, #564]	; (8019fec <tcp_input+0x7e0>)
 8019db8:	f7ff fbb0 	bl	801951c <tcp_pcb_remove>
        tcp_free(pcb);
 8019dbc:	69f8      	ldr	r0, [r7, #28]
 8019dbe:	f7fd fef7 	bl	8017bb0 <tcp_free>
 8019dc2:	e0c1      	b.n	8019f48 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8019dc4:	2300      	movs	r3, #0
 8019dc6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8019dc8:	4b89      	ldr	r3, [pc, #548]	; (8019ff0 <tcp_input+0x7e4>)
 8019dca:	881b      	ldrh	r3, [r3, #0]
 8019dcc:	2b00      	cmp	r3, #0
 8019dce:	d01d      	beq.n	8019e0c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8019dd0:	4b87      	ldr	r3, [pc, #540]	; (8019ff0 <tcp_input+0x7e4>)
 8019dd2:	881b      	ldrh	r3, [r3, #0]
 8019dd4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8019dd6:	69fb      	ldr	r3, [r7, #28]
 8019dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	d00a      	beq.n	8019df6 <tcp_input+0x5ea>
 8019de0:	69fb      	ldr	r3, [r7, #28]
 8019de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019de6:	69fa      	ldr	r2, [r7, #28]
 8019de8:	6910      	ldr	r0, [r2, #16]
 8019dea:	89fa      	ldrh	r2, [r7, #14]
 8019dec:	69f9      	ldr	r1, [r7, #28]
 8019dee:	4798      	blx	r3
 8019df0:	4603      	mov	r3, r0
 8019df2:	74fb      	strb	r3, [r7, #19]
 8019df4:	e001      	b.n	8019dfa <tcp_input+0x5ee>
 8019df6:	2300      	movs	r3, #0
 8019df8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8019dfa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019dfe:	f113 0f0d 	cmn.w	r3, #13
 8019e02:	f000 8098 	beq.w	8019f36 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8019e06:	4b7a      	ldr	r3, [pc, #488]	; (8019ff0 <tcp_input+0x7e4>)
 8019e08:	2200      	movs	r2, #0
 8019e0a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8019e0c:	69f8      	ldr	r0, [r7, #28]
 8019e0e:	f000 f907 	bl	801a020 <tcp_input_delayed_close>
 8019e12:	4603      	mov	r3, r0
 8019e14:	2b00      	cmp	r3, #0
 8019e16:	f040 8090 	bne.w	8019f3a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8019e1a:	4b76      	ldr	r3, [pc, #472]	; (8019ff4 <tcp_input+0x7e8>)
 8019e1c:	681b      	ldr	r3, [r3, #0]
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	d041      	beq.n	8019ea6 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8019e22:	69fb      	ldr	r3, [r7, #28]
 8019e24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019e26:	2b00      	cmp	r3, #0
 8019e28:	d006      	beq.n	8019e38 <tcp_input+0x62c>
 8019e2a:	4b73      	ldr	r3, [pc, #460]	; (8019ff8 <tcp_input+0x7ec>)
 8019e2c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8019e30:	4972      	ldr	r1, [pc, #456]	; (8019ffc <tcp_input+0x7f0>)
 8019e32:	4873      	ldr	r0, [pc, #460]	; (801a000 <tcp_input+0x7f4>)
 8019e34:	f007 fb76 	bl	8021524 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8019e38:	69fb      	ldr	r3, [r7, #28]
 8019e3a:	8b5b      	ldrh	r3, [r3, #26]
 8019e3c:	f003 0310 	and.w	r3, r3, #16
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	d008      	beq.n	8019e56 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8019e44:	4b6b      	ldr	r3, [pc, #428]	; (8019ff4 <tcp_input+0x7e8>)
 8019e46:	681b      	ldr	r3, [r3, #0]
 8019e48:	4618      	mov	r0, r3
 8019e4a:	f7fd fc05 	bl	8017658 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8019e4e:	69f8      	ldr	r0, [r7, #28]
 8019e50:	f7fe f996 	bl	8018180 <tcp_abort>
            goto aborted;
 8019e54:	e078      	b.n	8019f48 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8019e56:	69fb      	ldr	r3, [r7, #28]
 8019e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019e5c:	2b00      	cmp	r3, #0
 8019e5e:	d00c      	beq.n	8019e7a <tcp_input+0x66e>
 8019e60:	69fb      	ldr	r3, [r7, #28]
 8019e62:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8019e66:	69fb      	ldr	r3, [r7, #28]
 8019e68:	6918      	ldr	r0, [r3, #16]
 8019e6a:	4b62      	ldr	r3, [pc, #392]	; (8019ff4 <tcp_input+0x7e8>)
 8019e6c:	681a      	ldr	r2, [r3, #0]
 8019e6e:	2300      	movs	r3, #0
 8019e70:	69f9      	ldr	r1, [r7, #28]
 8019e72:	47a0      	blx	r4
 8019e74:	4603      	mov	r3, r0
 8019e76:	74fb      	strb	r3, [r7, #19]
 8019e78:	e008      	b.n	8019e8c <tcp_input+0x680>
 8019e7a:	4b5e      	ldr	r3, [pc, #376]	; (8019ff4 <tcp_input+0x7e8>)
 8019e7c:	681a      	ldr	r2, [r3, #0]
 8019e7e:	2300      	movs	r3, #0
 8019e80:	69f9      	ldr	r1, [r7, #28]
 8019e82:	2000      	movs	r0, #0
 8019e84:	f7ff f884 	bl	8018f90 <tcp_recv_null>
 8019e88:	4603      	mov	r3, r0
 8019e8a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8019e8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019e90:	f113 0f0d 	cmn.w	r3, #13
 8019e94:	d053      	beq.n	8019f3e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8019e96:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019e9a:	2b00      	cmp	r3, #0
 8019e9c:	d003      	beq.n	8019ea6 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8019e9e:	4b55      	ldr	r3, [pc, #340]	; (8019ff4 <tcp_input+0x7e8>)
 8019ea0:	681a      	ldr	r2, [r3, #0]
 8019ea2:	69fb      	ldr	r3, [r7, #28]
 8019ea4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8019ea6:	4b50      	ldr	r3, [pc, #320]	; (8019fe8 <tcp_input+0x7dc>)
 8019ea8:	781b      	ldrb	r3, [r3, #0]
 8019eaa:	f003 0320 	and.w	r3, r3, #32
 8019eae:	2b00      	cmp	r3, #0
 8019eb0:	d030      	beq.n	8019f14 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8019eb2:	69fb      	ldr	r3, [r7, #28]
 8019eb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019eb6:	2b00      	cmp	r3, #0
 8019eb8:	d009      	beq.n	8019ece <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8019eba:	69fb      	ldr	r3, [r7, #28]
 8019ebc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019ebe:	7b5a      	ldrb	r2, [r3, #13]
 8019ec0:	69fb      	ldr	r3, [r7, #28]
 8019ec2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019ec4:	f042 0220 	orr.w	r2, r2, #32
 8019ec8:	b2d2      	uxtb	r2, r2
 8019eca:	735a      	strb	r2, [r3, #13]
 8019ecc:	e022      	b.n	8019f14 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8019ece:	69fb      	ldr	r3, [r7, #28]
 8019ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019ed2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8019ed6:	d005      	beq.n	8019ee4 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8019ed8:	69fb      	ldr	r3, [r7, #28]
 8019eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019edc:	3301      	adds	r3, #1
 8019ede:	b29a      	uxth	r2, r3
 8019ee0:	69fb      	ldr	r3, [r7, #28]
 8019ee2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8019ee4:	69fb      	ldr	r3, [r7, #28]
 8019ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	d00b      	beq.n	8019f06 <tcp_input+0x6fa>
 8019eee:	69fb      	ldr	r3, [r7, #28]
 8019ef0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8019ef4:	69fb      	ldr	r3, [r7, #28]
 8019ef6:	6918      	ldr	r0, [r3, #16]
 8019ef8:	2300      	movs	r3, #0
 8019efa:	2200      	movs	r2, #0
 8019efc:	69f9      	ldr	r1, [r7, #28]
 8019efe:	47a0      	blx	r4
 8019f00:	4603      	mov	r3, r0
 8019f02:	74fb      	strb	r3, [r7, #19]
 8019f04:	e001      	b.n	8019f0a <tcp_input+0x6fe>
 8019f06:	2300      	movs	r3, #0
 8019f08:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8019f0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019f0e:	f113 0f0d 	cmn.w	r3, #13
 8019f12:	d016      	beq.n	8019f42 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8019f14:	4b33      	ldr	r3, [pc, #204]	; (8019fe4 <tcp_input+0x7d8>)
 8019f16:	2200      	movs	r2, #0
 8019f18:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8019f1a:	69f8      	ldr	r0, [r7, #28]
 8019f1c:	f000 f880 	bl	801a020 <tcp_input_delayed_close>
 8019f20:	4603      	mov	r3, r0
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d10f      	bne.n	8019f46 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8019f26:	69f8      	ldr	r0, [r7, #28]
 8019f28:	f002 ff10 	bl	801cd4c <tcp_output>
 8019f2c:	e00c      	b.n	8019f48 <tcp_input+0x73c>
        goto aborted;
 8019f2e:	bf00      	nop
 8019f30:	e00a      	b.n	8019f48 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8019f32:	bf00      	nop
 8019f34:	e008      	b.n	8019f48 <tcp_input+0x73c>
              goto aborted;
 8019f36:	bf00      	nop
 8019f38:	e006      	b.n	8019f48 <tcp_input+0x73c>
          goto aborted;
 8019f3a:	bf00      	nop
 8019f3c:	e004      	b.n	8019f48 <tcp_input+0x73c>
            goto aborted;
 8019f3e:	bf00      	nop
 8019f40:	e002      	b.n	8019f48 <tcp_input+0x73c>
              goto aborted;
 8019f42:	bf00      	nop
 8019f44:	e000      	b.n	8019f48 <tcp_input+0x73c>
          goto aborted;
 8019f46:	bf00      	nop
    tcp_input_pcb = NULL;
 8019f48:	4b26      	ldr	r3, [pc, #152]	; (8019fe4 <tcp_input+0x7d8>)
 8019f4a:	2200      	movs	r2, #0
 8019f4c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8019f4e:	4b29      	ldr	r3, [pc, #164]	; (8019ff4 <tcp_input+0x7e8>)
 8019f50:	2200      	movs	r2, #0
 8019f52:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8019f54:	4b2b      	ldr	r3, [pc, #172]	; (801a004 <tcp_input+0x7f8>)
 8019f56:	685b      	ldr	r3, [r3, #4]
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	d03f      	beq.n	8019fdc <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8019f5c:	4b29      	ldr	r3, [pc, #164]	; (801a004 <tcp_input+0x7f8>)
 8019f5e:	685b      	ldr	r3, [r3, #4]
 8019f60:	4618      	mov	r0, r3
 8019f62:	f7fd fb79 	bl	8017658 <pbuf_free>
      inseg.p = NULL;
 8019f66:	4b27      	ldr	r3, [pc, #156]	; (801a004 <tcp_input+0x7f8>)
 8019f68:	2200      	movs	r2, #0
 8019f6a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8019f6c:	e036      	b.n	8019fdc <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8019f6e:	4b26      	ldr	r3, [pc, #152]	; (801a008 <tcp_input+0x7fc>)
 8019f70:	681b      	ldr	r3, [r3, #0]
 8019f72:	899b      	ldrh	r3, [r3, #12]
 8019f74:	b29b      	uxth	r3, r3
 8019f76:	4618      	mov	r0, r3
 8019f78:	f7fb fee4 	bl	8015d44 <lwip_htons>
 8019f7c:	4603      	mov	r3, r0
 8019f7e:	b2db      	uxtb	r3, r3
 8019f80:	f003 0304 	and.w	r3, r3, #4
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	d118      	bne.n	8019fba <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019f88:	4b20      	ldr	r3, [pc, #128]	; (801a00c <tcp_input+0x800>)
 8019f8a:	6819      	ldr	r1, [r3, #0]
 8019f8c:	4b20      	ldr	r3, [pc, #128]	; (801a010 <tcp_input+0x804>)
 8019f8e:	881b      	ldrh	r3, [r3, #0]
 8019f90:	461a      	mov	r2, r3
 8019f92:	4b20      	ldr	r3, [pc, #128]	; (801a014 <tcp_input+0x808>)
 8019f94:	681b      	ldr	r3, [r3, #0]
 8019f96:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019f98:	4b1b      	ldr	r3, [pc, #108]	; (801a008 <tcp_input+0x7fc>)
 8019f9a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019f9c:	885b      	ldrh	r3, [r3, #2]
 8019f9e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8019fa0:	4a19      	ldr	r2, [pc, #100]	; (801a008 <tcp_input+0x7fc>)
 8019fa2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8019fa4:	8812      	ldrh	r2, [r2, #0]
 8019fa6:	b292      	uxth	r2, r2
 8019fa8:	9202      	str	r2, [sp, #8]
 8019faa:	9301      	str	r3, [sp, #4]
 8019fac:	4b1a      	ldr	r3, [pc, #104]	; (801a018 <tcp_input+0x80c>)
 8019fae:	9300      	str	r3, [sp, #0]
 8019fb0:	4b1a      	ldr	r3, [pc, #104]	; (801a01c <tcp_input+0x810>)
 8019fb2:	4602      	mov	r2, r0
 8019fb4:	2000      	movs	r0, #0
 8019fb6:	f003 fc7d 	bl	801d8b4 <tcp_rst>
    pbuf_free(p);
 8019fba:	6878      	ldr	r0, [r7, #4]
 8019fbc:	f7fd fb4c 	bl	8017658 <pbuf_free>
  return;
 8019fc0:	e00c      	b.n	8019fdc <tcp_input+0x7d0>
    goto dropped;
 8019fc2:	bf00      	nop
 8019fc4:	e006      	b.n	8019fd4 <tcp_input+0x7c8>
    goto dropped;
 8019fc6:	bf00      	nop
 8019fc8:	e004      	b.n	8019fd4 <tcp_input+0x7c8>
    goto dropped;
 8019fca:	bf00      	nop
 8019fcc:	e002      	b.n	8019fd4 <tcp_input+0x7c8>
      goto dropped;
 8019fce:	bf00      	nop
 8019fd0:	e000      	b.n	8019fd4 <tcp_input+0x7c8>
      goto dropped;
 8019fd2:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8019fd4:	6878      	ldr	r0, [r7, #4]
 8019fd6:	f7fd fb3f 	bl	8017658 <pbuf_free>
 8019fda:	e000      	b.n	8019fde <tcp_input+0x7d2>
  return;
 8019fdc:	bf00      	nop
}
 8019fde:	3724      	adds	r7, #36	; 0x24
 8019fe0:	46bd      	mov	sp, r7
 8019fe2:	bd90      	pop	{r4, r7, pc}
 8019fe4:	2001b9a4 	.word	0x2001b9a4
 8019fe8:	2000530d 	.word	0x2000530d
 8019fec:	2001b990 	.word	0x2001b990
 8019ff0:	20005308 	.word	0x20005308
 8019ff4:	20005310 	.word	0x20005310
 8019ff8:	08025874 	.word	0x08025874
 8019ffc:	08025a28 	.word	0x08025a28
 801a000:	080258c0 	.word	0x080258c0
 801a004:	200052e0 	.word	0x200052e0
 801a008:	200052f0 	.word	0x200052f0
 801a00c:	20005304 	.word	0x20005304
 801a010:	2000530a 	.word	0x2000530a
 801a014:	20005300 	.word	0x20005300
 801a018:	200110cc 	.word	0x200110cc
 801a01c:	200110d0 	.word	0x200110d0

0801a020 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801a020:	b580      	push	{r7, lr}
 801a022:	b082      	sub	sp, #8
 801a024:	af00      	add	r7, sp, #0
 801a026:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	d106      	bne.n	801a03c <tcp_input_delayed_close+0x1c>
 801a02e:	4b17      	ldr	r3, [pc, #92]	; (801a08c <tcp_input_delayed_close+0x6c>)
 801a030:	f240 225a 	movw	r2, #602	; 0x25a
 801a034:	4916      	ldr	r1, [pc, #88]	; (801a090 <tcp_input_delayed_close+0x70>)
 801a036:	4817      	ldr	r0, [pc, #92]	; (801a094 <tcp_input_delayed_close+0x74>)
 801a038:	f007 fa74 	bl	8021524 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801a03c:	4b16      	ldr	r3, [pc, #88]	; (801a098 <tcp_input_delayed_close+0x78>)
 801a03e:	781b      	ldrb	r3, [r3, #0]
 801a040:	f003 0310 	and.w	r3, r3, #16
 801a044:	2b00      	cmp	r3, #0
 801a046:	d01c      	beq.n	801a082 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801a048:	687b      	ldr	r3, [r7, #4]
 801a04a:	8b5b      	ldrh	r3, [r3, #26]
 801a04c:	f003 0310 	and.w	r3, r3, #16
 801a050:	2b00      	cmp	r3, #0
 801a052:	d10d      	bne.n	801a070 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	d008      	beq.n	801a070 <tcp_input_delayed_close+0x50>
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a064:	687a      	ldr	r2, [r7, #4]
 801a066:	6912      	ldr	r2, [r2, #16]
 801a068:	f06f 010e 	mvn.w	r1, #14
 801a06c:	4610      	mov	r0, r2
 801a06e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801a070:	6879      	ldr	r1, [r7, #4]
 801a072:	480a      	ldr	r0, [pc, #40]	; (801a09c <tcp_input_delayed_close+0x7c>)
 801a074:	f7ff fa52 	bl	801951c <tcp_pcb_remove>
    tcp_free(pcb);
 801a078:	6878      	ldr	r0, [r7, #4]
 801a07a:	f7fd fd99 	bl	8017bb0 <tcp_free>
    return 1;
 801a07e:	2301      	movs	r3, #1
 801a080:	e000      	b.n	801a084 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801a082:	2300      	movs	r3, #0
}
 801a084:	4618      	mov	r0, r3
 801a086:	3708      	adds	r7, #8
 801a088:	46bd      	mov	sp, r7
 801a08a:	bd80      	pop	{r7, pc}
 801a08c:	08025874 	.word	0x08025874
 801a090:	08025a44 	.word	0x08025a44
 801a094:	080258c0 	.word	0x080258c0
 801a098:	2000530d 	.word	0x2000530d
 801a09c:	2001b990 	.word	0x2001b990

0801a0a0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801a0a0:	b590      	push	{r4, r7, lr}
 801a0a2:	b08b      	sub	sp, #44	; 0x2c
 801a0a4:	af04      	add	r7, sp, #16
 801a0a6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801a0a8:	4b6f      	ldr	r3, [pc, #444]	; (801a268 <tcp_listen_input+0x1c8>)
 801a0aa:	781b      	ldrb	r3, [r3, #0]
 801a0ac:	f003 0304 	and.w	r3, r3, #4
 801a0b0:	2b00      	cmp	r3, #0
 801a0b2:	f040 80d2 	bne.w	801a25a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	2b00      	cmp	r3, #0
 801a0ba:	d106      	bne.n	801a0ca <tcp_listen_input+0x2a>
 801a0bc:	4b6b      	ldr	r3, [pc, #428]	; (801a26c <tcp_listen_input+0x1cc>)
 801a0be:	f240 2281 	movw	r2, #641	; 0x281
 801a0c2:	496b      	ldr	r1, [pc, #428]	; (801a270 <tcp_listen_input+0x1d0>)
 801a0c4:	486b      	ldr	r0, [pc, #428]	; (801a274 <tcp_listen_input+0x1d4>)
 801a0c6:	f007 fa2d 	bl	8021524 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801a0ca:	4b67      	ldr	r3, [pc, #412]	; (801a268 <tcp_listen_input+0x1c8>)
 801a0cc:	781b      	ldrb	r3, [r3, #0]
 801a0ce:	f003 0310 	and.w	r3, r3, #16
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	d019      	beq.n	801a10a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a0d6:	4b68      	ldr	r3, [pc, #416]	; (801a278 <tcp_listen_input+0x1d8>)
 801a0d8:	6819      	ldr	r1, [r3, #0]
 801a0da:	4b68      	ldr	r3, [pc, #416]	; (801a27c <tcp_listen_input+0x1dc>)
 801a0dc:	881b      	ldrh	r3, [r3, #0]
 801a0de:	461a      	mov	r2, r3
 801a0e0:	4b67      	ldr	r3, [pc, #412]	; (801a280 <tcp_listen_input+0x1e0>)
 801a0e2:	681b      	ldr	r3, [r3, #0]
 801a0e4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a0e6:	4b67      	ldr	r3, [pc, #412]	; (801a284 <tcp_listen_input+0x1e4>)
 801a0e8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a0ea:	885b      	ldrh	r3, [r3, #2]
 801a0ec:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a0ee:	4a65      	ldr	r2, [pc, #404]	; (801a284 <tcp_listen_input+0x1e4>)
 801a0f0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a0f2:	8812      	ldrh	r2, [r2, #0]
 801a0f4:	b292      	uxth	r2, r2
 801a0f6:	9202      	str	r2, [sp, #8]
 801a0f8:	9301      	str	r3, [sp, #4]
 801a0fa:	4b63      	ldr	r3, [pc, #396]	; (801a288 <tcp_listen_input+0x1e8>)
 801a0fc:	9300      	str	r3, [sp, #0]
 801a0fe:	4b63      	ldr	r3, [pc, #396]	; (801a28c <tcp_listen_input+0x1ec>)
 801a100:	4602      	mov	r2, r0
 801a102:	6878      	ldr	r0, [r7, #4]
 801a104:	f003 fbd6 	bl	801d8b4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801a108:	e0a9      	b.n	801a25e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801a10a:	4b57      	ldr	r3, [pc, #348]	; (801a268 <tcp_listen_input+0x1c8>)
 801a10c:	781b      	ldrb	r3, [r3, #0]
 801a10e:	f003 0302 	and.w	r3, r3, #2
 801a112:	2b00      	cmp	r3, #0
 801a114:	f000 80a3 	beq.w	801a25e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801a118:	687b      	ldr	r3, [r7, #4]
 801a11a:	7d5b      	ldrb	r3, [r3, #21]
 801a11c:	4618      	mov	r0, r3
 801a11e:	f7ff f85b 	bl	80191d8 <tcp_alloc>
 801a122:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801a124:	697b      	ldr	r3, [r7, #20]
 801a126:	2b00      	cmp	r3, #0
 801a128:	d111      	bne.n	801a14e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801a12a:	687b      	ldr	r3, [r7, #4]
 801a12c:	699b      	ldr	r3, [r3, #24]
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d00a      	beq.n	801a148 <tcp_listen_input+0xa8>
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	699b      	ldr	r3, [r3, #24]
 801a136:	687a      	ldr	r2, [r7, #4]
 801a138:	6910      	ldr	r0, [r2, #16]
 801a13a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a13e:	2100      	movs	r1, #0
 801a140:	4798      	blx	r3
 801a142:	4603      	mov	r3, r0
 801a144:	73bb      	strb	r3, [r7, #14]
      return;
 801a146:	e08b      	b.n	801a260 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801a148:	23f0      	movs	r3, #240	; 0xf0
 801a14a:	73bb      	strb	r3, [r7, #14]
      return;
 801a14c:	e088      	b.n	801a260 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801a14e:	4b50      	ldr	r3, [pc, #320]	; (801a290 <tcp_listen_input+0x1f0>)
 801a150:	695a      	ldr	r2, [r3, #20]
 801a152:	697b      	ldr	r3, [r7, #20]
 801a154:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801a156:	4b4e      	ldr	r3, [pc, #312]	; (801a290 <tcp_listen_input+0x1f0>)
 801a158:	691a      	ldr	r2, [r3, #16]
 801a15a:	697b      	ldr	r3, [r7, #20]
 801a15c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	8ada      	ldrh	r2, [r3, #22]
 801a162:	697b      	ldr	r3, [r7, #20]
 801a164:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801a166:	4b47      	ldr	r3, [pc, #284]	; (801a284 <tcp_listen_input+0x1e4>)
 801a168:	681b      	ldr	r3, [r3, #0]
 801a16a:	881b      	ldrh	r3, [r3, #0]
 801a16c:	b29a      	uxth	r2, r3
 801a16e:	697b      	ldr	r3, [r7, #20]
 801a170:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801a172:	697b      	ldr	r3, [r7, #20]
 801a174:	2203      	movs	r2, #3
 801a176:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801a178:	4b41      	ldr	r3, [pc, #260]	; (801a280 <tcp_listen_input+0x1e0>)
 801a17a:	681b      	ldr	r3, [r3, #0]
 801a17c:	1c5a      	adds	r2, r3, #1
 801a17e:	697b      	ldr	r3, [r7, #20]
 801a180:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801a182:	697b      	ldr	r3, [r7, #20]
 801a184:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a186:	697b      	ldr	r3, [r7, #20]
 801a188:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801a18a:	6978      	ldr	r0, [r7, #20]
 801a18c:	f7ff fa5a 	bl	8019644 <tcp_next_iss>
 801a190:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801a192:	697b      	ldr	r3, [r7, #20]
 801a194:	693a      	ldr	r2, [r7, #16]
 801a196:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801a198:	697b      	ldr	r3, [r7, #20]
 801a19a:	693a      	ldr	r2, [r7, #16]
 801a19c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801a19e:	697b      	ldr	r3, [r7, #20]
 801a1a0:	693a      	ldr	r2, [r7, #16]
 801a1a2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801a1a4:	697b      	ldr	r3, [r7, #20]
 801a1a6:	693a      	ldr	r2, [r7, #16]
 801a1a8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801a1aa:	4b35      	ldr	r3, [pc, #212]	; (801a280 <tcp_listen_input+0x1e0>)
 801a1ac:	681b      	ldr	r3, [r3, #0]
 801a1ae:	1e5a      	subs	r2, r3, #1
 801a1b0:	697b      	ldr	r3, [r7, #20]
 801a1b2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	691a      	ldr	r2, [r3, #16]
 801a1b8:	697b      	ldr	r3, [r7, #20]
 801a1ba:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801a1bc:	697b      	ldr	r3, [r7, #20]
 801a1be:	687a      	ldr	r2, [r7, #4]
 801a1c0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801a1c2:	687b      	ldr	r3, [r7, #4]
 801a1c4:	7a5b      	ldrb	r3, [r3, #9]
 801a1c6:	f003 030c 	and.w	r3, r3, #12
 801a1ca:	b2da      	uxtb	r2, r3
 801a1cc:	697b      	ldr	r3, [r7, #20]
 801a1ce:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	7a1a      	ldrb	r2, [r3, #8]
 801a1d4:	697b      	ldr	r3, [r7, #20]
 801a1d6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801a1d8:	4b2e      	ldr	r3, [pc, #184]	; (801a294 <tcp_listen_input+0x1f4>)
 801a1da:	681a      	ldr	r2, [r3, #0]
 801a1dc:	697b      	ldr	r3, [r7, #20]
 801a1de:	60da      	str	r2, [r3, #12]
 801a1e0:	4a2c      	ldr	r2, [pc, #176]	; (801a294 <tcp_listen_input+0x1f4>)
 801a1e2:	697b      	ldr	r3, [r7, #20]
 801a1e4:	6013      	str	r3, [r2, #0]
 801a1e6:	f003 fd27 	bl	801dc38 <tcp_timer_needed>
 801a1ea:	4b2b      	ldr	r3, [pc, #172]	; (801a298 <tcp_listen_input+0x1f8>)
 801a1ec:	2201      	movs	r2, #1
 801a1ee:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801a1f0:	6978      	ldr	r0, [r7, #20]
 801a1f2:	f001 fd8d 	bl	801bd10 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801a1f6:	4b23      	ldr	r3, [pc, #140]	; (801a284 <tcp_listen_input+0x1e4>)
 801a1f8:	681b      	ldr	r3, [r3, #0]
 801a1fa:	89db      	ldrh	r3, [r3, #14]
 801a1fc:	b29a      	uxth	r2, r3
 801a1fe:	697b      	ldr	r3, [r7, #20]
 801a200:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801a204:	697b      	ldr	r3, [r7, #20]
 801a206:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a20a:	697b      	ldr	r3, [r7, #20]
 801a20c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801a210:	697b      	ldr	r3, [r7, #20]
 801a212:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801a214:	697b      	ldr	r3, [r7, #20]
 801a216:	3304      	adds	r3, #4
 801a218:	4618      	mov	r0, r3
 801a21a:	f005 f91b 	bl	801f454 <ip4_route>
 801a21e:	4601      	mov	r1, r0
 801a220:	697b      	ldr	r3, [r7, #20]
 801a222:	3304      	adds	r3, #4
 801a224:	461a      	mov	r2, r3
 801a226:	4620      	mov	r0, r4
 801a228:	f7ff fa32 	bl	8019690 <tcp_eff_send_mss_netif>
 801a22c:	4603      	mov	r3, r0
 801a22e:	461a      	mov	r2, r3
 801a230:	697b      	ldr	r3, [r7, #20]
 801a232:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801a234:	2112      	movs	r1, #18
 801a236:	6978      	ldr	r0, [r7, #20]
 801a238:	f002 fc9a 	bl	801cb70 <tcp_enqueue_flags>
 801a23c:	4603      	mov	r3, r0
 801a23e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801a240:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a244:	2b00      	cmp	r3, #0
 801a246:	d004      	beq.n	801a252 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801a248:	2100      	movs	r1, #0
 801a24a:	6978      	ldr	r0, [r7, #20]
 801a24c:	f7fd feda 	bl	8018004 <tcp_abandon>
      return;
 801a250:	e006      	b.n	801a260 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801a252:	6978      	ldr	r0, [r7, #20]
 801a254:	f002 fd7a 	bl	801cd4c <tcp_output>
  return;
 801a258:	e001      	b.n	801a25e <tcp_listen_input+0x1be>
    return;
 801a25a:	bf00      	nop
 801a25c:	e000      	b.n	801a260 <tcp_listen_input+0x1c0>
  return;
 801a25e:	bf00      	nop
}
 801a260:	371c      	adds	r7, #28
 801a262:	46bd      	mov	sp, r7
 801a264:	bd90      	pop	{r4, r7, pc}
 801a266:	bf00      	nop
 801a268:	2000530c 	.word	0x2000530c
 801a26c:	08025874 	.word	0x08025874
 801a270:	08025a6c 	.word	0x08025a6c
 801a274:	080258c0 	.word	0x080258c0
 801a278:	20005304 	.word	0x20005304
 801a27c:	2000530a 	.word	0x2000530a
 801a280:	20005300 	.word	0x20005300
 801a284:	200052f0 	.word	0x200052f0
 801a288:	200110cc 	.word	0x200110cc
 801a28c:	200110d0 	.word	0x200110d0
 801a290:	200110bc 	.word	0x200110bc
 801a294:	2001b990 	.word	0x2001b990
 801a298:	2001b98c 	.word	0x2001b98c

0801a29c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801a29c:	b580      	push	{r7, lr}
 801a29e:	b086      	sub	sp, #24
 801a2a0:	af04      	add	r7, sp, #16
 801a2a2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801a2a4:	4b2f      	ldr	r3, [pc, #188]	; (801a364 <tcp_timewait_input+0xc8>)
 801a2a6:	781b      	ldrb	r3, [r3, #0]
 801a2a8:	f003 0304 	and.w	r3, r3, #4
 801a2ac:	2b00      	cmp	r3, #0
 801a2ae:	d153      	bne.n	801a358 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	2b00      	cmp	r3, #0
 801a2b4:	d106      	bne.n	801a2c4 <tcp_timewait_input+0x28>
 801a2b6:	4b2c      	ldr	r3, [pc, #176]	; (801a368 <tcp_timewait_input+0xcc>)
 801a2b8:	f240 22ee 	movw	r2, #750	; 0x2ee
 801a2bc:	492b      	ldr	r1, [pc, #172]	; (801a36c <tcp_timewait_input+0xd0>)
 801a2be:	482c      	ldr	r0, [pc, #176]	; (801a370 <tcp_timewait_input+0xd4>)
 801a2c0:	f007 f930 	bl	8021524 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801a2c4:	4b27      	ldr	r3, [pc, #156]	; (801a364 <tcp_timewait_input+0xc8>)
 801a2c6:	781b      	ldrb	r3, [r3, #0]
 801a2c8:	f003 0302 	and.w	r3, r3, #2
 801a2cc:	2b00      	cmp	r3, #0
 801a2ce:	d02a      	beq.n	801a326 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801a2d0:	4b28      	ldr	r3, [pc, #160]	; (801a374 <tcp_timewait_input+0xd8>)
 801a2d2:	681a      	ldr	r2, [r3, #0]
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2d8:	1ad3      	subs	r3, r2, r3
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	db2d      	blt.n	801a33a <tcp_timewait_input+0x9e>
 801a2de:	4b25      	ldr	r3, [pc, #148]	; (801a374 <tcp_timewait_input+0xd8>)
 801a2e0:	681a      	ldr	r2, [r3, #0]
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2e6:	6879      	ldr	r1, [r7, #4]
 801a2e8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a2ea:	440b      	add	r3, r1
 801a2ec:	1ad3      	subs	r3, r2, r3
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	dc23      	bgt.n	801a33a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a2f2:	4b21      	ldr	r3, [pc, #132]	; (801a378 <tcp_timewait_input+0xdc>)
 801a2f4:	6819      	ldr	r1, [r3, #0]
 801a2f6:	4b21      	ldr	r3, [pc, #132]	; (801a37c <tcp_timewait_input+0xe0>)
 801a2f8:	881b      	ldrh	r3, [r3, #0]
 801a2fa:	461a      	mov	r2, r3
 801a2fc:	4b1d      	ldr	r3, [pc, #116]	; (801a374 <tcp_timewait_input+0xd8>)
 801a2fe:	681b      	ldr	r3, [r3, #0]
 801a300:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a302:	4b1f      	ldr	r3, [pc, #124]	; (801a380 <tcp_timewait_input+0xe4>)
 801a304:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a306:	885b      	ldrh	r3, [r3, #2]
 801a308:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a30a:	4a1d      	ldr	r2, [pc, #116]	; (801a380 <tcp_timewait_input+0xe4>)
 801a30c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a30e:	8812      	ldrh	r2, [r2, #0]
 801a310:	b292      	uxth	r2, r2
 801a312:	9202      	str	r2, [sp, #8]
 801a314:	9301      	str	r3, [sp, #4]
 801a316:	4b1b      	ldr	r3, [pc, #108]	; (801a384 <tcp_timewait_input+0xe8>)
 801a318:	9300      	str	r3, [sp, #0]
 801a31a:	4b1b      	ldr	r3, [pc, #108]	; (801a388 <tcp_timewait_input+0xec>)
 801a31c:	4602      	mov	r2, r0
 801a31e:	6878      	ldr	r0, [r7, #4]
 801a320:	f003 fac8 	bl	801d8b4 <tcp_rst>
      return;
 801a324:	e01b      	b.n	801a35e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801a326:	4b0f      	ldr	r3, [pc, #60]	; (801a364 <tcp_timewait_input+0xc8>)
 801a328:	781b      	ldrb	r3, [r3, #0]
 801a32a:	f003 0301 	and.w	r3, r3, #1
 801a32e:	2b00      	cmp	r3, #0
 801a330:	d003      	beq.n	801a33a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801a332:	4b16      	ldr	r3, [pc, #88]	; (801a38c <tcp_timewait_input+0xf0>)
 801a334:	681a      	ldr	r2, [r3, #0]
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801a33a:	4b10      	ldr	r3, [pc, #64]	; (801a37c <tcp_timewait_input+0xe0>)
 801a33c:	881b      	ldrh	r3, [r3, #0]
 801a33e:	2b00      	cmp	r3, #0
 801a340:	d00c      	beq.n	801a35c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801a342:	687b      	ldr	r3, [r7, #4]
 801a344:	8b5b      	ldrh	r3, [r3, #26]
 801a346:	f043 0302 	orr.w	r3, r3, #2
 801a34a:	b29a      	uxth	r2, r3
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801a350:	6878      	ldr	r0, [r7, #4]
 801a352:	f002 fcfb 	bl	801cd4c <tcp_output>
  }
  return;
 801a356:	e001      	b.n	801a35c <tcp_timewait_input+0xc0>
    return;
 801a358:	bf00      	nop
 801a35a:	e000      	b.n	801a35e <tcp_timewait_input+0xc2>
  return;
 801a35c:	bf00      	nop
}
 801a35e:	3708      	adds	r7, #8
 801a360:	46bd      	mov	sp, r7
 801a362:	bd80      	pop	{r7, pc}
 801a364:	2000530c 	.word	0x2000530c
 801a368:	08025874 	.word	0x08025874
 801a36c:	08025a8c 	.word	0x08025a8c
 801a370:	080258c0 	.word	0x080258c0
 801a374:	20005300 	.word	0x20005300
 801a378:	20005304 	.word	0x20005304
 801a37c:	2000530a 	.word	0x2000530a
 801a380:	200052f0 	.word	0x200052f0
 801a384:	200110cc 	.word	0x200110cc
 801a388:	200110d0 	.word	0x200110d0
 801a38c:	2001b994 	.word	0x2001b994

0801a390 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801a390:	b590      	push	{r4, r7, lr}
 801a392:	b08d      	sub	sp, #52	; 0x34
 801a394:	af04      	add	r7, sp, #16
 801a396:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801a398:	2300      	movs	r3, #0
 801a39a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801a39c:	2300      	movs	r3, #0
 801a39e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801a3a0:	687b      	ldr	r3, [r7, #4]
 801a3a2:	2b00      	cmp	r3, #0
 801a3a4:	d106      	bne.n	801a3b4 <tcp_process+0x24>
 801a3a6:	4ba5      	ldr	r3, [pc, #660]	; (801a63c <tcp_process+0x2ac>)
 801a3a8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801a3ac:	49a4      	ldr	r1, [pc, #656]	; (801a640 <tcp_process+0x2b0>)
 801a3ae:	48a5      	ldr	r0, [pc, #660]	; (801a644 <tcp_process+0x2b4>)
 801a3b0:	f007 f8b8 	bl	8021524 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801a3b4:	4ba4      	ldr	r3, [pc, #656]	; (801a648 <tcp_process+0x2b8>)
 801a3b6:	781b      	ldrb	r3, [r3, #0]
 801a3b8:	f003 0304 	and.w	r3, r3, #4
 801a3bc:	2b00      	cmp	r3, #0
 801a3be:	d04e      	beq.n	801a45e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	7d1b      	ldrb	r3, [r3, #20]
 801a3c4:	2b02      	cmp	r3, #2
 801a3c6:	d108      	bne.n	801a3da <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a3cc:	4b9f      	ldr	r3, [pc, #636]	; (801a64c <tcp_process+0x2bc>)
 801a3ce:	681b      	ldr	r3, [r3, #0]
 801a3d0:	429a      	cmp	r2, r3
 801a3d2:	d123      	bne.n	801a41c <tcp_process+0x8c>
        acceptable = 1;
 801a3d4:	2301      	movs	r3, #1
 801a3d6:	76fb      	strb	r3, [r7, #27]
 801a3d8:	e020      	b.n	801a41c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a3de:	4b9c      	ldr	r3, [pc, #624]	; (801a650 <tcp_process+0x2c0>)
 801a3e0:	681b      	ldr	r3, [r3, #0]
 801a3e2:	429a      	cmp	r2, r3
 801a3e4:	d102      	bne.n	801a3ec <tcp_process+0x5c>
        acceptable = 1;
 801a3e6:	2301      	movs	r3, #1
 801a3e8:	76fb      	strb	r3, [r7, #27]
 801a3ea:	e017      	b.n	801a41c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801a3ec:	4b98      	ldr	r3, [pc, #608]	; (801a650 <tcp_process+0x2c0>)
 801a3ee:	681a      	ldr	r2, [r3, #0]
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3f4:	1ad3      	subs	r3, r2, r3
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	db10      	blt.n	801a41c <tcp_process+0x8c>
 801a3fa:	4b95      	ldr	r3, [pc, #596]	; (801a650 <tcp_process+0x2c0>)
 801a3fc:	681a      	ldr	r2, [r3, #0]
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a402:	6879      	ldr	r1, [r7, #4]
 801a404:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801a406:	440b      	add	r3, r1
 801a408:	1ad3      	subs	r3, r2, r3
 801a40a:	2b00      	cmp	r3, #0
 801a40c:	dc06      	bgt.n	801a41c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	8b5b      	ldrh	r3, [r3, #26]
 801a412:	f043 0302 	orr.w	r3, r3, #2
 801a416:	b29a      	uxth	r2, r3
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801a41c:	7efb      	ldrb	r3, [r7, #27]
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d01b      	beq.n	801a45a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	7d1b      	ldrb	r3, [r3, #20]
 801a426:	2b00      	cmp	r3, #0
 801a428:	d106      	bne.n	801a438 <tcp_process+0xa8>
 801a42a:	4b84      	ldr	r3, [pc, #528]	; (801a63c <tcp_process+0x2ac>)
 801a42c:	f44f 724e 	mov.w	r2, #824	; 0x338
 801a430:	4988      	ldr	r1, [pc, #544]	; (801a654 <tcp_process+0x2c4>)
 801a432:	4884      	ldr	r0, [pc, #528]	; (801a644 <tcp_process+0x2b4>)
 801a434:	f007 f876 	bl	8021524 <iprintf>
      recv_flags |= TF_RESET;
 801a438:	4b87      	ldr	r3, [pc, #540]	; (801a658 <tcp_process+0x2c8>)
 801a43a:	781b      	ldrb	r3, [r3, #0]
 801a43c:	f043 0308 	orr.w	r3, r3, #8
 801a440:	b2da      	uxtb	r2, r3
 801a442:	4b85      	ldr	r3, [pc, #532]	; (801a658 <tcp_process+0x2c8>)
 801a444:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	8b5b      	ldrh	r3, [r3, #26]
 801a44a:	f023 0301 	bic.w	r3, r3, #1
 801a44e:	b29a      	uxth	r2, r3
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801a454:	f06f 030d 	mvn.w	r3, #13
 801a458:	e37a      	b.n	801ab50 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801a45a:	2300      	movs	r3, #0
 801a45c:	e378      	b.n	801ab50 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801a45e:	4b7a      	ldr	r3, [pc, #488]	; (801a648 <tcp_process+0x2b8>)
 801a460:	781b      	ldrb	r3, [r3, #0]
 801a462:	f003 0302 	and.w	r3, r3, #2
 801a466:	2b00      	cmp	r3, #0
 801a468:	d010      	beq.n	801a48c <tcp_process+0xfc>
 801a46a:	687b      	ldr	r3, [r7, #4]
 801a46c:	7d1b      	ldrb	r3, [r3, #20]
 801a46e:	2b02      	cmp	r3, #2
 801a470:	d00c      	beq.n	801a48c <tcp_process+0xfc>
 801a472:	687b      	ldr	r3, [r7, #4]
 801a474:	7d1b      	ldrb	r3, [r3, #20]
 801a476:	2b03      	cmp	r3, #3
 801a478:	d008      	beq.n	801a48c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801a47a:	687b      	ldr	r3, [r7, #4]
 801a47c:	8b5b      	ldrh	r3, [r3, #26]
 801a47e:	f043 0302 	orr.w	r3, r3, #2
 801a482:	b29a      	uxth	r2, r3
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801a488:	2300      	movs	r3, #0
 801a48a:	e361      	b.n	801ab50 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	8b5b      	ldrh	r3, [r3, #26]
 801a490:	f003 0310 	and.w	r3, r3, #16
 801a494:	2b00      	cmp	r3, #0
 801a496:	d103      	bne.n	801a4a0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801a498:	4b70      	ldr	r3, [pc, #448]	; (801a65c <tcp_process+0x2cc>)
 801a49a:	681a      	ldr	r2, [r3, #0]
 801a49c:	687b      	ldr	r3, [r7, #4]
 801a49e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	2200      	movs	r2, #0
 801a4a4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	2200      	movs	r2, #0
 801a4ac:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801a4b0:	6878      	ldr	r0, [r7, #4]
 801a4b2:	f001 fc2d 	bl	801bd10 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801a4b6:	687b      	ldr	r3, [r7, #4]
 801a4b8:	7d1b      	ldrb	r3, [r3, #20]
 801a4ba:	3b02      	subs	r3, #2
 801a4bc:	2b07      	cmp	r3, #7
 801a4be:	f200 8337 	bhi.w	801ab30 <tcp_process+0x7a0>
 801a4c2:	a201      	add	r2, pc, #4	; (adr r2, 801a4c8 <tcp_process+0x138>)
 801a4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a4c8:	0801a4e9 	.word	0x0801a4e9
 801a4cc:	0801a719 	.word	0x0801a719
 801a4d0:	0801a891 	.word	0x0801a891
 801a4d4:	0801a8bb 	.word	0x0801a8bb
 801a4d8:	0801a9df 	.word	0x0801a9df
 801a4dc:	0801a891 	.word	0x0801a891
 801a4e0:	0801aa6b 	.word	0x0801aa6b
 801a4e4:	0801aafb 	.word	0x0801aafb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801a4e8:	4b57      	ldr	r3, [pc, #348]	; (801a648 <tcp_process+0x2b8>)
 801a4ea:	781b      	ldrb	r3, [r3, #0]
 801a4ec:	f003 0310 	and.w	r3, r3, #16
 801a4f0:	2b00      	cmp	r3, #0
 801a4f2:	f000 80e4 	beq.w	801a6be <tcp_process+0x32e>
 801a4f6:	4b54      	ldr	r3, [pc, #336]	; (801a648 <tcp_process+0x2b8>)
 801a4f8:	781b      	ldrb	r3, [r3, #0]
 801a4fa:	f003 0302 	and.w	r3, r3, #2
 801a4fe:	2b00      	cmp	r3, #0
 801a500:	f000 80dd 	beq.w	801a6be <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801a504:	687b      	ldr	r3, [r7, #4]
 801a506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a508:	1c5a      	adds	r2, r3, #1
 801a50a:	4b50      	ldr	r3, [pc, #320]	; (801a64c <tcp_process+0x2bc>)
 801a50c:	681b      	ldr	r3, [r3, #0]
 801a50e:	429a      	cmp	r2, r3
 801a510:	f040 80d5 	bne.w	801a6be <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801a514:	4b4e      	ldr	r3, [pc, #312]	; (801a650 <tcp_process+0x2c0>)
 801a516:	681b      	ldr	r3, [r3, #0]
 801a518:	1c5a      	adds	r2, r3, #1
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801a526:	4b49      	ldr	r3, [pc, #292]	; (801a64c <tcp_process+0x2bc>)
 801a528:	681a      	ldr	r2, [r3, #0]
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801a52e:	4b4c      	ldr	r3, [pc, #304]	; (801a660 <tcp_process+0x2d0>)
 801a530:	681b      	ldr	r3, [r3, #0]
 801a532:	89db      	ldrh	r3, [r3, #14]
 801a534:	b29a      	uxth	r2, r3
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801a53c:	687b      	ldr	r3, [r7, #4]
 801a53e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801a548:	4b41      	ldr	r3, [pc, #260]	; (801a650 <tcp_process+0x2c0>)
 801a54a:	681b      	ldr	r3, [r3, #0]
 801a54c:	1e5a      	subs	r2, r3, #1
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	2204      	movs	r2, #4
 801a556:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801a558:	687b      	ldr	r3, [r7, #4]
 801a55a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	3304      	adds	r3, #4
 801a560:	4618      	mov	r0, r3
 801a562:	f004 ff77 	bl	801f454 <ip4_route>
 801a566:	4601      	mov	r1, r0
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	3304      	adds	r3, #4
 801a56c:	461a      	mov	r2, r3
 801a56e:	4620      	mov	r0, r4
 801a570:	f7ff f88e 	bl	8019690 <tcp_eff_send_mss_netif>
 801a574:	4603      	mov	r3, r0
 801a576:	461a      	mov	r2, r3
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a580:	009a      	lsls	r2, r3, #2
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a586:	005b      	lsls	r3, r3, #1
 801a588:	f241 111c 	movw	r1, #4380	; 0x111c
 801a58c:	428b      	cmp	r3, r1
 801a58e:	bf38      	it	cc
 801a590:	460b      	movcc	r3, r1
 801a592:	429a      	cmp	r2, r3
 801a594:	d204      	bcs.n	801a5a0 <tcp_process+0x210>
 801a596:	687b      	ldr	r3, [r7, #4]
 801a598:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a59a:	009b      	lsls	r3, r3, #2
 801a59c:	b29b      	uxth	r3, r3
 801a59e:	e00d      	b.n	801a5bc <tcp_process+0x22c>
 801a5a0:	687b      	ldr	r3, [r7, #4]
 801a5a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a5a4:	005b      	lsls	r3, r3, #1
 801a5a6:	f241 121c 	movw	r2, #4380	; 0x111c
 801a5aa:	4293      	cmp	r3, r2
 801a5ac:	d904      	bls.n	801a5b8 <tcp_process+0x228>
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a5b2:	005b      	lsls	r3, r3, #1
 801a5b4:	b29b      	uxth	r3, r3
 801a5b6:	e001      	b.n	801a5bc <tcp_process+0x22c>
 801a5b8:	f241 131c 	movw	r3, #4380	; 0x111c
 801a5bc:	687a      	ldr	r2, [r7, #4]
 801a5be:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a5c8:	2b00      	cmp	r3, #0
 801a5ca:	d106      	bne.n	801a5da <tcp_process+0x24a>
 801a5cc:	4b1b      	ldr	r3, [pc, #108]	; (801a63c <tcp_process+0x2ac>)
 801a5ce:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801a5d2:	4924      	ldr	r1, [pc, #144]	; (801a664 <tcp_process+0x2d4>)
 801a5d4:	481b      	ldr	r0, [pc, #108]	; (801a644 <tcp_process+0x2b4>)
 801a5d6:	f006 ffa5 	bl	8021524 <iprintf>
        --pcb->snd_queuelen;
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801a5e0:	3b01      	subs	r3, #1
 801a5e2:	b29a      	uxth	r2, r3
 801a5e4:	687b      	ldr	r3, [r7, #4]
 801a5e6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a5ee:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801a5f0:	69fb      	ldr	r3, [r7, #28]
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	d111      	bne.n	801a61a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a5fa:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801a5fc:	69fb      	ldr	r3, [r7, #28]
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d106      	bne.n	801a610 <tcp_process+0x280>
 801a602:	4b0e      	ldr	r3, [pc, #56]	; (801a63c <tcp_process+0x2ac>)
 801a604:	f44f 725d 	mov.w	r2, #884	; 0x374
 801a608:	4917      	ldr	r1, [pc, #92]	; (801a668 <tcp_process+0x2d8>)
 801a60a:	480e      	ldr	r0, [pc, #56]	; (801a644 <tcp_process+0x2b4>)
 801a60c:	f006 ff8a 	bl	8021524 <iprintf>
          pcb->unsent = rseg->next;
 801a610:	69fb      	ldr	r3, [r7, #28]
 801a612:	681a      	ldr	r2, [r3, #0]
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	66da      	str	r2, [r3, #108]	; 0x6c
 801a618:	e003      	b.n	801a622 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801a61a:	69fb      	ldr	r3, [r7, #28]
 801a61c:	681a      	ldr	r2, [r3, #0]
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801a622:	69f8      	ldr	r0, [r7, #28]
 801a624:	f7fe fc51 	bl	8018eca <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a62c:	2b00      	cmp	r3, #0
 801a62e:	d11d      	bne.n	801a66c <tcp_process+0x2dc>
          pcb->rtime = -1;
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a636:	861a      	strh	r2, [r3, #48]	; 0x30
 801a638:	e01f      	b.n	801a67a <tcp_process+0x2ea>
 801a63a:	bf00      	nop
 801a63c:	08025874 	.word	0x08025874
 801a640:	08025aac 	.word	0x08025aac
 801a644:	080258c0 	.word	0x080258c0
 801a648:	2000530c 	.word	0x2000530c
 801a64c:	20005304 	.word	0x20005304
 801a650:	20005300 	.word	0x20005300
 801a654:	08025ac8 	.word	0x08025ac8
 801a658:	2000530d 	.word	0x2000530d
 801a65c:	2001b994 	.word	0x2001b994
 801a660:	200052f0 	.word	0x200052f0
 801a664:	08025ae8 	.word	0x08025ae8
 801a668:	08025b00 	.word	0x08025b00
        } else {
          pcb->rtime = 0;
 801a66c:	687b      	ldr	r3, [r7, #4]
 801a66e:	2200      	movs	r2, #0
 801a670:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	2200      	movs	r2, #0
 801a676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a680:	2b00      	cmp	r3, #0
 801a682:	d00a      	beq.n	801a69a <tcp_process+0x30a>
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a68a:	687a      	ldr	r2, [r7, #4]
 801a68c:	6910      	ldr	r0, [r2, #16]
 801a68e:	2200      	movs	r2, #0
 801a690:	6879      	ldr	r1, [r7, #4]
 801a692:	4798      	blx	r3
 801a694:	4603      	mov	r3, r0
 801a696:	76bb      	strb	r3, [r7, #26]
 801a698:	e001      	b.n	801a69e <tcp_process+0x30e>
 801a69a:	2300      	movs	r3, #0
 801a69c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801a69e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801a6a2:	f113 0f0d 	cmn.w	r3, #13
 801a6a6:	d102      	bne.n	801a6ae <tcp_process+0x31e>
          return ERR_ABRT;
 801a6a8:	f06f 030c 	mvn.w	r3, #12
 801a6ac:	e250      	b.n	801ab50 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801a6ae:	687b      	ldr	r3, [r7, #4]
 801a6b0:	8b5b      	ldrh	r3, [r3, #26]
 801a6b2:	f043 0302 	orr.w	r3, r3, #2
 801a6b6:	b29a      	uxth	r2, r3
 801a6b8:	687b      	ldr	r3, [r7, #4]
 801a6ba:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801a6bc:	e23a      	b.n	801ab34 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801a6be:	4b9d      	ldr	r3, [pc, #628]	; (801a934 <tcp_process+0x5a4>)
 801a6c0:	781b      	ldrb	r3, [r3, #0]
 801a6c2:	f003 0310 	and.w	r3, r3, #16
 801a6c6:	2b00      	cmp	r3, #0
 801a6c8:	f000 8234 	beq.w	801ab34 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a6cc:	4b9a      	ldr	r3, [pc, #616]	; (801a938 <tcp_process+0x5a8>)
 801a6ce:	6819      	ldr	r1, [r3, #0]
 801a6d0:	4b9a      	ldr	r3, [pc, #616]	; (801a93c <tcp_process+0x5ac>)
 801a6d2:	881b      	ldrh	r3, [r3, #0]
 801a6d4:	461a      	mov	r2, r3
 801a6d6:	4b9a      	ldr	r3, [pc, #616]	; (801a940 <tcp_process+0x5b0>)
 801a6d8:	681b      	ldr	r3, [r3, #0]
 801a6da:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a6dc:	4b99      	ldr	r3, [pc, #612]	; (801a944 <tcp_process+0x5b4>)
 801a6de:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a6e0:	885b      	ldrh	r3, [r3, #2]
 801a6e2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a6e4:	4a97      	ldr	r2, [pc, #604]	; (801a944 <tcp_process+0x5b4>)
 801a6e6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a6e8:	8812      	ldrh	r2, [r2, #0]
 801a6ea:	b292      	uxth	r2, r2
 801a6ec:	9202      	str	r2, [sp, #8]
 801a6ee:	9301      	str	r3, [sp, #4]
 801a6f0:	4b95      	ldr	r3, [pc, #596]	; (801a948 <tcp_process+0x5b8>)
 801a6f2:	9300      	str	r3, [sp, #0]
 801a6f4:	4b95      	ldr	r3, [pc, #596]	; (801a94c <tcp_process+0x5bc>)
 801a6f6:	4602      	mov	r2, r0
 801a6f8:	6878      	ldr	r0, [r7, #4]
 801a6fa:	f003 f8db 	bl	801d8b4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801a6fe:	687b      	ldr	r3, [r7, #4]
 801a700:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a704:	2b05      	cmp	r3, #5
 801a706:	f200 8215 	bhi.w	801ab34 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801a70a:	687b      	ldr	r3, [r7, #4]
 801a70c:	2200      	movs	r2, #0
 801a70e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801a710:	6878      	ldr	r0, [r7, #4]
 801a712:	f002 fea5 	bl	801d460 <tcp_rexmit_rto>
      break;
 801a716:	e20d      	b.n	801ab34 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801a718:	4b86      	ldr	r3, [pc, #536]	; (801a934 <tcp_process+0x5a4>)
 801a71a:	781b      	ldrb	r3, [r3, #0]
 801a71c:	f003 0310 	and.w	r3, r3, #16
 801a720:	2b00      	cmp	r3, #0
 801a722:	f000 80a1 	beq.w	801a868 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801a726:	4b84      	ldr	r3, [pc, #528]	; (801a938 <tcp_process+0x5a8>)
 801a728:	681a      	ldr	r2, [r3, #0]
 801a72a:	687b      	ldr	r3, [r7, #4]
 801a72c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a72e:	1ad3      	subs	r3, r2, r3
 801a730:	3b01      	subs	r3, #1
 801a732:	2b00      	cmp	r3, #0
 801a734:	db7e      	blt.n	801a834 <tcp_process+0x4a4>
 801a736:	4b80      	ldr	r3, [pc, #512]	; (801a938 <tcp_process+0x5a8>)
 801a738:	681a      	ldr	r2, [r3, #0]
 801a73a:	687b      	ldr	r3, [r7, #4]
 801a73c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a73e:	1ad3      	subs	r3, r2, r3
 801a740:	2b00      	cmp	r3, #0
 801a742:	dc77      	bgt.n	801a834 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801a744:	687b      	ldr	r3, [r7, #4]
 801a746:	2204      	movs	r2, #4
 801a748:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a74e:	2b00      	cmp	r3, #0
 801a750:	d102      	bne.n	801a758 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801a752:	23fa      	movs	r3, #250	; 0xfa
 801a754:	76bb      	strb	r3, [r7, #26]
 801a756:	e01d      	b.n	801a794 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a75c:	699b      	ldr	r3, [r3, #24]
 801a75e:	2b00      	cmp	r3, #0
 801a760:	d106      	bne.n	801a770 <tcp_process+0x3e0>
 801a762:	4b7b      	ldr	r3, [pc, #492]	; (801a950 <tcp_process+0x5c0>)
 801a764:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801a768:	497a      	ldr	r1, [pc, #488]	; (801a954 <tcp_process+0x5c4>)
 801a76a:	487b      	ldr	r0, [pc, #492]	; (801a958 <tcp_process+0x5c8>)
 801a76c:	f006 feda 	bl	8021524 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a774:	699b      	ldr	r3, [r3, #24]
 801a776:	2b00      	cmp	r3, #0
 801a778:	d00a      	beq.n	801a790 <tcp_process+0x400>
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a77e:	699b      	ldr	r3, [r3, #24]
 801a780:	687a      	ldr	r2, [r7, #4]
 801a782:	6910      	ldr	r0, [r2, #16]
 801a784:	2200      	movs	r2, #0
 801a786:	6879      	ldr	r1, [r7, #4]
 801a788:	4798      	blx	r3
 801a78a:	4603      	mov	r3, r0
 801a78c:	76bb      	strb	r3, [r7, #26]
 801a78e:	e001      	b.n	801a794 <tcp_process+0x404>
 801a790:	23f0      	movs	r3, #240	; 0xf0
 801a792:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801a794:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801a798:	2b00      	cmp	r3, #0
 801a79a:	d00a      	beq.n	801a7b2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801a79c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801a7a0:	f113 0f0d 	cmn.w	r3, #13
 801a7a4:	d002      	beq.n	801a7ac <tcp_process+0x41c>
              tcp_abort(pcb);
 801a7a6:	6878      	ldr	r0, [r7, #4]
 801a7a8:	f7fd fcea 	bl	8018180 <tcp_abort>
            }
            return ERR_ABRT;
 801a7ac:	f06f 030c 	mvn.w	r3, #12
 801a7b0:	e1ce      	b.n	801ab50 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801a7b2:	6878      	ldr	r0, [r7, #4]
 801a7b4:	f000 fae0 	bl	801ad78 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801a7b8:	4b68      	ldr	r3, [pc, #416]	; (801a95c <tcp_process+0x5cc>)
 801a7ba:	881b      	ldrh	r3, [r3, #0]
 801a7bc:	2b00      	cmp	r3, #0
 801a7be:	d005      	beq.n	801a7cc <tcp_process+0x43c>
            recv_acked--;
 801a7c0:	4b66      	ldr	r3, [pc, #408]	; (801a95c <tcp_process+0x5cc>)
 801a7c2:	881b      	ldrh	r3, [r3, #0]
 801a7c4:	3b01      	subs	r3, #1
 801a7c6:	b29a      	uxth	r2, r3
 801a7c8:	4b64      	ldr	r3, [pc, #400]	; (801a95c <tcp_process+0x5cc>)
 801a7ca:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a7d0:	009a      	lsls	r2, r3, #2
 801a7d2:	687b      	ldr	r3, [r7, #4]
 801a7d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a7d6:	005b      	lsls	r3, r3, #1
 801a7d8:	f241 111c 	movw	r1, #4380	; 0x111c
 801a7dc:	428b      	cmp	r3, r1
 801a7de:	bf38      	it	cc
 801a7e0:	460b      	movcc	r3, r1
 801a7e2:	429a      	cmp	r2, r3
 801a7e4:	d204      	bcs.n	801a7f0 <tcp_process+0x460>
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a7ea:	009b      	lsls	r3, r3, #2
 801a7ec:	b29b      	uxth	r3, r3
 801a7ee:	e00d      	b.n	801a80c <tcp_process+0x47c>
 801a7f0:	687b      	ldr	r3, [r7, #4]
 801a7f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a7f4:	005b      	lsls	r3, r3, #1
 801a7f6:	f241 121c 	movw	r2, #4380	; 0x111c
 801a7fa:	4293      	cmp	r3, r2
 801a7fc:	d904      	bls.n	801a808 <tcp_process+0x478>
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a802:	005b      	lsls	r3, r3, #1
 801a804:	b29b      	uxth	r3, r3
 801a806:	e001      	b.n	801a80c <tcp_process+0x47c>
 801a808:	f241 131c 	movw	r3, #4380	; 0x111c
 801a80c:	687a      	ldr	r2, [r7, #4]
 801a80e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801a812:	4b53      	ldr	r3, [pc, #332]	; (801a960 <tcp_process+0x5d0>)
 801a814:	781b      	ldrb	r3, [r3, #0]
 801a816:	f003 0320 	and.w	r3, r3, #32
 801a81a:	2b00      	cmp	r3, #0
 801a81c:	d037      	beq.n	801a88e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801a81e:	687b      	ldr	r3, [r7, #4]
 801a820:	8b5b      	ldrh	r3, [r3, #26]
 801a822:	f043 0302 	orr.w	r3, r3, #2
 801a826:	b29a      	uxth	r2, r3
 801a828:	687b      	ldr	r3, [r7, #4]
 801a82a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	2207      	movs	r2, #7
 801a830:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801a832:	e02c      	b.n	801a88e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a834:	4b40      	ldr	r3, [pc, #256]	; (801a938 <tcp_process+0x5a8>)
 801a836:	6819      	ldr	r1, [r3, #0]
 801a838:	4b40      	ldr	r3, [pc, #256]	; (801a93c <tcp_process+0x5ac>)
 801a83a:	881b      	ldrh	r3, [r3, #0]
 801a83c:	461a      	mov	r2, r3
 801a83e:	4b40      	ldr	r3, [pc, #256]	; (801a940 <tcp_process+0x5b0>)
 801a840:	681b      	ldr	r3, [r3, #0]
 801a842:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a844:	4b3f      	ldr	r3, [pc, #252]	; (801a944 <tcp_process+0x5b4>)
 801a846:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a848:	885b      	ldrh	r3, [r3, #2]
 801a84a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801a84c:	4a3d      	ldr	r2, [pc, #244]	; (801a944 <tcp_process+0x5b4>)
 801a84e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801a850:	8812      	ldrh	r2, [r2, #0]
 801a852:	b292      	uxth	r2, r2
 801a854:	9202      	str	r2, [sp, #8]
 801a856:	9301      	str	r3, [sp, #4]
 801a858:	4b3b      	ldr	r3, [pc, #236]	; (801a948 <tcp_process+0x5b8>)
 801a85a:	9300      	str	r3, [sp, #0]
 801a85c:	4b3b      	ldr	r3, [pc, #236]	; (801a94c <tcp_process+0x5bc>)
 801a85e:	4602      	mov	r2, r0
 801a860:	6878      	ldr	r0, [r7, #4]
 801a862:	f003 f827 	bl	801d8b4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801a866:	e167      	b.n	801ab38 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801a868:	4b32      	ldr	r3, [pc, #200]	; (801a934 <tcp_process+0x5a4>)
 801a86a:	781b      	ldrb	r3, [r3, #0]
 801a86c:	f003 0302 	and.w	r3, r3, #2
 801a870:	2b00      	cmp	r3, #0
 801a872:	f000 8161 	beq.w	801ab38 <tcp_process+0x7a8>
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a87a:	1e5a      	subs	r2, r3, #1
 801a87c:	4b30      	ldr	r3, [pc, #192]	; (801a940 <tcp_process+0x5b0>)
 801a87e:	681b      	ldr	r3, [r3, #0]
 801a880:	429a      	cmp	r2, r3
 801a882:	f040 8159 	bne.w	801ab38 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801a886:	6878      	ldr	r0, [r7, #4]
 801a888:	f002 fe0c 	bl	801d4a4 <tcp_rexmit>
      break;
 801a88c:	e154      	b.n	801ab38 <tcp_process+0x7a8>
 801a88e:	e153      	b.n	801ab38 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801a890:	6878      	ldr	r0, [r7, #4]
 801a892:	f000 fa71 	bl	801ad78 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801a896:	4b32      	ldr	r3, [pc, #200]	; (801a960 <tcp_process+0x5d0>)
 801a898:	781b      	ldrb	r3, [r3, #0]
 801a89a:	f003 0320 	and.w	r3, r3, #32
 801a89e:	2b00      	cmp	r3, #0
 801a8a0:	f000 814c 	beq.w	801ab3c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	8b5b      	ldrh	r3, [r3, #26]
 801a8a8:	f043 0302 	orr.w	r3, r3, #2
 801a8ac:	b29a      	uxth	r2, r3
 801a8ae:	687b      	ldr	r3, [r7, #4]
 801a8b0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	2207      	movs	r2, #7
 801a8b6:	751a      	strb	r2, [r3, #20]
      }
      break;
 801a8b8:	e140      	b.n	801ab3c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801a8ba:	6878      	ldr	r0, [r7, #4]
 801a8bc:	f000 fa5c 	bl	801ad78 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801a8c0:	4b27      	ldr	r3, [pc, #156]	; (801a960 <tcp_process+0x5d0>)
 801a8c2:	781b      	ldrb	r3, [r3, #0]
 801a8c4:	f003 0320 	and.w	r3, r3, #32
 801a8c8:	2b00      	cmp	r3, #0
 801a8ca:	d071      	beq.n	801a9b0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801a8cc:	4b19      	ldr	r3, [pc, #100]	; (801a934 <tcp_process+0x5a4>)
 801a8ce:	781b      	ldrb	r3, [r3, #0]
 801a8d0:	f003 0310 	and.w	r3, r3, #16
 801a8d4:	2b00      	cmp	r3, #0
 801a8d6:	d060      	beq.n	801a99a <tcp_process+0x60a>
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a8dc:	4b16      	ldr	r3, [pc, #88]	; (801a938 <tcp_process+0x5a8>)
 801a8de:	681b      	ldr	r3, [r3, #0]
 801a8e0:	429a      	cmp	r2, r3
 801a8e2:	d15a      	bne.n	801a99a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801a8e8:	2b00      	cmp	r3, #0
 801a8ea:	d156      	bne.n	801a99a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801a8ec:	687b      	ldr	r3, [r7, #4]
 801a8ee:	8b5b      	ldrh	r3, [r3, #26]
 801a8f0:	f043 0302 	orr.w	r3, r3, #2
 801a8f4:	b29a      	uxth	r2, r3
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801a8fa:	6878      	ldr	r0, [r7, #4]
 801a8fc:	f7fe fdbe 	bl	801947c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801a900:	4b18      	ldr	r3, [pc, #96]	; (801a964 <tcp_process+0x5d4>)
 801a902:	681b      	ldr	r3, [r3, #0]
 801a904:	687a      	ldr	r2, [r7, #4]
 801a906:	429a      	cmp	r2, r3
 801a908:	d105      	bne.n	801a916 <tcp_process+0x586>
 801a90a:	4b16      	ldr	r3, [pc, #88]	; (801a964 <tcp_process+0x5d4>)
 801a90c:	681b      	ldr	r3, [r3, #0]
 801a90e:	68db      	ldr	r3, [r3, #12]
 801a910:	4a14      	ldr	r2, [pc, #80]	; (801a964 <tcp_process+0x5d4>)
 801a912:	6013      	str	r3, [r2, #0]
 801a914:	e02e      	b.n	801a974 <tcp_process+0x5e4>
 801a916:	4b13      	ldr	r3, [pc, #76]	; (801a964 <tcp_process+0x5d4>)
 801a918:	681b      	ldr	r3, [r3, #0]
 801a91a:	617b      	str	r3, [r7, #20]
 801a91c:	e027      	b.n	801a96e <tcp_process+0x5de>
 801a91e:	697b      	ldr	r3, [r7, #20]
 801a920:	68db      	ldr	r3, [r3, #12]
 801a922:	687a      	ldr	r2, [r7, #4]
 801a924:	429a      	cmp	r2, r3
 801a926:	d11f      	bne.n	801a968 <tcp_process+0x5d8>
 801a928:	687b      	ldr	r3, [r7, #4]
 801a92a:	68da      	ldr	r2, [r3, #12]
 801a92c:	697b      	ldr	r3, [r7, #20]
 801a92e:	60da      	str	r2, [r3, #12]
 801a930:	e020      	b.n	801a974 <tcp_process+0x5e4>
 801a932:	bf00      	nop
 801a934:	2000530c 	.word	0x2000530c
 801a938:	20005304 	.word	0x20005304
 801a93c:	2000530a 	.word	0x2000530a
 801a940:	20005300 	.word	0x20005300
 801a944:	200052f0 	.word	0x200052f0
 801a948:	200110cc 	.word	0x200110cc
 801a94c:	200110d0 	.word	0x200110d0
 801a950:	08025874 	.word	0x08025874
 801a954:	08025b14 	.word	0x08025b14
 801a958:	080258c0 	.word	0x080258c0
 801a95c:	20005308 	.word	0x20005308
 801a960:	2000530d 	.word	0x2000530d
 801a964:	2001b990 	.word	0x2001b990
 801a968:	697b      	ldr	r3, [r7, #20]
 801a96a:	68db      	ldr	r3, [r3, #12]
 801a96c:	617b      	str	r3, [r7, #20]
 801a96e:	697b      	ldr	r3, [r7, #20]
 801a970:	2b00      	cmp	r3, #0
 801a972:	d1d4      	bne.n	801a91e <tcp_process+0x58e>
 801a974:	687b      	ldr	r3, [r7, #4]
 801a976:	2200      	movs	r2, #0
 801a978:	60da      	str	r2, [r3, #12]
 801a97a:	4b77      	ldr	r3, [pc, #476]	; (801ab58 <tcp_process+0x7c8>)
 801a97c:	2201      	movs	r2, #1
 801a97e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	220a      	movs	r2, #10
 801a984:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801a986:	4b75      	ldr	r3, [pc, #468]	; (801ab5c <tcp_process+0x7cc>)
 801a988:	681a      	ldr	r2, [r3, #0]
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	60da      	str	r2, [r3, #12]
 801a98e:	4a73      	ldr	r2, [pc, #460]	; (801ab5c <tcp_process+0x7cc>)
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	6013      	str	r3, [r2, #0]
 801a994:	f003 f950 	bl	801dc38 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801a998:	e0d2      	b.n	801ab40 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801a99a:	687b      	ldr	r3, [r7, #4]
 801a99c:	8b5b      	ldrh	r3, [r3, #26]
 801a99e:	f043 0302 	orr.w	r3, r3, #2
 801a9a2:	b29a      	uxth	r2, r3
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801a9a8:	687b      	ldr	r3, [r7, #4]
 801a9aa:	2208      	movs	r2, #8
 801a9ac:	751a      	strb	r2, [r3, #20]
      break;
 801a9ae:	e0c7      	b.n	801ab40 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801a9b0:	4b6b      	ldr	r3, [pc, #428]	; (801ab60 <tcp_process+0x7d0>)
 801a9b2:	781b      	ldrb	r3, [r3, #0]
 801a9b4:	f003 0310 	and.w	r3, r3, #16
 801a9b8:	2b00      	cmp	r3, #0
 801a9ba:	f000 80c1 	beq.w	801ab40 <tcp_process+0x7b0>
 801a9be:	687b      	ldr	r3, [r7, #4]
 801a9c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a9c2:	4b68      	ldr	r3, [pc, #416]	; (801ab64 <tcp_process+0x7d4>)
 801a9c4:	681b      	ldr	r3, [r3, #0]
 801a9c6:	429a      	cmp	r2, r3
 801a9c8:	f040 80ba 	bne.w	801ab40 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801a9d0:	2b00      	cmp	r3, #0
 801a9d2:	f040 80b5 	bne.w	801ab40 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801a9d6:	687b      	ldr	r3, [r7, #4]
 801a9d8:	2206      	movs	r2, #6
 801a9da:	751a      	strb	r2, [r3, #20]
      break;
 801a9dc:	e0b0      	b.n	801ab40 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801a9de:	6878      	ldr	r0, [r7, #4]
 801a9e0:	f000 f9ca 	bl	801ad78 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801a9e4:	4b60      	ldr	r3, [pc, #384]	; (801ab68 <tcp_process+0x7d8>)
 801a9e6:	781b      	ldrb	r3, [r3, #0]
 801a9e8:	f003 0320 	and.w	r3, r3, #32
 801a9ec:	2b00      	cmp	r3, #0
 801a9ee:	f000 80a9 	beq.w	801ab44 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801a9f2:	687b      	ldr	r3, [r7, #4]
 801a9f4:	8b5b      	ldrh	r3, [r3, #26]
 801a9f6:	f043 0302 	orr.w	r3, r3, #2
 801a9fa:	b29a      	uxth	r2, r3
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801aa00:	6878      	ldr	r0, [r7, #4]
 801aa02:	f7fe fd3b 	bl	801947c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801aa06:	4b59      	ldr	r3, [pc, #356]	; (801ab6c <tcp_process+0x7dc>)
 801aa08:	681b      	ldr	r3, [r3, #0]
 801aa0a:	687a      	ldr	r2, [r7, #4]
 801aa0c:	429a      	cmp	r2, r3
 801aa0e:	d105      	bne.n	801aa1c <tcp_process+0x68c>
 801aa10:	4b56      	ldr	r3, [pc, #344]	; (801ab6c <tcp_process+0x7dc>)
 801aa12:	681b      	ldr	r3, [r3, #0]
 801aa14:	68db      	ldr	r3, [r3, #12]
 801aa16:	4a55      	ldr	r2, [pc, #340]	; (801ab6c <tcp_process+0x7dc>)
 801aa18:	6013      	str	r3, [r2, #0]
 801aa1a:	e013      	b.n	801aa44 <tcp_process+0x6b4>
 801aa1c:	4b53      	ldr	r3, [pc, #332]	; (801ab6c <tcp_process+0x7dc>)
 801aa1e:	681b      	ldr	r3, [r3, #0]
 801aa20:	613b      	str	r3, [r7, #16]
 801aa22:	e00c      	b.n	801aa3e <tcp_process+0x6ae>
 801aa24:	693b      	ldr	r3, [r7, #16]
 801aa26:	68db      	ldr	r3, [r3, #12]
 801aa28:	687a      	ldr	r2, [r7, #4]
 801aa2a:	429a      	cmp	r2, r3
 801aa2c:	d104      	bne.n	801aa38 <tcp_process+0x6a8>
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	68da      	ldr	r2, [r3, #12]
 801aa32:	693b      	ldr	r3, [r7, #16]
 801aa34:	60da      	str	r2, [r3, #12]
 801aa36:	e005      	b.n	801aa44 <tcp_process+0x6b4>
 801aa38:	693b      	ldr	r3, [r7, #16]
 801aa3a:	68db      	ldr	r3, [r3, #12]
 801aa3c:	613b      	str	r3, [r7, #16]
 801aa3e:	693b      	ldr	r3, [r7, #16]
 801aa40:	2b00      	cmp	r3, #0
 801aa42:	d1ef      	bne.n	801aa24 <tcp_process+0x694>
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	2200      	movs	r2, #0
 801aa48:	60da      	str	r2, [r3, #12]
 801aa4a:	4b43      	ldr	r3, [pc, #268]	; (801ab58 <tcp_process+0x7c8>)
 801aa4c:	2201      	movs	r2, #1
 801aa4e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801aa50:	687b      	ldr	r3, [r7, #4]
 801aa52:	220a      	movs	r2, #10
 801aa54:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801aa56:	4b41      	ldr	r3, [pc, #260]	; (801ab5c <tcp_process+0x7cc>)
 801aa58:	681a      	ldr	r2, [r3, #0]
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	60da      	str	r2, [r3, #12]
 801aa5e:	4a3f      	ldr	r2, [pc, #252]	; (801ab5c <tcp_process+0x7cc>)
 801aa60:	687b      	ldr	r3, [r7, #4]
 801aa62:	6013      	str	r3, [r2, #0]
 801aa64:	f003 f8e8 	bl	801dc38 <tcp_timer_needed>
      }
      break;
 801aa68:	e06c      	b.n	801ab44 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801aa6a:	6878      	ldr	r0, [r7, #4]
 801aa6c:	f000 f984 	bl	801ad78 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801aa70:	4b3b      	ldr	r3, [pc, #236]	; (801ab60 <tcp_process+0x7d0>)
 801aa72:	781b      	ldrb	r3, [r3, #0]
 801aa74:	f003 0310 	and.w	r3, r3, #16
 801aa78:	2b00      	cmp	r3, #0
 801aa7a:	d065      	beq.n	801ab48 <tcp_process+0x7b8>
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801aa80:	4b38      	ldr	r3, [pc, #224]	; (801ab64 <tcp_process+0x7d4>)
 801aa82:	681b      	ldr	r3, [r3, #0]
 801aa84:	429a      	cmp	r2, r3
 801aa86:	d15f      	bne.n	801ab48 <tcp_process+0x7b8>
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aa8c:	2b00      	cmp	r3, #0
 801aa8e:	d15b      	bne.n	801ab48 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801aa90:	6878      	ldr	r0, [r7, #4]
 801aa92:	f7fe fcf3 	bl	801947c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801aa96:	4b35      	ldr	r3, [pc, #212]	; (801ab6c <tcp_process+0x7dc>)
 801aa98:	681b      	ldr	r3, [r3, #0]
 801aa9a:	687a      	ldr	r2, [r7, #4]
 801aa9c:	429a      	cmp	r2, r3
 801aa9e:	d105      	bne.n	801aaac <tcp_process+0x71c>
 801aaa0:	4b32      	ldr	r3, [pc, #200]	; (801ab6c <tcp_process+0x7dc>)
 801aaa2:	681b      	ldr	r3, [r3, #0]
 801aaa4:	68db      	ldr	r3, [r3, #12]
 801aaa6:	4a31      	ldr	r2, [pc, #196]	; (801ab6c <tcp_process+0x7dc>)
 801aaa8:	6013      	str	r3, [r2, #0]
 801aaaa:	e013      	b.n	801aad4 <tcp_process+0x744>
 801aaac:	4b2f      	ldr	r3, [pc, #188]	; (801ab6c <tcp_process+0x7dc>)
 801aaae:	681b      	ldr	r3, [r3, #0]
 801aab0:	60fb      	str	r3, [r7, #12]
 801aab2:	e00c      	b.n	801aace <tcp_process+0x73e>
 801aab4:	68fb      	ldr	r3, [r7, #12]
 801aab6:	68db      	ldr	r3, [r3, #12]
 801aab8:	687a      	ldr	r2, [r7, #4]
 801aaba:	429a      	cmp	r2, r3
 801aabc:	d104      	bne.n	801aac8 <tcp_process+0x738>
 801aabe:	687b      	ldr	r3, [r7, #4]
 801aac0:	68da      	ldr	r2, [r3, #12]
 801aac2:	68fb      	ldr	r3, [r7, #12]
 801aac4:	60da      	str	r2, [r3, #12]
 801aac6:	e005      	b.n	801aad4 <tcp_process+0x744>
 801aac8:	68fb      	ldr	r3, [r7, #12]
 801aaca:	68db      	ldr	r3, [r3, #12]
 801aacc:	60fb      	str	r3, [r7, #12]
 801aace:	68fb      	ldr	r3, [r7, #12]
 801aad0:	2b00      	cmp	r3, #0
 801aad2:	d1ef      	bne.n	801aab4 <tcp_process+0x724>
 801aad4:	687b      	ldr	r3, [r7, #4]
 801aad6:	2200      	movs	r2, #0
 801aad8:	60da      	str	r2, [r3, #12]
 801aada:	4b1f      	ldr	r3, [pc, #124]	; (801ab58 <tcp_process+0x7c8>)
 801aadc:	2201      	movs	r2, #1
 801aade:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	220a      	movs	r2, #10
 801aae4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801aae6:	4b1d      	ldr	r3, [pc, #116]	; (801ab5c <tcp_process+0x7cc>)
 801aae8:	681a      	ldr	r2, [r3, #0]
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	60da      	str	r2, [r3, #12]
 801aaee:	4a1b      	ldr	r2, [pc, #108]	; (801ab5c <tcp_process+0x7cc>)
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	6013      	str	r3, [r2, #0]
 801aaf4:	f003 f8a0 	bl	801dc38 <tcp_timer_needed>
      }
      break;
 801aaf8:	e026      	b.n	801ab48 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801aafa:	6878      	ldr	r0, [r7, #4]
 801aafc:	f000 f93c 	bl	801ad78 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801ab00:	4b17      	ldr	r3, [pc, #92]	; (801ab60 <tcp_process+0x7d0>)
 801ab02:	781b      	ldrb	r3, [r3, #0]
 801ab04:	f003 0310 	and.w	r3, r3, #16
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	d01f      	beq.n	801ab4c <tcp_process+0x7bc>
 801ab0c:	687b      	ldr	r3, [r7, #4]
 801ab0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801ab10:	4b14      	ldr	r3, [pc, #80]	; (801ab64 <tcp_process+0x7d4>)
 801ab12:	681b      	ldr	r3, [r3, #0]
 801ab14:	429a      	cmp	r2, r3
 801ab16:	d119      	bne.n	801ab4c <tcp_process+0x7bc>
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ab1c:	2b00      	cmp	r3, #0
 801ab1e:	d115      	bne.n	801ab4c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801ab20:	4b11      	ldr	r3, [pc, #68]	; (801ab68 <tcp_process+0x7d8>)
 801ab22:	781b      	ldrb	r3, [r3, #0]
 801ab24:	f043 0310 	orr.w	r3, r3, #16
 801ab28:	b2da      	uxtb	r2, r3
 801ab2a:	4b0f      	ldr	r3, [pc, #60]	; (801ab68 <tcp_process+0x7d8>)
 801ab2c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801ab2e:	e00d      	b.n	801ab4c <tcp_process+0x7bc>
    default:
      break;
 801ab30:	bf00      	nop
 801ab32:	e00c      	b.n	801ab4e <tcp_process+0x7be>
      break;
 801ab34:	bf00      	nop
 801ab36:	e00a      	b.n	801ab4e <tcp_process+0x7be>
      break;
 801ab38:	bf00      	nop
 801ab3a:	e008      	b.n	801ab4e <tcp_process+0x7be>
      break;
 801ab3c:	bf00      	nop
 801ab3e:	e006      	b.n	801ab4e <tcp_process+0x7be>
      break;
 801ab40:	bf00      	nop
 801ab42:	e004      	b.n	801ab4e <tcp_process+0x7be>
      break;
 801ab44:	bf00      	nop
 801ab46:	e002      	b.n	801ab4e <tcp_process+0x7be>
      break;
 801ab48:	bf00      	nop
 801ab4a:	e000      	b.n	801ab4e <tcp_process+0x7be>
      break;
 801ab4c:	bf00      	nop
  }
  return ERR_OK;
 801ab4e:	2300      	movs	r3, #0
}
 801ab50:	4618      	mov	r0, r3
 801ab52:	3724      	adds	r7, #36	; 0x24
 801ab54:	46bd      	mov	sp, r7
 801ab56:	bd90      	pop	{r4, r7, pc}
 801ab58:	2001b98c 	.word	0x2001b98c
 801ab5c:	2001b9a0 	.word	0x2001b9a0
 801ab60:	2000530c 	.word	0x2000530c
 801ab64:	20005304 	.word	0x20005304
 801ab68:	2000530d 	.word	0x2000530d
 801ab6c:	2001b990 	.word	0x2001b990

0801ab70 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801ab70:	b590      	push	{r4, r7, lr}
 801ab72:	b085      	sub	sp, #20
 801ab74:	af00      	add	r7, sp, #0
 801ab76:	6078      	str	r0, [r7, #4]
 801ab78:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801ab7a:	687b      	ldr	r3, [r7, #4]
 801ab7c:	2b00      	cmp	r3, #0
 801ab7e:	d106      	bne.n	801ab8e <tcp_oos_insert_segment+0x1e>
 801ab80:	4b3b      	ldr	r3, [pc, #236]	; (801ac70 <tcp_oos_insert_segment+0x100>)
 801ab82:	f240 421f 	movw	r2, #1055	; 0x41f
 801ab86:	493b      	ldr	r1, [pc, #236]	; (801ac74 <tcp_oos_insert_segment+0x104>)
 801ab88:	483b      	ldr	r0, [pc, #236]	; (801ac78 <tcp_oos_insert_segment+0x108>)
 801ab8a:	f006 fccb 	bl	8021524 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	68db      	ldr	r3, [r3, #12]
 801ab92:	899b      	ldrh	r3, [r3, #12]
 801ab94:	b29b      	uxth	r3, r3
 801ab96:	4618      	mov	r0, r3
 801ab98:	f7fb f8d4 	bl	8015d44 <lwip_htons>
 801ab9c:	4603      	mov	r3, r0
 801ab9e:	b2db      	uxtb	r3, r3
 801aba0:	f003 0301 	and.w	r3, r3, #1
 801aba4:	2b00      	cmp	r3, #0
 801aba6:	d028      	beq.n	801abfa <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801aba8:	6838      	ldr	r0, [r7, #0]
 801abaa:	f7fe f979 	bl	8018ea0 <tcp_segs_free>
    next = NULL;
 801abae:	2300      	movs	r3, #0
 801abb0:	603b      	str	r3, [r7, #0]
 801abb2:	e056      	b.n	801ac62 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801abb4:	683b      	ldr	r3, [r7, #0]
 801abb6:	68db      	ldr	r3, [r3, #12]
 801abb8:	899b      	ldrh	r3, [r3, #12]
 801abba:	b29b      	uxth	r3, r3
 801abbc:	4618      	mov	r0, r3
 801abbe:	f7fb f8c1 	bl	8015d44 <lwip_htons>
 801abc2:	4603      	mov	r3, r0
 801abc4:	b2db      	uxtb	r3, r3
 801abc6:	f003 0301 	and.w	r3, r3, #1
 801abca:	2b00      	cmp	r3, #0
 801abcc:	d00d      	beq.n	801abea <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801abce:	687b      	ldr	r3, [r7, #4]
 801abd0:	68db      	ldr	r3, [r3, #12]
 801abd2:	899b      	ldrh	r3, [r3, #12]
 801abd4:	b29c      	uxth	r4, r3
 801abd6:	2001      	movs	r0, #1
 801abd8:	f7fb f8b4 	bl	8015d44 <lwip_htons>
 801abdc:	4603      	mov	r3, r0
 801abde:	461a      	mov	r2, r3
 801abe0:	687b      	ldr	r3, [r7, #4]
 801abe2:	68db      	ldr	r3, [r3, #12]
 801abe4:	4322      	orrs	r2, r4
 801abe6:	b292      	uxth	r2, r2
 801abe8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801abea:	683b      	ldr	r3, [r7, #0]
 801abec:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801abee:	683b      	ldr	r3, [r7, #0]
 801abf0:	681b      	ldr	r3, [r3, #0]
 801abf2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801abf4:	68f8      	ldr	r0, [r7, #12]
 801abf6:	f7fe f968 	bl	8018eca <tcp_seg_free>
    while (next &&
 801abfa:	683b      	ldr	r3, [r7, #0]
 801abfc:	2b00      	cmp	r3, #0
 801abfe:	d00e      	beq.n	801ac1e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	891b      	ldrh	r3, [r3, #8]
 801ac04:	461a      	mov	r2, r3
 801ac06:	4b1d      	ldr	r3, [pc, #116]	; (801ac7c <tcp_oos_insert_segment+0x10c>)
 801ac08:	681b      	ldr	r3, [r3, #0]
 801ac0a:	441a      	add	r2, r3
 801ac0c:	683b      	ldr	r3, [r7, #0]
 801ac0e:	68db      	ldr	r3, [r3, #12]
 801ac10:	685b      	ldr	r3, [r3, #4]
 801ac12:	6839      	ldr	r1, [r7, #0]
 801ac14:	8909      	ldrh	r1, [r1, #8]
 801ac16:	440b      	add	r3, r1
 801ac18:	1ad3      	subs	r3, r2, r3
    while (next &&
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	daca      	bge.n	801abb4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801ac1e:	683b      	ldr	r3, [r7, #0]
 801ac20:	2b00      	cmp	r3, #0
 801ac22:	d01e      	beq.n	801ac62 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801ac24:	687b      	ldr	r3, [r7, #4]
 801ac26:	891b      	ldrh	r3, [r3, #8]
 801ac28:	461a      	mov	r2, r3
 801ac2a:	4b14      	ldr	r3, [pc, #80]	; (801ac7c <tcp_oos_insert_segment+0x10c>)
 801ac2c:	681b      	ldr	r3, [r3, #0]
 801ac2e:	441a      	add	r2, r3
 801ac30:	683b      	ldr	r3, [r7, #0]
 801ac32:	68db      	ldr	r3, [r3, #12]
 801ac34:	685b      	ldr	r3, [r3, #4]
 801ac36:	1ad3      	subs	r3, r2, r3
    if (next &&
 801ac38:	2b00      	cmp	r3, #0
 801ac3a:	dd12      	ble.n	801ac62 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801ac3c:	683b      	ldr	r3, [r7, #0]
 801ac3e:	68db      	ldr	r3, [r3, #12]
 801ac40:	685b      	ldr	r3, [r3, #4]
 801ac42:	b29a      	uxth	r2, r3
 801ac44:	4b0d      	ldr	r3, [pc, #52]	; (801ac7c <tcp_oos_insert_segment+0x10c>)
 801ac46:	681b      	ldr	r3, [r3, #0]
 801ac48:	b29b      	uxth	r3, r3
 801ac4a:	1ad3      	subs	r3, r2, r3
 801ac4c:	b29a      	uxth	r2, r3
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801ac52:	687b      	ldr	r3, [r7, #4]
 801ac54:	685a      	ldr	r2, [r3, #4]
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	891b      	ldrh	r3, [r3, #8]
 801ac5a:	4619      	mov	r1, r3
 801ac5c:	4610      	mov	r0, r2
 801ac5e:	f7fc fb75 	bl	801734c <pbuf_realloc>
    }
  }
  cseg->next = next;
 801ac62:	687b      	ldr	r3, [r7, #4]
 801ac64:	683a      	ldr	r2, [r7, #0]
 801ac66:	601a      	str	r2, [r3, #0]
}
 801ac68:	bf00      	nop
 801ac6a:	3714      	adds	r7, #20
 801ac6c:	46bd      	mov	sp, r7
 801ac6e:	bd90      	pop	{r4, r7, pc}
 801ac70:	08025874 	.word	0x08025874
 801ac74:	08025b34 	.word	0x08025b34
 801ac78:	080258c0 	.word	0x080258c0
 801ac7c:	20005300 	.word	0x20005300

0801ac80 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801ac80:	b5b0      	push	{r4, r5, r7, lr}
 801ac82:	b086      	sub	sp, #24
 801ac84:	af00      	add	r7, sp, #0
 801ac86:	60f8      	str	r0, [r7, #12]
 801ac88:	60b9      	str	r1, [r7, #8]
 801ac8a:	607a      	str	r2, [r7, #4]
 801ac8c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801ac8e:	e03e      	b.n	801ad0e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801ac90:	68bb      	ldr	r3, [r7, #8]
 801ac92:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801ac94:	68bb      	ldr	r3, [r7, #8]
 801ac96:	681b      	ldr	r3, [r3, #0]
 801ac98:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801ac9a:	697b      	ldr	r3, [r7, #20]
 801ac9c:	685b      	ldr	r3, [r3, #4]
 801ac9e:	4618      	mov	r0, r3
 801aca0:	f7fc fd68 	bl	8017774 <pbuf_clen>
 801aca4:	4603      	mov	r3, r0
 801aca6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801aca8:	68fb      	ldr	r3, [r7, #12]
 801acaa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801acae:	8a7a      	ldrh	r2, [r7, #18]
 801acb0:	429a      	cmp	r2, r3
 801acb2:	d906      	bls.n	801acc2 <tcp_free_acked_segments+0x42>
 801acb4:	4b2a      	ldr	r3, [pc, #168]	; (801ad60 <tcp_free_acked_segments+0xe0>)
 801acb6:	f240 4257 	movw	r2, #1111	; 0x457
 801acba:	492a      	ldr	r1, [pc, #168]	; (801ad64 <tcp_free_acked_segments+0xe4>)
 801acbc:	482a      	ldr	r0, [pc, #168]	; (801ad68 <tcp_free_acked_segments+0xe8>)
 801acbe:	f006 fc31 	bl	8021524 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801acc2:	68fb      	ldr	r3, [r7, #12]
 801acc4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801acc8:	8a7b      	ldrh	r3, [r7, #18]
 801acca:	1ad3      	subs	r3, r2, r3
 801accc:	b29a      	uxth	r2, r3
 801acce:	68fb      	ldr	r3, [r7, #12]
 801acd0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801acd4:	697b      	ldr	r3, [r7, #20]
 801acd6:	891a      	ldrh	r2, [r3, #8]
 801acd8:	4b24      	ldr	r3, [pc, #144]	; (801ad6c <tcp_free_acked_segments+0xec>)
 801acda:	881b      	ldrh	r3, [r3, #0]
 801acdc:	4413      	add	r3, r2
 801acde:	b29a      	uxth	r2, r3
 801ace0:	4b22      	ldr	r3, [pc, #136]	; (801ad6c <tcp_free_acked_segments+0xec>)
 801ace2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801ace4:	6978      	ldr	r0, [r7, #20]
 801ace6:	f7fe f8f0 	bl	8018eca <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801acea:	68fb      	ldr	r3, [r7, #12]
 801acec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801acf0:	2b00      	cmp	r3, #0
 801acf2:	d00c      	beq.n	801ad0e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801acf4:	68bb      	ldr	r3, [r7, #8]
 801acf6:	2b00      	cmp	r3, #0
 801acf8:	d109      	bne.n	801ad0e <tcp_free_acked_segments+0x8e>
 801acfa:	683b      	ldr	r3, [r7, #0]
 801acfc:	2b00      	cmp	r3, #0
 801acfe:	d106      	bne.n	801ad0e <tcp_free_acked_segments+0x8e>
 801ad00:	4b17      	ldr	r3, [pc, #92]	; (801ad60 <tcp_free_acked_segments+0xe0>)
 801ad02:	f240 4261 	movw	r2, #1121	; 0x461
 801ad06:	491a      	ldr	r1, [pc, #104]	; (801ad70 <tcp_free_acked_segments+0xf0>)
 801ad08:	4817      	ldr	r0, [pc, #92]	; (801ad68 <tcp_free_acked_segments+0xe8>)
 801ad0a:	f006 fc0b 	bl	8021524 <iprintf>
  while (seg_list != NULL &&
 801ad0e:	68bb      	ldr	r3, [r7, #8]
 801ad10:	2b00      	cmp	r3, #0
 801ad12:	d020      	beq.n	801ad56 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801ad14:	68bb      	ldr	r3, [r7, #8]
 801ad16:	68db      	ldr	r3, [r3, #12]
 801ad18:	685b      	ldr	r3, [r3, #4]
 801ad1a:	4618      	mov	r0, r3
 801ad1c:	f7fb f827 	bl	8015d6e <lwip_htonl>
 801ad20:	4604      	mov	r4, r0
 801ad22:	68bb      	ldr	r3, [r7, #8]
 801ad24:	891b      	ldrh	r3, [r3, #8]
 801ad26:	461d      	mov	r5, r3
 801ad28:	68bb      	ldr	r3, [r7, #8]
 801ad2a:	68db      	ldr	r3, [r3, #12]
 801ad2c:	899b      	ldrh	r3, [r3, #12]
 801ad2e:	b29b      	uxth	r3, r3
 801ad30:	4618      	mov	r0, r3
 801ad32:	f7fb f807 	bl	8015d44 <lwip_htons>
 801ad36:	4603      	mov	r3, r0
 801ad38:	b2db      	uxtb	r3, r3
 801ad3a:	f003 0303 	and.w	r3, r3, #3
 801ad3e:	2b00      	cmp	r3, #0
 801ad40:	d001      	beq.n	801ad46 <tcp_free_acked_segments+0xc6>
 801ad42:	2301      	movs	r3, #1
 801ad44:	e000      	b.n	801ad48 <tcp_free_acked_segments+0xc8>
 801ad46:	2300      	movs	r3, #0
 801ad48:	442b      	add	r3, r5
 801ad4a:	18e2      	adds	r2, r4, r3
 801ad4c:	4b09      	ldr	r3, [pc, #36]	; (801ad74 <tcp_free_acked_segments+0xf4>)
 801ad4e:	681b      	ldr	r3, [r3, #0]
 801ad50:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801ad52:	2b00      	cmp	r3, #0
 801ad54:	dd9c      	ble.n	801ac90 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801ad56:	68bb      	ldr	r3, [r7, #8]
}
 801ad58:	4618      	mov	r0, r3
 801ad5a:	3718      	adds	r7, #24
 801ad5c:	46bd      	mov	sp, r7
 801ad5e:	bdb0      	pop	{r4, r5, r7, pc}
 801ad60:	08025874 	.word	0x08025874
 801ad64:	08025b5c 	.word	0x08025b5c
 801ad68:	080258c0 	.word	0x080258c0
 801ad6c:	20005308 	.word	0x20005308
 801ad70:	08025b84 	.word	0x08025b84
 801ad74:	20005304 	.word	0x20005304

0801ad78 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801ad78:	b5b0      	push	{r4, r5, r7, lr}
 801ad7a:	b094      	sub	sp, #80	; 0x50
 801ad7c:	af00      	add	r7, sp, #0
 801ad7e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801ad80:	2300      	movs	r3, #0
 801ad82:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	2b00      	cmp	r3, #0
 801ad88:	d106      	bne.n	801ad98 <tcp_receive+0x20>
 801ad8a:	4ba6      	ldr	r3, [pc, #664]	; (801b024 <tcp_receive+0x2ac>)
 801ad8c:	f240 427b 	movw	r2, #1147	; 0x47b
 801ad90:	49a5      	ldr	r1, [pc, #660]	; (801b028 <tcp_receive+0x2b0>)
 801ad92:	48a6      	ldr	r0, [pc, #664]	; (801b02c <tcp_receive+0x2b4>)
 801ad94:	f006 fbc6 	bl	8021524 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	7d1b      	ldrb	r3, [r3, #20]
 801ad9c:	2b03      	cmp	r3, #3
 801ad9e:	d806      	bhi.n	801adae <tcp_receive+0x36>
 801ada0:	4ba0      	ldr	r3, [pc, #640]	; (801b024 <tcp_receive+0x2ac>)
 801ada2:	f240 427c 	movw	r2, #1148	; 0x47c
 801ada6:	49a2      	ldr	r1, [pc, #648]	; (801b030 <tcp_receive+0x2b8>)
 801ada8:	48a0      	ldr	r0, [pc, #640]	; (801b02c <tcp_receive+0x2b4>)
 801adaa:	f006 fbbb 	bl	8021524 <iprintf>

  if (flags & TCP_ACK) {
 801adae:	4ba1      	ldr	r3, [pc, #644]	; (801b034 <tcp_receive+0x2bc>)
 801adb0:	781b      	ldrb	r3, [r3, #0]
 801adb2:	f003 0310 	and.w	r3, r3, #16
 801adb6:	2b00      	cmp	r3, #0
 801adb8:	f000 8263 	beq.w	801b282 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801adbc:	687b      	ldr	r3, [r7, #4]
 801adbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801adc2:	461a      	mov	r2, r3
 801adc4:	687b      	ldr	r3, [r7, #4]
 801adc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801adc8:	4413      	add	r3, r2
 801adca:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801add0:	4b99      	ldr	r3, [pc, #612]	; (801b038 <tcp_receive+0x2c0>)
 801add2:	681b      	ldr	r3, [r3, #0]
 801add4:	1ad3      	subs	r3, r2, r3
 801add6:	2b00      	cmp	r3, #0
 801add8:	db1b      	blt.n	801ae12 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801adda:	687b      	ldr	r3, [r7, #4]
 801addc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801adde:	4b96      	ldr	r3, [pc, #600]	; (801b038 <tcp_receive+0x2c0>)
 801ade0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801ade2:	429a      	cmp	r2, r3
 801ade4:	d106      	bne.n	801adf4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801ade6:	687b      	ldr	r3, [r7, #4]
 801ade8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801adea:	4b94      	ldr	r3, [pc, #592]	; (801b03c <tcp_receive+0x2c4>)
 801adec:	681b      	ldr	r3, [r3, #0]
 801adee:	1ad3      	subs	r3, r2, r3
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	db0e      	blt.n	801ae12 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801adf4:	687b      	ldr	r3, [r7, #4]
 801adf6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801adf8:	4b90      	ldr	r3, [pc, #576]	; (801b03c <tcp_receive+0x2c4>)
 801adfa:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801adfc:	429a      	cmp	r2, r3
 801adfe:	d125      	bne.n	801ae4c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801ae00:	4b8f      	ldr	r3, [pc, #572]	; (801b040 <tcp_receive+0x2c8>)
 801ae02:	681b      	ldr	r3, [r3, #0]
 801ae04:	89db      	ldrh	r3, [r3, #14]
 801ae06:	b29a      	uxth	r2, r3
 801ae08:	687b      	ldr	r3, [r7, #4]
 801ae0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801ae0e:	429a      	cmp	r2, r3
 801ae10:	d91c      	bls.n	801ae4c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801ae12:	4b8b      	ldr	r3, [pc, #556]	; (801b040 <tcp_receive+0x2c8>)
 801ae14:	681b      	ldr	r3, [r3, #0]
 801ae16:	89db      	ldrh	r3, [r3, #14]
 801ae18:	b29a      	uxth	r2, r3
 801ae1a:	687b      	ldr	r3, [r7, #4]
 801ae1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801ae20:	687b      	ldr	r3, [r7, #4]
 801ae22:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801ae26:	687b      	ldr	r3, [r7, #4]
 801ae28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801ae2c:	429a      	cmp	r2, r3
 801ae2e:	d205      	bcs.n	801ae3c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801ae30:	687b      	ldr	r3, [r7, #4]
 801ae32:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801ae3c:	4b7e      	ldr	r3, [pc, #504]	; (801b038 <tcp_receive+0x2c0>)
 801ae3e:	681a      	ldr	r2, [r3, #0]
 801ae40:	687b      	ldr	r3, [r7, #4]
 801ae42:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801ae44:	4b7d      	ldr	r3, [pc, #500]	; (801b03c <tcp_receive+0x2c4>)
 801ae46:	681a      	ldr	r2, [r3, #0]
 801ae48:	687b      	ldr	r3, [r7, #4]
 801ae4a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801ae4c:	4b7b      	ldr	r3, [pc, #492]	; (801b03c <tcp_receive+0x2c4>)
 801ae4e:	681a      	ldr	r2, [r3, #0]
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ae54:	1ad3      	subs	r3, r2, r3
 801ae56:	2b00      	cmp	r3, #0
 801ae58:	dc58      	bgt.n	801af0c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801ae5a:	4b7a      	ldr	r3, [pc, #488]	; (801b044 <tcp_receive+0x2cc>)
 801ae5c:	881b      	ldrh	r3, [r3, #0]
 801ae5e:	2b00      	cmp	r3, #0
 801ae60:	d14b      	bne.n	801aefa <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801ae62:	687b      	ldr	r3, [r7, #4]
 801ae64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ae66:	687a      	ldr	r2, [r7, #4]
 801ae68:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801ae6c:	4413      	add	r3, r2
 801ae6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ae70:	429a      	cmp	r2, r3
 801ae72:	d142      	bne.n	801aefa <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801ae74:	687b      	ldr	r3, [r7, #4]
 801ae76:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801ae7a:	2b00      	cmp	r3, #0
 801ae7c:	db3d      	blt.n	801aefa <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801ae7e:	687b      	ldr	r3, [r7, #4]
 801ae80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ae82:	4b6e      	ldr	r3, [pc, #440]	; (801b03c <tcp_receive+0x2c4>)
 801ae84:	681b      	ldr	r3, [r3, #0]
 801ae86:	429a      	cmp	r2, r3
 801ae88:	d137      	bne.n	801aefa <tcp_receive+0x182>
              found_dupack = 1;
 801ae8a:	2301      	movs	r3, #1
 801ae8c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801ae8e:	687b      	ldr	r3, [r7, #4]
 801ae90:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ae94:	2bff      	cmp	r3, #255	; 0xff
 801ae96:	d007      	beq.n	801aea8 <tcp_receive+0x130>
                ++pcb->dupacks;
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ae9e:	3301      	adds	r3, #1
 801aea0:	b2da      	uxtb	r2, r3
 801aea2:	687b      	ldr	r3, [r7, #4]
 801aea4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801aeae:	2b03      	cmp	r3, #3
 801aeb0:	d91b      	bls.n	801aeea <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801aeb2:	687b      	ldr	r3, [r7, #4]
 801aeb4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801aeb8:	687b      	ldr	r3, [r7, #4]
 801aeba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801aebc:	4413      	add	r3, r2
 801aebe:	b29a      	uxth	r2, r3
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801aec6:	429a      	cmp	r2, r3
 801aec8:	d30a      	bcc.n	801aee0 <tcp_receive+0x168>
 801aeca:	687b      	ldr	r3, [r7, #4]
 801aecc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801aed4:	4413      	add	r3, r2
 801aed6:	b29a      	uxth	r2, r3
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801aede:	e004      	b.n	801aeea <tcp_receive+0x172>
 801aee0:	687b      	ldr	r3, [r7, #4]
 801aee2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801aee6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801aeea:	687b      	ldr	r3, [r7, #4]
 801aeec:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801aef0:	2b02      	cmp	r3, #2
 801aef2:	d902      	bls.n	801aefa <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801aef4:	6878      	ldr	r0, [r7, #4]
 801aef6:	f002 fb41 	bl	801d57c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801aefa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801aefc:	2b00      	cmp	r3, #0
 801aefe:	f040 8160 	bne.w	801b1c2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	2200      	movs	r2, #0
 801af06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801af0a:	e15a      	b.n	801b1c2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801af0c:	4b4b      	ldr	r3, [pc, #300]	; (801b03c <tcp_receive+0x2c4>)
 801af0e:	681a      	ldr	r2, [r3, #0]
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801af14:	1ad3      	subs	r3, r2, r3
 801af16:	3b01      	subs	r3, #1
 801af18:	2b00      	cmp	r3, #0
 801af1a:	f2c0 814d 	blt.w	801b1b8 <tcp_receive+0x440>
 801af1e:	4b47      	ldr	r3, [pc, #284]	; (801b03c <tcp_receive+0x2c4>)
 801af20:	681a      	ldr	r2, [r3, #0]
 801af22:	687b      	ldr	r3, [r7, #4]
 801af24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801af26:	1ad3      	subs	r3, r2, r3
 801af28:	2b00      	cmp	r3, #0
 801af2a:	f300 8145 	bgt.w	801b1b8 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	8b5b      	ldrh	r3, [r3, #26]
 801af32:	f003 0304 	and.w	r3, r3, #4
 801af36:	2b00      	cmp	r3, #0
 801af38:	d010      	beq.n	801af5c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801af3a:	687b      	ldr	r3, [r7, #4]
 801af3c:	8b5b      	ldrh	r3, [r3, #26]
 801af3e:	f023 0304 	bic.w	r3, r3, #4
 801af42:	b29a      	uxth	r2, r3
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801af48:	687b      	ldr	r3, [r7, #4]
 801af4a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801af54:	687b      	ldr	r3, [r7, #4]
 801af56:	2200      	movs	r2, #0
 801af58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801af5c:	687b      	ldr	r3, [r7, #4]
 801af5e:	2200      	movs	r2, #0
 801af60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801af6a:	10db      	asrs	r3, r3, #3
 801af6c:	b21b      	sxth	r3, r3
 801af6e:	b29a      	uxth	r2, r3
 801af70:	687b      	ldr	r3, [r7, #4]
 801af72:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801af76:	b29b      	uxth	r3, r3
 801af78:	4413      	add	r3, r2
 801af7a:	b29b      	uxth	r3, r3
 801af7c:	b21a      	sxth	r2, r3
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801af84:	4b2d      	ldr	r3, [pc, #180]	; (801b03c <tcp_receive+0x2c4>)
 801af86:	681b      	ldr	r3, [r3, #0]
 801af88:	b29a      	uxth	r2, r3
 801af8a:	687b      	ldr	r3, [r7, #4]
 801af8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801af8e:	b29b      	uxth	r3, r3
 801af90:	1ad3      	subs	r3, r2, r3
 801af92:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	2200      	movs	r2, #0
 801af98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801af9c:	4b27      	ldr	r3, [pc, #156]	; (801b03c <tcp_receive+0x2c4>)
 801af9e:	681a      	ldr	r2, [r3, #0]
 801afa0:	687b      	ldr	r3, [r7, #4]
 801afa2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801afa4:	687b      	ldr	r3, [r7, #4]
 801afa6:	7d1b      	ldrb	r3, [r3, #20]
 801afa8:	2b03      	cmp	r3, #3
 801afaa:	f240 8096 	bls.w	801b0da <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801afae:	687b      	ldr	r3, [r7, #4]
 801afb0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801afba:	429a      	cmp	r2, r3
 801afbc:	d244      	bcs.n	801b048 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801afbe:	687b      	ldr	r3, [r7, #4]
 801afc0:	8b5b      	ldrh	r3, [r3, #26]
 801afc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	d001      	beq.n	801afce <tcp_receive+0x256>
 801afca:	2301      	movs	r3, #1
 801afcc:	e000      	b.n	801afd0 <tcp_receive+0x258>
 801afce:	2302      	movs	r3, #2
 801afd0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801afd4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801afd8:	b29a      	uxth	r2, r3
 801afda:	687b      	ldr	r3, [r7, #4]
 801afdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801afde:	fb12 f303 	smulbb	r3, r2, r3
 801afe2:	b29b      	uxth	r3, r3
 801afe4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801afe6:	4293      	cmp	r3, r2
 801afe8:	bf28      	it	cs
 801afea:	4613      	movcs	r3, r2
 801afec:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801afee:	687b      	ldr	r3, [r7, #4]
 801aff0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801aff4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801aff6:	4413      	add	r3, r2
 801aff8:	b29a      	uxth	r2, r3
 801affa:	687b      	ldr	r3, [r7, #4]
 801affc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b000:	429a      	cmp	r2, r3
 801b002:	d309      	bcc.n	801b018 <tcp_receive+0x2a0>
 801b004:	687b      	ldr	r3, [r7, #4]
 801b006:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b00a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801b00c:	4413      	add	r3, r2
 801b00e:	b29a      	uxth	r2, r3
 801b010:	687b      	ldr	r3, [r7, #4]
 801b012:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801b016:	e060      	b.n	801b0da <tcp_receive+0x362>
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b01e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801b022:	e05a      	b.n	801b0da <tcp_receive+0x362>
 801b024:	08025874 	.word	0x08025874
 801b028:	08025ba4 	.word	0x08025ba4
 801b02c:	080258c0 	.word	0x080258c0
 801b030:	08025bc0 	.word	0x08025bc0
 801b034:	2000530c 	.word	0x2000530c
 801b038:	20005300 	.word	0x20005300
 801b03c:	20005304 	.word	0x20005304
 801b040:	200052f0 	.word	0x200052f0
 801b044:	2000530a 	.word	0x2000530a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801b048:	687b      	ldr	r3, [r7, #4]
 801b04a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801b04e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801b050:	4413      	add	r3, r2
 801b052:	b29a      	uxth	r2, r3
 801b054:	687b      	ldr	r3, [r7, #4]
 801b056:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801b05a:	429a      	cmp	r2, r3
 801b05c:	d309      	bcc.n	801b072 <tcp_receive+0x2fa>
 801b05e:	687b      	ldr	r3, [r7, #4]
 801b060:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801b064:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801b066:	4413      	add	r3, r2
 801b068:	b29a      	uxth	r2, r3
 801b06a:	687b      	ldr	r3, [r7, #4]
 801b06c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801b070:	e004      	b.n	801b07c <tcp_receive+0x304>
 801b072:	687b      	ldr	r3, [r7, #4]
 801b074:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b078:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801b082:	687b      	ldr	r3, [r7, #4]
 801b084:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b088:	429a      	cmp	r2, r3
 801b08a:	d326      	bcc.n	801b0da <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801b08c:	687b      	ldr	r3, [r7, #4]
 801b08e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b098:	1ad3      	subs	r3, r2, r3
 801b09a:	b29a      	uxth	r2, r3
 801b09c:	687b      	ldr	r3, [r7, #4]
 801b09e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801b0a2:	687b      	ldr	r3, [r7, #4]
 801b0a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b0a8:	687b      	ldr	r3, [r7, #4]
 801b0aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b0ac:	4413      	add	r3, r2
 801b0ae:	b29a      	uxth	r2, r3
 801b0b0:	687b      	ldr	r3, [r7, #4]
 801b0b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801b0b6:	429a      	cmp	r2, r3
 801b0b8:	d30a      	bcc.n	801b0d0 <tcp_receive+0x358>
 801b0ba:	687b      	ldr	r3, [r7, #4]
 801b0bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801b0c4:	4413      	add	r3, r2
 801b0c6:	b29a      	uxth	r2, r3
 801b0c8:	687b      	ldr	r3, [r7, #4]
 801b0ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801b0ce:	e004      	b.n	801b0da <tcp_receive+0x362>
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b0d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801b0da:	687b      	ldr	r3, [r7, #4]
 801b0dc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801b0de:	687b      	ldr	r3, [r7, #4]
 801b0e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b0e2:	4a98      	ldr	r2, [pc, #608]	; (801b344 <tcp_receive+0x5cc>)
 801b0e4:	6878      	ldr	r0, [r7, #4]
 801b0e6:	f7ff fdcb 	bl	801ac80 <tcp_free_acked_segments>
 801b0ea:	4602      	mov	r2, r0
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801b0f0:	687b      	ldr	r3, [r7, #4]
 801b0f2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801b0f4:	687b      	ldr	r3, [r7, #4]
 801b0f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b0f8:	4a93      	ldr	r2, [pc, #588]	; (801b348 <tcp_receive+0x5d0>)
 801b0fa:	6878      	ldr	r0, [r7, #4]
 801b0fc:	f7ff fdc0 	bl	801ac80 <tcp_free_acked_segments>
 801b100:	4602      	mov	r2, r0
 801b102:	687b      	ldr	r3, [r7, #4]
 801b104:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b10a:	2b00      	cmp	r3, #0
 801b10c:	d104      	bne.n	801b118 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b114:	861a      	strh	r2, [r3, #48]	; 0x30
 801b116:	e002      	b.n	801b11e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	2200      	movs	r2, #0
 801b11c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801b11e:	687b      	ldr	r3, [r7, #4]
 801b120:	2200      	movs	r2, #0
 801b122:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b128:	2b00      	cmp	r3, #0
 801b12a:	d103      	bne.n	801b134 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801b12c:	687b      	ldr	r3, [r7, #4]
 801b12e:	2200      	movs	r2, #0
 801b130:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801b134:	687b      	ldr	r3, [r7, #4]
 801b136:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801b13a:	4b84      	ldr	r3, [pc, #528]	; (801b34c <tcp_receive+0x5d4>)
 801b13c:	881b      	ldrh	r3, [r3, #0]
 801b13e:	4413      	add	r3, r2
 801b140:	b29a      	uxth	r2, r3
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	8b5b      	ldrh	r3, [r3, #26]
 801b14c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b150:	2b00      	cmp	r3, #0
 801b152:	d035      	beq.n	801b1c0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b158:	2b00      	cmp	r3, #0
 801b15a:	d118      	bne.n	801b18e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801b15c:	687b      	ldr	r3, [r7, #4]
 801b15e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b160:	2b00      	cmp	r3, #0
 801b162:	d00c      	beq.n	801b17e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801b168:	687b      	ldr	r3, [r7, #4]
 801b16a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b16c:	68db      	ldr	r3, [r3, #12]
 801b16e:	685b      	ldr	r3, [r3, #4]
 801b170:	4618      	mov	r0, r3
 801b172:	f7fa fdfc 	bl	8015d6e <lwip_htonl>
 801b176:	4603      	mov	r3, r0
 801b178:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801b17a:	2b00      	cmp	r3, #0
 801b17c:	dc20      	bgt.n	801b1c0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801b17e:	687b      	ldr	r3, [r7, #4]
 801b180:	8b5b      	ldrh	r3, [r3, #26]
 801b182:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b186:	b29a      	uxth	r2, r3
 801b188:	687b      	ldr	r3, [r7, #4]
 801b18a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801b18c:	e018      	b.n	801b1c0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801b18e:	687b      	ldr	r3, [r7, #4]
 801b190:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801b192:	687b      	ldr	r3, [r7, #4]
 801b194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b196:	68db      	ldr	r3, [r3, #12]
 801b198:	685b      	ldr	r3, [r3, #4]
 801b19a:	4618      	mov	r0, r3
 801b19c:	f7fa fde7 	bl	8015d6e <lwip_htonl>
 801b1a0:	4603      	mov	r3, r0
 801b1a2:	1ae3      	subs	r3, r4, r3
 801b1a4:	2b00      	cmp	r3, #0
 801b1a6:	dc0b      	bgt.n	801b1c0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	8b5b      	ldrh	r3, [r3, #26]
 801b1ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b1b0:	b29a      	uxth	r2, r3
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801b1b6:	e003      	b.n	801b1c0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801b1b8:	6878      	ldr	r0, [r7, #4]
 801b1ba:	f002 fbcd 	bl	801d958 <tcp_send_empty_ack>
 801b1be:	e000      	b.n	801b1c2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801b1c0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801b1c2:	687b      	ldr	r3, [r7, #4]
 801b1c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b1c6:	2b00      	cmp	r3, #0
 801b1c8:	d05b      	beq.n	801b282 <tcp_receive+0x50a>
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801b1ce:	4b60      	ldr	r3, [pc, #384]	; (801b350 <tcp_receive+0x5d8>)
 801b1d0:	681b      	ldr	r3, [r3, #0]
 801b1d2:	1ad3      	subs	r3, r2, r3
 801b1d4:	2b00      	cmp	r3, #0
 801b1d6:	da54      	bge.n	801b282 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801b1d8:	4b5e      	ldr	r3, [pc, #376]	; (801b354 <tcp_receive+0x5dc>)
 801b1da:	681b      	ldr	r3, [r3, #0]
 801b1dc:	b29a      	uxth	r2, r3
 801b1de:	687b      	ldr	r3, [r7, #4]
 801b1e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b1e2:	b29b      	uxth	r3, r3
 801b1e4:	1ad3      	subs	r3, r2, r3
 801b1e6:	b29b      	uxth	r3, r3
 801b1e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801b1ec:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801b1f0:	687b      	ldr	r3, [r7, #4]
 801b1f2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801b1f6:	10db      	asrs	r3, r3, #3
 801b1f8:	b21b      	sxth	r3, r3
 801b1fa:	b29b      	uxth	r3, r3
 801b1fc:	1ad3      	subs	r3, r2, r3
 801b1fe:	b29b      	uxth	r3, r3
 801b200:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801b204:	687b      	ldr	r3, [r7, #4]
 801b206:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801b20a:	b29a      	uxth	r2, r3
 801b20c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801b210:	4413      	add	r3, r2
 801b212:	b29b      	uxth	r3, r3
 801b214:	b21a      	sxth	r2, r3
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801b21a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801b21e:	2b00      	cmp	r3, #0
 801b220:	da05      	bge.n	801b22e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 801b222:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801b226:	425b      	negs	r3, r3
 801b228:	b29b      	uxth	r3, r3
 801b22a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801b22e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801b238:	109b      	asrs	r3, r3, #2
 801b23a:	b21b      	sxth	r3, r3
 801b23c:	b29b      	uxth	r3, r3
 801b23e:	1ad3      	subs	r3, r2, r3
 801b240:	b29b      	uxth	r3, r3
 801b242:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801b24c:	b29a      	uxth	r2, r3
 801b24e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801b252:	4413      	add	r3, r2
 801b254:	b29b      	uxth	r3, r3
 801b256:	b21a      	sxth	r2, r3
 801b258:	687b      	ldr	r3, [r7, #4]
 801b25a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801b25c:	687b      	ldr	r3, [r7, #4]
 801b25e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801b262:	10db      	asrs	r3, r3, #3
 801b264:	b21b      	sxth	r3, r3
 801b266:	b29a      	uxth	r2, r3
 801b268:	687b      	ldr	r3, [r7, #4]
 801b26a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801b26e:	b29b      	uxth	r3, r3
 801b270:	4413      	add	r3, r2
 801b272:	b29b      	uxth	r3, r3
 801b274:	b21a      	sxth	r2, r3
 801b276:	687b      	ldr	r3, [r7, #4]
 801b278:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801b27c:	687b      	ldr	r3, [r7, #4]
 801b27e:	2200      	movs	r2, #0
 801b280:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801b282:	4b35      	ldr	r3, [pc, #212]	; (801b358 <tcp_receive+0x5e0>)
 801b284:	881b      	ldrh	r3, [r3, #0]
 801b286:	2b00      	cmp	r3, #0
 801b288:	f000 84e1 	beq.w	801bc4e <tcp_receive+0xed6>
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	7d1b      	ldrb	r3, [r3, #20]
 801b290:	2b06      	cmp	r3, #6
 801b292:	f200 84dc 	bhi.w	801bc4e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b29a:	4b30      	ldr	r3, [pc, #192]	; (801b35c <tcp_receive+0x5e4>)
 801b29c:	681b      	ldr	r3, [r3, #0]
 801b29e:	1ad3      	subs	r3, r2, r3
 801b2a0:	3b01      	subs	r3, #1
 801b2a2:	2b00      	cmp	r3, #0
 801b2a4:	f2c0 808e 	blt.w	801b3c4 <tcp_receive+0x64c>
 801b2a8:	687b      	ldr	r3, [r7, #4]
 801b2aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b2ac:	4b2a      	ldr	r3, [pc, #168]	; (801b358 <tcp_receive+0x5e0>)
 801b2ae:	881b      	ldrh	r3, [r3, #0]
 801b2b0:	4619      	mov	r1, r3
 801b2b2:	4b2a      	ldr	r3, [pc, #168]	; (801b35c <tcp_receive+0x5e4>)
 801b2b4:	681b      	ldr	r3, [r3, #0]
 801b2b6:	440b      	add	r3, r1
 801b2b8:	1ad3      	subs	r3, r2, r3
 801b2ba:	3301      	adds	r3, #1
 801b2bc:	2b00      	cmp	r3, #0
 801b2be:	f300 8081 	bgt.w	801b3c4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801b2c2:	4b27      	ldr	r3, [pc, #156]	; (801b360 <tcp_receive+0x5e8>)
 801b2c4:	685b      	ldr	r3, [r3, #4]
 801b2c6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801b2c8:	687b      	ldr	r3, [r7, #4]
 801b2ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b2cc:	4b23      	ldr	r3, [pc, #140]	; (801b35c <tcp_receive+0x5e4>)
 801b2ce:	681b      	ldr	r3, [r3, #0]
 801b2d0:	1ad3      	subs	r3, r2, r3
 801b2d2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801b2d4:	4b22      	ldr	r3, [pc, #136]	; (801b360 <tcp_receive+0x5e8>)
 801b2d6:	685b      	ldr	r3, [r3, #4]
 801b2d8:	2b00      	cmp	r3, #0
 801b2da:	d106      	bne.n	801b2ea <tcp_receive+0x572>
 801b2dc:	4b21      	ldr	r3, [pc, #132]	; (801b364 <tcp_receive+0x5ec>)
 801b2de:	f240 5294 	movw	r2, #1428	; 0x594
 801b2e2:	4921      	ldr	r1, [pc, #132]	; (801b368 <tcp_receive+0x5f0>)
 801b2e4:	4821      	ldr	r0, [pc, #132]	; (801b36c <tcp_receive+0x5f4>)
 801b2e6:	f006 f91d 	bl	8021524 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801b2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2ec:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801b2f0:	4293      	cmp	r3, r2
 801b2f2:	d906      	bls.n	801b302 <tcp_receive+0x58a>
 801b2f4:	4b1b      	ldr	r3, [pc, #108]	; (801b364 <tcp_receive+0x5ec>)
 801b2f6:	f240 5295 	movw	r2, #1429	; 0x595
 801b2fa:	491d      	ldr	r1, [pc, #116]	; (801b370 <tcp_receive+0x5f8>)
 801b2fc:	481b      	ldr	r0, [pc, #108]	; (801b36c <tcp_receive+0x5f4>)
 801b2fe:	f006 f911 	bl	8021524 <iprintf>
      off = (u16_t)off32;
 801b302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b304:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801b308:	4b15      	ldr	r3, [pc, #84]	; (801b360 <tcp_receive+0x5e8>)
 801b30a:	685b      	ldr	r3, [r3, #4]
 801b30c:	891b      	ldrh	r3, [r3, #8]
 801b30e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b312:	429a      	cmp	r2, r3
 801b314:	d906      	bls.n	801b324 <tcp_receive+0x5ac>
 801b316:	4b13      	ldr	r3, [pc, #76]	; (801b364 <tcp_receive+0x5ec>)
 801b318:	f240 5297 	movw	r2, #1431	; 0x597
 801b31c:	4915      	ldr	r1, [pc, #84]	; (801b374 <tcp_receive+0x5fc>)
 801b31e:	4813      	ldr	r0, [pc, #76]	; (801b36c <tcp_receive+0x5f4>)
 801b320:	f006 f900 	bl	8021524 <iprintf>
      inseg.len -= off;
 801b324:	4b0e      	ldr	r3, [pc, #56]	; (801b360 <tcp_receive+0x5e8>)
 801b326:	891a      	ldrh	r2, [r3, #8]
 801b328:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b32c:	1ad3      	subs	r3, r2, r3
 801b32e:	b29a      	uxth	r2, r3
 801b330:	4b0b      	ldr	r3, [pc, #44]	; (801b360 <tcp_receive+0x5e8>)
 801b332:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801b334:	4b0a      	ldr	r3, [pc, #40]	; (801b360 <tcp_receive+0x5e8>)
 801b336:	685b      	ldr	r3, [r3, #4]
 801b338:	891a      	ldrh	r2, [r3, #8]
 801b33a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b33e:	1ad3      	subs	r3, r2, r3
 801b340:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801b342:	e029      	b.n	801b398 <tcp_receive+0x620>
 801b344:	08025bdc 	.word	0x08025bdc
 801b348:	08025be4 	.word	0x08025be4
 801b34c:	20005308 	.word	0x20005308
 801b350:	20005304 	.word	0x20005304
 801b354:	2001b994 	.word	0x2001b994
 801b358:	2000530a 	.word	0x2000530a
 801b35c:	20005300 	.word	0x20005300
 801b360:	200052e0 	.word	0x200052e0
 801b364:	08025874 	.word	0x08025874
 801b368:	08025bec 	.word	0x08025bec
 801b36c:	080258c0 	.word	0x080258c0
 801b370:	08025bfc 	.word	0x08025bfc
 801b374:	08025c0c 	.word	0x08025c0c
        off -= p->len;
 801b378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b37a:	895b      	ldrh	r3, [r3, #10]
 801b37c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b380:	1ad3      	subs	r3, r2, r3
 801b382:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801b386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b388:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801b38a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801b38c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b38e:	2200      	movs	r2, #0
 801b390:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801b392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b394:	681b      	ldr	r3, [r3, #0]
 801b396:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801b398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801b39a:	895b      	ldrh	r3, [r3, #10]
 801b39c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801b3a0:	429a      	cmp	r2, r3
 801b3a2:	d8e9      	bhi.n	801b378 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801b3a4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801b3a8:	4619      	mov	r1, r3
 801b3aa:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801b3ac:	f7fc f8ce 	bl	801754c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801b3b0:	687b      	ldr	r3, [r7, #4]
 801b3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b3b4:	4a91      	ldr	r2, [pc, #580]	; (801b5fc <tcp_receive+0x884>)
 801b3b6:	6013      	str	r3, [r2, #0]
 801b3b8:	4b91      	ldr	r3, [pc, #580]	; (801b600 <tcp_receive+0x888>)
 801b3ba:	68db      	ldr	r3, [r3, #12]
 801b3bc:	4a8f      	ldr	r2, [pc, #572]	; (801b5fc <tcp_receive+0x884>)
 801b3be:	6812      	ldr	r2, [r2, #0]
 801b3c0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801b3c2:	e00d      	b.n	801b3e0 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801b3c4:	4b8d      	ldr	r3, [pc, #564]	; (801b5fc <tcp_receive+0x884>)
 801b3c6:	681a      	ldr	r2, [r3, #0]
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b3cc:	1ad3      	subs	r3, r2, r3
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	da06      	bge.n	801b3e0 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	8b5b      	ldrh	r3, [r3, #26]
 801b3d6:	f043 0302 	orr.w	r3, r3, #2
 801b3da:	b29a      	uxth	r2, r3
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801b3e0:	4b86      	ldr	r3, [pc, #536]	; (801b5fc <tcp_receive+0x884>)
 801b3e2:	681a      	ldr	r2, [r3, #0]
 801b3e4:	687b      	ldr	r3, [r7, #4]
 801b3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b3e8:	1ad3      	subs	r3, r2, r3
 801b3ea:	2b00      	cmp	r3, #0
 801b3ec:	f2c0 842a 	blt.w	801bc44 <tcp_receive+0xecc>
 801b3f0:	4b82      	ldr	r3, [pc, #520]	; (801b5fc <tcp_receive+0x884>)
 801b3f2:	681a      	ldr	r2, [r3, #0]
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b3f8:	6879      	ldr	r1, [r7, #4]
 801b3fa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801b3fc:	440b      	add	r3, r1
 801b3fe:	1ad3      	subs	r3, r2, r3
 801b400:	3301      	adds	r3, #1
 801b402:	2b00      	cmp	r3, #0
 801b404:	f300 841e 	bgt.w	801bc44 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801b408:	687b      	ldr	r3, [r7, #4]
 801b40a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b40c:	4b7b      	ldr	r3, [pc, #492]	; (801b5fc <tcp_receive+0x884>)
 801b40e:	681b      	ldr	r3, [r3, #0]
 801b410:	429a      	cmp	r2, r3
 801b412:	f040 829a 	bne.w	801b94a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801b416:	4b7a      	ldr	r3, [pc, #488]	; (801b600 <tcp_receive+0x888>)
 801b418:	891c      	ldrh	r4, [r3, #8]
 801b41a:	4b79      	ldr	r3, [pc, #484]	; (801b600 <tcp_receive+0x888>)
 801b41c:	68db      	ldr	r3, [r3, #12]
 801b41e:	899b      	ldrh	r3, [r3, #12]
 801b420:	b29b      	uxth	r3, r3
 801b422:	4618      	mov	r0, r3
 801b424:	f7fa fc8e 	bl	8015d44 <lwip_htons>
 801b428:	4603      	mov	r3, r0
 801b42a:	b2db      	uxtb	r3, r3
 801b42c:	f003 0303 	and.w	r3, r3, #3
 801b430:	2b00      	cmp	r3, #0
 801b432:	d001      	beq.n	801b438 <tcp_receive+0x6c0>
 801b434:	2301      	movs	r3, #1
 801b436:	e000      	b.n	801b43a <tcp_receive+0x6c2>
 801b438:	2300      	movs	r3, #0
 801b43a:	4423      	add	r3, r4
 801b43c:	b29a      	uxth	r2, r3
 801b43e:	4b71      	ldr	r3, [pc, #452]	; (801b604 <tcp_receive+0x88c>)
 801b440:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801b446:	4b6f      	ldr	r3, [pc, #444]	; (801b604 <tcp_receive+0x88c>)
 801b448:	881b      	ldrh	r3, [r3, #0]
 801b44a:	429a      	cmp	r2, r3
 801b44c:	d275      	bcs.n	801b53a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801b44e:	4b6c      	ldr	r3, [pc, #432]	; (801b600 <tcp_receive+0x888>)
 801b450:	68db      	ldr	r3, [r3, #12]
 801b452:	899b      	ldrh	r3, [r3, #12]
 801b454:	b29b      	uxth	r3, r3
 801b456:	4618      	mov	r0, r3
 801b458:	f7fa fc74 	bl	8015d44 <lwip_htons>
 801b45c:	4603      	mov	r3, r0
 801b45e:	b2db      	uxtb	r3, r3
 801b460:	f003 0301 	and.w	r3, r3, #1
 801b464:	2b00      	cmp	r3, #0
 801b466:	d01f      	beq.n	801b4a8 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801b468:	4b65      	ldr	r3, [pc, #404]	; (801b600 <tcp_receive+0x888>)
 801b46a:	68db      	ldr	r3, [r3, #12]
 801b46c:	899b      	ldrh	r3, [r3, #12]
 801b46e:	b29b      	uxth	r3, r3
 801b470:	b21b      	sxth	r3, r3
 801b472:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801b476:	b21c      	sxth	r4, r3
 801b478:	4b61      	ldr	r3, [pc, #388]	; (801b600 <tcp_receive+0x888>)
 801b47a:	68db      	ldr	r3, [r3, #12]
 801b47c:	899b      	ldrh	r3, [r3, #12]
 801b47e:	b29b      	uxth	r3, r3
 801b480:	4618      	mov	r0, r3
 801b482:	f7fa fc5f 	bl	8015d44 <lwip_htons>
 801b486:	4603      	mov	r3, r0
 801b488:	b2db      	uxtb	r3, r3
 801b48a:	b29b      	uxth	r3, r3
 801b48c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801b490:	b29b      	uxth	r3, r3
 801b492:	4618      	mov	r0, r3
 801b494:	f7fa fc56 	bl	8015d44 <lwip_htons>
 801b498:	4603      	mov	r3, r0
 801b49a:	b21b      	sxth	r3, r3
 801b49c:	4323      	orrs	r3, r4
 801b49e:	b21a      	sxth	r2, r3
 801b4a0:	4b57      	ldr	r3, [pc, #348]	; (801b600 <tcp_receive+0x888>)
 801b4a2:	68db      	ldr	r3, [r3, #12]
 801b4a4:	b292      	uxth	r2, r2
 801b4a6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801b4a8:	687b      	ldr	r3, [r7, #4]
 801b4aa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801b4ac:	4b54      	ldr	r3, [pc, #336]	; (801b600 <tcp_receive+0x888>)
 801b4ae:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801b4b0:	4b53      	ldr	r3, [pc, #332]	; (801b600 <tcp_receive+0x888>)
 801b4b2:	68db      	ldr	r3, [r3, #12]
 801b4b4:	899b      	ldrh	r3, [r3, #12]
 801b4b6:	b29b      	uxth	r3, r3
 801b4b8:	4618      	mov	r0, r3
 801b4ba:	f7fa fc43 	bl	8015d44 <lwip_htons>
 801b4be:	4603      	mov	r3, r0
 801b4c0:	b2db      	uxtb	r3, r3
 801b4c2:	f003 0302 	and.w	r3, r3, #2
 801b4c6:	2b00      	cmp	r3, #0
 801b4c8:	d005      	beq.n	801b4d6 <tcp_receive+0x75e>
            inseg.len -= 1;
 801b4ca:	4b4d      	ldr	r3, [pc, #308]	; (801b600 <tcp_receive+0x888>)
 801b4cc:	891b      	ldrh	r3, [r3, #8]
 801b4ce:	3b01      	subs	r3, #1
 801b4d0:	b29a      	uxth	r2, r3
 801b4d2:	4b4b      	ldr	r3, [pc, #300]	; (801b600 <tcp_receive+0x888>)
 801b4d4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801b4d6:	4b4a      	ldr	r3, [pc, #296]	; (801b600 <tcp_receive+0x888>)
 801b4d8:	685b      	ldr	r3, [r3, #4]
 801b4da:	4a49      	ldr	r2, [pc, #292]	; (801b600 <tcp_receive+0x888>)
 801b4dc:	8912      	ldrh	r2, [r2, #8]
 801b4de:	4611      	mov	r1, r2
 801b4e0:	4618      	mov	r0, r3
 801b4e2:	f7fb ff33 	bl	801734c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801b4e6:	4b46      	ldr	r3, [pc, #280]	; (801b600 <tcp_receive+0x888>)
 801b4e8:	891c      	ldrh	r4, [r3, #8]
 801b4ea:	4b45      	ldr	r3, [pc, #276]	; (801b600 <tcp_receive+0x888>)
 801b4ec:	68db      	ldr	r3, [r3, #12]
 801b4ee:	899b      	ldrh	r3, [r3, #12]
 801b4f0:	b29b      	uxth	r3, r3
 801b4f2:	4618      	mov	r0, r3
 801b4f4:	f7fa fc26 	bl	8015d44 <lwip_htons>
 801b4f8:	4603      	mov	r3, r0
 801b4fa:	b2db      	uxtb	r3, r3
 801b4fc:	f003 0303 	and.w	r3, r3, #3
 801b500:	2b00      	cmp	r3, #0
 801b502:	d001      	beq.n	801b508 <tcp_receive+0x790>
 801b504:	2301      	movs	r3, #1
 801b506:	e000      	b.n	801b50a <tcp_receive+0x792>
 801b508:	2300      	movs	r3, #0
 801b50a:	4423      	add	r3, r4
 801b50c:	b29a      	uxth	r2, r3
 801b50e:	4b3d      	ldr	r3, [pc, #244]	; (801b604 <tcp_receive+0x88c>)
 801b510:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801b512:	4b3c      	ldr	r3, [pc, #240]	; (801b604 <tcp_receive+0x88c>)
 801b514:	881b      	ldrh	r3, [r3, #0]
 801b516:	461a      	mov	r2, r3
 801b518:	4b38      	ldr	r3, [pc, #224]	; (801b5fc <tcp_receive+0x884>)
 801b51a:	681b      	ldr	r3, [r3, #0]
 801b51c:	441a      	add	r2, r3
 801b51e:	687b      	ldr	r3, [r7, #4]
 801b520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b522:	6879      	ldr	r1, [r7, #4]
 801b524:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801b526:	440b      	add	r3, r1
 801b528:	429a      	cmp	r2, r3
 801b52a:	d006      	beq.n	801b53a <tcp_receive+0x7c2>
 801b52c:	4b36      	ldr	r3, [pc, #216]	; (801b608 <tcp_receive+0x890>)
 801b52e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801b532:	4936      	ldr	r1, [pc, #216]	; (801b60c <tcp_receive+0x894>)
 801b534:	4836      	ldr	r0, [pc, #216]	; (801b610 <tcp_receive+0x898>)
 801b536:	f005 fff5 	bl	8021524 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801b53a:	687b      	ldr	r3, [r7, #4]
 801b53c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b53e:	2b00      	cmp	r3, #0
 801b540:	f000 80e7 	beq.w	801b712 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801b544:	4b2e      	ldr	r3, [pc, #184]	; (801b600 <tcp_receive+0x888>)
 801b546:	68db      	ldr	r3, [r3, #12]
 801b548:	899b      	ldrh	r3, [r3, #12]
 801b54a:	b29b      	uxth	r3, r3
 801b54c:	4618      	mov	r0, r3
 801b54e:	f7fa fbf9 	bl	8015d44 <lwip_htons>
 801b552:	4603      	mov	r3, r0
 801b554:	b2db      	uxtb	r3, r3
 801b556:	f003 0301 	and.w	r3, r3, #1
 801b55a:	2b00      	cmp	r3, #0
 801b55c:	d010      	beq.n	801b580 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801b55e:	e00a      	b.n	801b576 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801b560:	687b      	ldr	r3, [r7, #4]
 801b562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b564:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801b566:	687b      	ldr	r3, [r7, #4]
 801b568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b56a:	681a      	ldr	r2, [r3, #0]
 801b56c:	687b      	ldr	r3, [r7, #4]
 801b56e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801b570:	68f8      	ldr	r0, [r7, #12]
 801b572:	f7fd fcaa 	bl	8018eca <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b57a:	2b00      	cmp	r3, #0
 801b57c:	d1f0      	bne.n	801b560 <tcp_receive+0x7e8>
 801b57e:	e0c8      	b.n	801b712 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801b580:	687b      	ldr	r3, [r7, #4]
 801b582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b584:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801b586:	e052      	b.n	801b62e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801b588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b58a:	68db      	ldr	r3, [r3, #12]
 801b58c:	899b      	ldrh	r3, [r3, #12]
 801b58e:	b29b      	uxth	r3, r3
 801b590:	4618      	mov	r0, r3
 801b592:	f7fa fbd7 	bl	8015d44 <lwip_htons>
 801b596:	4603      	mov	r3, r0
 801b598:	b2db      	uxtb	r3, r3
 801b59a:	f003 0301 	and.w	r3, r3, #1
 801b59e:	2b00      	cmp	r3, #0
 801b5a0:	d03d      	beq.n	801b61e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801b5a2:	4b17      	ldr	r3, [pc, #92]	; (801b600 <tcp_receive+0x888>)
 801b5a4:	68db      	ldr	r3, [r3, #12]
 801b5a6:	899b      	ldrh	r3, [r3, #12]
 801b5a8:	b29b      	uxth	r3, r3
 801b5aa:	4618      	mov	r0, r3
 801b5ac:	f7fa fbca 	bl	8015d44 <lwip_htons>
 801b5b0:	4603      	mov	r3, r0
 801b5b2:	b2db      	uxtb	r3, r3
 801b5b4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801b5b8:	2b00      	cmp	r3, #0
 801b5ba:	d130      	bne.n	801b61e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801b5bc:	4b10      	ldr	r3, [pc, #64]	; (801b600 <tcp_receive+0x888>)
 801b5be:	68db      	ldr	r3, [r3, #12]
 801b5c0:	899b      	ldrh	r3, [r3, #12]
 801b5c2:	b29c      	uxth	r4, r3
 801b5c4:	2001      	movs	r0, #1
 801b5c6:	f7fa fbbd 	bl	8015d44 <lwip_htons>
 801b5ca:	4603      	mov	r3, r0
 801b5cc:	461a      	mov	r2, r3
 801b5ce:	4b0c      	ldr	r3, [pc, #48]	; (801b600 <tcp_receive+0x888>)
 801b5d0:	68db      	ldr	r3, [r3, #12]
 801b5d2:	4322      	orrs	r2, r4
 801b5d4:	b292      	uxth	r2, r2
 801b5d6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801b5d8:	4b09      	ldr	r3, [pc, #36]	; (801b600 <tcp_receive+0x888>)
 801b5da:	891c      	ldrh	r4, [r3, #8]
 801b5dc:	4b08      	ldr	r3, [pc, #32]	; (801b600 <tcp_receive+0x888>)
 801b5de:	68db      	ldr	r3, [r3, #12]
 801b5e0:	899b      	ldrh	r3, [r3, #12]
 801b5e2:	b29b      	uxth	r3, r3
 801b5e4:	4618      	mov	r0, r3
 801b5e6:	f7fa fbad 	bl	8015d44 <lwip_htons>
 801b5ea:	4603      	mov	r3, r0
 801b5ec:	b2db      	uxtb	r3, r3
 801b5ee:	f003 0303 	and.w	r3, r3, #3
 801b5f2:	2b00      	cmp	r3, #0
 801b5f4:	d00e      	beq.n	801b614 <tcp_receive+0x89c>
 801b5f6:	2301      	movs	r3, #1
 801b5f8:	e00d      	b.n	801b616 <tcp_receive+0x89e>
 801b5fa:	bf00      	nop
 801b5fc:	20005300 	.word	0x20005300
 801b600:	200052e0 	.word	0x200052e0
 801b604:	2000530a 	.word	0x2000530a
 801b608:	08025874 	.word	0x08025874
 801b60c:	08025c1c 	.word	0x08025c1c
 801b610:	080258c0 	.word	0x080258c0
 801b614:	2300      	movs	r3, #0
 801b616:	4423      	add	r3, r4
 801b618:	b29a      	uxth	r2, r3
 801b61a:	4b98      	ldr	r3, [pc, #608]	; (801b87c <tcp_receive+0xb04>)
 801b61c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801b61e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b620:	613b      	str	r3, [r7, #16]
              next = next->next;
 801b622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b624:	681b      	ldr	r3, [r3, #0]
 801b626:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801b628:	6938      	ldr	r0, [r7, #16]
 801b62a:	f7fd fc4e 	bl	8018eca <tcp_seg_free>
            while (next &&
 801b62e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b630:	2b00      	cmp	r3, #0
 801b632:	d00e      	beq.n	801b652 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801b634:	4b91      	ldr	r3, [pc, #580]	; (801b87c <tcp_receive+0xb04>)
 801b636:	881b      	ldrh	r3, [r3, #0]
 801b638:	461a      	mov	r2, r3
 801b63a:	4b91      	ldr	r3, [pc, #580]	; (801b880 <tcp_receive+0xb08>)
 801b63c:	681b      	ldr	r3, [r3, #0]
 801b63e:	441a      	add	r2, r3
 801b640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b642:	68db      	ldr	r3, [r3, #12]
 801b644:	685b      	ldr	r3, [r3, #4]
 801b646:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801b648:	8909      	ldrh	r1, [r1, #8]
 801b64a:	440b      	add	r3, r1
 801b64c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801b64e:	2b00      	cmp	r3, #0
 801b650:	da9a      	bge.n	801b588 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801b652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b654:	2b00      	cmp	r3, #0
 801b656:	d059      	beq.n	801b70c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801b658:	4b88      	ldr	r3, [pc, #544]	; (801b87c <tcp_receive+0xb04>)
 801b65a:	881b      	ldrh	r3, [r3, #0]
 801b65c:	461a      	mov	r2, r3
 801b65e:	4b88      	ldr	r3, [pc, #544]	; (801b880 <tcp_receive+0xb08>)
 801b660:	681b      	ldr	r3, [r3, #0]
 801b662:	441a      	add	r2, r3
 801b664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b666:	68db      	ldr	r3, [r3, #12]
 801b668:	685b      	ldr	r3, [r3, #4]
 801b66a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801b66c:	2b00      	cmp	r3, #0
 801b66e:	dd4d      	ble.n	801b70c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801b670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b672:	68db      	ldr	r3, [r3, #12]
 801b674:	685b      	ldr	r3, [r3, #4]
 801b676:	b29a      	uxth	r2, r3
 801b678:	4b81      	ldr	r3, [pc, #516]	; (801b880 <tcp_receive+0xb08>)
 801b67a:	681b      	ldr	r3, [r3, #0]
 801b67c:	b29b      	uxth	r3, r3
 801b67e:	1ad3      	subs	r3, r2, r3
 801b680:	b29a      	uxth	r2, r3
 801b682:	4b80      	ldr	r3, [pc, #512]	; (801b884 <tcp_receive+0xb0c>)
 801b684:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801b686:	4b7f      	ldr	r3, [pc, #508]	; (801b884 <tcp_receive+0xb0c>)
 801b688:	68db      	ldr	r3, [r3, #12]
 801b68a:	899b      	ldrh	r3, [r3, #12]
 801b68c:	b29b      	uxth	r3, r3
 801b68e:	4618      	mov	r0, r3
 801b690:	f7fa fb58 	bl	8015d44 <lwip_htons>
 801b694:	4603      	mov	r3, r0
 801b696:	b2db      	uxtb	r3, r3
 801b698:	f003 0302 	and.w	r3, r3, #2
 801b69c:	2b00      	cmp	r3, #0
 801b69e:	d005      	beq.n	801b6ac <tcp_receive+0x934>
                inseg.len -= 1;
 801b6a0:	4b78      	ldr	r3, [pc, #480]	; (801b884 <tcp_receive+0xb0c>)
 801b6a2:	891b      	ldrh	r3, [r3, #8]
 801b6a4:	3b01      	subs	r3, #1
 801b6a6:	b29a      	uxth	r2, r3
 801b6a8:	4b76      	ldr	r3, [pc, #472]	; (801b884 <tcp_receive+0xb0c>)
 801b6aa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801b6ac:	4b75      	ldr	r3, [pc, #468]	; (801b884 <tcp_receive+0xb0c>)
 801b6ae:	685b      	ldr	r3, [r3, #4]
 801b6b0:	4a74      	ldr	r2, [pc, #464]	; (801b884 <tcp_receive+0xb0c>)
 801b6b2:	8912      	ldrh	r2, [r2, #8]
 801b6b4:	4611      	mov	r1, r2
 801b6b6:	4618      	mov	r0, r3
 801b6b8:	f7fb fe48 	bl	801734c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801b6bc:	4b71      	ldr	r3, [pc, #452]	; (801b884 <tcp_receive+0xb0c>)
 801b6be:	891c      	ldrh	r4, [r3, #8]
 801b6c0:	4b70      	ldr	r3, [pc, #448]	; (801b884 <tcp_receive+0xb0c>)
 801b6c2:	68db      	ldr	r3, [r3, #12]
 801b6c4:	899b      	ldrh	r3, [r3, #12]
 801b6c6:	b29b      	uxth	r3, r3
 801b6c8:	4618      	mov	r0, r3
 801b6ca:	f7fa fb3b 	bl	8015d44 <lwip_htons>
 801b6ce:	4603      	mov	r3, r0
 801b6d0:	b2db      	uxtb	r3, r3
 801b6d2:	f003 0303 	and.w	r3, r3, #3
 801b6d6:	2b00      	cmp	r3, #0
 801b6d8:	d001      	beq.n	801b6de <tcp_receive+0x966>
 801b6da:	2301      	movs	r3, #1
 801b6dc:	e000      	b.n	801b6e0 <tcp_receive+0x968>
 801b6de:	2300      	movs	r3, #0
 801b6e0:	4423      	add	r3, r4
 801b6e2:	b29a      	uxth	r2, r3
 801b6e4:	4b65      	ldr	r3, [pc, #404]	; (801b87c <tcp_receive+0xb04>)
 801b6e6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801b6e8:	4b64      	ldr	r3, [pc, #400]	; (801b87c <tcp_receive+0xb04>)
 801b6ea:	881b      	ldrh	r3, [r3, #0]
 801b6ec:	461a      	mov	r2, r3
 801b6ee:	4b64      	ldr	r3, [pc, #400]	; (801b880 <tcp_receive+0xb08>)
 801b6f0:	681b      	ldr	r3, [r3, #0]
 801b6f2:	441a      	add	r2, r3
 801b6f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b6f6:	68db      	ldr	r3, [r3, #12]
 801b6f8:	685b      	ldr	r3, [r3, #4]
 801b6fa:	429a      	cmp	r2, r3
 801b6fc:	d006      	beq.n	801b70c <tcp_receive+0x994>
 801b6fe:	4b62      	ldr	r3, [pc, #392]	; (801b888 <tcp_receive+0xb10>)
 801b700:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801b704:	4961      	ldr	r1, [pc, #388]	; (801b88c <tcp_receive+0xb14>)
 801b706:	4862      	ldr	r0, [pc, #392]	; (801b890 <tcp_receive+0xb18>)
 801b708:	f005 ff0c 	bl	8021524 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801b710:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801b712:	4b5a      	ldr	r3, [pc, #360]	; (801b87c <tcp_receive+0xb04>)
 801b714:	881b      	ldrh	r3, [r3, #0]
 801b716:	461a      	mov	r2, r3
 801b718:	4b59      	ldr	r3, [pc, #356]	; (801b880 <tcp_receive+0xb08>)
 801b71a:	681b      	ldr	r3, [r3, #0]
 801b71c:	441a      	add	r2, r3
 801b71e:	687b      	ldr	r3, [r7, #4]
 801b720:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801b722:	687b      	ldr	r3, [r7, #4]
 801b724:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801b726:	4b55      	ldr	r3, [pc, #340]	; (801b87c <tcp_receive+0xb04>)
 801b728:	881b      	ldrh	r3, [r3, #0]
 801b72a:	429a      	cmp	r2, r3
 801b72c:	d206      	bcs.n	801b73c <tcp_receive+0x9c4>
 801b72e:	4b56      	ldr	r3, [pc, #344]	; (801b888 <tcp_receive+0xb10>)
 801b730:	f240 6207 	movw	r2, #1543	; 0x607
 801b734:	4957      	ldr	r1, [pc, #348]	; (801b894 <tcp_receive+0xb1c>)
 801b736:	4856      	ldr	r0, [pc, #344]	; (801b890 <tcp_receive+0xb18>)
 801b738:	f005 fef4 	bl	8021524 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801b73c:	687b      	ldr	r3, [r7, #4]
 801b73e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801b740:	4b4e      	ldr	r3, [pc, #312]	; (801b87c <tcp_receive+0xb04>)
 801b742:	881b      	ldrh	r3, [r3, #0]
 801b744:	1ad3      	subs	r3, r2, r3
 801b746:	b29a      	uxth	r2, r3
 801b748:	687b      	ldr	r3, [r7, #4]
 801b74a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801b74c:	6878      	ldr	r0, [r7, #4]
 801b74e:	f7fc fe97 	bl	8018480 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801b752:	4b4c      	ldr	r3, [pc, #304]	; (801b884 <tcp_receive+0xb0c>)
 801b754:	685b      	ldr	r3, [r3, #4]
 801b756:	891b      	ldrh	r3, [r3, #8]
 801b758:	2b00      	cmp	r3, #0
 801b75a:	d006      	beq.n	801b76a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801b75c:	4b49      	ldr	r3, [pc, #292]	; (801b884 <tcp_receive+0xb0c>)
 801b75e:	685b      	ldr	r3, [r3, #4]
 801b760:	4a4d      	ldr	r2, [pc, #308]	; (801b898 <tcp_receive+0xb20>)
 801b762:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801b764:	4b47      	ldr	r3, [pc, #284]	; (801b884 <tcp_receive+0xb0c>)
 801b766:	2200      	movs	r2, #0
 801b768:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801b76a:	4b46      	ldr	r3, [pc, #280]	; (801b884 <tcp_receive+0xb0c>)
 801b76c:	68db      	ldr	r3, [r3, #12]
 801b76e:	899b      	ldrh	r3, [r3, #12]
 801b770:	b29b      	uxth	r3, r3
 801b772:	4618      	mov	r0, r3
 801b774:	f7fa fae6 	bl	8015d44 <lwip_htons>
 801b778:	4603      	mov	r3, r0
 801b77a:	b2db      	uxtb	r3, r3
 801b77c:	f003 0301 	and.w	r3, r3, #1
 801b780:	2b00      	cmp	r3, #0
 801b782:	f000 80b8 	beq.w	801b8f6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801b786:	4b45      	ldr	r3, [pc, #276]	; (801b89c <tcp_receive+0xb24>)
 801b788:	781b      	ldrb	r3, [r3, #0]
 801b78a:	f043 0320 	orr.w	r3, r3, #32
 801b78e:	b2da      	uxtb	r2, r3
 801b790:	4b42      	ldr	r3, [pc, #264]	; (801b89c <tcp_receive+0xb24>)
 801b792:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801b794:	e0af      	b.n	801b8f6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801b796:	687b      	ldr	r3, [r7, #4]
 801b798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b79a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b7a0:	68db      	ldr	r3, [r3, #12]
 801b7a2:	685b      	ldr	r3, [r3, #4]
 801b7a4:	4a36      	ldr	r2, [pc, #216]	; (801b880 <tcp_receive+0xb08>)
 801b7a6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801b7a8:	68bb      	ldr	r3, [r7, #8]
 801b7aa:	891b      	ldrh	r3, [r3, #8]
 801b7ac:	461c      	mov	r4, r3
 801b7ae:	68bb      	ldr	r3, [r7, #8]
 801b7b0:	68db      	ldr	r3, [r3, #12]
 801b7b2:	899b      	ldrh	r3, [r3, #12]
 801b7b4:	b29b      	uxth	r3, r3
 801b7b6:	4618      	mov	r0, r3
 801b7b8:	f7fa fac4 	bl	8015d44 <lwip_htons>
 801b7bc:	4603      	mov	r3, r0
 801b7be:	b2db      	uxtb	r3, r3
 801b7c0:	f003 0303 	and.w	r3, r3, #3
 801b7c4:	2b00      	cmp	r3, #0
 801b7c6:	d001      	beq.n	801b7cc <tcp_receive+0xa54>
 801b7c8:	2301      	movs	r3, #1
 801b7ca:	e000      	b.n	801b7ce <tcp_receive+0xa56>
 801b7cc:	2300      	movs	r3, #0
 801b7ce:	191a      	adds	r2, r3, r4
 801b7d0:	687b      	ldr	r3, [r7, #4]
 801b7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b7d4:	441a      	add	r2, r3
 801b7d6:	687b      	ldr	r3, [r7, #4]
 801b7d8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801b7da:	687b      	ldr	r3, [r7, #4]
 801b7dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b7de:	461c      	mov	r4, r3
 801b7e0:	68bb      	ldr	r3, [r7, #8]
 801b7e2:	891b      	ldrh	r3, [r3, #8]
 801b7e4:	461d      	mov	r5, r3
 801b7e6:	68bb      	ldr	r3, [r7, #8]
 801b7e8:	68db      	ldr	r3, [r3, #12]
 801b7ea:	899b      	ldrh	r3, [r3, #12]
 801b7ec:	b29b      	uxth	r3, r3
 801b7ee:	4618      	mov	r0, r3
 801b7f0:	f7fa faa8 	bl	8015d44 <lwip_htons>
 801b7f4:	4603      	mov	r3, r0
 801b7f6:	b2db      	uxtb	r3, r3
 801b7f8:	f003 0303 	and.w	r3, r3, #3
 801b7fc:	2b00      	cmp	r3, #0
 801b7fe:	d001      	beq.n	801b804 <tcp_receive+0xa8c>
 801b800:	2301      	movs	r3, #1
 801b802:	e000      	b.n	801b806 <tcp_receive+0xa8e>
 801b804:	2300      	movs	r3, #0
 801b806:	442b      	add	r3, r5
 801b808:	429c      	cmp	r4, r3
 801b80a:	d206      	bcs.n	801b81a <tcp_receive+0xaa2>
 801b80c:	4b1e      	ldr	r3, [pc, #120]	; (801b888 <tcp_receive+0xb10>)
 801b80e:	f240 622b 	movw	r2, #1579	; 0x62b
 801b812:	4923      	ldr	r1, [pc, #140]	; (801b8a0 <tcp_receive+0xb28>)
 801b814:	481e      	ldr	r0, [pc, #120]	; (801b890 <tcp_receive+0xb18>)
 801b816:	f005 fe85 	bl	8021524 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801b81a:	68bb      	ldr	r3, [r7, #8]
 801b81c:	891b      	ldrh	r3, [r3, #8]
 801b81e:	461c      	mov	r4, r3
 801b820:	68bb      	ldr	r3, [r7, #8]
 801b822:	68db      	ldr	r3, [r3, #12]
 801b824:	899b      	ldrh	r3, [r3, #12]
 801b826:	b29b      	uxth	r3, r3
 801b828:	4618      	mov	r0, r3
 801b82a:	f7fa fa8b 	bl	8015d44 <lwip_htons>
 801b82e:	4603      	mov	r3, r0
 801b830:	b2db      	uxtb	r3, r3
 801b832:	f003 0303 	and.w	r3, r3, #3
 801b836:	2b00      	cmp	r3, #0
 801b838:	d001      	beq.n	801b83e <tcp_receive+0xac6>
 801b83a:	2301      	movs	r3, #1
 801b83c:	e000      	b.n	801b840 <tcp_receive+0xac8>
 801b83e:	2300      	movs	r3, #0
 801b840:	1919      	adds	r1, r3, r4
 801b842:	687b      	ldr	r3, [r7, #4]
 801b844:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801b846:	b28b      	uxth	r3, r1
 801b848:	1ad3      	subs	r3, r2, r3
 801b84a:	b29a      	uxth	r2, r3
 801b84c:	687b      	ldr	r3, [r7, #4]
 801b84e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801b850:	6878      	ldr	r0, [r7, #4]
 801b852:	f7fc fe15 	bl	8018480 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801b856:	68bb      	ldr	r3, [r7, #8]
 801b858:	685b      	ldr	r3, [r3, #4]
 801b85a:	891b      	ldrh	r3, [r3, #8]
 801b85c:	2b00      	cmp	r3, #0
 801b85e:	d028      	beq.n	801b8b2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801b860:	4b0d      	ldr	r3, [pc, #52]	; (801b898 <tcp_receive+0xb20>)
 801b862:	681b      	ldr	r3, [r3, #0]
 801b864:	2b00      	cmp	r3, #0
 801b866:	d01d      	beq.n	801b8a4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801b868:	4b0b      	ldr	r3, [pc, #44]	; (801b898 <tcp_receive+0xb20>)
 801b86a:	681a      	ldr	r2, [r3, #0]
 801b86c:	68bb      	ldr	r3, [r7, #8]
 801b86e:	685b      	ldr	r3, [r3, #4]
 801b870:	4619      	mov	r1, r3
 801b872:	4610      	mov	r0, r2
 801b874:	f7fb ffbe 	bl	80177f4 <pbuf_cat>
 801b878:	e018      	b.n	801b8ac <tcp_receive+0xb34>
 801b87a:	bf00      	nop
 801b87c:	2000530a 	.word	0x2000530a
 801b880:	20005300 	.word	0x20005300
 801b884:	200052e0 	.word	0x200052e0
 801b888:	08025874 	.word	0x08025874
 801b88c:	08025c54 	.word	0x08025c54
 801b890:	080258c0 	.word	0x080258c0
 801b894:	08025c90 	.word	0x08025c90
 801b898:	20005310 	.word	0x20005310
 801b89c:	2000530d 	.word	0x2000530d
 801b8a0:	08025cb0 	.word	0x08025cb0
            } else {
              recv_data = cseg->p;
 801b8a4:	68bb      	ldr	r3, [r7, #8]
 801b8a6:	685b      	ldr	r3, [r3, #4]
 801b8a8:	4a70      	ldr	r2, [pc, #448]	; (801ba6c <tcp_receive+0xcf4>)
 801b8aa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801b8ac:	68bb      	ldr	r3, [r7, #8]
 801b8ae:	2200      	movs	r2, #0
 801b8b0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801b8b2:	68bb      	ldr	r3, [r7, #8]
 801b8b4:	68db      	ldr	r3, [r3, #12]
 801b8b6:	899b      	ldrh	r3, [r3, #12]
 801b8b8:	b29b      	uxth	r3, r3
 801b8ba:	4618      	mov	r0, r3
 801b8bc:	f7fa fa42 	bl	8015d44 <lwip_htons>
 801b8c0:	4603      	mov	r3, r0
 801b8c2:	b2db      	uxtb	r3, r3
 801b8c4:	f003 0301 	and.w	r3, r3, #1
 801b8c8:	2b00      	cmp	r3, #0
 801b8ca:	d00d      	beq.n	801b8e8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801b8cc:	4b68      	ldr	r3, [pc, #416]	; (801ba70 <tcp_receive+0xcf8>)
 801b8ce:	781b      	ldrb	r3, [r3, #0]
 801b8d0:	f043 0320 	orr.w	r3, r3, #32
 801b8d4:	b2da      	uxtb	r2, r3
 801b8d6:	4b66      	ldr	r3, [pc, #408]	; (801ba70 <tcp_receive+0xcf8>)
 801b8d8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801b8da:	687b      	ldr	r3, [r7, #4]
 801b8dc:	7d1b      	ldrb	r3, [r3, #20]
 801b8de:	2b04      	cmp	r3, #4
 801b8e0:	d102      	bne.n	801b8e8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	2207      	movs	r2, #7
 801b8e6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801b8e8:	68bb      	ldr	r3, [r7, #8]
 801b8ea:	681a      	ldr	r2, [r3, #0]
 801b8ec:	687b      	ldr	r3, [r7, #4]
 801b8ee:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801b8f0:	68b8      	ldr	r0, [r7, #8]
 801b8f2:	f7fd faea 	bl	8018eca <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801b8f6:	687b      	ldr	r3, [r7, #4]
 801b8f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b8fa:	2b00      	cmp	r3, #0
 801b8fc:	d008      	beq.n	801b910 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801b8fe:	687b      	ldr	r3, [r7, #4]
 801b900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b902:	68db      	ldr	r3, [r3, #12]
 801b904:	685a      	ldr	r2, [r3, #4]
 801b906:	687b      	ldr	r3, [r7, #4]
 801b908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801b90a:	429a      	cmp	r2, r3
 801b90c:	f43f af43 	beq.w	801b796 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801b910:	687b      	ldr	r3, [r7, #4]
 801b912:	8b5b      	ldrh	r3, [r3, #26]
 801b914:	f003 0301 	and.w	r3, r3, #1
 801b918:	2b00      	cmp	r3, #0
 801b91a:	d00e      	beq.n	801b93a <tcp_receive+0xbc2>
 801b91c:	687b      	ldr	r3, [r7, #4]
 801b91e:	8b5b      	ldrh	r3, [r3, #26]
 801b920:	f023 0301 	bic.w	r3, r3, #1
 801b924:	b29a      	uxth	r2, r3
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	835a      	strh	r2, [r3, #26]
 801b92a:	687b      	ldr	r3, [r7, #4]
 801b92c:	8b5b      	ldrh	r3, [r3, #26]
 801b92e:	f043 0302 	orr.w	r3, r3, #2
 801b932:	b29a      	uxth	r2, r3
 801b934:	687b      	ldr	r3, [r7, #4]
 801b936:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801b938:	e188      	b.n	801bc4c <tcp_receive+0xed4>
        tcp_ack(pcb);
 801b93a:	687b      	ldr	r3, [r7, #4]
 801b93c:	8b5b      	ldrh	r3, [r3, #26]
 801b93e:	f043 0301 	orr.w	r3, r3, #1
 801b942:	b29a      	uxth	r2, r3
 801b944:	687b      	ldr	r3, [r7, #4]
 801b946:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801b948:	e180      	b.n	801bc4c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801b94a:	687b      	ldr	r3, [r7, #4]
 801b94c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b94e:	2b00      	cmp	r3, #0
 801b950:	d106      	bne.n	801b960 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801b952:	4848      	ldr	r0, [pc, #288]	; (801ba74 <tcp_receive+0xcfc>)
 801b954:	f7fd faf0 	bl	8018f38 <tcp_seg_copy>
 801b958:	4602      	mov	r2, r0
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	675a      	str	r2, [r3, #116]	; 0x74
 801b95e:	e16d      	b.n	801bc3c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801b960:	2300      	movs	r3, #0
 801b962:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b968:	63bb      	str	r3, [r7, #56]	; 0x38
 801b96a:	e157      	b.n	801bc1c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801b96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b96e:	68db      	ldr	r3, [r3, #12]
 801b970:	685a      	ldr	r2, [r3, #4]
 801b972:	4b41      	ldr	r3, [pc, #260]	; (801ba78 <tcp_receive+0xd00>)
 801b974:	681b      	ldr	r3, [r3, #0]
 801b976:	429a      	cmp	r2, r3
 801b978:	d11d      	bne.n	801b9b6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801b97a:	4b3e      	ldr	r3, [pc, #248]	; (801ba74 <tcp_receive+0xcfc>)
 801b97c:	891a      	ldrh	r2, [r3, #8]
 801b97e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b980:	891b      	ldrh	r3, [r3, #8]
 801b982:	429a      	cmp	r2, r3
 801b984:	f240 814f 	bls.w	801bc26 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801b988:	483a      	ldr	r0, [pc, #232]	; (801ba74 <tcp_receive+0xcfc>)
 801b98a:	f7fd fad5 	bl	8018f38 <tcp_seg_copy>
 801b98e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801b990:	697b      	ldr	r3, [r7, #20]
 801b992:	2b00      	cmp	r3, #0
 801b994:	f000 8149 	beq.w	801bc2a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801b998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b99a:	2b00      	cmp	r3, #0
 801b99c:	d003      	beq.n	801b9a6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801b99e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b9a0:	697a      	ldr	r2, [r7, #20]
 801b9a2:	601a      	str	r2, [r3, #0]
 801b9a4:	e002      	b.n	801b9ac <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	697a      	ldr	r2, [r7, #20]
 801b9aa:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801b9ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b9ae:	6978      	ldr	r0, [r7, #20]
 801b9b0:	f7ff f8de 	bl	801ab70 <tcp_oos_insert_segment>
                }
                break;
 801b9b4:	e139      	b.n	801bc2a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801b9b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b9b8:	2b00      	cmp	r3, #0
 801b9ba:	d117      	bne.n	801b9ec <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801b9bc:	4b2e      	ldr	r3, [pc, #184]	; (801ba78 <tcp_receive+0xd00>)
 801b9be:	681a      	ldr	r2, [r3, #0]
 801b9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b9c2:	68db      	ldr	r3, [r3, #12]
 801b9c4:	685b      	ldr	r3, [r3, #4]
 801b9c6:	1ad3      	subs	r3, r2, r3
 801b9c8:	2b00      	cmp	r3, #0
 801b9ca:	da57      	bge.n	801ba7c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801b9cc:	4829      	ldr	r0, [pc, #164]	; (801ba74 <tcp_receive+0xcfc>)
 801b9ce:	f7fd fab3 	bl	8018f38 <tcp_seg_copy>
 801b9d2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801b9d4:	69bb      	ldr	r3, [r7, #24]
 801b9d6:	2b00      	cmp	r3, #0
 801b9d8:	f000 8129 	beq.w	801bc2e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801b9dc:	687b      	ldr	r3, [r7, #4]
 801b9de:	69ba      	ldr	r2, [r7, #24]
 801b9e0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801b9e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801b9e4:	69b8      	ldr	r0, [r7, #24]
 801b9e6:	f7ff f8c3 	bl	801ab70 <tcp_oos_insert_segment>
                  }
                  break;
 801b9ea:	e120      	b.n	801bc2e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801b9ec:	4b22      	ldr	r3, [pc, #136]	; (801ba78 <tcp_receive+0xd00>)
 801b9ee:	681a      	ldr	r2, [r3, #0]
 801b9f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b9f2:	68db      	ldr	r3, [r3, #12]
 801b9f4:	685b      	ldr	r3, [r3, #4]
 801b9f6:	1ad3      	subs	r3, r2, r3
 801b9f8:	3b01      	subs	r3, #1
 801b9fa:	2b00      	cmp	r3, #0
 801b9fc:	db3e      	blt.n	801ba7c <tcp_receive+0xd04>
 801b9fe:	4b1e      	ldr	r3, [pc, #120]	; (801ba78 <tcp_receive+0xd00>)
 801ba00:	681a      	ldr	r2, [r3, #0]
 801ba02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba04:	68db      	ldr	r3, [r3, #12]
 801ba06:	685b      	ldr	r3, [r3, #4]
 801ba08:	1ad3      	subs	r3, r2, r3
 801ba0a:	3301      	adds	r3, #1
 801ba0c:	2b00      	cmp	r3, #0
 801ba0e:	dc35      	bgt.n	801ba7c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801ba10:	4818      	ldr	r0, [pc, #96]	; (801ba74 <tcp_receive+0xcfc>)
 801ba12:	f7fd fa91 	bl	8018f38 <tcp_seg_copy>
 801ba16:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801ba18:	69fb      	ldr	r3, [r7, #28]
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	f000 8109 	beq.w	801bc32 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801ba20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ba22:	68db      	ldr	r3, [r3, #12]
 801ba24:	685b      	ldr	r3, [r3, #4]
 801ba26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ba28:	8912      	ldrh	r2, [r2, #8]
 801ba2a:	441a      	add	r2, r3
 801ba2c:	4b12      	ldr	r3, [pc, #72]	; (801ba78 <tcp_receive+0xd00>)
 801ba2e:	681b      	ldr	r3, [r3, #0]
 801ba30:	1ad3      	subs	r3, r2, r3
 801ba32:	2b00      	cmp	r3, #0
 801ba34:	dd12      	ble.n	801ba5c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801ba36:	4b10      	ldr	r3, [pc, #64]	; (801ba78 <tcp_receive+0xd00>)
 801ba38:	681b      	ldr	r3, [r3, #0]
 801ba3a:	b29a      	uxth	r2, r3
 801ba3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ba3e:	68db      	ldr	r3, [r3, #12]
 801ba40:	685b      	ldr	r3, [r3, #4]
 801ba42:	b29b      	uxth	r3, r3
 801ba44:	1ad3      	subs	r3, r2, r3
 801ba46:	b29a      	uxth	r2, r3
 801ba48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ba4a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801ba4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ba4e:	685a      	ldr	r2, [r3, #4]
 801ba50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ba52:	891b      	ldrh	r3, [r3, #8]
 801ba54:	4619      	mov	r1, r3
 801ba56:	4610      	mov	r0, r2
 801ba58:	f7fb fc78 	bl	801734c <pbuf_realloc>
                    }
                    prev->next = cseg;
 801ba5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ba5e:	69fa      	ldr	r2, [r7, #28]
 801ba60:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801ba62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801ba64:	69f8      	ldr	r0, [r7, #28]
 801ba66:	f7ff f883 	bl	801ab70 <tcp_oos_insert_segment>
                  }
                  break;
 801ba6a:	e0e2      	b.n	801bc32 <tcp_receive+0xeba>
 801ba6c:	20005310 	.word	0x20005310
 801ba70:	2000530d 	.word	0x2000530d
 801ba74:	200052e0 	.word	0x200052e0
 801ba78:	20005300 	.word	0x20005300
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801ba7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba7e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801ba80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba82:	681b      	ldr	r3, [r3, #0]
 801ba84:	2b00      	cmp	r3, #0
 801ba86:	f040 80c6 	bne.w	801bc16 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801ba8a:	4b80      	ldr	r3, [pc, #512]	; (801bc8c <tcp_receive+0xf14>)
 801ba8c:	681a      	ldr	r2, [r3, #0]
 801ba8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba90:	68db      	ldr	r3, [r3, #12]
 801ba92:	685b      	ldr	r3, [r3, #4]
 801ba94:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801ba96:	2b00      	cmp	r3, #0
 801ba98:	f340 80bd 	ble.w	801bc16 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801ba9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ba9e:	68db      	ldr	r3, [r3, #12]
 801baa0:	899b      	ldrh	r3, [r3, #12]
 801baa2:	b29b      	uxth	r3, r3
 801baa4:	4618      	mov	r0, r3
 801baa6:	f7fa f94d 	bl	8015d44 <lwip_htons>
 801baaa:	4603      	mov	r3, r0
 801baac:	b2db      	uxtb	r3, r3
 801baae:	f003 0301 	and.w	r3, r3, #1
 801bab2:	2b00      	cmp	r3, #0
 801bab4:	f040 80bf 	bne.w	801bc36 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801bab8:	4875      	ldr	r0, [pc, #468]	; (801bc90 <tcp_receive+0xf18>)
 801baba:	f7fd fa3d 	bl	8018f38 <tcp_seg_copy>
 801babe:	4602      	mov	r2, r0
 801bac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bac2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801bac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bac6:	681b      	ldr	r3, [r3, #0]
 801bac8:	2b00      	cmp	r3, #0
 801baca:	f000 80b6 	beq.w	801bc3a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801bace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bad0:	68db      	ldr	r3, [r3, #12]
 801bad2:	685b      	ldr	r3, [r3, #4]
 801bad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801bad6:	8912      	ldrh	r2, [r2, #8]
 801bad8:	441a      	add	r2, r3
 801bada:	4b6c      	ldr	r3, [pc, #432]	; (801bc8c <tcp_receive+0xf14>)
 801badc:	681b      	ldr	r3, [r3, #0]
 801bade:	1ad3      	subs	r3, r2, r3
 801bae0:	2b00      	cmp	r3, #0
 801bae2:	dd12      	ble.n	801bb0a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801bae4:	4b69      	ldr	r3, [pc, #420]	; (801bc8c <tcp_receive+0xf14>)
 801bae6:	681b      	ldr	r3, [r3, #0]
 801bae8:	b29a      	uxth	r2, r3
 801baea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801baec:	68db      	ldr	r3, [r3, #12]
 801baee:	685b      	ldr	r3, [r3, #4]
 801baf0:	b29b      	uxth	r3, r3
 801baf2:	1ad3      	subs	r3, r2, r3
 801baf4:	b29a      	uxth	r2, r3
 801baf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801baf8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801bafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bafc:	685a      	ldr	r2, [r3, #4]
 801bafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bb00:	891b      	ldrh	r3, [r3, #8]
 801bb02:	4619      	mov	r1, r3
 801bb04:	4610      	mov	r0, r2
 801bb06:	f7fb fc21 	bl	801734c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801bb0a:	4b62      	ldr	r3, [pc, #392]	; (801bc94 <tcp_receive+0xf1c>)
 801bb0c:	881b      	ldrh	r3, [r3, #0]
 801bb0e:	461a      	mov	r2, r3
 801bb10:	4b5e      	ldr	r3, [pc, #376]	; (801bc8c <tcp_receive+0xf14>)
 801bb12:	681b      	ldr	r3, [r3, #0]
 801bb14:	441a      	add	r2, r3
 801bb16:	687b      	ldr	r3, [r7, #4]
 801bb18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb1a:	6879      	ldr	r1, [r7, #4]
 801bb1c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801bb1e:	440b      	add	r3, r1
 801bb20:	1ad3      	subs	r3, r2, r3
 801bb22:	2b00      	cmp	r3, #0
 801bb24:	f340 8089 	ble.w	801bc3a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801bb28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bb2a:	681b      	ldr	r3, [r3, #0]
 801bb2c:	68db      	ldr	r3, [r3, #12]
 801bb2e:	899b      	ldrh	r3, [r3, #12]
 801bb30:	b29b      	uxth	r3, r3
 801bb32:	4618      	mov	r0, r3
 801bb34:	f7fa f906 	bl	8015d44 <lwip_htons>
 801bb38:	4603      	mov	r3, r0
 801bb3a:	b2db      	uxtb	r3, r3
 801bb3c:	f003 0301 	and.w	r3, r3, #1
 801bb40:	2b00      	cmp	r3, #0
 801bb42:	d022      	beq.n	801bb8a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801bb44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bb46:	681b      	ldr	r3, [r3, #0]
 801bb48:	68db      	ldr	r3, [r3, #12]
 801bb4a:	899b      	ldrh	r3, [r3, #12]
 801bb4c:	b29b      	uxth	r3, r3
 801bb4e:	b21b      	sxth	r3, r3
 801bb50:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801bb54:	b21c      	sxth	r4, r3
 801bb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bb58:	681b      	ldr	r3, [r3, #0]
 801bb5a:	68db      	ldr	r3, [r3, #12]
 801bb5c:	899b      	ldrh	r3, [r3, #12]
 801bb5e:	b29b      	uxth	r3, r3
 801bb60:	4618      	mov	r0, r3
 801bb62:	f7fa f8ef 	bl	8015d44 <lwip_htons>
 801bb66:	4603      	mov	r3, r0
 801bb68:	b2db      	uxtb	r3, r3
 801bb6a:	b29b      	uxth	r3, r3
 801bb6c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801bb70:	b29b      	uxth	r3, r3
 801bb72:	4618      	mov	r0, r3
 801bb74:	f7fa f8e6 	bl	8015d44 <lwip_htons>
 801bb78:	4603      	mov	r3, r0
 801bb7a:	b21b      	sxth	r3, r3
 801bb7c:	4323      	orrs	r3, r4
 801bb7e:	b21a      	sxth	r2, r3
 801bb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bb82:	681b      	ldr	r3, [r3, #0]
 801bb84:	68db      	ldr	r3, [r3, #12]
 801bb86:	b292      	uxth	r2, r2
 801bb88:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801bb8a:	687b      	ldr	r3, [r7, #4]
 801bb8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb8e:	b29a      	uxth	r2, r3
 801bb90:	687b      	ldr	r3, [r7, #4]
 801bb92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801bb94:	4413      	add	r3, r2
 801bb96:	b299      	uxth	r1, r3
 801bb98:	4b3c      	ldr	r3, [pc, #240]	; (801bc8c <tcp_receive+0xf14>)
 801bb9a:	681b      	ldr	r3, [r3, #0]
 801bb9c:	b29a      	uxth	r2, r3
 801bb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bba0:	681b      	ldr	r3, [r3, #0]
 801bba2:	1a8a      	subs	r2, r1, r2
 801bba4:	b292      	uxth	r2, r2
 801bba6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801bba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bbaa:	681b      	ldr	r3, [r3, #0]
 801bbac:	685a      	ldr	r2, [r3, #4]
 801bbae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bbb0:	681b      	ldr	r3, [r3, #0]
 801bbb2:	891b      	ldrh	r3, [r3, #8]
 801bbb4:	4619      	mov	r1, r3
 801bbb6:	4610      	mov	r0, r2
 801bbb8:	f7fb fbc8 	bl	801734c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801bbbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bbbe:	681b      	ldr	r3, [r3, #0]
 801bbc0:	891c      	ldrh	r4, [r3, #8]
 801bbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bbc4:	681b      	ldr	r3, [r3, #0]
 801bbc6:	68db      	ldr	r3, [r3, #12]
 801bbc8:	899b      	ldrh	r3, [r3, #12]
 801bbca:	b29b      	uxth	r3, r3
 801bbcc:	4618      	mov	r0, r3
 801bbce:	f7fa f8b9 	bl	8015d44 <lwip_htons>
 801bbd2:	4603      	mov	r3, r0
 801bbd4:	b2db      	uxtb	r3, r3
 801bbd6:	f003 0303 	and.w	r3, r3, #3
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	d001      	beq.n	801bbe2 <tcp_receive+0xe6a>
 801bbde:	2301      	movs	r3, #1
 801bbe0:	e000      	b.n	801bbe4 <tcp_receive+0xe6c>
 801bbe2:	2300      	movs	r3, #0
 801bbe4:	4423      	add	r3, r4
 801bbe6:	b29a      	uxth	r2, r3
 801bbe8:	4b2a      	ldr	r3, [pc, #168]	; (801bc94 <tcp_receive+0xf1c>)
 801bbea:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801bbec:	4b29      	ldr	r3, [pc, #164]	; (801bc94 <tcp_receive+0xf1c>)
 801bbee:	881b      	ldrh	r3, [r3, #0]
 801bbf0:	461a      	mov	r2, r3
 801bbf2:	4b26      	ldr	r3, [pc, #152]	; (801bc8c <tcp_receive+0xf14>)
 801bbf4:	681b      	ldr	r3, [r3, #0]
 801bbf6:	441a      	add	r2, r3
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bbfc:	6879      	ldr	r1, [r7, #4]
 801bbfe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801bc00:	440b      	add	r3, r1
 801bc02:	429a      	cmp	r2, r3
 801bc04:	d019      	beq.n	801bc3a <tcp_receive+0xec2>
 801bc06:	4b24      	ldr	r3, [pc, #144]	; (801bc98 <tcp_receive+0xf20>)
 801bc08:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801bc0c:	4923      	ldr	r1, [pc, #140]	; (801bc9c <tcp_receive+0xf24>)
 801bc0e:	4824      	ldr	r0, [pc, #144]	; (801bca0 <tcp_receive+0xf28>)
 801bc10:	f005 fc88 	bl	8021524 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801bc14:	e011      	b.n	801bc3a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801bc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bc18:	681b      	ldr	r3, [r3, #0]
 801bc1a:	63bb      	str	r3, [r7, #56]	; 0x38
 801bc1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bc1e:	2b00      	cmp	r3, #0
 801bc20:	f47f aea4 	bne.w	801b96c <tcp_receive+0xbf4>
 801bc24:	e00a      	b.n	801bc3c <tcp_receive+0xec4>
                break;
 801bc26:	bf00      	nop
 801bc28:	e008      	b.n	801bc3c <tcp_receive+0xec4>
                break;
 801bc2a:	bf00      	nop
 801bc2c:	e006      	b.n	801bc3c <tcp_receive+0xec4>
                  break;
 801bc2e:	bf00      	nop
 801bc30:	e004      	b.n	801bc3c <tcp_receive+0xec4>
                  break;
 801bc32:	bf00      	nop
 801bc34:	e002      	b.n	801bc3c <tcp_receive+0xec4>
                  break;
 801bc36:	bf00      	nop
 801bc38:	e000      	b.n	801bc3c <tcp_receive+0xec4>
                break;
 801bc3a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801bc3c:	6878      	ldr	r0, [r7, #4]
 801bc3e:	f001 fe8b 	bl	801d958 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801bc42:	e003      	b.n	801bc4c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801bc44:	6878      	ldr	r0, [r7, #4]
 801bc46:	f001 fe87 	bl	801d958 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801bc4a:	e01a      	b.n	801bc82 <tcp_receive+0xf0a>
 801bc4c:	e019      	b.n	801bc82 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801bc4e:	4b0f      	ldr	r3, [pc, #60]	; (801bc8c <tcp_receive+0xf14>)
 801bc50:	681a      	ldr	r2, [r3, #0]
 801bc52:	687b      	ldr	r3, [r7, #4]
 801bc54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bc56:	1ad3      	subs	r3, r2, r3
 801bc58:	2b00      	cmp	r3, #0
 801bc5a:	db0a      	blt.n	801bc72 <tcp_receive+0xefa>
 801bc5c:	4b0b      	ldr	r3, [pc, #44]	; (801bc8c <tcp_receive+0xf14>)
 801bc5e:	681a      	ldr	r2, [r3, #0]
 801bc60:	687b      	ldr	r3, [r7, #4]
 801bc62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bc64:	6879      	ldr	r1, [r7, #4]
 801bc66:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801bc68:	440b      	add	r3, r1
 801bc6a:	1ad3      	subs	r3, r2, r3
 801bc6c:	3301      	adds	r3, #1
 801bc6e:	2b00      	cmp	r3, #0
 801bc70:	dd07      	ble.n	801bc82 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801bc72:	687b      	ldr	r3, [r7, #4]
 801bc74:	8b5b      	ldrh	r3, [r3, #26]
 801bc76:	f043 0302 	orr.w	r3, r3, #2
 801bc7a:	b29a      	uxth	r2, r3
 801bc7c:	687b      	ldr	r3, [r7, #4]
 801bc7e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801bc80:	e7ff      	b.n	801bc82 <tcp_receive+0xf0a>
 801bc82:	bf00      	nop
 801bc84:	3750      	adds	r7, #80	; 0x50
 801bc86:	46bd      	mov	sp, r7
 801bc88:	bdb0      	pop	{r4, r5, r7, pc}
 801bc8a:	bf00      	nop
 801bc8c:	20005300 	.word	0x20005300
 801bc90:	200052e0 	.word	0x200052e0
 801bc94:	2000530a 	.word	0x2000530a
 801bc98:	08025874 	.word	0x08025874
 801bc9c:	08025c1c 	.word	0x08025c1c
 801bca0:	080258c0 	.word	0x080258c0

0801bca4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801bca4:	b480      	push	{r7}
 801bca6:	b083      	sub	sp, #12
 801bca8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801bcaa:	4b15      	ldr	r3, [pc, #84]	; (801bd00 <tcp_get_next_optbyte+0x5c>)
 801bcac:	881b      	ldrh	r3, [r3, #0]
 801bcae:	1c5a      	adds	r2, r3, #1
 801bcb0:	b291      	uxth	r1, r2
 801bcb2:	4a13      	ldr	r2, [pc, #76]	; (801bd00 <tcp_get_next_optbyte+0x5c>)
 801bcb4:	8011      	strh	r1, [r2, #0]
 801bcb6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801bcb8:	4b12      	ldr	r3, [pc, #72]	; (801bd04 <tcp_get_next_optbyte+0x60>)
 801bcba:	681b      	ldr	r3, [r3, #0]
 801bcbc:	2b00      	cmp	r3, #0
 801bcbe:	d004      	beq.n	801bcca <tcp_get_next_optbyte+0x26>
 801bcc0:	4b11      	ldr	r3, [pc, #68]	; (801bd08 <tcp_get_next_optbyte+0x64>)
 801bcc2:	881b      	ldrh	r3, [r3, #0]
 801bcc4:	88fa      	ldrh	r2, [r7, #6]
 801bcc6:	429a      	cmp	r2, r3
 801bcc8:	d208      	bcs.n	801bcdc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801bcca:	4b10      	ldr	r3, [pc, #64]	; (801bd0c <tcp_get_next_optbyte+0x68>)
 801bccc:	681b      	ldr	r3, [r3, #0]
 801bcce:	3314      	adds	r3, #20
 801bcd0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801bcd2:	88fb      	ldrh	r3, [r7, #6]
 801bcd4:	683a      	ldr	r2, [r7, #0]
 801bcd6:	4413      	add	r3, r2
 801bcd8:	781b      	ldrb	r3, [r3, #0]
 801bcda:	e00b      	b.n	801bcf4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801bcdc:	88fb      	ldrh	r3, [r7, #6]
 801bcde:	b2da      	uxtb	r2, r3
 801bce0:	4b09      	ldr	r3, [pc, #36]	; (801bd08 <tcp_get_next_optbyte+0x64>)
 801bce2:	881b      	ldrh	r3, [r3, #0]
 801bce4:	b2db      	uxtb	r3, r3
 801bce6:	1ad3      	subs	r3, r2, r3
 801bce8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801bcea:	4b06      	ldr	r3, [pc, #24]	; (801bd04 <tcp_get_next_optbyte+0x60>)
 801bcec:	681a      	ldr	r2, [r3, #0]
 801bcee:	797b      	ldrb	r3, [r7, #5]
 801bcf0:	4413      	add	r3, r2
 801bcf2:	781b      	ldrb	r3, [r3, #0]
  }
}
 801bcf4:	4618      	mov	r0, r3
 801bcf6:	370c      	adds	r7, #12
 801bcf8:	46bd      	mov	sp, r7
 801bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcfe:	4770      	bx	lr
 801bd00:	200052fc 	.word	0x200052fc
 801bd04:	200052f8 	.word	0x200052f8
 801bd08:	200052f6 	.word	0x200052f6
 801bd0c:	200052f0 	.word	0x200052f0

0801bd10 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801bd10:	b580      	push	{r7, lr}
 801bd12:	b084      	sub	sp, #16
 801bd14:	af00      	add	r7, sp, #0
 801bd16:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801bd18:	687b      	ldr	r3, [r7, #4]
 801bd1a:	2b00      	cmp	r3, #0
 801bd1c:	d106      	bne.n	801bd2c <tcp_parseopt+0x1c>
 801bd1e:	4b32      	ldr	r3, [pc, #200]	; (801bde8 <tcp_parseopt+0xd8>)
 801bd20:	f240 727d 	movw	r2, #1917	; 0x77d
 801bd24:	4931      	ldr	r1, [pc, #196]	; (801bdec <tcp_parseopt+0xdc>)
 801bd26:	4832      	ldr	r0, [pc, #200]	; (801bdf0 <tcp_parseopt+0xe0>)
 801bd28:	f005 fbfc 	bl	8021524 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801bd2c:	4b31      	ldr	r3, [pc, #196]	; (801bdf4 <tcp_parseopt+0xe4>)
 801bd2e:	881b      	ldrh	r3, [r3, #0]
 801bd30:	2b00      	cmp	r3, #0
 801bd32:	d055      	beq.n	801bde0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801bd34:	4b30      	ldr	r3, [pc, #192]	; (801bdf8 <tcp_parseopt+0xe8>)
 801bd36:	2200      	movs	r2, #0
 801bd38:	801a      	strh	r2, [r3, #0]
 801bd3a:	e045      	b.n	801bdc8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801bd3c:	f7ff ffb2 	bl	801bca4 <tcp_get_next_optbyte>
 801bd40:	4603      	mov	r3, r0
 801bd42:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801bd44:	7bfb      	ldrb	r3, [r7, #15]
 801bd46:	2b02      	cmp	r3, #2
 801bd48:	d006      	beq.n	801bd58 <tcp_parseopt+0x48>
 801bd4a:	2b02      	cmp	r3, #2
 801bd4c:	dc2b      	bgt.n	801bda6 <tcp_parseopt+0x96>
 801bd4e:	2b00      	cmp	r3, #0
 801bd50:	d041      	beq.n	801bdd6 <tcp_parseopt+0xc6>
 801bd52:	2b01      	cmp	r3, #1
 801bd54:	d127      	bne.n	801bda6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801bd56:	e037      	b.n	801bdc8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801bd58:	f7ff ffa4 	bl	801bca4 <tcp_get_next_optbyte>
 801bd5c:	4603      	mov	r3, r0
 801bd5e:	2b04      	cmp	r3, #4
 801bd60:	d13b      	bne.n	801bdda <tcp_parseopt+0xca>
 801bd62:	4b25      	ldr	r3, [pc, #148]	; (801bdf8 <tcp_parseopt+0xe8>)
 801bd64:	881b      	ldrh	r3, [r3, #0]
 801bd66:	3301      	adds	r3, #1
 801bd68:	4a22      	ldr	r2, [pc, #136]	; (801bdf4 <tcp_parseopt+0xe4>)
 801bd6a:	8812      	ldrh	r2, [r2, #0]
 801bd6c:	4293      	cmp	r3, r2
 801bd6e:	da34      	bge.n	801bdda <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801bd70:	f7ff ff98 	bl	801bca4 <tcp_get_next_optbyte>
 801bd74:	4603      	mov	r3, r0
 801bd76:	b29b      	uxth	r3, r3
 801bd78:	021b      	lsls	r3, r3, #8
 801bd7a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801bd7c:	f7ff ff92 	bl	801bca4 <tcp_get_next_optbyte>
 801bd80:	4603      	mov	r3, r0
 801bd82:	b29a      	uxth	r2, r3
 801bd84:	89bb      	ldrh	r3, [r7, #12]
 801bd86:	4313      	orrs	r3, r2
 801bd88:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801bd8a:	89bb      	ldrh	r3, [r7, #12]
 801bd8c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801bd90:	d804      	bhi.n	801bd9c <tcp_parseopt+0x8c>
 801bd92:	89bb      	ldrh	r3, [r7, #12]
 801bd94:	2b00      	cmp	r3, #0
 801bd96:	d001      	beq.n	801bd9c <tcp_parseopt+0x8c>
 801bd98:	89ba      	ldrh	r2, [r7, #12]
 801bd9a:	e001      	b.n	801bda0 <tcp_parseopt+0x90>
 801bd9c:	f44f 7206 	mov.w	r2, #536	; 0x218
 801bda0:	687b      	ldr	r3, [r7, #4]
 801bda2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801bda4:	e010      	b.n	801bdc8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801bda6:	f7ff ff7d 	bl	801bca4 <tcp_get_next_optbyte>
 801bdaa:	4603      	mov	r3, r0
 801bdac:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801bdae:	7afb      	ldrb	r3, [r7, #11]
 801bdb0:	2b01      	cmp	r3, #1
 801bdb2:	d914      	bls.n	801bdde <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801bdb4:	7afb      	ldrb	r3, [r7, #11]
 801bdb6:	b29a      	uxth	r2, r3
 801bdb8:	4b0f      	ldr	r3, [pc, #60]	; (801bdf8 <tcp_parseopt+0xe8>)
 801bdba:	881b      	ldrh	r3, [r3, #0]
 801bdbc:	4413      	add	r3, r2
 801bdbe:	b29b      	uxth	r3, r3
 801bdc0:	3b02      	subs	r3, #2
 801bdc2:	b29a      	uxth	r2, r3
 801bdc4:	4b0c      	ldr	r3, [pc, #48]	; (801bdf8 <tcp_parseopt+0xe8>)
 801bdc6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801bdc8:	4b0b      	ldr	r3, [pc, #44]	; (801bdf8 <tcp_parseopt+0xe8>)
 801bdca:	881a      	ldrh	r2, [r3, #0]
 801bdcc:	4b09      	ldr	r3, [pc, #36]	; (801bdf4 <tcp_parseopt+0xe4>)
 801bdce:	881b      	ldrh	r3, [r3, #0]
 801bdd0:	429a      	cmp	r2, r3
 801bdd2:	d3b3      	bcc.n	801bd3c <tcp_parseopt+0x2c>
 801bdd4:	e004      	b.n	801bde0 <tcp_parseopt+0xd0>
          return;
 801bdd6:	bf00      	nop
 801bdd8:	e002      	b.n	801bde0 <tcp_parseopt+0xd0>
            return;
 801bdda:	bf00      	nop
 801bddc:	e000      	b.n	801bde0 <tcp_parseopt+0xd0>
            return;
 801bdde:	bf00      	nop
      }
    }
  }
}
 801bde0:	3710      	adds	r7, #16
 801bde2:	46bd      	mov	sp, r7
 801bde4:	bd80      	pop	{r7, pc}
 801bde6:	bf00      	nop
 801bde8:	08025874 	.word	0x08025874
 801bdec:	08025cd8 	.word	0x08025cd8
 801bdf0:	080258c0 	.word	0x080258c0
 801bdf4:	200052f4 	.word	0x200052f4
 801bdf8:	200052fc 	.word	0x200052fc

0801bdfc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801bdfc:	b480      	push	{r7}
 801bdfe:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801be00:	4b05      	ldr	r3, [pc, #20]	; (801be18 <tcp_trigger_input_pcb_close+0x1c>)
 801be02:	781b      	ldrb	r3, [r3, #0]
 801be04:	f043 0310 	orr.w	r3, r3, #16
 801be08:	b2da      	uxtb	r2, r3
 801be0a:	4b03      	ldr	r3, [pc, #12]	; (801be18 <tcp_trigger_input_pcb_close+0x1c>)
 801be0c:	701a      	strb	r2, [r3, #0]
}
 801be0e:	bf00      	nop
 801be10:	46bd      	mov	sp, r7
 801be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be16:	4770      	bx	lr
 801be18:	2000530d 	.word	0x2000530d

0801be1c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801be1c:	b580      	push	{r7, lr}
 801be1e:	b084      	sub	sp, #16
 801be20:	af00      	add	r7, sp, #0
 801be22:	60f8      	str	r0, [r7, #12]
 801be24:	60b9      	str	r1, [r7, #8]
 801be26:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801be28:	68fb      	ldr	r3, [r7, #12]
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	d00a      	beq.n	801be44 <tcp_route+0x28>
 801be2e:	68fb      	ldr	r3, [r7, #12]
 801be30:	7a1b      	ldrb	r3, [r3, #8]
 801be32:	2b00      	cmp	r3, #0
 801be34:	d006      	beq.n	801be44 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801be36:	68fb      	ldr	r3, [r7, #12]
 801be38:	7a1b      	ldrb	r3, [r3, #8]
 801be3a:	4618      	mov	r0, r3
 801be3c:	f7fb f87e 	bl	8016f3c <netif_get_by_index>
 801be40:	4603      	mov	r3, r0
 801be42:	e003      	b.n	801be4c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801be44:	6878      	ldr	r0, [r7, #4]
 801be46:	f003 fb05 	bl	801f454 <ip4_route>
 801be4a:	4603      	mov	r3, r0
  }
}
 801be4c:	4618      	mov	r0, r3
 801be4e:	3710      	adds	r7, #16
 801be50:	46bd      	mov	sp, r7
 801be52:	bd80      	pop	{r7, pc}

0801be54 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801be54:	b590      	push	{r4, r7, lr}
 801be56:	b087      	sub	sp, #28
 801be58:	af00      	add	r7, sp, #0
 801be5a:	60f8      	str	r0, [r7, #12]
 801be5c:	60b9      	str	r1, [r7, #8]
 801be5e:	603b      	str	r3, [r7, #0]
 801be60:	4613      	mov	r3, r2
 801be62:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801be64:	68fb      	ldr	r3, [r7, #12]
 801be66:	2b00      	cmp	r3, #0
 801be68:	d105      	bne.n	801be76 <tcp_create_segment+0x22>
 801be6a:	4b44      	ldr	r3, [pc, #272]	; (801bf7c <tcp_create_segment+0x128>)
 801be6c:	22a3      	movs	r2, #163	; 0xa3
 801be6e:	4944      	ldr	r1, [pc, #272]	; (801bf80 <tcp_create_segment+0x12c>)
 801be70:	4844      	ldr	r0, [pc, #272]	; (801bf84 <tcp_create_segment+0x130>)
 801be72:	f005 fb57 	bl	8021524 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801be76:	68bb      	ldr	r3, [r7, #8]
 801be78:	2b00      	cmp	r3, #0
 801be7a:	d105      	bne.n	801be88 <tcp_create_segment+0x34>
 801be7c:	4b3f      	ldr	r3, [pc, #252]	; (801bf7c <tcp_create_segment+0x128>)
 801be7e:	22a4      	movs	r2, #164	; 0xa4
 801be80:	4941      	ldr	r1, [pc, #260]	; (801bf88 <tcp_create_segment+0x134>)
 801be82:	4840      	ldr	r0, [pc, #256]	; (801bf84 <tcp_create_segment+0x130>)
 801be84:	f005 fb4e 	bl	8021524 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801be88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801be8c:	009b      	lsls	r3, r3, #2
 801be8e:	b2db      	uxtb	r3, r3
 801be90:	f003 0304 	and.w	r3, r3, #4
 801be94:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801be96:	2003      	movs	r0, #3
 801be98:	f7fa fce8 	bl	801686c <memp_malloc>
 801be9c:	6138      	str	r0, [r7, #16]
 801be9e:	693b      	ldr	r3, [r7, #16]
 801bea0:	2b00      	cmp	r3, #0
 801bea2:	d104      	bne.n	801beae <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801bea4:	68b8      	ldr	r0, [r7, #8]
 801bea6:	f7fb fbd7 	bl	8017658 <pbuf_free>
    return NULL;
 801beaa:	2300      	movs	r3, #0
 801beac:	e061      	b.n	801bf72 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801beae:	693b      	ldr	r3, [r7, #16]
 801beb0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801beb4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801beb6:	693b      	ldr	r3, [r7, #16]
 801beb8:	2200      	movs	r2, #0
 801beba:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801bebc:	693b      	ldr	r3, [r7, #16]
 801bebe:	68ba      	ldr	r2, [r7, #8]
 801bec0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801bec2:	68bb      	ldr	r3, [r7, #8]
 801bec4:	891a      	ldrh	r2, [r3, #8]
 801bec6:	7dfb      	ldrb	r3, [r7, #23]
 801bec8:	b29b      	uxth	r3, r3
 801beca:	429a      	cmp	r2, r3
 801becc:	d205      	bcs.n	801beda <tcp_create_segment+0x86>
 801bece:	4b2b      	ldr	r3, [pc, #172]	; (801bf7c <tcp_create_segment+0x128>)
 801bed0:	22b0      	movs	r2, #176	; 0xb0
 801bed2:	492e      	ldr	r1, [pc, #184]	; (801bf8c <tcp_create_segment+0x138>)
 801bed4:	482b      	ldr	r0, [pc, #172]	; (801bf84 <tcp_create_segment+0x130>)
 801bed6:	f005 fb25 	bl	8021524 <iprintf>
  seg->len = p->tot_len - optlen;
 801beda:	68bb      	ldr	r3, [r7, #8]
 801bedc:	891a      	ldrh	r2, [r3, #8]
 801bede:	7dfb      	ldrb	r3, [r7, #23]
 801bee0:	b29b      	uxth	r3, r3
 801bee2:	1ad3      	subs	r3, r2, r3
 801bee4:	b29a      	uxth	r2, r3
 801bee6:	693b      	ldr	r3, [r7, #16]
 801bee8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801beea:	2114      	movs	r1, #20
 801beec:	68b8      	ldr	r0, [r7, #8]
 801beee:	f7fb fb1d 	bl	801752c <pbuf_add_header>
 801bef2:	4603      	mov	r3, r0
 801bef4:	2b00      	cmp	r3, #0
 801bef6:	d004      	beq.n	801bf02 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801bef8:	6938      	ldr	r0, [r7, #16]
 801befa:	f7fc ffe6 	bl	8018eca <tcp_seg_free>
    return NULL;
 801befe:	2300      	movs	r3, #0
 801bf00:	e037      	b.n	801bf72 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801bf02:	693b      	ldr	r3, [r7, #16]
 801bf04:	685b      	ldr	r3, [r3, #4]
 801bf06:	685a      	ldr	r2, [r3, #4]
 801bf08:	693b      	ldr	r3, [r7, #16]
 801bf0a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801bf0c:	68fb      	ldr	r3, [r7, #12]
 801bf0e:	8ada      	ldrh	r2, [r3, #22]
 801bf10:	693b      	ldr	r3, [r7, #16]
 801bf12:	68dc      	ldr	r4, [r3, #12]
 801bf14:	4610      	mov	r0, r2
 801bf16:	f7f9 ff15 	bl	8015d44 <lwip_htons>
 801bf1a:	4603      	mov	r3, r0
 801bf1c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801bf1e:	68fb      	ldr	r3, [r7, #12]
 801bf20:	8b1a      	ldrh	r2, [r3, #24]
 801bf22:	693b      	ldr	r3, [r7, #16]
 801bf24:	68dc      	ldr	r4, [r3, #12]
 801bf26:	4610      	mov	r0, r2
 801bf28:	f7f9 ff0c 	bl	8015d44 <lwip_htons>
 801bf2c:	4603      	mov	r3, r0
 801bf2e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801bf30:	693b      	ldr	r3, [r7, #16]
 801bf32:	68dc      	ldr	r4, [r3, #12]
 801bf34:	6838      	ldr	r0, [r7, #0]
 801bf36:	f7f9 ff1a 	bl	8015d6e <lwip_htonl>
 801bf3a:	4603      	mov	r3, r0
 801bf3c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801bf3e:	7dfb      	ldrb	r3, [r7, #23]
 801bf40:	089b      	lsrs	r3, r3, #2
 801bf42:	b2db      	uxtb	r3, r3
 801bf44:	b29b      	uxth	r3, r3
 801bf46:	3305      	adds	r3, #5
 801bf48:	b29b      	uxth	r3, r3
 801bf4a:	031b      	lsls	r3, r3, #12
 801bf4c:	b29a      	uxth	r2, r3
 801bf4e:	79fb      	ldrb	r3, [r7, #7]
 801bf50:	b29b      	uxth	r3, r3
 801bf52:	4313      	orrs	r3, r2
 801bf54:	b29a      	uxth	r2, r3
 801bf56:	693b      	ldr	r3, [r7, #16]
 801bf58:	68dc      	ldr	r4, [r3, #12]
 801bf5a:	4610      	mov	r0, r2
 801bf5c:	f7f9 fef2 	bl	8015d44 <lwip_htons>
 801bf60:	4603      	mov	r3, r0
 801bf62:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801bf64:	693b      	ldr	r3, [r7, #16]
 801bf66:	68db      	ldr	r3, [r3, #12]
 801bf68:	2200      	movs	r2, #0
 801bf6a:	749a      	strb	r2, [r3, #18]
 801bf6c:	2200      	movs	r2, #0
 801bf6e:	74da      	strb	r2, [r3, #19]
  return seg;
 801bf70:	693b      	ldr	r3, [r7, #16]
}
 801bf72:	4618      	mov	r0, r3
 801bf74:	371c      	adds	r7, #28
 801bf76:	46bd      	mov	sp, r7
 801bf78:	bd90      	pop	{r4, r7, pc}
 801bf7a:	bf00      	nop
 801bf7c:	08025cf4 	.word	0x08025cf4
 801bf80:	08025d28 	.word	0x08025d28
 801bf84:	08025d48 	.word	0x08025d48
 801bf88:	08025d70 	.word	0x08025d70
 801bf8c:	08025d94 	.word	0x08025d94

0801bf90 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801bf90:	b580      	push	{r7, lr}
 801bf92:	b086      	sub	sp, #24
 801bf94:	af00      	add	r7, sp, #0
 801bf96:	607b      	str	r3, [r7, #4]
 801bf98:	4603      	mov	r3, r0
 801bf9a:	73fb      	strb	r3, [r7, #15]
 801bf9c:	460b      	mov	r3, r1
 801bf9e:	81bb      	strh	r3, [r7, #12]
 801bfa0:	4613      	mov	r3, r2
 801bfa2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801bfa4:	89bb      	ldrh	r3, [r7, #12]
 801bfa6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801bfa8:	687b      	ldr	r3, [r7, #4]
 801bfaa:	2b00      	cmp	r3, #0
 801bfac:	d105      	bne.n	801bfba <tcp_pbuf_prealloc+0x2a>
 801bfae:	4b30      	ldr	r3, [pc, #192]	; (801c070 <tcp_pbuf_prealloc+0xe0>)
 801bfb0:	22e8      	movs	r2, #232	; 0xe8
 801bfb2:	4930      	ldr	r1, [pc, #192]	; (801c074 <tcp_pbuf_prealloc+0xe4>)
 801bfb4:	4830      	ldr	r0, [pc, #192]	; (801c078 <tcp_pbuf_prealloc+0xe8>)
 801bfb6:	f005 fab5 	bl	8021524 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801bfba:	6a3b      	ldr	r3, [r7, #32]
 801bfbc:	2b00      	cmp	r3, #0
 801bfbe:	d105      	bne.n	801bfcc <tcp_pbuf_prealloc+0x3c>
 801bfc0:	4b2b      	ldr	r3, [pc, #172]	; (801c070 <tcp_pbuf_prealloc+0xe0>)
 801bfc2:	22e9      	movs	r2, #233	; 0xe9
 801bfc4:	492d      	ldr	r1, [pc, #180]	; (801c07c <tcp_pbuf_prealloc+0xec>)
 801bfc6:	482c      	ldr	r0, [pc, #176]	; (801c078 <tcp_pbuf_prealloc+0xe8>)
 801bfc8:	f005 faac 	bl	8021524 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801bfcc:	89ba      	ldrh	r2, [r7, #12]
 801bfce:	897b      	ldrh	r3, [r7, #10]
 801bfd0:	429a      	cmp	r2, r3
 801bfd2:	d221      	bcs.n	801c018 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801bfd4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801bfd8:	f003 0302 	and.w	r3, r3, #2
 801bfdc:	2b00      	cmp	r3, #0
 801bfde:	d111      	bne.n	801c004 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801bfe0:	6a3b      	ldr	r3, [r7, #32]
 801bfe2:	8b5b      	ldrh	r3, [r3, #26]
 801bfe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801bfe8:	2b00      	cmp	r3, #0
 801bfea:	d115      	bne.n	801c018 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801bfec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801bff0:	2b00      	cmp	r3, #0
 801bff2:	d007      	beq.n	801c004 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801bff4:	6a3b      	ldr	r3, [r7, #32]
 801bff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801bff8:	2b00      	cmp	r3, #0
 801bffa:	d103      	bne.n	801c004 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801bffc:	6a3b      	ldr	r3, [r7, #32]
 801bffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801c000:	2b00      	cmp	r3, #0
 801c002:	d009      	beq.n	801c018 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801c004:	89bb      	ldrh	r3, [r7, #12]
 801c006:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801c00a:	f023 0203 	bic.w	r2, r3, #3
 801c00e:	897b      	ldrh	r3, [r7, #10]
 801c010:	4293      	cmp	r3, r2
 801c012:	bf28      	it	cs
 801c014:	4613      	movcs	r3, r2
 801c016:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801c018:	8af9      	ldrh	r1, [r7, #22]
 801c01a:	7bfb      	ldrb	r3, [r7, #15]
 801c01c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c020:	4618      	mov	r0, r3
 801c022:	f7fb f835 	bl	8017090 <pbuf_alloc>
 801c026:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801c028:	693b      	ldr	r3, [r7, #16]
 801c02a:	2b00      	cmp	r3, #0
 801c02c:	d101      	bne.n	801c032 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801c02e:	2300      	movs	r3, #0
 801c030:	e019      	b.n	801c066 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801c032:	693b      	ldr	r3, [r7, #16]
 801c034:	681b      	ldr	r3, [r3, #0]
 801c036:	2b00      	cmp	r3, #0
 801c038:	d006      	beq.n	801c048 <tcp_pbuf_prealloc+0xb8>
 801c03a:	4b0d      	ldr	r3, [pc, #52]	; (801c070 <tcp_pbuf_prealloc+0xe0>)
 801c03c:	f240 120b 	movw	r2, #267	; 0x10b
 801c040:	490f      	ldr	r1, [pc, #60]	; (801c080 <tcp_pbuf_prealloc+0xf0>)
 801c042:	480d      	ldr	r0, [pc, #52]	; (801c078 <tcp_pbuf_prealloc+0xe8>)
 801c044:	f005 fa6e 	bl	8021524 <iprintf>
  *oversize = p->len - length;
 801c048:	693b      	ldr	r3, [r7, #16]
 801c04a:	895a      	ldrh	r2, [r3, #10]
 801c04c:	89bb      	ldrh	r3, [r7, #12]
 801c04e:	1ad3      	subs	r3, r2, r3
 801c050:	b29a      	uxth	r2, r3
 801c052:	687b      	ldr	r3, [r7, #4]
 801c054:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801c056:	693b      	ldr	r3, [r7, #16]
 801c058:	89ba      	ldrh	r2, [r7, #12]
 801c05a:	811a      	strh	r2, [r3, #8]
 801c05c:	693b      	ldr	r3, [r7, #16]
 801c05e:	891a      	ldrh	r2, [r3, #8]
 801c060:	693b      	ldr	r3, [r7, #16]
 801c062:	815a      	strh	r2, [r3, #10]
  return p;
 801c064:	693b      	ldr	r3, [r7, #16]
}
 801c066:	4618      	mov	r0, r3
 801c068:	3718      	adds	r7, #24
 801c06a:	46bd      	mov	sp, r7
 801c06c:	bd80      	pop	{r7, pc}
 801c06e:	bf00      	nop
 801c070:	08025cf4 	.word	0x08025cf4
 801c074:	08025dac 	.word	0x08025dac
 801c078:	08025d48 	.word	0x08025d48
 801c07c:	08025dd0 	.word	0x08025dd0
 801c080:	08025df0 	.word	0x08025df0

0801c084 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801c084:	b580      	push	{r7, lr}
 801c086:	b082      	sub	sp, #8
 801c088:	af00      	add	r7, sp, #0
 801c08a:	6078      	str	r0, [r7, #4]
 801c08c:	460b      	mov	r3, r1
 801c08e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801c090:	687b      	ldr	r3, [r7, #4]
 801c092:	2b00      	cmp	r3, #0
 801c094:	d106      	bne.n	801c0a4 <tcp_write_checks+0x20>
 801c096:	4b33      	ldr	r3, [pc, #204]	; (801c164 <tcp_write_checks+0xe0>)
 801c098:	f240 1233 	movw	r2, #307	; 0x133
 801c09c:	4932      	ldr	r1, [pc, #200]	; (801c168 <tcp_write_checks+0xe4>)
 801c09e:	4833      	ldr	r0, [pc, #204]	; (801c16c <tcp_write_checks+0xe8>)
 801c0a0:	f005 fa40 	bl	8021524 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801c0a4:	687b      	ldr	r3, [r7, #4]
 801c0a6:	7d1b      	ldrb	r3, [r3, #20]
 801c0a8:	2b04      	cmp	r3, #4
 801c0aa:	d00e      	beq.n	801c0ca <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801c0ac:	687b      	ldr	r3, [r7, #4]
 801c0ae:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801c0b0:	2b07      	cmp	r3, #7
 801c0b2:	d00a      	beq.n	801c0ca <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801c0b4:	687b      	ldr	r3, [r7, #4]
 801c0b6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801c0b8:	2b02      	cmp	r3, #2
 801c0ba:	d006      	beq.n	801c0ca <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801c0bc:	687b      	ldr	r3, [r7, #4]
 801c0be:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801c0c0:	2b03      	cmp	r3, #3
 801c0c2:	d002      	beq.n	801c0ca <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801c0c4:	f06f 030a 	mvn.w	r3, #10
 801c0c8:	e048      	b.n	801c15c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801c0ca:	887b      	ldrh	r3, [r7, #2]
 801c0cc:	2b00      	cmp	r3, #0
 801c0ce:	d101      	bne.n	801c0d4 <tcp_write_checks+0x50>
    return ERR_OK;
 801c0d0:	2300      	movs	r3, #0
 801c0d2:	e043      	b.n	801c15c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801c0d4:	687b      	ldr	r3, [r7, #4]
 801c0d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801c0da:	887a      	ldrh	r2, [r7, #2]
 801c0dc:	429a      	cmp	r2, r3
 801c0de:	d909      	bls.n	801c0f4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c0e0:	687b      	ldr	r3, [r7, #4]
 801c0e2:	8b5b      	ldrh	r3, [r3, #26]
 801c0e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c0e8:	b29a      	uxth	r2, r3
 801c0ea:	687b      	ldr	r3, [r7, #4]
 801c0ec:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801c0ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c0f2:	e033      	b.n	801c15c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801c0f4:	687b      	ldr	r3, [r7, #4]
 801c0f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c0fa:	2b08      	cmp	r3, #8
 801c0fc:	d909      	bls.n	801c112 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c0fe:	687b      	ldr	r3, [r7, #4]
 801c100:	8b5b      	ldrh	r3, [r3, #26]
 801c102:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c106:	b29a      	uxth	r2, r3
 801c108:	687b      	ldr	r3, [r7, #4]
 801c10a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801c10c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c110:	e024      	b.n	801c15c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801c112:	687b      	ldr	r3, [r7, #4]
 801c114:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c118:	2b00      	cmp	r3, #0
 801c11a:	d00f      	beq.n	801c13c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c120:	2b00      	cmp	r3, #0
 801c122:	d11a      	bne.n	801c15a <tcp_write_checks+0xd6>
 801c124:	687b      	ldr	r3, [r7, #4]
 801c126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c128:	2b00      	cmp	r3, #0
 801c12a:	d116      	bne.n	801c15a <tcp_write_checks+0xd6>
 801c12c:	4b0d      	ldr	r3, [pc, #52]	; (801c164 <tcp_write_checks+0xe0>)
 801c12e:	f240 1255 	movw	r2, #341	; 0x155
 801c132:	490f      	ldr	r1, [pc, #60]	; (801c170 <tcp_write_checks+0xec>)
 801c134:	480d      	ldr	r0, [pc, #52]	; (801c16c <tcp_write_checks+0xe8>)
 801c136:	f005 f9f5 	bl	8021524 <iprintf>
 801c13a:	e00e      	b.n	801c15a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c140:	2b00      	cmp	r3, #0
 801c142:	d103      	bne.n	801c14c <tcp_write_checks+0xc8>
 801c144:	687b      	ldr	r3, [r7, #4]
 801c146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c148:	2b00      	cmp	r3, #0
 801c14a:	d006      	beq.n	801c15a <tcp_write_checks+0xd6>
 801c14c:	4b05      	ldr	r3, [pc, #20]	; (801c164 <tcp_write_checks+0xe0>)
 801c14e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801c152:	4908      	ldr	r1, [pc, #32]	; (801c174 <tcp_write_checks+0xf0>)
 801c154:	4805      	ldr	r0, [pc, #20]	; (801c16c <tcp_write_checks+0xe8>)
 801c156:	f005 f9e5 	bl	8021524 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801c15a:	2300      	movs	r3, #0
}
 801c15c:	4618      	mov	r0, r3
 801c15e:	3708      	adds	r7, #8
 801c160:	46bd      	mov	sp, r7
 801c162:	bd80      	pop	{r7, pc}
 801c164:	08025cf4 	.word	0x08025cf4
 801c168:	08025e04 	.word	0x08025e04
 801c16c:	08025d48 	.word	0x08025d48
 801c170:	08025e24 	.word	0x08025e24
 801c174:	08025e60 	.word	0x08025e60

0801c178 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801c178:	b590      	push	{r4, r7, lr}
 801c17a:	b09b      	sub	sp, #108	; 0x6c
 801c17c:	af04      	add	r7, sp, #16
 801c17e:	60f8      	str	r0, [r7, #12]
 801c180:	60b9      	str	r1, [r7, #8]
 801c182:	4611      	mov	r1, r2
 801c184:	461a      	mov	r2, r3
 801c186:	460b      	mov	r3, r1
 801c188:	80fb      	strh	r3, [r7, #6]
 801c18a:	4613      	mov	r3, r2
 801c18c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801c18e:	2300      	movs	r3, #0
 801c190:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801c192:	2300      	movs	r3, #0
 801c194:	653b      	str	r3, [r7, #80]	; 0x50
 801c196:	2300      	movs	r3, #0
 801c198:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c19a:	2300      	movs	r3, #0
 801c19c:	64bb      	str	r3, [r7, #72]	; 0x48
 801c19e:	2300      	movs	r3, #0
 801c1a0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801c1a2:	2300      	movs	r3, #0
 801c1a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801c1a8:	2300      	movs	r3, #0
 801c1aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801c1ae:	2300      	movs	r3, #0
 801c1b0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801c1b2:	2300      	movs	r3, #0
 801c1b4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801c1b6:	2300      	movs	r3, #0
 801c1b8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801c1ba:	68fb      	ldr	r3, [r7, #12]
 801c1bc:	2b00      	cmp	r3, #0
 801c1be:	d109      	bne.n	801c1d4 <tcp_write+0x5c>
 801c1c0:	4ba4      	ldr	r3, [pc, #656]	; (801c454 <tcp_write+0x2dc>)
 801c1c2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801c1c6:	49a4      	ldr	r1, [pc, #656]	; (801c458 <tcp_write+0x2e0>)
 801c1c8:	48a4      	ldr	r0, [pc, #656]	; (801c45c <tcp_write+0x2e4>)
 801c1ca:	f005 f9ab 	bl	8021524 <iprintf>
 801c1ce:	f06f 030f 	mvn.w	r3, #15
 801c1d2:	e32a      	b.n	801c82a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801c1d4:	68fb      	ldr	r3, [r7, #12]
 801c1d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801c1da:	085b      	lsrs	r3, r3, #1
 801c1dc:	b29a      	uxth	r2, r3
 801c1de:	68fb      	ldr	r3, [r7, #12]
 801c1e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c1e2:	4293      	cmp	r3, r2
 801c1e4:	bf28      	it	cs
 801c1e6:	4613      	movcs	r3, r2
 801c1e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801c1ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c1ec:	2b00      	cmp	r3, #0
 801c1ee:	d102      	bne.n	801c1f6 <tcp_write+0x7e>
 801c1f0:	68fb      	ldr	r3, [r7, #12]
 801c1f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c1f4:	e000      	b.n	801c1f8 <tcp_write+0x80>
 801c1f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c1f8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801c1fa:	68bb      	ldr	r3, [r7, #8]
 801c1fc:	2b00      	cmp	r3, #0
 801c1fe:	d109      	bne.n	801c214 <tcp_write+0x9c>
 801c200:	4b94      	ldr	r3, [pc, #592]	; (801c454 <tcp_write+0x2dc>)
 801c202:	f240 12ad 	movw	r2, #429	; 0x1ad
 801c206:	4996      	ldr	r1, [pc, #600]	; (801c460 <tcp_write+0x2e8>)
 801c208:	4894      	ldr	r0, [pc, #592]	; (801c45c <tcp_write+0x2e4>)
 801c20a:	f005 f98b 	bl	8021524 <iprintf>
 801c20e:	f06f 030f 	mvn.w	r3, #15
 801c212:	e30a      	b.n	801c82a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801c214:	88fb      	ldrh	r3, [r7, #6]
 801c216:	4619      	mov	r1, r3
 801c218:	68f8      	ldr	r0, [r7, #12]
 801c21a:	f7ff ff33 	bl	801c084 <tcp_write_checks>
 801c21e:	4603      	mov	r3, r0
 801c220:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801c224:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801c228:	2b00      	cmp	r3, #0
 801c22a:	d002      	beq.n	801c232 <tcp_write+0xba>
    return err;
 801c22c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801c230:	e2fb      	b.n	801c82a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801c232:	68fb      	ldr	r3, [r7, #12]
 801c234:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c238:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801c23c:	2300      	movs	r3, #0
 801c23e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801c242:	68fb      	ldr	r3, [r7, #12]
 801c244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c246:	2b00      	cmp	r3, #0
 801c248:	f000 80f6 	beq.w	801c438 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801c24c:	68fb      	ldr	r3, [r7, #12]
 801c24e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c250:	653b      	str	r3, [r7, #80]	; 0x50
 801c252:	e002      	b.n	801c25a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801c254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c256:	681b      	ldr	r3, [r3, #0]
 801c258:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801c25a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c25c:	681b      	ldr	r3, [r3, #0]
 801c25e:	2b00      	cmp	r3, #0
 801c260:	d1f8      	bne.n	801c254 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801c262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c264:	7a9b      	ldrb	r3, [r3, #10]
 801c266:	009b      	lsls	r3, r3, #2
 801c268:	b29b      	uxth	r3, r3
 801c26a:	f003 0304 	and.w	r3, r3, #4
 801c26e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801c270:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801c272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c274:	891b      	ldrh	r3, [r3, #8]
 801c276:	4619      	mov	r1, r3
 801c278:	8c3b      	ldrh	r3, [r7, #32]
 801c27a:	440b      	add	r3, r1
 801c27c:	429a      	cmp	r2, r3
 801c27e:	da06      	bge.n	801c28e <tcp_write+0x116>
 801c280:	4b74      	ldr	r3, [pc, #464]	; (801c454 <tcp_write+0x2dc>)
 801c282:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801c286:	4977      	ldr	r1, [pc, #476]	; (801c464 <tcp_write+0x2ec>)
 801c288:	4874      	ldr	r0, [pc, #464]	; (801c45c <tcp_write+0x2e4>)
 801c28a:	f005 f94b 	bl	8021524 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801c28e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c290:	891a      	ldrh	r2, [r3, #8]
 801c292:	8c3b      	ldrh	r3, [r7, #32]
 801c294:	4413      	add	r3, r2
 801c296:	b29b      	uxth	r3, r3
 801c298:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801c29a:	1ad3      	subs	r3, r2, r3
 801c29c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801c29e:	68fb      	ldr	r3, [r7, #12]
 801c2a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801c2a4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801c2a6:	8a7b      	ldrh	r3, [r7, #18]
 801c2a8:	2b00      	cmp	r3, #0
 801c2aa:	d026      	beq.n	801c2fa <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801c2ac:	8a7b      	ldrh	r3, [r7, #18]
 801c2ae:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801c2b0:	429a      	cmp	r2, r3
 801c2b2:	d206      	bcs.n	801c2c2 <tcp_write+0x14a>
 801c2b4:	4b67      	ldr	r3, [pc, #412]	; (801c454 <tcp_write+0x2dc>)
 801c2b6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801c2ba:	496b      	ldr	r1, [pc, #428]	; (801c468 <tcp_write+0x2f0>)
 801c2bc:	4867      	ldr	r0, [pc, #412]	; (801c45c <tcp_write+0x2e4>)
 801c2be:	f005 f931 	bl	8021524 <iprintf>
      seg = last_unsent;
 801c2c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c2c4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801c2c6:	8a7b      	ldrh	r3, [r7, #18]
 801c2c8:	88fa      	ldrh	r2, [r7, #6]
 801c2ca:	4293      	cmp	r3, r2
 801c2cc:	bf28      	it	cs
 801c2ce:	4613      	movcs	r3, r2
 801c2d0:	b29b      	uxth	r3, r3
 801c2d2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801c2d4:	4293      	cmp	r3, r2
 801c2d6:	bf28      	it	cs
 801c2d8:	4613      	movcs	r3, r2
 801c2da:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801c2dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c2e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c2e2:	4413      	add	r3, r2
 801c2e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801c2e8:	8a7a      	ldrh	r2, [r7, #18]
 801c2ea:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c2ec:	1ad3      	subs	r3, r2, r3
 801c2ee:	b29b      	uxth	r3, r3
 801c2f0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801c2f2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801c2f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c2f6:	1ad3      	subs	r3, r2, r3
 801c2f8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801c2fa:	8a7b      	ldrh	r3, [r7, #18]
 801c2fc:	2b00      	cmp	r3, #0
 801c2fe:	d00b      	beq.n	801c318 <tcp_write+0x1a0>
 801c300:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c304:	88fb      	ldrh	r3, [r7, #6]
 801c306:	429a      	cmp	r2, r3
 801c308:	d006      	beq.n	801c318 <tcp_write+0x1a0>
 801c30a:	4b52      	ldr	r3, [pc, #328]	; (801c454 <tcp_write+0x2dc>)
 801c30c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c310:	4956      	ldr	r1, [pc, #344]	; (801c46c <tcp_write+0x2f4>)
 801c312:	4852      	ldr	r0, [pc, #328]	; (801c45c <tcp_write+0x2e4>)
 801c314:	f005 f906 	bl	8021524 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801c318:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c31c:	88fb      	ldrh	r3, [r7, #6]
 801c31e:	429a      	cmp	r2, r3
 801c320:	f080 8167 	bcs.w	801c5f2 <tcp_write+0x47a>
 801c324:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c326:	2b00      	cmp	r3, #0
 801c328:	f000 8163 	beq.w	801c5f2 <tcp_write+0x47a>
 801c32c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c32e:	891b      	ldrh	r3, [r3, #8]
 801c330:	2b00      	cmp	r3, #0
 801c332:	f000 815e 	beq.w	801c5f2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801c336:	88fa      	ldrh	r2, [r7, #6]
 801c338:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c33c:	1ad2      	subs	r2, r2, r3
 801c33e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c340:	4293      	cmp	r3, r2
 801c342:	bfa8      	it	ge
 801c344:	4613      	movge	r3, r2
 801c346:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801c348:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c34a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801c34c:	797b      	ldrb	r3, [r7, #5]
 801c34e:	f003 0301 	and.w	r3, r3, #1
 801c352:	2b00      	cmp	r3, #0
 801c354:	d027      	beq.n	801c3a6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801c356:	f107 0012 	add.w	r0, r7, #18
 801c35a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801c35c:	8bf9      	ldrh	r1, [r7, #30]
 801c35e:	2301      	movs	r3, #1
 801c360:	9302      	str	r3, [sp, #8]
 801c362:	797b      	ldrb	r3, [r7, #5]
 801c364:	9301      	str	r3, [sp, #4]
 801c366:	68fb      	ldr	r3, [r7, #12]
 801c368:	9300      	str	r3, [sp, #0]
 801c36a:	4603      	mov	r3, r0
 801c36c:	2000      	movs	r0, #0
 801c36e:	f7ff fe0f 	bl	801bf90 <tcp_pbuf_prealloc>
 801c372:	6578      	str	r0, [r7, #84]	; 0x54
 801c374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c376:	2b00      	cmp	r3, #0
 801c378:	f000 8225 	beq.w	801c7c6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801c37c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c37e:	6858      	ldr	r0, [r3, #4]
 801c380:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c384:	68ba      	ldr	r2, [r7, #8]
 801c386:	4413      	add	r3, r2
 801c388:	8bfa      	ldrh	r2, [r7, #30]
 801c38a:	4619      	mov	r1, r3
 801c38c:	f004 fff0 	bl	8021370 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801c390:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801c392:	f7fb f9ef 	bl	8017774 <pbuf_clen>
 801c396:	4603      	mov	r3, r0
 801c398:	461a      	mov	r2, r3
 801c39a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801c39e:	4413      	add	r3, r2
 801c3a0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801c3a4:	e041      	b.n	801c42a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801c3a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c3a8:	685b      	ldr	r3, [r3, #4]
 801c3aa:	637b      	str	r3, [r7, #52]	; 0x34
 801c3ac:	e002      	b.n	801c3b4 <tcp_write+0x23c>
 801c3ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c3b0:	681b      	ldr	r3, [r3, #0]
 801c3b2:	637b      	str	r3, [r7, #52]	; 0x34
 801c3b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c3b6:	681b      	ldr	r3, [r3, #0]
 801c3b8:	2b00      	cmp	r3, #0
 801c3ba:	d1f8      	bne.n	801c3ae <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801c3bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c3be:	7b1b      	ldrb	r3, [r3, #12]
 801c3c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801c3c4:	2b00      	cmp	r3, #0
 801c3c6:	d115      	bne.n	801c3f4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801c3c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c3ca:	685b      	ldr	r3, [r3, #4]
 801c3cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c3ce:	8952      	ldrh	r2, [r2, #10]
 801c3d0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801c3d2:	68ba      	ldr	r2, [r7, #8]
 801c3d4:	429a      	cmp	r2, r3
 801c3d6:	d10d      	bne.n	801c3f4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801c3d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c3dc:	2b00      	cmp	r3, #0
 801c3de:	d006      	beq.n	801c3ee <tcp_write+0x276>
 801c3e0:	4b1c      	ldr	r3, [pc, #112]	; (801c454 <tcp_write+0x2dc>)
 801c3e2:	f240 2231 	movw	r2, #561	; 0x231
 801c3e6:	4922      	ldr	r1, [pc, #136]	; (801c470 <tcp_write+0x2f8>)
 801c3e8:	481c      	ldr	r0, [pc, #112]	; (801c45c <tcp_write+0x2e4>)
 801c3ea:	f005 f89b 	bl	8021524 <iprintf>
          extendlen = seglen;
 801c3ee:	8bfb      	ldrh	r3, [r7, #30]
 801c3f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801c3f2:	e01a      	b.n	801c42a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801c3f4:	8bfb      	ldrh	r3, [r7, #30]
 801c3f6:	2201      	movs	r2, #1
 801c3f8:	4619      	mov	r1, r3
 801c3fa:	2000      	movs	r0, #0
 801c3fc:	f7fa fe48 	bl	8017090 <pbuf_alloc>
 801c400:	6578      	str	r0, [r7, #84]	; 0x54
 801c402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c404:	2b00      	cmp	r3, #0
 801c406:	f000 81e0 	beq.w	801c7ca <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801c40a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c40e:	68ba      	ldr	r2, [r7, #8]
 801c410:	441a      	add	r2, r3
 801c412:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c414:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801c416:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801c418:	f7fb f9ac 	bl	8017774 <pbuf_clen>
 801c41c:	4603      	mov	r3, r0
 801c41e:	461a      	mov	r2, r3
 801c420:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801c424:	4413      	add	r3, r2
 801c426:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801c42a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c42e:	8bfb      	ldrh	r3, [r7, #30]
 801c430:	4413      	add	r3, r2
 801c432:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801c436:	e0dc      	b.n	801c5f2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801c438:	68fb      	ldr	r3, [r7, #12]
 801c43a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801c43e:	2b00      	cmp	r3, #0
 801c440:	f000 80d7 	beq.w	801c5f2 <tcp_write+0x47a>
 801c444:	4b03      	ldr	r3, [pc, #12]	; (801c454 <tcp_write+0x2dc>)
 801c446:	f240 224a 	movw	r2, #586	; 0x24a
 801c44a:	490a      	ldr	r1, [pc, #40]	; (801c474 <tcp_write+0x2fc>)
 801c44c:	4803      	ldr	r0, [pc, #12]	; (801c45c <tcp_write+0x2e4>)
 801c44e:	f005 f869 	bl	8021524 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801c452:	e0ce      	b.n	801c5f2 <tcp_write+0x47a>
 801c454:	08025cf4 	.word	0x08025cf4
 801c458:	08025e94 	.word	0x08025e94
 801c45c:	08025d48 	.word	0x08025d48
 801c460:	08025eac 	.word	0x08025eac
 801c464:	08025ee0 	.word	0x08025ee0
 801c468:	08025ef8 	.word	0x08025ef8
 801c46c:	08025f18 	.word	0x08025f18
 801c470:	08025f38 	.word	0x08025f38
 801c474:	08025f64 	.word	0x08025f64
    struct pbuf *p;
    u16_t left = len - pos;
 801c478:	88fa      	ldrh	r2, [r7, #6]
 801c47a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c47e:	1ad3      	subs	r3, r2, r3
 801c480:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801c482:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801c486:	b29b      	uxth	r3, r3
 801c488:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801c48a:	1ad3      	subs	r3, r2, r3
 801c48c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801c48e:	8b7a      	ldrh	r2, [r7, #26]
 801c490:	8bbb      	ldrh	r3, [r7, #28]
 801c492:	4293      	cmp	r3, r2
 801c494:	bf28      	it	cs
 801c496:	4613      	movcs	r3, r2
 801c498:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801c49a:	797b      	ldrb	r3, [r7, #5]
 801c49c:	f003 0301 	and.w	r3, r3, #1
 801c4a0:	2b00      	cmp	r3, #0
 801c4a2:	d036      	beq.n	801c512 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801c4a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801c4a8:	b29a      	uxth	r2, r3
 801c4aa:	8b3b      	ldrh	r3, [r7, #24]
 801c4ac:	4413      	add	r3, r2
 801c4ae:	b299      	uxth	r1, r3
 801c4b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c4b2:	2b00      	cmp	r3, #0
 801c4b4:	bf0c      	ite	eq
 801c4b6:	2301      	moveq	r3, #1
 801c4b8:	2300      	movne	r3, #0
 801c4ba:	b2db      	uxtb	r3, r3
 801c4bc:	f107 0012 	add.w	r0, r7, #18
 801c4c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801c4c2:	9302      	str	r3, [sp, #8]
 801c4c4:	797b      	ldrb	r3, [r7, #5]
 801c4c6:	9301      	str	r3, [sp, #4]
 801c4c8:	68fb      	ldr	r3, [r7, #12]
 801c4ca:	9300      	str	r3, [sp, #0]
 801c4cc:	4603      	mov	r3, r0
 801c4ce:	2036      	movs	r0, #54	; 0x36
 801c4d0:	f7ff fd5e 	bl	801bf90 <tcp_pbuf_prealloc>
 801c4d4:	6338      	str	r0, [r7, #48]	; 0x30
 801c4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c4d8:	2b00      	cmp	r3, #0
 801c4da:	f000 8178 	beq.w	801c7ce <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801c4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c4e0:	895b      	ldrh	r3, [r3, #10]
 801c4e2:	8b3a      	ldrh	r2, [r7, #24]
 801c4e4:	429a      	cmp	r2, r3
 801c4e6:	d906      	bls.n	801c4f6 <tcp_write+0x37e>
 801c4e8:	4b8c      	ldr	r3, [pc, #560]	; (801c71c <tcp_write+0x5a4>)
 801c4ea:	f240 2266 	movw	r2, #614	; 0x266
 801c4ee:	498c      	ldr	r1, [pc, #560]	; (801c720 <tcp_write+0x5a8>)
 801c4f0:	488c      	ldr	r0, [pc, #560]	; (801c724 <tcp_write+0x5ac>)
 801c4f2:	f005 f817 	bl	8021524 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801c4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c4f8:	685a      	ldr	r2, [r3, #4]
 801c4fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801c4fe:	18d0      	adds	r0, r2, r3
 801c500:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c504:	68ba      	ldr	r2, [r7, #8]
 801c506:	4413      	add	r3, r2
 801c508:	8b3a      	ldrh	r2, [r7, #24]
 801c50a:	4619      	mov	r1, r3
 801c50c:	f004 ff30 	bl	8021370 <memcpy>
 801c510:	e02f      	b.n	801c572 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801c512:	8a7b      	ldrh	r3, [r7, #18]
 801c514:	2b00      	cmp	r3, #0
 801c516:	d006      	beq.n	801c526 <tcp_write+0x3ae>
 801c518:	4b80      	ldr	r3, [pc, #512]	; (801c71c <tcp_write+0x5a4>)
 801c51a:	f240 2271 	movw	r2, #625	; 0x271
 801c51e:	4982      	ldr	r1, [pc, #520]	; (801c728 <tcp_write+0x5b0>)
 801c520:	4880      	ldr	r0, [pc, #512]	; (801c724 <tcp_write+0x5ac>)
 801c522:	f004 ffff 	bl	8021524 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801c526:	8b3b      	ldrh	r3, [r7, #24]
 801c528:	2201      	movs	r2, #1
 801c52a:	4619      	mov	r1, r3
 801c52c:	2036      	movs	r0, #54	; 0x36
 801c52e:	f7fa fdaf 	bl	8017090 <pbuf_alloc>
 801c532:	6178      	str	r0, [r7, #20]
 801c534:	697b      	ldr	r3, [r7, #20]
 801c536:	2b00      	cmp	r3, #0
 801c538:	f000 814b 	beq.w	801c7d2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801c53c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c540:	68ba      	ldr	r2, [r7, #8]
 801c542:	441a      	add	r2, r3
 801c544:	697b      	ldr	r3, [r7, #20]
 801c546:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801c548:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801c54c:	b29b      	uxth	r3, r3
 801c54e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c552:	4619      	mov	r1, r3
 801c554:	2036      	movs	r0, #54	; 0x36
 801c556:	f7fa fd9b 	bl	8017090 <pbuf_alloc>
 801c55a:	6338      	str	r0, [r7, #48]	; 0x30
 801c55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c55e:	2b00      	cmp	r3, #0
 801c560:	d103      	bne.n	801c56a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801c562:	6978      	ldr	r0, [r7, #20]
 801c564:	f7fb f878 	bl	8017658 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801c568:	e136      	b.n	801c7d8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801c56a:	6979      	ldr	r1, [r7, #20]
 801c56c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c56e:	f7fb f941 	bl	80177f4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801c572:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c574:	f7fb f8fe 	bl	8017774 <pbuf_clen>
 801c578:	4603      	mov	r3, r0
 801c57a:	461a      	mov	r2, r3
 801c57c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801c580:	4413      	add	r3, r2
 801c582:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801c586:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801c58a:	2b09      	cmp	r3, #9
 801c58c:	d903      	bls.n	801c596 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801c58e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c590:	f7fb f862 	bl	8017658 <pbuf_free>
      goto memerr;
 801c594:	e120      	b.n	801c7d8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801c596:	68fb      	ldr	r3, [r7, #12]
 801c598:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801c59a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c59e:	441a      	add	r2, r3
 801c5a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c5a4:	9300      	str	r3, [sp, #0]
 801c5a6:	4613      	mov	r3, r2
 801c5a8:	2200      	movs	r2, #0
 801c5aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c5ac:	68f8      	ldr	r0, [r7, #12]
 801c5ae:	f7ff fc51 	bl	801be54 <tcp_create_segment>
 801c5b2:	64f8      	str	r0, [r7, #76]	; 0x4c
 801c5b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	f000 810d 	beq.w	801c7d6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801c5bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c5be:	2b00      	cmp	r3, #0
 801c5c0:	d102      	bne.n	801c5c8 <tcp_write+0x450>
      queue = seg;
 801c5c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c5c4:	647b      	str	r3, [r7, #68]	; 0x44
 801c5c6:	e00c      	b.n	801c5e2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801c5c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c5ca:	2b00      	cmp	r3, #0
 801c5cc:	d106      	bne.n	801c5dc <tcp_write+0x464>
 801c5ce:	4b53      	ldr	r3, [pc, #332]	; (801c71c <tcp_write+0x5a4>)
 801c5d0:	f240 22ab 	movw	r2, #683	; 0x2ab
 801c5d4:	4955      	ldr	r1, [pc, #340]	; (801c72c <tcp_write+0x5b4>)
 801c5d6:	4853      	ldr	r0, [pc, #332]	; (801c724 <tcp_write+0x5ac>)
 801c5d8:	f004 ffa4 	bl	8021524 <iprintf>
      prev_seg->next = seg;
 801c5dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c5de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c5e0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801c5e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c5e4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801c5e6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c5ea:	8b3b      	ldrh	r3, [r7, #24]
 801c5ec:	4413      	add	r3, r2
 801c5ee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801c5f2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c5f6:	88fb      	ldrh	r3, [r7, #6]
 801c5f8:	429a      	cmp	r2, r3
 801c5fa:	f4ff af3d 	bcc.w	801c478 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801c5fe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c600:	2b00      	cmp	r3, #0
 801c602:	d02c      	beq.n	801c65e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801c604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c606:	685b      	ldr	r3, [r3, #4]
 801c608:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c60a:	e01e      	b.n	801c64a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801c60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c60e:	891a      	ldrh	r2, [r3, #8]
 801c610:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c612:	4413      	add	r3, r2
 801c614:	b29a      	uxth	r2, r3
 801c616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c618:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801c61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c61c:	681b      	ldr	r3, [r3, #0]
 801c61e:	2b00      	cmp	r3, #0
 801c620:	d110      	bne.n	801c644 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801c622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c624:	685b      	ldr	r3, [r3, #4]
 801c626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c628:	8952      	ldrh	r2, [r2, #10]
 801c62a:	4413      	add	r3, r2
 801c62c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801c62e:	68b9      	ldr	r1, [r7, #8]
 801c630:	4618      	mov	r0, r3
 801c632:	f004 fe9d 	bl	8021370 <memcpy>
        p->len += oversize_used;
 801c636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c638:	895a      	ldrh	r2, [r3, #10]
 801c63a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c63c:	4413      	add	r3, r2
 801c63e:	b29a      	uxth	r2, r3
 801c640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c642:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801c644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c646:	681b      	ldr	r3, [r3, #0]
 801c648:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c64c:	2b00      	cmp	r3, #0
 801c64e:	d1dd      	bne.n	801c60c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801c650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c652:	891a      	ldrh	r2, [r3, #8]
 801c654:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c656:	4413      	add	r3, r2
 801c658:	b29a      	uxth	r2, r3
 801c65a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c65c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801c65e:	8a7a      	ldrh	r2, [r7, #18]
 801c660:	68fb      	ldr	r3, [r7, #12]
 801c662:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801c666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c668:	2b00      	cmp	r3, #0
 801c66a:	d018      	beq.n	801c69e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801c66c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c66e:	2b00      	cmp	r3, #0
 801c670:	d106      	bne.n	801c680 <tcp_write+0x508>
 801c672:	4b2a      	ldr	r3, [pc, #168]	; (801c71c <tcp_write+0x5a4>)
 801c674:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801c678:	492d      	ldr	r1, [pc, #180]	; (801c730 <tcp_write+0x5b8>)
 801c67a:	482a      	ldr	r0, [pc, #168]	; (801c724 <tcp_write+0x5ac>)
 801c67c:	f004 ff52 	bl	8021524 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801c680:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c682:	685b      	ldr	r3, [r3, #4]
 801c684:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801c686:	4618      	mov	r0, r3
 801c688:	f7fb f8b4 	bl	80177f4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801c68c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c68e:	891a      	ldrh	r2, [r3, #8]
 801c690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c692:	891b      	ldrh	r3, [r3, #8]
 801c694:	4413      	add	r3, r2
 801c696:	b29a      	uxth	r2, r3
 801c698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c69a:	811a      	strh	r2, [r3, #8]
 801c69c:	e037      	b.n	801c70e <tcp_write+0x596>
  } else if (extendlen > 0) {
 801c69e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c6a0:	2b00      	cmp	r3, #0
 801c6a2:	d034      	beq.n	801c70e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801c6a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c6a6:	2b00      	cmp	r3, #0
 801c6a8:	d003      	beq.n	801c6b2 <tcp_write+0x53a>
 801c6aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c6ac:	685b      	ldr	r3, [r3, #4]
 801c6ae:	2b00      	cmp	r3, #0
 801c6b0:	d106      	bne.n	801c6c0 <tcp_write+0x548>
 801c6b2:	4b1a      	ldr	r3, [pc, #104]	; (801c71c <tcp_write+0x5a4>)
 801c6b4:	f240 22e6 	movw	r2, #742	; 0x2e6
 801c6b8:	491e      	ldr	r1, [pc, #120]	; (801c734 <tcp_write+0x5bc>)
 801c6ba:	481a      	ldr	r0, [pc, #104]	; (801c724 <tcp_write+0x5ac>)
 801c6bc:	f004 ff32 	bl	8021524 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801c6c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c6c2:	685b      	ldr	r3, [r3, #4]
 801c6c4:	62bb      	str	r3, [r7, #40]	; 0x28
 801c6c6:	e009      	b.n	801c6dc <tcp_write+0x564>
      p->tot_len += extendlen;
 801c6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c6ca:	891a      	ldrh	r2, [r3, #8]
 801c6cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c6ce:	4413      	add	r3, r2
 801c6d0:	b29a      	uxth	r2, r3
 801c6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c6d4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801c6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c6d8:	681b      	ldr	r3, [r3, #0]
 801c6da:	62bb      	str	r3, [r7, #40]	; 0x28
 801c6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c6de:	681b      	ldr	r3, [r3, #0]
 801c6e0:	2b00      	cmp	r3, #0
 801c6e2:	d1f1      	bne.n	801c6c8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801c6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c6e6:	891a      	ldrh	r2, [r3, #8]
 801c6e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c6ea:	4413      	add	r3, r2
 801c6ec:	b29a      	uxth	r2, r3
 801c6ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c6f0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801c6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c6f4:	895a      	ldrh	r2, [r3, #10]
 801c6f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c6f8:	4413      	add	r3, r2
 801c6fa:	b29a      	uxth	r2, r3
 801c6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c6fe:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801c700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c702:	891a      	ldrh	r2, [r3, #8]
 801c704:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c706:	4413      	add	r3, r2
 801c708:	b29a      	uxth	r2, r3
 801c70a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c70c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801c70e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c710:	2b00      	cmp	r3, #0
 801c712:	d111      	bne.n	801c738 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801c714:	68fb      	ldr	r3, [r7, #12]
 801c716:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c718:	66da      	str	r2, [r3, #108]	; 0x6c
 801c71a:	e010      	b.n	801c73e <tcp_write+0x5c6>
 801c71c:	08025cf4 	.word	0x08025cf4
 801c720:	08025f94 	.word	0x08025f94
 801c724:	08025d48 	.word	0x08025d48
 801c728:	08025fd4 	.word	0x08025fd4
 801c72c:	08025fe4 	.word	0x08025fe4
 801c730:	08025ff8 	.word	0x08025ff8
 801c734:	08026030 	.word	0x08026030
  } else {
    last_unsent->next = queue;
 801c738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c73a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c73c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801c73e:	68fb      	ldr	r3, [r7, #12]
 801c740:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801c742:	88fb      	ldrh	r3, [r7, #6]
 801c744:	441a      	add	r2, r3
 801c746:	68fb      	ldr	r3, [r7, #12]
 801c748:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801c74a:	68fb      	ldr	r3, [r7, #12]
 801c74c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801c750:	88fb      	ldrh	r3, [r7, #6]
 801c752:	1ad3      	subs	r3, r2, r3
 801c754:	b29a      	uxth	r2, r3
 801c756:	68fb      	ldr	r3, [r7, #12]
 801c758:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801c75c:	68fb      	ldr	r3, [r7, #12]
 801c75e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801c762:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801c766:	68fb      	ldr	r3, [r7, #12]
 801c768:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c76c:	2b00      	cmp	r3, #0
 801c76e:	d00e      	beq.n	801c78e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801c770:	68fb      	ldr	r3, [r7, #12]
 801c772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c774:	2b00      	cmp	r3, #0
 801c776:	d10a      	bne.n	801c78e <tcp_write+0x616>
 801c778:	68fb      	ldr	r3, [r7, #12]
 801c77a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c77c:	2b00      	cmp	r3, #0
 801c77e:	d106      	bne.n	801c78e <tcp_write+0x616>
 801c780:	4b2c      	ldr	r3, [pc, #176]	; (801c834 <tcp_write+0x6bc>)
 801c782:	f240 3212 	movw	r2, #786	; 0x312
 801c786:	492c      	ldr	r1, [pc, #176]	; (801c838 <tcp_write+0x6c0>)
 801c788:	482c      	ldr	r0, [pc, #176]	; (801c83c <tcp_write+0x6c4>)
 801c78a:	f004 fecb 	bl	8021524 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801c78e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c790:	2b00      	cmp	r3, #0
 801c792:	d016      	beq.n	801c7c2 <tcp_write+0x64a>
 801c794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c796:	68db      	ldr	r3, [r3, #12]
 801c798:	2b00      	cmp	r3, #0
 801c79a:	d012      	beq.n	801c7c2 <tcp_write+0x64a>
 801c79c:	797b      	ldrb	r3, [r7, #5]
 801c79e:	f003 0302 	and.w	r3, r3, #2
 801c7a2:	2b00      	cmp	r3, #0
 801c7a4:	d10d      	bne.n	801c7c2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801c7a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c7a8:	68db      	ldr	r3, [r3, #12]
 801c7aa:	899b      	ldrh	r3, [r3, #12]
 801c7ac:	b29c      	uxth	r4, r3
 801c7ae:	2008      	movs	r0, #8
 801c7b0:	f7f9 fac8 	bl	8015d44 <lwip_htons>
 801c7b4:	4603      	mov	r3, r0
 801c7b6:	461a      	mov	r2, r3
 801c7b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c7ba:	68db      	ldr	r3, [r3, #12]
 801c7bc:	4322      	orrs	r2, r4
 801c7be:	b292      	uxth	r2, r2
 801c7c0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801c7c2:	2300      	movs	r3, #0
 801c7c4:	e031      	b.n	801c82a <tcp_write+0x6b2>
          goto memerr;
 801c7c6:	bf00      	nop
 801c7c8:	e006      	b.n	801c7d8 <tcp_write+0x660>
            goto memerr;
 801c7ca:	bf00      	nop
 801c7cc:	e004      	b.n	801c7d8 <tcp_write+0x660>
        goto memerr;
 801c7ce:	bf00      	nop
 801c7d0:	e002      	b.n	801c7d8 <tcp_write+0x660>
        goto memerr;
 801c7d2:	bf00      	nop
 801c7d4:	e000      	b.n	801c7d8 <tcp_write+0x660>
      goto memerr;
 801c7d6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801c7d8:	68fb      	ldr	r3, [r7, #12]
 801c7da:	8b5b      	ldrh	r3, [r3, #26]
 801c7dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c7e0:	b29a      	uxth	r2, r3
 801c7e2:	68fb      	ldr	r3, [r7, #12]
 801c7e4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801c7e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c7e8:	2b00      	cmp	r3, #0
 801c7ea:	d002      	beq.n	801c7f2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801c7ec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801c7ee:	f7fa ff33 	bl	8017658 <pbuf_free>
  }
  if (queue != NULL) {
 801c7f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c7f4:	2b00      	cmp	r3, #0
 801c7f6:	d002      	beq.n	801c7fe <tcp_write+0x686>
    tcp_segs_free(queue);
 801c7f8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801c7fa:	f7fc fb51 	bl	8018ea0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801c7fe:	68fb      	ldr	r3, [r7, #12]
 801c800:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c804:	2b00      	cmp	r3, #0
 801c806:	d00e      	beq.n	801c826 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801c808:	68fb      	ldr	r3, [r7, #12]
 801c80a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c80c:	2b00      	cmp	r3, #0
 801c80e:	d10a      	bne.n	801c826 <tcp_write+0x6ae>
 801c810:	68fb      	ldr	r3, [r7, #12]
 801c812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c814:	2b00      	cmp	r3, #0
 801c816:	d106      	bne.n	801c826 <tcp_write+0x6ae>
 801c818:	4b06      	ldr	r3, [pc, #24]	; (801c834 <tcp_write+0x6bc>)
 801c81a:	f240 3227 	movw	r2, #807	; 0x327
 801c81e:	4906      	ldr	r1, [pc, #24]	; (801c838 <tcp_write+0x6c0>)
 801c820:	4806      	ldr	r0, [pc, #24]	; (801c83c <tcp_write+0x6c4>)
 801c822:	f004 fe7f 	bl	8021524 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801c826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801c82a:	4618      	mov	r0, r3
 801c82c:	375c      	adds	r7, #92	; 0x5c
 801c82e:	46bd      	mov	sp, r7
 801c830:	bd90      	pop	{r4, r7, pc}
 801c832:	bf00      	nop
 801c834:	08025cf4 	.word	0x08025cf4
 801c838:	08026068 	.word	0x08026068
 801c83c:	08025d48 	.word	0x08025d48

0801c840 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801c840:	b590      	push	{r4, r7, lr}
 801c842:	b08b      	sub	sp, #44	; 0x2c
 801c844:	af02      	add	r7, sp, #8
 801c846:	6078      	str	r0, [r7, #4]
 801c848:	460b      	mov	r3, r1
 801c84a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801c84c:	2300      	movs	r3, #0
 801c84e:	61fb      	str	r3, [r7, #28]
 801c850:	2300      	movs	r3, #0
 801c852:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801c854:	2300      	movs	r3, #0
 801c856:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801c858:	687b      	ldr	r3, [r7, #4]
 801c85a:	2b00      	cmp	r3, #0
 801c85c:	d106      	bne.n	801c86c <tcp_split_unsent_seg+0x2c>
 801c85e:	4b95      	ldr	r3, [pc, #596]	; (801cab4 <tcp_split_unsent_seg+0x274>)
 801c860:	f240 324b 	movw	r2, #843	; 0x34b
 801c864:	4994      	ldr	r1, [pc, #592]	; (801cab8 <tcp_split_unsent_seg+0x278>)
 801c866:	4895      	ldr	r0, [pc, #596]	; (801cabc <tcp_split_unsent_seg+0x27c>)
 801c868:	f004 fe5c 	bl	8021524 <iprintf>

  useg = pcb->unsent;
 801c86c:	687b      	ldr	r3, [r7, #4]
 801c86e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c870:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801c872:	697b      	ldr	r3, [r7, #20]
 801c874:	2b00      	cmp	r3, #0
 801c876:	d102      	bne.n	801c87e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801c878:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c87c:	e116      	b.n	801caac <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801c87e:	887b      	ldrh	r3, [r7, #2]
 801c880:	2b00      	cmp	r3, #0
 801c882:	d109      	bne.n	801c898 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801c884:	4b8b      	ldr	r3, [pc, #556]	; (801cab4 <tcp_split_unsent_seg+0x274>)
 801c886:	f240 3253 	movw	r2, #851	; 0x353
 801c88a:	498d      	ldr	r1, [pc, #564]	; (801cac0 <tcp_split_unsent_seg+0x280>)
 801c88c:	488b      	ldr	r0, [pc, #556]	; (801cabc <tcp_split_unsent_seg+0x27c>)
 801c88e:	f004 fe49 	bl	8021524 <iprintf>
    return ERR_VAL;
 801c892:	f06f 0305 	mvn.w	r3, #5
 801c896:	e109      	b.n	801caac <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801c898:	697b      	ldr	r3, [r7, #20]
 801c89a:	891b      	ldrh	r3, [r3, #8]
 801c89c:	887a      	ldrh	r2, [r7, #2]
 801c89e:	429a      	cmp	r2, r3
 801c8a0:	d301      	bcc.n	801c8a6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801c8a2:	2300      	movs	r3, #0
 801c8a4:	e102      	b.n	801caac <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801c8a6:	687b      	ldr	r3, [r7, #4]
 801c8a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c8aa:	887a      	ldrh	r2, [r7, #2]
 801c8ac:	429a      	cmp	r2, r3
 801c8ae:	d906      	bls.n	801c8be <tcp_split_unsent_seg+0x7e>
 801c8b0:	4b80      	ldr	r3, [pc, #512]	; (801cab4 <tcp_split_unsent_seg+0x274>)
 801c8b2:	f240 325b 	movw	r2, #859	; 0x35b
 801c8b6:	4983      	ldr	r1, [pc, #524]	; (801cac4 <tcp_split_unsent_seg+0x284>)
 801c8b8:	4880      	ldr	r0, [pc, #512]	; (801cabc <tcp_split_unsent_seg+0x27c>)
 801c8ba:	f004 fe33 	bl	8021524 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801c8be:	697b      	ldr	r3, [r7, #20]
 801c8c0:	891b      	ldrh	r3, [r3, #8]
 801c8c2:	2b00      	cmp	r3, #0
 801c8c4:	d106      	bne.n	801c8d4 <tcp_split_unsent_seg+0x94>
 801c8c6:	4b7b      	ldr	r3, [pc, #492]	; (801cab4 <tcp_split_unsent_seg+0x274>)
 801c8c8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801c8cc:	497e      	ldr	r1, [pc, #504]	; (801cac8 <tcp_split_unsent_seg+0x288>)
 801c8ce:	487b      	ldr	r0, [pc, #492]	; (801cabc <tcp_split_unsent_seg+0x27c>)
 801c8d0:	f004 fe28 	bl	8021524 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801c8d4:	697b      	ldr	r3, [r7, #20]
 801c8d6:	7a9b      	ldrb	r3, [r3, #10]
 801c8d8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801c8da:	7bfb      	ldrb	r3, [r7, #15]
 801c8dc:	009b      	lsls	r3, r3, #2
 801c8de:	b2db      	uxtb	r3, r3
 801c8e0:	f003 0304 	and.w	r3, r3, #4
 801c8e4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801c8e6:	697b      	ldr	r3, [r7, #20]
 801c8e8:	891a      	ldrh	r2, [r3, #8]
 801c8ea:	887b      	ldrh	r3, [r7, #2]
 801c8ec:	1ad3      	subs	r3, r2, r3
 801c8ee:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801c8f0:	7bbb      	ldrb	r3, [r7, #14]
 801c8f2:	b29a      	uxth	r2, r3
 801c8f4:	89bb      	ldrh	r3, [r7, #12]
 801c8f6:	4413      	add	r3, r2
 801c8f8:	b29b      	uxth	r3, r3
 801c8fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c8fe:	4619      	mov	r1, r3
 801c900:	2036      	movs	r0, #54	; 0x36
 801c902:	f7fa fbc5 	bl	8017090 <pbuf_alloc>
 801c906:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801c908:	693b      	ldr	r3, [r7, #16]
 801c90a:	2b00      	cmp	r3, #0
 801c90c:	f000 80b7 	beq.w	801ca7e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801c910:	697b      	ldr	r3, [r7, #20]
 801c912:	685b      	ldr	r3, [r3, #4]
 801c914:	891a      	ldrh	r2, [r3, #8]
 801c916:	697b      	ldr	r3, [r7, #20]
 801c918:	891b      	ldrh	r3, [r3, #8]
 801c91a:	1ad3      	subs	r3, r2, r3
 801c91c:	b29a      	uxth	r2, r3
 801c91e:	887b      	ldrh	r3, [r7, #2]
 801c920:	4413      	add	r3, r2
 801c922:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801c924:	697b      	ldr	r3, [r7, #20]
 801c926:	6858      	ldr	r0, [r3, #4]
 801c928:	693b      	ldr	r3, [r7, #16]
 801c92a:	685a      	ldr	r2, [r3, #4]
 801c92c:	7bbb      	ldrb	r3, [r7, #14]
 801c92e:	18d1      	adds	r1, r2, r3
 801c930:	897b      	ldrh	r3, [r7, #10]
 801c932:	89ba      	ldrh	r2, [r7, #12]
 801c934:	f7fb f886 	bl	8017a44 <pbuf_copy_partial>
 801c938:	4603      	mov	r3, r0
 801c93a:	461a      	mov	r2, r3
 801c93c:	89bb      	ldrh	r3, [r7, #12]
 801c93e:	4293      	cmp	r3, r2
 801c940:	f040 809f 	bne.w	801ca82 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801c944:	697b      	ldr	r3, [r7, #20]
 801c946:	68db      	ldr	r3, [r3, #12]
 801c948:	899b      	ldrh	r3, [r3, #12]
 801c94a:	b29b      	uxth	r3, r3
 801c94c:	4618      	mov	r0, r3
 801c94e:	f7f9 f9f9 	bl	8015d44 <lwip_htons>
 801c952:	4603      	mov	r3, r0
 801c954:	b2db      	uxtb	r3, r3
 801c956:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c95a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801c95c:	2300      	movs	r3, #0
 801c95e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801c960:	7efb      	ldrb	r3, [r7, #27]
 801c962:	f003 0308 	and.w	r3, r3, #8
 801c966:	2b00      	cmp	r3, #0
 801c968:	d007      	beq.n	801c97a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801c96a:	7efb      	ldrb	r3, [r7, #27]
 801c96c:	f023 0308 	bic.w	r3, r3, #8
 801c970:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801c972:	7ebb      	ldrb	r3, [r7, #26]
 801c974:	f043 0308 	orr.w	r3, r3, #8
 801c978:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801c97a:	7efb      	ldrb	r3, [r7, #27]
 801c97c:	f003 0301 	and.w	r3, r3, #1
 801c980:	2b00      	cmp	r3, #0
 801c982:	d007      	beq.n	801c994 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801c984:	7efb      	ldrb	r3, [r7, #27]
 801c986:	f023 0301 	bic.w	r3, r3, #1
 801c98a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801c98c:	7ebb      	ldrb	r3, [r7, #26]
 801c98e:	f043 0301 	orr.w	r3, r3, #1
 801c992:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801c994:	697b      	ldr	r3, [r7, #20]
 801c996:	68db      	ldr	r3, [r3, #12]
 801c998:	685b      	ldr	r3, [r3, #4]
 801c99a:	4618      	mov	r0, r3
 801c99c:	f7f9 f9e7 	bl	8015d6e <lwip_htonl>
 801c9a0:	4602      	mov	r2, r0
 801c9a2:	887b      	ldrh	r3, [r7, #2]
 801c9a4:	18d1      	adds	r1, r2, r3
 801c9a6:	7eba      	ldrb	r2, [r7, #26]
 801c9a8:	7bfb      	ldrb	r3, [r7, #15]
 801c9aa:	9300      	str	r3, [sp, #0]
 801c9ac:	460b      	mov	r3, r1
 801c9ae:	6939      	ldr	r1, [r7, #16]
 801c9b0:	6878      	ldr	r0, [r7, #4]
 801c9b2:	f7ff fa4f 	bl	801be54 <tcp_create_segment>
 801c9b6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801c9b8:	69fb      	ldr	r3, [r7, #28]
 801c9ba:	2b00      	cmp	r3, #0
 801c9bc:	d063      	beq.n	801ca86 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801c9be:	697b      	ldr	r3, [r7, #20]
 801c9c0:	685b      	ldr	r3, [r3, #4]
 801c9c2:	4618      	mov	r0, r3
 801c9c4:	f7fa fed6 	bl	8017774 <pbuf_clen>
 801c9c8:	4603      	mov	r3, r0
 801c9ca:	461a      	mov	r2, r3
 801c9cc:	687b      	ldr	r3, [r7, #4]
 801c9ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c9d2:	1a9b      	subs	r3, r3, r2
 801c9d4:	b29a      	uxth	r2, r3
 801c9d6:	687b      	ldr	r3, [r7, #4]
 801c9d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801c9dc:	697b      	ldr	r3, [r7, #20]
 801c9de:	6858      	ldr	r0, [r3, #4]
 801c9e0:	697b      	ldr	r3, [r7, #20]
 801c9e2:	685b      	ldr	r3, [r3, #4]
 801c9e4:	891a      	ldrh	r2, [r3, #8]
 801c9e6:	89bb      	ldrh	r3, [r7, #12]
 801c9e8:	1ad3      	subs	r3, r2, r3
 801c9ea:	b29b      	uxth	r3, r3
 801c9ec:	4619      	mov	r1, r3
 801c9ee:	f7fa fcad 	bl	801734c <pbuf_realloc>
  useg->len -= remainder;
 801c9f2:	697b      	ldr	r3, [r7, #20]
 801c9f4:	891a      	ldrh	r2, [r3, #8]
 801c9f6:	89bb      	ldrh	r3, [r7, #12]
 801c9f8:	1ad3      	subs	r3, r2, r3
 801c9fa:	b29a      	uxth	r2, r3
 801c9fc:	697b      	ldr	r3, [r7, #20]
 801c9fe:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801ca00:	697b      	ldr	r3, [r7, #20]
 801ca02:	68db      	ldr	r3, [r3, #12]
 801ca04:	899b      	ldrh	r3, [r3, #12]
 801ca06:	b29c      	uxth	r4, r3
 801ca08:	7efb      	ldrb	r3, [r7, #27]
 801ca0a:	b29b      	uxth	r3, r3
 801ca0c:	4618      	mov	r0, r3
 801ca0e:	f7f9 f999 	bl	8015d44 <lwip_htons>
 801ca12:	4603      	mov	r3, r0
 801ca14:	461a      	mov	r2, r3
 801ca16:	697b      	ldr	r3, [r7, #20]
 801ca18:	68db      	ldr	r3, [r3, #12]
 801ca1a:	4322      	orrs	r2, r4
 801ca1c:	b292      	uxth	r2, r2
 801ca1e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801ca20:	697b      	ldr	r3, [r7, #20]
 801ca22:	685b      	ldr	r3, [r3, #4]
 801ca24:	4618      	mov	r0, r3
 801ca26:	f7fa fea5 	bl	8017774 <pbuf_clen>
 801ca2a:	4603      	mov	r3, r0
 801ca2c:	461a      	mov	r2, r3
 801ca2e:	687b      	ldr	r3, [r7, #4]
 801ca30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ca34:	4413      	add	r3, r2
 801ca36:	b29a      	uxth	r2, r3
 801ca38:	687b      	ldr	r3, [r7, #4]
 801ca3a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801ca3e:	69fb      	ldr	r3, [r7, #28]
 801ca40:	685b      	ldr	r3, [r3, #4]
 801ca42:	4618      	mov	r0, r3
 801ca44:	f7fa fe96 	bl	8017774 <pbuf_clen>
 801ca48:	4603      	mov	r3, r0
 801ca4a:	461a      	mov	r2, r3
 801ca4c:	687b      	ldr	r3, [r7, #4]
 801ca4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ca52:	4413      	add	r3, r2
 801ca54:	b29a      	uxth	r2, r3
 801ca56:	687b      	ldr	r3, [r7, #4]
 801ca58:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801ca5c:	697b      	ldr	r3, [r7, #20]
 801ca5e:	681a      	ldr	r2, [r3, #0]
 801ca60:	69fb      	ldr	r3, [r7, #28]
 801ca62:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801ca64:	697b      	ldr	r3, [r7, #20]
 801ca66:	69fa      	ldr	r2, [r7, #28]
 801ca68:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801ca6a:	69fb      	ldr	r3, [r7, #28]
 801ca6c:	681b      	ldr	r3, [r3, #0]
 801ca6e:	2b00      	cmp	r3, #0
 801ca70:	d103      	bne.n	801ca7a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801ca72:	687b      	ldr	r3, [r7, #4]
 801ca74:	2200      	movs	r2, #0
 801ca76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801ca7a:	2300      	movs	r3, #0
 801ca7c:	e016      	b.n	801caac <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801ca7e:	bf00      	nop
 801ca80:	e002      	b.n	801ca88 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801ca82:	bf00      	nop
 801ca84:	e000      	b.n	801ca88 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801ca86:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801ca88:	69fb      	ldr	r3, [r7, #28]
 801ca8a:	2b00      	cmp	r3, #0
 801ca8c:	d006      	beq.n	801ca9c <tcp_split_unsent_seg+0x25c>
 801ca8e:	4b09      	ldr	r3, [pc, #36]	; (801cab4 <tcp_split_unsent_seg+0x274>)
 801ca90:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801ca94:	490d      	ldr	r1, [pc, #52]	; (801cacc <tcp_split_unsent_seg+0x28c>)
 801ca96:	4809      	ldr	r0, [pc, #36]	; (801cabc <tcp_split_unsent_seg+0x27c>)
 801ca98:	f004 fd44 	bl	8021524 <iprintf>
  if (p != NULL) {
 801ca9c:	693b      	ldr	r3, [r7, #16]
 801ca9e:	2b00      	cmp	r3, #0
 801caa0:	d002      	beq.n	801caa8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801caa2:	6938      	ldr	r0, [r7, #16]
 801caa4:	f7fa fdd8 	bl	8017658 <pbuf_free>
  }

  return ERR_MEM;
 801caa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801caac:	4618      	mov	r0, r3
 801caae:	3724      	adds	r7, #36	; 0x24
 801cab0:	46bd      	mov	sp, r7
 801cab2:	bd90      	pop	{r4, r7, pc}
 801cab4:	08025cf4 	.word	0x08025cf4
 801cab8:	08026088 	.word	0x08026088
 801cabc:	08025d48 	.word	0x08025d48
 801cac0:	080260ac 	.word	0x080260ac
 801cac4:	080260d0 	.word	0x080260d0
 801cac8:	080260e0 	.word	0x080260e0
 801cacc:	080260f0 	.word	0x080260f0

0801cad0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801cad0:	b590      	push	{r4, r7, lr}
 801cad2:	b085      	sub	sp, #20
 801cad4:	af00      	add	r7, sp, #0
 801cad6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801cad8:	687b      	ldr	r3, [r7, #4]
 801cada:	2b00      	cmp	r3, #0
 801cadc:	d106      	bne.n	801caec <tcp_send_fin+0x1c>
 801cade:	4b21      	ldr	r3, [pc, #132]	; (801cb64 <tcp_send_fin+0x94>)
 801cae0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801cae4:	4920      	ldr	r1, [pc, #128]	; (801cb68 <tcp_send_fin+0x98>)
 801cae6:	4821      	ldr	r0, [pc, #132]	; (801cb6c <tcp_send_fin+0x9c>)
 801cae8:	f004 fd1c 	bl	8021524 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801caec:	687b      	ldr	r3, [r7, #4]
 801caee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801caf0:	2b00      	cmp	r3, #0
 801caf2:	d02e      	beq.n	801cb52 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801caf4:	687b      	ldr	r3, [r7, #4]
 801caf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801caf8:	60fb      	str	r3, [r7, #12]
 801cafa:	e002      	b.n	801cb02 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801cafc:	68fb      	ldr	r3, [r7, #12]
 801cafe:	681b      	ldr	r3, [r3, #0]
 801cb00:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801cb02:	68fb      	ldr	r3, [r7, #12]
 801cb04:	681b      	ldr	r3, [r3, #0]
 801cb06:	2b00      	cmp	r3, #0
 801cb08:	d1f8      	bne.n	801cafc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801cb0a:	68fb      	ldr	r3, [r7, #12]
 801cb0c:	68db      	ldr	r3, [r3, #12]
 801cb0e:	899b      	ldrh	r3, [r3, #12]
 801cb10:	b29b      	uxth	r3, r3
 801cb12:	4618      	mov	r0, r3
 801cb14:	f7f9 f916 	bl	8015d44 <lwip_htons>
 801cb18:	4603      	mov	r3, r0
 801cb1a:	b2db      	uxtb	r3, r3
 801cb1c:	f003 0307 	and.w	r3, r3, #7
 801cb20:	2b00      	cmp	r3, #0
 801cb22:	d116      	bne.n	801cb52 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801cb24:	68fb      	ldr	r3, [r7, #12]
 801cb26:	68db      	ldr	r3, [r3, #12]
 801cb28:	899b      	ldrh	r3, [r3, #12]
 801cb2a:	b29c      	uxth	r4, r3
 801cb2c:	2001      	movs	r0, #1
 801cb2e:	f7f9 f909 	bl	8015d44 <lwip_htons>
 801cb32:	4603      	mov	r3, r0
 801cb34:	461a      	mov	r2, r3
 801cb36:	68fb      	ldr	r3, [r7, #12]
 801cb38:	68db      	ldr	r3, [r3, #12]
 801cb3a:	4322      	orrs	r2, r4
 801cb3c:	b292      	uxth	r2, r2
 801cb3e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801cb40:	687b      	ldr	r3, [r7, #4]
 801cb42:	8b5b      	ldrh	r3, [r3, #26]
 801cb44:	f043 0320 	orr.w	r3, r3, #32
 801cb48:	b29a      	uxth	r2, r3
 801cb4a:	687b      	ldr	r3, [r7, #4]
 801cb4c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801cb4e:	2300      	movs	r3, #0
 801cb50:	e004      	b.n	801cb5c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801cb52:	2101      	movs	r1, #1
 801cb54:	6878      	ldr	r0, [r7, #4]
 801cb56:	f000 f80b 	bl	801cb70 <tcp_enqueue_flags>
 801cb5a:	4603      	mov	r3, r0
}
 801cb5c:	4618      	mov	r0, r3
 801cb5e:	3714      	adds	r7, #20
 801cb60:	46bd      	mov	sp, r7
 801cb62:	bd90      	pop	{r4, r7, pc}
 801cb64:	08025cf4 	.word	0x08025cf4
 801cb68:	080260fc 	.word	0x080260fc
 801cb6c:	08025d48 	.word	0x08025d48

0801cb70 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801cb70:	b580      	push	{r7, lr}
 801cb72:	b08a      	sub	sp, #40	; 0x28
 801cb74:	af02      	add	r7, sp, #8
 801cb76:	6078      	str	r0, [r7, #4]
 801cb78:	460b      	mov	r3, r1
 801cb7a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801cb7c:	2300      	movs	r3, #0
 801cb7e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801cb80:	2300      	movs	r3, #0
 801cb82:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801cb84:	78fb      	ldrb	r3, [r7, #3]
 801cb86:	f003 0303 	and.w	r3, r3, #3
 801cb8a:	2b00      	cmp	r3, #0
 801cb8c:	d106      	bne.n	801cb9c <tcp_enqueue_flags+0x2c>
 801cb8e:	4b67      	ldr	r3, [pc, #412]	; (801cd2c <tcp_enqueue_flags+0x1bc>)
 801cb90:	f240 4211 	movw	r2, #1041	; 0x411
 801cb94:	4966      	ldr	r1, [pc, #408]	; (801cd30 <tcp_enqueue_flags+0x1c0>)
 801cb96:	4867      	ldr	r0, [pc, #412]	; (801cd34 <tcp_enqueue_flags+0x1c4>)
 801cb98:	f004 fcc4 	bl	8021524 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801cb9c:	687b      	ldr	r3, [r7, #4]
 801cb9e:	2b00      	cmp	r3, #0
 801cba0:	d106      	bne.n	801cbb0 <tcp_enqueue_flags+0x40>
 801cba2:	4b62      	ldr	r3, [pc, #392]	; (801cd2c <tcp_enqueue_flags+0x1bc>)
 801cba4:	f240 4213 	movw	r2, #1043	; 0x413
 801cba8:	4963      	ldr	r1, [pc, #396]	; (801cd38 <tcp_enqueue_flags+0x1c8>)
 801cbaa:	4862      	ldr	r0, [pc, #392]	; (801cd34 <tcp_enqueue_flags+0x1c4>)
 801cbac:	f004 fcba 	bl	8021524 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801cbb0:	78fb      	ldrb	r3, [r7, #3]
 801cbb2:	f003 0302 	and.w	r3, r3, #2
 801cbb6:	2b00      	cmp	r3, #0
 801cbb8:	d001      	beq.n	801cbbe <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801cbba:	2301      	movs	r3, #1
 801cbbc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801cbbe:	7ffb      	ldrb	r3, [r7, #31]
 801cbc0:	009b      	lsls	r3, r3, #2
 801cbc2:	b2db      	uxtb	r3, r3
 801cbc4:	f003 0304 	and.w	r3, r3, #4
 801cbc8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801cbca:	7dfb      	ldrb	r3, [r7, #23]
 801cbcc:	b29b      	uxth	r3, r3
 801cbce:	f44f 7220 	mov.w	r2, #640	; 0x280
 801cbd2:	4619      	mov	r1, r3
 801cbd4:	2036      	movs	r0, #54	; 0x36
 801cbd6:	f7fa fa5b 	bl	8017090 <pbuf_alloc>
 801cbda:	6138      	str	r0, [r7, #16]
 801cbdc:	693b      	ldr	r3, [r7, #16]
 801cbde:	2b00      	cmp	r3, #0
 801cbe0:	d109      	bne.n	801cbf6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801cbe2:	687b      	ldr	r3, [r7, #4]
 801cbe4:	8b5b      	ldrh	r3, [r3, #26]
 801cbe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cbea:	b29a      	uxth	r2, r3
 801cbec:	687b      	ldr	r3, [r7, #4]
 801cbee:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801cbf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cbf4:	e095      	b.n	801cd22 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801cbf6:	693b      	ldr	r3, [r7, #16]
 801cbf8:	895a      	ldrh	r2, [r3, #10]
 801cbfa:	7dfb      	ldrb	r3, [r7, #23]
 801cbfc:	b29b      	uxth	r3, r3
 801cbfe:	429a      	cmp	r2, r3
 801cc00:	d206      	bcs.n	801cc10 <tcp_enqueue_flags+0xa0>
 801cc02:	4b4a      	ldr	r3, [pc, #296]	; (801cd2c <tcp_enqueue_flags+0x1bc>)
 801cc04:	f240 4239 	movw	r2, #1081	; 0x439
 801cc08:	494c      	ldr	r1, [pc, #304]	; (801cd3c <tcp_enqueue_flags+0x1cc>)
 801cc0a:	484a      	ldr	r0, [pc, #296]	; (801cd34 <tcp_enqueue_flags+0x1c4>)
 801cc0c:	f004 fc8a 	bl	8021524 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801cc10:	687b      	ldr	r3, [r7, #4]
 801cc12:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801cc14:	78fa      	ldrb	r2, [r7, #3]
 801cc16:	7ffb      	ldrb	r3, [r7, #31]
 801cc18:	9300      	str	r3, [sp, #0]
 801cc1a:	460b      	mov	r3, r1
 801cc1c:	6939      	ldr	r1, [r7, #16]
 801cc1e:	6878      	ldr	r0, [r7, #4]
 801cc20:	f7ff f918 	bl	801be54 <tcp_create_segment>
 801cc24:	60f8      	str	r0, [r7, #12]
 801cc26:	68fb      	ldr	r3, [r7, #12]
 801cc28:	2b00      	cmp	r3, #0
 801cc2a:	d109      	bne.n	801cc40 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801cc2c:	687b      	ldr	r3, [r7, #4]
 801cc2e:	8b5b      	ldrh	r3, [r3, #26]
 801cc30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cc34:	b29a      	uxth	r2, r3
 801cc36:	687b      	ldr	r3, [r7, #4]
 801cc38:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801cc3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801cc3e:	e070      	b.n	801cd22 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801cc40:	68fb      	ldr	r3, [r7, #12]
 801cc42:	68db      	ldr	r3, [r3, #12]
 801cc44:	f003 0303 	and.w	r3, r3, #3
 801cc48:	2b00      	cmp	r3, #0
 801cc4a:	d006      	beq.n	801cc5a <tcp_enqueue_flags+0xea>
 801cc4c:	4b37      	ldr	r3, [pc, #220]	; (801cd2c <tcp_enqueue_flags+0x1bc>)
 801cc4e:	f240 4242 	movw	r2, #1090	; 0x442
 801cc52:	493b      	ldr	r1, [pc, #236]	; (801cd40 <tcp_enqueue_flags+0x1d0>)
 801cc54:	4837      	ldr	r0, [pc, #220]	; (801cd34 <tcp_enqueue_flags+0x1c4>)
 801cc56:	f004 fc65 	bl	8021524 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801cc5a:	68fb      	ldr	r3, [r7, #12]
 801cc5c:	891b      	ldrh	r3, [r3, #8]
 801cc5e:	2b00      	cmp	r3, #0
 801cc60:	d006      	beq.n	801cc70 <tcp_enqueue_flags+0x100>
 801cc62:	4b32      	ldr	r3, [pc, #200]	; (801cd2c <tcp_enqueue_flags+0x1bc>)
 801cc64:	f240 4243 	movw	r2, #1091	; 0x443
 801cc68:	4936      	ldr	r1, [pc, #216]	; (801cd44 <tcp_enqueue_flags+0x1d4>)
 801cc6a:	4832      	ldr	r0, [pc, #200]	; (801cd34 <tcp_enqueue_flags+0x1c4>)
 801cc6c:	f004 fc5a 	bl	8021524 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801cc70:	687b      	ldr	r3, [r7, #4]
 801cc72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cc74:	2b00      	cmp	r3, #0
 801cc76:	d103      	bne.n	801cc80 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801cc78:	687b      	ldr	r3, [r7, #4]
 801cc7a:	68fa      	ldr	r2, [r7, #12]
 801cc7c:	66da      	str	r2, [r3, #108]	; 0x6c
 801cc7e:	e00d      	b.n	801cc9c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801cc80:	687b      	ldr	r3, [r7, #4]
 801cc82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cc84:	61bb      	str	r3, [r7, #24]
 801cc86:	e002      	b.n	801cc8e <tcp_enqueue_flags+0x11e>
 801cc88:	69bb      	ldr	r3, [r7, #24]
 801cc8a:	681b      	ldr	r3, [r3, #0]
 801cc8c:	61bb      	str	r3, [r7, #24]
 801cc8e:	69bb      	ldr	r3, [r7, #24]
 801cc90:	681b      	ldr	r3, [r3, #0]
 801cc92:	2b00      	cmp	r3, #0
 801cc94:	d1f8      	bne.n	801cc88 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801cc96:	69bb      	ldr	r3, [r7, #24]
 801cc98:	68fa      	ldr	r2, [r7, #12]
 801cc9a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801cc9c:	687b      	ldr	r3, [r7, #4]
 801cc9e:	2200      	movs	r2, #0
 801cca0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801cca4:	78fb      	ldrb	r3, [r7, #3]
 801cca6:	f003 0302 	and.w	r3, r3, #2
 801ccaa:	2b00      	cmp	r3, #0
 801ccac:	d104      	bne.n	801ccb8 <tcp_enqueue_flags+0x148>
 801ccae:	78fb      	ldrb	r3, [r7, #3]
 801ccb0:	f003 0301 	and.w	r3, r3, #1
 801ccb4:	2b00      	cmp	r3, #0
 801ccb6:	d004      	beq.n	801ccc2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801ccb8:	687b      	ldr	r3, [r7, #4]
 801ccba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ccbc:	1c5a      	adds	r2, r3, #1
 801ccbe:	687b      	ldr	r3, [r7, #4]
 801ccc0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801ccc2:	78fb      	ldrb	r3, [r7, #3]
 801ccc4:	f003 0301 	and.w	r3, r3, #1
 801ccc8:	2b00      	cmp	r3, #0
 801ccca:	d006      	beq.n	801ccda <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801cccc:	687b      	ldr	r3, [r7, #4]
 801ccce:	8b5b      	ldrh	r3, [r3, #26]
 801ccd0:	f043 0320 	orr.w	r3, r3, #32
 801ccd4:	b29a      	uxth	r2, r3
 801ccd6:	687b      	ldr	r3, [r7, #4]
 801ccd8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801ccda:	68fb      	ldr	r3, [r7, #12]
 801ccdc:	685b      	ldr	r3, [r3, #4]
 801ccde:	4618      	mov	r0, r3
 801cce0:	f7fa fd48 	bl	8017774 <pbuf_clen>
 801cce4:	4603      	mov	r3, r0
 801cce6:	461a      	mov	r2, r3
 801cce8:	687b      	ldr	r3, [r7, #4]
 801ccea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ccee:	4413      	add	r3, r2
 801ccf0:	b29a      	uxth	r2, r3
 801ccf2:	687b      	ldr	r3, [r7, #4]
 801ccf4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801ccf8:	687b      	ldr	r3, [r7, #4]
 801ccfa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ccfe:	2b00      	cmp	r3, #0
 801cd00:	d00e      	beq.n	801cd20 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801cd02:	687b      	ldr	r3, [r7, #4]
 801cd04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cd06:	2b00      	cmp	r3, #0
 801cd08:	d10a      	bne.n	801cd20 <tcp_enqueue_flags+0x1b0>
 801cd0a:	687b      	ldr	r3, [r7, #4]
 801cd0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cd0e:	2b00      	cmp	r3, #0
 801cd10:	d106      	bne.n	801cd20 <tcp_enqueue_flags+0x1b0>
 801cd12:	4b06      	ldr	r3, [pc, #24]	; (801cd2c <tcp_enqueue_flags+0x1bc>)
 801cd14:	f240 4265 	movw	r2, #1125	; 0x465
 801cd18:	490b      	ldr	r1, [pc, #44]	; (801cd48 <tcp_enqueue_flags+0x1d8>)
 801cd1a:	4806      	ldr	r0, [pc, #24]	; (801cd34 <tcp_enqueue_flags+0x1c4>)
 801cd1c:	f004 fc02 	bl	8021524 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801cd20:	2300      	movs	r3, #0
}
 801cd22:	4618      	mov	r0, r3
 801cd24:	3720      	adds	r7, #32
 801cd26:	46bd      	mov	sp, r7
 801cd28:	bd80      	pop	{r7, pc}
 801cd2a:	bf00      	nop
 801cd2c:	08025cf4 	.word	0x08025cf4
 801cd30:	08026118 	.word	0x08026118
 801cd34:	08025d48 	.word	0x08025d48
 801cd38:	08026170 	.word	0x08026170
 801cd3c:	08026190 	.word	0x08026190
 801cd40:	080261cc 	.word	0x080261cc
 801cd44:	080261e4 	.word	0x080261e4
 801cd48:	08026210 	.word	0x08026210

0801cd4c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801cd4c:	b5b0      	push	{r4, r5, r7, lr}
 801cd4e:	b08a      	sub	sp, #40	; 0x28
 801cd50:	af00      	add	r7, sp, #0
 801cd52:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801cd54:	687b      	ldr	r3, [r7, #4]
 801cd56:	2b00      	cmp	r3, #0
 801cd58:	d106      	bne.n	801cd68 <tcp_output+0x1c>
 801cd5a:	4b9e      	ldr	r3, [pc, #632]	; (801cfd4 <tcp_output+0x288>)
 801cd5c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801cd60:	499d      	ldr	r1, [pc, #628]	; (801cfd8 <tcp_output+0x28c>)
 801cd62:	489e      	ldr	r0, [pc, #632]	; (801cfdc <tcp_output+0x290>)
 801cd64:	f004 fbde 	bl	8021524 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801cd68:	687b      	ldr	r3, [r7, #4]
 801cd6a:	7d1b      	ldrb	r3, [r3, #20]
 801cd6c:	2b01      	cmp	r3, #1
 801cd6e:	d106      	bne.n	801cd7e <tcp_output+0x32>
 801cd70:	4b98      	ldr	r3, [pc, #608]	; (801cfd4 <tcp_output+0x288>)
 801cd72:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801cd76:	499a      	ldr	r1, [pc, #616]	; (801cfe0 <tcp_output+0x294>)
 801cd78:	4898      	ldr	r0, [pc, #608]	; (801cfdc <tcp_output+0x290>)
 801cd7a:	f004 fbd3 	bl	8021524 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801cd7e:	4b99      	ldr	r3, [pc, #612]	; (801cfe4 <tcp_output+0x298>)
 801cd80:	681b      	ldr	r3, [r3, #0]
 801cd82:	687a      	ldr	r2, [r7, #4]
 801cd84:	429a      	cmp	r2, r3
 801cd86:	d101      	bne.n	801cd8c <tcp_output+0x40>
    return ERR_OK;
 801cd88:	2300      	movs	r3, #0
 801cd8a:	e1ce      	b.n	801d12a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801cd8c:	687b      	ldr	r3, [r7, #4]
 801cd8e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801cd92:	687b      	ldr	r3, [r7, #4]
 801cd94:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801cd98:	4293      	cmp	r3, r2
 801cd9a:	bf28      	it	cs
 801cd9c:	4613      	movcs	r3, r2
 801cd9e:	b29b      	uxth	r3, r3
 801cda0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801cda2:	687b      	ldr	r3, [r7, #4]
 801cda4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cda6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801cda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cdaa:	2b00      	cmp	r3, #0
 801cdac:	d10b      	bne.n	801cdc6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801cdae:	687b      	ldr	r3, [r7, #4]
 801cdb0:	8b5b      	ldrh	r3, [r3, #26]
 801cdb2:	f003 0302 	and.w	r3, r3, #2
 801cdb6:	2b00      	cmp	r3, #0
 801cdb8:	f000 81aa 	beq.w	801d110 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801cdbc:	6878      	ldr	r0, [r7, #4]
 801cdbe:	f000 fdcb 	bl	801d958 <tcp_send_empty_ack>
 801cdc2:	4603      	mov	r3, r0
 801cdc4:	e1b1      	b.n	801d12a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801cdc6:	6879      	ldr	r1, [r7, #4]
 801cdc8:	687b      	ldr	r3, [r7, #4]
 801cdca:	3304      	adds	r3, #4
 801cdcc:	461a      	mov	r2, r3
 801cdce:	6878      	ldr	r0, [r7, #4]
 801cdd0:	f7ff f824 	bl	801be1c <tcp_route>
 801cdd4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801cdd6:	697b      	ldr	r3, [r7, #20]
 801cdd8:	2b00      	cmp	r3, #0
 801cdda:	d102      	bne.n	801cde2 <tcp_output+0x96>
    return ERR_RTE;
 801cddc:	f06f 0303 	mvn.w	r3, #3
 801cde0:	e1a3      	b.n	801d12a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801cde2:	687b      	ldr	r3, [r7, #4]
 801cde4:	2b00      	cmp	r3, #0
 801cde6:	d003      	beq.n	801cdf0 <tcp_output+0xa4>
 801cde8:	687b      	ldr	r3, [r7, #4]
 801cdea:	681b      	ldr	r3, [r3, #0]
 801cdec:	2b00      	cmp	r3, #0
 801cdee:	d111      	bne.n	801ce14 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801cdf0:	697b      	ldr	r3, [r7, #20]
 801cdf2:	2b00      	cmp	r3, #0
 801cdf4:	d002      	beq.n	801cdfc <tcp_output+0xb0>
 801cdf6:	697b      	ldr	r3, [r7, #20]
 801cdf8:	3304      	adds	r3, #4
 801cdfa:	e000      	b.n	801cdfe <tcp_output+0xb2>
 801cdfc:	2300      	movs	r3, #0
 801cdfe:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801ce00:	693b      	ldr	r3, [r7, #16]
 801ce02:	2b00      	cmp	r3, #0
 801ce04:	d102      	bne.n	801ce0c <tcp_output+0xc0>
      return ERR_RTE;
 801ce06:	f06f 0303 	mvn.w	r3, #3
 801ce0a:	e18e      	b.n	801d12a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801ce0c:	693b      	ldr	r3, [r7, #16]
 801ce0e:	681a      	ldr	r2, [r3, #0]
 801ce10:	687b      	ldr	r3, [r7, #4]
 801ce12:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801ce14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ce16:	68db      	ldr	r3, [r3, #12]
 801ce18:	685b      	ldr	r3, [r3, #4]
 801ce1a:	4618      	mov	r0, r3
 801ce1c:	f7f8 ffa7 	bl	8015d6e <lwip_htonl>
 801ce20:	4602      	mov	r2, r0
 801ce22:	687b      	ldr	r3, [r7, #4]
 801ce24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ce26:	1ad3      	subs	r3, r2, r3
 801ce28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ce2a:	8912      	ldrh	r2, [r2, #8]
 801ce2c:	4413      	add	r3, r2
 801ce2e:	69ba      	ldr	r2, [r7, #24]
 801ce30:	429a      	cmp	r2, r3
 801ce32:	d227      	bcs.n	801ce84 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801ce34:	687b      	ldr	r3, [r7, #4]
 801ce36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801ce3a:	461a      	mov	r2, r3
 801ce3c:	69bb      	ldr	r3, [r7, #24]
 801ce3e:	4293      	cmp	r3, r2
 801ce40:	d114      	bne.n	801ce6c <tcp_output+0x120>
 801ce42:	687b      	ldr	r3, [r7, #4]
 801ce44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ce46:	2b00      	cmp	r3, #0
 801ce48:	d110      	bne.n	801ce6c <tcp_output+0x120>
 801ce4a:	687b      	ldr	r3, [r7, #4]
 801ce4c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801ce50:	2b00      	cmp	r3, #0
 801ce52:	d10b      	bne.n	801ce6c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801ce54:	687b      	ldr	r3, [r7, #4]
 801ce56:	2200      	movs	r2, #0
 801ce58:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801ce5c:	687b      	ldr	r3, [r7, #4]
 801ce5e:	2201      	movs	r2, #1
 801ce60:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801ce64:	687b      	ldr	r3, [r7, #4]
 801ce66:	2200      	movs	r2, #0
 801ce68:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801ce6c:	687b      	ldr	r3, [r7, #4]
 801ce6e:	8b5b      	ldrh	r3, [r3, #26]
 801ce70:	f003 0302 	and.w	r3, r3, #2
 801ce74:	2b00      	cmp	r3, #0
 801ce76:	f000 814d 	beq.w	801d114 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801ce7a:	6878      	ldr	r0, [r7, #4]
 801ce7c:	f000 fd6c 	bl	801d958 <tcp_send_empty_ack>
 801ce80:	4603      	mov	r3, r0
 801ce82:	e152      	b.n	801d12a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801ce84:	687b      	ldr	r3, [r7, #4]
 801ce86:	2200      	movs	r2, #0
 801ce88:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801ce8c:	687b      	ldr	r3, [r7, #4]
 801ce8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ce90:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801ce92:	6a3b      	ldr	r3, [r7, #32]
 801ce94:	2b00      	cmp	r3, #0
 801ce96:	f000 811c 	beq.w	801d0d2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801ce9a:	e002      	b.n	801cea2 <tcp_output+0x156>
 801ce9c:	6a3b      	ldr	r3, [r7, #32]
 801ce9e:	681b      	ldr	r3, [r3, #0]
 801cea0:	623b      	str	r3, [r7, #32]
 801cea2:	6a3b      	ldr	r3, [r7, #32]
 801cea4:	681b      	ldr	r3, [r3, #0]
 801cea6:	2b00      	cmp	r3, #0
 801cea8:	d1f8      	bne.n	801ce9c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801ceaa:	e112      	b.n	801d0d2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801ceac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ceae:	68db      	ldr	r3, [r3, #12]
 801ceb0:	899b      	ldrh	r3, [r3, #12]
 801ceb2:	b29b      	uxth	r3, r3
 801ceb4:	4618      	mov	r0, r3
 801ceb6:	f7f8 ff45 	bl	8015d44 <lwip_htons>
 801ceba:	4603      	mov	r3, r0
 801cebc:	b2db      	uxtb	r3, r3
 801cebe:	f003 0304 	and.w	r3, r3, #4
 801cec2:	2b00      	cmp	r3, #0
 801cec4:	d006      	beq.n	801ced4 <tcp_output+0x188>
 801cec6:	4b43      	ldr	r3, [pc, #268]	; (801cfd4 <tcp_output+0x288>)
 801cec8:	f240 5236 	movw	r2, #1334	; 0x536
 801cecc:	4946      	ldr	r1, [pc, #280]	; (801cfe8 <tcp_output+0x29c>)
 801cece:	4843      	ldr	r0, [pc, #268]	; (801cfdc <tcp_output+0x290>)
 801ced0:	f004 fb28 	bl	8021524 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801ced4:	687b      	ldr	r3, [r7, #4]
 801ced6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ced8:	2b00      	cmp	r3, #0
 801ceda:	d01f      	beq.n	801cf1c <tcp_output+0x1d0>
 801cedc:	687b      	ldr	r3, [r7, #4]
 801cede:	8b5b      	ldrh	r3, [r3, #26]
 801cee0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801cee4:	2b00      	cmp	r3, #0
 801cee6:	d119      	bne.n	801cf1c <tcp_output+0x1d0>
 801cee8:	687b      	ldr	r3, [r7, #4]
 801ceea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ceec:	2b00      	cmp	r3, #0
 801ceee:	d00b      	beq.n	801cf08 <tcp_output+0x1bc>
 801cef0:	687b      	ldr	r3, [r7, #4]
 801cef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cef4:	681b      	ldr	r3, [r3, #0]
 801cef6:	2b00      	cmp	r3, #0
 801cef8:	d110      	bne.n	801cf1c <tcp_output+0x1d0>
 801cefa:	687b      	ldr	r3, [r7, #4]
 801cefc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cefe:	891a      	ldrh	r2, [r3, #8]
 801cf00:	687b      	ldr	r3, [r7, #4]
 801cf02:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801cf04:	429a      	cmp	r2, r3
 801cf06:	d209      	bcs.n	801cf1c <tcp_output+0x1d0>
 801cf08:	687b      	ldr	r3, [r7, #4]
 801cf0a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801cf0e:	2b00      	cmp	r3, #0
 801cf10:	d004      	beq.n	801cf1c <tcp_output+0x1d0>
 801cf12:	687b      	ldr	r3, [r7, #4]
 801cf14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801cf18:	2b08      	cmp	r3, #8
 801cf1a:	d901      	bls.n	801cf20 <tcp_output+0x1d4>
 801cf1c:	2301      	movs	r3, #1
 801cf1e:	e000      	b.n	801cf22 <tcp_output+0x1d6>
 801cf20:	2300      	movs	r3, #0
 801cf22:	2b00      	cmp	r3, #0
 801cf24:	d106      	bne.n	801cf34 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801cf26:	687b      	ldr	r3, [r7, #4]
 801cf28:	8b5b      	ldrh	r3, [r3, #26]
 801cf2a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801cf2e:	2b00      	cmp	r3, #0
 801cf30:	f000 80e4 	beq.w	801d0fc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801cf34:	687b      	ldr	r3, [r7, #4]
 801cf36:	7d1b      	ldrb	r3, [r3, #20]
 801cf38:	2b02      	cmp	r3, #2
 801cf3a:	d00d      	beq.n	801cf58 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801cf3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf3e:	68db      	ldr	r3, [r3, #12]
 801cf40:	899b      	ldrh	r3, [r3, #12]
 801cf42:	b29c      	uxth	r4, r3
 801cf44:	2010      	movs	r0, #16
 801cf46:	f7f8 fefd 	bl	8015d44 <lwip_htons>
 801cf4a:	4603      	mov	r3, r0
 801cf4c:	461a      	mov	r2, r3
 801cf4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf50:	68db      	ldr	r3, [r3, #12]
 801cf52:	4322      	orrs	r2, r4
 801cf54:	b292      	uxth	r2, r2
 801cf56:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801cf58:	697a      	ldr	r2, [r7, #20]
 801cf5a:	6879      	ldr	r1, [r7, #4]
 801cf5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801cf5e:	f000 f909 	bl	801d174 <tcp_output_segment>
 801cf62:	4603      	mov	r3, r0
 801cf64:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801cf66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cf6a:	2b00      	cmp	r3, #0
 801cf6c:	d009      	beq.n	801cf82 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801cf6e:	687b      	ldr	r3, [r7, #4]
 801cf70:	8b5b      	ldrh	r3, [r3, #26]
 801cf72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cf76:	b29a      	uxth	r2, r3
 801cf78:	687b      	ldr	r3, [r7, #4]
 801cf7a:	835a      	strh	r2, [r3, #26]
      return err;
 801cf7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cf80:	e0d3      	b.n	801d12a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801cf82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cf84:	681a      	ldr	r2, [r3, #0]
 801cf86:	687b      	ldr	r3, [r7, #4]
 801cf88:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801cf8a:	687b      	ldr	r3, [r7, #4]
 801cf8c:	7d1b      	ldrb	r3, [r3, #20]
 801cf8e:	2b02      	cmp	r3, #2
 801cf90:	d006      	beq.n	801cfa0 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801cf92:	687b      	ldr	r3, [r7, #4]
 801cf94:	8b5b      	ldrh	r3, [r3, #26]
 801cf96:	f023 0303 	bic.w	r3, r3, #3
 801cf9a:	b29a      	uxth	r2, r3
 801cf9c:	687b      	ldr	r3, [r7, #4]
 801cf9e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801cfa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cfa2:	68db      	ldr	r3, [r3, #12]
 801cfa4:	685b      	ldr	r3, [r3, #4]
 801cfa6:	4618      	mov	r0, r3
 801cfa8:	f7f8 fee1 	bl	8015d6e <lwip_htonl>
 801cfac:	4604      	mov	r4, r0
 801cfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cfb0:	891b      	ldrh	r3, [r3, #8]
 801cfb2:	461d      	mov	r5, r3
 801cfb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cfb6:	68db      	ldr	r3, [r3, #12]
 801cfb8:	899b      	ldrh	r3, [r3, #12]
 801cfba:	b29b      	uxth	r3, r3
 801cfbc:	4618      	mov	r0, r3
 801cfbe:	f7f8 fec1 	bl	8015d44 <lwip_htons>
 801cfc2:	4603      	mov	r3, r0
 801cfc4:	b2db      	uxtb	r3, r3
 801cfc6:	f003 0303 	and.w	r3, r3, #3
 801cfca:	2b00      	cmp	r3, #0
 801cfcc:	d00e      	beq.n	801cfec <tcp_output+0x2a0>
 801cfce:	2301      	movs	r3, #1
 801cfd0:	e00d      	b.n	801cfee <tcp_output+0x2a2>
 801cfd2:	bf00      	nop
 801cfd4:	08025cf4 	.word	0x08025cf4
 801cfd8:	08026238 	.word	0x08026238
 801cfdc:	08025d48 	.word	0x08025d48
 801cfe0:	08026250 	.word	0x08026250
 801cfe4:	2001b9a4 	.word	0x2001b9a4
 801cfe8:	08026278 	.word	0x08026278
 801cfec:	2300      	movs	r3, #0
 801cfee:	442b      	add	r3, r5
 801cff0:	4423      	add	r3, r4
 801cff2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801cff4:	687b      	ldr	r3, [r7, #4]
 801cff6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801cff8:	68bb      	ldr	r3, [r7, #8]
 801cffa:	1ad3      	subs	r3, r2, r3
 801cffc:	2b00      	cmp	r3, #0
 801cffe:	da02      	bge.n	801d006 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801d000:	687b      	ldr	r3, [r7, #4]
 801d002:	68ba      	ldr	r2, [r7, #8]
 801d004:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801d006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d008:	891b      	ldrh	r3, [r3, #8]
 801d00a:	461c      	mov	r4, r3
 801d00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d00e:	68db      	ldr	r3, [r3, #12]
 801d010:	899b      	ldrh	r3, [r3, #12]
 801d012:	b29b      	uxth	r3, r3
 801d014:	4618      	mov	r0, r3
 801d016:	f7f8 fe95 	bl	8015d44 <lwip_htons>
 801d01a:	4603      	mov	r3, r0
 801d01c:	b2db      	uxtb	r3, r3
 801d01e:	f003 0303 	and.w	r3, r3, #3
 801d022:	2b00      	cmp	r3, #0
 801d024:	d001      	beq.n	801d02a <tcp_output+0x2de>
 801d026:	2301      	movs	r3, #1
 801d028:	e000      	b.n	801d02c <tcp_output+0x2e0>
 801d02a:	2300      	movs	r3, #0
 801d02c:	4423      	add	r3, r4
 801d02e:	2b00      	cmp	r3, #0
 801d030:	d049      	beq.n	801d0c6 <tcp_output+0x37a>
      seg->next = NULL;
 801d032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d034:	2200      	movs	r2, #0
 801d036:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801d038:	687b      	ldr	r3, [r7, #4]
 801d03a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d03c:	2b00      	cmp	r3, #0
 801d03e:	d105      	bne.n	801d04c <tcp_output+0x300>
        pcb->unacked = seg;
 801d040:	687b      	ldr	r3, [r7, #4]
 801d042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d044:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801d046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d048:	623b      	str	r3, [r7, #32]
 801d04a:	e03f      	b.n	801d0cc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801d04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d04e:	68db      	ldr	r3, [r3, #12]
 801d050:	685b      	ldr	r3, [r3, #4]
 801d052:	4618      	mov	r0, r3
 801d054:	f7f8 fe8b 	bl	8015d6e <lwip_htonl>
 801d058:	4604      	mov	r4, r0
 801d05a:	6a3b      	ldr	r3, [r7, #32]
 801d05c:	68db      	ldr	r3, [r3, #12]
 801d05e:	685b      	ldr	r3, [r3, #4]
 801d060:	4618      	mov	r0, r3
 801d062:	f7f8 fe84 	bl	8015d6e <lwip_htonl>
 801d066:	4603      	mov	r3, r0
 801d068:	1ae3      	subs	r3, r4, r3
 801d06a:	2b00      	cmp	r3, #0
 801d06c:	da24      	bge.n	801d0b8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801d06e:	687b      	ldr	r3, [r7, #4]
 801d070:	3370      	adds	r3, #112	; 0x70
 801d072:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801d074:	e002      	b.n	801d07c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801d076:	69fb      	ldr	r3, [r7, #28]
 801d078:	681b      	ldr	r3, [r3, #0]
 801d07a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801d07c:	69fb      	ldr	r3, [r7, #28]
 801d07e:	681b      	ldr	r3, [r3, #0]
 801d080:	2b00      	cmp	r3, #0
 801d082:	d011      	beq.n	801d0a8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801d084:	69fb      	ldr	r3, [r7, #28]
 801d086:	681b      	ldr	r3, [r3, #0]
 801d088:	68db      	ldr	r3, [r3, #12]
 801d08a:	685b      	ldr	r3, [r3, #4]
 801d08c:	4618      	mov	r0, r3
 801d08e:	f7f8 fe6e 	bl	8015d6e <lwip_htonl>
 801d092:	4604      	mov	r4, r0
 801d094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d096:	68db      	ldr	r3, [r3, #12]
 801d098:	685b      	ldr	r3, [r3, #4]
 801d09a:	4618      	mov	r0, r3
 801d09c:	f7f8 fe67 	bl	8015d6e <lwip_htonl>
 801d0a0:	4603      	mov	r3, r0
 801d0a2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801d0a4:	2b00      	cmp	r3, #0
 801d0a6:	dbe6      	blt.n	801d076 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801d0a8:	69fb      	ldr	r3, [r7, #28]
 801d0aa:	681a      	ldr	r2, [r3, #0]
 801d0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0ae:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801d0b0:	69fb      	ldr	r3, [r7, #28]
 801d0b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d0b4:	601a      	str	r2, [r3, #0]
 801d0b6:	e009      	b.n	801d0cc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801d0b8:	6a3b      	ldr	r3, [r7, #32]
 801d0ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d0bc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801d0be:	6a3b      	ldr	r3, [r7, #32]
 801d0c0:	681b      	ldr	r3, [r3, #0]
 801d0c2:	623b      	str	r3, [r7, #32]
 801d0c4:	e002      	b.n	801d0cc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801d0c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d0c8:	f7fb feff 	bl	8018eca <tcp_seg_free>
    }
    seg = pcb->unsent;
 801d0cc:	687b      	ldr	r3, [r7, #4]
 801d0ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d0d0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801d0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0d4:	2b00      	cmp	r3, #0
 801d0d6:	d012      	beq.n	801d0fe <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801d0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0da:	68db      	ldr	r3, [r3, #12]
 801d0dc:	685b      	ldr	r3, [r3, #4]
 801d0de:	4618      	mov	r0, r3
 801d0e0:	f7f8 fe45 	bl	8015d6e <lwip_htonl>
 801d0e4:	4602      	mov	r2, r0
 801d0e6:	687b      	ldr	r3, [r7, #4]
 801d0e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d0ea:	1ad3      	subs	r3, r2, r3
 801d0ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d0ee:	8912      	ldrh	r2, [r2, #8]
 801d0f0:	4413      	add	r3, r2
  while (seg != NULL &&
 801d0f2:	69ba      	ldr	r2, [r7, #24]
 801d0f4:	429a      	cmp	r2, r3
 801d0f6:	f4bf aed9 	bcs.w	801ceac <tcp_output+0x160>
 801d0fa:	e000      	b.n	801d0fe <tcp_output+0x3b2>
      break;
 801d0fc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d102:	2b00      	cmp	r3, #0
 801d104:	d108      	bne.n	801d118 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801d106:	687b      	ldr	r3, [r7, #4]
 801d108:	2200      	movs	r2, #0
 801d10a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801d10e:	e004      	b.n	801d11a <tcp_output+0x3ce>
    goto output_done;
 801d110:	bf00      	nop
 801d112:	e002      	b.n	801d11a <tcp_output+0x3ce>
    goto output_done;
 801d114:	bf00      	nop
 801d116:	e000      	b.n	801d11a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801d118:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801d11a:	687b      	ldr	r3, [r7, #4]
 801d11c:	8b5b      	ldrh	r3, [r3, #26]
 801d11e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801d122:	b29a      	uxth	r2, r3
 801d124:	687b      	ldr	r3, [r7, #4]
 801d126:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801d128:	2300      	movs	r3, #0
}
 801d12a:	4618      	mov	r0, r3
 801d12c:	3728      	adds	r7, #40	; 0x28
 801d12e:	46bd      	mov	sp, r7
 801d130:	bdb0      	pop	{r4, r5, r7, pc}
 801d132:	bf00      	nop

0801d134 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801d134:	b580      	push	{r7, lr}
 801d136:	b082      	sub	sp, #8
 801d138:	af00      	add	r7, sp, #0
 801d13a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801d13c:	687b      	ldr	r3, [r7, #4]
 801d13e:	2b00      	cmp	r3, #0
 801d140:	d106      	bne.n	801d150 <tcp_output_segment_busy+0x1c>
 801d142:	4b09      	ldr	r3, [pc, #36]	; (801d168 <tcp_output_segment_busy+0x34>)
 801d144:	f240 529a 	movw	r2, #1434	; 0x59a
 801d148:	4908      	ldr	r1, [pc, #32]	; (801d16c <tcp_output_segment_busy+0x38>)
 801d14a:	4809      	ldr	r0, [pc, #36]	; (801d170 <tcp_output_segment_busy+0x3c>)
 801d14c:	f004 f9ea 	bl	8021524 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801d150:	687b      	ldr	r3, [r7, #4]
 801d152:	685b      	ldr	r3, [r3, #4]
 801d154:	7b9b      	ldrb	r3, [r3, #14]
 801d156:	2b01      	cmp	r3, #1
 801d158:	d001      	beq.n	801d15e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801d15a:	2301      	movs	r3, #1
 801d15c:	e000      	b.n	801d160 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801d15e:	2300      	movs	r3, #0
}
 801d160:	4618      	mov	r0, r3
 801d162:	3708      	adds	r7, #8
 801d164:	46bd      	mov	sp, r7
 801d166:	bd80      	pop	{r7, pc}
 801d168:	08025cf4 	.word	0x08025cf4
 801d16c:	08026290 	.word	0x08026290
 801d170:	08025d48 	.word	0x08025d48

0801d174 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801d174:	b5b0      	push	{r4, r5, r7, lr}
 801d176:	b08c      	sub	sp, #48	; 0x30
 801d178:	af04      	add	r7, sp, #16
 801d17a:	60f8      	str	r0, [r7, #12]
 801d17c:	60b9      	str	r1, [r7, #8]
 801d17e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801d180:	68fb      	ldr	r3, [r7, #12]
 801d182:	2b00      	cmp	r3, #0
 801d184:	d106      	bne.n	801d194 <tcp_output_segment+0x20>
 801d186:	4b63      	ldr	r3, [pc, #396]	; (801d314 <tcp_output_segment+0x1a0>)
 801d188:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801d18c:	4962      	ldr	r1, [pc, #392]	; (801d318 <tcp_output_segment+0x1a4>)
 801d18e:	4863      	ldr	r0, [pc, #396]	; (801d31c <tcp_output_segment+0x1a8>)
 801d190:	f004 f9c8 	bl	8021524 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801d194:	68bb      	ldr	r3, [r7, #8]
 801d196:	2b00      	cmp	r3, #0
 801d198:	d106      	bne.n	801d1a8 <tcp_output_segment+0x34>
 801d19a:	4b5e      	ldr	r3, [pc, #376]	; (801d314 <tcp_output_segment+0x1a0>)
 801d19c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801d1a0:	495f      	ldr	r1, [pc, #380]	; (801d320 <tcp_output_segment+0x1ac>)
 801d1a2:	485e      	ldr	r0, [pc, #376]	; (801d31c <tcp_output_segment+0x1a8>)
 801d1a4:	f004 f9be 	bl	8021524 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801d1a8:	687b      	ldr	r3, [r7, #4]
 801d1aa:	2b00      	cmp	r3, #0
 801d1ac:	d106      	bne.n	801d1bc <tcp_output_segment+0x48>
 801d1ae:	4b59      	ldr	r3, [pc, #356]	; (801d314 <tcp_output_segment+0x1a0>)
 801d1b0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801d1b4:	495b      	ldr	r1, [pc, #364]	; (801d324 <tcp_output_segment+0x1b0>)
 801d1b6:	4859      	ldr	r0, [pc, #356]	; (801d31c <tcp_output_segment+0x1a8>)
 801d1b8:	f004 f9b4 	bl	8021524 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801d1bc:	68f8      	ldr	r0, [r7, #12]
 801d1be:	f7ff ffb9 	bl	801d134 <tcp_output_segment_busy>
 801d1c2:	4603      	mov	r3, r0
 801d1c4:	2b00      	cmp	r3, #0
 801d1c6:	d001      	beq.n	801d1cc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801d1c8:	2300      	movs	r3, #0
 801d1ca:	e09f      	b.n	801d30c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801d1cc:	68bb      	ldr	r3, [r7, #8]
 801d1ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801d1d0:	68fb      	ldr	r3, [r7, #12]
 801d1d2:	68dc      	ldr	r4, [r3, #12]
 801d1d4:	4610      	mov	r0, r2
 801d1d6:	f7f8 fdca 	bl	8015d6e <lwip_htonl>
 801d1da:	4603      	mov	r3, r0
 801d1dc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801d1de:	68bb      	ldr	r3, [r7, #8]
 801d1e0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801d1e2:	68fb      	ldr	r3, [r7, #12]
 801d1e4:	68dc      	ldr	r4, [r3, #12]
 801d1e6:	4610      	mov	r0, r2
 801d1e8:	f7f8 fdac 	bl	8015d44 <lwip_htons>
 801d1ec:	4603      	mov	r3, r0
 801d1ee:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801d1f0:	68bb      	ldr	r3, [r7, #8]
 801d1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d1f4:	68ba      	ldr	r2, [r7, #8]
 801d1f6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801d1f8:	441a      	add	r2, r3
 801d1fa:	68bb      	ldr	r3, [r7, #8]
 801d1fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801d1fe:	68fb      	ldr	r3, [r7, #12]
 801d200:	68db      	ldr	r3, [r3, #12]
 801d202:	3314      	adds	r3, #20
 801d204:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801d206:	68fb      	ldr	r3, [r7, #12]
 801d208:	7a9b      	ldrb	r3, [r3, #10]
 801d20a:	f003 0301 	and.w	r3, r3, #1
 801d20e:	2b00      	cmp	r3, #0
 801d210:	d015      	beq.n	801d23e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801d212:	68bb      	ldr	r3, [r7, #8]
 801d214:	3304      	adds	r3, #4
 801d216:	461a      	mov	r2, r3
 801d218:	6879      	ldr	r1, [r7, #4]
 801d21a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801d21e:	f7fc fa37 	bl	8019690 <tcp_eff_send_mss_netif>
 801d222:	4603      	mov	r3, r0
 801d224:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801d226:	8b7b      	ldrh	r3, [r7, #26]
 801d228:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801d22c:	4618      	mov	r0, r3
 801d22e:	f7f8 fd9e 	bl	8015d6e <lwip_htonl>
 801d232:	4602      	mov	r2, r0
 801d234:	69fb      	ldr	r3, [r7, #28]
 801d236:	601a      	str	r2, [r3, #0]
    opts += 1;
 801d238:	69fb      	ldr	r3, [r7, #28]
 801d23a:	3304      	adds	r3, #4
 801d23c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801d23e:	68bb      	ldr	r3, [r7, #8]
 801d240:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801d244:	2b00      	cmp	r3, #0
 801d246:	da02      	bge.n	801d24e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801d248:	68bb      	ldr	r3, [r7, #8]
 801d24a:	2200      	movs	r2, #0
 801d24c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801d24e:	68bb      	ldr	r3, [r7, #8]
 801d250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d252:	2b00      	cmp	r3, #0
 801d254:	d10c      	bne.n	801d270 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801d256:	4b34      	ldr	r3, [pc, #208]	; (801d328 <tcp_output_segment+0x1b4>)
 801d258:	681a      	ldr	r2, [r3, #0]
 801d25a:	68bb      	ldr	r3, [r7, #8]
 801d25c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801d25e:	68fb      	ldr	r3, [r7, #12]
 801d260:	68db      	ldr	r3, [r3, #12]
 801d262:	685b      	ldr	r3, [r3, #4]
 801d264:	4618      	mov	r0, r3
 801d266:	f7f8 fd82 	bl	8015d6e <lwip_htonl>
 801d26a:	4602      	mov	r2, r0
 801d26c:	68bb      	ldr	r3, [r7, #8]
 801d26e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801d270:	68fb      	ldr	r3, [r7, #12]
 801d272:	68da      	ldr	r2, [r3, #12]
 801d274:	68fb      	ldr	r3, [r7, #12]
 801d276:	685b      	ldr	r3, [r3, #4]
 801d278:	685b      	ldr	r3, [r3, #4]
 801d27a:	1ad3      	subs	r3, r2, r3
 801d27c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801d27e:	68fb      	ldr	r3, [r7, #12]
 801d280:	685b      	ldr	r3, [r3, #4]
 801d282:	8959      	ldrh	r1, [r3, #10]
 801d284:	68fb      	ldr	r3, [r7, #12]
 801d286:	685b      	ldr	r3, [r3, #4]
 801d288:	8b3a      	ldrh	r2, [r7, #24]
 801d28a:	1a8a      	subs	r2, r1, r2
 801d28c:	b292      	uxth	r2, r2
 801d28e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801d290:	68fb      	ldr	r3, [r7, #12]
 801d292:	685b      	ldr	r3, [r3, #4]
 801d294:	8919      	ldrh	r1, [r3, #8]
 801d296:	68fb      	ldr	r3, [r7, #12]
 801d298:	685b      	ldr	r3, [r3, #4]
 801d29a:	8b3a      	ldrh	r2, [r7, #24]
 801d29c:	1a8a      	subs	r2, r1, r2
 801d29e:	b292      	uxth	r2, r2
 801d2a0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801d2a2:	68fb      	ldr	r3, [r7, #12]
 801d2a4:	685b      	ldr	r3, [r3, #4]
 801d2a6:	68fa      	ldr	r2, [r7, #12]
 801d2a8:	68d2      	ldr	r2, [r2, #12]
 801d2aa:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801d2ac:	68fb      	ldr	r3, [r7, #12]
 801d2ae:	68db      	ldr	r3, [r3, #12]
 801d2b0:	2200      	movs	r2, #0
 801d2b2:	741a      	strb	r2, [r3, #16]
 801d2b4:	2200      	movs	r2, #0
 801d2b6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801d2b8:	68fb      	ldr	r3, [r7, #12]
 801d2ba:	68db      	ldr	r3, [r3, #12]
 801d2bc:	f103 0214 	add.w	r2, r3, #20
 801d2c0:	68fb      	ldr	r3, [r7, #12]
 801d2c2:	7a9b      	ldrb	r3, [r3, #10]
 801d2c4:	009b      	lsls	r3, r3, #2
 801d2c6:	f003 0304 	and.w	r3, r3, #4
 801d2ca:	4413      	add	r3, r2
 801d2cc:	69fa      	ldr	r2, [r7, #28]
 801d2ce:	429a      	cmp	r2, r3
 801d2d0:	d006      	beq.n	801d2e0 <tcp_output_segment+0x16c>
 801d2d2:	4b10      	ldr	r3, [pc, #64]	; (801d314 <tcp_output_segment+0x1a0>)
 801d2d4:	f240 621c 	movw	r2, #1564	; 0x61c
 801d2d8:	4914      	ldr	r1, [pc, #80]	; (801d32c <tcp_output_segment+0x1b8>)
 801d2da:	4810      	ldr	r0, [pc, #64]	; (801d31c <tcp_output_segment+0x1a8>)
 801d2dc:	f004 f922 	bl	8021524 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801d2e0:	68fb      	ldr	r3, [r7, #12]
 801d2e2:	6858      	ldr	r0, [r3, #4]
 801d2e4:	68b9      	ldr	r1, [r7, #8]
 801d2e6:	68bb      	ldr	r3, [r7, #8]
 801d2e8:	1d1c      	adds	r4, r3, #4
 801d2ea:	68bb      	ldr	r3, [r7, #8]
 801d2ec:	7add      	ldrb	r5, [r3, #11]
 801d2ee:	68bb      	ldr	r3, [r7, #8]
 801d2f0:	7a9b      	ldrb	r3, [r3, #10]
 801d2f2:	687a      	ldr	r2, [r7, #4]
 801d2f4:	9202      	str	r2, [sp, #8]
 801d2f6:	2206      	movs	r2, #6
 801d2f8:	9201      	str	r2, [sp, #4]
 801d2fa:	9300      	str	r3, [sp, #0]
 801d2fc:	462b      	mov	r3, r5
 801d2fe:	4622      	mov	r2, r4
 801d300:	f002 fa66 	bl	801f7d0 <ip4_output_if>
 801d304:	4603      	mov	r3, r0
 801d306:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801d308:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801d30c:	4618      	mov	r0, r3
 801d30e:	3720      	adds	r7, #32
 801d310:	46bd      	mov	sp, r7
 801d312:	bdb0      	pop	{r4, r5, r7, pc}
 801d314:	08025cf4 	.word	0x08025cf4
 801d318:	080262b8 	.word	0x080262b8
 801d31c:	08025d48 	.word	0x08025d48
 801d320:	080262d8 	.word	0x080262d8
 801d324:	080262f8 	.word	0x080262f8
 801d328:	2001b994 	.word	0x2001b994
 801d32c:	0802631c 	.word	0x0802631c

0801d330 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801d330:	b5b0      	push	{r4, r5, r7, lr}
 801d332:	b084      	sub	sp, #16
 801d334:	af00      	add	r7, sp, #0
 801d336:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801d338:	687b      	ldr	r3, [r7, #4]
 801d33a:	2b00      	cmp	r3, #0
 801d33c:	d106      	bne.n	801d34c <tcp_rexmit_rto_prepare+0x1c>
 801d33e:	4b31      	ldr	r3, [pc, #196]	; (801d404 <tcp_rexmit_rto_prepare+0xd4>)
 801d340:	f240 6263 	movw	r2, #1635	; 0x663
 801d344:	4930      	ldr	r1, [pc, #192]	; (801d408 <tcp_rexmit_rto_prepare+0xd8>)
 801d346:	4831      	ldr	r0, [pc, #196]	; (801d40c <tcp_rexmit_rto_prepare+0xdc>)
 801d348:	f004 f8ec 	bl	8021524 <iprintf>

  if (pcb->unacked == NULL) {
 801d34c:	687b      	ldr	r3, [r7, #4]
 801d34e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d350:	2b00      	cmp	r3, #0
 801d352:	d102      	bne.n	801d35a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801d354:	f06f 0305 	mvn.w	r3, #5
 801d358:	e050      	b.n	801d3fc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801d35a:	687b      	ldr	r3, [r7, #4]
 801d35c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d35e:	60fb      	str	r3, [r7, #12]
 801d360:	e00b      	b.n	801d37a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801d362:	68f8      	ldr	r0, [r7, #12]
 801d364:	f7ff fee6 	bl	801d134 <tcp_output_segment_busy>
 801d368:	4603      	mov	r3, r0
 801d36a:	2b00      	cmp	r3, #0
 801d36c:	d002      	beq.n	801d374 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801d36e:	f06f 0305 	mvn.w	r3, #5
 801d372:	e043      	b.n	801d3fc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801d374:	68fb      	ldr	r3, [r7, #12]
 801d376:	681b      	ldr	r3, [r3, #0]
 801d378:	60fb      	str	r3, [r7, #12]
 801d37a:	68fb      	ldr	r3, [r7, #12]
 801d37c:	681b      	ldr	r3, [r3, #0]
 801d37e:	2b00      	cmp	r3, #0
 801d380:	d1ef      	bne.n	801d362 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801d382:	68f8      	ldr	r0, [r7, #12]
 801d384:	f7ff fed6 	bl	801d134 <tcp_output_segment_busy>
 801d388:	4603      	mov	r3, r0
 801d38a:	2b00      	cmp	r3, #0
 801d38c:	d002      	beq.n	801d394 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801d38e:	f06f 0305 	mvn.w	r3, #5
 801d392:	e033      	b.n	801d3fc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801d394:	687b      	ldr	r3, [r7, #4]
 801d396:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801d398:	68fb      	ldr	r3, [r7, #12]
 801d39a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801d39c:	687b      	ldr	r3, [r7, #4]
 801d39e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801d3a0:	687b      	ldr	r3, [r7, #4]
 801d3a2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801d3a4:	687b      	ldr	r3, [r7, #4]
 801d3a6:	2200      	movs	r2, #0
 801d3a8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801d3aa:	687b      	ldr	r3, [r7, #4]
 801d3ac:	8b5b      	ldrh	r3, [r3, #26]
 801d3ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801d3b2:	b29a      	uxth	r2, r3
 801d3b4:	687b      	ldr	r3, [r7, #4]
 801d3b6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801d3b8:	68fb      	ldr	r3, [r7, #12]
 801d3ba:	68db      	ldr	r3, [r3, #12]
 801d3bc:	685b      	ldr	r3, [r3, #4]
 801d3be:	4618      	mov	r0, r3
 801d3c0:	f7f8 fcd5 	bl	8015d6e <lwip_htonl>
 801d3c4:	4604      	mov	r4, r0
 801d3c6:	68fb      	ldr	r3, [r7, #12]
 801d3c8:	891b      	ldrh	r3, [r3, #8]
 801d3ca:	461d      	mov	r5, r3
 801d3cc:	68fb      	ldr	r3, [r7, #12]
 801d3ce:	68db      	ldr	r3, [r3, #12]
 801d3d0:	899b      	ldrh	r3, [r3, #12]
 801d3d2:	b29b      	uxth	r3, r3
 801d3d4:	4618      	mov	r0, r3
 801d3d6:	f7f8 fcb5 	bl	8015d44 <lwip_htons>
 801d3da:	4603      	mov	r3, r0
 801d3dc:	b2db      	uxtb	r3, r3
 801d3de:	f003 0303 	and.w	r3, r3, #3
 801d3e2:	2b00      	cmp	r3, #0
 801d3e4:	d001      	beq.n	801d3ea <tcp_rexmit_rto_prepare+0xba>
 801d3e6:	2301      	movs	r3, #1
 801d3e8:	e000      	b.n	801d3ec <tcp_rexmit_rto_prepare+0xbc>
 801d3ea:	2300      	movs	r3, #0
 801d3ec:	442b      	add	r3, r5
 801d3ee:	18e2      	adds	r2, r4, r3
 801d3f0:	687b      	ldr	r3, [r7, #4]
 801d3f2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801d3f4:	687b      	ldr	r3, [r7, #4]
 801d3f6:	2200      	movs	r2, #0
 801d3f8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801d3fa:	2300      	movs	r3, #0
}
 801d3fc:	4618      	mov	r0, r3
 801d3fe:	3710      	adds	r7, #16
 801d400:	46bd      	mov	sp, r7
 801d402:	bdb0      	pop	{r4, r5, r7, pc}
 801d404:	08025cf4 	.word	0x08025cf4
 801d408:	08026330 	.word	0x08026330
 801d40c:	08025d48 	.word	0x08025d48

0801d410 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801d410:	b580      	push	{r7, lr}
 801d412:	b082      	sub	sp, #8
 801d414:	af00      	add	r7, sp, #0
 801d416:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801d418:	687b      	ldr	r3, [r7, #4]
 801d41a:	2b00      	cmp	r3, #0
 801d41c:	d106      	bne.n	801d42c <tcp_rexmit_rto_commit+0x1c>
 801d41e:	4b0d      	ldr	r3, [pc, #52]	; (801d454 <tcp_rexmit_rto_commit+0x44>)
 801d420:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801d424:	490c      	ldr	r1, [pc, #48]	; (801d458 <tcp_rexmit_rto_commit+0x48>)
 801d426:	480d      	ldr	r0, [pc, #52]	; (801d45c <tcp_rexmit_rto_commit+0x4c>)
 801d428:	f004 f87c 	bl	8021524 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801d42c:	687b      	ldr	r3, [r7, #4]
 801d42e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801d432:	2bff      	cmp	r3, #255	; 0xff
 801d434:	d007      	beq.n	801d446 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801d436:	687b      	ldr	r3, [r7, #4]
 801d438:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801d43c:	3301      	adds	r3, #1
 801d43e:	b2da      	uxtb	r2, r3
 801d440:	687b      	ldr	r3, [r7, #4]
 801d442:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801d446:	6878      	ldr	r0, [r7, #4]
 801d448:	f7ff fc80 	bl	801cd4c <tcp_output>
}
 801d44c:	bf00      	nop
 801d44e:	3708      	adds	r7, #8
 801d450:	46bd      	mov	sp, r7
 801d452:	bd80      	pop	{r7, pc}
 801d454:	08025cf4 	.word	0x08025cf4
 801d458:	08026354 	.word	0x08026354
 801d45c:	08025d48 	.word	0x08025d48

0801d460 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801d460:	b580      	push	{r7, lr}
 801d462:	b082      	sub	sp, #8
 801d464:	af00      	add	r7, sp, #0
 801d466:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801d468:	687b      	ldr	r3, [r7, #4]
 801d46a:	2b00      	cmp	r3, #0
 801d46c:	d106      	bne.n	801d47c <tcp_rexmit_rto+0x1c>
 801d46e:	4b0a      	ldr	r3, [pc, #40]	; (801d498 <tcp_rexmit_rto+0x38>)
 801d470:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801d474:	4909      	ldr	r1, [pc, #36]	; (801d49c <tcp_rexmit_rto+0x3c>)
 801d476:	480a      	ldr	r0, [pc, #40]	; (801d4a0 <tcp_rexmit_rto+0x40>)
 801d478:	f004 f854 	bl	8021524 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801d47c:	6878      	ldr	r0, [r7, #4]
 801d47e:	f7ff ff57 	bl	801d330 <tcp_rexmit_rto_prepare>
 801d482:	4603      	mov	r3, r0
 801d484:	2b00      	cmp	r3, #0
 801d486:	d102      	bne.n	801d48e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801d488:	6878      	ldr	r0, [r7, #4]
 801d48a:	f7ff ffc1 	bl	801d410 <tcp_rexmit_rto_commit>
  }
}
 801d48e:	bf00      	nop
 801d490:	3708      	adds	r7, #8
 801d492:	46bd      	mov	sp, r7
 801d494:	bd80      	pop	{r7, pc}
 801d496:	bf00      	nop
 801d498:	08025cf4 	.word	0x08025cf4
 801d49c:	08026378 	.word	0x08026378
 801d4a0:	08025d48 	.word	0x08025d48

0801d4a4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801d4a4:	b590      	push	{r4, r7, lr}
 801d4a6:	b085      	sub	sp, #20
 801d4a8:	af00      	add	r7, sp, #0
 801d4aa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801d4ac:	687b      	ldr	r3, [r7, #4]
 801d4ae:	2b00      	cmp	r3, #0
 801d4b0:	d106      	bne.n	801d4c0 <tcp_rexmit+0x1c>
 801d4b2:	4b2f      	ldr	r3, [pc, #188]	; (801d570 <tcp_rexmit+0xcc>)
 801d4b4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801d4b8:	492e      	ldr	r1, [pc, #184]	; (801d574 <tcp_rexmit+0xd0>)
 801d4ba:	482f      	ldr	r0, [pc, #188]	; (801d578 <tcp_rexmit+0xd4>)
 801d4bc:	f004 f832 	bl	8021524 <iprintf>

  if (pcb->unacked == NULL) {
 801d4c0:	687b      	ldr	r3, [r7, #4]
 801d4c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d4c4:	2b00      	cmp	r3, #0
 801d4c6:	d102      	bne.n	801d4ce <tcp_rexmit+0x2a>
    return ERR_VAL;
 801d4c8:	f06f 0305 	mvn.w	r3, #5
 801d4cc:	e04c      	b.n	801d568 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801d4ce:	687b      	ldr	r3, [r7, #4]
 801d4d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d4d2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801d4d4:	68b8      	ldr	r0, [r7, #8]
 801d4d6:	f7ff fe2d 	bl	801d134 <tcp_output_segment_busy>
 801d4da:	4603      	mov	r3, r0
 801d4dc:	2b00      	cmp	r3, #0
 801d4de:	d002      	beq.n	801d4e6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801d4e0:	f06f 0305 	mvn.w	r3, #5
 801d4e4:	e040      	b.n	801d568 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801d4e6:	68bb      	ldr	r3, [r7, #8]
 801d4e8:	681a      	ldr	r2, [r3, #0]
 801d4ea:	687b      	ldr	r3, [r7, #4]
 801d4ec:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801d4ee:	687b      	ldr	r3, [r7, #4]
 801d4f0:	336c      	adds	r3, #108	; 0x6c
 801d4f2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801d4f4:	e002      	b.n	801d4fc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801d4f6:	68fb      	ldr	r3, [r7, #12]
 801d4f8:	681b      	ldr	r3, [r3, #0]
 801d4fa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801d4fc:	68fb      	ldr	r3, [r7, #12]
 801d4fe:	681b      	ldr	r3, [r3, #0]
 801d500:	2b00      	cmp	r3, #0
 801d502:	d011      	beq.n	801d528 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801d504:	68fb      	ldr	r3, [r7, #12]
 801d506:	681b      	ldr	r3, [r3, #0]
 801d508:	68db      	ldr	r3, [r3, #12]
 801d50a:	685b      	ldr	r3, [r3, #4]
 801d50c:	4618      	mov	r0, r3
 801d50e:	f7f8 fc2e 	bl	8015d6e <lwip_htonl>
 801d512:	4604      	mov	r4, r0
 801d514:	68bb      	ldr	r3, [r7, #8]
 801d516:	68db      	ldr	r3, [r3, #12]
 801d518:	685b      	ldr	r3, [r3, #4]
 801d51a:	4618      	mov	r0, r3
 801d51c:	f7f8 fc27 	bl	8015d6e <lwip_htonl>
 801d520:	4603      	mov	r3, r0
 801d522:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801d524:	2b00      	cmp	r3, #0
 801d526:	dbe6      	blt.n	801d4f6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801d528:	68fb      	ldr	r3, [r7, #12]
 801d52a:	681a      	ldr	r2, [r3, #0]
 801d52c:	68bb      	ldr	r3, [r7, #8]
 801d52e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801d530:	68fb      	ldr	r3, [r7, #12]
 801d532:	68ba      	ldr	r2, [r7, #8]
 801d534:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801d536:	68bb      	ldr	r3, [r7, #8]
 801d538:	681b      	ldr	r3, [r3, #0]
 801d53a:	2b00      	cmp	r3, #0
 801d53c:	d103      	bne.n	801d546 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801d53e:	687b      	ldr	r3, [r7, #4]
 801d540:	2200      	movs	r2, #0
 801d542:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801d546:	687b      	ldr	r3, [r7, #4]
 801d548:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801d54c:	2bff      	cmp	r3, #255	; 0xff
 801d54e:	d007      	beq.n	801d560 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801d550:	687b      	ldr	r3, [r7, #4]
 801d552:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801d556:	3301      	adds	r3, #1
 801d558:	b2da      	uxtb	r2, r3
 801d55a:	687b      	ldr	r3, [r7, #4]
 801d55c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801d560:	687b      	ldr	r3, [r7, #4]
 801d562:	2200      	movs	r2, #0
 801d564:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801d566:	2300      	movs	r3, #0
}
 801d568:	4618      	mov	r0, r3
 801d56a:	3714      	adds	r7, #20
 801d56c:	46bd      	mov	sp, r7
 801d56e:	bd90      	pop	{r4, r7, pc}
 801d570:	08025cf4 	.word	0x08025cf4
 801d574:	08026394 	.word	0x08026394
 801d578:	08025d48 	.word	0x08025d48

0801d57c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801d57c:	b580      	push	{r7, lr}
 801d57e:	b082      	sub	sp, #8
 801d580:	af00      	add	r7, sp, #0
 801d582:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801d584:	687b      	ldr	r3, [r7, #4]
 801d586:	2b00      	cmp	r3, #0
 801d588:	d106      	bne.n	801d598 <tcp_rexmit_fast+0x1c>
 801d58a:	4b2a      	ldr	r3, [pc, #168]	; (801d634 <tcp_rexmit_fast+0xb8>)
 801d58c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801d590:	4929      	ldr	r1, [pc, #164]	; (801d638 <tcp_rexmit_fast+0xbc>)
 801d592:	482a      	ldr	r0, [pc, #168]	; (801d63c <tcp_rexmit_fast+0xc0>)
 801d594:	f003 ffc6 	bl	8021524 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801d598:	687b      	ldr	r3, [r7, #4]
 801d59a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d59c:	2b00      	cmp	r3, #0
 801d59e:	d045      	beq.n	801d62c <tcp_rexmit_fast+0xb0>
 801d5a0:	687b      	ldr	r3, [r7, #4]
 801d5a2:	8b5b      	ldrh	r3, [r3, #26]
 801d5a4:	f003 0304 	and.w	r3, r3, #4
 801d5a8:	2b00      	cmp	r3, #0
 801d5aa:	d13f      	bne.n	801d62c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801d5ac:	6878      	ldr	r0, [r7, #4]
 801d5ae:	f7ff ff79 	bl	801d4a4 <tcp_rexmit>
 801d5b2:	4603      	mov	r3, r0
 801d5b4:	2b00      	cmp	r3, #0
 801d5b6:	d139      	bne.n	801d62c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801d5b8:	687b      	ldr	r3, [r7, #4]
 801d5ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801d5be:	687b      	ldr	r3, [r7, #4]
 801d5c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801d5c4:	4293      	cmp	r3, r2
 801d5c6:	bf28      	it	cs
 801d5c8:	4613      	movcs	r3, r2
 801d5ca:	b29b      	uxth	r3, r3
 801d5cc:	2b00      	cmp	r3, #0
 801d5ce:	da00      	bge.n	801d5d2 <tcp_rexmit_fast+0x56>
 801d5d0:	3301      	adds	r3, #1
 801d5d2:	105b      	asrs	r3, r3, #1
 801d5d4:	b29a      	uxth	r2, r3
 801d5d6:	687b      	ldr	r3, [r7, #4]
 801d5d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801d5dc:	687b      	ldr	r3, [r7, #4]
 801d5de:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801d5e2:	461a      	mov	r2, r3
 801d5e4:	687b      	ldr	r3, [r7, #4]
 801d5e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d5e8:	005b      	lsls	r3, r3, #1
 801d5ea:	429a      	cmp	r2, r3
 801d5ec:	d206      	bcs.n	801d5fc <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801d5ee:	687b      	ldr	r3, [r7, #4]
 801d5f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d5f2:	005b      	lsls	r3, r3, #1
 801d5f4:	b29a      	uxth	r2, r3
 801d5f6:	687b      	ldr	r3, [r7, #4]
 801d5f8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801d5fc:	687b      	ldr	r3, [r7, #4]
 801d5fe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801d602:	687b      	ldr	r3, [r7, #4]
 801d604:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d606:	4619      	mov	r1, r3
 801d608:	0049      	lsls	r1, r1, #1
 801d60a:	440b      	add	r3, r1
 801d60c:	b29b      	uxth	r3, r3
 801d60e:	4413      	add	r3, r2
 801d610:	b29a      	uxth	r2, r3
 801d612:	687b      	ldr	r3, [r7, #4]
 801d614:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801d618:	687b      	ldr	r3, [r7, #4]
 801d61a:	8b5b      	ldrh	r3, [r3, #26]
 801d61c:	f043 0304 	orr.w	r3, r3, #4
 801d620:	b29a      	uxth	r2, r3
 801d622:	687b      	ldr	r3, [r7, #4]
 801d624:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801d626:	687b      	ldr	r3, [r7, #4]
 801d628:	2200      	movs	r2, #0
 801d62a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801d62c:	bf00      	nop
 801d62e:	3708      	adds	r7, #8
 801d630:	46bd      	mov	sp, r7
 801d632:	bd80      	pop	{r7, pc}
 801d634:	08025cf4 	.word	0x08025cf4
 801d638:	080263ac 	.word	0x080263ac
 801d63c:	08025d48 	.word	0x08025d48

0801d640 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801d640:	b580      	push	{r7, lr}
 801d642:	b086      	sub	sp, #24
 801d644:	af00      	add	r7, sp, #0
 801d646:	60f8      	str	r0, [r7, #12]
 801d648:	607b      	str	r3, [r7, #4]
 801d64a:	460b      	mov	r3, r1
 801d64c:	817b      	strh	r3, [r7, #10]
 801d64e:	4613      	mov	r3, r2
 801d650:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801d652:	897a      	ldrh	r2, [r7, #10]
 801d654:	893b      	ldrh	r3, [r7, #8]
 801d656:	4413      	add	r3, r2
 801d658:	b29b      	uxth	r3, r3
 801d65a:	3314      	adds	r3, #20
 801d65c:	b29b      	uxth	r3, r3
 801d65e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d662:	4619      	mov	r1, r3
 801d664:	2022      	movs	r0, #34	; 0x22
 801d666:	f7f9 fd13 	bl	8017090 <pbuf_alloc>
 801d66a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801d66c:	697b      	ldr	r3, [r7, #20]
 801d66e:	2b00      	cmp	r3, #0
 801d670:	d04d      	beq.n	801d70e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801d672:	897b      	ldrh	r3, [r7, #10]
 801d674:	3313      	adds	r3, #19
 801d676:	697a      	ldr	r2, [r7, #20]
 801d678:	8952      	ldrh	r2, [r2, #10]
 801d67a:	4293      	cmp	r3, r2
 801d67c:	db06      	blt.n	801d68c <tcp_output_alloc_header_common+0x4c>
 801d67e:	4b26      	ldr	r3, [pc, #152]	; (801d718 <tcp_output_alloc_header_common+0xd8>)
 801d680:	f240 7223 	movw	r2, #1827	; 0x723
 801d684:	4925      	ldr	r1, [pc, #148]	; (801d71c <tcp_output_alloc_header_common+0xdc>)
 801d686:	4826      	ldr	r0, [pc, #152]	; (801d720 <tcp_output_alloc_header_common+0xe0>)
 801d688:	f003 ff4c 	bl	8021524 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801d68c:	697b      	ldr	r3, [r7, #20]
 801d68e:	685b      	ldr	r3, [r3, #4]
 801d690:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801d692:	8c3b      	ldrh	r3, [r7, #32]
 801d694:	4618      	mov	r0, r3
 801d696:	f7f8 fb55 	bl	8015d44 <lwip_htons>
 801d69a:	4603      	mov	r3, r0
 801d69c:	461a      	mov	r2, r3
 801d69e:	693b      	ldr	r3, [r7, #16]
 801d6a0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801d6a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d6a4:	4618      	mov	r0, r3
 801d6a6:	f7f8 fb4d 	bl	8015d44 <lwip_htons>
 801d6aa:	4603      	mov	r3, r0
 801d6ac:	461a      	mov	r2, r3
 801d6ae:	693b      	ldr	r3, [r7, #16]
 801d6b0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801d6b2:	693b      	ldr	r3, [r7, #16]
 801d6b4:	687a      	ldr	r2, [r7, #4]
 801d6b6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801d6b8:	68f8      	ldr	r0, [r7, #12]
 801d6ba:	f7f8 fb58 	bl	8015d6e <lwip_htonl>
 801d6be:	4602      	mov	r2, r0
 801d6c0:	693b      	ldr	r3, [r7, #16]
 801d6c2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801d6c4:	897b      	ldrh	r3, [r7, #10]
 801d6c6:	089b      	lsrs	r3, r3, #2
 801d6c8:	b29b      	uxth	r3, r3
 801d6ca:	3305      	adds	r3, #5
 801d6cc:	b29b      	uxth	r3, r3
 801d6ce:	031b      	lsls	r3, r3, #12
 801d6d0:	b29a      	uxth	r2, r3
 801d6d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801d6d6:	b29b      	uxth	r3, r3
 801d6d8:	4313      	orrs	r3, r2
 801d6da:	b29b      	uxth	r3, r3
 801d6dc:	4618      	mov	r0, r3
 801d6de:	f7f8 fb31 	bl	8015d44 <lwip_htons>
 801d6e2:	4603      	mov	r3, r0
 801d6e4:	461a      	mov	r2, r3
 801d6e6:	693b      	ldr	r3, [r7, #16]
 801d6e8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801d6ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801d6ec:	4618      	mov	r0, r3
 801d6ee:	f7f8 fb29 	bl	8015d44 <lwip_htons>
 801d6f2:	4603      	mov	r3, r0
 801d6f4:	461a      	mov	r2, r3
 801d6f6:	693b      	ldr	r3, [r7, #16]
 801d6f8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801d6fa:	693b      	ldr	r3, [r7, #16]
 801d6fc:	2200      	movs	r2, #0
 801d6fe:	741a      	strb	r2, [r3, #16]
 801d700:	2200      	movs	r2, #0
 801d702:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801d704:	693b      	ldr	r3, [r7, #16]
 801d706:	2200      	movs	r2, #0
 801d708:	749a      	strb	r2, [r3, #18]
 801d70a:	2200      	movs	r2, #0
 801d70c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801d70e:	697b      	ldr	r3, [r7, #20]
}
 801d710:	4618      	mov	r0, r3
 801d712:	3718      	adds	r7, #24
 801d714:	46bd      	mov	sp, r7
 801d716:	bd80      	pop	{r7, pc}
 801d718:	08025cf4 	.word	0x08025cf4
 801d71c:	080263cc 	.word	0x080263cc
 801d720:	08025d48 	.word	0x08025d48

0801d724 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801d724:	b5b0      	push	{r4, r5, r7, lr}
 801d726:	b08a      	sub	sp, #40	; 0x28
 801d728:	af04      	add	r7, sp, #16
 801d72a:	60f8      	str	r0, [r7, #12]
 801d72c:	607b      	str	r3, [r7, #4]
 801d72e:	460b      	mov	r3, r1
 801d730:	817b      	strh	r3, [r7, #10]
 801d732:	4613      	mov	r3, r2
 801d734:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801d736:	68fb      	ldr	r3, [r7, #12]
 801d738:	2b00      	cmp	r3, #0
 801d73a:	d106      	bne.n	801d74a <tcp_output_alloc_header+0x26>
 801d73c:	4b15      	ldr	r3, [pc, #84]	; (801d794 <tcp_output_alloc_header+0x70>)
 801d73e:	f240 7242 	movw	r2, #1858	; 0x742
 801d742:	4915      	ldr	r1, [pc, #84]	; (801d798 <tcp_output_alloc_header+0x74>)
 801d744:	4815      	ldr	r0, [pc, #84]	; (801d79c <tcp_output_alloc_header+0x78>)
 801d746:	f003 feed 	bl	8021524 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801d74a:	68fb      	ldr	r3, [r7, #12]
 801d74c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801d74e:	68fb      	ldr	r3, [r7, #12]
 801d750:	8adb      	ldrh	r3, [r3, #22]
 801d752:	68fa      	ldr	r2, [r7, #12]
 801d754:	8b12      	ldrh	r2, [r2, #24]
 801d756:	68f9      	ldr	r1, [r7, #12]
 801d758:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801d75a:	893d      	ldrh	r5, [r7, #8]
 801d75c:	897c      	ldrh	r4, [r7, #10]
 801d75e:	9103      	str	r1, [sp, #12]
 801d760:	2110      	movs	r1, #16
 801d762:	9102      	str	r1, [sp, #8]
 801d764:	9201      	str	r2, [sp, #4]
 801d766:	9300      	str	r3, [sp, #0]
 801d768:	687b      	ldr	r3, [r7, #4]
 801d76a:	462a      	mov	r2, r5
 801d76c:	4621      	mov	r1, r4
 801d76e:	f7ff ff67 	bl	801d640 <tcp_output_alloc_header_common>
 801d772:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801d774:	697b      	ldr	r3, [r7, #20]
 801d776:	2b00      	cmp	r3, #0
 801d778:	d006      	beq.n	801d788 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801d77a:	68fb      	ldr	r3, [r7, #12]
 801d77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d77e:	68fa      	ldr	r2, [r7, #12]
 801d780:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801d782:	441a      	add	r2, r3
 801d784:	68fb      	ldr	r3, [r7, #12]
 801d786:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801d788:	697b      	ldr	r3, [r7, #20]
}
 801d78a:	4618      	mov	r0, r3
 801d78c:	3718      	adds	r7, #24
 801d78e:	46bd      	mov	sp, r7
 801d790:	bdb0      	pop	{r4, r5, r7, pc}
 801d792:	bf00      	nop
 801d794:	08025cf4 	.word	0x08025cf4
 801d798:	080263fc 	.word	0x080263fc
 801d79c:	08025d48 	.word	0x08025d48

0801d7a0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801d7a0:	b580      	push	{r7, lr}
 801d7a2:	b088      	sub	sp, #32
 801d7a4:	af00      	add	r7, sp, #0
 801d7a6:	60f8      	str	r0, [r7, #12]
 801d7a8:	60b9      	str	r1, [r7, #8]
 801d7aa:	4611      	mov	r1, r2
 801d7ac:	461a      	mov	r2, r3
 801d7ae:	460b      	mov	r3, r1
 801d7b0:	71fb      	strb	r3, [r7, #7]
 801d7b2:	4613      	mov	r3, r2
 801d7b4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801d7b6:	2300      	movs	r3, #0
 801d7b8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801d7ba:	68bb      	ldr	r3, [r7, #8]
 801d7bc:	2b00      	cmp	r3, #0
 801d7be:	d106      	bne.n	801d7ce <tcp_output_fill_options+0x2e>
 801d7c0:	4b13      	ldr	r3, [pc, #76]	; (801d810 <tcp_output_fill_options+0x70>)
 801d7c2:	f240 7256 	movw	r2, #1878	; 0x756
 801d7c6:	4913      	ldr	r1, [pc, #76]	; (801d814 <tcp_output_fill_options+0x74>)
 801d7c8:	4813      	ldr	r0, [pc, #76]	; (801d818 <tcp_output_fill_options+0x78>)
 801d7ca:	f003 feab 	bl	8021524 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801d7ce:	68bb      	ldr	r3, [r7, #8]
 801d7d0:	685b      	ldr	r3, [r3, #4]
 801d7d2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801d7d4:	69bb      	ldr	r3, [r7, #24]
 801d7d6:	3314      	adds	r3, #20
 801d7d8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801d7da:	69bb      	ldr	r3, [r7, #24]
 801d7dc:	f103 0214 	add.w	r2, r3, #20
 801d7e0:	8bfb      	ldrh	r3, [r7, #30]
 801d7e2:	009b      	lsls	r3, r3, #2
 801d7e4:	4619      	mov	r1, r3
 801d7e6:	79fb      	ldrb	r3, [r7, #7]
 801d7e8:	009b      	lsls	r3, r3, #2
 801d7ea:	f003 0304 	and.w	r3, r3, #4
 801d7ee:	440b      	add	r3, r1
 801d7f0:	4413      	add	r3, r2
 801d7f2:	697a      	ldr	r2, [r7, #20]
 801d7f4:	429a      	cmp	r2, r3
 801d7f6:	d006      	beq.n	801d806 <tcp_output_fill_options+0x66>
 801d7f8:	4b05      	ldr	r3, [pc, #20]	; (801d810 <tcp_output_fill_options+0x70>)
 801d7fa:	f240 7275 	movw	r2, #1909	; 0x775
 801d7fe:	4907      	ldr	r1, [pc, #28]	; (801d81c <tcp_output_fill_options+0x7c>)
 801d800:	4805      	ldr	r0, [pc, #20]	; (801d818 <tcp_output_fill_options+0x78>)
 801d802:	f003 fe8f 	bl	8021524 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801d806:	bf00      	nop
 801d808:	3720      	adds	r7, #32
 801d80a:	46bd      	mov	sp, r7
 801d80c:	bd80      	pop	{r7, pc}
 801d80e:	bf00      	nop
 801d810:	08025cf4 	.word	0x08025cf4
 801d814:	08026424 	.word	0x08026424
 801d818:	08025d48 	.word	0x08025d48
 801d81c:	0802631c 	.word	0x0802631c

0801d820 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801d820:	b580      	push	{r7, lr}
 801d822:	b08a      	sub	sp, #40	; 0x28
 801d824:	af04      	add	r7, sp, #16
 801d826:	60f8      	str	r0, [r7, #12]
 801d828:	60b9      	str	r1, [r7, #8]
 801d82a:	607a      	str	r2, [r7, #4]
 801d82c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801d82e:	68bb      	ldr	r3, [r7, #8]
 801d830:	2b00      	cmp	r3, #0
 801d832:	d106      	bne.n	801d842 <tcp_output_control_segment+0x22>
 801d834:	4b1c      	ldr	r3, [pc, #112]	; (801d8a8 <tcp_output_control_segment+0x88>)
 801d836:	f240 7287 	movw	r2, #1927	; 0x787
 801d83a:	491c      	ldr	r1, [pc, #112]	; (801d8ac <tcp_output_control_segment+0x8c>)
 801d83c:	481c      	ldr	r0, [pc, #112]	; (801d8b0 <tcp_output_control_segment+0x90>)
 801d83e:	f003 fe71 	bl	8021524 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801d842:	683a      	ldr	r2, [r7, #0]
 801d844:	6879      	ldr	r1, [r7, #4]
 801d846:	68f8      	ldr	r0, [r7, #12]
 801d848:	f7fe fae8 	bl	801be1c <tcp_route>
 801d84c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801d84e:	693b      	ldr	r3, [r7, #16]
 801d850:	2b00      	cmp	r3, #0
 801d852:	d102      	bne.n	801d85a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801d854:	23fc      	movs	r3, #252	; 0xfc
 801d856:	75fb      	strb	r3, [r7, #23]
 801d858:	e01c      	b.n	801d894 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801d85a:	68fb      	ldr	r3, [r7, #12]
 801d85c:	2b00      	cmp	r3, #0
 801d85e:	d006      	beq.n	801d86e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801d860:	68fb      	ldr	r3, [r7, #12]
 801d862:	7adb      	ldrb	r3, [r3, #11]
 801d864:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801d866:	68fb      	ldr	r3, [r7, #12]
 801d868:	7a9b      	ldrb	r3, [r3, #10]
 801d86a:	757b      	strb	r3, [r7, #21]
 801d86c:	e003      	b.n	801d876 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801d86e:	23ff      	movs	r3, #255	; 0xff
 801d870:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801d872:	2300      	movs	r3, #0
 801d874:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801d876:	7dba      	ldrb	r2, [r7, #22]
 801d878:	693b      	ldr	r3, [r7, #16]
 801d87a:	9302      	str	r3, [sp, #8]
 801d87c:	2306      	movs	r3, #6
 801d87e:	9301      	str	r3, [sp, #4]
 801d880:	7d7b      	ldrb	r3, [r7, #21]
 801d882:	9300      	str	r3, [sp, #0]
 801d884:	4613      	mov	r3, r2
 801d886:	683a      	ldr	r2, [r7, #0]
 801d888:	6879      	ldr	r1, [r7, #4]
 801d88a:	68b8      	ldr	r0, [r7, #8]
 801d88c:	f001 ffa0 	bl	801f7d0 <ip4_output_if>
 801d890:	4603      	mov	r3, r0
 801d892:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801d894:	68b8      	ldr	r0, [r7, #8]
 801d896:	f7f9 fedf 	bl	8017658 <pbuf_free>
  return err;
 801d89a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801d89e:	4618      	mov	r0, r3
 801d8a0:	3718      	adds	r7, #24
 801d8a2:	46bd      	mov	sp, r7
 801d8a4:	bd80      	pop	{r7, pc}
 801d8a6:	bf00      	nop
 801d8a8:	08025cf4 	.word	0x08025cf4
 801d8ac:	0802644c 	.word	0x0802644c
 801d8b0:	08025d48 	.word	0x08025d48

0801d8b4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801d8b4:	b590      	push	{r4, r7, lr}
 801d8b6:	b08b      	sub	sp, #44	; 0x2c
 801d8b8:	af04      	add	r7, sp, #16
 801d8ba:	60f8      	str	r0, [r7, #12]
 801d8bc:	60b9      	str	r1, [r7, #8]
 801d8be:	607a      	str	r2, [r7, #4]
 801d8c0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801d8c2:	683b      	ldr	r3, [r7, #0]
 801d8c4:	2b00      	cmp	r3, #0
 801d8c6:	d106      	bne.n	801d8d6 <tcp_rst+0x22>
 801d8c8:	4b1f      	ldr	r3, [pc, #124]	; (801d948 <tcp_rst+0x94>)
 801d8ca:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801d8ce:	491f      	ldr	r1, [pc, #124]	; (801d94c <tcp_rst+0x98>)
 801d8d0:	481f      	ldr	r0, [pc, #124]	; (801d950 <tcp_rst+0x9c>)
 801d8d2:	f003 fe27 	bl	8021524 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801d8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d8d8:	2b00      	cmp	r3, #0
 801d8da:	d106      	bne.n	801d8ea <tcp_rst+0x36>
 801d8dc:	4b1a      	ldr	r3, [pc, #104]	; (801d948 <tcp_rst+0x94>)
 801d8de:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801d8e2:	491c      	ldr	r1, [pc, #112]	; (801d954 <tcp_rst+0xa0>)
 801d8e4:	481a      	ldr	r0, [pc, #104]	; (801d950 <tcp_rst+0x9c>)
 801d8e6:	f003 fe1d 	bl	8021524 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801d8ea:	2300      	movs	r3, #0
 801d8ec:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801d8ee:	f246 0308 	movw	r3, #24584	; 0x6008
 801d8f2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801d8f4:	7dfb      	ldrb	r3, [r7, #23]
 801d8f6:	b29c      	uxth	r4, r3
 801d8f8:	68b8      	ldr	r0, [r7, #8]
 801d8fa:	f7f8 fa38 	bl	8015d6e <lwip_htonl>
 801d8fe:	4602      	mov	r2, r0
 801d900:	8abb      	ldrh	r3, [r7, #20]
 801d902:	9303      	str	r3, [sp, #12]
 801d904:	2314      	movs	r3, #20
 801d906:	9302      	str	r3, [sp, #8]
 801d908:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801d90a:	9301      	str	r3, [sp, #4]
 801d90c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801d90e:	9300      	str	r3, [sp, #0]
 801d910:	4613      	mov	r3, r2
 801d912:	2200      	movs	r2, #0
 801d914:	4621      	mov	r1, r4
 801d916:	6878      	ldr	r0, [r7, #4]
 801d918:	f7ff fe92 	bl	801d640 <tcp_output_alloc_header_common>
 801d91c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801d91e:	693b      	ldr	r3, [r7, #16]
 801d920:	2b00      	cmp	r3, #0
 801d922:	d00c      	beq.n	801d93e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801d924:	7dfb      	ldrb	r3, [r7, #23]
 801d926:	2200      	movs	r2, #0
 801d928:	6939      	ldr	r1, [r7, #16]
 801d92a:	68f8      	ldr	r0, [r7, #12]
 801d92c:	f7ff ff38 	bl	801d7a0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801d930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d932:	683a      	ldr	r2, [r7, #0]
 801d934:	6939      	ldr	r1, [r7, #16]
 801d936:	68f8      	ldr	r0, [r7, #12]
 801d938:	f7ff ff72 	bl	801d820 <tcp_output_control_segment>
 801d93c:	e000      	b.n	801d940 <tcp_rst+0x8c>
    return;
 801d93e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801d940:	371c      	adds	r7, #28
 801d942:	46bd      	mov	sp, r7
 801d944:	bd90      	pop	{r4, r7, pc}
 801d946:	bf00      	nop
 801d948:	08025cf4 	.word	0x08025cf4
 801d94c:	08026478 	.word	0x08026478
 801d950:	08025d48 	.word	0x08025d48
 801d954:	08026494 	.word	0x08026494

0801d958 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801d958:	b590      	push	{r4, r7, lr}
 801d95a:	b087      	sub	sp, #28
 801d95c:	af00      	add	r7, sp, #0
 801d95e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801d960:	2300      	movs	r3, #0
 801d962:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801d964:	2300      	movs	r3, #0
 801d966:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801d968:	687b      	ldr	r3, [r7, #4]
 801d96a:	2b00      	cmp	r3, #0
 801d96c:	d106      	bne.n	801d97c <tcp_send_empty_ack+0x24>
 801d96e:	4b28      	ldr	r3, [pc, #160]	; (801da10 <tcp_send_empty_ack+0xb8>)
 801d970:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801d974:	4927      	ldr	r1, [pc, #156]	; (801da14 <tcp_send_empty_ack+0xbc>)
 801d976:	4828      	ldr	r0, [pc, #160]	; (801da18 <tcp_send_empty_ack+0xc0>)
 801d978:	f003 fdd4 	bl	8021524 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801d97c:	7dfb      	ldrb	r3, [r7, #23]
 801d97e:	009b      	lsls	r3, r3, #2
 801d980:	b2db      	uxtb	r3, r3
 801d982:	f003 0304 	and.w	r3, r3, #4
 801d986:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801d988:	7d7b      	ldrb	r3, [r7, #21]
 801d98a:	b29c      	uxth	r4, r3
 801d98c:	687b      	ldr	r3, [r7, #4]
 801d98e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d990:	4618      	mov	r0, r3
 801d992:	f7f8 f9ec 	bl	8015d6e <lwip_htonl>
 801d996:	4603      	mov	r3, r0
 801d998:	2200      	movs	r2, #0
 801d99a:	4621      	mov	r1, r4
 801d99c:	6878      	ldr	r0, [r7, #4]
 801d99e:	f7ff fec1 	bl	801d724 <tcp_output_alloc_header>
 801d9a2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801d9a4:	693b      	ldr	r3, [r7, #16]
 801d9a6:	2b00      	cmp	r3, #0
 801d9a8:	d109      	bne.n	801d9be <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801d9aa:	687b      	ldr	r3, [r7, #4]
 801d9ac:	8b5b      	ldrh	r3, [r3, #26]
 801d9ae:	f043 0303 	orr.w	r3, r3, #3
 801d9b2:	b29a      	uxth	r2, r3
 801d9b4:	687b      	ldr	r3, [r7, #4]
 801d9b6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801d9b8:	f06f 0301 	mvn.w	r3, #1
 801d9bc:	e023      	b.n	801da06 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801d9be:	7dbb      	ldrb	r3, [r7, #22]
 801d9c0:	7dfa      	ldrb	r2, [r7, #23]
 801d9c2:	6939      	ldr	r1, [r7, #16]
 801d9c4:	6878      	ldr	r0, [r7, #4]
 801d9c6:	f7ff feeb 	bl	801d7a0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801d9ca:	687a      	ldr	r2, [r7, #4]
 801d9cc:	687b      	ldr	r3, [r7, #4]
 801d9ce:	3304      	adds	r3, #4
 801d9d0:	6939      	ldr	r1, [r7, #16]
 801d9d2:	6878      	ldr	r0, [r7, #4]
 801d9d4:	f7ff ff24 	bl	801d820 <tcp_output_control_segment>
 801d9d8:	4603      	mov	r3, r0
 801d9da:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801d9dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d9e0:	2b00      	cmp	r3, #0
 801d9e2:	d007      	beq.n	801d9f4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801d9e4:	687b      	ldr	r3, [r7, #4]
 801d9e6:	8b5b      	ldrh	r3, [r3, #26]
 801d9e8:	f043 0303 	orr.w	r3, r3, #3
 801d9ec:	b29a      	uxth	r2, r3
 801d9ee:	687b      	ldr	r3, [r7, #4]
 801d9f0:	835a      	strh	r2, [r3, #26]
 801d9f2:	e006      	b.n	801da02 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801d9f4:	687b      	ldr	r3, [r7, #4]
 801d9f6:	8b5b      	ldrh	r3, [r3, #26]
 801d9f8:	f023 0303 	bic.w	r3, r3, #3
 801d9fc:	b29a      	uxth	r2, r3
 801d9fe:	687b      	ldr	r3, [r7, #4]
 801da00:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801da02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801da06:	4618      	mov	r0, r3
 801da08:	371c      	adds	r7, #28
 801da0a:	46bd      	mov	sp, r7
 801da0c:	bd90      	pop	{r4, r7, pc}
 801da0e:	bf00      	nop
 801da10:	08025cf4 	.word	0x08025cf4
 801da14:	080264b0 	.word	0x080264b0
 801da18:	08025d48 	.word	0x08025d48

0801da1c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801da1c:	b590      	push	{r4, r7, lr}
 801da1e:	b087      	sub	sp, #28
 801da20:	af00      	add	r7, sp, #0
 801da22:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801da24:	2300      	movs	r3, #0
 801da26:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801da28:	687b      	ldr	r3, [r7, #4]
 801da2a:	2b00      	cmp	r3, #0
 801da2c:	d106      	bne.n	801da3c <tcp_keepalive+0x20>
 801da2e:	4b18      	ldr	r3, [pc, #96]	; (801da90 <tcp_keepalive+0x74>)
 801da30:	f640 0224 	movw	r2, #2084	; 0x824
 801da34:	4917      	ldr	r1, [pc, #92]	; (801da94 <tcp_keepalive+0x78>)
 801da36:	4818      	ldr	r0, [pc, #96]	; (801da98 <tcp_keepalive+0x7c>)
 801da38:	f003 fd74 	bl	8021524 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801da3c:	7dfb      	ldrb	r3, [r7, #23]
 801da3e:	b29c      	uxth	r4, r3
 801da40:	687b      	ldr	r3, [r7, #4]
 801da42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801da44:	3b01      	subs	r3, #1
 801da46:	4618      	mov	r0, r3
 801da48:	f7f8 f991 	bl	8015d6e <lwip_htonl>
 801da4c:	4603      	mov	r3, r0
 801da4e:	2200      	movs	r2, #0
 801da50:	4621      	mov	r1, r4
 801da52:	6878      	ldr	r0, [r7, #4]
 801da54:	f7ff fe66 	bl	801d724 <tcp_output_alloc_header>
 801da58:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801da5a:	693b      	ldr	r3, [r7, #16]
 801da5c:	2b00      	cmp	r3, #0
 801da5e:	d102      	bne.n	801da66 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801da60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801da64:	e010      	b.n	801da88 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801da66:	7dfb      	ldrb	r3, [r7, #23]
 801da68:	2200      	movs	r2, #0
 801da6a:	6939      	ldr	r1, [r7, #16]
 801da6c:	6878      	ldr	r0, [r7, #4]
 801da6e:	f7ff fe97 	bl	801d7a0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801da72:	687a      	ldr	r2, [r7, #4]
 801da74:	687b      	ldr	r3, [r7, #4]
 801da76:	3304      	adds	r3, #4
 801da78:	6939      	ldr	r1, [r7, #16]
 801da7a:	6878      	ldr	r0, [r7, #4]
 801da7c:	f7ff fed0 	bl	801d820 <tcp_output_control_segment>
 801da80:	4603      	mov	r3, r0
 801da82:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801da84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801da88:	4618      	mov	r0, r3
 801da8a:	371c      	adds	r7, #28
 801da8c:	46bd      	mov	sp, r7
 801da8e:	bd90      	pop	{r4, r7, pc}
 801da90:	08025cf4 	.word	0x08025cf4
 801da94:	080264d0 	.word	0x080264d0
 801da98:	08025d48 	.word	0x08025d48

0801da9c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801da9c:	b590      	push	{r4, r7, lr}
 801da9e:	b08b      	sub	sp, #44	; 0x2c
 801daa0:	af00      	add	r7, sp, #0
 801daa2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801daa4:	2300      	movs	r3, #0
 801daa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801daaa:	687b      	ldr	r3, [r7, #4]
 801daac:	2b00      	cmp	r3, #0
 801daae:	d106      	bne.n	801dabe <tcp_zero_window_probe+0x22>
 801dab0:	4b4c      	ldr	r3, [pc, #304]	; (801dbe4 <tcp_zero_window_probe+0x148>)
 801dab2:	f640 024f 	movw	r2, #2127	; 0x84f
 801dab6:	494c      	ldr	r1, [pc, #304]	; (801dbe8 <tcp_zero_window_probe+0x14c>)
 801dab8:	484c      	ldr	r0, [pc, #304]	; (801dbec <tcp_zero_window_probe+0x150>)
 801daba:	f003 fd33 	bl	8021524 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801dabe:	687b      	ldr	r3, [r7, #4]
 801dac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dac2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801dac4:	6a3b      	ldr	r3, [r7, #32]
 801dac6:	2b00      	cmp	r3, #0
 801dac8:	d101      	bne.n	801dace <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801daca:	2300      	movs	r3, #0
 801dacc:	e086      	b.n	801dbdc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801dace:	687b      	ldr	r3, [r7, #4]
 801dad0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801dad4:	2bff      	cmp	r3, #255	; 0xff
 801dad6:	d007      	beq.n	801dae8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801dad8:	687b      	ldr	r3, [r7, #4]
 801dada:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801dade:	3301      	adds	r3, #1
 801dae0:	b2da      	uxtb	r2, r3
 801dae2:	687b      	ldr	r3, [r7, #4]
 801dae4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801dae8:	6a3b      	ldr	r3, [r7, #32]
 801daea:	68db      	ldr	r3, [r3, #12]
 801daec:	899b      	ldrh	r3, [r3, #12]
 801daee:	b29b      	uxth	r3, r3
 801daf0:	4618      	mov	r0, r3
 801daf2:	f7f8 f927 	bl	8015d44 <lwip_htons>
 801daf6:	4603      	mov	r3, r0
 801daf8:	b2db      	uxtb	r3, r3
 801dafa:	f003 0301 	and.w	r3, r3, #1
 801dafe:	2b00      	cmp	r3, #0
 801db00:	d005      	beq.n	801db0e <tcp_zero_window_probe+0x72>
 801db02:	6a3b      	ldr	r3, [r7, #32]
 801db04:	891b      	ldrh	r3, [r3, #8]
 801db06:	2b00      	cmp	r3, #0
 801db08:	d101      	bne.n	801db0e <tcp_zero_window_probe+0x72>
 801db0a:	2301      	movs	r3, #1
 801db0c:	e000      	b.n	801db10 <tcp_zero_window_probe+0x74>
 801db0e:	2300      	movs	r3, #0
 801db10:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801db12:	7ffb      	ldrb	r3, [r7, #31]
 801db14:	2b00      	cmp	r3, #0
 801db16:	bf0c      	ite	eq
 801db18:	2301      	moveq	r3, #1
 801db1a:	2300      	movne	r3, #0
 801db1c:	b2db      	uxtb	r3, r3
 801db1e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801db20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801db24:	b299      	uxth	r1, r3
 801db26:	6a3b      	ldr	r3, [r7, #32]
 801db28:	68db      	ldr	r3, [r3, #12]
 801db2a:	685b      	ldr	r3, [r3, #4]
 801db2c:	8bba      	ldrh	r2, [r7, #28]
 801db2e:	6878      	ldr	r0, [r7, #4]
 801db30:	f7ff fdf8 	bl	801d724 <tcp_output_alloc_header>
 801db34:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801db36:	69bb      	ldr	r3, [r7, #24]
 801db38:	2b00      	cmp	r3, #0
 801db3a:	d102      	bne.n	801db42 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801db3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801db40:	e04c      	b.n	801dbdc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801db42:	69bb      	ldr	r3, [r7, #24]
 801db44:	685b      	ldr	r3, [r3, #4]
 801db46:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801db48:	7ffb      	ldrb	r3, [r7, #31]
 801db4a:	2b00      	cmp	r3, #0
 801db4c:	d011      	beq.n	801db72 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801db4e:	697b      	ldr	r3, [r7, #20]
 801db50:	899b      	ldrh	r3, [r3, #12]
 801db52:	b29b      	uxth	r3, r3
 801db54:	b21b      	sxth	r3, r3
 801db56:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801db5a:	b21c      	sxth	r4, r3
 801db5c:	2011      	movs	r0, #17
 801db5e:	f7f8 f8f1 	bl	8015d44 <lwip_htons>
 801db62:	4603      	mov	r3, r0
 801db64:	b21b      	sxth	r3, r3
 801db66:	4323      	orrs	r3, r4
 801db68:	b21b      	sxth	r3, r3
 801db6a:	b29a      	uxth	r2, r3
 801db6c:	697b      	ldr	r3, [r7, #20]
 801db6e:	819a      	strh	r2, [r3, #12]
 801db70:	e010      	b.n	801db94 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801db72:	69bb      	ldr	r3, [r7, #24]
 801db74:	685b      	ldr	r3, [r3, #4]
 801db76:	3314      	adds	r3, #20
 801db78:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801db7a:	6a3b      	ldr	r3, [r7, #32]
 801db7c:	6858      	ldr	r0, [r3, #4]
 801db7e:	6a3b      	ldr	r3, [r7, #32]
 801db80:	685b      	ldr	r3, [r3, #4]
 801db82:	891a      	ldrh	r2, [r3, #8]
 801db84:	6a3b      	ldr	r3, [r7, #32]
 801db86:	891b      	ldrh	r3, [r3, #8]
 801db88:	1ad3      	subs	r3, r2, r3
 801db8a:	b29b      	uxth	r3, r3
 801db8c:	2201      	movs	r2, #1
 801db8e:	6939      	ldr	r1, [r7, #16]
 801db90:	f7f9 ff58 	bl	8017a44 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801db94:	6a3b      	ldr	r3, [r7, #32]
 801db96:	68db      	ldr	r3, [r3, #12]
 801db98:	685b      	ldr	r3, [r3, #4]
 801db9a:	4618      	mov	r0, r3
 801db9c:	f7f8 f8e7 	bl	8015d6e <lwip_htonl>
 801dba0:	4603      	mov	r3, r0
 801dba2:	3301      	adds	r3, #1
 801dba4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801dba6:	687b      	ldr	r3, [r7, #4]
 801dba8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801dbaa:	68fb      	ldr	r3, [r7, #12]
 801dbac:	1ad3      	subs	r3, r2, r3
 801dbae:	2b00      	cmp	r3, #0
 801dbb0:	da02      	bge.n	801dbb8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801dbb2:	687b      	ldr	r3, [r7, #4]
 801dbb4:	68fa      	ldr	r2, [r7, #12]
 801dbb6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801dbb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801dbbc:	2200      	movs	r2, #0
 801dbbe:	69b9      	ldr	r1, [r7, #24]
 801dbc0:	6878      	ldr	r0, [r7, #4]
 801dbc2:	f7ff fded 	bl	801d7a0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801dbc6:	687a      	ldr	r2, [r7, #4]
 801dbc8:	687b      	ldr	r3, [r7, #4]
 801dbca:	3304      	adds	r3, #4
 801dbcc:	69b9      	ldr	r1, [r7, #24]
 801dbce:	6878      	ldr	r0, [r7, #4]
 801dbd0:	f7ff fe26 	bl	801d820 <tcp_output_control_segment>
 801dbd4:	4603      	mov	r3, r0
 801dbd6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801dbd8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801dbdc:	4618      	mov	r0, r3
 801dbde:	372c      	adds	r7, #44	; 0x2c
 801dbe0:	46bd      	mov	sp, r7
 801dbe2:	bd90      	pop	{r4, r7, pc}
 801dbe4:	08025cf4 	.word	0x08025cf4
 801dbe8:	080264ec 	.word	0x080264ec
 801dbec:	08025d48 	.word	0x08025d48

0801dbf0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801dbf0:	b580      	push	{r7, lr}
 801dbf2:	b082      	sub	sp, #8
 801dbf4:	af00      	add	r7, sp, #0
 801dbf6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801dbf8:	f7fa f812 	bl	8017c20 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801dbfc:	4b0a      	ldr	r3, [pc, #40]	; (801dc28 <tcpip_tcp_timer+0x38>)
 801dbfe:	681b      	ldr	r3, [r3, #0]
 801dc00:	2b00      	cmp	r3, #0
 801dc02:	d103      	bne.n	801dc0c <tcpip_tcp_timer+0x1c>
 801dc04:	4b09      	ldr	r3, [pc, #36]	; (801dc2c <tcpip_tcp_timer+0x3c>)
 801dc06:	681b      	ldr	r3, [r3, #0]
 801dc08:	2b00      	cmp	r3, #0
 801dc0a:	d005      	beq.n	801dc18 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801dc0c:	2200      	movs	r2, #0
 801dc0e:	4908      	ldr	r1, [pc, #32]	; (801dc30 <tcpip_tcp_timer+0x40>)
 801dc10:	20fa      	movs	r0, #250	; 0xfa
 801dc12:	f000 f8f3 	bl	801ddfc <sys_timeout>
 801dc16:	e003      	b.n	801dc20 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801dc18:	4b06      	ldr	r3, [pc, #24]	; (801dc34 <tcpip_tcp_timer+0x44>)
 801dc1a:	2200      	movs	r2, #0
 801dc1c:	601a      	str	r2, [r3, #0]
  }
}
 801dc1e:	bf00      	nop
 801dc20:	bf00      	nop
 801dc22:	3708      	adds	r7, #8
 801dc24:	46bd      	mov	sp, r7
 801dc26:	bd80      	pop	{r7, pc}
 801dc28:	2001b990 	.word	0x2001b990
 801dc2c:	2001b9a0 	.word	0x2001b9a0
 801dc30:	0801dbf1 	.word	0x0801dbf1
 801dc34:	2000531c 	.word	0x2000531c

0801dc38 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801dc38:	b580      	push	{r7, lr}
 801dc3a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801dc3c:	4b0a      	ldr	r3, [pc, #40]	; (801dc68 <tcp_timer_needed+0x30>)
 801dc3e:	681b      	ldr	r3, [r3, #0]
 801dc40:	2b00      	cmp	r3, #0
 801dc42:	d10f      	bne.n	801dc64 <tcp_timer_needed+0x2c>
 801dc44:	4b09      	ldr	r3, [pc, #36]	; (801dc6c <tcp_timer_needed+0x34>)
 801dc46:	681b      	ldr	r3, [r3, #0]
 801dc48:	2b00      	cmp	r3, #0
 801dc4a:	d103      	bne.n	801dc54 <tcp_timer_needed+0x1c>
 801dc4c:	4b08      	ldr	r3, [pc, #32]	; (801dc70 <tcp_timer_needed+0x38>)
 801dc4e:	681b      	ldr	r3, [r3, #0]
 801dc50:	2b00      	cmp	r3, #0
 801dc52:	d007      	beq.n	801dc64 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801dc54:	4b04      	ldr	r3, [pc, #16]	; (801dc68 <tcp_timer_needed+0x30>)
 801dc56:	2201      	movs	r2, #1
 801dc58:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801dc5a:	2200      	movs	r2, #0
 801dc5c:	4905      	ldr	r1, [pc, #20]	; (801dc74 <tcp_timer_needed+0x3c>)
 801dc5e:	20fa      	movs	r0, #250	; 0xfa
 801dc60:	f000 f8cc 	bl	801ddfc <sys_timeout>
  }
}
 801dc64:	bf00      	nop
 801dc66:	bd80      	pop	{r7, pc}
 801dc68:	2000531c 	.word	0x2000531c
 801dc6c:	2001b990 	.word	0x2001b990
 801dc70:	2001b9a0 	.word	0x2001b9a0
 801dc74:	0801dbf1 	.word	0x0801dbf1

0801dc78 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801dc78:	b580      	push	{r7, lr}
 801dc7a:	b086      	sub	sp, #24
 801dc7c:	af00      	add	r7, sp, #0
 801dc7e:	60f8      	str	r0, [r7, #12]
 801dc80:	60b9      	str	r1, [r7, #8]
 801dc82:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801dc84:	200a      	movs	r0, #10
 801dc86:	f7f8 fdf1 	bl	801686c <memp_malloc>
 801dc8a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801dc8c:	693b      	ldr	r3, [r7, #16]
 801dc8e:	2b00      	cmp	r3, #0
 801dc90:	d109      	bne.n	801dca6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801dc92:	693b      	ldr	r3, [r7, #16]
 801dc94:	2b00      	cmp	r3, #0
 801dc96:	d151      	bne.n	801dd3c <sys_timeout_abs+0xc4>
 801dc98:	4b2a      	ldr	r3, [pc, #168]	; (801dd44 <sys_timeout_abs+0xcc>)
 801dc9a:	22be      	movs	r2, #190	; 0xbe
 801dc9c:	492a      	ldr	r1, [pc, #168]	; (801dd48 <sys_timeout_abs+0xd0>)
 801dc9e:	482b      	ldr	r0, [pc, #172]	; (801dd4c <sys_timeout_abs+0xd4>)
 801dca0:	f003 fc40 	bl	8021524 <iprintf>
    return;
 801dca4:	e04a      	b.n	801dd3c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801dca6:	693b      	ldr	r3, [r7, #16]
 801dca8:	2200      	movs	r2, #0
 801dcaa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801dcac:	693b      	ldr	r3, [r7, #16]
 801dcae:	68ba      	ldr	r2, [r7, #8]
 801dcb0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801dcb2:	693b      	ldr	r3, [r7, #16]
 801dcb4:	687a      	ldr	r2, [r7, #4]
 801dcb6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801dcb8:	693b      	ldr	r3, [r7, #16]
 801dcba:	68fa      	ldr	r2, [r7, #12]
 801dcbc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801dcbe:	4b24      	ldr	r3, [pc, #144]	; (801dd50 <sys_timeout_abs+0xd8>)
 801dcc0:	681b      	ldr	r3, [r3, #0]
 801dcc2:	2b00      	cmp	r3, #0
 801dcc4:	d103      	bne.n	801dcce <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801dcc6:	4a22      	ldr	r2, [pc, #136]	; (801dd50 <sys_timeout_abs+0xd8>)
 801dcc8:	693b      	ldr	r3, [r7, #16]
 801dcca:	6013      	str	r3, [r2, #0]
    return;
 801dccc:	e037      	b.n	801dd3e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801dcce:	693b      	ldr	r3, [r7, #16]
 801dcd0:	685a      	ldr	r2, [r3, #4]
 801dcd2:	4b1f      	ldr	r3, [pc, #124]	; (801dd50 <sys_timeout_abs+0xd8>)
 801dcd4:	681b      	ldr	r3, [r3, #0]
 801dcd6:	685b      	ldr	r3, [r3, #4]
 801dcd8:	1ad3      	subs	r3, r2, r3
 801dcda:	0fdb      	lsrs	r3, r3, #31
 801dcdc:	f003 0301 	and.w	r3, r3, #1
 801dce0:	b2db      	uxtb	r3, r3
 801dce2:	2b00      	cmp	r3, #0
 801dce4:	d007      	beq.n	801dcf6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801dce6:	4b1a      	ldr	r3, [pc, #104]	; (801dd50 <sys_timeout_abs+0xd8>)
 801dce8:	681a      	ldr	r2, [r3, #0]
 801dcea:	693b      	ldr	r3, [r7, #16]
 801dcec:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801dcee:	4a18      	ldr	r2, [pc, #96]	; (801dd50 <sys_timeout_abs+0xd8>)
 801dcf0:	693b      	ldr	r3, [r7, #16]
 801dcf2:	6013      	str	r3, [r2, #0]
 801dcf4:	e023      	b.n	801dd3e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801dcf6:	4b16      	ldr	r3, [pc, #88]	; (801dd50 <sys_timeout_abs+0xd8>)
 801dcf8:	681b      	ldr	r3, [r3, #0]
 801dcfa:	617b      	str	r3, [r7, #20]
 801dcfc:	e01a      	b.n	801dd34 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801dcfe:	697b      	ldr	r3, [r7, #20]
 801dd00:	681b      	ldr	r3, [r3, #0]
 801dd02:	2b00      	cmp	r3, #0
 801dd04:	d00b      	beq.n	801dd1e <sys_timeout_abs+0xa6>
 801dd06:	693b      	ldr	r3, [r7, #16]
 801dd08:	685a      	ldr	r2, [r3, #4]
 801dd0a:	697b      	ldr	r3, [r7, #20]
 801dd0c:	681b      	ldr	r3, [r3, #0]
 801dd0e:	685b      	ldr	r3, [r3, #4]
 801dd10:	1ad3      	subs	r3, r2, r3
 801dd12:	0fdb      	lsrs	r3, r3, #31
 801dd14:	f003 0301 	and.w	r3, r3, #1
 801dd18:	b2db      	uxtb	r3, r3
 801dd1a:	2b00      	cmp	r3, #0
 801dd1c:	d007      	beq.n	801dd2e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801dd1e:	697b      	ldr	r3, [r7, #20]
 801dd20:	681a      	ldr	r2, [r3, #0]
 801dd22:	693b      	ldr	r3, [r7, #16]
 801dd24:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801dd26:	697b      	ldr	r3, [r7, #20]
 801dd28:	693a      	ldr	r2, [r7, #16]
 801dd2a:	601a      	str	r2, [r3, #0]
        break;
 801dd2c:	e007      	b.n	801dd3e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801dd2e:	697b      	ldr	r3, [r7, #20]
 801dd30:	681b      	ldr	r3, [r3, #0]
 801dd32:	617b      	str	r3, [r7, #20]
 801dd34:	697b      	ldr	r3, [r7, #20]
 801dd36:	2b00      	cmp	r3, #0
 801dd38:	d1e1      	bne.n	801dcfe <sys_timeout_abs+0x86>
 801dd3a:	e000      	b.n	801dd3e <sys_timeout_abs+0xc6>
    return;
 801dd3c:	bf00      	nop
      }
    }
  }
}
 801dd3e:	3718      	adds	r7, #24
 801dd40:	46bd      	mov	sp, r7
 801dd42:	bd80      	pop	{r7, pc}
 801dd44:	08026510 	.word	0x08026510
 801dd48:	08026544 	.word	0x08026544
 801dd4c:	08026584 	.word	0x08026584
 801dd50:	20005314 	.word	0x20005314

0801dd54 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801dd54:	b580      	push	{r7, lr}
 801dd56:	b086      	sub	sp, #24
 801dd58:	af00      	add	r7, sp, #0
 801dd5a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801dd5c:	687b      	ldr	r3, [r7, #4]
 801dd5e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801dd60:	697b      	ldr	r3, [r7, #20]
 801dd62:	685b      	ldr	r3, [r3, #4]
 801dd64:	4798      	blx	r3

  now = sys_now();
 801dd66:	f7ec fc8d 	bl	800a684 <sys_now>
 801dd6a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801dd6c:	697b      	ldr	r3, [r7, #20]
 801dd6e:	681a      	ldr	r2, [r3, #0]
 801dd70:	4b0f      	ldr	r3, [pc, #60]	; (801ddb0 <lwip_cyclic_timer+0x5c>)
 801dd72:	681b      	ldr	r3, [r3, #0]
 801dd74:	4413      	add	r3, r2
 801dd76:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801dd78:	68fa      	ldr	r2, [r7, #12]
 801dd7a:	693b      	ldr	r3, [r7, #16]
 801dd7c:	1ad3      	subs	r3, r2, r3
 801dd7e:	0fdb      	lsrs	r3, r3, #31
 801dd80:	f003 0301 	and.w	r3, r3, #1
 801dd84:	b2db      	uxtb	r3, r3
 801dd86:	2b00      	cmp	r3, #0
 801dd88:	d009      	beq.n	801dd9e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801dd8a:	697b      	ldr	r3, [r7, #20]
 801dd8c:	681a      	ldr	r2, [r3, #0]
 801dd8e:	693b      	ldr	r3, [r7, #16]
 801dd90:	4413      	add	r3, r2
 801dd92:	687a      	ldr	r2, [r7, #4]
 801dd94:	4907      	ldr	r1, [pc, #28]	; (801ddb4 <lwip_cyclic_timer+0x60>)
 801dd96:	4618      	mov	r0, r3
 801dd98:	f7ff ff6e 	bl	801dc78 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801dd9c:	e004      	b.n	801dda8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801dd9e:	687a      	ldr	r2, [r7, #4]
 801dda0:	4904      	ldr	r1, [pc, #16]	; (801ddb4 <lwip_cyclic_timer+0x60>)
 801dda2:	68f8      	ldr	r0, [r7, #12]
 801dda4:	f7ff ff68 	bl	801dc78 <sys_timeout_abs>
}
 801dda8:	bf00      	nop
 801ddaa:	3718      	adds	r7, #24
 801ddac:	46bd      	mov	sp, r7
 801ddae:	bd80      	pop	{r7, pc}
 801ddb0:	20005318 	.word	0x20005318
 801ddb4:	0801dd55 	.word	0x0801dd55

0801ddb8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801ddb8:	b580      	push	{r7, lr}
 801ddba:	b082      	sub	sp, #8
 801ddbc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801ddbe:	2301      	movs	r3, #1
 801ddc0:	607b      	str	r3, [r7, #4]
 801ddc2:	e00e      	b.n	801dde2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801ddc4:	4a0b      	ldr	r2, [pc, #44]	; (801ddf4 <sys_timeouts_init+0x3c>)
 801ddc6:	687b      	ldr	r3, [r7, #4]
 801ddc8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801ddcc:	687b      	ldr	r3, [r7, #4]
 801ddce:	00db      	lsls	r3, r3, #3
 801ddd0:	4a08      	ldr	r2, [pc, #32]	; (801ddf4 <sys_timeouts_init+0x3c>)
 801ddd2:	4413      	add	r3, r2
 801ddd4:	461a      	mov	r2, r3
 801ddd6:	4908      	ldr	r1, [pc, #32]	; (801ddf8 <sys_timeouts_init+0x40>)
 801ddd8:	f000 f810 	bl	801ddfc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801dddc:	687b      	ldr	r3, [r7, #4]
 801ddde:	3301      	adds	r3, #1
 801dde0:	607b      	str	r3, [r7, #4]
 801dde2:	687b      	ldr	r3, [r7, #4]
 801dde4:	2b02      	cmp	r3, #2
 801dde6:	d9ed      	bls.n	801ddc4 <sys_timeouts_init+0xc>
  }
}
 801dde8:	bf00      	nop
 801ddea:	bf00      	nop
 801ddec:	3708      	adds	r7, #8
 801ddee:	46bd      	mov	sp, r7
 801ddf0:	bd80      	pop	{r7, pc}
 801ddf2:	bf00      	nop
 801ddf4:	0802af70 	.word	0x0802af70
 801ddf8:	0801dd55 	.word	0x0801dd55

0801ddfc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801ddfc:	b580      	push	{r7, lr}
 801ddfe:	b086      	sub	sp, #24
 801de00:	af00      	add	r7, sp, #0
 801de02:	60f8      	str	r0, [r7, #12]
 801de04:	60b9      	str	r1, [r7, #8]
 801de06:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801de08:	68fb      	ldr	r3, [r7, #12]
 801de0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801de0e:	d306      	bcc.n	801de1e <sys_timeout+0x22>
 801de10:	4b0a      	ldr	r3, [pc, #40]	; (801de3c <sys_timeout+0x40>)
 801de12:	f240 1229 	movw	r2, #297	; 0x129
 801de16:	490a      	ldr	r1, [pc, #40]	; (801de40 <sys_timeout+0x44>)
 801de18:	480a      	ldr	r0, [pc, #40]	; (801de44 <sys_timeout+0x48>)
 801de1a:	f003 fb83 	bl	8021524 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801de1e:	f7ec fc31 	bl	800a684 <sys_now>
 801de22:	4602      	mov	r2, r0
 801de24:	68fb      	ldr	r3, [r7, #12]
 801de26:	4413      	add	r3, r2
 801de28:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801de2a:	687a      	ldr	r2, [r7, #4]
 801de2c:	68b9      	ldr	r1, [r7, #8]
 801de2e:	6978      	ldr	r0, [r7, #20]
 801de30:	f7ff ff22 	bl	801dc78 <sys_timeout_abs>
#endif
}
 801de34:	bf00      	nop
 801de36:	3718      	adds	r7, #24
 801de38:	46bd      	mov	sp, r7
 801de3a:	bd80      	pop	{r7, pc}
 801de3c:	08026510 	.word	0x08026510
 801de40:	080265ac 	.word	0x080265ac
 801de44:	08026584 	.word	0x08026584

0801de48 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801de48:	b580      	push	{r7, lr}
 801de4a:	b084      	sub	sp, #16
 801de4c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801de4e:	f7ec fc19 	bl	800a684 <sys_now>
 801de52:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801de54:	4b17      	ldr	r3, [pc, #92]	; (801deb4 <sys_check_timeouts+0x6c>)
 801de56:	681b      	ldr	r3, [r3, #0]
 801de58:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801de5a:	68bb      	ldr	r3, [r7, #8]
 801de5c:	2b00      	cmp	r3, #0
 801de5e:	d022      	beq.n	801dea6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801de60:	68bb      	ldr	r3, [r7, #8]
 801de62:	685b      	ldr	r3, [r3, #4]
 801de64:	68fa      	ldr	r2, [r7, #12]
 801de66:	1ad3      	subs	r3, r2, r3
 801de68:	0fdb      	lsrs	r3, r3, #31
 801de6a:	f003 0301 	and.w	r3, r3, #1
 801de6e:	b2db      	uxtb	r3, r3
 801de70:	2b00      	cmp	r3, #0
 801de72:	d11a      	bne.n	801deaa <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801de74:	68bb      	ldr	r3, [r7, #8]
 801de76:	681b      	ldr	r3, [r3, #0]
 801de78:	4a0e      	ldr	r2, [pc, #56]	; (801deb4 <sys_check_timeouts+0x6c>)
 801de7a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801de7c:	68bb      	ldr	r3, [r7, #8]
 801de7e:	689b      	ldr	r3, [r3, #8]
 801de80:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801de82:	68bb      	ldr	r3, [r7, #8]
 801de84:	68db      	ldr	r3, [r3, #12]
 801de86:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801de88:	68bb      	ldr	r3, [r7, #8]
 801de8a:	685b      	ldr	r3, [r3, #4]
 801de8c:	4a0a      	ldr	r2, [pc, #40]	; (801deb8 <sys_check_timeouts+0x70>)
 801de8e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801de90:	68b9      	ldr	r1, [r7, #8]
 801de92:	200a      	movs	r0, #10
 801de94:	f7f8 fd3c 	bl	8016910 <memp_free>
    if (handler != NULL) {
 801de98:	687b      	ldr	r3, [r7, #4]
 801de9a:	2b00      	cmp	r3, #0
 801de9c:	d0da      	beq.n	801de54 <sys_check_timeouts+0xc>
      handler(arg);
 801de9e:	687b      	ldr	r3, [r7, #4]
 801dea0:	6838      	ldr	r0, [r7, #0]
 801dea2:	4798      	blx	r3
  do {
 801dea4:	e7d6      	b.n	801de54 <sys_check_timeouts+0xc>
      return;
 801dea6:	bf00      	nop
 801dea8:	e000      	b.n	801deac <sys_check_timeouts+0x64>
      return;
 801deaa:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801deac:	3710      	adds	r7, #16
 801deae:	46bd      	mov	sp, r7
 801deb0:	bd80      	pop	{r7, pc}
 801deb2:	bf00      	nop
 801deb4:	20005314 	.word	0x20005314
 801deb8:	20005318 	.word	0x20005318

0801debc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801debc:	b580      	push	{r7, lr}
 801debe:	b082      	sub	sp, #8
 801dec0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801dec2:	4b16      	ldr	r3, [pc, #88]	; (801df1c <sys_timeouts_sleeptime+0x60>)
 801dec4:	681b      	ldr	r3, [r3, #0]
 801dec6:	2b00      	cmp	r3, #0
 801dec8:	d102      	bne.n	801ded0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801deca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801dece:	e020      	b.n	801df12 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801ded0:	f7ec fbd8 	bl	800a684 <sys_now>
 801ded4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801ded6:	4b11      	ldr	r3, [pc, #68]	; (801df1c <sys_timeouts_sleeptime+0x60>)
 801ded8:	681b      	ldr	r3, [r3, #0]
 801deda:	685a      	ldr	r2, [r3, #4]
 801dedc:	687b      	ldr	r3, [r7, #4]
 801dede:	1ad3      	subs	r3, r2, r3
 801dee0:	0fdb      	lsrs	r3, r3, #31
 801dee2:	f003 0301 	and.w	r3, r3, #1
 801dee6:	b2db      	uxtb	r3, r3
 801dee8:	2b00      	cmp	r3, #0
 801deea:	d001      	beq.n	801def0 <sys_timeouts_sleeptime+0x34>
    return 0;
 801deec:	2300      	movs	r3, #0
 801deee:	e010      	b.n	801df12 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801def0:	4b0a      	ldr	r3, [pc, #40]	; (801df1c <sys_timeouts_sleeptime+0x60>)
 801def2:	681b      	ldr	r3, [r3, #0]
 801def4:	685a      	ldr	r2, [r3, #4]
 801def6:	687b      	ldr	r3, [r7, #4]
 801def8:	1ad3      	subs	r3, r2, r3
 801defa:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801defc:	683b      	ldr	r3, [r7, #0]
 801defe:	2b00      	cmp	r3, #0
 801df00:	da06      	bge.n	801df10 <sys_timeouts_sleeptime+0x54>
 801df02:	4b07      	ldr	r3, [pc, #28]	; (801df20 <sys_timeouts_sleeptime+0x64>)
 801df04:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801df08:	4906      	ldr	r1, [pc, #24]	; (801df24 <sys_timeouts_sleeptime+0x68>)
 801df0a:	4807      	ldr	r0, [pc, #28]	; (801df28 <sys_timeouts_sleeptime+0x6c>)
 801df0c:	f003 fb0a 	bl	8021524 <iprintf>
    return ret;
 801df10:	683b      	ldr	r3, [r7, #0]
  }
}
 801df12:	4618      	mov	r0, r3
 801df14:	3708      	adds	r7, #8
 801df16:	46bd      	mov	sp, r7
 801df18:	bd80      	pop	{r7, pc}
 801df1a:	bf00      	nop
 801df1c:	20005314 	.word	0x20005314
 801df20:	08026510 	.word	0x08026510
 801df24:	080265e4 	.word	0x080265e4
 801df28:	08026584 	.word	0x08026584

0801df2c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801df2c:	b580      	push	{r7, lr}
 801df2e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801df30:	f003 fb86 	bl	8021640 <rand>
 801df34:	4603      	mov	r3, r0
 801df36:	b29b      	uxth	r3, r3
 801df38:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801df3c:	b29b      	uxth	r3, r3
 801df3e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801df42:	b29a      	uxth	r2, r3
 801df44:	4b01      	ldr	r3, [pc, #4]	; (801df4c <udp_init+0x20>)
 801df46:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801df48:	bf00      	nop
 801df4a:	bd80      	pop	{r7, pc}
 801df4c:	2000074c 	.word	0x2000074c

0801df50 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801df50:	b580      	push	{r7, lr}
 801df52:	b084      	sub	sp, #16
 801df54:	af00      	add	r7, sp, #0
 801df56:	60f8      	str	r0, [r7, #12]
 801df58:	60b9      	str	r1, [r7, #8]
 801df5a:	4613      	mov	r3, r2
 801df5c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801df5e:	68fb      	ldr	r3, [r7, #12]
 801df60:	2b00      	cmp	r3, #0
 801df62:	d105      	bne.n	801df70 <udp_input_local_match+0x20>
 801df64:	4b27      	ldr	r3, [pc, #156]	; (801e004 <udp_input_local_match+0xb4>)
 801df66:	2287      	movs	r2, #135	; 0x87
 801df68:	4927      	ldr	r1, [pc, #156]	; (801e008 <udp_input_local_match+0xb8>)
 801df6a:	4828      	ldr	r0, [pc, #160]	; (801e00c <udp_input_local_match+0xbc>)
 801df6c:	f003 fada 	bl	8021524 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801df70:	68bb      	ldr	r3, [r7, #8]
 801df72:	2b00      	cmp	r3, #0
 801df74:	d105      	bne.n	801df82 <udp_input_local_match+0x32>
 801df76:	4b23      	ldr	r3, [pc, #140]	; (801e004 <udp_input_local_match+0xb4>)
 801df78:	2288      	movs	r2, #136	; 0x88
 801df7a:	4925      	ldr	r1, [pc, #148]	; (801e010 <udp_input_local_match+0xc0>)
 801df7c:	4823      	ldr	r0, [pc, #140]	; (801e00c <udp_input_local_match+0xbc>)
 801df7e:	f003 fad1 	bl	8021524 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801df82:	68fb      	ldr	r3, [r7, #12]
 801df84:	7a1b      	ldrb	r3, [r3, #8]
 801df86:	2b00      	cmp	r3, #0
 801df88:	d00b      	beq.n	801dfa2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801df8a:	68fb      	ldr	r3, [r7, #12]
 801df8c:	7a1a      	ldrb	r2, [r3, #8]
 801df8e:	4b21      	ldr	r3, [pc, #132]	; (801e014 <udp_input_local_match+0xc4>)
 801df90:	685b      	ldr	r3, [r3, #4]
 801df92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801df96:	3301      	adds	r3, #1
 801df98:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801df9a:	429a      	cmp	r2, r3
 801df9c:	d001      	beq.n	801dfa2 <udp_input_local_match+0x52>
    return 0;
 801df9e:	2300      	movs	r3, #0
 801dfa0:	e02b      	b.n	801dffa <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801dfa2:	79fb      	ldrb	r3, [r7, #7]
 801dfa4:	2b00      	cmp	r3, #0
 801dfa6:	d018      	beq.n	801dfda <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801dfa8:	68fb      	ldr	r3, [r7, #12]
 801dfaa:	2b00      	cmp	r3, #0
 801dfac:	d013      	beq.n	801dfd6 <udp_input_local_match+0x86>
 801dfae:	68fb      	ldr	r3, [r7, #12]
 801dfb0:	681b      	ldr	r3, [r3, #0]
 801dfb2:	2b00      	cmp	r3, #0
 801dfb4:	d00f      	beq.n	801dfd6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801dfb6:	4b17      	ldr	r3, [pc, #92]	; (801e014 <udp_input_local_match+0xc4>)
 801dfb8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801dfba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801dfbe:	d00a      	beq.n	801dfd6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801dfc0:	68fb      	ldr	r3, [r7, #12]
 801dfc2:	681a      	ldr	r2, [r3, #0]
 801dfc4:	4b13      	ldr	r3, [pc, #76]	; (801e014 <udp_input_local_match+0xc4>)
 801dfc6:	695b      	ldr	r3, [r3, #20]
 801dfc8:	405a      	eors	r2, r3
 801dfca:	68bb      	ldr	r3, [r7, #8]
 801dfcc:	3308      	adds	r3, #8
 801dfce:	681b      	ldr	r3, [r3, #0]
 801dfd0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801dfd2:	2b00      	cmp	r3, #0
 801dfd4:	d110      	bne.n	801dff8 <udp_input_local_match+0xa8>
          return 1;
 801dfd6:	2301      	movs	r3, #1
 801dfd8:	e00f      	b.n	801dffa <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801dfda:	68fb      	ldr	r3, [r7, #12]
 801dfdc:	2b00      	cmp	r3, #0
 801dfde:	d009      	beq.n	801dff4 <udp_input_local_match+0xa4>
 801dfe0:	68fb      	ldr	r3, [r7, #12]
 801dfe2:	681b      	ldr	r3, [r3, #0]
 801dfe4:	2b00      	cmp	r3, #0
 801dfe6:	d005      	beq.n	801dff4 <udp_input_local_match+0xa4>
 801dfe8:	68fb      	ldr	r3, [r7, #12]
 801dfea:	681a      	ldr	r2, [r3, #0]
 801dfec:	4b09      	ldr	r3, [pc, #36]	; (801e014 <udp_input_local_match+0xc4>)
 801dfee:	695b      	ldr	r3, [r3, #20]
 801dff0:	429a      	cmp	r2, r3
 801dff2:	d101      	bne.n	801dff8 <udp_input_local_match+0xa8>
        return 1;
 801dff4:	2301      	movs	r3, #1
 801dff6:	e000      	b.n	801dffa <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801dff8:	2300      	movs	r3, #0
}
 801dffa:	4618      	mov	r0, r3
 801dffc:	3710      	adds	r7, #16
 801dffe:	46bd      	mov	sp, r7
 801e000:	bd80      	pop	{r7, pc}
 801e002:	bf00      	nop
 801e004:	080265f8 	.word	0x080265f8
 801e008:	08026628 	.word	0x08026628
 801e00c:	0802664c 	.word	0x0802664c
 801e010:	08026674 	.word	0x08026674
 801e014:	200110bc 	.word	0x200110bc

0801e018 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801e018:	b590      	push	{r4, r7, lr}
 801e01a:	b08d      	sub	sp, #52	; 0x34
 801e01c:	af02      	add	r7, sp, #8
 801e01e:	6078      	str	r0, [r7, #4]
 801e020:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801e022:	2300      	movs	r3, #0
 801e024:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801e026:	687b      	ldr	r3, [r7, #4]
 801e028:	2b00      	cmp	r3, #0
 801e02a:	d105      	bne.n	801e038 <udp_input+0x20>
 801e02c:	4b7c      	ldr	r3, [pc, #496]	; (801e220 <udp_input+0x208>)
 801e02e:	22cf      	movs	r2, #207	; 0xcf
 801e030:	497c      	ldr	r1, [pc, #496]	; (801e224 <udp_input+0x20c>)
 801e032:	487d      	ldr	r0, [pc, #500]	; (801e228 <udp_input+0x210>)
 801e034:	f003 fa76 	bl	8021524 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801e038:	683b      	ldr	r3, [r7, #0]
 801e03a:	2b00      	cmp	r3, #0
 801e03c:	d105      	bne.n	801e04a <udp_input+0x32>
 801e03e:	4b78      	ldr	r3, [pc, #480]	; (801e220 <udp_input+0x208>)
 801e040:	22d0      	movs	r2, #208	; 0xd0
 801e042:	497a      	ldr	r1, [pc, #488]	; (801e22c <udp_input+0x214>)
 801e044:	4878      	ldr	r0, [pc, #480]	; (801e228 <udp_input+0x210>)
 801e046:	f003 fa6d 	bl	8021524 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801e04a:	687b      	ldr	r3, [r7, #4]
 801e04c:	895b      	ldrh	r3, [r3, #10]
 801e04e:	2b07      	cmp	r3, #7
 801e050:	d803      	bhi.n	801e05a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801e052:	6878      	ldr	r0, [r7, #4]
 801e054:	f7f9 fb00 	bl	8017658 <pbuf_free>
    goto end;
 801e058:	e0de      	b.n	801e218 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801e05a:	687b      	ldr	r3, [r7, #4]
 801e05c:	685b      	ldr	r3, [r3, #4]
 801e05e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801e060:	4b73      	ldr	r3, [pc, #460]	; (801e230 <udp_input+0x218>)
 801e062:	695b      	ldr	r3, [r3, #20]
 801e064:	4a72      	ldr	r2, [pc, #456]	; (801e230 <udp_input+0x218>)
 801e066:	6812      	ldr	r2, [r2, #0]
 801e068:	4611      	mov	r1, r2
 801e06a:	4618      	mov	r0, r3
 801e06c:	f001 fc88 	bl	801f980 <ip4_addr_isbroadcast_u32>
 801e070:	4603      	mov	r3, r0
 801e072:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801e074:	697b      	ldr	r3, [r7, #20]
 801e076:	881b      	ldrh	r3, [r3, #0]
 801e078:	b29b      	uxth	r3, r3
 801e07a:	4618      	mov	r0, r3
 801e07c:	f7f7 fe62 	bl	8015d44 <lwip_htons>
 801e080:	4603      	mov	r3, r0
 801e082:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801e084:	697b      	ldr	r3, [r7, #20]
 801e086:	885b      	ldrh	r3, [r3, #2]
 801e088:	b29b      	uxth	r3, r3
 801e08a:	4618      	mov	r0, r3
 801e08c:	f7f7 fe5a 	bl	8015d44 <lwip_htons>
 801e090:	4603      	mov	r3, r0
 801e092:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801e094:	2300      	movs	r3, #0
 801e096:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801e098:	2300      	movs	r3, #0
 801e09a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801e09c:	2300      	movs	r3, #0
 801e09e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801e0a0:	4b64      	ldr	r3, [pc, #400]	; (801e234 <udp_input+0x21c>)
 801e0a2:	681b      	ldr	r3, [r3, #0]
 801e0a4:	627b      	str	r3, [r7, #36]	; 0x24
 801e0a6:	e054      	b.n	801e152 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801e0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0aa:	8a5b      	ldrh	r3, [r3, #18]
 801e0ac:	89fa      	ldrh	r2, [r7, #14]
 801e0ae:	429a      	cmp	r2, r3
 801e0b0:	d14a      	bne.n	801e148 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801e0b2:	7cfb      	ldrb	r3, [r7, #19]
 801e0b4:	461a      	mov	r2, r3
 801e0b6:	6839      	ldr	r1, [r7, #0]
 801e0b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e0ba:	f7ff ff49 	bl	801df50 <udp_input_local_match>
 801e0be:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801e0c0:	2b00      	cmp	r3, #0
 801e0c2:	d041      	beq.n	801e148 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801e0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0c6:	7c1b      	ldrb	r3, [r3, #16]
 801e0c8:	f003 0304 	and.w	r3, r3, #4
 801e0cc:	2b00      	cmp	r3, #0
 801e0ce:	d11d      	bne.n	801e10c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801e0d0:	69fb      	ldr	r3, [r7, #28]
 801e0d2:	2b00      	cmp	r3, #0
 801e0d4:	d102      	bne.n	801e0dc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801e0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0d8:	61fb      	str	r3, [r7, #28]
 801e0da:	e017      	b.n	801e10c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801e0dc:	7cfb      	ldrb	r3, [r7, #19]
 801e0de:	2b00      	cmp	r3, #0
 801e0e0:	d014      	beq.n	801e10c <udp_input+0xf4>
 801e0e2:	4b53      	ldr	r3, [pc, #332]	; (801e230 <udp_input+0x218>)
 801e0e4:	695b      	ldr	r3, [r3, #20]
 801e0e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e0ea:	d10f      	bne.n	801e10c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801e0ec:	69fb      	ldr	r3, [r7, #28]
 801e0ee:	681a      	ldr	r2, [r3, #0]
 801e0f0:	683b      	ldr	r3, [r7, #0]
 801e0f2:	3304      	adds	r3, #4
 801e0f4:	681b      	ldr	r3, [r3, #0]
 801e0f6:	429a      	cmp	r2, r3
 801e0f8:	d008      	beq.n	801e10c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801e0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0fc:	681a      	ldr	r2, [r3, #0]
 801e0fe:	683b      	ldr	r3, [r7, #0]
 801e100:	3304      	adds	r3, #4
 801e102:	681b      	ldr	r3, [r3, #0]
 801e104:	429a      	cmp	r2, r3
 801e106:	d101      	bne.n	801e10c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801e108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e10a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801e10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e10e:	8a9b      	ldrh	r3, [r3, #20]
 801e110:	8a3a      	ldrh	r2, [r7, #16]
 801e112:	429a      	cmp	r2, r3
 801e114:	d118      	bne.n	801e148 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801e116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e118:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801e11a:	2b00      	cmp	r3, #0
 801e11c:	d005      	beq.n	801e12a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801e11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e120:	685a      	ldr	r2, [r3, #4]
 801e122:	4b43      	ldr	r3, [pc, #268]	; (801e230 <udp_input+0x218>)
 801e124:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801e126:	429a      	cmp	r2, r3
 801e128:	d10e      	bne.n	801e148 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801e12a:	6a3b      	ldr	r3, [r7, #32]
 801e12c:	2b00      	cmp	r3, #0
 801e12e:	d014      	beq.n	801e15a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801e130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e132:	68da      	ldr	r2, [r3, #12]
 801e134:	6a3b      	ldr	r3, [r7, #32]
 801e136:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801e138:	4b3e      	ldr	r3, [pc, #248]	; (801e234 <udp_input+0x21c>)
 801e13a:	681a      	ldr	r2, [r3, #0]
 801e13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e13e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801e140:	4a3c      	ldr	r2, [pc, #240]	; (801e234 <udp_input+0x21c>)
 801e142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e144:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801e146:	e008      	b.n	801e15a <udp_input+0x142>
      }
    }

    prev = pcb;
 801e148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e14a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801e14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e14e:	68db      	ldr	r3, [r3, #12]
 801e150:	627b      	str	r3, [r7, #36]	; 0x24
 801e152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e154:	2b00      	cmp	r3, #0
 801e156:	d1a7      	bne.n	801e0a8 <udp_input+0x90>
 801e158:	e000      	b.n	801e15c <udp_input+0x144>
        break;
 801e15a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801e15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e15e:	2b00      	cmp	r3, #0
 801e160:	d101      	bne.n	801e166 <udp_input+0x14e>
    pcb = uncon_pcb;
 801e162:	69fb      	ldr	r3, [r7, #28]
 801e164:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801e166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e168:	2b00      	cmp	r3, #0
 801e16a:	d002      	beq.n	801e172 <udp_input+0x15a>
    for_us = 1;
 801e16c:	2301      	movs	r3, #1
 801e16e:	76fb      	strb	r3, [r7, #27]
 801e170:	e00a      	b.n	801e188 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801e172:	683b      	ldr	r3, [r7, #0]
 801e174:	3304      	adds	r3, #4
 801e176:	681a      	ldr	r2, [r3, #0]
 801e178:	4b2d      	ldr	r3, [pc, #180]	; (801e230 <udp_input+0x218>)
 801e17a:	695b      	ldr	r3, [r3, #20]
 801e17c:	429a      	cmp	r2, r3
 801e17e:	bf0c      	ite	eq
 801e180:	2301      	moveq	r3, #1
 801e182:	2300      	movne	r3, #0
 801e184:	b2db      	uxtb	r3, r3
 801e186:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801e188:	7efb      	ldrb	r3, [r7, #27]
 801e18a:	2b00      	cmp	r3, #0
 801e18c:	d041      	beq.n	801e212 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801e18e:	2108      	movs	r1, #8
 801e190:	6878      	ldr	r0, [r7, #4]
 801e192:	f7f9 f9db 	bl	801754c <pbuf_remove_header>
 801e196:	4603      	mov	r3, r0
 801e198:	2b00      	cmp	r3, #0
 801e19a:	d00a      	beq.n	801e1b2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801e19c:	4b20      	ldr	r3, [pc, #128]	; (801e220 <udp_input+0x208>)
 801e19e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801e1a2:	4925      	ldr	r1, [pc, #148]	; (801e238 <udp_input+0x220>)
 801e1a4:	4820      	ldr	r0, [pc, #128]	; (801e228 <udp_input+0x210>)
 801e1a6:	f003 f9bd 	bl	8021524 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801e1aa:	6878      	ldr	r0, [r7, #4]
 801e1ac:	f7f9 fa54 	bl	8017658 <pbuf_free>
      goto end;
 801e1b0:	e032      	b.n	801e218 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801e1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e1b4:	2b00      	cmp	r3, #0
 801e1b6:	d012      	beq.n	801e1de <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801e1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e1ba:	699b      	ldr	r3, [r3, #24]
 801e1bc:	2b00      	cmp	r3, #0
 801e1be:	d00a      	beq.n	801e1d6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801e1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e1c2:	699c      	ldr	r4, [r3, #24]
 801e1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e1c6:	69d8      	ldr	r0, [r3, #28]
 801e1c8:	8a3b      	ldrh	r3, [r7, #16]
 801e1ca:	9300      	str	r3, [sp, #0]
 801e1cc:	4b1b      	ldr	r3, [pc, #108]	; (801e23c <udp_input+0x224>)
 801e1ce:	687a      	ldr	r2, [r7, #4]
 801e1d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e1d2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801e1d4:	e021      	b.n	801e21a <udp_input+0x202>
        pbuf_free(p);
 801e1d6:	6878      	ldr	r0, [r7, #4]
 801e1d8:	f7f9 fa3e 	bl	8017658 <pbuf_free>
        goto end;
 801e1dc:	e01c      	b.n	801e218 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801e1de:	7cfb      	ldrb	r3, [r7, #19]
 801e1e0:	2b00      	cmp	r3, #0
 801e1e2:	d112      	bne.n	801e20a <udp_input+0x1f2>
 801e1e4:	4b12      	ldr	r3, [pc, #72]	; (801e230 <udp_input+0x218>)
 801e1e6:	695b      	ldr	r3, [r3, #20]
 801e1e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801e1ec:	2be0      	cmp	r3, #224	; 0xe0
 801e1ee:	d00c      	beq.n	801e20a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801e1f0:	4b0f      	ldr	r3, [pc, #60]	; (801e230 <udp_input+0x218>)
 801e1f2:	899b      	ldrh	r3, [r3, #12]
 801e1f4:	3308      	adds	r3, #8
 801e1f6:	b29b      	uxth	r3, r3
 801e1f8:	b21b      	sxth	r3, r3
 801e1fa:	4619      	mov	r1, r3
 801e1fc:	6878      	ldr	r0, [r7, #4]
 801e1fe:	f7f9 fa18 	bl	8017632 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801e202:	2103      	movs	r1, #3
 801e204:	6878      	ldr	r0, [r7, #4]
 801e206:	f001 f89b 	bl	801f340 <icmp_dest_unreach>
      pbuf_free(p);
 801e20a:	6878      	ldr	r0, [r7, #4]
 801e20c:	f7f9 fa24 	bl	8017658 <pbuf_free>
  return;
 801e210:	e003      	b.n	801e21a <udp_input+0x202>
    pbuf_free(p);
 801e212:	6878      	ldr	r0, [r7, #4]
 801e214:	f7f9 fa20 	bl	8017658 <pbuf_free>
  return;
 801e218:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801e21a:	372c      	adds	r7, #44	; 0x2c
 801e21c:	46bd      	mov	sp, r7
 801e21e:	bd90      	pop	{r4, r7, pc}
 801e220:	080265f8 	.word	0x080265f8
 801e224:	0802669c 	.word	0x0802669c
 801e228:	0802664c 	.word	0x0802664c
 801e22c:	080266b4 	.word	0x080266b4
 801e230:	200110bc 	.word	0x200110bc
 801e234:	2001b9a8 	.word	0x2001b9a8
 801e238:	080266d0 	.word	0x080266d0
 801e23c:	200110cc 	.word	0x200110cc

0801e240 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801e240:	b480      	push	{r7}
 801e242:	b085      	sub	sp, #20
 801e244:	af00      	add	r7, sp, #0
 801e246:	6078      	str	r0, [r7, #4]
 801e248:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801e24a:	687b      	ldr	r3, [r7, #4]
 801e24c:	2b00      	cmp	r3, #0
 801e24e:	d01e      	beq.n	801e28e <udp_netif_ip_addr_changed+0x4e>
 801e250:	687b      	ldr	r3, [r7, #4]
 801e252:	681b      	ldr	r3, [r3, #0]
 801e254:	2b00      	cmp	r3, #0
 801e256:	d01a      	beq.n	801e28e <udp_netif_ip_addr_changed+0x4e>
 801e258:	683b      	ldr	r3, [r7, #0]
 801e25a:	2b00      	cmp	r3, #0
 801e25c:	d017      	beq.n	801e28e <udp_netif_ip_addr_changed+0x4e>
 801e25e:	683b      	ldr	r3, [r7, #0]
 801e260:	681b      	ldr	r3, [r3, #0]
 801e262:	2b00      	cmp	r3, #0
 801e264:	d013      	beq.n	801e28e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801e266:	4b0d      	ldr	r3, [pc, #52]	; (801e29c <udp_netif_ip_addr_changed+0x5c>)
 801e268:	681b      	ldr	r3, [r3, #0]
 801e26a:	60fb      	str	r3, [r7, #12]
 801e26c:	e00c      	b.n	801e288 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801e26e:	68fb      	ldr	r3, [r7, #12]
 801e270:	681a      	ldr	r2, [r3, #0]
 801e272:	687b      	ldr	r3, [r7, #4]
 801e274:	681b      	ldr	r3, [r3, #0]
 801e276:	429a      	cmp	r2, r3
 801e278:	d103      	bne.n	801e282 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801e27a:	683b      	ldr	r3, [r7, #0]
 801e27c:	681a      	ldr	r2, [r3, #0]
 801e27e:	68fb      	ldr	r3, [r7, #12]
 801e280:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801e282:	68fb      	ldr	r3, [r7, #12]
 801e284:	68db      	ldr	r3, [r3, #12]
 801e286:	60fb      	str	r3, [r7, #12]
 801e288:	68fb      	ldr	r3, [r7, #12]
 801e28a:	2b00      	cmp	r3, #0
 801e28c:	d1ef      	bne.n	801e26e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801e28e:	bf00      	nop
 801e290:	3714      	adds	r7, #20
 801e292:	46bd      	mov	sp, r7
 801e294:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e298:	4770      	bx	lr
 801e29a:	bf00      	nop
 801e29c:	2001b9a8 	.word	0x2001b9a8

0801e2a0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801e2a0:	b580      	push	{r7, lr}
 801e2a2:	b082      	sub	sp, #8
 801e2a4:	af00      	add	r7, sp, #0
 801e2a6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801e2a8:	4915      	ldr	r1, [pc, #84]	; (801e300 <etharp_free_entry+0x60>)
 801e2aa:	687a      	ldr	r2, [r7, #4]
 801e2ac:	4613      	mov	r3, r2
 801e2ae:	005b      	lsls	r3, r3, #1
 801e2b0:	4413      	add	r3, r2
 801e2b2:	00db      	lsls	r3, r3, #3
 801e2b4:	440b      	add	r3, r1
 801e2b6:	681b      	ldr	r3, [r3, #0]
 801e2b8:	2b00      	cmp	r3, #0
 801e2ba:	d013      	beq.n	801e2e4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801e2bc:	4910      	ldr	r1, [pc, #64]	; (801e300 <etharp_free_entry+0x60>)
 801e2be:	687a      	ldr	r2, [r7, #4]
 801e2c0:	4613      	mov	r3, r2
 801e2c2:	005b      	lsls	r3, r3, #1
 801e2c4:	4413      	add	r3, r2
 801e2c6:	00db      	lsls	r3, r3, #3
 801e2c8:	440b      	add	r3, r1
 801e2ca:	681b      	ldr	r3, [r3, #0]
 801e2cc:	4618      	mov	r0, r3
 801e2ce:	f7f9 f9c3 	bl	8017658 <pbuf_free>
    arp_table[i].q = NULL;
 801e2d2:	490b      	ldr	r1, [pc, #44]	; (801e300 <etharp_free_entry+0x60>)
 801e2d4:	687a      	ldr	r2, [r7, #4]
 801e2d6:	4613      	mov	r3, r2
 801e2d8:	005b      	lsls	r3, r3, #1
 801e2da:	4413      	add	r3, r2
 801e2dc:	00db      	lsls	r3, r3, #3
 801e2de:	440b      	add	r3, r1
 801e2e0:	2200      	movs	r2, #0
 801e2e2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801e2e4:	4906      	ldr	r1, [pc, #24]	; (801e300 <etharp_free_entry+0x60>)
 801e2e6:	687a      	ldr	r2, [r7, #4]
 801e2e8:	4613      	mov	r3, r2
 801e2ea:	005b      	lsls	r3, r3, #1
 801e2ec:	4413      	add	r3, r2
 801e2ee:	00db      	lsls	r3, r3, #3
 801e2f0:	440b      	add	r3, r1
 801e2f2:	3314      	adds	r3, #20
 801e2f4:	2200      	movs	r2, #0
 801e2f6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801e2f8:	bf00      	nop
 801e2fa:	3708      	adds	r7, #8
 801e2fc:	46bd      	mov	sp, r7
 801e2fe:	bd80      	pop	{r7, pc}
 801e300:	20005320 	.word	0x20005320

0801e304 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801e304:	b580      	push	{r7, lr}
 801e306:	b082      	sub	sp, #8
 801e308:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e30a:	2300      	movs	r3, #0
 801e30c:	607b      	str	r3, [r7, #4]
 801e30e:	e096      	b.n	801e43e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801e310:	494f      	ldr	r1, [pc, #316]	; (801e450 <etharp_tmr+0x14c>)
 801e312:	687a      	ldr	r2, [r7, #4]
 801e314:	4613      	mov	r3, r2
 801e316:	005b      	lsls	r3, r3, #1
 801e318:	4413      	add	r3, r2
 801e31a:	00db      	lsls	r3, r3, #3
 801e31c:	440b      	add	r3, r1
 801e31e:	3314      	adds	r3, #20
 801e320:	781b      	ldrb	r3, [r3, #0]
 801e322:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801e324:	78fb      	ldrb	r3, [r7, #3]
 801e326:	2b00      	cmp	r3, #0
 801e328:	f000 8086 	beq.w	801e438 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801e32c:	4948      	ldr	r1, [pc, #288]	; (801e450 <etharp_tmr+0x14c>)
 801e32e:	687a      	ldr	r2, [r7, #4]
 801e330:	4613      	mov	r3, r2
 801e332:	005b      	lsls	r3, r3, #1
 801e334:	4413      	add	r3, r2
 801e336:	00db      	lsls	r3, r3, #3
 801e338:	440b      	add	r3, r1
 801e33a:	3312      	adds	r3, #18
 801e33c:	881b      	ldrh	r3, [r3, #0]
 801e33e:	3301      	adds	r3, #1
 801e340:	b298      	uxth	r0, r3
 801e342:	4943      	ldr	r1, [pc, #268]	; (801e450 <etharp_tmr+0x14c>)
 801e344:	687a      	ldr	r2, [r7, #4]
 801e346:	4613      	mov	r3, r2
 801e348:	005b      	lsls	r3, r3, #1
 801e34a:	4413      	add	r3, r2
 801e34c:	00db      	lsls	r3, r3, #3
 801e34e:	440b      	add	r3, r1
 801e350:	3312      	adds	r3, #18
 801e352:	4602      	mov	r2, r0
 801e354:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801e356:	493e      	ldr	r1, [pc, #248]	; (801e450 <etharp_tmr+0x14c>)
 801e358:	687a      	ldr	r2, [r7, #4]
 801e35a:	4613      	mov	r3, r2
 801e35c:	005b      	lsls	r3, r3, #1
 801e35e:	4413      	add	r3, r2
 801e360:	00db      	lsls	r3, r3, #3
 801e362:	440b      	add	r3, r1
 801e364:	3312      	adds	r3, #18
 801e366:	881b      	ldrh	r3, [r3, #0]
 801e368:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801e36c:	d215      	bcs.n	801e39a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801e36e:	4938      	ldr	r1, [pc, #224]	; (801e450 <etharp_tmr+0x14c>)
 801e370:	687a      	ldr	r2, [r7, #4]
 801e372:	4613      	mov	r3, r2
 801e374:	005b      	lsls	r3, r3, #1
 801e376:	4413      	add	r3, r2
 801e378:	00db      	lsls	r3, r3, #3
 801e37a:	440b      	add	r3, r1
 801e37c:	3314      	adds	r3, #20
 801e37e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801e380:	2b01      	cmp	r3, #1
 801e382:	d10e      	bne.n	801e3a2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801e384:	4932      	ldr	r1, [pc, #200]	; (801e450 <etharp_tmr+0x14c>)
 801e386:	687a      	ldr	r2, [r7, #4]
 801e388:	4613      	mov	r3, r2
 801e38a:	005b      	lsls	r3, r3, #1
 801e38c:	4413      	add	r3, r2
 801e38e:	00db      	lsls	r3, r3, #3
 801e390:	440b      	add	r3, r1
 801e392:	3312      	adds	r3, #18
 801e394:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801e396:	2b04      	cmp	r3, #4
 801e398:	d903      	bls.n	801e3a2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801e39a:	6878      	ldr	r0, [r7, #4]
 801e39c:	f7ff ff80 	bl	801e2a0 <etharp_free_entry>
 801e3a0:	e04a      	b.n	801e438 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801e3a2:	492b      	ldr	r1, [pc, #172]	; (801e450 <etharp_tmr+0x14c>)
 801e3a4:	687a      	ldr	r2, [r7, #4]
 801e3a6:	4613      	mov	r3, r2
 801e3a8:	005b      	lsls	r3, r3, #1
 801e3aa:	4413      	add	r3, r2
 801e3ac:	00db      	lsls	r3, r3, #3
 801e3ae:	440b      	add	r3, r1
 801e3b0:	3314      	adds	r3, #20
 801e3b2:	781b      	ldrb	r3, [r3, #0]
 801e3b4:	2b03      	cmp	r3, #3
 801e3b6:	d10a      	bne.n	801e3ce <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801e3b8:	4925      	ldr	r1, [pc, #148]	; (801e450 <etharp_tmr+0x14c>)
 801e3ba:	687a      	ldr	r2, [r7, #4]
 801e3bc:	4613      	mov	r3, r2
 801e3be:	005b      	lsls	r3, r3, #1
 801e3c0:	4413      	add	r3, r2
 801e3c2:	00db      	lsls	r3, r3, #3
 801e3c4:	440b      	add	r3, r1
 801e3c6:	3314      	adds	r3, #20
 801e3c8:	2204      	movs	r2, #4
 801e3ca:	701a      	strb	r2, [r3, #0]
 801e3cc:	e034      	b.n	801e438 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801e3ce:	4920      	ldr	r1, [pc, #128]	; (801e450 <etharp_tmr+0x14c>)
 801e3d0:	687a      	ldr	r2, [r7, #4]
 801e3d2:	4613      	mov	r3, r2
 801e3d4:	005b      	lsls	r3, r3, #1
 801e3d6:	4413      	add	r3, r2
 801e3d8:	00db      	lsls	r3, r3, #3
 801e3da:	440b      	add	r3, r1
 801e3dc:	3314      	adds	r3, #20
 801e3de:	781b      	ldrb	r3, [r3, #0]
 801e3e0:	2b04      	cmp	r3, #4
 801e3e2:	d10a      	bne.n	801e3fa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801e3e4:	491a      	ldr	r1, [pc, #104]	; (801e450 <etharp_tmr+0x14c>)
 801e3e6:	687a      	ldr	r2, [r7, #4]
 801e3e8:	4613      	mov	r3, r2
 801e3ea:	005b      	lsls	r3, r3, #1
 801e3ec:	4413      	add	r3, r2
 801e3ee:	00db      	lsls	r3, r3, #3
 801e3f0:	440b      	add	r3, r1
 801e3f2:	3314      	adds	r3, #20
 801e3f4:	2202      	movs	r2, #2
 801e3f6:	701a      	strb	r2, [r3, #0]
 801e3f8:	e01e      	b.n	801e438 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801e3fa:	4915      	ldr	r1, [pc, #84]	; (801e450 <etharp_tmr+0x14c>)
 801e3fc:	687a      	ldr	r2, [r7, #4]
 801e3fe:	4613      	mov	r3, r2
 801e400:	005b      	lsls	r3, r3, #1
 801e402:	4413      	add	r3, r2
 801e404:	00db      	lsls	r3, r3, #3
 801e406:	440b      	add	r3, r1
 801e408:	3314      	adds	r3, #20
 801e40a:	781b      	ldrb	r3, [r3, #0]
 801e40c:	2b01      	cmp	r3, #1
 801e40e:	d113      	bne.n	801e438 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801e410:	490f      	ldr	r1, [pc, #60]	; (801e450 <etharp_tmr+0x14c>)
 801e412:	687a      	ldr	r2, [r7, #4]
 801e414:	4613      	mov	r3, r2
 801e416:	005b      	lsls	r3, r3, #1
 801e418:	4413      	add	r3, r2
 801e41a:	00db      	lsls	r3, r3, #3
 801e41c:	440b      	add	r3, r1
 801e41e:	3308      	adds	r3, #8
 801e420:	6818      	ldr	r0, [r3, #0]
 801e422:	687a      	ldr	r2, [r7, #4]
 801e424:	4613      	mov	r3, r2
 801e426:	005b      	lsls	r3, r3, #1
 801e428:	4413      	add	r3, r2
 801e42a:	00db      	lsls	r3, r3, #3
 801e42c:	4a08      	ldr	r2, [pc, #32]	; (801e450 <etharp_tmr+0x14c>)
 801e42e:	4413      	add	r3, r2
 801e430:	3304      	adds	r3, #4
 801e432:	4619      	mov	r1, r3
 801e434:	f000 fe6e 	bl	801f114 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e438:	687b      	ldr	r3, [r7, #4]
 801e43a:	3301      	adds	r3, #1
 801e43c:	607b      	str	r3, [r7, #4]
 801e43e:	687b      	ldr	r3, [r7, #4]
 801e440:	2b09      	cmp	r3, #9
 801e442:	f77f af65 	ble.w	801e310 <etharp_tmr+0xc>
      }
    }
  }
}
 801e446:	bf00      	nop
 801e448:	bf00      	nop
 801e44a:	3708      	adds	r7, #8
 801e44c:	46bd      	mov	sp, r7
 801e44e:	bd80      	pop	{r7, pc}
 801e450:	20005320 	.word	0x20005320

0801e454 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801e454:	b580      	push	{r7, lr}
 801e456:	b08a      	sub	sp, #40	; 0x28
 801e458:	af00      	add	r7, sp, #0
 801e45a:	60f8      	str	r0, [r7, #12]
 801e45c:	460b      	mov	r3, r1
 801e45e:	607a      	str	r2, [r7, #4]
 801e460:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801e462:	230a      	movs	r3, #10
 801e464:	84fb      	strh	r3, [r7, #38]	; 0x26
 801e466:	230a      	movs	r3, #10
 801e468:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801e46a:	230a      	movs	r3, #10
 801e46c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801e46e:	2300      	movs	r3, #0
 801e470:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801e472:	230a      	movs	r3, #10
 801e474:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801e476:	2300      	movs	r3, #0
 801e478:	83bb      	strh	r3, [r7, #28]
 801e47a:	2300      	movs	r3, #0
 801e47c:	837b      	strh	r3, [r7, #26]
 801e47e:	2300      	movs	r3, #0
 801e480:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e482:	2300      	movs	r3, #0
 801e484:	843b      	strh	r3, [r7, #32]
 801e486:	e0ae      	b.n	801e5e6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801e488:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e48c:	49a6      	ldr	r1, [pc, #664]	; (801e728 <etharp_find_entry+0x2d4>)
 801e48e:	4613      	mov	r3, r2
 801e490:	005b      	lsls	r3, r3, #1
 801e492:	4413      	add	r3, r2
 801e494:	00db      	lsls	r3, r3, #3
 801e496:	440b      	add	r3, r1
 801e498:	3314      	adds	r3, #20
 801e49a:	781b      	ldrb	r3, [r3, #0]
 801e49c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801e49e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801e4a2:	2b0a      	cmp	r3, #10
 801e4a4:	d105      	bne.n	801e4b2 <etharp_find_entry+0x5e>
 801e4a6:	7dfb      	ldrb	r3, [r7, #23]
 801e4a8:	2b00      	cmp	r3, #0
 801e4aa:	d102      	bne.n	801e4b2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801e4ac:	8c3b      	ldrh	r3, [r7, #32]
 801e4ae:	847b      	strh	r3, [r7, #34]	; 0x22
 801e4b0:	e095      	b.n	801e5de <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801e4b2:	7dfb      	ldrb	r3, [r7, #23]
 801e4b4:	2b00      	cmp	r3, #0
 801e4b6:	f000 8092 	beq.w	801e5de <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801e4ba:	7dfb      	ldrb	r3, [r7, #23]
 801e4bc:	2b01      	cmp	r3, #1
 801e4be:	d009      	beq.n	801e4d4 <etharp_find_entry+0x80>
 801e4c0:	7dfb      	ldrb	r3, [r7, #23]
 801e4c2:	2b01      	cmp	r3, #1
 801e4c4:	d806      	bhi.n	801e4d4 <etharp_find_entry+0x80>
 801e4c6:	4b99      	ldr	r3, [pc, #612]	; (801e72c <etharp_find_entry+0x2d8>)
 801e4c8:	f240 1223 	movw	r2, #291	; 0x123
 801e4cc:	4998      	ldr	r1, [pc, #608]	; (801e730 <etharp_find_entry+0x2dc>)
 801e4ce:	4899      	ldr	r0, [pc, #612]	; (801e734 <etharp_find_entry+0x2e0>)
 801e4d0:	f003 f828 	bl	8021524 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801e4d4:	68fb      	ldr	r3, [r7, #12]
 801e4d6:	2b00      	cmp	r3, #0
 801e4d8:	d020      	beq.n	801e51c <etharp_find_entry+0xc8>
 801e4da:	68fb      	ldr	r3, [r7, #12]
 801e4dc:	6819      	ldr	r1, [r3, #0]
 801e4de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e4e2:	4891      	ldr	r0, [pc, #580]	; (801e728 <etharp_find_entry+0x2d4>)
 801e4e4:	4613      	mov	r3, r2
 801e4e6:	005b      	lsls	r3, r3, #1
 801e4e8:	4413      	add	r3, r2
 801e4ea:	00db      	lsls	r3, r3, #3
 801e4ec:	4403      	add	r3, r0
 801e4ee:	3304      	adds	r3, #4
 801e4f0:	681b      	ldr	r3, [r3, #0]
 801e4f2:	4299      	cmp	r1, r3
 801e4f4:	d112      	bne.n	801e51c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801e4f6:	687b      	ldr	r3, [r7, #4]
 801e4f8:	2b00      	cmp	r3, #0
 801e4fa:	d00c      	beq.n	801e516 <etharp_find_entry+0xc2>
 801e4fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e500:	4989      	ldr	r1, [pc, #548]	; (801e728 <etharp_find_entry+0x2d4>)
 801e502:	4613      	mov	r3, r2
 801e504:	005b      	lsls	r3, r3, #1
 801e506:	4413      	add	r3, r2
 801e508:	00db      	lsls	r3, r3, #3
 801e50a:	440b      	add	r3, r1
 801e50c:	3308      	adds	r3, #8
 801e50e:	681b      	ldr	r3, [r3, #0]
 801e510:	687a      	ldr	r2, [r7, #4]
 801e512:	429a      	cmp	r2, r3
 801e514:	d102      	bne.n	801e51c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801e516:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801e51a:	e100      	b.n	801e71e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801e51c:	7dfb      	ldrb	r3, [r7, #23]
 801e51e:	2b01      	cmp	r3, #1
 801e520:	d140      	bne.n	801e5a4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801e522:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e526:	4980      	ldr	r1, [pc, #512]	; (801e728 <etharp_find_entry+0x2d4>)
 801e528:	4613      	mov	r3, r2
 801e52a:	005b      	lsls	r3, r3, #1
 801e52c:	4413      	add	r3, r2
 801e52e:	00db      	lsls	r3, r3, #3
 801e530:	440b      	add	r3, r1
 801e532:	681b      	ldr	r3, [r3, #0]
 801e534:	2b00      	cmp	r3, #0
 801e536:	d01a      	beq.n	801e56e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801e538:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e53c:	497a      	ldr	r1, [pc, #488]	; (801e728 <etharp_find_entry+0x2d4>)
 801e53e:	4613      	mov	r3, r2
 801e540:	005b      	lsls	r3, r3, #1
 801e542:	4413      	add	r3, r2
 801e544:	00db      	lsls	r3, r3, #3
 801e546:	440b      	add	r3, r1
 801e548:	3312      	adds	r3, #18
 801e54a:	881b      	ldrh	r3, [r3, #0]
 801e54c:	8bba      	ldrh	r2, [r7, #28]
 801e54e:	429a      	cmp	r2, r3
 801e550:	d845      	bhi.n	801e5de <etharp_find_entry+0x18a>
            old_queue = i;
 801e552:	8c3b      	ldrh	r3, [r7, #32]
 801e554:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801e556:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e55a:	4973      	ldr	r1, [pc, #460]	; (801e728 <etharp_find_entry+0x2d4>)
 801e55c:	4613      	mov	r3, r2
 801e55e:	005b      	lsls	r3, r3, #1
 801e560:	4413      	add	r3, r2
 801e562:	00db      	lsls	r3, r3, #3
 801e564:	440b      	add	r3, r1
 801e566:	3312      	adds	r3, #18
 801e568:	881b      	ldrh	r3, [r3, #0]
 801e56a:	83bb      	strh	r3, [r7, #28]
 801e56c:	e037      	b.n	801e5de <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801e56e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e572:	496d      	ldr	r1, [pc, #436]	; (801e728 <etharp_find_entry+0x2d4>)
 801e574:	4613      	mov	r3, r2
 801e576:	005b      	lsls	r3, r3, #1
 801e578:	4413      	add	r3, r2
 801e57a:	00db      	lsls	r3, r3, #3
 801e57c:	440b      	add	r3, r1
 801e57e:	3312      	adds	r3, #18
 801e580:	881b      	ldrh	r3, [r3, #0]
 801e582:	8b7a      	ldrh	r2, [r7, #26]
 801e584:	429a      	cmp	r2, r3
 801e586:	d82a      	bhi.n	801e5de <etharp_find_entry+0x18a>
            old_pending = i;
 801e588:	8c3b      	ldrh	r3, [r7, #32]
 801e58a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801e58c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e590:	4965      	ldr	r1, [pc, #404]	; (801e728 <etharp_find_entry+0x2d4>)
 801e592:	4613      	mov	r3, r2
 801e594:	005b      	lsls	r3, r3, #1
 801e596:	4413      	add	r3, r2
 801e598:	00db      	lsls	r3, r3, #3
 801e59a:	440b      	add	r3, r1
 801e59c:	3312      	adds	r3, #18
 801e59e:	881b      	ldrh	r3, [r3, #0]
 801e5a0:	837b      	strh	r3, [r7, #26]
 801e5a2:	e01c      	b.n	801e5de <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801e5a4:	7dfb      	ldrb	r3, [r7, #23]
 801e5a6:	2b01      	cmp	r3, #1
 801e5a8:	d919      	bls.n	801e5de <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801e5aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e5ae:	495e      	ldr	r1, [pc, #376]	; (801e728 <etharp_find_entry+0x2d4>)
 801e5b0:	4613      	mov	r3, r2
 801e5b2:	005b      	lsls	r3, r3, #1
 801e5b4:	4413      	add	r3, r2
 801e5b6:	00db      	lsls	r3, r3, #3
 801e5b8:	440b      	add	r3, r1
 801e5ba:	3312      	adds	r3, #18
 801e5bc:	881b      	ldrh	r3, [r3, #0]
 801e5be:	8b3a      	ldrh	r2, [r7, #24]
 801e5c0:	429a      	cmp	r2, r3
 801e5c2:	d80c      	bhi.n	801e5de <etharp_find_entry+0x18a>
            old_stable = i;
 801e5c4:	8c3b      	ldrh	r3, [r7, #32]
 801e5c6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801e5c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e5cc:	4956      	ldr	r1, [pc, #344]	; (801e728 <etharp_find_entry+0x2d4>)
 801e5ce:	4613      	mov	r3, r2
 801e5d0:	005b      	lsls	r3, r3, #1
 801e5d2:	4413      	add	r3, r2
 801e5d4:	00db      	lsls	r3, r3, #3
 801e5d6:	440b      	add	r3, r1
 801e5d8:	3312      	adds	r3, #18
 801e5da:	881b      	ldrh	r3, [r3, #0]
 801e5dc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e5de:	8c3b      	ldrh	r3, [r7, #32]
 801e5e0:	3301      	adds	r3, #1
 801e5e2:	b29b      	uxth	r3, r3
 801e5e4:	843b      	strh	r3, [r7, #32]
 801e5e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801e5ea:	2b09      	cmp	r3, #9
 801e5ec:	f77f af4c 	ble.w	801e488 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801e5f0:	7afb      	ldrb	r3, [r7, #11]
 801e5f2:	f003 0302 	and.w	r3, r3, #2
 801e5f6:	2b00      	cmp	r3, #0
 801e5f8:	d108      	bne.n	801e60c <etharp_find_entry+0x1b8>
 801e5fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801e5fe:	2b0a      	cmp	r3, #10
 801e600:	d107      	bne.n	801e612 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801e602:	7afb      	ldrb	r3, [r7, #11]
 801e604:	f003 0301 	and.w	r3, r3, #1
 801e608:	2b00      	cmp	r3, #0
 801e60a:	d102      	bne.n	801e612 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801e60c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e610:	e085      	b.n	801e71e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801e612:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801e616:	2b09      	cmp	r3, #9
 801e618:	dc02      	bgt.n	801e620 <etharp_find_entry+0x1cc>
    i = empty;
 801e61a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e61c:	843b      	strh	r3, [r7, #32]
 801e61e:	e039      	b.n	801e694 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801e620:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801e624:	2b09      	cmp	r3, #9
 801e626:	dc14      	bgt.n	801e652 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801e628:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e62a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801e62c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e630:	493d      	ldr	r1, [pc, #244]	; (801e728 <etharp_find_entry+0x2d4>)
 801e632:	4613      	mov	r3, r2
 801e634:	005b      	lsls	r3, r3, #1
 801e636:	4413      	add	r3, r2
 801e638:	00db      	lsls	r3, r3, #3
 801e63a:	440b      	add	r3, r1
 801e63c:	681b      	ldr	r3, [r3, #0]
 801e63e:	2b00      	cmp	r3, #0
 801e640:	d018      	beq.n	801e674 <etharp_find_entry+0x220>
 801e642:	4b3a      	ldr	r3, [pc, #232]	; (801e72c <etharp_find_entry+0x2d8>)
 801e644:	f240 126d 	movw	r2, #365	; 0x16d
 801e648:	493b      	ldr	r1, [pc, #236]	; (801e738 <etharp_find_entry+0x2e4>)
 801e64a:	483a      	ldr	r0, [pc, #232]	; (801e734 <etharp_find_entry+0x2e0>)
 801e64c:	f002 ff6a 	bl	8021524 <iprintf>
 801e650:	e010      	b.n	801e674 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801e652:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801e656:	2b09      	cmp	r3, #9
 801e658:	dc02      	bgt.n	801e660 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801e65a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801e65c:	843b      	strh	r3, [r7, #32]
 801e65e:	e009      	b.n	801e674 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801e660:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801e664:	2b09      	cmp	r3, #9
 801e666:	dc02      	bgt.n	801e66e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801e668:	8bfb      	ldrh	r3, [r7, #30]
 801e66a:	843b      	strh	r3, [r7, #32]
 801e66c:	e002      	b.n	801e674 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801e66e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e672:	e054      	b.n	801e71e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801e674:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801e678:	2b09      	cmp	r3, #9
 801e67a:	dd06      	ble.n	801e68a <etharp_find_entry+0x236>
 801e67c:	4b2b      	ldr	r3, [pc, #172]	; (801e72c <etharp_find_entry+0x2d8>)
 801e67e:	f240 127f 	movw	r2, #383	; 0x17f
 801e682:	492e      	ldr	r1, [pc, #184]	; (801e73c <etharp_find_entry+0x2e8>)
 801e684:	482b      	ldr	r0, [pc, #172]	; (801e734 <etharp_find_entry+0x2e0>)
 801e686:	f002 ff4d 	bl	8021524 <iprintf>
    etharp_free_entry(i);
 801e68a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801e68e:	4618      	mov	r0, r3
 801e690:	f7ff fe06 	bl	801e2a0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801e694:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801e698:	2b09      	cmp	r3, #9
 801e69a:	dd06      	ble.n	801e6aa <etharp_find_entry+0x256>
 801e69c:	4b23      	ldr	r3, [pc, #140]	; (801e72c <etharp_find_entry+0x2d8>)
 801e69e:	f240 1283 	movw	r2, #387	; 0x183
 801e6a2:	4926      	ldr	r1, [pc, #152]	; (801e73c <etharp_find_entry+0x2e8>)
 801e6a4:	4823      	ldr	r0, [pc, #140]	; (801e734 <etharp_find_entry+0x2e0>)
 801e6a6:	f002 ff3d 	bl	8021524 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801e6aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e6ae:	491e      	ldr	r1, [pc, #120]	; (801e728 <etharp_find_entry+0x2d4>)
 801e6b0:	4613      	mov	r3, r2
 801e6b2:	005b      	lsls	r3, r3, #1
 801e6b4:	4413      	add	r3, r2
 801e6b6:	00db      	lsls	r3, r3, #3
 801e6b8:	440b      	add	r3, r1
 801e6ba:	3314      	adds	r3, #20
 801e6bc:	781b      	ldrb	r3, [r3, #0]
 801e6be:	2b00      	cmp	r3, #0
 801e6c0:	d006      	beq.n	801e6d0 <etharp_find_entry+0x27c>
 801e6c2:	4b1a      	ldr	r3, [pc, #104]	; (801e72c <etharp_find_entry+0x2d8>)
 801e6c4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801e6c8:	491d      	ldr	r1, [pc, #116]	; (801e740 <etharp_find_entry+0x2ec>)
 801e6ca:	481a      	ldr	r0, [pc, #104]	; (801e734 <etharp_find_entry+0x2e0>)
 801e6cc:	f002 ff2a 	bl	8021524 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801e6d0:	68fb      	ldr	r3, [r7, #12]
 801e6d2:	2b00      	cmp	r3, #0
 801e6d4:	d00b      	beq.n	801e6ee <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801e6d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e6da:	68fb      	ldr	r3, [r7, #12]
 801e6dc:	6819      	ldr	r1, [r3, #0]
 801e6de:	4812      	ldr	r0, [pc, #72]	; (801e728 <etharp_find_entry+0x2d4>)
 801e6e0:	4613      	mov	r3, r2
 801e6e2:	005b      	lsls	r3, r3, #1
 801e6e4:	4413      	add	r3, r2
 801e6e6:	00db      	lsls	r3, r3, #3
 801e6e8:	4403      	add	r3, r0
 801e6ea:	3304      	adds	r3, #4
 801e6ec:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801e6ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e6f2:	490d      	ldr	r1, [pc, #52]	; (801e728 <etharp_find_entry+0x2d4>)
 801e6f4:	4613      	mov	r3, r2
 801e6f6:	005b      	lsls	r3, r3, #1
 801e6f8:	4413      	add	r3, r2
 801e6fa:	00db      	lsls	r3, r3, #3
 801e6fc:	440b      	add	r3, r1
 801e6fe:	3312      	adds	r3, #18
 801e700:	2200      	movs	r2, #0
 801e702:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801e704:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801e708:	4907      	ldr	r1, [pc, #28]	; (801e728 <etharp_find_entry+0x2d4>)
 801e70a:	4613      	mov	r3, r2
 801e70c:	005b      	lsls	r3, r3, #1
 801e70e:	4413      	add	r3, r2
 801e710:	00db      	lsls	r3, r3, #3
 801e712:	440b      	add	r3, r1
 801e714:	3308      	adds	r3, #8
 801e716:	687a      	ldr	r2, [r7, #4]
 801e718:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801e71a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801e71e:	4618      	mov	r0, r3
 801e720:	3728      	adds	r7, #40	; 0x28
 801e722:	46bd      	mov	sp, r7
 801e724:	bd80      	pop	{r7, pc}
 801e726:	bf00      	nop
 801e728:	20005320 	.word	0x20005320
 801e72c:	0802695c 	.word	0x0802695c
 801e730:	08026994 	.word	0x08026994
 801e734:	080269d4 	.word	0x080269d4
 801e738:	080269fc 	.word	0x080269fc
 801e73c:	08026a14 	.word	0x08026a14
 801e740:	08026a28 	.word	0x08026a28

0801e744 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801e744:	b580      	push	{r7, lr}
 801e746:	b088      	sub	sp, #32
 801e748:	af02      	add	r7, sp, #8
 801e74a:	60f8      	str	r0, [r7, #12]
 801e74c:	60b9      	str	r1, [r7, #8]
 801e74e:	607a      	str	r2, [r7, #4]
 801e750:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801e752:	68fb      	ldr	r3, [r7, #12]
 801e754:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801e758:	2b06      	cmp	r3, #6
 801e75a:	d006      	beq.n	801e76a <etharp_update_arp_entry+0x26>
 801e75c:	4b48      	ldr	r3, [pc, #288]	; (801e880 <etharp_update_arp_entry+0x13c>)
 801e75e:	f240 12a9 	movw	r2, #425	; 0x1a9
 801e762:	4948      	ldr	r1, [pc, #288]	; (801e884 <etharp_update_arp_entry+0x140>)
 801e764:	4848      	ldr	r0, [pc, #288]	; (801e888 <etharp_update_arp_entry+0x144>)
 801e766:	f002 fedd 	bl	8021524 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801e76a:	68bb      	ldr	r3, [r7, #8]
 801e76c:	2b00      	cmp	r3, #0
 801e76e:	d012      	beq.n	801e796 <etharp_update_arp_entry+0x52>
 801e770:	68bb      	ldr	r3, [r7, #8]
 801e772:	681b      	ldr	r3, [r3, #0]
 801e774:	2b00      	cmp	r3, #0
 801e776:	d00e      	beq.n	801e796 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801e778:	68bb      	ldr	r3, [r7, #8]
 801e77a:	681b      	ldr	r3, [r3, #0]
 801e77c:	68f9      	ldr	r1, [r7, #12]
 801e77e:	4618      	mov	r0, r3
 801e780:	f001 f8fe 	bl	801f980 <ip4_addr_isbroadcast_u32>
 801e784:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801e786:	2b00      	cmp	r3, #0
 801e788:	d105      	bne.n	801e796 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801e78a:	68bb      	ldr	r3, [r7, #8]
 801e78c:	681b      	ldr	r3, [r3, #0]
 801e78e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801e792:	2be0      	cmp	r3, #224	; 0xe0
 801e794:	d102      	bne.n	801e79c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801e796:	f06f 030f 	mvn.w	r3, #15
 801e79a:	e06c      	b.n	801e876 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801e79c:	78fb      	ldrb	r3, [r7, #3]
 801e79e:	68fa      	ldr	r2, [r7, #12]
 801e7a0:	4619      	mov	r1, r3
 801e7a2:	68b8      	ldr	r0, [r7, #8]
 801e7a4:	f7ff fe56 	bl	801e454 <etharp_find_entry>
 801e7a8:	4603      	mov	r3, r0
 801e7aa:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801e7ac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801e7b0:	2b00      	cmp	r3, #0
 801e7b2:	da02      	bge.n	801e7ba <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801e7b4:	8afb      	ldrh	r3, [r7, #22]
 801e7b6:	b25b      	sxtb	r3, r3
 801e7b8:	e05d      	b.n	801e876 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801e7ba:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e7be:	4933      	ldr	r1, [pc, #204]	; (801e88c <etharp_update_arp_entry+0x148>)
 801e7c0:	4613      	mov	r3, r2
 801e7c2:	005b      	lsls	r3, r3, #1
 801e7c4:	4413      	add	r3, r2
 801e7c6:	00db      	lsls	r3, r3, #3
 801e7c8:	440b      	add	r3, r1
 801e7ca:	3314      	adds	r3, #20
 801e7cc:	2202      	movs	r2, #2
 801e7ce:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801e7d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e7d4:	492d      	ldr	r1, [pc, #180]	; (801e88c <etharp_update_arp_entry+0x148>)
 801e7d6:	4613      	mov	r3, r2
 801e7d8:	005b      	lsls	r3, r3, #1
 801e7da:	4413      	add	r3, r2
 801e7dc:	00db      	lsls	r3, r3, #3
 801e7de:	440b      	add	r3, r1
 801e7e0:	3308      	adds	r3, #8
 801e7e2:	68fa      	ldr	r2, [r7, #12]
 801e7e4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801e7e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e7ea:	4613      	mov	r3, r2
 801e7ec:	005b      	lsls	r3, r3, #1
 801e7ee:	4413      	add	r3, r2
 801e7f0:	00db      	lsls	r3, r3, #3
 801e7f2:	3308      	adds	r3, #8
 801e7f4:	4a25      	ldr	r2, [pc, #148]	; (801e88c <etharp_update_arp_entry+0x148>)
 801e7f6:	4413      	add	r3, r2
 801e7f8:	3304      	adds	r3, #4
 801e7fa:	2206      	movs	r2, #6
 801e7fc:	6879      	ldr	r1, [r7, #4]
 801e7fe:	4618      	mov	r0, r3
 801e800:	f002 fdb6 	bl	8021370 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801e804:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e808:	4920      	ldr	r1, [pc, #128]	; (801e88c <etharp_update_arp_entry+0x148>)
 801e80a:	4613      	mov	r3, r2
 801e80c:	005b      	lsls	r3, r3, #1
 801e80e:	4413      	add	r3, r2
 801e810:	00db      	lsls	r3, r3, #3
 801e812:	440b      	add	r3, r1
 801e814:	3312      	adds	r3, #18
 801e816:	2200      	movs	r2, #0
 801e818:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801e81a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e81e:	491b      	ldr	r1, [pc, #108]	; (801e88c <etharp_update_arp_entry+0x148>)
 801e820:	4613      	mov	r3, r2
 801e822:	005b      	lsls	r3, r3, #1
 801e824:	4413      	add	r3, r2
 801e826:	00db      	lsls	r3, r3, #3
 801e828:	440b      	add	r3, r1
 801e82a:	681b      	ldr	r3, [r3, #0]
 801e82c:	2b00      	cmp	r3, #0
 801e82e:	d021      	beq.n	801e874 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801e830:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e834:	4915      	ldr	r1, [pc, #84]	; (801e88c <etharp_update_arp_entry+0x148>)
 801e836:	4613      	mov	r3, r2
 801e838:	005b      	lsls	r3, r3, #1
 801e83a:	4413      	add	r3, r2
 801e83c:	00db      	lsls	r3, r3, #3
 801e83e:	440b      	add	r3, r1
 801e840:	681b      	ldr	r3, [r3, #0]
 801e842:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801e844:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e848:	4910      	ldr	r1, [pc, #64]	; (801e88c <etharp_update_arp_entry+0x148>)
 801e84a:	4613      	mov	r3, r2
 801e84c:	005b      	lsls	r3, r3, #1
 801e84e:	4413      	add	r3, r2
 801e850:	00db      	lsls	r3, r3, #3
 801e852:	440b      	add	r3, r1
 801e854:	2200      	movs	r2, #0
 801e856:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801e858:	68fb      	ldr	r3, [r7, #12]
 801e85a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801e85e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801e862:	9300      	str	r3, [sp, #0]
 801e864:	687b      	ldr	r3, [r7, #4]
 801e866:	6939      	ldr	r1, [r7, #16]
 801e868:	68f8      	ldr	r0, [r7, #12]
 801e86a:	f001 ff91 	bl	8020790 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801e86e:	6938      	ldr	r0, [r7, #16]
 801e870:	f7f8 fef2 	bl	8017658 <pbuf_free>
  }
  return ERR_OK;
 801e874:	2300      	movs	r3, #0
}
 801e876:	4618      	mov	r0, r3
 801e878:	3718      	adds	r7, #24
 801e87a:	46bd      	mov	sp, r7
 801e87c:	bd80      	pop	{r7, pc}
 801e87e:	bf00      	nop
 801e880:	0802695c 	.word	0x0802695c
 801e884:	08026a54 	.word	0x08026a54
 801e888:	080269d4 	.word	0x080269d4
 801e88c:	20005320 	.word	0x20005320

0801e890 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801e890:	b580      	push	{r7, lr}
 801e892:	b084      	sub	sp, #16
 801e894:	af00      	add	r7, sp, #0
 801e896:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e898:	2300      	movs	r3, #0
 801e89a:	60fb      	str	r3, [r7, #12]
 801e89c:	e01e      	b.n	801e8dc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801e89e:	4913      	ldr	r1, [pc, #76]	; (801e8ec <etharp_cleanup_netif+0x5c>)
 801e8a0:	68fa      	ldr	r2, [r7, #12]
 801e8a2:	4613      	mov	r3, r2
 801e8a4:	005b      	lsls	r3, r3, #1
 801e8a6:	4413      	add	r3, r2
 801e8a8:	00db      	lsls	r3, r3, #3
 801e8aa:	440b      	add	r3, r1
 801e8ac:	3314      	adds	r3, #20
 801e8ae:	781b      	ldrb	r3, [r3, #0]
 801e8b0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801e8b2:	7afb      	ldrb	r3, [r7, #11]
 801e8b4:	2b00      	cmp	r3, #0
 801e8b6:	d00e      	beq.n	801e8d6 <etharp_cleanup_netif+0x46>
 801e8b8:	490c      	ldr	r1, [pc, #48]	; (801e8ec <etharp_cleanup_netif+0x5c>)
 801e8ba:	68fa      	ldr	r2, [r7, #12]
 801e8bc:	4613      	mov	r3, r2
 801e8be:	005b      	lsls	r3, r3, #1
 801e8c0:	4413      	add	r3, r2
 801e8c2:	00db      	lsls	r3, r3, #3
 801e8c4:	440b      	add	r3, r1
 801e8c6:	3308      	adds	r3, #8
 801e8c8:	681b      	ldr	r3, [r3, #0]
 801e8ca:	687a      	ldr	r2, [r7, #4]
 801e8cc:	429a      	cmp	r2, r3
 801e8ce:	d102      	bne.n	801e8d6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801e8d0:	68f8      	ldr	r0, [r7, #12]
 801e8d2:	f7ff fce5 	bl	801e2a0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801e8d6:	68fb      	ldr	r3, [r7, #12]
 801e8d8:	3301      	adds	r3, #1
 801e8da:	60fb      	str	r3, [r7, #12]
 801e8dc:	68fb      	ldr	r3, [r7, #12]
 801e8de:	2b09      	cmp	r3, #9
 801e8e0:	dddd      	ble.n	801e89e <etharp_cleanup_netif+0xe>
    }
  }
}
 801e8e2:	bf00      	nop
 801e8e4:	bf00      	nop
 801e8e6:	3710      	adds	r7, #16
 801e8e8:	46bd      	mov	sp, r7
 801e8ea:	bd80      	pop	{r7, pc}
 801e8ec:	20005320 	.word	0x20005320

0801e8f0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801e8f0:	b5b0      	push	{r4, r5, r7, lr}
 801e8f2:	b08a      	sub	sp, #40	; 0x28
 801e8f4:	af04      	add	r7, sp, #16
 801e8f6:	6078      	str	r0, [r7, #4]
 801e8f8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801e8fa:	683b      	ldr	r3, [r7, #0]
 801e8fc:	2b00      	cmp	r3, #0
 801e8fe:	d107      	bne.n	801e910 <etharp_input+0x20>
 801e900:	4b3d      	ldr	r3, [pc, #244]	; (801e9f8 <etharp_input+0x108>)
 801e902:	f240 228a 	movw	r2, #650	; 0x28a
 801e906:	493d      	ldr	r1, [pc, #244]	; (801e9fc <etharp_input+0x10c>)
 801e908:	483d      	ldr	r0, [pc, #244]	; (801ea00 <etharp_input+0x110>)
 801e90a:	f002 fe0b 	bl	8021524 <iprintf>
 801e90e:	e06f      	b.n	801e9f0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801e910:	687b      	ldr	r3, [r7, #4]
 801e912:	685b      	ldr	r3, [r3, #4]
 801e914:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801e916:	693b      	ldr	r3, [r7, #16]
 801e918:	881b      	ldrh	r3, [r3, #0]
 801e91a:	b29b      	uxth	r3, r3
 801e91c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e920:	d10c      	bne.n	801e93c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801e922:	693b      	ldr	r3, [r7, #16]
 801e924:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801e926:	2b06      	cmp	r3, #6
 801e928:	d108      	bne.n	801e93c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801e92a:	693b      	ldr	r3, [r7, #16]
 801e92c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801e92e:	2b04      	cmp	r3, #4
 801e930:	d104      	bne.n	801e93c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801e932:	693b      	ldr	r3, [r7, #16]
 801e934:	885b      	ldrh	r3, [r3, #2]
 801e936:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801e938:	2b08      	cmp	r3, #8
 801e93a:	d003      	beq.n	801e944 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801e93c:	6878      	ldr	r0, [r7, #4]
 801e93e:	f7f8 fe8b 	bl	8017658 <pbuf_free>
    return;
 801e942:	e055      	b.n	801e9f0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801e944:	693b      	ldr	r3, [r7, #16]
 801e946:	330e      	adds	r3, #14
 801e948:	681b      	ldr	r3, [r3, #0]
 801e94a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801e94c:	693b      	ldr	r3, [r7, #16]
 801e94e:	3318      	adds	r3, #24
 801e950:	681b      	ldr	r3, [r3, #0]
 801e952:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801e954:	683b      	ldr	r3, [r7, #0]
 801e956:	3304      	adds	r3, #4
 801e958:	681b      	ldr	r3, [r3, #0]
 801e95a:	2b00      	cmp	r3, #0
 801e95c:	d102      	bne.n	801e964 <etharp_input+0x74>
    for_us = 0;
 801e95e:	2300      	movs	r3, #0
 801e960:	75fb      	strb	r3, [r7, #23]
 801e962:	e009      	b.n	801e978 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801e964:	68ba      	ldr	r2, [r7, #8]
 801e966:	683b      	ldr	r3, [r7, #0]
 801e968:	3304      	adds	r3, #4
 801e96a:	681b      	ldr	r3, [r3, #0]
 801e96c:	429a      	cmp	r2, r3
 801e96e:	bf0c      	ite	eq
 801e970:	2301      	moveq	r3, #1
 801e972:	2300      	movne	r3, #0
 801e974:	b2db      	uxtb	r3, r3
 801e976:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801e978:	693b      	ldr	r3, [r7, #16]
 801e97a:	f103 0208 	add.w	r2, r3, #8
 801e97e:	7dfb      	ldrb	r3, [r7, #23]
 801e980:	2b00      	cmp	r3, #0
 801e982:	d001      	beq.n	801e988 <etharp_input+0x98>
 801e984:	2301      	movs	r3, #1
 801e986:	e000      	b.n	801e98a <etharp_input+0x9a>
 801e988:	2302      	movs	r3, #2
 801e98a:	f107 010c 	add.w	r1, r7, #12
 801e98e:	6838      	ldr	r0, [r7, #0]
 801e990:	f7ff fed8 	bl	801e744 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801e994:	693b      	ldr	r3, [r7, #16]
 801e996:	88db      	ldrh	r3, [r3, #6]
 801e998:	b29b      	uxth	r3, r3
 801e99a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e99e:	d003      	beq.n	801e9a8 <etharp_input+0xb8>
 801e9a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e9a4:	d01e      	beq.n	801e9e4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801e9a6:	e020      	b.n	801e9ea <etharp_input+0xfa>
      if (for_us) {
 801e9a8:	7dfb      	ldrb	r3, [r7, #23]
 801e9aa:	2b00      	cmp	r3, #0
 801e9ac:	d01c      	beq.n	801e9e8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801e9ae:	683b      	ldr	r3, [r7, #0]
 801e9b0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801e9b4:	693b      	ldr	r3, [r7, #16]
 801e9b6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801e9ba:	683b      	ldr	r3, [r7, #0]
 801e9bc:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801e9c0:	683b      	ldr	r3, [r7, #0]
 801e9c2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801e9c4:	693a      	ldr	r2, [r7, #16]
 801e9c6:	3208      	adds	r2, #8
        etharp_raw(netif,
 801e9c8:	2102      	movs	r1, #2
 801e9ca:	9103      	str	r1, [sp, #12]
 801e9cc:	f107 010c 	add.w	r1, r7, #12
 801e9d0:	9102      	str	r1, [sp, #8]
 801e9d2:	9201      	str	r2, [sp, #4]
 801e9d4:	9300      	str	r3, [sp, #0]
 801e9d6:	462b      	mov	r3, r5
 801e9d8:	4622      	mov	r2, r4
 801e9da:	4601      	mov	r1, r0
 801e9dc:	6838      	ldr	r0, [r7, #0]
 801e9de:	f000 faeb 	bl	801efb8 <etharp_raw>
      break;
 801e9e2:	e001      	b.n	801e9e8 <etharp_input+0xf8>
      break;
 801e9e4:	bf00      	nop
 801e9e6:	e000      	b.n	801e9ea <etharp_input+0xfa>
      break;
 801e9e8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801e9ea:	6878      	ldr	r0, [r7, #4]
 801e9ec:	f7f8 fe34 	bl	8017658 <pbuf_free>
}
 801e9f0:	3718      	adds	r7, #24
 801e9f2:	46bd      	mov	sp, r7
 801e9f4:	bdb0      	pop	{r4, r5, r7, pc}
 801e9f6:	bf00      	nop
 801e9f8:	0802695c 	.word	0x0802695c
 801e9fc:	08026aac 	.word	0x08026aac
 801ea00:	080269d4 	.word	0x080269d4

0801ea04 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801ea04:	b580      	push	{r7, lr}
 801ea06:	b086      	sub	sp, #24
 801ea08:	af02      	add	r7, sp, #8
 801ea0a:	60f8      	str	r0, [r7, #12]
 801ea0c:	60b9      	str	r1, [r7, #8]
 801ea0e:	4613      	mov	r3, r2
 801ea10:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801ea12:	79fa      	ldrb	r2, [r7, #7]
 801ea14:	4944      	ldr	r1, [pc, #272]	; (801eb28 <etharp_output_to_arp_index+0x124>)
 801ea16:	4613      	mov	r3, r2
 801ea18:	005b      	lsls	r3, r3, #1
 801ea1a:	4413      	add	r3, r2
 801ea1c:	00db      	lsls	r3, r3, #3
 801ea1e:	440b      	add	r3, r1
 801ea20:	3314      	adds	r3, #20
 801ea22:	781b      	ldrb	r3, [r3, #0]
 801ea24:	2b01      	cmp	r3, #1
 801ea26:	d806      	bhi.n	801ea36 <etharp_output_to_arp_index+0x32>
 801ea28:	4b40      	ldr	r3, [pc, #256]	; (801eb2c <etharp_output_to_arp_index+0x128>)
 801ea2a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801ea2e:	4940      	ldr	r1, [pc, #256]	; (801eb30 <etharp_output_to_arp_index+0x12c>)
 801ea30:	4840      	ldr	r0, [pc, #256]	; (801eb34 <etharp_output_to_arp_index+0x130>)
 801ea32:	f002 fd77 	bl	8021524 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801ea36:	79fa      	ldrb	r2, [r7, #7]
 801ea38:	493b      	ldr	r1, [pc, #236]	; (801eb28 <etharp_output_to_arp_index+0x124>)
 801ea3a:	4613      	mov	r3, r2
 801ea3c:	005b      	lsls	r3, r3, #1
 801ea3e:	4413      	add	r3, r2
 801ea40:	00db      	lsls	r3, r3, #3
 801ea42:	440b      	add	r3, r1
 801ea44:	3314      	adds	r3, #20
 801ea46:	781b      	ldrb	r3, [r3, #0]
 801ea48:	2b02      	cmp	r3, #2
 801ea4a:	d153      	bne.n	801eaf4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801ea4c:	79fa      	ldrb	r2, [r7, #7]
 801ea4e:	4936      	ldr	r1, [pc, #216]	; (801eb28 <etharp_output_to_arp_index+0x124>)
 801ea50:	4613      	mov	r3, r2
 801ea52:	005b      	lsls	r3, r3, #1
 801ea54:	4413      	add	r3, r2
 801ea56:	00db      	lsls	r3, r3, #3
 801ea58:	440b      	add	r3, r1
 801ea5a:	3312      	adds	r3, #18
 801ea5c:	881b      	ldrh	r3, [r3, #0]
 801ea5e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801ea62:	d919      	bls.n	801ea98 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801ea64:	79fa      	ldrb	r2, [r7, #7]
 801ea66:	4613      	mov	r3, r2
 801ea68:	005b      	lsls	r3, r3, #1
 801ea6a:	4413      	add	r3, r2
 801ea6c:	00db      	lsls	r3, r3, #3
 801ea6e:	4a2e      	ldr	r2, [pc, #184]	; (801eb28 <etharp_output_to_arp_index+0x124>)
 801ea70:	4413      	add	r3, r2
 801ea72:	3304      	adds	r3, #4
 801ea74:	4619      	mov	r1, r3
 801ea76:	68f8      	ldr	r0, [r7, #12]
 801ea78:	f000 fb4c 	bl	801f114 <etharp_request>
 801ea7c:	4603      	mov	r3, r0
 801ea7e:	2b00      	cmp	r3, #0
 801ea80:	d138      	bne.n	801eaf4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801ea82:	79fa      	ldrb	r2, [r7, #7]
 801ea84:	4928      	ldr	r1, [pc, #160]	; (801eb28 <etharp_output_to_arp_index+0x124>)
 801ea86:	4613      	mov	r3, r2
 801ea88:	005b      	lsls	r3, r3, #1
 801ea8a:	4413      	add	r3, r2
 801ea8c:	00db      	lsls	r3, r3, #3
 801ea8e:	440b      	add	r3, r1
 801ea90:	3314      	adds	r3, #20
 801ea92:	2203      	movs	r2, #3
 801ea94:	701a      	strb	r2, [r3, #0]
 801ea96:	e02d      	b.n	801eaf4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801ea98:	79fa      	ldrb	r2, [r7, #7]
 801ea9a:	4923      	ldr	r1, [pc, #140]	; (801eb28 <etharp_output_to_arp_index+0x124>)
 801ea9c:	4613      	mov	r3, r2
 801ea9e:	005b      	lsls	r3, r3, #1
 801eaa0:	4413      	add	r3, r2
 801eaa2:	00db      	lsls	r3, r3, #3
 801eaa4:	440b      	add	r3, r1
 801eaa6:	3312      	adds	r3, #18
 801eaa8:	881b      	ldrh	r3, [r3, #0]
 801eaaa:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801eaae:	d321      	bcc.n	801eaf4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801eab0:	79fa      	ldrb	r2, [r7, #7]
 801eab2:	4613      	mov	r3, r2
 801eab4:	005b      	lsls	r3, r3, #1
 801eab6:	4413      	add	r3, r2
 801eab8:	00db      	lsls	r3, r3, #3
 801eaba:	4a1b      	ldr	r2, [pc, #108]	; (801eb28 <etharp_output_to_arp_index+0x124>)
 801eabc:	4413      	add	r3, r2
 801eabe:	1d19      	adds	r1, r3, #4
 801eac0:	79fa      	ldrb	r2, [r7, #7]
 801eac2:	4613      	mov	r3, r2
 801eac4:	005b      	lsls	r3, r3, #1
 801eac6:	4413      	add	r3, r2
 801eac8:	00db      	lsls	r3, r3, #3
 801eaca:	3308      	adds	r3, #8
 801eacc:	4a16      	ldr	r2, [pc, #88]	; (801eb28 <etharp_output_to_arp_index+0x124>)
 801eace:	4413      	add	r3, r2
 801ead0:	3304      	adds	r3, #4
 801ead2:	461a      	mov	r2, r3
 801ead4:	68f8      	ldr	r0, [r7, #12]
 801ead6:	f000 fafb 	bl	801f0d0 <etharp_request_dst>
 801eada:	4603      	mov	r3, r0
 801eadc:	2b00      	cmp	r3, #0
 801eade:	d109      	bne.n	801eaf4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801eae0:	79fa      	ldrb	r2, [r7, #7]
 801eae2:	4911      	ldr	r1, [pc, #68]	; (801eb28 <etharp_output_to_arp_index+0x124>)
 801eae4:	4613      	mov	r3, r2
 801eae6:	005b      	lsls	r3, r3, #1
 801eae8:	4413      	add	r3, r2
 801eaea:	00db      	lsls	r3, r3, #3
 801eaec:	440b      	add	r3, r1
 801eaee:	3314      	adds	r3, #20
 801eaf0:	2203      	movs	r2, #3
 801eaf2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801eaf4:	68fb      	ldr	r3, [r7, #12]
 801eaf6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801eafa:	79fa      	ldrb	r2, [r7, #7]
 801eafc:	4613      	mov	r3, r2
 801eafe:	005b      	lsls	r3, r3, #1
 801eb00:	4413      	add	r3, r2
 801eb02:	00db      	lsls	r3, r3, #3
 801eb04:	3308      	adds	r3, #8
 801eb06:	4a08      	ldr	r2, [pc, #32]	; (801eb28 <etharp_output_to_arp_index+0x124>)
 801eb08:	4413      	add	r3, r2
 801eb0a:	3304      	adds	r3, #4
 801eb0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801eb10:	9200      	str	r2, [sp, #0]
 801eb12:	460a      	mov	r2, r1
 801eb14:	68b9      	ldr	r1, [r7, #8]
 801eb16:	68f8      	ldr	r0, [r7, #12]
 801eb18:	f001 fe3a 	bl	8020790 <ethernet_output>
 801eb1c:	4603      	mov	r3, r0
}
 801eb1e:	4618      	mov	r0, r3
 801eb20:	3710      	adds	r7, #16
 801eb22:	46bd      	mov	sp, r7
 801eb24:	bd80      	pop	{r7, pc}
 801eb26:	bf00      	nop
 801eb28:	20005320 	.word	0x20005320
 801eb2c:	0802695c 	.word	0x0802695c
 801eb30:	08026acc 	.word	0x08026acc
 801eb34:	080269d4 	.word	0x080269d4

0801eb38 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801eb38:	b580      	push	{r7, lr}
 801eb3a:	b08a      	sub	sp, #40	; 0x28
 801eb3c:	af02      	add	r7, sp, #8
 801eb3e:	60f8      	str	r0, [r7, #12]
 801eb40:	60b9      	str	r1, [r7, #8]
 801eb42:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801eb44:	687b      	ldr	r3, [r7, #4]
 801eb46:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801eb48:	68fb      	ldr	r3, [r7, #12]
 801eb4a:	2b00      	cmp	r3, #0
 801eb4c:	d106      	bne.n	801eb5c <etharp_output+0x24>
 801eb4e:	4b73      	ldr	r3, [pc, #460]	; (801ed1c <etharp_output+0x1e4>)
 801eb50:	f240 321e 	movw	r2, #798	; 0x31e
 801eb54:	4972      	ldr	r1, [pc, #456]	; (801ed20 <etharp_output+0x1e8>)
 801eb56:	4873      	ldr	r0, [pc, #460]	; (801ed24 <etharp_output+0x1ec>)
 801eb58:	f002 fce4 	bl	8021524 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801eb5c:	68bb      	ldr	r3, [r7, #8]
 801eb5e:	2b00      	cmp	r3, #0
 801eb60:	d106      	bne.n	801eb70 <etharp_output+0x38>
 801eb62:	4b6e      	ldr	r3, [pc, #440]	; (801ed1c <etharp_output+0x1e4>)
 801eb64:	f240 321f 	movw	r2, #799	; 0x31f
 801eb68:	496f      	ldr	r1, [pc, #444]	; (801ed28 <etharp_output+0x1f0>)
 801eb6a:	486e      	ldr	r0, [pc, #440]	; (801ed24 <etharp_output+0x1ec>)
 801eb6c:	f002 fcda 	bl	8021524 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801eb70:	687b      	ldr	r3, [r7, #4]
 801eb72:	2b00      	cmp	r3, #0
 801eb74:	d106      	bne.n	801eb84 <etharp_output+0x4c>
 801eb76:	4b69      	ldr	r3, [pc, #420]	; (801ed1c <etharp_output+0x1e4>)
 801eb78:	f44f 7248 	mov.w	r2, #800	; 0x320
 801eb7c:	496b      	ldr	r1, [pc, #428]	; (801ed2c <etharp_output+0x1f4>)
 801eb7e:	4869      	ldr	r0, [pc, #420]	; (801ed24 <etharp_output+0x1ec>)
 801eb80:	f002 fcd0 	bl	8021524 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801eb84:	687b      	ldr	r3, [r7, #4]
 801eb86:	681b      	ldr	r3, [r3, #0]
 801eb88:	68f9      	ldr	r1, [r7, #12]
 801eb8a:	4618      	mov	r0, r3
 801eb8c:	f000 fef8 	bl	801f980 <ip4_addr_isbroadcast_u32>
 801eb90:	4603      	mov	r3, r0
 801eb92:	2b00      	cmp	r3, #0
 801eb94:	d002      	beq.n	801eb9c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801eb96:	4b66      	ldr	r3, [pc, #408]	; (801ed30 <etharp_output+0x1f8>)
 801eb98:	61fb      	str	r3, [r7, #28]
 801eb9a:	e0af      	b.n	801ecfc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801eb9c:	687b      	ldr	r3, [r7, #4]
 801eb9e:	681b      	ldr	r3, [r3, #0]
 801eba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801eba4:	2be0      	cmp	r3, #224	; 0xe0
 801eba6:	d118      	bne.n	801ebda <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801eba8:	2301      	movs	r3, #1
 801ebaa:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801ebac:	2300      	movs	r3, #0
 801ebae:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801ebb0:	235e      	movs	r3, #94	; 0x5e
 801ebb2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801ebb4:	687b      	ldr	r3, [r7, #4]
 801ebb6:	3301      	adds	r3, #1
 801ebb8:	781b      	ldrb	r3, [r3, #0]
 801ebba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ebbe:	b2db      	uxtb	r3, r3
 801ebc0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801ebc2:	687b      	ldr	r3, [r7, #4]
 801ebc4:	3302      	adds	r3, #2
 801ebc6:	781b      	ldrb	r3, [r3, #0]
 801ebc8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801ebca:	687b      	ldr	r3, [r7, #4]
 801ebcc:	3303      	adds	r3, #3
 801ebce:	781b      	ldrb	r3, [r3, #0]
 801ebd0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801ebd2:	f107 0310 	add.w	r3, r7, #16
 801ebd6:	61fb      	str	r3, [r7, #28]
 801ebd8:	e090      	b.n	801ecfc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801ebda:	687b      	ldr	r3, [r7, #4]
 801ebdc:	681a      	ldr	r2, [r3, #0]
 801ebde:	68fb      	ldr	r3, [r7, #12]
 801ebe0:	3304      	adds	r3, #4
 801ebe2:	681b      	ldr	r3, [r3, #0]
 801ebe4:	405a      	eors	r2, r3
 801ebe6:	68fb      	ldr	r3, [r7, #12]
 801ebe8:	3308      	adds	r3, #8
 801ebea:	681b      	ldr	r3, [r3, #0]
 801ebec:	4013      	ands	r3, r2
 801ebee:	2b00      	cmp	r3, #0
 801ebf0:	d012      	beq.n	801ec18 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801ebf2:	687b      	ldr	r3, [r7, #4]
 801ebf4:	681b      	ldr	r3, [r3, #0]
 801ebf6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801ebf8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801ebfc:	4293      	cmp	r3, r2
 801ebfe:	d00b      	beq.n	801ec18 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801ec00:	68fb      	ldr	r3, [r7, #12]
 801ec02:	330c      	adds	r3, #12
 801ec04:	681b      	ldr	r3, [r3, #0]
 801ec06:	2b00      	cmp	r3, #0
 801ec08:	d003      	beq.n	801ec12 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801ec0a:	68fb      	ldr	r3, [r7, #12]
 801ec0c:	330c      	adds	r3, #12
 801ec0e:	61bb      	str	r3, [r7, #24]
 801ec10:	e002      	b.n	801ec18 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801ec12:	f06f 0303 	mvn.w	r3, #3
 801ec16:	e07d      	b.n	801ed14 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801ec18:	4b46      	ldr	r3, [pc, #280]	; (801ed34 <etharp_output+0x1fc>)
 801ec1a:	781b      	ldrb	r3, [r3, #0]
 801ec1c:	4619      	mov	r1, r3
 801ec1e:	4a46      	ldr	r2, [pc, #280]	; (801ed38 <etharp_output+0x200>)
 801ec20:	460b      	mov	r3, r1
 801ec22:	005b      	lsls	r3, r3, #1
 801ec24:	440b      	add	r3, r1
 801ec26:	00db      	lsls	r3, r3, #3
 801ec28:	4413      	add	r3, r2
 801ec2a:	3314      	adds	r3, #20
 801ec2c:	781b      	ldrb	r3, [r3, #0]
 801ec2e:	2b01      	cmp	r3, #1
 801ec30:	d925      	bls.n	801ec7e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801ec32:	4b40      	ldr	r3, [pc, #256]	; (801ed34 <etharp_output+0x1fc>)
 801ec34:	781b      	ldrb	r3, [r3, #0]
 801ec36:	4619      	mov	r1, r3
 801ec38:	4a3f      	ldr	r2, [pc, #252]	; (801ed38 <etharp_output+0x200>)
 801ec3a:	460b      	mov	r3, r1
 801ec3c:	005b      	lsls	r3, r3, #1
 801ec3e:	440b      	add	r3, r1
 801ec40:	00db      	lsls	r3, r3, #3
 801ec42:	4413      	add	r3, r2
 801ec44:	3308      	adds	r3, #8
 801ec46:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801ec48:	68fa      	ldr	r2, [r7, #12]
 801ec4a:	429a      	cmp	r2, r3
 801ec4c:	d117      	bne.n	801ec7e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801ec4e:	69bb      	ldr	r3, [r7, #24]
 801ec50:	681a      	ldr	r2, [r3, #0]
 801ec52:	4b38      	ldr	r3, [pc, #224]	; (801ed34 <etharp_output+0x1fc>)
 801ec54:	781b      	ldrb	r3, [r3, #0]
 801ec56:	4618      	mov	r0, r3
 801ec58:	4937      	ldr	r1, [pc, #220]	; (801ed38 <etharp_output+0x200>)
 801ec5a:	4603      	mov	r3, r0
 801ec5c:	005b      	lsls	r3, r3, #1
 801ec5e:	4403      	add	r3, r0
 801ec60:	00db      	lsls	r3, r3, #3
 801ec62:	440b      	add	r3, r1
 801ec64:	3304      	adds	r3, #4
 801ec66:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801ec68:	429a      	cmp	r2, r3
 801ec6a:	d108      	bne.n	801ec7e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801ec6c:	4b31      	ldr	r3, [pc, #196]	; (801ed34 <etharp_output+0x1fc>)
 801ec6e:	781b      	ldrb	r3, [r3, #0]
 801ec70:	461a      	mov	r2, r3
 801ec72:	68b9      	ldr	r1, [r7, #8]
 801ec74:	68f8      	ldr	r0, [r7, #12]
 801ec76:	f7ff fec5 	bl	801ea04 <etharp_output_to_arp_index>
 801ec7a:	4603      	mov	r3, r0
 801ec7c:	e04a      	b.n	801ed14 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801ec7e:	2300      	movs	r3, #0
 801ec80:	75fb      	strb	r3, [r7, #23]
 801ec82:	e031      	b.n	801ece8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801ec84:	7dfa      	ldrb	r2, [r7, #23]
 801ec86:	492c      	ldr	r1, [pc, #176]	; (801ed38 <etharp_output+0x200>)
 801ec88:	4613      	mov	r3, r2
 801ec8a:	005b      	lsls	r3, r3, #1
 801ec8c:	4413      	add	r3, r2
 801ec8e:	00db      	lsls	r3, r3, #3
 801ec90:	440b      	add	r3, r1
 801ec92:	3314      	adds	r3, #20
 801ec94:	781b      	ldrb	r3, [r3, #0]
 801ec96:	2b01      	cmp	r3, #1
 801ec98:	d923      	bls.n	801ece2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801ec9a:	7dfa      	ldrb	r2, [r7, #23]
 801ec9c:	4926      	ldr	r1, [pc, #152]	; (801ed38 <etharp_output+0x200>)
 801ec9e:	4613      	mov	r3, r2
 801eca0:	005b      	lsls	r3, r3, #1
 801eca2:	4413      	add	r3, r2
 801eca4:	00db      	lsls	r3, r3, #3
 801eca6:	440b      	add	r3, r1
 801eca8:	3308      	adds	r3, #8
 801ecaa:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801ecac:	68fa      	ldr	r2, [r7, #12]
 801ecae:	429a      	cmp	r2, r3
 801ecb0:	d117      	bne.n	801ece2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801ecb2:	69bb      	ldr	r3, [r7, #24]
 801ecb4:	6819      	ldr	r1, [r3, #0]
 801ecb6:	7dfa      	ldrb	r2, [r7, #23]
 801ecb8:	481f      	ldr	r0, [pc, #124]	; (801ed38 <etharp_output+0x200>)
 801ecba:	4613      	mov	r3, r2
 801ecbc:	005b      	lsls	r3, r3, #1
 801ecbe:	4413      	add	r3, r2
 801ecc0:	00db      	lsls	r3, r3, #3
 801ecc2:	4403      	add	r3, r0
 801ecc4:	3304      	adds	r3, #4
 801ecc6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801ecc8:	4299      	cmp	r1, r3
 801ecca:	d10a      	bne.n	801ece2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801eccc:	4a19      	ldr	r2, [pc, #100]	; (801ed34 <etharp_output+0x1fc>)
 801ecce:	7dfb      	ldrb	r3, [r7, #23]
 801ecd0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801ecd2:	7dfb      	ldrb	r3, [r7, #23]
 801ecd4:	461a      	mov	r2, r3
 801ecd6:	68b9      	ldr	r1, [r7, #8]
 801ecd8:	68f8      	ldr	r0, [r7, #12]
 801ecda:	f7ff fe93 	bl	801ea04 <etharp_output_to_arp_index>
 801ecde:	4603      	mov	r3, r0
 801ece0:	e018      	b.n	801ed14 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801ece2:	7dfb      	ldrb	r3, [r7, #23]
 801ece4:	3301      	adds	r3, #1
 801ece6:	75fb      	strb	r3, [r7, #23]
 801ece8:	7dfb      	ldrb	r3, [r7, #23]
 801ecea:	2b09      	cmp	r3, #9
 801ecec:	d9ca      	bls.n	801ec84 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801ecee:	68ba      	ldr	r2, [r7, #8]
 801ecf0:	69b9      	ldr	r1, [r7, #24]
 801ecf2:	68f8      	ldr	r0, [r7, #12]
 801ecf4:	f000 f822 	bl	801ed3c <etharp_query>
 801ecf8:	4603      	mov	r3, r0
 801ecfa:	e00b      	b.n	801ed14 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801ecfc:	68fb      	ldr	r3, [r7, #12]
 801ecfe:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801ed02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ed06:	9300      	str	r3, [sp, #0]
 801ed08:	69fb      	ldr	r3, [r7, #28]
 801ed0a:	68b9      	ldr	r1, [r7, #8]
 801ed0c:	68f8      	ldr	r0, [r7, #12]
 801ed0e:	f001 fd3f 	bl	8020790 <ethernet_output>
 801ed12:	4603      	mov	r3, r0
}
 801ed14:	4618      	mov	r0, r3
 801ed16:	3720      	adds	r7, #32
 801ed18:	46bd      	mov	sp, r7
 801ed1a:	bd80      	pop	{r7, pc}
 801ed1c:	0802695c 	.word	0x0802695c
 801ed20:	08026aac 	.word	0x08026aac
 801ed24:	080269d4 	.word	0x080269d4
 801ed28:	08026afc 	.word	0x08026afc
 801ed2c:	08026a9c 	.word	0x08026a9c
 801ed30:	0802af8c 	.word	0x0802af8c
 801ed34:	20005410 	.word	0x20005410
 801ed38:	20005320 	.word	0x20005320

0801ed3c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801ed3c:	b580      	push	{r7, lr}
 801ed3e:	b08c      	sub	sp, #48	; 0x30
 801ed40:	af02      	add	r7, sp, #8
 801ed42:	60f8      	str	r0, [r7, #12]
 801ed44:	60b9      	str	r1, [r7, #8]
 801ed46:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801ed48:	68fb      	ldr	r3, [r7, #12]
 801ed4a:	3326      	adds	r3, #38	; 0x26
 801ed4c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801ed4e:	23ff      	movs	r3, #255	; 0xff
 801ed50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801ed54:	2300      	movs	r3, #0
 801ed56:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801ed58:	68bb      	ldr	r3, [r7, #8]
 801ed5a:	681b      	ldr	r3, [r3, #0]
 801ed5c:	68f9      	ldr	r1, [r7, #12]
 801ed5e:	4618      	mov	r0, r3
 801ed60:	f000 fe0e 	bl	801f980 <ip4_addr_isbroadcast_u32>
 801ed64:	4603      	mov	r3, r0
 801ed66:	2b00      	cmp	r3, #0
 801ed68:	d10c      	bne.n	801ed84 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801ed6a:	68bb      	ldr	r3, [r7, #8]
 801ed6c:	681b      	ldr	r3, [r3, #0]
 801ed6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801ed72:	2be0      	cmp	r3, #224	; 0xe0
 801ed74:	d006      	beq.n	801ed84 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801ed76:	68bb      	ldr	r3, [r7, #8]
 801ed78:	2b00      	cmp	r3, #0
 801ed7a:	d003      	beq.n	801ed84 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801ed7c:	68bb      	ldr	r3, [r7, #8]
 801ed7e:	681b      	ldr	r3, [r3, #0]
 801ed80:	2b00      	cmp	r3, #0
 801ed82:	d102      	bne.n	801ed8a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801ed84:	f06f 030f 	mvn.w	r3, #15
 801ed88:	e101      	b.n	801ef8e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801ed8a:	68fa      	ldr	r2, [r7, #12]
 801ed8c:	2101      	movs	r1, #1
 801ed8e:	68b8      	ldr	r0, [r7, #8]
 801ed90:	f7ff fb60 	bl	801e454 <etharp_find_entry>
 801ed94:	4603      	mov	r3, r0
 801ed96:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801ed98:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801ed9c:	2b00      	cmp	r3, #0
 801ed9e:	da02      	bge.n	801eda6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801eda0:	8a7b      	ldrh	r3, [r7, #18]
 801eda2:	b25b      	sxtb	r3, r3
 801eda4:	e0f3      	b.n	801ef8e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801eda6:	8a7b      	ldrh	r3, [r7, #18]
 801eda8:	2b7e      	cmp	r3, #126	; 0x7e
 801edaa:	d906      	bls.n	801edba <etharp_query+0x7e>
 801edac:	4b7a      	ldr	r3, [pc, #488]	; (801ef98 <etharp_query+0x25c>)
 801edae:	f240 32c1 	movw	r2, #961	; 0x3c1
 801edb2:	497a      	ldr	r1, [pc, #488]	; (801ef9c <etharp_query+0x260>)
 801edb4:	487a      	ldr	r0, [pc, #488]	; (801efa0 <etharp_query+0x264>)
 801edb6:	f002 fbb5 	bl	8021524 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801edba:	8a7b      	ldrh	r3, [r7, #18]
 801edbc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801edbe:	7c7a      	ldrb	r2, [r7, #17]
 801edc0:	4978      	ldr	r1, [pc, #480]	; (801efa4 <etharp_query+0x268>)
 801edc2:	4613      	mov	r3, r2
 801edc4:	005b      	lsls	r3, r3, #1
 801edc6:	4413      	add	r3, r2
 801edc8:	00db      	lsls	r3, r3, #3
 801edca:	440b      	add	r3, r1
 801edcc:	3314      	adds	r3, #20
 801edce:	781b      	ldrb	r3, [r3, #0]
 801edd0:	2b00      	cmp	r3, #0
 801edd2:	d115      	bne.n	801ee00 <etharp_query+0xc4>
    is_new_entry = 1;
 801edd4:	2301      	movs	r3, #1
 801edd6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801edd8:	7c7a      	ldrb	r2, [r7, #17]
 801edda:	4972      	ldr	r1, [pc, #456]	; (801efa4 <etharp_query+0x268>)
 801eddc:	4613      	mov	r3, r2
 801edde:	005b      	lsls	r3, r3, #1
 801ede0:	4413      	add	r3, r2
 801ede2:	00db      	lsls	r3, r3, #3
 801ede4:	440b      	add	r3, r1
 801ede6:	3314      	adds	r3, #20
 801ede8:	2201      	movs	r2, #1
 801edea:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801edec:	7c7a      	ldrb	r2, [r7, #17]
 801edee:	496d      	ldr	r1, [pc, #436]	; (801efa4 <etharp_query+0x268>)
 801edf0:	4613      	mov	r3, r2
 801edf2:	005b      	lsls	r3, r3, #1
 801edf4:	4413      	add	r3, r2
 801edf6:	00db      	lsls	r3, r3, #3
 801edf8:	440b      	add	r3, r1
 801edfa:	3308      	adds	r3, #8
 801edfc:	68fa      	ldr	r2, [r7, #12]
 801edfe:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801ee00:	7c7a      	ldrb	r2, [r7, #17]
 801ee02:	4968      	ldr	r1, [pc, #416]	; (801efa4 <etharp_query+0x268>)
 801ee04:	4613      	mov	r3, r2
 801ee06:	005b      	lsls	r3, r3, #1
 801ee08:	4413      	add	r3, r2
 801ee0a:	00db      	lsls	r3, r3, #3
 801ee0c:	440b      	add	r3, r1
 801ee0e:	3314      	adds	r3, #20
 801ee10:	781b      	ldrb	r3, [r3, #0]
 801ee12:	2b01      	cmp	r3, #1
 801ee14:	d011      	beq.n	801ee3a <etharp_query+0xfe>
 801ee16:	7c7a      	ldrb	r2, [r7, #17]
 801ee18:	4962      	ldr	r1, [pc, #392]	; (801efa4 <etharp_query+0x268>)
 801ee1a:	4613      	mov	r3, r2
 801ee1c:	005b      	lsls	r3, r3, #1
 801ee1e:	4413      	add	r3, r2
 801ee20:	00db      	lsls	r3, r3, #3
 801ee22:	440b      	add	r3, r1
 801ee24:	3314      	adds	r3, #20
 801ee26:	781b      	ldrb	r3, [r3, #0]
 801ee28:	2b01      	cmp	r3, #1
 801ee2a:	d806      	bhi.n	801ee3a <etharp_query+0xfe>
 801ee2c:	4b5a      	ldr	r3, [pc, #360]	; (801ef98 <etharp_query+0x25c>)
 801ee2e:	f240 32cd 	movw	r2, #973	; 0x3cd
 801ee32:	495d      	ldr	r1, [pc, #372]	; (801efa8 <etharp_query+0x26c>)
 801ee34:	485a      	ldr	r0, [pc, #360]	; (801efa0 <etharp_query+0x264>)
 801ee36:	f002 fb75 	bl	8021524 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801ee3a:	6a3b      	ldr	r3, [r7, #32]
 801ee3c:	2b00      	cmp	r3, #0
 801ee3e:	d102      	bne.n	801ee46 <etharp_query+0x10a>
 801ee40:	687b      	ldr	r3, [r7, #4]
 801ee42:	2b00      	cmp	r3, #0
 801ee44:	d10c      	bne.n	801ee60 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801ee46:	68b9      	ldr	r1, [r7, #8]
 801ee48:	68f8      	ldr	r0, [r7, #12]
 801ee4a:	f000 f963 	bl	801f114 <etharp_request>
 801ee4e:	4603      	mov	r3, r0
 801ee50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801ee54:	687b      	ldr	r3, [r7, #4]
 801ee56:	2b00      	cmp	r3, #0
 801ee58:	d102      	bne.n	801ee60 <etharp_query+0x124>
      return result;
 801ee5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801ee5e:	e096      	b.n	801ef8e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801ee60:	687b      	ldr	r3, [r7, #4]
 801ee62:	2b00      	cmp	r3, #0
 801ee64:	d106      	bne.n	801ee74 <etharp_query+0x138>
 801ee66:	4b4c      	ldr	r3, [pc, #304]	; (801ef98 <etharp_query+0x25c>)
 801ee68:	f240 32e1 	movw	r2, #993	; 0x3e1
 801ee6c:	494f      	ldr	r1, [pc, #316]	; (801efac <etharp_query+0x270>)
 801ee6e:	484c      	ldr	r0, [pc, #304]	; (801efa0 <etharp_query+0x264>)
 801ee70:	f002 fb58 	bl	8021524 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801ee74:	7c7a      	ldrb	r2, [r7, #17]
 801ee76:	494b      	ldr	r1, [pc, #300]	; (801efa4 <etharp_query+0x268>)
 801ee78:	4613      	mov	r3, r2
 801ee7a:	005b      	lsls	r3, r3, #1
 801ee7c:	4413      	add	r3, r2
 801ee7e:	00db      	lsls	r3, r3, #3
 801ee80:	440b      	add	r3, r1
 801ee82:	3314      	adds	r3, #20
 801ee84:	781b      	ldrb	r3, [r3, #0]
 801ee86:	2b01      	cmp	r3, #1
 801ee88:	d917      	bls.n	801eeba <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801ee8a:	4a49      	ldr	r2, [pc, #292]	; (801efb0 <etharp_query+0x274>)
 801ee8c:	7c7b      	ldrb	r3, [r7, #17]
 801ee8e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801ee90:	7c7a      	ldrb	r2, [r7, #17]
 801ee92:	4613      	mov	r3, r2
 801ee94:	005b      	lsls	r3, r3, #1
 801ee96:	4413      	add	r3, r2
 801ee98:	00db      	lsls	r3, r3, #3
 801ee9a:	3308      	adds	r3, #8
 801ee9c:	4a41      	ldr	r2, [pc, #260]	; (801efa4 <etharp_query+0x268>)
 801ee9e:	4413      	add	r3, r2
 801eea0:	3304      	adds	r3, #4
 801eea2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801eea6:	9200      	str	r2, [sp, #0]
 801eea8:	697a      	ldr	r2, [r7, #20]
 801eeaa:	6879      	ldr	r1, [r7, #4]
 801eeac:	68f8      	ldr	r0, [r7, #12]
 801eeae:	f001 fc6f 	bl	8020790 <ethernet_output>
 801eeb2:	4603      	mov	r3, r0
 801eeb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801eeb8:	e067      	b.n	801ef8a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801eeba:	7c7a      	ldrb	r2, [r7, #17]
 801eebc:	4939      	ldr	r1, [pc, #228]	; (801efa4 <etharp_query+0x268>)
 801eebe:	4613      	mov	r3, r2
 801eec0:	005b      	lsls	r3, r3, #1
 801eec2:	4413      	add	r3, r2
 801eec4:	00db      	lsls	r3, r3, #3
 801eec6:	440b      	add	r3, r1
 801eec8:	3314      	adds	r3, #20
 801eeca:	781b      	ldrb	r3, [r3, #0]
 801eecc:	2b01      	cmp	r3, #1
 801eece:	d15c      	bne.n	801ef8a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801eed0:	2300      	movs	r3, #0
 801eed2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801eed4:	687b      	ldr	r3, [r7, #4]
 801eed6:	61fb      	str	r3, [r7, #28]
    while (p) {
 801eed8:	e01c      	b.n	801ef14 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801eeda:	69fb      	ldr	r3, [r7, #28]
 801eedc:	895a      	ldrh	r2, [r3, #10]
 801eede:	69fb      	ldr	r3, [r7, #28]
 801eee0:	891b      	ldrh	r3, [r3, #8]
 801eee2:	429a      	cmp	r2, r3
 801eee4:	d10a      	bne.n	801eefc <etharp_query+0x1c0>
 801eee6:	69fb      	ldr	r3, [r7, #28]
 801eee8:	681b      	ldr	r3, [r3, #0]
 801eeea:	2b00      	cmp	r3, #0
 801eeec:	d006      	beq.n	801eefc <etharp_query+0x1c0>
 801eeee:	4b2a      	ldr	r3, [pc, #168]	; (801ef98 <etharp_query+0x25c>)
 801eef0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801eef4:	492f      	ldr	r1, [pc, #188]	; (801efb4 <etharp_query+0x278>)
 801eef6:	482a      	ldr	r0, [pc, #168]	; (801efa0 <etharp_query+0x264>)
 801eef8:	f002 fb14 	bl	8021524 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801eefc:	69fb      	ldr	r3, [r7, #28]
 801eefe:	7b1b      	ldrb	r3, [r3, #12]
 801ef00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ef04:	2b00      	cmp	r3, #0
 801ef06:	d002      	beq.n	801ef0e <etharp_query+0x1d2>
        copy_needed = 1;
 801ef08:	2301      	movs	r3, #1
 801ef0a:	61bb      	str	r3, [r7, #24]
        break;
 801ef0c:	e005      	b.n	801ef1a <etharp_query+0x1de>
      }
      p = p->next;
 801ef0e:	69fb      	ldr	r3, [r7, #28]
 801ef10:	681b      	ldr	r3, [r3, #0]
 801ef12:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ef14:	69fb      	ldr	r3, [r7, #28]
 801ef16:	2b00      	cmp	r3, #0
 801ef18:	d1df      	bne.n	801eeda <etharp_query+0x19e>
    }
    if (copy_needed) {
 801ef1a:	69bb      	ldr	r3, [r7, #24]
 801ef1c:	2b00      	cmp	r3, #0
 801ef1e:	d007      	beq.n	801ef30 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801ef20:	687a      	ldr	r2, [r7, #4]
 801ef22:	f44f 7120 	mov.w	r1, #640	; 0x280
 801ef26:	200e      	movs	r0, #14
 801ef28:	f7f8 fdfe 	bl	8017b28 <pbuf_clone>
 801ef2c:	61f8      	str	r0, [r7, #28]
 801ef2e:	e004      	b.n	801ef3a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801ef30:	687b      	ldr	r3, [r7, #4]
 801ef32:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801ef34:	69f8      	ldr	r0, [r7, #28]
 801ef36:	f7f8 fc35 	bl	80177a4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801ef3a:	69fb      	ldr	r3, [r7, #28]
 801ef3c:	2b00      	cmp	r3, #0
 801ef3e:	d021      	beq.n	801ef84 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801ef40:	7c7a      	ldrb	r2, [r7, #17]
 801ef42:	4918      	ldr	r1, [pc, #96]	; (801efa4 <etharp_query+0x268>)
 801ef44:	4613      	mov	r3, r2
 801ef46:	005b      	lsls	r3, r3, #1
 801ef48:	4413      	add	r3, r2
 801ef4a:	00db      	lsls	r3, r3, #3
 801ef4c:	440b      	add	r3, r1
 801ef4e:	681b      	ldr	r3, [r3, #0]
 801ef50:	2b00      	cmp	r3, #0
 801ef52:	d00a      	beq.n	801ef6a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801ef54:	7c7a      	ldrb	r2, [r7, #17]
 801ef56:	4913      	ldr	r1, [pc, #76]	; (801efa4 <etharp_query+0x268>)
 801ef58:	4613      	mov	r3, r2
 801ef5a:	005b      	lsls	r3, r3, #1
 801ef5c:	4413      	add	r3, r2
 801ef5e:	00db      	lsls	r3, r3, #3
 801ef60:	440b      	add	r3, r1
 801ef62:	681b      	ldr	r3, [r3, #0]
 801ef64:	4618      	mov	r0, r3
 801ef66:	f7f8 fb77 	bl	8017658 <pbuf_free>
      }
      arp_table[i].q = p;
 801ef6a:	7c7a      	ldrb	r2, [r7, #17]
 801ef6c:	490d      	ldr	r1, [pc, #52]	; (801efa4 <etharp_query+0x268>)
 801ef6e:	4613      	mov	r3, r2
 801ef70:	005b      	lsls	r3, r3, #1
 801ef72:	4413      	add	r3, r2
 801ef74:	00db      	lsls	r3, r3, #3
 801ef76:	440b      	add	r3, r1
 801ef78:	69fa      	ldr	r2, [r7, #28]
 801ef7a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801ef7c:	2300      	movs	r3, #0
 801ef7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ef82:	e002      	b.n	801ef8a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801ef84:	23ff      	movs	r3, #255	; 0xff
 801ef86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801ef8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801ef8e:	4618      	mov	r0, r3
 801ef90:	3728      	adds	r7, #40	; 0x28
 801ef92:	46bd      	mov	sp, r7
 801ef94:	bd80      	pop	{r7, pc}
 801ef96:	bf00      	nop
 801ef98:	0802695c 	.word	0x0802695c
 801ef9c:	08026b08 	.word	0x08026b08
 801efa0:	080269d4 	.word	0x080269d4
 801efa4:	20005320 	.word	0x20005320
 801efa8:	08026b18 	.word	0x08026b18
 801efac:	08026afc 	.word	0x08026afc
 801efb0:	20005410 	.word	0x20005410
 801efb4:	08026b40 	.word	0x08026b40

0801efb8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801efb8:	b580      	push	{r7, lr}
 801efba:	b08a      	sub	sp, #40	; 0x28
 801efbc:	af02      	add	r7, sp, #8
 801efbe:	60f8      	str	r0, [r7, #12]
 801efc0:	60b9      	str	r1, [r7, #8]
 801efc2:	607a      	str	r2, [r7, #4]
 801efc4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801efc6:	2300      	movs	r3, #0
 801efc8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801efca:	68fb      	ldr	r3, [r7, #12]
 801efcc:	2b00      	cmp	r3, #0
 801efce:	d106      	bne.n	801efde <etharp_raw+0x26>
 801efd0:	4b3a      	ldr	r3, [pc, #232]	; (801f0bc <etharp_raw+0x104>)
 801efd2:	f240 4257 	movw	r2, #1111	; 0x457
 801efd6:	493a      	ldr	r1, [pc, #232]	; (801f0c0 <etharp_raw+0x108>)
 801efd8:	483a      	ldr	r0, [pc, #232]	; (801f0c4 <etharp_raw+0x10c>)
 801efda:	f002 faa3 	bl	8021524 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801efde:	f44f 7220 	mov.w	r2, #640	; 0x280
 801efe2:	211c      	movs	r1, #28
 801efe4:	200e      	movs	r0, #14
 801efe6:	f7f8 f853 	bl	8017090 <pbuf_alloc>
 801efea:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801efec:	69bb      	ldr	r3, [r7, #24]
 801efee:	2b00      	cmp	r3, #0
 801eff0:	d102      	bne.n	801eff8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801eff2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801eff6:	e05d      	b.n	801f0b4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801eff8:	69bb      	ldr	r3, [r7, #24]
 801effa:	895b      	ldrh	r3, [r3, #10]
 801effc:	2b1b      	cmp	r3, #27
 801effe:	d806      	bhi.n	801f00e <etharp_raw+0x56>
 801f000:	4b2e      	ldr	r3, [pc, #184]	; (801f0bc <etharp_raw+0x104>)
 801f002:	f240 4262 	movw	r2, #1122	; 0x462
 801f006:	4930      	ldr	r1, [pc, #192]	; (801f0c8 <etharp_raw+0x110>)
 801f008:	482e      	ldr	r0, [pc, #184]	; (801f0c4 <etharp_raw+0x10c>)
 801f00a:	f002 fa8b 	bl	8021524 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801f00e:	69bb      	ldr	r3, [r7, #24]
 801f010:	685b      	ldr	r3, [r3, #4]
 801f012:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801f014:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801f016:	4618      	mov	r0, r3
 801f018:	f7f6 fe94 	bl	8015d44 <lwip_htons>
 801f01c:	4603      	mov	r3, r0
 801f01e:	461a      	mov	r2, r3
 801f020:	697b      	ldr	r3, [r7, #20]
 801f022:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801f024:	68fb      	ldr	r3, [r7, #12]
 801f026:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801f02a:	2b06      	cmp	r3, #6
 801f02c:	d006      	beq.n	801f03c <etharp_raw+0x84>
 801f02e:	4b23      	ldr	r3, [pc, #140]	; (801f0bc <etharp_raw+0x104>)
 801f030:	f240 4269 	movw	r2, #1129	; 0x469
 801f034:	4925      	ldr	r1, [pc, #148]	; (801f0cc <etharp_raw+0x114>)
 801f036:	4823      	ldr	r0, [pc, #140]	; (801f0c4 <etharp_raw+0x10c>)
 801f038:	f002 fa74 	bl	8021524 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801f03c:	697b      	ldr	r3, [r7, #20]
 801f03e:	3308      	adds	r3, #8
 801f040:	2206      	movs	r2, #6
 801f042:	6839      	ldr	r1, [r7, #0]
 801f044:	4618      	mov	r0, r3
 801f046:	f002 f993 	bl	8021370 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801f04a:	697b      	ldr	r3, [r7, #20]
 801f04c:	3312      	adds	r3, #18
 801f04e:	2206      	movs	r2, #6
 801f050:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f052:	4618      	mov	r0, r3
 801f054:	f002 f98c 	bl	8021370 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801f058:	697b      	ldr	r3, [r7, #20]
 801f05a:	330e      	adds	r3, #14
 801f05c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f05e:	6812      	ldr	r2, [r2, #0]
 801f060:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801f062:	697b      	ldr	r3, [r7, #20]
 801f064:	3318      	adds	r3, #24
 801f066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f068:	6812      	ldr	r2, [r2, #0]
 801f06a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801f06c:	697b      	ldr	r3, [r7, #20]
 801f06e:	2200      	movs	r2, #0
 801f070:	701a      	strb	r2, [r3, #0]
 801f072:	2200      	movs	r2, #0
 801f074:	f042 0201 	orr.w	r2, r2, #1
 801f078:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801f07a:	697b      	ldr	r3, [r7, #20]
 801f07c:	2200      	movs	r2, #0
 801f07e:	f042 0208 	orr.w	r2, r2, #8
 801f082:	709a      	strb	r2, [r3, #2]
 801f084:	2200      	movs	r2, #0
 801f086:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801f088:	697b      	ldr	r3, [r7, #20]
 801f08a:	2206      	movs	r2, #6
 801f08c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801f08e:	697b      	ldr	r3, [r7, #20]
 801f090:	2204      	movs	r2, #4
 801f092:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801f094:	f640 0306 	movw	r3, #2054	; 0x806
 801f098:	9300      	str	r3, [sp, #0]
 801f09a:	687b      	ldr	r3, [r7, #4]
 801f09c:	68ba      	ldr	r2, [r7, #8]
 801f09e:	69b9      	ldr	r1, [r7, #24]
 801f0a0:	68f8      	ldr	r0, [r7, #12]
 801f0a2:	f001 fb75 	bl	8020790 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801f0a6:	69b8      	ldr	r0, [r7, #24]
 801f0a8:	f7f8 fad6 	bl	8017658 <pbuf_free>
  p = NULL;
 801f0ac:	2300      	movs	r3, #0
 801f0ae:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801f0b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801f0b4:	4618      	mov	r0, r3
 801f0b6:	3720      	adds	r7, #32
 801f0b8:	46bd      	mov	sp, r7
 801f0ba:	bd80      	pop	{r7, pc}
 801f0bc:	0802695c 	.word	0x0802695c
 801f0c0:	08026aac 	.word	0x08026aac
 801f0c4:	080269d4 	.word	0x080269d4
 801f0c8:	08026b5c 	.word	0x08026b5c
 801f0cc:	08026b90 	.word	0x08026b90

0801f0d0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801f0d0:	b580      	push	{r7, lr}
 801f0d2:	b088      	sub	sp, #32
 801f0d4:	af04      	add	r7, sp, #16
 801f0d6:	60f8      	str	r0, [r7, #12]
 801f0d8:	60b9      	str	r1, [r7, #8]
 801f0da:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f0dc:	68fb      	ldr	r3, [r7, #12]
 801f0de:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801f0e2:	68fb      	ldr	r3, [r7, #12]
 801f0e4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801f0e8:	68fb      	ldr	r3, [r7, #12]
 801f0ea:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801f0ec:	2201      	movs	r2, #1
 801f0ee:	9203      	str	r2, [sp, #12]
 801f0f0:	68ba      	ldr	r2, [r7, #8]
 801f0f2:	9202      	str	r2, [sp, #8]
 801f0f4:	4a06      	ldr	r2, [pc, #24]	; (801f110 <etharp_request_dst+0x40>)
 801f0f6:	9201      	str	r2, [sp, #4]
 801f0f8:	9300      	str	r3, [sp, #0]
 801f0fa:	4603      	mov	r3, r0
 801f0fc:	687a      	ldr	r2, [r7, #4]
 801f0fe:	68f8      	ldr	r0, [r7, #12]
 801f100:	f7ff ff5a 	bl	801efb8 <etharp_raw>
 801f104:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801f106:	4618      	mov	r0, r3
 801f108:	3710      	adds	r7, #16
 801f10a:	46bd      	mov	sp, r7
 801f10c:	bd80      	pop	{r7, pc}
 801f10e:	bf00      	nop
 801f110:	0802af94 	.word	0x0802af94

0801f114 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801f114:	b580      	push	{r7, lr}
 801f116:	b082      	sub	sp, #8
 801f118:	af00      	add	r7, sp, #0
 801f11a:	6078      	str	r0, [r7, #4]
 801f11c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801f11e:	4a05      	ldr	r2, [pc, #20]	; (801f134 <etharp_request+0x20>)
 801f120:	6839      	ldr	r1, [r7, #0]
 801f122:	6878      	ldr	r0, [r7, #4]
 801f124:	f7ff ffd4 	bl	801f0d0 <etharp_request_dst>
 801f128:	4603      	mov	r3, r0
}
 801f12a:	4618      	mov	r0, r3
 801f12c:	3708      	adds	r7, #8
 801f12e:	46bd      	mov	sp, r7
 801f130:	bd80      	pop	{r7, pc}
 801f132:	bf00      	nop
 801f134:	0802af8c 	.word	0x0802af8c

0801f138 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801f138:	b580      	push	{r7, lr}
 801f13a:	b08e      	sub	sp, #56	; 0x38
 801f13c:	af04      	add	r7, sp, #16
 801f13e:	6078      	str	r0, [r7, #4]
 801f140:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801f142:	4b79      	ldr	r3, [pc, #484]	; (801f328 <icmp_input+0x1f0>)
 801f144:	689b      	ldr	r3, [r3, #8]
 801f146:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801f148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f14a:	781b      	ldrb	r3, [r3, #0]
 801f14c:	f003 030f 	and.w	r3, r3, #15
 801f150:	b2db      	uxtb	r3, r3
 801f152:	009b      	lsls	r3, r3, #2
 801f154:	b2db      	uxtb	r3, r3
 801f156:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801f158:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f15a:	2b13      	cmp	r3, #19
 801f15c:	f240 80cd 	bls.w	801f2fa <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801f160:	687b      	ldr	r3, [r7, #4]
 801f162:	895b      	ldrh	r3, [r3, #10]
 801f164:	2b03      	cmp	r3, #3
 801f166:	f240 80ca 	bls.w	801f2fe <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801f16a:	687b      	ldr	r3, [r7, #4]
 801f16c:	685b      	ldr	r3, [r3, #4]
 801f16e:	781b      	ldrb	r3, [r3, #0]
 801f170:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801f174:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801f178:	2b00      	cmp	r3, #0
 801f17a:	f000 80b7 	beq.w	801f2ec <icmp_input+0x1b4>
 801f17e:	2b08      	cmp	r3, #8
 801f180:	f040 80b7 	bne.w	801f2f2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801f184:	4b69      	ldr	r3, [pc, #420]	; (801f32c <icmp_input+0x1f4>)
 801f186:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f188:	4b67      	ldr	r3, [pc, #412]	; (801f328 <icmp_input+0x1f0>)
 801f18a:	695b      	ldr	r3, [r3, #20]
 801f18c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f190:	2be0      	cmp	r3, #224	; 0xe0
 801f192:	f000 80bb 	beq.w	801f30c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801f196:	4b64      	ldr	r3, [pc, #400]	; (801f328 <icmp_input+0x1f0>)
 801f198:	695b      	ldr	r3, [r3, #20]
 801f19a:	4a63      	ldr	r2, [pc, #396]	; (801f328 <icmp_input+0x1f0>)
 801f19c:	6812      	ldr	r2, [r2, #0]
 801f19e:	4611      	mov	r1, r2
 801f1a0:	4618      	mov	r0, r3
 801f1a2:	f000 fbed 	bl	801f980 <ip4_addr_isbroadcast_u32>
 801f1a6:	4603      	mov	r3, r0
 801f1a8:	2b00      	cmp	r3, #0
 801f1aa:	f040 80b1 	bne.w	801f310 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801f1ae:	687b      	ldr	r3, [r7, #4]
 801f1b0:	891b      	ldrh	r3, [r3, #8]
 801f1b2:	2b07      	cmp	r3, #7
 801f1b4:	f240 80a5 	bls.w	801f302 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801f1b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f1ba:	330e      	adds	r3, #14
 801f1bc:	4619      	mov	r1, r3
 801f1be:	6878      	ldr	r0, [r7, #4]
 801f1c0:	f7f8 f9b4 	bl	801752c <pbuf_add_header>
 801f1c4:	4603      	mov	r3, r0
 801f1c6:	2b00      	cmp	r3, #0
 801f1c8:	d04b      	beq.n	801f262 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801f1ca:	687b      	ldr	r3, [r7, #4]
 801f1cc:	891a      	ldrh	r2, [r3, #8]
 801f1ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f1d0:	4413      	add	r3, r2
 801f1d2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801f1d4:	687b      	ldr	r3, [r7, #4]
 801f1d6:	891b      	ldrh	r3, [r3, #8]
 801f1d8:	8b7a      	ldrh	r2, [r7, #26]
 801f1da:	429a      	cmp	r2, r3
 801f1dc:	f0c0 809a 	bcc.w	801f314 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801f1e0:	8b7b      	ldrh	r3, [r7, #26]
 801f1e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f1e6:	4619      	mov	r1, r3
 801f1e8:	200e      	movs	r0, #14
 801f1ea:	f7f7 ff51 	bl	8017090 <pbuf_alloc>
 801f1ee:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801f1f0:	697b      	ldr	r3, [r7, #20]
 801f1f2:	2b00      	cmp	r3, #0
 801f1f4:	f000 8090 	beq.w	801f318 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801f1f8:	697b      	ldr	r3, [r7, #20]
 801f1fa:	895b      	ldrh	r3, [r3, #10]
 801f1fc:	461a      	mov	r2, r3
 801f1fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f200:	3308      	adds	r3, #8
 801f202:	429a      	cmp	r2, r3
 801f204:	d203      	bcs.n	801f20e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801f206:	6978      	ldr	r0, [r7, #20]
 801f208:	f7f8 fa26 	bl	8017658 <pbuf_free>
          goto icmperr;
 801f20c:	e085      	b.n	801f31a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801f20e:	697b      	ldr	r3, [r7, #20]
 801f210:	685b      	ldr	r3, [r3, #4]
 801f212:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801f214:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801f216:	4618      	mov	r0, r3
 801f218:	f002 f8aa 	bl	8021370 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801f21c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f21e:	4619      	mov	r1, r3
 801f220:	6978      	ldr	r0, [r7, #20]
 801f222:	f7f8 f993 	bl	801754c <pbuf_remove_header>
 801f226:	4603      	mov	r3, r0
 801f228:	2b00      	cmp	r3, #0
 801f22a:	d009      	beq.n	801f240 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801f22c:	4b40      	ldr	r3, [pc, #256]	; (801f330 <icmp_input+0x1f8>)
 801f22e:	22b6      	movs	r2, #182	; 0xb6
 801f230:	4940      	ldr	r1, [pc, #256]	; (801f334 <icmp_input+0x1fc>)
 801f232:	4841      	ldr	r0, [pc, #260]	; (801f338 <icmp_input+0x200>)
 801f234:	f002 f976 	bl	8021524 <iprintf>
          pbuf_free(r);
 801f238:	6978      	ldr	r0, [r7, #20]
 801f23a:	f7f8 fa0d 	bl	8017658 <pbuf_free>
          goto icmperr;
 801f23e:	e06c      	b.n	801f31a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801f240:	6879      	ldr	r1, [r7, #4]
 801f242:	6978      	ldr	r0, [r7, #20]
 801f244:	f7f8 fb2c 	bl	80178a0 <pbuf_copy>
 801f248:	4603      	mov	r3, r0
 801f24a:	2b00      	cmp	r3, #0
 801f24c:	d003      	beq.n	801f256 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801f24e:	6978      	ldr	r0, [r7, #20]
 801f250:	f7f8 fa02 	bl	8017658 <pbuf_free>
          goto icmperr;
 801f254:	e061      	b.n	801f31a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801f256:	6878      	ldr	r0, [r7, #4]
 801f258:	f7f8 f9fe 	bl	8017658 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801f25c:	697b      	ldr	r3, [r7, #20]
 801f25e:	607b      	str	r3, [r7, #4]
 801f260:	e00f      	b.n	801f282 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801f262:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f264:	330e      	adds	r3, #14
 801f266:	4619      	mov	r1, r3
 801f268:	6878      	ldr	r0, [r7, #4]
 801f26a:	f7f8 f96f 	bl	801754c <pbuf_remove_header>
 801f26e:	4603      	mov	r3, r0
 801f270:	2b00      	cmp	r3, #0
 801f272:	d006      	beq.n	801f282 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801f274:	4b2e      	ldr	r3, [pc, #184]	; (801f330 <icmp_input+0x1f8>)
 801f276:	22c7      	movs	r2, #199	; 0xc7
 801f278:	4930      	ldr	r1, [pc, #192]	; (801f33c <icmp_input+0x204>)
 801f27a:	482f      	ldr	r0, [pc, #188]	; (801f338 <icmp_input+0x200>)
 801f27c:	f002 f952 	bl	8021524 <iprintf>
          goto icmperr;
 801f280:	e04b      	b.n	801f31a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801f282:	687b      	ldr	r3, [r7, #4]
 801f284:	685b      	ldr	r3, [r3, #4]
 801f286:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801f288:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801f28a:	4619      	mov	r1, r3
 801f28c:	6878      	ldr	r0, [r7, #4]
 801f28e:	f7f8 f94d 	bl	801752c <pbuf_add_header>
 801f292:	4603      	mov	r3, r0
 801f294:	2b00      	cmp	r3, #0
 801f296:	d12b      	bne.n	801f2f0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801f298:	687b      	ldr	r3, [r7, #4]
 801f29a:	685b      	ldr	r3, [r3, #4]
 801f29c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801f29e:	69fb      	ldr	r3, [r7, #28]
 801f2a0:	681a      	ldr	r2, [r3, #0]
 801f2a2:	68fb      	ldr	r3, [r7, #12]
 801f2a4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801f2a6:	4b20      	ldr	r3, [pc, #128]	; (801f328 <icmp_input+0x1f0>)
 801f2a8:	691a      	ldr	r2, [r3, #16]
 801f2aa:	68fb      	ldr	r3, [r7, #12]
 801f2ac:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801f2ae:	693b      	ldr	r3, [r7, #16]
 801f2b0:	2200      	movs	r2, #0
 801f2b2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801f2b4:	693b      	ldr	r3, [r7, #16]
 801f2b6:	2200      	movs	r2, #0
 801f2b8:	709a      	strb	r2, [r3, #2]
 801f2ba:	2200      	movs	r2, #0
 801f2bc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801f2be:	68fb      	ldr	r3, [r7, #12]
 801f2c0:	22ff      	movs	r2, #255	; 0xff
 801f2c2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801f2c4:	68fb      	ldr	r3, [r7, #12]
 801f2c6:	2200      	movs	r2, #0
 801f2c8:	729a      	strb	r2, [r3, #10]
 801f2ca:	2200      	movs	r2, #0
 801f2cc:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801f2ce:	683b      	ldr	r3, [r7, #0]
 801f2d0:	9302      	str	r3, [sp, #8]
 801f2d2:	2301      	movs	r3, #1
 801f2d4:	9301      	str	r3, [sp, #4]
 801f2d6:	2300      	movs	r3, #0
 801f2d8:	9300      	str	r3, [sp, #0]
 801f2da:	23ff      	movs	r3, #255	; 0xff
 801f2dc:	2200      	movs	r2, #0
 801f2de:	69f9      	ldr	r1, [r7, #28]
 801f2e0:	6878      	ldr	r0, [r7, #4]
 801f2e2:	f000 fa75 	bl	801f7d0 <ip4_output_if>
 801f2e6:	4603      	mov	r3, r0
 801f2e8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801f2ea:	e001      	b.n	801f2f0 <icmp_input+0x1b8>
      break;
 801f2ec:	bf00      	nop
 801f2ee:	e000      	b.n	801f2f2 <icmp_input+0x1ba>
      break;
 801f2f0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801f2f2:	6878      	ldr	r0, [r7, #4]
 801f2f4:	f7f8 f9b0 	bl	8017658 <pbuf_free>
  return;
 801f2f8:	e013      	b.n	801f322 <icmp_input+0x1ea>
    goto lenerr;
 801f2fa:	bf00      	nop
 801f2fc:	e002      	b.n	801f304 <icmp_input+0x1cc>
    goto lenerr;
 801f2fe:	bf00      	nop
 801f300:	e000      	b.n	801f304 <icmp_input+0x1cc>
        goto lenerr;
 801f302:	bf00      	nop
lenerr:
  pbuf_free(p);
 801f304:	6878      	ldr	r0, [r7, #4]
 801f306:	f7f8 f9a7 	bl	8017658 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801f30a:	e00a      	b.n	801f322 <icmp_input+0x1ea>
        goto icmperr;
 801f30c:	bf00      	nop
 801f30e:	e004      	b.n	801f31a <icmp_input+0x1e2>
        goto icmperr;
 801f310:	bf00      	nop
 801f312:	e002      	b.n	801f31a <icmp_input+0x1e2>
          goto icmperr;
 801f314:	bf00      	nop
 801f316:	e000      	b.n	801f31a <icmp_input+0x1e2>
          goto icmperr;
 801f318:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801f31a:	6878      	ldr	r0, [r7, #4]
 801f31c:	f7f8 f99c 	bl	8017658 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801f320:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801f322:	3728      	adds	r7, #40	; 0x28
 801f324:	46bd      	mov	sp, r7
 801f326:	bd80      	pop	{r7, pc}
 801f328:	200110bc 	.word	0x200110bc
 801f32c:	200110d0 	.word	0x200110d0
 801f330:	08026bd4 	.word	0x08026bd4
 801f334:	08026c0c 	.word	0x08026c0c
 801f338:	08026c44 	.word	0x08026c44
 801f33c:	08026c6c 	.word	0x08026c6c

0801f340 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801f340:	b580      	push	{r7, lr}
 801f342:	b082      	sub	sp, #8
 801f344:	af00      	add	r7, sp, #0
 801f346:	6078      	str	r0, [r7, #4]
 801f348:	460b      	mov	r3, r1
 801f34a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801f34c:	78fb      	ldrb	r3, [r7, #3]
 801f34e:	461a      	mov	r2, r3
 801f350:	2103      	movs	r1, #3
 801f352:	6878      	ldr	r0, [r7, #4]
 801f354:	f000 f814 	bl	801f380 <icmp_send_response>
}
 801f358:	bf00      	nop
 801f35a:	3708      	adds	r7, #8
 801f35c:	46bd      	mov	sp, r7
 801f35e:	bd80      	pop	{r7, pc}

0801f360 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801f360:	b580      	push	{r7, lr}
 801f362:	b082      	sub	sp, #8
 801f364:	af00      	add	r7, sp, #0
 801f366:	6078      	str	r0, [r7, #4]
 801f368:	460b      	mov	r3, r1
 801f36a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801f36c:	78fb      	ldrb	r3, [r7, #3]
 801f36e:	461a      	mov	r2, r3
 801f370:	210b      	movs	r1, #11
 801f372:	6878      	ldr	r0, [r7, #4]
 801f374:	f000 f804 	bl	801f380 <icmp_send_response>
}
 801f378:	bf00      	nop
 801f37a:	3708      	adds	r7, #8
 801f37c:	46bd      	mov	sp, r7
 801f37e:	bd80      	pop	{r7, pc}

0801f380 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801f380:	b580      	push	{r7, lr}
 801f382:	b08c      	sub	sp, #48	; 0x30
 801f384:	af04      	add	r7, sp, #16
 801f386:	6078      	str	r0, [r7, #4]
 801f388:	460b      	mov	r3, r1
 801f38a:	70fb      	strb	r3, [r7, #3]
 801f38c:	4613      	mov	r3, r2
 801f38e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801f390:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f394:	2124      	movs	r1, #36	; 0x24
 801f396:	2022      	movs	r0, #34	; 0x22
 801f398:	f7f7 fe7a 	bl	8017090 <pbuf_alloc>
 801f39c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801f39e:	69fb      	ldr	r3, [r7, #28]
 801f3a0:	2b00      	cmp	r3, #0
 801f3a2:	d04c      	beq.n	801f43e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801f3a4:	69fb      	ldr	r3, [r7, #28]
 801f3a6:	895b      	ldrh	r3, [r3, #10]
 801f3a8:	2b23      	cmp	r3, #35	; 0x23
 801f3aa:	d806      	bhi.n	801f3ba <icmp_send_response+0x3a>
 801f3ac:	4b26      	ldr	r3, [pc, #152]	; (801f448 <icmp_send_response+0xc8>)
 801f3ae:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801f3b2:	4926      	ldr	r1, [pc, #152]	; (801f44c <icmp_send_response+0xcc>)
 801f3b4:	4826      	ldr	r0, [pc, #152]	; (801f450 <icmp_send_response+0xd0>)
 801f3b6:	f002 f8b5 	bl	8021524 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801f3ba:	687b      	ldr	r3, [r7, #4]
 801f3bc:	685b      	ldr	r3, [r3, #4]
 801f3be:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801f3c0:	69fb      	ldr	r3, [r7, #28]
 801f3c2:	685b      	ldr	r3, [r3, #4]
 801f3c4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801f3c6:	697b      	ldr	r3, [r7, #20]
 801f3c8:	78fa      	ldrb	r2, [r7, #3]
 801f3ca:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801f3cc:	697b      	ldr	r3, [r7, #20]
 801f3ce:	78ba      	ldrb	r2, [r7, #2]
 801f3d0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801f3d2:	697b      	ldr	r3, [r7, #20]
 801f3d4:	2200      	movs	r2, #0
 801f3d6:	711a      	strb	r2, [r3, #4]
 801f3d8:	2200      	movs	r2, #0
 801f3da:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801f3dc:	697b      	ldr	r3, [r7, #20]
 801f3de:	2200      	movs	r2, #0
 801f3e0:	719a      	strb	r2, [r3, #6]
 801f3e2:	2200      	movs	r2, #0
 801f3e4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801f3e6:	69fb      	ldr	r3, [r7, #28]
 801f3e8:	685b      	ldr	r3, [r3, #4]
 801f3ea:	f103 0008 	add.w	r0, r3, #8
 801f3ee:	687b      	ldr	r3, [r7, #4]
 801f3f0:	685b      	ldr	r3, [r3, #4]
 801f3f2:	221c      	movs	r2, #28
 801f3f4:	4619      	mov	r1, r3
 801f3f6:	f001 ffbb 	bl	8021370 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801f3fa:	69bb      	ldr	r3, [r7, #24]
 801f3fc:	68db      	ldr	r3, [r3, #12]
 801f3fe:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801f400:	f107 030c 	add.w	r3, r7, #12
 801f404:	4618      	mov	r0, r3
 801f406:	f000 f825 	bl	801f454 <ip4_route>
 801f40a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801f40c:	693b      	ldr	r3, [r7, #16]
 801f40e:	2b00      	cmp	r3, #0
 801f410:	d011      	beq.n	801f436 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801f412:	697b      	ldr	r3, [r7, #20]
 801f414:	2200      	movs	r2, #0
 801f416:	709a      	strb	r2, [r3, #2]
 801f418:	2200      	movs	r2, #0
 801f41a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801f41c:	f107 020c 	add.w	r2, r7, #12
 801f420:	693b      	ldr	r3, [r7, #16]
 801f422:	9302      	str	r3, [sp, #8]
 801f424:	2301      	movs	r3, #1
 801f426:	9301      	str	r3, [sp, #4]
 801f428:	2300      	movs	r3, #0
 801f42a:	9300      	str	r3, [sp, #0]
 801f42c:	23ff      	movs	r3, #255	; 0xff
 801f42e:	2100      	movs	r1, #0
 801f430:	69f8      	ldr	r0, [r7, #28]
 801f432:	f000 f9cd 	bl	801f7d0 <ip4_output_if>
  }
  pbuf_free(q);
 801f436:	69f8      	ldr	r0, [r7, #28]
 801f438:	f7f8 f90e 	bl	8017658 <pbuf_free>
 801f43c:	e000      	b.n	801f440 <icmp_send_response+0xc0>
    return;
 801f43e:	bf00      	nop
}
 801f440:	3720      	adds	r7, #32
 801f442:	46bd      	mov	sp, r7
 801f444:	bd80      	pop	{r7, pc}
 801f446:	bf00      	nop
 801f448:	08026bd4 	.word	0x08026bd4
 801f44c:	08026ca0 	.word	0x08026ca0
 801f450:	08026c44 	.word	0x08026c44

0801f454 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801f454:	b480      	push	{r7}
 801f456:	b085      	sub	sp, #20
 801f458:	af00      	add	r7, sp, #0
 801f45a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801f45c:	4b33      	ldr	r3, [pc, #204]	; (801f52c <ip4_route+0xd8>)
 801f45e:	681b      	ldr	r3, [r3, #0]
 801f460:	60fb      	str	r3, [r7, #12]
 801f462:	e036      	b.n	801f4d2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801f464:	68fb      	ldr	r3, [r7, #12]
 801f466:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801f46a:	f003 0301 	and.w	r3, r3, #1
 801f46e:	b2db      	uxtb	r3, r3
 801f470:	2b00      	cmp	r3, #0
 801f472:	d02b      	beq.n	801f4cc <ip4_route+0x78>
 801f474:	68fb      	ldr	r3, [r7, #12]
 801f476:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801f47a:	089b      	lsrs	r3, r3, #2
 801f47c:	f003 0301 	and.w	r3, r3, #1
 801f480:	b2db      	uxtb	r3, r3
 801f482:	2b00      	cmp	r3, #0
 801f484:	d022      	beq.n	801f4cc <ip4_route+0x78>
 801f486:	68fb      	ldr	r3, [r7, #12]
 801f488:	3304      	adds	r3, #4
 801f48a:	681b      	ldr	r3, [r3, #0]
 801f48c:	2b00      	cmp	r3, #0
 801f48e:	d01d      	beq.n	801f4cc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801f490:	687b      	ldr	r3, [r7, #4]
 801f492:	681a      	ldr	r2, [r3, #0]
 801f494:	68fb      	ldr	r3, [r7, #12]
 801f496:	3304      	adds	r3, #4
 801f498:	681b      	ldr	r3, [r3, #0]
 801f49a:	405a      	eors	r2, r3
 801f49c:	68fb      	ldr	r3, [r7, #12]
 801f49e:	3308      	adds	r3, #8
 801f4a0:	681b      	ldr	r3, [r3, #0]
 801f4a2:	4013      	ands	r3, r2
 801f4a4:	2b00      	cmp	r3, #0
 801f4a6:	d101      	bne.n	801f4ac <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801f4a8:	68fb      	ldr	r3, [r7, #12]
 801f4aa:	e038      	b.n	801f51e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801f4ac:	68fb      	ldr	r3, [r7, #12]
 801f4ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801f4b2:	f003 0302 	and.w	r3, r3, #2
 801f4b6:	2b00      	cmp	r3, #0
 801f4b8:	d108      	bne.n	801f4cc <ip4_route+0x78>
 801f4ba:	687b      	ldr	r3, [r7, #4]
 801f4bc:	681a      	ldr	r2, [r3, #0]
 801f4be:	68fb      	ldr	r3, [r7, #12]
 801f4c0:	330c      	adds	r3, #12
 801f4c2:	681b      	ldr	r3, [r3, #0]
 801f4c4:	429a      	cmp	r2, r3
 801f4c6:	d101      	bne.n	801f4cc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801f4c8:	68fb      	ldr	r3, [r7, #12]
 801f4ca:	e028      	b.n	801f51e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801f4cc:	68fb      	ldr	r3, [r7, #12]
 801f4ce:	681b      	ldr	r3, [r3, #0]
 801f4d0:	60fb      	str	r3, [r7, #12]
 801f4d2:	68fb      	ldr	r3, [r7, #12]
 801f4d4:	2b00      	cmp	r3, #0
 801f4d6:	d1c5      	bne.n	801f464 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801f4d8:	4b15      	ldr	r3, [pc, #84]	; (801f530 <ip4_route+0xdc>)
 801f4da:	681b      	ldr	r3, [r3, #0]
 801f4dc:	2b00      	cmp	r3, #0
 801f4de:	d01a      	beq.n	801f516 <ip4_route+0xc2>
 801f4e0:	4b13      	ldr	r3, [pc, #76]	; (801f530 <ip4_route+0xdc>)
 801f4e2:	681b      	ldr	r3, [r3, #0]
 801f4e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801f4e8:	f003 0301 	and.w	r3, r3, #1
 801f4ec:	2b00      	cmp	r3, #0
 801f4ee:	d012      	beq.n	801f516 <ip4_route+0xc2>
 801f4f0:	4b0f      	ldr	r3, [pc, #60]	; (801f530 <ip4_route+0xdc>)
 801f4f2:	681b      	ldr	r3, [r3, #0]
 801f4f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801f4f8:	f003 0304 	and.w	r3, r3, #4
 801f4fc:	2b00      	cmp	r3, #0
 801f4fe:	d00a      	beq.n	801f516 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801f500:	4b0b      	ldr	r3, [pc, #44]	; (801f530 <ip4_route+0xdc>)
 801f502:	681b      	ldr	r3, [r3, #0]
 801f504:	3304      	adds	r3, #4
 801f506:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801f508:	2b00      	cmp	r3, #0
 801f50a:	d004      	beq.n	801f516 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801f50c:	687b      	ldr	r3, [r7, #4]
 801f50e:	681b      	ldr	r3, [r3, #0]
 801f510:	b2db      	uxtb	r3, r3
 801f512:	2b7f      	cmp	r3, #127	; 0x7f
 801f514:	d101      	bne.n	801f51a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801f516:	2300      	movs	r3, #0
 801f518:	e001      	b.n	801f51e <ip4_route+0xca>
  }

  return netif_default;
 801f51a:	4b05      	ldr	r3, [pc, #20]	; (801f530 <ip4_route+0xdc>)
 801f51c:	681b      	ldr	r3, [r3, #0]
}
 801f51e:	4618      	mov	r0, r3
 801f520:	3714      	adds	r7, #20
 801f522:	46bd      	mov	sp, r7
 801f524:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f528:	4770      	bx	lr
 801f52a:	bf00      	nop
 801f52c:	2001b980 	.word	0x2001b980
 801f530:	2001b984 	.word	0x2001b984

0801f534 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801f534:	b580      	push	{r7, lr}
 801f536:	b082      	sub	sp, #8
 801f538:	af00      	add	r7, sp, #0
 801f53a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801f53c:	687b      	ldr	r3, [r7, #4]
 801f53e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801f542:	f003 0301 	and.w	r3, r3, #1
 801f546:	b2db      	uxtb	r3, r3
 801f548:	2b00      	cmp	r3, #0
 801f54a:	d016      	beq.n	801f57a <ip4_input_accept+0x46>
 801f54c:	687b      	ldr	r3, [r7, #4]
 801f54e:	3304      	adds	r3, #4
 801f550:	681b      	ldr	r3, [r3, #0]
 801f552:	2b00      	cmp	r3, #0
 801f554:	d011      	beq.n	801f57a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801f556:	4b0b      	ldr	r3, [pc, #44]	; (801f584 <ip4_input_accept+0x50>)
 801f558:	695a      	ldr	r2, [r3, #20]
 801f55a:	687b      	ldr	r3, [r7, #4]
 801f55c:	3304      	adds	r3, #4
 801f55e:	681b      	ldr	r3, [r3, #0]
 801f560:	429a      	cmp	r2, r3
 801f562:	d008      	beq.n	801f576 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801f564:	4b07      	ldr	r3, [pc, #28]	; (801f584 <ip4_input_accept+0x50>)
 801f566:	695b      	ldr	r3, [r3, #20]
 801f568:	6879      	ldr	r1, [r7, #4]
 801f56a:	4618      	mov	r0, r3
 801f56c:	f000 fa08 	bl	801f980 <ip4_addr_isbroadcast_u32>
 801f570:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801f572:	2b00      	cmp	r3, #0
 801f574:	d001      	beq.n	801f57a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801f576:	2301      	movs	r3, #1
 801f578:	e000      	b.n	801f57c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801f57a:	2300      	movs	r3, #0
}
 801f57c:	4618      	mov	r0, r3
 801f57e:	3708      	adds	r7, #8
 801f580:	46bd      	mov	sp, r7
 801f582:	bd80      	pop	{r7, pc}
 801f584:	200110bc 	.word	0x200110bc

0801f588 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801f588:	b580      	push	{r7, lr}
 801f58a:	b086      	sub	sp, #24
 801f58c:	af00      	add	r7, sp, #0
 801f58e:	6078      	str	r0, [r7, #4]
 801f590:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801f592:	687b      	ldr	r3, [r7, #4]
 801f594:	685b      	ldr	r3, [r3, #4]
 801f596:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801f598:	697b      	ldr	r3, [r7, #20]
 801f59a:	781b      	ldrb	r3, [r3, #0]
 801f59c:	091b      	lsrs	r3, r3, #4
 801f59e:	b2db      	uxtb	r3, r3
 801f5a0:	2b04      	cmp	r3, #4
 801f5a2:	d004      	beq.n	801f5ae <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801f5a4:	6878      	ldr	r0, [r7, #4]
 801f5a6:	f7f8 f857 	bl	8017658 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801f5aa:	2300      	movs	r3, #0
 801f5ac:	e107      	b.n	801f7be <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801f5ae:	697b      	ldr	r3, [r7, #20]
 801f5b0:	781b      	ldrb	r3, [r3, #0]
 801f5b2:	f003 030f 	and.w	r3, r3, #15
 801f5b6:	b2db      	uxtb	r3, r3
 801f5b8:	009b      	lsls	r3, r3, #2
 801f5ba:	b2db      	uxtb	r3, r3
 801f5bc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801f5be:	697b      	ldr	r3, [r7, #20]
 801f5c0:	885b      	ldrh	r3, [r3, #2]
 801f5c2:	b29b      	uxth	r3, r3
 801f5c4:	4618      	mov	r0, r3
 801f5c6:	f7f6 fbbd 	bl	8015d44 <lwip_htons>
 801f5ca:	4603      	mov	r3, r0
 801f5cc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801f5ce:	687b      	ldr	r3, [r7, #4]
 801f5d0:	891b      	ldrh	r3, [r3, #8]
 801f5d2:	89ba      	ldrh	r2, [r7, #12]
 801f5d4:	429a      	cmp	r2, r3
 801f5d6:	d204      	bcs.n	801f5e2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801f5d8:	89bb      	ldrh	r3, [r7, #12]
 801f5da:	4619      	mov	r1, r3
 801f5dc:	6878      	ldr	r0, [r7, #4]
 801f5de:	f7f7 feb5 	bl	801734c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801f5e2:	687b      	ldr	r3, [r7, #4]
 801f5e4:	895b      	ldrh	r3, [r3, #10]
 801f5e6:	89fa      	ldrh	r2, [r7, #14]
 801f5e8:	429a      	cmp	r2, r3
 801f5ea:	d807      	bhi.n	801f5fc <ip4_input+0x74>
 801f5ec:	687b      	ldr	r3, [r7, #4]
 801f5ee:	891b      	ldrh	r3, [r3, #8]
 801f5f0:	89ba      	ldrh	r2, [r7, #12]
 801f5f2:	429a      	cmp	r2, r3
 801f5f4:	d802      	bhi.n	801f5fc <ip4_input+0x74>
 801f5f6:	89fb      	ldrh	r3, [r7, #14]
 801f5f8:	2b13      	cmp	r3, #19
 801f5fa:	d804      	bhi.n	801f606 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801f5fc:	6878      	ldr	r0, [r7, #4]
 801f5fe:	f7f8 f82b 	bl	8017658 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801f602:	2300      	movs	r3, #0
 801f604:	e0db      	b.n	801f7be <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801f606:	697b      	ldr	r3, [r7, #20]
 801f608:	691b      	ldr	r3, [r3, #16]
 801f60a:	4a6f      	ldr	r2, [pc, #444]	; (801f7c8 <ip4_input+0x240>)
 801f60c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801f60e:	697b      	ldr	r3, [r7, #20]
 801f610:	68db      	ldr	r3, [r3, #12]
 801f612:	4a6d      	ldr	r2, [pc, #436]	; (801f7c8 <ip4_input+0x240>)
 801f614:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f616:	4b6c      	ldr	r3, [pc, #432]	; (801f7c8 <ip4_input+0x240>)
 801f618:	695b      	ldr	r3, [r3, #20]
 801f61a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f61e:	2be0      	cmp	r3, #224	; 0xe0
 801f620:	d112      	bne.n	801f648 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801f622:	683b      	ldr	r3, [r7, #0]
 801f624:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801f628:	f003 0301 	and.w	r3, r3, #1
 801f62c:	b2db      	uxtb	r3, r3
 801f62e:	2b00      	cmp	r3, #0
 801f630:	d007      	beq.n	801f642 <ip4_input+0xba>
 801f632:	683b      	ldr	r3, [r7, #0]
 801f634:	3304      	adds	r3, #4
 801f636:	681b      	ldr	r3, [r3, #0]
 801f638:	2b00      	cmp	r3, #0
 801f63a:	d002      	beq.n	801f642 <ip4_input+0xba>
      netif = inp;
 801f63c:	683b      	ldr	r3, [r7, #0]
 801f63e:	613b      	str	r3, [r7, #16]
 801f640:	e02a      	b.n	801f698 <ip4_input+0x110>
    } else {
      netif = NULL;
 801f642:	2300      	movs	r3, #0
 801f644:	613b      	str	r3, [r7, #16]
 801f646:	e027      	b.n	801f698 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801f648:	6838      	ldr	r0, [r7, #0]
 801f64a:	f7ff ff73 	bl	801f534 <ip4_input_accept>
 801f64e:	4603      	mov	r3, r0
 801f650:	2b00      	cmp	r3, #0
 801f652:	d002      	beq.n	801f65a <ip4_input+0xd2>
      netif = inp;
 801f654:	683b      	ldr	r3, [r7, #0]
 801f656:	613b      	str	r3, [r7, #16]
 801f658:	e01e      	b.n	801f698 <ip4_input+0x110>
    } else {
      netif = NULL;
 801f65a:	2300      	movs	r3, #0
 801f65c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801f65e:	4b5a      	ldr	r3, [pc, #360]	; (801f7c8 <ip4_input+0x240>)
 801f660:	695b      	ldr	r3, [r3, #20]
 801f662:	b2db      	uxtb	r3, r3
 801f664:	2b7f      	cmp	r3, #127	; 0x7f
 801f666:	d017      	beq.n	801f698 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801f668:	4b58      	ldr	r3, [pc, #352]	; (801f7cc <ip4_input+0x244>)
 801f66a:	681b      	ldr	r3, [r3, #0]
 801f66c:	613b      	str	r3, [r7, #16]
 801f66e:	e00e      	b.n	801f68e <ip4_input+0x106>
          if (netif == inp) {
 801f670:	693a      	ldr	r2, [r7, #16]
 801f672:	683b      	ldr	r3, [r7, #0]
 801f674:	429a      	cmp	r2, r3
 801f676:	d006      	beq.n	801f686 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801f678:	6938      	ldr	r0, [r7, #16]
 801f67a:	f7ff ff5b 	bl	801f534 <ip4_input_accept>
 801f67e:	4603      	mov	r3, r0
 801f680:	2b00      	cmp	r3, #0
 801f682:	d108      	bne.n	801f696 <ip4_input+0x10e>
 801f684:	e000      	b.n	801f688 <ip4_input+0x100>
            continue;
 801f686:	bf00      	nop
        NETIF_FOREACH(netif) {
 801f688:	693b      	ldr	r3, [r7, #16]
 801f68a:	681b      	ldr	r3, [r3, #0]
 801f68c:	613b      	str	r3, [r7, #16]
 801f68e:	693b      	ldr	r3, [r7, #16]
 801f690:	2b00      	cmp	r3, #0
 801f692:	d1ed      	bne.n	801f670 <ip4_input+0xe8>
 801f694:	e000      	b.n	801f698 <ip4_input+0x110>
            break;
 801f696:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801f698:	4b4b      	ldr	r3, [pc, #300]	; (801f7c8 <ip4_input+0x240>)
 801f69a:	691b      	ldr	r3, [r3, #16]
 801f69c:	6839      	ldr	r1, [r7, #0]
 801f69e:	4618      	mov	r0, r3
 801f6a0:	f000 f96e 	bl	801f980 <ip4_addr_isbroadcast_u32>
 801f6a4:	4603      	mov	r3, r0
 801f6a6:	2b00      	cmp	r3, #0
 801f6a8:	d105      	bne.n	801f6b6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801f6aa:	4b47      	ldr	r3, [pc, #284]	; (801f7c8 <ip4_input+0x240>)
 801f6ac:	691b      	ldr	r3, [r3, #16]
 801f6ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801f6b2:	2be0      	cmp	r3, #224	; 0xe0
 801f6b4:	d104      	bne.n	801f6c0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801f6b6:	6878      	ldr	r0, [r7, #4]
 801f6b8:	f7f7 ffce 	bl	8017658 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801f6bc:	2300      	movs	r3, #0
 801f6be:	e07e      	b.n	801f7be <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801f6c0:	693b      	ldr	r3, [r7, #16]
 801f6c2:	2b00      	cmp	r3, #0
 801f6c4:	d104      	bne.n	801f6d0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801f6c6:	6878      	ldr	r0, [r7, #4]
 801f6c8:	f7f7 ffc6 	bl	8017658 <pbuf_free>
    return ERR_OK;
 801f6cc:	2300      	movs	r3, #0
 801f6ce:	e076      	b.n	801f7be <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801f6d0:	697b      	ldr	r3, [r7, #20]
 801f6d2:	88db      	ldrh	r3, [r3, #6]
 801f6d4:	b29b      	uxth	r3, r3
 801f6d6:	461a      	mov	r2, r3
 801f6d8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801f6dc:	4013      	ands	r3, r2
 801f6de:	2b00      	cmp	r3, #0
 801f6e0:	d00b      	beq.n	801f6fa <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801f6e2:	6878      	ldr	r0, [r7, #4]
 801f6e4:	f000 fc92 	bl	802000c <ip4_reass>
 801f6e8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801f6ea:	687b      	ldr	r3, [r7, #4]
 801f6ec:	2b00      	cmp	r3, #0
 801f6ee:	d101      	bne.n	801f6f4 <ip4_input+0x16c>
      return ERR_OK;
 801f6f0:	2300      	movs	r3, #0
 801f6f2:	e064      	b.n	801f7be <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801f6f4:	687b      	ldr	r3, [r7, #4]
 801f6f6:	685b      	ldr	r3, [r3, #4]
 801f6f8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801f6fa:	4a33      	ldr	r2, [pc, #204]	; (801f7c8 <ip4_input+0x240>)
 801f6fc:	693b      	ldr	r3, [r7, #16]
 801f6fe:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801f700:	4a31      	ldr	r2, [pc, #196]	; (801f7c8 <ip4_input+0x240>)
 801f702:	683b      	ldr	r3, [r7, #0]
 801f704:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801f706:	4a30      	ldr	r2, [pc, #192]	; (801f7c8 <ip4_input+0x240>)
 801f708:	697b      	ldr	r3, [r7, #20]
 801f70a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801f70c:	697b      	ldr	r3, [r7, #20]
 801f70e:	781b      	ldrb	r3, [r3, #0]
 801f710:	f003 030f 	and.w	r3, r3, #15
 801f714:	b2db      	uxtb	r3, r3
 801f716:	009b      	lsls	r3, r3, #2
 801f718:	b2db      	uxtb	r3, r3
 801f71a:	b29a      	uxth	r2, r3
 801f71c:	4b2a      	ldr	r3, [pc, #168]	; (801f7c8 <ip4_input+0x240>)
 801f71e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801f720:	89fb      	ldrh	r3, [r7, #14]
 801f722:	4619      	mov	r1, r3
 801f724:	6878      	ldr	r0, [r7, #4]
 801f726:	f7f7 ff11 	bl	801754c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801f72a:	697b      	ldr	r3, [r7, #20]
 801f72c:	7a5b      	ldrb	r3, [r3, #9]
 801f72e:	2b11      	cmp	r3, #17
 801f730:	d006      	beq.n	801f740 <ip4_input+0x1b8>
 801f732:	2b11      	cmp	r3, #17
 801f734:	dc13      	bgt.n	801f75e <ip4_input+0x1d6>
 801f736:	2b01      	cmp	r3, #1
 801f738:	d00c      	beq.n	801f754 <ip4_input+0x1cc>
 801f73a:	2b06      	cmp	r3, #6
 801f73c:	d005      	beq.n	801f74a <ip4_input+0x1c2>
 801f73e:	e00e      	b.n	801f75e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801f740:	6839      	ldr	r1, [r7, #0]
 801f742:	6878      	ldr	r0, [r7, #4]
 801f744:	f7fe fc68 	bl	801e018 <udp_input>
        break;
 801f748:	e026      	b.n	801f798 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801f74a:	6839      	ldr	r1, [r7, #0]
 801f74c:	6878      	ldr	r0, [r7, #4]
 801f74e:	f7fa f85d 	bl	801980c <tcp_input>
        break;
 801f752:	e021      	b.n	801f798 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801f754:	6839      	ldr	r1, [r7, #0]
 801f756:	6878      	ldr	r0, [r7, #4]
 801f758:	f7ff fcee 	bl	801f138 <icmp_input>
        break;
 801f75c:	e01c      	b.n	801f798 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801f75e:	4b1a      	ldr	r3, [pc, #104]	; (801f7c8 <ip4_input+0x240>)
 801f760:	695b      	ldr	r3, [r3, #20]
 801f762:	6939      	ldr	r1, [r7, #16]
 801f764:	4618      	mov	r0, r3
 801f766:	f000 f90b 	bl	801f980 <ip4_addr_isbroadcast_u32>
 801f76a:	4603      	mov	r3, r0
 801f76c:	2b00      	cmp	r3, #0
 801f76e:	d10f      	bne.n	801f790 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801f770:	4b15      	ldr	r3, [pc, #84]	; (801f7c8 <ip4_input+0x240>)
 801f772:	695b      	ldr	r3, [r3, #20]
 801f774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801f778:	2be0      	cmp	r3, #224	; 0xe0
 801f77a:	d009      	beq.n	801f790 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801f77c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801f780:	4619      	mov	r1, r3
 801f782:	6878      	ldr	r0, [r7, #4]
 801f784:	f7f7 ff55 	bl	8017632 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801f788:	2102      	movs	r1, #2
 801f78a:	6878      	ldr	r0, [r7, #4]
 801f78c:	f7ff fdd8 	bl	801f340 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801f790:	6878      	ldr	r0, [r7, #4]
 801f792:	f7f7 ff61 	bl	8017658 <pbuf_free>
        break;
 801f796:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801f798:	4b0b      	ldr	r3, [pc, #44]	; (801f7c8 <ip4_input+0x240>)
 801f79a:	2200      	movs	r2, #0
 801f79c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801f79e:	4b0a      	ldr	r3, [pc, #40]	; (801f7c8 <ip4_input+0x240>)
 801f7a0:	2200      	movs	r2, #0
 801f7a2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801f7a4:	4b08      	ldr	r3, [pc, #32]	; (801f7c8 <ip4_input+0x240>)
 801f7a6:	2200      	movs	r2, #0
 801f7a8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801f7aa:	4b07      	ldr	r3, [pc, #28]	; (801f7c8 <ip4_input+0x240>)
 801f7ac:	2200      	movs	r2, #0
 801f7ae:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801f7b0:	4b05      	ldr	r3, [pc, #20]	; (801f7c8 <ip4_input+0x240>)
 801f7b2:	2200      	movs	r2, #0
 801f7b4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801f7b6:	4b04      	ldr	r3, [pc, #16]	; (801f7c8 <ip4_input+0x240>)
 801f7b8:	2200      	movs	r2, #0
 801f7ba:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801f7bc:	2300      	movs	r3, #0
}
 801f7be:	4618      	mov	r0, r3
 801f7c0:	3718      	adds	r7, #24
 801f7c2:	46bd      	mov	sp, r7
 801f7c4:	bd80      	pop	{r7, pc}
 801f7c6:	bf00      	nop
 801f7c8:	200110bc 	.word	0x200110bc
 801f7cc:	2001b980 	.word	0x2001b980

0801f7d0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801f7d0:	b580      	push	{r7, lr}
 801f7d2:	b08a      	sub	sp, #40	; 0x28
 801f7d4:	af04      	add	r7, sp, #16
 801f7d6:	60f8      	str	r0, [r7, #12]
 801f7d8:	60b9      	str	r1, [r7, #8]
 801f7da:	607a      	str	r2, [r7, #4]
 801f7dc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801f7de:	68bb      	ldr	r3, [r7, #8]
 801f7e0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801f7e2:	687b      	ldr	r3, [r7, #4]
 801f7e4:	2b00      	cmp	r3, #0
 801f7e6:	d009      	beq.n	801f7fc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801f7e8:	68bb      	ldr	r3, [r7, #8]
 801f7ea:	2b00      	cmp	r3, #0
 801f7ec:	d003      	beq.n	801f7f6 <ip4_output_if+0x26>
 801f7ee:	68bb      	ldr	r3, [r7, #8]
 801f7f0:	681b      	ldr	r3, [r3, #0]
 801f7f2:	2b00      	cmp	r3, #0
 801f7f4:	d102      	bne.n	801f7fc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801f7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f7f8:	3304      	adds	r3, #4
 801f7fa:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801f7fc:	78fa      	ldrb	r2, [r7, #3]
 801f7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f800:	9302      	str	r3, [sp, #8]
 801f802:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801f806:	9301      	str	r3, [sp, #4]
 801f808:	f897 3020 	ldrb.w	r3, [r7, #32]
 801f80c:	9300      	str	r3, [sp, #0]
 801f80e:	4613      	mov	r3, r2
 801f810:	687a      	ldr	r2, [r7, #4]
 801f812:	6979      	ldr	r1, [r7, #20]
 801f814:	68f8      	ldr	r0, [r7, #12]
 801f816:	f000 f805 	bl	801f824 <ip4_output_if_src>
 801f81a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801f81c:	4618      	mov	r0, r3
 801f81e:	3718      	adds	r7, #24
 801f820:	46bd      	mov	sp, r7
 801f822:	bd80      	pop	{r7, pc}

0801f824 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801f824:	b580      	push	{r7, lr}
 801f826:	b088      	sub	sp, #32
 801f828:	af00      	add	r7, sp, #0
 801f82a:	60f8      	str	r0, [r7, #12]
 801f82c:	60b9      	str	r1, [r7, #8]
 801f82e:	607a      	str	r2, [r7, #4]
 801f830:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801f832:	68fb      	ldr	r3, [r7, #12]
 801f834:	7b9b      	ldrb	r3, [r3, #14]
 801f836:	2b01      	cmp	r3, #1
 801f838:	d006      	beq.n	801f848 <ip4_output_if_src+0x24>
 801f83a:	4b4b      	ldr	r3, [pc, #300]	; (801f968 <ip4_output_if_src+0x144>)
 801f83c:	f44f 7255 	mov.w	r2, #852	; 0x354
 801f840:	494a      	ldr	r1, [pc, #296]	; (801f96c <ip4_output_if_src+0x148>)
 801f842:	484b      	ldr	r0, [pc, #300]	; (801f970 <ip4_output_if_src+0x14c>)
 801f844:	f001 fe6e 	bl	8021524 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801f848:	687b      	ldr	r3, [r7, #4]
 801f84a:	2b00      	cmp	r3, #0
 801f84c:	d060      	beq.n	801f910 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801f84e:	2314      	movs	r3, #20
 801f850:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801f852:	2114      	movs	r1, #20
 801f854:	68f8      	ldr	r0, [r7, #12]
 801f856:	f7f7 fe69 	bl	801752c <pbuf_add_header>
 801f85a:	4603      	mov	r3, r0
 801f85c:	2b00      	cmp	r3, #0
 801f85e:	d002      	beq.n	801f866 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801f860:	f06f 0301 	mvn.w	r3, #1
 801f864:	e07c      	b.n	801f960 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801f866:	68fb      	ldr	r3, [r7, #12]
 801f868:	685b      	ldr	r3, [r3, #4]
 801f86a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801f86c:	68fb      	ldr	r3, [r7, #12]
 801f86e:	895b      	ldrh	r3, [r3, #10]
 801f870:	2b13      	cmp	r3, #19
 801f872:	d806      	bhi.n	801f882 <ip4_output_if_src+0x5e>
 801f874:	4b3c      	ldr	r3, [pc, #240]	; (801f968 <ip4_output_if_src+0x144>)
 801f876:	f44f 7262 	mov.w	r2, #904	; 0x388
 801f87a:	493e      	ldr	r1, [pc, #248]	; (801f974 <ip4_output_if_src+0x150>)
 801f87c:	483c      	ldr	r0, [pc, #240]	; (801f970 <ip4_output_if_src+0x14c>)
 801f87e:	f001 fe51 	bl	8021524 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801f882:	69fb      	ldr	r3, [r7, #28]
 801f884:	78fa      	ldrb	r2, [r7, #3]
 801f886:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801f888:	69fb      	ldr	r3, [r7, #28]
 801f88a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801f88e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801f890:	687b      	ldr	r3, [r7, #4]
 801f892:	681a      	ldr	r2, [r3, #0]
 801f894:	69fb      	ldr	r3, [r7, #28]
 801f896:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801f898:	8b7b      	ldrh	r3, [r7, #26]
 801f89a:	089b      	lsrs	r3, r3, #2
 801f89c:	b29b      	uxth	r3, r3
 801f89e:	b2db      	uxtb	r3, r3
 801f8a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f8a4:	b2da      	uxtb	r2, r3
 801f8a6:	69fb      	ldr	r3, [r7, #28]
 801f8a8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801f8aa:	69fb      	ldr	r3, [r7, #28]
 801f8ac:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801f8b0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801f8b2:	68fb      	ldr	r3, [r7, #12]
 801f8b4:	891b      	ldrh	r3, [r3, #8]
 801f8b6:	4618      	mov	r0, r3
 801f8b8:	f7f6 fa44 	bl	8015d44 <lwip_htons>
 801f8bc:	4603      	mov	r3, r0
 801f8be:	461a      	mov	r2, r3
 801f8c0:	69fb      	ldr	r3, [r7, #28]
 801f8c2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801f8c4:	69fb      	ldr	r3, [r7, #28]
 801f8c6:	2200      	movs	r2, #0
 801f8c8:	719a      	strb	r2, [r3, #6]
 801f8ca:	2200      	movs	r2, #0
 801f8cc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801f8ce:	4b2a      	ldr	r3, [pc, #168]	; (801f978 <ip4_output_if_src+0x154>)
 801f8d0:	881b      	ldrh	r3, [r3, #0]
 801f8d2:	4618      	mov	r0, r3
 801f8d4:	f7f6 fa36 	bl	8015d44 <lwip_htons>
 801f8d8:	4603      	mov	r3, r0
 801f8da:	461a      	mov	r2, r3
 801f8dc:	69fb      	ldr	r3, [r7, #28]
 801f8de:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801f8e0:	4b25      	ldr	r3, [pc, #148]	; (801f978 <ip4_output_if_src+0x154>)
 801f8e2:	881b      	ldrh	r3, [r3, #0]
 801f8e4:	3301      	adds	r3, #1
 801f8e6:	b29a      	uxth	r2, r3
 801f8e8:	4b23      	ldr	r3, [pc, #140]	; (801f978 <ip4_output_if_src+0x154>)
 801f8ea:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801f8ec:	68bb      	ldr	r3, [r7, #8]
 801f8ee:	2b00      	cmp	r3, #0
 801f8f0:	d104      	bne.n	801f8fc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801f8f2:	4b22      	ldr	r3, [pc, #136]	; (801f97c <ip4_output_if_src+0x158>)
 801f8f4:	681a      	ldr	r2, [r3, #0]
 801f8f6:	69fb      	ldr	r3, [r7, #28]
 801f8f8:	60da      	str	r2, [r3, #12]
 801f8fa:	e003      	b.n	801f904 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801f8fc:	68bb      	ldr	r3, [r7, #8]
 801f8fe:	681a      	ldr	r2, [r3, #0]
 801f900:	69fb      	ldr	r3, [r7, #28]
 801f902:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801f904:	69fb      	ldr	r3, [r7, #28]
 801f906:	2200      	movs	r2, #0
 801f908:	729a      	strb	r2, [r3, #10]
 801f90a:	2200      	movs	r2, #0
 801f90c:	72da      	strb	r2, [r3, #11]
 801f90e:	e00f      	b.n	801f930 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801f910:	68fb      	ldr	r3, [r7, #12]
 801f912:	895b      	ldrh	r3, [r3, #10]
 801f914:	2b13      	cmp	r3, #19
 801f916:	d802      	bhi.n	801f91e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801f918:	f06f 0301 	mvn.w	r3, #1
 801f91c:	e020      	b.n	801f960 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801f91e:	68fb      	ldr	r3, [r7, #12]
 801f920:	685b      	ldr	r3, [r3, #4]
 801f922:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801f924:	69fb      	ldr	r3, [r7, #28]
 801f926:	691b      	ldr	r3, [r3, #16]
 801f928:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801f92a:	f107 0314 	add.w	r3, r7, #20
 801f92e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801f930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f932:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801f934:	2b00      	cmp	r3, #0
 801f936:	d00c      	beq.n	801f952 <ip4_output_if_src+0x12e>
 801f938:	68fb      	ldr	r3, [r7, #12]
 801f93a:	891a      	ldrh	r2, [r3, #8]
 801f93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f93e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801f940:	429a      	cmp	r2, r3
 801f942:	d906      	bls.n	801f952 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801f944:	687a      	ldr	r2, [r7, #4]
 801f946:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801f948:	68f8      	ldr	r0, [r7, #12]
 801f94a:	f000 fd4d 	bl	80203e8 <ip4_frag>
 801f94e:	4603      	mov	r3, r0
 801f950:	e006      	b.n	801f960 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801f952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f954:	695b      	ldr	r3, [r3, #20]
 801f956:	687a      	ldr	r2, [r7, #4]
 801f958:	68f9      	ldr	r1, [r7, #12]
 801f95a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f95c:	4798      	blx	r3
 801f95e:	4603      	mov	r3, r0
}
 801f960:	4618      	mov	r0, r3
 801f962:	3720      	adds	r7, #32
 801f964:	46bd      	mov	sp, r7
 801f966:	bd80      	pop	{r7, pc}
 801f968:	08026ccc 	.word	0x08026ccc
 801f96c:	08026d00 	.word	0x08026d00
 801f970:	08026d0c 	.word	0x08026d0c
 801f974:	08026d34 	.word	0x08026d34
 801f978:	20005412 	.word	0x20005412
 801f97c:	0802af88 	.word	0x0802af88

0801f980 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801f980:	b480      	push	{r7}
 801f982:	b085      	sub	sp, #20
 801f984:	af00      	add	r7, sp, #0
 801f986:	6078      	str	r0, [r7, #4]
 801f988:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801f98a:	687b      	ldr	r3, [r7, #4]
 801f98c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801f98e:	687b      	ldr	r3, [r7, #4]
 801f990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801f994:	d002      	beq.n	801f99c <ip4_addr_isbroadcast_u32+0x1c>
 801f996:	687b      	ldr	r3, [r7, #4]
 801f998:	2b00      	cmp	r3, #0
 801f99a:	d101      	bne.n	801f9a0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801f99c:	2301      	movs	r3, #1
 801f99e:	e02a      	b.n	801f9f6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801f9a0:	683b      	ldr	r3, [r7, #0]
 801f9a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801f9a6:	f003 0302 	and.w	r3, r3, #2
 801f9aa:	2b00      	cmp	r3, #0
 801f9ac:	d101      	bne.n	801f9b2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801f9ae:	2300      	movs	r3, #0
 801f9b0:	e021      	b.n	801f9f6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801f9b2:	683b      	ldr	r3, [r7, #0]
 801f9b4:	3304      	adds	r3, #4
 801f9b6:	681b      	ldr	r3, [r3, #0]
 801f9b8:	687a      	ldr	r2, [r7, #4]
 801f9ba:	429a      	cmp	r2, r3
 801f9bc:	d101      	bne.n	801f9c2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801f9be:	2300      	movs	r3, #0
 801f9c0:	e019      	b.n	801f9f6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801f9c2:	68fa      	ldr	r2, [r7, #12]
 801f9c4:	683b      	ldr	r3, [r7, #0]
 801f9c6:	3304      	adds	r3, #4
 801f9c8:	681b      	ldr	r3, [r3, #0]
 801f9ca:	405a      	eors	r2, r3
 801f9cc:	683b      	ldr	r3, [r7, #0]
 801f9ce:	3308      	adds	r3, #8
 801f9d0:	681b      	ldr	r3, [r3, #0]
 801f9d2:	4013      	ands	r3, r2
 801f9d4:	2b00      	cmp	r3, #0
 801f9d6:	d10d      	bne.n	801f9f4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801f9d8:	683b      	ldr	r3, [r7, #0]
 801f9da:	3308      	adds	r3, #8
 801f9dc:	681b      	ldr	r3, [r3, #0]
 801f9de:	43da      	mvns	r2, r3
 801f9e0:	687b      	ldr	r3, [r7, #4]
 801f9e2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801f9e4:	683b      	ldr	r3, [r7, #0]
 801f9e6:	3308      	adds	r3, #8
 801f9e8:	681b      	ldr	r3, [r3, #0]
 801f9ea:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801f9ec:	429a      	cmp	r2, r3
 801f9ee:	d101      	bne.n	801f9f4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801f9f0:	2301      	movs	r3, #1
 801f9f2:	e000      	b.n	801f9f6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801f9f4:	2300      	movs	r3, #0
  }
}
 801f9f6:	4618      	mov	r0, r3
 801f9f8:	3714      	adds	r7, #20
 801f9fa:	46bd      	mov	sp, r7
 801f9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa00:	4770      	bx	lr
	...

0801fa04 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801fa04:	b580      	push	{r7, lr}
 801fa06:	b084      	sub	sp, #16
 801fa08:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801fa0a:	2300      	movs	r3, #0
 801fa0c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801fa0e:	4b12      	ldr	r3, [pc, #72]	; (801fa58 <ip_reass_tmr+0x54>)
 801fa10:	681b      	ldr	r3, [r3, #0]
 801fa12:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801fa14:	e018      	b.n	801fa48 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801fa16:	68fb      	ldr	r3, [r7, #12]
 801fa18:	7fdb      	ldrb	r3, [r3, #31]
 801fa1a:	2b00      	cmp	r3, #0
 801fa1c:	d00b      	beq.n	801fa36 <ip_reass_tmr+0x32>
      r->timer--;
 801fa1e:	68fb      	ldr	r3, [r7, #12]
 801fa20:	7fdb      	ldrb	r3, [r3, #31]
 801fa22:	3b01      	subs	r3, #1
 801fa24:	b2da      	uxtb	r2, r3
 801fa26:	68fb      	ldr	r3, [r7, #12]
 801fa28:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801fa2a:	68fb      	ldr	r3, [r7, #12]
 801fa2c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801fa2e:	68fb      	ldr	r3, [r7, #12]
 801fa30:	681b      	ldr	r3, [r3, #0]
 801fa32:	60fb      	str	r3, [r7, #12]
 801fa34:	e008      	b.n	801fa48 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801fa36:	68fb      	ldr	r3, [r7, #12]
 801fa38:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801fa3a:	68fb      	ldr	r3, [r7, #12]
 801fa3c:	681b      	ldr	r3, [r3, #0]
 801fa3e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801fa40:	68b9      	ldr	r1, [r7, #8]
 801fa42:	6878      	ldr	r0, [r7, #4]
 801fa44:	f000 f80a 	bl	801fa5c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801fa48:	68fb      	ldr	r3, [r7, #12]
 801fa4a:	2b00      	cmp	r3, #0
 801fa4c:	d1e3      	bne.n	801fa16 <ip_reass_tmr+0x12>
    }
  }
}
 801fa4e:	bf00      	nop
 801fa50:	bf00      	nop
 801fa52:	3710      	adds	r7, #16
 801fa54:	46bd      	mov	sp, r7
 801fa56:	bd80      	pop	{r7, pc}
 801fa58:	20005414 	.word	0x20005414

0801fa5c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801fa5c:	b580      	push	{r7, lr}
 801fa5e:	b088      	sub	sp, #32
 801fa60:	af00      	add	r7, sp, #0
 801fa62:	6078      	str	r0, [r7, #4]
 801fa64:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801fa66:	2300      	movs	r3, #0
 801fa68:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801fa6a:	683a      	ldr	r2, [r7, #0]
 801fa6c:	687b      	ldr	r3, [r7, #4]
 801fa6e:	429a      	cmp	r2, r3
 801fa70:	d105      	bne.n	801fa7e <ip_reass_free_complete_datagram+0x22>
 801fa72:	4b45      	ldr	r3, [pc, #276]	; (801fb88 <ip_reass_free_complete_datagram+0x12c>)
 801fa74:	22ab      	movs	r2, #171	; 0xab
 801fa76:	4945      	ldr	r1, [pc, #276]	; (801fb8c <ip_reass_free_complete_datagram+0x130>)
 801fa78:	4845      	ldr	r0, [pc, #276]	; (801fb90 <ip_reass_free_complete_datagram+0x134>)
 801fa7a:	f001 fd53 	bl	8021524 <iprintf>
  if (prev != NULL) {
 801fa7e:	683b      	ldr	r3, [r7, #0]
 801fa80:	2b00      	cmp	r3, #0
 801fa82:	d00a      	beq.n	801fa9a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801fa84:	683b      	ldr	r3, [r7, #0]
 801fa86:	681b      	ldr	r3, [r3, #0]
 801fa88:	687a      	ldr	r2, [r7, #4]
 801fa8a:	429a      	cmp	r2, r3
 801fa8c:	d005      	beq.n	801fa9a <ip_reass_free_complete_datagram+0x3e>
 801fa8e:	4b3e      	ldr	r3, [pc, #248]	; (801fb88 <ip_reass_free_complete_datagram+0x12c>)
 801fa90:	22ad      	movs	r2, #173	; 0xad
 801fa92:	4940      	ldr	r1, [pc, #256]	; (801fb94 <ip_reass_free_complete_datagram+0x138>)
 801fa94:	483e      	ldr	r0, [pc, #248]	; (801fb90 <ip_reass_free_complete_datagram+0x134>)
 801fa96:	f001 fd45 	bl	8021524 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801fa9a:	687b      	ldr	r3, [r7, #4]
 801fa9c:	685b      	ldr	r3, [r3, #4]
 801fa9e:	685b      	ldr	r3, [r3, #4]
 801faa0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801faa2:	697b      	ldr	r3, [r7, #20]
 801faa4:	889b      	ldrh	r3, [r3, #4]
 801faa6:	b29b      	uxth	r3, r3
 801faa8:	2b00      	cmp	r3, #0
 801faaa:	d12a      	bne.n	801fb02 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801faac:	687b      	ldr	r3, [r7, #4]
 801faae:	685b      	ldr	r3, [r3, #4]
 801fab0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801fab2:	697b      	ldr	r3, [r7, #20]
 801fab4:	681a      	ldr	r2, [r3, #0]
 801fab6:	687b      	ldr	r3, [r7, #4]
 801fab8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801faba:	69bb      	ldr	r3, [r7, #24]
 801fabc:	6858      	ldr	r0, [r3, #4]
 801fabe:	687b      	ldr	r3, [r7, #4]
 801fac0:	3308      	adds	r3, #8
 801fac2:	2214      	movs	r2, #20
 801fac4:	4619      	mov	r1, r3
 801fac6:	f001 fc53 	bl	8021370 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801faca:	2101      	movs	r1, #1
 801facc:	69b8      	ldr	r0, [r7, #24]
 801face:	f7ff fc47 	bl	801f360 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801fad2:	69b8      	ldr	r0, [r7, #24]
 801fad4:	f7f7 fe4e 	bl	8017774 <pbuf_clen>
 801fad8:	4603      	mov	r3, r0
 801fada:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801fadc:	8bfa      	ldrh	r2, [r7, #30]
 801fade:	8a7b      	ldrh	r3, [r7, #18]
 801fae0:	4413      	add	r3, r2
 801fae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801fae6:	db05      	blt.n	801faf4 <ip_reass_free_complete_datagram+0x98>
 801fae8:	4b27      	ldr	r3, [pc, #156]	; (801fb88 <ip_reass_free_complete_datagram+0x12c>)
 801faea:	22bc      	movs	r2, #188	; 0xbc
 801faec:	492a      	ldr	r1, [pc, #168]	; (801fb98 <ip_reass_free_complete_datagram+0x13c>)
 801faee:	4828      	ldr	r0, [pc, #160]	; (801fb90 <ip_reass_free_complete_datagram+0x134>)
 801faf0:	f001 fd18 	bl	8021524 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801faf4:	8bfa      	ldrh	r2, [r7, #30]
 801faf6:	8a7b      	ldrh	r3, [r7, #18]
 801faf8:	4413      	add	r3, r2
 801fafa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801fafc:	69b8      	ldr	r0, [r7, #24]
 801fafe:	f7f7 fdab 	bl	8017658 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801fb02:	687b      	ldr	r3, [r7, #4]
 801fb04:	685b      	ldr	r3, [r3, #4]
 801fb06:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801fb08:	e01f      	b.n	801fb4a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801fb0a:	69bb      	ldr	r3, [r7, #24]
 801fb0c:	685b      	ldr	r3, [r3, #4]
 801fb0e:	617b      	str	r3, [r7, #20]
    pcur = p;
 801fb10:	69bb      	ldr	r3, [r7, #24]
 801fb12:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801fb14:	697b      	ldr	r3, [r7, #20]
 801fb16:	681b      	ldr	r3, [r3, #0]
 801fb18:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801fb1a:	68f8      	ldr	r0, [r7, #12]
 801fb1c:	f7f7 fe2a 	bl	8017774 <pbuf_clen>
 801fb20:	4603      	mov	r3, r0
 801fb22:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801fb24:	8bfa      	ldrh	r2, [r7, #30]
 801fb26:	8a7b      	ldrh	r3, [r7, #18]
 801fb28:	4413      	add	r3, r2
 801fb2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801fb2e:	db05      	blt.n	801fb3c <ip_reass_free_complete_datagram+0xe0>
 801fb30:	4b15      	ldr	r3, [pc, #84]	; (801fb88 <ip_reass_free_complete_datagram+0x12c>)
 801fb32:	22cc      	movs	r2, #204	; 0xcc
 801fb34:	4918      	ldr	r1, [pc, #96]	; (801fb98 <ip_reass_free_complete_datagram+0x13c>)
 801fb36:	4816      	ldr	r0, [pc, #88]	; (801fb90 <ip_reass_free_complete_datagram+0x134>)
 801fb38:	f001 fcf4 	bl	8021524 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801fb3c:	8bfa      	ldrh	r2, [r7, #30]
 801fb3e:	8a7b      	ldrh	r3, [r7, #18]
 801fb40:	4413      	add	r3, r2
 801fb42:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801fb44:	68f8      	ldr	r0, [r7, #12]
 801fb46:	f7f7 fd87 	bl	8017658 <pbuf_free>
  while (p != NULL) {
 801fb4a:	69bb      	ldr	r3, [r7, #24]
 801fb4c:	2b00      	cmp	r3, #0
 801fb4e:	d1dc      	bne.n	801fb0a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801fb50:	6839      	ldr	r1, [r7, #0]
 801fb52:	6878      	ldr	r0, [r7, #4]
 801fb54:	f000 f8c2 	bl	801fcdc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801fb58:	4b10      	ldr	r3, [pc, #64]	; (801fb9c <ip_reass_free_complete_datagram+0x140>)
 801fb5a:	881b      	ldrh	r3, [r3, #0]
 801fb5c:	8bfa      	ldrh	r2, [r7, #30]
 801fb5e:	429a      	cmp	r2, r3
 801fb60:	d905      	bls.n	801fb6e <ip_reass_free_complete_datagram+0x112>
 801fb62:	4b09      	ldr	r3, [pc, #36]	; (801fb88 <ip_reass_free_complete_datagram+0x12c>)
 801fb64:	22d2      	movs	r2, #210	; 0xd2
 801fb66:	490e      	ldr	r1, [pc, #56]	; (801fba0 <ip_reass_free_complete_datagram+0x144>)
 801fb68:	4809      	ldr	r0, [pc, #36]	; (801fb90 <ip_reass_free_complete_datagram+0x134>)
 801fb6a:	f001 fcdb 	bl	8021524 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801fb6e:	4b0b      	ldr	r3, [pc, #44]	; (801fb9c <ip_reass_free_complete_datagram+0x140>)
 801fb70:	881a      	ldrh	r2, [r3, #0]
 801fb72:	8bfb      	ldrh	r3, [r7, #30]
 801fb74:	1ad3      	subs	r3, r2, r3
 801fb76:	b29a      	uxth	r2, r3
 801fb78:	4b08      	ldr	r3, [pc, #32]	; (801fb9c <ip_reass_free_complete_datagram+0x140>)
 801fb7a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801fb7c:	8bfb      	ldrh	r3, [r7, #30]
}
 801fb7e:	4618      	mov	r0, r3
 801fb80:	3720      	adds	r7, #32
 801fb82:	46bd      	mov	sp, r7
 801fb84:	bd80      	pop	{r7, pc}
 801fb86:	bf00      	nop
 801fb88:	08026d64 	.word	0x08026d64
 801fb8c:	08026da0 	.word	0x08026da0
 801fb90:	08026dac 	.word	0x08026dac
 801fb94:	08026dd4 	.word	0x08026dd4
 801fb98:	08026de8 	.word	0x08026de8
 801fb9c:	20005418 	.word	0x20005418
 801fba0:	08026e08 	.word	0x08026e08

0801fba4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801fba4:	b580      	push	{r7, lr}
 801fba6:	b08a      	sub	sp, #40	; 0x28
 801fba8:	af00      	add	r7, sp, #0
 801fbaa:	6078      	str	r0, [r7, #4]
 801fbac:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801fbae:	2300      	movs	r3, #0
 801fbb0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801fbb2:	2300      	movs	r3, #0
 801fbb4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801fbb6:	2300      	movs	r3, #0
 801fbb8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801fbba:	2300      	movs	r3, #0
 801fbbc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801fbbe:	2300      	movs	r3, #0
 801fbc0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801fbc2:	4b28      	ldr	r3, [pc, #160]	; (801fc64 <ip_reass_remove_oldest_datagram+0xc0>)
 801fbc4:	681b      	ldr	r3, [r3, #0]
 801fbc6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801fbc8:	e030      	b.n	801fc2c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801fbca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbcc:	695a      	ldr	r2, [r3, #20]
 801fbce:	687b      	ldr	r3, [r7, #4]
 801fbd0:	68db      	ldr	r3, [r3, #12]
 801fbd2:	429a      	cmp	r2, r3
 801fbd4:	d10c      	bne.n	801fbf0 <ip_reass_remove_oldest_datagram+0x4c>
 801fbd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbd8:	699a      	ldr	r2, [r3, #24]
 801fbda:	687b      	ldr	r3, [r7, #4]
 801fbdc:	691b      	ldr	r3, [r3, #16]
 801fbde:	429a      	cmp	r2, r3
 801fbe0:	d106      	bne.n	801fbf0 <ip_reass_remove_oldest_datagram+0x4c>
 801fbe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbe4:	899a      	ldrh	r2, [r3, #12]
 801fbe6:	687b      	ldr	r3, [r7, #4]
 801fbe8:	889b      	ldrh	r3, [r3, #4]
 801fbea:	b29b      	uxth	r3, r3
 801fbec:	429a      	cmp	r2, r3
 801fbee:	d014      	beq.n	801fc1a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801fbf0:	693b      	ldr	r3, [r7, #16]
 801fbf2:	3301      	adds	r3, #1
 801fbf4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801fbf6:	6a3b      	ldr	r3, [r7, #32]
 801fbf8:	2b00      	cmp	r3, #0
 801fbfa:	d104      	bne.n	801fc06 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801fbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbfe:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801fc00:	69fb      	ldr	r3, [r7, #28]
 801fc02:	61bb      	str	r3, [r7, #24]
 801fc04:	e009      	b.n	801fc1a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801fc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc08:	7fda      	ldrb	r2, [r3, #31]
 801fc0a:	6a3b      	ldr	r3, [r7, #32]
 801fc0c:	7fdb      	ldrb	r3, [r3, #31]
 801fc0e:	429a      	cmp	r2, r3
 801fc10:	d803      	bhi.n	801fc1a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801fc12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc14:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801fc16:	69fb      	ldr	r3, [r7, #28]
 801fc18:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801fc1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc1c:	681b      	ldr	r3, [r3, #0]
 801fc1e:	2b00      	cmp	r3, #0
 801fc20:	d001      	beq.n	801fc26 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801fc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc24:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801fc26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc28:	681b      	ldr	r3, [r3, #0]
 801fc2a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801fc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc2e:	2b00      	cmp	r3, #0
 801fc30:	d1cb      	bne.n	801fbca <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801fc32:	6a3b      	ldr	r3, [r7, #32]
 801fc34:	2b00      	cmp	r3, #0
 801fc36:	d008      	beq.n	801fc4a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801fc38:	69b9      	ldr	r1, [r7, #24]
 801fc3a:	6a38      	ldr	r0, [r7, #32]
 801fc3c:	f7ff ff0e 	bl	801fa5c <ip_reass_free_complete_datagram>
 801fc40:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801fc42:	697a      	ldr	r2, [r7, #20]
 801fc44:	68fb      	ldr	r3, [r7, #12]
 801fc46:	4413      	add	r3, r2
 801fc48:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801fc4a:	697a      	ldr	r2, [r7, #20]
 801fc4c:	683b      	ldr	r3, [r7, #0]
 801fc4e:	429a      	cmp	r2, r3
 801fc50:	da02      	bge.n	801fc58 <ip_reass_remove_oldest_datagram+0xb4>
 801fc52:	693b      	ldr	r3, [r7, #16]
 801fc54:	2b01      	cmp	r3, #1
 801fc56:	dcac      	bgt.n	801fbb2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801fc58:	697b      	ldr	r3, [r7, #20]
}
 801fc5a:	4618      	mov	r0, r3
 801fc5c:	3728      	adds	r7, #40	; 0x28
 801fc5e:	46bd      	mov	sp, r7
 801fc60:	bd80      	pop	{r7, pc}
 801fc62:	bf00      	nop
 801fc64:	20005414 	.word	0x20005414

0801fc68 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801fc68:	b580      	push	{r7, lr}
 801fc6a:	b084      	sub	sp, #16
 801fc6c:	af00      	add	r7, sp, #0
 801fc6e:	6078      	str	r0, [r7, #4]
 801fc70:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801fc72:	2004      	movs	r0, #4
 801fc74:	f7f6 fdfa 	bl	801686c <memp_malloc>
 801fc78:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801fc7a:	68fb      	ldr	r3, [r7, #12]
 801fc7c:	2b00      	cmp	r3, #0
 801fc7e:	d110      	bne.n	801fca2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801fc80:	6839      	ldr	r1, [r7, #0]
 801fc82:	6878      	ldr	r0, [r7, #4]
 801fc84:	f7ff ff8e 	bl	801fba4 <ip_reass_remove_oldest_datagram>
 801fc88:	4602      	mov	r2, r0
 801fc8a:	683b      	ldr	r3, [r7, #0]
 801fc8c:	4293      	cmp	r3, r2
 801fc8e:	dc03      	bgt.n	801fc98 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801fc90:	2004      	movs	r0, #4
 801fc92:	f7f6 fdeb 	bl	801686c <memp_malloc>
 801fc96:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801fc98:	68fb      	ldr	r3, [r7, #12]
 801fc9a:	2b00      	cmp	r3, #0
 801fc9c:	d101      	bne.n	801fca2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801fc9e:	2300      	movs	r3, #0
 801fca0:	e016      	b.n	801fcd0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801fca2:	2220      	movs	r2, #32
 801fca4:	2100      	movs	r1, #0
 801fca6:	68f8      	ldr	r0, [r7, #12]
 801fca8:	f001 fb8a 	bl	80213c0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801fcac:	68fb      	ldr	r3, [r7, #12]
 801fcae:	220f      	movs	r2, #15
 801fcb0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801fcb2:	4b09      	ldr	r3, [pc, #36]	; (801fcd8 <ip_reass_enqueue_new_datagram+0x70>)
 801fcb4:	681a      	ldr	r2, [r3, #0]
 801fcb6:	68fb      	ldr	r3, [r7, #12]
 801fcb8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801fcba:	4a07      	ldr	r2, [pc, #28]	; (801fcd8 <ip_reass_enqueue_new_datagram+0x70>)
 801fcbc:	68fb      	ldr	r3, [r7, #12]
 801fcbe:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801fcc0:	68fb      	ldr	r3, [r7, #12]
 801fcc2:	3308      	adds	r3, #8
 801fcc4:	2214      	movs	r2, #20
 801fcc6:	6879      	ldr	r1, [r7, #4]
 801fcc8:	4618      	mov	r0, r3
 801fcca:	f001 fb51 	bl	8021370 <memcpy>
  return ipr;
 801fcce:	68fb      	ldr	r3, [r7, #12]
}
 801fcd0:	4618      	mov	r0, r3
 801fcd2:	3710      	adds	r7, #16
 801fcd4:	46bd      	mov	sp, r7
 801fcd6:	bd80      	pop	{r7, pc}
 801fcd8:	20005414 	.word	0x20005414

0801fcdc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801fcdc:	b580      	push	{r7, lr}
 801fcde:	b082      	sub	sp, #8
 801fce0:	af00      	add	r7, sp, #0
 801fce2:	6078      	str	r0, [r7, #4]
 801fce4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801fce6:	4b10      	ldr	r3, [pc, #64]	; (801fd28 <ip_reass_dequeue_datagram+0x4c>)
 801fce8:	681b      	ldr	r3, [r3, #0]
 801fcea:	687a      	ldr	r2, [r7, #4]
 801fcec:	429a      	cmp	r2, r3
 801fcee:	d104      	bne.n	801fcfa <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801fcf0:	687b      	ldr	r3, [r7, #4]
 801fcf2:	681b      	ldr	r3, [r3, #0]
 801fcf4:	4a0c      	ldr	r2, [pc, #48]	; (801fd28 <ip_reass_dequeue_datagram+0x4c>)
 801fcf6:	6013      	str	r3, [r2, #0]
 801fcf8:	e00d      	b.n	801fd16 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801fcfa:	683b      	ldr	r3, [r7, #0]
 801fcfc:	2b00      	cmp	r3, #0
 801fcfe:	d106      	bne.n	801fd0e <ip_reass_dequeue_datagram+0x32>
 801fd00:	4b0a      	ldr	r3, [pc, #40]	; (801fd2c <ip_reass_dequeue_datagram+0x50>)
 801fd02:	f240 1245 	movw	r2, #325	; 0x145
 801fd06:	490a      	ldr	r1, [pc, #40]	; (801fd30 <ip_reass_dequeue_datagram+0x54>)
 801fd08:	480a      	ldr	r0, [pc, #40]	; (801fd34 <ip_reass_dequeue_datagram+0x58>)
 801fd0a:	f001 fc0b 	bl	8021524 <iprintf>
    prev->next = ipr->next;
 801fd0e:	687b      	ldr	r3, [r7, #4]
 801fd10:	681a      	ldr	r2, [r3, #0]
 801fd12:	683b      	ldr	r3, [r7, #0]
 801fd14:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801fd16:	6879      	ldr	r1, [r7, #4]
 801fd18:	2004      	movs	r0, #4
 801fd1a:	f7f6 fdf9 	bl	8016910 <memp_free>
}
 801fd1e:	bf00      	nop
 801fd20:	3708      	adds	r7, #8
 801fd22:	46bd      	mov	sp, r7
 801fd24:	bd80      	pop	{r7, pc}
 801fd26:	bf00      	nop
 801fd28:	20005414 	.word	0x20005414
 801fd2c:	08026d64 	.word	0x08026d64
 801fd30:	08026e2c 	.word	0x08026e2c
 801fd34:	08026dac 	.word	0x08026dac

0801fd38 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801fd38:	b580      	push	{r7, lr}
 801fd3a:	b08c      	sub	sp, #48	; 0x30
 801fd3c:	af00      	add	r7, sp, #0
 801fd3e:	60f8      	str	r0, [r7, #12]
 801fd40:	60b9      	str	r1, [r7, #8]
 801fd42:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801fd44:	2300      	movs	r3, #0
 801fd46:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801fd48:	2301      	movs	r3, #1
 801fd4a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801fd4c:	68bb      	ldr	r3, [r7, #8]
 801fd4e:	685b      	ldr	r3, [r3, #4]
 801fd50:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801fd52:	69fb      	ldr	r3, [r7, #28]
 801fd54:	885b      	ldrh	r3, [r3, #2]
 801fd56:	b29b      	uxth	r3, r3
 801fd58:	4618      	mov	r0, r3
 801fd5a:	f7f5 fff3 	bl	8015d44 <lwip_htons>
 801fd5e:	4603      	mov	r3, r0
 801fd60:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801fd62:	69fb      	ldr	r3, [r7, #28]
 801fd64:	781b      	ldrb	r3, [r3, #0]
 801fd66:	f003 030f 	and.w	r3, r3, #15
 801fd6a:	b2db      	uxtb	r3, r3
 801fd6c:	009b      	lsls	r3, r3, #2
 801fd6e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801fd70:	7e7b      	ldrb	r3, [r7, #25]
 801fd72:	b29b      	uxth	r3, r3
 801fd74:	8b7a      	ldrh	r2, [r7, #26]
 801fd76:	429a      	cmp	r2, r3
 801fd78:	d202      	bcs.n	801fd80 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801fd7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fd7e:	e135      	b.n	801ffec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801fd80:	7e7b      	ldrb	r3, [r7, #25]
 801fd82:	b29b      	uxth	r3, r3
 801fd84:	8b7a      	ldrh	r2, [r7, #26]
 801fd86:	1ad3      	subs	r3, r2, r3
 801fd88:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801fd8a:	69fb      	ldr	r3, [r7, #28]
 801fd8c:	88db      	ldrh	r3, [r3, #6]
 801fd8e:	b29b      	uxth	r3, r3
 801fd90:	4618      	mov	r0, r3
 801fd92:	f7f5 ffd7 	bl	8015d44 <lwip_htons>
 801fd96:	4603      	mov	r3, r0
 801fd98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801fd9c:	b29b      	uxth	r3, r3
 801fd9e:	00db      	lsls	r3, r3, #3
 801fda0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801fda2:	68bb      	ldr	r3, [r7, #8]
 801fda4:	685b      	ldr	r3, [r3, #4]
 801fda6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801fda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fdaa:	2200      	movs	r2, #0
 801fdac:	701a      	strb	r2, [r3, #0]
 801fdae:	2200      	movs	r2, #0
 801fdb0:	705a      	strb	r2, [r3, #1]
 801fdb2:	2200      	movs	r2, #0
 801fdb4:	709a      	strb	r2, [r3, #2]
 801fdb6:	2200      	movs	r2, #0
 801fdb8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801fdba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fdbc:	8afa      	ldrh	r2, [r7, #22]
 801fdbe:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801fdc0:	8afa      	ldrh	r2, [r7, #22]
 801fdc2:	8b7b      	ldrh	r3, [r7, #26]
 801fdc4:	4413      	add	r3, r2
 801fdc6:	b29a      	uxth	r2, r3
 801fdc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fdca:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801fdcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fdce:	88db      	ldrh	r3, [r3, #6]
 801fdd0:	b29b      	uxth	r3, r3
 801fdd2:	8afa      	ldrh	r2, [r7, #22]
 801fdd4:	429a      	cmp	r2, r3
 801fdd6:	d902      	bls.n	801fdde <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801fdd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fddc:	e106      	b.n	801ffec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801fdde:	68fb      	ldr	r3, [r7, #12]
 801fde0:	685b      	ldr	r3, [r3, #4]
 801fde2:	627b      	str	r3, [r7, #36]	; 0x24
 801fde4:	e068      	b.n	801feb8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801fde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fde8:	685b      	ldr	r3, [r3, #4]
 801fdea:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801fdec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fdee:	889b      	ldrh	r3, [r3, #4]
 801fdf0:	b29a      	uxth	r2, r3
 801fdf2:	693b      	ldr	r3, [r7, #16]
 801fdf4:	889b      	ldrh	r3, [r3, #4]
 801fdf6:	b29b      	uxth	r3, r3
 801fdf8:	429a      	cmp	r2, r3
 801fdfa:	d235      	bcs.n	801fe68 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801fdfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fdfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fe00:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801fe02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fe04:	2b00      	cmp	r3, #0
 801fe06:	d020      	beq.n	801fe4a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801fe08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe0a:	889b      	ldrh	r3, [r3, #4]
 801fe0c:	b29a      	uxth	r2, r3
 801fe0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fe10:	88db      	ldrh	r3, [r3, #6]
 801fe12:	b29b      	uxth	r3, r3
 801fe14:	429a      	cmp	r2, r3
 801fe16:	d307      	bcc.n	801fe28 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801fe18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe1a:	88db      	ldrh	r3, [r3, #6]
 801fe1c:	b29a      	uxth	r2, r3
 801fe1e:	693b      	ldr	r3, [r7, #16]
 801fe20:	889b      	ldrh	r3, [r3, #4]
 801fe22:	b29b      	uxth	r3, r3
 801fe24:	429a      	cmp	r2, r3
 801fe26:	d902      	bls.n	801fe2e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801fe28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fe2c:	e0de      	b.n	801ffec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801fe2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fe30:	68ba      	ldr	r2, [r7, #8]
 801fe32:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801fe34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fe36:	88db      	ldrh	r3, [r3, #6]
 801fe38:	b29a      	uxth	r2, r3
 801fe3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe3c:	889b      	ldrh	r3, [r3, #4]
 801fe3e:	b29b      	uxth	r3, r3
 801fe40:	429a      	cmp	r2, r3
 801fe42:	d03d      	beq.n	801fec0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801fe44:	2300      	movs	r3, #0
 801fe46:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801fe48:	e03a      	b.n	801fec0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801fe4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe4c:	88db      	ldrh	r3, [r3, #6]
 801fe4e:	b29a      	uxth	r2, r3
 801fe50:	693b      	ldr	r3, [r7, #16]
 801fe52:	889b      	ldrh	r3, [r3, #4]
 801fe54:	b29b      	uxth	r3, r3
 801fe56:	429a      	cmp	r2, r3
 801fe58:	d902      	bls.n	801fe60 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801fe5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fe5e:	e0c5      	b.n	801ffec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801fe60:	68fb      	ldr	r3, [r7, #12]
 801fe62:	68ba      	ldr	r2, [r7, #8]
 801fe64:	605a      	str	r2, [r3, #4]
      break;
 801fe66:	e02b      	b.n	801fec0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801fe68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe6a:	889b      	ldrh	r3, [r3, #4]
 801fe6c:	b29a      	uxth	r2, r3
 801fe6e:	693b      	ldr	r3, [r7, #16]
 801fe70:	889b      	ldrh	r3, [r3, #4]
 801fe72:	b29b      	uxth	r3, r3
 801fe74:	429a      	cmp	r2, r3
 801fe76:	d102      	bne.n	801fe7e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801fe78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fe7c:	e0b6      	b.n	801ffec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801fe7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fe80:	889b      	ldrh	r3, [r3, #4]
 801fe82:	b29a      	uxth	r2, r3
 801fe84:	693b      	ldr	r3, [r7, #16]
 801fe86:	88db      	ldrh	r3, [r3, #6]
 801fe88:	b29b      	uxth	r3, r3
 801fe8a:	429a      	cmp	r2, r3
 801fe8c:	d202      	bcs.n	801fe94 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801fe8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fe92:	e0ab      	b.n	801ffec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801fe94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fe96:	2b00      	cmp	r3, #0
 801fe98:	d009      	beq.n	801feae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801fe9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fe9c:	88db      	ldrh	r3, [r3, #6]
 801fe9e:	b29a      	uxth	r2, r3
 801fea0:	693b      	ldr	r3, [r7, #16]
 801fea2:	889b      	ldrh	r3, [r3, #4]
 801fea4:	b29b      	uxth	r3, r3
 801fea6:	429a      	cmp	r2, r3
 801fea8:	d001      	beq.n	801feae <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801feaa:	2300      	movs	r3, #0
 801feac:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801feae:	693b      	ldr	r3, [r7, #16]
 801feb0:	681b      	ldr	r3, [r3, #0]
 801feb2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801feb4:	693b      	ldr	r3, [r7, #16]
 801feb6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801feb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801feba:	2b00      	cmp	r3, #0
 801febc:	d193      	bne.n	801fde6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801febe:	e000      	b.n	801fec2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801fec0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801fec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fec4:	2b00      	cmp	r3, #0
 801fec6:	d12d      	bne.n	801ff24 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801fec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801feca:	2b00      	cmp	r3, #0
 801fecc:	d01c      	beq.n	801ff08 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801fece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fed0:	88db      	ldrh	r3, [r3, #6]
 801fed2:	b29a      	uxth	r2, r3
 801fed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fed6:	889b      	ldrh	r3, [r3, #4]
 801fed8:	b29b      	uxth	r3, r3
 801feda:	429a      	cmp	r2, r3
 801fedc:	d906      	bls.n	801feec <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801fede:	4b45      	ldr	r3, [pc, #276]	; (801fff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801fee0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801fee4:	4944      	ldr	r1, [pc, #272]	; (801fff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801fee6:	4845      	ldr	r0, [pc, #276]	; (801fffc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801fee8:	f001 fb1c 	bl	8021524 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801feec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801feee:	68ba      	ldr	r2, [r7, #8]
 801fef0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801fef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fef4:	88db      	ldrh	r3, [r3, #6]
 801fef6:	b29a      	uxth	r2, r3
 801fef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fefa:	889b      	ldrh	r3, [r3, #4]
 801fefc:	b29b      	uxth	r3, r3
 801fefe:	429a      	cmp	r2, r3
 801ff00:	d010      	beq.n	801ff24 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801ff02:	2300      	movs	r3, #0
 801ff04:	623b      	str	r3, [r7, #32]
 801ff06:	e00d      	b.n	801ff24 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801ff08:	68fb      	ldr	r3, [r7, #12]
 801ff0a:	685b      	ldr	r3, [r3, #4]
 801ff0c:	2b00      	cmp	r3, #0
 801ff0e:	d006      	beq.n	801ff1e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801ff10:	4b38      	ldr	r3, [pc, #224]	; (801fff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ff12:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801ff16:	493a      	ldr	r1, [pc, #232]	; (8020000 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801ff18:	4838      	ldr	r0, [pc, #224]	; (801fffc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ff1a:	f001 fb03 	bl	8021524 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801ff1e:	68fb      	ldr	r3, [r7, #12]
 801ff20:	68ba      	ldr	r2, [r7, #8]
 801ff22:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801ff24:	687b      	ldr	r3, [r7, #4]
 801ff26:	2b00      	cmp	r3, #0
 801ff28:	d105      	bne.n	801ff36 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801ff2a:	68fb      	ldr	r3, [r7, #12]
 801ff2c:	7f9b      	ldrb	r3, [r3, #30]
 801ff2e:	f003 0301 	and.w	r3, r3, #1
 801ff32:	2b00      	cmp	r3, #0
 801ff34:	d059      	beq.n	801ffea <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801ff36:	6a3b      	ldr	r3, [r7, #32]
 801ff38:	2b00      	cmp	r3, #0
 801ff3a:	d04f      	beq.n	801ffdc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801ff3c:	68fb      	ldr	r3, [r7, #12]
 801ff3e:	685b      	ldr	r3, [r3, #4]
 801ff40:	2b00      	cmp	r3, #0
 801ff42:	d006      	beq.n	801ff52 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801ff44:	68fb      	ldr	r3, [r7, #12]
 801ff46:	685b      	ldr	r3, [r3, #4]
 801ff48:	685b      	ldr	r3, [r3, #4]
 801ff4a:	889b      	ldrh	r3, [r3, #4]
 801ff4c:	b29b      	uxth	r3, r3
 801ff4e:	2b00      	cmp	r3, #0
 801ff50:	d002      	beq.n	801ff58 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801ff52:	2300      	movs	r3, #0
 801ff54:	623b      	str	r3, [r7, #32]
 801ff56:	e041      	b.n	801ffdc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801ff58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff5a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801ff5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff5e:	681b      	ldr	r3, [r3, #0]
 801ff60:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801ff62:	e012      	b.n	801ff8a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801ff64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ff66:	685b      	ldr	r3, [r3, #4]
 801ff68:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801ff6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ff6c:	88db      	ldrh	r3, [r3, #6]
 801ff6e:	b29a      	uxth	r2, r3
 801ff70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff72:	889b      	ldrh	r3, [r3, #4]
 801ff74:	b29b      	uxth	r3, r3
 801ff76:	429a      	cmp	r2, r3
 801ff78:	d002      	beq.n	801ff80 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801ff7a:	2300      	movs	r3, #0
 801ff7c:	623b      	str	r3, [r7, #32]
            break;
 801ff7e:	e007      	b.n	801ff90 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801ff80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff82:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801ff84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff86:	681b      	ldr	r3, [r3, #0]
 801ff88:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801ff8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ff8c:	2b00      	cmp	r3, #0
 801ff8e:	d1e9      	bne.n	801ff64 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801ff90:	6a3b      	ldr	r3, [r7, #32]
 801ff92:	2b00      	cmp	r3, #0
 801ff94:	d022      	beq.n	801ffdc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801ff96:	68fb      	ldr	r3, [r7, #12]
 801ff98:	685b      	ldr	r3, [r3, #4]
 801ff9a:	2b00      	cmp	r3, #0
 801ff9c:	d106      	bne.n	801ffac <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801ff9e:	4b15      	ldr	r3, [pc, #84]	; (801fff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ffa0:	f240 12df 	movw	r2, #479	; 0x1df
 801ffa4:	4917      	ldr	r1, [pc, #92]	; (8020004 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ffa6:	4815      	ldr	r0, [pc, #84]	; (801fffc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ffa8:	f001 fabc 	bl	8021524 <iprintf>
          LWIP_ASSERT("sanity check",
 801ffac:	68fb      	ldr	r3, [r7, #12]
 801ffae:	685b      	ldr	r3, [r3, #4]
 801ffb0:	685b      	ldr	r3, [r3, #4]
 801ffb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ffb4:	429a      	cmp	r2, r3
 801ffb6:	d106      	bne.n	801ffc6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801ffb8:	4b0e      	ldr	r3, [pc, #56]	; (801fff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ffba:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801ffbe:	4911      	ldr	r1, [pc, #68]	; (8020004 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ffc0:	480e      	ldr	r0, [pc, #56]	; (801fffc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ffc2:	f001 faaf 	bl	8021524 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801ffc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ffc8:	681b      	ldr	r3, [r3, #0]
 801ffca:	2b00      	cmp	r3, #0
 801ffcc:	d006      	beq.n	801ffdc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801ffce:	4b09      	ldr	r3, [pc, #36]	; (801fff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ffd0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801ffd4:	490c      	ldr	r1, [pc, #48]	; (8020008 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801ffd6:	4809      	ldr	r0, [pc, #36]	; (801fffc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ffd8:	f001 faa4 	bl	8021524 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801ffdc:	6a3b      	ldr	r3, [r7, #32]
 801ffde:	2b00      	cmp	r3, #0
 801ffe0:	bf14      	ite	ne
 801ffe2:	2301      	movne	r3, #1
 801ffe4:	2300      	moveq	r3, #0
 801ffe6:	b2db      	uxtb	r3, r3
 801ffe8:	e000      	b.n	801ffec <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801ffea:	2300      	movs	r3, #0
}
 801ffec:	4618      	mov	r0, r3
 801ffee:	3730      	adds	r7, #48	; 0x30
 801fff0:	46bd      	mov	sp, r7
 801fff2:	bd80      	pop	{r7, pc}
 801fff4:	08026d64 	.word	0x08026d64
 801fff8:	08026e48 	.word	0x08026e48
 801fffc:	08026dac 	.word	0x08026dac
 8020000:	08026e68 	.word	0x08026e68
 8020004:	08026ea0 	.word	0x08026ea0
 8020008:	08026eb0 	.word	0x08026eb0

0802000c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 802000c:	b580      	push	{r7, lr}
 802000e:	b08e      	sub	sp, #56	; 0x38
 8020010:	af00      	add	r7, sp, #0
 8020012:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8020014:	687b      	ldr	r3, [r7, #4]
 8020016:	685b      	ldr	r3, [r3, #4]
 8020018:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 802001a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802001c:	781b      	ldrb	r3, [r3, #0]
 802001e:	f003 030f 	and.w	r3, r3, #15
 8020022:	b2db      	uxtb	r3, r3
 8020024:	009b      	lsls	r3, r3, #2
 8020026:	b2db      	uxtb	r3, r3
 8020028:	2b14      	cmp	r3, #20
 802002a:	f040 8167 	bne.w	80202fc <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 802002e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020030:	88db      	ldrh	r3, [r3, #6]
 8020032:	b29b      	uxth	r3, r3
 8020034:	4618      	mov	r0, r3
 8020036:	f7f5 fe85 	bl	8015d44 <lwip_htons>
 802003a:	4603      	mov	r3, r0
 802003c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020040:	b29b      	uxth	r3, r3
 8020042:	00db      	lsls	r3, r3, #3
 8020044:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8020046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020048:	885b      	ldrh	r3, [r3, #2]
 802004a:	b29b      	uxth	r3, r3
 802004c:	4618      	mov	r0, r3
 802004e:	f7f5 fe79 	bl	8015d44 <lwip_htons>
 8020052:	4603      	mov	r3, r0
 8020054:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8020056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020058:	781b      	ldrb	r3, [r3, #0]
 802005a:	f003 030f 	and.w	r3, r3, #15
 802005e:	b2db      	uxtb	r3, r3
 8020060:	009b      	lsls	r3, r3, #2
 8020062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8020066:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802006a:	b29b      	uxth	r3, r3
 802006c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802006e:	429a      	cmp	r2, r3
 8020070:	f0c0 8146 	bcc.w	8020300 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8020074:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8020078:	b29b      	uxth	r3, r3
 802007a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802007c:	1ad3      	subs	r3, r2, r3
 802007e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8020080:	6878      	ldr	r0, [r7, #4]
 8020082:	f7f7 fb77 	bl	8017774 <pbuf_clen>
 8020086:	4603      	mov	r3, r0
 8020088:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 802008a:	4b9f      	ldr	r3, [pc, #636]	; (8020308 <ip4_reass+0x2fc>)
 802008c:	881b      	ldrh	r3, [r3, #0]
 802008e:	461a      	mov	r2, r3
 8020090:	8c3b      	ldrh	r3, [r7, #32]
 8020092:	4413      	add	r3, r2
 8020094:	2b0a      	cmp	r3, #10
 8020096:	dd10      	ble.n	80200ba <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8020098:	8c3b      	ldrh	r3, [r7, #32]
 802009a:	4619      	mov	r1, r3
 802009c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802009e:	f7ff fd81 	bl	801fba4 <ip_reass_remove_oldest_datagram>
 80200a2:	4603      	mov	r3, r0
 80200a4:	2b00      	cmp	r3, #0
 80200a6:	f000 812d 	beq.w	8020304 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80200aa:	4b97      	ldr	r3, [pc, #604]	; (8020308 <ip4_reass+0x2fc>)
 80200ac:	881b      	ldrh	r3, [r3, #0]
 80200ae:	461a      	mov	r2, r3
 80200b0:	8c3b      	ldrh	r3, [r7, #32]
 80200b2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80200b4:	2b0a      	cmp	r3, #10
 80200b6:	f300 8125 	bgt.w	8020304 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80200ba:	4b94      	ldr	r3, [pc, #592]	; (802030c <ip4_reass+0x300>)
 80200bc:	681b      	ldr	r3, [r3, #0]
 80200be:	633b      	str	r3, [r7, #48]	; 0x30
 80200c0:	e015      	b.n	80200ee <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80200c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80200c4:	695a      	ldr	r2, [r3, #20]
 80200c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80200c8:	68db      	ldr	r3, [r3, #12]
 80200ca:	429a      	cmp	r2, r3
 80200cc:	d10c      	bne.n	80200e8 <ip4_reass+0xdc>
 80200ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80200d0:	699a      	ldr	r2, [r3, #24]
 80200d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80200d4:	691b      	ldr	r3, [r3, #16]
 80200d6:	429a      	cmp	r2, r3
 80200d8:	d106      	bne.n	80200e8 <ip4_reass+0xdc>
 80200da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80200dc:	899a      	ldrh	r2, [r3, #12]
 80200de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80200e0:	889b      	ldrh	r3, [r3, #4]
 80200e2:	b29b      	uxth	r3, r3
 80200e4:	429a      	cmp	r2, r3
 80200e6:	d006      	beq.n	80200f6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80200e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80200ea:	681b      	ldr	r3, [r3, #0]
 80200ec:	633b      	str	r3, [r7, #48]	; 0x30
 80200ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80200f0:	2b00      	cmp	r3, #0
 80200f2:	d1e6      	bne.n	80200c2 <ip4_reass+0xb6>
 80200f4:	e000      	b.n	80200f8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80200f6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80200f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80200fa:	2b00      	cmp	r3, #0
 80200fc:	d109      	bne.n	8020112 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80200fe:	8c3b      	ldrh	r3, [r7, #32]
 8020100:	4619      	mov	r1, r3
 8020102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8020104:	f7ff fdb0 	bl	801fc68 <ip_reass_enqueue_new_datagram>
 8020108:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 802010a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802010c:	2b00      	cmp	r3, #0
 802010e:	d11c      	bne.n	802014a <ip4_reass+0x13e>
      goto nullreturn;
 8020110:	e109      	b.n	8020326 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8020112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020114:	88db      	ldrh	r3, [r3, #6]
 8020116:	b29b      	uxth	r3, r3
 8020118:	4618      	mov	r0, r3
 802011a:	f7f5 fe13 	bl	8015d44 <lwip_htons>
 802011e:	4603      	mov	r3, r0
 8020120:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020124:	2b00      	cmp	r3, #0
 8020126:	d110      	bne.n	802014a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8020128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802012a:	89db      	ldrh	r3, [r3, #14]
 802012c:	4618      	mov	r0, r3
 802012e:	f7f5 fe09 	bl	8015d44 <lwip_htons>
 8020132:	4603      	mov	r3, r0
 8020134:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8020138:	2b00      	cmp	r3, #0
 802013a:	d006      	beq.n	802014a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 802013c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802013e:	3308      	adds	r3, #8
 8020140:	2214      	movs	r2, #20
 8020142:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8020144:	4618      	mov	r0, r3
 8020146:	f001 f913 	bl	8021370 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 802014a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802014c:	88db      	ldrh	r3, [r3, #6]
 802014e:	b29b      	uxth	r3, r3
 8020150:	f003 0320 	and.w	r3, r3, #32
 8020154:	2b00      	cmp	r3, #0
 8020156:	bf0c      	ite	eq
 8020158:	2301      	moveq	r3, #1
 802015a:	2300      	movne	r3, #0
 802015c:	b2db      	uxtb	r3, r3
 802015e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8020160:	69fb      	ldr	r3, [r7, #28]
 8020162:	2b00      	cmp	r3, #0
 8020164:	d00e      	beq.n	8020184 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8020166:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8020168:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802016a:	4413      	add	r3, r2
 802016c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 802016e:	8b7a      	ldrh	r2, [r7, #26]
 8020170:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8020172:	429a      	cmp	r2, r3
 8020174:	f0c0 80a0 	bcc.w	80202b8 <ip4_reass+0x2ac>
 8020178:	8b7b      	ldrh	r3, [r7, #26]
 802017a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 802017e:	4293      	cmp	r3, r2
 8020180:	f200 809a 	bhi.w	80202b8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8020184:	69fa      	ldr	r2, [r7, #28]
 8020186:	6879      	ldr	r1, [r7, #4]
 8020188:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802018a:	f7ff fdd5 	bl	801fd38 <ip_reass_chain_frag_into_datagram_and_validate>
 802018e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8020190:	697b      	ldr	r3, [r7, #20]
 8020192:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8020196:	f000 8091 	beq.w	80202bc <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 802019a:	4b5b      	ldr	r3, [pc, #364]	; (8020308 <ip4_reass+0x2fc>)
 802019c:	881a      	ldrh	r2, [r3, #0]
 802019e:	8c3b      	ldrh	r3, [r7, #32]
 80201a0:	4413      	add	r3, r2
 80201a2:	b29a      	uxth	r2, r3
 80201a4:	4b58      	ldr	r3, [pc, #352]	; (8020308 <ip4_reass+0x2fc>)
 80201a6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80201a8:	69fb      	ldr	r3, [r7, #28]
 80201aa:	2b00      	cmp	r3, #0
 80201ac:	d00d      	beq.n	80201ca <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80201ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80201b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80201b2:	4413      	add	r3, r2
 80201b4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80201b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80201b8:	8a7a      	ldrh	r2, [r7, #18]
 80201ba:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80201bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80201be:	7f9b      	ldrb	r3, [r3, #30]
 80201c0:	f043 0301 	orr.w	r3, r3, #1
 80201c4:	b2da      	uxtb	r2, r3
 80201c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80201c8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80201ca:	697b      	ldr	r3, [r7, #20]
 80201cc:	2b01      	cmp	r3, #1
 80201ce:	d171      	bne.n	80202b4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80201d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80201d2:	8b9b      	ldrh	r3, [r3, #28]
 80201d4:	3314      	adds	r3, #20
 80201d6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80201d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80201da:	685b      	ldr	r3, [r3, #4]
 80201dc:	685b      	ldr	r3, [r3, #4]
 80201de:	681b      	ldr	r3, [r3, #0]
 80201e0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80201e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80201e4:	685b      	ldr	r3, [r3, #4]
 80201e6:	685b      	ldr	r3, [r3, #4]
 80201e8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80201ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80201ec:	3308      	adds	r3, #8
 80201ee:	2214      	movs	r2, #20
 80201f0:	4619      	mov	r1, r3
 80201f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80201f4:	f001 f8bc 	bl	8021370 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80201f8:	8a3b      	ldrh	r3, [r7, #16]
 80201fa:	4618      	mov	r0, r3
 80201fc:	f7f5 fda2 	bl	8015d44 <lwip_htons>
 8020200:	4603      	mov	r3, r0
 8020202:	461a      	mov	r2, r3
 8020204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020206:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8020208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802020a:	2200      	movs	r2, #0
 802020c:	719a      	strb	r2, [r3, #6]
 802020e:	2200      	movs	r2, #0
 8020210:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8020212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020214:	2200      	movs	r2, #0
 8020216:	729a      	strb	r2, [r3, #10]
 8020218:	2200      	movs	r2, #0
 802021a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 802021c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802021e:	685b      	ldr	r3, [r3, #4]
 8020220:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8020222:	e00d      	b.n	8020240 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8020224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020226:	685b      	ldr	r3, [r3, #4]
 8020228:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 802022a:	2114      	movs	r1, #20
 802022c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 802022e:	f7f7 f98d 	bl	801754c <pbuf_remove_header>
      pbuf_cat(p, r);
 8020232:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8020234:	6878      	ldr	r0, [r7, #4]
 8020236:	f7f7 fadd 	bl	80177f4 <pbuf_cat>
      r = iprh->next_pbuf;
 802023a:	68fb      	ldr	r3, [r7, #12]
 802023c:	681b      	ldr	r3, [r3, #0]
 802023e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8020240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020242:	2b00      	cmp	r3, #0
 8020244:	d1ee      	bne.n	8020224 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8020246:	4b31      	ldr	r3, [pc, #196]	; (802030c <ip4_reass+0x300>)
 8020248:	681b      	ldr	r3, [r3, #0]
 802024a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802024c:	429a      	cmp	r2, r3
 802024e:	d102      	bne.n	8020256 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8020250:	2300      	movs	r3, #0
 8020252:	62fb      	str	r3, [r7, #44]	; 0x2c
 8020254:	e010      	b.n	8020278 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8020256:	4b2d      	ldr	r3, [pc, #180]	; (802030c <ip4_reass+0x300>)
 8020258:	681b      	ldr	r3, [r3, #0]
 802025a:	62fb      	str	r3, [r7, #44]	; 0x2c
 802025c:	e007      	b.n	802026e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 802025e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020260:	681b      	ldr	r3, [r3, #0]
 8020262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020264:	429a      	cmp	r2, r3
 8020266:	d006      	beq.n	8020276 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8020268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802026a:	681b      	ldr	r3, [r3, #0]
 802026c:	62fb      	str	r3, [r7, #44]	; 0x2c
 802026e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020270:	2b00      	cmp	r3, #0
 8020272:	d1f4      	bne.n	802025e <ip4_reass+0x252>
 8020274:	e000      	b.n	8020278 <ip4_reass+0x26c>
          break;
 8020276:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8020278:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802027a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802027c:	f7ff fd2e 	bl	801fcdc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8020280:	6878      	ldr	r0, [r7, #4]
 8020282:	f7f7 fa77 	bl	8017774 <pbuf_clen>
 8020286:	4603      	mov	r3, r0
 8020288:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 802028a:	4b1f      	ldr	r3, [pc, #124]	; (8020308 <ip4_reass+0x2fc>)
 802028c:	881b      	ldrh	r3, [r3, #0]
 802028e:	8c3a      	ldrh	r2, [r7, #32]
 8020290:	429a      	cmp	r2, r3
 8020292:	d906      	bls.n	80202a2 <ip4_reass+0x296>
 8020294:	4b1e      	ldr	r3, [pc, #120]	; (8020310 <ip4_reass+0x304>)
 8020296:	f240 229b 	movw	r2, #667	; 0x29b
 802029a:	491e      	ldr	r1, [pc, #120]	; (8020314 <ip4_reass+0x308>)
 802029c:	481e      	ldr	r0, [pc, #120]	; (8020318 <ip4_reass+0x30c>)
 802029e:	f001 f941 	bl	8021524 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80202a2:	4b19      	ldr	r3, [pc, #100]	; (8020308 <ip4_reass+0x2fc>)
 80202a4:	881a      	ldrh	r2, [r3, #0]
 80202a6:	8c3b      	ldrh	r3, [r7, #32]
 80202a8:	1ad3      	subs	r3, r2, r3
 80202aa:	b29a      	uxth	r2, r3
 80202ac:	4b16      	ldr	r3, [pc, #88]	; (8020308 <ip4_reass+0x2fc>)
 80202ae:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80202b0:	687b      	ldr	r3, [r7, #4]
 80202b2:	e03c      	b.n	802032e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80202b4:	2300      	movs	r3, #0
 80202b6:	e03a      	b.n	802032e <ip4_reass+0x322>
      goto nullreturn_ipr;
 80202b8:	bf00      	nop
 80202ba:	e000      	b.n	80202be <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80202bc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80202be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80202c0:	2b00      	cmp	r3, #0
 80202c2:	d106      	bne.n	80202d2 <ip4_reass+0x2c6>
 80202c4:	4b12      	ldr	r3, [pc, #72]	; (8020310 <ip4_reass+0x304>)
 80202c6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80202ca:	4914      	ldr	r1, [pc, #80]	; (802031c <ip4_reass+0x310>)
 80202cc:	4812      	ldr	r0, [pc, #72]	; (8020318 <ip4_reass+0x30c>)
 80202ce:	f001 f929 	bl	8021524 <iprintf>
  if (ipr->p == NULL) {
 80202d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80202d4:	685b      	ldr	r3, [r3, #4]
 80202d6:	2b00      	cmp	r3, #0
 80202d8:	d124      	bne.n	8020324 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80202da:	4b0c      	ldr	r3, [pc, #48]	; (802030c <ip4_reass+0x300>)
 80202dc:	681b      	ldr	r3, [r3, #0]
 80202de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80202e0:	429a      	cmp	r2, r3
 80202e2:	d006      	beq.n	80202f2 <ip4_reass+0x2e6>
 80202e4:	4b0a      	ldr	r3, [pc, #40]	; (8020310 <ip4_reass+0x304>)
 80202e6:	f240 22ab 	movw	r2, #683	; 0x2ab
 80202ea:	490d      	ldr	r1, [pc, #52]	; (8020320 <ip4_reass+0x314>)
 80202ec:	480a      	ldr	r0, [pc, #40]	; (8020318 <ip4_reass+0x30c>)
 80202ee:	f001 f919 	bl	8021524 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80202f2:	2100      	movs	r1, #0
 80202f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80202f6:	f7ff fcf1 	bl	801fcdc <ip_reass_dequeue_datagram>
 80202fa:	e014      	b.n	8020326 <ip4_reass+0x31a>
    goto nullreturn;
 80202fc:	bf00      	nop
 80202fe:	e012      	b.n	8020326 <ip4_reass+0x31a>
    goto nullreturn;
 8020300:	bf00      	nop
 8020302:	e010      	b.n	8020326 <ip4_reass+0x31a>
      goto nullreturn;
 8020304:	bf00      	nop
 8020306:	e00e      	b.n	8020326 <ip4_reass+0x31a>
 8020308:	20005418 	.word	0x20005418
 802030c:	20005414 	.word	0x20005414
 8020310:	08026d64 	.word	0x08026d64
 8020314:	08026ed4 	.word	0x08026ed4
 8020318:	08026dac 	.word	0x08026dac
 802031c:	08026ef0 	.word	0x08026ef0
 8020320:	08026efc 	.word	0x08026efc
  }

nullreturn:
 8020324:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8020326:	6878      	ldr	r0, [r7, #4]
 8020328:	f7f7 f996 	bl	8017658 <pbuf_free>
  return NULL;
 802032c:	2300      	movs	r3, #0
}
 802032e:	4618      	mov	r0, r3
 8020330:	3738      	adds	r7, #56	; 0x38
 8020332:	46bd      	mov	sp, r7
 8020334:	bd80      	pop	{r7, pc}
 8020336:	bf00      	nop

08020338 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8020338:	b580      	push	{r7, lr}
 802033a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 802033c:	2005      	movs	r0, #5
 802033e:	f7f6 fa95 	bl	801686c <memp_malloc>
 8020342:	4603      	mov	r3, r0
}
 8020344:	4618      	mov	r0, r3
 8020346:	bd80      	pop	{r7, pc}

08020348 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8020348:	b580      	push	{r7, lr}
 802034a:	b082      	sub	sp, #8
 802034c:	af00      	add	r7, sp, #0
 802034e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8020350:	687b      	ldr	r3, [r7, #4]
 8020352:	2b00      	cmp	r3, #0
 8020354:	d106      	bne.n	8020364 <ip_frag_free_pbuf_custom_ref+0x1c>
 8020356:	4b07      	ldr	r3, [pc, #28]	; (8020374 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8020358:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 802035c:	4906      	ldr	r1, [pc, #24]	; (8020378 <ip_frag_free_pbuf_custom_ref+0x30>)
 802035e:	4807      	ldr	r0, [pc, #28]	; (802037c <ip_frag_free_pbuf_custom_ref+0x34>)
 8020360:	f001 f8e0 	bl	8021524 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8020364:	6879      	ldr	r1, [r7, #4]
 8020366:	2005      	movs	r0, #5
 8020368:	f7f6 fad2 	bl	8016910 <memp_free>
}
 802036c:	bf00      	nop
 802036e:	3708      	adds	r7, #8
 8020370:	46bd      	mov	sp, r7
 8020372:	bd80      	pop	{r7, pc}
 8020374:	08026d64 	.word	0x08026d64
 8020378:	08026f1c 	.word	0x08026f1c
 802037c:	08026dac 	.word	0x08026dac

08020380 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8020380:	b580      	push	{r7, lr}
 8020382:	b084      	sub	sp, #16
 8020384:	af00      	add	r7, sp, #0
 8020386:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8020388:	687b      	ldr	r3, [r7, #4]
 802038a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 802038c:	68fb      	ldr	r3, [r7, #12]
 802038e:	2b00      	cmp	r3, #0
 8020390:	d106      	bne.n	80203a0 <ipfrag_free_pbuf_custom+0x20>
 8020392:	4b11      	ldr	r3, [pc, #68]	; (80203d8 <ipfrag_free_pbuf_custom+0x58>)
 8020394:	f240 22ce 	movw	r2, #718	; 0x2ce
 8020398:	4910      	ldr	r1, [pc, #64]	; (80203dc <ipfrag_free_pbuf_custom+0x5c>)
 802039a:	4811      	ldr	r0, [pc, #68]	; (80203e0 <ipfrag_free_pbuf_custom+0x60>)
 802039c:	f001 f8c2 	bl	8021524 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80203a0:	68fa      	ldr	r2, [r7, #12]
 80203a2:	687b      	ldr	r3, [r7, #4]
 80203a4:	429a      	cmp	r2, r3
 80203a6:	d006      	beq.n	80203b6 <ipfrag_free_pbuf_custom+0x36>
 80203a8:	4b0b      	ldr	r3, [pc, #44]	; (80203d8 <ipfrag_free_pbuf_custom+0x58>)
 80203aa:	f240 22cf 	movw	r2, #719	; 0x2cf
 80203ae:	490d      	ldr	r1, [pc, #52]	; (80203e4 <ipfrag_free_pbuf_custom+0x64>)
 80203b0:	480b      	ldr	r0, [pc, #44]	; (80203e0 <ipfrag_free_pbuf_custom+0x60>)
 80203b2:	f001 f8b7 	bl	8021524 <iprintf>
  if (pcr->original != NULL) {
 80203b6:	68fb      	ldr	r3, [r7, #12]
 80203b8:	695b      	ldr	r3, [r3, #20]
 80203ba:	2b00      	cmp	r3, #0
 80203bc:	d004      	beq.n	80203c8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80203be:	68fb      	ldr	r3, [r7, #12]
 80203c0:	695b      	ldr	r3, [r3, #20]
 80203c2:	4618      	mov	r0, r3
 80203c4:	f7f7 f948 	bl	8017658 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80203c8:	68f8      	ldr	r0, [r7, #12]
 80203ca:	f7ff ffbd 	bl	8020348 <ip_frag_free_pbuf_custom_ref>
}
 80203ce:	bf00      	nop
 80203d0:	3710      	adds	r7, #16
 80203d2:	46bd      	mov	sp, r7
 80203d4:	bd80      	pop	{r7, pc}
 80203d6:	bf00      	nop
 80203d8:	08026d64 	.word	0x08026d64
 80203dc:	08026f28 	.word	0x08026f28
 80203e0:	08026dac 	.word	0x08026dac
 80203e4:	08026f34 	.word	0x08026f34

080203e8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80203e8:	b580      	push	{r7, lr}
 80203ea:	b094      	sub	sp, #80	; 0x50
 80203ec:	af02      	add	r7, sp, #8
 80203ee:	60f8      	str	r0, [r7, #12]
 80203f0:	60b9      	str	r1, [r7, #8]
 80203f2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80203f4:	2300      	movs	r3, #0
 80203f6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80203fa:	68bb      	ldr	r3, [r7, #8]
 80203fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80203fe:	3b14      	subs	r3, #20
 8020400:	2b00      	cmp	r3, #0
 8020402:	da00      	bge.n	8020406 <ip4_frag+0x1e>
 8020404:	3307      	adds	r3, #7
 8020406:	10db      	asrs	r3, r3, #3
 8020408:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 802040a:	2314      	movs	r3, #20
 802040c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 802040e:	68fb      	ldr	r3, [r7, #12]
 8020410:	685b      	ldr	r3, [r3, #4]
 8020412:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8020414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020416:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8020418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802041a:	781b      	ldrb	r3, [r3, #0]
 802041c:	f003 030f 	and.w	r3, r3, #15
 8020420:	b2db      	uxtb	r3, r3
 8020422:	009b      	lsls	r3, r3, #2
 8020424:	b2db      	uxtb	r3, r3
 8020426:	2b14      	cmp	r3, #20
 8020428:	d002      	beq.n	8020430 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 802042a:	f06f 0305 	mvn.w	r3, #5
 802042e:	e110      	b.n	8020652 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8020430:	68fb      	ldr	r3, [r7, #12]
 8020432:	895b      	ldrh	r3, [r3, #10]
 8020434:	2b13      	cmp	r3, #19
 8020436:	d809      	bhi.n	802044c <ip4_frag+0x64>
 8020438:	4b88      	ldr	r3, [pc, #544]	; (802065c <ip4_frag+0x274>)
 802043a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 802043e:	4988      	ldr	r1, [pc, #544]	; (8020660 <ip4_frag+0x278>)
 8020440:	4888      	ldr	r0, [pc, #544]	; (8020664 <ip4_frag+0x27c>)
 8020442:	f001 f86f 	bl	8021524 <iprintf>
 8020446:	f06f 0305 	mvn.w	r3, #5
 802044a:	e102      	b.n	8020652 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 802044c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802044e:	88db      	ldrh	r3, [r3, #6]
 8020450:	b29b      	uxth	r3, r3
 8020452:	4618      	mov	r0, r3
 8020454:	f7f5 fc76 	bl	8015d44 <lwip_htons>
 8020458:	4603      	mov	r3, r0
 802045a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 802045c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802045e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8020462:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8020466:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8020468:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802046c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 802046e:	68fb      	ldr	r3, [r7, #12]
 8020470:	891b      	ldrh	r3, [r3, #8]
 8020472:	3b14      	subs	r3, #20
 8020474:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8020478:	e0e1      	b.n	802063e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 802047a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802047c:	00db      	lsls	r3, r3, #3
 802047e:	b29b      	uxth	r3, r3
 8020480:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8020484:	4293      	cmp	r3, r2
 8020486:	bf28      	it	cs
 8020488:	4613      	movcs	r3, r2
 802048a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 802048c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020490:	2114      	movs	r1, #20
 8020492:	200e      	movs	r0, #14
 8020494:	f7f6 fdfc 	bl	8017090 <pbuf_alloc>
 8020498:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 802049a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802049c:	2b00      	cmp	r3, #0
 802049e:	f000 80d5 	beq.w	802064c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80204a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80204a4:	895b      	ldrh	r3, [r3, #10]
 80204a6:	2b13      	cmp	r3, #19
 80204a8:	d806      	bhi.n	80204b8 <ip4_frag+0xd0>
 80204aa:	4b6c      	ldr	r3, [pc, #432]	; (802065c <ip4_frag+0x274>)
 80204ac:	f44f 7249 	mov.w	r2, #804	; 0x324
 80204b0:	496d      	ldr	r1, [pc, #436]	; (8020668 <ip4_frag+0x280>)
 80204b2:	486c      	ldr	r0, [pc, #432]	; (8020664 <ip4_frag+0x27c>)
 80204b4:	f001 f836 	bl	8021524 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80204b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80204ba:	685b      	ldr	r3, [r3, #4]
 80204bc:	2214      	movs	r2, #20
 80204be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80204c0:	4618      	mov	r0, r3
 80204c2:	f000 ff55 	bl	8021370 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80204c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80204c8:	685b      	ldr	r3, [r3, #4]
 80204ca:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80204cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80204ce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80204d2:	e064      	b.n	802059e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80204d4:	68fb      	ldr	r3, [r7, #12]
 80204d6:	895a      	ldrh	r2, [r3, #10]
 80204d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80204da:	1ad3      	subs	r3, r2, r3
 80204dc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80204de:	68fb      	ldr	r3, [r7, #12]
 80204e0:	895b      	ldrh	r3, [r3, #10]
 80204e2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80204e4:	429a      	cmp	r2, r3
 80204e6:	d906      	bls.n	80204f6 <ip4_frag+0x10e>
 80204e8:	4b5c      	ldr	r3, [pc, #368]	; (802065c <ip4_frag+0x274>)
 80204ea:	f240 322d 	movw	r2, #813	; 0x32d
 80204ee:	495f      	ldr	r1, [pc, #380]	; (802066c <ip4_frag+0x284>)
 80204f0:	485c      	ldr	r0, [pc, #368]	; (8020664 <ip4_frag+0x27c>)
 80204f2:	f001 f817 	bl	8021524 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80204f6:	8bfa      	ldrh	r2, [r7, #30]
 80204f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80204fc:	4293      	cmp	r3, r2
 80204fe:	bf28      	it	cs
 8020500:	4613      	movcs	r3, r2
 8020502:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8020506:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 802050a:	2b00      	cmp	r3, #0
 802050c:	d105      	bne.n	802051a <ip4_frag+0x132>
        poff = 0;
 802050e:	2300      	movs	r3, #0
 8020510:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8020512:	68fb      	ldr	r3, [r7, #12]
 8020514:	681b      	ldr	r3, [r3, #0]
 8020516:	60fb      	str	r3, [r7, #12]
        continue;
 8020518:	e041      	b.n	802059e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 802051a:	f7ff ff0d 	bl	8020338 <ip_frag_alloc_pbuf_custom_ref>
 802051e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8020520:	69bb      	ldr	r3, [r7, #24]
 8020522:	2b00      	cmp	r3, #0
 8020524:	d103      	bne.n	802052e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8020526:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020528:	f7f7 f896 	bl	8017658 <pbuf_free>
        goto memerr;
 802052c:	e08f      	b.n	802064e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 802052e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8020530:	68fb      	ldr	r3, [r7, #12]
 8020532:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8020534:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8020536:	4413      	add	r3, r2
 8020538:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 802053c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8020540:	9201      	str	r2, [sp, #4]
 8020542:	9300      	str	r3, [sp, #0]
 8020544:	4603      	mov	r3, r0
 8020546:	2241      	movs	r2, #65	; 0x41
 8020548:	2000      	movs	r0, #0
 802054a:	f7f6 fecb 	bl	80172e4 <pbuf_alloced_custom>
 802054e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8020550:	697b      	ldr	r3, [r7, #20]
 8020552:	2b00      	cmp	r3, #0
 8020554:	d106      	bne.n	8020564 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8020556:	69b8      	ldr	r0, [r7, #24]
 8020558:	f7ff fef6 	bl	8020348 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 802055c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802055e:	f7f7 f87b 	bl	8017658 <pbuf_free>
        goto memerr;
 8020562:	e074      	b.n	802064e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8020564:	68f8      	ldr	r0, [r7, #12]
 8020566:	f7f7 f91d 	bl	80177a4 <pbuf_ref>
      pcr->original = p;
 802056a:	69bb      	ldr	r3, [r7, #24]
 802056c:	68fa      	ldr	r2, [r7, #12]
 802056e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8020570:	69bb      	ldr	r3, [r7, #24]
 8020572:	4a3f      	ldr	r2, [pc, #252]	; (8020670 <ip4_frag+0x288>)
 8020574:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8020576:	6979      	ldr	r1, [r7, #20]
 8020578:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802057a:	f7f7 f93b 	bl	80177f4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 802057e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8020582:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8020586:	1ad3      	subs	r3, r2, r3
 8020588:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 802058c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8020590:	2b00      	cmp	r3, #0
 8020592:	d004      	beq.n	802059e <ip4_frag+0x1b6>
        poff = 0;
 8020594:	2300      	movs	r3, #0
 8020596:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8020598:	68fb      	ldr	r3, [r7, #12]
 802059a:	681b      	ldr	r3, [r3, #0]
 802059c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 802059e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80205a2:	2b00      	cmp	r3, #0
 80205a4:	d196      	bne.n	80204d4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80205a6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80205a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80205ac:	4413      	add	r3, r2
 80205ae:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80205b0:	68bb      	ldr	r3, [r7, #8]
 80205b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80205b4:	f1a3 0213 	sub.w	r2, r3, #19
 80205b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80205bc:	429a      	cmp	r2, r3
 80205be:	bfcc      	ite	gt
 80205c0:	2301      	movgt	r3, #1
 80205c2:	2300      	movle	r3, #0
 80205c4:	b2db      	uxtb	r3, r3
 80205c6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80205c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80205cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80205d0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80205d2:	6a3b      	ldr	r3, [r7, #32]
 80205d4:	2b00      	cmp	r3, #0
 80205d6:	d002      	beq.n	80205de <ip4_frag+0x1f6>
 80205d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80205da:	2b00      	cmp	r3, #0
 80205dc:	d003      	beq.n	80205e6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80205de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80205e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80205e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80205e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80205e8:	4618      	mov	r0, r3
 80205ea:	f7f5 fbab 	bl	8015d44 <lwip_htons>
 80205ee:	4603      	mov	r3, r0
 80205f0:	461a      	mov	r2, r3
 80205f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80205f4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80205f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80205f8:	3314      	adds	r3, #20
 80205fa:	b29b      	uxth	r3, r3
 80205fc:	4618      	mov	r0, r3
 80205fe:	f7f5 fba1 	bl	8015d44 <lwip_htons>
 8020602:	4603      	mov	r3, r0
 8020604:	461a      	mov	r2, r3
 8020606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020608:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 802060a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802060c:	2200      	movs	r2, #0
 802060e:	729a      	strb	r2, [r3, #10]
 8020610:	2200      	movs	r2, #0
 8020612:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8020614:	68bb      	ldr	r3, [r7, #8]
 8020616:	695b      	ldr	r3, [r3, #20]
 8020618:	687a      	ldr	r2, [r7, #4]
 802061a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802061c:	68b8      	ldr	r0, [r7, #8]
 802061e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8020620:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8020622:	f7f7 f819 	bl	8017658 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8020626:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802062a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 802062c:	1ad3      	subs	r3, r2, r3
 802062e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8020632:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8020636:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8020638:	4413      	add	r3, r2
 802063a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 802063e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8020642:	2b00      	cmp	r3, #0
 8020644:	f47f af19 	bne.w	802047a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8020648:	2300      	movs	r3, #0
 802064a:	e002      	b.n	8020652 <ip4_frag+0x26a>
      goto memerr;
 802064c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 802064e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8020652:	4618      	mov	r0, r3
 8020654:	3748      	adds	r7, #72	; 0x48
 8020656:	46bd      	mov	sp, r7
 8020658:	bd80      	pop	{r7, pc}
 802065a:	bf00      	nop
 802065c:	08026d64 	.word	0x08026d64
 8020660:	08026f40 	.word	0x08026f40
 8020664:	08026dac 	.word	0x08026dac
 8020668:	08026f5c 	.word	0x08026f5c
 802066c:	08026f7c 	.word	0x08026f7c
 8020670:	08020381 	.word	0x08020381

08020674 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8020674:	b580      	push	{r7, lr}
 8020676:	b086      	sub	sp, #24
 8020678:	af00      	add	r7, sp, #0
 802067a:	6078      	str	r0, [r7, #4]
 802067c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 802067e:	230e      	movs	r3, #14
 8020680:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8020682:	687b      	ldr	r3, [r7, #4]
 8020684:	895b      	ldrh	r3, [r3, #10]
 8020686:	2b0e      	cmp	r3, #14
 8020688:	d96e      	bls.n	8020768 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 802068a:	687b      	ldr	r3, [r7, #4]
 802068c:	7bdb      	ldrb	r3, [r3, #15]
 802068e:	2b00      	cmp	r3, #0
 8020690:	d106      	bne.n	80206a0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8020692:	683b      	ldr	r3, [r7, #0]
 8020694:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8020698:	3301      	adds	r3, #1
 802069a:	b2da      	uxtb	r2, r3
 802069c:	687b      	ldr	r3, [r7, #4]
 802069e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80206a0:	687b      	ldr	r3, [r7, #4]
 80206a2:	685b      	ldr	r3, [r3, #4]
 80206a4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80206a6:	693b      	ldr	r3, [r7, #16]
 80206a8:	7b1a      	ldrb	r2, [r3, #12]
 80206aa:	7b5b      	ldrb	r3, [r3, #13]
 80206ac:	021b      	lsls	r3, r3, #8
 80206ae:	4313      	orrs	r3, r2
 80206b0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80206b2:	693b      	ldr	r3, [r7, #16]
 80206b4:	781b      	ldrb	r3, [r3, #0]
 80206b6:	f003 0301 	and.w	r3, r3, #1
 80206ba:	2b00      	cmp	r3, #0
 80206bc:	d023      	beq.n	8020706 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80206be:	693b      	ldr	r3, [r7, #16]
 80206c0:	781b      	ldrb	r3, [r3, #0]
 80206c2:	2b01      	cmp	r3, #1
 80206c4:	d10f      	bne.n	80206e6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80206c6:	693b      	ldr	r3, [r7, #16]
 80206c8:	785b      	ldrb	r3, [r3, #1]
 80206ca:	2b00      	cmp	r3, #0
 80206cc:	d11b      	bne.n	8020706 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80206ce:	693b      	ldr	r3, [r7, #16]
 80206d0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80206d2:	2b5e      	cmp	r3, #94	; 0x5e
 80206d4:	d117      	bne.n	8020706 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80206d6:	687b      	ldr	r3, [r7, #4]
 80206d8:	7b5b      	ldrb	r3, [r3, #13]
 80206da:	f043 0310 	orr.w	r3, r3, #16
 80206de:	b2da      	uxtb	r2, r3
 80206e0:	687b      	ldr	r3, [r7, #4]
 80206e2:	735a      	strb	r2, [r3, #13]
 80206e4:	e00f      	b.n	8020706 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80206e6:	693b      	ldr	r3, [r7, #16]
 80206e8:	2206      	movs	r2, #6
 80206ea:	4928      	ldr	r1, [pc, #160]	; (802078c <ethernet_input+0x118>)
 80206ec:	4618      	mov	r0, r3
 80206ee:	f000 fe31 	bl	8021354 <memcmp>
 80206f2:	4603      	mov	r3, r0
 80206f4:	2b00      	cmp	r3, #0
 80206f6:	d106      	bne.n	8020706 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80206f8:	687b      	ldr	r3, [r7, #4]
 80206fa:	7b5b      	ldrb	r3, [r3, #13]
 80206fc:	f043 0308 	orr.w	r3, r3, #8
 8020700:	b2da      	uxtb	r2, r3
 8020702:	687b      	ldr	r3, [r7, #4]
 8020704:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8020706:	89fb      	ldrh	r3, [r7, #14]
 8020708:	2b08      	cmp	r3, #8
 802070a:	d003      	beq.n	8020714 <ethernet_input+0xa0>
 802070c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8020710:	d014      	beq.n	802073c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8020712:	e032      	b.n	802077a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8020714:	683b      	ldr	r3, [r7, #0]
 8020716:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802071a:	f003 0308 	and.w	r3, r3, #8
 802071e:	2b00      	cmp	r3, #0
 8020720:	d024      	beq.n	802076c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8020722:	8afb      	ldrh	r3, [r7, #22]
 8020724:	4619      	mov	r1, r3
 8020726:	6878      	ldr	r0, [r7, #4]
 8020728:	f7f6 ff10 	bl	801754c <pbuf_remove_header>
 802072c:	4603      	mov	r3, r0
 802072e:	2b00      	cmp	r3, #0
 8020730:	d11e      	bne.n	8020770 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8020732:	6839      	ldr	r1, [r7, #0]
 8020734:	6878      	ldr	r0, [r7, #4]
 8020736:	f7fe ff27 	bl	801f588 <ip4_input>
      break;
 802073a:	e013      	b.n	8020764 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 802073c:	683b      	ldr	r3, [r7, #0]
 802073e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8020742:	f003 0308 	and.w	r3, r3, #8
 8020746:	2b00      	cmp	r3, #0
 8020748:	d014      	beq.n	8020774 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 802074a:	8afb      	ldrh	r3, [r7, #22]
 802074c:	4619      	mov	r1, r3
 802074e:	6878      	ldr	r0, [r7, #4]
 8020750:	f7f6 fefc 	bl	801754c <pbuf_remove_header>
 8020754:	4603      	mov	r3, r0
 8020756:	2b00      	cmp	r3, #0
 8020758:	d10e      	bne.n	8020778 <ethernet_input+0x104>
        etharp_input(p, netif);
 802075a:	6839      	ldr	r1, [r7, #0]
 802075c:	6878      	ldr	r0, [r7, #4]
 802075e:	f7fe f8c7 	bl	801e8f0 <etharp_input>
      break;
 8020762:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8020764:	2300      	movs	r3, #0
 8020766:	e00c      	b.n	8020782 <ethernet_input+0x10e>
    goto free_and_return;
 8020768:	bf00      	nop
 802076a:	e006      	b.n	802077a <ethernet_input+0x106>
        goto free_and_return;
 802076c:	bf00      	nop
 802076e:	e004      	b.n	802077a <ethernet_input+0x106>
        goto free_and_return;
 8020770:	bf00      	nop
 8020772:	e002      	b.n	802077a <ethernet_input+0x106>
        goto free_and_return;
 8020774:	bf00      	nop
 8020776:	e000      	b.n	802077a <ethernet_input+0x106>
        goto free_and_return;
 8020778:	bf00      	nop

free_and_return:
  pbuf_free(p);
 802077a:	6878      	ldr	r0, [r7, #4]
 802077c:	f7f6 ff6c 	bl	8017658 <pbuf_free>
  return ERR_OK;
 8020780:	2300      	movs	r3, #0
}
 8020782:	4618      	mov	r0, r3
 8020784:	3718      	adds	r7, #24
 8020786:	46bd      	mov	sp, r7
 8020788:	bd80      	pop	{r7, pc}
 802078a:	bf00      	nop
 802078c:	0802af8c 	.word	0x0802af8c

08020790 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8020790:	b580      	push	{r7, lr}
 8020792:	b086      	sub	sp, #24
 8020794:	af00      	add	r7, sp, #0
 8020796:	60f8      	str	r0, [r7, #12]
 8020798:	60b9      	str	r1, [r7, #8]
 802079a:	607a      	str	r2, [r7, #4]
 802079c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 802079e:	8c3b      	ldrh	r3, [r7, #32]
 80207a0:	4618      	mov	r0, r3
 80207a2:	f7f5 facf 	bl	8015d44 <lwip_htons>
 80207a6:	4603      	mov	r3, r0
 80207a8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80207aa:	210e      	movs	r1, #14
 80207ac:	68b8      	ldr	r0, [r7, #8]
 80207ae:	f7f6 febd 	bl	801752c <pbuf_add_header>
 80207b2:	4603      	mov	r3, r0
 80207b4:	2b00      	cmp	r3, #0
 80207b6:	d125      	bne.n	8020804 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80207b8:	68bb      	ldr	r3, [r7, #8]
 80207ba:	685b      	ldr	r3, [r3, #4]
 80207bc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80207be:	693b      	ldr	r3, [r7, #16]
 80207c0:	8afa      	ldrh	r2, [r7, #22]
 80207c2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80207c4:	693b      	ldr	r3, [r7, #16]
 80207c6:	2206      	movs	r2, #6
 80207c8:	6839      	ldr	r1, [r7, #0]
 80207ca:	4618      	mov	r0, r3
 80207cc:	f000 fdd0 	bl	8021370 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80207d0:	693b      	ldr	r3, [r7, #16]
 80207d2:	3306      	adds	r3, #6
 80207d4:	2206      	movs	r2, #6
 80207d6:	6879      	ldr	r1, [r7, #4]
 80207d8:	4618      	mov	r0, r3
 80207da:	f000 fdc9 	bl	8021370 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80207de:	68fb      	ldr	r3, [r7, #12]
 80207e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80207e4:	2b06      	cmp	r3, #6
 80207e6:	d006      	beq.n	80207f6 <ethernet_output+0x66>
 80207e8:	4b0a      	ldr	r3, [pc, #40]	; (8020814 <ethernet_output+0x84>)
 80207ea:	f44f 7299 	mov.w	r2, #306	; 0x132
 80207ee:	490a      	ldr	r1, [pc, #40]	; (8020818 <ethernet_output+0x88>)
 80207f0:	480a      	ldr	r0, [pc, #40]	; (802081c <ethernet_output+0x8c>)
 80207f2:	f000 fe97 	bl	8021524 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80207f6:	68fb      	ldr	r3, [r7, #12]
 80207f8:	699b      	ldr	r3, [r3, #24]
 80207fa:	68b9      	ldr	r1, [r7, #8]
 80207fc:	68f8      	ldr	r0, [r7, #12]
 80207fe:	4798      	blx	r3
 8020800:	4603      	mov	r3, r0
 8020802:	e002      	b.n	802080a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8020804:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8020806:	f06f 0301 	mvn.w	r3, #1
}
 802080a:	4618      	mov	r0, r3
 802080c:	3718      	adds	r7, #24
 802080e:	46bd      	mov	sp, r7
 8020810:	bd80      	pop	{r7, pc}
 8020812:	bf00      	nop
 8020814:	08026f8c 	.word	0x08026f8c
 8020818:	08026fc4 	.word	0x08026fc4
 802081c:	08026ff8 	.word	0x08026ff8

08020820 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8020820:	b580      	push	{r7, lr}
 8020822:	b086      	sub	sp, #24
 8020824:	af00      	add	r7, sp, #0
 8020826:	6078      	str	r0, [r7, #4]
 8020828:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 802082a:	683b      	ldr	r3, [r7, #0]
 802082c:	60bb      	str	r3, [r7, #8]
 802082e:	2304      	movs	r3, #4
 8020830:	60fb      	str	r3, [r7, #12]
 8020832:	2300      	movs	r3, #0
 8020834:	613b      	str	r3, [r7, #16]
 8020836:	2300      	movs	r3, #0
 8020838:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 802083a:	f107 0308 	add.w	r3, r7, #8
 802083e:	2100      	movs	r1, #0
 8020840:	4618      	mov	r0, r3
 8020842:	f7f0 fb24 	bl	8010e8e <osMessageCreate>
 8020846:	4602      	mov	r2, r0
 8020848:	687b      	ldr	r3, [r7, #4]
 802084a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 802084c:	687b      	ldr	r3, [r7, #4]
 802084e:	681b      	ldr	r3, [r3, #0]
 8020850:	2b00      	cmp	r3, #0
 8020852:	d102      	bne.n	802085a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8020854:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020858:	e000      	b.n	802085c <sys_mbox_new+0x3c>

  return ERR_OK;
 802085a:	2300      	movs	r3, #0
}
 802085c:	4618      	mov	r0, r3
 802085e:	3718      	adds	r7, #24
 8020860:	46bd      	mov	sp, r7
 8020862:	bd80      	pop	{r7, pc}

08020864 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8020864:	b580      	push	{r7, lr}
 8020866:	b084      	sub	sp, #16
 8020868:	af00      	add	r7, sp, #0
 802086a:	6078      	str	r0, [r7, #4]
 802086c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 802086e:	687b      	ldr	r3, [r7, #4]
 8020870:	681b      	ldr	r3, [r3, #0]
 8020872:	6839      	ldr	r1, [r7, #0]
 8020874:	2200      	movs	r2, #0
 8020876:	4618      	mov	r0, r3
 8020878:	f7f0 fb32 	bl	8010ee0 <osMessagePut>
 802087c:	4603      	mov	r3, r0
 802087e:	2b00      	cmp	r3, #0
 8020880:	d102      	bne.n	8020888 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8020882:	2300      	movs	r3, #0
 8020884:	73fb      	strb	r3, [r7, #15]
 8020886:	e001      	b.n	802088c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8020888:	23ff      	movs	r3, #255	; 0xff
 802088a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 802088c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8020890:	4618      	mov	r0, r3
 8020892:	3710      	adds	r7, #16
 8020894:	46bd      	mov	sp, r7
 8020896:	bd80      	pop	{r7, pc}

08020898 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8020898:	b580      	push	{r7, lr}
 802089a:	b08c      	sub	sp, #48	; 0x30
 802089c:	af00      	add	r7, sp, #0
 802089e:	61f8      	str	r0, [r7, #28]
 80208a0:	61b9      	str	r1, [r7, #24]
 80208a2:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80208a4:	f7f0 f91e 	bl	8010ae4 <osKernelSysTick>
 80208a8:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80208aa:	697b      	ldr	r3, [r7, #20]
 80208ac:	2b00      	cmp	r3, #0
 80208ae:	d017      	beq.n	80208e0 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80208b0:	69fb      	ldr	r3, [r7, #28]
 80208b2:	6819      	ldr	r1, [r3, #0]
 80208b4:	f107 0320 	add.w	r3, r7, #32
 80208b8:	697a      	ldr	r2, [r7, #20]
 80208ba:	4618      	mov	r0, r3
 80208bc:	f7f0 fb50 	bl	8010f60 <osMessageGet>

    if(event.status == osEventMessage)
 80208c0:	6a3b      	ldr	r3, [r7, #32]
 80208c2:	2b10      	cmp	r3, #16
 80208c4:	d109      	bne.n	80208da <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80208c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80208c8:	461a      	mov	r2, r3
 80208ca:	69bb      	ldr	r3, [r7, #24]
 80208cc:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80208ce:	f7f0 f909 	bl	8010ae4 <osKernelSysTick>
 80208d2:	4602      	mov	r2, r0
 80208d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80208d6:	1ad3      	subs	r3, r2, r3
 80208d8:	e019      	b.n	802090e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80208da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80208de:	e016      	b.n	802090e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80208e0:	69fb      	ldr	r3, [r7, #28]
 80208e2:	6819      	ldr	r1, [r3, #0]
 80208e4:	463b      	mov	r3, r7
 80208e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80208ea:	4618      	mov	r0, r3
 80208ec:	f7f0 fb38 	bl	8010f60 <osMessageGet>
 80208f0:	f107 0320 	add.w	r3, r7, #32
 80208f4:	463a      	mov	r2, r7
 80208f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80208f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80208fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80208fe:	461a      	mov	r2, r3
 8020900:	69bb      	ldr	r3, [r7, #24]
 8020902:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8020904:	f7f0 f8ee 	bl	8010ae4 <osKernelSysTick>
 8020908:	4602      	mov	r2, r0
 802090a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802090c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 802090e:	4618      	mov	r0, r3
 8020910:	3730      	adds	r7, #48	; 0x30
 8020912:	46bd      	mov	sp, r7
 8020914:	bd80      	pop	{r7, pc}

08020916 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8020916:	b480      	push	{r7}
 8020918:	b083      	sub	sp, #12
 802091a:	af00      	add	r7, sp, #0
 802091c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 802091e:	687b      	ldr	r3, [r7, #4]
 8020920:	681b      	ldr	r3, [r3, #0]
 8020922:	2b00      	cmp	r3, #0
 8020924:	d101      	bne.n	802092a <sys_mbox_valid+0x14>
    return 0;
 8020926:	2300      	movs	r3, #0
 8020928:	e000      	b.n	802092c <sys_mbox_valid+0x16>
  else
    return 1;
 802092a:	2301      	movs	r3, #1
}
 802092c:	4618      	mov	r0, r3
 802092e:	370c      	adds	r7, #12
 8020930:	46bd      	mov	sp, r7
 8020932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020936:	4770      	bx	lr

08020938 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8020938:	b580      	push	{r7, lr}
 802093a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 802093c:	4803      	ldr	r0, [pc, #12]	; (802094c <sys_init+0x14>)
 802093e:	f7f0 f941 	bl	8010bc4 <osMutexCreate>
 8020942:	4603      	mov	r3, r0
 8020944:	4a02      	ldr	r2, [pc, #8]	; (8020950 <sys_init+0x18>)
 8020946:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8020948:	bf00      	nop
 802094a:	bd80      	pop	{r7, pc}
 802094c:	0802af9c 	.word	0x0802af9c
 8020950:	2001b9b0 	.word	0x2001b9b0

08020954 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8020954:	b580      	push	{r7, lr}
 8020956:	b084      	sub	sp, #16
 8020958:	af00      	add	r7, sp, #0
 802095a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 802095c:	2300      	movs	r3, #0
 802095e:	60bb      	str	r3, [r7, #8]
 8020960:	2300      	movs	r3, #0
 8020962:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8020964:	f107 0308 	add.w	r3, r7, #8
 8020968:	4618      	mov	r0, r3
 802096a:	f7f0 f92b 	bl	8010bc4 <osMutexCreate>
 802096e:	4602      	mov	r2, r0
 8020970:	687b      	ldr	r3, [r7, #4]
 8020972:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8020974:	687b      	ldr	r3, [r7, #4]
 8020976:	681b      	ldr	r3, [r3, #0]
 8020978:	2b00      	cmp	r3, #0
 802097a:	d102      	bne.n	8020982 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 802097c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020980:	e000      	b.n	8020984 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8020982:	2300      	movs	r3, #0
}
 8020984:	4618      	mov	r0, r3
 8020986:	3710      	adds	r7, #16
 8020988:	46bd      	mov	sp, r7
 802098a:	bd80      	pop	{r7, pc}

0802098c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 802098c:	b580      	push	{r7, lr}
 802098e:	b082      	sub	sp, #8
 8020990:	af00      	add	r7, sp, #0
 8020992:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8020994:	687b      	ldr	r3, [r7, #4]
 8020996:	681b      	ldr	r3, [r3, #0]
 8020998:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802099c:	4618      	mov	r0, r3
 802099e:	f7f0 f929 	bl	8010bf4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80209a2:	bf00      	nop
 80209a4:	3708      	adds	r7, #8
 80209a6:	46bd      	mov	sp, r7
 80209a8:	bd80      	pop	{r7, pc}

080209aa <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80209aa:	b580      	push	{r7, lr}
 80209ac:	b082      	sub	sp, #8
 80209ae:	af00      	add	r7, sp, #0
 80209b0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80209b2:	687b      	ldr	r3, [r7, #4]
 80209b4:	681b      	ldr	r3, [r3, #0]
 80209b6:	4618      	mov	r0, r3
 80209b8:	f7f0 f96a 	bl	8010c90 <osMutexRelease>
}
 80209bc:	bf00      	nop
 80209be:	3708      	adds	r7, #8
 80209c0:	46bd      	mov	sp, r7
 80209c2:	bd80      	pop	{r7, pc}

080209c4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80209c4:	b580      	push	{r7, lr}
 80209c6:	b08c      	sub	sp, #48	; 0x30
 80209c8:	af00      	add	r7, sp, #0
 80209ca:	60f8      	str	r0, [r7, #12]
 80209cc:	60b9      	str	r1, [r7, #8]
 80209ce:	607a      	str	r2, [r7, #4]
 80209d0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80209d2:	f107 0314 	add.w	r3, r7, #20
 80209d6:	2200      	movs	r2, #0
 80209d8:	601a      	str	r2, [r3, #0]
 80209da:	605a      	str	r2, [r3, #4]
 80209dc:	609a      	str	r2, [r3, #8]
 80209de:	60da      	str	r2, [r3, #12]
 80209e0:	611a      	str	r2, [r3, #16]
 80209e2:	615a      	str	r2, [r3, #20]
 80209e4:	619a      	str	r2, [r3, #24]
 80209e6:	68fb      	ldr	r3, [r7, #12]
 80209e8:	617b      	str	r3, [r7, #20]
 80209ea:	68bb      	ldr	r3, [r7, #8]
 80209ec:	61bb      	str	r3, [r7, #24]
 80209ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80209f0:	b21b      	sxth	r3, r3
 80209f2:	83bb      	strh	r3, [r7, #28]
 80209f4:	683b      	ldr	r3, [r7, #0]
 80209f6:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80209f8:	f107 0314 	add.w	r3, r7, #20
 80209fc:	6879      	ldr	r1, [r7, #4]
 80209fe:	4618      	mov	r0, r3
 8020a00:	f7f0 f880 	bl	8010b04 <osThreadCreate>
 8020a04:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8020a06:	4618      	mov	r0, r3
 8020a08:	3730      	adds	r7, #48	; 0x30
 8020a0a:	46bd      	mov	sp, r7
 8020a0c:	bd80      	pop	{r7, pc}
	...

08020a10 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8020a10:	b580      	push	{r7, lr}
 8020a12:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8020a14:	4b04      	ldr	r3, [pc, #16]	; (8020a28 <sys_arch_protect+0x18>)
 8020a16:	681b      	ldr	r3, [r3, #0]
 8020a18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8020a1c:	4618      	mov	r0, r3
 8020a1e:	f7f0 f8e9 	bl	8010bf4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8020a22:	2301      	movs	r3, #1
}
 8020a24:	4618      	mov	r0, r3
 8020a26:	bd80      	pop	{r7, pc}
 8020a28:	2001b9b0 	.word	0x2001b9b0

08020a2c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8020a2c:	b580      	push	{r7, lr}
 8020a2e:	b082      	sub	sp, #8
 8020a30:	af00      	add	r7, sp, #0
 8020a32:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8020a34:	4b04      	ldr	r3, [pc, #16]	; (8020a48 <sys_arch_unprotect+0x1c>)
 8020a36:	681b      	ldr	r3, [r3, #0]
 8020a38:	4618      	mov	r0, r3
 8020a3a:	f7f0 f929 	bl	8010c90 <osMutexRelease>
}
 8020a3e:	bf00      	nop
 8020a40:	3708      	adds	r7, #8
 8020a42:	46bd      	mov	sp, r7
 8020a44:	bd80      	pop	{r7, pc}
 8020a46:	bf00      	nop
 8020a48:	2001b9b0 	.word	0x2001b9b0

08020a4c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8020a4c:	b580      	push	{r7, lr}
 8020a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8020a50:	2201      	movs	r2, #1
 8020a52:	490e      	ldr	r1, [pc, #56]	; (8020a8c <MX_USB_HOST_Init+0x40>)
 8020a54:	480e      	ldr	r0, [pc, #56]	; (8020a90 <MX_USB_HOST_Init+0x44>)
 8020a56:	f7eb fb37 	bl	800c0c8 <USBH_Init>
 8020a5a:	4603      	mov	r3, r0
 8020a5c:	2b00      	cmp	r3, #0
 8020a5e:	d001      	beq.n	8020a64 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8020a60:	f7e1 fc7a 	bl	8002358 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8020a64:	490b      	ldr	r1, [pc, #44]	; (8020a94 <MX_USB_HOST_Init+0x48>)
 8020a66:	480a      	ldr	r0, [pc, #40]	; (8020a90 <MX_USB_HOST_Init+0x44>)
 8020a68:	f7eb fbe4 	bl	800c234 <USBH_RegisterClass>
 8020a6c:	4603      	mov	r3, r0
 8020a6e:	2b00      	cmp	r3, #0
 8020a70:	d001      	beq.n	8020a76 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8020a72:	f7e1 fc71 	bl	8002358 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8020a76:	4806      	ldr	r0, [pc, #24]	; (8020a90 <MX_USB_HOST_Init+0x44>)
 8020a78:	f7eb fc68 	bl	800c34c <USBH_Start>
 8020a7c:	4603      	mov	r3, r0
 8020a7e:	2b00      	cmp	r3, #0
 8020a80:	d001      	beq.n	8020a86 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8020a82:	f7e1 fc69 	bl	8002358 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8020a86:	bf00      	nop
 8020a88:	bd80      	pop	{r7, pc}
 8020a8a:	bf00      	nop
 8020a8c:	08020a99 	.word	0x08020a99
 8020a90:	2001b9b4 	.word	0x2001b9b4
 8020a94:	20000720 	.word	0x20000720

08020a98 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8020a98:	b480      	push	{r7}
 8020a9a:	b083      	sub	sp, #12
 8020a9c:	af00      	add	r7, sp, #0
 8020a9e:	6078      	str	r0, [r7, #4]
 8020aa0:	460b      	mov	r3, r1
 8020aa2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8020aa4:	78fb      	ldrb	r3, [r7, #3]
 8020aa6:	3b01      	subs	r3, #1
 8020aa8:	2b04      	cmp	r3, #4
 8020aaa:	d819      	bhi.n	8020ae0 <USBH_UserProcess+0x48>
 8020aac:	a201      	add	r2, pc, #4	; (adr r2, 8020ab4 <USBH_UserProcess+0x1c>)
 8020aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020ab2:	bf00      	nop
 8020ab4:	08020ae1 	.word	0x08020ae1
 8020ab8:	08020ad1 	.word	0x08020ad1
 8020abc:	08020ae1 	.word	0x08020ae1
 8020ac0:	08020ad9 	.word	0x08020ad9
 8020ac4:	08020ac9 	.word	0x08020ac9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8020ac8:	4b09      	ldr	r3, [pc, #36]	; (8020af0 <USBH_UserProcess+0x58>)
 8020aca:	2203      	movs	r2, #3
 8020acc:	701a      	strb	r2, [r3, #0]
  break;
 8020ace:	e008      	b.n	8020ae2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
	  Appli_state = APPLICATION_READY;
 8020ad0:	4b07      	ldr	r3, [pc, #28]	; (8020af0 <USBH_UserProcess+0x58>)
 8020ad2:	2202      	movs	r2, #2
 8020ad4:	701a      	strb	r2, [r3, #0]
  break;
 8020ad6:	e004      	b.n	8020ae2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8020ad8:	4b05      	ldr	r3, [pc, #20]	; (8020af0 <USBH_UserProcess+0x58>)
 8020ada:	2201      	movs	r2, #1
 8020adc:	701a      	strb	r2, [r3, #0]
  break;
 8020ade:	e000      	b.n	8020ae2 <USBH_UserProcess+0x4a>

  default:
  break;
 8020ae0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8020ae2:	bf00      	nop
 8020ae4:	370c      	adds	r7, #12
 8020ae6:	46bd      	mov	sp, r7
 8020ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020aec:	4770      	bx	lr
 8020aee:	bf00      	nop
 8020af0:	2000541a 	.word	0x2000541a

08020af4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8020af4:	b580      	push	{r7, lr}
 8020af6:	b0ae      	sub	sp, #184	; 0xb8
 8020af8:	af00      	add	r7, sp, #0
 8020afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020afc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8020b00:	2200      	movs	r2, #0
 8020b02:	601a      	str	r2, [r3, #0]
 8020b04:	605a      	str	r2, [r3, #4]
 8020b06:	609a      	str	r2, [r3, #8]
 8020b08:	60da      	str	r2, [r3, #12]
 8020b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8020b0c:	f107 0314 	add.w	r3, r7, #20
 8020b10:	2290      	movs	r2, #144	; 0x90
 8020b12:	2100      	movs	r1, #0
 8020b14:	4618      	mov	r0, r3
 8020b16:	f000 fc53 	bl	80213c0 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8020b1a:	687b      	ldr	r3, [r7, #4]
 8020b1c:	681b      	ldr	r3, [r3, #0]
 8020b1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8020b22:	d161      	bne.n	8020be8 <HAL_HCD_MspInit+0xf4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8020b24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8020b28:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8020b2a:	2300      	movs	r3, #0
 8020b2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8020b30:	f107 0314 	add.w	r3, r7, #20
 8020b34:	4618      	mov	r0, r3
 8020b36:	f7e6 fc05 	bl	8007344 <HAL_RCCEx_PeriphCLKConfig>
 8020b3a:	4603      	mov	r3, r0
 8020b3c:	2b00      	cmp	r3, #0
 8020b3e:	d001      	beq.n	8020b44 <HAL_HCD_MspInit+0x50>
    {
      Error_Handler();
 8020b40:	f7e1 fc0a 	bl	8002358 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8020b44:	4b2a      	ldr	r3, [pc, #168]	; (8020bf0 <HAL_HCD_MspInit+0xfc>)
 8020b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020b48:	4a29      	ldr	r2, [pc, #164]	; (8020bf0 <HAL_HCD_MspInit+0xfc>)
 8020b4a:	f043 0301 	orr.w	r3, r3, #1
 8020b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8020b50:	4b27      	ldr	r3, [pc, #156]	; (8020bf0 <HAL_HCD_MspInit+0xfc>)
 8020b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020b54:	f003 0301 	and.w	r3, r3, #1
 8020b58:	613b      	str	r3, [r7, #16]
 8020b5a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8020b5c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8020b60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020b64:	2302      	movs	r3, #2
 8020b66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020b6a:	2300      	movs	r3, #0
 8020b6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020b70:	2303      	movs	r3, #3
 8020b72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8020b76:	230a      	movs	r3, #10
 8020b78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020b7c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8020b80:	4619      	mov	r1, r3
 8020b82:	481c      	ldr	r0, [pc, #112]	; (8020bf4 <HAL_HCD_MspInit+0x100>)
 8020b84:	f7e4 f8a0 	bl	8004cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8020b88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8020b8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8020b90:	2300      	movs	r3, #0
 8020b92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020b96:	2300      	movs	r3, #0
 8020b98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8020b9c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8020ba0:	4619      	mov	r1, r3
 8020ba2:	4814      	ldr	r0, [pc, #80]	; (8020bf4 <HAL_HCD_MspInit+0x100>)
 8020ba4:	f7e4 f890 	bl	8004cc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8020ba8:	4b11      	ldr	r3, [pc, #68]	; (8020bf0 <HAL_HCD_MspInit+0xfc>)
 8020baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020bac:	4a10      	ldr	r2, [pc, #64]	; (8020bf0 <HAL_HCD_MspInit+0xfc>)
 8020bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020bb2:	6353      	str	r3, [r2, #52]	; 0x34
 8020bb4:	4b0e      	ldr	r3, [pc, #56]	; (8020bf0 <HAL_HCD_MspInit+0xfc>)
 8020bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8020bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8020bbc:	60fb      	str	r3, [r7, #12]
 8020bbe:	68fb      	ldr	r3, [r7, #12]
 8020bc0:	4b0b      	ldr	r3, [pc, #44]	; (8020bf0 <HAL_HCD_MspInit+0xfc>)
 8020bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020bc4:	4a0a      	ldr	r2, [pc, #40]	; (8020bf0 <HAL_HCD_MspInit+0xfc>)
 8020bc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8020bca:	6453      	str	r3, [r2, #68]	; 0x44
 8020bcc:	4b08      	ldr	r3, [pc, #32]	; (8020bf0 <HAL_HCD_MspInit+0xfc>)
 8020bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8020bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8020bd4:	60bb      	str	r3, [r7, #8]
 8020bd6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8020bd8:	2200      	movs	r2, #0
 8020bda:	2105      	movs	r1, #5
 8020bdc:	2043      	movs	r0, #67	; 0x43
 8020bde:	f7e2 fec5 	bl	800396c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8020be2:	2043      	movs	r0, #67	; 0x43
 8020be4:	f7e2 fede 	bl	80039a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8020be8:	bf00      	nop
 8020bea:	37b8      	adds	r7, #184	; 0xb8
 8020bec:	46bd      	mov	sp, r7
 8020bee:	bd80      	pop	{r7, pc}
 8020bf0:	40023800 	.word	0x40023800
 8020bf4:	40020000 	.word	0x40020000

08020bf8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8020bf8:	b580      	push	{r7, lr}
 8020bfa:	b082      	sub	sp, #8
 8020bfc:	af00      	add	r7, sp, #0
 8020bfe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8020c00:	687b      	ldr	r3, [r7, #4]
 8020c02:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8020c06:	4618      	mov	r0, r3
 8020c08:	f7ec f84d 	bl	800cca6 <USBH_LL_IncTimer>
}
 8020c0c:	bf00      	nop
 8020c0e:	3708      	adds	r7, #8
 8020c10:	46bd      	mov	sp, r7
 8020c12:	bd80      	pop	{r7, pc}

08020c14 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8020c14:	b580      	push	{r7, lr}
 8020c16:	b082      	sub	sp, #8
 8020c18:	af00      	add	r7, sp, #0
 8020c1a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8020c1c:	687b      	ldr	r3, [r7, #4]
 8020c1e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8020c22:	4618      	mov	r0, r3
 8020c24:	f7ec f891 	bl	800cd4a <USBH_LL_Connect>
}
 8020c28:	bf00      	nop
 8020c2a:	3708      	adds	r7, #8
 8020c2c:	46bd      	mov	sp, r7
 8020c2e:	bd80      	pop	{r7, pc}

08020c30 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8020c30:	b580      	push	{r7, lr}
 8020c32:	b082      	sub	sp, #8
 8020c34:	af00      	add	r7, sp, #0
 8020c36:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8020c38:	687b      	ldr	r3, [r7, #4]
 8020c3a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8020c3e:	4618      	mov	r0, r3
 8020c40:	f7ec f8a6 	bl	800cd90 <USBH_LL_Disconnect>
}
 8020c44:	bf00      	nop
 8020c46:	3708      	adds	r7, #8
 8020c48:	46bd      	mov	sp, r7
 8020c4a:	bd80      	pop	{r7, pc}

08020c4c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8020c4c:	b580      	push	{r7, lr}
 8020c4e:	b082      	sub	sp, #8
 8020c50:	af00      	add	r7, sp, #0
 8020c52:	6078      	str	r0, [r7, #4]
 8020c54:	460b      	mov	r3, r1
 8020c56:	70fb      	strb	r3, [r7, #3]
 8020c58:	4613      	mov	r3, r2
 8020c5a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8020c5c:	687b      	ldr	r3, [r7, #4]
 8020c5e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8020c62:	4618      	mov	r0, r3
 8020c64:	f7ec f8db 	bl	800ce1e <USBH_LL_NotifyURBChange>
#endif
}
 8020c68:	bf00      	nop
 8020c6a:	3708      	adds	r7, #8
 8020c6c:	46bd      	mov	sp, r7
 8020c6e:	bd80      	pop	{r7, pc}

08020c70 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8020c70:	b580      	push	{r7, lr}
 8020c72:	b082      	sub	sp, #8
 8020c74:	af00      	add	r7, sp, #0
 8020c76:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8020c78:	687b      	ldr	r3, [r7, #4]
 8020c7a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8020c7e:	4618      	mov	r0, r3
 8020c80:	f7ec f83b 	bl	800ccfa <USBH_LL_PortEnabled>
}
 8020c84:	bf00      	nop
 8020c86:	3708      	adds	r7, #8
 8020c88:	46bd      	mov	sp, r7
 8020c8a:	bd80      	pop	{r7, pc}

08020c8c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8020c8c:	b580      	push	{r7, lr}
 8020c8e:	b082      	sub	sp, #8
 8020c90:	af00      	add	r7, sp, #0
 8020c92:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8020c94:	687b      	ldr	r3, [r7, #4]
 8020c96:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8020c9a:	4618      	mov	r0, r3
 8020c9c:	f7ec f847 	bl	800cd2e <USBH_LL_PortDisabled>
}
 8020ca0:	bf00      	nop
 8020ca2:	3708      	adds	r7, #8
 8020ca4:	46bd      	mov	sp, r7
 8020ca6:	bd80      	pop	{r7, pc}

08020ca8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8020ca8:	b580      	push	{r7, lr}
 8020caa:	b082      	sub	sp, #8
 8020cac:	af00      	add	r7, sp, #0
 8020cae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8020cb0:	687b      	ldr	r3, [r7, #4]
 8020cb2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8020cb6:	2b01      	cmp	r3, #1
 8020cb8:	d12a      	bne.n	8020d10 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8020cba:	4a18      	ldr	r2, [pc, #96]	; (8020d1c <USBH_LL_Init+0x74>)
 8020cbc:	687b      	ldr	r3, [r7, #4]
 8020cbe:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8020cc2:	687b      	ldr	r3, [r7, #4]
 8020cc4:	4a15      	ldr	r2, [pc, #84]	; (8020d1c <USBH_LL_Init+0x74>)
 8020cc6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8020cca:	4b14      	ldr	r3, [pc, #80]	; (8020d1c <USBH_LL_Init+0x74>)
 8020ccc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8020cd0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8020cd2:	4b12      	ldr	r3, [pc, #72]	; (8020d1c <USBH_LL_Init+0x74>)
 8020cd4:	2208      	movs	r2, #8
 8020cd6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8020cd8:	4b10      	ldr	r3, [pc, #64]	; (8020d1c <USBH_LL_Init+0x74>)
 8020cda:	2201      	movs	r2, #1
 8020cdc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8020cde:	4b0f      	ldr	r3, [pc, #60]	; (8020d1c <USBH_LL_Init+0x74>)
 8020ce0:	2200      	movs	r2, #0
 8020ce2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8020ce4:	4b0d      	ldr	r3, [pc, #52]	; (8020d1c <USBH_LL_Init+0x74>)
 8020ce6:	2202      	movs	r2, #2
 8020ce8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8020cea:	4b0c      	ldr	r3, [pc, #48]	; (8020d1c <USBH_LL_Init+0x74>)
 8020cec:	2200      	movs	r2, #0
 8020cee:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8020cf0:	480a      	ldr	r0, [pc, #40]	; (8020d1c <USBH_LL_Init+0x74>)
 8020cf2:	f7e4 f9ae 	bl	8005052 <HAL_HCD_Init>
 8020cf6:	4603      	mov	r3, r0
 8020cf8:	2b00      	cmp	r3, #0
 8020cfa:	d001      	beq.n	8020d00 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8020cfc:	f7e1 fb2c 	bl	8002358 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8020d00:	4806      	ldr	r0, [pc, #24]	; (8020d1c <USBH_LL_Init+0x74>)
 8020d02:	f7e4 fd92 	bl	800582a <HAL_HCD_GetCurrentFrame>
 8020d06:	4603      	mov	r3, r0
 8020d08:	4619      	mov	r1, r3
 8020d0a:	6878      	ldr	r0, [r7, #4]
 8020d0c:	f7eb ffbc 	bl	800cc88 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8020d10:	2300      	movs	r3, #0
}
 8020d12:	4618      	mov	r0, r3
 8020d14:	3708      	adds	r7, #8
 8020d16:	46bd      	mov	sp, r7
 8020d18:	bd80      	pop	{r7, pc}
 8020d1a:	bf00      	nop
 8020d1c:	2001bd98 	.word	0x2001bd98

08020d20 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8020d20:	b580      	push	{r7, lr}
 8020d22:	b084      	sub	sp, #16
 8020d24:	af00      	add	r7, sp, #0
 8020d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020d28:	2300      	movs	r3, #0
 8020d2a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8020d2c:	2300      	movs	r3, #0
 8020d2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8020d30:	687b      	ldr	r3, [r7, #4]
 8020d32:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8020d36:	4618      	mov	r0, r3
 8020d38:	f7e4 fd01 	bl	800573e <HAL_HCD_Start>
 8020d3c:	4603      	mov	r3, r0
 8020d3e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8020d40:	7bfb      	ldrb	r3, [r7, #15]
 8020d42:	4618      	mov	r0, r3
 8020d44:	f000 f98c 	bl	8021060 <USBH_Get_USB_Status>
 8020d48:	4603      	mov	r3, r0
 8020d4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020d4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8020d4e:	4618      	mov	r0, r3
 8020d50:	3710      	adds	r7, #16
 8020d52:	46bd      	mov	sp, r7
 8020d54:	bd80      	pop	{r7, pc}

08020d56 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8020d56:	b580      	push	{r7, lr}
 8020d58:	b084      	sub	sp, #16
 8020d5a:	af00      	add	r7, sp, #0
 8020d5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020d5e:	2300      	movs	r3, #0
 8020d60:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8020d62:	2300      	movs	r3, #0
 8020d64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8020d66:	687b      	ldr	r3, [r7, #4]
 8020d68:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8020d6c:	4618      	mov	r0, r3
 8020d6e:	f7e4 fd09 	bl	8005784 <HAL_HCD_Stop>
 8020d72:	4603      	mov	r3, r0
 8020d74:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8020d76:	7bfb      	ldrb	r3, [r7, #15]
 8020d78:	4618      	mov	r0, r3
 8020d7a:	f000 f971 	bl	8021060 <USBH_Get_USB_Status>
 8020d7e:	4603      	mov	r3, r0
 8020d80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020d82:	7bbb      	ldrb	r3, [r7, #14]
}
 8020d84:	4618      	mov	r0, r3
 8020d86:	3710      	adds	r7, #16
 8020d88:	46bd      	mov	sp, r7
 8020d8a:	bd80      	pop	{r7, pc}

08020d8c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8020d8c:	b580      	push	{r7, lr}
 8020d8e:	b084      	sub	sp, #16
 8020d90:	af00      	add	r7, sp, #0
 8020d92:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8020d94:	2301      	movs	r3, #1
 8020d96:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8020d98:	687b      	ldr	r3, [r7, #4]
 8020d9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8020d9e:	4618      	mov	r0, r3
 8020da0:	f7e4 fd51 	bl	8005846 <HAL_HCD_GetCurrentSpeed>
 8020da4:	4603      	mov	r3, r0
 8020da6:	2b02      	cmp	r3, #2
 8020da8:	d00c      	beq.n	8020dc4 <USBH_LL_GetSpeed+0x38>
 8020daa:	2b02      	cmp	r3, #2
 8020dac:	d80d      	bhi.n	8020dca <USBH_LL_GetSpeed+0x3e>
 8020dae:	2b00      	cmp	r3, #0
 8020db0:	d002      	beq.n	8020db8 <USBH_LL_GetSpeed+0x2c>
 8020db2:	2b01      	cmp	r3, #1
 8020db4:	d003      	beq.n	8020dbe <USBH_LL_GetSpeed+0x32>
 8020db6:	e008      	b.n	8020dca <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8020db8:	2300      	movs	r3, #0
 8020dba:	73fb      	strb	r3, [r7, #15]
    break;
 8020dbc:	e008      	b.n	8020dd0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8020dbe:	2301      	movs	r3, #1
 8020dc0:	73fb      	strb	r3, [r7, #15]
    break;
 8020dc2:	e005      	b.n	8020dd0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8020dc4:	2302      	movs	r3, #2
 8020dc6:	73fb      	strb	r3, [r7, #15]
    break;
 8020dc8:	e002      	b.n	8020dd0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8020dca:	2301      	movs	r3, #1
 8020dcc:	73fb      	strb	r3, [r7, #15]
    break;
 8020dce:	bf00      	nop
  }
  return  speed;
 8020dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8020dd2:	4618      	mov	r0, r3
 8020dd4:	3710      	adds	r7, #16
 8020dd6:	46bd      	mov	sp, r7
 8020dd8:	bd80      	pop	{r7, pc}

08020dda <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8020dda:	b580      	push	{r7, lr}
 8020ddc:	b084      	sub	sp, #16
 8020dde:	af00      	add	r7, sp, #0
 8020de0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020de2:	2300      	movs	r3, #0
 8020de4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8020de6:	2300      	movs	r3, #0
 8020de8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8020dea:	687b      	ldr	r3, [r7, #4]
 8020dec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8020df0:	4618      	mov	r0, r3
 8020df2:	f7e4 fce4 	bl	80057be <HAL_HCD_ResetPort>
 8020df6:	4603      	mov	r3, r0
 8020df8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8020dfa:	7bfb      	ldrb	r3, [r7, #15]
 8020dfc:	4618      	mov	r0, r3
 8020dfe:	f000 f92f 	bl	8021060 <USBH_Get_USB_Status>
 8020e02:	4603      	mov	r3, r0
 8020e04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020e06:	7bbb      	ldrb	r3, [r7, #14]
}
 8020e08:	4618      	mov	r0, r3
 8020e0a:	3710      	adds	r7, #16
 8020e0c:	46bd      	mov	sp, r7
 8020e0e:	bd80      	pop	{r7, pc}

08020e10 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8020e10:	b580      	push	{r7, lr}
 8020e12:	b082      	sub	sp, #8
 8020e14:	af00      	add	r7, sp, #0
 8020e16:	6078      	str	r0, [r7, #4]
 8020e18:	460b      	mov	r3, r1
 8020e1a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8020e1c:	687b      	ldr	r3, [r7, #4]
 8020e1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8020e22:	78fa      	ldrb	r2, [r7, #3]
 8020e24:	4611      	mov	r1, r2
 8020e26:	4618      	mov	r0, r3
 8020e28:	f7e4 fceb 	bl	8005802 <HAL_HCD_HC_GetXferCount>
 8020e2c:	4603      	mov	r3, r0
}
 8020e2e:	4618      	mov	r0, r3
 8020e30:	3708      	adds	r7, #8
 8020e32:	46bd      	mov	sp, r7
 8020e34:	bd80      	pop	{r7, pc}

08020e36 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8020e36:	b590      	push	{r4, r7, lr}
 8020e38:	b089      	sub	sp, #36	; 0x24
 8020e3a:	af04      	add	r7, sp, #16
 8020e3c:	6078      	str	r0, [r7, #4]
 8020e3e:	4608      	mov	r0, r1
 8020e40:	4611      	mov	r1, r2
 8020e42:	461a      	mov	r2, r3
 8020e44:	4603      	mov	r3, r0
 8020e46:	70fb      	strb	r3, [r7, #3]
 8020e48:	460b      	mov	r3, r1
 8020e4a:	70bb      	strb	r3, [r7, #2]
 8020e4c:	4613      	mov	r3, r2
 8020e4e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020e50:	2300      	movs	r3, #0
 8020e52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8020e54:	2300      	movs	r3, #0
 8020e56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8020e58:	687b      	ldr	r3, [r7, #4]
 8020e5a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8020e5e:	787c      	ldrb	r4, [r7, #1]
 8020e60:	78ba      	ldrb	r2, [r7, #2]
 8020e62:	78f9      	ldrb	r1, [r7, #3]
 8020e64:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8020e66:	9302      	str	r3, [sp, #8]
 8020e68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8020e6c:	9301      	str	r3, [sp, #4]
 8020e6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8020e72:	9300      	str	r3, [sp, #0]
 8020e74:	4623      	mov	r3, r4
 8020e76:	f7e4 f94e 	bl	8005116 <HAL_HCD_HC_Init>
 8020e7a:	4603      	mov	r3, r0
 8020e7c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8020e7e:	7bfb      	ldrb	r3, [r7, #15]
 8020e80:	4618      	mov	r0, r3
 8020e82:	f000 f8ed 	bl	8021060 <USBH_Get_USB_Status>
 8020e86:	4603      	mov	r3, r0
 8020e88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020e8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8020e8c:	4618      	mov	r0, r3
 8020e8e:	3714      	adds	r7, #20
 8020e90:	46bd      	mov	sp, r7
 8020e92:	bd90      	pop	{r4, r7, pc}

08020e94 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8020e94:	b580      	push	{r7, lr}
 8020e96:	b084      	sub	sp, #16
 8020e98:	af00      	add	r7, sp, #0
 8020e9a:	6078      	str	r0, [r7, #4]
 8020e9c:	460b      	mov	r3, r1
 8020e9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020ea0:	2300      	movs	r3, #0
 8020ea2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8020ea4:	2300      	movs	r3, #0
 8020ea6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8020ea8:	687b      	ldr	r3, [r7, #4]
 8020eaa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8020eae:	78fa      	ldrb	r2, [r7, #3]
 8020eb0:	4611      	mov	r1, r2
 8020eb2:	4618      	mov	r0, r3
 8020eb4:	f7e4 f9be 	bl	8005234 <HAL_HCD_HC_Halt>
 8020eb8:	4603      	mov	r3, r0
 8020eba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8020ebc:	7bfb      	ldrb	r3, [r7, #15]
 8020ebe:	4618      	mov	r0, r3
 8020ec0:	f000 f8ce 	bl	8021060 <USBH_Get_USB_Status>
 8020ec4:	4603      	mov	r3, r0
 8020ec6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020ec8:	7bbb      	ldrb	r3, [r7, #14]
}
 8020eca:	4618      	mov	r0, r3
 8020ecc:	3710      	adds	r7, #16
 8020ece:	46bd      	mov	sp, r7
 8020ed0:	bd80      	pop	{r7, pc}

08020ed2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8020ed2:	b590      	push	{r4, r7, lr}
 8020ed4:	b089      	sub	sp, #36	; 0x24
 8020ed6:	af04      	add	r7, sp, #16
 8020ed8:	6078      	str	r0, [r7, #4]
 8020eda:	4608      	mov	r0, r1
 8020edc:	4611      	mov	r1, r2
 8020ede:	461a      	mov	r2, r3
 8020ee0:	4603      	mov	r3, r0
 8020ee2:	70fb      	strb	r3, [r7, #3]
 8020ee4:	460b      	mov	r3, r1
 8020ee6:	70bb      	strb	r3, [r7, #2]
 8020ee8:	4613      	mov	r3, r2
 8020eea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8020eec:	2300      	movs	r3, #0
 8020eee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8020ef0:	2300      	movs	r3, #0
 8020ef2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8020ef4:	687b      	ldr	r3, [r7, #4]
 8020ef6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8020efa:	787c      	ldrb	r4, [r7, #1]
 8020efc:	78ba      	ldrb	r2, [r7, #2]
 8020efe:	78f9      	ldrb	r1, [r7, #3]
 8020f00:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8020f04:	9303      	str	r3, [sp, #12]
 8020f06:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8020f08:	9302      	str	r3, [sp, #8]
 8020f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020f0c:	9301      	str	r3, [sp, #4]
 8020f0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8020f12:	9300      	str	r3, [sp, #0]
 8020f14:	4623      	mov	r3, r4
 8020f16:	f7e4 f9b1 	bl	800527c <HAL_HCD_HC_SubmitRequest>
 8020f1a:	4603      	mov	r3, r0
 8020f1c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8020f1e:	7bfb      	ldrb	r3, [r7, #15]
 8020f20:	4618      	mov	r0, r3
 8020f22:	f000 f89d 	bl	8021060 <USBH_Get_USB_Status>
 8020f26:	4603      	mov	r3, r0
 8020f28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8020f2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8020f2c:	4618      	mov	r0, r3
 8020f2e:	3714      	adds	r7, #20
 8020f30:	46bd      	mov	sp, r7
 8020f32:	bd90      	pop	{r4, r7, pc}

08020f34 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8020f34:	b580      	push	{r7, lr}
 8020f36:	b082      	sub	sp, #8
 8020f38:	af00      	add	r7, sp, #0
 8020f3a:	6078      	str	r0, [r7, #4]
 8020f3c:	460b      	mov	r3, r1
 8020f3e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8020f40:	687b      	ldr	r3, [r7, #4]
 8020f42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8020f46:	78fa      	ldrb	r2, [r7, #3]
 8020f48:	4611      	mov	r1, r2
 8020f4a:	4618      	mov	r0, r3
 8020f4c:	f7e4 fc45 	bl	80057da <HAL_HCD_HC_GetURBState>
 8020f50:	4603      	mov	r3, r0
}
 8020f52:	4618      	mov	r0, r3
 8020f54:	3708      	adds	r7, #8
 8020f56:	46bd      	mov	sp, r7
 8020f58:	bd80      	pop	{r7, pc}

08020f5a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8020f5a:	b580      	push	{r7, lr}
 8020f5c:	b082      	sub	sp, #8
 8020f5e:	af00      	add	r7, sp, #0
 8020f60:	6078      	str	r0, [r7, #4]
 8020f62:	460b      	mov	r3, r1
 8020f64:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8020f66:	687b      	ldr	r3, [r7, #4]
 8020f68:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8020f6c:	2b01      	cmp	r3, #1
 8020f6e:	d103      	bne.n	8020f78 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8020f70:	78fb      	ldrb	r3, [r7, #3]
 8020f72:	4618      	mov	r0, r3
 8020f74:	f000 f8a0 	bl	80210b8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8020f78:	20c8      	movs	r0, #200	; 0xc8
 8020f7a:	f7e2 fc1b 	bl	80037b4 <HAL_Delay>
  return USBH_OK;
 8020f7e:	2300      	movs	r3, #0
}
 8020f80:	4618      	mov	r0, r3
 8020f82:	3708      	adds	r7, #8
 8020f84:	46bd      	mov	sp, r7
 8020f86:	bd80      	pop	{r7, pc}

08020f88 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8020f88:	b480      	push	{r7}
 8020f8a:	b085      	sub	sp, #20
 8020f8c:	af00      	add	r7, sp, #0
 8020f8e:	6078      	str	r0, [r7, #4]
 8020f90:	460b      	mov	r3, r1
 8020f92:	70fb      	strb	r3, [r7, #3]
 8020f94:	4613      	mov	r3, r2
 8020f96:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8020f98:	687b      	ldr	r3, [r7, #4]
 8020f9a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8020f9e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8020fa0:	78fb      	ldrb	r3, [r7, #3]
 8020fa2:	68fa      	ldr	r2, [r7, #12]
 8020fa4:	212c      	movs	r1, #44	; 0x2c
 8020fa6:	fb01 f303 	mul.w	r3, r1, r3
 8020faa:	4413      	add	r3, r2
 8020fac:	333b      	adds	r3, #59	; 0x3b
 8020fae:	781b      	ldrb	r3, [r3, #0]
 8020fb0:	2b00      	cmp	r3, #0
 8020fb2:	d009      	beq.n	8020fc8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8020fb4:	78fb      	ldrb	r3, [r7, #3]
 8020fb6:	68fa      	ldr	r2, [r7, #12]
 8020fb8:	212c      	movs	r1, #44	; 0x2c
 8020fba:	fb01 f303 	mul.w	r3, r1, r3
 8020fbe:	4413      	add	r3, r2
 8020fc0:	3354      	adds	r3, #84	; 0x54
 8020fc2:	78ba      	ldrb	r2, [r7, #2]
 8020fc4:	701a      	strb	r2, [r3, #0]
 8020fc6:	e008      	b.n	8020fda <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8020fc8:	78fb      	ldrb	r3, [r7, #3]
 8020fca:	68fa      	ldr	r2, [r7, #12]
 8020fcc:	212c      	movs	r1, #44	; 0x2c
 8020fce:	fb01 f303 	mul.w	r3, r1, r3
 8020fd2:	4413      	add	r3, r2
 8020fd4:	3355      	adds	r3, #85	; 0x55
 8020fd6:	78ba      	ldrb	r2, [r7, #2]
 8020fd8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8020fda:	2300      	movs	r3, #0
}
 8020fdc:	4618      	mov	r0, r3
 8020fde:	3714      	adds	r7, #20
 8020fe0:	46bd      	mov	sp, r7
 8020fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020fe6:	4770      	bx	lr

08020fe8 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8020fe8:	b480      	push	{r7}
 8020fea:	b085      	sub	sp, #20
 8020fec:	af00      	add	r7, sp, #0
 8020fee:	6078      	str	r0, [r7, #4]
 8020ff0:	460b      	mov	r3, r1
 8020ff2:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8020ff4:	2300      	movs	r3, #0
 8020ff6:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8020ff8:	687b      	ldr	r3, [r7, #4]
 8020ffa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8020ffe:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8021000:	78fb      	ldrb	r3, [r7, #3]
 8021002:	68ba      	ldr	r2, [r7, #8]
 8021004:	212c      	movs	r1, #44	; 0x2c
 8021006:	fb01 f303 	mul.w	r3, r1, r3
 802100a:	4413      	add	r3, r2
 802100c:	333b      	adds	r3, #59	; 0x3b
 802100e:	781b      	ldrb	r3, [r3, #0]
 8021010:	2b00      	cmp	r3, #0
 8021012:	d009      	beq.n	8021028 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8021014:	78fb      	ldrb	r3, [r7, #3]
 8021016:	68ba      	ldr	r2, [r7, #8]
 8021018:	212c      	movs	r1, #44	; 0x2c
 802101a:	fb01 f303 	mul.w	r3, r1, r3
 802101e:	4413      	add	r3, r2
 8021020:	3354      	adds	r3, #84	; 0x54
 8021022:	781b      	ldrb	r3, [r3, #0]
 8021024:	73fb      	strb	r3, [r7, #15]
 8021026:	e008      	b.n	802103a <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8021028:	78fb      	ldrb	r3, [r7, #3]
 802102a:	68ba      	ldr	r2, [r7, #8]
 802102c:	212c      	movs	r1, #44	; 0x2c
 802102e:	fb01 f303 	mul.w	r3, r1, r3
 8021032:	4413      	add	r3, r2
 8021034:	3355      	adds	r3, #85	; 0x55
 8021036:	781b      	ldrb	r3, [r3, #0]
 8021038:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 802103a:	7bfb      	ldrb	r3, [r7, #15]
}
 802103c:	4618      	mov	r0, r3
 802103e:	3714      	adds	r7, #20
 8021040:	46bd      	mov	sp, r7
 8021042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021046:	4770      	bx	lr

08021048 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8021048:	b580      	push	{r7, lr}
 802104a:	b082      	sub	sp, #8
 802104c:	af00      	add	r7, sp, #0
 802104e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8021050:	6878      	ldr	r0, [r7, #4]
 8021052:	f7e2 fbaf 	bl	80037b4 <HAL_Delay>
}
 8021056:	bf00      	nop
 8021058:	3708      	adds	r7, #8
 802105a:	46bd      	mov	sp, r7
 802105c:	bd80      	pop	{r7, pc}
	...

08021060 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8021060:	b480      	push	{r7}
 8021062:	b085      	sub	sp, #20
 8021064:	af00      	add	r7, sp, #0
 8021066:	4603      	mov	r3, r0
 8021068:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 802106a:	2300      	movs	r3, #0
 802106c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 802106e:	79fb      	ldrb	r3, [r7, #7]
 8021070:	2b03      	cmp	r3, #3
 8021072:	d817      	bhi.n	80210a4 <USBH_Get_USB_Status+0x44>
 8021074:	a201      	add	r2, pc, #4	; (adr r2, 802107c <USBH_Get_USB_Status+0x1c>)
 8021076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802107a:	bf00      	nop
 802107c:	0802108d 	.word	0x0802108d
 8021080:	08021093 	.word	0x08021093
 8021084:	08021099 	.word	0x08021099
 8021088:	0802109f 	.word	0x0802109f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 802108c:	2300      	movs	r3, #0
 802108e:	73fb      	strb	r3, [r7, #15]
    break;
 8021090:	e00b      	b.n	80210aa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8021092:	2302      	movs	r3, #2
 8021094:	73fb      	strb	r3, [r7, #15]
    break;
 8021096:	e008      	b.n	80210aa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8021098:	2301      	movs	r3, #1
 802109a:	73fb      	strb	r3, [r7, #15]
    break;
 802109c:	e005      	b.n	80210aa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 802109e:	2302      	movs	r3, #2
 80210a0:	73fb      	strb	r3, [r7, #15]
    break;
 80210a2:	e002      	b.n	80210aa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80210a4:	2302      	movs	r3, #2
 80210a6:	73fb      	strb	r3, [r7, #15]
    break;
 80210a8:	bf00      	nop
  }
  return usb_status;
 80210aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80210ac:	4618      	mov	r0, r3
 80210ae:	3714      	adds	r7, #20
 80210b0:	46bd      	mov	sp, r7
 80210b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210b6:	4770      	bx	lr

080210b8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80210b8:	b580      	push	{r7, lr}
 80210ba:	b084      	sub	sp, #16
 80210bc:	af00      	add	r7, sp, #0
 80210be:	4603      	mov	r3, r0
 80210c0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80210c2:	79fb      	ldrb	r3, [r7, #7]
 80210c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80210c6:	79fb      	ldrb	r3, [r7, #7]
 80210c8:	2b00      	cmp	r3, #0
 80210ca:	d102      	bne.n	80210d2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80210cc:	2300      	movs	r3, #0
 80210ce:	73fb      	strb	r3, [r7, #15]
 80210d0:	e001      	b.n	80210d6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80210d2:	2301      	movs	r3, #1
 80210d4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_6,(GPIO_PinState)data);
 80210d6:	7bfb      	ldrb	r3, [r7, #15]
 80210d8:	461a      	mov	r2, r3
 80210da:	2140      	movs	r1, #64	; 0x40
 80210dc:	4803      	ldr	r0, [pc, #12]	; (80210ec <MX_DriverVbusFS+0x34>)
 80210de:	f7e3 ff9f 	bl	8005020 <HAL_GPIO_WritePin>
}
 80210e2:	bf00      	nop
 80210e4:	3710      	adds	r7, #16
 80210e6:	46bd      	mov	sp, r7
 80210e8:	bd80      	pop	{r7, pc}
 80210ea:	bf00      	nop
 80210ec:	40021800 	.word	0x40021800

080210f0 <atoi>:
 80210f0:	220a      	movs	r2, #10
 80210f2:	2100      	movs	r1, #0
 80210f4:	f000 bd12 	b.w	8021b1c <strtol>

080210f8 <std>:
 80210f8:	2300      	movs	r3, #0
 80210fa:	b510      	push	{r4, lr}
 80210fc:	4604      	mov	r4, r0
 80210fe:	e9c0 3300 	strd	r3, r3, [r0]
 8021102:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021106:	6083      	str	r3, [r0, #8]
 8021108:	8181      	strh	r1, [r0, #12]
 802110a:	6643      	str	r3, [r0, #100]	; 0x64
 802110c:	81c2      	strh	r2, [r0, #14]
 802110e:	6183      	str	r3, [r0, #24]
 8021110:	4619      	mov	r1, r3
 8021112:	2208      	movs	r2, #8
 8021114:	305c      	adds	r0, #92	; 0x5c
 8021116:	f000 f953 	bl	80213c0 <memset>
 802111a:	4b05      	ldr	r3, [pc, #20]	; (8021130 <std+0x38>)
 802111c:	6263      	str	r3, [r4, #36]	; 0x24
 802111e:	4b05      	ldr	r3, [pc, #20]	; (8021134 <std+0x3c>)
 8021120:	62a3      	str	r3, [r4, #40]	; 0x28
 8021122:	4b05      	ldr	r3, [pc, #20]	; (8021138 <std+0x40>)
 8021124:	62e3      	str	r3, [r4, #44]	; 0x2c
 8021126:	4b05      	ldr	r3, [pc, #20]	; (802113c <std+0x44>)
 8021128:	6224      	str	r4, [r4, #32]
 802112a:	6323      	str	r3, [r4, #48]	; 0x30
 802112c:	bd10      	pop	{r4, pc}
 802112e:	bf00      	nop
 8021130:	080218c5 	.word	0x080218c5
 8021134:	080218eb 	.word	0x080218eb
 8021138:	08021923 	.word	0x08021923
 802113c:	08021947 	.word	0x08021947

08021140 <_cleanup_r>:
 8021140:	4901      	ldr	r1, [pc, #4]	; (8021148 <_cleanup_r+0x8>)
 8021142:	f000 b8af 	b.w	80212a4 <_fwalk_reent>
 8021146:	bf00      	nop
 8021148:	08021e49 	.word	0x08021e49

0802114c <__sfmoreglue>:
 802114c:	b570      	push	{r4, r5, r6, lr}
 802114e:	1e4a      	subs	r2, r1, #1
 8021150:	2568      	movs	r5, #104	; 0x68
 8021152:	4355      	muls	r5, r2
 8021154:	460e      	mov	r6, r1
 8021156:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802115a:	f000 f989 	bl	8021470 <_malloc_r>
 802115e:	4604      	mov	r4, r0
 8021160:	b140      	cbz	r0, 8021174 <__sfmoreglue+0x28>
 8021162:	2100      	movs	r1, #0
 8021164:	e9c0 1600 	strd	r1, r6, [r0]
 8021168:	300c      	adds	r0, #12
 802116a:	60a0      	str	r0, [r4, #8]
 802116c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8021170:	f000 f926 	bl	80213c0 <memset>
 8021174:	4620      	mov	r0, r4
 8021176:	bd70      	pop	{r4, r5, r6, pc}

08021178 <__sfp_lock_acquire>:
 8021178:	4801      	ldr	r0, [pc, #4]	; (8021180 <__sfp_lock_acquire+0x8>)
 802117a:	f000 b8d8 	b.w	802132e <__retarget_lock_acquire_recursive>
 802117e:	bf00      	nop
 8021180:	2001c0a4 	.word	0x2001c0a4

08021184 <__sfp_lock_release>:
 8021184:	4801      	ldr	r0, [pc, #4]	; (802118c <__sfp_lock_release+0x8>)
 8021186:	f000 b8d3 	b.w	8021330 <__retarget_lock_release_recursive>
 802118a:	bf00      	nop
 802118c:	2001c0a4 	.word	0x2001c0a4

08021190 <__sinit_lock_acquire>:
 8021190:	4801      	ldr	r0, [pc, #4]	; (8021198 <__sinit_lock_acquire+0x8>)
 8021192:	f000 b8cc 	b.w	802132e <__retarget_lock_acquire_recursive>
 8021196:	bf00      	nop
 8021198:	2001c09f 	.word	0x2001c09f

0802119c <__sinit_lock_release>:
 802119c:	4801      	ldr	r0, [pc, #4]	; (80211a4 <__sinit_lock_release+0x8>)
 802119e:	f000 b8c7 	b.w	8021330 <__retarget_lock_release_recursive>
 80211a2:	bf00      	nop
 80211a4:	2001c09f 	.word	0x2001c09f

080211a8 <__sinit>:
 80211a8:	b510      	push	{r4, lr}
 80211aa:	4604      	mov	r4, r0
 80211ac:	f7ff fff0 	bl	8021190 <__sinit_lock_acquire>
 80211b0:	69a3      	ldr	r3, [r4, #24]
 80211b2:	b11b      	cbz	r3, 80211bc <__sinit+0x14>
 80211b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80211b8:	f7ff bff0 	b.w	802119c <__sinit_lock_release>
 80211bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80211c0:	6523      	str	r3, [r4, #80]	; 0x50
 80211c2:	4b13      	ldr	r3, [pc, #76]	; (8021210 <__sinit+0x68>)
 80211c4:	4a13      	ldr	r2, [pc, #76]	; (8021214 <__sinit+0x6c>)
 80211c6:	681b      	ldr	r3, [r3, #0]
 80211c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80211ca:	42a3      	cmp	r3, r4
 80211cc:	bf04      	itt	eq
 80211ce:	2301      	moveq	r3, #1
 80211d0:	61a3      	streq	r3, [r4, #24]
 80211d2:	4620      	mov	r0, r4
 80211d4:	f000 f820 	bl	8021218 <__sfp>
 80211d8:	6060      	str	r0, [r4, #4]
 80211da:	4620      	mov	r0, r4
 80211dc:	f000 f81c 	bl	8021218 <__sfp>
 80211e0:	60a0      	str	r0, [r4, #8]
 80211e2:	4620      	mov	r0, r4
 80211e4:	f000 f818 	bl	8021218 <__sfp>
 80211e8:	2200      	movs	r2, #0
 80211ea:	60e0      	str	r0, [r4, #12]
 80211ec:	2104      	movs	r1, #4
 80211ee:	6860      	ldr	r0, [r4, #4]
 80211f0:	f7ff ff82 	bl	80210f8 <std>
 80211f4:	68a0      	ldr	r0, [r4, #8]
 80211f6:	2201      	movs	r2, #1
 80211f8:	2109      	movs	r1, #9
 80211fa:	f7ff ff7d 	bl	80210f8 <std>
 80211fe:	68e0      	ldr	r0, [r4, #12]
 8021200:	2202      	movs	r2, #2
 8021202:	2112      	movs	r1, #18
 8021204:	f7ff ff78 	bl	80210f8 <std>
 8021208:	2301      	movs	r3, #1
 802120a:	61a3      	str	r3, [r4, #24]
 802120c:	e7d2      	b.n	80211b4 <__sinit+0xc>
 802120e:	bf00      	nop
 8021210:	0802b108 	.word	0x0802b108
 8021214:	08021141 	.word	0x08021141

08021218 <__sfp>:
 8021218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802121a:	4607      	mov	r7, r0
 802121c:	f7ff ffac 	bl	8021178 <__sfp_lock_acquire>
 8021220:	4b1e      	ldr	r3, [pc, #120]	; (802129c <__sfp+0x84>)
 8021222:	681e      	ldr	r6, [r3, #0]
 8021224:	69b3      	ldr	r3, [r6, #24]
 8021226:	b913      	cbnz	r3, 802122e <__sfp+0x16>
 8021228:	4630      	mov	r0, r6
 802122a:	f7ff ffbd 	bl	80211a8 <__sinit>
 802122e:	3648      	adds	r6, #72	; 0x48
 8021230:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8021234:	3b01      	subs	r3, #1
 8021236:	d503      	bpl.n	8021240 <__sfp+0x28>
 8021238:	6833      	ldr	r3, [r6, #0]
 802123a:	b30b      	cbz	r3, 8021280 <__sfp+0x68>
 802123c:	6836      	ldr	r6, [r6, #0]
 802123e:	e7f7      	b.n	8021230 <__sfp+0x18>
 8021240:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8021244:	b9d5      	cbnz	r5, 802127c <__sfp+0x64>
 8021246:	4b16      	ldr	r3, [pc, #88]	; (80212a0 <__sfp+0x88>)
 8021248:	60e3      	str	r3, [r4, #12]
 802124a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802124e:	6665      	str	r5, [r4, #100]	; 0x64
 8021250:	f000 f86c 	bl	802132c <__retarget_lock_init_recursive>
 8021254:	f7ff ff96 	bl	8021184 <__sfp_lock_release>
 8021258:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802125c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8021260:	6025      	str	r5, [r4, #0]
 8021262:	61a5      	str	r5, [r4, #24]
 8021264:	2208      	movs	r2, #8
 8021266:	4629      	mov	r1, r5
 8021268:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802126c:	f000 f8a8 	bl	80213c0 <memset>
 8021270:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8021274:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8021278:	4620      	mov	r0, r4
 802127a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802127c:	3468      	adds	r4, #104	; 0x68
 802127e:	e7d9      	b.n	8021234 <__sfp+0x1c>
 8021280:	2104      	movs	r1, #4
 8021282:	4638      	mov	r0, r7
 8021284:	f7ff ff62 	bl	802114c <__sfmoreglue>
 8021288:	4604      	mov	r4, r0
 802128a:	6030      	str	r0, [r6, #0]
 802128c:	2800      	cmp	r0, #0
 802128e:	d1d5      	bne.n	802123c <__sfp+0x24>
 8021290:	f7ff ff78 	bl	8021184 <__sfp_lock_release>
 8021294:	230c      	movs	r3, #12
 8021296:	603b      	str	r3, [r7, #0]
 8021298:	e7ee      	b.n	8021278 <__sfp+0x60>
 802129a:	bf00      	nop
 802129c:	0802b108 	.word	0x0802b108
 80212a0:	ffff0001 	.word	0xffff0001

080212a4 <_fwalk_reent>:
 80212a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80212a8:	4606      	mov	r6, r0
 80212aa:	4688      	mov	r8, r1
 80212ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80212b0:	2700      	movs	r7, #0
 80212b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80212b6:	f1b9 0901 	subs.w	r9, r9, #1
 80212ba:	d505      	bpl.n	80212c8 <_fwalk_reent+0x24>
 80212bc:	6824      	ldr	r4, [r4, #0]
 80212be:	2c00      	cmp	r4, #0
 80212c0:	d1f7      	bne.n	80212b2 <_fwalk_reent+0xe>
 80212c2:	4638      	mov	r0, r7
 80212c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80212c8:	89ab      	ldrh	r3, [r5, #12]
 80212ca:	2b01      	cmp	r3, #1
 80212cc:	d907      	bls.n	80212de <_fwalk_reent+0x3a>
 80212ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80212d2:	3301      	adds	r3, #1
 80212d4:	d003      	beq.n	80212de <_fwalk_reent+0x3a>
 80212d6:	4629      	mov	r1, r5
 80212d8:	4630      	mov	r0, r6
 80212da:	47c0      	blx	r8
 80212dc:	4307      	orrs	r7, r0
 80212de:	3568      	adds	r5, #104	; 0x68
 80212e0:	e7e9      	b.n	80212b6 <_fwalk_reent+0x12>
	...

080212e4 <__libc_init_array>:
 80212e4:	b570      	push	{r4, r5, r6, lr}
 80212e6:	4d0d      	ldr	r5, [pc, #52]	; (802131c <__libc_init_array+0x38>)
 80212e8:	4c0d      	ldr	r4, [pc, #52]	; (8021320 <__libc_init_array+0x3c>)
 80212ea:	1b64      	subs	r4, r4, r5
 80212ec:	10a4      	asrs	r4, r4, #2
 80212ee:	2600      	movs	r6, #0
 80212f0:	42a6      	cmp	r6, r4
 80212f2:	d109      	bne.n	8021308 <__libc_init_array+0x24>
 80212f4:	4d0b      	ldr	r5, [pc, #44]	; (8021324 <__libc_init_array+0x40>)
 80212f6:	4c0c      	ldr	r4, [pc, #48]	; (8021328 <__libc_init_array+0x44>)
 80212f8:	f001 ff7e 	bl	80231f8 <_init>
 80212fc:	1b64      	subs	r4, r4, r5
 80212fe:	10a4      	asrs	r4, r4, #2
 8021300:	2600      	movs	r6, #0
 8021302:	42a6      	cmp	r6, r4
 8021304:	d105      	bne.n	8021312 <__libc_init_array+0x2e>
 8021306:	bd70      	pop	{r4, r5, r6, pc}
 8021308:	f855 3b04 	ldr.w	r3, [r5], #4
 802130c:	4798      	blx	r3
 802130e:	3601      	adds	r6, #1
 8021310:	e7ee      	b.n	80212f0 <__libc_init_array+0xc>
 8021312:	f855 3b04 	ldr.w	r3, [r5], #4
 8021316:	4798      	blx	r3
 8021318:	3601      	adds	r6, #1
 802131a:	e7f2      	b.n	8021302 <__libc_init_array+0x1e>
 802131c:	0802b214 	.word	0x0802b214
 8021320:	0802b214 	.word	0x0802b214
 8021324:	0802b214 	.word	0x0802b214
 8021328:	0802b218 	.word	0x0802b218

0802132c <__retarget_lock_init_recursive>:
 802132c:	4770      	bx	lr

0802132e <__retarget_lock_acquire_recursive>:
 802132e:	4770      	bx	lr

08021330 <__retarget_lock_release_recursive>:
 8021330:	4770      	bx	lr
	...

08021334 <malloc>:
 8021334:	4b02      	ldr	r3, [pc, #8]	; (8021340 <malloc+0xc>)
 8021336:	4601      	mov	r1, r0
 8021338:	6818      	ldr	r0, [r3, #0]
 802133a:	f000 b899 	b.w	8021470 <_malloc_r>
 802133e:	bf00      	nop
 8021340:	20000750 	.word	0x20000750

08021344 <free>:
 8021344:	4b02      	ldr	r3, [pc, #8]	; (8021350 <free+0xc>)
 8021346:	4601      	mov	r1, r0
 8021348:	6818      	ldr	r0, [r3, #0]
 802134a:	f000 b841 	b.w	80213d0 <_free_r>
 802134e:	bf00      	nop
 8021350:	20000750 	.word	0x20000750

08021354 <memcmp>:
 8021354:	b530      	push	{r4, r5, lr}
 8021356:	3901      	subs	r1, #1
 8021358:	2400      	movs	r4, #0
 802135a:	42a2      	cmp	r2, r4
 802135c:	d101      	bne.n	8021362 <memcmp+0xe>
 802135e:	2000      	movs	r0, #0
 8021360:	e005      	b.n	802136e <memcmp+0x1a>
 8021362:	5d03      	ldrb	r3, [r0, r4]
 8021364:	3401      	adds	r4, #1
 8021366:	5d0d      	ldrb	r5, [r1, r4]
 8021368:	42ab      	cmp	r3, r5
 802136a:	d0f6      	beq.n	802135a <memcmp+0x6>
 802136c:	1b58      	subs	r0, r3, r5
 802136e:	bd30      	pop	{r4, r5, pc}

08021370 <memcpy>:
 8021370:	440a      	add	r2, r1
 8021372:	4291      	cmp	r1, r2
 8021374:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8021378:	d100      	bne.n	802137c <memcpy+0xc>
 802137a:	4770      	bx	lr
 802137c:	b510      	push	{r4, lr}
 802137e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021382:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021386:	4291      	cmp	r1, r2
 8021388:	d1f9      	bne.n	802137e <memcpy+0xe>
 802138a:	bd10      	pop	{r4, pc}

0802138c <memmove>:
 802138c:	4288      	cmp	r0, r1
 802138e:	b510      	push	{r4, lr}
 8021390:	eb01 0402 	add.w	r4, r1, r2
 8021394:	d902      	bls.n	802139c <memmove+0x10>
 8021396:	4284      	cmp	r4, r0
 8021398:	4623      	mov	r3, r4
 802139a:	d807      	bhi.n	80213ac <memmove+0x20>
 802139c:	1e43      	subs	r3, r0, #1
 802139e:	42a1      	cmp	r1, r4
 80213a0:	d008      	beq.n	80213b4 <memmove+0x28>
 80213a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80213a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80213aa:	e7f8      	b.n	802139e <memmove+0x12>
 80213ac:	4402      	add	r2, r0
 80213ae:	4601      	mov	r1, r0
 80213b0:	428a      	cmp	r2, r1
 80213b2:	d100      	bne.n	80213b6 <memmove+0x2a>
 80213b4:	bd10      	pop	{r4, pc}
 80213b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80213ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80213be:	e7f7      	b.n	80213b0 <memmove+0x24>

080213c0 <memset>:
 80213c0:	4402      	add	r2, r0
 80213c2:	4603      	mov	r3, r0
 80213c4:	4293      	cmp	r3, r2
 80213c6:	d100      	bne.n	80213ca <memset+0xa>
 80213c8:	4770      	bx	lr
 80213ca:	f803 1b01 	strb.w	r1, [r3], #1
 80213ce:	e7f9      	b.n	80213c4 <memset+0x4>

080213d0 <_free_r>:
 80213d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80213d2:	2900      	cmp	r1, #0
 80213d4:	d048      	beq.n	8021468 <_free_r+0x98>
 80213d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80213da:	9001      	str	r0, [sp, #4]
 80213dc:	2b00      	cmp	r3, #0
 80213de:	f1a1 0404 	sub.w	r4, r1, #4
 80213e2:	bfb8      	it	lt
 80213e4:	18e4      	addlt	r4, r4, r3
 80213e6:	f000 fdf3 	bl	8021fd0 <__malloc_lock>
 80213ea:	4a20      	ldr	r2, [pc, #128]	; (802146c <_free_r+0x9c>)
 80213ec:	9801      	ldr	r0, [sp, #4]
 80213ee:	6813      	ldr	r3, [r2, #0]
 80213f0:	4615      	mov	r5, r2
 80213f2:	b933      	cbnz	r3, 8021402 <_free_r+0x32>
 80213f4:	6063      	str	r3, [r4, #4]
 80213f6:	6014      	str	r4, [r2, #0]
 80213f8:	b003      	add	sp, #12
 80213fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80213fe:	f000 bded 	b.w	8021fdc <__malloc_unlock>
 8021402:	42a3      	cmp	r3, r4
 8021404:	d90b      	bls.n	802141e <_free_r+0x4e>
 8021406:	6821      	ldr	r1, [r4, #0]
 8021408:	1862      	adds	r2, r4, r1
 802140a:	4293      	cmp	r3, r2
 802140c:	bf04      	itt	eq
 802140e:	681a      	ldreq	r2, [r3, #0]
 8021410:	685b      	ldreq	r3, [r3, #4]
 8021412:	6063      	str	r3, [r4, #4]
 8021414:	bf04      	itt	eq
 8021416:	1852      	addeq	r2, r2, r1
 8021418:	6022      	streq	r2, [r4, #0]
 802141a:	602c      	str	r4, [r5, #0]
 802141c:	e7ec      	b.n	80213f8 <_free_r+0x28>
 802141e:	461a      	mov	r2, r3
 8021420:	685b      	ldr	r3, [r3, #4]
 8021422:	b10b      	cbz	r3, 8021428 <_free_r+0x58>
 8021424:	42a3      	cmp	r3, r4
 8021426:	d9fa      	bls.n	802141e <_free_r+0x4e>
 8021428:	6811      	ldr	r1, [r2, #0]
 802142a:	1855      	adds	r5, r2, r1
 802142c:	42a5      	cmp	r5, r4
 802142e:	d10b      	bne.n	8021448 <_free_r+0x78>
 8021430:	6824      	ldr	r4, [r4, #0]
 8021432:	4421      	add	r1, r4
 8021434:	1854      	adds	r4, r2, r1
 8021436:	42a3      	cmp	r3, r4
 8021438:	6011      	str	r1, [r2, #0]
 802143a:	d1dd      	bne.n	80213f8 <_free_r+0x28>
 802143c:	681c      	ldr	r4, [r3, #0]
 802143e:	685b      	ldr	r3, [r3, #4]
 8021440:	6053      	str	r3, [r2, #4]
 8021442:	4421      	add	r1, r4
 8021444:	6011      	str	r1, [r2, #0]
 8021446:	e7d7      	b.n	80213f8 <_free_r+0x28>
 8021448:	d902      	bls.n	8021450 <_free_r+0x80>
 802144a:	230c      	movs	r3, #12
 802144c:	6003      	str	r3, [r0, #0]
 802144e:	e7d3      	b.n	80213f8 <_free_r+0x28>
 8021450:	6825      	ldr	r5, [r4, #0]
 8021452:	1961      	adds	r1, r4, r5
 8021454:	428b      	cmp	r3, r1
 8021456:	bf04      	itt	eq
 8021458:	6819      	ldreq	r1, [r3, #0]
 802145a:	685b      	ldreq	r3, [r3, #4]
 802145c:	6063      	str	r3, [r4, #4]
 802145e:	bf04      	itt	eq
 8021460:	1949      	addeq	r1, r1, r5
 8021462:	6021      	streq	r1, [r4, #0]
 8021464:	6054      	str	r4, [r2, #4]
 8021466:	e7c7      	b.n	80213f8 <_free_r+0x28>
 8021468:	b003      	add	sp, #12
 802146a:	bd30      	pop	{r4, r5, pc}
 802146c:	2000541c 	.word	0x2000541c

08021470 <_malloc_r>:
 8021470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021472:	1ccd      	adds	r5, r1, #3
 8021474:	f025 0503 	bic.w	r5, r5, #3
 8021478:	3508      	adds	r5, #8
 802147a:	2d0c      	cmp	r5, #12
 802147c:	bf38      	it	cc
 802147e:	250c      	movcc	r5, #12
 8021480:	2d00      	cmp	r5, #0
 8021482:	4606      	mov	r6, r0
 8021484:	db01      	blt.n	802148a <_malloc_r+0x1a>
 8021486:	42a9      	cmp	r1, r5
 8021488:	d903      	bls.n	8021492 <_malloc_r+0x22>
 802148a:	230c      	movs	r3, #12
 802148c:	6033      	str	r3, [r6, #0]
 802148e:	2000      	movs	r0, #0
 8021490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021492:	f000 fd9d 	bl	8021fd0 <__malloc_lock>
 8021496:	4921      	ldr	r1, [pc, #132]	; (802151c <_malloc_r+0xac>)
 8021498:	680a      	ldr	r2, [r1, #0]
 802149a:	4614      	mov	r4, r2
 802149c:	b99c      	cbnz	r4, 80214c6 <_malloc_r+0x56>
 802149e:	4f20      	ldr	r7, [pc, #128]	; (8021520 <_malloc_r+0xb0>)
 80214a0:	683b      	ldr	r3, [r7, #0]
 80214a2:	b923      	cbnz	r3, 80214ae <_malloc_r+0x3e>
 80214a4:	4621      	mov	r1, r4
 80214a6:	4630      	mov	r0, r6
 80214a8:	f000 f97c 	bl	80217a4 <_sbrk_r>
 80214ac:	6038      	str	r0, [r7, #0]
 80214ae:	4629      	mov	r1, r5
 80214b0:	4630      	mov	r0, r6
 80214b2:	f000 f977 	bl	80217a4 <_sbrk_r>
 80214b6:	1c43      	adds	r3, r0, #1
 80214b8:	d123      	bne.n	8021502 <_malloc_r+0x92>
 80214ba:	230c      	movs	r3, #12
 80214bc:	6033      	str	r3, [r6, #0]
 80214be:	4630      	mov	r0, r6
 80214c0:	f000 fd8c 	bl	8021fdc <__malloc_unlock>
 80214c4:	e7e3      	b.n	802148e <_malloc_r+0x1e>
 80214c6:	6823      	ldr	r3, [r4, #0]
 80214c8:	1b5b      	subs	r3, r3, r5
 80214ca:	d417      	bmi.n	80214fc <_malloc_r+0x8c>
 80214cc:	2b0b      	cmp	r3, #11
 80214ce:	d903      	bls.n	80214d8 <_malloc_r+0x68>
 80214d0:	6023      	str	r3, [r4, #0]
 80214d2:	441c      	add	r4, r3
 80214d4:	6025      	str	r5, [r4, #0]
 80214d6:	e004      	b.n	80214e2 <_malloc_r+0x72>
 80214d8:	6863      	ldr	r3, [r4, #4]
 80214da:	42a2      	cmp	r2, r4
 80214dc:	bf0c      	ite	eq
 80214de:	600b      	streq	r3, [r1, #0]
 80214e0:	6053      	strne	r3, [r2, #4]
 80214e2:	4630      	mov	r0, r6
 80214e4:	f000 fd7a 	bl	8021fdc <__malloc_unlock>
 80214e8:	f104 000b 	add.w	r0, r4, #11
 80214ec:	1d23      	adds	r3, r4, #4
 80214ee:	f020 0007 	bic.w	r0, r0, #7
 80214f2:	1ac2      	subs	r2, r0, r3
 80214f4:	d0cc      	beq.n	8021490 <_malloc_r+0x20>
 80214f6:	1a1b      	subs	r3, r3, r0
 80214f8:	50a3      	str	r3, [r4, r2]
 80214fa:	e7c9      	b.n	8021490 <_malloc_r+0x20>
 80214fc:	4622      	mov	r2, r4
 80214fe:	6864      	ldr	r4, [r4, #4]
 8021500:	e7cc      	b.n	802149c <_malloc_r+0x2c>
 8021502:	1cc4      	adds	r4, r0, #3
 8021504:	f024 0403 	bic.w	r4, r4, #3
 8021508:	42a0      	cmp	r0, r4
 802150a:	d0e3      	beq.n	80214d4 <_malloc_r+0x64>
 802150c:	1a21      	subs	r1, r4, r0
 802150e:	4630      	mov	r0, r6
 8021510:	f000 f948 	bl	80217a4 <_sbrk_r>
 8021514:	3001      	adds	r0, #1
 8021516:	d1dd      	bne.n	80214d4 <_malloc_r+0x64>
 8021518:	e7cf      	b.n	80214ba <_malloc_r+0x4a>
 802151a:	bf00      	nop
 802151c:	2000541c 	.word	0x2000541c
 8021520:	20005420 	.word	0x20005420

08021524 <iprintf>:
 8021524:	b40f      	push	{r0, r1, r2, r3}
 8021526:	4b0a      	ldr	r3, [pc, #40]	; (8021550 <iprintf+0x2c>)
 8021528:	b513      	push	{r0, r1, r4, lr}
 802152a:	681c      	ldr	r4, [r3, #0]
 802152c:	b124      	cbz	r4, 8021538 <iprintf+0x14>
 802152e:	69a3      	ldr	r3, [r4, #24]
 8021530:	b913      	cbnz	r3, 8021538 <iprintf+0x14>
 8021532:	4620      	mov	r0, r4
 8021534:	f7ff fe38 	bl	80211a8 <__sinit>
 8021538:	ab05      	add	r3, sp, #20
 802153a:	9a04      	ldr	r2, [sp, #16]
 802153c:	68a1      	ldr	r1, [r4, #8]
 802153e:	9301      	str	r3, [sp, #4]
 8021540:	4620      	mov	r0, r4
 8021542:	f001 f8cf 	bl	80226e4 <_vfiprintf_r>
 8021546:	b002      	add	sp, #8
 8021548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802154c:	b004      	add	sp, #16
 802154e:	4770      	bx	lr
 8021550:	20000750 	.word	0x20000750

08021554 <_puts_r>:
 8021554:	b570      	push	{r4, r5, r6, lr}
 8021556:	460e      	mov	r6, r1
 8021558:	4605      	mov	r5, r0
 802155a:	b118      	cbz	r0, 8021564 <_puts_r+0x10>
 802155c:	6983      	ldr	r3, [r0, #24]
 802155e:	b90b      	cbnz	r3, 8021564 <_puts_r+0x10>
 8021560:	f7ff fe22 	bl	80211a8 <__sinit>
 8021564:	69ab      	ldr	r3, [r5, #24]
 8021566:	68ac      	ldr	r4, [r5, #8]
 8021568:	b913      	cbnz	r3, 8021570 <_puts_r+0x1c>
 802156a:	4628      	mov	r0, r5
 802156c:	f7ff fe1c 	bl	80211a8 <__sinit>
 8021570:	4b2c      	ldr	r3, [pc, #176]	; (8021624 <_puts_r+0xd0>)
 8021572:	429c      	cmp	r4, r3
 8021574:	d120      	bne.n	80215b8 <_puts_r+0x64>
 8021576:	686c      	ldr	r4, [r5, #4]
 8021578:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802157a:	07db      	lsls	r3, r3, #31
 802157c:	d405      	bmi.n	802158a <_puts_r+0x36>
 802157e:	89a3      	ldrh	r3, [r4, #12]
 8021580:	0598      	lsls	r0, r3, #22
 8021582:	d402      	bmi.n	802158a <_puts_r+0x36>
 8021584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021586:	f7ff fed2 	bl	802132e <__retarget_lock_acquire_recursive>
 802158a:	89a3      	ldrh	r3, [r4, #12]
 802158c:	0719      	lsls	r1, r3, #28
 802158e:	d51d      	bpl.n	80215cc <_puts_r+0x78>
 8021590:	6923      	ldr	r3, [r4, #16]
 8021592:	b1db      	cbz	r3, 80215cc <_puts_r+0x78>
 8021594:	3e01      	subs	r6, #1
 8021596:	68a3      	ldr	r3, [r4, #8]
 8021598:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802159c:	3b01      	subs	r3, #1
 802159e:	60a3      	str	r3, [r4, #8]
 80215a0:	bb39      	cbnz	r1, 80215f2 <_puts_r+0x9e>
 80215a2:	2b00      	cmp	r3, #0
 80215a4:	da38      	bge.n	8021618 <_puts_r+0xc4>
 80215a6:	4622      	mov	r2, r4
 80215a8:	210a      	movs	r1, #10
 80215aa:	4628      	mov	r0, r5
 80215ac:	f000 fac0 	bl	8021b30 <__swbuf_r>
 80215b0:	3001      	adds	r0, #1
 80215b2:	d011      	beq.n	80215d8 <_puts_r+0x84>
 80215b4:	250a      	movs	r5, #10
 80215b6:	e011      	b.n	80215dc <_puts_r+0x88>
 80215b8:	4b1b      	ldr	r3, [pc, #108]	; (8021628 <_puts_r+0xd4>)
 80215ba:	429c      	cmp	r4, r3
 80215bc:	d101      	bne.n	80215c2 <_puts_r+0x6e>
 80215be:	68ac      	ldr	r4, [r5, #8]
 80215c0:	e7da      	b.n	8021578 <_puts_r+0x24>
 80215c2:	4b1a      	ldr	r3, [pc, #104]	; (802162c <_puts_r+0xd8>)
 80215c4:	429c      	cmp	r4, r3
 80215c6:	bf08      	it	eq
 80215c8:	68ec      	ldreq	r4, [r5, #12]
 80215ca:	e7d5      	b.n	8021578 <_puts_r+0x24>
 80215cc:	4621      	mov	r1, r4
 80215ce:	4628      	mov	r0, r5
 80215d0:	f000 fb12 	bl	8021bf8 <__swsetup_r>
 80215d4:	2800      	cmp	r0, #0
 80215d6:	d0dd      	beq.n	8021594 <_puts_r+0x40>
 80215d8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80215dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80215de:	07da      	lsls	r2, r3, #31
 80215e0:	d405      	bmi.n	80215ee <_puts_r+0x9a>
 80215e2:	89a3      	ldrh	r3, [r4, #12]
 80215e4:	059b      	lsls	r3, r3, #22
 80215e6:	d402      	bmi.n	80215ee <_puts_r+0x9a>
 80215e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80215ea:	f7ff fea1 	bl	8021330 <__retarget_lock_release_recursive>
 80215ee:	4628      	mov	r0, r5
 80215f0:	bd70      	pop	{r4, r5, r6, pc}
 80215f2:	2b00      	cmp	r3, #0
 80215f4:	da04      	bge.n	8021600 <_puts_r+0xac>
 80215f6:	69a2      	ldr	r2, [r4, #24]
 80215f8:	429a      	cmp	r2, r3
 80215fa:	dc06      	bgt.n	802160a <_puts_r+0xb6>
 80215fc:	290a      	cmp	r1, #10
 80215fe:	d004      	beq.n	802160a <_puts_r+0xb6>
 8021600:	6823      	ldr	r3, [r4, #0]
 8021602:	1c5a      	adds	r2, r3, #1
 8021604:	6022      	str	r2, [r4, #0]
 8021606:	7019      	strb	r1, [r3, #0]
 8021608:	e7c5      	b.n	8021596 <_puts_r+0x42>
 802160a:	4622      	mov	r2, r4
 802160c:	4628      	mov	r0, r5
 802160e:	f000 fa8f 	bl	8021b30 <__swbuf_r>
 8021612:	3001      	adds	r0, #1
 8021614:	d1bf      	bne.n	8021596 <_puts_r+0x42>
 8021616:	e7df      	b.n	80215d8 <_puts_r+0x84>
 8021618:	6823      	ldr	r3, [r4, #0]
 802161a:	250a      	movs	r5, #10
 802161c:	1c5a      	adds	r2, r3, #1
 802161e:	6022      	str	r2, [r4, #0]
 8021620:	701d      	strb	r5, [r3, #0]
 8021622:	e7db      	b.n	80215dc <_puts_r+0x88>
 8021624:	0802b0c8 	.word	0x0802b0c8
 8021628:	0802b0e8 	.word	0x0802b0e8
 802162c:	0802b0a8 	.word	0x0802b0a8

08021630 <puts>:
 8021630:	4b02      	ldr	r3, [pc, #8]	; (802163c <puts+0xc>)
 8021632:	4601      	mov	r1, r0
 8021634:	6818      	ldr	r0, [r3, #0]
 8021636:	f7ff bf8d 	b.w	8021554 <_puts_r>
 802163a:	bf00      	nop
 802163c:	20000750 	.word	0x20000750

08021640 <rand>:
 8021640:	4b17      	ldr	r3, [pc, #92]	; (80216a0 <rand+0x60>)
 8021642:	b510      	push	{r4, lr}
 8021644:	681c      	ldr	r4, [r3, #0]
 8021646:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8021648:	b9b3      	cbnz	r3, 8021678 <rand+0x38>
 802164a:	2018      	movs	r0, #24
 802164c:	f7ff fe72 	bl	8021334 <malloc>
 8021650:	63a0      	str	r0, [r4, #56]	; 0x38
 8021652:	b928      	cbnz	r0, 8021660 <rand+0x20>
 8021654:	4602      	mov	r2, r0
 8021656:	4b13      	ldr	r3, [pc, #76]	; (80216a4 <rand+0x64>)
 8021658:	4813      	ldr	r0, [pc, #76]	; (80216a8 <rand+0x68>)
 802165a:	214e      	movs	r1, #78	; 0x4e
 802165c:	f000 fb3a 	bl	8021cd4 <__assert_func>
 8021660:	4a12      	ldr	r2, [pc, #72]	; (80216ac <rand+0x6c>)
 8021662:	4b13      	ldr	r3, [pc, #76]	; (80216b0 <rand+0x70>)
 8021664:	e9c0 2300 	strd	r2, r3, [r0]
 8021668:	4b12      	ldr	r3, [pc, #72]	; (80216b4 <rand+0x74>)
 802166a:	6083      	str	r3, [r0, #8]
 802166c:	230b      	movs	r3, #11
 802166e:	8183      	strh	r3, [r0, #12]
 8021670:	2201      	movs	r2, #1
 8021672:	2300      	movs	r3, #0
 8021674:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8021678:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802167a:	480f      	ldr	r0, [pc, #60]	; (80216b8 <rand+0x78>)
 802167c:	690a      	ldr	r2, [r1, #16]
 802167e:	694b      	ldr	r3, [r1, #20]
 8021680:	4c0e      	ldr	r4, [pc, #56]	; (80216bc <rand+0x7c>)
 8021682:	4350      	muls	r0, r2
 8021684:	fb04 0003 	mla	r0, r4, r3, r0
 8021688:	fba2 3404 	umull	r3, r4, r2, r4
 802168c:	1c5a      	adds	r2, r3, #1
 802168e:	4404      	add	r4, r0
 8021690:	f144 0000 	adc.w	r0, r4, #0
 8021694:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8021698:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802169c:	bd10      	pop	{r4, pc}
 802169e:	bf00      	nop
 80216a0:	20000750 	.word	0x20000750
 80216a4:	0802b10c 	.word	0x0802b10c
 80216a8:	0802b123 	.word	0x0802b123
 80216ac:	abcd330e 	.word	0xabcd330e
 80216b0:	e66d1234 	.word	0xe66d1234
 80216b4:	0005deec 	.word	0x0005deec
 80216b8:	5851f42d 	.word	0x5851f42d
 80216bc:	4c957f2d 	.word	0x4c957f2d

080216c0 <realloc>:
 80216c0:	4b02      	ldr	r3, [pc, #8]	; (80216cc <realloc+0xc>)
 80216c2:	460a      	mov	r2, r1
 80216c4:	4601      	mov	r1, r0
 80216c6:	6818      	ldr	r0, [r3, #0]
 80216c8:	f000 bc8e 	b.w	8021fe8 <_realloc_r>
 80216cc:	20000750 	.word	0x20000750

080216d0 <cleanup_glue>:
 80216d0:	b538      	push	{r3, r4, r5, lr}
 80216d2:	460c      	mov	r4, r1
 80216d4:	6809      	ldr	r1, [r1, #0]
 80216d6:	4605      	mov	r5, r0
 80216d8:	b109      	cbz	r1, 80216de <cleanup_glue+0xe>
 80216da:	f7ff fff9 	bl	80216d0 <cleanup_glue>
 80216de:	4621      	mov	r1, r4
 80216e0:	4628      	mov	r0, r5
 80216e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80216e6:	f7ff be73 	b.w	80213d0 <_free_r>
	...

080216ec <_reclaim_reent>:
 80216ec:	4b2c      	ldr	r3, [pc, #176]	; (80217a0 <_reclaim_reent+0xb4>)
 80216ee:	681b      	ldr	r3, [r3, #0]
 80216f0:	4283      	cmp	r3, r0
 80216f2:	b570      	push	{r4, r5, r6, lr}
 80216f4:	4604      	mov	r4, r0
 80216f6:	d051      	beq.n	802179c <_reclaim_reent+0xb0>
 80216f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80216fa:	b143      	cbz	r3, 802170e <_reclaim_reent+0x22>
 80216fc:	68db      	ldr	r3, [r3, #12]
 80216fe:	2b00      	cmp	r3, #0
 8021700:	d14a      	bne.n	8021798 <_reclaim_reent+0xac>
 8021702:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021704:	6819      	ldr	r1, [r3, #0]
 8021706:	b111      	cbz	r1, 802170e <_reclaim_reent+0x22>
 8021708:	4620      	mov	r0, r4
 802170a:	f7ff fe61 	bl	80213d0 <_free_r>
 802170e:	6961      	ldr	r1, [r4, #20]
 8021710:	b111      	cbz	r1, 8021718 <_reclaim_reent+0x2c>
 8021712:	4620      	mov	r0, r4
 8021714:	f7ff fe5c 	bl	80213d0 <_free_r>
 8021718:	6a61      	ldr	r1, [r4, #36]	; 0x24
 802171a:	b111      	cbz	r1, 8021722 <_reclaim_reent+0x36>
 802171c:	4620      	mov	r0, r4
 802171e:	f7ff fe57 	bl	80213d0 <_free_r>
 8021722:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8021724:	b111      	cbz	r1, 802172c <_reclaim_reent+0x40>
 8021726:	4620      	mov	r0, r4
 8021728:	f7ff fe52 	bl	80213d0 <_free_r>
 802172c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 802172e:	b111      	cbz	r1, 8021736 <_reclaim_reent+0x4a>
 8021730:	4620      	mov	r0, r4
 8021732:	f7ff fe4d 	bl	80213d0 <_free_r>
 8021736:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8021738:	b111      	cbz	r1, 8021740 <_reclaim_reent+0x54>
 802173a:	4620      	mov	r0, r4
 802173c:	f7ff fe48 	bl	80213d0 <_free_r>
 8021740:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8021742:	b111      	cbz	r1, 802174a <_reclaim_reent+0x5e>
 8021744:	4620      	mov	r0, r4
 8021746:	f7ff fe43 	bl	80213d0 <_free_r>
 802174a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 802174c:	b111      	cbz	r1, 8021754 <_reclaim_reent+0x68>
 802174e:	4620      	mov	r0, r4
 8021750:	f7ff fe3e 	bl	80213d0 <_free_r>
 8021754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021756:	b111      	cbz	r1, 802175e <_reclaim_reent+0x72>
 8021758:	4620      	mov	r0, r4
 802175a:	f7ff fe39 	bl	80213d0 <_free_r>
 802175e:	69a3      	ldr	r3, [r4, #24]
 8021760:	b1e3      	cbz	r3, 802179c <_reclaim_reent+0xb0>
 8021762:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8021764:	4620      	mov	r0, r4
 8021766:	4798      	blx	r3
 8021768:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 802176a:	b1b9      	cbz	r1, 802179c <_reclaim_reent+0xb0>
 802176c:	4620      	mov	r0, r4
 802176e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021772:	f7ff bfad 	b.w	80216d0 <cleanup_glue>
 8021776:	5949      	ldr	r1, [r1, r5]
 8021778:	b941      	cbnz	r1, 802178c <_reclaim_reent+0xa0>
 802177a:	3504      	adds	r5, #4
 802177c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802177e:	2d80      	cmp	r5, #128	; 0x80
 8021780:	68d9      	ldr	r1, [r3, #12]
 8021782:	d1f8      	bne.n	8021776 <_reclaim_reent+0x8a>
 8021784:	4620      	mov	r0, r4
 8021786:	f7ff fe23 	bl	80213d0 <_free_r>
 802178a:	e7ba      	b.n	8021702 <_reclaim_reent+0x16>
 802178c:	680e      	ldr	r6, [r1, #0]
 802178e:	4620      	mov	r0, r4
 8021790:	f7ff fe1e 	bl	80213d0 <_free_r>
 8021794:	4631      	mov	r1, r6
 8021796:	e7ef      	b.n	8021778 <_reclaim_reent+0x8c>
 8021798:	2500      	movs	r5, #0
 802179a:	e7ef      	b.n	802177c <_reclaim_reent+0x90>
 802179c:	bd70      	pop	{r4, r5, r6, pc}
 802179e:	bf00      	nop
 80217a0:	20000750 	.word	0x20000750

080217a4 <_sbrk_r>:
 80217a4:	b538      	push	{r3, r4, r5, lr}
 80217a6:	4d06      	ldr	r5, [pc, #24]	; (80217c0 <_sbrk_r+0x1c>)
 80217a8:	2300      	movs	r3, #0
 80217aa:	4604      	mov	r4, r0
 80217ac:	4608      	mov	r0, r1
 80217ae:	602b      	str	r3, [r5, #0]
 80217b0:	f7e0 ff7e 	bl	80026b0 <_sbrk>
 80217b4:	1c43      	adds	r3, r0, #1
 80217b6:	d102      	bne.n	80217be <_sbrk_r+0x1a>
 80217b8:	682b      	ldr	r3, [r5, #0]
 80217ba:	b103      	cbz	r3, 80217be <_sbrk_r+0x1a>
 80217bc:	6023      	str	r3, [r4, #0]
 80217be:	bd38      	pop	{r3, r4, r5, pc}
 80217c0:	2001b9ac 	.word	0x2001b9ac

080217c4 <sniprintf>:
 80217c4:	b40c      	push	{r2, r3}
 80217c6:	b530      	push	{r4, r5, lr}
 80217c8:	4b17      	ldr	r3, [pc, #92]	; (8021828 <sniprintf+0x64>)
 80217ca:	1e0c      	subs	r4, r1, #0
 80217cc:	681d      	ldr	r5, [r3, #0]
 80217ce:	b09d      	sub	sp, #116	; 0x74
 80217d0:	da08      	bge.n	80217e4 <sniprintf+0x20>
 80217d2:	238b      	movs	r3, #139	; 0x8b
 80217d4:	602b      	str	r3, [r5, #0]
 80217d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80217da:	b01d      	add	sp, #116	; 0x74
 80217dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80217e0:	b002      	add	sp, #8
 80217e2:	4770      	bx	lr
 80217e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80217e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80217ec:	bf14      	ite	ne
 80217ee:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80217f2:	4623      	moveq	r3, r4
 80217f4:	9304      	str	r3, [sp, #16]
 80217f6:	9307      	str	r3, [sp, #28]
 80217f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80217fc:	9002      	str	r0, [sp, #8]
 80217fe:	9006      	str	r0, [sp, #24]
 8021800:	f8ad 3016 	strh.w	r3, [sp, #22]
 8021804:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8021806:	ab21      	add	r3, sp, #132	; 0x84
 8021808:	a902      	add	r1, sp, #8
 802180a:	4628      	mov	r0, r5
 802180c:	9301      	str	r3, [sp, #4]
 802180e:	f000 fc6d 	bl	80220ec <_svfiprintf_r>
 8021812:	1c43      	adds	r3, r0, #1
 8021814:	bfbc      	itt	lt
 8021816:	238b      	movlt	r3, #139	; 0x8b
 8021818:	602b      	strlt	r3, [r5, #0]
 802181a:	2c00      	cmp	r4, #0
 802181c:	d0dd      	beq.n	80217da <sniprintf+0x16>
 802181e:	9b02      	ldr	r3, [sp, #8]
 8021820:	2200      	movs	r2, #0
 8021822:	701a      	strb	r2, [r3, #0]
 8021824:	e7d9      	b.n	80217da <sniprintf+0x16>
 8021826:	bf00      	nop
 8021828:	20000750 	.word	0x20000750

0802182c <siprintf>:
 802182c:	b40e      	push	{r1, r2, r3}
 802182e:	b500      	push	{lr}
 8021830:	b09c      	sub	sp, #112	; 0x70
 8021832:	ab1d      	add	r3, sp, #116	; 0x74
 8021834:	9002      	str	r0, [sp, #8]
 8021836:	9006      	str	r0, [sp, #24]
 8021838:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802183c:	4809      	ldr	r0, [pc, #36]	; (8021864 <siprintf+0x38>)
 802183e:	9107      	str	r1, [sp, #28]
 8021840:	9104      	str	r1, [sp, #16]
 8021842:	4909      	ldr	r1, [pc, #36]	; (8021868 <siprintf+0x3c>)
 8021844:	f853 2b04 	ldr.w	r2, [r3], #4
 8021848:	9105      	str	r1, [sp, #20]
 802184a:	6800      	ldr	r0, [r0, #0]
 802184c:	9301      	str	r3, [sp, #4]
 802184e:	a902      	add	r1, sp, #8
 8021850:	f000 fc4c 	bl	80220ec <_svfiprintf_r>
 8021854:	9b02      	ldr	r3, [sp, #8]
 8021856:	2200      	movs	r2, #0
 8021858:	701a      	strb	r2, [r3, #0]
 802185a:	b01c      	add	sp, #112	; 0x70
 802185c:	f85d eb04 	ldr.w	lr, [sp], #4
 8021860:	b003      	add	sp, #12
 8021862:	4770      	bx	lr
 8021864:	20000750 	.word	0x20000750
 8021868:	ffff0208 	.word	0xffff0208

0802186c <siscanf>:
 802186c:	b40e      	push	{r1, r2, r3}
 802186e:	b510      	push	{r4, lr}
 8021870:	b09f      	sub	sp, #124	; 0x7c
 8021872:	ac21      	add	r4, sp, #132	; 0x84
 8021874:	f44f 7101 	mov.w	r1, #516	; 0x204
 8021878:	f854 2b04 	ldr.w	r2, [r4], #4
 802187c:	9201      	str	r2, [sp, #4]
 802187e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8021882:	9004      	str	r0, [sp, #16]
 8021884:	9008      	str	r0, [sp, #32]
 8021886:	f7de fce5 	bl	8000254 <strlen>
 802188a:	4b0c      	ldr	r3, [pc, #48]	; (80218bc <siscanf+0x50>)
 802188c:	9005      	str	r0, [sp, #20]
 802188e:	9009      	str	r0, [sp, #36]	; 0x24
 8021890:	930d      	str	r3, [sp, #52]	; 0x34
 8021892:	480b      	ldr	r0, [pc, #44]	; (80218c0 <siscanf+0x54>)
 8021894:	9a01      	ldr	r2, [sp, #4]
 8021896:	6800      	ldr	r0, [r0, #0]
 8021898:	9403      	str	r4, [sp, #12]
 802189a:	2300      	movs	r3, #0
 802189c:	9311      	str	r3, [sp, #68]	; 0x44
 802189e:	9316      	str	r3, [sp, #88]	; 0x58
 80218a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80218a4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80218a8:	a904      	add	r1, sp, #16
 80218aa:	4623      	mov	r3, r4
 80218ac:	f000 fd78 	bl	80223a0 <__ssvfiscanf_r>
 80218b0:	b01f      	add	sp, #124	; 0x7c
 80218b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80218b6:	b003      	add	sp, #12
 80218b8:	4770      	bx	lr
 80218ba:	bf00      	nop
 80218bc:	080218e7 	.word	0x080218e7
 80218c0:	20000750 	.word	0x20000750

080218c4 <__sread>:
 80218c4:	b510      	push	{r4, lr}
 80218c6:	460c      	mov	r4, r1
 80218c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80218cc:	f001 fb1a 	bl	8022f04 <_read_r>
 80218d0:	2800      	cmp	r0, #0
 80218d2:	bfab      	itete	ge
 80218d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80218d6:	89a3      	ldrhlt	r3, [r4, #12]
 80218d8:	181b      	addge	r3, r3, r0
 80218da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80218de:	bfac      	ite	ge
 80218e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80218e2:	81a3      	strhlt	r3, [r4, #12]
 80218e4:	bd10      	pop	{r4, pc}

080218e6 <__seofread>:
 80218e6:	2000      	movs	r0, #0
 80218e8:	4770      	bx	lr

080218ea <__swrite>:
 80218ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80218ee:	461f      	mov	r7, r3
 80218f0:	898b      	ldrh	r3, [r1, #12]
 80218f2:	05db      	lsls	r3, r3, #23
 80218f4:	4605      	mov	r5, r0
 80218f6:	460c      	mov	r4, r1
 80218f8:	4616      	mov	r6, r2
 80218fa:	d505      	bpl.n	8021908 <__swrite+0x1e>
 80218fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021900:	2302      	movs	r3, #2
 8021902:	2200      	movs	r2, #0
 8021904:	f000 faee 	bl	8021ee4 <_lseek_r>
 8021908:	89a3      	ldrh	r3, [r4, #12]
 802190a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802190e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8021912:	81a3      	strh	r3, [r4, #12]
 8021914:	4632      	mov	r2, r6
 8021916:	463b      	mov	r3, r7
 8021918:	4628      	mov	r0, r5
 802191a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802191e:	f000 b959 	b.w	8021bd4 <_write_r>

08021922 <__sseek>:
 8021922:	b510      	push	{r4, lr}
 8021924:	460c      	mov	r4, r1
 8021926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802192a:	f000 fadb 	bl	8021ee4 <_lseek_r>
 802192e:	1c43      	adds	r3, r0, #1
 8021930:	89a3      	ldrh	r3, [r4, #12]
 8021932:	bf15      	itete	ne
 8021934:	6560      	strne	r0, [r4, #84]	; 0x54
 8021936:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802193a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802193e:	81a3      	strheq	r3, [r4, #12]
 8021940:	bf18      	it	ne
 8021942:	81a3      	strhne	r3, [r4, #12]
 8021944:	bd10      	pop	{r4, pc}

08021946 <__sclose>:
 8021946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802194a:	f000 b9e1 	b.w	8021d10 <_close_r>

0802194e <strcat>:
 802194e:	b510      	push	{r4, lr}
 8021950:	4602      	mov	r2, r0
 8021952:	7814      	ldrb	r4, [r2, #0]
 8021954:	4613      	mov	r3, r2
 8021956:	3201      	adds	r2, #1
 8021958:	2c00      	cmp	r4, #0
 802195a:	d1fa      	bne.n	8021952 <strcat+0x4>
 802195c:	3b01      	subs	r3, #1
 802195e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021962:	f803 2f01 	strb.w	r2, [r3, #1]!
 8021966:	2a00      	cmp	r2, #0
 8021968:	d1f9      	bne.n	802195e <strcat+0x10>
 802196a:	bd10      	pop	{r4, pc}

0802196c <strchr>:
 802196c:	b2c9      	uxtb	r1, r1
 802196e:	4603      	mov	r3, r0
 8021970:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021974:	b11a      	cbz	r2, 802197e <strchr+0x12>
 8021976:	428a      	cmp	r2, r1
 8021978:	d1f9      	bne.n	802196e <strchr+0x2>
 802197a:	4618      	mov	r0, r3
 802197c:	4770      	bx	lr
 802197e:	2900      	cmp	r1, #0
 8021980:	bf18      	it	ne
 8021982:	2300      	movne	r3, #0
 8021984:	e7f9      	b.n	802197a <strchr+0xe>

08021986 <strcpy>:
 8021986:	4603      	mov	r3, r0
 8021988:	f811 2b01 	ldrb.w	r2, [r1], #1
 802198c:	f803 2b01 	strb.w	r2, [r3], #1
 8021990:	2a00      	cmp	r2, #0
 8021992:	d1f9      	bne.n	8021988 <strcpy+0x2>
 8021994:	4770      	bx	lr

08021996 <strncmp>:
 8021996:	b510      	push	{r4, lr}
 8021998:	b16a      	cbz	r2, 80219b6 <strncmp+0x20>
 802199a:	3901      	subs	r1, #1
 802199c:	1884      	adds	r4, r0, r2
 802199e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80219a2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80219a6:	4293      	cmp	r3, r2
 80219a8:	d103      	bne.n	80219b2 <strncmp+0x1c>
 80219aa:	42a0      	cmp	r0, r4
 80219ac:	d001      	beq.n	80219b2 <strncmp+0x1c>
 80219ae:	2b00      	cmp	r3, #0
 80219b0:	d1f5      	bne.n	802199e <strncmp+0x8>
 80219b2:	1a98      	subs	r0, r3, r2
 80219b4:	bd10      	pop	{r4, pc}
 80219b6:	4610      	mov	r0, r2
 80219b8:	e7fc      	b.n	80219b4 <strncmp+0x1e>

080219ba <strncpy>:
 80219ba:	b510      	push	{r4, lr}
 80219bc:	3901      	subs	r1, #1
 80219be:	4603      	mov	r3, r0
 80219c0:	b132      	cbz	r2, 80219d0 <strncpy+0x16>
 80219c2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80219c6:	f803 4b01 	strb.w	r4, [r3], #1
 80219ca:	3a01      	subs	r2, #1
 80219cc:	2c00      	cmp	r4, #0
 80219ce:	d1f7      	bne.n	80219c0 <strncpy+0x6>
 80219d0:	441a      	add	r2, r3
 80219d2:	2100      	movs	r1, #0
 80219d4:	4293      	cmp	r3, r2
 80219d6:	d100      	bne.n	80219da <strncpy+0x20>
 80219d8:	bd10      	pop	{r4, pc}
 80219da:	f803 1b01 	strb.w	r1, [r3], #1
 80219de:	e7f9      	b.n	80219d4 <strncpy+0x1a>

080219e0 <strstr>:
 80219e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80219e2:	780c      	ldrb	r4, [r1, #0]
 80219e4:	b164      	cbz	r4, 8021a00 <strstr+0x20>
 80219e6:	4603      	mov	r3, r0
 80219e8:	781a      	ldrb	r2, [r3, #0]
 80219ea:	4618      	mov	r0, r3
 80219ec:	1c5e      	adds	r6, r3, #1
 80219ee:	b90a      	cbnz	r2, 80219f4 <strstr+0x14>
 80219f0:	4610      	mov	r0, r2
 80219f2:	e005      	b.n	8021a00 <strstr+0x20>
 80219f4:	4294      	cmp	r4, r2
 80219f6:	d108      	bne.n	8021a0a <strstr+0x2a>
 80219f8:	460d      	mov	r5, r1
 80219fa:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80219fe:	b902      	cbnz	r2, 8021a02 <strstr+0x22>
 8021a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021a02:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8021a06:	4297      	cmp	r7, r2
 8021a08:	d0f7      	beq.n	80219fa <strstr+0x1a>
 8021a0a:	4633      	mov	r3, r6
 8021a0c:	e7ec      	b.n	80219e8 <strstr+0x8>
	...

08021a10 <_strtol_l.isra.0>:
 8021a10:	2b01      	cmp	r3, #1
 8021a12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021a16:	d001      	beq.n	8021a1c <_strtol_l.isra.0+0xc>
 8021a18:	2b24      	cmp	r3, #36	; 0x24
 8021a1a:	d906      	bls.n	8021a2a <_strtol_l.isra.0+0x1a>
 8021a1c:	f000 f988 	bl	8021d30 <__errno>
 8021a20:	2316      	movs	r3, #22
 8021a22:	6003      	str	r3, [r0, #0]
 8021a24:	2000      	movs	r0, #0
 8021a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021a2a:	4f3a      	ldr	r7, [pc, #232]	; (8021b14 <_strtol_l.isra.0+0x104>)
 8021a2c:	468e      	mov	lr, r1
 8021a2e:	4676      	mov	r6, lr
 8021a30:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8021a34:	5de5      	ldrb	r5, [r4, r7]
 8021a36:	f015 0508 	ands.w	r5, r5, #8
 8021a3a:	d1f8      	bne.n	8021a2e <_strtol_l.isra.0+0x1e>
 8021a3c:	2c2d      	cmp	r4, #45	; 0x2d
 8021a3e:	d134      	bne.n	8021aaa <_strtol_l.isra.0+0x9a>
 8021a40:	f89e 4000 	ldrb.w	r4, [lr]
 8021a44:	f04f 0801 	mov.w	r8, #1
 8021a48:	f106 0e02 	add.w	lr, r6, #2
 8021a4c:	2b00      	cmp	r3, #0
 8021a4e:	d05c      	beq.n	8021b0a <_strtol_l.isra.0+0xfa>
 8021a50:	2b10      	cmp	r3, #16
 8021a52:	d10c      	bne.n	8021a6e <_strtol_l.isra.0+0x5e>
 8021a54:	2c30      	cmp	r4, #48	; 0x30
 8021a56:	d10a      	bne.n	8021a6e <_strtol_l.isra.0+0x5e>
 8021a58:	f89e 4000 	ldrb.w	r4, [lr]
 8021a5c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8021a60:	2c58      	cmp	r4, #88	; 0x58
 8021a62:	d14d      	bne.n	8021b00 <_strtol_l.isra.0+0xf0>
 8021a64:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8021a68:	2310      	movs	r3, #16
 8021a6a:	f10e 0e02 	add.w	lr, lr, #2
 8021a6e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8021a72:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8021a76:	2600      	movs	r6, #0
 8021a78:	fbbc f9f3 	udiv	r9, ip, r3
 8021a7c:	4635      	mov	r5, r6
 8021a7e:	fb03 ca19 	mls	sl, r3, r9, ip
 8021a82:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8021a86:	2f09      	cmp	r7, #9
 8021a88:	d818      	bhi.n	8021abc <_strtol_l.isra.0+0xac>
 8021a8a:	463c      	mov	r4, r7
 8021a8c:	42a3      	cmp	r3, r4
 8021a8e:	dd24      	ble.n	8021ada <_strtol_l.isra.0+0xca>
 8021a90:	2e00      	cmp	r6, #0
 8021a92:	db1f      	blt.n	8021ad4 <_strtol_l.isra.0+0xc4>
 8021a94:	45a9      	cmp	r9, r5
 8021a96:	d31d      	bcc.n	8021ad4 <_strtol_l.isra.0+0xc4>
 8021a98:	d101      	bne.n	8021a9e <_strtol_l.isra.0+0x8e>
 8021a9a:	45a2      	cmp	sl, r4
 8021a9c:	db1a      	blt.n	8021ad4 <_strtol_l.isra.0+0xc4>
 8021a9e:	fb05 4503 	mla	r5, r5, r3, r4
 8021aa2:	2601      	movs	r6, #1
 8021aa4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8021aa8:	e7eb      	b.n	8021a82 <_strtol_l.isra.0+0x72>
 8021aaa:	2c2b      	cmp	r4, #43	; 0x2b
 8021aac:	bf08      	it	eq
 8021aae:	f89e 4000 	ldrbeq.w	r4, [lr]
 8021ab2:	46a8      	mov	r8, r5
 8021ab4:	bf08      	it	eq
 8021ab6:	f106 0e02 	addeq.w	lr, r6, #2
 8021aba:	e7c7      	b.n	8021a4c <_strtol_l.isra.0+0x3c>
 8021abc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8021ac0:	2f19      	cmp	r7, #25
 8021ac2:	d801      	bhi.n	8021ac8 <_strtol_l.isra.0+0xb8>
 8021ac4:	3c37      	subs	r4, #55	; 0x37
 8021ac6:	e7e1      	b.n	8021a8c <_strtol_l.isra.0+0x7c>
 8021ac8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8021acc:	2f19      	cmp	r7, #25
 8021ace:	d804      	bhi.n	8021ada <_strtol_l.isra.0+0xca>
 8021ad0:	3c57      	subs	r4, #87	; 0x57
 8021ad2:	e7db      	b.n	8021a8c <_strtol_l.isra.0+0x7c>
 8021ad4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8021ad8:	e7e4      	b.n	8021aa4 <_strtol_l.isra.0+0x94>
 8021ada:	2e00      	cmp	r6, #0
 8021adc:	da05      	bge.n	8021aea <_strtol_l.isra.0+0xda>
 8021ade:	2322      	movs	r3, #34	; 0x22
 8021ae0:	6003      	str	r3, [r0, #0]
 8021ae2:	4665      	mov	r5, ip
 8021ae4:	b942      	cbnz	r2, 8021af8 <_strtol_l.isra.0+0xe8>
 8021ae6:	4628      	mov	r0, r5
 8021ae8:	e79d      	b.n	8021a26 <_strtol_l.isra.0+0x16>
 8021aea:	f1b8 0f00 	cmp.w	r8, #0
 8021aee:	d000      	beq.n	8021af2 <_strtol_l.isra.0+0xe2>
 8021af0:	426d      	negs	r5, r5
 8021af2:	2a00      	cmp	r2, #0
 8021af4:	d0f7      	beq.n	8021ae6 <_strtol_l.isra.0+0xd6>
 8021af6:	b10e      	cbz	r6, 8021afc <_strtol_l.isra.0+0xec>
 8021af8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8021afc:	6011      	str	r1, [r2, #0]
 8021afe:	e7f2      	b.n	8021ae6 <_strtol_l.isra.0+0xd6>
 8021b00:	2430      	movs	r4, #48	; 0x30
 8021b02:	2b00      	cmp	r3, #0
 8021b04:	d1b3      	bne.n	8021a6e <_strtol_l.isra.0+0x5e>
 8021b06:	2308      	movs	r3, #8
 8021b08:	e7b1      	b.n	8021a6e <_strtol_l.isra.0+0x5e>
 8021b0a:	2c30      	cmp	r4, #48	; 0x30
 8021b0c:	d0a4      	beq.n	8021a58 <_strtol_l.isra.0+0x48>
 8021b0e:	230a      	movs	r3, #10
 8021b10:	e7ad      	b.n	8021a6e <_strtol_l.isra.0+0x5e>
 8021b12:	bf00      	nop
 8021b14:	0802afa5 	.word	0x0802afa5

08021b18 <_strtol_r>:
 8021b18:	f7ff bf7a 	b.w	8021a10 <_strtol_l.isra.0>

08021b1c <strtol>:
 8021b1c:	4613      	mov	r3, r2
 8021b1e:	460a      	mov	r2, r1
 8021b20:	4601      	mov	r1, r0
 8021b22:	4802      	ldr	r0, [pc, #8]	; (8021b2c <strtol+0x10>)
 8021b24:	6800      	ldr	r0, [r0, #0]
 8021b26:	f7ff bf73 	b.w	8021a10 <_strtol_l.isra.0>
 8021b2a:	bf00      	nop
 8021b2c:	20000750 	.word	0x20000750

08021b30 <__swbuf_r>:
 8021b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021b32:	460e      	mov	r6, r1
 8021b34:	4614      	mov	r4, r2
 8021b36:	4605      	mov	r5, r0
 8021b38:	b118      	cbz	r0, 8021b42 <__swbuf_r+0x12>
 8021b3a:	6983      	ldr	r3, [r0, #24]
 8021b3c:	b90b      	cbnz	r3, 8021b42 <__swbuf_r+0x12>
 8021b3e:	f7ff fb33 	bl	80211a8 <__sinit>
 8021b42:	4b21      	ldr	r3, [pc, #132]	; (8021bc8 <__swbuf_r+0x98>)
 8021b44:	429c      	cmp	r4, r3
 8021b46:	d12b      	bne.n	8021ba0 <__swbuf_r+0x70>
 8021b48:	686c      	ldr	r4, [r5, #4]
 8021b4a:	69a3      	ldr	r3, [r4, #24]
 8021b4c:	60a3      	str	r3, [r4, #8]
 8021b4e:	89a3      	ldrh	r3, [r4, #12]
 8021b50:	071a      	lsls	r2, r3, #28
 8021b52:	d52f      	bpl.n	8021bb4 <__swbuf_r+0x84>
 8021b54:	6923      	ldr	r3, [r4, #16]
 8021b56:	b36b      	cbz	r3, 8021bb4 <__swbuf_r+0x84>
 8021b58:	6923      	ldr	r3, [r4, #16]
 8021b5a:	6820      	ldr	r0, [r4, #0]
 8021b5c:	1ac0      	subs	r0, r0, r3
 8021b5e:	6963      	ldr	r3, [r4, #20]
 8021b60:	b2f6      	uxtb	r6, r6
 8021b62:	4283      	cmp	r3, r0
 8021b64:	4637      	mov	r7, r6
 8021b66:	dc04      	bgt.n	8021b72 <__swbuf_r+0x42>
 8021b68:	4621      	mov	r1, r4
 8021b6a:	4628      	mov	r0, r5
 8021b6c:	f000 f96c 	bl	8021e48 <_fflush_r>
 8021b70:	bb30      	cbnz	r0, 8021bc0 <__swbuf_r+0x90>
 8021b72:	68a3      	ldr	r3, [r4, #8]
 8021b74:	3b01      	subs	r3, #1
 8021b76:	60a3      	str	r3, [r4, #8]
 8021b78:	6823      	ldr	r3, [r4, #0]
 8021b7a:	1c5a      	adds	r2, r3, #1
 8021b7c:	6022      	str	r2, [r4, #0]
 8021b7e:	701e      	strb	r6, [r3, #0]
 8021b80:	6963      	ldr	r3, [r4, #20]
 8021b82:	3001      	adds	r0, #1
 8021b84:	4283      	cmp	r3, r0
 8021b86:	d004      	beq.n	8021b92 <__swbuf_r+0x62>
 8021b88:	89a3      	ldrh	r3, [r4, #12]
 8021b8a:	07db      	lsls	r3, r3, #31
 8021b8c:	d506      	bpl.n	8021b9c <__swbuf_r+0x6c>
 8021b8e:	2e0a      	cmp	r6, #10
 8021b90:	d104      	bne.n	8021b9c <__swbuf_r+0x6c>
 8021b92:	4621      	mov	r1, r4
 8021b94:	4628      	mov	r0, r5
 8021b96:	f000 f957 	bl	8021e48 <_fflush_r>
 8021b9a:	b988      	cbnz	r0, 8021bc0 <__swbuf_r+0x90>
 8021b9c:	4638      	mov	r0, r7
 8021b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021ba0:	4b0a      	ldr	r3, [pc, #40]	; (8021bcc <__swbuf_r+0x9c>)
 8021ba2:	429c      	cmp	r4, r3
 8021ba4:	d101      	bne.n	8021baa <__swbuf_r+0x7a>
 8021ba6:	68ac      	ldr	r4, [r5, #8]
 8021ba8:	e7cf      	b.n	8021b4a <__swbuf_r+0x1a>
 8021baa:	4b09      	ldr	r3, [pc, #36]	; (8021bd0 <__swbuf_r+0xa0>)
 8021bac:	429c      	cmp	r4, r3
 8021bae:	bf08      	it	eq
 8021bb0:	68ec      	ldreq	r4, [r5, #12]
 8021bb2:	e7ca      	b.n	8021b4a <__swbuf_r+0x1a>
 8021bb4:	4621      	mov	r1, r4
 8021bb6:	4628      	mov	r0, r5
 8021bb8:	f000 f81e 	bl	8021bf8 <__swsetup_r>
 8021bbc:	2800      	cmp	r0, #0
 8021bbe:	d0cb      	beq.n	8021b58 <__swbuf_r+0x28>
 8021bc0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8021bc4:	e7ea      	b.n	8021b9c <__swbuf_r+0x6c>
 8021bc6:	bf00      	nop
 8021bc8:	0802b0c8 	.word	0x0802b0c8
 8021bcc:	0802b0e8 	.word	0x0802b0e8
 8021bd0:	0802b0a8 	.word	0x0802b0a8

08021bd4 <_write_r>:
 8021bd4:	b538      	push	{r3, r4, r5, lr}
 8021bd6:	4d07      	ldr	r5, [pc, #28]	; (8021bf4 <_write_r+0x20>)
 8021bd8:	4604      	mov	r4, r0
 8021bda:	4608      	mov	r0, r1
 8021bdc:	4611      	mov	r1, r2
 8021bde:	2200      	movs	r2, #0
 8021be0:	602a      	str	r2, [r5, #0]
 8021be2:	461a      	mov	r2, r3
 8021be4:	f7e0 fd13 	bl	800260e <_write>
 8021be8:	1c43      	adds	r3, r0, #1
 8021bea:	d102      	bne.n	8021bf2 <_write_r+0x1e>
 8021bec:	682b      	ldr	r3, [r5, #0]
 8021bee:	b103      	cbz	r3, 8021bf2 <_write_r+0x1e>
 8021bf0:	6023      	str	r3, [r4, #0]
 8021bf2:	bd38      	pop	{r3, r4, r5, pc}
 8021bf4:	2001b9ac 	.word	0x2001b9ac

08021bf8 <__swsetup_r>:
 8021bf8:	4b32      	ldr	r3, [pc, #200]	; (8021cc4 <__swsetup_r+0xcc>)
 8021bfa:	b570      	push	{r4, r5, r6, lr}
 8021bfc:	681d      	ldr	r5, [r3, #0]
 8021bfe:	4606      	mov	r6, r0
 8021c00:	460c      	mov	r4, r1
 8021c02:	b125      	cbz	r5, 8021c0e <__swsetup_r+0x16>
 8021c04:	69ab      	ldr	r3, [r5, #24]
 8021c06:	b913      	cbnz	r3, 8021c0e <__swsetup_r+0x16>
 8021c08:	4628      	mov	r0, r5
 8021c0a:	f7ff facd 	bl	80211a8 <__sinit>
 8021c0e:	4b2e      	ldr	r3, [pc, #184]	; (8021cc8 <__swsetup_r+0xd0>)
 8021c10:	429c      	cmp	r4, r3
 8021c12:	d10f      	bne.n	8021c34 <__swsetup_r+0x3c>
 8021c14:	686c      	ldr	r4, [r5, #4]
 8021c16:	89a3      	ldrh	r3, [r4, #12]
 8021c18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021c1c:	0719      	lsls	r1, r3, #28
 8021c1e:	d42c      	bmi.n	8021c7a <__swsetup_r+0x82>
 8021c20:	06dd      	lsls	r5, r3, #27
 8021c22:	d411      	bmi.n	8021c48 <__swsetup_r+0x50>
 8021c24:	2309      	movs	r3, #9
 8021c26:	6033      	str	r3, [r6, #0]
 8021c28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8021c2c:	81a3      	strh	r3, [r4, #12]
 8021c2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021c32:	e03e      	b.n	8021cb2 <__swsetup_r+0xba>
 8021c34:	4b25      	ldr	r3, [pc, #148]	; (8021ccc <__swsetup_r+0xd4>)
 8021c36:	429c      	cmp	r4, r3
 8021c38:	d101      	bne.n	8021c3e <__swsetup_r+0x46>
 8021c3a:	68ac      	ldr	r4, [r5, #8]
 8021c3c:	e7eb      	b.n	8021c16 <__swsetup_r+0x1e>
 8021c3e:	4b24      	ldr	r3, [pc, #144]	; (8021cd0 <__swsetup_r+0xd8>)
 8021c40:	429c      	cmp	r4, r3
 8021c42:	bf08      	it	eq
 8021c44:	68ec      	ldreq	r4, [r5, #12]
 8021c46:	e7e6      	b.n	8021c16 <__swsetup_r+0x1e>
 8021c48:	0758      	lsls	r0, r3, #29
 8021c4a:	d512      	bpl.n	8021c72 <__swsetup_r+0x7a>
 8021c4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021c4e:	b141      	cbz	r1, 8021c62 <__swsetup_r+0x6a>
 8021c50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021c54:	4299      	cmp	r1, r3
 8021c56:	d002      	beq.n	8021c5e <__swsetup_r+0x66>
 8021c58:	4630      	mov	r0, r6
 8021c5a:	f7ff fbb9 	bl	80213d0 <_free_r>
 8021c5e:	2300      	movs	r3, #0
 8021c60:	6363      	str	r3, [r4, #52]	; 0x34
 8021c62:	89a3      	ldrh	r3, [r4, #12]
 8021c64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021c68:	81a3      	strh	r3, [r4, #12]
 8021c6a:	2300      	movs	r3, #0
 8021c6c:	6063      	str	r3, [r4, #4]
 8021c6e:	6923      	ldr	r3, [r4, #16]
 8021c70:	6023      	str	r3, [r4, #0]
 8021c72:	89a3      	ldrh	r3, [r4, #12]
 8021c74:	f043 0308 	orr.w	r3, r3, #8
 8021c78:	81a3      	strh	r3, [r4, #12]
 8021c7a:	6923      	ldr	r3, [r4, #16]
 8021c7c:	b94b      	cbnz	r3, 8021c92 <__swsetup_r+0x9a>
 8021c7e:	89a3      	ldrh	r3, [r4, #12]
 8021c80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8021c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021c88:	d003      	beq.n	8021c92 <__swsetup_r+0x9a>
 8021c8a:	4621      	mov	r1, r4
 8021c8c:	4630      	mov	r0, r6
 8021c8e:	f000 f95f 	bl	8021f50 <__smakebuf_r>
 8021c92:	89a0      	ldrh	r0, [r4, #12]
 8021c94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021c98:	f010 0301 	ands.w	r3, r0, #1
 8021c9c:	d00a      	beq.n	8021cb4 <__swsetup_r+0xbc>
 8021c9e:	2300      	movs	r3, #0
 8021ca0:	60a3      	str	r3, [r4, #8]
 8021ca2:	6963      	ldr	r3, [r4, #20]
 8021ca4:	425b      	negs	r3, r3
 8021ca6:	61a3      	str	r3, [r4, #24]
 8021ca8:	6923      	ldr	r3, [r4, #16]
 8021caa:	b943      	cbnz	r3, 8021cbe <__swsetup_r+0xc6>
 8021cac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8021cb0:	d1ba      	bne.n	8021c28 <__swsetup_r+0x30>
 8021cb2:	bd70      	pop	{r4, r5, r6, pc}
 8021cb4:	0781      	lsls	r1, r0, #30
 8021cb6:	bf58      	it	pl
 8021cb8:	6963      	ldrpl	r3, [r4, #20]
 8021cba:	60a3      	str	r3, [r4, #8]
 8021cbc:	e7f4      	b.n	8021ca8 <__swsetup_r+0xb0>
 8021cbe:	2000      	movs	r0, #0
 8021cc0:	e7f7      	b.n	8021cb2 <__swsetup_r+0xba>
 8021cc2:	bf00      	nop
 8021cc4:	20000750 	.word	0x20000750
 8021cc8:	0802b0c8 	.word	0x0802b0c8
 8021ccc:	0802b0e8 	.word	0x0802b0e8
 8021cd0:	0802b0a8 	.word	0x0802b0a8

08021cd4 <__assert_func>:
 8021cd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021cd6:	4614      	mov	r4, r2
 8021cd8:	461a      	mov	r2, r3
 8021cda:	4b09      	ldr	r3, [pc, #36]	; (8021d00 <__assert_func+0x2c>)
 8021cdc:	681b      	ldr	r3, [r3, #0]
 8021cde:	4605      	mov	r5, r0
 8021ce0:	68d8      	ldr	r0, [r3, #12]
 8021ce2:	b14c      	cbz	r4, 8021cf8 <__assert_func+0x24>
 8021ce4:	4b07      	ldr	r3, [pc, #28]	; (8021d04 <__assert_func+0x30>)
 8021ce6:	9100      	str	r1, [sp, #0]
 8021ce8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021cec:	4906      	ldr	r1, [pc, #24]	; (8021d08 <__assert_func+0x34>)
 8021cee:	462b      	mov	r3, r5
 8021cf0:	f000 f8e6 	bl	8021ec0 <fiprintf>
 8021cf4:	f001 fa0a 	bl	802310c <abort>
 8021cf8:	4b04      	ldr	r3, [pc, #16]	; (8021d0c <__assert_func+0x38>)
 8021cfa:	461c      	mov	r4, r3
 8021cfc:	e7f3      	b.n	8021ce6 <__assert_func+0x12>
 8021cfe:	bf00      	nop
 8021d00:	20000750 	.word	0x20000750
 8021d04:	0802b182 	.word	0x0802b182
 8021d08:	0802b18f 	.word	0x0802b18f
 8021d0c:	0802b1bd 	.word	0x0802b1bd

08021d10 <_close_r>:
 8021d10:	b538      	push	{r3, r4, r5, lr}
 8021d12:	4d06      	ldr	r5, [pc, #24]	; (8021d2c <_close_r+0x1c>)
 8021d14:	2300      	movs	r3, #0
 8021d16:	4604      	mov	r4, r0
 8021d18:	4608      	mov	r0, r1
 8021d1a:	602b      	str	r3, [r5, #0]
 8021d1c:	f7e0 fc93 	bl	8002646 <_close>
 8021d20:	1c43      	adds	r3, r0, #1
 8021d22:	d102      	bne.n	8021d2a <_close_r+0x1a>
 8021d24:	682b      	ldr	r3, [r5, #0]
 8021d26:	b103      	cbz	r3, 8021d2a <_close_r+0x1a>
 8021d28:	6023      	str	r3, [r4, #0]
 8021d2a:	bd38      	pop	{r3, r4, r5, pc}
 8021d2c:	2001b9ac 	.word	0x2001b9ac

08021d30 <__errno>:
 8021d30:	4b01      	ldr	r3, [pc, #4]	; (8021d38 <__errno+0x8>)
 8021d32:	6818      	ldr	r0, [r3, #0]
 8021d34:	4770      	bx	lr
 8021d36:	bf00      	nop
 8021d38:	20000750 	.word	0x20000750

08021d3c <__sflush_r>:
 8021d3c:	898a      	ldrh	r2, [r1, #12]
 8021d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021d42:	4605      	mov	r5, r0
 8021d44:	0710      	lsls	r0, r2, #28
 8021d46:	460c      	mov	r4, r1
 8021d48:	d458      	bmi.n	8021dfc <__sflush_r+0xc0>
 8021d4a:	684b      	ldr	r3, [r1, #4]
 8021d4c:	2b00      	cmp	r3, #0
 8021d4e:	dc05      	bgt.n	8021d5c <__sflush_r+0x20>
 8021d50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8021d52:	2b00      	cmp	r3, #0
 8021d54:	dc02      	bgt.n	8021d5c <__sflush_r+0x20>
 8021d56:	2000      	movs	r0, #0
 8021d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021d5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021d5e:	2e00      	cmp	r6, #0
 8021d60:	d0f9      	beq.n	8021d56 <__sflush_r+0x1a>
 8021d62:	2300      	movs	r3, #0
 8021d64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8021d68:	682f      	ldr	r7, [r5, #0]
 8021d6a:	602b      	str	r3, [r5, #0]
 8021d6c:	d032      	beq.n	8021dd4 <__sflush_r+0x98>
 8021d6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8021d70:	89a3      	ldrh	r3, [r4, #12]
 8021d72:	075a      	lsls	r2, r3, #29
 8021d74:	d505      	bpl.n	8021d82 <__sflush_r+0x46>
 8021d76:	6863      	ldr	r3, [r4, #4]
 8021d78:	1ac0      	subs	r0, r0, r3
 8021d7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021d7c:	b10b      	cbz	r3, 8021d82 <__sflush_r+0x46>
 8021d7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021d80:	1ac0      	subs	r0, r0, r3
 8021d82:	2300      	movs	r3, #0
 8021d84:	4602      	mov	r2, r0
 8021d86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021d88:	6a21      	ldr	r1, [r4, #32]
 8021d8a:	4628      	mov	r0, r5
 8021d8c:	47b0      	blx	r6
 8021d8e:	1c43      	adds	r3, r0, #1
 8021d90:	89a3      	ldrh	r3, [r4, #12]
 8021d92:	d106      	bne.n	8021da2 <__sflush_r+0x66>
 8021d94:	6829      	ldr	r1, [r5, #0]
 8021d96:	291d      	cmp	r1, #29
 8021d98:	d82c      	bhi.n	8021df4 <__sflush_r+0xb8>
 8021d9a:	4a2a      	ldr	r2, [pc, #168]	; (8021e44 <__sflush_r+0x108>)
 8021d9c:	40ca      	lsrs	r2, r1
 8021d9e:	07d6      	lsls	r6, r2, #31
 8021da0:	d528      	bpl.n	8021df4 <__sflush_r+0xb8>
 8021da2:	2200      	movs	r2, #0
 8021da4:	6062      	str	r2, [r4, #4]
 8021da6:	04d9      	lsls	r1, r3, #19
 8021da8:	6922      	ldr	r2, [r4, #16]
 8021daa:	6022      	str	r2, [r4, #0]
 8021dac:	d504      	bpl.n	8021db8 <__sflush_r+0x7c>
 8021dae:	1c42      	adds	r2, r0, #1
 8021db0:	d101      	bne.n	8021db6 <__sflush_r+0x7a>
 8021db2:	682b      	ldr	r3, [r5, #0]
 8021db4:	b903      	cbnz	r3, 8021db8 <__sflush_r+0x7c>
 8021db6:	6560      	str	r0, [r4, #84]	; 0x54
 8021db8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021dba:	602f      	str	r7, [r5, #0]
 8021dbc:	2900      	cmp	r1, #0
 8021dbe:	d0ca      	beq.n	8021d56 <__sflush_r+0x1a>
 8021dc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021dc4:	4299      	cmp	r1, r3
 8021dc6:	d002      	beq.n	8021dce <__sflush_r+0x92>
 8021dc8:	4628      	mov	r0, r5
 8021dca:	f7ff fb01 	bl	80213d0 <_free_r>
 8021dce:	2000      	movs	r0, #0
 8021dd0:	6360      	str	r0, [r4, #52]	; 0x34
 8021dd2:	e7c1      	b.n	8021d58 <__sflush_r+0x1c>
 8021dd4:	6a21      	ldr	r1, [r4, #32]
 8021dd6:	2301      	movs	r3, #1
 8021dd8:	4628      	mov	r0, r5
 8021dda:	47b0      	blx	r6
 8021ddc:	1c41      	adds	r1, r0, #1
 8021dde:	d1c7      	bne.n	8021d70 <__sflush_r+0x34>
 8021de0:	682b      	ldr	r3, [r5, #0]
 8021de2:	2b00      	cmp	r3, #0
 8021de4:	d0c4      	beq.n	8021d70 <__sflush_r+0x34>
 8021de6:	2b1d      	cmp	r3, #29
 8021de8:	d001      	beq.n	8021dee <__sflush_r+0xb2>
 8021dea:	2b16      	cmp	r3, #22
 8021dec:	d101      	bne.n	8021df2 <__sflush_r+0xb6>
 8021dee:	602f      	str	r7, [r5, #0]
 8021df0:	e7b1      	b.n	8021d56 <__sflush_r+0x1a>
 8021df2:	89a3      	ldrh	r3, [r4, #12]
 8021df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021df8:	81a3      	strh	r3, [r4, #12]
 8021dfa:	e7ad      	b.n	8021d58 <__sflush_r+0x1c>
 8021dfc:	690f      	ldr	r7, [r1, #16]
 8021dfe:	2f00      	cmp	r7, #0
 8021e00:	d0a9      	beq.n	8021d56 <__sflush_r+0x1a>
 8021e02:	0793      	lsls	r3, r2, #30
 8021e04:	680e      	ldr	r6, [r1, #0]
 8021e06:	bf08      	it	eq
 8021e08:	694b      	ldreq	r3, [r1, #20]
 8021e0a:	600f      	str	r7, [r1, #0]
 8021e0c:	bf18      	it	ne
 8021e0e:	2300      	movne	r3, #0
 8021e10:	eba6 0807 	sub.w	r8, r6, r7
 8021e14:	608b      	str	r3, [r1, #8]
 8021e16:	f1b8 0f00 	cmp.w	r8, #0
 8021e1a:	dd9c      	ble.n	8021d56 <__sflush_r+0x1a>
 8021e1c:	6a21      	ldr	r1, [r4, #32]
 8021e1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8021e20:	4643      	mov	r3, r8
 8021e22:	463a      	mov	r2, r7
 8021e24:	4628      	mov	r0, r5
 8021e26:	47b0      	blx	r6
 8021e28:	2800      	cmp	r0, #0
 8021e2a:	dc06      	bgt.n	8021e3a <__sflush_r+0xfe>
 8021e2c:	89a3      	ldrh	r3, [r4, #12]
 8021e2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021e32:	81a3      	strh	r3, [r4, #12]
 8021e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021e38:	e78e      	b.n	8021d58 <__sflush_r+0x1c>
 8021e3a:	4407      	add	r7, r0
 8021e3c:	eba8 0800 	sub.w	r8, r8, r0
 8021e40:	e7e9      	b.n	8021e16 <__sflush_r+0xda>
 8021e42:	bf00      	nop
 8021e44:	20400001 	.word	0x20400001

08021e48 <_fflush_r>:
 8021e48:	b538      	push	{r3, r4, r5, lr}
 8021e4a:	690b      	ldr	r3, [r1, #16]
 8021e4c:	4605      	mov	r5, r0
 8021e4e:	460c      	mov	r4, r1
 8021e50:	b913      	cbnz	r3, 8021e58 <_fflush_r+0x10>
 8021e52:	2500      	movs	r5, #0
 8021e54:	4628      	mov	r0, r5
 8021e56:	bd38      	pop	{r3, r4, r5, pc}
 8021e58:	b118      	cbz	r0, 8021e62 <_fflush_r+0x1a>
 8021e5a:	6983      	ldr	r3, [r0, #24]
 8021e5c:	b90b      	cbnz	r3, 8021e62 <_fflush_r+0x1a>
 8021e5e:	f7ff f9a3 	bl	80211a8 <__sinit>
 8021e62:	4b14      	ldr	r3, [pc, #80]	; (8021eb4 <_fflush_r+0x6c>)
 8021e64:	429c      	cmp	r4, r3
 8021e66:	d11b      	bne.n	8021ea0 <_fflush_r+0x58>
 8021e68:	686c      	ldr	r4, [r5, #4]
 8021e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021e6e:	2b00      	cmp	r3, #0
 8021e70:	d0ef      	beq.n	8021e52 <_fflush_r+0xa>
 8021e72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8021e74:	07d0      	lsls	r0, r2, #31
 8021e76:	d404      	bmi.n	8021e82 <_fflush_r+0x3a>
 8021e78:	0599      	lsls	r1, r3, #22
 8021e7a:	d402      	bmi.n	8021e82 <_fflush_r+0x3a>
 8021e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021e7e:	f7ff fa56 	bl	802132e <__retarget_lock_acquire_recursive>
 8021e82:	4628      	mov	r0, r5
 8021e84:	4621      	mov	r1, r4
 8021e86:	f7ff ff59 	bl	8021d3c <__sflush_r>
 8021e8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021e8c:	07da      	lsls	r2, r3, #31
 8021e8e:	4605      	mov	r5, r0
 8021e90:	d4e0      	bmi.n	8021e54 <_fflush_r+0xc>
 8021e92:	89a3      	ldrh	r3, [r4, #12]
 8021e94:	059b      	lsls	r3, r3, #22
 8021e96:	d4dd      	bmi.n	8021e54 <_fflush_r+0xc>
 8021e98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021e9a:	f7ff fa49 	bl	8021330 <__retarget_lock_release_recursive>
 8021e9e:	e7d9      	b.n	8021e54 <_fflush_r+0xc>
 8021ea0:	4b05      	ldr	r3, [pc, #20]	; (8021eb8 <_fflush_r+0x70>)
 8021ea2:	429c      	cmp	r4, r3
 8021ea4:	d101      	bne.n	8021eaa <_fflush_r+0x62>
 8021ea6:	68ac      	ldr	r4, [r5, #8]
 8021ea8:	e7df      	b.n	8021e6a <_fflush_r+0x22>
 8021eaa:	4b04      	ldr	r3, [pc, #16]	; (8021ebc <_fflush_r+0x74>)
 8021eac:	429c      	cmp	r4, r3
 8021eae:	bf08      	it	eq
 8021eb0:	68ec      	ldreq	r4, [r5, #12]
 8021eb2:	e7da      	b.n	8021e6a <_fflush_r+0x22>
 8021eb4:	0802b0c8 	.word	0x0802b0c8
 8021eb8:	0802b0e8 	.word	0x0802b0e8
 8021ebc:	0802b0a8 	.word	0x0802b0a8

08021ec0 <fiprintf>:
 8021ec0:	b40e      	push	{r1, r2, r3}
 8021ec2:	b503      	push	{r0, r1, lr}
 8021ec4:	4601      	mov	r1, r0
 8021ec6:	ab03      	add	r3, sp, #12
 8021ec8:	4805      	ldr	r0, [pc, #20]	; (8021ee0 <fiprintf+0x20>)
 8021eca:	f853 2b04 	ldr.w	r2, [r3], #4
 8021ece:	6800      	ldr	r0, [r0, #0]
 8021ed0:	9301      	str	r3, [sp, #4]
 8021ed2:	f000 fc07 	bl	80226e4 <_vfiprintf_r>
 8021ed6:	b002      	add	sp, #8
 8021ed8:	f85d eb04 	ldr.w	lr, [sp], #4
 8021edc:	b003      	add	sp, #12
 8021ede:	4770      	bx	lr
 8021ee0:	20000750 	.word	0x20000750

08021ee4 <_lseek_r>:
 8021ee4:	b538      	push	{r3, r4, r5, lr}
 8021ee6:	4d07      	ldr	r5, [pc, #28]	; (8021f04 <_lseek_r+0x20>)
 8021ee8:	4604      	mov	r4, r0
 8021eea:	4608      	mov	r0, r1
 8021eec:	4611      	mov	r1, r2
 8021eee:	2200      	movs	r2, #0
 8021ef0:	602a      	str	r2, [r5, #0]
 8021ef2:	461a      	mov	r2, r3
 8021ef4:	f7e0 fbce 	bl	8002694 <_lseek>
 8021ef8:	1c43      	adds	r3, r0, #1
 8021efa:	d102      	bne.n	8021f02 <_lseek_r+0x1e>
 8021efc:	682b      	ldr	r3, [r5, #0]
 8021efe:	b103      	cbz	r3, 8021f02 <_lseek_r+0x1e>
 8021f00:	6023      	str	r3, [r4, #0]
 8021f02:	bd38      	pop	{r3, r4, r5, pc}
 8021f04:	2001b9ac 	.word	0x2001b9ac

08021f08 <__swhatbuf_r>:
 8021f08:	b570      	push	{r4, r5, r6, lr}
 8021f0a:	460e      	mov	r6, r1
 8021f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021f10:	2900      	cmp	r1, #0
 8021f12:	b096      	sub	sp, #88	; 0x58
 8021f14:	4614      	mov	r4, r2
 8021f16:	461d      	mov	r5, r3
 8021f18:	da07      	bge.n	8021f2a <__swhatbuf_r+0x22>
 8021f1a:	2300      	movs	r3, #0
 8021f1c:	602b      	str	r3, [r5, #0]
 8021f1e:	89b3      	ldrh	r3, [r6, #12]
 8021f20:	061a      	lsls	r2, r3, #24
 8021f22:	d410      	bmi.n	8021f46 <__swhatbuf_r+0x3e>
 8021f24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021f28:	e00e      	b.n	8021f48 <__swhatbuf_r+0x40>
 8021f2a:	466a      	mov	r2, sp
 8021f2c:	f001 f8f6 	bl	802311c <_fstat_r>
 8021f30:	2800      	cmp	r0, #0
 8021f32:	dbf2      	blt.n	8021f1a <__swhatbuf_r+0x12>
 8021f34:	9a01      	ldr	r2, [sp, #4]
 8021f36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8021f3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8021f3e:	425a      	negs	r2, r3
 8021f40:	415a      	adcs	r2, r3
 8021f42:	602a      	str	r2, [r5, #0]
 8021f44:	e7ee      	b.n	8021f24 <__swhatbuf_r+0x1c>
 8021f46:	2340      	movs	r3, #64	; 0x40
 8021f48:	2000      	movs	r0, #0
 8021f4a:	6023      	str	r3, [r4, #0]
 8021f4c:	b016      	add	sp, #88	; 0x58
 8021f4e:	bd70      	pop	{r4, r5, r6, pc}

08021f50 <__smakebuf_r>:
 8021f50:	898b      	ldrh	r3, [r1, #12]
 8021f52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021f54:	079d      	lsls	r5, r3, #30
 8021f56:	4606      	mov	r6, r0
 8021f58:	460c      	mov	r4, r1
 8021f5a:	d507      	bpl.n	8021f6c <__smakebuf_r+0x1c>
 8021f5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8021f60:	6023      	str	r3, [r4, #0]
 8021f62:	6123      	str	r3, [r4, #16]
 8021f64:	2301      	movs	r3, #1
 8021f66:	6163      	str	r3, [r4, #20]
 8021f68:	b002      	add	sp, #8
 8021f6a:	bd70      	pop	{r4, r5, r6, pc}
 8021f6c:	ab01      	add	r3, sp, #4
 8021f6e:	466a      	mov	r2, sp
 8021f70:	f7ff ffca 	bl	8021f08 <__swhatbuf_r>
 8021f74:	9900      	ldr	r1, [sp, #0]
 8021f76:	4605      	mov	r5, r0
 8021f78:	4630      	mov	r0, r6
 8021f7a:	f7ff fa79 	bl	8021470 <_malloc_r>
 8021f7e:	b948      	cbnz	r0, 8021f94 <__smakebuf_r+0x44>
 8021f80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021f84:	059a      	lsls	r2, r3, #22
 8021f86:	d4ef      	bmi.n	8021f68 <__smakebuf_r+0x18>
 8021f88:	f023 0303 	bic.w	r3, r3, #3
 8021f8c:	f043 0302 	orr.w	r3, r3, #2
 8021f90:	81a3      	strh	r3, [r4, #12]
 8021f92:	e7e3      	b.n	8021f5c <__smakebuf_r+0xc>
 8021f94:	4b0d      	ldr	r3, [pc, #52]	; (8021fcc <__smakebuf_r+0x7c>)
 8021f96:	62b3      	str	r3, [r6, #40]	; 0x28
 8021f98:	89a3      	ldrh	r3, [r4, #12]
 8021f9a:	6020      	str	r0, [r4, #0]
 8021f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021fa0:	81a3      	strh	r3, [r4, #12]
 8021fa2:	9b00      	ldr	r3, [sp, #0]
 8021fa4:	6163      	str	r3, [r4, #20]
 8021fa6:	9b01      	ldr	r3, [sp, #4]
 8021fa8:	6120      	str	r0, [r4, #16]
 8021faa:	b15b      	cbz	r3, 8021fc4 <__smakebuf_r+0x74>
 8021fac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021fb0:	4630      	mov	r0, r6
 8021fb2:	f001 f8c5 	bl	8023140 <_isatty_r>
 8021fb6:	b128      	cbz	r0, 8021fc4 <__smakebuf_r+0x74>
 8021fb8:	89a3      	ldrh	r3, [r4, #12]
 8021fba:	f023 0303 	bic.w	r3, r3, #3
 8021fbe:	f043 0301 	orr.w	r3, r3, #1
 8021fc2:	81a3      	strh	r3, [r4, #12]
 8021fc4:	89a0      	ldrh	r0, [r4, #12]
 8021fc6:	4305      	orrs	r5, r0
 8021fc8:	81a5      	strh	r5, [r4, #12]
 8021fca:	e7cd      	b.n	8021f68 <__smakebuf_r+0x18>
 8021fcc:	08021141 	.word	0x08021141

08021fd0 <__malloc_lock>:
 8021fd0:	4801      	ldr	r0, [pc, #4]	; (8021fd8 <__malloc_lock+0x8>)
 8021fd2:	f7ff b9ac 	b.w	802132e <__retarget_lock_acquire_recursive>
 8021fd6:	bf00      	nop
 8021fd8:	2001c0a0 	.word	0x2001c0a0

08021fdc <__malloc_unlock>:
 8021fdc:	4801      	ldr	r0, [pc, #4]	; (8021fe4 <__malloc_unlock+0x8>)
 8021fde:	f7ff b9a7 	b.w	8021330 <__retarget_lock_release_recursive>
 8021fe2:	bf00      	nop
 8021fe4:	2001c0a0 	.word	0x2001c0a0

08021fe8 <_realloc_r>:
 8021fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021fea:	4607      	mov	r7, r0
 8021fec:	4614      	mov	r4, r2
 8021fee:	460e      	mov	r6, r1
 8021ff0:	b921      	cbnz	r1, 8021ffc <_realloc_r+0x14>
 8021ff2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8021ff6:	4611      	mov	r1, r2
 8021ff8:	f7ff ba3a 	b.w	8021470 <_malloc_r>
 8021ffc:	b922      	cbnz	r2, 8022008 <_realloc_r+0x20>
 8021ffe:	f7ff f9e7 	bl	80213d0 <_free_r>
 8022002:	4625      	mov	r5, r4
 8022004:	4628      	mov	r0, r5
 8022006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022008:	f001 f8aa 	bl	8023160 <_malloc_usable_size_r>
 802200c:	42a0      	cmp	r0, r4
 802200e:	d20f      	bcs.n	8022030 <_realloc_r+0x48>
 8022010:	4621      	mov	r1, r4
 8022012:	4638      	mov	r0, r7
 8022014:	f7ff fa2c 	bl	8021470 <_malloc_r>
 8022018:	4605      	mov	r5, r0
 802201a:	2800      	cmp	r0, #0
 802201c:	d0f2      	beq.n	8022004 <_realloc_r+0x1c>
 802201e:	4631      	mov	r1, r6
 8022020:	4622      	mov	r2, r4
 8022022:	f7ff f9a5 	bl	8021370 <memcpy>
 8022026:	4631      	mov	r1, r6
 8022028:	4638      	mov	r0, r7
 802202a:	f7ff f9d1 	bl	80213d0 <_free_r>
 802202e:	e7e9      	b.n	8022004 <_realloc_r+0x1c>
 8022030:	4635      	mov	r5, r6
 8022032:	e7e7      	b.n	8022004 <_realloc_r+0x1c>

08022034 <__ssputs_r>:
 8022034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022038:	688e      	ldr	r6, [r1, #8]
 802203a:	429e      	cmp	r6, r3
 802203c:	4682      	mov	sl, r0
 802203e:	460c      	mov	r4, r1
 8022040:	4690      	mov	r8, r2
 8022042:	461f      	mov	r7, r3
 8022044:	d838      	bhi.n	80220b8 <__ssputs_r+0x84>
 8022046:	898a      	ldrh	r2, [r1, #12]
 8022048:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802204c:	d032      	beq.n	80220b4 <__ssputs_r+0x80>
 802204e:	6825      	ldr	r5, [r4, #0]
 8022050:	6909      	ldr	r1, [r1, #16]
 8022052:	eba5 0901 	sub.w	r9, r5, r1
 8022056:	6965      	ldr	r5, [r4, #20]
 8022058:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802205c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022060:	3301      	adds	r3, #1
 8022062:	444b      	add	r3, r9
 8022064:	106d      	asrs	r5, r5, #1
 8022066:	429d      	cmp	r5, r3
 8022068:	bf38      	it	cc
 802206a:	461d      	movcc	r5, r3
 802206c:	0553      	lsls	r3, r2, #21
 802206e:	d531      	bpl.n	80220d4 <__ssputs_r+0xa0>
 8022070:	4629      	mov	r1, r5
 8022072:	f7ff f9fd 	bl	8021470 <_malloc_r>
 8022076:	4606      	mov	r6, r0
 8022078:	b950      	cbnz	r0, 8022090 <__ssputs_r+0x5c>
 802207a:	230c      	movs	r3, #12
 802207c:	f8ca 3000 	str.w	r3, [sl]
 8022080:	89a3      	ldrh	r3, [r4, #12]
 8022082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022086:	81a3      	strh	r3, [r4, #12]
 8022088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802208c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022090:	6921      	ldr	r1, [r4, #16]
 8022092:	464a      	mov	r2, r9
 8022094:	f7ff f96c 	bl	8021370 <memcpy>
 8022098:	89a3      	ldrh	r3, [r4, #12]
 802209a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802209e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80220a2:	81a3      	strh	r3, [r4, #12]
 80220a4:	6126      	str	r6, [r4, #16]
 80220a6:	6165      	str	r5, [r4, #20]
 80220a8:	444e      	add	r6, r9
 80220aa:	eba5 0509 	sub.w	r5, r5, r9
 80220ae:	6026      	str	r6, [r4, #0]
 80220b0:	60a5      	str	r5, [r4, #8]
 80220b2:	463e      	mov	r6, r7
 80220b4:	42be      	cmp	r6, r7
 80220b6:	d900      	bls.n	80220ba <__ssputs_r+0x86>
 80220b8:	463e      	mov	r6, r7
 80220ba:	4632      	mov	r2, r6
 80220bc:	6820      	ldr	r0, [r4, #0]
 80220be:	4641      	mov	r1, r8
 80220c0:	f7ff f964 	bl	802138c <memmove>
 80220c4:	68a3      	ldr	r3, [r4, #8]
 80220c6:	6822      	ldr	r2, [r4, #0]
 80220c8:	1b9b      	subs	r3, r3, r6
 80220ca:	4432      	add	r2, r6
 80220cc:	60a3      	str	r3, [r4, #8]
 80220ce:	6022      	str	r2, [r4, #0]
 80220d0:	2000      	movs	r0, #0
 80220d2:	e7db      	b.n	802208c <__ssputs_r+0x58>
 80220d4:	462a      	mov	r2, r5
 80220d6:	f7ff ff87 	bl	8021fe8 <_realloc_r>
 80220da:	4606      	mov	r6, r0
 80220dc:	2800      	cmp	r0, #0
 80220de:	d1e1      	bne.n	80220a4 <__ssputs_r+0x70>
 80220e0:	6921      	ldr	r1, [r4, #16]
 80220e2:	4650      	mov	r0, sl
 80220e4:	f7ff f974 	bl	80213d0 <_free_r>
 80220e8:	e7c7      	b.n	802207a <__ssputs_r+0x46>
	...

080220ec <_svfiprintf_r>:
 80220ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220f0:	4698      	mov	r8, r3
 80220f2:	898b      	ldrh	r3, [r1, #12]
 80220f4:	061b      	lsls	r3, r3, #24
 80220f6:	b09d      	sub	sp, #116	; 0x74
 80220f8:	4607      	mov	r7, r0
 80220fa:	460d      	mov	r5, r1
 80220fc:	4614      	mov	r4, r2
 80220fe:	d50e      	bpl.n	802211e <_svfiprintf_r+0x32>
 8022100:	690b      	ldr	r3, [r1, #16]
 8022102:	b963      	cbnz	r3, 802211e <_svfiprintf_r+0x32>
 8022104:	2140      	movs	r1, #64	; 0x40
 8022106:	f7ff f9b3 	bl	8021470 <_malloc_r>
 802210a:	6028      	str	r0, [r5, #0]
 802210c:	6128      	str	r0, [r5, #16]
 802210e:	b920      	cbnz	r0, 802211a <_svfiprintf_r+0x2e>
 8022110:	230c      	movs	r3, #12
 8022112:	603b      	str	r3, [r7, #0]
 8022114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022118:	e0d1      	b.n	80222be <_svfiprintf_r+0x1d2>
 802211a:	2340      	movs	r3, #64	; 0x40
 802211c:	616b      	str	r3, [r5, #20]
 802211e:	2300      	movs	r3, #0
 8022120:	9309      	str	r3, [sp, #36]	; 0x24
 8022122:	2320      	movs	r3, #32
 8022124:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022128:	f8cd 800c 	str.w	r8, [sp, #12]
 802212c:	2330      	movs	r3, #48	; 0x30
 802212e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80222d8 <_svfiprintf_r+0x1ec>
 8022132:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022136:	f04f 0901 	mov.w	r9, #1
 802213a:	4623      	mov	r3, r4
 802213c:	469a      	mov	sl, r3
 802213e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022142:	b10a      	cbz	r2, 8022148 <_svfiprintf_r+0x5c>
 8022144:	2a25      	cmp	r2, #37	; 0x25
 8022146:	d1f9      	bne.n	802213c <_svfiprintf_r+0x50>
 8022148:	ebba 0b04 	subs.w	fp, sl, r4
 802214c:	d00b      	beq.n	8022166 <_svfiprintf_r+0x7a>
 802214e:	465b      	mov	r3, fp
 8022150:	4622      	mov	r2, r4
 8022152:	4629      	mov	r1, r5
 8022154:	4638      	mov	r0, r7
 8022156:	f7ff ff6d 	bl	8022034 <__ssputs_r>
 802215a:	3001      	adds	r0, #1
 802215c:	f000 80aa 	beq.w	80222b4 <_svfiprintf_r+0x1c8>
 8022160:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022162:	445a      	add	r2, fp
 8022164:	9209      	str	r2, [sp, #36]	; 0x24
 8022166:	f89a 3000 	ldrb.w	r3, [sl]
 802216a:	2b00      	cmp	r3, #0
 802216c:	f000 80a2 	beq.w	80222b4 <_svfiprintf_r+0x1c8>
 8022170:	2300      	movs	r3, #0
 8022172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022176:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802217a:	f10a 0a01 	add.w	sl, sl, #1
 802217e:	9304      	str	r3, [sp, #16]
 8022180:	9307      	str	r3, [sp, #28]
 8022182:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022186:	931a      	str	r3, [sp, #104]	; 0x68
 8022188:	4654      	mov	r4, sl
 802218a:	2205      	movs	r2, #5
 802218c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022190:	4851      	ldr	r0, [pc, #324]	; (80222d8 <_svfiprintf_r+0x1ec>)
 8022192:	f7de f86d 	bl	8000270 <memchr>
 8022196:	9a04      	ldr	r2, [sp, #16]
 8022198:	b9d8      	cbnz	r0, 80221d2 <_svfiprintf_r+0xe6>
 802219a:	06d0      	lsls	r0, r2, #27
 802219c:	bf44      	itt	mi
 802219e:	2320      	movmi	r3, #32
 80221a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80221a4:	0711      	lsls	r1, r2, #28
 80221a6:	bf44      	itt	mi
 80221a8:	232b      	movmi	r3, #43	; 0x2b
 80221aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80221ae:	f89a 3000 	ldrb.w	r3, [sl]
 80221b2:	2b2a      	cmp	r3, #42	; 0x2a
 80221b4:	d015      	beq.n	80221e2 <_svfiprintf_r+0xf6>
 80221b6:	9a07      	ldr	r2, [sp, #28]
 80221b8:	4654      	mov	r4, sl
 80221ba:	2000      	movs	r0, #0
 80221bc:	f04f 0c0a 	mov.w	ip, #10
 80221c0:	4621      	mov	r1, r4
 80221c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80221c6:	3b30      	subs	r3, #48	; 0x30
 80221c8:	2b09      	cmp	r3, #9
 80221ca:	d94e      	bls.n	802226a <_svfiprintf_r+0x17e>
 80221cc:	b1b0      	cbz	r0, 80221fc <_svfiprintf_r+0x110>
 80221ce:	9207      	str	r2, [sp, #28]
 80221d0:	e014      	b.n	80221fc <_svfiprintf_r+0x110>
 80221d2:	eba0 0308 	sub.w	r3, r0, r8
 80221d6:	fa09 f303 	lsl.w	r3, r9, r3
 80221da:	4313      	orrs	r3, r2
 80221dc:	9304      	str	r3, [sp, #16]
 80221de:	46a2      	mov	sl, r4
 80221e0:	e7d2      	b.n	8022188 <_svfiprintf_r+0x9c>
 80221e2:	9b03      	ldr	r3, [sp, #12]
 80221e4:	1d19      	adds	r1, r3, #4
 80221e6:	681b      	ldr	r3, [r3, #0]
 80221e8:	9103      	str	r1, [sp, #12]
 80221ea:	2b00      	cmp	r3, #0
 80221ec:	bfbb      	ittet	lt
 80221ee:	425b      	neglt	r3, r3
 80221f0:	f042 0202 	orrlt.w	r2, r2, #2
 80221f4:	9307      	strge	r3, [sp, #28]
 80221f6:	9307      	strlt	r3, [sp, #28]
 80221f8:	bfb8      	it	lt
 80221fa:	9204      	strlt	r2, [sp, #16]
 80221fc:	7823      	ldrb	r3, [r4, #0]
 80221fe:	2b2e      	cmp	r3, #46	; 0x2e
 8022200:	d10c      	bne.n	802221c <_svfiprintf_r+0x130>
 8022202:	7863      	ldrb	r3, [r4, #1]
 8022204:	2b2a      	cmp	r3, #42	; 0x2a
 8022206:	d135      	bne.n	8022274 <_svfiprintf_r+0x188>
 8022208:	9b03      	ldr	r3, [sp, #12]
 802220a:	1d1a      	adds	r2, r3, #4
 802220c:	681b      	ldr	r3, [r3, #0]
 802220e:	9203      	str	r2, [sp, #12]
 8022210:	2b00      	cmp	r3, #0
 8022212:	bfb8      	it	lt
 8022214:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8022218:	3402      	adds	r4, #2
 802221a:	9305      	str	r3, [sp, #20]
 802221c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80222e8 <_svfiprintf_r+0x1fc>
 8022220:	7821      	ldrb	r1, [r4, #0]
 8022222:	2203      	movs	r2, #3
 8022224:	4650      	mov	r0, sl
 8022226:	f7de f823 	bl	8000270 <memchr>
 802222a:	b140      	cbz	r0, 802223e <_svfiprintf_r+0x152>
 802222c:	2340      	movs	r3, #64	; 0x40
 802222e:	eba0 000a 	sub.w	r0, r0, sl
 8022232:	fa03 f000 	lsl.w	r0, r3, r0
 8022236:	9b04      	ldr	r3, [sp, #16]
 8022238:	4303      	orrs	r3, r0
 802223a:	3401      	adds	r4, #1
 802223c:	9304      	str	r3, [sp, #16]
 802223e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022242:	4826      	ldr	r0, [pc, #152]	; (80222dc <_svfiprintf_r+0x1f0>)
 8022244:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022248:	2206      	movs	r2, #6
 802224a:	f7de f811 	bl	8000270 <memchr>
 802224e:	2800      	cmp	r0, #0
 8022250:	d038      	beq.n	80222c4 <_svfiprintf_r+0x1d8>
 8022252:	4b23      	ldr	r3, [pc, #140]	; (80222e0 <_svfiprintf_r+0x1f4>)
 8022254:	bb1b      	cbnz	r3, 802229e <_svfiprintf_r+0x1b2>
 8022256:	9b03      	ldr	r3, [sp, #12]
 8022258:	3307      	adds	r3, #7
 802225a:	f023 0307 	bic.w	r3, r3, #7
 802225e:	3308      	adds	r3, #8
 8022260:	9303      	str	r3, [sp, #12]
 8022262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022264:	4433      	add	r3, r6
 8022266:	9309      	str	r3, [sp, #36]	; 0x24
 8022268:	e767      	b.n	802213a <_svfiprintf_r+0x4e>
 802226a:	fb0c 3202 	mla	r2, ip, r2, r3
 802226e:	460c      	mov	r4, r1
 8022270:	2001      	movs	r0, #1
 8022272:	e7a5      	b.n	80221c0 <_svfiprintf_r+0xd4>
 8022274:	2300      	movs	r3, #0
 8022276:	3401      	adds	r4, #1
 8022278:	9305      	str	r3, [sp, #20]
 802227a:	4619      	mov	r1, r3
 802227c:	f04f 0c0a 	mov.w	ip, #10
 8022280:	4620      	mov	r0, r4
 8022282:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022286:	3a30      	subs	r2, #48	; 0x30
 8022288:	2a09      	cmp	r2, #9
 802228a:	d903      	bls.n	8022294 <_svfiprintf_r+0x1a8>
 802228c:	2b00      	cmp	r3, #0
 802228e:	d0c5      	beq.n	802221c <_svfiprintf_r+0x130>
 8022290:	9105      	str	r1, [sp, #20]
 8022292:	e7c3      	b.n	802221c <_svfiprintf_r+0x130>
 8022294:	fb0c 2101 	mla	r1, ip, r1, r2
 8022298:	4604      	mov	r4, r0
 802229a:	2301      	movs	r3, #1
 802229c:	e7f0      	b.n	8022280 <_svfiprintf_r+0x194>
 802229e:	ab03      	add	r3, sp, #12
 80222a0:	9300      	str	r3, [sp, #0]
 80222a2:	462a      	mov	r2, r5
 80222a4:	4b0f      	ldr	r3, [pc, #60]	; (80222e4 <_svfiprintf_r+0x1f8>)
 80222a6:	a904      	add	r1, sp, #16
 80222a8:	4638      	mov	r0, r7
 80222aa:	f3af 8000 	nop.w
 80222ae:	1c42      	adds	r2, r0, #1
 80222b0:	4606      	mov	r6, r0
 80222b2:	d1d6      	bne.n	8022262 <_svfiprintf_r+0x176>
 80222b4:	89ab      	ldrh	r3, [r5, #12]
 80222b6:	065b      	lsls	r3, r3, #25
 80222b8:	f53f af2c 	bmi.w	8022114 <_svfiprintf_r+0x28>
 80222bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80222be:	b01d      	add	sp, #116	; 0x74
 80222c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80222c4:	ab03      	add	r3, sp, #12
 80222c6:	9300      	str	r3, [sp, #0]
 80222c8:	462a      	mov	r2, r5
 80222ca:	4b06      	ldr	r3, [pc, #24]	; (80222e4 <_svfiprintf_r+0x1f8>)
 80222cc:	a904      	add	r1, sp, #16
 80222ce:	4638      	mov	r0, r7
 80222d0:	f000 fba6 	bl	8022a20 <_printf_i>
 80222d4:	e7eb      	b.n	80222ae <_svfiprintf_r+0x1c2>
 80222d6:	bf00      	nop
 80222d8:	0802b1be 	.word	0x0802b1be
 80222dc:	0802b1c8 	.word	0x0802b1c8
 80222e0:	00000000 	.word	0x00000000
 80222e4:	08022035 	.word	0x08022035
 80222e8:	0802b1c4 	.word	0x0802b1c4

080222ec <_sungetc_r>:
 80222ec:	b538      	push	{r3, r4, r5, lr}
 80222ee:	1c4b      	adds	r3, r1, #1
 80222f0:	4614      	mov	r4, r2
 80222f2:	d103      	bne.n	80222fc <_sungetc_r+0x10>
 80222f4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80222f8:	4628      	mov	r0, r5
 80222fa:	bd38      	pop	{r3, r4, r5, pc}
 80222fc:	8993      	ldrh	r3, [r2, #12]
 80222fe:	f023 0320 	bic.w	r3, r3, #32
 8022302:	8193      	strh	r3, [r2, #12]
 8022304:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022306:	6852      	ldr	r2, [r2, #4]
 8022308:	b2cd      	uxtb	r5, r1
 802230a:	b18b      	cbz	r3, 8022330 <_sungetc_r+0x44>
 802230c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802230e:	4293      	cmp	r3, r2
 8022310:	dd08      	ble.n	8022324 <_sungetc_r+0x38>
 8022312:	6823      	ldr	r3, [r4, #0]
 8022314:	1e5a      	subs	r2, r3, #1
 8022316:	6022      	str	r2, [r4, #0]
 8022318:	f803 5c01 	strb.w	r5, [r3, #-1]
 802231c:	6863      	ldr	r3, [r4, #4]
 802231e:	3301      	adds	r3, #1
 8022320:	6063      	str	r3, [r4, #4]
 8022322:	e7e9      	b.n	80222f8 <_sungetc_r+0xc>
 8022324:	4621      	mov	r1, r4
 8022326:	f000 feb7 	bl	8023098 <__submore>
 802232a:	2800      	cmp	r0, #0
 802232c:	d0f1      	beq.n	8022312 <_sungetc_r+0x26>
 802232e:	e7e1      	b.n	80222f4 <_sungetc_r+0x8>
 8022330:	6921      	ldr	r1, [r4, #16]
 8022332:	6823      	ldr	r3, [r4, #0]
 8022334:	b151      	cbz	r1, 802234c <_sungetc_r+0x60>
 8022336:	4299      	cmp	r1, r3
 8022338:	d208      	bcs.n	802234c <_sungetc_r+0x60>
 802233a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802233e:	42a9      	cmp	r1, r5
 8022340:	d104      	bne.n	802234c <_sungetc_r+0x60>
 8022342:	3b01      	subs	r3, #1
 8022344:	3201      	adds	r2, #1
 8022346:	6023      	str	r3, [r4, #0]
 8022348:	6062      	str	r2, [r4, #4]
 802234a:	e7d5      	b.n	80222f8 <_sungetc_r+0xc>
 802234c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8022350:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022354:	6363      	str	r3, [r4, #52]	; 0x34
 8022356:	2303      	movs	r3, #3
 8022358:	63a3      	str	r3, [r4, #56]	; 0x38
 802235a:	4623      	mov	r3, r4
 802235c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8022360:	6023      	str	r3, [r4, #0]
 8022362:	2301      	movs	r3, #1
 8022364:	e7dc      	b.n	8022320 <_sungetc_r+0x34>

08022366 <__ssrefill_r>:
 8022366:	b510      	push	{r4, lr}
 8022368:	460c      	mov	r4, r1
 802236a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802236c:	b169      	cbz	r1, 802238a <__ssrefill_r+0x24>
 802236e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022372:	4299      	cmp	r1, r3
 8022374:	d001      	beq.n	802237a <__ssrefill_r+0x14>
 8022376:	f7ff f82b 	bl	80213d0 <_free_r>
 802237a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802237c:	6063      	str	r3, [r4, #4]
 802237e:	2000      	movs	r0, #0
 8022380:	6360      	str	r0, [r4, #52]	; 0x34
 8022382:	b113      	cbz	r3, 802238a <__ssrefill_r+0x24>
 8022384:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8022386:	6023      	str	r3, [r4, #0]
 8022388:	bd10      	pop	{r4, pc}
 802238a:	6923      	ldr	r3, [r4, #16]
 802238c:	6023      	str	r3, [r4, #0]
 802238e:	2300      	movs	r3, #0
 8022390:	6063      	str	r3, [r4, #4]
 8022392:	89a3      	ldrh	r3, [r4, #12]
 8022394:	f043 0320 	orr.w	r3, r3, #32
 8022398:	81a3      	strh	r3, [r4, #12]
 802239a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802239e:	e7f3      	b.n	8022388 <__ssrefill_r+0x22>

080223a0 <__ssvfiscanf_r>:
 80223a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223a4:	460c      	mov	r4, r1
 80223a6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80223aa:	2100      	movs	r1, #0
 80223ac:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80223b0:	49b2      	ldr	r1, [pc, #712]	; (802267c <__ssvfiscanf_r+0x2dc>)
 80223b2:	91a0      	str	r1, [sp, #640]	; 0x280
 80223b4:	f10d 0804 	add.w	r8, sp, #4
 80223b8:	49b1      	ldr	r1, [pc, #708]	; (8022680 <__ssvfiscanf_r+0x2e0>)
 80223ba:	4fb2      	ldr	r7, [pc, #712]	; (8022684 <__ssvfiscanf_r+0x2e4>)
 80223bc:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8022688 <__ssvfiscanf_r+0x2e8>
 80223c0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80223c4:	4606      	mov	r6, r0
 80223c6:	91a1      	str	r1, [sp, #644]	; 0x284
 80223c8:	9300      	str	r3, [sp, #0]
 80223ca:	f892 a000 	ldrb.w	sl, [r2]
 80223ce:	f1ba 0f00 	cmp.w	sl, #0
 80223d2:	f000 8151 	beq.w	8022678 <__ssvfiscanf_r+0x2d8>
 80223d6:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80223da:	f013 0308 	ands.w	r3, r3, #8
 80223de:	f102 0501 	add.w	r5, r2, #1
 80223e2:	d019      	beq.n	8022418 <__ssvfiscanf_r+0x78>
 80223e4:	6863      	ldr	r3, [r4, #4]
 80223e6:	2b00      	cmp	r3, #0
 80223e8:	dd0f      	ble.n	802240a <__ssvfiscanf_r+0x6a>
 80223ea:	6823      	ldr	r3, [r4, #0]
 80223ec:	781a      	ldrb	r2, [r3, #0]
 80223ee:	5cba      	ldrb	r2, [r7, r2]
 80223f0:	0712      	lsls	r2, r2, #28
 80223f2:	d401      	bmi.n	80223f8 <__ssvfiscanf_r+0x58>
 80223f4:	462a      	mov	r2, r5
 80223f6:	e7e8      	b.n	80223ca <__ssvfiscanf_r+0x2a>
 80223f8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80223fa:	3201      	adds	r2, #1
 80223fc:	9245      	str	r2, [sp, #276]	; 0x114
 80223fe:	6862      	ldr	r2, [r4, #4]
 8022400:	3301      	adds	r3, #1
 8022402:	3a01      	subs	r2, #1
 8022404:	6062      	str	r2, [r4, #4]
 8022406:	6023      	str	r3, [r4, #0]
 8022408:	e7ec      	b.n	80223e4 <__ssvfiscanf_r+0x44>
 802240a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802240c:	4621      	mov	r1, r4
 802240e:	4630      	mov	r0, r6
 8022410:	4798      	blx	r3
 8022412:	2800      	cmp	r0, #0
 8022414:	d0e9      	beq.n	80223ea <__ssvfiscanf_r+0x4a>
 8022416:	e7ed      	b.n	80223f4 <__ssvfiscanf_r+0x54>
 8022418:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 802241c:	f040 8083 	bne.w	8022526 <__ssvfiscanf_r+0x186>
 8022420:	9341      	str	r3, [sp, #260]	; 0x104
 8022422:	9343      	str	r3, [sp, #268]	; 0x10c
 8022424:	7853      	ldrb	r3, [r2, #1]
 8022426:	2b2a      	cmp	r3, #42	; 0x2a
 8022428:	bf02      	ittt	eq
 802242a:	2310      	moveq	r3, #16
 802242c:	1c95      	addeq	r5, r2, #2
 802242e:	9341      	streq	r3, [sp, #260]	; 0x104
 8022430:	220a      	movs	r2, #10
 8022432:	46ab      	mov	fp, r5
 8022434:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8022438:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 802243c:	2b09      	cmp	r3, #9
 802243e:	d91d      	bls.n	802247c <__ssvfiscanf_r+0xdc>
 8022440:	4891      	ldr	r0, [pc, #580]	; (8022688 <__ssvfiscanf_r+0x2e8>)
 8022442:	2203      	movs	r2, #3
 8022444:	f7dd ff14 	bl	8000270 <memchr>
 8022448:	b140      	cbz	r0, 802245c <__ssvfiscanf_r+0xbc>
 802244a:	2301      	movs	r3, #1
 802244c:	eba0 0009 	sub.w	r0, r0, r9
 8022450:	fa03 f000 	lsl.w	r0, r3, r0
 8022454:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8022456:	4318      	orrs	r0, r3
 8022458:	9041      	str	r0, [sp, #260]	; 0x104
 802245a:	465d      	mov	r5, fp
 802245c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8022460:	2b78      	cmp	r3, #120	; 0x78
 8022462:	d806      	bhi.n	8022472 <__ssvfiscanf_r+0xd2>
 8022464:	2b57      	cmp	r3, #87	; 0x57
 8022466:	d810      	bhi.n	802248a <__ssvfiscanf_r+0xea>
 8022468:	2b25      	cmp	r3, #37	; 0x25
 802246a:	d05c      	beq.n	8022526 <__ssvfiscanf_r+0x186>
 802246c:	d856      	bhi.n	802251c <__ssvfiscanf_r+0x17c>
 802246e:	2b00      	cmp	r3, #0
 8022470:	d074      	beq.n	802255c <__ssvfiscanf_r+0x1bc>
 8022472:	2303      	movs	r3, #3
 8022474:	9347      	str	r3, [sp, #284]	; 0x11c
 8022476:	230a      	movs	r3, #10
 8022478:	9342      	str	r3, [sp, #264]	; 0x108
 802247a:	e081      	b.n	8022580 <__ssvfiscanf_r+0x1e0>
 802247c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802247e:	fb02 1303 	mla	r3, r2, r3, r1
 8022482:	3b30      	subs	r3, #48	; 0x30
 8022484:	9343      	str	r3, [sp, #268]	; 0x10c
 8022486:	465d      	mov	r5, fp
 8022488:	e7d3      	b.n	8022432 <__ssvfiscanf_r+0x92>
 802248a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 802248e:	2a20      	cmp	r2, #32
 8022490:	d8ef      	bhi.n	8022472 <__ssvfiscanf_r+0xd2>
 8022492:	a101      	add	r1, pc, #4	; (adr r1, 8022498 <__ssvfiscanf_r+0xf8>)
 8022494:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8022498:	0802256b 	.word	0x0802256b
 802249c:	08022473 	.word	0x08022473
 80224a0:	08022473 	.word	0x08022473
 80224a4:	080225c9 	.word	0x080225c9
 80224a8:	08022473 	.word	0x08022473
 80224ac:	08022473 	.word	0x08022473
 80224b0:	08022473 	.word	0x08022473
 80224b4:	08022473 	.word	0x08022473
 80224b8:	08022473 	.word	0x08022473
 80224bc:	08022473 	.word	0x08022473
 80224c0:	08022473 	.word	0x08022473
 80224c4:	080225df 	.word	0x080225df
 80224c8:	080225b5 	.word	0x080225b5
 80224cc:	08022523 	.word	0x08022523
 80224d0:	08022523 	.word	0x08022523
 80224d4:	08022523 	.word	0x08022523
 80224d8:	08022473 	.word	0x08022473
 80224dc:	080225b9 	.word	0x080225b9
 80224e0:	08022473 	.word	0x08022473
 80224e4:	08022473 	.word	0x08022473
 80224e8:	08022473 	.word	0x08022473
 80224ec:	08022473 	.word	0x08022473
 80224f0:	080225ef 	.word	0x080225ef
 80224f4:	080225c1 	.word	0x080225c1
 80224f8:	08022563 	.word	0x08022563
 80224fc:	08022473 	.word	0x08022473
 8022500:	08022473 	.word	0x08022473
 8022504:	080225eb 	.word	0x080225eb
 8022508:	08022473 	.word	0x08022473
 802250c:	080225b5 	.word	0x080225b5
 8022510:	08022473 	.word	0x08022473
 8022514:	08022473 	.word	0x08022473
 8022518:	0802256b 	.word	0x0802256b
 802251c:	3b45      	subs	r3, #69	; 0x45
 802251e:	2b02      	cmp	r3, #2
 8022520:	d8a7      	bhi.n	8022472 <__ssvfiscanf_r+0xd2>
 8022522:	2305      	movs	r3, #5
 8022524:	e02b      	b.n	802257e <__ssvfiscanf_r+0x1de>
 8022526:	6863      	ldr	r3, [r4, #4]
 8022528:	2b00      	cmp	r3, #0
 802252a:	dd0d      	ble.n	8022548 <__ssvfiscanf_r+0x1a8>
 802252c:	6823      	ldr	r3, [r4, #0]
 802252e:	781a      	ldrb	r2, [r3, #0]
 8022530:	4552      	cmp	r2, sl
 8022532:	f040 80a1 	bne.w	8022678 <__ssvfiscanf_r+0x2d8>
 8022536:	3301      	adds	r3, #1
 8022538:	6862      	ldr	r2, [r4, #4]
 802253a:	6023      	str	r3, [r4, #0]
 802253c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 802253e:	3a01      	subs	r2, #1
 8022540:	3301      	adds	r3, #1
 8022542:	6062      	str	r2, [r4, #4]
 8022544:	9345      	str	r3, [sp, #276]	; 0x114
 8022546:	e755      	b.n	80223f4 <__ssvfiscanf_r+0x54>
 8022548:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802254a:	4621      	mov	r1, r4
 802254c:	4630      	mov	r0, r6
 802254e:	4798      	blx	r3
 8022550:	2800      	cmp	r0, #0
 8022552:	d0eb      	beq.n	802252c <__ssvfiscanf_r+0x18c>
 8022554:	9844      	ldr	r0, [sp, #272]	; 0x110
 8022556:	2800      	cmp	r0, #0
 8022558:	f040 8084 	bne.w	8022664 <__ssvfiscanf_r+0x2c4>
 802255c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022560:	e086      	b.n	8022670 <__ssvfiscanf_r+0x2d0>
 8022562:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8022564:	f042 0220 	orr.w	r2, r2, #32
 8022568:	9241      	str	r2, [sp, #260]	; 0x104
 802256a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802256c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8022570:	9241      	str	r2, [sp, #260]	; 0x104
 8022572:	2210      	movs	r2, #16
 8022574:	2b6f      	cmp	r3, #111	; 0x6f
 8022576:	9242      	str	r2, [sp, #264]	; 0x108
 8022578:	bf34      	ite	cc
 802257a:	2303      	movcc	r3, #3
 802257c:	2304      	movcs	r3, #4
 802257e:	9347      	str	r3, [sp, #284]	; 0x11c
 8022580:	6863      	ldr	r3, [r4, #4]
 8022582:	2b00      	cmp	r3, #0
 8022584:	dd41      	ble.n	802260a <__ssvfiscanf_r+0x26a>
 8022586:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8022588:	0659      	lsls	r1, r3, #25
 802258a:	d404      	bmi.n	8022596 <__ssvfiscanf_r+0x1f6>
 802258c:	6823      	ldr	r3, [r4, #0]
 802258e:	781a      	ldrb	r2, [r3, #0]
 8022590:	5cba      	ldrb	r2, [r7, r2]
 8022592:	0712      	lsls	r2, r2, #28
 8022594:	d440      	bmi.n	8022618 <__ssvfiscanf_r+0x278>
 8022596:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8022598:	2b02      	cmp	r3, #2
 802259a:	dc4f      	bgt.n	802263c <__ssvfiscanf_r+0x29c>
 802259c:	466b      	mov	r3, sp
 802259e:	4622      	mov	r2, r4
 80225a0:	a941      	add	r1, sp, #260	; 0x104
 80225a2:	4630      	mov	r0, r6
 80225a4:	f000 fb62 	bl	8022c6c <_scanf_chars>
 80225a8:	2801      	cmp	r0, #1
 80225aa:	d065      	beq.n	8022678 <__ssvfiscanf_r+0x2d8>
 80225ac:	2802      	cmp	r0, #2
 80225ae:	f47f af21 	bne.w	80223f4 <__ssvfiscanf_r+0x54>
 80225b2:	e7cf      	b.n	8022554 <__ssvfiscanf_r+0x1b4>
 80225b4:	220a      	movs	r2, #10
 80225b6:	e7dd      	b.n	8022574 <__ssvfiscanf_r+0x1d4>
 80225b8:	2300      	movs	r3, #0
 80225ba:	9342      	str	r3, [sp, #264]	; 0x108
 80225bc:	2303      	movs	r3, #3
 80225be:	e7de      	b.n	802257e <__ssvfiscanf_r+0x1de>
 80225c0:	2308      	movs	r3, #8
 80225c2:	9342      	str	r3, [sp, #264]	; 0x108
 80225c4:	2304      	movs	r3, #4
 80225c6:	e7da      	b.n	802257e <__ssvfiscanf_r+0x1de>
 80225c8:	4629      	mov	r1, r5
 80225ca:	4640      	mov	r0, r8
 80225cc:	f000 fcac 	bl	8022f28 <__sccl>
 80225d0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80225d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80225d6:	9341      	str	r3, [sp, #260]	; 0x104
 80225d8:	4605      	mov	r5, r0
 80225da:	2301      	movs	r3, #1
 80225dc:	e7cf      	b.n	802257e <__ssvfiscanf_r+0x1de>
 80225de:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80225e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80225e4:	9341      	str	r3, [sp, #260]	; 0x104
 80225e6:	2300      	movs	r3, #0
 80225e8:	e7c9      	b.n	802257e <__ssvfiscanf_r+0x1de>
 80225ea:	2302      	movs	r3, #2
 80225ec:	e7c7      	b.n	802257e <__ssvfiscanf_r+0x1de>
 80225ee:	9841      	ldr	r0, [sp, #260]	; 0x104
 80225f0:	06c3      	lsls	r3, r0, #27
 80225f2:	f53f aeff 	bmi.w	80223f4 <__ssvfiscanf_r+0x54>
 80225f6:	9b00      	ldr	r3, [sp, #0]
 80225f8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80225fa:	1d19      	adds	r1, r3, #4
 80225fc:	9100      	str	r1, [sp, #0]
 80225fe:	681b      	ldr	r3, [r3, #0]
 8022600:	07c0      	lsls	r0, r0, #31
 8022602:	bf4c      	ite	mi
 8022604:	801a      	strhmi	r2, [r3, #0]
 8022606:	601a      	strpl	r2, [r3, #0]
 8022608:	e6f4      	b.n	80223f4 <__ssvfiscanf_r+0x54>
 802260a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802260c:	4621      	mov	r1, r4
 802260e:	4630      	mov	r0, r6
 8022610:	4798      	blx	r3
 8022612:	2800      	cmp	r0, #0
 8022614:	d0b7      	beq.n	8022586 <__ssvfiscanf_r+0x1e6>
 8022616:	e79d      	b.n	8022554 <__ssvfiscanf_r+0x1b4>
 8022618:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802261a:	3201      	adds	r2, #1
 802261c:	9245      	str	r2, [sp, #276]	; 0x114
 802261e:	6862      	ldr	r2, [r4, #4]
 8022620:	3a01      	subs	r2, #1
 8022622:	2a00      	cmp	r2, #0
 8022624:	6062      	str	r2, [r4, #4]
 8022626:	dd02      	ble.n	802262e <__ssvfiscanf_r+0x28e>
 8022628:	3301      	adds	r3, #1
 802262a:	6023      	str	r3, [r4, #0]
 802262c:	e7ae      	b.n	802258c <__ssvfiscanf_r+0x1ec>
 802262e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8022630:	4621      	mov	r1, r4
 8022632:	4630      	mov	r0, r6
 8022634:	4798      	blx	r3
 8022636:	2800      	cmp	r0, #0
 8022638:	d0a8      	beq.n	802258c <__ssvfiscanf_r+0x1ec>
 802263a:	e78b      	b.n	8022554 <__ssvfiscanf_r+0x1b4>
 802263c:	2b04      	cmp	r3, #4
 802263e:	dc06      	bgt.n	802264e <__ssvfiscanf_r+0x2ae>
 8022640:	466b      	mov	r3, sp
 8022642:	4622      	mov	r2, r4
 8022644:	a941      	add	r1, sp, #260	; 0x104
 8022646:	4630      	mov	r0, r6
 8022648:	f000 fb68 	bl	8022d1c <_scanf_i>
 802264c:	e7ac      	b.n	80225a8 <__ssvfiscanf_r+0x208>
 802264e:	4b0f      	ldr	r3, [pc, #60]	; (802268c <__ssvfiscanf_r+0x2ec>)
 8022650:	2b00      	cmp	r3, #0
 8022652:	f43f aecf 	beq.w	80223f4 <__ssvfiscanf_r+0x54>
 8022656:	466b      	mov	r3, sp
 8022658:	4622      	mov	r2, r4
 802265a:	a941      	add	r1, sp, #260	; 0x104
 802265c:	4630      	mov	r0, r6
 802265e:	f3af 8000 	nop.w
 8022662:	e7a1      	b.n	80225a8 <__ssvfiscanf_r+0x208>
 8022664:	89a3      	ldrh	r3, [r4, #12]
 8022666:	f013 0f40 	tst.w	r3, #64	; 0x40
 802266a:	bf18      	it	ne
 802266c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8022670:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8022674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022678:	9844      	ldr	r0, [sp, #272]	; 0x110
 802267a:	e7f9      	b.n	8022670 <__ssvfiscanf_r+0x2d0>
 802267c:	080222ed 	.word	0x080222ed
 8022680:	08022367 	.word	0x08022367
 8022684:	0802afa5 	.word	0x0802afa5
 8022688:	0802b1c4 	.word	0x0802b1c4
 802268c:	00000000 	.word	0x00000000

08022690 <__sfputc_r>:
 8022690:	6893      	ldr	r3, [r2, #8]
 8022692:	3b01      	subs	r3, #1
 8022694:	2b00      	cmp	r3, #0
 8022696:	b410      	push	{r4}
 8022698:	6093      	str	r3, [r2, #8]
 802269a:	da08      	bge.n	80226ae <__sfputc_r+0x1e>
 802269c:	6994      	ldr	r4, [r2, #24]
 802269e:	42a3      	cmp	r3, r4
 80226a0:	db01      	blt.n	80226a6 <__sfputc_r+0x16>
 80226a2:	290a      	cmp	r1, #10
 80226a4:	d103      	bne.n	80226ae <__sfputc_r+0x1e>
 80226a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80226aa:	f7ff ba41 	b.w	8021b30 <__swbuf_r>
 80226ae:	6813      	ldr	r3, [r2, #0]
 80226b0:	1c58      	adds	r0, r3, #1
 80226b2:	6010      	str	r0, [r2, #0]
 80226b4:	7019      	strb	r1, [r3, #0]
 80226b6:	4608      	mov	r0, r1
 80226b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80226bc:	4770      	bx	lr

080226be <__sfputs_r>:
 80226be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80226c0:	4606      	mov	r6, r0
 80226c2:	460f      	mov	r7, r1
 80226c4:	4614      	mov	r4, r2
 80226c6:	18d5      	adds	r5, r2, r3
 80226c8:	42ac      	cmp	r4, r5
 80226ca:	d101      	bne.n	80226d0 <__sfputs_r+0x12>
 80226cc:	2000      	movs	r0, #0
 80226ce:	e007      	b.n	80226e0 <__sfputs_r+0x22>
 80226d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80226d4:	463a      	mov	r2, r7
 80226d6:	4630      	mov	r0, r6
 80226d8:	f7ff ffda 	bl	8022690 <__sfputc_r>
 80226dc:	1c43      	adds	r3, r0, #1
 80226de:	d1f3      	bne.n	80226c8 <__sfputs_r+0xa>
 80226e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080226e4 <_vfiprintf_r>:
 80226e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80226e8:	460d      	mov	r5, r1
 80226ea:	b09d      	sub	sp, #116	; 0x74
 80226ec:	4614      	mov	r4, r2
 80226ee:	4698      	mov	r8, r3
 80226f0:	4606      	mov	r6, r0
 80226f2:	b118      	cbz	r0, 80226fc <_vfiprintf_r+0x18>
 80226f4:	6983      	ldr	r3, [r0, #24]
 80226f6:	b90b      	cbnz	r3, 80226fc <_vfiprintf_r+0x18>
 80226f8:	f7fe fd56 	bl	80211a8 <__sinit>
 80226fc:	4b89      	ldr	r3, [pc, #548]	; (8022924 <_vfiprintf_r+0x240>)
 80226fe:	429d      	cmp	r5, r3
 8022700:	d11b      	bne.n	802273a <_vfiprintf_r+0x56>
 8022702:	6875      	ldr	r5, [r6, #4]
 8022704:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022706:	07d9      	lsls	r1, r3, #31
 8022708:	d405      	bmi.n	8022716 <_vfiprintf_r+0x32>
 802270a:	89ab      	ldrh	r3, [r5, #12]
 802270c:	059a      	lsls	r2, r3, #22
 802270e:	d402      	bmi.n	8022716 <_vfiprintf_r+0x32>
 8022710:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022712:	f7fe fe0c 	bl	802132e <__retarget_lock_acquire_recursive>
 8022716:	89ab      	ldrh	r3, [r5, #12]
 8022718:	071b      	lsls	r3, r3, #28
 802271a:	d501      	bpl.n	8022720 <_vfiprintf_r+0x3c>
 802271c:	692b      	ldr	r3, [r5, #16]
 802271e:	b9eb      	cbnz	r3, 802275c <_vfiprintf_r+0x78>
 8022720:	4629      	mov	r1, r5
 8022722:	4630      	mov	r0, r6
 8022724:	f7ff fa68 	bl	8021bf8 <__swsetup_r>
 8022728:	b1c0      	cbz	r0, 802275c <_vfiprintf_r+0x78>
 802272a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802272c:	07dc      	lsls	r4, r3, #31
 802272e:	d50e      	bpl.n	802274e <_vfiprintf_r+0x6a>
 8022730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022734:	b01d      	add	sp, #116	; 0x74
 8022736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802273a:	4b7b      	ldr	r3, [pc, #492]	; (8022928 <_vfiprintf_r+0x244>)
 802273c:	429d      	cmp	r5, r3
 802273e:	d101      	bne.n	8022744 <_vfiprintf_r+0x60>
 8022740:	68b5      	ldr	r5, [r6, #8]
 8022742:	e7df      	b.n	8022704 <_vfiprintf_r+0x20>
 8022744:	4b79      	ldr	r3, [pc, #484]	; (802292c <_vfiprintf_r+0x248>)
 8022746:	429d      	cmp	r5, r3
 8022748:	bf08      	it	eq
 802274a:	68f5      	ldreq	r5, [r6, #12]
 802274c:	e7da      	b.n	8022704 <_vfiprintf_r+0x20>
 802274e:	89ab      	ldrh	r3, [r5, #12]
 8022750:	0598      	lsls	r0, r3, #22
 8022752:	d4ed      	bmi.n	8022730 <_vfiprintf_r+0x4c>
 8022754:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022756:	f7fe fdeb 	bl	8021330 <__retarget_lock_release_recursive>
 802275a:	e7e9      	b.n	8022730 <_vfiprintf_r+0x4c>
 802275c:	2300      	movs	r3, #0
 802275e:	9309      	str	r3, [sp, #36]	; 0x24
 8022760:	2320      	movs	r3, #32
 8022762:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022766:	f8cd 800c 	str.w	r8, [sp, #12]
 802276a:	2330      	movs	r3, #48	; 0x30
 802276c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8022930 <_vfiprintf_r+0x24c>
 8022770:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022774:	f04f 0901 	mov.w	r9, #1
 8022778:	4623      	mov	r3, r4
 802277a:	469a      	mov	sl, r3
 802277c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022780:	b10a      	cbz	r2, 8022786 <_vfiprintf_r+0xa2>
 8022782:	2a25      	cmp	r2, #37	; 0x25
 8022784:	d1f9      	bne.n	802277a <_vfiprintf_r+0x96>
 8022786:	ebba 0b04 	subs.w	fp, sl, r4
 802278a:	d00b      	beq.n	80227a4 <_vfiprintf_r+0xc0>
 802278c:	465b      	mov	r3, fp
 802278e:	4622      	mov	r2, r4
 8022790:	4629      	mov	r1, r5
 8022792:	4630      	mov	r0, r6
 8022794:	f7ff ff93 	bl	80226be <__sfputs_r>
 8022798:	3001      	adds	r0, #1
 802279a:	f000 80aa 	beq.w	80228f2 <_vfiprintf_r+0x20e>
 802279e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80227a0:	445a      	add	r2, fp
 80227a2:	9209      	str	r2, [sp, #36]	; 0x24
 80227a4:	f89a 3000 	ldrb.w	r3, [sl]
 80227a8:	2b00      	cmp	r3, #0
 80227aa:	f000 80a2 	beq.w	80228f2 <_vfiprintf_r+0x20e>
 80227ae:	2300      	movs	r3, #0
 80227b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80227b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80227b8:	f10a 0a01 	add.w	sl, sl, #1
 80227bc:	9304      	str	r3, [sp, #16]
 80227be:	9307      	str	r3, [sp, #28]
 80227c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80227c4:	931a      	str	r3, [sp, #104]	; 0x68
 80227c6:	4654      	mov	r4, sl
 80227c8:	2205      	movs	r2, #5
 80227ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80227ce:	4858      	ldr	r0, [pc, #352]	; (8022930 <_vfiprintf_r+0x24c>)
 80227d0:	f7dd fd4e 	bl	8000270 <memchr>
 80227d4:	9a04      	ldr	r2, [sp, #16]
 80227d6:	b9d8      	cbnz	r0, 8022810 <_vfiprintf_r+0x12c>
 80227d8:	06d1      	lsls	r1, r2, #27
 80227da:	bf44      	itt	mi
 80227dc:	2320      	movmi	r3, #32
 80227de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80227e2:	0713      	lsls	r3, r2, #28
 80227e4:	bf44      	itt	mi
 80227e6:	232b      	movmi	r3, #43	; 0x2b
 80227e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80227ec:	f89a 3000 	ldrb.w	r3, [sl]
 80227f0:	2b2a      	cmp	r3, #42	; 0x2a
 80227f2:	d015      	beq.n	8022820 <_vfiprintf_r+0x13c>
 80227f4:	9a07      	ldr	r2, [sp, #28]
 80227f6:	4654      	mov	r4, sl
 80227f8:	2000      	movs	r0, #0
 80227fa:	f04f 0c0a 	mov.w	ip, #10
 80227fe:	4621      	mov	r1, r4
 8022800:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022804:	3b30      	subs	r3, #48	; 0x30
 8022806:	2b09      	cmp	r3, #9
 8022808:	d94e      	bls.n	80228a8 <_vfiprintf_r+0x1c4>
 802280a:	b1b0      	cbz	r0, 802283a <_vfiprintf_r+0x156>
 802280c:	9207      	str	r2, [sp, #28]
 802280e:	e014      	b.n	802283a <_vfiprintf_r+0x156>
 8022810:	eba0 0308 	sub.w	r3, r0, r8
 8022814:	fa09 f303 	lsl.w	r3, r9, r3
 8022818:	4313      	orrs	r3, r2
 802281a:	9304      	str	r3, [sp, #16]
 802281c:	46a2      	mov	sl, r4
 802281e:	e7d2      	b.n	80227c6 <_vfiprintf_r+0xe2>
 8022820:	9b03      	ldr	r3, [sp, #12]
 8022822:	1d19      	adds	r1, r3, #4
 8022824:	681b      	ldr	r3, [r3, #0]
 8022826:	9103      	str	r1, [sp, #12]
 8022828:	2b00      	cmp	r3, #0
 802282a:	bfbb      	ittet	lt
 802282c:	425b      	neglt	r3, r3
 802282e:	f042 0202 	orrlt.w	r2, r2, #2
 8022832:	9307      	strge	r3, [sp, #28]
 8022834:	9307      	strlt	r3, [sp, #28]
 8022836:	bfb8      	it	lt
 8022838:	9204      	strlt	r2, [sp, #16]
 802283a:	7823      	ldrb	r3, [r4, #0]
 802283c:	2b2e      	cmp	r3, #46	; 0x2e
 802283e:	d10c      	bne.n	802285a <_vfiprintf_r+0x176>
 8022840:	7863      	ldrb	r3, [r4, #1]
 8022842:	2b2a      	cmp	r3, #42	; 0x2a
 8022844:	d135      	bne.n	80228b2 <_vfiprintf_r+0x1ce>
 8022846:	9b03      	ldr	r3, [sp, #12]
 8022848:	1d1a      	adds	r2, r3, #4
 802284a:	681b      	ldr	r3, [r3, #0]
 802284c:	9203      	str	r2, [sp, #12]
 802284e:	2b00      	cmp	r3, #0
 8022850:	bfb8      	it	lt
 8022852:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8022856:	3402      	adds	r4, #2
 8022858:	9305      	str	r3, [sp, #20]
 802285a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022940 <_vfiprintf_r+0x25c>
 802285e:	7821      	ldrb	r1, [r4, #0]
 8022860:	2203      	movs	r2, #3
 8022862:	4650      	mov	r0, sl
 8022864:	f7dd fd04 	bl	8000270 <memchr>
 8022868:	b140      	cbz	r0, 802287c <_vfiprintf_r+0x198>
 802286a:	2340      	movs	r3, #64	; 0x40
 802286c:	eba0 000a 	sub.w	r0, r0, sl
 8022870:	fa03 f000 	lsl.w	r0, r3, r0
 8022874:	9b04      	ldr	r3, [sp, #16]
 8022876:	4303      	orrs	r3, r0
 8022878:	3401      	adds	r4, #1
 802287a:	9304      	str	r3, [sp, #16]
 802287c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022880:	482c      	ldr	r0, [pc, #176]	; (8022934 <_vfiprintf_r+0x250>)
 8022882:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022886:	2206      	movs	r2, #6
 8022888:	f7dd fcf2 	bl	8000270 <memchr>
 802288c:	2800      	cmp	r0, #0
 802288e:	d03f      	beq.n	8022910 <_vfiprintf_r+0x22c>
 8022890:	4b29      	ldr	r3, [pc, #164]	; (8022938 <_vfiprintf_r+0x254>)
 8022892:	bb1b      	cbnz	r3, 80228dc <_vfiprintf_r+0x1f8>
 8022894:	9b03      	ldr	r3, [sp, #12]
 8022896:	3307      	adds	r3, #7
 8022898:	f023 0307 	bic.w	r3, r3, #7
 802289c:	3308      	adds	r3, #8
 802289e:	9303      	str	r3, [sp, #12]
 80228a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80228a2:	443b      	add	r3, r7
 80228a4:	9309      	str	r3, [sp, #36]	; 0x24
 80228a6:	e767      	b.n	8022778 <_vfiprintf_r+0x94>
 80228a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80228ac:	460c      	mov	r4, r1
 80228ae:	2001      	movs	r0, #1
 80228b0:	e7a5      	b.n	80227fe <_vfiprintf_r+0x11a>
 80228b2:	2300      	movs	r3, #0
 80228b4:	3401      	adds	r4, #1
 80228b6:	9305      	str	r3, [sp, #20]
 80228b8:	4619      	mov	r1, r3
 80228ba:	f04f 0c0a 	mov.w	ip, #10
 80228be:	4620      	mov	r0, r4
 80228c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80228c4:	3a30      	subs	r2, #48	; 0x30
 80228c6:	2a09      	cmp	r2, #9
 80228c8:	d903      	bls.n	80228d2 <_vfiprintf_r+0x1ee>
 80228ca:	2b00      	cmp	r3, #0
 80228cc:	d0c5      	beq.n	802285a <_vfiprintf_r+0x176>
 80228ce:	9105      	str	r1, [sp, #20]
 80228d0:	e7c3      	b.n	802285a <_vfiprintf_r+0x176>
 80228d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80228d6:	4604      	mov	r4, r0
 80228d8:	2301      	movs	r3, #1
 80228da:	e7f0      	b.n	80228be <_vfiprintf_r+0x1da>
 80228dc:	ab03      	add	r3, sp, #12
 80228de:	9300      	str	r3, [sp, #0]
 80228e0:	462a      	mov	r2, r5
 80228e2:	4b16      	ldr	r3, [pc, #88]	; (802293c <_vfiprintf_r+0x258>)
 80228e4:	a904      	add	r1, sp, #16
 80228e6:	4630      	mov	r0, r6
 80228e8:	f3af 8000 	nop.w
 80228ec:	4607      	mov	r7, r0
 80228ee:	1c78      	adds	r0, r7, #1
 80228f0:	d1d6      	bne.n	80228a0 <_vfiprintf_r+0x1bc>
 80228f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80228f4:	07d9      	lsls	r1, r3, #31
 80228f6:	d405      	bmi.n	8022904 <_vfiprintf_r+0x220>
 80228f8:	89ab      	ldrh	r3, [r5, #12]
 80228fa:	059a      	lsls	r2, r3, #22
 80228fc:	d402      	bmi.n	8022904 <_vfiprintf_r+0x220>
 80228fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022900:	f7fe fd16 	bl	8021330 <__retarget_lock_release_recursive>
 8022904:	89ab      	ldrh	r3, [r5, #12]
 8022906:	065b      	lsls	r3, r3, #25
 8022908:	f53f af12 	bmi.w	8022730 <_vfiprintf_r+0x4c>
 802290c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802290e:	e711      	b.n	8022734 <_vfiprintf_r+0x50>
 8022910:	ab03      	add	r3, sp, #12
 8022912:	9300      	str	r3, [sp, #0]
 8022914:	462a      	mov	r2, r5
 8022916:	4b09      	ldr	r3, [pc, #36]	; (802293c <_vfiprintf_r+0x258>)
 8022918:	a904      	add	r1, sp, #16
 802291a:	4630      	mov	r0, r6
 802291c:	f000 f880 	bl	8022a20 <_printf_i>
 8022920:	e7e4      	b.n	80228ec <_vfiprintf_r+0x208>
 8022922:	bf00      	nop
 8022924:	0802b0c8 	.word	0x0802b0c8
 8022928:	0802b0e8 	.word	0x0802b0e8
 802292c:	0802b0a8 	.word	0x0802b0a8
 8022930:	0802b1be 	.word	0x0802b1be
 8022934:	0802b1c8 	.word	0x0802b1c8
 8022938:	00000000 	.word	0x00000000
 802293c:	080226bf 	.word	0x080226bf
 8022940:	0802b1c4 	.word	0x0802b1c4

08022944 <_printf_common>:
 8022944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022948:	4616      	mov	r6, r2
 802294a:	4699      	mov	r9, r3
 802294c:	688a      	ldr	r2, [r1, #8]
 802294e:	690b      	ldr	r3, [r1, #16]
 8022950:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022954:	4293      	cmp	r3, r2
 8022956:	bfb8      	it	lt
 8022958:	4613      	movlt	r3, r2
 802295a:	6033      	str	r3, [r6, #0]
 802295c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8022960:	4607      	mov	r7, r0
 8022962:	460c      	mov	r4, r1
 8022964:	b10a      	cbz	r2, 802296a <_printf_common+0x26>
 8022966:	3301      	adds	r3, #1
 8022968:	6033      	str	r3, [r6, #0]
 802296a:	6823      	ldr	r3, [r4, #0]
 802296c:	0699      	lsls	r1, r3, #26
 802296e:	bf42      	ittt	mi
 8022970:	6833      	ldrmi	r3, [r6, #0]
 8022972:	3302      	addmi	r3, #2
 8022974:	6033      	strmi	r3, [r6, #0]
 8022976:	6825      	ldr	r5, [r4, #0]
 8022978:	f015 0506 	ands.w	r5, r5, #6
 802297c:	d106      	bne.n	802298c <_printf_common+0x48>
 802297e:	f104 0a19 	add.w	sl, r4, #25
 8022982:	68e3      	ldr	r3, [r4, #12]
 8022984:	6832      	ldr	r2, [r6, #0]
 8022986:	1a9b      	subs	r3, r3, r2
 8022988:	42ab      	cmp	r3, r5
 802298a:	dc26      	bgt.n	80229da <_printf_common+0x96>
 802298c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8022990:	1e13      	subs	r3, r2, #0
 8022992:	6822      	ldr	r2, [r4, #0]
 8022994:	bf18      	it	ne
 8022996:	2301      	movne	r3, #1
 8022998:	0692      	lsls	r2, r2, #26
 802299a:	d42b      	bmi.n	80229f4 <_printf_common+0xb0>
 802299c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80229a0:	4649      	mov	r1, r9
 80229a2:	4638      	mov	r0, r7
 80229a4:	47c0      	blx	r8
 80229a6:	3001      	adds	r0, #1
 80229a8:	d01e      	beq.n	80229e8 <_printf_common+0xa4>
 80229aa:	6823      	ldr	r3, [r4, #0]
 80229ac:	68e5      	ldr	r5, [r4, #12]
 80229ae:	6832      	ldr	r2, [r6, #0]
 80229b0:	f003 0306 	and.w	r3, r3, #6
 80229b4:	2b04      	cmp	r3, #4
 80229b6:	bf08      	it	eq
 80229b8:	1aad      	subeq	r5, r5, r2
 80229ba:	68a3      	ldr	r3, [r4, #8]
 80229bc:	6922      	ldr	r2, [r4, #16]
 80229be:	bf0c      	ite	eq
 80229c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80229c4:	2500      	movne	r5, #0
 80229c6:	4293      	cmp	r3, r2
 80229c8:	bfc4      	itt	gt
 80229ca:	1a9b      	subgt	r3, r3, r2
 80229cc:	18ed      	addgt	r5, r5, r3
 80229ce:	2600      	movs	r6, #0
 80229d0:	341a      	adds	r4, #26
 80229d2:	42b5      	cmp	r5, r6
 80229d4:	d11a      	bne.n	8022a0c <_printf_common+0xc8>
 80229d6:	2000      	movs	r0, #0
 80229d8:	e008      	b.n	80229ec <_printf_common+0xa8>
 80229da:	2301      	movs	r3, #1
 80229dc:	4652      	mov	r2, sl
 80229de:	4649      	mov	r1, r9
 80229e0:	4638      	mov	r0, r7
 80229e2:	47c0      	blx	r8
 80229e4:	3001      	adds	r0, #1
 80229e6:	d103      	bne.n	80229f0 <_printf_common+0xac>
 80229e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80229ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80229f0:	3501      	adds	r5, #1
 80229f2:	e7c6      	b.n	8022982 <_printf_common+0x3e>
 80229f4:	18e1      	adds	r1, r4, r3
 80229f6:	1c5a      	adds	r2, r3, #1
 80229f8:	2030      	movs	r0, #48	; 0x30
 80229fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80229fe:	4422      	add	r2, r4
 8022a00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022a04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022a08:	3302      	adds	r3, #2
 8022a0a:	e7c7      	b.n	802299c <_printf_common+0x58>
 8022a0c:	2301      	movs	r3, #1
 8022a0e:	4622      	mov	r2, r4
 8022a10:	4649      	mov	r1, r9
 8022a12:	4638      	mov	r0, r7
 8022a14:	47c0      	blx	r8
 8022a16:	3001      	adds	r0, #1
 8022a18:	d0e6      	beq.n	80229e8 <_printf_common+0xa4>
 8022a1a:	3601      	adds	r6, #1
 8022a1c:	e7d9      	b.n	80229d2 <_printf_common+0x8e>
	...

08022a20 <_printf_i>:
 8022a20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022a24:	460c      	mov	r4, r1
 8022a26:	4691      	mov	r9, r2
 8022a28:	7e27      	ldrb	r7, [r4, #24]
 8022a2a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022a2c:	2f78      	cmp	r7, #120	; 0x78
 8022a2e:	4680      	mov	r8, r0
 8022a30:	469a      	mov	sl, r3
 8022a32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022a36:	d807      	bhi.n	8022a48 <_printf_i+0x28>
 8022a38:	2f62      	cmp	r7, #98	; 0x62
 8022a3a:	d80a      	bhi.n	8022a52 <_printf_i+0x32>
 8022a3c:	2f00      	cmp	r7, #0
 8022a3e:	f000 80d8 	beq.w	8022bf2 <_printf_i+0x1d2>
 8022a42:	2f58      	cmp	r7, #88	; 0x58
 8022a44:	f000 80a3 	beq.w	8022b8e <_printf_i+0x16e>
 8022a48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8022a4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8022a50:	e03a      	b.n	8022ac8 <_printf_i+0xa8>
 8022a52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8022a56:	2b15      	cmp	r3, #21
 8022a58:	d8f6      	bhi.n	8022a48 <_printf_i+0x28>
 8022a5a:	a001      	add	r0, pc, #4	; (adr r0, 8022a60 <_printf_i+0x40>)
 8022a5c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8022a60:	08022ab9 	.word	0x08022ab9
 8022a64:	08022acd 	.word	0x08022acd
 8022a68:	08022a49 	.word	0x08022a49
 8022a6c:	08022a49 	.word	0x08022a49
 8022a70:	08022a49 	.word	0x08022a49
 8022a74:	08022a49 	.word	0x08022a49
 8022a78:	08022acd 	.word	0x08022acd
 8022a7c:	08022a49 	.word	0x08022a49
 8022a80:	08022a49 	.word	0x08022a49
 8022a84:	08022a49 	.word	0x08022a49
 8022a88:	08022a49 	.word	0x08022a49
 8022a8c:	08022bd9 	.word	0x08022bd9
 8022a90:	08022afd 	.word	0x08022afd
 8022a94:	08022bbb 	.word	0x08022bbb
 8022a98:	08022a49 	.word	0x08022a49
 8022a9c:	08022a49 	.word	0x08022a49
 8022aa0:	08022bfb 	.word	0x08022bfb
 8022aa4:	08022a49 	.word	0x08022a49
 8022aa8:	08022afd 	.word	0x08022afd
 8022aac:	08022a49 	.word	0x08022a49
 8022ab0:	08022a49 	.word	0x08022a49
 8022ab4:	08022bc3 	.word	0x08022bc3
 8022ab8:	680b      	ldr	r3, [r1, #0]
 8022aba:	1d1a      	adds	r2, r3, #4
 8022abc:	681b      	ldr	r3, [r3, #0]
 8022abe:	600a      	str	r2, [r1, #0]
 8022ac0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8022ac4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022ac8:	2301      	movs	r3, #1
 8022aca:	e0a3      	b.n	8022c14 <_printf_i+0x1f4>
 8022acc:	6825      	ldr	r5, [r4, #0]
 8022ace:	6808      	ldr	r0, [r1, #0]
 8022ad0:	062e      	lsls	r6, r5, #24
 8022ad2:	f100 0304 	add.w	r3, r0, #4
 8022ad6:	d50a      	bpl.n	8022aee <_printf_i+0xce>
 8022ad8:	6805      	ldr	r5, [r0, #0]
 8022ada:	600b      	str	r3, [r1, #0]
 8022adc:	2d00      	cmp	r5, #0
 8022ade:	da03      	bge.n	8022ae8 <_printf_i+0xc8>
 8022ae0:	232d      	movs	r3, #45	; 0x2d
 8022ae2:	426d      	negs	r5, r5
 8022ae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022ae8:	485e      	ldr	r0, [pc, #376]	; (8022c64 <_printf_i+0x244>)
 8022aea:	230a      	movs	r3, #10
 8022aec:	e019      	b.n	8022b22 <_printf_i+0x102>
 8022aee:	f015 0f40 	tst.w	r5, #64	; 0x40
 8022af2:	6805      	ldr	r5, [r0, #0]
 8022af4:	600b      	str	r3, [r1, #0]
 8022af6:	bf18      	it	ne
 8022af8:	b22d      	sxthne	r5, r5
 8022afa:	e7ef      	b.n	8022adc <_printf_i+0xbc>
 8022afc:	680b      	ldr	r3, [r1, #0]
 8022afe:	6825      	ldr	r5, [r4, #0]
 8022b00:	1d18      	adds	r0, r3, #4
 8022b02:	6008      	str	r0, [r1, #0]
 8022b04:	0628      	lsls	r0, r5, #24
 8022b06:	d501      	bpl.n	8022b0c <_printf_i+0xec>
 8022b08:	681d      	ldr	r5, [r3, #0]
 8022b0a:	e002      	b.n	8022b12 <_printf_i+0xf2>
 8022b0c:	0669      	lsls	r1, r5, #25
 8022b0e:	d5fb      	bpl.n	8022b08 <_printf_i+0xe8>
 8022b10:	881d      	ldrh	r5, [r3, #0]
 8022b12:	4854      	ldr	r0, [pc, #336]	; (8022c64 <_printf_i+0x244>)
 8022b14:	2f6f      	cmp	r7, #111	; 0x6f
 8022b16:	bf0c      	ite	eq
 8022b18:	2308      	moveq	r3, #8
 8022b1a:	230a      	movne	r3, #10
 8022b1c:	2100      	movs	r1, #0
 8022b1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8022b22:	6866      	ldr	r6, [r4, #4]
 8022b24:	60a6      	str	r6, [r4, #8]
 8022b26:	2e00      	cmp	r6, #0
 8022b28:	bfa2      	ittt	ge
 8022b2a:	6821      	ldrge	r1, [r4, #0]
 8022b2c:	f021 0104 	bicge.w	r1, r1, #4
 8022b30:	6021      	strge	r1, [r4, #0]
 8022b32:	b90d      	cbnz	r5, 8022b38 <_printf_i+0x118>
 8022b34:	2e00      	cmp	r6, #0
 8022b36:	d04d      	beq.n	8022bd4 <_printf_i+0x1b4>
 8022b38:	4616      	mov	r6, r2
 8022b3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8022b3e:	fb03 5711 	mls	r7, r3, r1, r5
 8022b42:	5dc7      	ldrb	r7, [r0, r7]
 8022b44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8022b48:	462f      	mov	r7, r5
 8022b4a:	42bb      	cmp	r3, r7
 8022b4c:	460d      	mov	r5, r1
 8022b4e:	d9f4      	bls.n	8022b3a <_printf_i+0x11a>
 8022b50:	2b08      	cmp	r3, #8
 8022b52:	d10b      	bne.n	8022b6c <_printf_i+0x14c>
 8022b54:	6823      	ldr	r3, [r4, #0]
 8022b56:	07df      	lsls	r7, r3, #31
 8022b58:	d508      	bpl.n	8022b6c <_printf_i+0x14c>
 8022b5a:	6923      	ldr	r3, [r4, #16]
 8022b5c:	6861      	ldr	r1, [r4, #4]
 8022b5e:	4299      	cmp	r1, r3
 8022b60:	bfde      	ittt	le
 8022b62:	2330      	movle	r3, #48	; 0x30
 8022b64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022b68:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8022b6c:	1b92      	subs	r2, r2, r6
 8022b6e:	6122      	str	r2, [r4, #16]
 8022b70:	f8cd a000 	str.w	sl, [sp]
 8022b74:	464b      	mov	r3, r9
 8022b76:	aa03      	add	r2, sp, #12
 8022b78:	4621      	mov	r1, r4
 8022b7a:	4640      	mov	r0, r8
 8022b7c:	f7ff fee2 	bl	8022944 <_printf_common>
 8022b80:	3001      	adds	r0, #1
 8022b82:	d14c      	bne.n	8022c1e <_printf_i+0x1fe>
 8022b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022b88:	b004      	add	sp, #16
 8022b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022b8e:	4835      	ldr	r0, [pc, #212]	; (8022c64 <_printf_i+0x244>)
 8022b90:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8022b94:	6823      	ldr	r3, [r4, #0]
 8022b96:	680e      	ldr	r6, [r1, #0]
 8022b98:	061f      	lsls	r7, r3, #24
 8022b9a:	f856 5b04 	ldr.w	r5, [r6], #4
 8022b9e:	600e      	str	r6, [r1, #0]
 8022ba0:	d514      	bpl.n	8022bcc <_printf_i+0x1ac>
 8022ba2:	07d9      	lsls	r1, r3, #31
 8022ba4:	bf44      	itt	mi
 8022ba6:	f043 0320 	orrmi.w	r3, r3, #32
 8022baa:	6023      	strmi	r3, [r4, #0]
 8022bac:	b91d      	cbnz	r5, 8022bb6 <_printf_i+0x196>
 8022bae:	6823      	ldr	r3, [r4, #0]
 8022bb0:	f023 0320 	bic.w	r3, r3, #32
 8022bb4:	6023      	str	r3, [r4, #0]
 8022bb6:	2310      	movs	r3, #16
 8022bb8:	e7b0      	b.n	8022b1c <_printf_i+0xfc>
 8022bba:	6823      	ldr	r3, [r4, #0]
 8022bbc:	f043 0320 	orr.w	r3, r3, #32
 8022bc0:	6023      	str	r3, [r4, #0]
 8022bc2:	2378      	movs	r3, #120	; 0x78
 8022bc4:	4828      	ldr	r0, [pc, #160]	; (8022c68 <_printf_i+0x248>)
 8022bc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8022bca:	e7e3      	b.n	8022b94 <_printf_i+0x174>
 8022bcc:	065e      	lsls	r6, r3, #25
 8022bce:	bf48      	it	mi
 8022bd0:	b2ad      	uxthmi	r5, r5
 8022bd2:	e7e6      	b.n	8022ba2 <_printf_i+0x182>
 8022bd4:	4616      	mov	r6, r2
 8022bd6:	e7bb      	b.n	8022b50 <_printf_i+0x130>
 8022bd8:	680b      	ldr	r3, [r1, #0]
 8022bda:	6826      	ldr	r6, [r4, #0]
 8022bdc:	6960      	ldr	r0, [r4, #20]
 8022bde:	1d1d      	adds	r5, r3, #4
 8022be0:	600d      	str	r5, [r1, #0]
 8022be2:	0635      	lsls	r5, r6, #24
 8022be4:	681b      	ldr	r3, [r3, #0]
 8022be6:	d501      	bpl.n	8022bec <_printf_i+0x1cc>
 8022be8:	6018      	str	r0, [r3, #0]
 8022bea:	e002      	b.n	8022bf2 <_printf_i+0x1d2>
 8022bec:	0671      	lsls	r1, r6, #25
 8022bee:	d5fb      	bpl.n	8022be8 <_printf_i+0x1c8>
 8022bf0:	8018      	strh	r0, [r3, #0]
 8022bf2:	2300      	movs	r3, #0
 8022bf4:	6123      	str	r3, [r4, #16]
 8022bf6:	4616      	mov	r6, r2
 8022bf8:	e7ba      	b.n	8022b70 <_printf_i+0x150>
 8022bfa:	680b      	ldr	r3, [r1, #0]
 8022bfc:	1d1a      	adds	r2, r3, #4
 8022bfe:	600a      	str	r2, [r1, #0]
 8022c00:	681e      	ldr	r6, [r3, #0]
 8022c02:	6862      	ldr	r2, [r4, #4]
 8022c04:	2100      	movs	r1, #0
 8022c06:	4630      	mov	r0, r6
 8022c08:	f7dd fb32 	bl	8000270 <memchr>
 8022c0c:	b108      	cbz	r0, 8022c12 <_printf_i+0x1f2>
 8022c0e:	1b80      	subs	r0, r0, r6
 8022c10:	6060      	str	r0, [r4, #4]
 8022c12:	6863      	ldr	r3, [r4, #4]
 8022c14:	6123      	str	r3, [r4, #16]
 8022c16:	2300      	movs	r3, #0
 8022c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022c1c:	e7a8      	b.n	8022b70 <_printf_i+0x150>
 8022c1e:	6923      	ldr	r3, [r4, #16]
 8022c20:	4632      	mov	r2, r6
 8022c22:	4649      	mov	r1, r9
 8022c24:	4640      	mov	r0, r8
 8022c26:	47d0      	blx	sl
 8022c28:	3001      	adds	r0, #1
 8022c2a:	d0ab      	beq.n	8022b84 <_printf_i+0x164>
 8022c2c:	6823      	ldr	r3, [r4, #0]
 8022c2e:	079b      	lsls	r3, r3, #30
 8022c30:	d413      	bmi.n	8022c5a <_printf_i+0x23a>
 8022c32:	68e0      	ldr	r0, [r4, #12]
 8022c34:	9b03      	ldr	r3, [sp, #12]
 8022c36:	4298      	cmp	r0, r3
 8022c38:	bfb8      	it	lt
 8022c3a:	4618      	movlt	r0, r3
 8022c3c:	e7a4      	b.n	8022b88 <_printf_i+0x168>
 8022c3e:	2301      	movs	r3, #1
 8022c40:	4632      	mov	r2, r6
 8022c42:	4649      	mov	r1, r9
 8022c44:	4640      	mov	r0, r8
 8022c46:	47d0      	blx	sl
 8022c48:	3001      	adds	r0, #1
 8022c4a:	d09b      	beq.n	8022b84 <_printf_i+0x164>
 8022c4c:	3501      	adds	r5, #1
 8022c4e:	68e3      	ldr	r3, [r4, #12]
 8022c50:	9903      	ldr	r1, [sp, #12]
 8022c52:	1a5b      	subs	r3, r3, r1
 8022c54:	42ab      	cmp	r3, r5
 8022c56:	dcf2      	bgt.n	8022c3e <_printf_i+0x21e>
 8022c58:	e7eb      	b.n	8022c32 <_printf_i+0x212>
 8022c5a:	2500      	movs	r5, #0
 8022c5c:	f104 0619 	add.w	r6, r4, #25
 8022c60:	e7f5      	b.n	8022c4e <_printf_i+0x22e>
 8022c62:	bf00      	nop
 8022c64:	0802b1cf 	.word	0x0802b1cf
 8022c68:	0802b1e0 	.word	0x0802b1e0

08022c6c <_scanf_chars>:
 8022c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022c70:	4615      	mov	r5, r2
 8022c72:	688a      	ldr	r2, [r1, #8]
 8022c74:	4680      	mov	r8, r0
 8022c76:	460c      	mov	r4, r1
 8022c78:	b932      	cbnz	r2, 8022c88 <_scanf_chars+0x1c>
 8022c7a:	698a      	ldr	r2, [r1, #24]
 8022c7c:	2a00      	cmp	r2, #0
 8022c7e:	bf0c      	ite	eq
 8022c80:	2201      	moveq	r2, #1
 8022c82:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8022c86:	608a      	str	r2, [r1, #8]
 8022c88:	6822      	ldr	r2, [r4, #0]
 8022c8a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8022d18 <_scanf_chars+0xac>
 8022c8e:	06d1      	lsls	r1, r2, #27
 8022c90:	bf5f      	itttt	pl
 8022c92:	681a      	ldrpl	r2, [r3, #0]
 8022c94:	1d11      	addpl	r1, r2, #4
 8022c96:	6019      	strpl	r1, [r3, #0]
 8022c98:	6816      	ldrpl	r6, [r2, #0]
 8022c9a:	2700      	movs	r7, #0
 8022c9c:	69a0      	ldr	r0, [r4, #24]
 8022c9e:	b188      	cbz	r0, 8022cc4 <_scanf_chars+0x58>
 8022ca0:	2801      	cmp	r0, #1
 8022ca2:	d107      	bne.n	8022cb4 <_scanf_chars+0x48>
 8022ca4:	682b      	ldr	r3, [r5, #0]
 8022ca6:	781a      	ldrb	r2, [r3, #0]
 8022ca8:	6963      	ldr	r3, [r4, #20]
 8022caa:	5c9b      	ldrb	r3, [r3, r2]
 8022cac:	b953      	cbnz	r3, 8022cc4 <_scanf_chars+0x58>
 8022cae:	bb27      	cbnz	r7, 8022cfa <_scanf_chars+0x8e>
 8022cb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022cb4:	2802      	cmp	r0, #2
 8022cb6:	d120      	bne.n	8022cfa <_scanf_chars+0x8e>
 8022cb8:	682b      	ldr	r3, [r5, #0]
 8022cba:	781b      	ldrb	r3, [r3, #0]
 8022cbc:	f813 3009 	ldrb.w	r3, [r3, r9]
 8022cc0:	071b      	lsls	r3, r3, #28
 8022cc2:	d41a      	bmi.n	8022cfa <_scanf_chars+0x8e>
 8022cc4:	6823      	ldr	r3, [r4, #0]
 8022cc6:	06da      	lsls	r2, r3, #27
 8022cc8:	bf5e      	ittt	pl
 8022cca:	682b      	ldrpl	r3, [r5, #0]
 8022ccc:	781b      	ldrbpl	r3, [r3, #0]
 8022cce:	f806 3b01 	strbpl.w	r3, [r6], #1
 8022cd2:	682a      	ldr	r2, [r5, #0]
 8022cd4:	686b      	ldr	r3, [r5, #4]
 8022cd6:	3201      	adds	r2, #1
 8022cd8:	602a      	str	r2, [r5, #0]
 8022cda:	68a2      	ldr	r2, [r4, #8]
 8022cdc:	3b01      	subs	r3, #1
 8022cde:	3a01      	subs	r2, #1
 8022ce0:	606b      	str	r3, [r5, #4]
 8022ce2:	3701      	adds	r7, #1
 8022ce4:	60a2      	str	r2, [r4, #8]
 8022ce6:	b142      	cbz	r2, 8022cfa <_scanf_chars+0x8e>
 8022ce8:	2b00      	cmp	r3, #0
 8022cea:	dcd7      	bgt.n	8022c9c <_scanf_chars+0x30>
 8022cec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8022cf0:	4629      	mov	r1, r5
 8022cf2:	4640      	mov	r0, r8
 8022cf4:	4798      	blx	r3
 8022cf6:	2800      	cmp	r0, #0
 8022cf8:	d0d0      	beq.n	8022c9c <_scanf_chars+0x30>
 8022cfa:	6823      	ldr	r3, [r4, #0]
 8022cfc:	f013 0310 	ands.w	r3, r3, #16
 8022d00:	d105      	bne.n	8022d0e <_scanf_chars+0xa2>
 8022d02:	68e2      	ldr	r2, [r4, #12]
 8022d04:	3201      	adds	r2, #1
 8022d06:	60e2      	str	r2, [r4, #12]
 8022d08:	69a2      	ldr	r2, [r4, #24]
 8022d0a:	b102      	cbz	r2, 8022d0e <_scanf_chars+0xa2>
 8022d0c:	7033      	strb	r3, [r6, #0]
 8022d0e:	6923      	ldr	r3, [r4, #16]
 8022d10:	441f      	add	r7, r3
 8022d12:	6127      	str	r7, [r4, #16]
 8022d14:	2000      	movs	r0, #0
 8022d16:	e7cb      	b.n	8022cb0 <_scanf_chars+0x44>
 8022d18:	0802afa5 	.word	0x0802afa5

08022d1c <_scanf_i>:
 8022d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d20:	4698      	mov	r8, r3
 8022d22:	4b74      	ldr	r3, [pc, #464]	; (8022ef4 <_scanf_i+0x1d8>)
 8022d24:	460c      	mov	r4, r1
 8022d26:	4682      	mov	sl, r0
 8022d28:	4616      	mov	r6, r2
 8022d2a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8022d2e:	b087      	sub	sp, #28
 8022d30:	ab03      	add	r3, sp, #12
 8022d32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8022d36:	4b70      	ldr	r3, [pc, #448]	; (8022ef8 <_scanf_i+0x1dc>)
 8022d38:	69a1      	ldr	r1, [r4, #24]
 8022d3a:	4a70      	ldr	r2, [pc, #448]	; (8022efc <_scanf_i+0x1e0>)
 8022d3c:	2903      	cmp	r1, #3
 8022d3e:	bf18      	it	ne
 8022d40:	461a      	movne	r2, r3
 8022d42:	68a3      	ldr	r3, [r4, #8]
 8022d44:	9201      	str	r2, [sp, #4]
 8022d46:	1e5a      	subs	r2, r3, #1
 8022d48:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8022d4c:	bf88      	it	hi
 8022d4e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8022d52:	4627      	mov	r7, r4
 8022d54:	bf82      	ittt	hi
 8022d56:	eb03 0905 	addhi.w	r9, r3, r5
 8022d5a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8022d5e:	60a3      	strhi	r3, [r4, #8]
 8022d60:	f857 3b1c 	ldr.w	r3, [r7], #28
 8022d64:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8022d68:	bf98      	it	ls
 8022d6a:	f04f 0900 	movls.w	r9, #0
 8022d6e:	6023      	str	r3, [r4, #0]
 8022d70:	463d      	mov	r5, r7
 8022d72:	f04f 0b00 	mov.w	fp, #0
 8022d76:	6831      	ldr	r1, [r6, #0]
 8022d78:	ab03      	add	r3, sp, #12
 8022d7a:	7809      	ldrb	r1, [r1, #0]
 8022d7c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8022d80:	2202      	movs	r2, #2
 8022d82:	f7dd fa75 	bl	8000270 <memchr>
 8022d86:	b328      	cbz	r0, 8022dd4 <_scanf_i+0xb8>
 8022d88:	f1bb 0f01 	cmp.w	fp, #1
 8022d8c:	d159      	bne.n	8022e42 <_scanf_i+0x126>
 8022d8e:	6862      	ldr	r2, [r4, #4]
 8022d90:	b92a      	cbnz	r2, 8022d9e <_scanf_i+0x82>
 8022d92:	6822      	ldr	r2, [r4, #0]
 8022d94:	2308      	movs	r3, #8
 8022d96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8022d9a:	6063      	str	r3, [r4, #4]
 8022d9c:	6022      	str	r2, [r4, #0]
 8022d9e:	6822      	ldr	r2, [r4, #0]
 8022da0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8022da4:	6022      	str	r2, [r4, #0]
 8022da6:	68a2      	ldr	r2, [r4, #8]
 8022da8:	1e51      	subs	r1, r2, #1
 8022daa:	60a1      	str	r1, [r4, #8]
 8022dac:	b192      	cbz	r2, 8022dd4 <_scanf_i+0xb8>
 8022dae:	6832      	ldr	r2, [r6, #0]
 8022db0:	1c51      	adds	r1, r2, #1
 8022db2:	6031      	str	r1, [r6, #0]
 8022db4:	7812      	ldrb	r2, [r2, #0]
 8022db6:	f805 2b01 	strb.w	r2, [r5], #1
 8022dba:	6872      	ldr	r2, [r6, #4]
 8022dbc:	3a01      	subs	r2, #1
 8022dbe:	2a00      	cmp	r2, #0
 8022dc0:	6072      	str	r2, [r6, #4]
 8022dc2:	dc07      	bgt.n	8022dd4 <_scanf_i+0xb8>
 8022dc4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8022dc8:	4631      	mov	r1, r6
 8022dca:	4650      	mov	r0, sl
 8022dcc:	4790      	blx	r2
 8022dce:	2800      	cmp	r0, #0
 8022dd0:	f040 8085 	bne.w	8022ede <_scanf_i+0x1c2>
 8022dd4:	f10b 0b01 	add.w	fp, fp, #1
 8022dd8:	f1bb 0f03 	cmp.w	fp, #3
 8022ddc:	d1cb      	bne.n	8022d76 <_scanf_i+0x5a>
 8022dde:	6863      	ldr	r3, [r4, #4]
 8022de0:	b90b      	cbnz	r3, 8022de6 <_scanf_i+0xca>
 8022de2:	230a      	movs	r3, #10
 8022de4:	6063      	str	r3, [r4, #4]
 8022de6:	6863      	ldr	r3, [r4, #4]
 8022de8:	4945      	ldr	r1, [pc, #276]	; (8022f00 <_scanf_i+0x1e4>)
 8022dea:	6960      	ldr	r0, [r4, #20]
 8022dec:	1ac9      	subs	r1, r1, r3
 8022dee:	f000 f89b 	bl	8022f28 <__sccl>
 8022df2:	f04f 0b00 	mov.w	fp, #0
 8022df6:	68a3      	ldr	r3, [r4, #8]
 8022df8:	6822      	ldr	r2, [r4, #0]
 8022dfa:	2b00      	cmp	r3, #0
 8022dfc:	d03d      	beq.n	8022e7a <_scanf_i+0x15e>
 8022dfe:	6831      	ldr	r1, [r6, #0]
 8022e00:	6960      	ldr	r0, [r4, #20]
 8022e02:	f891 c000 	ldrb.w	ip, [r1]
 8022e06:	f810 000c 	ldrb.w	r0, [r0, ip]
 8022e0a:	2800      	cmp	r0, #0
 8022e0c:	d035      	beq.n	8022e7a <_scanf_i+0x15e>
 8022e0e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8022e12:	d124      	bne.n	8022e5e <_scanf_i+0x142>
 8022e14:	0510      	lsls	r0, r2, #20
 8022e16:	d522      	bpl.n	8022e5e <_scanf_i+0x142>
 8022e18:	f10b 0b01 	add.w	fp, fp, #1
 8022e1c:	f1b9 0f00 	cmp.w	r9, #0
 8022e20:	d003      	beq.n	8022e2a <_scanf_i+0x10e>
 8022e22:	3301      	adds	r3, #1
 8022e24:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8022e28:	60a3      	str	r3, [r4, #8]
 8022e2a:	6873      	ldr	r3, [r6, #4]
 8022e2c:	3b01      	subs	r3, #1
 8022e2e:	2b00      	cmp	r3, #0
 8022e30:	6073      	str	r3, [r6, #4]
 8022e32:	dd1b      	ble.n	8022e6c <_scanf_i+0x150>
 8022e34:	6833      	ldr	r3, [r6, #0]
 8022e36:	3301      	adds	r3, #1
 8022e38:	6033      	str	r3, [r6, #0]
 8022e3a:	68a3      	ldr	r3, [r4, #8]
 8022e3c:	3b01      	subs	r3, #1
 8022e3e:	60a3      	str	r3, [r4, #8]
 8022e40:	e7d9      	b.n	8022df6 <_scanf_i+0xda>
 8022e42:	f1bb 0f02 	cmp.w	fp, #2
 8022e46:	d1ae      	bne.n	8022da6 <_scanf_i+0x8a>
 8022e48:	6822      	ldr	r2, [r4, #0]
 8022e4a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8022e4e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8022e52:	d1bf      	bne.n	8022dd4 <_scanf_i+0xb8>
 8022e54:	2310      	movs	r3, #16
 8022e56:	6063      	str	r3, [r4, #4]
 8022e58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8022e5c:	e7a2      	b.n	8022da4 <_scanf_i+0x88>
 8022e5e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8022e62:	6022      	str	r2, [r4, #0]
 8022e64:	780b      	ldrb	r3, [r1, #0]
 8022e66:	f805 3b01 	strb.w	r3, [r5], #1
 8022e6a:	e7de      	b.n	8022e2a <_scanf_i+0x10e>
 8022e6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8022e70:	4631      	mov	r1, r6
 8022e72:	4650      	mov	r0, sl
 8022e74:	4798      	blx	r3
 8022e76:	2800      	cmp	r0, #0
 8022e78:	d0df      	beq.n	8022e3a <_scanf_i+0x11e>
 8022e7a:	6823      	ldr	r3, [r4, #0]
 8022e7c:	05d9      	lsls	r1, r3, #23
 8022e7e:	d50d      	bpl.n	8022e9c <_scanf_i+0x180>
 8022e80:	42bd      	cmp	r5, r7
 8022e82:	d909      	bls.n	8022e98 <_scanf_i+0x17c>
 8022e84:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8022e88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8022e8c:	4632      	mov	r2, r6
 8022e8e:	4650      	mov	r0, sl
 8022e90:	4798      	blx	r3
 8022e92:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8022e96:	464d      	mov	r5, r9
 8022e98:	42bd      	cmp	r5, r7
 8022e9a:	d028      	beq.n	8022eee <_scanf_i+0x1d2>
 8022e9c:	6822      	ldr	r2, [r4, #0]
 8022e9e:	f012 0210 	ands.w	r2, r2, #16
 8022ea2:	d113      	bne.n	8022ecc <_scanf_i+0x1b0>
 8022ea4:	702a      	strb	r2, [r5, #0]
 8022ea6:	6863      	ldr	r3, [r4, #4]
 8022ea8:	9e01      	ldr	r6, [sp, #4]
 8022eaa:	4639      	mov	r1, r7
 8022eac:	4650      	mov	r0, sl
 8022eae:	47b0      	blx	r6
 8022eb0:	f8d8 3000 	ldr.w	r3, [r8]
 8022eb4:	6821      	ldr	r1, [r4, #0]
 8022eb6:	1d1a      	adds	r2, r3, #4
 8022eb8:	f8c8 2000 	str.w	r2, [r8]
 8022ebc:	f011 0f20 	tst.w	r1, #32
 8022ec0:	681b      	ldr	r3, [r3, #0]
 8022ec2:	d00f      	beq.n	8022ee4 <_scanf_i+0x1c8>
 8022ec4:	6018      	str	r0, [r3, #0]
 8022ec6:	68e3      	ldr	r3, [r4, #12]
 8022ec8:	3301      	adds	r3, #1
 8022eca:	60e3      	str	r3, [r4, #12]
 8022ecc:	1bed      	subs	r5, r5, r7
 8022ece:	44ab      	add	fp, r5
 8022ed0:	6925      	ldr	r5, [r4, #16]
 8022ed2:	445d      	add	r5, fp
 8022ed4:	6125      	str	r5, [r4, #16]
 8022ed6:	2000      	movs	r0, #0
 8022ed8:	b007      	add	sp, #28
 8022eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ede:	f04f 0b00 	mov.w	fp, #0
 8022ee2:	e7ca      	b.n	8022e7a <_scanf_i+0x15e>
 8022ee4:	07ca      	lsls	r2, r1, #31
 8022ee6:	bf4c      	ite	mi
 8022ee8:	8018      	strhmi	r0, [r3, #0]
 8022eea:	6018      	strpl	r0, [r3, #0]
 8022eec:	e7eb      	b.n	8022ec6 <_scanf_i+0x1aa>
 8022eee:	2001      	movs	r0, #1
 8022ef0:	e7f2      	b.n	8022ed8 <_scanf_i+0x1bc>
 8022ef2:	bf00      	nop
 8022ef4:	08027020 	.word	0x08027020
 8022ef8:	08023095 	.word	0x08023095
 8022efc:	08021b19 	.word	0x08021b19
 8022f00:	0802b20a 	.word	0x0802b20a

08022f04 <_read_r>:
 8022f04:	b538      	push	{r3, r4, r5, lr}
 8022f06:	4d07      	ldr	r5, [pc, #28]	; (8022f24 <_read_r+0x20>)
 8022f08:	4604      	mov	r4, r0
 8022f0a:	4608      	mov	r0, r1
 8022f0c:	4611      	mov	r1, r2
 8022f0e:	2200      	movs	r2, #0
 8022f10:	602a      	str	r2, [r5, #0]
 8022f12:	461a      	mov	r2, r3
 8022f14:	f7df fb5e 	bl	80025d4 <_read>
 8022f18:	1c43      	adds	r3, r0, #1
 8022f1a:	d102      	bne.n	8022f22 <_read_r+0x1e>
 8022f1c:	682b      	ldr	r3, [r5, #0]
 8022f1e:	b103      	cbz	r3, 8022f22 <_read_r+0x1e>
 8022f20:	6023      	str	r3, [r4, #0]
 8022f22:	bd38      	pop	{r3, r4, r5, pc}
 8022f24:	2001b9ac 	.word	0x2001b9ac

08022f28 <__sccl>:
 8022f28:	b570      	push	{r4, r5, r6, lr}
 8022f2a:	780b      	ldrb	r3, [r1, #0]
 8022f2c:	4604      	mov	r4, r0
 8022f2e:	2b5e      	cmp	r3, #94	; 0x5e
 8022f30:	bf0b      	itete	eq
 8022f32:	784b      	ldrbeq	r3, [r1, #1]
 8022f34:	1c48      	addne	r0, r1, #1
 8022f36:	1c88      	addeq	r0, r1, #2
 8022f38:	2200      	movne	r2, #0
 8022f3a:	bf08      	it	eq
 8022f3c:	2201      	moveq	r2, #1
 8022f3e:	1e61      	subs	r1, r4, #1
 8022f40:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8022f44:	f801 2f01 	strb.w	r2, [r1, #1]!
 8022f48:	42a9      	cmp	r1, r5
 8022f4a:	d1fb      	bne.n	8022f44 <__sccl+0x1c>
 8022f4c:	b90b      	cbnz	r3, 8022f52 <__sccl+0x2a>
 8022f4e:	3801      	subs	r0, #1
 8022f50:	bd70      	pop	{r4, r5, r6, pc}
 8022f52:	f082 0101 	eor.w	r1, r2, #1
 8022f56:	54e1      	strb	r1, [r4, r3]
 8022f58:	1c42      	adds	r2, r0, #1
 8022f5a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8022f5e:	2d2d      	cmp	r5, #45	; 0x2d
 8022f60:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 8022f64:	4610      	mov	r0, r2
 8022f66:	d006      	beq.n	8022f76 <__sccl+0x4e>
 8022f68:	2d5d      	cmp	r5, #93	; 0x5d
 8022f6a:	d0f1      	beq.n	8022f50 <__sccl+0x28>
 8022f6c:	b90d      	cbnz	r5, 8022f72 <__sccl+0x4a>
 8022f6e:	4630      	mov	r0, r6
 8022f70:	e7ee      	b.n	8022f50 <__sccl+0x28>
 8022f72:	462b      	mov	r3, r5
 8022f74:	e7ef      	b.n	8022f56 <__sccl+0x2e>
 8022f76:	7816      	ldrb	r6, [r2, #0]
 8022f78:	2e5d      	cmp	r6, #93	; 0x5d
 8022f7a:	d0fa      	beq.n	8022f72 <__sccl+0x4a>
 8022f7c:	42b3      	cmp	r3, r6
 8022f7e:	dcf8      	bgt.n	8022f72 <__sccl+0x4a>
 8022f80:	4618      	mov	r0, r3
 8022f82:	3001      	adds	r0, #1
 8022f84:	4286      	cmp	r6, r0
 8022f86:	5421      	strb	r1, [r4, r0]
 8022f88:	dcfb      	bgt.n	8022f82 <__sccl+0x5a>
 8022f8a:	43d8      	mvns	r0, r3
 8022f8c:	4430      	add	r0, r6
 8022f8e:	1c5d      	adds	r5, r3, #1
 8022f90:	42b3      	cmp	r3, r6
 8022f92:	bfa8      	it	ge
 8022f94:	2000      	movge	r0, #0
 8022f96:	182b      	adds	r3, r5, r0
 8022f98:	3202      	adds	r2, #2
 8022f9a:	e7de      	b.n	8022f5a <__sccl+0x32>

08022f9c <_strtoul_l.isra.0>:
 8022f9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022fa0:	4e3b      	ldr	r6, [pc, #236]	; (8023090 <_strtoul_l.isra.0+0xf4>)
 8022fa2:	4686      	mov	lr, r0
 8022fa4:	468c      	mov	ip, r1
 8022fa6:	4660      	mov	r0, ip
 8022fa8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8022fac:	5da5      	ldrb	r5, [r4, r6]
 8022fae:	f015 0508 	ands.w	r5, r5, #8
 8022fb2:	d1f8      	bne.n	8022fa6 <_strtoul_l.isra.0+0xa>
 8022fb4:	2c2d      	cmp	r4, #45	; 0x2d
 8022fb6:	d134      	bne.n	8023022 <_strtoul_l.isra.0+0x86>
 8022fb8:	f89c 4000 	ldrb.w	r4, [ip]
 8022fbc:	f04f 0801 	mov.w	r8, #1
 8022fc0:	f100 0c02 	add.w	ip, r0, #2
 8022fc4:	2b00      	cmp	r3, #0
 8022fc6:	d05e      	beq.n	8023086 <_strtoul_l.isra.0+0xea>
 8022fc8:	2b10      	cmp	r3, #16
 8022fca:	d10c      	bne.n	8022fe6 <_strtoul_l.isra.0+0x4a>
 8022fcc:	2c30      	cmp	r4, #48	; 0x30
 8022fce:	d10a      	bne.n	8022fe6 <_strtoul_l.isra.0+0x4a>
 8022fd0:	f89c 0000 	ldrb.w	r0, [ip]
 8022fd4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8022fd8:	2858      	cmp	r0, #88	; 0x58
 8022fda:	d14f      	bne.n	802307c <_strtoul_l.isra.0+0xe0>
 8022fdc:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8022fe0:	2310      	movs	r3, #16
 8022fe2:	f10c 0c02 	add.w	ip, ip, #2
 8022fe6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8022fea:	2500      	movs	r5, #0
 8022fec:	fbb7 f7f3 	udiv	r7, r7, r3
 8022ff0:	fb03 f907 	mul.w	r9, r3, r7
 8022ff4:	ea6f 0909 	mvn.w	r9, r9
 8022ff8:	4628      	mov	r0, r5
 8022ffa:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8022ffe:	2e09      	cmp	r6, #9
 8023000:	d818      	bhi.n	8023034 <_strtoul_l.isra.0+0x98>
 8023002:	4634      	mov	r4, r6
 8023004:	42a3      	cmp	r3, r4
 8023006:	dd24      	ble.n	8023052 <_strtoul_l.isra.0+0xb6>
 8023008:	2d00      	cmp	r5, #0
 802300a:	db1f      	blt.n	802304c <_strtoul_l.isra.0+0xb0>
 802300c:	4287      	cmp	r7, r0
 802300e:	d31d      	bcc.n	802304c <_strtoul_l.isra.0+0xb0>
 8023010:	d101      	bne.n	8023016 <_strtoul_l.isra.0+0x7a>
 8023012:	45a1      	cmp	r9, r4
 8023014:	db1a      	blt.n	802304c <_strtoul_l.isra.0+0xb0>
 8023016:	fb00 4003 	mla	r0, r0, r3, r4
 802301a:	2501      	movs	r5, #1
 802301c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8023020:	e7eb      	b.n	8022ffa <_strtoul_l.isra.0+0x5e>
 8023022:	2c2b      	cmp	r4, #43	; 0x2b
 8023024:	bf08      	it	eq
 8023026:	f89c 4000 	ldrbeq.w	r4, [ip]
 802302a:	46a8      	mov	r8, r5
 802302c:	bf08      	it	eq
 802302e:	f100 0c02 	addeq.w	ip, r0, #2
 8023032:	e7c7      	b.n	8022fc4 <_strtoul_l.isra.0+0x28>
 8023034:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8023038:	2e19      	cmp	r6, #25
 802303a:	d801      	bhi.n	8023040 <_strtoul_l.isra.0+0xa4>
 802303c:	3c37      	subs	r4, #55	; 0x37
 802303e:	e7e1      	b.n	8023004 <_strtoul_l.isra.0+0x68>
 8023040:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8023044:	2e19      	cmp	r6, #25
 8023046:	d804      	bhi.n	8023052 <_strtoul_l.isra.0+0xb6>
 8023048:	3c57      	subs	r4, #87	; 0x57
 802304a:	e7db      	b.n	8023004 <_strtoul_l.isra.0+0x68>
 802304c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8023050:	e7e4      	b.n	802301c <_strtoul_l.isra.0+0x80>
 8023052:	2d00      	cmp	r5, #0
 8023054:	da07      	bge.n	8023066 <_strtoul_l.isra.0+0xca>
 8023056:	2322      	movs	r3, #34	; 0x22
 8023058:	f8ce 3000 	str.w	r3, [lr]
 802305c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023060:	b942      	cbnz	r2, 8023074 <_strtoul_l.isra.0+0xd8>
 8023062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023066:	f1b8 0f00 	cmp.w	r8, #0
 802306a:	d000      	beq.n	802306e <_strtoul_l.isra.0+0xd2>
 802306c:	4240      	negs	r0, r0
 802306e:	2a00      	cmp	r2, #0
 8023070:	d0f7      	beq.n	8023062 <_strtoul_l.isra.0+0xc6>
 8023072:	b10d      	cbz	r5, 8023078 <_strtoul_l.isra.0+0xdc>
 8023074:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8023078:	6011      	str	r1, [r2, #0]
 802307a:	e7f2      	b.n	8023062 <_strtoul_l.isra.0+0xc6>
 802307c:	2430      	movs	r4, #48	; 0x30
 802307e:	2b00      	cmp	r3, #0
 8023080:	d1b1      	bne.n	8022fe6 <_strtoul_l.isra.0+0x4a>
 8023082:	2308      	movs	r3, #8
 8023084:	e7af      	b.n	8022fe6 <_strtoul_l.isra.0+0x4a>
 8023086:	2c30      	cmp	r4, #48	; 0x30
 8023088:	d0a2      	beq.n	8022fd0 <_strtoul_l.isra.0+0x34>
 802308a:	230a      	movs	r3, #10
 802308c:	e7ab      	b.n	8022fe6 <_strtoul_l.isra.0+0x4a>
 802308e:	bf00      	nop
 8023090:	0802afa5 	.word	0x0802afa5

08023094 <_strtoul_r>:
 8023094:	f7ff bf82 	b.w	8022f9c <_strtoul_l.isra.0>

08023098 <__submore>:
 8023098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802309c:	460c      	mov	r4, r1
 802309e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80230a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80230a4:	4299      	cmp	r1, r3
 80230a6:	d11d      	bne.n	80230e4 <__submore+0x4c>
 80230a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80230ac:	f7fe f9e0 	bl	8021470 <_malloc_r>
 80230b0:	b918      	cbnz	r0, 80230ba <__submore+0x22>
 80230b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80230b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80230ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80230be:	63a3      	str	r3, [r4, #56]	; 0x38
 80230c0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80230c4:	6360      	str	r0, [r4, #52]	; 0x34
 80230c6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80230ca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80230ce:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80230d2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80230d6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80230da:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80230de:	6020      	str	r0, [r4, #0]
 80230e0:	2000      	movs	r0, #0
 80230e2:	e7e8      	b.n	80230b6 <__submore+0x1e>
 80230e4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80230e6:	0077      	lsls	r7, r6, #1
 80230e8:	463a      	mov	r2, r7
 80230ea:	f7fe ff7d 	bl	8021fe8 <_realloc_r>
 80230ee:	4605      	mov	r5, r0
 80230f0:	2800      	cmp	r0, #0
 80230f2:	d0de      	beq.n	80230b2 <__submore+0x1a>
 80230f4:	eb00 0806 	add.w	r8, r0, r6
 80230f8:	4601      	mov	r1, r0
 80230fa:	4632      	mov	r2, r6
 80230fc:	4640      	mov	r0, r8
 80230fe:	f7fe f937 	bl	8021370 <memcpy>
 8023102:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8023106:	f8c4 8000 	str.w	r8, [r4]
 802310a:	e7e9      	b.n	80230e0 <__submore+0x48>

0802310c <abort>:
 802310c:	b508      	push	{r3, lr}
 802310e:	2006      	movs	r0, #6
 8023110:	f000 f856 	bl	80231c0 <raise>
 8023114:	2001      	movs	r0, #1
 8023116:	f7df fa53 	bl	80025c0 <_exit>
	...

0802311c <_fstat_r>:
 802311c:	b538      	push	{r3, r4, r5, lr}
 802311e:	4d07      	ldr	r5, [pc, #28]	; (802313c <_fstat_r+0x20>)
 8023120:	2300      	movs	r3, #0
 8023122:	4604      	mov	r4, r0
 8023124:	4608      	mov	r0, r1
 8023126:	4611      	mov	r1, r2
 8023128:	602b      	str	r3, [r5, #0]
 802312a:	f7df fa98 	bl	800265e <_fstat>
 802312e:	1c43      	adds	r3, r0, #1
 8023130:	d102      	bne.n	8023138 <_fstat_r+0x1c>
 8023132:	682b      	ldr	r3, [r5, #0]
 8023134:	b103      	cbz	r3, 8023138 <_fstat_r+0x1c>
 8023136:	6023      	str	r3, [r4, #0]
 8023138:	bd38      	pop	{r3, r4, r5, pc}
 802313a:	bf00      	nop
 802313c:	2001b9ac 	.word	0x2001b9ac

08023140 <_isatty_r>:
 8023140:	b538      	push	{r3, r4, r5, lr}
 8023142:	4d06      	ldr	r5, [pc, #24]	; (802315c <_isatty_r+0x1c>)
 8023144:	2300      	movs	r3, #0
 8023146:	4604      	mov	r4, r0
 8023148:	4608      	mov	r0, r1
 802314a:	602b      	str	r3, [r5, #0]
 802314c:	f7df fa97 	bl	800267e <_isatty>
 8023150:	1c43      	adds	r3, r0, #1
 8023152:	d102      	bne.n	802315a <_isatty_r+0x1a>
 8023154:	682b      	ldr	r3, [r5, #0]
 8023156:	b103      	cbz	r3, 802315a <_isatty_r+0x1a>
 8023158:	6023      	str	r3, [r4, #0]
 802315a:	bd38      	pop	{r3, r4, r5, pc}
 802315c:	2001b9ac 	.word	0x2001b9ac

08023160 <_malloc_usable_size_r>:
 8023160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023164:	1f18      	subs	r0, r3, #4
 8023166:	2b00      	cmp	r3, #0
 8023168:	bfbc      	itt	lt
 802316a:	580b      	ldrlt	r3, [r1, r0]
 802316c:	18c0      	addlt	r0, r0, r3
 802316e:	4770      	bx	lr

08023170 <_raise_r>:
 8023170:	291f      	cmp	r1, #31
 8023172:	b538      	push	{r3, r4, r5, lr}
 8023174:	4604      	mov	r4, r0
 8023176:	460d      	mov	r5, r1
 8023178:	d904      	bls.n	8023184 <_raise_r+0x14>
 802317a:	2316      	movs	r3, #22
 802317c:	6003      	str	r3, [r0, #0]
 802317e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8023182:	bd38      	pop	{r3, r4, r5, pc}
 8023184:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8023186:	b112      	cbz	r2, 802318e <_raise_r+0x1e>
 8023188:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802318c:	b94b      	cbnz	r3, 80231a2 <_raise_r+0x32>
 802318e:	4620      	mov	r0, r4
 8023190:	f000 f830 	bl	80231f4 <_getpid_r>
 8023194:	462a      	mov	r2, r5
 8023196:	4601      	mov	r1, r0
 8023198:	4620      	mov	r0, r4
 802319a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802319e:	f000 b817 	b.w	80231d0 <_kill_r>
 80231a2:	2b01      	cmp	r3, #1
 80231a4:	d00a      	beq.n	80231bc <_raise_r+0x4c>
 80231a6:	1c59      	adds	r1, r3, #1
 80231a8:	d103      	bne.n	80231b2 <_raise_r+0x42>
 80231aa:	2316      	movs	r3, #22
 80231ac:	6003      	str	r3, [r0, #0]
 80231ae:	2001      	movs	r0, #1
 80231b0:	e7e7      	b.n	8023182 <_raise_r+0x12>
 80231b2:	2400      	movs	r4, #0
 80231b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80231b8:	4628      	mov	r0, r5
 80231ba:	4798      	blx	r3
 80231bc:	2000      	movs	r0, #0
 80231be:	e7e0      	b.n	8023182 <_raise_r+0x12>

080231c0 <raise>:
 80231c0:	4b02      	ldr	r3, [pc, #8]	; (80231cc <raise+0xc>)
 80231c2:	4601      	mov	r1, r0
 80231c4:	6818      	ldr	r0, [r3, #0]
 80231c6:	f7ff bfd3 	b.w	8023170 <_raise_r>
 80231ca:	bf00      	nop
 80231cc:	20000750 	.word	0x20000750

080231d0 <_kill_r>:
 80231d0:	b538      	push	{r3, r4, r5, lr}
 80231d2:	4d07      	ldr	r5, [pc, #28]	; (80231f0 <_kill_r+0x20>)
 80231d4:	2300      	movs	r3, #0
 80231d6:	4604      	mov	r4, r0
 80231d8:	4608      	mov	r0, r1
 80231da:	4611      	mov	r1, r2
 80231dc:	602b      	str	r3, [r5, #0]
 80231de:	f7df f9dd 	bl	800259c <_kill>
 80231e2:	1c43      	adds	r3, r0, #1
 80231e4:	d102      	bne.n	80231ec <_kill_r+0x1c>
 80231e6:	682b      	ldr	r3, [r5, #0]
 80231e8:	b103      	cbz	r3, 80231ec <_kill_r+0x1c>
 80231ea:	6023      	str	r3, [r4, #0]
 80231ec:	bd38      	pop	{r3, r4, r5, pc}
 80231ee:	bf00      	nop
 80231f0:	2001b9ac 	.word	0x2001b9ac

080231f4 <_getpid_r>:
 80231f4:	f7df b9ca 	b.w	800258c <_getpid>

080231f8 <_init>:
 80231f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80231fa:	bf00      	nop
 80231fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80231fe:	bc08      	pop	{r3}
 8023200:	469e      	mov	lr, r3
 8023202:	4770      	bx	lr

08023204 <_fini>:
 8023204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023206:	bf00      	nop
 8023208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802320a:	bc08      	pop	{r3}
 802320c:	469e      	mov	lr, r3
 802320e:	4770      	bx	lr
