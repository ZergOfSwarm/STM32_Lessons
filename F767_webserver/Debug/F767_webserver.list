
F767_webserver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001992c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005048  08019b2c  08019b2c  00029b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801eb74  0801eb74  00030794  2**0
                  CONTENTS
  4 .ARM          00000008  0801eb74  0801eb74  0002eb74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801eb7c  0801eb7c  00030794  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801eb7c  0801eb7c  0002eb7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801eb80  0801eb80  0002eb80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000794  20000000  0801eb84  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00018440  20000794  0801f318  00030794  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20018bd4  0801f318  00038bd4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030794  2**0
                  CONTENTS, READONLY
 12 .debug_info   00050527  00000000  00000000  000307c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000092fd  00000000  00000000  00080ce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002950  00000000  00000000  00089fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002838  00000000  00000000  0008c938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003acee  00000000  00000000  0008f170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003e760  00000000  00000000  000c9e5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00127986  00000000  00000000  001085be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022ff44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bad0  00000000  00000000  0022ff98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000794 	.word	0x20000794
 800021c:	00000000 	.word	0x00000000
 8000220:	08019b14 	.word	0x08019b14

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000798 	.word	0x20000798
 800023c:	08019b14 	.word	0x08019b14

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d101      	bne.n	8000624 <cJSON_strdup+0x1c>
    {
        return NULL;
 8000620:	2300      	movs	r3, #0
 8000622:	e015      	b.n	8000650 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f7ff fe15 	bl	8000254 <strlen>
 800062a:	4603      	mov	r3, r0
 800062c:	3301      	adds	r3, #1
 800062e:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	68f8      	ldr	r0, [r7, #12]
 8000636:	4798      	blx	r3
 8000638:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d101      	bne.n	8000644 <cJSON_strdup+0x3c>
    {
        return NULL;
 8000640:	2300      	movs	r3, #0
 8000642:	e005      	b.n	8000650 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8000644:	68fa      	ldr	r2, [r7, #12]
 8000646:	6879      	ldr	r1, [r7, #4]
 8000648:	68b8      	ldr	r0, [r7, #8]
 800064a:	f017 fb1f 	bl	8017c8c <memcpy>

    return copy;
 800064e:	68bb      	ldr	r3, [r7, #8]
}
 8000650:	4618      	mov	r0, r3
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2028      	movs	r0, #40	; 0x28
 8000666:	4798      	blx	r3
 8000668:	60f8      	str	r0, [r7, #12]
    if (node)
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d004      	beq.n	800067a <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8000670:	2228      	movs	r2, #40	; 0x28
 8000672:	2100      	movs	r1, #0
 8000674:	68f8      	ldr	r0, [r7, #12]
 8000676:	f017 fb31 	bl	8017cdc <memset>
    }

    return node;
 800067a:	68fb      	ldr	r3, [r7, #12]
}
 800067c:	4618      	mov	r0, r3
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8000690:	e037      	b.n	8000702 <cJSON_Delete+0x7e>
    {
        next = item->next;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d108      	bne.n	80006b6 <cJSON_Delete+0x32>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d004      	beq.n	80006b6 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ffe7 	bl	8000684 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	68db      	ldr	r3, [r3, #12]
 80006ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d109      	bne.n	80006d6 <cJSON_Delete+0x52>
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	691b      	ldr	r3, [r3, #16]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d005      	beq.n	80006d6 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <cJSON_Delete+0x90>)
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	6912      	ldr	r2, [r2, #16]
 80006d2:	4610      	mov	r0, r2
 80006d4:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	68db      	ldr	r3, [r3, #12]
 80006da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d109      	bne.n	80006f6 <cJSON_Delete+0x72>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6a1b      	ldr	r3, [r3, #32]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d005      	beq.n	80006f6 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 80006ea:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <cJSON_Delete+0x90>)
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	6a12      	ldr	r2, [r2, #32]
 80006f2:	4610      	mov	r0, r2
 80006f4:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 80006f6:	4b07      	ldr	r3, [pc, #28]	; (8000714 <cJSON_Delete+0x90>)
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	4798      	blx	r3
        item = next;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d1c4      	bne.n	8000692 <cJSON_Delete+0xe>
    }
}
 8000708:	bf00      	nop
 800070a:	bf00      	nop
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000000 	.word	0x20000000

08000718 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 800071c:	232e      	movs	r3, #46	; 0x2e
#endif
}
 800071e:	4618      	mov	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d003      	beq.n	8000748 <ensure+0x20>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d101      	bne.n	800074c <ensure+0x24>
    {
        return NULL;
 8000748:	2300      	movs	r3, #0
 800074a:	e083      	b.n	8000854 <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d007      	beq.n	8000764 <ensure+0x3c>
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	689a      	ldr	r2, [r3, #8]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	429a      	cmp	r2, r3
 800075e:	d301      	bcc.n	8000764 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8000760:	2300      	movs	r3, #0
 8000762:	e077      	b.n	8000854 <ensure+0x12c>
    }

    if (needed > INT_MAX)
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	da01      	bge.n	800076e <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 800076a:	2300      	movs	r3, #0
 800076c:	e072      	b.n	8000854 <ensure+0x12c>
    }

    needed += p->offset + 1;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	689a      	ldr	r2, [r3, #8]
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	4413      	add	r3, r2
 8000776:	3301      	adds	r3, #1
 8000778:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	683a      	ldr	r2, [r7, #0]
 8000780:	429a      	cmp	r2, r3
 8000782:	d805      	bhi.n	8000790 <ensure+0x68>
    {
        return p->buffer + p->offset;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	4413      	add	r3, r2
 800078e:	e061      	b.n	8000854 <ensure+0x12c>
    }

    if (p->noalloc) {
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	691b      	ldr	r3, [r3, #16]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <ensure+0x74>
        return NULL;
 8000798:	2300      	movs	r3, #0
 800079a:	e05b      	b.n	8000854 <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007a2:	d308      	bcc.n	80007b6 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	db03      	blt.n	80007b2 <ensure+0x8a>
        {
            newsize = INT_MAX;
 80007aa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	e004      	b.n	80007bc <ensure+0x94>
        }
        else
        {
            return NULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	e04e      	b.n	8000854 <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6a1b      	ldr	r3, [r3, #32]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d018      	beq.n	80007f6 <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	6a1b      	ldr	r3, [r3, #32]
 80007c8:	687a      	ldr	r2, [r7, #4]
 80007ca:	6812      	ldr	r2, [r2, #0]
 80007cc:	68b9      	ldr	r1, [r7, #8]
 80007ce:	4610      	mov	r0, r2
 80007d0:	4798      	blx	r3
 80007d2:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d132      	bne.n	8000840 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	6812      	ldr	r2, [r2, #0]
 80007e2:	4610      	mov	r0, r2
 80007e4:	4798      	blx	r3
            p->length = 0;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2200      	movs	r2, #0
 80007ea:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]

            return NULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	e02e      	b.n	8000854 <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	68b8      	ldr	r0, [r7, #8]
 80007fc:	4798      	blx	r3
 80007fe:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d10d      	bne.n	8000822 <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	69db      	ldr	r3, [r3, #28]
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	6812      	ldr	r2, [r2, #0]
 800080e:	4610      	mov	r0, r2
 8000810:	4798      	blx	r3
            p->length = 0;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2200      	movs	r2, #0
 8000816:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]

            return NULL;
 800081e:	2300      	movs	r3, #0
 8000820:	e018      	b.n	8000854 <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6819      	ldr	r1, [r3, #0]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	3301      	adds	r3, #1
 800082c:	461a      	mov	r2, r3
 800082e:	68f8      	ldr	r0, [r7, #12]
 8000830:	f017 fa2c 	bl	8017c8c <memcpy>
        p->hooks.deallocate(p->buffer);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	69db      	ldr	r3, [r3, #28]
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	6812      	ldr	r2, [r2, #0]
 800083c:	4610      	mov	r0, r2
 800083e:	4798      	blx	r3
    }
    p->length = newsize;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	68ba      	ldr	r2, [r7, #8]
 8000844:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	68fa      	ldr	r2, [r7, #12]
 800084a:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	68fa      	ldr	r2, [r7, #12]
 8000852:	4413      	add	r3, r2
}
 8000854:	4618      	mov	r0, r3
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d013      	beq.n	8000896 <update_offset+0x3a>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d00f      	beq.n	8000896 <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	4413      	add	r3, r2
 8000880:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	689c      	ldr	r4, [r3, #8]
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	f7ff fce4 	bl	8000254 <strlen>
 800088c:	4603      	mov	r3, r0
 800088e:	18e2      	adds	r2, r4, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	e000      	b.n	8000898 <update_offset+0x3c>
        return;
 8000896:	bf00      	nop
}
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	bd90      	pop	{r4, r7, pc}
	...

080008a0 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b087      	sub	sp, #28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	ed87 0b02 	vstr	d0, [r7, #8]
 80008aa:	ed87 1b00 	vstr	d1, [r7]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 80008ae:	ed97 7b02 	vldr	d7, [r7, #8]
 80008b2:	eeb0 6bc7 	vabs.f64	d6, d7
 80008b6:	ed97 7b00 	vldr	d7, [r7]
 80008ba:	eeb0 7bc7 	vabs.f64	d7, d7
 80008be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80008c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008c6:	dd04      	ble.n	80008d2 <compare_double+0x32>
 80008c8:	ed97 7b02 	vldr	d7, [r7, #8]
 80008cc:	eeb0 7bc7 	vabs.f64	d7, d7
 80008d0:	e003      	b.n	80008da <compare_double+0x3a>
 80008d2:	ed97 7b00 	vldr	d7, [r7]
 80008d6:	eeb0 7bc7 	vabs.f64	d7, d7
 80008da:	ed87 7b04 	vstr	d7, [r7, #16]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 80008de:	ed97 6b02 	vldr	d6, [r7, #8]
 80008e2:	ed97 7b00 	vldr	d7, [r7]
 80008e6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80008ea:	eeb0 6bc7 	vabs.f64	d6, d7
 80008ee:	ed97 7b04 	vldr	d7, [r7, #16]
 80008f2:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000918 <compare_double+0x78>
 80008f6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80008fa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80008fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000902:	bf94      	ite	ls
 8000904:	2301      	movls	r3, #1
 8000906:	2300      	movhi	r3, #0
 8000908:	b2db      	uxtb	r3, r3
}
 800090a:	4618      	mov	r0, r3
 800090c:	371c      	adds	r7, #28
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	00000000 	.word	0x00000000
 800091c:	3cb00000 	.word	0x3cb00000

08000920 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b092      	sub	sp, #72	; 0x48
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800092a:	2300      	movs	r3, #0
 800092c:	63fb      	str	r3, [r7, #60]	; 0x3c
    double d = item->valuedouble;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000934:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int length = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	f107 0318 	add.w	r3, r7, #24
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
 8000954:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 8000956:	f7ff fedf 	bl	8000718 <get_decimal_point>
 800095a:	4603      	mov	r3, r0
 800095c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    double test = 0.0;
 8000960:	f04f 0200 	mov.w	r2, #0
 8000964:	f04f 0300 	mov.w	r3, #0
 8000968:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d101      	bne.n	8000976 <print_number+0x56>
    {
        return false;
 8000972:	2300      	movs	r3, #0
 8000974:	e0a2      	b.n	8000abc <print_number+0x19c>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 8000976:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 800097a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800097e:	eeb4 6b47 	vcmp.f64	d6, d7
 8000982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000986:	d612      	bvs.n	80009ae <print_number+0x8e>
 8000988:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800098c:	eeb0 7bc7 	vabs.f64	d7, d7
 8000990:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8000ac8 <print_number+0x1a8>
 8000994:	eeb4 7b46 	vcmp.f64	d7, d6
 8000998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800099c:	bfd4      	ite	le
 800099e:	2301      	movle	r3, #1
 80009a0:	2300      	movgt	r3, #0
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	f083 0301 	eor.w	r3, r3, #1
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d007      	beq.n	80009be <print_number+0x9e>
    {
        length = sprintf((char*)number_buffer, "null");
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4947      	ldr	r1, [pc, #284]	; (8000ad0 <print_number+0x1b0>)
 80009b4:	4618      	mov	r0, r3
 80009b6:	f017 fbc7 	bl	8018148 <siprintf>
 80009ba:	6478      	str	r0, [r7, #68]	; 0x44
 80009bc:	e03c      	b.n	8000a38 <print_number+0x118>
    }
	else if(d == (double)item->valueint)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	ee07 3a90 	vmov	s15, r3
 80009c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009ca:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 80009ce:	eeb4 6b47 	vcmp.f64	d6, d7
 80009d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009d6:	d109      	bne.n	80009ec <print_number+0xcc>
	{
		length = sprintf((char*)number_buffer, "%d", item->valueint);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	695a      	ldr	r2, [r3, #20]
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	493c      	ldr	r1, [pc, #240]	; (8000ad4 <print_number+0x1b4>)
 80009e2:	4618      	mov	r0, r3
 80009e4:	f017 fbb0 	bl	8018148 <siprintf>
 80009e8:	6478      	str	r0, [r7, #68]	; 0x44
 80009ea:	e025      	b.n	8000a38 <print_number+0x118>
	}
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 80009ec:	f107 0014 	add.w	r0, r7, #20
 80009f0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80009f4:	4938      	ldr	r1, [pc, #224]	; (8000ad8 <print_number+0x1b8>)
 80009f6:	f017 fba7 	bl	8018148 <siprintf>
 80009fa:	6478      	str	r0, [r7, #68]	; 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 80009fc:	f107 0208 	add.w	r2, r7, #8
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4935      	ldr	r1, [pc, #212]	; (8000adc <print_number+0x1bc>)
 8000a06:	4618      	mov	r0, r3
 8000a08:	f017 fbbe 	bl	8018188 <siscanf>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d10a      	bne.n	8000a28 <print_number+0x108>
 8000a12:	ed97 7b02 	vldr	d7, [r7, #8]
 8000a16:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8000a1a:	eeb0 0b47 	vmov.f64	d0, d7
 8000a1e:	f7ff ff3f 	bl	80008a0 <compare_double>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d107      	bne.n	8000a38 <print_number+0x118>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 8000a28:	f107 0014 	add.w	r0, r7, #20
 8000a2c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000a30:	492b      	ldr	r1, [pc, #172]	; (8000ae0 <print_number+0x1c0>)
 8000a32:	f017 fb89 	bl	8018148 <siprintf>
 8000a36:	6478      	str	r0, [r7, #68]	; 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8000a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	db02      	blt.n	8000a44 <print_number+0x124>
 8000a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a40:	2b19      	cmp	r3, #25
 8000a42:	dd01      	ble.n	8000a48 <print_number+0x128>
    {
        return false;
 8000a44:	2300      	movs	r3, #0
 8000a46:	e039      	b.n	8000abc <print_number+0x19c>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8000a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	6838      	ldr	r0, [r7, #0]
 8000a50:	f7ff fe6a 	bl	8000728 <ensure>
 8000a54:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 8000a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d101      	bne.n	8000a60 <print_number+0x140>
    {
        return false;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	e02d      	b.n	8000abc <print_number+0x19c>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8000a60:	2300      	movs	r3, #0
 8000a62:	643b      	str	r3, [r7, #64]	; 0x40
 8000a64:	e01a      	b.n	8000a9c <print_number+0x17c>
    {
        if (number_buffer[i] == decimal_point)
 8000a66:	f107 0214 	add.w	r2, r7, #20
 8000a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a6c:	4413      	add	r3, r2
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d105      	bne.n	8000a84 <print_number+0x164>
        {
            output_pointer[i] = '.';
 8000a78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000a7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a7c:	4413      	add	r3, r2
 8000a7e:	222e      	movs	r2, #46	; 0x2e
 8000a80:	701a      	strb	r2, [r3, #0]
            continue;
 8000a82:	e008      	b.n	8000a96 <print_number+0x176>
        }

        output_pointer[i] = number_buffer[i];
 8000a84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a88:	4413      	add	r3, r2
 8000a8a:	f107 0114 	add.w	r1, r7, #20
 8000a8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000a90:	440a      	add	r2, r1
 8000a92:	7812      	ldrb	r2, [r2, #0]
 8000a94:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 8000a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a98:	3301      	adds	r3, #1
 8000a9a:	643b      	str	r3, [r7, #64]	; 0x40
 8000a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d3e0      	bcc.n	8000a66 <print_number+0x146>
    }
    output_pointer[i] = '\0';
 8000aa4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000aa8:	4413      	add	r3, r2
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	689a      	ldr	r2, [r3, #8]
 8000ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ab4:	441a      	add	r2, r3
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	609a      	str	r2, [r3, #8]

    return true;
 8000aba:	2301      	movs	r3, #1
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3748      	adds	r7, #72	; 0x48
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	f3af 8000 	nop.w
 8000ac8:	ffffffff 	.word	0xffffffff
 8000acc:	7fefffff 	.word	0x7fefffff
 8000ad0:	08019b38 	.word	0x08019b38
 8000ad4:	08019b40 	.word	0x08019b40
 8000ad8:	08019b44 	.word	0x08019b44
 8000adc:	08019b4c 	.word	0x08019b4c
 8000ae0:	08019b50 	.word	0x08019b50

08000ae4 <print_string_ptr>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d101      	bne.n	8000b0c <print_string_ptr+0x28>
    {
        return false;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	e110      	b.n	8000d2e <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d111      	bne.n	8000b36 <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8000b12:	2103      	movs	r1, #3
 8000b14:	6838      	ldr	r0, [r7, #0]
 8000b16:	f7ff fe07 	bl	8000728 <ensure>
 8000b1a:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d101      	bne.n	8000b26 <print_string_ptr+0x42>
        {
            return false;
 8000b22:	2300      	movs	r3, #0
 8000b24:	e103      	b.n	8000d2e <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	4a83      	ldr	r2, [pc, #524]	; (8000d38 <print_string_ptr+0x254>)
 8000b2a:	8811      	ldrh	r1, [r2, #0]
 8000b2c:	7892      	ldrb	r2, [r2, #2]
 8000b2e:	8019      	strh	r1, [r3, #0]
 8000b30:	709a      	strb	r2, [r3, #2]

        return true;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e0fb      	b.n	8000d2e <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	61fb      	str	r3, [r7, #28]
 8000b3a:	e023      	b.n	8000b84 <print_string_ptr+0xa0>
    {
        switch (*input_pointer)
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b22      	cmp	r3, #34	; 0x22
 8000b42:	dc0e      	bgt.n	8000b62 <print_string_ptr+0x7e>
 8000b44:	2b08      	cmp	r3, #8
 8000b46:	db12      	blt.n	8000b6e <print_string_ptr+0x8a>
 8000b48:	3b08      	subs	r3, #8
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	409a      	lsls	r2, r3
 8000b4e:	4b7b      	ldr	r3, [pc, #492]	; (8000d3c <print_string_ptr+0x258>)
 8000b50:	4013      	ands	r3, r2
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	bf14      	ite	ne
 8000b56:	2301      	movne	r3, #1
 8000b58:	2300      	moveq	r3, #0
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d102      	bne.n	8000b66 <print_string_ptr+0x82>
 8000b60:	e005      	b.n	8000b6e <print_string_ptr+0x8a>
 8000b62:	2b5c      	cmp	r3, #92	; 0x5c
 8000b64:	d103      	bne.n	8000b6e <print_string_ptr+0x8a>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	617b      	str	r3, [r7, #20]
                break;
 8000b6c:	e007      	b.n	8000b7e <print_string_ptr+0x9a>
            default:
                if (*input_pointer < 32)
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b1f      	cmp	r3, #31
 8000b74:	d802      	bhi.n	8000b7c <print_string_ptr+0x98>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	3305      	adds	r3, #5
 8000b7a:	617b      	str	r3, [r7, #20]
                }
                break;
 8000b7c:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3301      	adds	r3, #1
 8000b82:	61fb      	str	r3, [r7, #28]
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d1d7      	bne.n	8000b3c <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8000b8c:	69fa      	ldr	r2, [r7, #28]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	461a      	mov	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	4413      	add	r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	3303      	adds	r3, #3
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	6838      	ldr	r0, [r7, #0]
 8000ba2:	f7ff fdc1 	bl	8000728 <ensure>
 8000ba6:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d101      	bne.n	8000bb2 <print_string_ptr+0xce>
    {
        return false;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e0bd      	b.n	8000d2e <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d117      	bne.n	8000be8 <print_string_ptr+0x104>
    {
        output[0] = '\"';
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	2222      	movs	r2, #34	; 0x22
 8000bbc:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f017 f860 	bl	8017c8c <memcpy>
        output[output_length + 1] = '\"';
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	2222      	movs	r2, #34	; 0x22
 8000bd6:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	3302      	adds	r3, #2
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	4413      	add	r3, r2
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]

        return true;
 8000be4:	2301      	movs	r3, #1
 8000be6:	e0a2      	b.n	8000d2e <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	2222      	movs	r2, #34	; 0x22
 8000bec:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	61fb      	str	r3, [r7, #28]
 8000bf8:	e087      	b.n	8000d0a <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b1f      	cmp	r3, #31
 8000c00:	d90c      	bls.n	8000c1c <print_string_ptr+0x138>
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b22      	cmp	r3, #34	; 0x22
 8000c08:	d008      	beq.n	8000c1c <print_string_ptr+0x138>
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b5c      	cmp	r3, #92	; 0x5c
 8000c10:	d004      	beq.n	8000c1c <print_string_ptr+0x138>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	781a      	ldrb	r2, [r3, #0]
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	701a      	strb	r2, [r3, #0]
 8000c1a:	e070      	b.n	8000cfe <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	1c5a      	adds	r2, r3, #1
 8000c20:	61ba      	str	r2, [r7, #24]
 8000c22:	225c      	movs	r2, #92	; 0x5c
 8000c24:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b22      	cmp	r3, #34	; 0x22
 8000c2c:	dc3e      	bgt.n	8000cac <print_string_ptr+0x1c8>
 8000c2e:	2b08      	cmp	r3, #8
 8000c30:	db5a      	blt.n	8000ce8 <print_string_ptr+0x204>
 8000c32:	3b08      	subs	r3, #8
 8000c34:	2b1a      	cmp	r3, #26
 8000c36:	d857      	bhi.n	8000ce8 <print_string_ptr+0x204>
 8000c38:	a201      	add	r2, pc, #4	; (adr r2, 8000c40 <print_string_ptr+0x15c>)
 8000c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3e:	bf00      	nop
 8000c40:	08000cc1 	.word	0x08000cc1
 8000c44:	08000ce1 	.word	0x08000ce1
 8000c48:	08000cd1 	.word	0x08000cd1
 8000c4c:	08000ce9 	.word	0x08000ce9
 8000c50:	08000cc9 	.word	0x08000cc9
 8000c54:	08000cd9 	.word	0x08000cd9
 8000c58:	08000ce9 	.word	0x08000ce9
 8000c5c:	08000ce9 	.word	0x08000ce9
 8000c60:	08000ce9 	.word	0x08000ce9
 8000c64:	08000ce9 	.word	0x08000ce9
 8000c68:	08000ce9 	.word	0x08000ce9
 8000c6c:	08000ce9 	.word	0x08000ce9
 8000c70:	08000ce9 	.word	0x08000ce9
 8000c74:	08000ce9 	.word	0x08000ce9
 8000c78:	08000ce9 	.word	0x08000ce9
 8000c7c:	08000ce9 	.word	0x08000ce9
 8000c80:	08000ce9 	.word	0x08000ce9
 8000c84:	08000ce9 	.word	0x08000ce9
 8000c88:	08000ce9 	.word	0x08000ce9
 8000c8c:	08000ce9 	.word	0x08000ce9
 8000c90:	08000ce9 	.word	0x08000ce9
 8000c94:	08000ce9 	.word	0x08000ce9
 8000c98:	08000ce9 	.word	0x08000ce9
 8000c9c:	08000ce9 	.word	0x08000ce9
 8000ca0:	08000ce9 	.word	0x08000ce9
 8000ca4:	08000ce9 	.word	0x08000ce9
 8000ca8:	08000cb9 	.word	0x08000cb9
 8000cac:	2b5c      	cmp	r3, #92	; 0x5c
 8000cae:	d11b      	bne.n	8000ce8 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	225c      	movs	r2, #92	; 0x5c
 8000cb4:	701a      	strb	r2, [r3, #0]
                    break;
 8000cb6:	e022      	b.n	8000cfe <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	2222      	movs	r2, #34	; 0x22
 8000cbc:	701a      	strb	r2, [r3, #0]
                    break;
 8000cbe:	e01e      	b.n	8000cfe <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	2262      	movs	r2, #98	; 0x62
 8000cc4:	701a      	strb	r2, [r3, #0]
                    break;
 8000cc6:	e01a      	b.n	8000cfe <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	2266      	movs	r2, #102	; 0x66
 8000ccc:	701a      	strb	r2, [r3, #0]
                    break;
 8000cce:	e016      	b.n	8000cfe <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	226e      	movs	r2, #110	; 0x6e
 8000cd4:	701a      	strb	r2, [r3, #0]
                    break;
 8000cd6:	e012      	b.n	8000cfe <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	2272      	movs	r2, #114	; 0x72
 8000cdc:	701a      	strb	r2, [r3, #0]
                    break;
 8000cde:	e00e      	b.n	8000cfe <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	2274      	movs	r2, #116	; 0x74
 8000ce4:	701a      	strb	r2, [r3, #0]
                    break;
 8000ce6:	e00a      	b.n	8000cfe <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4914      	ldr	r1, [pc, #80]	; (8000d40 <print_string_ptr+0x25c>)
 8000cf0:	69b8      	ldr	r0, [r7, #24]
 8000cf2:	f017 fa29 	bl	8018148 <siprintf>
                    output_pointer += 4;
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	61bb      	str	r3, [r7, #24]
                    break;
 8000cfc:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3301      	adds	r3, #1
 8000d02:	61fb      	str	r3, [r7, #28]
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	3301      	adds	r3, #1
 8000d08:	61bb      	str	r3, [r7, #24]
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f47f af73 	bne.w	8000bfa <print_string_ptr+0x116>
            }
        }
    }
    output[output_length + 1] = '\"';
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	3301      	adds	r3, #1
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	2222      	movs	r2, #34	; 0x22
 8000d1e:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	3302      	adds	r3, #2
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	4413      	add	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]

    return true;
 8000d2c:	2301      	movs	r3, #1
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3720      	adds	r7, #32
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	08019b58 	.word	0x08019b58
 8000d3c:	04000037 	.word	0x04000037
 8000d40:	08019b5c 	.word	0x08019b5c

08000d44 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	691b      	ldr	r3, [r3, #16]
 8000d52:	6839      	ldr	r1, [r7, #0]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fec5 	bl	8000ae4 <print_string_ptr>
 8000d5a:	4603      	mov	r3, r0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08e      	sub	sp, #56	; 0x38
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	2224      	movs	r2, #36	; 0x24
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f016 ffad 	bl	8017cdc <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a38      	ldr	r2, [pc, #224]	; (8000e68 <print+0x104>)
 8000d88:	6812      	ldr	r2, [r2, #0]
 8000d8a:	4610      	mov	r0, r2
 8000d8c:	4798      	blx	r3
 8000d8e:	4603      	mov	r3, r0
 8000d90:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 8000d92:	4b35      	ldr	r3, [pc, #212]	; (8000e68 <print+0x104>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
    buffer->hooks = *hooks;
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000da2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000da4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d040      	beq.n	8000e30 <print+0xcc>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	4619      	mov	r1, r3
 8000db4:	68f8      	ldr	r0, [r7, #12]
 8000db6:	f000 f869 	bl	8000e8c <print_value>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d039      	beq.n	8000e34 <print+0xd0>
    {
        goto fail;
    }
    update_offset(buffer);
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fd49 	bl	800085c <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d00d      	beq.n	8000dee <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	6938      	ldr	r0, [r7, #16]
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	3201      	adds	r2, #1
 8000ddc:	4611      	mov	r1, r2
 8000dde:	4798      	blx	r3
 8000de0:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL) {
 8000de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d027      	beq.n	8000e38 <print+0xd4>
            goto fail;
        }
        buffer->buffer = NULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	e01e      	b.n	8000e2c <print+0xc8>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	3201      	adds	r2, #1
 8000df6:	4610      	mov	r0, r2
 8000df8:	4798      	blx	r3
 8000dfa:	6378      	str	r0, [r7, #52]	; 0x34
        if (printed == NULL)
 8000dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d01c      	beq.n	8000e3c <print+0xd8>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 8000e02:	6939      	ldr	r1, [r7, #16]
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	1c5a      	adds	r2, r3, #1
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	bf28      	it	cs
 8000e0e:	4613      	movcs	r3, r2
 8000e10:	461a      	mov	r2, r3
 8000e12:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000e14:	f016 ff3a 	bl	8017c8c <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e1c:	4413      	add	r3, r2
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4610      	mov	r0, r2
 8000e2a:	4798      	blx	r3
    }

    return printed;
 8000e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e2e:	e016      	b.n	8000e5e <print+0xfa>
        goto fail;
 8000e30:	bf00      	nop
 8000e32:	e004      	b.n	8000e3e <print+0xda>
        goto fail;
 8000e34:	bf00      	nop
 8000e36:	e002      	b.n	8000e3e <print+0xda>
            goto fail;
 8000e38:	bf00      	nop
 8000e3a:	e000      	b.n	8000e3e <print+0xda>
            goto fail;
 8000e3c:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d004      	beq.n	8000e4e <print+0xea>
    {
        hooks->deallocate(buffer->buffer);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4610      	mov	r0, r2
 8000e4c:	4798      	blx	r3
    }

    if (printed != NULL)
 8000e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <print+0xf8>
    {
        hooks->deallocate(printed);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000e5a:	4798      	blx	r3
    }

    return NULL;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3738      	adds	r7, #56	; 0x38
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	0801d1a0 	.word	0x0801d1a0

08000e6c <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
    return (char*)print(item, true, &global_hooks);
 8000e74:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <cJSON_Print+0x1c>)
 8000e76:	2101      	movs	r1, #1
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f7ff ff73 	bl	8000d64 <print>
 8000e7e:	4603      	mov	r3, r0
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000000 	.word	0x20000000

08000e8c <print_value>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d002      	beq.n	8000ea6 <print_value+0x1a>
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d101      	bne.n	8000eaa <print_value+0x1e>
    {
        return false;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e0c9      	b.n	800103e <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b80      	cmp	r3, #128	; 0x80
 8000eb2:	f000 808e 	beq.w	8000fd2 <print_value+0x146>
 8000eb6:	2b80      	cmp	r3, #128	; 0x80
 8000eb8:	f300 80c0 	bgt.w	800103c <print_value+0x1b0>
 8000ebc:	2b20      	cmp	r3, #32
 8000ebe:	dc49      	bgt.n	8000f54 <print_value+0xc8>
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f340 80bb 	ble.w	800103c <print_value+0x1b0>
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	2b1f      	cmp	r3, #31
 8000eca:	f200 80b7 	bhi.w	800103c <print_value+0x1b0>
 8000ece:	a201      	add	r2, pc, #4	; (adr r2, 8000ed4 <print_value+0x48>)
 8000ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed4:	08000f7f 	.word	0x08000f7f
 8000ed8:	08000fa3 	.word	0x08000fa3
 8000edc:	0800103d 	.word	0x0800103d
 8000ee0:	08000f5b 	.word	0x08000f5b
 8000ee4:	0800103d 	.word	0x0800103d
 8000ee8:	0800103d 	.word	0x0800103d
 8000eec:	0800103d 	.word	0x0800103d
 8000ef0:	08000fc7 	.word	0x08000fc7
 8000ef4:	0800103d 	.word	0x0800103d
 8000ef8:	0800103d 	.word	0x0800103d
 8000efc:	0800103d 	.word	0x0800103d
 8000f00:	0800103d 	.word	0x0800103d
 8000f04:	0800103d 	.word	0x0800103d
 8000f08:	0800103d 	.word	0x0800103d
 8000f0c:	0800103d 	.word	0x0800103d
 8000f10:	08001019 	.word	0x08001019
 8000f14:	0800103d 	.word	0x0800103d
 8000f18:	0800103d 	.word	0x0800103d
 8000f1c:	0800103d 	.word	0x0800103d
 8000f20:	0800103d 	.word	0x0800103d
 8000f24:	0800103d 	.word	0x0800103d
 8000f28:	0800103d 	.word	0x0800103d
 8000f2c:	0800103d 	.word	0x0800103d
 8000f30:	0800103d 	.word	0x0800103d
 8000f34:	0800103d 	.word	0x0800103d
 8000f38:	0800103d 	.word	0x0800103d
 8000f3c:	0800103d 	.word	0x0800103d
 8000f40:	0800103d 	.word	0x0800103d
 8000f44:	0800103d 	.word	0x0800103d
 8000f48:	0800103d 	.word	0x0800103d
 8000f4c:	0800103d 	.word	0x0800103d
 8000f50:	08001025 	.word	0x08001025
 8000f54:	2b40      	cmp	r3, #64	; 0x40
 8000f56:	d06b      	beq.n	8001030 <print_value+0x1a4>
 8000f58:	e070      	b.n	800103c <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 8000f5a:	2105      	movs	r1, #5
 8000f5c:	6838      	ldr	r0, [r7, #0]
 8000f5e:	f7ff fbe3 	bl	8000728 <ensure>
 8000f62:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <print_value+0xe2>
            {
                return false;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e067      	b.n	800103e <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4a35      	ldr	r2, [pc, #212]	; (8001048 <print_value+0x1bc>)
 8000f72:	6810      	ldr	r0, [r2, #0]
 8000f74:	6018      	str	r0, [r3, #0]
 8000f76:	7912      	ldrb	r2, [r2, #4]
 8000f78:	711a      	strb	r2, [r3, #4]
            return true;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e05f      	b.n	800103e <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 8000f7e:	2106      	movs	r1, #6
 8000f80:	6838      	ldr	r0, [r7, #0]
 8000f82:	f7ff fbd1 	bl	8000728 <ensure>
 8000f86:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <print_value+0x106>
            {
                return false;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e055      	b.n	800103e <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	4a2d      	ldr	r2, [pc, #180]	; (800104c <print_value+0x1c0>)
 8000f96:	6810      	ldr	r0, [r2, #0]
 8000f98:	6018      	str	r0, [r3, #0]
 8000f9a:	8892      	ldrh	r2, [r2, #4]
 8000f9c:	809a      	strh	r2, [r3, #4]
            return true;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e04d      	b.n	800103e <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 8000fa2:	2105      	movs	r1, #5
 8000fa4:	6838      	ldr	r0, [r7, #0]
 8000fa6:	f7ff fbbf 	bl	8000728 <ensure>
 8000faa:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <print_value+0x12a>
            {
                return false;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e043      	b.n	800103e <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	4a25      	ldr	r2, [pc, #148]	; (8001050 <print_value+0x1c4>)
 8000fba:	6810      	ldr	r0, [r2, #0]
 8000fbc:	6018      	str	r0, [r3, #0]
 8000fbe:	7912      	ldrb	r2, [r2, #4]
 8000fc0:	711a      	strb	r2, [r3, #4]
            return true;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e03b      	b.n	800103e <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 8000fc6:	6839      	ldr	r1, [r7, #0]
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff fca9 	bl	8000920 <print_number>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e035      	b.n	800103e <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <print_value+0x156>
            {
                return false;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e02d      	b.n	800103e <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff f934 	bl	8000254 <strlen>
 8000fec:	4603      	mov	r3, r0
 8000fee:	3301      	adds	r3, #1
 8000ff0:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 8000ff2:	68b9      	ldr	r1, [r7, #8]
 8000ff4:	6838      	ldr	r0, [r7, #0]
 8000ff6:	f7ff fb97 	bl	8000728 <ensure>
 8000ffa:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d101      	bne.n	8001006 <print_value+0x17a>
            {
                return false;
 8001002:	2300      	movs	r3, #0
 8001004:	e01b      	b.n	800103e <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	691b      	ldr	r3, [r3, #16]
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	4619      	mov	r1, r3
 800100e:	68f8      	ldr	r0, [r7, #12]
 8001010:	f016 fe3c 	bl	8017c8c <memcpy>
            return true;
 8001014:	2301      	movs	r3, #1
 8001016:	e012      	b.n	800103e <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 8001018:	6839      	ldr	r1, [r7, #0]
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff fe92 	bl	8000d44 <print_string>
 8001020:	4603      	mov	r3, r0
 8001022:	e00c      	b.n	800103e <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 8001024:	6839      	ldr	r1, [r7, #0]
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 f814 	bl	8001054 <print_array>
 800102c:	4603      	mov	r3, r0
 800102e:	e006      	b.n	800103e <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 8001030:	6839      	ldr	r1, [r7, #0]
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f000 f894 	bl	8001160 <print_object>
 8001038:	4603      	mov	r3, r0
 800103a:	e000      	b.n	800103e <print_value+0x1b2>

        default:
            return false;
 800103c:	2300      	movs	r3, #0
    }
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	08019b38 	.word	0x08019b38
 800104c:	08019b68 	.word	0x08019b68
 8001050:	08019b70 	.word	0x08019b70

08001054 <print_array>:
    return false;
}

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <print_array+0x22>
    {
        return false;
 8001072:	2300      	movs	r3, #0
 8001074:	e070      	b.n	8001158 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 8001076:	2101      	movs	r1, #1
 8001078:	6838      	ldr	r0, [r7, #0]
 800107a:	f7ff fb55 	bl	8000728 <ensure>
 800107e:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <print_array+0x36>
    {
        return false;
 8001086:	2300      	movs	r3, #0
 8001088:	e066      	b.n	8001158 <print_array+0x104>
    }

    *output_pointer = '[';
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	225b      	movs	r2, #91	; 0x5b
 800108e:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	1c5a      	adds	r2, r3, #1
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 80010a4:	e03d      	b.n	8001122 <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 80010a6:	6839      	ldr	r1, [r7, #0]
 80010a8:	6938      	ldr	r0, [r7, #16]
 80010aa:	f7ff feef 	bl	8000e8c <print_value>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d101      	bne.n	80010b8 <print_array+0x64>
        {
            return false;
 80010b4:	2300      	movs	r3, #0
 80010b6:	e04f      	b.n	8001158 <print_array+0x104>
        }
        update_offset(output_buffer);
 80010b8:	6838      	ldr	r0, [r7, #0]
 80010ba:	f7ff fbcf 	bl	800085c <update_offset>
        if (current_element->next)
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d02a      	beq.n	800111c <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <print_array+0x7e>
 80010ce:	2302      	movs	r3, #2
 80010d0:	e000      	b.n	80010d4 <print_array+0x80>
 80010d2:	2301      	movs	r3, #1
 80010d4:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	3301      	adds	r3, #1
 80010da:	4619      	mov	r1, r3
 80010dc:	6838      	ldr	r0, [r7, #0]
 80010de:	f7ff fb23 	bl	8000728 <ensure>
 80010e2:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <print_array+0x9a>
            {
                return false;
 80010ea:	2300      	movs	r3, #0
 80010ec:	e034      	b.n	8001158 <print_array+0x104>
            }
            *output_pointer++ = ',';
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	1c5a      	adds	r2, r3, #1
 80010f2:	617a      	str	r2, [r7, #20]
 80010f4:	222c      	movs	r2, #44	; 0x2c
 80010f6:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d004      	beq.n	800110a <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	617a      	str	r2, [r7, #20]
 8001106:	2220      	movs	r2, #32
 8001108:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	441a      	add	r2, r3
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1be      	bne.n	80010a6 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8001128:	2102      	movs	r1, #2
 800112a:	6838      	ldr	r0, [r7, #0]
 800112c:	f7ff fafc 	bl	8000728 <ensure>
 8001130:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d101      	bne.n	800113c <print_array+0xe8>
    {
        return false;
 8001138:	2300      	movs	r3, #0
 800113a:	e00d      	b.n	8001158 <print_array+0x104>
    }
    *output_pointer++ = ']';
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	1c5a      	adds	r2, r3, #1
 8001140:	617a      	str	r2, [r7, #20]
 8001142:	225d      	movs	r2, #93	; 0x5d
 8001144:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	1e5a      	subs	r2, r3, #1
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	60da      	str	r2, [r3, #12]

    return true;
 8001156:	2301      	movs	r3, #1
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <print_object>:
    return false;
}

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <print_object+0x22>
    {
        return false;
 800117e:	2300      	movs	r3, #0
 8001180:	e108      	b.n	8001394 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <print_object+0x2e>
 800118a:	2302      	movs	r3, #2
 800118c:	e000      	b.n	8001190 <print_object+0x30>
 800118e:	2301      	movs	r3, #1
 8001190:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	3301      	adds	r3, #1
 8001196:	4619      	mov	r1, r3
 8001198:	6838      	ldr	r0, [r7, #0]
 800119a:	f7ff fac5 	bl	8000728 <ensure>
 800119e:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d101      	bne.n	80011aa <print_object+0x4a>
    {
        return false;
 80011a6:	2300      	movs	r3, #0
 80011a8:	e0f4      	b.n	8001394 <print_object+0x234>
    }

    *output_pointer++ = '{';
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	1c5a      	adds	r2, r3, #1
 80011ae:	61fa      	str	r2, [r7, #28]
 80011b0:	227b      	movs	r2, #123	; 0x7b
 80011b2:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	1c5a      	adds	r2, r3, #1
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d004      	beq.n	80011d0 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	1c5a      	adds	r2, r3, #1
 80011ca:	61fa      	str	r2, [r7, #28]
 80011cc:	220a      	movs	r2, #10
 80011ce:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	441a      	add	r2, r3
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	609a      	str	r2, [r3, #8]

    while (current_item)
 80011dc:	e0a0      	b.n	8001320 <print_object+0x1c0>
    {
        if (output_buffer->format)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d022      	beq.n	800122c <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	4619      	mov	r1, r3
 80011ec:	6838      	ldr	r0, [r7, #0]
 80011ee:	f7ff fa9b 	bl	8000728 <ensure>
 80011f2:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <print_object+0x9e>
            {
                return false;
 80011fa:	2300      	movs	r3, #0
 80011fc:	e0ca      	b.n	8001394 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	e007      	b.n	8001214 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	1c5a      	adds	r2, r3, #1
 8001208:	61fa      	str	r2, [r7, #28]
 800120a:	2209      	movs	r2, #9
 800120c:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	3301      	adds	r3, #1
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	429a      	cmp	r2, r3
 800121c:	d3f2      	bcc.n	8001204 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	441a      	add	r2, r3
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	6839      	ldr	r1, [r7, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff fc56 	bl	8000ae4 <print_string_ptr>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <print_object+0xe2>
        {
            return false;
 800123e:	2300      	movs	r3, #0
 8001240:	e0a8      	b.n	8001394 <print_object+0x234>
        }
        update_offset(output_buffer);
 8001242:	6838      	ldr	r0, [r7, #0]
 8001244:	f7ff fb0a 	bl	800085c <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <print_object+0xf4>
 8001250:	2302      	movs	r3, #2
 8001252:	e000      	b.n	8001256 <print_object+0xf6>
 8001254:	2301      	movs	r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8001258:	68f9      	ldr	r1, [r7, #12]
 800125a:	6838      	ldr	r0, [r7, #0]
 800125c:	f7ff fa64 	bl	8000728 <ensure>
 8001260:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <print_object+0x10c>
        {
            return false;
 8001268:	2300      	movs	r3, #0
 800126a:	e093      	b.n	8001394 <print_object+0x234>
        }
        *output_pointer++ = ':';
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	61fa      	str	r2, [r7, #28]
 8001272:	223a      	movs	r2, #58	; 0x3a
 8001274:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d004      	beq.n	8001288 <print_object+0x128>
        {
            *output_pointer++ = '\t';
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	1c5a      	adds	r2, r3, #1
 8001282:	61fa      	str	r2, [r7, #28]
 8001284:	2209      	movs	r2, #9
 8001286:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	441a      	add	r2, r3
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8001294:	6839      	ldr	r1, [r7, #0]
 8001296:	69b8      	ldr	r0, [r7, #24]
 8001298:	f7ff fdf8 	bl	8000e8c <print_value>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <print_object+0x146>
        {
            return false;
 80012a2:	2300      	movs	r3, #0
 80012a4:	e076      	b.n	8001394 <print_object+0x234>
        }
        update_offset(output_buffer);
 80012a6:	6838      	ldr	r0, [r7, #0]
 80012a8:	f7ff fad8 	bl	800085c <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	695b      	ldr	r3, [r3, #20]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <print_object+0x158>
 80012b4:	2201      	movs	r2, #1
 80012b6:	e000      	b.n	80012ba <print_object+0x15a>
 80012b8:	2200      	movs	r2, #0
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <print_object+0x166>
 80012c2:	2301      	movs	r3, #1
 80012c4:	e000      	b.n	80012c8 <print_object+0x168>
 80012c6:	2300      	movs	r3, #0
 80012c8:	4413      	add	r3, r2
 80012ca:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	3301      	adds	r3, #1
 80012d0:	4619      	mov	r1, r3
 80012d2:	6838      	ldr	r0, [r7, #0]
 80012d4:	f7ff fa28 	bl	8000728 <ensure>
 80012d8:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d101      	bne.n	80012e4 <print_object+0x184>
        {
            return false;
 80012e0:	2300      	movs	r3, #0
 80012e2:	e057      	b.n	8001394 <print_object+0x234>
        }
        if (current_item->next)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d004      	beq.n	80012f6 <print_object+0x196>
        {
            *output_pointer++ = ',';
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	1c5a      	adds	r2, r3, #1
 80012f0:	61fa      	str	r2, [r7, #28]
 80012f2:	222c      	movs	r2, #44	; 0x2c
 80012f4:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d004      	beq.n	8001308 <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	1c5a      	adds	r2, r3, #1
 8001302:	61fa      	str	r2, [r7, #28]
 8001304:	220a      	movs	r2, #10
 8001306:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	441a      	add	r2, r3
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	2b00      	cmp	r3, #0
 8001324:	f47f af5b 	bne.w	80011de <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <print_object+0x1d8>
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	3301      	adds	r3, #1
 8001336:	e000      	b.n	800133a <print_object+0x1da>
 8001338:	2302      	movs	r3, #2
 800133a:	4619      	mov	r1, r3
 800133c:	6838      	ldr	r0, [r7, #0]
 800133e:	f7ff f9f3 	bl	8000728 <ensure>
 8001342:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <print_object+0x1ee>
    {
        return false;
 800134a:	2300      	movs	r3, #0
 800134c:	e022      	b.n	8001394 <print_object+0x234>
    }
    if (output_buffer->format)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d010      	beq.n	8001378 <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	e007      	b.n	800136c <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	1c5a      	adds	r2, r3, #1
 8001360:	61fa      	str	r2, [r7, #28]
 8001362:	2209      	movs	r2, #9
 8001364:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	3301      	adds	r3, #1
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	3b01      	subs	r3, #1
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	429a      	cmp	r2, r3
 8001376:	d3f1      	bcc.n	800135c <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	61fa      	str	r2, [r7, #28]
 800137e:	227d      	movs	r2, #125	; 0x7d
 8001380:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	1e5a      	subs	r2, r3, #1
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	60da      	str	r2, [r3, #12]

    return true;
 8001392:	2301      	movs	r3, #1
}
 8001394:	4618      	mov	r0, r3
 8001396:	3720      	adds	r7, #32
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
    prev->next = item;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	605a      	str	r2, [r3, #4]
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b084      	sub	sp, #16
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d006      	beq.n	80013e0 <add_item_to_array+0x22>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <add_item_to_array+0x22>
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d101      	bne.n	80013e4 <add_item_to_array+0x26>
    {
        return false;
 80013e0:	2300      	movs	r3, #0
 80013e2:	e01e      	b.n	8001422 <add_item_to_array+0x64>
    }

    child = array->child;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d109      	bne.n	8001404 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	609a      	str	r2, [r3, #8]
        item->prev = item;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	e00d      	b.n	8001420 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d009      	beq.n	8001420 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	6839      	ldr	r1, [r7, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ffc2 	bl	800139c <suffix_object>
            array->child->prev = item;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 8001420:	2301      	movs	r3, #1
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <cJSON_AddItemToArray>:

/* Add item to array/object. */
CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToArray(cJSON *array, cJSON *item)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
 8001432:	6039      	str	r1, [r7, #0]
    return add_item_to_array(array, item);
 8001434:	6839      	ldr	r1, [r7, #0]
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ffc1 	bl	80013be <add_item_to_array>
 800143c:	4603      	mov	r3, r0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
    return (void*)string;
 800144e:	687b      	ldr	r3, [r7, #4]
}
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
 8001468:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d009      	beq.n	800148c <add_item_to_object+0x30>
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d006      	beq.n	800148c <add_item_to_object+0x30>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <add_item_to_object+0x30>
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	429a      	cmp	r2, r3
 800148a:	d101      	bne.n	8001490 <add_item_to_object+0x34>
    {
        return false;
 800148c:	2300      	movs	r3, #0
 800148e:	e036      	b.n	80014fe <add_item_to_object+0xa2>
    }

    if (constant_key)
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d009      	beq.n	80014aa <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 8001496:	68b8      	ldr	r0, [r7, #8]
 8001498:	f7ff ffd5 	bl	8001446 <cast_away_const>
 800149c:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	e00e      	b.n	80014c8 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 80014aa:	6839      	ldr	r1, [r7, #0]
 80014ac:	68b8      	ldr	r0, [r7, #8]
 80014ae:	f7ff f8ab 	bl	8000608 <cJSON_strdup>
 80014b2:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <add_item_to_object+0x62>
        {
            return false;
 80014ba:	2300      	movs	r3, #0
 80014bc:	e01f      	b.n	80014fe <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80014c6:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d109      	bne.n	80014e8 <add_item_to_object+0x8c>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d005      	beq.n	80014e8 <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	6a12      	ldr	r2, [r2, #32]
 80014e4:	4610      	mov	r0, r2
 80014e6:	4798      	blx	r3
    }

    item->string = new_key;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f7ff ff61 	bl	80013be <add_item_to_array>
 80014fc:	4603      	mov	r3, r0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af02      	add	r7, sp, #8
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	ed87 0b00 	vstr	d0, [r7]
    cJSON *number_item = cJSON_CreateNumber(number);
 8001516:	ed97 0b00 	vldr	d0, [r7]
 800151a:	f000 f83d 	bl	8001598 <cJSON_CreateNumber>
 800151e:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 8001520:	2300      	movs	r3, #0
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <cJSON_AddNumberToObject+0x44>)
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	68b9      	ldr	r1, [r7, #8]
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f7ff ff96 	bl	800145c <add_item_to_object>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <cJSON_AddNumberToObject+0x32>
    {
        return number_item;
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	e003      	b.n	8001542 <cJSON_AddNumberToObject+0x3a>
    }

    cJSON_Delete(number_item);
 800153a:	6978      	ldr	r0, [r7, #20]
 800153c:	f7ff f8a2 	bl	8000684 <cJSON_Delete>
    return NULL;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000000 	.word	0x20000000

08001550 <cJSON_AddStringToObject>:

CJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af02      	add	r7, sp, #8
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
    cJSON *string_item = cJSON_CreateString(string);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f000 f865 	bl	800162c <cJSON_CreateString>
 8001562:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
 8001564:	2300      	movs	r3, #0
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	4b09      	ldr	r3, [pc, #36]	; (8001590 <cJSON_AddStringToObject+0x40>)
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	f7ff ff74 	bl	800145c <add_item_to_object>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <cJSON_AddStringToObject+0x2e>
    {
        return string_item;
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	e003      	b.n	8001586 <cJSON_AddStringToObject+0x36>
    }

    cJSON_Delete(string_item);
 800157e:	6978      	ldr	r0, [r7, #20]
 8001580:	f7ff f880 	bl	8000684 <cJSON_Delete>
    return NULL;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000000 	.word	0x20000000
 8001594:	00000000 	.word	0x00000000

08001598 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	ed87 0b00 	vstr	d0, [r7]
    cJSON *item = cJSON_New_Item(&global_hooks);
 80015a2:	4821      	ldr	r0, [pc, #132]	; (8001628 <cJSON_CreateNumber+0x90>)
 80015a4:	f7ff f858 	bl	8000658 <cJSON_New_Item>
 80015a8:	60f8      	str	r0, [r7, #12]
    if(item)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d02b      	beq.n	8001608 <cJSON_CreateNumber+0x70>
    {
        item->type = cJSON_Number;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2208      	movs	r2, #8
 80015b4:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 80015b6:	68f9      	ldr	r1, [r7, #12]
 80015b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015bc:	e9c1 2306 	strd	r2, r3, [r1, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 80015c0:	ed97 7b00 	vldr	d7, [r7]
 80015c4:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8001618 <cJSON_CreateNumber+0x80>
 80015c8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80015cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d0:	db04      	blt.n	80015dc <cJSON_CreateNumber+0x44>
        {
            item->valueint = INT_MAX;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80015d8:	615a      	str	r2, [r3, #20]
 80015da:	e015      	b.n	8001608 <cJSON_CreateNumber+0x70>
        }
        else if (num <= (double)INT_MIN)
 80015dc:	ed97 7b00 	vldr	d7, [r7]
 80015e0:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8001620 <cJSON_CreateNumber+0x88>
 80015e4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80015e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ec:	d804      	bhi.n	80015f8 <cJSON_CreateNumber+0x60>
        {
            item->valueint = INT_MIN;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80015f4:	615a      	str	r2, [r3, #20]
 80015f6:	e007      	b.n	8001608 <cJSON_CreateNumber+0x70>
        }
        else
        {
            item->valueint = (int)num;
 80015f8:	ed97 7b00 	vldr	d7, [r7]
 80015fc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001600:	ee17 2a90 	vmov	r2, s15
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 8001608:	68fb      	ldr	r3, [r7, #12]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	f3af 8000 	nop.w
 8001618:	ffc00000 	.word	0xffc00000
 800161c:	41dfffff 	.word	0x41dfffff
 8001620:	00000000 	.word	0x00000000
 8001624:	c1e00000 	.word	0xc1e00000
 8001628:	20000000 	.word	0x20000000

0800162c <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8001634:	480f      	ldr	r0, [pc, #60]	; (8001674 <cJSON_CreateString+0x48>)
 8001636:	f7ff f80f 	bl	8000658 <cJSON_New_Item>
 800163a:	60f8      	str	r0, [r7, #12]
    if(item)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d012      	beq.n	8001668 <cJSON_CreateString+0x3c>
    {
        item->type = cJSON_String;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2210      	movs	r2, #16
 8001646:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
 8001648:	490a      	ldr	r1, [pc, #40]	; (8001674 <cJSON_CreateString+0x48>)
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7fe ffdc 	bl	8000608 <cJSON_strdup>
 8001650:	4602      	mov	r2, r0
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d104      	bne.n	8001668 <cJSON_CreateString+0x3c>
        {
            cJSON_Delete(item);
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f7ff f810 	bl	8000684 <cJSON_Delete>
            return NULL;
 8001664:	2300      	movs	r3, #0
 8001666:	e000      	b.n	800166a <cJSON_CreateString+0x3e>
        }
    }

    return item;
 8001668:	68fb      	ldr	r3, [r7, #12]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000000 	.word	0x20000000

08001678 <cJSON_CreateArray>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 800167e:	4807      	ldr	r0, [pc, #28]	; (800169c <cJSON_CreateArray+0x24>)
 8001680:	f7fe ffea 	bl	8000658 <cJSON_New_Item>
 8001684:	6078      	str	r0, [r7, #4]
    if(item)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <cJSON_CreateArray+0x1a>
    {
        item->type=cJSON_Array;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2220      	movs	r2, #32
 8001690:	60da      	str	r2, [r3, #12]
    }

    return item;
 8001692:	687b      	ldr	r3, [r7, #4]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000000 	.word	0x20000000

080016a0 <cJSON_CreateObject>:

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 80016a6:	4807      	ldr	r0, [pc, #28]	; (80016c4 <cJSON_CreateObject+0x24>)
 80016a8:	f7fe ffd6 	bl	8000658 <cJSON_New_Item>
 80016ac:	6078      	str	r0, [r7, #4]
    if (item)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d002      	beq.n	80016ba <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2240      	movs	r2, #64	; 0x40
 80016b8:	60da      	str	r2, [r3, #12]
    }

    return item;
 80016ba:	687b      	ldr	r3, [r7, #4]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000000 	.word	0x20000000

080016c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4a07      	ldr	r2, [pc, #28]	; (80016f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80016d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	4a06      	ldr	r2, [pc, #24]	; (80016f8 <vApplicationGetIdleTaskMemory+0x30>)
 80016de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2280      	movs	r2, #128	; 0x80
 80016e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	200007b0 	.word	0x200007b0
 80016f8:	20000864 	.word	0x20000864

080016fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016fc:	b5b0      	push	{r4, r5, r7, lr}
 80016fe:	b08e      	sub	sp, #56	; 0x38
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001702:	f001 fa90 	bl	8002c26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001706:	f000 f835 	bl	8001774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800170a:	f000 f901 	bl	8001910 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800170e:	f000 f8a1 	bl	8001854 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001712:	f000 f8cf 	bl	80018b4 <MX_USB_OTG_FS_PCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of WebServerTask */
  osThreadStaticDef(WebServerTask, StartWebServerTask, osPriorityNormal, 0, 2048, WebServerTaskBuffer, &WebServerTaskControlBlock);
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <main+0x68>)
 8001718:	f107 041c 	add.w	r4, r7, #28
 800171c:	461d      	mov	r5, r3
 800171e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001722:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001726:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WebServerTaskHandle = osThreadCreate(osThread(WebServerTask), NULL);
 800172a:	f107 031c 	add.w	r3, r7, #28
 800172e:	2100      	movs	r1, #0
 8001730:	4618      	mov	r0, r3
 8001732:	f006 fa2a 	bl	8007b8a <osThreadCreate>
 8001736:	4603      	mov	r3, r0
 8001738:	4a0b      	ldr	r2, [pc, #44]	; (8001768 <main+0x6c>)
 800173a:	6013      	str	r3, [r2, #0]

  /* definition and creation of SSIDTask */
  osThreadStaticDef(SSIDTask, StartSSIDTask, osPriorityNormal, 0, 256, SSIDTaskBuffer, &SSIDTaskControlBlock);
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <main+0x70>)
 800173e:	463c      	mov	r4, r7
 8001740:	461d      	mov	r5, r3
 8001742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001744:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001746:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800174a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SSIDTaskHandle = osThreadCreate(osThread(SSIDTask), NULL);
 800174e:	463b      	mov	r3, r7
 8001750:	2100      	movs	r1, #0
 8001752:	4618      	mov	r0, r3
 8001754:	f006 fa19 	bl	8007b8a <osThreadCreate>
 8001758:	4603      	mov	r3, r0
 800175a:	4a05      	ldr	r2, [pc, #20]	; (8001770 <main+0x74>)
 800175c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800175e:	f006 f9fd 	bl	8007b5c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001762:	e7fe      	b.n	8001762 <main+0x66>
 8001764:	08019b94 	.word	0x08019b94
 8001768:	2000b13c 	.word	0x2000b13c
 800176c:	08019bb0 	.word	0x08019bb0
 8001770:	20008c80 	.word	0x20008c80

08001774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b094      	sub	sp, #80	; 0x50
 8001778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800177a:	f107 031c 	add.w	r3, r7, #28
 800177e:	2234      	movs	r2, #52	; 0x34
 8001780:	2100      	movs	r1, #0
 8001782:	4618      	mov	r0, r3
 8001784:	f016 faaa 	bl	8017cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001788:	f107 0308 	add.w	r3, r7, #8
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001798:	f003 f80a 	bl	80047b0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800179c:	4b2b      	ldr	r3, [pc, #172]	; (800184c <SystemClock_Config+0xd8>)
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	4a2a      	ldr	r2, [pc, #168]	; (800184c <SystemClock_Config+0xd8>)
 80017a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a6:	6413      	str	r3, [r2, #64]	; 0x40
 80017a8:	4b28      	ldr	r3, [pc, #160]	; (800184c <SystemClock_Config+0xd8>)
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b0:	607b      	str	r3, [r7, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017b4:	4b26      	ldr	r3, [pc, #152]	; (8001850 <SystemClock_Config+0xdc>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a25      	ldr	r2, [pc, #148]	; (8001850 <SystemClock_Config+0xdc>)
 80017ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	4b23      	ldr	r3, [pc, #140]	; (8001850 <SystemClock_Config+0xdc>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017c8:	603b      	str	r3, [r7, #0]
 80017ca:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017cc:	2301      	movs	r3, #1
 80017ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80017d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80017d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017d6:	2302      	movs	r3, #2
 80017d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017e0:	2304      	movs	r3, #4
 80017e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80017e4:	23d8      	movs	r3, #216	; 0xd8
 80017e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017e8:	2302      	movs	r3, #2
 80017ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80017ec:	2309      	movs	r3, #9
 80017ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017f0:	2302      	movs	r3, #2
 80017f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f4:	f107 031c 	add.w	r3, r7, #28
 80017f8:	4618      	mov	r0, r3
 80017fa:	f003 f839 	bl	8004870 <HAL_RCC_OscConfig>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001804:	f000 f97c 	bl	8001b00 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001808:	f002 ffe2 	bl	80047d0 <HAL_PWREx_EnableOverDrive>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001812:	f000 f975 	bl	8001b00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001816:	230f      	movs	r3, #15
 8001818:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800181a:	2302      	movs	r3, #2
 800181c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001822:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001826:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800182c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800182e:	f107 0308 	add.w	r3, r7, #8
 8001832:	2107      	movs	r1, #7
 8001834:	4618      	mov	r0, r3
 8001836:	f003 fac9 	bl	8004dcc <HAL_RCC_ClockConfig>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001840:	f000 f95e 	bl	8001b00 <Error_Handler>
  }
}
 8001844:	bf00      	nop
 8001846:	3750      	adds	r7, #80	; 0x50
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40023800 	.word	0x40023800
 8001850:	40007000 	.word	0x40007000

08001854 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001858:	4b14      	ldr	r3, [pc, #80]	; (80018ac <MX_USART3_UART_Init+0x58>)
 800185a:	4a15      	ldr	r2, [pc, #84]	; (80018b0 <MX_USART3_UART_Init+0x5c>)
 800185c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800185e:	4b13      	ldr	r3, [pc, #76]	; (80018ac <MX_USART3_UART_Init+0x58>)
 8001860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001864:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <MX_USART3_UART_Init+0x58>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <MX_USART3_UART_Init+0x58>)
 800186e:	2200      	movs	r2, #0
 8001870:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <MX_USART3_UART_Init+0x58>)
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <MX_USART3_UART_Init+0x58>)
 800187a:	220c      	movs	r2, #12
 800187c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <MX_USART3_UART_Init+0x58>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <MX_USART3_UART_Init+0x58>)
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800188a:	4b08      	ldr	r3, [pc, #32]	; (80018ac <MX_USART3_UART_Init+0x58>)
 800188c:	2200      	movs	r2, #0
 800188e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <MX_USART3_UART_Init+0x58>)
 8001892:	2200      	movs	r2, #0
 8001894:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001896:	4805      	ldr	r0, [pc, #20]	; (80018ac <MX_USART3_UART_Init+0x58>)
 8001898:	f004 fbd4 	bl	8006044 <HAL_UART_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80018a2:	f000 f92d 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20008744 	.word	0x20008744
 80018b0:	40004800 	.word	0x40004800

080018b4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80018b8:	4b14      	ldr	r3, [pc, #80]	; (800190c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80018be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018c2:	2206      	movs	r2, #6
 80018c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018c8:	2202      	movs	r2, #2
 80018ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018d4:	2202      	movs	r2, #2
 80018d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018da:	2201      	movs	r2, #1
 80018dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80018f6:	4805      	ldr	r0, [pc, #20]	; (800190c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018f8:	f002 fe11 	bl	800451e <HAL_PCD_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001902:	f000 f8fd 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	2000887c 	.word	0x2000887c

08001910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08c      	sub	sp, #48	; 0x30
 8001914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001916:	f107 031c 	add.w	r3, r7, #28
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]
 8001924:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001926:	4b47      	ldr	r3, [pc, #284]	; (8001a44 <MX_GPIO_Init+0x134>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a46      	ldr	r2, [pc, #280]	; (8001a44 <MX_GPIO_Init+0x134>)
 800192c:	f043 0304 	orr.w	r3, r3, #4
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b44      	ldr	r3, [pc, #272]	; (8001a44 <MX_GPIO_Init+0x134>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	61bb      	str	r3, [r7, #24]
 800193c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800193e:	4b41      	ldr	r3, [pc, #260]	; (8001a44 <MX_GPIO_Init+0x134>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a40      	ldr	r2, [pc, #256]	; (8001a44 <MX_GPIO_Init+0x134>)
 8001944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b3e      	ldr	r3, [pc, #248]	; (8001a44 <MX_GPIO_Init+0x134>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	4b3b      	ldr	r3, [pc, #236]	; (8001a44 <MX_GPIO_Init+0x134>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a3a      	ldr	r2, [pc, #232]	; (8001a44 <MX_GPIO_Init+0x134>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b38      	ldr	r3, [pc, #224]	; (8001a44 <MX_GPIO_Init+0x134>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800196e:	4b35      	ldr	r3, [pc, #212]	; (8001a44 <MX_GPIO_Init+0x134>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a34      	ldr	r2, [pc, #208]	; (8001a44 <MX_GPIO_Init+0x134>)
 8001974:	f043 0302 	orr.w	r3, r3, #2
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b32      	ldr	r3, [pc, #200]	; (8001a44 <MX_GPIO_Init+0x134>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001986:	4b2f      	ldr	r3, [pc, #188]	; (8001a44 <MX_GPIO_Init+0x134>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a2e      	ldr	r2, [pc, #184]	; (8001a44 <MX_GPIO_Init+0x134>)
 800198c:	f043 0308 	orr.w	r3, r3, #8
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b2c      	ldr	r3, [pc, #176]	; (8001a44 <MX_GPIO_Init+0x134>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800199e:	4b29      	ldr	r3, [pc, #164]	; (8001a44 <MX_GPIO_Init+0x134>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a28      	ldr	r2, [pc, #160]	; (8001a44 <MX_GPIO_Init+0x134>)
 80019a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <MX_GPIO_Init+0x134>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80019b6:	2200      	movs	r2, #0
 80019b8:	f244 0181 	movw	r1, #16513	; 0x4081
 80019bc:	4822      	ldr	r0, [pc, #136]	; (8001a48 <MX_GPIO_Init+0x138>)
 80019be:	f002 fd95 	bl	80044ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2140      	movs	r1, #64	; 0x40
 80019c6:	4821      	ldr	r0, [pc, #132]	; (8001a4c <MX_GPIO_Init+0x13c>)
 80019c8:	f002 fd90 	bl	80044ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80019cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80019dc:	f107 031c 	add.w	r3, r7, #28
 80019e0:	4619      	mov	r1, r3
 80019e2:	481b      	ldr	r0, [pc, #108]	; (8001a50 <MX_GPIO_Init+0x140>)
 80019e4:	f002 fbd6 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80019e8:	f244 0381 	movw	r3, #16513	; 0x4081
 80019ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ee:	2301      	movs	r3, #1
 80019f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2300      	movs	r3, #0
 80019f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fa:	f107 031c 	add.w	r3, r7, #28
 80019fe:	4619      	mov	r1, r3
 8001a00:	4811      	ldr	r0, [pc, #68]	; (8001a48 <MX_GPIO_Init+0x138>)
 8001a02:	f002 fbc7 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001a06:	2340      	movs	r3, #64	; 0x40
 8001a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a16:	f107 031c 	add.w	r3, r7, #28
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	480b      	ldr	r0, [pc, #44]	; (8001a4c <MX_GPIO_Init+0x13c>)
 8001a1e:	f002 fbb9 	bl	8004194 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001a22:	2380      	movs	r3, #128	; 0x80
 8001a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a26:	2300      	movs	r3, #0
 8001a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	4619      	mov	r1, r3
 8001a34:	4805      	ldr	r0, [pc, #20]	; (8001a4c <MX_GPIO_Init+0x13c>)
 8001a36:	f002 fbad 	bl	8004194 <HAL_GPIO_Init>

}
 8001a3a:	bf00      	nop
 8001a3c:	3730      	adds	r7, #48	; 0x30
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	40021800 	.word	0x40021800
 8001a50:	40020800 	.word	0x40020800

08001a54 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */

  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001a5c:	1d39      	adds	r1, r7, #4
 8001a5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a62:	2201      	movs	r2, #1
 8001a64:	4803      	ldr	r0, [pc, #12]	; (8001a74 <__io_putchar+0x20>)
 8001a66:	f004 fb3b 	bl	80060e0 <HAL_UART_Transmit>

  return ch;
 8001a6a:	687b      	ldr	r3, [r7, #4]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20008744 	.word	0x20008744

08001a78 <StartWebServerTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartWebServerTask */
void StartWebServerTask(void const * argument)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001a80:	f005 fac2 	bl	8007008 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  http_server_init();
 8001a84:	f001 f88e 	bl	8002ba4 <http_server_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a88:	2001      	movs	r0, #1
 8001a8a:	f006 f8ca 	bl	8007c22 <osDelay>
 8001a8e:	e7fb      	b.n	8001a88 <StartWebServerTask+0x10>

08001a90 <StartSSIDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSSIDTask */
void StartSSIDTask(void const * argument)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSSIDTask */
  /* Infinite loop */
  for(;;)
  {
	   if (strlen(randomSSID) != 0) {
 8001a98:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <StartSSIDTask+0x40>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d012      	beq.n	8001ac6 <StartSSIDTask+0x36>
			  if (HAL_GetTick() - Ti >= 500000){
 8001aa0:	f001 f8e2 	bl	8002c68 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <StartSSIDTask+0x44>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <StartSSIDTask+0x48>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d909      	bls.n	8001ac6 <StartSSIDTask+0x36>
				  Ti = HAL_GetTick();
 8001ab2:	f001 f8d9 	bl	8002c68 <HAL_GetTick>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4a06      	ldr	r2, [pc, #24]	; (8001ad4 <StartSSIDTask+0x44>)
 8001aba:	6013      	str	r3, [r2, #0]
				  memset(&randomSSID, '\0', sizeof(randomSSID));
 8001abc:	221b      	movs	r2, #27
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4803      	ldr	r0, [pc, #12]	; (8001ad0 <StartSSIDTask+0x40>)
 8001ac2:	f016 f90b 	bl	8017cdc <memset>
				   //printf("StartTaskToken1 \n");
			  }
	   }
    osDelay(1);
 8001ac6:	2001      	movs	r0, #1
 8001ac8:	f006 f8ab 	bl	8007c22 <osDelay>
	   if (strlen(randomSSID) != 0) {
 8001acc:	e7e4      	b.n	8001a98 <StartSSIDTask+0x8>
 8001ace:	bf00      	nop
 8001ad0:	20000a74 	.word	0x20000a74
 8001ad4:	2000ad38 	.word	0x2000ad38
 8001ad8:	0007a11f 	.word	0x0007a11f

08001adc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a04      	ldr	r2, [pc, #16]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d101      	bne.n	8001af2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001aee:	f001 f8a7 	bl	8002c40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40001000 	.word	0x40001000

08001b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b04:	b672      	cpsid	i
}
 8001b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <Error_Handler+0x8>
	...

08001b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_MspInit+0x4c>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	4a10      	ldr	r2, [pc, #64]	; (8001b58 <HAL_MspInit+0x4c>)
 8001b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <HAL_MspInit+0x4c>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <HAL_MspInit+0x4c>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <HAL_MspInit+0x4c>)
 8001b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b34:	6453      	str	r3, [r2, #68]	; 0x44
 8001b36:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <HAL_MspInit+0x4c>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	210f      	movs	r1, #15
 8001b46:	f06f 0001 	mvn.w	r0, #1
 8001b4a:	f001 f975 	bl	8002e38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023800 	.word	0x40023800

08001b5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b0ae      	sub	sp, #184	; 0xb8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	2290      	movs	r2, #144	; 0x90
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f016 f8ad 	bl	8017cdc <memset>
  if(huart->Instance==USART3)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a22      	ldr	r2, [pc, #136]	; (8001c10 <HAL_UART_MspInit+0xb4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d13c      	bne.n	8001c06 <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b90:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b92:	2300      	movs	r3, #0
 8001b94:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f003 fb4a 	bl	8005234 <HAL_RCCEx_PeriphCLKConfig>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ba6:	f7ff ffab 	bl	8001b00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001baa:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <HAL_UART_MspInit+0xb8>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	4a19      	ldr	r2, [pc, #100]	; (8001c14 <HAL_UART_MspInit+0xb8>)
 8001bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb6:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <HAL_UART_MspInit+0xb8>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bc2:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <HAL_UART_MspInit+0xb8>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a13      	ldr	r2, [pc, #76]	; (8001c14 <HAL_UART_MspInit+0xb8>)
 8001bc8:	f043 0308 	orr.w	r3, r3, #8
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <HAL_UART_MspInit+0xb8>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001bda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bf4:	2307      	movs	r3, #7
 8001bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bfa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4805      	ldr	r0, [pc, #20]	; (8001c18 <HAL_UART_MspInit+0xbc>)
 8001c02:	f002 fac7 	bl	8004194 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c06:	bf00      	nop
 8001c08:	37b8      	adds	r7, #184	; 0xb8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40004800 	.word	0x40004800
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40020c00 	.word	0x40020c00

08001c1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b0ae      	sub	sp, #184	; 0xb8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	2290      	movs	r2, #144	; 0x90
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f016 f84d 	bl	8017cdc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c4a:	d159      	bne.n	8001d00 <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001c4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c50:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f003 fae9 	bl	8005234 <HAL_RCCEx_PeriphCLKConfig>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001c68:	f7ff ff4a 	bl	8001b00 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6c:	4b26      	ldr	r3, [pc, #152]	; (8001d08 <HAL_PCD_MspInit+0xec>)
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c70:	4a25      	ldr	r2, [pc, #148]	; (8001d08 <HAL_PCD_MspInit+0xec>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6313      	str	r3, [r2, #48]	; 0x30
 8001c78:	4b23      	ldr	r3, [pc, #140]	; (8001d08 <HAL_PCD_MspInit+0xec>)
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c84:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001c88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c9e:	230a      	movs	r3, #10
 8001ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4818      	ldr	r0, [pc, #96]	; (8001d0c <HAL_PCD_MspInit+0xf0>)
 8001cac:	f002 fa72 	bl	8004194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001cc4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4810      	ldr	r0, [pc, #64]	; (8001d0c <HAL_PCD_MspInit+0xf0>)
 8001ccc:	f002 fa62 	bl	8004194 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001cd0:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <HAL_PCD_MspInit+0xec>)
 8001cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd4:	4a0c      	ldr	r2, [pc, #48]	; (8001d08 <HAL_PCD_MspInit+0xec>)
 8001cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cda:	6353      	str	r3, [r2, #52]	; 0x34
 8001cdc:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <HAL_PCD_MspInit+0xec>)
 8001cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <HAL_PCD_MspInit+0xec>)
 8001cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cec:	4a06      	ldr	r2, [pc, #24]	; (8001d08 <HAL_PCD_MspInit+0xec>)
 8001cee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf2:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf4:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <HAL_PCD_MspInit+0xec>)
 8001cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001d00:	bf00      	nop
 8001d02:	37b8      	adds	r7, #184	; 0xb8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40020000 	.word	0x40020000

08001d10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08c      	sub	sp, #48	; 0x30
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001d20:	2200      	movs	r2, #0
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	2036      	movs	r0, #54	; 0x36
 8001d26:	f001 f887 	bl	8002e38 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d2a:	2036      	movs	r0, #54	; 0x36
 8001d2c:	f001 f8a0 	bl	8002e70 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d30:	4b1f      	ldr	r3, [pc, #124]	; (8001db0 <HAL_InitTick+0xa0>)
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	4a1e      	ldr	r2, [pc, #120]	; (8001db0 <HAL_InitTick+0xa0>)
 8001d36:	f043 0310 	orr.w	r3, r3, #16
 8001d3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3c:	4b1c      	ldr	r3, [pc, #112]	; (8001db0 <HAL_InitTick+0xa0>)
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	f003 0310 	and.w	r3, r3, #16
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d48:	f107 0210 	add.w	r2, r7, #16
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	4611      	mov	r1, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f003 fa3c 	bl	80051d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001d58:	f003 fa12 	bl	8005180 <HAL_RCC_GetPCLK1Freq>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d64:	4a13      	ldr	r2, [pc, #76]	; (8001db4 <HAL_InitTick+0xa4>)
 8001d66:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6a:	0c9b      	lsrs	r3, r3, #18
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d70:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <HAL_InitTick+0xa8>)
 8001d72:	4a12      	ldr	r2, [pc, #72]	; (8001dbc <HAL_InitTick+0xac>)
 8001d74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d76:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <HAL_InitTick+0xa8>)
 8001d78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d7c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d7e:	4a0e      	ldr	r2, [pc, #56]	; (8001db8 <HAL_InitTick+0xa8>)
 8001d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d82:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <HAL_InitTick+0xa8>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <HAL_InitTick+0xa8>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001d90:	4809      	ldr	r0, [pc, #36]	; (8001db8 <HAL_InitTick+0xa8>)
 8001d92:	f003 fe77 	bl	8005a84 <HAL_TIM_Base_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d104      	bne.n	8001da6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001d9c:	4806      	ldr	r0, [pc, #24]	; (8001db8 <HAL_InitTick+0xa8>)
 8001d9e:	f003 fed3 	bl	8005b48 <HAL_TIM_Base_Start_IT>
 8001da2:	4603      	mov	r3, r0
 8001da4:	e000      	b.n	8001da8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3730      	adds	r7, #48	; 0x30
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40023800 	.word	0x40023800
 8001db4:	431bde83 	.word	0x431bde83
 8001db8:	2000b140 	.word	0x2000b140
 8001dbc:	40001000 	.word	0x40001000

08001dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <NMI_Handler+0x4>

08001dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dca:	e7fe      	b.n	8001dca <HardFault_Handler+0x4>

08001dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <MemManage_Handler+0x4>

08001dd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd6:	e7fe      	b.n	8001dd6 <BusFault_Handler+0x4>

08001dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <UsageFault_Handler+0x4>

08001dde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001df0:	4802      	ldr	r0, [pc, #8]	; (8001dfc <TIM6_DAC_IRQHandler+0x10>)
 8001df2:	f003 ff21 	bl	8005c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	2000b140 	.word	0x2000b140

08001e00 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001e04:	4802      	ldr	r0, [pc, #8]	; (8001e10 <ETH_IRQHandler+0x10>)
 8001e06:	f001 fc23 	bl	8003650 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	2000cab4 	.word	0x2000cab4

08001e14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
	return 1;
 8001e18:	2301      	movs	r3, #1
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <_kill>:

int _kill(int pid, int sig)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e2e:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <_kill+0x20>)
 8001e30:	2216      	movs	r2, #22
 8001e32:	601a      	str	r2, [r3, #0]
	return -1;
 8001e34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	20018bc0 	.word	0x20018bc0

08001e48 <_exit>:

void _exit (int status)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff ffe5 	bl	8001e24 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e5a:	e7fe      	b.n	8001e5a <_exit+0x12>

08001e5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	e00a      	b.n	8001e84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e6e:	f3af 8000 	nop.w
 8001e72:	4601      	mov	r1, r0
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	60ba      	str	r2, [r7, #8]
 8001e7a:	b2ca      	uxtb	r2, r1
 8001e7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	3301      	adds	r3, #1
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	dbf0      	blt.n	8001e6e <_read+0x12>
	}

return len;
 8001e8c:	687b      	ldr	r3, [r7, #4]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	e009      	b.n	8001ebc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	60ba      	str	r2, [r7, #8]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff fdcf 	bl	8001a54 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	dbf1      	blt.n	8001ea8 <_write+0x12>
	}
	return len;
 8001ec4:	687b      	ldr	r3, [r7, #4]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <_close>:

int _close(int file)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ef6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <_isatty>:

int _isatty(int file)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
	return 1;
 8001f0e:	2301      	movs	r3, #1
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
	return 0;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
	...

08001f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b087      	sub	sp, #28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f40:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <_sbrk+0x5c>)
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <_sbrk+0x60>)
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f4c:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <_sbrk+0x64>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d102      	bne.n	8001f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <_sbrk+0x64>)
 8001f56:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <_sbrk+0x68>)
 8001f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f5a:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <_sbrk+0x64>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d205      	bcs.n	8001f74 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001f68:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <_sbrk+0x6c>)
 8001f6a:	220c      	movs	r2, #12
 8001f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f72:	e009      	b.n	8001f88 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f74:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <_sbrk+0x64>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f7a:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	4a06      	ldr	r2, [pc, #24]	; (8001f9c <_sbrk+0x64>)
 8001f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f86:	68fb      	ldr	r3, [r7, #12]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	371c      	adds	r7, #28
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	20080000 	.word	0x20080000
 8001f98:	00000400 	.word	0x00000400
 8001f9c:	20000a64 	.word	0x20000a64
 8001fa0:	20018bd8 	.word	0x20018bd8
 8001fa4:	20018bc0 	.word	0x20018bc0

08001fa8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fac:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <SystemInit+0x20>)
 8001fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb2:	4a05      	ldr	r2, [pc, #20]	; (8001fc8 <SystemInit+0x20>)
 8001fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <randomSSIDGeneration>:

//////////////////////////

// Generation SSID
char *randomSSIDGeneration(char *rSSID, int num)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
    // Initialize counter
    int i = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]

    // Array of symbols
    static const char symbols[] = "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789";

    //  the random SSID
    for (i = 0; i < num; i++) {
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	e017      	b.n	8002010 <randomSSIDGeneration+0x44>
      rSSID[i] = symbols[rand() % 61];
 8001fe0:	f015 ffbc 	bl	8017f5c <rand>
 8001fe4:	4601      	mov	r1, r0
 8001fe6:	4b11      	ldr	r3, [pc, #68]	; (800202c <randomSSIDGeneration+0x60>)
 8001fe8:	fb83 2301 	smull	r2, r3, r3, r1
 8001fec:	111a      	asrs	r2, r3, #4
 8001fee:	17cb      	asrs	r3, r1, #31
 8001ff0:	1ad2      	subs	r2, r2, r3
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	1a9b      	subs	r3, r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	1aca      	subs	r2, r1, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	440b      	add	r3, r1
 8002004:	490a      	ldr	r1, [pc, #40]	; (8002030 <randomSSIDGeneration+0x64>)
 8002006:	5c8a      	ldrb	r2, [r1, r2]
 8002008:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num; i++) {
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	3301      	adds	r3, #1
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	dbe3      	blt.n	8001fe0 <randomSSIDGeneration+0x14>
    }
    rSSID[num]='\0';
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]

    return rSSID;
 8002022:	687b      	ldr	r3, [r7, #4]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	4325c53f 	.word	0x4325c53f
 8002030:	0801d204 	.word	0x0801d204

08002034 <restartSSID>:


// Restart SSID
void restartSSID(void){
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
		Ti = HAL_GetTick();
 8002038:	f000 fe16 	bl	8002c68 <HAL_GetTick>
 800203c:	4603      	mov	r3, r0
 800203e:	4a02      	ldr	r2, [pc, #8]	; (8002048 <restartSSID+0x14>)
 8002040:	6013      	str	r3, [r2, #0]
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	2000ad38 	.word	0x2000ad38

0800204c <MultiPartTabCount>:
	return *str;
}

// Counting the number of lines JSON
int MultiPartTabCount(int num, int pinnum)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
	int count = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i <= pinnum; i++){
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	e032      	b.n	80020c6 <MultiPartTabCount+0x7a>
		if(num == PinsConf[i].topin && num == 0){ // для Select
 8002060:	4a1e      	ldr	r2, [pc, #120]	; (80020dc <MultiPartTabCount+0x90>)
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2194      	movs	r1, #148	; 0x94
 8002066:	fb01 f303 	mul.w	r3, r1, r3
 800206a:	4413      	add	r3, r2
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	429a      	cmp	r2, r3
 8002072:	d105      	bne.n	8002080 <MultiPartTabCount+0x34>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d102      	bne.n	8002080 <MultiPartTabCount+0x34>
			count++;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	3301      	adds	r3, #1
 800207e:	60fb      	str	r3, [r7, #12]
		}
		if(num == PinsConf[i].topin && num == 1){// для кнопок
 8002080:	4a16      	ldr	r2, [pc, #88]	; (80020dc <MultiPartTabCount+0x90>)
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2194      	movs	r1, #148	; 0x94
 8002086:	fb01 f303 	mul.w	r3, r1, r3
 800208a:	4413      	add	r3, r2
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	429a      	cmp	r2, r3
 8002092:	d105      	bne.n	80020a0 <MultiPartTabCount+0x54>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d102      	bne.n	80020a0 <MultiPartTabCount+0x54>
			count++;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	3301      	adds	r3, #1
 800209e:	60fb      	str	r3, [r7, #12]
		}
		if(num == PinsConf[i].topin && num == 2){ // доя реле
 80020a0:	4a0e      	ldr	r2, [pc, #56]	; (80020dc <MultiPartTabCount+0x90>)
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2194      	movs	r1, #148	; 0x94
 80020a6:	fb01 f303 	mul.w	r3, r1, r3
 80020aa:	4413      	add	r3, r2
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d105      	bne.n	80020c0 <MultiPartTabCount+0x74>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d102      	bne.n	80020c0 <MultiPartTabCount+0x74>
			count++;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	3301      	adds	r3, #1
 80020be:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i <= pinnum; i++){
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	3301      	adds	r3, #1
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	ddc8      	ble.n	8002060 <MultiPartTabCount+0x14>
		}
	}
	return count;
 80020ce:	68fb      	ldr	r3, [r7, #12]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	200053d0 	.word	0x200053d0

080020e0 <ssi_handler>:


const uint8_t SSI_TAG_NUM = (sizeof(TAGCHAR) / sizeof(TAGCHAR[0]));

static u16_t ssi_handler(int iIndex, char *pcInsert, int iInsertLen,
		u16_t current_tag_part, u16_t *next_tag_part) {
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b08d      	sub	sp, #52	; 0x34
 80020e4:	af04      	add	r7, sp, #16
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	807b      	strh	r3, [r7, #2]

	char* str = NULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
	cJSON *root = NULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61bb      	str	r3, [r7, #24]
	cJSON *fld = NULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	f200 80b5 	bhi.w	800226c <ssi_handler+0x18c>
 8002102:	a201      	add	r2, pc, #4	; (adr r2, 8002108 <ssi_handler+0x28>)
 8002104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002108:	08002119 	.word	0x08002119
 800210c:	080021a1 	.word	0x080021a1
 8002110:	080021b7 	.word	0x080021b7
 8002114:	08002245 	.word	0x08002245

	switch (iIndex) {
	// ssi tag <!--#tabjson-->
	case 0:
	#if LWIP_HTTPD_SSI_MULTIPART
		if (variable == NUMPIN) {
 8002118:	4b59      	ldr	r3, [pc, #356]	; (8002280 <ssi_handler+0x1a0>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b59      	cmp	r3, #89	; 0x59
 800211e:	d103      	bne.n	8002128 <ssi_handler+0x48>
			variable = 0;
 8002120:	4b57      	ldr	r3, [pc, #348]	; (8002280 <ssi_handler+0x1a0>)
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
			break;
 8002126:	e0a2      	b.n	800226e <ssi_handler+0x18e>
		} else {
			///////
			//if(tab == 1){ // tab 1 - для select tab 2 - для кнопок tab 2 - для реле
				//sprintf(pcInsert, MultiPartTabSelect(numTabLine, variable));
				//strcpy(pcInsert, MultiPartTabSelect(numTabLine, variable));
				sprintf(pcInsert,"{\"id\":%d,\"pins\":\"%s\",\"topin\":%d},",
 8002128:	4b55      	ldr	r3, [pc, #340]	; (8002280 <ssi_handler+0x1a0>)
 800212a:	6819      	ldr	r1, [r3, #0]
						variable, PinsInfo[variable].pins, PinsConf[variable].topin);
 800212c:	4b54      	ldr	r3, [pc, #336]	; (8002280 <ssi_handler+0x1a0>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4613      	mov	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4a52      	ldr	r2, [pc, #328]	; (8002284 <ssi_handler+0x1a4>)
 800213a:	441a      	add	r2, r3
				sprintf(pcInsert,"{\"id\":%d,\"pins\":\"%s\",\"topin\":%d},",
 800213c:	4b50      	ldr	r3, [pc, #320]	; (8002280 <ssi_handler+0x1a0>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4851      	ldr	r0, [pc, #324]	; (8002288 <ssi_handler+0x1a8>)
 8002142:	2494      	movs	r4, #148	; 0x94
 8002144:	fb04 f303 	mul.w	r3, r4, r3
 8002148:	4403      	add	r3, r0
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	4613      	mov	r3, r2
 8002150:	460a      	mov	r2, r1
 8002152:	494e      	ldr	r1, [pc, #312]	; (800228c <ssi_handler+0x1ac>)
 8002154:	68b8      	ldr	r0, [r7, #8]
 8002156:	f015 fff7 	bl	8018148 <siprintf>
				printf("variable %d \n", variable);
 800215a:	4b49      	ldr	r3, [pc, #292]	; (8002280 <ssi_handler+0x1a0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4619      	mov	r1, r3
 8002160:	484b      	ldr	r0, [pc, #300]	; (8002290 <ssi_handler+0x1b0>)
 8002162:	f015 fe6d 	bl	8017e40 <iprintf>
				if(variable == (NUMPIN-1)){
 8002166:	4b46      	ldr	r3, [pc, #280]	; (8002280 <ssi_handler+0x1a0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b58      	cmp	r3, #88	; 0x58
 800216c:	d108      	bne.n	8002180 <ssi_handler+0xa0>
					pcInsert[strlen(pcInsert) - 1] = '\0'; // Удаляем "," из JSON
 800216e:	68b8      	ldr	r0, [r7, #8]
 8002170:	f7fe f870 	bl	8000254 <strlen>
 8002174:	4603      	mov	r3, r0
 8002176:	3b01      	subs	r3, #1
 8002178:	68ba      	ldr	r2, [r7, #8]
 800217a:	4413      	add	r3, r2
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
				}
			//}

			*next_tag_part = variable;
 8002180:	4b3f      	ldr	r3, [pc, #252]	; (8002280 <ssi_handler+0x1a0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	b29a      	uxth	r2, r3
 8002186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002188:	801a      	strh	r2, [r3, #0]
			variable++;
 800218a:	4b3d      	ldr	r3, [pc, #244]	; (8002280 <ssi_handler+0x1a0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	3301      	adds	r3, #1
 8002190:	4a3b      	ldr	r2, [pc, #236]	; (8002280 <ssi_handler+0x1a0>)
 8002192:	6013      	str	r3, [r2, #0]
			return strlen(pcInsert);
 8002194:	68b8      	ldr	r0, [r7, #8]
 8002196:	f7fe f85d 	bl	8000254 <strlen>
 800219a:	4603      	mov	r3, r0
 800219c:	b29b      	uxth	r3, r3
 800219e:	e067      	b.n	8002270 <ssi_handler+0x190>
		printf("LWIP_HTTPD_SSI_MULTIPART disabled /n");
	#endif
		break;
		// ssi tag  <!--#ssid-->
		case 1:
			sprintf(pcInsert, "%s", randomSSID);
 80021a0:	4a3c      	ldr	r2, [pc, #240]	; (8002294 <ssi_handler+0x1b4>)
 80021a2:	493d      	ldr	r1, [pc, #244]	; (8002298 <ssi_handler+0x1b8>)
 80021a4:	68b8      	ldr	r0, [r7, #8]
 80021a6:	f015 ffcf 	bl	8018148 <siprintf>
			return strlen(pcInsert);
 80021aa:	68b8      	ldr	r0, [r7, #8]
 80021ac:	f7fe f852 	bl	8000254 <strlen>
 80021b0:	4603      	mov	r3, r0
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	e05c      	b.n	8002270 <ssi_handler+0x190>
			break;

		// ssi tag <!--#check-->
		case 2:
			root = cJSON_CreateArray();
 80021b6:	f7ff fa5f 	bl	8001678 <cJSON_CreateArray>
 80021ba:	61b8      	str	r0, [r7, #24]
			fld = cJSON_CreateObject();
 80021bc:	f7ff fa70 	bl	80016a0 <cJSON_CreateObject>
 80021c0:	6178      	str	r0, [r7, #20]
			cJSON_AddItemToArray(root, fld = cJSON_CreateObject());
 80021c2:	f7ff fa6d 	bl	80016a0 <cJSON_CreateObject>
 80021c6:	6178      	str	r0, [r7, #20]
 80021c8:	6979      	ldr	r1, [r7, #20]
 80021ca:	69b8      	ldr	r0, [r7, #24]
 80021cc:	f7ff f92d 	bl	800142a <cJSON_AddItemToArray>

			if(verifyNum == 2){
 80021d0:	4b32      	ldr	r3, [pc, #200]	; (800229c <ssi_handler+0x1bc>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d115      	bne.n	8002204 <ssi_handler+0x124>
				memset(randomSSID, '\0', sizeof(randomSSID));
 80021d8:	221b      	movs	r2, #27
 80021da:	2100      	movs	r1, #0
 80021dc:	482d      	ldr	r0, [pc, #180]	; (8002294 <ssi_handler+0x1b4>)
 80021de:	f015 fd7d 	bl	8017cdc <memset>
				cJSON_AddNumberToObject(fld, "login", 1);
 80021e2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80021e6:	492e      	ldr	r1, [pc, #184]	; (80022a0 <ssi_handler+0x1c0>)
 80021e8:	6978      	ldr	r0, [r7, #20]
 80021ea:	f7ff f98d 	bl	8001508 <cJSON_AddNumberToObject>
				cJSON_AddStringToObject(fld, "ssid", randomSSIDGeneration(randomSSID, 27));
 80021ee:	211b      	movs	r1, #27
 80021f0:	4828      	ldr	r0, [pc, #160]	; (8002294 <ssi_handler+0x1b4>)
 80021f2:	f7ff feeb 	bl	8001fcc <randomSSIDGeneration>
 80021f6:	4603      	mov	r3, r0
 80021f8:	461a      	mov	r2, r3
 80021fa:	492a      	ldr	r1, [pc, #168]	; (80022a4 <ssi_handler+0x1c4>)
 80021fc:	6978      	ldr	r0, [r7, #20]
 80021fe:	f7ff f9a7 	bl	8001550 <cJSON_AddStringToObject>
 8002202:	e00a      	b.n	800221a <ssi_handler+0x13a>
			} else {
				cJSON_AddNumberToObject(fld, "login", 0);
 8002204:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8002278 <ssi_handler+0x198>
 8002208:	4925      	ldr	r1, [pc, #148]	; (80022a0 <ssi_handler+0x1c0>)
 800220a:	6978      	ldr	r0, [r7, #20]
 800220c:	f7ff f97c 	bl	8001508 <cJSON_AddNumberToObject>
				cJSON_AddStringToObject(fld, "ssid", "");
 8002210:	4a25      	ldr	r2, [pc, #148]	; (80022a8 <ssi_handler+0x1c8>)
 8002212:	4924      	ldr	r1, [pc, #144]	; (80022a4 <ssi_handler+0x1c4>)
 8002214:	6978      	ldr	r0, [r7, #20]
 8002216:	f7ff f99b 	bl	8001550 <cJSON_AddStringToObject>
			}

			str = cJSON_Print(root);
 800221a:	69b8      	ldr	r0, [r7, #24]
 800221c:	f7fe fe26 	bl	8000e6c <cJSON_Print>
 8002220:	61f8      	str	r0, [r7, #28]
			cJSON_Delete(root);
 8002222:	69b8      	ldr	r0, [r7, #24]
 8002224:	f7fe fa2e 	bl	8000684 <cJSON_Delete>
			sprintf(pcInsert, "%s", str);
 8002228:	69fa      	ldr	r2, [r7, #28]
 800222a:	491b      	ldr	r1, [pc, #108]	; (8002298 <ssi_handler+0x1b8>)
 800222c:	68b8      	ldr	r0, [r7, #8]
 800222e:	f015 ff8b 	bl	8018148 <siprintf>
			verifyNum = 0;
 8002232:	4b1a      	ldr	r3, [pc, #104]	; (800229c <ssi_handler+0x1bc>)
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]

			return strlen(pcInsert);
 8002238:	68b8      	ldr	r0, [r7, #8]
 800223a:	f7fe f80b 	bl	8000254 <strlen>
 800223e:	4603      	mov	r3, r0
 8002240:	b29b      	uxth	r3, r3
 8002242:	e015      	b.n	8002270 <ssi_handler+0x190>
			break;

		// ssi tag <!--#menu-->
		case 3:
			sprintf(pcInsert,"<a href=\"index.shtml?ssid=%s\">Home</a> | <a href=\"select.shtml?ssid=%s\">Select pin</a> | <a href=\"tabbuttom.shtml?ssid=%s\">Buttom pin</a> | <a href=\"tabrelay.shtml?ssid=%s\">Relay pin</a> | <a href=\"timers.shtml?ssid=%s\">Timers</a> | <a href=\"settings.shtml?ssid=%s\">Settings</a> | <a href=\"logout.shtml\">Logout</a> ", randomSSID,randomSSID,randomSSID,randomSSID,randomSSID,randomSSID);
 8002244:	4b13      	ldr	r3, [pc, #76]	; (8002294 <ssi_handler+0x1b4>)
 8002246:	9303      	str	r3, [sp, #12]
 8002248:	4b12      	ldr	r3, [pc, #72]	; (8002294 <ssi_handler+0x1b4>)
 800224a:	9302      	str	r3, [sp, #8]
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <ssi_handler+0x1b4>)
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	4b10      	ldr	r3, [pc, #64]	; (8002294 <ssi_handler+0x1b4>)
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <ssi_handler+0x1b4>)
 8002256:	4a0f      	ldr	r2, [pc, #60]	; (8002294 <ssi_handler+0x1b4>)
 8002258:	4914      	ldr	r1, [pc, #80]	; (80022ac <ssi_handler+0x1cc>)
 800225a:	68b8      	ldr	r0, [r7, #8]
 800225c:	f015 ff74 	bl	8018148 <siprintf>
			return strlen(pcInsert);
 8002260:	68b8      	ldr	r0, [r7, #8]
 8002262:	f7fd fff7 	bl	8000254 <strlen>
 8002266:	4603      	mov	r3, r0
 8002268:	b29b      	uxth	r3, r3
 800226a:	e001      	b.n	8002270 <ssi_handler+0x190>
			break;



		default:
			break;
 800226c:	bf00      	nop
	}
	return 0;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3724      	adds	r7, #36	; 0x24
 8002274:	46bd      	mov	sp, r7
 8002276:	bd90      	pop	{r4, r7, pc}
	...
 8002280:	20000a6c 	.word	0x20000a6c
 8002284:	2000000c 	.word	0x2000000c
 8002288:	200053d0 	.word	0x200053d0
 800228c:	08019bcc 	.word	0x08019bcc
 8002290:	08019c10 	.word	0x08019c10
 8002294:	20000a74 	.word	0x20000a74
 8002298:	08019c20 	.word	0x08019c20
 800229c:	20000a70 	.word	0x20000a70
 80022a0:	08019c24 	.word	0x08019c24
 80022a4:	08019bf8 	.word	0x08019bf8
 80022a8:	08019c2c 	.word	0x08019c2c
 80022ac:	08019c30 	.word	0x08019c30

080022b0 <FormCGI_Handler>:
const uint8_t CGI_URL_NUM = (sizeof(URL_TABLES) / sizeof(tCGI));


// index.shtml Handler (Index 0)
const char* FormCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08c      	sub	sp, #48	; 0x30
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	603b      	str	r3, [r7, #0]

	char ssid[27] = {0};
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	f107 0314 	add.w	r3, r7, #20
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	605a      	str	r2, [r3, #4]
 80022cc:	609a      	str	r2, [r3, #8]
 80022ce:	60da      	str	r2, [r3, #12]
 80022d0:	611a      	str	r2, [r3, #16]
 80022d2:	f8c3 2013 	str.w	r2, [r3, #19]

	if (iIndex == 0) {
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d120      	bne.n	800231e <FormCGI_Handler+0x6e>
		for (int i = 0; i < iNumParams; i++) {
 80022dc:	2300      	movs	r3, #0
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022e0:	e019      	b.n	8002316 <FormCGI_Handler+0x66>
			if (strcmp(pcParam[i], "ssid") == 0)
 80022e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4920      	ldr	r1, [pc, #128]	; (8002370 <FormCGI_Handler+0xc0>)
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fd ffa6 	bl	8000240 <strcmp>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10a      	bne.n	8002310 <FormCGI_Handler+0x60>
			{
				strcpy(ssid, pcValue[i]);
 80022fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	4413      	add	r3, r2
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	f107 0310 	add.w	r3, r7, #16
 8002308:	4611      	mov	r1, r2
 800230a:	4618      	mov	r0, r3
 800230c:	f015 ffc9 	bl	80182a2 <strcpy>
		for (int i = 0; i < iNumParams; i++) {
 8002310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002312:	3301      	adds	r3, #1
 8002314:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002316:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	429a      	cmp	r2, r3
 800231c:	dbe1      	blt.n	80022e2 <FormCGI_Handler+0x32>
			}
		}
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 800231e:	f107 0310 	add.w	r3, r7, #16
 8002322:	4914      	ldr	r1, [pc, #80]	; (8002374 <FormCGI_Handler+0xc4>)
 8002324:	4618      	mov	r0, r3
 8002326:	f7fd ff8b 	bl	8000240 <strcmp>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d111      	bne.n	8002354 <FormCGI_Handler+0xa4>
 8002330:	4b10      	ldr	r3, [pc, #64]	; (8002374 <FormCGI_Handler+0xc4>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00d      	beq.n	8002354 <FormCGI_Handler+0xa4>
		printf("SSID OK \n");
 8002338:	480f      	ldr	r0, [pc, #60]	; (8002378 <FormCGI_Handler+0xc8>)
 800233a:	f015 fe07 	bl	8017f4c <puts>
		restartSSID();
 800233e:	f7ff fe79 	bl	8002034 <restartSSID>
		memset(ssid, '\0', sizeof(ssid));
 8002342:	f107 0310 	add.w	r3, r7, #16
 8002346:	221b      	movs	r2, #27
 8002348:	2100      	movs	r1, #0
 800234a:	4618      	mov	r0, r3
 800234c:	f015 fcc6 	bl	8017cdc <memset>
		return "/index.shtml"; //
 8002350:	4b0a      	ldr	r3, [pc, #40]	; (800237c <FormCGI_Handler+0xcc>)
 8002352:	e008      	b.n	8002366 <FormCGI_Handler+0xb6>
	} else {
		printf("SSID Failed \n");
 8002354:	480a      	ldr	r0, [pc, #40]	; (8002380 <FormCGI_Handler+0xd0>)
 8002356:	f015 fdf9 	bl	8017f4c <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 800235a:	221b      	movs	r2, #27
 800235c:	2100      	movs	r1, #0
 800235e:	4805      	ldr	r0, [pc, #20]	; (8002374 <FormCGI_Handler+0xc4>)
 8002360:	f015 fcbc 	bl	8017cdc <memset>
		return "/login.shtml";
 8002364:	4b07      	ldr	r3, [pc, #28]	; (8002384 <FormCGI_Handler+0xd4>)
	}

}
 8002366:	4618      	mov	r0, r3
 8002368:	3730      	adds	r7, #48	; 0x30
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	08019bf8 	.word	0x08019bf8
 8002374:	20000a74 	.word	0x20000a74
 8002378:	08019e00 	.word	0x08019e00
 800237c:	08019d6c 	.word	0x08019d6c
 8002380:	08019e0c 	.word	0x08019e0c
 8002384:	08019e1c 	.word	0x08019e1c

08002388 <LoginCGI_Handler>:


// Login Handler (Index 1)
const char* LoginCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
 8002394:	603b      	str	r3, [r7, #0]

	if (iIndex == 1) {
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d14c      	bne.n	8002436 <LoginCGI_Handler+0xae>
		for (int i = 0; i < iNumParams; i++) {
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	e045      	b.n	800242e <LoginCGI_Handler+0xa6>
			if(strcmp(pcParam[i], "username") == 0){
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4924      	ldr	r1, [pc, #144]	; (8002440 <LoginCGI_Handler+0xb8>)
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fd ff46 	bl	8000240 <strcmp>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d115      	bne.n	80023e6 <LoginCGI_Handler+0x5e>
				printf("OK Get 1 \n");
 80023ba:	4822      	ldr	r0, [pc, #136]	; (8002444 <LoginCGI_Handler+0xbc>)
 80023bc:	f015 fdc6 	bl	8017f4c <puts>
				if(strcmp(pcValue[i], "admin") == 0){
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	4413      	add	r3, r2
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	491f      	ldr	r1, [pc, #124]	; (8002448 <LoginCGI_Handler+0xc0>)
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fd ff37 	bl	8000240 <strcmp>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d127      	bne.n	8002428 <LoginCGI_Handler+0xa0>
					verifyNum++;
 80023d8:	4b1c      	ldr	r3, [pc, #112]	; (800244c <LoginCGI_Handler+0xc4>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	3301      	adds	r3, #1
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	4b1a      	ldr	r3, [pc, #104]	; (800244c <LoginCGI_Handler+0xc4>)
 80023e2:	701a      	strb	r2, [r3, #0]
 80023e4:	e020      	b.n	8002428 <LoginCGI_Handler+0xa0>
				}

			} else if(strcmp(pcParam[i], "password") == 0) {
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	4413      	add	r3, r2
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4917      	ldr	r1, [pc, #92]	; (8002450 <LoginCGI_Handler+0xc8>)
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fd ff24 	bl	8000240 <strcmp>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d114      	bne.n	8002428 <LoginCGI_Handler+0xa0>
				printf("OK Get 2 \n");
 80023fe:	4815      	ldr	r0, [pc, #84]	; (8002454 <LoginCGI_Handler+0xcc>)
 8002400:	f015 fda4 	bl	8017f4c <puts>
				if(strcmp(pcValue[i], "12345678") == 0){
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	4413      	add	r3, r2
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4912      	ldr	r1, [pc, #72]	; (8002458 <LoginCGI_Handler+0xd0>)
 8002410:	4618      	mov	r0, r3
 8002412:	f7fd ff15 	bl	8000240 <strcmp>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d105      	bne.n	8002428 <LoginCGI_Handler+0xa0>
					verifyNum++;
 800241c:	4b0b      	ldr	r3, [pc, #44]	; (800244c <LoginCGI_Handler+0xc4>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	3301      	adds	r3, #1
 8002422:	b2da      	uxtb	r2, r3
 8002424:	4b09      	ldr	r3, [pc, #36]	; (800244c <LoginCGI_Handler+0xc4>)
 8002426:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < iNumParams; i++) {
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	3301      	adds	r3, #1
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	429a      	cmp	r2, r3
 8002434:	dbb5      	blt.n	80023a2 <LoginCGI_Handler+0x1a>
				}
			}
		}
	}

	return "/logon.shtml";
 8002436:	4b09      	ldr	r3, [pc, #36]	; (800245c <LoginCGI_Handler+0xd4>)
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	08019e2c 	.word	0x08019e2c
 8002444:	08019e38 	.word	0x08019e38
 8002448:	08019e44 	.word	0x08019e44
 800244c:	20000a70 	.word	0x20000a70
 8002450:	08019e4c 	.word	0x08019e4c
 8002454:	08019e58 	.word	0x08019e58
 8002458:	08019e64 	.word	0x08019e64
 800245c:	08019d7c 	.word	0x08019d7c

08002460 <SelectCGI_Handler>:


// select.shtml Handler (Index 2)
const char* SelectCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8002460:	b580      	push	{r7, lr}
 8002462:	b08c      	sub	sp, #48	; 0x30
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
 800246c:	603b      	str	r3, [r7, #0]

	char ssid[27] = {0};
 800246e:	2300      	movs	r3, #0
 8002470:	613b      	str	r3, [r7, #16]
 8002472:	f107 0314 	add.w	r3, r7, #20
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	60da      	str	r2, [r3, #12]
 8002480:	611a      	str	r2, [r3, #16]
 8002482:	f8c3 2013 	str.w	r2, [r3, #19]
	printf("count tabline Select %d \n", MultiPartTabCount(0,NUMPIN));
 8002486:	2159      	movs	r1, #89	; 0x59
 8002488:	2000      	movs	r0, #0
 800248a:	f7ff fddf 	bl	800204c <MultiPartTabCount>
 800248e:	4603      	mov	r3, r0
 8002490:	4619      	mov	r1, r3
 8002492:	4827      	ldr	r0, [pc, #156]	; (8002530 <SelectCGI_Handler+0xd0>)
 8002494:	f015 fcd4 	bl	8017e40 <iprintf>

	if (iIndex == 2) {
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d120      	bne.n	80024e0 <SelectCGI_Handler+0x80>
		for (int i = 0; i < iNumParams; i++) {
 800249e:	2300      	movs	r3, #0
 80024a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024a2:	e019      	b.n	80024d8 <SelectCGI_Handler+0x78>
			if (strcmp(pcParam[i], "ssid") == 0)
 80024a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	4413      	add	r3, r2
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4921      	ldr	r1, [pc, #132]	; (8002534 <SelectCGI_Handler+0xd4>)
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7fd fec5 	bl	8000240 <strcmp>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10a      	bne.n	80024d2 <SelectCGI_Handler+0x72>
			{
				strcpy(ssid, pcValue[i]);
 80024bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	4413      	add	r3, r2
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	f107 0310 	add.w	r3, r7, #16
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f015 fee8 	bl	80182a2 <strcpy>
		for (int i = 0; i < iNumParams; i++) {
 80024d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d4:	3301      	adds	r3, #1
 80024d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	429a      	cmp	r2, r3
 80024de:	dbe1      	blt.n	80024a4 <SelectCGI_Handler+0x44>
			}
		}
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 80024e0:	f107 0310 	add.w	r3, r7, #16
 80024e4:	4914      	ldr	r1, [pc, #80]	; (8002538 <SelectCGI_Handler+0xd8>)
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fd feaa 	bl	8000240 <strcmp>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d111      	bne.n	8002516 <SelectCGI_Handler+0xb6>
 80024f2:	4b11      	ldr	r3, [pc, #68]	; (8002538 <SelectCGI_Handler+0xd8>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00d      	beq.n	8002516 <SelectCGI_Handler+0xb6>
		printf("SSID OK \n");
 80024fa:	4810      	ldr	r0, [pc, #64]	; (800253c <SelectCGI_Handler+0xdc>)
 80024fc:	f015 fd26 	bl	8017f4c <puts>
		restartSSID();
 8002500:	f7ff fd98 	bl	8002034 <restartSSID>
		memset(ssid, '\0', sizeof(ssid));
 8002504:	f107 0310 	add.w	r3, r7, #16
 8002508:	221b      	movs	r2, #27
 800250a:	2100      	movs	r1, #0
 800250c:	4618      	mov	r0, r3
 800250e:	f015 fbe5 	bl	8017cdc <memset>
		return "/select.shtml"; //
 8002512:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <SelectCGI_Handler+0xe0>)
 8002514:	e008      	b.n	8002528 <SelectCGI_Handler+0xc8>
	} else {
		printf("SSID Failed \n");
 8002516:	480b      	ldr	r0, [pc, #44]	; (8002544 <SelectCGI_Handler+0xe4>)
 8002518:	f015 fd18 	bl	8017f4c <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 800251c:	221b      	movs	r2, #27
 800251e:	2100      	movs	r1, #0
 8002520:	4805      	ldr	r0, [pc, #20]	; (8002538 <SelectCGI_Handler+0xd8>)
 8002522:	f015 fbdb 	bl	8017cdc <memset>
		return "/login.shtml";
 8002526:	4b08      	ldr	r3, [pc, #32]	; (8002548 <SelectCGI_Handler+0xe8>)
	}

}
 8002528:	4618      	mov	r0, r3
 800252a:	3730      	adds	r7, #48	; 0x30
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	08019e70 	.word	0x08019e70
 8002534:	08019bf8 	.word	0x08019bf8
 8002538:	20000a74 	.word	0x20000a74
 800253c:	08019e00 	.word	0x08019e00
 8002540:	08019d8c 	.word	0x08019d8c
 8002544:	08019e0c 	.word	0x08019e0c
 8002548:	08019e1c 	.word	0x08019e1c

0800254c <RelayCGI_Handler>:


// tabrelay.shtml Handler (Index 3)
const char* RelayCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 800254c:	b580      	push	{r7, lr}
 800254e:	b08c      	sub	sp, #48	; 0x30
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
 8002558:	603b      	str	r3, [r7, #0]

	char ssid[27] = {0};
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	f107 0314 	add.w	r3, r7, #20
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	605a      	str	r2, [r3, #4]
 8002568:	609a      	str	r2, [r3, #8]
 800256a:	60da      	str	r2, [r3, #12]
 800256c:	611a      	str	r2, [r3, #16]
 800256e:	f8c3 2013 	str.w	r2, [r3, #19]
	printf("count tabline Relay %d \n", MultiPartTabCount(1,NUMPIN));
 8002572:	2159      	movs	r1, #89	; 0x59
 8002574:	2001      	movs	r0, #1
 8002576:	f7ff fd69 	bl	800204c <MultiPartTabCount>
 800257a:	4603      	mov	r3, r0
 800257c:	4619      	mov	r1, r3
 800257e:	4827      	ldr	r0, [pc, #156]	; (800261c <RelayCGI_Handler+0xd0>)
 8002580:	f015 fc5e 	bl	8017e40 <iprintf>

	if (iIndex == 3) {
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2b03      	cmp	r3, #3
 8002588:	d120      	bne.n	80025cc <RelayCGI_Handler+0x80>
		for (int i = 0; i < iNumParams; i++) {
 800258a:	2300      	movs	r3, #0
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800258e:	e019      	b.n	80025c4 <RelayCGI_Handler+0x78>
			if (strcmp(pcParam[i], "ssid") == 0)
 8002590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	4413      	add	r3, r2
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4921      	ldr	r1, [pc, #132]	; (8002620 <RelayCGI_Handler+0xd4>)
 800259c:	4618      	mov	r0, r3
 800259e:	f7fd fe4f 	bl	8000240 <strcmp>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10a      	bne.n	80025be <RelayCGI_Handler+0x72>
			{
				strcpy(ssid, pcValue[i]);
 80025a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	4413      	add	r3, r2
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	f107 0310 	add.w	r3, r7, #16
 80025b6:	4611      	mov	r1, r2
 80025b8:	4618      	mov	r0, r3
 80025ba:	f015 fe72 	bl	80182a2 <strcpy>
		for (int i = 0; i < iNumParams; i++) {
 80025be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c0:	3301      	adds	r3, #1
 80025c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	dbe1      	blt.n	8002590 <RelayCGI_Handler+0x44>
			}
		}
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 80025cc:	f107 0310 	add.w	r3, r7, #16
 80025d0:	4914      	ldr	r1, [pc, #80]	; (8002624 <RelayCGI_Handler+0xd8>)
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fd fe34 	bl	8000240 <strcmp>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d111      	bne.n	8002602 <RelayCGI_Handler+0xb6>
 80025de:	4b11      	ldr	r3, [pc, #68]	; (8002624 <RelayCGI_Handler+0xd8>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00d      	beq.n	8002602 <RelayCGI_Handler+0xb6>
		printf("SSID OK \n");
 80025e6:	4810      	ldr	r0, [pc, #64]	; (8002628 <RelayCGI_Handler+0xdc>)
 80025e8:	f015 fcb0 	bl	8017f4c <puts>
		restartSSID();
 80025ec:	f7ff fd22 	bl	8002034 <restartSSID>
		memset(ssid, '\0', sizeof(ssid));
 80025f0:	f107 0310 	add.w	r3, r7, #16
 80025f4:	221b      	movs	r2, #27
 80025f6:	2100      	movs	r1, #0
 80025f8:	4618      	mov	r0, r3
 80025fa:	f015 fb6f 	bl	8017cdc <memset>
		return "/tabrelay.shtml"; //
 80025fe:	4b0b      	ldr	r3, [pc, #44]	; (800262c <RelayCGI_Handler+0xe0>)
 8002600:	e008      	b.n	8002614 <RelayCGI_Handler+0xc8>
	} else {
		printf("SSID Failed \n");
 8002602:	480b      	ldr	r0, [pc, #44]	; (8002630 <RelayCGI_Handler+0xe4>)
 8002604:	f015 fca2 	bl	8017f4c <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 8002608:	221b      	movs	r2, #27
 800260a:	2100      	movs	r1, #0
 800260c:	4805      	ldr	r0, [pc, #20]	; (8002624 <RelayCGI_Handler+0xd8>)
 800260e:	f015 fb65 	bl	8017cdc <memset>
		return "/login.shtml";
 8002612:	4b08      	ldr	r3, [pc, #32]	; (8002634 <RelayCGI_Handler+0xe8>)
	}

}
 8002614:	4618      	mov	r0, r3
 8002616:	3730      	adds	r7, #48	; 0x30
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	08019e8c 	.word	0x08019e8c
 8002620:	08019bf8 	.word	0x08019bf8
 8002624:	20000a74 	.word	0x20000a74
 8002628:	08019e00 	.word	0x08019e00
 800262c:	08019d9c 	.word	0x08019d9c
 8002630:	08019e0c 	.word	0x08019e0c
 8002634:	08019e1c 	.word	0x08019e1c

08002638 <ButtonCGI_Handler>:

// tabbuttom.shtml Handler (Index 4)
const char* ButtonCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8002638:	b580      	push	{r7, lr}
 800263a:	b08c      	sub	sp, #48	; 0x30
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
 8002644:	603b      	str	r3, [r7, #0]

	char ssid[27] = {0};
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	f107 0314 	add.w	r3, r7, #20
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	605a      	str	r2, [r3, #4]
 8002654:	609a      	str	r2, [r3, #8]
 8002656:	60da      	str	r2, [r3, #12]
 8002658:	611a      	str	r2, [r3, #16]
 800265a:	f8c3 2013 	str.w	r2, [r3, #19]
	printf("count tabline Button %d \n", MultiPartTabCount(2,NUMPIN));
 800265e:	2159      	movs	r1, #89	; 0x59
 8002660:	2002      	movs	r0, #2
 8002662:	f7ff fcf3 	bl	800204c <MultiPartTabCount>
 8002666:	4603      	mov	r3, r0
 8002668:	4619      	mov	r1, r3
 800266a:	4827      	ldr	r0, [pc, #156]	; (8002708 <ButtonCGI_Handler+0xd0>)
 800266c:	f015 fbe8 	bl	8017e40 <iprintf>

	if (iIndex == 4) {
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2b04      	cmp	r3, #4
 8002674:	d120      	bne.n	80026b8 <ButtonCGI_Handler+0x80>
		for (int i = 0; i < iNumParams; i++) {
 8002676:	2300      	movs	r3, #0
 8002678:	62fb      	str	r3, [r7, #44]	; 0x2c
 800267a:	e019      	b.n	80026b0 <ButtonCGI_Handler+0x78>
			if (strcmp(pcParam[i], "ssid") == 0)
 800267c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	4413      	add	r3, r2
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4921      	ldr	r1, [pc, #132]	; (800270c <ButtonCGI_Handler+0xd4>)
 8002688:	4618      	mov	r0, r3
 800268a:	f7fd fdd9 	bl	8000240 <strcmp>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10a      	bne.n	80026aa <ButtonCGI_Handler+0x72>
			{
				strcpy(ssid, pcValue[i]);
 8002694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	4413      	add	r3, r2
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	f107 0310 	add.w	r3, r7, #16
 80026a2:	4611      	mov	r1, r2
 80026a4:	4618      	mov	r0, r3
 80026a6:	f015 fdfc 	bl	80182a2 <strcpy>
		for (int i = 0; i < iNumParams; i++) {
 80026aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ac:	3301      	adds	r3, #1
 80026ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	dbe1      	blt.n	800267c <ButtonCGI_Handler+0x44>
			}
		}
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 80026b8:	f107 0310 	add.w	r3, r7, #16
 80026bc:	4914      	ldr	r1, [pc, #80]	; (8002710 <ButtonCGI_Handler+0xd8>)
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fd fdbe 	bl	8000240 <strcmp>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d111      	bne.n	80026ee <ButtonCGI_Handler+0xb6>
 80026ca:	4b11      	ldr	r3, [pc, #68]	; (8002710 <ButtonCGI_Handler+0xd8>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00d      	beq.n	80026ee <ButtonCGI_Handler+0xb6>
		printf("SSID OK \n");
 80026d2:	4810      	ldr	r0, [pc, #64]	; (8002714 <ButtonCGI_Handler+0xdc>)
 80026d4:	f015 fc3a 	bl	8017f4c <puts>
		restartSSID();
 80026d8:	f7ff fcac 	bl	8002034 <restartSSID>
		memset(ssid, '\0', sizeof(ssid));
 80026dc:	f107 0310 	add.w	r3, r7, #16
 80026e0:	221b      	movs	r2, #27
 80026e2:	2100      	movs	r1, #0
 80026e4:	4618      	mov	r0, r3
 80026e6:	f015 faf9 	bl	8017cdc <memset>
		return "/tabbuttom.shtml"; //
 80026ea:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <ButtonCGI_Handler+0xe0>)
 80026ec:	e008      	b.n	8002700 <ButtonCGI_Handler+0xc8>
	} else {
		printf("SSID Failed \n");
 80026ee:	480b      	ldr	r0, [pc, #44]	; (800271c <ButtonCGI_Handler+0xe4>)
 80026f0:	f015 fc2c 	bl	8017f4c <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 80026f4:	221b      	movs	r2, #27
 80026f6:	2100      	movs	r1, #0
 80026f8:	4805      	ldr	r0, [pc, #20]	; (8002710 <ButtonCGI_Handler+0xd8>)
 80026fa:	f015 faef 	bl	8017cdc <memset>
		return "/login.shtml";
 80026fe:	4b08      	ldr	r3, [pc, #32]	; (8002720 <ButtonCGI_Handler+0xe8>)
	}

}
 8002700:	4618      	mov	r0, r3
 8002702:	3730      	adds	r7, #48	; 0x30
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	08019ea8 	.word	0x08019ea8
 800270c:	08019bf8 	.word	0x08019bf8
 8002710:	20000a74 	.word	0x20000a74
 8002714:	08019e00 	.word	0x08019e00
 8002718:	08019dac 	.word	0x08019dac
 800271c:	08019e0c 	.word	0x08019e0c
 8002720:	08019e1c 	.word	0x08019e1c

08002724 <SettingCGI_Handler>:

// tabbuttom.shtml Handler (Index 5)
const char* SettingCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b08c      	sub	sp, #48	; 0x30
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	603b      	str	r3, [r7, #0]

	char ssid[27] = {0};
 8002732:	2300      	movs	r3, #0
 8002734:	613b      	str	r3, [r7, #16]
 8002736:	f107 0314 	add.w	r3, r7, #20
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	605a      	str	r2, [r3, #4]
 8002740:	609a      	str	r2, [r3, #8]
 8002742:	60da      	str	r2, [r3, #12]
 8002744:	611a      	str	r2, [r3, #16]
 8002746:	f8c3 2013 	str.w	r2, [r3, #19]

	if (iIndex == 5) {
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2b05      	cmp	r3, #5
 800274e:	d120      	bne.n	8002792 <SettingCGI_Handler+0x6e>
		for (int i = 0; i < iNumParams; i++) {
 8002750:	2300      	movs	r3, #0
 8002752:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002754:	e019      	b.n	800278a <SettingCGI_Handler+0x66>
			if (strcmp(pcParam[i], "ssid") == 0)
 8002756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	4413      	add	r3, r2
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4920      	ldr	r1, [pc, #128]	; (80027e4 <SettingCGI_Handler+0xc0>)
 8002762:	4618      	mov	r0, r3
 8002764:	f7fd fd6c 	bl	8000240 <strcmp>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10a      	bne.n	8002784 <SettingCGI_Handler+0x60>
			{
				strcpy(ssid, pcValue[i]);
 800276e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	4413      	add	r3, r2
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	f107 0310 	add.w	r3, r7, #16
 800277c:	4611      	mov	r1, r2
 800277e:	4618      	mov	r0, r3
 8002780:	f015 fd8f 	bl	80182a2 <strcpy>
		for (int i = 0; i < iNumParams; i++) {
 8002784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002786:	3301      	adds	r3, #1
 8002788:	62fb      	str	r3, [r7, #44]	; 0x2c
 800278a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	429a      	cmp	r2, r3
 8002790:	dbe1      	blt.n	8002756 <SettingCGI_Handler+0x32>
			}
		}
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 8002792:	f107 0310 	add.w	r3, r7, #16
 8002796:	4914      	ldr	r1, [pc, #80]	; (80027e8 <SettingCGI_Handler+0xc4>)
 8002798:	4618      	mov	r0, r3
 800279a:	f7fd fd51 	bl	8000240 <strcmp>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d111      	bne.n	80027c8 <SettingCGI_Handler+0xa4>
 80027a4:	4b10      	ldr	r3, [pc, #64]	; (80027e8 <SettingCGI_Handler+0xc4>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00d      	beq.n	80027c8 <SettingCGI_Handler+0xa4>
		printf("SSID OK \n");
 80027ac:	480f      	ldr	r0, [pc, #60]	; (80027ec <SettingCGI_Handler+0xc8>)
 80027ae:	f015 fbcd 	bl	8017f4c <puts>
		restartSSID();
 80027b2:	f7ff fc3f 	bl	8002034 <restartSSID>
		memset(ssid, '\0', sizeof(ssid));
 80027b6:	f107 0310 	add.w	r3, r7, #16
 80027ba:	221b      	movs	r2, #27
 80027bc:	2100      	movs	r1, #0
 80027be:	4618      	mov	r0, r3
 80027c0:	f015 fa8c 	bl	8017cdc <memset>
		return "/settings.shtml"; //
 80027c4:	4b0a      	ldr	r3, [pc, #40]	; (80027f0 <SettingCGI_Handler+0xcc>)
 80027c6:	e008      	b.n	80027da <SettingCGI_Handler+0xb6>
	} else {
		printf("SSID Failed \n");
 80027c8:	480a      	ldr	r0, [pc, #40]	; (80027f4 <SettingCGI_Handler+0xd0>)
 80027ca:	f015 fbbf 	bl	8017f4c <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 80027ce:	221b      	movs	r2, #27
 80027d0:	2100      	movs	r1, #0
 80027d2:	4805      	ldr	r0, [pc, #20]	; (80027e8 <SettingCGI_Handler+0xc4>)
 80027d4:	f015 fa82 	bl	8017cdc <memset>
		return "/login.shtml";
 80027d8:	4b07      	ldr	r3, [pc, #28]	; (80027f8 <SettingCGI_Handler+0xd4>)
	}

}
 80027da:	4618      	mov	r0, r3
 80027dc:	3730      	adds	r7, #48	; 0x30
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	08019bf8 	.word	0x08019bf8
 80027e8:	20000a74 	.word	0x20000a74
 80027ec:	08019e00 	.word	0x08019e00
 80027f0:	08019dc0 	.word	0x08019dc0
 80027f4:	08019e0c 	.word	0x08019e0c
 80027f8:	08019e1c 	.word	0x08019e1c

080027fc <TimerCGI_Handler>:

// tabbuttom.shtml Handler (Index 6)
const char* TimerCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b08c      	sub	sp, #48	; 0x30
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
 8002808:	603b      	str	r3, [r7, #0]

	char ssid[27] = {0};
 800280a:	2300      	movs	r3, #0
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	f107 0314 	add.w	r3, r7, #20
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	605a      	str	r2, [r3, #4]
 8002818:	609a      	str	r2, [r3, #8]
 800281a:	60da      	str	r2, [r3, #12]
 800281c:	611a      	str	r2, [r3, #16]
 800281e:	f8c3 2013 	str.w	r2, [r3, #19]

	if (iIndex == 6) {
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2b06      	cmp	r3, #6
 8002826:	d120      	bne.n	800286a <TimerCGI_Handler+0x6e>
		for (int i = 0; i < iNumParams; i++) {
 8002828:	2300      	movs	r3, #0
 800282a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800282c:	e019      	b.n	8002862 <TimerCGI_Handler+0x66>
			if (strcmp(pcParam[i], "ssid") == 0)
 800282e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	4413      	add	r3, r2
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4920      	ldr	r1, [pc, #128]	; (80028bc <TimerCGI_Handler+0xc0>)
 800283a:	4618      	mov	r0, r3
 800283c:	f7fd fd00 	bl	8000240 <strcmp>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10a      	bne.n	800285c <TimerCGI_Handler+0x60>
			{
				strcpy(ssid, pcValue[i]);
 8002846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	4413      	add	r3, r2
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	f107 0310 	add.w	r3, r7, #16
 8002854:	4611      	mov	r1, r2
 8002856:	4618      	mov	r0, r3
 8002858:	f015 fd23 	bl	80182a2 <strcpy>
		for (int i = 0; i < iNumParams; i++) {
 800285c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285e:	3301      	adds	r3, #1
 8002860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	429a      	cmp	r2, r3
 8002868:	dbe1      	blt.n	800282e <TimerCGI_Handler+0x32>
			}
		}
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 800286a:	f107 0310 	add.w	r3, r7, #16
 800286e:	4914      	ldr	r1, [pc, #80]	; (80028c0 <TimerCGI_Handler+0xc4>)
 8002870:	4618      	mov	r0, r3
 8002872:	f7fd fce5 	bl	8000240 <strcmp>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d111      	bne.n	80028a0 <TimerCGI_Handler+0xa4>
 800287c:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <TimerCGI_Handler+0xc4>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00d      	beq.n	80028a0 <TimerCGI_Handler+0xa4>
		printf("SSID OK \n");
 8002884:	480f      	ldr	r0, [pc, #60]	; (80028c4 <TimerCGI_Handler+0xc8>)
 8002886:	f015 fb61 	bl	8017f4c <puts>
		restartSSID();
 800288a:	f7ff fbd3 	bl	8002034 <restartSSID>
		memset(ssid, '\0', sizeof(ssid));
 800288e:	f107 0310 	add.w	r3, r7, #16
 8002892:	221b      	movs	r2, #27
 8002894:	2100      	movs	r1, #0
 8002896:	4618      	mov	r0, r3
 8002898:	f015 fa20 	bl	8017cdc <memset>
		return "/timers.shtml"; //
 800289c:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <TimerCGI_Handler+0xcc>)
 800289e:	e008      	b.n	80028b2 <TimerCGI_Handler+0xb6>
	} else {
		printf("SSID Failed \n");
 80028a0:	480a      	ldr	r0, [pc, #40]	; (80028cc <TimerCGI_Handler+0xd0>)
 80028a2:	f015 fb53 	bl	8017f4c <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 80028a6:	221b      	movs	r2, #27
 80028a8:	2100      	movs	r1, #0
 80028aa:	4805      	ldr	r0, [pc, #20]	; (80028c0 <TimerCGI_Handler+0xc4>)
 80028ac:	f015 fa16 	bl	8017cdc <memset>
		return "/login.shtml";
 80028b0:	4b07      	ldr	r3, [pc, #28]	; (80028d0 <TimerCGI_Handler+0xd4>)
	}
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3730      	adds	r7, #48	; 0x30
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	08019bf8 	.word	0x08019bf8
 80028c0:	20000a74 	.word	0x20000a74
 80028c4:	08019e00 	.word	0x08019e00
 80028c8:	08019dd0 	.word	0x08019dd0
 80028cc:	08019e0c 	.word	0x08019e0c
 80028d0:	08019e1c 	.word	0x08019e1c

080028d4 <LogoutCGI_Handler>:

// logout.shtml Handler logout (Index 7)
const char* LogoutCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	603b      	str	r3, [r7, #0]

	if (iIndex == 7) {
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2b07      	cmp	r3, #7
 80028e6:	d104      	bne.n	80028f2 <LogoutCGI_Handler+0x1e>
		memset(randomSSID, '\0', sizeof(randomSSID));
 80028e8:	221b      	movs	r2, #27
 80028ea:	2100      	movs	r1, #0
 80028ec:	4803      	ldr	r0, [pc, #12]	; (80028fc <LogoutCGI_Handler+0x28>)
 80028ee:	f015 f9f5 	bl	8017cdc <memset>
	}

	return "/login.shtml";
 80028f2:	4b03      	ldr	r3, [pc, #12]	; (8002900 <LogoutCGI_Handler+0x2c>)
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	20000a74 	.word	0x20000a74
 8002900:	08019e1c 	.word	0x08019e1c

08002904 <TabjsonCGI_Handler>:


// tabjson.shtml Handler table json (Index 8)
const char* TabjsonCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8002904:	b580      	push	{r7, lr}
 8002906:	b08c      	sub	sp, #48	; 0x30
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
 8002910:	603b      	str	r3, [r7, #0]

	char ssid[27] = {0};
 8002912:	2300      	movs	r3, #0
 8002914:	613b      	str	r3, [r7, #16]
 8002916:	f107 0314 	add.w	r3, r7, #20
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	605a      	str	r2, [r3, #4]
 8002920:	609a      	str	r2, [r3, #8]
 8002922:	60da      	str	r2, [r3, #12]
 8002924:	611a      	str	r2, [r3, #16]
 8002926:	f8c3 2013 	str.w	r2, [r3, #19]

	if (iIndex == 8) {
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2b08      	cmp	r3, #8
 800292e:	d150      	bne.n	80029d2 <TabjsonCGI_Handler+0xce>
		for (int i = 0; i < iNumParams; i++) {
 8002930:	2300      	movs	r3, #0
 8002932:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002934:	e049      	b.n	80029ca <TabjsonCGI_Handler+0xc6>
			if (strcmp(pcParam[i], "ssid") == 0)
 8002936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4938      	ldr	r1, [pc, #224]	; (8002a24 <TabjsonCGI_Handler+0x120>)
 8002942:	4618      	mov	r0, r3
 8002944:	f7fd fc7c 	bl	8000240 <strcmp>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10a      	bne.n	8002964 <TabjsonCGI_Handler+0x60>
			{
				strcpy(ssid, pcValue[i]);
 800294e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	4413      	add	r3, r2
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	f107 0310 	add.w	r3, r7, #16
 800295c:	4611      	mov	r1, r2
 800295e:	4618      	mov	r0, r3
 8002960:	f015 fc9f 	bl	80182a2 <strcpy>
			}
			if (strcmp(pcParam[i], "tab") == 0) // Получаем tab
 8002964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	4413      	add	r3, r2
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	492e      	ldr	r1, [pc, #184]	; (8002a28 <TabjsonCGI_Handler+0x124>)
 8002970:	4618      	mov	r0, r3
 8002972:	f7fd fc65 	bl	8000240 <strcmp>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d123      	bne.n	80029c4 <TabjsonCGI_Handler+0xc0>
			{
				tab = atoi(pcValue[i]);
 800297c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	4413      	add	r3, r2
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f015 f840 	bl	8017a0c <atoi>
 800298c:	4603      	mov	r3, r0
 800298e:	b2da      	uxtb	r2, r3
 8002990:	4b26      	ldr	r3, [pc, #152]	; (8002a2c <TabjsonCGI_Handler+0x128>)
 8002992:	701a      	strb	r2, [r3, #0]
				if(tab == 2 || tab == 3){
 8002994:	4b25      	ldr	r3, [pc, #148]	; (8002a2c <TabjsonCGI_Handler+0x128>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b02      	cmp	r3, #2
 800299a:	d003      	beq.n	80029a4 <TabjsonCGI_Handler+0xa0>
 800299c:	4b23      	ldr	r3, [pc, #140]	; (8002a2c <TabjsonCGI_Handler+0x128>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	d10f      	bne.n	80029c4 <TabjsonCGI_Handler+0xc0>
				numTabLine = MultiPartTabCount(tab,NUMPIN); // Подсчет количества строк
 80029a4:	4b21      	ldr	r3, [pc, #132]	; (8002a2c <TabjsonCGI_Handler+0x128>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2159      	movs	r1, #89	; 0x59
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fb4e 	bl	800204c <MultiPartTabCount>
 80029b0:	4603      	mov	r3, r0
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	4b1e      	ldr	r3, [pc, #120]	; (8002a30 <TabjsonCGI_Handler+0x12c>)
 80029b6:	701a      	strb	r2, [r3, #0]
				printf("count  %d \n", numTabLine);
 80029b8:	4b1d      	ldr	r3, [pc, #116]	; (8002a30 <TabjsonCGI_Handler+0x12c>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	4619      	mov	r1, r3
 80029be:	481d      	ldr	r0, [pc, #116]	; (8002a34 <TabjsonCGI_Handler+0x130>)
 80029c0:	f015 fa3e 	bl	8017e40 <iprintf>
		for (int i = 0; i < iNumParams; i++) {
 80029c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c6:	3301      	adds	r3, #1
 80029c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	dbb1      	blt.n	8002936 <TabjsonCGI_Handler+0x32>
			}
		}
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 80029d2:	f107 0310 	add.w	r3, r7, #16
 80029d6:	4918      	ldr	r1, [pc, #96]	; (8002a38 <TabjsonCGI_Handler+0x134>)
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fd fc31 	bl	8000240 <strcmp>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d111      	bne.n	8002a08 <TabjsonCGI_Handler+0x104>
 80029e4:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <TabjsonCGI_Handler+0x134>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00d      	beq.n	8002a08 <TabjsonCGI_Handler+0x104>
		printf("SSID OK \n");
 80029ec:	4813      	ldr	r0, [pc, #76]	; (8002a3c <TabjsonCGI_Handler+0x138>)
 80029ee:	f015 faad 	bl	8017f4c <puts>
		restartSSID();
 80029f2:	f7ff fb1f 	bl	8002034 <restartSSID>
		memset(ssid, '\0', sizeof(ssid));
 80029f6:	f107 0310 	add.w	r3, r7, #16
 80029fa:	221b      	movs	r2, #27
 80029fc:	2100      	movs	r1, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f015 f96c 	bl	8017cdc <memset>
		return "/tabjson.shtml"; //
 8002a04:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <TabjsonCGI_Handler+0x13c>)
 8002a06:	e008      	b.n	8002a1a <TabjsonCGI_Handler+0x116>
	} else {
		printf("SSID Failed \n");
 8002a08:	480e      	ldr	r0, [pc, #56]	; (8002a44 <TabjsonCGI_Handler+0x140>)
 8002a0a:	f015 fa9f 	bl	8017f4c <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 8002a0e:	221b      	movs	r2, #27
 8002a10:	2100      	movs	r1, #0
 8002a12:	4809      	ldr	r0, [pc, #36]	; (8002a38 <TabjsonCGI_Handler+0x134>)
 8002a14:	f015 f962 	bl	8017cdc <memset>
		return "/login.shtml";
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <TabjsonCGI_Handler+0x144>)
	}
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3730      	adds	r7, #48	; 0x30
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	08019bf8 	.word	0x08019bf8
 8002a28:	08019ec4 	.word	0x08019ec4
 8002a2c:	20000a71 	.word	0x20000a71
 8002a30:	20000a72 	.word	0x20000a72
 8002a34:	08019ec8 	.word	0x08019ec8
 8002a38:	20000a74 	.word	0x20000a74
 8002a3c:	08019e00 	.word	0x08019e00
 8002a40:	08019df0 	.word	0x08019df0
 8002a44:	08019e0c 	.word	0x08019e0c
 8002a48:	08019e1c 	.word	0x08019e1c

08002a4c <httpd_post_begin>:
int http_post_content_len;


err_t httpd_post_begin(void *connection, const char *uri,
		const char *http_request, uint16_t http_request_len, int content_len,
		char *response_uri, uint16_t response_uri_len, uint8_t *post_auto_wnd) {
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
 8002a58:	807b      	strh	r3, [r7, #2]
	  LWIP_UNUSED_ARG(http_request);
	  LWIP_UNUSED_ARG(http_request_len);
	  LWIP_UNUSED_ARG(content_len);
	  LWIP_UNUSED_ARG(post_auto_wnd);

	  strncpy(url, uri, 15);
 8002a5a:	220f      	movs	r2, #15
 8002a5c:	68b9      	ldr	r1, [r7, #8]
 8002a5e:	4815      	ldr	r0, [pc, #84]	; (8002ab4 <httpd_post_begin+0x68>)
 8002a60:	f015 fc39 	bl	80182d6 <strncpy>

	  memset(bufervar, '\0', sizeof(bufervar));
 8002a64:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002a68:	2100      	movs	r1, #0
 8002a6a:	4813      	ldr	r0, [pc, #76]	; (8002ab8 <httpd_post_begin+0x6c>)
 8002a6c:	f015 f936 	bl	8017cdc <memset>

	  if (!memcmp(uri, "/login.shtml", 13)) {
 8002a70:	220d      	movs	r2, #13
 8002a72:	4912      	ldr	r1, [pc, #72]	; (8002abc <httpd_post_begin+0x70>)
 8002a74:	68b8      	ldr	r0, [r7, #8]
 8002a76:	f015 f8fb 	bl	8017c70 <memcmp>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d112      	bne.n	8002aa6 <httpd_post_begin+0x5a>
	    if (current_connection != connection) {
 8002a80:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <httpd_post_begin+0x74>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d00d      	beq.n	8002aa6 <httpd_post_begin+0x5a>
	      current_connection = connection;
 8002a8a:	4a0d      	ldr	r2, [pc, #52]	; (8002ac0 <httpd_post_begin+0x74>)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6013      	str	r3, [r2, #0]

	      snprintf(response_uri, response_uri_len, "/loginfail.shtml");
 8002a90:	8c3b      	ldrh	r3, [r7, #32]
 8002a92:	4a0c      	ldr	r2, [pc, #48]	; (8002ac4 <httpd_post_begin+0x78>)
 8002a94:	4619      	mov	r1, r3
 8002a96:	69f8      	ldr	r0, [r7, #28]
 8002a98:	f015 fb22 	bl	80180e0 <sniprintf>


	      *post_auto_wnd = 1;
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	701a      	strb	r2, [r3, #0]
	      return ERR_OK;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	e001      	b.n	8002aaa <httpd_post_begin+0x5e>
	    }
	  }
	  return ERR_VAL;
 8002aa6:	f06f 0305 	mvn.w	r3, #5

}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000a90 	.word	0x20000a90
 8002ab8:	20000ab0 	.word	0x20000ab0
 8002abc:	08019e1c 	.word	0x08019e1c
 8002ac0:	20000a68 	.word	0x20000a68
 8002ac4:	08019ed4 	.word	0x08019ed4

08002ac8 <httpd_post_receive_data>:




err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	f5ad 7d7c 	sub.w	sp, sp, #1008	; 0x3f0
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	1d3b      	adds	r3, r7, #4
 8002ad2:	6018      	str	r0, [r3, #0]
 8002ad4:	463b      	mov	r3, r7
 8002ad6:	6019      	str	r1, [r3, #0]

	char poststr[1000];

	if (current_connection == connection && p != NULL) {
 8002ad8:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <httpd_post_receive_data+0x7c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	1d3a      	adds	r2, r7, #4
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d11f      	bne.n	8002b24 <httpd_post_receive_data+0x5c>
 8002ae4:	463b      	mov	r3, r7
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d01b      	beq.n	8002b24 <httpd_post_receive_data+0x5c>




			   memcpy(poststr, p->payload, p->len);
 8002aec:	463b      	mov	r3, r7
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6859      	ldr	r1, [r3, #4]
 8002af2:	463b      	mov	r3, r7
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	895b      	ldrh	r3, [r3, #10]
 8002af8:	461a      	mov	r2, r3
 8002afa:	f107 0308 	add.w	r3, r7, #8
 8002afe:	4618      	mov	r0, r3
 8002b00:	f015 f8c4 	bl	8017c8c <memcpy>
			   strcat(bufervar, poststr);
 8002b04:	f107 0308 	add.w	r3, r7, #8
 8002b08:	4619      	mov	r1, r3
 8002b0a:	480f      	ldr	r0, [pc, #60]	; (8002b48 <httpd_post_receive_data+0x80>)
 8002b0c:	f015 fbad 	bl	801826a <strcat>
			   pbuf_free(p);
 8002b10:	463b      	mov	r3, r7
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	f00b fd80 	bl	800e618 <pbuf_free>



		pbuf_free(p);
 8002b18:	463b      	mov	r3, r7
 8002b1a:	6818      	ldr	r0, [r3, #0]
 8002b1c:	f00b fd7c 	bl	800e618 <pbuf_free>
		return ERR_OK;
 8002b20:	2300      	movs	r3, #0
 8002b22:	e009      	b.n	8002b38 <httpd_post_receive_data+0x70>
	}


	if (p != NULL) {
 8002b24:	463b      	mov	r3, r7
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <httpd_post_receive_data+0x6c>
		pbuf_free(p);
 8002b2c:	463b      	mov	r3, r7
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	f00b fd72 	bl	800e618 <pbuf_free>
	}
	return ERR_VAL;
 8002b34:	f06f 0305 	mvn.w	r3, #5
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f507 777c 	add.w	r7, r7, #1008	; 0x3f0
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000a68 	.word	0x20000a68
 8002b48:	20000ab0 	.word	0x20000ab0

08002b4c <httpd_post_finished>:

void httpd_post_finished(void *connection, char *response_uri, u16_t response_uri_len) {
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	4613      	mov	r3, r2
 8002b58:	80fb      	strh	r3, [r7, #6]

	  /* default page is "login failed" */
	  snprintf(response_uri, response_uri_len, "/loginfail.shtml");
 8002b5a:	88fb      	ldrh	r3, [r7, #6]
 8002b5c:	4a0d      	ldr	r2, [pc, #52]	; (8002b94 <httpd_post_finished+0x48>)
 8002b5e:	4619      	mov	r1, r3
 8002b60:	68b8      	ldr	r0, [r7, #8]
 8002b62:	f015 fabd 	bl	80180e0 <sniprintf>


	  if (current_connection == connection) {
 8002b66:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <httpd_post_finished+0x4c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d10c      	bne.n	8002b8a <httpd_post_finished+0x3e>

	    /* login succeeded */
		if (strlen(randomSSID) != 0){
 8002b70:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <httpd_post_finished+0x50>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <httpd_post_finished+0x38>
			snprintf(response_uri, response_uri_len, "/session.shtml");
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	4a09      	ldr	r2, [pc, #36]	; (8002ba0 <httpd_post_finished+0x54>)
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	68b8      	ldr	r0, [r7, #8]
 8002b80:	f015 faae 	bl	80180e0 <sniprintf>
		}

	    current_connection = NULL;
 8002b84:	4b04      	ldr	r3, [pc, #16]	; (8002b98 <httpd_post_finished+0x4c>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]

	  }
}
 8002b8a:	bf00      	nop
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	08019ed4 	.word	0x08019ed4
 8002b98:	20000a68 	.word	0x20000a68
 8002b9c:	20000a74 	.word	0x20000a74
 8002ba0:	08019ee8 	.word	0x08019ee8

08002ba4 <http_server_init>:

//////////////////// POST  END ////////////////////////



void http_server_init(void) {
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
	httpd_init();
 8002ba8:	f00a f81a 	bl	800cbe0 <httpd_init>
	http_set_ssi_handler((tSSIHandler) ssi_handler, (char const**) TAGS, SSI_TAG_NUM); //
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <http_server_init+0x24>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2204      	movs	r2, #4
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4805      	ldr	r0, [pc, #20]	; (8002bcc <http_server_init+0x28>)
 8002bb6:	f00a f833 	bl	800cc20 <http_set_ssi_handler>

	http_set_cgi_handlers(URL_TABLES, CGI_URL_NUM); //
 8002bba:	2309      	movs	r3, #9
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	4804      	ldr	r0, [pc, #16]	; (8002bd0 <http_server_init+0x2c>)
 8002bc0:	f00a f870 	bl	800cca4 <http_set_cgi_handlers>
}
 8002bc4:	bf00      	nop
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20000714 	.word	0x20000714
 8002bcc:	080020e1 	.word	0x080020e1
 8002bd0:	0801d1bc 	.word	0x0801d1bc

08002bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c0c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bd8:	480d      	ldr	r0, [pc, #52]	; (8002c10 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bda:	490e      	ldr	r1, [pc, #56]	; (8002c14 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bdc:	4a0e      	ldr	r2, [pc, #56]	; (8002c18 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002be0:	e002      	b.n	8002be8 <LoopCopyDataInit>

08002be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002be6:	3304      	adds	r3, #4

08002be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bec:	d3f9      	bcc.n	8002be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bee:	4a0b      	ldr	r2, [pc, #44]	; (8002c1c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bf0:	4c0b      	ldr	r4, [pc, #44]	; (8002c20 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bf4:	e001      	b.n	8002bfa <LoopFillZerobss>

08002bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bf8:	3204      	adds	r2, #4

08002bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bfc:	d3fb      	bcc.n	8002bf6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bfe:	f7ff f9d3 	bl	8001fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c02:	f014 fffd 	bl	8017c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c06:	f7fe fd79 	bl	80016fc <main>
  bx  lr    
 8002c0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c0c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c14:	20000794 	.word	0x20000794
  ldr r2, =_sidata
 8002c18:	0801eb84 	.word	0x0801eb84
  ldr r2, =_sbss
 8002c1c:	20000794 	.word	0x20000794
  ldr r4, =_ebss
 8002c20:	20018bd4 	.word	0x20018bd4

08002c24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c24:	e7fe      	b.n	8002c24 <ADC_IRQHandler>

08002c26 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c2a:	2003      	movs	r0, #3
 8002c2c:	f000 f8f9 	bl	8002e22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c30:	200f      	movs	r0, #15
 8002c32:	f7ff f86d 	bl	8001d10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c36:	f7fe ff69 	bl	8001b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c44:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <HAL_IncTick+0x20>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <HAL_IncTick+0x24>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4413      	add	r3, r2
 8002c50:	4a04      	ldr	r2, [pc, #16]	; (8002c64 <HAL_IncTick+0x24>)
 8002c52:	6013      	str	r3, [r2, #0]
}
 8002c54:	bf00      	nop
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	2000071c 	.word	0x2000071c
 8002c64:	2000b18c 	.word	0x2000b18c

08002c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c6c:	4b03      	ldr	r3, [pc, #12]	; (8002c7c <HAL_GetTick+0x14>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	2000b18c 	.word	0x2000b18c

08002c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c88:	f7ff ffee 	bl	8002c68 <HAL_GetTick>
 8002c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c98:	d005      	beq.n	8002ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c9a:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <HAL_Delay+0x44>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ca6:	bf00      	nop
 8002ca8:	f7ff ffde 	bl	8002c68 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d8f7      	bhi.n	8002ca8 <HAL_Delay+0x28>
  {
  }
}
 8002cb8:	bf00      	nop
 8002cba:	bf00      	nop
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	2000071c 	.word	0x2000071c

08002cc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <__NVIC_SetPriorityGrouping+0x40>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002cf0:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <__NVIC_SetPriorityGrouping+0x44>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cf6:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <__NVIC_SetPriorityGrouping+0x40>)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	60d3      	str	r3, [r2, #12]
}
 8002cfc:	bf00      	nop
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	e000ed00 	.word	0xe000ed00
 8002d0c:	05fa0000 	.word	0x05fa0000

08002d10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d14:	4b04      	ldr	r3, [pc, #16]	; (8002d28 <__NVIC_GetPriorityGrouping+0x18>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	0a1b      	lsrs	r3, r3, #8
 8002d1a:	f003 0307 	and.w	r3, r3, #7
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	db0b      	blt.n	8002d56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d3e:	79fb      	ldrb	r3, [r7, #7]
 8002d40:	f003 021f 	and.w	r2, r3, #31
 8002d44:	4907      	ldr	r1, [pc, #28]	; (8002d64 <__NVIC_EnableIRQ+0x38>)
 8002d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4a:	095b      	lsrs	r3, r3, #5
 8002d4c:	2001      	movs	r0, #1
 8002d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	e000e100 	.word	0xe000e100

08002d68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	6039      	str	r1, [r7, #0]
 8002d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	db0a      	blt.n	8002d92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	490c      	ldr	r1, [pc, #48]	; (8002db4 <__NVIC_SetPriority+0x4c>)
 8002d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d86:	0112      	lsls	r2, r2, #4
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d90:	e00a      	b.n	8002da8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	4908      	ldr	r1, [pc, #32]	; (8002db8 <__NVIC_SetPriority+0x50>)
 8002d98:	79fb      	ldrb	r3, [r7, #7]
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	3b04      	subs	r3, #4
 8002da0:	0112      	lsls	r2, r2, #4
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	440b      	add	r3, r1
 8002da6:	761a      	strb	r2, [r3, #24]
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	e000e100 	.word	0xe000e100
 8002db8:	e000ed00 	.word	0xe000ed00

08002dbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b089      	sub	sp, #36	; 0x24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f1c3 0307 	rsb	r3, r3, #7
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	bf28      	it	cs
 8002dda:	2304      	movcs	r3, #4
 8002ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	3304      	adds	r3, #4
 8002de2:	2b06      	cmp	r3, #6
 8002de4:	d902      	bls.n	8002dec <NVIC_EncodePriority+0x30>
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	3b03      	subs	r3, #3
 8002dea:	e000      	b.n	8002dee <NVIC_EncodePriority+0x32>
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43da      	mvns	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	401a      	ands	r2, r3
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0e:	43d9      	mvns	r1, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e14:	4313      	orrs	r3, r2
         );
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3724      	adds	r7, #36	; 0x24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7ff ff4c 	bl	8002cc8 <__NVIC_SetPriorityGrouping>
}
 8002e30:	bf00      	nop
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e4a:	f7ff ff61 	bl	8002d10 <__NVIC_GetPriorityGrouping>
 8002e4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	68b9      	ldr	r1, [r7, #8]
 8002e54:	6978      	ldr	r0, [r7, #20]
 8002e56:	f7ff ffb1 	bl	8002dbc <NVIC_EncodePriority>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e60:	4611      	mov	r1, r2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff ff80 	bl	8002d68 <__NVIC_SetPriority>
}
 8002e68:	bf00      	nop
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff ff54 	bl	8002d2c <__NVIC_EnableIRQ>
}
 8002e84:	bf00      	nop
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	61fb      	str	r3, [r7, #28]
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8002e9c:	4ba9      	ldr	r3, [pc, #676]	; (8003144 <HAL_ETH_Init+0x2b8>)
 8002e9e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e181      	b.n	80031b6 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f004 f9fc 	bl	80072c4 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ecc:	4b9e      	ldr	r3, [pc, #632]	; (8003148 <HAL_ETH_Init+0x2bc>)
 8002ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed0:	4a9d      	ldr	r2, [pc, #628]	; (8003148 <HAL_ETH_Init+0x2bc>)
 8002ed2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ed6:	6453      	str	r3, [r2, #68]	; 0x44
 8002ed8:	4b9b      	ldr	r3, [pc, #620]	; (8003148 <HAL_ETH_Init+0x2bc>)
 8002eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002edc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee0:	60bb      	str	r3, [r7, #8]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002ee4:	4b99      	ldr	r3, [pc, #612]	; (800314c <HAL_ETH_Init+0x2c0>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	4a98      	ldr	r2, [pc, #608]	; (800314c <HAL_ETH_Init+0x2c0>)
 8002eea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002eee:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002ef0:	4b96      	ldr	r3, [pc, #600]	; (800314c <HAL_ETH_Init+0x2c0>)
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	4994      	ldr	r1, [pc, #592]	; (800314c <HAL_ETH_Init+0x2c0>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f042 0201 	orr.w	r2, r2, #1
 8002f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f14:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002f16:	f7ff fea7 	bl	8002c68 <HAL_GetTick>
 8002f1a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002f1c:	e011      	b.n	8002f42 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002f1e:	f7ff fea3 	bl	8002c68 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f2c:	d909      	bls.n	8002f42 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2203      	movs	r2, #3
 8002f32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e139      	b.n	80031b6 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1e4      	bne.n	8002f1e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f023 031c 	bic.w	r3, r3, #28
 8002f62:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002f64:	f002 f900 	bl	8005168 <HAL_RCC_GetHCLKFreq>
 8002f68:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	4a78      	ldr	r2, [pc, #480]	; (8003150 <HAL_ETH_Init+0x2c4>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d908      	bls.n	8002f84 <HAL_ETH_Init+0xf8>
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	4a77      	ldr	r2, [pc, #476]	; (8003154 <HAL_ETH_Init+0x2c8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d804      	bhi.n	8002f84 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	f043 0308 	orr.w	r3, r3, #8
 8002f80:	61fb      	str	r3, [r7, #28]
 8002f82:	e027      	b.n	8002fd4 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	4a73      	ldr	r2, [pc, #460]	; (8003154 <HAL_ETH_Init+0x2c8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d908      	bls.n	8002f9e <HAL_ETH_Init+0x112>
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	4a6d      	ldr	r2, [pc, #436]	; (8003144 <HAL_ETH_Init+0x2b8>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d204      	bcs.n	8002f9e <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f043 030c 	orr.w	r3, r3, #12
 8002f9a:	61fb      	str	r3, [r7, #28]
 8002f9c:	e01a      	b.n	8002fd4 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	4a68      	ldr	r2, [pc, #416]	; (8003144 <HAL_ETH_Init+0x2b8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d303      	bcc.n	8002fae <HAL_ETH_Init+0x122>
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	4a6b      	ldr	r2, [pc, #428]	; (8003158 <HAL_ETH_Init+0x2cc>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d911      	bls.n	8002fd2 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	4a69      	ldr	r2, [pc, #420]	; (8003158 <HAL_ETH_Init+0x2cc>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d908      	bls.n	8002fc8 <HAL_ETH_Init+0x13c>
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	4a68      	ldr	r2, [pc, #416]	; (800315c <HAL_ETH_Init+0x2d0>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d804      	bhi.n	8002fc8 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	f043 0304 	orr.w	r3, r3, #4
 8002fc4:	61fb      	str	r3, [r7, #28]
 8002fc6:	e005      	b.n	8002fd4 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f043 0310 	orr.w	r3, r3, #16
 8002fce:	61fb      	str	r3, [r7, #28]
 8002fd0:	e000      	b.n	8002fd4 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002fd2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	69fa      	ldr	r2, [r7, #28]
 8002fda:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002fdc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 fc17 	bl	8003816 <HAL_ETH_WritePHYRegister>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00b      	beq.n	8003006 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002ff2:	6939      	ldr	r1, [r7, #16]
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 fdcd 	bl	8003b94 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e0d7      	b.n	80031b6 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8003006:	20ff      	movs	r0, #255	; 0xff
 8003008:	f7ff fe3a 	bl	8002c80 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 80a5 	beq.w	8003160 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003016:	f7ff fe27 	bl	8002c68 <HAL_GetTick>
 800301a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800301c:	f107 030c 	add.w	r3, r7, #12
 8003020:	461a      	mov	r2, r3
 8003022:	2101      	movs	r1, #1
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 fb8e 	bl	8003746 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800302a:	f7ff fe1d 	bl	8002c68 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	f241 3288 	movw	r2, #5000	; 0x1388
 8003038:	4293      	cmp	r3, r2
 800303a:	d90f      	bls.n	800305c <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003040:	6939      	ldr	r1, [r7, #16]
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fda6 	bl	8003b94 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e0ac      	b.n	80031b6 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0da      	beq.n	800301c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003066:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800306a:	2100      	movs	r1, #0
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 fbd2 	bl	8003816 <HAL_ETH_WritePHYRegister>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00b      	beq.n	8003090 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800307c:	6939      	ldr	r1, [r7, #16]
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fd88 	bl	8003b94 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800308c:	2301      	movs	r3, #1
 800308e:	e092      	b.n	80031b6 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8003090:	f7ff fdea 	bl	8002c68 <HAL_GetTick>
 8003094:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003096:	f107 030c 	add.w	r3, r7, #12
 800309a:	461a      	mov	r2, r3
 800309c:	2101      	movs	r1, #1
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fb51 	bl	8003746 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80030a4:	f7ff fde0 	bl	8002c68 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d90f      	bls.n	80030d6 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80030ba:	6939      	ldr	r1, [r7, #16]
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 fd69 	bl	8003b94 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e06f      	b.n	80031b6 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0da      	beq.n	8003096 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80030e0:	f107 030c 	add.w	r3, r7, #12
 80030e4:	461a      	mov	r2, r3
 80030e6:	2110      	movs	r1, #16
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 fb2c 	bl	8003746 <HAL_ETH_ReadPHYRegister>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00b      	beq.n	800310c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80030f8:	6939      	ldr	r1, [r7, #16]
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fd4a 	bl	8003b94 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003108:	2301      	movs	r3, #1
 800310a:	e054      	b.n	80031b6 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	2b00      	cmp	r3, #0
 8003114:	d004      	beq.n	8003120 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800311c:	60da      	str	r2, [r3, #12]
 800311e:	e002      	b.n	8003126 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	609a      	str	r2, [r3, #8]
 8003136:	e035      	b.n	80031a4 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	e030      	b.n	80031a4 <HAL_ETH_Init+0x318>
 8003142:	bf00      	nop
 8003144:	03938700 	.word	0x03938700
 8003148:	40023800 	.word	0x40023800
 800314c:	40013800 	.word	0x40013800
 8003150:	01312cff 	.word	0x01312cff
 8003154:	02160ebf 	.word	0x02160ebf
 8003158:	05f5e0ff 	.word	0x05f5e0ff
 800315c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	08db      	lsrs	r3, r3, #3
 8003166:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	085b      	lsrs	r3, r3, #1
 800316e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003170:	4313      	orrs	r3, r2
 8003172:	b29b      	uxth	r3, r3
 8003174:	461a      	mov	r2, r3
 8003176:	2100      	movs	r1, #0
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 fb4c 	bl	8003816 <HAL_ETH_WritePHYRegister>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00b      	beq.n	800319c <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003188:	6939      	ldr	r1, [r7, #16]
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 fd02 	bl	8003b94 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e00c      	b.n	80031b6 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800319c:	f640 70ff 	movw	r0, #4095	; 0xfff
 80031a0:	f7ff fd6e 	bl	8002c80 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80031a4:	6939      	ldr	r1, [r7, #16]
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 fcf4 	bl	8003b94 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3720      	adds	r7, #32
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop

080031c0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
 80031cc:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_ETH_DMATxDescListInit+0x20>
 80031dc:	2302      	movs	r3, #2
 80031de:	e052      	b.n	8003286 <HAL_ETH_DMATxDescListInit+0xc6>
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2202      	movs	r2, #2
 80031ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80031f6:	2300      	movs	r3, #0
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	e030      	b.n	800325e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	015b      	lsls	r3, r3, #5
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	4413      	add	r3, r2
 8003204:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800320c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003214:	fb02 f303 	mul.w	r3, r2, r3
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	4413      	add	r3, r2
 800321c:	461a      	mov	r2, r3
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d105      	bne.n	8003236 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	3b01      	subs	r3, #1
 800323a:	697a      	ldr	r2, [r7, #20]
 800323c:	429a      	cmp	r2, r3
 800323e:	d208      	bcs.n	8003252 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	3301      	adds	r3, #1
 8003244:	015b      	lsls	r3, r3, #5
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	4413      	add	r3, r2
 800324a:	461a      	mov	r2, r3
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	60da      	str	r2, [r3, #12]
 8003250:	e002      	b.n	8003258 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	3301      	adds	r3, #1
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d3ca      	bcc.n	80031fc <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6819      	ldr	r1, [r3, #0]
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	f241 0310 	movw	r3, #4112	; 0x1010
 8003270:	440b      	add	r3, r1
 8003272:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	371c      	adds	r7, #28
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8003292:	b480      	push	{r7}
 8003294:	b087      	sub	sp, #28
 8003296:	af00      	add	r7, sp, #0
 8003298:	60f8      	str	r0, [r7, #12]
 800329a:	60b9      	str	r1, [r7, #8]
 800329c:	607a      	str	r2, [r7, #4]
 800329e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80032a0:	2300      	movs	r3, #0
 80032a2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <HAL_ETH_DMARxDescListInit+0x20>
 80032ae:	2302      	movs	r3, #2
 80032b0:	e056      	b.n	8003360 <HAL_ETH_DMARxDescListInit+0xce>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2202      	movs	r2, #2
 80032be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	e034      	b.n	8003338 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	015b      	lsls	r3, r3, #5
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	4413      	add	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80032de:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80032e6:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80032ee:	fb02 f303 	mul.w	r3, r2, r3
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	4413      	add	r3, r2
 80032f6:	461a      	mov	r2, r3
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d105      	bne.n	8003310 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	3b01      	subs	r3, #1
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	429a      	cmp	r2, r3
 8003318:	d208      	bcs.n	800332c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	3301      	adds	r3, #1
 800331e:	015b      	lsls	r3, r3, #5
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	4413      	add	r3, r2
 8003324:	461a      	mov	r2, r3
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	e002      	b.n	8003332 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	3301      	adds	r3, #1
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	697a      	ldr	r2, [r7, #20]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	429a      	cmp	r2, r3
 800333e:	d3c6      	bcc.n	80032ce <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6819      	ldr	r1, [r3, #0]
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	f241 030c 	movw	r3, #4108	; 0x100c
 800334a:	440b      	add	r3, r1
 800334c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	371c      	adds	r7, #28
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8003376:	2300      	movs	r3, #0
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	2300      	movs	r3, #0
 8003380:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_ETH_TransmitFrame+0x24>
 800338c:	2302      	movs	r3, #2
 800338e:	e0cd      	b.n	800352c <HAL_ETH_TransmitFrame+0x1c0>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d109      	bne.n	80033ba <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80033b6:	2301      	movs	r3, #1
 80033b8:	e0b8      	b.n	800352c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	da09      	bge.n	80033d8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2212      	movs	r2, #18
 80033c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0a9      	b.n	800352c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80033de:	4293      	cmp	r3, r2
 80033e0:	d915      	bls.n	800340e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	4a54      	ldr	r2, [pc, #336]	; (8003538 <HAL_ETH_TransmitFrame+0x1cc>)
 80033e6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ea:	0a9b      	lsrs	r3, r3, #10
 80033ec:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80033ee:	683a      	ldr	r2, [r7, #0]
 80033f0:	4b51      	ldr	r3, [pc, #324]	; (8003538 <HAL_ETH_TransmitFrame+0x1cc>)
 80033f2:	fba3 1302 	umull	r1, r3, r3, r2
 80033f6:	0a9b      	lsrs	r3, r3, #10
 80033f8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80033fc:	fb01 f303 	mul.w	r3, r1, r3
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d005      	beq.n	8003412 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	3301      	adds	r3, #1
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	e001      	b.n	8003412 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 800340e:	2301      	movs	r3, #1
 8003410:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d11c      	bne.n	8003452 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003422:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8003426:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003432:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003442:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	461a      	mov	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003450:	e04b      	b.n	80034ea <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8003452:	2300      	movs	r3, #0
 8003454:	613b      	str	r3, [r7, #16]
 8003456:	e044      	b.n	80034e2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003462:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003466:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d107      	bne.n	800347e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003478:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800347c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003486:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	3b01      	subs	r3, #1
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	429a      	cmp	r2, r3
 8003490:	d116      	bne.n	80034c0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80034a0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	4a25      	ldr	r2, [pc, #148]	; (800353c <HAL_ETH_TransmitFrame+0x1d0>)
 80034a6:	fb02 f203 	mul.w	r2, r2, r3
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	4413      	add	r3, r2
 80034ae:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80034b2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80034be:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ca:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80034ce:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	461a      	mov	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	3301      	adds	r3, #1
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d3b6      	bcc.n	8003458 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	f241 0314 	movw	r3, #4116	; 0x1014
 80034f2:	4413      	add	r3, r2
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00d      	beq.n	800351a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	f241 0314 	movw	r3, #4116	; 0x1014
 8003506:	4413      	add	r3, r2
 8003508:	2204      	movs	r2, #4
 800350a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	f241 0304 	movw	r3, #4100	; 0x1004
 8003514:	4413      	add	r3, r2
 8003516:	2200      	movs	r2, #0
 8003518:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	371c      	adds	r7, #28
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	ac02b00b 	.word	0xac02b00b
 800353c:	fffffa0c 	.word	0xfffffa0c

08003540 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8003548:	2300      	movs	r3, #0
 800354a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8003556:	2302      	movs	r3, #2
 8003558:	e074      	b.n	8003644 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2202      	movs	r2, #2
 8003566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800356a:	e05a      	b.n	8003622 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	3301      	adds	r3, #1
 8003570:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800357c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003580:	d10d      	bne.n	800359e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	461a      	mov	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	629a      	str	r2, [r3, #40]	; 0x28
 800359c:	e041      	b.n	8003622 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10b      	bne.n	80035c4 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	461a      	mov	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	629a      	str	r2, [r3, #40]	; 0x28
 80035c2:	e02e      	b.n	8003622 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d103      	bne.n	80035e6 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	0c1b      	lsrs	r3, r3, #16
 80035ee:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80035f2:	1f1a      	subs	r2, r3, #4
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	461a      	mov	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	e010      	b.n	8003644 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	db02      	blt.n	8003632 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2b03      	cmp	r3, #3
 8003630:	d99c      	bls.n	800356c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
}
 8003644:	4618      	mov	r0, r3
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	f241 0314 	movw	r3, #4116	; 0x1014
 8003660:	4413      	add	r3, r2
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003668:	2b40      	cmp	r3, #64	; 0x40
 800366a:	d112      	bne.n	8003692 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f003 fee9 	bl	8007444 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	f241 0314 	movw	r3, #4116	; 0x1014
 800367a:	4413      	add	r3, r2
 800367c:	2240      	movs	r2, #64	; 0x40
 800367e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003690:	e01b      	b.n	80036ca <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	f241 0314 	movw	r3, #4116	; 0x1014
 800369a:	4413      	add	r3, r2
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d111      	bne.n	80036ca <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f839 	bl	800371e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	f241 0314 	movw	r3, #4116	; 0x1014
 80036b4:	4413      	add	r3, r2
 80036b6:	2201      	movs	r2, #1
 80036b8:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	f241 0314 	movw	r3, #4116	; 0x1014
 80036d2:	4413      	add	r3, r2
 80036d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80036d8:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	f241 0314 	movw	r3, #4116	; 0x1014
 80036e2:	4413      	add	r3, r2
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036ee:	d112      	bne.n	8003716 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f81e 	bl	8003732 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	f241 0314 	movw	r3, #4116	; 0x1014
 80036fe:	4413      	add	r3, r2
 8003700:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003704:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8003716:	bf00      	nop
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b086      	sub	sp, #24
 800374a:	af00      	add	r7, sp, #0
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	460b      	mov	r3, r1
 8003750:	607a      	str	r2, [r7, #4]
 8003752:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003758:	2300      	movs	r3, #0
 800375a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b82      	cmp	r3, #130	; 0x82
 8003766:	d101      	bne.n	800376c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003768:	2302      	movs	r3, #2
 800376a:	e050      	b.n	800380e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2282      	movs	r2, #130	; 0x82
 8003770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f003 031c 	and.w	r3, r3, #28
 8003782:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8a1b      	ldrh	r3, [r3, #16]
 8003788:	02db      	lsls	r3, r3, #11
 800378a:	b29b      	uxth	r3, r3
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	4313      	orrs	r3, r2
 8003790:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003792:	897b      	ldrh	r3, [r7, #10]
 8003794:	019b      	lsls	r3, r3, #6
 8003796:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	4313      	orrs	r3, r2
 800379e:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f023 0302 	bic.w	r3, r3, #2
 80037a6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80037b8:	f7ff fa56 	bl	8002c68 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80037be:	e015      	b.n	80037ec <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80037c0:	f7ff fa52 	bl	8002c68 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ce:	d309      	bcc.n	80037e4 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e014      	b.n	800380e <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1e4      	bne.n	80037c0 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	461a      	mov	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b086      	sub	sp, #24
 800381a:	af00      	add	r7, sp, #0
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	460b      	mov	r3, r1
 8003820:	607a      	str	r2, [r7, #4]
 8003822:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8003824:	2300      	movs	r3, #0
 8003826:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003828:	2300      	movs	r3, #0
 800382a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b42      	cmp	r3, #66	; 0x42
 8003836:	d101      	bne.n	800383c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003838:	2302      	movs	r3, #2
 800383a:	e04e      	b.n	80038da <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2242      	movs	r2, #66	; 0x42
 8003840:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f003 031c 	and.w	r3, r3, #28
 8003852:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8a1b      	ldrh	r3, [r3, #16]
 8003858:	02db      	lsls	r3, r3, #11
 800385a:	b29b      	uxth	r3, r3
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	4313      	orrs	r3, r2
 8003860:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003862:	897b      	ldrh	r3, [r7, #10]
 8003864:	019b      	lsls	r3, r3, #6
 8003866:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	4313      	orrs	r3, r2
 800386e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f043 0302 	orr.w	r3, r3, #2
 8003876:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	b29a      	uxth	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003892:	f7ff f9e9 	bl	8002c68 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003898:	e015      	b.n	80038c6 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800389a:	f7ff f9e5 	bl	8002c68 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a8:	d309      	bcc.n	80038be <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e00d      	b.n	80038da <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1e4      	bne.n	800389a <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3718      	adds	r7, #24
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b082      	sub	sp, #8
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d101      	bne.n	80038f8 <HAL_ETH_Start+0x16>
 80038f4:	2302      	movs	r3, #2
 80038f6:	e01f      	b.n	8003938 <HAL_ETH_Start+0x56>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2202      	movs	r2, #2
 8003904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 fb45 	bl	8003f98 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 fb7c 	bl	800400c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 fc13 	bl	8004140 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 fbb0 	bl	8004080 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 fbdd 	bl	80040e0 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800394e:	2b01      	cmp	r3, #1
 8003950:	d101      	bne.n	8003956 <HAL_ETH_Stop+0x16>
 8003952:	2302      	movs	r3, #2
 8003954:	e01f      	b.n	8003996 <HAL_ETH_Stop+0x56>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2202      	movs	r2, #2
 8003962:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fba2 	bl	80040b0 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 fbcf 	bl	8004110 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 fb67 	bl	8004046 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 fbe1 	bl	8004140 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fb27 	bl	8003fd2 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80039aa:	2300      	movs	r3, #0
 80039ac:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <HAL_ETH_ConfigMAC+0x1c>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e0e4      	b.n	8003b86 <HAL_ETH_ConfigMAC+0x1e6>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 80b1 	beq.w	8003b36 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4b6c      	ldr	r3, [pc, #432]	; (8003b90 <HAL_ETH_ConfigMAC+0x1f0>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80039ec:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80039f2:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80039f8:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80039fe:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8003a04:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8003a0a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8003a10:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8003a16:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8003a1c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8003a22:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8003a28:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8003a2e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a46:	2001      	movs	r0, #1
 8003a48:	f7ff f91a 	bl	8002c80 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003a5c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8003a62:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8003a68:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8003a6e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8003a74:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8003a7a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8003a86:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003a88:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a92:	2001      	movs	r0, #1
 8003a94:	f7ff f8f4 	bl	8002c80 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003aa8:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ab2:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aca:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8003ad0:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8003ad6:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8003adc:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8003ae2:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8003ae8:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b00:	2001      	movs	r0, #1
 8003b02:	f7ff f8bd 	bl	8002c80 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b26:	2001      	movs	r0, #1
 8003b28:	f7ff f8aa 	bl	8002c80 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	61da      	str	r2, [r3, #28]
 8003b34:	e01e      	b.n	8003b74 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003b44:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689a      	ldr	r2, [r3, #8]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b66:	2001      	movs	r0, #1
 8003b68:	f7ff f88a 	bl	8002c80 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	ff20810f 	.word	0xff20810f

08003b94 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b0b0      	sub	sp, #192	; 0xc0
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d007      	beq.n	8003bba <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bb0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003bb8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d103      	bne.n	8003be2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bde:	663b      	str	r3, [r7, #96]	; 0x60
 8003be0:	e001      	b.n	8003be6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003be2:	2300      	movs	r3, #0
 8003be4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8003be6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003bea:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003bec:	2300      	movs	r3, #0
 8003bee:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003c00:	2340      	movs	r3, #64	; 0x40
 8003c02:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003c04:	2300      	movs	r3, #0
 8003c06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003c10:	2300      	movs	r3, #0
 8003c12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003c16:	2300      	movs	r3, #0
 8003c18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8003c22:	2300      	movs	r3, #0
 8003c24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003c34:	2380      	movs	r3, #128	; 0x80
 8003c36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003c40:	2300      	movs	r3, #0
 8003c42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003c46:	2300      	movs	r3, #0
 8003c48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003c52:	2300      	movs	r3, #0
 8003c54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8003c68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c6c:	4bab      	ldr	r3, [pc, #684]	; (8003f1c <ETH_MACDMAConfig+0x388>)
 8003c6e:	4013      	ands	r3, r2
 8003c70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003c74:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003c78:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003c7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003c7c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003c80:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003c86:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003c88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003c8a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003c8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003c8e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003c94:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8003c96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003c98:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8003c9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003c9c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003c9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003ca0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003ca4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8003ca6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003ca8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003caa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003cbc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cc8:	2001      	movs	r0, #1
 8003cca:	f7fe ffd9 	bl	8002c80 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003cd6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003cd8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003cda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003cdc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003cde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003ce0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003ce2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8003ce6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003ce8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003cec:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003cee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003cf2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003cf8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003cfc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003d04:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003d06:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d12:	2001      	movs	r0, #1
 8003d14:	f7fe ffb4 	bl	8002c80 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d20:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d2a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003d34:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003d40:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d44:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003d48:	4013      	ands	r3, r2
 8003d4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003d4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d52:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003d54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003d58:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003d5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003d5e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003d60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003d64:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003d66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003d6a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003d6c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003d70:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003d72:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d84:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d90:	2001      	movs	r0, #1
 8003d92:	f7fe ff75 	bl	8002c80 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d9e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003da0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003da4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dba:	2001      	movs	r0, #1
 8003dbc:	f7fe ff60 	bl	8002c80 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003dc8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003dce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dd2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003dd8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ddc:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003de2:	2300      	movs	r3, #0
 8003de4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003de6:	2300      	movs	r3, #0
 8003de8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003dea:	2300      	movs	r3, #0
 8003dec:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003dee:	2304      	movs	r3, #4
 8003df0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003df2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003df8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003dfc:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003dfe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e02:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003e04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e08:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003e0a:	2380      	movs	r3, #128	; 0x80
 8003e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003e12:	2300      	movs	r3, #0
 8003e14:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	f241 0318 	movw	r3, #4120	; 0x1018
 8003e1e:	4413      	add	r3, r2
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8003e26:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e2a:	4b3d      	ldr	r3, [pc, #244]	; (8003f20 <ETH_MACDMAConfig+0x38c>)
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003e32:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003e34:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003e36:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003e38:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003e3a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003e3c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003e3e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003e40:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003e42:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003e44:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003e46:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003e48:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003e4a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003e4e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003e52:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003e54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	f241 0318 	movw	r3, #4120	; 0x1018
 8003e66:	4413      	add	r3, r2
 8003e68:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e6c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	f241 0318 	movw	r3, #4120	; 0x1018
 8003e76:	4413      	add	r3, r2
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e7e:	2001      	movs	r0, #1
 8003e80:	f7fe fefe 	bl	8002c80 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	f241 0318 	movw	r3, #4120	; 0x1018
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e92:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003e94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8003e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003e98:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003e9c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003ea0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8003ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003ea4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8003ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ea8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003eaa:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8003eae:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ebc:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ecc:	2001      	movs	r0, #1
 8003ece:	f7fe fed7 	bl	8002c80 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eda:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003ede:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d10d      	bne.n	8003f04 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	f241 031c 	movw	r3, #4124	; 0x101c
 8003ef0:	4413      	add	r3, r2
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6811      	ldr	r1, [r2, #0]
 8003ef8:	4a0a      	ldr	r2, [pc, #40]	; (8003f24 <ETH_MACDMAConfig+0x390>)
 8003efa:	431a      	orrs	r2, r3
 8003efc:	f241 031c 	movw	r3, #4124	; 0x101c
 8003f00:	440b      	add	r3, r1
 8003f02:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	461a      	mov	r2, r3
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f80b 	bl	8003f28 <ETH_MACAddressConfig>
}
 8003f12:	bf00      	nop
 8003f14:	37c0      	adds	r7, #192	; 0xc0
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	ff20810f 	.word	0xff20810f
 8003f20:	f8de3f23 	.word	0xf8de3f23
 8003f24:	00010040 	.word	0x00010040

08003f28 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3305      	adds	r3, #5
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	021b      	lsls	r3, r3, #8
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	3204      	adds	r2, #4
 8003f40:	7812      	ldrb	r2, [r2, #0]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	4b11      	ldr	r3, [pc, #68]	; (8003f90 <ETH_MACAddressConfig+0x68>)
 8003f4a:	4413      	add	r3, r2
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3303      	adds	r3, #3
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	061a      	lsls	r2, r3, #24
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3302      	adds	r3, #2
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	041b      	lsls	r3, r3, #16
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3301      	adds	r3, #1
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	021b      	lsls	r3, r3, #8
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	7812      	ldrb	r2, [r2, #0]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	4b06      	ldr	r3, [pc, #24]	; (8003f94 <ETH_MACAddressConfig+0x6c>)
 8003f7a:	4413      	add	r3, r2
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	6013      	str	r3, [r2, #0]
}
 8003f82:	bf00      	nop
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	40028040 	.word	0x40028040
 8003f94:	40028044 	.word	0x40028044

08003f98 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0208 	orr.w	r2, r2, #8
 8003fb2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003fbc:	2001      	movs	r0, #1
 8003fbe:	f7fe fe5f 	bl	8002c80 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	601a      	str	r2, [r3, #0]
}
 8003fca:	bf00      	nop
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b084      	sub	sp, #16
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0208 	bic.w	r2, r2, #8
 8003fec:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ff6:	2001      	movs	r0, #1
 8003ff8:	f7fe fe42 	bl	8002c80 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	601a      	str	r2, [r3, #0]
}
 8004004:	bf00      	nop
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004014:	2300      	movs	r3, #0
 8004016:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0204 	orr.w	r2, r2, #4
 8004026:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004030:	2001      	movs	r0, #1
 8004032:	f7fe fe25 	bl	8002c80 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	601a      	str	r2, [r3, #0]
}
 800403e:	bf00      	nop
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8004046:	b580      	push	{r7, lr}
 8004048:	b084      	sub	sp, #16
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800404e:	2300      	movs	r3, #0
 8004050:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0204 	bic.w	r2, r2, #4
 8004060:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800406a:	2001      	movs	r0, #1
 800406c:	f7fe fe08 	bl	8002c80 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	601a      	str	r2, [r3, #0]
}
 8004078:	bf00      	nop
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	f241 0318 	movw	r3, #4120	; 0x1018
 8004090:	4413      	add	r3, r2
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6811      	ldr	r1, [r2, #0]
 8004098:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800409c:	f241 0318 	movw	r3, #4120	; 0x1018
 80040a0:	440b      	add	r3, r1
 80040a2:	601a      	str	r2, [r3, #0]
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	f241 0318 	movw	r3, #4120	; 0x1018
 80040c0:	4413      	add	r3, r2
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	6811      	ldr	r1, [r2, #0]
 80040c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80040cc:	f241 0318 	movw	r3, #4120	; 0x1018
 80040d0:	440b      	add	r3, r1
 80040d2:	601a      	str	r2, [r3, #0]
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	f241 0318 	movw	r3, #4120	; 0x1018
 80040f0:	4413      	add	r3, r2
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6811      	ldr	r1, [r2, #0]
 80040f8:	f043 0202 	orr.w	r2, r3, #2
 80040fc:	f241 0318 	movw	r3, #4120	; 0x1018
 8004100:	440b      	add	r3, r1
 8004102:	601a      	str	r2, [r3, #0]
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	f241 0318 	movw	r3, #4120	; 0x1018
 8004120:	4413      	add	r3, r2
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6811      	ldr	r1, [r2, #0]
 8004128:	f023 0202 	bic.w	r2, r3, #2
 800412c:	f241 0318 	movw	r3, #4120	; 0x1018
 8004130:	440b      	add	r3, r1
 8004132:	601a      	str	r2, [r3, #0]
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004148:	2300      	movs	r3, #0
 800414a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	f241 0318 	movw	r3, #4120	; 0x1018
 8004154:	4413      	add	r3, r2
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6811      	ldr	r1, [r2, #0]
 800415c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004160:	f241 0318 	movw	r3, #4120	; 0x1018
 8004164:	440b      	add	r3, r1
 8004166:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	f241 0318 	movw	r3, #4120	; 0x1018
 8004170:	4413      	add	r3, r2
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004176:	2001      	movs	r0, #1
 8004178:	f7fe fd82 	bl	8002c80 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6819      	ldr	r1, [r3, #0]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	f241 0318 	movw	r3, #4120	; 0x1018
 8004186:	440b      	add	r3, r1
 8004188:	601a      	str	r2, [r3, #0]
}
 800418a:	bf00      	nop
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
	...

08004194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004194:	b480      	push	{r7}
 8004196:	b089      	sub	sp, #36	; 0x24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800419e:	2300      	movs	r3, #0
 80041a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80041a2:	2300      	movs	r3, #0
 80041a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80041a6:	2300      	movs	r3, #0
 80041a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80041aa:	2300      	movs	r3, #0
 80041ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80041ae:	2300      	movs	r3, #0
 80041b0:	61fb      	str	r3, [r7, #28]
 80041b2:	e175      	b.n	80044a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80041b4:	2201      	movs	r2, #1
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	fa02 f303 	lsl.w	r3, r2, r3
 80041bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4013      	ands	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	f040 8164 	bne.w	800449a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d005      	beq.n	80041ea <HAL_GPIO_Init+0x56>
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d130      	bne.n	800424c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	2203      	movs	r2, #3
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	43db      	mvns	r3, r3
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	4013      	ands	r3, r2
 8004200:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	68da      	ldr	r2, [r3, #12]
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	4313      	orrs	r3, r2
 8004212:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004220:	2201      	movs	r2, #1
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	fa02 f303 	lsl.w	r3, r2, r3
 8004228:	43db      	mvns	r3, r3
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	4013      	ands	r3, r2
 800422e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	091b      	lsrs	r3, r3, #4
 8004236:	f003 0201 	and.w	r2, r3, #1
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4313      	orrs	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f003 0303 	and.w	r3, r3, #3
 8004254:	2b03      	cmp	r3, #3
 8004256:	d017      	beq.n	8004288 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	2203      	movs	r2, #3
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	43db      	mvns	r3, r3
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	4013      	ands	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	4313      	orrs	r3, r2
 8004280:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f003 0303 	and.w	r3, r3, #3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d123      	bne.n	80042dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	08da      	lsrs	r2, r3, #3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3208      	adds	r2, #8
 800429c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	220f      	movs	r2, #15
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	43db      	mvns	r3, r3
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	4013      	ands	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	691a      	ldr	r2, [r3, #16]
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	08da      	lsrs	r2, r3, #3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3208      	adds	r2, #8
 80042d6:	69b9      	ldr	r1, [r7, #24]
 80042d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	2203      	movs	r2, #3
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	43db      	mvns	r3, r3
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	4013      	ands	r3, r2
 80042f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f003 0203 	and.w	r2, r3, #3
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	4313      	orrs	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 80be 	beq.w	800449a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800431e:	4b66      	ldr	r3, [pc, #408]	; (80044b8 <HAL_GPIO_Init+0x324>)
 8004320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004322:	4a65      	ldr	r2, [pc, #404]	; (80044b8 <HAL_GPIO_Init+0x324>)
 8004324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004328:	6453      	str	r3, [r2, #68]	; 0x44
 800432a:	4b63      	ldr	r3, [pc, #396]	; (80044b8 <HAL_GPIO_Init+0x324>)
 800432c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004336:	4a61      	ldr	r2, [pc, #388]	; (80044bc <HAL_GPIO_Init+0x328>)
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	089b      	lsrs	r3, r3, #2
 800433c:	3302      	adds	r3, #2
 800433e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004342:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	220f      	movs	r2, #15
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	43db      	mvns	r3, r3
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	4013      	ands	r3, r2
 8004358:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a58      	ldr	r2, [pc, #352]	; (80044c0 <HAL_GPIO_Init+0x32c>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d037      	beq.n	80043d2 <HAL_GPIO_Init+0x23e>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a57      	ldr	r2, [pc, #348]	; (80044c4 <HAL_GPIO_Init+0x330>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d031      	beq.n	80043ce <HAL_GPIO_Init+0x23a>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a56      	ldr	r2, [pc, #344]	; (80044c8 <HAL_GPIO_Init+0x334>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d02b      	beq.n	80043ca <HAL_GPIO_Init+0x236>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a55      	ldr	r2, [pc, #340]	; (80044cc <HAL_GPIO_Init+0x338>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d025      	beq.n	80043c6 <HAL_GPIO_Init+0x232>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a54      	ldr	r2, [pc, #336]	; (80044d0 <HAL_GPIO_Init+0x33c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d01f      	beq.n	80043c2 <HAL_GPIO_Init+0x22e>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a53      	ldr	r2, [pc, #332]	; (80044d4 <HAL_GPIO_Init+0x340>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d019      	beq.n	80043be <HAL_GPIO_Init+0x22a>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a52      	ldr	r2, [pc, #328]	; (80044d8 <HAL_GPIO_Init+0x344>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d013      	beq.n	80043ba <HAL_GPIO_Init+0x226>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a51      	ldr	r2, [pc, #324]	; (80044dc <HAL_GPIO_Init+0x348>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00d      	beq.n	80043b6 <HAL_GPIO_Init+0x222>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a50      	ldr	r2, [pc, #320]	; (80044e0 <HAL_GPIO_Init+0x34c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d007      	beq.n	80043b2 <HAL_GPIO_Init+0x21e>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a4f      	ldr	r2, [pc, #316]	; (80044e4 <HAL_GPIO_Init+0x350>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d101      	bne.n	80043ae <HAL_GPIO_Init+0x21a>
 80043aa:	2309      	movs	r3, #9
 80043ac:	e012      	b.n	80043d4 <HAL_GPIO_Init+0x240>
 80043ae:	230a      	movs	r3, #10
 80043b0:	e010      	b.n	80043d4 <HAL_GPIO_Init+0x240>
 80043b2:	2308      	movs	r3, #8
 80043b4:	e00e      	b.n	80043d4 <HAL_GPIO_Init+0x240>
 80043b6:	2307      	movs	r3, #7
 80043b8:	e00c      	b.n	80043d4 <HAL_GPIO_Init+0x240>
 80043ba:	2306      	movs	r3, #6
 80043bc:	e00a      	b.n	80043d4 <HAL_GPIO_Init+0x240>
 80043be:	2305      	movs	r3, #5
 80043c0:	e008      	b.n	80043d4 <HAL_GPIO_Init+0x240>
 80043c2:	2304      	movs	r3, #4
 80043c4:	e006      	b.n	80043d4 <HAL_GPIO_Init+0x240>
 80043c6:	2303      	movs	r3, #3
 80043c8:	e004      	b.n	80043d4 <HAL_GPIO_Init+0x240>
 80043ca:	2302      	movs	r3, #2
 80043cc:	e002      	b.n	80043d4 <HAL_GPIO_Init+0x240>
 80043ce:	2301      	movs	r3, #1
 80043d0:	e000      	b.n	80043d4 <HAL_GPIO_Init+0x240>
 80043d2:	2300      	movs	r3, #0
 80043d4:	69fa      	ldr	r2, [r7, #28]
 80043d6:	f002 0203 	and.w	r2, r2, #3
 80043da:	0092      	lsls	r2, r2, #2
 80043dc:	4093      	lsls	r3, r2
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80043e4:	4935      	ldr	r1, [pc, #212]	; (80044bc <HAL_GPIO_Init+0x328>)
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	089b      	lsrs	r3, r3, #2
 80043ea:	3302      	adds	r3, #2
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043f2:	4b3d      	ldr	r3, [pc, #244]	; (80044e8 <HAL_GPIO_Init+0x354>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	43db      	mvns	r3, r3
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	4013      	ands	r3, r2
 8004400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004416:	4a34      	ldr	r2, [pc, #208]	; (80044e8 <HAL_GPIO_Init+0x354>)
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800441c:	4b32      	ldr	r3, [pc, #200]	; (80044e8 <HAL_GPIO_Init+0x354>)
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	43db      	mvns	r3, r3
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	4013      	ands	r3, r2
 800442a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004438:	69ba      	ldr	r2, [r7, #24]
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	4313      	orrs	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004440:	4a29      	ldr	r2, [pc, #164]	; (80044e8 <HAL_GPIO_Init+0x354>)
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004446:	4b28      	ldr	r3, [pc, #160]	; (80044e8 <HAL_GPIO_Init+0x354>)
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	43db      	mvns	r3, r3
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	4013      	ands	r3, r2
 8004454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	4313      	orrs	r3, r2
 8004468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800446a:	4a1f      	ldr	r2, [pc, #124]	; (80044e8 <HAL_GPIO_Init+0x354>)
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004470:	4b1d      	ldr	r3, [pc, #116]	; (80044e8 <HAL_GPIO_Init+0x354>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	43db      	mvns	r3, r3
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	4013      	ands	r3, r2
 800447e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	4313      	orrs	r3, r2
 8004492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004494:	4a14      	ldr	r2, [pc, #80]	; (80044e8 <HAL_GPIO_Init+0x354>)
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	3301      	adds	r3, #1
 800449e:	61fb      	str	r3, [r7, #28]
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	2b0f      	cmp	r3, #15
 80044a4:	f67f ae86 	bls.w	80041b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80044a8:	bf00      	nop
 80044aa:	bf00      	nop
 80044ac:	3724      	adds	r7, #36	; 0x24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40023800 	.word	0x40023800
 80044bc:	40013800 	.word	0x40013800
 80044c0:	40020000 	.word	0x40020000
 80044c4:	40020400 	.word	0x40020400
 80044c8:	40020800 	.word	0x40020800
 80044cc:	40020c00 	.word	0x40020c00
 80044d0:	40021000 	.word	0x40021000
 80044d4:	40021400 	.word	0x40021400
 80044d8:	40021800 	.word	0x40021800
 80044dc:	40021c00 	.word	0x40021c00
 80044e0:	40022000 	.word	0x40022000
 80044e4:	40022400 	.word	0x40022400
 80044e8:	40013c00 	.word	0x40013c00

080044ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	807b      	strh	r3, [r7, #2]
 80044f8:	4613      	mov	r3, r2
 80044fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044fc:	787b      	ldrb	r3, [r7, #1]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004502:	887a      	ldrh	r2, [r7, #2]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004508:	e003      	b.n	8004512 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800450a:	887b      	ldrh	r3, [r7, #2]
 800450c:	041a      	lsls	r2, r3, #16
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	619a      	str	r2, [r3, #24]
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800451e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004520:	b08f      	sub	sp, #60	; 0x3c
 8004522:	af0a      	add	r7, sp, #40	; 0x28
 8004524:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e116      	b.n	800475e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d106      	bne.n	8004550 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7fd fb66 	bl	8001c1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2203      	movs	r2, #3
 8004554:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004560:	2b00      	cmp	r3, #0
 8004562:	d102      	bne.n	800456a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4618      	mov	r0, r3
 8004570:	f002 fab4 	bl	8006adc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	603b      	str	r3, [r7, #0]
 800457a:	687e      	ldr	r6, [r7, #4]
 800457c:	466d      	mov	r5, sp
 800457e:	f106 0410 	add.w	r4, r6, #16
 8004582:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004584:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004586:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004588:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800458a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800458e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004592:	1d33      	adds	r3, r6, #4
 8004594:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004596:	6838      	ldr	r0, [r7, #0]
 8004598:	f002 fa48 	bl	8006a2c <USB_CoreInit>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d005      	beq.n	80045ae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2202      	movs	r2, #2
 80045a6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e0d7      	b.n	800475e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2100      	movs	r1, #0
 80045b4:	4618      	mov	r0, r3
 80045b6:	f002 faa2 	bl	8006afe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045ba:	2300      	movs	r3, #0
 80045bc:	73fb      	strb	r3, [r7, #15]
 80045be:	e04a      	b.n	8004656 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80045c0:	7bfa      	ldrb	r2, [r7, #15]
 80045c2:	6879      	ldr	r1, [r7, #4]
 80045c4:	4613      	mov	r3, r2
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	1a9b      	subs	r3, r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	333d      	adds	r3, #61	; 0x3d
 80045d0:	2201      	movs	r2, #1
 80045d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80045d4:	7bfa      	ldrb	r2, [r7, #15]
 80045d6:	6879      	ldr	r1, [r7, #4]
 80045d8:	4613      	mov	r3, r2
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	1a9b      	subs	r3, r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	333c      	adds	r3, #60	; 0x3c
 80045e4:	7bfa      	ldrb	r2, [r7, #15]
 80045e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80045e8:	7bfa      	ldrb	r2, [r7, #15]
 80045ea:	7bfb      	ldrb	r3, [r7, #15]
 80045ec:	b298      	uxth	r0, r3
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	4613      	mov	r3, r2
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	1a9b      	subs	r3, r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	440b      	add	r3, r1
 80045fa:	3342      	adds	r3, #66	; 0x42
 80045fc:	4602      	mov	r2, r0
 80045fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004600:	7bfa      	ldrb	r2, [r7, #15]
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	4613      	mov	r3, r2
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	1a9b      	subs	r3, r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	440b      	add	r3, r1
 800460e:	333f      	adds	r3, #63	; 0x3f
 8004610:	2200      	movs	r2, #0
 8004612:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004614:	7bfa      	ldrb	r2, [r7, #15]
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	4613      	mov	r3, r2
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	1a9b      	subs	r3, r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	3344      	adds	r3, #68	; 0x44
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004628:	7bfa      	ldrb	r2, [r7, #15]
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	4613      	mov	r3, r2
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	1a9b      	subs	r3, r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	3348      	adds	r3, #72	; 0x48
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800463c:	7bfa      	ldrb	r2, [r7, #15]
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	4613      	mov	r3, r2
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	1a9b      	subs	r3, r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	3350      	adds	r3, #80	; 0x50
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004650:	7bfb      	ldrb	r3, [r7, #15]
 8004652:	3301      	adds	r3, #1
 8004654:	73fb      	strb	r3, [r7, #15]
 8004656:	7bfa      	ldrb	r2, [r7, #15]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	429a      	cmp	r2, r3
 800465e:	d3af      	bcc.n	80045c0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004660:	2300      	movs	r3, #0
 8004662:	73fb      	strb	r3, [r7, #15]
 8004664:	e044      	b.n	80046f0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004666:	7bfa      	ldrb	r2, [r7, #15]
 8004668:	6879      	ldr	r1, [r7, #4]
 800466a:	4613      	mov	r3, r2
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	1a9b      	subs	r3, r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	440b      	add	r3, r1
 8004674:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004678:	2200      	movs	r2, #0
 800467a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800467c:	7bfa      	ldrb	r2, [r7, #15]
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	4613      	mov	r3, r2
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	1a9b      	subs	r3, r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	440b      	add	r3, r1
 800468a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800468e:	7bfa      	ldrb	r2, [r7, #15]
 8004690:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004692:	7bfa      	ldrb	r2, [r7, #15]
 8004694:	6879      	ldr	r1, [r7, #4]
 8004696:	4613      	mov	r3, r2
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	1a9b      	subs	r3, r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	440b      	add	r3, r1
 80046a0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80046a4:	2200      	movs	r2, #0
 80046a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80046a8:	7bfa      	ldrb	r2, [r7, #15]
 80046aa:	6879      	ldr	r1, [r7, #4]
 80046ac:	4613      	mov	r3, r2
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	1a9b      	subs	r3, r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	440b      	add	r3, r1
 80046b6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80046ba:	2200      	movs	r2, #0
 80046bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046be:	7bfa      	ldrb	r2, [r7, #15]
 80046c0:	6879      	ldr	r1, [r7, #4]
 80046c2:	4613      	mov	r3, r2
 80046c4:	00db      	lsls	r3, r3, #3
 80046c6:	1a9b      	subs	r3, r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	440b      	add	r3, r1
 80046cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80046d4:	7bfa      	ldrb	r2, [r7, #15]
 80046d6:	6879      	ldr	r1, [r7, #4]
 80046d8:	4613      	mov	r3, r2
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	1a9b      	subs	r3, r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	440b      	add	r3, r1
 80046e2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
 80046ec:	3301      	adds	r3, #1
 80046ee:	73fb      	strb	r3, [r7, #15]
 80046f0:	7bfa      	ldrb	r2, [r7, #15]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d3b5      	bcc.n	8004666 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	603b      	str	r3, [r7, #0]
 8004700:	687e      	ldr	r6, [r7, #4]
 8004702:	466d      	mov	r5, sp
 8004704:	f106 0410 	add.w	r4, r6, #16
 8004708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800470a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800470c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800470e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004710:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004714:	e885 0003 	stmia.w	r5, {r0, r1}
 8004718:	1d33      	adds	r3, r6, #4
 800471a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800471c:	6838      	ldr	r0, [r7, #0]
 800471e:	f002 fa3b 	bl	8006b98 <USB_DevInit>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d005      	beq.n	8004734 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e014      	b.n	800475e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	2b01      	cmp	r3, #1
 800474a:	d102      	bne.n	8004752 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f80b 	bl	8004768 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4618      	mov	r0, r3
 8004758:	f002 fbf5 	bl	8006f46 <USB_DevDisconnect>

  return HAL_OK;
 800475c:	2300      	movs	r3, #0
}
 800475e:	4618      	mov	r0, r3
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004768 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004796:	4b05      	ldr	r3, [pc, #20]	; (80047ac <HAL_PCDEx_ActivateLPM+0x44>)
 8004798:	4313      	orrs	r3, r2
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3714      	adds	r7, #20
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	10000003 	.word	0x10000003

080047b0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047b4:	4b05      	ldr	r3, [pc, #20]	; (80047cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a04      	ldr	r2, [pc, #16]	; (80047cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047be:	6013      	str	r3, [r2, #0]
}
 80047c0:	bf00      	nop
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	40007000 	.word	0x40007000

080047d0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80047d6:	2300      	movs	r3, #0
 80047d8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80047da:	4b23      	ldr	r3, [pc, #140]	; (8004868 <HAL_PWREx_EnableOverDrive+0x98>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	4a22      	ldr	r2, [pc, #136]	; (8004868 <HAL_PWREx_EnableOverDrive+0x98>)
 80047e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e4:	6413      	str	r3, [r2, #64]	; 0x40
 80047e6:	4b20      	ldr	r3, [pc, #128]	; (8004868 <HAL_PWREx_EnableOverDrive+0x98>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ee:	603b      	str	r3, [r7, #0]
 80047f0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80047f2:	4b1e      	ldr	r3, [pc, #120]	; (800486c <HAL_PWREx_EnableOverDrive+0x9c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a1d      	ldr	r2, [pc, #116]	; (800486c <HAL_PWREx_EnableOverDrive+0x9c>)
 80047f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047fc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047fe:	f7fe fa33 	bl	8002c68 <HAL_GetTick>
 8004802:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004804:	e009      	b.n	800481a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004806:	f7fe fa2f 	bl	8002c68 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004814:	d901      	bls.n	800481a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e022      	b.n	8004860 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800481a:	4b14      	ldr	r3, [pc, #80]	; (800486c <HAL_PWREx_EnableOverDrive+0x9c>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004826:	d1ee      	bne.n	8004806 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004828:	4b10      	ldr	r3, [pc, #64]	; (800486c <HAL_PWREx_EnableOverDrive+0x9c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a0f      	ldr	r2, [pc, #60]	; (800486c <HAL_PWREx_EnableOverDrive+0x9c>)
 800482e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004832:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004834:	f7fe fa18 	bl	8002c68 <HAL_GetTick>
 8004838:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800483a:	e009      	b.n	8004850 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800483c:	f7fe fa14 	bl	8002c68 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800484a:	d901      	bls.n	8004850 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e007      	b.n	8004860 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004850:	4b06      	ldr	r3, [pc, #24]	; (800486c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004858:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800485c:	d1ee      	bne.n	800483c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}
 8004868:	40023800 	.word	0x40023800
 800486c:	40007000 	.word	0x40007000

08004870 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004878:	2300      	movs	r3, #0
 800487a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e29b      	b.n	8004dbe <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	f000 8087 	beq.w	80049a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004894:	4b96      	ldr	r3, [pc, #600]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f003 030c 	and.w	r3, r3, #12
 800489c:	2b04      	cmp	r3, #4
 800489e:	d00c      	beq.n	80048ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048a0:	4b93      	ldr	r3, [pc, #588]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f003 030c 	and.w	r3, r3, #12
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d112      	bne.n	80048d2 <HAL_RCC_OscConfig+0x62>
 80048ac:	4b90      	ldr	r3, [pc, #576]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048b8:	d10b      	bne.n	80048d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ba:	4b8d      	ldr	r3, [pc, #564]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d06c      	beq.n	80049a0 <HAL_RCC_OscConfig+0x130>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d168      	bne.n	80049a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e275      	b.n	8004dbe <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048da:	d106      	bne.n	80048ea <HAL_RCC_OscConfig+0x7a>
 80048dc:	4b84      	ldr	r3, [pc, #528]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a83      	ldr	r2, [pc, #524]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 80048e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e6:	6013      	str	r3, [r2, #0]
 80048e8:	e02e      	b.n	8004948 <HAL_RCC_OscConfig+0xd8>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10c      	bne.n	800490c <HAL_RCC_OscConfig+0x9c>
 80048f2:	4b7f      	ldr	r3, [pc, #508]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a7e      	ldr	r2, [pc, #504]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 80048f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	4b7c      	ldr	r3, [pc, #496]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a7b      	ldr	r2, [pc, #492]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 8004904:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	e01d      	b.n	8004948 <HAL_RCC_OscConfig+0xd8>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004914:	d10c      	bne.n	8004930 <HAL_RCC_OscConfig+0xc0>
 8004916:	4b76      	ldr	r3, [pc, #472]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a75      	ldr	r2, [pc, #468]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 800491c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	4b73      	ldr	r3, [pc, #460]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a72      	ldr	r2, [pc, #456]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 8004928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	e00b      	b.n	8004948 <HAL_RCC_OscConfig+0xd8>
 8004930:	4b6f      	ldr	r3, [pc, #444]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a6e      	ldr	r2, [pc, #440]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 8004936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800493a:	6013      	str	r3, [r2, #0]
 800493c:	4b6c      	ldr	r3, [pc, #432]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a6b      	ldr	r2, [pc, #428]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 8004942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d013      	beq.n	8004978 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004950:	f7fe f98a 	bl	8002c68 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004958:	f7fe f986 	bl	8002c68 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b64      	cmp	r3, #100	; 0x64
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e229      	b.n	8004dbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496a:	4b61      	ldr	r3, [pc, #388]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0f0      	beq.n	8004958 <HAL_RCC_OscConfig+0xe8>
 8004976:	e014      	b.n	80049a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004978:	f7fe f976 	bl	8002c68 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004980:	f7fe f972 	bl	8002c68 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b64      	cmp	r3, #100	; 0x64
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e215      	b.n	8004dbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004992:	4b57      	ldr	r3, [pc, #348]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f0      	bne.n	8004980 <HAL_RCC_OscConfig+0x110>
 800499e:	e000      	b.n	80049a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d069      	beq.n	8004a82 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049ae:	4b50      	ldr	r3, [pc, #320]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 030c 	and.w	r3, r3, #12
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00b      	beq.n	80049d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ba:	4b4d      	ldr	r3, [pc, #308]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 030c 	and.w	r3, r3, #12
 80049c2:	2b08      	cmp	r3, #8
 80049c4:	d11c      	bne.n	8004a00 <HAL_RCC_OscConfig+0x190>
 80049c6:	4b4a      	ldr	r3, [pc, #296]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d116      	bne.n	8004a00 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049d2:	4b47      	ldr	r3, [pc, #284]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d005      	beq.n	80049ea <HAL_RCC_OscConfig+0x17a>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d001      	beq.n	80049ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e1e9      	b.n	8004dbe <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ea:	4b41      	ldr	r3, [pc, #260]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	493d      	ldr	r1, [pc, #244]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049fe:	e040      	b.n	8004a82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d023      	beq.n	8004a50 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a08:	4b39      	ldr	r3, [pc, #228]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a38      	ldr	r2, [pc, #224]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 8004a0e:	f043 0301 	orr.w	r3, r3, #1
 8004a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a14:	f7fe f928 	bl	8002c68 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a1c:	f7fe f924 	bl	8002c68 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e1c7      	b.n	8004dbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a2e:	4b30      	ldr	r3, [pc, #192]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0f0      	beq.n	8004a1c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a3a:	4b2d      	ldr	r3, [pc, #180]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	4929      	ldr	r1, [pc, #164]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	600b      	str	r3, [r1, #0]
 8004a4e:	e018      	b.n	8004a82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a50:	4b27      	ldr	r3, [pc, #156]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a26      	ldr	r2, [pc, #152]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 8004a56:	f023 0301 	bic.w	r3, r3, #1
 8004a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5c:	f7fe f904 	bl	8002c68 <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a64:	f7fe f900 	bl	8002c68 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e1a3      	b.n	8004dbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a76:	4b1e      	ldr	r3, [pc, #120]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1f0      	bne.n	8004a64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d038      	beq.n	8004b00 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d019      	beq.n	8004aca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a96:	4b16      	ldr	r3, [pc, #88]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 8004a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a9a:	4a15      	ldr	r2, [pc, #84]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 8004a9c:	f043 0301 	orr.w	r3, r3, #1
 8004aa0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa2:	f7fe f8e1 	bl	8002c68 <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aa8:	e008      	b.n	8004abc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aaa:	f7fe f8dd 	bl	8002c68 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e180      	b.n	8004dbe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004abc:	4b0c      	ldr	r3, [pc, #48]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 8004abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0f0      	beq.n	8004aaa <HAL_RCC_OscConfig+0x23a>
 8004ac8:	e01a      	b.n	8004b00 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aca:	4b09      	ldr	r3, [pc, #36]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 8004acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ace:	4a08      	ldr	r2, [pc, #32]	; (8004af0 <HAL_RCC_OscConfig+0x280>)
 8004ad0:	f023 0301 	bic.w	r3, r3, #1
 8004ad4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad6:	f7fe f8c7 	bl	8002c68 <HAL_GetTick>
 8004ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004adc:	e00a      	b.n	8004af4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ade:	f7fe f8c3 	bl	8002c68 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d903      	bls.n	8004af4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e166      	b.n	8004dbe <HAL_RCC_OscConfig+0x54e>
 8004af0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004af4:	4b92      	ldr	r3, [pc, #584]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1ee      	bne.n	8004ade <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 80a4 	beq.w	8004c56 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b0e:	4b8c      	ldr	r3, [pc, #560]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10d      	bne.n	8004b36 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b1a:	4b89      	ldr	r3, [pc, #548]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	4a88      	ldr	r2, [pc, #544]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b24:	6413      	str	r3, [r2, #64]	; 0x40
 8004b26:	4b86      	ldr	r3, [pc, #536]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b2e:	60bb      	str	r3, [r7, #8]
 8004b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b32:	2301      	movs	r3, #1
 8004b34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b36:	4b83      	ldr	r3, [pc, #524]	; (8004d44 <HAL_RCC_OscConfig+0x4d4>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d118      	bne.n	8004b74 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004b42:	4b80      	ldr	r3, [pc, #512]	; (8004d44 <HAL_RCC_OscConfig+0x4d4>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a7f      	ldr	r2, [pc, #508]	; (8004d44 <HAL_RCC_OscConfig+0x4d4>)
 8004b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b4e:	f7fe f88b 	bl	8002c68 <HAL_GetTick>
 8004b52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b54:	e008      	b.n	8004b68 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b56:	f7fe f887 	bl	8002c68 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b64      	cmp	r3, #100	; 0x64
 8004b62:	d901      	bls.n	8004b68 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e12a      	b.n	8004dbe <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b68:	4b76      	ldr	r3, [pc, #472]	; (8004d44 <HAL_RCC_OscConfig+0x4d4>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d0f0      	beq.n	8004b56 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d106      	bne.n	8004b8a <HAL_RCC_OscConfig+0x31a>
 8004b7c:	4b70      	ldr	r3, [pc, #448]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b80:	4a6f      	ldr	r2, [pc, #444]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004b82:	f043 0301 	orr.w	r3, r3, #1
 8004b86:	6713      	str	r3, [r2, #112]	; 0x70
 8004b88:	e02d      	b.n	8004be6 <HAL_RCC_OscConfig+0x376>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10c      	bne.n	8004bac <HAL_RCC_OscConfig+0x33c>
 8004b92:	4b6b      	ldr	r3, [pc, #428]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b96:	4a6a      	ldr	r2, [pc, #424]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004b98:	f023 0301 	bic.w	r3, r3, #1
 8004b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b9e:	4b68      	ldr	r3, [pc, #416]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba2:	4a67      	ldr	r2, [pc, #412]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004ba4:	f023 0304 	bic.w	r3, r3, #4
 8004ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8004baa:	e01c      	b.n	8004be6 <HAL_RCC_OscConfig+0x376>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	2b05      	cmp	r3, #5
 8004bb2:	d10c      	bne.n	8004bce <HAL_RCC_OscConfig+0x35e>
 8004bb4:	4b62      	ldr	r3, [pc, #392]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb8:	4a61      	ldr	r2, [pc, #388]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004bba:	f043 0304 	orr.w	r3, r3, #4
 8004bbe:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc0:	4b5f      	ldr	r3, [pc, #380]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc4:	4a5e      	ldr	r2, [pc, #376]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004bc6:	f043 0301 	orr.w	r3, r3, #1
 8004bca:	6713      	str	r3, [r2, #112]	; 0x70
 8004bcc:	e00b      	b.n	8004be6 <HAL_RCC_OscConfig+0x376>
 8004bce:	4b5c      	ldr	r3, [pc, #368]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd2:	4a5b      	ldr	r2, [pc, #364]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004bd4:	f023 0301 	bic.w	r3, r3, #1
 8004bd8:	6713      	str	r3, [r2, #112]	; 0x70
 8004bda:	4b59      	ldr	r3, [pc, #356]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bde:	4a58      	ldr	r2, [pc, #352]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004be0:	f023 0304 	bic.w	r3, r3, #4
 8004be4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d015      	beq.n	8004c1a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bee:	f7fe f83b 	bl	8002c68 <HAL_GetTick>
 8004bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf4:	e00a      	b.n	8004c0c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf6:	f7fe f837 	bl	8002c68 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e0d8      	b.n	8004dbe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c0c:	4b4c      	ldr	r3, [pc, #304]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d0ee      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x386>
 8004c18:	e014      	b.n	8004c44 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c1a:	f7fe f825 	bl	8002c68 <HAL_GetTick>
 8004c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c20:	e00a      	b.n	8004c38 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c22:	f7fe f821 	bl	8002c68 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e0c2      	b.n	8004dbe <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c38:	4b41      	ldr	r3, [pc, #260]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1ee      	bne.n	8004c22 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c44:	7dfb      	ldrb	r3, [r7, #23]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d105      	bne.n	8004c56 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c4a:	4b3d      	ldr	r3, [pc, #244]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4e:	4a3c      	ldr	r2, [pc, #240]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 80ae 	beq.w	8004dbc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c60:	4b37      	ldr	r3, [pc, #220]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f003 030c 	and.w	r3, r3, #12
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d06d      	beq.n	8004d48 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d14b      	bne.n	8004d0c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c74:	4b32      	ldr	r3, [pc, #200]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a31      	ldr	r2, [pc, #196]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004c7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c80:	f7fd fff2 	bl	8002c68 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c88:	f7fd ffee 	bl	8002c68 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e091      	b.n	8004dbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c9a:	4b29      	ldr	r3, [pc, #164]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f0      	bne.n	8004c88 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69da      	ldr	r2, [r3, #28]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	019b      	lsls	r3, r3, #6
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbc:	085b      	lsrs	r3, r3, #1
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	041b      	lsls	r3, r3, #16
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	061b      	lsls	r3, r3, #24
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd0:	071b      	lsls	r3, r3, #28
 8004cd2:	491b      	ldr	r1, [pc, #108]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cd8:	4b19      	ldr	r3, [pc, #100]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a18      	ldr	r2, [pc, #96]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce4:	f7fd ffc0 	bl	8002c68 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cec:	f7fd ffbc 	bl	8002c68 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e05f      	b.n	8004dbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cfe:	4b10      	ldr	r3, [pc, #64]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0f0      	beq.n	8004cec <HAL_RCC_OscConfig+0x47c>
 8004d0a:	e057      	b.n	8004dbc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d0c:	4b0c      	ldr	r3, [pc, #48]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a0b      	ldr	r2, [pc, #44]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004d12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d18:	f7fd ffa6 	bl	8002c68 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d1e:	e008      	b.n	8004d32 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d20:	f7fd ffa2 	bl	8002c68 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e045      	b.n	8004dbe <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d32:	4b03      	ldr	r3, [pc, #12]	; (8004d40 <HAL_RCC_OscConfig+0x4d0>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f0      	bne.n	8004d20 <HAL_RCC_OscConfig+0x4b0>
 8004d3e:	e03d      	b.n	8004dbc <HAL_RCC_OscConfig+0x54c>
 8004d40:	40023800 	.word	0x40023800
 8004d44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004d48:	4b1f      	ldr	r3, [pc, #124]	; (8004dc8 <HAL_RCC_OscConfig+0x558>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d030      	beq.n	8004db8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d129      	bne.n	8004db8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d122      	bne.n	8004db8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d78:	4013      	ands	r3, r2
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d7e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d119      	bne.n	8004db8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8e:	085b      	lsrs	r3, r3, #1
 8004d90:	3b01      	subs	r3, #1
 8004d92:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d10f      	bne.n	8004db8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d107      	bne.n	8004db8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d001      	beq.n	8004dbc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e000      	b.n	8004dbe <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3718      	adds	r7, #24
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	40023800 	.word	0x40023800

08004dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e0d0      	b.n	8004f86 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004de4:	4b6a      	ldr	r3, [pc, #424]	; (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 030f 	and.w	r3, r3, #15
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d910      	bls.n	8004e14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004df2:	4b67      	ldr	r3, [pc, #412]	; (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f023 020f 	bic.w	r2, r3, #15
 8004dfa:	4965      	ldr	r1, [pc, #404]	; (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e02:	4b63      	ldr	r3, [pc, #396]	; (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 030f 	and.w	r3, r3, #15
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d001      	beq.n	8004e14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e0b8      	b.n	8004f86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d020      	beq.n	8004e62 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d005      	beq.n	8004e38 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e2c:	4b59      	ldr	r3, [pc, #356]	; (8004f94 <HAL_RCC_ClockConfig+0x1c8>)
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	4a58      	ldr	r2, [pc, #352]	; (8004f94 <HAL_RCC_ClockConfig+0x1c8>)
 8004e32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0308 	and.w	r3, r3, #8
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d005      	beq.n	8004e50 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e44:	4b53      	ldr	r3, [pc, #332]	; (8004f94 <HAL_RCC_ClockConfig+0x1c8>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	4a52      	ldr	r2, [pc, #328]	; (8004f94 <HAL_RCC_ClockConfig+0x1c8>)
 8004e4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e50:	4b50      	ldr	r3, [pc, #320]	; (8004f94 <HAL_RCC_ClockConfig+0x1c8>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	494d      	ldr	r1, [pc, #308]	; (8004f94 <HAL_RCC_ClockConfig+0x1c8>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d040      	beq.n	8004ef0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d107      	bne.n	8004e86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e76:	4b47      	ldr	r3, [pc, #284]	; (8004f94 <HAL_RCC_ClockConfig+0x1c8>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d115      	bne.n	8004eae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e07f      	b.n	8004f86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d107      	bne.n	8004e9e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e8e:	4b41      	ldr	r3, [pc, #260]	; (8004f94 <HAL_RCC_ClockConfig+0x1c8>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d109      	bne.n	8004eae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e073      	b.n	8004f86 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e9e:	4b3d      	ldr	r3, [pc, #244]	; (8004f94 <HAL_RCC_ClockConfig+0x1c8>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	e06b      	b.n	8004f86 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eae:	4b39      	ldr	r3, [pc, #228]	; (8004f94 <HAL_RCC_ClockConfig+0x1c8>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f023 0203 	bic.w	r2, r3, #3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	4936      	ldr	r1, [pc, #216]	; (8004f94 <HAL_RCC_ClockConfig+0x1c8>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec0:	f7fd fed2 	bl	8002c68 <HAL_GetTick>
 8004ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ec6:	e00a      	b.n	8004ede <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ec8:	f7fd fece 	bl	8002c68 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e053      	b.n	8004f86 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ede:	4b2d      	ldr	r3, [pc, #180]	; (8004f94 <HAL_RCC_ClockConfig+0x1c8>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f003 020c 	and.w	r2, r3, #12
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d1eb      	bne.n	8004ec8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ef0:	4b27      	ldr	r3, [pc, #156]	; (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 030f 	and.w	r3, r3, #15
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d210      	bcs.n	8004f20 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004efe:	4b24      	ldr	r3, [pc, #144]	; (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f023 020f 	bic.w	r2, r3, #15
 8004f06:	4922      	ldr	r1, [pc, #136]	; (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f0e:	4b20      	ldr	r3, [pc, #128]	; (8004f90 <HAL_RCC_ClockConfig+0x1c4>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d001      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e032      	b.n	8004f86 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d008      	beq.n	8004f3e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f2c:	4b19      	ldr	r3, [pc, #100]	; (8004f94 <HAL_RCC_ClockConfig+0x1c8>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	4916      	ldr	r1, [pc, #88]	; (8004f94 <HAL_RCC_ClockConfig+0x1c8>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0308 	and.w	r3, r3, #8
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d009      	beq.n	8004f5e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f4a:	4b12      	ldr	r3, [pc, #72]	; (8004f94 <HAL_RCC_ClockConfig+0x1c8>)
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	490e      	ldr	r1, [pc, #56]	; (8004f94 <HAL_RCC_ClockConfig+0x1c8>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f5e:	f000 f821 	bl	8004fa4 <HAL_RCC_GetSysClockFreq>
 8004f62:	4602      	mov	r2, r0
 8004f64:	4b0b      	ldr	r3, [pc, #44]	; (8004f94 <HAL_RCC_ClockConfig+0x1c8>)
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	091b      	lsrs	r3, r3, #4
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	490a      	ldr	r1, [pc, #40]	; (8004f98 <HAL_RCC_ClockConfig+0x1cc>)
 8004f70:	5ccb      	ldrb	r3, [r1, r3]
 8004f72:	fa22 f303 	lsr.w	r3, r2, r3
 8004f76:	4a09      	ldr	r2, [pc, #36]	; (8004f9c <HAL_RCC_ClockConfig+0x1d0>)
 8004f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f7a:	4b09      	ldr	r3, [pc, #36]	; (8004fa0 <HAL_RCC_ClockConfig+0x1d4>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fc fec6 	bl	8001d10 <HAL_InitTick>

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	40023c00 	.word	0x40023c00
 8004f94:	40023800 	.word	0x40023800
 8004f98:	0801d1a4 	.word	0x0801d1a4
 8004f9c:	20000700 	.word	0x20000700
 8004fa0:	20000718 	.word	0x20000718

08004fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fa4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004fa8:	b084      	sub	sp, #16
 8004faa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004fac:	2300      	movs	r3, #0
 8004fae:	607b      	str	r3, [r7, #4]
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fbc:	4b67      	ldr	r3, [pc, #412]	; (800515c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f003 030c 	and.w	r3, r3, #12
 8004fc4:	2b08      	cmp	r3, #8
 8004fc6:	d00d      	beq.n	8004fe4 <HAL_RCC_GetSysClockFreq+0x40>
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	f200 80bd 	bhi.w	8005148 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d002      	beq.n	8004fd8 <HAL_RCC_GetSysClockFreq+0x34>
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	d003      	beq.n	8004fde <HAL_RCC_GetSysClockFreq+0x3a>
 8004fd6:	e0b7      	b.n	8005148 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fd8:	4b61      	ldr	r3, [pc, #388]	; (8005160 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004fda:	60bb      	str	r3, [r7, #8]
      break;
 8004fdc:	e0b7      	b.n	800514e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fde:	4b61      	ldr	r3, [pc, #388]	; (8005164 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004fe0:	60bb      	str	r3, [r7, #8]
      break;
 8004fe2:	e0b4      	b.n	800514e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fe4:	4b5d      	ldr	r3, [pc, #372]	; (800515c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fec:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004fee:	4b5b      	ldr	r3, [pc, #364]	; (800515c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d04d      	beq.n	8005096 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ffa:	4b58      	ldr	r3, [pc, #352]	; (800515c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	099b      	lsrs	r3, r3, #6
 8005000:	461a      	mov	r2, r3
 8005002:	f04f 0300 	mov.w	r3, #0
 8005006:	f240 10ff 	movw	r0, #511	; 0x1ff
 800500a:	f04f 0100 	mov.w	r1, #0
 800500e:	ea02 0800 	and.w	r8, r2, r0
 8005012:	ea03 0901 	and.w	r9, r3, r1
 8005016:	4640      	mov	r0, r8
 8005018:	4649      	mov	r1, r9
 800501a:	f04f 0200 	mov.w	r2, #0
 800501e:	f04f 0300 	mov.w	r3, #0
 8005022:	014b      	lsls	r3, r1, #5
 8005024:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005028:	0142      	lsls	r2, r0, #5
 800502a:	4610      	mov	r0, r2
 800502c:	4619      	mov	r1, r3
 800502e:	ebb0 0008 	subs.w	r0, r0, r8
 8005032:	eb61 0109 	sbc.w	r1, r1, r9
 8005036:	f04f 0200 	mov.w	r2, #0
 800503a:	f04f 0300 	mov.w	r3, #0
 800503e:	018b      	lsls	r3, r1, #6
 8005040:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005044:	0182      	lsls	r2, r0, #6
 8005046:	1a12      	subs	r2, r2, r0
 8005048:	eb63 0301 	sbc.w	r3, r3, r1
 800504c:	f04f 0000 	mov.w	r0, #0
 8005050:	f04f 0100 	mov.w	r1, #0
 8005054:	00d9      	lsls	r1, r3, #3
 8005056:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800505a:	00d0      	lsls	r0, r2, #3
 800505c:	4602      	mov	r2, r0
 800505e:	460b      	mov	r3, r1
 8005060:	eb12 0208 	adds.w	r2, r2, r8
 8005064:	eb43 0309 	adc.w	r3, r3, r9
 8005068:	f04f 0000 	mov.w	r0, #0
 800506c:	f04f 0100 	mov.w	r1, #0
 8005070:	0259      	lsls	r1, r3, #9
 8005072:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005076:	0250      	lsls	r0, r2, #9
 8005078:	4602      	mov	r2, r0
 800507a:	460b      	mov	r3, r1
 800507c:	4610      	mov	r0, r2
 800507e:	4619      	mov	r1, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	461a      	mov	r2, r3
 8005084:	f04f 0300 	mov.w	r3, #0
 8005088:	f7fb f942 	bl	8000310 <__aeabi_uldivmod>
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	4613      	mov	r3, r2
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	e04a      	b.n	800512c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005096:	4b31      	ldr	r3, [pc, #196]	; (800515c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	099b      	lsrs	r3, r3, #6
 800509c:	461a      	mov	r2, r3
 800509e:	f04f 0300 	mov.w	r3, #0
 80050a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80050a6:	f04f 0100 	mov.w	r1, #0
 80050aa:	ea02 0400 	and.w	r4, r2, r0
 80050ae:	ea03 0501 	and.w	r5, r3, r1
 80050b2:	4620      	mov	r0, r4
 80050b4:	4629      	mov	r1, r5
 80050b6:	f04f 0200 	mov.w	r2, #0
 80050ba:	f04f 0300 	mov.w	r3, #0
 80050be:	014b      	lsls	r3, r1, #5
 80050c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80050c4:	0142      	lsls	r2, r0, #5
 80050c6:	4610      	mov	r0, r2
 80050c8:	4619      	mov	r1, r3
 80050ca:	1b00      	subs	r0, r0, r4
 80050cc:	eb61 0105 	sbc.w	r1, r1, r5
 80050d0:	f04f 0200 	mov.w	r2, #0
 80050d4:	f04f 0300 	mov.w	r3, #0
 80050d8:	018b      	lsls	r3, r1, #6
 80050da:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80050de:	0182      	lsls	r2, r0, #6
 80050e0:	1a12      	subs	r2, r2, r0
 80050e2:	eb63 0301 	sbc.w	r3, r3, r1
 80050e6:	f04f 0000 	mov.w	r0, #0
 80050ea:	f04f 0100 	mov.w	r1, #0
 80050ee:	00d9      	lsls	r1, r3, #3
 80050f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050f4:	00d0      	lsls	r0, r2, #3
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	1912      	adds	r2, r2, r4
 80050fc:	eb45 0303 	adc.w	r3, r5, r3
 8005100:	f04f 0000 	mov.w	r0, #0
 8005104:	f04f 0100 	mov.w	r1, #0
 8005108:	0299      	lsls	r1, r3, #10
 800510a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800510e:	0290      	lsls	r0, r2, #10
 8005110:	4602      	mov	r2, r0
 8005112:	460b      	mov	r3, r1
 8005114:	4610      	mov	r0, r2
 8005116:	4619      	mov	r1, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	461a      	mov	r2, r3
 800511c:	f04f 0300 	mov.w	r3, #0
 8005120:	f7fb f8f6 	bl	8000310 <__aeabi_uldivmod>
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	4613      	mov	r3, r2
 800512a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800512c:	4b0b      	ldr	r3, [pc, #44]	; (800515c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	0c1b      	lsrs	r3, r3, #16
 8005132:	f003 0303 	and.w	r3, r3, #3
 8005136:	3301      	adds	r3, #1
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	fbb2 f3f3 	udiv	r3, r2, r3
 8005144:	60bb      	str	r3, [r7, #8]
      break;
 8005146:	e002      	b.n	800514e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005148:	4b05      	ldr	r3, [pc, #20]	; (8005160 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800514a:	60bb      	str	r3, [r7, #8]
      break;
 800514c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800514e:	68bb      	ldr	r3, [r7, #8]
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800515a:	bf00      	nop
 800515c:	40023800 	.word	0x40023800
 8005160:	00f42400 	.word	0x00f42400
 8005164:	007a1200 	.word	0x007a1200

08005168 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800516c:	4b03      	ldr	r3, [pc, #12]	; (800517c <HAL_RCC_GetHCLKFreq+0x14>)
 800516e:	681b      	ldr	r3, [r3, #0]
}
 8005170:	4618      	mov	r0, r3
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	20000700 	.word	0x20000700

08005180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005184:	f7ff fff0 	bl	8005168 <HAL_RCC_GetHCLKFreq>
 8005188:	4602      	mov	r2, r0
 800518a:	4b05      	ldr	r3, [pc, #20]	; (80051a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	0a9b      	lsrs	r3, r3, #10
 8005190:	f003 0307 	and.w	r3, r3, #7
 8005194:	4903      	ldr	r1, [pc, #12]	; (80051a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005196:	5ccb      	ldrb	r3, [r1, r3]
 8005198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800519c:	4618      	mov	r0, r3
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	40023800 	.word	0x40023800
 80051a4:	0801d1b4 	.word	0x0801d1b4

080051a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051ac:	f7ff ffdc 	bl	8005168 <HAL_RCC_GetHCLKFreq>
 80051b0:	4602      	mov	r2, r0
 80051b2:	4b05      	ldr	r3, [pc, #20]	; (80051c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	0b5b      	lsrs	r3, r3, #13
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	4903      	ldr	r1, [pc, #12]	; (80051cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80051be:	5ccb      	ldrb	r3, [r1, r3]
 80051c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	40023800 	.word	0x40023800
 80051cc:	0801d1b4 	.word	0x0801d1b4

080051d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	220f      	movs	r2, #15
 80051de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80051e0:	4b12      	ldr	r3, [pc, #72]	; (800522c <HAL_RCC_GetClockConfig+0x5c>)
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f003 0203 	and.w	r2, r3, #3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80051ec:	4b0f      	ldr	r3, [pc, #60]	; (800522c <HAL_RCC_GetClockConfig+0x5c>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80051f8:	4b0c      	ldr	r3, [pc, #48]	; (800522c <HAL_RCC_GetClockConfig+0x5c>)
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005204:	4b09      	ldr	r3, [pc, #36]	; (800522c <HAL_RCC_GetClockConfig+0x5c>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	08db      	lsrs	r3, r3, #3
 800520a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005212:	4b07      	ldr	r3, [pc, #28]	; (8005230 <HAL_RCC_GetClockConfig+0x60>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 020f 	and.w	r2, r3, #15
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	601a      	str	r2, [r3, #0]
}
 800521e:	bf00      	nop
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	40023800 	.word	0x40023800
 8005230:	40023c00 	.word	0x40023c00

08005234 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b088      	sub	sp, #32
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800523c:	2300      	movs	r3, #0
 800523e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005240:	2300      	movs	r3, #0
 8005242:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005244:	2300      	movs	r3, #0
 8005246:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005248:	2300      	movs	r3, #0
 800524a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800524c:	2300      	movs	r3, #0
 800524e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b00      	cmp	r3, #0
 800525a:	d012      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800525c:	4b69      	ldr	r3, [pc, #420]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	4a68      	ldr	r2, [pc, #416]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005262:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005266:	6093      	str	r3, [r2, #8]
 8005268:	4b66      	ldr	r3, [pc, #408]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005270:	4964      	ldr	r1, [pc, #400]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005272:	4313      	orrs	r3, r2
 8005274:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800527e:	2301      	movs	r3, #1
 8005280:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d017      	beq.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800528e:	4b5d      	ldr	r3, [pc, #372]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005294:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529c:	4959      	ldr	r1, [pc, #356]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052ac:	d101      	bne.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80052ae:	2301      	movs	r3, #1
 80052b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80052ba:	2301      	movs	r3, #1
 80052bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d017      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80052ca:	4b4e      	ldr	r3, [pc, #312]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d8:	494a      	ldr	r1, [pc, #296]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052e8:	d101      	bne.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80052ea:	2301      	movs	r3, #1
 80052ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80052f6:	2301      	movs	r3, #1
 80052f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005306:	2301      	movs	r3, #1
 8005308:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0320 	and.w	r3, r3, #32
 8005312:	2b00      	cmp	r3, #0
 8005314:	f000 808b 	beq.w	800542e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005318:	4b3a      	ldr	r3, [pc, #232]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800531a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531c:	4a39      	ldr	r2, [pc, #228]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800531e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005322:	6413      	str	r3, [r2, #64]	; 0x40
 8005324:	4b37      	ldr	r3, [pc, #220]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800532c:	60bb      	str	r3, [r7, #8]
 800532e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005330:	4b35      	ldr	r3, [pc, #212]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a34      	ldr	r2, [pc, #208]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800533a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800533c:	f7fd fc94 	bl	8002c68 <HAL_GetTick>
 8005340:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005342:	e008      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005344:	f7fd fc90 	bl	8002c68 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b64      	cmp	r3, #100	; 0x64
 8005350:	d901      	bls.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e38f      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005356:	4b2c      	ldr	r3, [pc, #176]	; (8005408 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0f0      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005362:	4b28      	ldr	r3, [pc, #160]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800536a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d035      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	429a      	cmp	r2, r3
 800537e:	d02e      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005380:	4b20      	ldr	r3, [pc, #128]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005384:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005388:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800538a:	4b1e      	ldr	r3, [pc, #120]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800538c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538e:	4a1d      	ldr	r2, [pc, #116]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005394:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005396:	4b1b      	ldr	r3, [pc, #108]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539a:	4a1a      	ldr	r2, [pc, #104]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800539c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80053a2:	4a18      	ldr	r2, [pc, #96]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80053a8:	4b16      	ldr	r3, [pc, #88]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d114      	bne.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b4:	f7fd fc58 	bl	8002c68 <HAL_GetTick>
 80053b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ba:	e00a      	b.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053bc:	f7fd fc54 	bl	8002c68 <HAL_GetTick>
 80053c0:	4602      	mov	r2, r0
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e351      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053d2:	4b0c      	ldr	r3, [pc, #48]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d0ee      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053ea:	d111      	bne.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80053ec:	4b05      	ldr	r3, [pc, #20]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80053f8:	4b04      	ldr	r3, [pc, #16]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80053fa:	400b      	ands	r3, r1
 80053fc:	4901      	ldr	r1, [pc, #4]	; (8005404 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	608b      	str	r3, [r1, #8]
 8005402:	e00b      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005404:	40023800 	.word	0x40023800
 8005408:	40007000 	.word	0x40007000
 800540c:	0ffffcff 	.word	0x0ffffcff
 8005410:	4bb3      	ldr	r3, [pc, #716]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	4ab2      	ldr	r2, [pc, #712]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005416:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800541a:	6093      	str	r3, [r2, #8]
 800541c:	4bb0      	ldr	r3, [pc, #704]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800541e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005428:	49ad      	ldr	r1, [pc, #692]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800542a:	4313      	orrs	r3, r2
 800542c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0310 	and.w	r3, r3, #16
 8005436:	2b00      	cmp	r3, #0
 8005438:	d010      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800543a:	4ba9      	ldr	r3, [pc, #676]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800543c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005440:	4aa7      	ldr	r2, [pc, #668]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005442:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005446:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800544a:	4ba5      	ldr	r3, [pc, #660]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800544c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005454:	49a2      	ldr	r1, [pc, #648]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005456:	4313      	orrs	r3, r2
 8005458:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00a      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005468:	4b9d      	ldr	r3, [pc, #628]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800546a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800546e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005476:	499a      	ldr	r1, [pc, #616]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005478:	4313      	orrs	r3, r2
 800547a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00a      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800548a:	4b95      	ldr	r3, [pc, #596]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800548c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005490:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005498:	4991      	ldr	r1, [pc, #580]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800549a:	4313      	orrs	r3, r2
 800549c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00a      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80054ac:	4b8c      	ldr	r3, [pc, #560]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ba:	4989      	ldr	r1, [pc, #548]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054ce:	4b84      	ldr	r3, [pc, #528]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054dc:	4980      	ldr	r1, [pc, #512]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00a      	beq.n	8005506 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054f0:	4b7b      	ldr	r3, [pc, #492]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f6:	f023 0203 	bic.w	r2, r3, #3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fe:	4978      	ldr	r1, [pc, #480]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005500:	4313      	orrs	r3, r2
 8005502:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005512:	4b73      	ldr	r3, [pc, #460]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005518:	f023 020c 	bic.w	r2, r3, #12
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005520:	496f      	ldr	r1, [pc, #444]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005522:	4313      	orrs	r3, r2
 8005524:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00a      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005534:	4b6a      	ldr	r3, [pc, #424]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800553a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005542:	4967      	ldr	r1, [pc, #412]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005544:	4313      	orrs	r3, r2
 8005546:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005556:	4b62      	ldr	r3, [pc, #392]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800555c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005564:	495e      	ldr	r1, [pc, #376]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005566:	4313      	orrs	r3, r2
 8005568:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00a      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005578:	4b59      	ldr	r3, [pc, #356]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800557a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005586:	4956      	ldr	r1, [pc, #344]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005588:	4313      	orrs	r3, r2
 800558a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00a      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800559a:	4b51      	ldr	r3, [pc, #324]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800559c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a8:	494d      	ldr	r1, [pc, #308]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00a      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80055bc:	4b48      	ldr	r3, [pc, #288]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ca:	4945      	ldr	r1, [pc, #276]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055cc:	4313      	orrs	r3, r2
 80055ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d00a      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80055de:	4b40      	ldr	r3, [pc, #256]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ec:	493c      	ldr	r1, [pc, #240]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00a      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005600:	4b37      	ldr	r3, [pc, #220]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005602:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005606:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800560e:	4934      	ldr	r1, [pc, #208]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005610:	4313      	orrs	r3, r2
 8005612:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d011      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005622:	4b2f      	ldr	r3, [pc, #188]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005628:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005630:	492b      	ldr	r1, [pc, #172]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005632:	4313      	orrs	r3, r2
 8005634:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800563c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005640:	d101      	bne.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005642:	2301      	movs	r3, #1
 8005644:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 0308 	and.w	r3, r3, #8
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005652:	2301      	movs	r3, #1
 8005654:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00a      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005662:	4b1f      	ldr	r3, [pc, #124]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005668:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005670:	491b      	ldr	r1, [pc, #108]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005672:	4313      	orrs	r3, r2
 8005674:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00b      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005684:	4b16      	ldr	r3, [pc, #88]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005694:	4912      	ldr	r1, [pc, #72]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005696:	4313      	orrs	r3, r2
 8005698:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00b      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80056a8:	4b0d      	ldr	r3, [pc, #52]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056b8:	4909      	ldr	r1, [pc, #36]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00f      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80056cc:	4b04      	ldr	r3, [pc, #16]	; (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056dc:	e002      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80056de:	bf00      	nop
 80056e0:	40023800 	.word	0x40023800
 80056e4:	4986      	ldr	r1, [pc, #536]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00b      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80056f8:	4b81      	ldr	r3, [pc, #516]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056fe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005708:	497d      	ldr	r1, [pc, #500]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800570a:	4313      	orrs	r3, r2
 800570c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d006      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800571e:	2b00      	cmp	r3, #0
 8005720:	f000 80d6 	beq.w	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005724:	4b76      	ldr	r3, [pc, #472]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a75      	ldr	r2, [pc, #468]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800572a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800572e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005730:	f7fd fa9a 	bl	8002c68 <HAL_GetTick>
 8005734:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005736:	e008      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005738:	f7fd fa96 	bl	8002c68 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b64      	cmp	r3, #100	; 0x64
 8005744:	d901      	bls.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e195      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800574a:	4b6d      	ldr	r3, [pc, #436]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1f0      	bne.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	d021      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005766:	2b00      	cmp	r3, #0
 8005768:	d11d      	bne.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800576a:	4b65      	ldr	r3, [pc, #404]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800576c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005770:	0c1b      	lsrs	r3, r3, #16
 8005772:	f003 0303 	and.w	r3, r3, #3
 8005776:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005778:	4b61      	ldr	r3, [pc, #388]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800577a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800577e:	0e1b      	lsrs	r3, r3, #24
 8005780:	f003 030f 	and.w	r3, r3, #15
 8005784:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	019a      	lsls	r2, r3, #6
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	041b      	lsls	r3, r3, #16
 8005790:	431a      	orrs	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	061b      	lsls	r3, r3, #24
 8005796:	431a      	orrs	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	071b      	lsls	r3, r3, #28
 800579e:	4958      	ldr	r1, [pc, #352]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d004      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ba:	d00a      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d02e      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057d0:	d129      	bne.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80057d2:	4b4b      	ldr	r3, [pc, #300]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057d8:	0c1b      	lsrs	r3, r3, #16
 80057da:	f003 0303 	and.w	r3, r3, #3
 80057de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80057e0:	4b47      	ldr	r3, [pc, #284]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057e6:	0f1b      	lsrs	r3, r3, #28
 80057e8:	f003 0307 	and.w	r3, r3, #7
 80057ec:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	019a      	lsls	r2, r3, #6
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	041b      	lsls	r3, r3, #16
 80057f8:	431a      	orrs	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	061b      	lsls	r3, r3, #24
 8005800:	431a      	orrs	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	071b      	lsls	r3, r3, #28
 8005806:	493e      	ldr	r1, [pc, #248]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005808:	4313      	orrs	r3, r2
 800580a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800580e:	4b3c      	ldr	r3, [pc, #240]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005814:	f023 021f 	bic.w	r2, r3, #31
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581c:	3b01      	subs	r3, #1
 800581e:	4938      	ldr	r1, [pc, #224]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005820:	4313      	orrs	r3, r2
 8005822:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d01d      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005832:	4b33      	ldr	r3, [pc, #204]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005838:	0e1b      	lsrs	r3, r3, #24
 800583a:	f003 030f 	and.w	r3, r3, #15
 800583e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005840:	4b2f      	ldr	r3, [pc, #188]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005846:	0f1b      	lsrs	r3, r3, #28
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	019a      	lsls	r2, r3, #6
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	041b      	lsls	r3, r3, #16
 800585a:	431a      	orrs	r2, r3
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	061b      	lsls	r3, r3, #24
 8005860:	431a      	orrs	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	071b      	lsls	r3, r3, #28
 8005866:	4926      	ldr	r1, [pc, #152]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005868:	4313      	orrs	r3, r2
 800586a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d011      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	019a      	lsls	r2, r3, #6
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	041b      	lsls	r3, r3, #16
 8005886:	431a      	orrs	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	061b      	lsls	r3, r3, #24
 800588e:	431a      	orrs	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	071b      	lsls	r3, r3, #28
 8005896:	491a      	ldr	r1, [pc, #104]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005898:	4313      	orrs	r3, r2
 800589a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800589e:	4b18      	ldr	r3, [pc, #96]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a17      	ldr	r2, [pc, #92]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058aa:	f7fd f9dd 	bl	8002c68 <HAL_GetTick>
 80058ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058b0:	e008      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80058b2:	f7fd f9d9 	bl	8002c68 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b64      	cmp	r3, #100	; 0x64
 80058be:	d901      	bls.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e0d8      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058c4:	4b0e      	ldr	r3, [pc, #56]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d0f0      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	f040 80ce 	bne.w	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80058d8:	4b09      	ldr	r3, [pc, #36]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a08      	ldr	r2, [pc, #32]	; (8005900 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058e4:	f7fd f9c0 	bl	8002c68 <HAL_GetTick>
 80058e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80058ea:	e00b      	b.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80058ec:	f7fd f9bc 	bl	8002c68 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	2b64      	cmp	r3, #100	; 0x64
 80058f8:	d904      	bls.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e0bb      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80058fe:	bf00      	nop
 8005900:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005904:	4b5e      	ldr	r3, [pc, #376]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800590c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005910:	d0ec      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005922:	2b00      	cmp	r3, #0
 8005924:	d009      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800592e:	2b00      	cmp	r3, #0
 8005930:	d02e      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005936:	2b00      	cmp	r3, #0
 8005938:	d12a      	bne.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800593a:	4b51      	ldr	r3, [pc, #324]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800593c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005940:	0c1b      	lsrs	r3, r3, #16
 8005942:	f003 0303 	and.w	r3, r3, #3
 8005946:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005948:	4b4d      	ldr	r3, [pc, #308]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800594a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594e:	0f1b      	lsrs	r3, r3, #28
 8005950:	f003 0307 	and.w	r3, r3, #7
 8005954:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	019a      	lsls	r2, r3, #6
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	041b      	lsls	r3, r3, #16
 8005960:	431a      	orrs	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	061b      	lsls	r3, r3, #24
 8005968:	431a      	orrs	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	071b      	lsls	r3, r3, #28
 800596e:	4944      	ldr	r1, [pc, #272]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005970:	4313      	orrs	r3, r2
 8005972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005976:	4b42      	ldr	r3, [pc, #264]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800597c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005984:	3b01      	subs	r3, #1
 8005986:	021b      	lsls	r3, r3, #8
 8005988:	493d      	ldr	r1, [pc, #244]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800598a:	4313      	orrs	r3, r2
 800598c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d022      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059a4:	d11d      	bne.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80059a6:	4b36      	ldr	r3, [pc, #216]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ac:	0e1b      	lsrs	r3, r3, #24
 80059ae:	f003 030f 	and.w	r3, r3, #15
 80059b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80059b4:	4b32      	ldr	r3, [pc, #200]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ba:	0f1b      	lsrs	r3, r3, #28
 80059bc:	f003 0307 	and.w	r3, r3, #7
 80059c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	019a      	lsls	r2, r3, #6
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	041b      	lsls	r3, r3, #16
 80059ce:	431a      	orrs	r2, r3
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	061b      	lsls	r3, r3, #24
 80059d4:	431a      	orrs	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	071b      	lsls	r3, r3, #28
 80059da:	4929      	ldr	r1, [pc, #164]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0308 	and.w	r3, r3, #8
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d028      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80059ee:	4b24      	ldr	r3, [pc, #144]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f4:	0e1b      	lsrs	r3, r3, #24
 80059f6:	f003 030f 	and.w	r3, r3, #15
 80059fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80059fc:	4b20      	ldr	r3, [pc, #128]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a02:	0c1b      	lsrs	r3, r3, #16
 8005a04:	f003 0303 	and.w	r3, r3, #3
 8005a08:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	019a      	lsls	r2, r3, #6
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	041b      	lsls	r3, r3, #16
 8005a14:	431a      	orrs	r2, r3
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	061b      	lsls	r3, r3, #24
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	69db      	ldr	r3, [r3, #28]
 8005a20:	071b      	lsls	r3, r3, #28
 8005a22:	4917      	ldr	r1, [pc, #92]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005a2a:	4b15      	ldr	r3, [pc, #84]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a38:	4911      	ldr	r1, [pc, #68]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005a40:	4b0f      	ldr	r3, [pc, #60]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a0e      	ldr	r2, [pc, #56]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a4c:	f7fd f90c 	bl	8002c68 <HAL_GetTick>
 8005a50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a52:	e008      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a54:	f7fd f908 	bl	8002c68 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	2b64      	cmp	r3, #100	; 0x64
 8005a60:	d901      	bls.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e007      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a66:	4b06      	ldr	r3, [pc, #24]	; (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a72:	d1ef      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3720      	adds	r7, #32
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	40023800 	.word	0x40023800

08005a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e049      	b.n	8005b2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d106      	bne.n	8005ab0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 f841 	bl	8005b32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3304      	adds	r3, #4
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	4610      	mov	r0, r2
 8005ac4:	f000 fa00 	bl	8005ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005b3a:	bf00      	nop
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
	...

08005b48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d001      	beq.n	8005b60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e054      	b.n	8005c0a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2202      	movs	r2, #2
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68da      	ldr	r2, [r3, #12]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f042 0201 	orr.w	r2, r2, #1
 8005b76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a26      	ldr	r2, [pc, #152]	; (8005c18 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d022      	beq.n	8005bc8 <HAL_TIM_Base_Start_IT+0x80>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b8a:	d01d      	beq.n	8005bc8 <HAL_TIM_Base_Start_IT+0x80>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a22      	ldr	r2, [pc, #136]	; (8005c1c <HAL_TIM_Base_Start_IT+0xd4>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d018      	beq.n	8005bc8 <HAL_TIM_Base_Start_IT+0x80>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a21      	ldr	r2, [pc, #132]	; (8005c20 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d013      	beq.n	8005bc8 <HAL_TIM_Base_Start_IT+0x80>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a1f      	ldr	r2, [pc, #124]	; (8005c24 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d00e      	beq.n	8005bc8 <HAL_TIM_Base_Start_IT+0x80>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a1e      	ldr	r2, [pc, #120]	; (8005c28 <HAL_TIM_Base_Start_IT+0xe0>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d009      	beq.n	8005bc8 <HAL_TIM_Base_Start_IT+0x80>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a1c      	ldr	r2, [pc, #112]	; (8005c2c <HAL_TIM_Base_Start_IT+0xe4>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d004      	beq.n	8005bc8 <HAL_TIM_Base_Start_IT+0x80>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a1b      	ldr	r2, [pc, #108]	; (8005c30 <HAL_TIM_Base_Start_IT+0xe8>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d115      	bne.n	8005bf4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689a      	ldr	r2, [r3, #8]
 8005bce:	4b19      	ldr	r3, [pc, #100]	; (8005c34 <HAL_TIM_Base_Start_IT+0xec>)
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2b06      	cmp	r3, #6
 8005bd8:	d015      	beq.n	8005c06 <HAL_TIM_Base_Start_IT+0xbe>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005be0:	d011      	beq.n	8005c06 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f042 0201 	orr.w	r2, r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bf2:	e008      	b.n	8005c06 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f042 0201 	orr.w	r2, r2, #1
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	e000      	b.n	8005c08 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	40010000 	.word	0x40010000
 8005c1c:	40000400 	.word	0x40000400
 8005c20:	40000800 	.word	0x40000800
 8005c24:	40000c00 	.word	0x40000c00
 8005c28:	40010400 	.word	0x40010400
 8005c2c:	40014000 	.word	0x40014000
 8005c30:	40001800 	.word	0x40001800
 8005c34:	00010007 	.word	0x00010007

08005c38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d122      	bne.n	8005c94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	f003 0302 	and.w	r3, r3, #2
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d11b      	bne.n	8005c94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f06f 0202 	mvn.w	r2, #2
 8005c64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	f003 0303 	and.w	r3, r3, #3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d003      	beq.n	8005c82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f905 	bl	8005e8a <HAL_TIM_IC_CaptureCallback>
 8005c80:	e005      	b.n	8005c8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f8f7 	bl	8005e76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f908 	bl	8005e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	f003 0304 	and.w	r3, r3, #4
 8005c9e:	2b04      	cmp	r3, #4
 8005ca0:	d122      	bne.n	8005ce8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b04      	cmp	r3, #4
 8005cae:	d11b      	bne.n	8005ce8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f06f 0204 	mvn.w	r2, #4
 8005cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2202      	movs	r2, #2
 8005cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d003      	beq.n	8005cd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 f8db 	bl	8005e8a <HAL_TIM_IC_CaptureCallback>
 8005cd4:	e005      	b.n	8005ce2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 f8cd 	bl	8005e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 f8de 	bl	8005e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	f003 0308 	and.w	r3, r3, #8
 8005cf2:	2b08      	cmp	r3, #8
 8005cf4:	d122      	bne.n	8005d3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f003 0308 	and.w	r3, r3, #8
 8005d00:	2b08      	cmp	r3, #8
 8005d02:	d11b      	bne.n	8005d3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f06f 0208 	mvn.w	r2, #8
 8005d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2204      	movs	r2, #4
 8005d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	f003 0303 	and.w	r3, r3, #3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d003      	beq.n	8005d2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 f8b1 	bl	8005e8a <HAL_TIM_IC_CaptureCallback>
 8005d28:	e005      	b.n	8005d36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 f8a3 	bl	8005e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f8b4 	bl	8005e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	f003 0310 	and.w	r3, r3, #16
 8005d46:	2b10      	cmp	r3, #16
 8005d48:	d122      	bne.n	8005d90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	f003 0310 	and.w	r3, r3, #16
 8005d54:	2b10      	cmp	r3, #16
 8005d56:	d11b      	bne.n	8005d90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f06f 0210 	mvn.w	r2, #16
 8005d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2208      	movs	r2, #8
 8005d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	69db      	ldr	r3, [r3, #28]
 8005d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f887 	bl	8005e8a <HAL_TIM_IC_CaptureCallback>
 8005d7c:	e005      	b.n	8005d8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f879 	bl	8005e76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 f88a 	bl	8005e9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d10e      	bne.n	8005dbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d107      	bne.n	8005dbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f06f 0201 	mvn.w	r2, #1
 8005db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7fb fe90 	bl	8001adc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc6:	2b80      	cmp	r3, #128	; 0x80
 8005dc8:	d10e      	bne.n	8005de8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd4:	2b80      	cmp	r3, #128	; 0x80
 8005dd6:	d107      	bne.n	8005de8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f91a 	bl	800601c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005df6:	d10e      	bne.n	8005e16 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e02:	2b80      	cmp	r3, #128	; 0x80
 8005e04:	d107      	bne.n	8005e16 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 f90d 	bl	8006030 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e20:	2b40      	cmp	r3, #64	; 0x40
 8005e22:	d10e      	bne.n	8005e42 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2e:	2b40      	cmp	r3, #64	; 0x40
 8005e30:	d107      	bne.n	8005e42 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f838 	bl	8005eb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	f003 0320 	and.w	r3, r3, #32
 8005e4c:	2b20      	cmp	r3, #32
 8005e4e:	d10e      	bne.n	8005e6e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	f003 0320 	and.w	r3, r3, #32
 8005e5a:	2b20      	cmp	r3, #32
 8005e5c:	d107      	bne.n	8005e6e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f06f 0220 	mvn.w	r2, #32
 8005e66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 f8cd 	bl	8006008 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e6e:	bf00      	nop
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b083      	sub	sp, #12
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e7e:	bf00      	nop
 8005e80:	370c      	adds	r7, #12
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b083      	sub	sp, #12
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e92:	bf00      	nop
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b083      	sub	sp, #12
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ea6:	bf00      	nop
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005eba:	bf00      	nop
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
	...

08005ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
 8005ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a40      	ldr	r2, [pc, #256]	; (8005fdc <TIM_Base_SetConfig+0x114>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d013      	beq.n	8005f08 <TIM_Base_SetConfig+0x40>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee6:	d00f      	beq.n	8005f08 <TIM_Base_SetConfig+0x40>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a3d      	ldr	r2, [pc, #244]	; (8005fe0 <TIM_Base_SetConfig+0x118>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d00b      	beq.n	8005f08 <TIM_Base_SetConfig+0x40>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a3c      	ldr	r2, [pc, #240]	; (8005fe4 <TIM_Base_SetConfig+0x11c>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d007      	beq.n	8005f08 <TIM_Base_SetConfig+0x40>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a3b      	ldr	r2, [pc, #236]	; (8005fe8 <TIM_Base_SetConfig+0x120>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d003      	beq.n	8005f08 <TIM_Base_SetConfig+0x40>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a3a      	ldr	r2, [pc, #232]	; (8005fec <TIM_Base_SetConfig+0x124>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d108      	bne.n	8005f1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a2f      	ldr	r2, [pc, #188]	; (8005fdc <TIM_Base_SetConfig+0x114>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d02b      	beq.n	8005f7a <TIM_Base_SetConfig+0xb2>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f28:	d027      	beq.n	8005f7a <TIM_Base_SetConfig+0xb2>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a2c      	ldr	r2, [pc, #176]	; (8005fe0 <TIM_Base_SetConfig+0x118>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d023      	beq.n	8005f7a <TIM_Base_SetConfig+0xb2>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a2b      	ldr	r2, [pc, #172]	; (8005fe4 <TIM_Base_SetConfig+0x11c>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d01f      	beq.n	8005f7a <TIM_Base_SetConfig+0xb2>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a2a      	ldr	r2, [pc, #168]	; (8005fe8 <TIM_Base_SetConfig+0x120>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d01b      	beq.n	8005f7a <TIM_Base_SetConfig+0xb2>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a29      	ldr	r2, [pc, #164]	; (8005fec <TIM_Base_SetConfig+0x124>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d017      	beq.n	8005f7a <TIM_Base_SetConfig+0xb2>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a28      	ldr	r2, [pc, #160]	; (8005ff0 <TIM_Base_SetConfig+0x128>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d013      	beq.n	8005f7a <TIM_Base_SetConfig+0xb2>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a27      	ldr	r2, [pc, #156]	; (8005ff4 <TIM_Base_SetConfig+0x12c>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d00f      	beq.n	8005f7a <TIM_Base_SetConfig+0xb2>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a26      	ldr	r2, [pc, #152]	; (8005ff8 <TIM_Base_SetConfig+0x130>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d00b      	beq.n	8005f7a <TIM_Base_SetConfig+0xb2>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a25      	ldr	r2, [pc, #148]	; (8005ffc <TIM_Base_SetConfig+0x134>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d007      	beq.n	8005f7a <TIM_Base_SetConfig+0xb2>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a24      	ldr	r2, [pc, #144]	; (8006000 <TIM_Base_SetConfig+0x138>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d003      	beq.n	8005f7a <TIM_Base_SetConfig+0xb2>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a23      	ldr	r2, [pc, #140]	; (8006004 <TIM_Base_SetConfig+0x13c>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d108      	bne.n	8005f8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a0a      	ldr	r2, [pc, #40]	; (8005fdc <TIM_Base_SetConfig+0x114>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d003      	beq.n	8005fc0 <TIM_Base_SetConfig+0xf8>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a0c      	ldr	r2, [pc, #48]	; (8005fec <TIM_Base_SetConfig+0x124>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d103      	bne.n	8005fc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	691a      	ldr	r2, [r3, #16]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	615a      	str	r2, [r3, #20]
}
 8005fce:	bf00      	nop
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	40010000 	.word	0x40010000
 8005fe0:	40000400 	.word	0x40000400
 8005fe4:	40000800 	.word	0x40000800
 8005fe8:	40000c00 	.word	0x40000c00
 8005fec:	40010400 	.word	0x40010400
 8005ff0:	40014000 	.word	0x40014000
 8005ff4:	40014400 	.word	0x40014400
 8005ff8:	40014800 	.word	0x40014800
 8005ffc:	40001800 	.word	0x40001800
 8006000:	40001c00 	.word	0x40001c00
 8006004:	40002000 	.word	0x40002000

08006008 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006024:	bf00      	nop
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d101      	bne.n	8006056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e040      	b.n	80060d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800605a:	2b00      	cmp	r3, #0
 800605c:	d106      	bne.n	800606c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7fb fd78 	bl	8001b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2224      	movs	r2, #36	; 0x24
 8006070:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f022 0201 	bic.w	r2, r2, #1
 8006080:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f8c0 	bl	8006208 <UART_SetConfig>
 8006088:	4603      	mov	r3, r0
 800608a:	2b01      	cmp	r3, #1
 800608c:	d101      	bne.n	8006092 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e022      	b.n	80060d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	2b00      	cmp	r3, #0
 8006098:	d002      	beq.n	80060a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 fb16 	bl	80066cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	689a      	ldr	r2, [r3, #8]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f042 0201 	orr.w	r2, r2, #1
 80060ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 fb9d 	bl	8006810 <UART_CheckIdleState>
 80060d6:	4603      	mov	r3, r0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b08a      	sub	sp, #40	; 0x28
 80060e4:	af02      	add	r7, sp, #8
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	603b      	str	r3, [r7, #0]
 80060ec:	4613      	mov	r3, r2
 80060ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060f4:	2b20      	cmp	r3, #32
 80060f6:	f040 8081 	bne.w	80061fc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d002      	beq.n	8006106 <HAL_UART_Transmit+0x26>
 8006100:	88fb      	ldrh	r3, [r7, #6]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e079      	b.n	80061fe <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006110:	2b01      	cmp	r3, #1
 8006112:	d101      	bne.n	8006118 <HAL_UART_Transmit+0x38>
 8006114:	2302      	movs	r3, #2
 8006116:	e072      	b.n	80061fe <HAL_UART_Transmit+0x11e>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2221      	movs	r2, #33	; 0x21
 800612c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800612e:	f7fc fd9b 	bl	8002c68 <HAL_GetTick>
 8006132:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	88fa      	ldrh	r2, [r7, #6]
 8006138:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	88fa      	ldrh	r2, [r7, #6]
 8006140:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800614c:	d108      	bne.n	8006160 <HAL_UART_Transmit+0x80>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d104      	bne.n	8006160 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006156:	2300      	movs	r3, #0
 8006158:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	61bb      	str	r3, [r7, #24]
 800615e:	e003      	b.n	8006168 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006164:	2300      	movs	r3, #0
 8006166:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006170:	e02c      	b.n	80061cc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	2200      	movs	r2, #0
 800617a:	2180      	movs	r1, #128	; 0x80
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f000 fb90 	bl	80068a2 <UART_WaitOnFlagUntilTimeout>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d001      	beq.n	800618c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e038      	b.n	80061fe <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10b      	bne.n	80061aa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	461a      	mov	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	3302      	adds	r3, #2
 80061a6:	61bb      	str	r3, [r7, #24]
 80061a8:	e007      	b.n	80061ba <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	781a      	ldrb	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	3301      	adds	r3, #1
 80061b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	3b01      	subs	r3, #1
 80061c4:	b29a      	uxth	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1cc      	bne.n	8006172 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	9300      	str	r3, [sp, #0]
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	2200      	movs	r2, #0
 80061e0:	2140      	movs	r1, #64	; 0x40
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 fb5d 	bl	80068a2 <UART_WaitOnFlagUntilTimeout>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d001      	beq.n	80061f2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e005      	b.n	80061fe <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2220      	movs	r2, #32
 80061f6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80061f8:	2300      	movs	r3, #0
 80061fa:	e000      	b.n	80061fe <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80061fc:	2302      	movs	r3, #2
  }
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3720      	adds	r7, #32
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
	...

08006208 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b088      	sub	sp, #32
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006210:	2300      	movs	r3, #0
 8006212:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	689a      	ldr	r2, [r3, #8]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	431a      	orrs	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	431a      	orrs	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	4313      	orrs	r3, r2
 800622a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	4ba7      	ldr	r3, [pc, #668]	; (80064d0 <UART_SetConfig+0x2c8>)
 8006234:	4013      	ands	r3, r2
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	6812      	ldr	r2, [r2, #0]
 800623a:	6979      	ldr	r1, [r7, #20]
 800623c:	430b      	orrs	r3, r1
 800623e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68da      	ldr	r2, [r3, #12]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a1b      	ldr	r3, [r3, #32]
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	4313      	orrs	r3, r2
 8006264:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	430a      	orrs	r2, r1
 8006278:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a95      	ldr	r2, [pc, #596]	; (80064d4 <UART_SetConfig+0x2cc>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d120      	bne.n	80062c6 <UART_SetConfig+0xbe>
 8006284:	4b94      	ldr	r3, [pc, #592]	; (80064d8 <UART_SetConfig+0x2d0>)
 8006286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800628a:	f003 0303 	and.w	r3, r3, #3
 800628e:	2b03      	cmp	r3, #3
 8006290:	d816      	bhi.n	80062c0 <UART_SetConfig+0xb8>
 8006292:	a201      	add	r2, pc, #4	; (adr r2, 8006298 <UART_SetConfig+0x90>)
 8006294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006298:	080062a9 	.word	0x080062a9
 800629c:	080062b5 	.word	0x080062b5
 80062a0:	080062af 	.word	0x080062af
 80062a4:	080062bb 	.word	0x080062bb
 80062a8:	2301      	movs	r3, #1
 80062aa:	77fb      	strb	r3, [r7, #31]
 80062ac:	e14f      	b.n	800654e <UART_SetConfig+0x346>
 80062ae:	2302      	movs	r3, #2
 80062b0:	77fb      	strb	r3, [r7, #31]
 80062b2:	e14c      	b.n	800654e <UART_SetConfig+0x346>
 80062b4:	2304      	movs	r3, #4
 80062b6:	77fb      	strb	r3, [r7, #31]
 80062b8:	e149      	b.n	800654e <UART_SetConfig+0x346>
 80062ba:	2308      	movs	r3, #8
 80062bc:	77fb      	strb	r3, [r7, #31]
 80062be:	e146      	b.n	800654e <UART_SetConfig+0x346>
 80062c0:	2310      	movs	r3, #16
 80062c2:	77fb      	strb	r3, [r7, #31]
 80062c4:	e143      	b.n	800654e <UART_SetConfig+0x346>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a84      	ldr	r2, [pc, #528]	; (80064dc <UART_SetConfig+0x2d4>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d132      	bne.n	8006336 <UART_SetConfig+0x12e>
 80062d0:	4b81      	ldr	r3, [pc, #516]	; (80064d8 <UART_SetConfig+0x2d0>)
 80062d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d6:	f003 030c 	and.w	r3, r3, #12
 80062da:	2b0c      	cmp	r3, #12
 80062dc:	d828      	bhi.n	8006330 <UART_SetConfig+0x128>
 80062de:	a201      	add	r2, pc, #4	; (adr r2, 80062e4 <UART_SetConfig+0xdc>)
 80062e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e4:	08006319 	.word	0x08006319
 80062e8:	08006331 	.word	0x08006331
 80062ec:	08006331 	.word	0x08006331
 80062f0:	08006331 	.word	0x08006331
 80062f4:	08006325 	.word	0x08006325
 80062f8:	08006331 	.word	0x08006331
 80062fc:	08006331 	.word	0x08006331
 8006300:	08006331 	.word	0x08006331
 8006304:	0800631f 	.word	0x0800631f
 8006308:	08006331 	.word	0x08006331
 800630c:	08006331 	.word	0x08006331
 8006310:	08006331 	.word	0x08006331
 8006314:	0800632b 	.word	0x0800632b
 8006318:	2300      	movs	r3, #0
 800631a:	77fb      	strb	r3, [r7, #31]
 800631c:	e117      	b.n	800654e <UART_SetConfig+0x346>
 800631e:	2302      	movs	r3, #2
 8006320:	77fb      	strb	r3, [r7, #31]
 8006322:	e114      	b.n	800654e <UART_SetConfig+0x346>
 8006324:	2304      	movs	r3, #4
 8006326:	77fb      	strb	r3, [r7, #31]
 8006328:	e111      	b.n	800654e <UART_SetConfig+0x346>
 800632a:	2308      	movs	r3, #8
 800632c:	77fb      	strb	r3, [r7, #31]
 800632e:	e10e      	b.n	800654e <UART_SetConfig+0x346>
 8006330:	2310      	movs	r3, #16
 8006332:	77fb      	strb	r3, [r7, #31]
 8006334:	e10b      	b.n	800654e <UART_SetConfig+0x346>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a69      	ldr	r2, [pc, #420]	; (80064e0 <UART_SetConfig+0x2d8>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d120      	bne.n	8006382 <UART_SetConfig+0x17a>
 8006340:	4b65      	ldr	r3, [pc, #404]	; (80064d8 <UART_SetConfig+0x2d0>)
 8006342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006346:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800634a:	2b30      	cmp	r3, #48	; 0x30
 800634c:	d013      	beq.n	8006376 <UART_SetConfig+0x16e>
 800634e:	2b30      	cmp	r3, #48	; 0x30
 8006350:	d814      	bhi.n	800637c <UART_SetConfig+0x174>
 8006352:	2b20      	cmp	r3, #32
 8006354:	d009      	beq.n	800636a <UART_SetConfig+0x162>
 8006356:	2b20      	cmp	r3, #32
 8006358:	d810      	bhi.n	800637c <UART_SetConfig+0x174>
 800635a:	2b00      	cmp	r3, #0
 800635c:	d002      	beq.n	8006364 <UART_SetConfig+0x15c>
 800635e:	2b10      	cmp	r3, #16
 8006360:	d006      	beq.n	8006370 <UART_SetConfig+0x168>
 8006362:	e00b      	b.n	800637c <UART_SetConfig+0x174>
 8006364:	2300      	movs	r3, #0
 8006366:	77fb      	strb	r3, [r7, #31]
 8006368:	e0f1      	b.n	800654e <UART_SetConfig+0x346>
 800636a:	2302      	movs	r3, #2
 800636c:	77fb      	strb	r3, [r7, #31]
 800636e:	e0ee      	b.n	800654e <UART_SetConfig+0x346>
 8006370:	2304      	movs	r3, #4
 8006372:	77fb      	strb	r3, [r7, #31]
 8006374:	e0eb      	b.n	800654e <UART_SetConfig+0x346>
 8006376:	2308      	movs	r3, #8
 8006378:	77fb      	strb	r3, [r7, #31]
 800637a:	e0e8      	b.n	800654e <UART_SetConfig+0x346>
 800637c:	2310      	movs	r3, #16
 800637e:	77fb      	strb	r3, [r7, #31]
 8006380:	e0e5      	b.n	800654e <UART_SetConfig+0x346>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a57      	ldr	r2, [pc, #348]	; (80064e4 <UART_SetConfig+0x2dc>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d120      	bne.n	80063ce <UART_SetConfig+0x1c6>
 800638c:	4b52      	ldr	r3, [pc, #328]	; (80064d8 <UART_SetConfig+0x2d0>)
 800638e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006392:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006396:	2bc0      	cmp	r3, #192	; 0xc0
 8006398:	d013      	beq.n	80063c2 <UART_SetConfig+0x1ba>
 800639a:	2bc0      	cmp	r3, #192	; 0xc0
 800639c:	d814      	bhi.n	80063c8 <UART_SetConfig+0x1c0>
 800639e:	2b80      	cmp	r3, #128	; 0x80
 80063a0:	d009      	beq.n	80063b6 <UART_SetConfig+0x1ae>
 80063a2:	2b80      	cmp	r3, #128	; 0x80
 80063a4:	d810      	bhi.n	80063c8 <UART_SetConfig+0x1c0>
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <UART_SetConfig+0x1a8>
 80063aa:	2b40      	cmp	r3, #64	; 0x40
 80063ac:	d006      	beq.n	80063bc <UART_SetConfig+0x1b4>
 80063ae:	e00b      	b.n	80063c8 <UART_SetConfig+0x1c0>
 80063b0:	2300      	movs	r3, #0
 80063b2:	77fb      	strb	r3, [r7, #31]
 80063b4:	e0cb      	b.n	800654e <UART_SetConfig+0x346>
 80063b6:	2302      	movs	r3, #2
 80063b8:	77fb      	strb	r3, [r7, #31]
 80063ba:	e0c8      	b.n	800654e <UART_SetConfig+0x346>
 80063bc:	2304      	movs	r3, #4
 80063be:	77fb      	strb	r3, [r7, #31]
 80063c0:	e0c5      	b.n	800654e <UART_SetConfig+0x346>
 80063c2:	2308      	movs	r3, #8
 80063c4:	77fb      	strb	r3, [r7, #31]
 80063c6:	e0c2      	b.n	800654e <UART_SetConfig+0x346>
 80063c8:	2310      	movs	r3, #16
 80063ca:	77fb      	strb	r3, [r7, #31]
 80063cc:	e0bf      	b.n	800654e <UART_SetConfig+0x346>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a45      	ldr	r2, [pc, #276]	; (80064e8 <UART_SetConfig+0x2e0>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d125      	bne.n	8006424 <UART_SetConfig+0x21c>
 80063d8:	4b3f      	ldr	r3, [pc, #252]	; (80064d8 <UART_SetConfig+0x2d0>)
 80063da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063e6:	d017      	beq.n	8006418 <UART_SetConfig+0x210>
 80063e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063ec:	d817      	bhi.n	800641e <UART_SetConfig+0x216>
 80063ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063f2:	d00b      	beq.n	800640c <UART_SetConfig+0x204>
 80063f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063f8:	d811      	bhi.n	800641e <UART_SetConfig+0x216>
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <UART_SetConfig+0x1fe>
 80063fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006402:	d006      	beq.n	8006412 <UART_SetConfig+0x20a>
 8006404:	e00b      	b.n	800641e <UART_SetConfig+0x216>
 8006406:	2300      	movs	r3, #0
 8006408:	77fb      	strb	r3, [r7, #31]
 800640a:	e0a0      	b.n	800654e <UART_SetConfig+0x346>
 800640c:	2302      	movs	r3, #2
 800640e:	77fb      	strb	r3, [r7, #31]
 8006410:	e09d      	b.n	800654e <UART_SetConfig+0x346>
 8006412:	2304      	movs	r3, #4
 8006414:	77fb      	strb	r3, [r7, #31]
 8006416:	e09a      	b.n	800654e <UART_SetConfig+0x346>
 8006418:	2308      	movs	r3, #8
 800641a:	77fb      	strb	r3, [r7, #31]
 800641c:	e097      	b.n	800654e <UART_SetConfig+0x346>
 800641e:	2310      	movs	r3, #16
 8006420:	77fb      	strb	r3, [r7, #31]
 8006422:	e094      	b.n	800654e <UART_SetConfig+0x346>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a30      	ldr	r2, [pc, #192]	; (80064ec <UART_SetConfig+0x2e4>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d125      	bne.n	800647a <UART_SetConfig+0x272>
 800642e:	4b2a      	ldr	r3, [pc, #168]	; (80064d8 <UART_SetConfig+0x2d0>)
 8006430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006434:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006438:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800643c:	d017      	beq.n	800646e <UART_SetConfig+0x266>
 800643e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006442:	d817      	bhi.n	8006474 <UART_SetConfig+0x26c>
 8006444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006448:	d00b      	beq.n	8006462 <UART_SetConfig+0x25a>
 800644a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800644e:	d811      	bhi.n	8006474 <UART_SetConfig+0x26c>
 8006450:	2b00      	cmp	r3, #0
 8006452:	d003      	beq.n	800645c <UART_SetConfig+0x254>
 8006454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006458:	d006      	beq.n	8006468 <UART_SetConfig+0x260>
 800645a:	e00b      	b.n	8006474 <UART_SetConfig+0x26c>
 800645c:	2301      	movs	r3, #1
 800645e:	77fb      	strb	r3, [r7, #31]
 8006460:	e075      	b.n	800654e <UART_SetConfig+0x346>
 8006462:	2302      	movs	r3, #2
 8006464:	77fb      	strb	r3, [r7, #31]
 8006466:	e072      	b.n	800654e <UART_SetConfig+0x346>
 8006468:	2304      	movs	r3, #4
 800646a:	77fb      	strb	r3, [r7, #31]
 800646c:	e06f      	b.n	800654e <UART_SetConfig+0x346>
 800646e:	2308      	movs	r3, #8
 8006470:	77fb      	strb	r3, [r7, #31]
 8006472:	e06c      	b.n	800654e <UART_SetConfig+0x346>
 8006474:	2310      	movs	r3, #16
 8006476:	77fb      	strb	r3, [r7, #31]
 8006478:	e069      	b.n	800654e <UART_SetConfig+0x346>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a1c      	ldr	r2, [pc, #112]	; (80064f0 <UART_SetConfig+0x2e8>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d137      	bne.n	80064f4 <UART_SetConfig+0x2ec>
 8006484:	4b14      	ldr	r3, [pc, #80]	; (80064d8 <UART_SetConfig+0x2d0>)
 8006486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800648a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800648e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006492:	d017      	beq.n	80064c4 <UART_SetConfig+0x2bc>
 8006494:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006498:	d817      	bhi.n	80064ca <UART_SetConfig+0x2c2>
 800649a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800649e:	d00b      	beq.n	80064b8 <UART_SetConfig+0x2b0>
 80064a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064a4:	d811      	bhi.n	80064ca <UART_SetConfig+0x2c2>
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <UART_SetConfig+0x2aa>
 80064aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ae:	d006      	beq.n	80064be <UART_SetConfig+0x2b6>
 80064b0:	e00b      	b.n	80064ca <UART_SetConfig+0x2c2>
 80064b2:	2300      	movs	r3, #0
 80064b4:	77fb      	strb	r3, [r7, #31]
 80064b6:	e04a      	b.n	800654e <UART_SetConfig+0x346>
 80064b8:	2302      	movs	r3, #2
 80064ba:	77fb      	strb	r3, [r7, #31]
 80064bc:	e047      	b.n	800654e <UART_SetConfig+0x346>
 80064be:	2304      	movs	r3, #4
 80064c0:	77fb      	strb	r3, [r7, #31]
 80064c2:	e044      	b.n	800654e <UART_SetConfig+0x346>
 80064c4:	2308      	movs	r3, #8
 80064c6:	77fb      	strb	r3, [r7, #31]
 80064c8:	e041      	b.n	800654e <UART_SetConfig+0x346>
 80064ca:	2310      	movs	r3, #16
 80064cc:	77fb      	strb	r3, [r7, #31]
 80064ce:	e03e      	b.n	800654e <UART_SetConfig+0x346>
 80064d0:	efff69f3 	.word	0xefff69f3
 80064d4:	40011000 	.word	0x40011000
 80064d8:	40023800 	.word	0x40023800
 80064dc:	40004400 	.word	0x40004400
 80064e0:	40004800 	.word	0x40004800
 80064e4:	40004c00 	.word	0x40004c00
 80064e8:	40005000 	.word	0x40005000
 80064ec:	40011400 	.word	0x40011400
 80064f0:	40007800 	.word	0x40007800
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a71      	ldr	r2, [pc, #452]	; (80066c0 <UART_SetConfig+0x4b8>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d125      	bne.n	800654a <UART_SetConfig+0x342>
 80064fe:	4b71      	ldr	r3, [pc, #452]	; (80066c4 <UART_SetConfig+0x4bc>)
 8006500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006504:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006508:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800650c:	d017      	beq.n	800653e <UART_SetConfig+0x336>
 800650e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006512:	d817      	bhi.n	8006544 <UART_SetConfig+0x33c>
 8006514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006518:	d00b      	beq.n	8006532 <UART_SetConfig+0x32a>
 800651a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800651e:	d811      	bhi.n	8006544 <UART_SetConfig+0x33c>
 8006520:	2b00      	cmp	r3, #0
 8006522:	d003      	beq.n	800652c <UART_SetConfig+0x324>
 8006524:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006528:	d006      	beq.n	8006538 <UART_SetConfig+0x330>
 800652a:	e00b      	b.n	8006544 <UART_SetConfig+0x33c>
 800652c:	2300      	movs	r3, #0
 800652e:	77fb      	strb	r3, [r7, #31]
 8006530:	e00d      	b.n	800654e <UART_SetConfig+0x346>
 8006532:	2302      	movs	r3, #2
 8006534:	77fb      	strb	r3, [r7, #31]
 8006536:	e00a      	b.n	800654e <UART_SetConfig+0x346>
 8006538:	2304      	movs	r3, #4
 800653a:	77fb      	strb	r3, [r7, #31]
 800653c:	e007      	b.n	800654e <UART_SetConfig+0x346>
 800653e:	2308      	movs	r3, #8
 8006540:	77fb      	strb	r3, [r7, #31]
 8006542:	e004      	b.n	800654e <UART_SetConfig+0x346>
 8006544:	2310      	movs	r3, #16
 8006546:	77fb      	strb	r3, [r7, #31]
 8006548:	e001      	b.n	800654e <UART_SetConfig+0x346>
 800654a:	2310      	movs	r3, #16
 800654c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006556:	d15a      	bne.n	800660e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006558:	7ffb      	ldrb	r3, [r7, #31]
 800655a:	2b08      	cmp	r3, #8
 800655c:	d827      	bhi.n	80065ae <UART_SetConfig+0x3a6>
 800655e:	a201      	add	r2, pc, #4	; (adr r2, 8006564 <UART_SetConfig+0x35c>)
 8006560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006564:	08006589 	.word	0x08006589
 8006568:	08006591 	.word	0x08006591
 800656c:	08006599 	.word	0x08006599
 8006570:	080065af 	.word	0x080065af
 8006574:	0800659f 	.word	0x0800659f
 8006578:	080065af 	.word	0x080065af
 800657c:	080065af 	.word	0x080065af
 8006580:	080065af 	.word	0x080065af
 8006584:	080065a7 	.word	0x080065a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006588:	f7fe fdfa 	bl	8005180 <HAL_RCC_GetPCLK1Freq>
 800658c:	61b8      	str	r0, [r7, #24]
        break;
 800658e:	e013      	b.n	80065b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006590:	f7fe fe0a 	bl	80051a8 <HAL_RCC_GetPCLK2Freq>
 8006594:	61b8      	str	r0, [r7, #24]
        break;
 8006596:	e00f      	b.n	80065b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006598:	4b4b      	ldr	r3, [pc, #300]	; (80066c8 <UART_SetConfig+0x4c0>)
 800659a:	61bb      	str	r3, [r7, #24]
        break;
 800659c:	e00c      	b.n	80065b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800659e:	f7fe fd01 	bl	8004fa4 <HAL_RCC_GetSysClockFreq>
 80065a2:	61b8      	str	r0, [r7, #24]
        break;
 80065a4:	e008      	b.n	80065b8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065aa:	61bb      	str	r3, [r7, #24]
        break;
 80065ac:	e004      	b.n	80065b8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	77bb      	strb	r3, [r7, #30]
        break;
 80065b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d074      	beq.n	80066a8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	005a      	lsls	r2, r3, #1
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	085b      	lsrs	r3, r3, #1
 80065c8:	441a      	add	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	2b0f      	cmp	r3, #15
 80065d8:	d916      	bls.n	8006608 <UART_SetConfig+0x400>
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065e0:	d212      	bcs.n	8006608 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	f023 030f 	bic.w	r3, r3, #15
 80065ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	085b      	lsrs	r3, r3, #1
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	f003 0307 	and.w	r3, r3, #7
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	89fb      	ldrh	r3, [r7, #14]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	89fa      	ldrh	r2, [r7, #14]
 8006604:	60da      	str	r2, [r3, #12]
 8006606:	e04f      	b.n	80066a8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	77bb      	strb	r3, [r7, #30]
 800660c:	e04c      	b.n	80066a8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800660e:	7ffb      	ldrb	r3, [r7, #31]
 8006610:	2b08      	cmp	r3, #8
 8006612:	d828      	bhi.n	8006666 <UART_SetConfig+0x45e>
 8006614:	a201      	add	r2, pc, #4	; (adr r2, 800661c <UART_SetConfig+0x414>)
 8006616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661a:	bf00      	nop
 800661c:	08006641 	.word	0x08006641
 8006620:	08006649 	.word	0x08006649
 8006624:	08006651 	.word	0x08006651
 8006628:	08006667 	.word	0x08006667
 800662c:	08006657 	.word	0x08006657
 8006630:	08006667 	.word	0x08006667
 8006634:	08006667 	.word	0x08006667
 8006638:	08006667 	.word	0x08006667
 800663c:	0800665f 	.word	0x0800665f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006640:	f7fe fd9e 	bl	8005180 <HAL_RCC_GetPCLK1Freq>
 8006644:	61b8      	str	r0, [r7, #24]
        break;
 8006646:	e013      	b.n	8006670 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006648:	f7fe fdae 	bl	80051a8 <HAL_RCC_GetPCLK2Freq>
 800664c:	61b8      	str	r0, [r7, #24]
        break;
 800664e:	e00f      	b.n	8006670 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006650:	4b1d      	ldr	r3, [pc, #116]	; (80066c8 <UART_SetConfig+0x4c0>)
 8006652:	61bb      	str	r3, [r7, #24]
        break;
 8006654:	e00c      	b.n	8006670 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006656:	f7fe fca5 	bl	8004fa4 <HAL_RCC_GetSysClockFreq>
 800665a:	61b8      	str	r0, [r7, #24]
        break;
 800665c:	e008      	b.n	8006670 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800665e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006662:	61bb      	str	r3, [r7, #24]
        break;
 8006664:	e004      	b.n	8006670 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006666:	2300      	movs	r3, #0
 8006668:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	77bb      	strb	r3, [r7, #30]
        break;
 800666e:	bf00      	nop
    }

    if (pclk != 0U)
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d018      	beq.n	80066a8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	085a      	lsrs	r2, r3, #1
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	441a      	add	r2, r3
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	fbb2 f3f3 	udiv	r3, r2, r3
 8006688:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	2b0f      	cmp	r3, #15
 800668e:	d909      	bls.n	80066a4 <UART_SetConfig+0x49c>
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006696:	d205      	bcs.n	80066a4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	b29a      	uxth	r2, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	60da      	str	r2, [r3, #12]
 80066a2:	e001      	b.n	80066a8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80066b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3720      	adds	r7, #32
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	40007c00 	.word	0x40007c00
 80066c4:	40023800 	.word	0x40023800
 80066c8:	00f42400 	.word	0x00f42400

080066cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00a      	beq.n	80066f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	f003 0302 	and.w	r3, r3, #2
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00a      	beq.n	8006718 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	430a      	orrs	r2, r1
 8006716:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671c:	f003 0304 	and.w	r3, r3, #4
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00a      	beq.n	800673a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	430a      	orrs	r2, r1
 8006738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673e:	f003 0308 	and.w	r3, r3, #8
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00a      	beq.n	800675c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	430a      	orrs	r2, r1
 800675a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006760:	f003 0310 	and.w	r3, r3, #16
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00a      	beq.n	800677e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	430a      	orrs	r2, r1
 800677c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006782:	f003 0320 	and.w	r3, r3, #32
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00a      	beq.n	80067a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	430a      	orrs	r2, r1
 800679e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d01a      	beq.n	80067e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	430a      	orrs	r2, r1
 80067c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067ca:	d10a      	bne.n	80067e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	430a      	orrs	r2, r1
 80067e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00a      	beq.n	8006804 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	605a      	str	r2, [r3, #4]
  }
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af02      	add	r7, sp, #8
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006820:	f7fc fa22 	bl	8002c68 <HAL_GetTick>
 8006824:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0308 	and.w	r3, r3, #8
 8006830:	2b08      	cmp	r3, #8
 8006832:	d10e      	bne.n	8006852 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006834:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f82d 	bl	80068a2 <UART_WaitOnFlagUntilTimeout>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d001      	beq.n	8006852 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e023      	b.n	800689a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0304 	and.w	r3, r3, #4
 800685c:	2b04      	cmp	r3, #4
 800685e:	d10e      	bne.n	800687e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006860:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 f817 	bl	80068a2 <UART_WaitOnFlagUntilTimeout>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d001      	beq.n	800687e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e00d      	b.n	800689a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2220      	movs	r2, #32
 8006882:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2220      	movs	r2, #32
 8006888:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b09c      	sub	sp, #112	; 0x70
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	60f8      	str	r0, [r7, #12]
 80068aa:	60b9      	str	r1, [r7, #8]
 80068ac:	603b      	str	r3, [r7, #0]
 80068ae:	4613      	mov	r3, r2
 80068b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068b2:	e0a5      	b.n	8006a00 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068ba:	f000 80a1 	beq.w	8006a00 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068be:	f7fc f9d3 	bl	8002c68 <HAL_GetTick>
 80068c2:	4602      	mov	r2, r0
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d302      	bcc.n	80068d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80068ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d13e      	bne.n	8006952 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068dc:	e853 3f00 	ldrex	r3, [r3]
 80068e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80068e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068e8:	667b      	str	r3, [r7, #100]	; 0x64
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	461a      	mov	r2, r3
 80068f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068f4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80068f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80068fa:	e841 2300 	strex	r3, r2, [r1]
 80068fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1e6      	bne.n	80068d4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	3308      	adds	r3, #8
 800690c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006910:	e853 3f00 	ldrex	r3, [r3]
 8006914:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006918:	f023 0301 	bic.w	r3, r3, #1
 800691c:	663b      	str	r3, [r7, #96]	; 0x60
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	3308      	adds	r3, #8
 8006924:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006926:	64ba      	str	r2, [r7, #72]	; 0x48
 8006928:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800692c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800692e:	e841 2300 	strex	r3, r2, [r1]
 8006932:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1e5      	bne.n	8006906 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2220      	movs	r2, #32
 800693e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2220      	movs	r2, #32
 8006944:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e067      	b.n	8006a22 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f003 0304 	and.w	r3, r3, #4
 800695c:	2b00      	cmp	r3, #0
 800695e:	d04f      	beq.n	8006a00 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800696a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800696e:	d147      	bne.n	8006a00 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006978:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006982:	e853 3f00 	ldrex	r3, [r3]
 8006986:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800698e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	461a      	mov	r2, r3
 8006996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006998:	637b      	str	r3, [r7, #52]	; 0x34
 800699a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800699e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069a0:	e841 2300 	strex	r3, r2, [r1]
 80069a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1e6      	bne.n	800697a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3308      	adds	r3, #8
 80069b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	e853 3f00 	ldrex	r3, [r3]
 80069ba:	613b      	str	r3, [r7, #16]
   return(result);
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	f023 0301 	bic.w	r3, r3, #1
 80069c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3308      	adds	r3, #8
 80069ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80069cc:	623a      	str	r2, [r7, #32]
 80069ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d0:	69f9      	ldr	r1, [r7, #28]
 80069d2:	6a3a      	ldr	r2, [r7, #32]
 80069d4:	e841 2300 	strex	r3, r2, [r1]
 80069d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1e5      	bne.n	80069ac <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2220      	movs	r2, #32
 80069e4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2220      	movs	r2, #32
 80069ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2220      	movs	r2, #32
 80069f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e010      	b.n	8006a22 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	69da      	ldr	r2, [r3, #28]
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	4013      	ands	r3, r2
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	bf0c      	ite	eq
 8006a10:	2301      	moveq	r3, #1
 8006a12:	2300      	movne	r3, #0
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	461a      	mov	r2, r3
 8006a18:	79fb      	ldrb	r3, [r7, #7]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	f43f af4a 	beq.w	80068b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3770      	adds	r7, #112	; 0x70
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
	...

08006a2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b084      	sub	sp, #16
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	f107 001c 	add.w	r0, r7, #28
 8006a3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d120      	bne.n	8006a86 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68da      	ldr	r2, [r3, #12]
 8006a54:	4b20      	ldr	r3, [pc, #128]	; (8006ad8 <USB_CoreInit+0xac>)
 8006a56:	4013      	ands	r3, r2
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d105      	bne.n	8006a7a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 fa92 	bl	8006fa4 <USB_CoreReset>
 8006a80:	4603      	mov	r3, r0
 8006a82:	73fb      	strb	r3, [r7, #15]
 8006a84:	e010      	b.n	8006aa8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fa86 	bl	8006fa4 <USB_CoreReset>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d10b      	bne.n	8006ac6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	f043 0206 	orr.w	r2, r3, #6
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	f043 0220 	orr.w	r2, r3, #32
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ad2:	b004      	add	sp, #16
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	ffbdffbf 	.word	0xffbdffbf

08006adc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	f023 0201 	bic.w	r2, r3, #1
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	370c      	adds	r7, #12
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr

08006afe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b084      	sub	sp, #16
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
 8006b06:	460b      	mov	r3, r1
 8006b08:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b1a:	78fb      	ldrb	r3, [r7, #3]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d115      	bne.n	8006b4c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b2c:	2001      	movs	r0, #1
 8006b2e:	f7fc f8a7 	bl	8002c80 <HAL_Delay>
      ms++;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	3301      	adds	r3, #1
 8006b36:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 fa25 	bl	8006f88 <USB_GetMode>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d01e      	beq.n	8006b82 <USB_SetCurrentMode+0x84>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2b31      	cmp	r3, #49	; 0x31
 8006b48:	d9f0      	bls.n	8006b2c <USB_SetCurrentMode+0x2e>
 8006b4a:	e01a      	b.n	8006b82 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b4c:	78fb      	ldrb	r3, [r7, #3]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d115      	bne.n	8006b7e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006b5e:	2001      	movs	r0, #1
 8006b60:	f7fc f88e 	bl	8002c80 <HAL_Delay>
      ms++;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	3301      	adds	r3, #1
 8006b68:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fa0c 	bl	8006f88 <USB_GetMode>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d005      	beq.n	8006b82 <USB_SetCurrentMode+0x84>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2b31      	cmp	r3, #49	; 0x31
 8006b7a:	d9f0      	bls.n	8006b5e <USB_SetCurrentMode+0x60>
 8006b7c:	e001      	b.n	8006b82 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e005      	b.n	8006b8e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2b32      	cmp	r3, #50	; 0x32
 8006b86:	d101      	bne.n	8006b8c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e000      	b.n	8006b8e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
	...

08006b98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b98:	b084      	sub	sp, #16
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b086      	sub	sp, #24
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
 8006ba2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006ba6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006baa:	2300      	movs	r3, #0
 8006bac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	613b      	str	r3, [r7, #16]
 8006bb6:	e009      	b.n	8006bcc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	3340      	adds	r3, #64	; 0x40
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	4413      	add	r3, r2
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	613b      	str	r3, [r7, #16]
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	2b0e      	cmp	r3, #14
 8006bd0:	d9f2      	bls.n	8006bb8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d11c      	bne.n	8006c12 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	68fa      	ldr	r2, [r7, #12]
 8006be2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006be6:	f043 0302 	orr.w	r3, r3, #2
 8006bea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	601a      	str	r2, [r3, #0]
 8006c10:	e005      	b.n	8006c1e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c24:	461a      	mov	r2, r3
 8006c26:	2300      	movs	r3, #0
 8006c28:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c30:	4619      	mov	r1, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c38:	461a      	mov	r2, r3
 8006c3a:	680b      	ldr	r3, [r1, #0]
 8006c3c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d10c      	bne.n	8006c5e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d104      	bne.n	8006c54 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f961 	bl	8006f14 <USB_SetDevSpeed>
 8006c52:	e008      	b.n	8006c66 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006c54:	2101      	movs	r1, #1
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 f95c 	bl	8006f14 <USB_SetDevSpeed>
 8006c5c:	e003      	b.n	8006c66 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c5e:	2103      	movs	r1, #3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f957 	bl	8006f14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c66:	2110      	movs	r1, #16
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f8f3 	bl	8006e54 <USB_FlushTxFifo>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d001      	beq.n	8006c78 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f91d 	bl	8006eb8 <USB_FlushRxFifo>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d001      	beq.n	8006c88 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c8e:	461a      	mov	r2, r3
 8006c90:	2300      	movs	r3, #0
 8006c92:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	2300      	movs	r3, #0
 8006caa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cac:	2300      	movs	r3, #0
 8006cae:	613b      	str	r3, [r7, #16]
 8006cb0:	e043      	b.n	8006d3a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	015a      	lsls	r2, r3, #5
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	4413      	add	r3, r2
 8006cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cc8:	d118      	bne.n	8006cfc <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10a      	bne.n	8006ce6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cdc:	461a      	mov	r2, r3
 8006cde:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ce2:	6013      	str	r3, [r2, #0]
 8006ce4:	e013      	b.n	8006d0e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006cf8:	6013      	str	r3, [r2, #0]
 8006cfa:	e008      	b.n	8006d0e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d08:	461a      	mov	r2, r3
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	015a      	lsls	r2, r3, #5
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	4413      	add	r3, r2
 8006d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	015a      	lsls	r2, r3, #5
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	3301      	adds	r3, #1
 8006d38:	613b      	str	r3, [r7, #16]
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d3c:	693a      	ldr	r2, [r7, #16]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d3b7      	bcc.n	8006cb2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d42:	2300      	movs	r3, #0
 8006d44:	613b      	str	r3, [r7, #16]
 8006d46:	e043      	b.n	8006dd0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d5e:	d118      	bne.n	8006d92 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10a      	bne.n	8006d7c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	015a      	lsls	r2, r3, #5
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d72:	461a      	mov	r2, r3
 8006d74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d78:	6013      	str	r3, [r2, #0]
 8006d7a:	e013      	b.n	8006da4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d88:	461a      	mov	r2, r3
 8006d8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d8e:	6013      	str	r3, [r2, #0]
 8006d90:	e008      	b.n	8006da4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4413      	add	r3, r2
 8006d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d9e:	461a      	mov	r2, r3
 8006da0:	2300      	movs	r3, #0
 8006da2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	015a      	lsls	r2, r3, #5
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	4413      	add	r3, r2
 8006dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db0:	461a      	mov	r2, r3
 8006db2:	2300      	movs	r3, #0
 8006db4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	015a      	lsls	r2, r3, #5
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006dc8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	613b      	str	r3, [r7, #16]
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d3b7      	bcc.n	8006d48 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006de6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006df8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d105      	bne.n	8006e0c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	f043 0210 	orr.w	r2, r3, #16
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	699a      	ldr	r2, [r3, #24]
 8006e10:	4b0e      	ldr	r3, [pc, #56]	; (8006e4c <USB_DevInit+0x2b4>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d005      	beq.n	8006e2a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	f043 0208 	orr.w	r2, r3, #8
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d105      	bne.n	8006e3c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	699a      	ldr	r2, [r3, #24]
 8006e34:	4b06      	ldr	r3, [pc, #24]	; (8006e50 <USB_DevInit+0x2b8>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3718      	adds	r7, #24
 8006e42:	46bd      	mov	sp, r7
 8006e44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e48:	b004      	add	sp, #16
 8006e4a:	4770      	bx	lr
 8006e4c:	803c3800 	.word	0x803c3800
 8006e50:	40000004 	.word	0x40000004

08006e54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	3301      	adds	r3, #1
 8006e66:	60fb      	str	r3, [r7, #12]
 8006e68:	4a12      	ldr	r2, [pc, #72]	; (8006eb4 <USB_FlushTxFifo+0x60>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d901      	bls.n	8006e72 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	e01a      	b.n	8006ea8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	daf3      	bge.n	8006e62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	019b      	lsls	r3, r3, #6
 8006e82:	f043 0220 	orr.w	r2, r3, #32
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	60fb      	str	r3, [r7, #12]
 8006e90:	4a08      	ldr	r2, [pc, #32]	; (8006eb4 <USB_FlushTxFifo+0x60>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d901      	bls.n	8006e9a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e006      	b.n	8006ea8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	f003 0320 	and.w	r3, r3, #32
 8006ea2:	2b20      	cmp	r3, #32
 8006ea4:	d0f1      	beq.n	8006e8a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3714      	adds	r7, #20
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr
 8006eb4:	00030d40 	.word	0x00030d40

08006eb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	60fb      	str	r3, [r7, #12]
 8006eca:	4a11      	ldr	r2, [pc, #68]	; (8006f10 <USB_FlushRxFifo+0x58>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d901      	bls.n	8006ed4 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e017      	b.n	8006f04 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	daf3      	bge.n	8006ec4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006edc:	2300      	movs	r3, #0
 8006ede:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2210      	movs	r2, #16
 8006ee4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	60fb      	str	r3, [r7, #12]
 8006eec:	4a08      	ldr	r2, [pc, #32]	; (8006f10 <USB_FlushRxFifo+0x58>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d901      	bls.n	8006ef6 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e006      	b.n	8006f04 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	691b      	ldr	r3, [r3, #16]
 8006efa:	f003 0310 	and.w	r3, r3, #16
 8006efe:	2b10      	cmp	r3, #16
 8006f00:	d0f1      	beq.n	8006ee6 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr
 8006f10:	00030d40 	.word	0x00030d40

08006f14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	78fb      	ldrb	r3, [r7, #3]
 8006f2e:	68f9      	ldr	r1, [r7, #12]
 8006f30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f34:	4313      	orrs	r3, r2
 8006f36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3714      	adds	r7, #20
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr

08006f46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006f46:	b480      	push	{r7}
 8006f48:	b085      	sub	sp, #20
 8006f4a:	af00      	add	r7, sp, #0
 8006f4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f60:	f023 0303 	bic.w	r3, r3, #3
 8006f64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f74:	f043 0302 	orr.w	r3, r3, #2
 8006f78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	695b      	ldr	r3, [r3, #20]
 8006f94:	f003 0301 	and.w	r3, r3, #1
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	370c      	adds	r7, #12
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fac:	2300      	movs	r3, #0
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	60fb      	str	r3, [r7, #12]
 8006fb6:	4a13      	ldr	r2, [pc, #76]	; (8007004 <USB_CoreReset+0x60>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d901      	bls.n	8006fc0 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	e01a      	b.n	8006ff6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	daf3      	bge.n	8006fb0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	f043 0201 	orr.w	r2, r3, #1
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	60fb      	str	r3, [r7, #12]
 8006fde:	4a09      	ldr	r2, [pc, #36]	; (8007004 <USB_CoreReset+0x60>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d901      	bls.n	8006fe8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e006      	b.n	8006ff6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d0f1      	beq.n	8006fd8 <USB_CoreReset+0x34>

  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	00030d40 	.word	0x00030d40

08007008 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007008:	b5b0      	push	{r4, r5, r7, lr}
 800700a:	b08e      	sub	sp, #56	; 0x38
 800700c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800700e:	4ba0      	ldr	r3, [pc, #640]	; (8007290 <MX_LWIP_Init+0x288>)
 8007010:	22c0      	movs	r2, #192	; 0xc0
 8007012:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007014:	4b9e      	ldr	r3, [pc, #632]	; (8007290 <MX_LWIP_Init+0x288>)
 8007016:	22a8      	movs	r2, #168	; 0xa8
 8007018:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
 800701a:	4b9d      	ldr	r3, [pc, #628]	; (8007290 <MX_LWIP_Init+0x288>)
 800701c:	2212      	movs	r2, #18
 800701e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 31;
 8007020:	4b9b      	ldr	r3, [pc, #620]	; (8007290 <MX_LWIP_Init+0x288>)
 8007022:	221f      	movs	r2, #31
 8007024:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007026:	4b9b      	ldr	r3, [pc, #620]	; (8007294 <MX_LWIP_Init+0x28c>)
 8007028:	22ff      	movs	r2, #255	; 0xff
 800702a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800702c:	4b99      	ldr	r3, [pc, #612]	; (8007294 <MX_LWIP_Init+0x28c>)
 800702e:	22ff      	movs	r2, #255	; 0xff
 8007030:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8007032:	4b98      	ldr	r3, [pc, #608]	; (8007294 <MX_LWIP_Init+0x28c>)
 8007034:	22ff      	movs	r2, #255	; 0xff
 8007036:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007038:	4b96      	ldr	r3, [pc, #600]	; (8007294 <MX_LWIP_Init+0x28c>)
 800703a:	2200      	movs	r2, #0
 800703c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800703e:	4b96      	ldr	r3, [pc, #600]	; (8007298 <MX_LWIP_Init+0x290>)
 8007040:	22c0      	movs	r2, #192	; 0xc0
 8007042:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8007044:	4b94      	ldr	r3, [pc, #592]	; (8007298 <MX_LWIP_Init+0x290>)
 8007046:	22a8      	movs	r2, #168	; 0xa8
 8007048:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
 800704a:	4b93      	ldr	r3, [pc, #588]	; (8007298 <MX_LWIP_Init+0x290>)
 800704c:	2212      	movs	r2, #18
 800704e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8007050:	4b91      	ldr	r3, [pc, #580]	; (8007298 <MX_LWIP_Init+0x290>)
 8007052:	2201      	movs	r2, #1
 8007054:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8007056:	2100      	movs	r1, #0
 8007058:	2000      	movs	r0, #0
 800705a:	f003 fe3f 	bl	800acdc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800705e:	4b8c      	ldr	r3, [pc, #560]	; (8007290 <MX_LWIP_Init+0x288>)
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	061a      	lsls	r2, r3, #24
 8007064:	4b8a      	ldr	r3, [pc, #552]	; (8007290 <MX_LWIP_Init+0x288>)
 8007066:	785b      	ldrb	r3, [r3, #1]
 8007068:	041b      	lsls	r3, r3, #16
 800706a:	431a      	orrs	r2, r3
 800706c:	4b88      	ldr	r3, [pc, #544]	; (8007290 <MX_LWIP_Init+0x288>)
 800706e:	789b      	ldrb	r3, [r3, #2]
 8007070:	021b      	lsls	r3, r3, #8
 8007072:	4313      	orrs	r3, r2
 8007074:	4a86      	ldr	r2, [pc, #536]	; (8007290 <MX_LWIP_Init+0x288>)
 8007076:	78d2      	ldrb	r2, [r2, #3]
 8007078:	4313      	orrs	r3, r2
 800707a:	061a      	lsls	r2, r3, #24
 800707c:	4b84      	ldr	r3, [pc, #528]	; (8007290 <MX_LWIP_Init+0x288>)
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	0619      	lsls	r1, r3, #24
 8007082:	4b83      	ldr	r3, [pc, #524]	; (8007290 <MX_LWIP_Init+0x288>)
 8007084:	785b      	ldrb	r3, [r3, #1]
 8007086:	041b      	lsls	r3, r3, #16
 8007088:	4319      	orrs	r1, r3
 800708a:	4b81      	ldr	r3, [pc, #516]	; (8007290 <MX_LWIP_Init+0x288>)
 800708c:	789b      	ldrb	r3, [r3, #2]
 800708e:	021b      	lsls	r3, r3, #8
 8007090:	430b      	orrs	r3, r1
 8007092:	497f      	ldr	r1, [pc, #508]	; (8007290 <MX_LWIP_Init+0x288>)
 8007094:	78c9      	ldrb	r1, [r1, #3]
 8007096:	430b      	orrs	r3, r1
 8007098:	021b      	lsls	r3, r3, #8
 800709a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800709e:	431a      	orrs	r2, r3
 80070a0:	4b7b      	ldr	r3, [pc, #492]	; (8007290 <MX_LWIP_Init+0x288>)
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	0619      	lsls	r1, r3, #24
 80070a6:	4b7a      	ldr	r3, [pc, #488]	; (8007290 <MX_LWIP_Init+0x288>)
 80070a8:	785b      	ldrb	r3, [r3, #1]
 80070aa:	041b      	lsls	r3, r3, #16
 80070ac:	4319      	orrs	r1, r3
 80070ae:	4b78      	ldr	r3, [pc, #480]	; (8007290 <MX_LWIP_Init+0x288>)
 80070b0:	789b      	ldrb	r3, [r3, #2]
 80070b2:	021b      	lsls	r3, r3, #8
 80070b4:	430b      	orrs	r3, r1
 80070b6:	4976      	ldr	r1, [pc, #472]	; (8007290 <MX_LWIP_Init+0x288>)
 80070b8:	78c9      	ldrb	r1, [r1, #3]
 80070ba:	430b      	orrs	r3, r1
 80070bc:	0a1b      	lsrs	r3, r3, #8
 80070be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80070c2:	431a      	orrs	r2, r3
 80070c4:	4b72      	ldr	r3, [pc, #456]	; (8007290 <MX_LWIP_Init+0x288>)
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	0619      	lsls	r1, r3, #24
 80070ca:	4b71      	ldr	r3, [pc, #452]	; (8007290 <MX_LWIP_Init+0x288>)
 80070cc:	785b      	ldrb	r3, [r3, #1]
 80070ce:	041b      	lsls	r3, r3, #16
 80070d0:	4319      	orrs	r1, r3
 80070d2:	4b6f      	ldr	r3, [pc, #444]	; (8007290 <MX_LWIP_Init+0x288>)
 80070d4:	789b      	ldrb	r3, [r3, #2]
 80070d6:	021b      	lsls	r3, r3, #8
 80070d8:	430b      	orrs	r3, r1
 80070da:	496d      	ldr	r1, [pc, #436]	; (8007290 <MX_LWIP_Init+0x288>)
 80070dc:	78c9      	ldrb	r1, [r1, #3]
 80070de:	430b      	orrs	r3, r1
 80070e0:	0e1b      	lsrs	r3, r3, #24
 80070e2:	4313      	orrs	r3, r2
 80070e4:	4a6d      	ldr	r2, [pc, #436]	; (800729c <MX_LWIP_Init+0x294>)
 80070e6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80070e8:	4b6a      	ldr	r3, [pc, #424]	; (8007294 <MX_LWIP_Init+0x28c>)
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	061a      	lsls	r2, r3, #24
 80070ee:	4b69      	ldr	r3, [pc, #420]	; (8007294 <MX_LWIP_Init+0x28c>)
 80070f0:	785b      	ldrb	r3, [r3, #1]
 80070f2:	041b      	lsls	r3, r3, #16
 80070f4:	431a      	orrs	r2, r3
 80070f6:	4b67      	ldr	r3, [pc, #412]	; (8007294 <MX_LWIP_Init+0x28c>)
 80070f8:	789b      	ldrb	r3, [r3, #2]
 80070fa:	021b      	lsls	r3, r3, #8
 80070fc:	4313      	orrs	r3, r2
 80070fe:	4a65      	ldr	r2, [pc, #404]	; (8007294 <MX_LWIP_Init+0x28c>)
 8007100:	78d2      	ldrb	r2, [r2, #3]
 8007102:	4313      	orrs	r3, r2
 8007104:	061a      	lsls	r2, r3, #24
 8007106:	4b63      	ldr	r3, [pc, #396]	; (8007294 <MX_LWIP_Init+0x28c>)
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	0619      	lsls	r1, r3, #24
 800710c:	4b61      	ldr	r3, [pc, #388]	; (8007294 <MX_LWIP_Init+0x28c>)
 800710e:	785b      	ldrb	r3, [r3, #1]
 8007110:	041b      	lsls	r3, r3, #16
 8007112:	4319      	orrs	r1, r3
 8007114:	4b5f      	ldr	r3, [pc, #380]	; (8007294 <MX_LWIP_Init+0x28c>)
 8007116:	789b      	ldrb	r3, [r3, #2]
 8007118:	021b      	lsls	r3, r3, #8
 800711a:	430b      	orrs	r3, r1
 800711c:	495d      	ldr	r1, [pc, #372]	; (8007294 <MX_LWIP_Init+0x28c>)
 800711e:	78c9      	ldrb	r1, [r1, #3]
 8007120:	430b      	orrs	r3, r1
 8007122:	021b      	lsls	r3, r3, #8
 8007124:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007128:	431a      	orrs	r2, r3
 800712a:	4b5a      	ldr	r3, [pc, #360]	; (8007294 <MX_LWIP_Init+0x28c>)
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	0619      	lsls	r1, r3, #24
 8007130:	4b58      	ldr	r3, [pc, #352]	; (8007294 <MX_LWIP_Init+0x28c>)
 8007132:	785b      	ldrb	r3, [r3, #1]
 8007134:	041b      	lsls	r3, r3, #16
 8007136:	4319      	orrs	r1, r3
 8007138:	4b56      	ldr	r3, [pc, #344]	; (8007294 <MX_LWIP_Init+0x28c>)
 800713a:	789b      	ldrb	r3, [r3, #2]
 800713c:	021b      	lsls	r3, r3, #8
 800713e:	430b      	orrs	r3, r1
 8007140:	4954      	ldr	r1, [pc, #336]	; (8007294 <MX_LWIP_Init+0x28c>)
 8007142:	78c9      	ldrb	r1, [r1, #3]
 8007144:	430b      	orrs	r3, r1
 8007146:	0a1b      	lsrs	r3, r3, #8
 8007148:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800714c:	431a      	orrs	r2, r3
 800714e:	4b51      	ldr	r3, [pc, #324]	; (8007294 <MX_LWIP_Init+0x28c>)
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	0619      	lsls	r1, r3, #24
 8007154:	4b4f      	ldr	r3, [pc, #316]	; (8007294 <MX_LWIP_Init+0x28c>)
 8007156:	785b      	ldrb	r3, [r3, #1]
 8007158:	041b      	lsls	r3, r3, #16
 800715a:	4319      	orrs	r1, r3
 800715c:	4b4d      	ldr	r3, [pc, #308]	; (8007294 <MX_LWIP_Init+0x28c>)
 800715e:	789b      	ldrb	r3, [r3, #2]
 8007160:	021b      	lsls	r3, r3, #8
 8007162:	430b      	orrs	r3, r1
 8007164:	494b      	ldr	r1, [pc, #300]	; (8007294 <MX_LWIP_Init+0x28c>)
 8007166:	78c9      	ldrb	r1, [r1, #3]
 8007168:	430b      	orrs	r3, r1
 800716a:	0e1b      	lsrs	r3, r3, #24
 800716c:	4313      	orrs	r3, r2
 800716e:	4a4c      	ldr	r2, [pc, #304]	; (80072a0 <MX_LWIP_Init+0x298>)
 8007170:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007172:	4b49      	ldr	r3, [pc, #292]	; (8007298 <MX_LWIP_Init+0x290>)
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	061a      	lsls	r2, r3, #24
 8007178:	4b47      	ldr	r3, [pc, #284]	; (8007298 <MX_LWIP_Init+0x290>)
 800717a:	785b      	ldrb	r3, [r3, #1]
 800717c:	041b      	lsls	r3, r3, #16
 800717e:	431a      	orrs	r2, r3
 8007180:	4b45      	ldr	r3, [pc, #276]	; (8007298 <MX_LWIP_Init+0x290>)
 8007182:	789b      	ldrb	r3, [r3, #2]
 8007184:	021b      	lsls	r3, r3, #8
 8007186:	4313      	orrs	r3, r2
 8007188:	4a43      	ldr	r2, [pc, #268]	; (8007298 <MX_LWIP_Init+0x290>)
 800718a:	78d2      	ldrb	r2, [r2, #3]
 800718c:	4313      	orrs	r3, r2
 800718e:	061a      	lsls	r2, r3, #24
 8007190:	4b41      	ldr	r3, [pc, #260]	; (8007298 <MX_LWIP_Init+0x290>)
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	0619      	lsls	r1, r3, #24
 8007196:	4b40      	ldr	r3, [pc, #256]	; (8007298 <MX_LWIP_Init+0x290>)
 8007198:	785b      	ldrb	r3, [r3, #1]
 800719a:	041b      	lsls	r3, r3, #16
 800719c:	4319      	orrs	r1, r3
 800719e:	4b3e      	ldr	r3, [pc, #248]	; (8007298 <MX_LWIP_Init+0x290>)
 80071a0:	789b      	ldrb	r3, [r3, #2]
 80071a2:	021b      	lsls	r3, r3, #8
 80071a4:	430b      	orrs	r3, r1
 80071a6:	493c      	ldr	r1, [pc, #240]	; (8007298 <MX_LWIP_Init+0x290>)
 80071a8:	78c9      	ldrb	r1, [r1, #3]
 80071aa:	430b      	orrs	r3, r1
 80071ac:	021b      	lsls	r3, r3, #8
 80071ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071b2:	431a      	orrs	r2, r3
 80071b4:	4b38      	ldr	r3, [pc, #224]	; (8007298 <MX_LWIP_Init+0x290>)
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	0619      	lsls	r1, r3, #24
 80071ba:	4b37      	ldr	r3, [pc, #220]	; (8007298 <MX_LWIP_Init+0x290>)
 80071bc:	785b      	ldrb	r3, [r3, #1]
 80071be:	041b      	lsls	r3, r3, #16
 80071c0:	4319      	orrs	r1, r3
 80071c2:	4b35      	ldr	r3, [pc, #212]	; (8007298 <MX_LWIP_Init+0x290>)
 80071c4:	789b      	ldrb	r3, [r3, #2]
 80071c6:	021b      	lsls	r3, r3, #8
 80071c8:	430b      	orrs	r3, r1
 80071ca:	4933      	ldr	r1, [pc, #204]	; (8007298 <MX_LWIP_Init+0x290>)
 80071cc:	78c9      	ldrb	r1, [r1, #3]
 80071ce:	430b      	orrs	r3, r1
 80071d0:	0a1b      	lsrs	r3, r3, #8
 80071d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80071d6:	431a      	orrs	r2, r3
 80071d8:	4b2f      	ldr	r3, [pc, #188]	; (8007298 <MX_LWIP_Init+0x290>)
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	0619      	lsls	r1, r3, #24
 80071de:	4b2e      	ldr	r3, [pc, #184]	; (8007298 <MX_LWIP_Init+0x290>)
 80071e0:	785b      	ldrb	r3, [r3, #1]
 80071e2:	041b      	lsls	r3, r3, #16
 80071e4:	4319      	orrs	r1, r3
 80071e6:	4b2c      	ldr	r3, [pc, #176]	; (8007298 <MX_LWIP_Init+0x290>)
 80071e8:	789b      	ldrb	r3, [r3, #2]
 80071ea:	021b      	lsls	r3, r3, #8
 80071ec:	430b      	orrs	r3, r1
 80071ee:	492a      	ldr	r1, [pc, #168]	; (8007298 <MX_LWIP_Init+0x290>)
 80071f0:	78c9      	ldrb	r1, [r1, #3]
 80071f2:	430b      	orrs	r3, r1
 80071f4:	0e1b      	lsrs	r3, r3, #24
 80071f6:	4313      	orrs	r3, r2
 80071f8:	4a2a      	ldr	r2, [pc, #168]	; (80072a4 <MX_LWIP_Init+0x29c>)
 80071fa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80071fc:	4b2a      	ldr	r3, [pc, #168]	; (80072a8 <MX_LWIP_Init+0x2a0>)
 80071fe:	9302      	str	r3, [sp, #8]
 8007200:	4b2a      	ldr	r3, [pc, #168]	; (80072ac <MX_LWIP_Init+0x2a4>)
 8007202:	9301      	str	r3, [sp, #4]
 8007204:	2300      	movs	r3, #0
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	4b26      	ldr	r3, [pc, #152]	; (80072a4 <MX_LWIP_Init+0x29c>)
 800720a:	4a25      	ldr	r2, [pc, #148]	; (80072a0 <MX_LWIP_Init+0x298>)
 800720c:	4923      	ldr	r1, [pc, #140]	; (800729c <MX_LWIP_Init+0x294>)
 800720e:	4828      	ldr	r0, [pc, #160]	; (80072b0 <MX_LWIP_Init+0x2a8>)
 8007210:	f006 fb90 	bl	800d934 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007214:	4826      	ldr	r0, [pc, #152]	; (80072b0 <MX_LWIP_Init+0x2a8>)
 8007216:	f006 fd3f 	bl	800dc98 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800721a:	4b25      	ldr	r3, [pc, #148]	; (80072b0 <MX_LWIP_Init+0x2a8>)
 800721c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007220:	089b      	lsrs	r3, r3, #2
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b00      	cmp	r3, #0
 800722a:	d003      	beq.n	8007234 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800722c:	4820      	ldr	r0, [pc, #128]	; (80072b0 <MX_LWIP_Init+0x2a8>)
 800722e:	f006 fd43 	bl	800dcb8 <netif_set_up>
 8007232:	e002      	b.n	800723a <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8007234:	481e      	ldr	r0, [pc, #120]	; (80072b0 <MX_LWIP_Init+0x2a8>)
 8007236:	f006 fdab 	bl	800dd90 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800723a:	491e      	ldr	r1, [pc, #120]	; (80072b4 <MX_LWIP_Init+0x2ac>)
 800723c:	481c      	ldr	r0, [pc, #112]	; (80072b0 <MX_LWIP_Init+0x2a8>)
 800723e:	f006 fe3d 	bl	800debc <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8007242:	2300      	movs	r3, #0
 8007244:	623b      	str	r3, [r7, #32]
 8007246:	2300      	movs	r3, #0
 8007248:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800724a:	f107 0320 	add.w	r3, r7, #32
 800724e:	2101      	movs	r1, #1
 8007250:	4618      	mov	r0, r3
 8007252:	f000 fd97 	bl	8007d84 <osSemaphoreCreate>
 8007256:	4603      	mov	r3, r0
 8007258:	4a17      	ldr	r2, [pc, #92]	; (80072b8 <MX_LWIP_Init+0x2b0>)
 800725a:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 800725c:	4b17      	ldr	r3, [pc, #92]	; (80072bc <MX_LWIP_Init+0x2b4>)
 800725e:	4a14      	ldr	r2, [pc, #80]	; (80072b0 <MX_LWIP_Init+0x2a8>)
 8007260:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8007262:	4b15      	ldr	r3, [pc, #84]	; (80072b8 <MX_LWIP_Init+0x2b0>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a15      	ldr	r2, [pc, #84]	; (80072bc <MX_LWIP_Init+0x2b4>)
 8007268:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800726a:	4b15      	ldr	r3, [pc, #84]	; (80072c0 <MX_LWIP_Init+0x2b8>)
 800726c:	1d3c      	adds	r4, r7, #4
 800726e:	461d      	mov	r5, r3
 8007270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007274:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007278:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 800727c:	1d3b      	adds	r3, r7, #4
 800727e:	490f      	ldr	r1, [pc, #60]	; (80072bc <MX_LWIP_Init+0x2b4>)
 8007280:	4618      	mov	r0, r3
 8007282:	f000 fc82 	bl	8007b8a <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007286:	bf00      	nop
 8007288:	3728      	adds	r7, #40	; 0x28
 800728a:	46bd      	mov	sp, r7
 800728c:	bdb0      	pop	{r4, r5, r7, pc}
 800728e:	bf00      	nop
 8007290:	2000b1d8 	.word	0x2000b1d8
 8007294:	2000b1d4 	.word	0x2000b1d4
 8007298:	2000b198 	.word	0x2000b198
 800729c:	2000b1d0 	.word	0x2000b1d0
 80072a0:	2000b1dc 	.word	0x2000b1dc
 80072a4:	2000b1e0 	.word	0x2000b1e0
 80072a8:	0800ac19 	.word	0x0800ac19
 80072ac:	08007919 	.word	0x08007919
 80072b0:	2000b19c 	.word	0x2000b19c
 80072b4:	080079fd 	.word	0x080079fd
 80072b8:	2000108c 	.word	0x2000108c
 80072bc:	2000b190 	.word	0x2000b190
 80072c0:	08019f00 	.word	0x08019f00

080072c4 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b08e      	sub	sp, #56	; 0x38
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072d0:	2200      	movs	r2, #0
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	605a      	str	r2, [r3, #4]
 80072d6:	609a      	str	r2, [r3, #8]
 80072d8:	60da      	str	r2, [r3, #12]
 80072da:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a52      	ldr	r2, [pc, #328]	; (800742c <HAL_ETH_MspInit+0x168>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	f040 809e 	bne.w	8007424 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80072e8:	4b51      	ldr	r3, [pc, #324]	; (8007430 <HAL_ETH_MspInit+0x16c>)
 80072ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ec:	4a50      	ldr	r2, [pc, #320]	; (8007430 <HAL_ETH_MspInit+0x16c>)
 80072ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80072f2:	6313      	str	r3, [r2, #48]	; 0x30
 80072f4:	4b4e      	ldr	r3, [pc, #312]	; (8007430 <HAL_ETH_MspInit+0x16c>)
 80072f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072fc:	623b      	str	r3, [r7, #32]
 80072fe:	6a3b      	ldr	r3, [r7, #32]
 8007300:	4b4b      	ldr	r3, [pc, #300]	; (8007430 <HAL_ETH_MspInit+0x16c>)
 8007302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007304:	4a4a      	ldr	r2, [pc, #296]	; (8007430 <HAL_ETH_MspInit+0x16c>)
 8007306:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800730a:	6313      	str	r3, [r2, #48]	; 0x30
 800730c:	4b48      	ldr	r3, [pc, #288]	; (8007430 <HAL_ETH_MspInit+0x16c>)
 800730e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007310:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007314:	61fb      	str	r3, [r7, #28]
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	4b45      	ldr	r3, [pc, #276]	; (8007430 <HAL_ETH_MspInit+0x16c>)
 800731a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731c:	4a44      	ldr	r2, [pc, #272]	; (8007430 <HAL_ETH_MspInit+0x16c>)
 800731e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007322:	6313      	str	r3, [r2, #48]	; 0x30
 8007324:	4b42      	ldr	r3, [pc, #264]	; (8007430 <HAL_ETH_MspInit+0x16c>)
 8007326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800732c:	61bb      	str	r3, [r7, #24]
 800732e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007330:	4b3f      	ldr	r3, [pc, #252]	; (8007430 <HAL_ETH_MspInit+0x16c>)
 8007332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007334:	4a3e      	ldr	r2, [pc, #248]	; (8007430 <HAL_ETH_MspInit+0x16c>)
 8007336:	f043 0304 	orr.w	r3, r3, #4
 800733a:	6313      	str	r3, [r2, #48]	; 0x30
 800733c:	4b3c      	ldr	r3, [pc, #240]	; (8007430 <HAL_ETH_MspInit+0x16c>)
 800733e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007340:	f003 0304 	and.w	r3, r3, #4
 8007344:	617b      	str	r3, [r7, #20]
 8007346:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007348:	4b39      	ldr	r3, [pc, #228]	; (8007430 <HAL_ETH_MspInit+0x16c>)
 800734a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734c:	4a38      	ldr	r2, [pc, #224]	; (8007430 <HAL_ETH_MspInit+0x16c>)
 800734e:	f043 0301 	orr.w	r3, r3, #1
 8007352:	6313      	str	r3, [r2, #48]	; 0x30
 8007354:	4b36      	ldr	r3, [pc, #216]	; (8007430 <HAL_ETH_MspInit+0x16c>)
 8007356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	613b      	str	r3, [r7, #16]
 800735e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007360:	4b33      	ldr	r3, [pc, #204]	; (8007430 <HAL_ETH_MspInit+0x16c>)
 8007362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007364:	4a32      	ldr	r2, [pc, #200]	; (8007430 <HAL_ETH_MspInit+0x16c>)
 8007366:	f043 0302 	orr.w	r3, r3, #2
 800736a:	6313      	str	r3, [r2, #48]	; 0x30
 800736c:	4b30      	ldr	r3, [pc, #192]	; (8007430 <HAL_ETH_MspInit+0x16c>)
 800736e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007370:	f003 0302 	and.w	r3, r3, #2
 8007374:	60fb      	str	r3, [r7, #12]
 8007376:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007378:	4b2d      	ldr	r3, [pc, #180]	; (8007430 <HAL_ETH_MspInit+0x16c>)
 800737a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737c:	4a2c      	ldr	r2, [pc, #176]	; (8007430 <HAL_ETH_MspInit+0x16c>)
 800737e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007382:	6313      	str	r3, [r2, #48]	; 0x30
 8007384:	4b2a      	ldr	r3, [pc, #168]	; (8007430 <HAL_ETH_MspInit+0x16c>)
 8007386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738c:	60bb      	str	r3, [r7, #8]
 800738e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8007390:	2332      	movs	r3, #50	; 0x32
 8007392:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007394:	2302      	movs	r3, #2
 8007396:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007398:	2300      	movs	r3, #0
 800739a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800739c:	2303      	movs	r3, #3
 800739e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80073a0:	230b      	movs	r3, #11
 80073a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80073a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073a8:	4619      	mov	r1, r3
 80073aa:	4822      	ldr	r0, [pc, #136]	; (8007434 <HAL_ETH_MspInit+0x170>)
 80073ac:	f7fc fef2 	bl	8004194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80073b0:	2386      	movs	r3, #134	; 0x86
 80073b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073b4:	2302      	movs	r3, #2
 80073b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073b8:	2300      	movs	r3, #0
 80073ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073bc:	2303      	movs	r3, #3
 80073be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80073c0:	230b      	movs	r3, #11
 80073c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073c8:	4619      	mov	r1, r3
 80073ca:	481b      	ldr	r0, [pc, #108]	; (8007438 <HAL_ETH_MspInit+0x174>)
 80073cc:	f7fc fee2 	bl	8004194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80073d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80073d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073d6:	2302      	movs	r3, #2
 80073d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073da:	2300      	movs	r3, #0
 80073dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073de:	2303      	movs	r3, #3
 80073e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80073e2:	230b      	movs	r3, #11
 80073e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80073e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073ea:	4619      	mov	r1, r3
 80073ec:	4813      	ldr	r0, [pc, #76]	; (800743c <HAL_ETH_MspInit+0x178>)
 80073ee:	f7fc fed1 	bl	8004194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80073f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80073f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073f8:	2302      	movs	r3, #2
 80073fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073fc:	2300      	movs	r3, #0
 80073fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007400:	2303      	movs	r3, #3
 8007402:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007404:	230b      	movs	r3, #11
 8007406:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800740c:	4619      	mov	r1, r3
 800740e:	480c      	ldr	r0, [pc, #48]	; (8007440 <HAL_ETH_MspInit+0x17c>)
 8007410:	f7fc fec0 	bl	8004194 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8007414:	2200      	movs	r2, #0
 8007416:	2105      	movs	r1, #5
 8007418:	203d      	movs	r0, #61	; 0x3d
 800741a:	f7fb fd0d 	bl	8002e38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800741e:	203d      	movs	r0, #61	; 0x3d
 8007420:	f7fb fd26 	bl	8002e70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007424:	bf00      	nop
 8007426:	3738      	adds	r7, #56	; 0x38
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	40028000 	.word	0x40028000
 8007430:	40023800 	.word	0x40023800
 8007434:	40020800 	.word	0x40020800
 8007438:	40020000 	.word	0x40020000
 800743c:	40020400 	.word	0x40020400
 8007440:	40021800 	.word	0x40021800

08007444 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800744c:	4b04      	ldr	r3, [pc, #16]	; (8007460 <HAL_ETH_RxCpltCallback+0x1c>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4618      	mov	r0, r3
 8007452:	f000 fd17 	bl	8007e84 <osSemaphoreRelease>
}
 8007456:	bf00      	nop
 8007458:	3708      	adds	r7, #8
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	20001090 	.word	0x20001090

08007464 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007464:	b5b0      	push	{r4, r5, r7, lr}
 8007466:	b090      	sub	sp, #64	; 0x40
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800746c:	2300      	movs	r3, #0
 800746e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007470:	4b60      	ldr	r3, [pc, #384]	; (80075f4 <low_level_init+0x190>)
 8007472:	4a61      	ldr	r2, [pc, #388]	; (80075f8 <low_level_init+0x194>)
 8007474:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8007476:	4b5f      	ldr	r3, [pc, #380]	; (80075f4 <low_level_init+0x190>)
 8007478:	2201      	movs	r2, #1
 800747a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800747c:	4b5d      	ldr	r3, [pc, #372]	; (80075f4 <low_level_init+0x190>)
 800747e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007482:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007484:	4b5b      	ldr	r3, [pc, #364]	; (80075f4 <low_level_init+0x190>)
 8007486:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800748a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800748c:	4b59      	ldr	r3, [pc, #356]	; (80075f4 <low_level_init+0x190>)
 800748e:	2200      	movs	r2, #0
 8007490:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8007492:	2300      	movs	r3, #0
 8007494:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8007498:	2380      	movs	r3, #128	; 0x80
 800749a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800749e:	23e1      	movs	r3, #225	; 0xe1
 80074a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 80074a4:	2300      	movs	r3, #0
 80074a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 80074aa:	2300      	movs	r3, #0
 80074ac:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 80074b0:	2300      	movs	r3, #0
 80074b2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 80074b6:	4a4f      	ldr	r2, [pc, #316]	; (80075f4 <low_level_init+0x190>)
 80074b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80074bc:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80074be:	4b4d      	ldr	r3, [pc, #308]	; (80075f4 <low_level_init+0x190>)
 80074c0:	2201      	movs	r2, #1
 80074c2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80074c4:	4b4b      	ldr	r3, [pc, #300]	; (80075f4 <low_level_init+0x190>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80074ca:	4b4a      	ldr	r3, [pc, #296]	; (80075f4 <low_level_init+0x190>)
 80074cc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80074d0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80074d2:	4848      	ldr	r0, [pc, #288]	; (80075f4 <low_level_init+0x190>)
 80074d4:	f7fb fcda 	bl	8002e8c <HAL_ETH_Init>
 80074d8:	4603      	mov	r3, r0
 80074da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80074de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d108      	bne.n	80074f8 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80074ec:	f043 0304 	orr.w	r3, r3, #4
 80074f0:	b2da      	uxtb	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80074f8:	2304      	movs	r3, #4
 80074fa:	4a40      	ldr	r2, [pc, #256]	; (80075fc <low_level_init+0x198>)
 80074fc:	4940      	ldr	r1, [pc, #256]	; (8007600 <low_level_init+0x19c>)
 80074fe:	483d      	ldr	r0, [pc, #244]	; (80075f4 <low_level_init+0x190>)
 8007500:	f7fb fe5e 	bl	80031c0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8007504:	2304      	movs	r3, #4
 8007506:	4a3f      	ldr	r2, [pc, #252]	; (8007604 <low_level_init+0x1a0>)
 8007508:	493f      	ldr	r1, [pc, #252]	; (8007608 <low_level_init+0x1a4>)
 800750a:	483a      	ldr	r0, [pc, #232]	; (80075f4 <low_level_init+0x190>)
 800750c:	f7fb fec1 	bl	8003292 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2206      	movs	r2, #6
 8007514:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007518:	4b36      	ldr	r3, [pc, #216]	; (80075f4 <low_level_init+0x190>)
 800751a:	695b      	ldr	r3, [r3, #20]
 800751c:	781a      	ldrb	r2, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007524:	4b33      	ldr	r3, [pc, #204]	; (80075f4 <low_level_init+0x190>)
 8007526:	695b      	ldr	r3, [r3, #20]
 8007528:	785a      	ldrb	r2, [r3, #1]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007530:	4b30      	ldr	r3, [pc, #192]	; (80075f4 <low_level_init+0x190>)
 8007532:	695b      	ldr	r3, [r3, #20]
 8007534:	789a      	ldrb	r2, [r3, #2]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800753c:	4b2d      	ldr	r3, [pc, #180]	; (80075f4 <low_level_init+0x190>)
 800753e:	695b      	ldr	r3, [r3, #20]
 8007540:	78da      	ldrb	r2, [r3, #3]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007548:	4b2a      	ldr	r3, [pc, #168]	; (80075f4 <low_level_init+0x190>)
 800754a:	695b      	ldr	r3, [r3, #20]
 800754c:	791a      	ldrb	r2, [r3, #4]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007554:	4b27      	ldr	r3, [pc, #156]	; (80075f4 <low_level_init+0x190>)
 8007556:	695b      	ldr	r3, [r3, #20]
 8007558:	795a      	ldrb	r2, [r3, #5]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007566:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800756e:	f043 030a 	orr.w	r3, r3, #10
 8007572:	b2da      	uxtb	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800757a:	2300      	movs	r3, #0
 800757c:	62bb      	str	r3, [r7, #40]	; 0x28
 800757e:	2300      	movs	r3, #0
 8007580:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8007582:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007586:	2101      	movs	r1, #1
 8007588:	4618      	mov	r0, r3
 800758a:	f000 fbfb 	bl	8007d84 <osSemaphoreCreate>
 800758e:	4603      	mov	r3, r0
 8007590:	4a1e      	ldr	r2, [pc, #120]	; (800760c <low_level_init+0x1a8>)
 8007592:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8007594:	4b1e      	ldr	r3, [pc, #120]	; (8007610 <low_level_init+0x1ac>)
 8007596:	f107 040c 	add.w	r4, r7, #12
 800759a:	461d      	mov	r5, r3
 800759c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800759e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80075a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80075a8:	f107 030c 	add.w	r3, r7, #12
 80075ac:	6879      	ldr	r1, [r7, #4]
 80075ae:	4618      	mov	r0, r3
 80075b0:	f000 faeb 	bl	8007b8a <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80075b4:	480f      	ldr	r0, [pc, #60]	; (80075f4 <low_level_init+0x190>)
 80075b6:	f7fc f994 	bl	80038e2 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80075ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80075be:	461a      	mov	r2, r3
 80075c0:	211d      	movs	r1, #29
 80075c2:	480c      	ldr	r0, [pc, #48]	; (80075f4 <low_level_init+0x190>)
 80075c4:	f7fc f8bf 	bl	8003746 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80075c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075ca:	f043 030b 	orr.w	r3, r3, #11
 80075ce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80075d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d2:	461a      	mov	r2, r3
 80075d4:	211d      	movs	r1, #29
 80075d6:	4807      	ldr	r0, [pc, #28]	; (80075f4 <low_level_init+0x190>)
 80075d8:	f7fc f91d 	bl	8003816 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80075dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80075e0:	461a      	mov	r2, r3
 80075e2:	211d      	movs	r1, #29
 80075e4:	4803      	ldr	r0, [pc, #12]	; (80075f4 <low_level_init+0x190>)
 80075e6:	f7fc f8ae 	bl	8003746 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80075ea:	bf00      	nop
 80075ec:	3740      	adds	r7, #64	; 0x40
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bdb0      	pop	{r4, r5, r7, pc}
 80075f2:	bf00      	nop
 80075f4:	2000cab4 	.word	0x2000cab4
 80075f8:	40028000 	.word	0x40028000
 80075fc:	2000cafc 	.word	0x2000cafc
 8007600:	2000b1e4 	.word	0x2000b1e4
 8007604:	2000b264 	.word	0x2000b264
 8007608:	2000ca34 	.word	0x2000ca34
 800760c:	20001090 	.word	0x20001090
 8007610:	08019f24 	.word	0x08019f24

08007614 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b08a      	sub	sp, #40	; 0x28
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800761e:	4b4b      	ldr	r3, [pc, #300]	; (800774c <low_level_output+0x138>)
 8007620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8007626:	2300      	movs	r3, #0
 8007628:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800762a:	2300      	movs	r3, #0
 800762c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800762e:	2300      	movs	r3, #0
 8007630:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8007632:	2300      	movs	r3, #0
 8007634:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8007636:	4b45      	ldr	r3, [pc, #276]	; (800774c <low_level_output+0x138>)
 8007638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800763c:	2300      	movs	r3, #0
 800763e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	623b      	str	r3, [r7, #32]
 8007644:	e05a      	b.n	80076fc <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	da03      	bge.n	8007656 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800764e:	23f8      	movs	r3, #248	; 0xf8
 8007650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8007654:	e05c      	b.n	8007710 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	895b      	ldrh	r3, [r3, #10]
 800765a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800765c:	2300      	movs	r3, #0
 800765e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007660:	e02f      	b.n	80076c2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8007662:	69fa      	ldr	r2, [r7, #28]
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	18d0      	adds	r0, r2, r3
 8007668:	6a3b      	ldr	r3, [r7, #32]
 800766a:	685a      	ldr	r2, [r3, #4]
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	18d1      	adds	r1, r2, r3
 8007670:	693a      	ldr	r2, [r7, #16]
 8007672:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8007676:	1a9b      	subs	r3, r3, r2
 8007678:	461a      	mov	r2, r3
 800767a:	f010 fb07 	bl	8017c8c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2b00      	cmp	r3, #0
 800768a:	da03      	bge.n	8007694 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800768c:	23f8      	movs	r3, #248	; 0xf8
 800768e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8007692:	e03d      	b.n	8007710 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800769a:	693a      	ldr	r2, [r7, #16]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	4413      	add	r3, r2
 80076a0:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80076a4:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	1ad3      	subs	r3, r2, r3
 80076ac:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80076b0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80076bc:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80076be:	2300      	movs	r3, #0
 80076c0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	4413      	add	r3, r2
 80076c8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d8c8      	bhi.n	8007662 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80076d0:	69fa      	ldr	r2, [r7, #28]
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	18d0      	adds	r0, r2, r3
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	685a      	ldr	r2, [r3, #4]
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	4413      	add	r3, r2
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	4619      	mov	r1, r3
 80076e2:	f010 fad3 	bl	8017c8c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80076e6:	693a      	ldr	r2, [r7, #16]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	4413      	add	r3, r2
 80076ec:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80076ee:	697a      	ldr	r2, [r7, #20]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	4413      	add	r3, r2
 80076f4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80076f6:	6a3b      	ldr	r3, [r7, #32]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	623b      	str	r3, [r7, #32]
 80076fc:	6a3b      	ldr	r3, [r7, #32]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1a1      	bne.n	8007646 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8007702:	6979      	ldr	r1, [r7, #20]
 8007704:	4811      	ldr	r0, [pc, #68]	; (800774c <low_level_output+0x138>)
 8007706:	f7fb fe31 	bl	800336c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8007710:	4b0e      	ldr	r3, [pc, #56]	; (800774c <low_level_output+0x138>)
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	f241 0314 	movw	r3, #4116	; 0x1014
 8007718:	4413      	add	r3, r2
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 0320 	and.w	r3, r3, #32
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00d      	beq.n	8007740 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8007724:	4b09      	ldr	r3, [pc, #36]	; (800774c <low_level_output+0x138>)
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	f241 0314 	movw	r3, #4116	; 0x1014
 800772c:	4413      	add	r3, r2
 800772e:	2220      	movs	r2, #32
 8007730:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8007732:	4b06      	ldr	r3, [pc, #24]	; (800774c <low_level_output+0x138>)
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	f241 0304 	movw	r3, #4100	; 0x1004
 800773a:	4413      	add	r3, r2
 800773c:	2200      	movs	r2, #0
 800773e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8007740:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007744:	4618      	mov	r0, r3
 8007746:	3728      	adds	r7, #40	; 0x28
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	2000cab4 	.word	0x2000cab4

08007750 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b08c      	sub	sp, #48	; 0x30
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007758:	2300      	movs	r3, #0
 800775a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800775c:	2300      	movs	r3, #0
 800775e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8007760:	2300      	movs	r3, #0
 8007762:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8007764:	2300      	movs	r3, #0
 8007766:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8007768:	2300      	movs	r3, #0
 800776a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800776c:	2300      	movs	r3, #0
 800776e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8007770:	2300      	movs	r3, #0
 8007772:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8007774:	484f      	ldr	r0, [pc, #316]	; (80078b4 <low_level_input+0x164>)
 8007776:	f7fb fee3 	bl	8003540 <HAL_ETH_GetReceivedFrame_IT>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <low_level_input+0x34>

    return NULL;
 8007780:	2300      	movs	r3, #0
 8007782:	e092      	b.n	80078aa <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8007784:	4b4b      	ldr	r3, [pc, #300]	; (80078b4 <low_level_input+0x164>)
 8007786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007788:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800778a:	4b4a      	ldr	r3, [pc, #296]	; (80078b4 <low_level_input+0x164>)
 800778c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8007790:	89fb      	ldrh	r3, [r7, #14]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d007      	beq.n	80077a6 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8007796:	89fb      	ldrh	r3, [r7, #14]
 8007798:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800779c:	4619      	mov	r1, r3
 800779e:	2000      	movs	r0, #0
 80077a0:	f006 fc56 	bl	800e050 <pbuf_alloc>
 80077a4:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80077a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d04b      	beq.n	8007844 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80077ac:	4b41      	ldr	r3, [pc, #260]	; (80078b4 <low_level_input+0x164>)
 80077ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80077b2:	2300      	movs	r3, #0
 80077b4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80077b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80077ba:	e040      	b.n	800783e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80077bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077be:	895b      	ldrh	r3, [r3, #10]
 80077c0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80077c2:	2300      	movs	r3, #0
 80077c4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80077c6:	e021      	b.n	800780c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80077c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ca:	685a      	ldr	r2, [r3, #4]
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	18d0      	adds	r0, r2, r3
 80077d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	18d1      	adds	r1, r2, r3
 80077d6:	69fa      	ldr	r2, [r7, #28]
 80077d8:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80077dc:	1a9b      	subs	r3, r3, r2
 80077de:	461a      	mov	r2, r3
 80077e0:	f010 fa54 	bl	8017c8c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80077e4:	6a3b      	ldr	r3, [r7, #32]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80077ea:	6a3b      	ldr	r3, [r7, #32]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80077f0:	69fa      	ldr	r2, [r7, #28]
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	4413      	add	r3, r2
 80077f6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80077fa:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007806:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8007808:	2300      	movs	r3, #0
 800780a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800780c:	697a      	ldr	r2, [r7, #20]
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	4413      	add	r3, r2
 8007812:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007816:	4293      	cmp	r3, r2
 8007818:	d8d6      	bhi.n	80077c8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800781a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800781c:	685a      	ldr	r2, [r3, #4]
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	18d0      	adds	r0, r2, r3
 8007822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	4413      	add	r3, r2
 8007828:	697a      	ldr	r2, [r7, #20]
 800782a:	4619      	mov	r1, r3
 800782c:	f010 fa2e 	bl	8017c8c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007830:	69fa      	ldr	r2, [r7, #28]
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	4413      	add	r3, r2
 8007836:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	62bb      	str	r3, [r7, #40]	; 0x28
 800783e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1bb      	bne.n	80077bc <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007844:	4b1b      	ldr	r3, [pc, #108]	; (80078b4 <low_level_input+0x164>)
 8007846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007848:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800784a:	2300      	movs	r3, #0
 800784c:	613b      	str	r3, [r7, #16]
 800784e:	e00b      	b.n	8007868 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8007850:	6a3b      	ldr	r3, [r7, #32]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007858:	6a3b      	ldr	r3, [r7, #32]
 800785a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800785c:	6a3b      	ldr	r3, [r7, #32]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	3301      	adds	r3, #1
 8007866:	613b      	str	r3, [r7, #16]
 8007868:	4b12      	ldr	r3, [pc, #72]	; (80078b4 <low_level_input+0x164>)
 800786a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786c:	693a      	ldr	r2, [r7, #16]
 800786e:	429a      	cmp	r2, r3
 8007870:	d3ee      	bcc.n	8007850 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8007872:	4b10      	ldr	r3, [pc, #64]	; (80078b4 <low_level_input+0x164>)
 8007874:	2200      	movs	r2, #0
 8007876:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8007878:	4b0e      	ldr	r3, [pc, #56]	; (80078b4 <low_level_input+0x164>)
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	f241 0314 	movw	r3, #4116	; 0x1014
 8007880:	4413      	add	r3, r2
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00d      	beq.n	80078a8 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800788c:	4b09      	ldr	r3, [pc, #36]	; (80078b4 <low_level_input+0x164>)
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	f241 0314 	movw	r3, #4116	; 0x1014
 8007894:	4413      	add	r3, r2
 8007896:	2280      	movs	r2, #128	; 0x80
 8007898:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800789a:	4b06      	ldr	r3, [pc, #24]	; (80078b4 <low_level_input+0x164>)
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	f241 0308 	movw	r3, #4104	; 0x1008
 80078a2:	4413      	add	r3, r2
 80078a4:	2200      	movs	r2, #0
 80078a6:	601a      	str	r2, [r3, #0]
  }
  return p;
 80078a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3730      	adds	r7, #48	; 0x30
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	2000cab4 	.word	0x2000cab4

080078b8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80078c4:	4b12      	ldr	r3, [pc, #72]	; (8007910 <ethernetif_input+0x58>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80078cc:	4618      	mov	r0, r3
 80078ce:	f000 fa8b 	bl	8007de8 <osSemaphoreWait>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d1f5      	bne.n	80078c4 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 80078d8:	480e      	ldr	r0, [pc, #56]	; (8007914 <ethernetif_input+0x5c>)
 80078da:	f010 f837 	bl	801794c <sys_mutex_lock>
        p = low_level_input( netif );
 80078de:	68f8      	ldr	r0, [r7, #12]
 80078e0:	f7ff ff36 	bl	8007750 <low_level_input>
 80078e4:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00a      	beq.n	8007902 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	68f9      	ldr	r1, [r7, #12]
 80078f2:	68b8      	ldr	r0, [r7, #8]
 80078f4:	4798      	blx	r3
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d002      	beq.n	8007902 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80078fc:	68b8      	ldr	r0, [r7, #8]
 80078fe:	f006 fe8b 	bl	800e618 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8007902:	4804      	ldr	r0, [pc, #16]	; (8007914 <ethernetif_input+0x5c>)
 8007904:	f010 f831 	bl	801796a <sys_mutex_unlock>
      } while(p!=NULL);
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1e4      	bne.n	80078d8 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800790e:	e7d9      	b.n	80078c4 <ethernetif_input+0xc>
 8007910:	20001090 	.word	0x20001090
 8007914:	2000e2cc 	.word	0x2000e2cc

08007918 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d106      	bne.n	8007934 <ethernetif_init+0x1c>
 8007926:	4b0e      	ldr	r3, [pc, #56]	; (8007960 <ethernetif_init+0x48>)
 8007928:	f240 2236 	movw	r2, #566	; 0x236
 800792c:	490d      	ldr	r1, [pc, #52]	; (8007964 <ethernetif_init+0x4c>)
 800792e:	480e      	ldr	r0, [pc, #56]	; (8007968 <ethernetif_init+0x50>)
 8007930:	f010 fa86 	bl	8017e40 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2273      	movs	r2, #115	; 0x73
 8007938:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2274      	movs	r2, #116	; 0x74
 8007940:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a09      	ldr	r2, [pc, #36]	; (800796c <ethernetif_init+0x54>)
 8007948:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a08      	ldr	r2, [pc, #32]	; (8007970 <ethernetif_init+0x58>)
 800794e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f7ff fd87 	bl	8007464 <low_level_init>

  return ERR_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3708      	adds	r7, #8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}
 8007960:	08019f40 	.word	0x08019f40
 8007964:	08019f5c 	.word	0x08019f5c
 8007968:	08019f6c 	.word	0x08019f6c
 800796c:	08015af9 	.word	0x08015af9
 8007970:	08007615 	.word	0x08007615

08007974 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007978:	f7fb f976 	bl	8002c68 <HAL_GetTick>
 800797c:	4603      	mov	r3, r0
}
 800797e:	4618      	mov	r0, r3
 8007980:	bd80      	pop	{r7, pc}
	...

08007984 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800798c:	2300      	movs	r3, #0
 800798e:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8007994:	f107 0308 	add.w	r3, r7, #8
 8007998:	461a      	mov	r2, r3
 800799a:	2101      	movs	r1, #1
 800799c:	4816      	ldr	r0, [pc, #88]	; (80079f8 <ethernetif_set_link+0x74>)
 800799e:	f7fb fed2 	bl	8003746 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	f003 0304 	and.w	r3, r3, #4
 80079a8:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80079b2:	f003 0304 	and.w	r3, r3, #4
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d108      	bne.n	80079cc <ethernetif_set_link+0x48>
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d005      	beq.n	80079cc <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4618      	mov	r0, r3
 80079c6:	f006 fa15 	bl	800ddf4 <netif_set_link_up>
 80079ca:	e011      	b.n	80079f0 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80079d4:	089b      	lsrs	r3, r3, #2
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d007      	beq.n	80079f0 <ethernetif_set_link+0x6c>
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d104      	bne.n	80079f0 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4618      	mov	r0, r3
 80079ec:	f006 fa36 	bl	800de5c <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 80079f0:	20c8      	movs	r0, #200	; 0xc8
 80079f2:	f000 f916 	bl	8007c22 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80079f6:	e7cd      	b.n	8007994 <ethernetif_set_link+0x10>
 80079f8:	2000cab4 	.word	0x2000cab4

080079fc <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8007a04:	2300      	movs	r3, #0
 8007a06:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007a12:	089b      	lsrs	r3, r3, #2
 8007a14:	f003 0301 	and.w	r3, r3, #1
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d05d      	beq.n	8007ada <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8007a1e:	4b34      	ldr	r3, [pc, #208]	; (8007af0 <ethernetif_update_config+0xf4>)
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d03f      	beq.n	8007aa6 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8007a26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	4830      	ldr	r0, [pc, #192]	; (8007af0 <ethernetif_update_config+0xf4>)
 8007a2e:	f7fb fef2 	bl	8003816 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8007a32:	f7fb f919 	bl	8002c68 <HAL_GetTick>
 8007a36:	4603      	mov	r3, r0
 8007a38:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8007a3a:	f107 0308 	add.w	r3, r7, #8
 8007a3e:	461a      	mov	r2, r3
 8007a40:	2101      	movs	r1, #1
 8007a42:	482b      	ldr	r0, [pc, #172]	; (8007af0 <ethernetif_update_config+0xf4>)
 8007a44:	f7fb fe7f 	bl	8003746 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8007a48:	f7fb f90e 	bl	8002c68 <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a56:	d828      	bhi.n	8007aaa <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	f003 0320 	and.w	r3, r3, #32
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d0eb      	beq.n	8007a3a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8007a62:	f107 0308 	add.w	r3, r7, #8
 8007a66:	461a      	mov	r2, r3
 8007a68:	2110      	movs	r1, #16
 8007a6a:	4821      	ldr	r0, [pc, #132]	; (8007af0 <ethernetif_update_config+0xf4>)
 8007a6c:	f7fb fe6b 	bl	8003746 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	f003 0304 	and.w	r3, r3, #4
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d004      	beq.n	8007a84 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007a7a:	4b1d      	ldr	r3, [pc, #116]	; (8007af0 <ethernetif_update_config+0xf4>)
 8007a7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a80:	60da      	str	r2, [r3, #12]
 8007a82:	e002      	b.n	8007a8a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8007a84:	4b1a      	ldr	r3, [pc, #104]	; (8007af0 <ethernetif_update_config+0xf4>)
 8007a86:	2200      	movs	r2, #0
 8007a88:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	f003 0302 	and.w	r3, r3, #2
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d003      	beq.n	8007a9c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8007a94:	4b16      	ldr	r3, [pc, #88]	; (8007af0 <ethernetif_update_config+0xf4>)
 8007a96:	2200      	movs	r2, #0
 8007a98:	609a      	str	r2, [r3, #8]
 8007a9a:	e016      	b.n	8007aca <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8007a9c:	4b14      	ldr	r3, [pc, #80]	; (8007af0 <ethernetif_update_config+0xf4>)
 8007a9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007aa2:	609a      	str	r2, [r3, #8]
 8007aa4:	e011      	b.n	8007aca <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8007aa6:	bf00      	nop
 8007aa8:	e000      	b.n	8007aac <ethernetif_update_config+0xb0>
          goto error;
 8007aaa:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007aac:	4b10      	ldr	r3, [pc, #64]	; (8007af0 <ethernetif_update_config+0xf4>)
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	08db      	lsrs	r3, r3, #3
 8007ab2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8007ab4:	4b0e      	ldr	r3, [pc, #56]	; (8007af0 <ethernetif_update_config+0xf4>)
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	085b      	lsrs	r3, r3, #1
 8007aba:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007abc:	4313      	orrs	r3, r2
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	480a      	ldr	r0, [pc, #40]	; (8007af0 <ethernetif_update_config+0xf4>)
 8007ac6:	f7fb fea6 	bl	8003816 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8007aca:	2100      	movs	r1, #0
 8007acc:	4808      	ldr	r0, [pc, #32]	; (8007af0 <ethernetif_update_config+0xf4>)
 8007ace:	f7fb ff67 	bl	80039a0 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8007ad2:	4807      	ldr	r0, [pc, #28]	; (8007af0 <ethernetif_update_config+0xf4>)
 8007ad4:	f7fb ff05 	bl	80038e2 <HAL_ETH_Start>
 8007ad8:	e002      	b.n	8007ae0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8007ada:	4805      	ldr	r0, [pc, #20]	; (8007af0 <ethernetif_update_config+0xf4>)
 8007adc:	f7fb ff30 	bl	8003940 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 f807 	bl	8007af4 <ethernetif_notify_conn_changed>
}
 8007ae6:	bf00      	nop
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	2000cab4 	.word	0x2000cab4

08007af4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8007afc:	bf00      	nop
 8007afe:	370c      	adds	r7, #12
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	4603      	mov	r3, r0
 8007b10:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007b12:	2300      	movs	r3, #0
 8007b14:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007b16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b1a:	2b84      	cmp	r3, #132	; 0x84
 8007b1c:	d005      	beq.n	8007b2a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007b1e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	4413      	add	r3, r2
 8007b26:	3303      	adds	r3, #3
 8007b28:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3714      	adds	r7, #20
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b3e:	f3ef 8305 	mrs	r3, IPSR
 8007b42:	607b      	str	r3, [r7, #4]
  return(result);
 8007b44:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	bf14      	ite	ne
 8007b4a:	2301      	movne	r3, #1
 8007b4c:	2300      	moveq	r3, #0
 8007b4e:	b2db      	uxtb	r3, r3
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007b60:	f001 fcbc 	bl	80094dc <vTaskStartScheduler>
  
  return osOK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8007b6e:	f7ff ffe3 	bl	8007b38 <inHandlerMode>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d003      	beq.n	8007b80 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007b78:	f001 fdda 	bl	8009730 <xTaskGetTickCountFromISR>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	e002      	b.n	8007b86 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8007b80:	f001 fdc6 	bl	8009710 <xTaskGetTickCount>
 8007b84:	4603      	mov	r3, r0
  }
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007b8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b8c:	b089      	sub	sp, #36	; 0x24
 8007b8e:	af04      	add	r7, sp, #16
 8007b90:	6078      	str	r0, [r7, #4]
 8007b92:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	695b      	ldr	r3, [r3, #20]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d020      	beq.n	8007bde <osThreadCreate+0x54>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	699b      	ldr	r3, [r3, #24]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d01c      	beq.n	8007bde <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	685c      	ldr	r4, [r3, #4]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681d      	ldr	r5, [r3, #0]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	691e      	ldr	r6, [r3, #16]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7ff ffa6 	bl	8007b08 <makeFreeRtosPriority>
 8007bbc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	695b      	ldr	r3, [r3, #20]
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007bc6:	9202      	str	r2, [sp, #8]
 8007bc8:	9301      	str	r3, [sp, #4]
 8007bca:	9100      	str	r1, [sp, #0]
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	4632      	mov	r2, r6
 8007bd0:	4629      	mov	r1, r5
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f001 fa9a 	bl	800910c <xTaskCreateStatic>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	60fb      	str	r3, [r7, #12]
 8007bdc:	e01c      	b.n	8007c18 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	685c      	ldr	r4, [r3, #4]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007bea:	b29e      	uxth	r6, r3
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7ff ff88 	bl	8007b08 <makeFreeRtosPriority>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	f107 030c 	add.w	r3, r7, #12
 8007bfe:	9301      	str	r3, [sp, #4]
 8007c00:	9200      	str	r2, [sp, #0]
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	4632      	mov	r2, r6
 8007c06:	4629      	mov	r1, r5
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f001 fae2 	bl	80091d2 <xTaskCreate>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d001      	beq.n	8007c18 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007c14:	2300      	movs	r3, #0
 8007c16:	e000      	b.n	8007c1a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007c18:	68fb      	ldr	r3, [r7, #12]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c22 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b084      	sub	sp, #16
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d001      	beq.n	8007c38 <osDelay+0x16>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	e000      	b.n	8007c3a <osDelay+0x18>
 8007c38:	2301      	movs	r3, #1
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f001 fc18 	bl	8009470 <vTaskDelay>
  
  return osOK;
 8007c40:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b082      	sub	sp, #8
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d007      	beq.n	8007c6a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	4619      	mov	r1, r3
 8007c60:	2001      	movs	r0, #1
 8007c62:	f000 fc54 	bl	800850e <xQueueCreateMutexStatic>
 8007c66:	4603      	mov	r3, r0
 8007c68:	e003      	b.n	8007c72 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8007c6a:	2001      	movs	r0, #1
 8007c6c:	f000 fc37 	bl	80084de <xQueueCreateMutex>
 8007c70:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3708      	adds	r7, #8
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
	...

08007c7c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007c86:	2300      	movs	r3, #0
 8007c88:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d101      	bne.n	8007c94 <osMutexWait+0x18>
    return osErrorParameter;
 8007c90:	2380      	movs	r3, #128	; 0x80
 8007c92:	e03a      	b.n	8007d0a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8007c94:	2300      	movs	r3, #0
 8007c96:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c9e:	d103      	bne.n	8007ca8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007ca0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ca4:	60fb      	str	r3, [r7, #12]
 8007ca6:	e009      	b.n	8007cbc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d006      	beq.n	8007cbc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d101      	bne.n	8007cbc <osMutexWait+0x40>
      ticks = 1;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007cbc:	f7ff ff3c 	bl	8007b38 <inHandlerMode>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d017      	beq.n	8007cf6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007cc6:	f107 0308 	add.w	r3, r7, #8
 8007cca:	461a      	mov	r2, r3
 8007ccc:	2100      	movs	r1, #0
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f001 f86e 	bl	8008db0 <xQueueReceiveFromISR>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d001      	beq.n	8007cde <osMutexWait+0x62>
      return osErrorOS;
 8007cda:	23ff      	movs	r3, #255	; 0xff
 8007cdc:	e015      	b.n	8007d0a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d011      	beq.n	8007d08 <osMutexWait+0x8c>
 8007ce4:	4b0b      	ldr	r3, [pc, #44]	; (8007d14 <osMutexWait+0x98>)
 8007ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cea:	601a      	str	r2, [r3, #0]
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	f3bf 8f6f 	isb	sy
 8007cf4:	e008      	b.n	8007d08 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8007cf6:	68f9      	ldr	r1, [r7, #12]
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 ff45 	bl	8008b88 <xQueueSemaphoreTake>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d001      	beq.n	8007d08 <osMutexWait+0x8c>
    return osErrorOS;
 8007d04:	23ff      	movs	r3, #255	; 0xff
 8007d06:	e000      	b.n	8007d0a <osMutexWait+0x8e>
  }
  
  return osOK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	e000ed04 	.word	0xe000ed04

08007d18 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007d20:	2300      	movs	r3, #0
 8007d22:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007d24:	2300      	movs	r3, #0
 8007d26:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8007d28:	f7ff ff06 	bl	8007b38 <inHandlerMode>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d016      	beq.n	8007d60 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007d32:	f107 0308 	add.w	r3, r7, #8
 8007d36:	4619      	mov	r1, r3
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fda9 	bl	8008890 <xQueueGiveFromISR>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d001      	beq.n	8007d48 <osMutexRelease+0x30>
      return osErrorOS;
 8007d44:	23ff      	movs	r3, #255	; 0xff
 8007d46:	e017      	b.n	8007d78 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d013      	beq.n	8007d76 <osMutexRelease+0x5e>
 8007d4e:	4b0c      	ldr	r3, [pc, #48]	; (8007d80 <osMutexRelease+0x68>)
 8007d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d54:	601a      	str	r2, [r3, #0]
 8007d56:	f3bf 8f4f 	dsb	sy
 8007d5a:	f3bf 8f6f 	isb	sy
 8007d5e:	e00a      	b.n	8007d76 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8007d60:	2300      	movs	r3, #0
 8007d62:	2200      	movs	r2, #0
 8007d64:	2100      	movs	r1, #0
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fbec 	bl	8008544 <xQueueGenericSend>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d001      	beq.n	8007d76 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8007d72:	23ff      	movs	r3, #255	; 0xff
 8007d74:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8007d76:	68fb      	ldr	r3, [r7, #12]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}
 8007d80:	e000ed04 	.word	0xe000ed04

08007d84 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b086      	sub	sp, #24
 8007d88:	af02      	add	r7, sp, #8
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00f      	beq.n	8007db6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d10a      	bne.n	8007db2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	2203      	movs	r2, #3
 8007da2:	9200      	str	r2, [sp, #0]
 8007da4:	2200      	movs	r2, #0
 8007da6:	2100      	movs	r1, #0
 8007da8:	2001      	movs	r0, #1
 8007daa:	f000 fa9b 	bl	80082e4 <xQueueGenericCreateStatic>
 8007dae:	4603      	mov	r3, r0
 8007db0:	e016      	b.n	8007de0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8007db2:	2300      	movs	r3, #0
 8007db4:	e014      	b.n	8007de0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d110      	bne.n	8007dde <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8007dbc:	2203      	movs	r2, #3
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	2001      	movs	r0, #1
 8007dc2:	f000 fb11 	bl	80083e8 <xQueueGenericCreate>
 8007dc6:	60f8      	str	r0, [r7, #12]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d005      	beq.n	8007dda <osSemaphoreCreate+0x56>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	2100      	movs	r1, #0
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f000 fbb5 	bl	8008544 <xQueueGenericSend>
      return sema;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	e000      	b.n	8007de0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8007dde:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007df2:	2300      	movs	r3, #0
 8007df4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d101      	bne.n	8007e00 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007dfc:	2380      	movs	r3, #128	; 0x80
 8007dfe:	e03a      	b.n	8007e76 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007e00:	2300      	movs	r3, #0
 8007e02:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e0a:	d103      	bne.n	8007e14 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007e0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e10:	60fb      	str	r3, [r7, #12]
 8007e12:	e009      	b.n	8007e28 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d006      	beq.n	8007e28 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d101      	bne.n	8007e28 <osSemaphoreWait+0x40>
      ticks = 1;
 8007e24:	2301      	movs	r3, #1
 8007e26:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007e28:	f7ff fe86 	bl	8007b38 <inHandlerMode>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d017      	beq.n	8007e62 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007e32:	f107 0308 	add.w	r3, r7, #8
 8007e36:	461a      	mov	r2, r3
 8007e38:	2100      	movs	r1, #0
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 ffb8 	bl	8008db0 <xQueueReceiveFromISR>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d001      	beq.n	8007e4a <osSemaphoreWait+0x62>
      return osErrorOS;
 8007e46:	23ff      	movs	r3, #255	; 0xff
 8007e48:	e015      	b.n	8007e76 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d011      	beq.n	8007e74 <osSemaphoreWait+0x8c>
 8007e50:	4b0b      	ldr	r3, [pc, #44]	; (8007e80 <osSemaphoreWait+0x98>)
 8007e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e56:	601a      	str	r2, [r3, #0]
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	e008      	b.n	8007e74 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007e62:	68f9      	ldr	r1, [r7, #12]
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 fe8f 	bl	8008b88 <xQueueSemaphoreTake>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d001      	beq.n	8007e74 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007e70:	23ff      	movs	r3, #255	; 0xff
 8007e72:	e000      	b.n	8007e76 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	e000ed04 	.word	0xe000ed04

08007e84 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007e90:	2300      	movs	r3, #0
 8007e92:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007e94:	f7ff fe50 	bl	8007b38 <inHandlerMode>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d016      	beq.n	8007ecc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007e9e:	f107 0308 	add.w	r3, r7, #8
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fcf3 	bl	8008890 <xQueueGiveFromISR>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d001      	beq.n	8007eb4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007eb0:	23ff      	movs	r3, #255	; 0xff
 8007eb2:	e017      	b.n	8007ee4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d013      	beq.n	8007ee2 <osSemaphoreRelease+0x5e>
 8007eba:	4b0c      	ldr	r3, [pc, #48]	; (8007eec <osSemaphoreRelease+0x68>)
 8007ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ec0:	601a      	str	r2, [r3, #0]
 8007ec2:	f3bf 8f4f 	dsb	sy
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	e00a      	b.n	8007ee2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007ecc:	2300      	movs	r3, #0
 8007ece:	2200      	movs	r2, #0
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 fb36 	bl	8008544 <xQueueGenericSend>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d001      	beq.n	8007ee2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8007ede:	23ff      	movs	r3, #255	; 0xff
 8007ee0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	e000ed04 	.word	0xe000ed04

08007ef0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007ef0:	b590      	push	{r4, r7, lr}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af02      	add	r7, sp, #8
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d011      	beq.n	8007f26 <osMessageCreate+0x36>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00d      	beq.n	8007f26 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6818      	ldr	r0, [r3, #0]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6859      	ldr	r1, [r3, #4]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	689a      	ldr	r2, [r3, #8]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	2400      	movs	r4, #0
 8007f1c:	9400      	str	r4, [sp, #0]
 8007f1e:	f000 f9e1 	bl	80082e4 <xQueueGenericCreateStatic>
 8007f22:	4603      	mov	r3, r0
 8007f24:	e008      	b.n	8007f38 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6818      	ldr	r0, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	4619      	mov	r1, r3
 8007f32:	f000 fa59 	bl	80083e8 <xQueueGenericCreate>
 8007f36:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd90      	pop	{r4, r7, pc}

08007f40 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b086      	sub	sp, #24
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d101      	bne.n	8007f5e <osMessagePut+0x1e>
    ticks = 1;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007f5e:	f7ff fdeb 	bl	8007b38 <inHandlerMode>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d018      	beq.n	8007f9a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007f68:	f107 0210 	add.w	r2, r7, #16
 8007f6c:	f107 0108 	add.w	r1, r7, #8
 8007f70:	2300      	movs	r3, #0
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	f000 fbec 	bl	8008750 <xQueueGenericSendFromISR>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d001      	beq.n	8007f82 <osMessagePut+0x42>
      return osErrorOS;
 8007f7e:	23ff      	movs	r3, #255	; 0xff
 8007f80:	e018      	b.n	8007fb4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d014      	beq.n	8007fb2 <osMessagePut+0x72>
 8007f88:	4b0c      	ldr	r3, [pc, #48]	; (8007fbc <osMessagePut+0x7c>)
 8007f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f8e:	601a      	str	r2, [r3, #0]
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	f3bf 8f6f 	isb	sy
 8007f98:	e00b      	b.n	8007fb2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007f9a:	f107 0108 	add.w	r1, r7, #8
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	697a      	ldr	r2, [r7, #20]
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f000 face 	bl	8008544 <xQueueGenericSend>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d001      	beq.n	8007fb2 <osMessagePut+0x72>
      return osErrorOS;
 8007fae:	23ff      	movs	r3, #255	; 0xff
 8007fb0:	e000      	b.n	8007fb4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3718      	adds	r7, #24
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	e000ed04 	.word	0xe000ed04

08007fc0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007fc0:	b590      	push	{r4, r7, lr}
 8007fc2:	b08b      	sub	sp, #44	; 0x2c
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	60b9      	str	r1, [r7, #8]
 8007fca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10a      	bne.n	8007ff0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8007fda:	2380      	movs	r3, #128	; 0x80
 8007fdc:	617b      	str	r3, [r7, #20]
    return event;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	461c      	mov	r4, r3
 8007fe2:	f107 0314 	add.w	r3, r7, #20
 8007fe6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007fea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007fee:	e054      	b.n	800809a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ffe:	d103      	bne.n	8008008 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8008000:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008004:	627b      	str	r3, [r7, #36]	; 0x24
 8008006:	e009      	b.n	800801c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d006      	beq.n	800801c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8008012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <osMessageGet+0x5c>
      ticks = 1;
 8008018:	2301      	movs	r3, #1
 800801a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800801c:	f7ff fd8c 	bl	8007b38 <inHandlerMode>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d01c      	beq.n	8008060 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008026:	f107 0220 	add.w	r2, r7, #32
 800802a:	f107 0314 	add.w	r3, r7, #20
 800802e:	3304      	adds	r3, #4
 8008030:	4619      	mov	r1, r3
 8008032:	68b8      	ldr	r0, [r7, #8]
 8008034:	f000 febc 	bl	8008db0 <xQueueReceiveFromISR>
 8008038:	4603      	mov	r3, r0
 800803a:	2b01      	cmp	r3, #1
 800803c:	d102      	bne.n	8008044 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800803e:	2310      	movs	r3, #16
 8008040:	617b      	str	r3, [r7, #20]
 8008042:	e001      	b.n	8008048 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008044:	2300      	movs	r3, #0
 8008046:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008048:	6a3b      	ldr	r3, [r7, #32]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d01d      	beq.n	800808a <osMessageGet+0xca>
 800804e:	4b15      	ldr	r3, [pc, #84]	; (80080a4 <osMessageGet+0xe4>)
 8008050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	f3bf 8f6f 	isb	sy
 800805e:	e014      	b.n	800808a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008060:	f107 0314 	add.w	r3, r7, #20
 8008064:	3304      	adds	r3, #4
 8008066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008068:	4619      	mov	r1, r3
 800806a:	68b8      	ldr	r0, [r7, #8]
 800806c:	f000 fca6 	bl	80089bc <xQueueReceive>
 8008070:	4603      	mov	r3, r0
 8008072:	2b01      	cmp	r3, #1
 8008074:	d102      	bne.n	800807c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8008076:	2310      	movs	r3, #16
 8008078:	617b      	str	r3, [r7, #20]
 800807a:	e006      	b.n	800808a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800807c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807e:	2b00      	cmp	r3, #0
 8008080:	d101      	bne.n	8008086 <osMessageGet+0xc6>
 8008082:	2300      	movs	r3, #0
 8008084:	e000      	b.n	8008088 <osMessageGet+0xc8>
 8008086:	2340      	movs	r3, #64	; 0x40
 8008088:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	461c      	mov	r4, r3
 800808e:	f107 0314 	add.w	r3, r7, #20
 8008092:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008096:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	372c      	adds	r7, #44	; 0x2c
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd90      	pop	{r4, r7, pc}
 80080a2:	bf00      	nop
 80080a4:	e000ed04 	.word	0xe000ed04

080080a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f103 0208 	add.w	r2, r3, #8
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f103 0208 	add.w	r2, r3, #8
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f103 0208 	add.w	r2, r3, #8
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80080f6:	bf00      	nop
 80080f8:	370c      	adds	r7, #12
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr

08008102 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008102:	b480      	push	{r7}
 8008104:	b085      	sub	sp, #20
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
 800810a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	689a      	ldr	r2, [r3, #8]
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	683a      	ldr	r2, [r7, #0]
 8008126:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	683a      	ldr	r2, [r7, #0]
 800812c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	1c5a      	adds	r2, r3, #1
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	601a      	str	r2, [r3, #0]
}
 800813e:	bf00      	nop
 8008140:	3714      	adds	r7, #20
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800814a:	b480      	push	{r7}
 800814c:	b085      	sub	sp, #20
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008160:	d103      	bne.n	800816a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	60fb      	str	r3, [r7, #12]
 8008168:	e00c      	b.n	8008184 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	3308      	adds	r3, #8
 800816e:	60fb      	str	r3, [r7, #12]
 8008170:	e002      	b.n	8008178 <vListInsert+0x2e>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	60fb      	str	r3, [r7, #12]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	429a      	cmp	r2, r3
 8008182:	d2f6      	bcs.n	8008172 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	685a      	ldr	r2, [r3, #4]
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	683a      	ldr	r2, [r7, #0]
 8008192:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	683a      	ldr	r2, [r7, #0]
 800819e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	1c5a      	adds	r2, r3, #1
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	601a      	str	r2, [r3, #0]
}
 80081b0:	bf00      	nop
 80081b2:	3714      	adds	r7, #20
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80081bc:	b480      	push	{r7}
 80081be:	b085      	sub	sp, #20
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	6892      	ldr	r2, [r2, #8]
 80081d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	6852      	ldr	r2, [r2, #4]
 80081dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d103      	bne.n	80081f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	689a      	ldr	r2, [r3, #8]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	1e5a      	subs	r2, r3, #1
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
}
 8008204:	4618      	mov	r0, r3
 8008206:	3714      	adds	r7, #20
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10c      	bne.n	800823e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008228:	b672      	cpsid	i
 800822a:	f383 8811 	msr	BASEPRI, r3
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	f3bf 8f4f 	dsb	sy
 8008236:	b662      	cpsie	i
 8008238:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800823a:	bf00      	nop
 800823c:	e7fe      	b.n	800823c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800823e:	f002 f8e5 	bl	800a40c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800824a:	68f9      	ldr	r1, [r7, #12]
 800824c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800824e:	fb01 f303 	mul.w	r3, r1, r3
 8008252:	441a      	add	r2, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2200      	movs	r2, #0
 800825c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800826e:	3b01      	subs	r3, #1
 8008270:	68f9      	ldr	r1, [r7, #12]
 8008272:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008274:	fb01 f303 	mul.w	r3, r1, r3
 8008278:	441a      	add	r2, r3
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	22ff      	movs	r2, #255	; 0xff
 8008282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	22ff      	movs	r2, #255	; 0xff
 800828a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d114      	bne.n	80082be <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d01a      	beq.n	80082d2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	3310      	adds	r3, #16
 80082a0:	4618      	mov	r0, r3
 80082a2:	f001 fb9b 	bl	80099dc <xTaskRemoveFromEventList>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d012      	beq.n	80082d2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80082ac:	4b0c      	ldr	r3, [pc, #48]	; (80082e0 <xQueueGenericReset+0xd0>)
 80082ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082b2:	601a      	str	r2, [r3, #0]
 80082b4:	f3bf 8f4f 	dsb	sy
 80082b8:	f3bf 8f6f 	isb	sy
 80082bc:	e009      	b.n	80082d2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	3310      	adds	r3, #16
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7ff fef0 	bl	80080a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	3324      	adds	r3, #36	; 0x24
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7ff feeb 	bl	80080a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80082d2:	f002 f8cf 	bl	800a474 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80082d6:	2301      	movs	r3, #1
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	e000ed04 	.word	0xe000ed04

080082e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b08e      	sub	sp, #56	; 0x38
 80082e8:	af02      	add	r7, sp, #8
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	607a      	str	r2, [r7, #4]
 80082f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d10c      	bne.n	8008312 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80082f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fc:	b672      	cpsid	i
 80082fe:	f383 8811 	msr	BASEPRI, r3
 8008302:	f3bf 8f6f 	isb	sy
 8008306:	f3bf 8f4f 	dsb	sy
 800830a:	b662      	cpsie	i
 800830c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800830e:	bf00      	nop
 8008310:	e7fe      	b.n	8008310 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10c      	bne.n	8008332 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8008318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831c:	b672      	cpsid	i
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	b662      	cpsie	i
 800832c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800832e:	bf00      	nop
 8008330:	e7fe      	b.n	8008330 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d002      	beq.n	800833e <xQueueGenericCreateStatic+0x5a>
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d001      	beq.n	8008342 <xQueueGenericCreateStatic+0x5e>
 800833e:	2301      	movs	r3, #1
 8008340:	e000      	b.n	8008344 <xQueueGenericCreateStatic+0x60>
 8008342:	2300      	movs	r3, #0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d10c      	bne.n	8008362 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8008348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834c:	b672      	cpsid	i
 800834e:	f383 8811 	msr	BASEPRI, r3
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	f3bf 8f4f 	dsb	sy
 800835a:	b662      	cpsie	i
 800835c:	623b      	str	r3, [r7, #32]
}
 800835e:	bf00      	nop
 8008360:	e7fe      	b.n	8008360 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d102      	bne.n	800836e <xQueueGenericCreateStatic+0x8a>
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d101      	bne.n	8008372 <xQueueGenericCreateStatic+0x8e>
 800836e:	2301      	movs	r3, #1
 8008370:	e000      	b.n	8008374 <xQueueGenericCreateStatic+0x90>
 8008372:	2300      	movs	r3, #0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d10c      	bne.n	8008392 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8008378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837c:	b672      	cpsid	i
 800837e:	f383 8811 	msr	BASEPRI, r3
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	b662      	cpsie	i
 800838c:	61fb      	str	r3, [r7, #28]
}
 800838e:	bf00      	nop
 8008390:	e7fe      	b.n	8008390 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008392:	2348      	movs	r3, #72	; 0x48
 8008394:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	2b48      	cmp	r3, #72	; 0x48
 800839a:	d00c      	beq.n	80083b6 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800839c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a0:	b672      	cpsid	i
 80083a2:	f383 8811 	msr	BASEPRI, r3
 80083a6:	f3bf 8f6f 	isb	sy
 80083aa:	f3bf 8f4f 	dsb	sy
 80083ae:	b662      	cpsie	i
 80083b0:	61bb      	str	r3, [r7, #24]
}
 80083b2:	bf00      	nop
 80083b4:	e7fe      	b.n	80083b4 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80083b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80083bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00d      	beq.n	80083de <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80083c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80083ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80083ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d0:	9300      	str	r3, [sp, #0]
 80083d2:	4613      	mov	r3, r2
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	68b9      	ldr	r1, [r7, #8]
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f000 f847 	bl	800846c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80083de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3730      	adds	r7, #48	; 0x30
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b08a      	sub	sp, #40	; 0x28
 80083ec:	af02      	add	r7, sp, #8
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	4613      	mov	r3, r2
 80083f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10c      	bne.n	8008416 <xQueueGenericCreate+0x2e>
	__asm volatile
 80083fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008400:	b672      	cpsid	i
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	b662      	cpsie	i
 8008410:	613b      	str	r3, [r7, #16]
}
 8008412:	bf00      	nop
 8008414:	e7fe      	b.n	8008414 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d102      	bne.n	8008422 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800841c:	2300      	movs	r3, #0
 800841e:	61fb      	str	r3, [r7, #28]
 8008420:	e004      	b.n	800842c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	fb02 f303 	mul.w	r3, r2, r3
 800842a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	3348      	adds	r3, #72	; 0x48
 8008430:	4618      	mov	r0, r3
 8008432:	f002 f917 	bl	800a664 <pvPortMalloc>
 8008436:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d011      	beq.n	8008462 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	3348      	adds	r3, #72	; 0x48
 8008446:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	2200      	movs	r2, #0
 800844c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008450:	79fa      	ldrb	r2, [r7, #7]
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	9300      	str	r3, [sp, #0]
 8008456:	4613      	mov	r3, r2
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	68b9      	ldr	r1, [r7, #8]
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f000 f805 	bl	800846c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008462:	69bb      	ldr	r3, [r7, #24]
	}
 8008464:	4618      	mov	r0, r3
 8008466:	3720      	adds	r7, #32
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	607a      	str	r2, [r7, #4]
 8008478:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d103      	bne.n	8008488 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	69ba      	ldr	r2, [r7, #24]
 8008484:	601a      	str	r2, [r3, #0]
 8008486:	e002      	b.n	800848e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800848e:	69bb      	ldr	r3, [r7, #24]
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	68ba      	ldr	r2, [r7, #8]
 8008498:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800849a:	2101      	movs	r1, #1
 800849c:	69b8      	ldr	r0, [r7, #24]
 800849e:	f7ff feb7 	bl	8008210 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80084a2:	bf00      	nop
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b082      	sub	sp, #8
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00e      	beq.n	80084d6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80084ca:	2300      	movs	r3, #0
 80084cc:	2200      	movs	r2, #0
 80084ce:	2100      	movs	r1, #0
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 f837 	bl	8008544 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80084d6:	bf00      	nop
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b086      	sub	sp, #24
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	4603      	mov	r3, r0
 80084e6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80084e8:	2301      	movs	r3, #1
 80084ea:	617b      	str	r3, [r7, #20]
 80084ec:	2300      	movs	r3, #0
 80084ee:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80084f0:	79fb      	ldrb	r3, [r7, #7]
 80084f2:	461a      	mov	r2, r3
 80084f4:	6939      	ldr	r1, [r7, #16]
 80084f6:	6978      	ldr	r0, [r7, #20]
 80084f8:	f7ff ff76 	bl	80083e8 <xQueueGenericCreate>
 80084fc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f7ff ffd3 	bl	80084aa <prvInitialiseMutex>

		return xNewQueue;
 8008504:	68fb      	ldr	r3, [r7, #12]
	}
 8008506:	4618      	mov	r0, r3
 8008508:	3718      	adds	r7, #24
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}

0800850e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800850e:	b580      	push	{r7, lr}
 8008510:	b088      	sub	sp, #32
 8008512:	af02      	add	r7, sp, #8
 8008514:	4603      	mov	r3, r0
 8008516:	6039      	str	r1, [r7, #0]
 8008518:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800851a:	2301      	movs	r3, #1
 800851c:	617b      	str	r3, [r7, #20]
 800851e:	2300      	movs	r3, #0
 8008520:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008522:	79fb      	ldrb	r3, [r7, #7]
 8008524:	9300      	str	r3, [sp, #0]
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	2200      	movs	r2, #0
 800852a:	6939      	ldr	r1, [r7, #16]
 800852c:	6978      	ldr	r0, [r7, #20]
 800852e:	f7ff fed9 	bl	80082e4 <xQueueGenericCreateStatic>
 8008532:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f7ff ffb8 	bl	80084aa <prvInitialiseMutex>

		return xNewQueue;
 800853a:	68fb      	ldr	r3, [r7, #12]
	}
 800853c:	4618      	mov	r0, r3
 800853e:	3718      	adds	r7, #24
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}

08008544 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b08e      	sub	sp, #56	; 0x38
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
 8008550:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008552:	2300      	movs	r3, #0
 8008554:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800855a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855c:	2b00      	cmp	r3, #0
 800855e:	d10c      	bne.n	800857a <xQueueGenericSend+0x36>
	__asm volatile
 8008560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008564:	b672      	cpsid	i
 8008566:	f383 8811 	msr	BASEPRI, r3
 800856a:	f3bf 8f6f 	isb	sy
 800856e:	f3bf 8f4f 	dsb	sy
 8008572:	b662      	cpsie	i
 8008574:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008576:	bf00      	nop
 8008578:	e7fe      	b.n	8008578 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d103      	bne.n	8008588 <xQueueGenericSend+0x44>
 8008580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008584:	2b00      	cmp	r3, #0
 8008586:	d101      	bne.n	800858c <xQueueGenericSend+0x48>
 8008588:	2301      	movs	r3, #1
 800858a:	e000      	b.n	800858e <xQueueGenericSend+0x4a>
 800858c:	2300      	movs	r3, #0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d10c      	bne.n	80085ac <xQueueGenericSend+0x68>
	__asm volatile
 8008592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008596:	b672      	cpsid	i
 8008598:	f383 8811 	msr	BASEPRI, r3
 800859c:	f3bf 8f6f 	isb	sy
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	b662      	cpsie	i
 80085a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80085a8:	bf00      	nop
 80085aa:	e7fe      	b.n	80085aa <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d103      	bne.n	80085ba <xQueueGenericSend+0x76>
 80085b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d101      	bne.n	80085be <xQueueGenericSend+0x7a>
 80085ba:	2301      	movs	r3, #1
 80085bc:	e000      	b.n	80085c0 <xQueueGenericSend+0x7c>
 80085be:	2300      	movs	r3, #0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d10c      	bne.n	80085de <xQueueGenericSend+0x9a>
	__asm volatile
 80085c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c8:	b672      	cpsid	i
 80085ca:	f383 8811 	msr	BASEPRI, r3
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f3bf 8f4f 	dsb	sy
 80085d6:	b662      	cpsie	i
 80085d8:	623b      	str	r3, [r7, #32]
}
 80085da:	bf00      	nop
 80085dc:	e7fe      	b.n	80085dc <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085de:	f001 fbc5 	bl	8009d6c <xTaskGetSchedulerState>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d102      	bne.n	80085ee <xQueueGenericSend+0xaa>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d101      	bne.n	80085f2 <xQueueGenericSend+0xae>
 80085ee:	2301      	movs	r3, #1
 80085f0:	e000      	b.n	80085f4 <xQueueGenericSend+0xb0>
 80085f2:	2300      	movs	r3, #0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d10c      	bne.n	8008612 <xQueueGenericSend+0xce>
	__asm volatile
 80085f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fc:	b672      	cpsid	i
 80085fe:	f383 8811 	msr	BASEPRI, r3
 8008602:	f3bf 8f6f 	isb	sy
 8008606:	f3bf 8f4f 	dsb	sy
 800860a:	b662      	cpsie	i
 800860c:	61fb      	str	r3, [r7, #28]
}
 800860e:	bf00      	nop
 8008610:	e7fe      	b.n	8008610 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008612:	f001 fefb 	bl	800a40c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800861a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800861e:	429a      	cmp	r2, r3
 8008620:	d302      	bcc.n	8008628 <xQueueGenericSend+0xe4>
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	2b02      	cmp	r3, #2
 8008626:	d129      	bne.n	800867c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008628:	683a      	ldr	r2, [r7, #0]
 800862a:	68b9      	ldr	r1, [r7, #8]
 800862c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800862e:	f000 fc5d 	bl	8008eec <prvCopyDataToQueue>
 8008632:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008638:	2b00      	cmp	r3, #0
 800863a:	d010      	beq.n	800865e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800863c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863e:	3324      	adds	r3, #36	; 0x24
 8008640:	4618      	mov	r0, r3
 8008642:	f001 f9cb 	bl	80099dc <xTaskRemoveFromEventList>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d013      	beq.n	8008674 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800864c:	4b3f      	ldr	r3, [pc, #252]	; (800874c <xQueueGenericSend+0x208>)
 800864e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008652:	601a      	str	r2, [r3, #0]
 8008654:	f3bf 8f4f 	dsb	sy
 8008658:	f3bf 8f6f 	isb	sy
 800865c:	e00a      	b.n	8008674 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800865e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008660:	2b00      	cmp	r3, #0
 8008662:	d007      	beq.n	8008674 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008664:	4b39      	ldr	r3, [pc, #228]	; (800874c <xQueueGenericSend+0x208>)
 8008666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800866a:	601a      	str	r2, [r3, #0]
 800866c:	f3bf 8f4f 	dsb	sy
 8008670:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008674:	f001 fefe 	bl	800a474 <vPortExitCritical>
				return pdPASS;
 8008678:	2301      	movs	r3, #1
 800867a:	e063      	b.n	8008744 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d103      	bne.n	800868a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008682:	f001 fef7 	bl	800a474 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008686:	2300      	movs	r3, #0
 8008688:	e05c      	b.n	8008744 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800868a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800868c:	2b00      	cmp	r3, #0
 800868e:	d106      	bne.n	800869e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008690:	f107 0314 	add.w	r3, r7, #20
 8008694:	4618      	mov	r0, r3
 8008696:	f001 fa05 	bl	8009aa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800869a:	2301      	movs	r3, #1
 800869c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800869e:	f001 fee9 	bl	800a474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80086a2:	f000 ff89 	bl	80095b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80086a6:	f001 feb1 	bl	800a40c <vPortEnterCritical>
 80086aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086b0:	b25b      	sxtb	r3, r3
 80086b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086b6:	d103      	bne.n	80086c0 <xQueueGenericSend+0x17c>
 80086b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ba:	2200      	movs	r2, #0
 80086bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086c6:	b25b      	sxtb	r3, r3
 80086c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086cc:	d103      	bne.n	80086d6 <xQueueGenericSend+0x192>
 80086ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086d6:	f001 fecd 	bl	800a474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086da:	1d3a      	adds	r2, r7, #4
 80086dc:	f107 0314 	add.w	r3, r7, #20
 80086e0:	4611      	mov	r1, r2
 80086e2:	4618      	mov	r0, r3
 80086e4:	f001 f9f4 	bl	8009ad0 <xTaskCheckForTimeOut>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d124      	bne.n	8008738 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80086ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086f0:	f000 fcf4 	bl	80090dc <prvIsQueueFull>
 80086f4:	4603      	mov	r3, r0
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d018      	beq.n	800872c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80086fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fc:	3310      	adds	r3, #16
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	4611      	mov	r1, r2
 8008702:	4618      	mov	r0, r3
 8008704:	f001 f944 	bl	8009990 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800870a:	f000 fc7f 	bl	800900c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800870e:	f000 ff61 	bl	80095d4 <xTaskResumeAll>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	f47f af7c 	bne.w	8008612 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800871a:	4b0c      	ldr	r3, [pc, #48]	; (800874c <xQueueGenericSend+0x208>)
 800871c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008720:	601a      	str	r2, [r3, #0]
 8008722:	f3bf 8f4f 	dsb	sy
 8008726:	f3bf 8f6f 	isb	sy
 800872a:	e772      	b.n	8008612 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800872c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800872e:	f000 fc6d 	bl	800900c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008732:	f000 ff4f 	bl	80095d4 <xTaskResumeAll>
 8008736:	e76c      	b.n	8008612 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008738:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800873a:	f000 fc67 	bl	800900c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800873e:	f000 ff49 	bl	80095d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008742:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008744:	4618      	mov	r0, r3
 8008746:	3738      	adds	r7, #56	; 0x38
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	e000ed04 	.word	0xe000ed04

08008750 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b08e      	sub	sp, #56	; 0x38
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	607a      	str	r2, [r7, #4]
 800875c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008764:	2b00      	cmp	r3, #0
 8008766:	d10c      	bne.n	8008782 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8008768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876c:	b672      	cpsid	i
 800876e:	f383 8811 	msr	BASEPRI, r3
 8008772:	f3bf 8f6f 	isb	sy
 8008776:	f3bf 8f4f 	dsb	sy
 800877a:	b662      	cpsie	i
 800877c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800877e:	bf00      	nop
 8008780:	e7fe      	b.n	8008780 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d103      	bne.n	8008790 <xQueueGenericSendFromISR+0x40>
 8008788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878c:	2b00      	cmp	r3, #0
 800878e:	d101      	bne.n	8008794 <xQueueGenericSendFromISR+0x44>
 8008790:	2301      	movs	r3, #1
 8008792:	e000      	b.n	8008796 <xQueueGenericSendFromISR+0x46>
 8008794:	2300      	movs	r3, #0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d10c      	bne.n	80087b4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800879a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879e:	b672      	cpsid	i
 80087a0:	f383 8811 	msr	BASEPRI, r3
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	b662      	cpsie	i
 80087ae:	623b      	str	r3, [r7, #32]
}
 80087b0:	bf00      	nop
 80087b2:	e7fe      	b.n	80087b2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	2b02      	cmp	r3, #2
 80087b8:	d103      	bne.n	80087c2 <xQueueGenericSendFromISR+0x72>
 80087ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d101      	bne.n	80087c6 <xQueueGenericSendFromISR+0x76>
 80087c2:	2301      	movs	r3, #1
 80087c4:	e000      	b.n	80087c8 <xQueueGenericSendFromISR+0x78>
 80087c6:	2300      	movs	r3, #0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d10c      	bne.n	80087e6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80087cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d0:	b672      	cpsid	i
 80087d2:	f383 8811 	msr	BASEPRI, r3
 80087d6:	f3bf 8f6f 	isb	sy
 80087da:	f3bf 8f4f 	dsb	sy
 80087de:	b662      	cpsie	i
 80087e0:	61fb      	str	r3, [r7, #28]
}
 80087e2:	bf00      	nop
 80087e4:	e7fe      	b.n	80087e4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087e6:	f001 fef9 	bl	800a5dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80087ea:	f3ef 8211 	mrs	r2, BASEPRI
 80087ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f2:	b672      	cpsid	i
 80087f4:	f383 8811 	msr	BASEPRI, r3
 80087f8:	f3bf 8f6f 	isb	sy
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	b662      	cpsie	i
 8008802:	61ba      	str	r2, [r7, #24]
 8008804:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008806:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008808:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800880a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800880e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008812:	429a      	cmp	r2, r3
 8008814:	d302      	bcc.n	800881c <xQueueGenericSendFromISR+0xcc>
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	2b02      	cmp	r3, #2
 800881a:	d12c      	bne.n	8008876 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800881c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008826:	683a      	ldr	r2, [r7, #0]
 8008828:	68b9      	ldr	r1, [r7, #8]
 800882a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800882c:	f000 fb5e 	bl	8008eec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008830:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008834:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008838:	d112      	bne.n	8008860 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800883a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883e:	2b00      	cmp	r3, #0
 8008840:	d016      	beq.n	8008870 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008844:	3324      	adds	r3, #36	; 0x24
 8008846:	4618      	mov	r0, r3
 8008848:	f001 f8c8 	bl	80099dc <xTaskRemoveFromEventList>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00e      	beq.n	8008870 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d00b      	beq.n	8008870 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	601a      	str	r2, [r3, #0]
 800885e:	e007      	b.n	8008870 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008860:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008864:	3301      	adds	r3, #1
 8008866:	b2db      	uxtb	r3, r3
 8008868:	b25a      	sxtb	r2, r3
 800886a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008870:	2301      	movs	r3, #1
 8008872:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008874:	e001      	b.n	800887a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008876:	2300      	movs	r3, #0
 8008878:	637b      	str	r3, [r7, #52]	; 0x34
 800887a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800887c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008884:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008888:	4618      	mov	r0, r3
 800888a:	3738      	adds	r7, #56	; 0x38
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b08e      	sub	sp, #56	; 0x38
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800889e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10c      	bne.n	80088be <xQueueGiveFromISR+0x2e>
	__asm volatile
 80088a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a8:	b672      	cpsid	i
 80088aa:	f383 8811 	msr	BASEPRI, r3
 80088ae:	f3bf 8f6f 	isb	sy
 80088b2:	f3bf 8f4f 	dsb	sy
 80088b6:	b662      	cpsie	i
 80088b8:	623b      	str	r3, [r7, #32]
}
 80088ba:	bf00      	nop
 80088bc:	e7fe      	b.n	80088bc <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80088be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00c      	beq.n	80088e0 <xQueueGiveFromISR+0x50>
	__asm volatile
 80088c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ca:	b672      	cpsid	i
 80088cc:	f383 8811 	msr	BASEPRI, r3
 80088d0:	f3bf 8f6f 	isb	sy
 80088d4:	f3bf 8f4f 	dsb	sy
 80088d8:	b662      	cpsie	i
 80088da:	61fb      	str	r3, [r7, #28]
}
 80088dc:	bf00      	nop
 80088de:	e7fe      	b.n	80088de <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80088e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d103      	bne.n	80088f0 <xQueueGiveFromISR+0x60>
 80088e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d101      	bne.n	80088f4 <xQueueGiveFromISR+0x64>
 80088f0:	2301      	movs	r3, #1
 80088f2:	e000      	b.n	80088f6 <xQueueGiveFromISR+0x66>
 80088f4:	2300      	movs	r3, #0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d10c      	bne.n	8008914 <xQueueGiveFromISR+0x84>
	__asm volatile
 80088fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fe:	b672      	cpsid	i
 8008900:	f383 8811 	msr	BASEPRI, r3
 8008904:	f3bf 8f6f 	isb	sy
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	b662      	cpsie	i
 800890e:	61bb      	str	r3, [r7, #24]
}
 8008910:	bf00      	nop
 8008912:	e7fe      	b.n	8008912 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008914:	f001 fe62 	bl	800a5dc <vPortValidateInterruptPriority>
	__asm volatile
 8008918:	f3ef 8211 	mrs	r2, BASEPRI
 800891c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008920:	b672      	cpsid	i
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	b662      	cpsie	i
 8008930:	617a      	str	r2, [r7, #20]
 8008932:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008934:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008936:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800893e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008942:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008944:	429a      	cmp	r2, r3
 8008946:	d22b      	bcs.n	80089a0 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800894e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008954:	1c5a      	adds	r2, r3, #1
 8008956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008958:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800895a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800895e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008962:	d112      	bne.n	800898a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008968:	2b00      	cmp	r3, #0
 800896a:	d016      	beq.n	800899a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800896c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896e:	3324      	adds	r3, #36	; 0x24
 8008970:	4618      	mov	r0, r3
 8008972:	f001 f833 	bl	80099dc <xTaskRemoveFromEventList>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00e      	beq.n	800899a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00b      	beq.n	800899a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	2201      	movs	r2, #1
 8008986:	601a      	str	r2, [r3, #0]
 8008988:	e007      	b.n	800899a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800898a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800898e:	3301      	adds	r3, #1
 8008990:	b2db      	uxtb	r3, r3
 8008992:	b25a      	sxtb	r2, r3
 8008994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800899a:	2301      	movs	r3, #1
 800899c:	637b      	str	r3, [r7, #52]	; 0x34
 800899e:	e001      	b.n	80089a4 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80089a0:	2300      	movs	r3, #0
 80089a2:	637b      	str	r3, [r7, #52]	; 0x34
 80089a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f383 8811 	msr	BASEPRI, r3
}
 80089ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80089b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3738      	adds	r7, #56	; 0x38
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
	...

080089bc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b08c      	sub	sp, #48	; 0x30
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	60b9      	str	r1, [r7, #8]
 80089c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80089c8:	2300      	movs	r3, #0
 80089ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80089d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d10c      	bne.n	80089f0 <xQueueReceive+0x34>
	__asm volatile
 80089d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089da:	b672      	cpsid	i
 80089dc:	f383 8811 	msr	BASEPRI, r3
 80089e0:	f3bf 8f6f 	isb	sy
 80089e4:	f3bf 8f4f 	dsb	sy
 80089e8:	b662      	cpsie	i
 80089ea:	623b      	str	r3, [r7, #32]
}
 80089ec:	bf00      	nop
 80089ee:	e7fe      	b.n	80089ee <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d103      	bne.n	80089fe <xQueueReceive+0x42>
 80089f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d101      	bne.n	8008a02 <xQueueReceive+0x46>
 80089fe:	2301      	movs	r3, #1
 8008a00:	e000      	b.n	8008a04 <xQueueReceive+0x48>
 8008a02:	2300      	movs	r3, #0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d10c      	bne.n	8008a22 <xQueueReceive+0x66>
	__asm volatile
 8008a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0c:	b672      	cpsid	i
 8008a0e:	f383 8811 	msr	BASEPRI, r3
 8008a12:	f3bf 8f6f 	isb	sy
 8008a16:	f3bf 8f4f 	dsb	sy
 8008a1a:	b662      	cpsie	i
 8008a1c:	61fb      	str	r3, [r7, #28]
}
 8008a1e:	bf00      	nop
 8008a20:	e7fe      	b.n	8008a20 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a22:	f001 f9a3 	bl	8009d6c <xTaskGetSchedulerState>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d102      	bne.n	8008a32 <xQueueReceive+0x76>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d101      	bne.n	8008a36 <xQueueReceive+0x7a>
 8008a32:	2301      	movs	r3, #1
 8008a34:	e000      	b.n	8008a38 <xQueueReceive+0x7c>
 8008a36:	2300      	movs	r3, #0
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d10c      	bne.n	8008a56 <xQueueReceive+0x9a>
	__asm volatile
 8008a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a40:	b672      	cpsid	i
 8008a42:	f383 8811 	msr	BASEPRI, r3
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	f3bf 8f4f 	dsb	sy
 8008a4e:	b662      	cpsie	i
 8008a50:	61bb      	str	r3, [r7, #24]
}
 8008a52:	bf00      	nop
 8008a54:	e7fe      	b.n	8008a54 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a56:	f001 fcd9 	bl	800a40c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a5e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d01f      	beq.n	8008aa6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a66:	68b9      	ldr	r1, [r7, #8]
 8008a68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a6a:	f000 faa9 	bl	8008fc0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a70:	1e5a      	subs	r2, r3, #1
 8008a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a74:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a78:	691b      	ldr	r3, [r3, #16]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00f      	beq.n	8008a9e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a80:	3310      	adds	r3, #16
 8008a82:	4618      	mov	r0, r3
 8008a84:	f000 ffaa 	bl	80099dc <xTaskRemoveFromEventList>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d007      	beq.n	8008a9e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a8e:	4b3d      	ldr	r3, [pc, #244]	; (8008b84 <xQueueReceive+0x1c8>)
 8008a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a94:	601a      	str	r2, [r3, #0]
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008a9e:	f001 fce9 	bl	800a474 <vPortExitCritical>
				return pdPASS;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e069      	b.n	8008b7a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d103      	bne.n	8008ab4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008aac:	f001 fce2 	bl	800a474 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	e062      	b.n	8008b7a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d106      	bne.n	8008ac8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008aba:	f107 0310 	add.w	r3, r7, #16
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f000 fff0 	bl	8009aa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ac8:	f001 fcd4 	bl	800a474 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008acc:	f000 fd74 	bl	80095b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ad0:	f001 fc9c 	bl	800a40c <vPortEnterCritical>
 8008ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ada:	b25b      	sxtb	r3, r3
 8008adc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ae0:	d103      	bne.n	8008aea <xQueueReceive+0x12e>
 8008ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008af0:	b25b      	sxtb	r3, r3
 8008af2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008af6:	d103      	bne.n	8008b00 <xQueueReceive+0x144>
 8008af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b00:	f001 fcb8 	bl	800a474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b04:	1d3a      	adds	r2, r7, #4
 8008b06:	f107 0310 	add.w	r3, r7, #16
 8008b0a:	4611      	mov	r1, r2
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f000 ffdf 	bl	8009ad0 <xTaskCheckForTimeOut>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d123      	bne.n	8008b60 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b1a:	f000 fac9 	bl	80090b0 <prvIsQueueEmpty>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d017      	beq.n	8008b54 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b26:	3324      	adds	r3, #36	; 0x24
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	4611      	mov	r1, r2
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f000 ff2f 	bl	8009990 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008b32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b34:	f000 fa6a 	bl	800900c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b38:	f000 fd4c 	bl	80095d4 <xTaskResumeAll>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d189      	bne.n	8008a56 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8008b42:	4b10      	ldr	r3, [pc, #64]	; (8008b84 <xQueueReceive+0x1c8>)
 8008b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b48:	601a      	str	r2, [r3, #0]
 8008b4a:	f3bf 8f4f 	dsb	sy
 8008b4e:	f3bf 8f6f 	isb	sy
 8008b52:	e780      	b.n	8008a56 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008b54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b56:	f000 fa59 	bl	800900c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b5a:	f000 fd3b 	bl	80095d4 <xTaskResumeAll>
 8008b5e:	e77a      	b.n	8008a56 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008b60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b62:	f000 fa53 	bl	800900c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b66:	f000 fd35 	bl	80095d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b6c:	f000 faa0 	bl	80090b0 <prvIsQueueEmpty>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	f43f af6f 	beq.w	8008a56 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3730      	adds	r7, #48	; 0x30
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	e000ed04 	.word	0xe000ed04

08008b88 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b08e      	sub	sp, #56	; 0x38
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b92:	2300      	movs	r3, #0
 8008b94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d10c      	bne.n	8008bbe <xQueueSemaphoreTake+0x36>
	__asm volatile
 8008ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba8:	b672      	cpsid	i
 8008baa:	f383 8811 	msr	BASEPRI, r3
 8008bae:	f3bf 8f6f 	isb	sy
 8008bb2:	f3bf 8f4f 	dsb	sy
 8008bb6:	b662      	cpsie	i
 8008bb8:	623b      	str	r3, [r7, #32]
}
 8008bba:	bf00      	nop
 8008bbc:	e7fe      	b.n	8008bbc <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d00c      	beq.n	8008be0 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8008bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bca:	b672      	cpsid	i
 8008bcc:	f383 8811 	msr	BASEPRI, r3
 8008bd0:	f3bf 8f6f 	isb	sy
 8008bd4:	f3bf 8f4f 	dsb	sy
 8008bd8:	b662      	cpsie	i
 8008bda:	61fb      	str	r3, [r7, #28]
}
 8008bdc:	bf00      	nop
 8008bde:	e7fe      	b.n	8008bde <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008be0:	f001 f8c4 	bl	8009d6c <xTaskGetSchedulerState>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d102      	bne.n	8008bf0 <xQueueSemaphoreTake+0x68>
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d101      	bne.n	8008bf4 <xQueueSemaphoreTake+0x6c>
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e000      	b.n	8008bf6 <xQueueSemaphoreTake+0x6e>
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10c      	bne.n	8008c14 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8008bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfe:	b672      	cpsid	i
 8008c00:	f383 8811 	msr	BASEPRI, r3
 8008c04:	f3bf 8f6f 	isb	sy
 8008c08:	f3bf 8f4f 	dsb	sy
 8008c0c:	b662      	cpsie	i
 8008c0e:	61bb      	str	r3, [r7, #24]
}
 8008c10:	bf00      	nop
 8008c12:	e7fe      	b.n	8008c12 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c14:	f001 fbfa 	bl	800a40c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d024      	beq.n	8008c6e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c26:	1e5a      	subs	r2, r3, #1
 8008c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c2a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d104      	bne.n	8008c3e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008c34:	f001 fa60 	bl	800a0f8 <pvTaskIncrementMutexHeldCount>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c3c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00f      	beq.n	8008c66 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c48:	3310      	adds	r3, #16
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f000 fec6 	bl	80099dc <xTaskRemoveFromEventList>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d007      	beq.n	8008c66 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c56:	4b55      	ldr	r3, [pc, #340]	; (8008dac <xQueueSemaphoreTake+0x224>)
 8008c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c5c:	601a      	str	r2, [r3, #0]
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c66:	f001 fc05 	bl	800a474 <vPortExitCritical>
				return pdPASS;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e099      	b.n	8008da2 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d113      	bne.n	8008c9c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d00c      	beq.n	8008c94 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8008c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7e:	b672      	cpsid	i
 8008c80:	f383 8811 	msr	BASEPRI, r3
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	b662      	cpsie	i
 8008c8e:	617b      	str	r3, [r7, #20]
}
 8008c90:	bf00      	nop
 8008c92:	e7fe      	b.n	8008c92 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008c94:	f001 fbee 	bl	800a474 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	e082      	b.n	8008da2 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d106      	bne.n	8008cb0 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ca2:	f107 030c 	add.w	r3, r7, #12
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f000 fefc 	bl	8009aa4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008cac:	2301      	movs	r3, #1
 8008cae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008cb0:	f001 fbe0 	bl	800a474 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008cb4:	f000 fc80 	bl	80095b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008cb8:	f001 fba8 	bl	800a40c <vPortEnterCritical>
 8008cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cc2:	b25b      	sxtb	r3, r3
 8008cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cc8:	d103      	bne.n	8008cd2 <xQueueSemaphoreTake+0x14a>
 8008cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cd8:	b25b      	sxtb	r3, r3
 8008cda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cde:	d103      	bne.n	8008ce8 <xQueueSemaphoreTake+0x160>
 8008ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ce8:	f001 fbc4 	bl	800a474 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cec:	463a      	mov	r2, r7
 8008cee:	f107 030c 	add.w	r3, r7, #12
 8008cf2:	4611      	mov	r1, r2
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f000 feeb 	bl	8009ad0 <xTaskCheckForTimeOut>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d132      	bne.n	8008d66 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d02:	f000 f9d5 	bl	80090b0 <prvIsQueueEmpty>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d026      	beq.n	8008d5a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d109      	bne.n	8008d28 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8008d14:	f001 fb7a 	bl	800a40c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f001 f843 	bl	8009da8 <xTaskPriorityInherit>
 8008d22:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008d24:	f001 fba6 	bl	800a474 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2a:	3324      	adds	r3, #36	; 0x24
 8008d2c:	683a      	ldr	r2, [r7, #0]
 8008d2e:	4611      	mov	r1, r2
 8008d30:	4618      	mov	r0, r3
 8008d32:	f000 fe2d 	bl	8009990 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008d36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d38:	f000 f968 	bl	800900c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d3c:	f000 fc4a 	bl	80095d4 <xTaskResumeAll>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f47f af66 	bne.w	8008c14 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8008d48:	4b18      	ldr	r3, [pc, #96]	; (8008dac <xQueueSemaphoreTake+0x224>)
 8008d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d4e:	601a      	str	r2, [r3, #0]
 8008d50:	f3bf 8f4f 	dsb	sy
 8008d54:	f3bf 8f6f 	isb	sy
 8008d58:	e75c      	b.n	8008c14 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008d5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d5c:	f000 f956 	bl	800900c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d60:	f000 fc38 	bl	80095d4 <xTaskResumeAll>
 8008d64:	e756      	b.n	8008c14 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008d66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d68:	f000 f950 	bl	800900c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d6c:	f000 fc32 	bl	80095d4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d72:	f000 f99d 	bl	80090b0 <prvIsQueueEmpty>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	f43f af4b 	beq.w	8008c14 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d00d      	beq.n	8008da0 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8008d84:	f001 fb42 	bl	800a40c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008d88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d8a:	f000 f897 	bl	8008ebc <prvGetDisinheritPriorityAfterTimeout>
 8008d8e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d96:	4618      	mov	r0, r3
 8008d98:	f001 f910 	bl	8009fbc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008d9c:	f001 fb6a 	bl	800a474 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008da0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3738      	adds	r7, #56	; 0x38
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	e000ed04 	.word	0xe000ed04

08008db0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b08e      	sub	sp, #56	; 0x38
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d10c      	bne.n	8008de0 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8008dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dca:	b672      	cpsid	i
 8008dcc:	f383 8811 	msr	BASEPRI, r3
 8008dd0:	f3bf 8f6f 	isb	sy
 8008dd4:	f3bf 8f4f 	dsb	sy
 8008dd8:	b662      	cpsie	i
 8008dda:	623b      	str	r3, [r7, #32]
}
 8008ddc:	bf00      	nop
 8008dde:	e7fe      	b.n	8008dde <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d103      	bne.n	8008dee <xQueueReceiveFromISR+0x3e>
 8008de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <xQueueReceiveFromISR+0x42>
 8008dee:	2301      	movs	r3, #1
 8008df0:	e000      	b.n	8008df4 <xQueueReceiveFromISR+0x44>
 8008df2:	2300      	movs	r3, #0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d10c      	bne.n	8008e12 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8008df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfc:	b672      	cpsid	i
 8008dfe:	f383 8811 	msr	BASEPRI, r3
 8008e02:	f3bf 8f6f 	isb	sy
 8008e06:	f3bf 8f4f 	dsb	sy
 8008e0a:	b662      	cpsie	i
 8008e0c:	61fb      	str	r3, [r7, #28]
}
 8008e0e:	bf00      	nop
 8008e10:	e7fe      	b.n	8008e10 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e12:	f001 fbe3 	bl	800a5dc <vPortValidateInterruptPriority>
	__asm volatile
 8008e16:	f3ef 8211 	mrs	r2, BASEPRI
 8008e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e1e:	b672      	cpsid	i
 8008e20:	f383 8811 	msr	BASEPRI, r3
 8008e24:	f3bf 8f6f 	isb	sy
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	b662      	cpsie	i
 8008e2e:	61ba      	str	r2, [r7, #24]
 8008e30:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008e32:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008e34:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e3a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d02f      	beq.n	8008ea2 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e4c:	68b9      	ldr	r1, [r7, #8]
 8008e4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e50:	f000 f8b6 	bl	8008fc0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e56:	1e5a      	subs	r2, r3, #1
 8008e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008e5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008e60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e64:	d112      	bne.n	8008e8c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d016      	beq.n	8008e9c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e70:	3310      	adds	r3, #16
 8008e72:	4618      	mov	r0, r3
 8008e74:	f000 fdb2 	bl	80099dc <xTaskRemoveFromEventList>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00e      	beq.n	8008e9c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00b      	beq.n	8008e9c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	601a      	str	r2, [r3, #0]
 8008e8a:	e007      	b.n	8008e9c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e90:	3301      	adds	r3, #1
 8008e92:	b2db      	uxtb	r3, r3
 8008e94:	b25a      	sxtb	r2, r3
 8008e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8008ea0:	e001      	b.n	8008ea6 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	f383 8811 	msr	BASEPRI, r3
}
 8008eb0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3738      	adds	r7, #56	; 0x38
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d006      	beq.n	8008eda <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f1c3 0307 	rsb	r3, r3, #7
 8008ed6:	60fb      	str	r3, [r7, #12]
 8008ed8:	e001      	b.n	8008ede <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008eda:	2300      	movs	r3, #0
 8008edc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008ede:	68fb      	ldr	r3, [r7, #12]
	}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3714      	adds	r7, #20
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b086      	sub	sp, #24
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f00:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d10d      	bne.n	8008f26 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d14d      	bne.n	8008fae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	4618      	mov	r0, r3
 8008f18:	f000 ffc6 	bl	8009ea8 <xTaskPriorityDisinherit>
 8008f1c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2200      	movs	r2, #0
 8008f22:	609a      	str	r2, [r3, #8]
 8008f24:	e043      	b.n	8008fae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d119      	bne.n	8008f60 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6858      	ldr	r0, [r3, #4]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f34:	461a      	mov	r2, r3
 8008f36:	68b9      	ldr	r1, [r7, #8]
 8008f38:	f00e fea8 	bl	8017c8c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	685a      	ldr	r2, [r3, #4]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f44:	441a      	add	r2, r3
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	685a      	ldr	r2, [r3, #4]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d32b      	bcc.n	8008fae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	605a      	str	r2, [r3, #4]
 8008f5e:	e026      	b.n	8008fae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	68d8      	ldr	r0, [r3, #12]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f68:	461a      	mov	r2, r3
 8008f6a:	68b9      	ldr	r1, [r7, #8]
 8008f6c:	f00e fe8e 	bl	8017c8c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	68da      	ldr	r2, [r3, #12]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f78:	425b      	negs	r3, r3
 8008f7a:	441a      	add	r2, r3
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	68da      	ldr	r2, [r3, #12]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d207      	bcs.n	8008f9c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	689a      	ldr	r2, [r3, #8]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f94:	425b      	negs	r3, r3
 8008f96:	441a      	add	r2, r3
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2b02      	cmp	r3, #2
 8008fa0:	d105      	bne.n	8008fae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d002      	beq.n	8008fae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	3b01      	subs	r3, #1
 8008fac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	1c5a      	adds	r2, r3, #1
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008fb6:	697b      	ldr	r3, [r7, #20]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3718      	adds	r7, #24
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d018      	beq.n	8009004 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	68da      	ldr	r2, [r3, #12]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fda:	441a      	add	r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	68da      	ldr	r2, [r3, #12]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d303      	bcc.n	8008ff4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	68d9      	ldr	r1, [r3, #12]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	6838      	ldr	r0, [r7, #0]
 8009000:	f00e fe44 	bl	8017c8c <memcpy>
	}
}
 8009004:	bf00      	nop
 8009006:	3708      	adds	r7, #8
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009014:	f001 f9fa 	bl	800a40c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800901e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009020:	e011      	b.n	8009046 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009026:	2b00      	cmp	r3, #0
 8009028:	d012      	beq.n	8009050 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	3324      	adds	r3, #36	; 0x24
 800902e:	4618      	mov	r0, r3
 8009030:	f000 fcd4 	bl	80099dc <xTaskRemoveFromEventList>
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d001      	beq.n	800903e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800903a:	f000 fdaf 	bl	8009b9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800903e:	7bfb      	ldrb	r3, [r7, #15]
 8009040:	3b01      	subs	r3, #1
 8009042:	b2db      	uxtb	r3, r3
 8009044:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800904a:	2b00      	cmp	r3, #0
 800904c:	dce9      	bgt.n	8009022 <prvUnlockQueue+0x16>
 800904e:	e000      	b.n	8009052 <prvUnlockQueue+0x46>
					break;
 8009050:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	22ff      	movs	r2, #255	; 0xff
 8009056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800905a:	f001 fa0b 	bl	800a474 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800905e:	f001 f9d5 	bl	800a40c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009068:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800906a:	e011      	b.n	8009090 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	691b      	ldr	r3, [r3, #16]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d012      	beq.n	800909a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	3310      	adds	r3, #16
 8009078:	4618      	mov	r0, r3
 800907a:	f000 fcaf 	bl	80099dc <xTaskRemoveFromEventList>
 800907e:	4603      	mov	r3, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d001      	beq.n	8009088 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009084:	f000 fd8a 	bl	8009b9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009088:	7bbb      	ldrb	r3, [r7, #14]
 800908a:	3b01      	subs	r3, #1
 800908c:	b2db      	uxtb	r3, r3
 800908e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009090:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009094:	2b00      	cmp	r3, #0
 8009096:	dce9      	bgt.n	800906c <prvUnlockQueue+0x60>
 8009098:	e000      	b.n	800909c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800909a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	22ff      	movs	r2, #255	; 0xff
 80090a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80090a4:	f001 f9e6 	bl	800a474 <vPortExitCritical>
}
 80090a8:	bf00      	nop
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80090b8:	f001 f9a8 	bl	800a40c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d102      	bne.n	80090ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80090c4:	2301      	movs	r3, #1
 80090c6:	60fb      	str	r3, [r7, #12]
 80090c8:	e001      	b.n	80090ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80090ca:	2300      	movs	r3, #0
 80090cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090ce:	f001 f9d1 	bl	800a474 <vPortExitCritical>

	return xReturn;
 80090d2:	68fb      	ldr	r3, [r7, #12]
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3710      	adds	r7, #16
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80090e4:	f001 f992 	bl	800a40c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d102      	bne.n	80090fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80090f4:	2301      	movs	r3, #1
 80090f6:	60fb      	str	r3, [r7, #12]
 80090f8:	e001      	b.n	80090fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80090fa:	2300      	movs	r3, #0
 80090fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090fe:	f001 f9b9 	bl	800a474 <vPortExitCritical>

	return xReturn;
 8009102:	68fb      	ldr	r3, [r7, #12]
}
 8009104:	4618      	mov	r0, r3
 8009106:	3710      	adds	r7, #16
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800910c:	b580      	push	{r7, lr}
 800910e:	b08e      	sub	sp, #56	; 0x38
 8009110:	af04      	add	r7, sp, #16
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]
 8009118:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800911a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800911c:	2b00      	cmp	r3, #0
 800911e:	d10c      	bne.n	800913a <xTaskCreateStatic+0x2e>
	__asm volatile
 8009120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009124:	b672      	cpsid	i
 8009126:	f383 8811 	msr	BASEPRI, r3
 800912a:	f3bf 8f6f 	isb	sy
 800912e:	f3bf 8f4f 	dsb	sy
 8009132:	b662      	cpsie	i
 8009134:	623b      	str	r3, [r7, #32]
}
 8009136:	bf00      	nop
 8009138:	e7fe      	b.n	8009138 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800913a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800913c:	2b00      	cmp	r3, #0
 800913e:	d10c      	bne.n	800915a <xTaskCreateStatic+0x4e>
	__asm volatile
 8009140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009144:	b672      	cpsid	i
 8009146:	f383 8811 	msr	BASEPRI, r3
 800914a:	f3bf 8f6f 	isb	sy
 800914e:	f3bf 8f4f 	dsb	sy
 8009152:	b662      	cpsie	i
 8009154:	61fb      	str	r3, [r7, #28]
}
 8009156:	bf00      	nop
 8009158:	e7fe      	b.n	8009158 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800915a:	23b4      	movs	r3, #180	; 0xb4
 800915c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	2bb4      	cmp	r3, #180	; 0xb4
 8009162:	d00c      	beq.n	800917e <xTaskCreateStatic+0x72>
	__asm volatile
 8009164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009168:	b672      	cpsid	i
 800916a:	f383 8811 	msr	BASEPRI, r3
 800916e:	f3bf 8f6f 	isb	sy
 8009172:	f3bf 8f4f 	dsb	sy
 8009176:	b662      	cpsie	i
 8009178:	61bb      	str	r3, [r7, #24]
}
 800917a:	bf00      	nop
 800917c:	e7fe      	b.n	800917c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800917e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009182:	2b00      	cmp	r3, #0
 8009184:	d01e      	beq.n	80091c4 <xTaskCreateStatic+0xb8>
 8009186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009188:	2b00      	cmp	r3, #0
 800918a:	d01b      	beq.n	80091c4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800918c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009192:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009194:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009198:	2202      	movs	r2, #2
 800919a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800919e:	2300      	movs	r3, #0
 80091a0:	9303      	str	r3, [sp, #12]
 80091a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a4:	9302      	str	r3, [sp, #8]
 80091a6:	f107 0314 	add.w	r3, r7, #20
 80091aa:	9301      	str	r3, [sp, #4]
 80091ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	687a      	ldr	r2, [r7, #4]
 80091b4:	68b9      	ldr	r1, [r7, #8]
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f000 f850 	bl	800925c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80091bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091be:	f000 f8ed 	bl	800939c <prvAddNewTaskToReadyList>
 80091c2:	e001      	b.n	80091c8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80091c4:	2300      	movs	r3, #0
 80091c6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80091c8:	697b      	ldr	r3, [r7, #20]
	}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3728      	adds	r7, #40	; 0x28
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b08c      	sub	sp, #48	; 0x30
 80091d6:	af04      	add	r7, sp, #16
 80091d8:	60f8      	str	r0, [r7, #12]
 80091da:	60b9      	str	r1, [r7, #8]
 80091dc:	603b      	str	r3, [r7, #0]
 80091de:	4613      	mov	r3, r2
 80091e0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80091e2:	88fb      	ldrh	r3, [r7, #6]
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	4618      	mov	r0, r3
 80091e8:	f001 fa3c 	bl	800a664 <pvPortMalloc>
 80091ec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00e      	beq.n	8009212 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80091f4:	20b4      	movs	r0, #180	; 0xb4
 80091f6:	f001 fa35 	bl	800a664 <pvPortMalloc>
 80091fa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d003      	beq.n	800920a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009202:	69fb      	ldr	r3, [r7, #28]
 8009204:	697a      	ldr	r2, [r7, #20]
 8009206:	631a      	str	r2, [r3, #48]	; 0x30
 8009208:	e005      	b.n	8009216 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800920a:	6978      	ldr	r0, [r7, #20]
 800920c:	f001 faf4 	bl	800a7f8 <vPortFree>
 8009210:	e001      	b.n	8009216 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009212:	2300      	movs	r3, #0
 8009214:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d017      	beq.n	800924c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	2200      	movs	r2, #0
 8009220:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009224:	88fa      	ldrh	r2, [r7, #6]
 8009226:	2300      	movs	r3, #0
 8009228:	9303      	str	r3, [sp, #12]
 800922a:	69fb      	ldr	r3, [r7, #28]
 800922c:	9302      	str	r3, [sp, #8]
 800922e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009230:	9301      	str	r3, [sp, #4]
 8009232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009234:	9300      	str	r3, [sp, #0]
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	68b9      	ldr	r1, [r7, #8]
 800923a:	68f8      	ldr	r0, [r7, #12]
 800923c:	f000 f80e 	bl	800925c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009240:	69f8      	ldr	r0, [r7, #28]
 8009242:	f000 f8ab 	bl	800939c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009246:	2301      	movs	r3, #1
 8009248:	61bb      	str	r3, [r7, #24]
 800924a:	e002      	b.n	8009252 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800924c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009250:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009252:	69bb      	ldr	r3, [r7, #24]
	}
 8009254:	4618      	mov	r0, r3
 8009256:	3720      	adds	r7, #32
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b088      	sub	sp, #32
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	607a      	str	r2, [r7, #4]
 8009268:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800926a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800926c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800926e:	6879      	ldr	r1, [r7, #4]
 8009270:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009274:	440b      	add	r3, r1
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	4413      	add	r3, r2
 800927a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800927c:	69bb      	ldr	r3, [r7, #24]
 800927e:	f023 0307 	bic.w	r3, r3, #7
 8009282:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009284:	69bb      	ldr	r3, [r7, #24]
 8009286:	f003 0307 	and.w	r3, r3, #7
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00c      	beq.n	80092a8 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800928e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009292:	b672      	cpsid	i
 8009294:	f383 8811 	msr	BASEPRI, r3
 8009298:	f3bf 8f6f 	isb	sy
 800929c:	f3bf 8f4f 	dsb	sy
 80092a0:	b662      	cpsie	i
 80092a2:	617b      	str	r3, [r7, #20]
}
 80092a4:	bf00      	nop
 80092a6:	e7fe      	b.n	80092a6 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d01f      	beq.n	80092ee <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092ae:	2300      	movs	r3, #0
 80092b0:	61fb      	str	r3, [r7, #28]
 80092b2:	e012      	b.n	80092da <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80092b4:	68ba      	ldr	r2, [r7, #8]
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	4413      	add	r3, r2
 80092ba:	7819      	ldrb	r1, [r3, #0]
 80092bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	4413      	add	r3, r2
 80092c2:	3334      	adds	r3, #52	; 0x34
 80092c4:	460a      	mov	r2, r1
 80092c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80092c8:	68ba      	ldr	r2, [r7, #8]
 80092ca:	69fb      	ldr	r3, [r7, #28]
 80092cc:	4413      	add	r3, r2
 80092ce:	781b      	ldrb	r3, [r3, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d006      	beq.n	80092e2 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	3301      	adds	r3, #1
 80092d8:	61fb      	str	r3, [r7, #28]
 80092da:	69fb      	ldr	r3, [r7, #28]
 80092dc:	2b0f      	cmp	r3, #15
 80092de:	d9e9      	bls.n	80092b4 <prvInitialiseNewTask+0x58>
 80092e0:	e000      	b.n	80092e4 <prvInitialiseNewTask+0x88>
			{
				break;
 80092e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80092e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e6:	2200      	movs	r2, #0
 80092e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80092ec:	e003      	b.n	80092f6 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80092ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f0:	2200      	movs	r2, #0
 80092f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80092f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f8:	2b06      	cmp	r3, #6
 80092fa:	d901      	bls.n	8009300 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80092fc:	2306      	movs	r3, #6
 80092fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009304:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009308:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800930a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800930c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930e:	2200      	movs	r2, #0
 8009310:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009314:	3304      	adds	r3, #4
 8009316:	4618      	mov	r0, r3
 8009318:	f7fe fee6 	bl	80080e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800931c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931e:	3318      	adds	r3, #24
 8009320:	4618      	mov	r0, r3
 8009322:	f7fe fee1 	bl	80080e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009328:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800932a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800932c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932e:	f1c3 0207 	rsb	r2, r3, #7
 8009332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009334:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800933a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800933c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933e:	2200      	movs	r2, #0
 8009340:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009346:	2200      	movs	r2, #0
 8009348:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800934c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934e:	334c      	adds	r3, #76	; 0x4c
 8009350:	2260      	movs	r2, #96	; 0x60
 8009352:	2100      	movs	r1, #0
 8009354:	4618      	mov	r0, r3
 8009356:	f00e fcc1 	bl	8017cdc <memset>
 800935a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935c:	4a0c      	ldr	r2, [pc, #48]	; (8009390 <prvInitialiseNewTask+0x134>)
 800935e:	651a      	str	r2, [r3, #80]	; 0x50
 8009360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009362:	4a0c      	ldr	r2, [pc, #48]	; (8009394 <prvInitialiseNewTask+0x138>)
 8009364:	655a      	str	r2, [r3, #84]	; 0x54
 8009366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009368:	4a0b      	ldr	r2, [pc, #44]	; (8009398 <prvInitialiseNewTask+0x13c>)
 800936a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800936c:	683a      	ldr	r2, [r7, #0]
 800936e:	68f9      	ldr	r1, [r7, #12]
 8009370:	69b8      	ldr	r0, [r7, #24]
 8009372:	f000 ff3b 	bl	800a1ec <pxPortInitialiseStack>
 8009376:	4602      	mov	r2, r0
 8009378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800937a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800937c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800937e:	2b00      	cmp	r3, #0
 8009380:	d002      	beq.n	8009388 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009384:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009386:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009388:	bf00      	nop
 800938a:	3720      	adds	r7, #32
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	0801ea30 	.word	0x0801ea30
 8009394:	0801ea50 	.word	0x0801ea50
 8009398:	0801ea10 	.word	0x0801ea10

0800939c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80093a4:	f001 f832 	bl	800a40c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80093a8:	4b2a      	ldr	r3, [pc, #168]	; (8009454 <prvAddNewTaskToReadyList+0xb8>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	3301      	adds	r3, #1
 80093ae:	4a29      	ldr	r2, [pc, #164]	; (8009454 <prvAddNewTaskToReadyList+0xb8>)
 80093b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80093b2:	4b29      	ldr	r3, [pc, #164]	; (8009458 <prvAddNewTaskToReadyList+0xbc>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d109      	bne.n	80093ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80093ba:	4a27      	ldr	r2, [pc, #156]	; (8009458 <prvAddNewTaskToReadyList+0xbc>)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80093c0:	4b24      	ldr	r3, [pc, #144]	; (8009454 <prvAddNewTaskToReadyList+0xb8>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d110      	bne.n	80093ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80093c8:	f000 fc0c 	bl	8009be4 <prvInitialiseTaskLists>
 80093cc:	e00d      	b.n	80093ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80093ce:	4b23      	ldr	r3, [pc, #140]	; (800945c <prvAddNewTaskToReadyList+0xc0>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d109      	bne.n	80093ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80093d6:	4b20      	ldr	r3, [pc, #128]	; (8009458 <prvAddNewTaskToReadyList+0xbc>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d802      	bhi.n	80093ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80093e4:	4a1c      	ldr	r2, [pc, #112]	; (8009458 <prvAddNewTaskToReadyList+0xbc>)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80093ea:	4b1d      	ldr	r3, [pc, #116]	; (8009460 <prvAddNewTaskToReadyList+0xc4>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	3301      	adds	r3, #1
 80093f0:	4a1b      	ldr	r2, [pc, #108]	; (8009460 <prvAddNewTaskToReadyList+0xc4>)
 80093f2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f8:	2201      	movs	r2, #1
 80093fa:	409a      	lsls	r2, r3
 80093fc:	4b19      	ldr	r3, [pc, #100]	; (8009464 <prvAddNewTaskToReadyList+0xc8>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4313      	orrs	r3, r2
 8009402:	4a18      	ldr	r2, [pc, #96]	; (8009464 <prvAddNewTaskToReadyList+0xc8>)
 8009404:	6013      	str	r3, [r2, #0]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800940a:	4613      	mov	r3, r2
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	4413      	add	r3, r2
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	4a15      	ldr	r2, [pc, #84]	; (8009468 <prvAddNewTaskToReadyList+0xcc>)
 8009414:	441a      	add	r2, r3
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	3304      	adds	r3, #4
 800941a:	4619      	mov	r1, r3
 800941c:	4610      	mov	r0, r2
 800941e:	f7fe fe70 	bl	8008102 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009422:	f001 f827 	bl	800a474 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009426:	4b0d      	ldr	r3, [pc, #52]	; (800945c <prvAddNewTaskToReadyList+0xc0>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00e      	beq.n	800944c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800942e:	4b0a      	ldr	r3, [pc, #40]	; (8009458 <prvAddNewTaskToReadyList+0xbc>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009438:	429a      	cmp	r2, r3
 800943a:	d207      	bcs.n	800944c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800943c:	4b0b      	ldr	r3, [pc, #44]	; (800946c <prvAddNewTaskToReadyList+0xd0>)
 800943e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009442:	601a      	str	r2, [r3, #0]
 8009444:	f3bf 8f4f 	dsb	sy
 8009448:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800944c:	bf00      	nop
 800944e:	3708      	adds	r7, #8
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}
 8009454:	20001194 	.word	0x20001194
 8009458:	20001094 	.word	0x20001094
 800945c:	200011a0 	.word	0x200011a0
 8009460:	200011b0 	.word	0x200011b0
 8009464:	2000119c 	.word	0x2000119c
 8009468:	20001098 	.word	0x20001098
 800946c:	e000ed04 	.word	0xe000ed04

08009470 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009478:	2300      	movs	r3, #0
 800947a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d019      	beq.n	80094b6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009482:	4b14      	ldr	r3, [pc, #80]	; (80094d4 <vTaskDelay+0x64>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00c      	beq.n	80094a4 <vTaskDelay+0x34>
	__asm volatile
 800948a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948e:	b672      	cpsid	i
 8009490:	f383 8811 	msr	BASEPRI, r3
 8009494:	f3bf 8f6f 	isb	sy
 8009498:	f3bf 8f4f 	dsb	sy
 800949c:	b662      	cpsie	i
 800949e:	60bb      	str	r3, [r7, #8]
}
 80094a0:	bf00      	nop
 80094a2:	e7fe      	b.n	80094a2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80094a4:	f000 f888 	bl	80095b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80094a8:	2100      	movs	r1, #0
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fe38 	bl	800a120 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80094b0:	f000 f890 	bl	80095d4 <xTaskResumeAll>
 80094b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d107      	bne.n	80094cc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80094bc:	4b06      	ldr	r3, [pc, #24]	; (80094d8 <vTaskDelay+0x68>)
 80094be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094c2:	601a      	str	r2, [r3, #0]
 80094c4:	f3bf 8f4f 	dsb	sy
 80094c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80094cc:	bf00      	nop
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	200011bc 	.word	0x200011bc
 80094d8:	e000ed04 	.word	0xe000ed04

080094dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b08a      	sub	sp, #40	; 0x28
 80094e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80094e2:	2300      	movs	r3, #0
 80094e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80094e6:	2300      	movs	r3, #0
 80094e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80094ea:	463a      	mov	r2, r7
 80094ec:	1d39      	adds	r1, r7, #4
 80094ee:	f107 0308 	add.w	r3, r7, #8
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7f8 f8e8 	bl	80016c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80094f8:	6839      	ldr	r1, [r7, #0]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	68ba      	ldr	r2, [r7, #8]
 80094fe:	9202      	str	r2, [sp, #8]
 8009500:	9301      	str	r3, [sp, #4]
 8009502:	2300      	movs	r3, #0
 8009504:	9300      	str	r3, [sp, #0]
 8009506:	2300      	movs	r3, #0
 8009508:	460a      	mov	r2, r1
 800950a:	4923      	ldr	r1, [pc, #140]	; (8009598 <vTaskStartScheduler+0xbc>)
 800950c:	4823      	ldr	r0, [pc, #140]	; (800959c <vTaskStartScheduler+0xc0>)
 800950e:	f7ff fdfd 	bl	800910c <xTaskCreateStatic>
 8009512:	4603      	mov	r3, r0
 8009514:	4a22      	ldr	r2, [pc, #136]	; (80095a0 <vTaskStartScheduler+0xc4>)
 8009516:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009518:	4b21      	ldr	r3, [pc, #132]	; (80095a0 <vTaskStartScheduler+0xc4>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d002      	beq.n	8009526 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009520:	2301      	movs	r3, #1
 8009522:	617b      	str	r3, [r7, #20]
 8009524:	e001      	b.n	800952a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009526:	2300      	movs	r3, #0
 8009528:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	2b01      	cmp	r3, #1
 800952e:	d11d      	bne.n	800956c <vTaskStartScheduler+0x90>
	__asm volatile
 8009530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009534:	b672      	cpsid	i
 8009536:	f383 8811 	msr	BASEPRI, r3
 800953a:	f3bf 8f6f 	isb	sy
 800953e:	f3bf 8f4f 	dsb	sy
 8009542:	b662      	cpsie	i
 8009544:	613b      	str	r3, [r7, #16]
}
 8009546:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009548:	4b16      	ldr	r3, [pc, #88]	; (80095a4 <vTaskStartScheduler+0xc8>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	334c      	adds	r3, #76	; 0x4c
 800954e:	4a16      	ldr	r2, [pc, #88]	; (80095a8 <vTaskStartScheduler+0xcc>)
 8009550:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009552:	4b16      	ldr	r3, [pc, #88]	; (80095ac <vTaskStartScheduler+0xd0>)
 8009554:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009558:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800955a:	4b15      	ldr	r3, [pc, #84]	; (80095b0 <vTaskStartScheduler+0xd4>)
 800955c:	2201      	movs	r2, #1
 800955e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009560:	4b14      	ldr	r3, [pc, #80]	; (80095b4 <vTaskStartScheduler+0xd8>)
 8009562:	2200      	movs	r2, #0
 8009564:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009566:	f000 fed3 	bl	800a310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800956a:	e010      	b.n	800958e <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009572:	d10c      	bne.n	800958e <vTaskStartScheduler+0xb2>
	__asm volatile
 8009574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009578:	b672      	cpsid	i
 800957a:	f383 8811 	msr	BASEPRI, r3
 800957e:	f3bf 8f6f 	isb	sy
 8009582:	f3bf 8f4f 	dsb	sy
 8009586:	b662      	cpsie	i
 8009588:	60fb      	str	r3, [r7, #12]
}
 800958a:	bf00      	nop
 800958c:	e7fe      	b.n	800958c <vTaskStartScheduler+0xb0>
}
 800958e:	bf00      	nop
 8009590:	3718      	adds	r7, #24
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	08019f94 	.word	0x08019f94
 800959c:	08009bb5 	.word	0x08009bb5
 80095a0:	200011b8 	.word	0x200011b8
 80095a4:	20001094 	.word	0x20001094
 80095a8:	20000730 	.word	0x20000730
 80095ac:	200011b4 	.word	0x200011b4
 80095b0:	200011a0 	.word	0x200011a0
 80095b4:	20001198 	.word	0x20001198

080095b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80095b8:	b480      	push	{r7}
 80095ba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80095bc:	4b04      	ldr	r3, [pc, #16]	; (80095d0 <vTaskSuspendAll+0x18>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	3301      	adds	r3, #1
 80095c2:	4a03      	ldr	r2, [pc, #12]	; (80095d0 <vTaskSuspendAll+0x18>)
 80095c4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80095c6:	bf00      	nop
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr
 80095d0:	200011bc 	.word	0x200011bc

080095d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80095da:	2300      	movs	r3, #0
 80095dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80095de:	2300      	movs	r3, #0
 80095e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80095e2:	4b42      	ldr	r3, [pc, #264]	; (80096ec <xTaskResumeAll+0x118>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d10c      	bne.n	8009604 <xTaskResumeAll+0x30>
	__asm volatile
 80095ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ee:	b672      	cpsid	i
 80095f0:	f383 8811 	msr	BASEPRI, r3
 80095f4:	f3bf 8f6f 	isb	sy
 80095f8:	f3bf 8f4f 	dsb	sy
 80095fc:	b662      	cpsie	i
 80095fe:	603b      	str	r3, [r7, #0]
}
 8009600:	bf00      	nop
 8009602:	e7fe      	b.n	8009602 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009604:	f000 ff02 	bl	800a40c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009608:	4b38      	ldr	r3, [pc, #224]	; (80096ec <xTaskResumeAll+0x118>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	3b01      	subs	r3, #1
 800960e:	4a37      	ldr	r2, [pc, #220]	; (80096ec <xTaskResumeAll+0x118>)
 8009610:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009612:	4b36      	ldr	r3, [pc, #216]	; (80096ec <xTaskResumeAll+0x118>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d161      	bne.n	80096de <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800961a:	4b35      	ldr	r3, [pc, #212]	; (80096f0 <xTaskResumeAll+0x11c>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d05d      	beq.n	80096de <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009622:	e02e      	b.n	8009682 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009624:	4b33      	ldr	r3, [pc, #204]	; (80096f4 <xTaskResumeAll+0x120>)
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	3318      	adds	r3, #24
 8009630:	4618      	mov	r0, r3
 8009632:	f7fe fdc3 	bl	80081bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	3304      	adds	r3, #4
 800963a:	4618      	mov	r0, r3
 800963c:	f7fe fdbe 	bl	80081bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009644:	2201      	movs	r2, #1
 8009646:	409a      	lsls	r2, r3
 8009648:	4b2b      	ldr	r3, [pc, #172]	; (80096f8 <xTaskResumeAll+0x124>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4313      	orrs	r3, r2
 800964e:	4a2a      	ldr	r2, [pc, #168]	; (80096f8 <xTaskResumeAll+0x124>)
 8009650:	6013      	str	r3, [r2, #0]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009656:	4613      	mov	r3, r2
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	4413      	add	r3, r2
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	4a27      	ldr	r2, [pc, #156]	; (80096fc <xTaskResumeAll+0x128>)
 8009660:	441a      	add	r2, r3
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	3304      	adds	r3, #4
 8009666:	4619      	mov	r1, r3
 8009668:	4610      	mov	r0, r2
 800966a:	f7fe fd4a 	bl	8008102 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009672:	4b23      	ldr	r3, [pc, #140]	; (8009700 <xTaskResumeAll+0x12c>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009678:	429a      	cmp	r2, r3
 800967a:	d302      	bcc.n	8009682 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800967c:	4b21      	ldr	r3, [pc, #132]	; (8009704 <xTaskResumeAll+0x130>)
 800967e:	2201      	movs	r2, #1
 8009680:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009682:	4b1c      	ldr	r3, [pc, #112]	; (80096f4 <xTaskResumeAll+0x120>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d1cc      	bne.n	8009624 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d001      	beq.n	8009694 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009690:	f000 fb4c 	bl	8009d2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009694:	4b1c      	ldr	r3, [pc, #112]	; (8009708 <xTaskResumeAll+0x134>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d010      	beq.n	80096c2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80096a0:	f000 f858 	bl	8009754 <xTaskIncrementTick>
 80096a4:	4603      	mov	r3, r0
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d002      	beq.n	80096b0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80096aa:	4b16      	ldr	r3, [pc, #88]	; (8009704 <xTaskResumeAll+0x130>)
 80096ac:	2201      	movs	r2, #1
 80096ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	3b01      	subs	r3, #1
 80096b4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1f1      	bne.n	80096a0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80096bc:	4b12      	ldr	r3, [pc, #72]	; (8009708 <xTaskResumeAll+0x134>)
 80096be:	2200      	movs	r2, #0
 80096c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80096c2:	4b10      	ldr	r3, [pc, #64]	; (8009704 <xTaskResumeAll+0x130>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d009      	beq.n	80096de <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80096ca:	2301      	movs	r3, #1
 80096cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80096ce:	4b0f      	ldr	r3, [pc, #60]	; (800970c <xTaskResumeAll+0x138>)
 80096d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096d4:	601a      	str	r2, [r3, #0]
 80096d6:	f3bf 8f4f 	dsb	sy
 80096da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096de:	f000 fec9 	bl	800a474 <vPortExitCritical>

	return xAlreadyYielded;
 80096e2:	68bb      	ldr	r3, [r7, #8]
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3710      	adds	r7, #16
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	200011bc 	.word	0x200011bc
 80096f0:	20001194 	.word	0x20001194
 80096f4:	20001154 	.word	0x20001154
 80096f8:	2000119c 	.word	0x2000119c
 80096fc:	20001098 	.word	0x20001098
 8009700:	20001094 	.word	0x20001094
 8009704:	200011a8 	.word	0x200011a8
 8009708:	200011a4 	.word	0x200011a4
 800970c:	e000ed04 	.word	0xe000ed04

08009710 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009716:	4b05      	ldr	r3, [pc, #20]	; (800972c <xTaskGetTickCount+0x1c>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800971c:	687b      	ldr	r3, [r7, #4]
}
 800971e:	4618      	mov	r0, r3
 8009720:	370c      	adds	r7, #12
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	20001198 	.word	0x20001198

08009730 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009736:	f000 ff51 	bl	800a5dc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800973a:	2300      	movs	r3, #0
 800973c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800973e:	4b04      	ldr	r3, [pc, #16]	; (8009750 <xTaskGetTickCountFromISR+0x20>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009744:	683b      	ldr	r3, [r7, #0]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3708      	adds	r7, #8
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	20001198 	.word	0x20001198

08009754 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b086      	sub	sp, #24
 8009758:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800975a:	2300      	movs	r3, #0
 800975c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800975e:	4b4f      	ldr	r3, [pc, #316]	; (800989c <xTaskIncrementTick+0x148>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2b00      	cmp	r3, #0
 8009764:	f040 808a 	bne.w	800987c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009768:	4b4d      	ldr	r3, [pc, #308]	; (80098a0 <xTaskIncrementTick+0x14c>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	3301      	adds	r3, #1
 800976e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009770:	4a4b      	ldr	r2, [pc, #300]	; (80098a0 <xTaskIncrementTick+0x14c>)
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d122      	bne.n	80097c2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800977c:	4b49      	ldr	r3, [pc, #292]	; (80098a4 <xTaskIncrementTick+0x150>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00c      	beq.n	80097a0 <xTaskIncrementTick+0x4c>
	__asm volatile
 8009786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978a:	b672      	cpsid	i
 800978c:	f383 8811 	msr	BASEPRI, r3
 8009790:	f3bf 8f6f 	isb	sy
 8009794:	f3bf 8f4f 	dsb	sy
 8009798:	b662      	cpsie	i
 800979a:	603b      	str	r3, [r7, #0]
}
 800979c:	bf00      	nop
 800979e:	e7fe      	b.n	800979e <xTaskIncrementTick+0x4a>
 80097a0:	4b40      	ldr	r3, [pc, #256]	; (80098a4 <xTaskIncrementTick+0x150>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	60fb      	str	r3, [r7, #12]
 80097a6:	4b40      	ldr	r3, [pc, #256]	; (80098a8 <xTaskIncrementTick+0x154>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a3e      	ldr	r2, [pc, #248]	; (80098a4 <xTaskIncrementTick+0x150>)
 80097ac:	6013      	str	r3, [r2, #0]
 80097ae:	4a3e      	ldr	r2, [pc, #248]	; (80098a8 <xTaskIncrementTick+0x154>)
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6013      	str	r3, [r2, #0]
 80097b4:	4b3d      	ldr	r3, [pc, #244]	; (80098ac <xTaskIncrementTick+0x158>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	3301      	adds	r3, #1
 80097ba:	4a3c      	ldr	r2, [pc, #240]	; (80098ac <xTaskIncrementTick+0x158>)
 80097bc:	6013      	str	r3, [r2, #0]
 80097be:	f000 fab5 	bl	8009d2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80097c2:	4b3b      	ldr	r3, [pc, #236]	; (80098b0 <xTaskIncrementTick+0x15c>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	693a      	ldr	r2, [r7, #16]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d348      	bcc.n	800985e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097cc:	4b35      	ldr	r3, [pc, #212]	; (80098a4 <xTaskIncrementTick+0x150>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d104      	bne.n	80097e0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097d6:	4b36      	ldr	r3, [pc, #216]	; (80098b0 <xTaskIncrementTick+0x15c>)
 80097d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097dc:	601a      	str	r2, [r3, #0]
					break;
 80097de:	e03e      	b.n	800985e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097e0:	4b30      	ldr	r3, [pc, #192]	; (80098a4 <xTaskIncrementTick+0x150>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	68db      	ldr	r3, [r3, #12]
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80097f0:	693a      	ldr	r2, [r7, #16]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d203      	bcs.n	8009800 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80097f8:	4a2d      	ldr	r2, [pc, #180]	; (80098b0 <xTaskIncrementTick+0x15c>)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80097fe:	e02e      	b.n	800985e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	3304      	adds	r3, #4
 8009804:	4618      	mov	r0, r3
 8009806:	f7fe fcd9 	bl	80081bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800980e:	2b00      	cmp	r3, #0
 8009810:	d004      	beq.n	800981c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	3318      	adds	r3, #24
 8009816:	4618      	mov	r0, r3
 8009818:	f7fe fcd0 	bl	80081bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009820:	2201      	movs	r2, #1
 8009822:	409a      	lsls	r2, r3
 8009824:	4b23      	ldr	r3, [pc, #140]	; (80098b4 <xTaskIncrementTick+0x160>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4313      	orrs	r3, r2
 800982a:	4a22      	ldr	r2, [pc, #136]	; (80098b4 <xTaskIncrementTick+0x160>)
 800982c:	6013      	str	r3, [r2, #0]
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009832:	4613      	mov	r3, r2
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	4413      	add	r3, r2
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	4a1f      	ldr	r2, [pc, #124]	; (80098b8 <xTaskIncrementTick+0x164>)
 800983c:	441a      	add	r2, r3
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	3304      	adds	r3, #4
 8009842:	4619      	mov	r1, r3
 8009844:	4610      	mov	r0, r2
 8009846:	f7fe fc5c 	bl	8008102 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800984e:	4b1b      	ldr	r3, [pc, #108]	; (80098bc <xTaskIncrementTick+0x168>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009854:	429a      	cmp	r2, r3
 8009856:	d3b9      	bcc.n	80097cc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8009858:	2301      	movs	r3, #1
 800985a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800985c:	e7b6      	b.n	80097cc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800985e:	4b17      	ldr	r3, [pc, #92]	; (80098bc <xTaskIncrementTick+0x168>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009864:	4914      	ldr	r1, [pc, #80]	; (80098b8 <xTaskIncrementTick+0x164>)
 8009866:	4613      	mov	r3, r2
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	4413      	add	r3, r2
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	440b      	add	r3, r1
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	2b01      	cmp	r3, #1
 8009874:	d907      	bls.n	8009886 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8009876:	2301      	movs	r3, #1
 8009878:	617b      	str	r3, [r7, #20]
 800987a:	e004      	b.n	8009886 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800987c:	4b10      	ldr	r3, [pc, #64]	; (80098c0 <xTaskIncrementTick+0x16c>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	3301      	adds	r3, #1
 8009882:	4a0f      	ldr	r2, [pc, #60]	; (80098c0 <xTaskIncrementTick+0x16c>)
 8009884:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009886:	4b0f      	ldr	r3, [pc, #60]	; (80098c4 <xTaskIncrementTick+0x170>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d001      	beq.n	8009892 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800988e:	2301      	movs	r3, #1
 8009890:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009892:	697b      	ldr	r3, [r7, #20]
}
 8009894:	4618      	mov	r0, r3
 8009896:	3718      	adds	r7, #24
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}
 800989c:	200011bc 	.word	0x200011bc
 80098a0:	20001198 	.word	0x20001198
 80098a4:	2000114c 	.word	0x2000114c
 80098a8:	20001150 	.word	0x20001150
 80098ac:	200011ac 	.word	0x200011ac
 80098b0:	200011b4 	.word	0x200011b4
 80098b4:	2000119c 	.word	0x2000119c
 80098b8:	20001098 	.word	0x20001098
 80098bc:	20001094 	.word	0x20001094
 80098c0:	200011a4 	.word	0x200011a4
 80098c4:	200011a8 	.word	0x200011a8

080098c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80098c8:	b480      	push	{r7}
 80098ca:	b087      	sub	sp, #28
 80098cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80098ce:	4b2a      	ldr	r3, [pc, #168]	; (8009978 <vTaskSwitchContext+0xb0>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d003      	beq.n	80098de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80098d6:	4b29      	ldr	r3, [pc, #164]	; (800997c <vTaskSwitchContext+0xb4>)
 80098d8:	2201      	movs	r2, #1
 80098da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80098dc:	e046      	b.n	800996c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80098de:	4b27      	ldr	r3, [pc, #156]	; (800997c <vTaskSwitchContext+0xb4>)
 80098e0:	2200      	movs	r2, #0
 80098e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098e4:	4b26      	ldr	r3, [pc, #152]	; (8009980 <vTaskSwitchContext+0xb8>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	fab3 f383 	clz	r3, r3
 80098f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80098f2:	7afb      	ldrb	r3, [r7, #11]
 80098f4:	f1c3 031f 	rsb	r3, r3, #31
 80098f8:	617b      	str	r3, [r7, #20]
 80098fa:	4922      	ldr	r1, [pc, #136]	; (8009984 <vTaskSwitchContext+0xbc>)
 80098fc:	697a      	ldr	r2, [r7, #20]
 80098fe:	4613      	mov	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	4413      	add	r3, r2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	440b      	add	r3, r1
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d10c      	bne.n	8009928 <vTaskSwitchContext+0x60>
	__asm volatile
 800990e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009912:	b672      	cpsid	i
 8009914:	f383 8811 	msr	BASEPRI, r3
 8009918:	f3bf 8f6f 	isb	sy
 800991c:	f3bf 8f4f 	dsb	sy
 8009920:	b662      	cpsie	i
 8009922:	607b      	str	r3, [r7, #4]
}
 8009924:	bf00      	nop
 8009926:	e7fe      	b.n	8009926 <vTaskSwitchContext+0x5e>
 8009928:	697a      	ldr	r2, [r7, #20]
 800992a:	4613      	mov	r3, r2
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	4413      	add	r3, r2
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	4a14      	ldr	r2, [pc, #80]	; (8009984 <vTaskSwitchContext+0xbc>)
 8009934:	4413      	add	r3, r2
 8009936:	613b      	str	r3, [r7, #16]
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	685a      	ldr	r2, [r3, #4]
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	605a      	str	r2, [r3, #4]
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	685a      	ldr	r2, [r3, #4]
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	3308      	adds	r3, #8
 800994a:	429a      	cmp	r2, r3
 800994c:	d104      	bne.n	8009958 <vTaskSwitchContext+0x90>
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	685a      	ldr	r2, [r3, #4]
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	605a      	str	r2, [r3, #4]
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	4a0a      	ldr	r2, [pc, #40]	; (8009988 <vTaskSwitchContext+0xc0>)
 8009960:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009962:	4b09      	ldr	r3, [pc, #36]	; (8009988 <vTaskSwitchContext+0xc0>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	334c      	adds	r3, #76	; 0x4c
 8009968:	4a08      	ldr	r2, [pc, #32]	; (800998c <vTaskSwitchContext+0xc4>)
 800996a:	6013      	str	r3, [r2, #0]
}
 800996c:	bf00      	nop
 800996e:	371c      	adds	r7, #28
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr
 8009978:	200011bc 	.word	0x200011bc
 800997c:	200011a8 	.word	0x200011a8
 8009980:	2000119c 	.word	0x2000119c
 8009984:	20001098 	.word	0x20001098
 8009988:	20001094 	.word	0x20001094
 800998c:	20000730 	.word	0x20000730

08009990 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d10c      	bne.n	80099ba <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80099a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a4:	b672      	cpsid	i
 80099a6:	f383 8811 	msr	BASEPRI, r3
 80099aa:	f3bf 8f6f 	isb	sy
 80099ae:	f3bf 8f4f 	dsb	sy
 80099b2:	b662      	cpsie	i
 80099b4:	60fb      	str	r3, [r7, #12]
}
 80099b6:	bf00      	nop
 80099b8:	e7fe      	b.n	80099b8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80099ba:	4b07      	ldr	r3, [pc, #28]	; (80099d8 <vTaskPlaceOnEventList+0x48>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	3318      	adds	r3, #24
 80099c0:	4619      	mov	r1, r3
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f7fe fbc1 	bl	800814a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80099c8:	2101      	movs	r1, #1
 80099ca:	6838      	ldr	r0, [r7, #0]
 80099cc:	f000 fba8 	bl	800a120 <prvAddCurrentTaskToDelayedList>
}
 80099d0:	bf00      	nop
 80099d2:	3710      	adds	r7, #16
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	20001094 	.word	0x20001094

080099dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b086      	sub	sp, #24
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	68db      	ldr	r3, [r3, #12]
 80099ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d10c      	bne.n	8009a0c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80099f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f6:	b672      	cpsid	i
 80099f8:	f383 8811 	msr	BASEPRI, r3
 80099fc:	f3bf 8f6f 	isb	sy
 8009a00:	f3bf 8f4f 	dsb	sy
 8009a04:	b662      	cpsie	i
 8009a06:	60fb      	str	r3, [r7, #12]
}
 8009a08:	bf00      	nop
 8009a0a:	e7fe      	b.n	8009a0a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	3318      	adds	r3, #24
 8009a10:	4618      	mov	r0, r3
 8009a12:	f7fe fbd3 	bl	80081bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a16:	4b1d      	ldr	r3, [pc, #116]	; (8009a8c <xTaskRemoveFromEventList+0xb0>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d11c      	bne.n	8009a58 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	3304      	adds	r3, #4
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7fe fbca 	bl	80081bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	409a      	lsls	r2, r3
 8009a30:	4b17      	ldr	r3, [pc, #92]	; (8009a90 <xTaskRemoveFromEventList+0xb4>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4313      	orrs	r3, r2
 8009a36:	4a16      	ldr	r2, [pc, #88]	; (8009a90 <xTaskRemoveFromEventList+0xb4>)
 8009a38:	6013      	str	r3, [r2, #0]
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a3e:	4613      	mov	r3, r2
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	4413      	add	r3, r2
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	4a13      	ldr	r2, [pc, #76]	; (8009a94 <xTaskRemoveFromEventList+0xb8>)
 8009a48:	441a      	add	r2, r3
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	3304      	adds	r3, #4
 8009a4e:	4619      	mov	r1, r3
 8009a50:	4610      	mov	r0, r2
 8009a52:	f7fe fb56 	bl	8008102 <vListInsertEnd>
 8009a56:	e005      	b.n	8009a64 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	3318      	adds	r3, #24
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	480e      	ldr	r0, [pc, #56]	; (8009a98 <xTaskRemoveFromEventList+0xbc>)
 8009a60:	f7fe fb4f 	bl	8008102 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a68:	4b0c      	ldr	r3, [pc, #48]	; (8009a9c <xTaskRemoveFromEventList+0xc0>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a6e:	429a      	cmp	r2, r3
 8009a70:	d905      	bls.n	8009a7e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009a72:	2301      	movs	r3, #1
 8009a74:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009a76:	4b0a      	ldr	r3, [pc, #40]	; (8009aa0 <xTaskRemoveFromEventList+0xc4>)
 8009a78:	2201      	movs	r2, #1
 8009a7a:	601a      	str	r2, [r3, #0]
 8009a7c:	e001      	b.n	8009a82 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009a82:	697b      	ldr	r3, [r7, #20]
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3718      	adds	r7, #24
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	200011bc 	.word	0x200011bc
 8009a90:	2000119c 	.word	0x2000119c
 8009a94:	20001098 	.word	0x20001098
 8009a98:	20001154 	.word	0x20001154
 8009a9c:	20001094 	.word	0x20001094
 8009aa0:	200011a8 	.word	0x200011a8

08009aa4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009aac:	4b06      	ldr	r3, [pc, #24]	; (8009ac8 <vTaskInternalSetTimeOutState+0x24>)
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009ab4:	4b05      	ldr	r3, [pc, #20]	; (8009acc <vTaskInternalSetTimeOutState+0x28>)
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	605a      	str	r2, [r3, #4]
}
 8009abc:	bf00      	nop
 8009abe:	370c      	adds	r7, #12
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr
 8009ac8:	200011ac 	.word	0x200011ac
 8009acc:	20001198 	.word	0x20001198

08009ad0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b088      	sub	sp, #32
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d10c      	bne.n	8009afa <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8009ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae4:	b672      	cpsid	i
 8009ae6:	f383 8811 	msr	BASEPRI, r3
 8009aea:	f3bf 8f6f 	isb	sy
 8009aee:	f3bf 8f4f 	dsb	sy
 8009af2:	b662      	cpsie	i
 8009af4:	613b      	str	r3, [r7, #16]
}
 8009af6:	bf00      	nop
 8009af8:	e7fe      	b.n	8009af8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d10c      	bne.n	8009b1a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8009b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b04:	b672      	cpsid	i
 8009b06:	f383 8811 	msr	BASEPRI, r3
 8009b0a:	f3bf 8f6f 	isb	sy
 8009b0e:	f3bf 8f4f 	dsb	sy
 8009b12:	b662      	cpsie	i
 8009b14:	60fb      	str	r3, [r7, #12]
}
 8009b16:	bf00      	nop
 8009b18:	e7fe      	b.n	8009b18 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8009b1a:	f000 fc77 	bl	800a40c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009b1e:	4b1d      	ldr	r3, [pc, #116]	; (8009b94 <xTaskCheckForTimeOut+0xc4>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	69ba      	ldr	r2, [r7, #24]
 8009b2a:	1ad3      	subs	r3, r2, r3
 8009b2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b36:	d102      	bne.n	8009b3e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	61fb      	str	r3, [r7, #28]
 8009b3c:	e023      	b.n	8009b86 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	4b15      	ldr	r3, [pc, #84]	; (8009b98 <xTaskCheckForTimeOut+0xc8>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	429a      	cmp	r2, r3
 8009b48:	d007      	beq.n	8009b5a <xTaskCheckForTimeOut+0x8a>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	69ba      	ldr	r2, [r7, #24]
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d302      	bcc.n	8009b5a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009b54:	2301      	movs	r3, #1
 8009b56:	61fb      	str	r3, [r7, #28]
 8009b58:	e015      	b.n	8009b86 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	697a      	ldr	r2, [r7, #20]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d20b      	bcs.n	8009b7c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	1ad2      	subs	r2, r2, r3
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f7ff ff97 	bl	8009aa4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009b76:	2300      	movs	r3, #0
 8009b78:	61fb      	str	r3, [r7, #28]
 8009b7a:	e004      	b.n	8009b86 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009b82:	2301      	movs	r3, #1
 8009b84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009b86:	f000 fc75 	bl	800a474 <vPortExitCritical>

	return xReturn;
 8009b8a:	69fb      	ldr	r3, [r7, #28]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3720      	adds	r7, #32
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	20001198 	.word	0x20001198
 8009b98:	200011ac 	.word	0x200011ac

08009b9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009ba0:	4b03      	ldr	r3, [pc, #12]	; (8009bb0 <vTaskMissedYield+0x14>)
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	601a      	str	r2, [r3, #0]
}
 8009ba6:	bf00      	nop
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr
 8009bb0:	200011a8 	.word	0x200011a8

08009bb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009bbc:	f000 f852 	bl	8009c64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009bc0:	4b06      	ldr	r3, [pc, #24]	; (8009bdc <prvIdleTask+0x28>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d9f9      	bls.n	8009bbc <prvIdleTask+0x8>
			{
				taskYIELD();
 8009bc8:	4b05      	ldr	r3, [pc, #20]	; (8009be0 <prvIdleTask+0x2c>)
 8009bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bce:	601a      	str	r2, [r3, #0]
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009bd8:	e7f0      	b.n	8009bbc <prvIdleTask+0x8>
 8009bda:	bf00      	nop
 8009bdc:	20001098 	.word	0x20001098
 8009be0:	e000ed04 	.word	0xe000ed04

08009be4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009bea:	2300      	movs	r3, #0
 8009bec:	607b      	str	r3, [r7, #4]
 8009bee:	e00c      	b.n	8009c0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	4413      	add	r3, r2
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	4a12      	ldr	r2, [pc, #72]	; (8009c44 <prvInitialiseTaskLists+0x60>)
 8009bfc:	4413      	add	r3, r2
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f7fe fa52 	bl	80080a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	3301      	adds	r3, #1
 8009c08:	607b      	str	r3, [r7, #4]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2b06      	cmp	r3, #6
 8009c0e:	d9ef      	bls.n	8009bf0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009c10:	480d      	ldr	r0, [pc, #52]	; (8009c48 <prvInitialiseTaskLists+0x64>)
 8009c12:	f7fe fa49 	bl	80080a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009c16:	480d      	ldr	r0, [pc, #52]	; (8009c4c <prvInitialiseTaskLists+0x68>)
 8009c18:	f7fe fa46 	bl	80080a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009c1c:	480c      	ldr	r0, [pc, #48]	; (8009c50 <prvInitialiseTaskLists+0x6c>)
 8009c1e:	f7fe fa43 	bl	80080a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009c22:	480c      	ldr	r0, [pc, #48]	; (8009c54 <prvInitialiseTaskLists+0x70>)
 8009c24:	f7fe fa40 	bl	80080a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c28:	480b      	ldr	r0, [pc, #44]	; (8009c58 <prvInitialiseTaskLists+0x74>)
 8009c2a:	f7fe fa3d 	bl	80080a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c2e:	4b0b      	ldr	r3, [pc, #44]	; (8009c5c <prvInitialiseTaskLists+0x78>)
 8009c30:	4a05      	ldr	r2, [pc, #20]	; (8009c48 <prvInitialiseTaskLists+0x64>)
 8009c32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c34:	4b0a      	ldr	r3, [pc, #40]	; (8009c60 <prvInitialiseTaskLists+0x7c>)
 8009c36:	4a05      	ldr	r2, [pc, #20]	; (8009c4c <prvInitialiseTaskLists+0x68>)
 8009c38:	601a      	str	r2, [r3, #0]
}
 8009c3a:	bf00      	nop
 8009c3c:	3708      	adds	r7, #8
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	20001098 	.word	0x20001098
 8009c48:	20001124 	.word	0x20001124
 8009c4c:	20001138 	.word	0x20001138
 8009c50:	20001154 	.word	0x20001154
 8009c54:	20001168 	.word	0x20001168
 8009c58:	20001180 	.word	0x20001180
 8009c5c:	2000114c 	.word	0x2000114c
 8009c60:	20001150 	.word	0x20001150

08009c64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b082      	sub	sp, #8
 8009c68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c6a:	e019      	b.n	8009ca0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009c6c:	f000 fbce 	bl	800a40c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c70:	4b10      	ldr	r3, [pc, #64]	; (8009cb4 <prvCheckTasksWaitingTermination+0x50>)
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	3304      	adds	r3, #4
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7fe fa9d 	bl	80081bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009c82:	4b0d      	ldr	r3, [pc, #52]	; (8009cb8 <prvCheckTasksWaitingTermination+0x54>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	3b01      	subs	r3, #1
 8009c88:	4a0b      	ldr	r2, [pc, #44]	; (8009cb8 <prvCheckTasksWaitingTermination+0x54>)
 8009c8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009c8c:	4b0b      	ldr	r3, [pc, #44]	; (8009cbc <prvCheckTasksWaitingTermination+0x58>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	3b01      	subs	r3, #1
 8009c92:	4a0a      	ldr	r2, [pc, #40]	; (8009cbc <prvCheckTasksWaitingTermination+0x58>)
 8009c94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009c96:	f000 fbed 	bl	800a474 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 f810 	bl	8009cc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ca0:	4b06      	ldr	r3, [pc, #24]	; (8009cbc <prvCheckTasksWaitingTermination+0x58>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d1e1      	bne.n	8009c6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009ca8:	bf00      	nop
 8009caa:	bf00      	nop
 8009cac:	3708      	adds	r7, #8
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	20001168 	.word	0x20001168
 8009cb8:	20001194 	.word	0x20001194
 8009cbc:	2000117c 	.word	0x2000117c

08009cc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	334c      	adds	r3, #76	; 0x4c
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f00e f99b 	bl	8018008 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d108      	bne.n	8009cee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f000 fd89 	bl	800a7f8 <vPortFree>
				vPortFree( pxTCB );
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 fd86 	bl	800a7f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009cec:	e01a      	b.n	8009d24 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d103      	bne.n	8009d00 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 fd7d 	bl	800a7f8 <vPortFree>
	}
 8009cfe:	e011      	b.n	8009d24 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009d06:	2b02      	cmp	r3, #2
 8009d08:	d00c      	beq.n	8009d24 <prvDeleteTCB+0x64>
	__asm volatile
 8009d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0e:	b672      	cpsid	i
 8009d10:	f383 8811 	msr	BASEPRI, r3
 8009d14:	f3bf 8f6f 	isb	sy
 8009d18:	f3bf 8f4f 	dsb	sy
 8009d1c:	b662      	cpsie	i
 8009d1e:	60fb      	str	r3, [r7, #12]
}
 8009d20:	bf00      	nop
 8009d22:	e7fe      	b.n	8009d22 <prvDeleteTCB+0x62>
	}
 8009d24:	bf00      	nop
 8009d26:	3710      	adds	r7, #16
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d32:	4b0c      	ldr	r3, [pc, #48]	; (8009d64 <prvResetNextTaskUnblockTime+0x38>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d104      	bne.n	8009d46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d3c:	4b0a      	ldr	r3, [pc, #40]	; (8009d68 <prvResetNextTaskUnblockTime+0x3c>)
 8009d3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d44:	e008      	b.n	8009d58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d46:	4b07      	ldr	r3, [pc, #28]	; (8009d64 <prvResetNextTaskUnblockTime+0x38>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	4a04      	ldr	r2, [pc, #16]	; (8009d68 <prvResetNextTaskUnblockTime+0x3c>)
 8009d56:	6013      	str	r3, [r2, #0]
}
 8009d58:	bf00      	nop
 8009d5a:	370c      	adds	r7, #12
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr
 8009d64:	2000114c 	.word	0x2000114c
 8009d68:	200011b4 	.word	0x200011b4

08009d6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009d72:	4b0b      	ldr	r3, [pc, #44]	; (8009da0 <xTaskGetSchedulerState+0x34>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d102      	bne.n	8009d80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	607b      	str	r3, [r7, #4]
 8009d7e:	e008      	b.n	8009d92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d80:	4b08      	ldr	r3, [pc, #32]	; (8009da4 <xTaskGetSchedulerState+0x38>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d102      	bne.n	8009d8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009d88:	2302      	movs	r3, #2
 8009d8a:	607b      	str	r3, [r7, #4]
 8009d8c:	e001      	b.n	8009d92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009d92:	687b      	ldr	r3, [r7, #4]
	}
 8009d94:	4618      	mov	r0, r3
 8009d96:	370c      	adds	r7, #12
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr
 8009da0:	200011a0 	.word	0x200011a0
 8009da4:	200011bc 	.word	0x200011bc

08009da8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009db4:	2300      	movs	r3, #0
 8009db6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d069      	beq.n	8009e92 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dc2:	4b36      	ldr	r3, [pc, #216]	; (8009e9c <xTaskPriorityInherit+0xf4>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d259      	bcs.n	8009e80 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	699b      	ldr	r3, [r3, #24]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	db06      	blt.n	8009de2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dd4:	4b31      	ldr	r3, [pc, #196]	; (8009e9c <xTaskPriorityInherit+0xf4>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dda:	f1c3 0207 	rsb	r2, r3, #7
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	6959      	ldr	r1, [r3, #20]
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dea:	4613      	mov	r3, r2
 8009dec:	009b      	lsls	r3, r3, #2
 8009dee:	4413      	add	r3, r2
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	4a2b      	ldr	r2, [pc, #172]	; (8009ea0 <xTaskPriorityInherit+0xf8>)
 8009df4:	4413      	add	r3, r2
 8009df6:	4299      	cmp	r1, r3
 8009df8:	d13a      	bne.n	8009e70 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	3304      	adds	r3, #4
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7fe f9dc 	bl	80081bc <uxListRemove>
 8009e04:	4603      	mov	r3, r0
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d115      	bne.n	8009e36 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e0e:	4924      	ldr	r1, [pc, #144]	; (8009ea0 <xTaskPriorityInherit+0xf8>)
 8009e10:	4613      	mov	r3, r2
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	4413      	add	r3, r2
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	440b      	add	r3, r1
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d10a      	bne.n	8009e36 <xTaskPriorityInherit+0x8e>
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e24:	2201      	movs	r2, #1
 8009e26:	fa02 f303 	lsl.w	r3, r2, r3
 8009e2a:	43da      	mvns	r2, r3
 8009e2c:	4b1d      	ldr	r3, [pc, #116]	; (8009ea4 <xTaskPriorityInherit+0xfc>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4013      	ands	r3, r2
 8009e32:	4a1c      	ldr	r2, [pc, #112]	; (8009ea4 <xTaskPriorityInherit+0xfc>)
 8009e34:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009e36:	4b19      	ldr	r3, [pc, #100]	; (8009e9c <xTaskPriorityInherit+0xf4>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e44:	2201      	movs	r2, #1
 8009e46:	409a      	lsls	r2, r3
 8009e48:	4b16      	ldr	r3, [pc, #88]	; (8009ea4 <xTaskPriorityInherit+0xfc>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	4a15      	ldr	r2, [pc, #84]	; (8009ea4 <xTaskPriorityInherit+0xfc>)
 8009e50:	6013      	str	r3, [r2, #0]
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e56:	4613      	mov	r3, r2
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	4413      	add	r3, r2
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	4a10      	ldr	r2, [pc, #64]	; (8009ea0 <xTaskPriorityInherit+0xf8>)
 8009e60:	441a      	add	r2, r3
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	3304      	adds	r3, #4
 8009e66:	4619      	mov	r1, r3
 8009e68:	4610      	mov	r0, r2
 8009e6a:	f7fe f94a 	bl	8008102 <vListInsertEnd>
 8009e6e:	e004      	b.n	8009e7a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009e70:	4b0a      	ldr	r3, [pc, #40]	; (8009e9c <xTaskPriorityInherit+0xf4>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	60fb      	str	r3, [r7, #12]
 8009e7e:	e008      	b.n	8009e92 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e84:	4b05      	ldr	r3, [pc, #20]	; (8009e9c <xTaskPriorityInherit+0xf4>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d201      	bcs.n	8009e92 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009e92:	68fb      	ldr	r3, [r7, #12]
	}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3710      	adds	r7, #16
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	20001094 	.word	0x20001094
 8009ea0:	20001098 	.word	0x20001098
 8009ea4:	2000119c 	.word	0x2000119c

08009ea8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b086      	sub	sp, #24
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d072      	beq.n	8009fa4 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009ebe:	4b3c      	ldr	r3, [pc, #240]	; (8009fb0 <xTaskPriorityDisinherit+0x108>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	693a      	ldr	r2, [r7, #16]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d00c      	beq.n	8009ee2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8009ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ecc:	b672      	cpsid	i
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	b662      	cpsie	i
 8009edc:	60fb      	str	r3, [r7, #12]
}
 8009ede:	bf00      	nop
 8009ee0:	e7fe      	b.n	8009ee0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d10c      	bne.n	8009f04 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8009eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eee:	b672      	cpsid	i
 8009ef0:	f383 8811 	msr	BASEPRI, r3
 8009ef4:	f3bf 8f6f 	isb	sy
 8009ef8:	f3bf 8f4f 	dsb	sy
 8009efc:	b662      	cpsie	i
 8009efe:	60bb      	str	r3, [r7, #8]
}
 8009f00:	bf00      	nop
 8009f02:	e7fe      	b.n	8009f02 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f08:	1e5a      	subs	r2, r3, #1
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d044      	beq.n	8009fa4 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d140      	bne.n	8009fa4 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	3304      	adds	r3, #4
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7fe f948 	bl	80081bc <uxListRemove>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d115      	bne.n	8009f5e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f36:	491f      	ldr	r1, [pc, #124]	; (8009fb4 <xTaskPriorityDisinherit+0x10c>)
 8009f38:	4613      	mov	r3, r2
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	4413      	add	r3, r2
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	440b      	add	r3, r1
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d10a      	bne.n	8009f5e <xTaskPriorityDisinherit+0xb6>
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f4c:	2201      	movs	r2, #1
 8009f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8009f52:	43da      	mvns	r2, r3
 8009f54:	4b18      	ldr	r3, [pc, #96]	; (8009fb8 <xTaskPriorityDisinherit+0x110>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4013      	ands	r3, r2
 8009f5a:	4a17      	ldr	r2, [pc, #92]	; (8009fb8 <xTaskPriorityDisinherit+0x110>)
 8009f5c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f6a:	f1c3 0207 	rsb	r2, r3, #7
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f76:	2201      	movs	r2, #1
 8009f78:	409a      	lsls	r2, r3
 8009f7a:	4b0f      	ldr	r3, [pc, #60]	; (8009fb8 <xTaskPriorityDisinherit+0x110>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	4a0d      	ldr	r2, [pc, #52]	; (8009fb8 <xTaskPriorityDisinherit+0x110>)
 8009f82:	6013      	str	r3, [r2, #0]
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f88:	4613      	mov	r3, r2
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	4413      	add	r3, r2
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	4a08      	ldr	r2, [pc, #32]	; (8009fb4 <xTaskPriorityDisinherit+0x10c>)
 8009f92:	441a      	add	r2, r3
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	3304      	adds	r3, #4
 8009f98:	4619      	mov	r1, r3
 8009f9a:	4610      	mov	r0, r2
 8009f9c:	f7fe f8b1 	bl	8008102 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009fa4:	697b      	ldr	r3, [r7, #20]
	}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3718      	adds	r7, #24
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	20001094 	.word	0x20001094
 8009fb4:	20001098 	.word	0x20001098
 8009fb8:	2000119c 	.word	0x2000119c

08009fbc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b088      	sub	sp, #32
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f000 8087 	beq.w	800a0e4 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10c      	bne.n	8009ff8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8009fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe2:	b672      	cpsid	i
 8009fe4:	f383 8811 	msr	BASEPRI, r3
 8009fe8:	f3bf 8f6f 	isb	sy
 8009fec:	f3bf 8f4f 	dsb	sy
 8009ff0:	b662      	cpsie	i
 8009ff2:	60fb      	str	r3, [r7, #12]
}
 8009ff4:	bf00      	nop
 8009ff6:	e7fe      	b.n	8009ff6 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ffc:	683a      	ldr	r2, [r7, #0]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d902      	bls.n	800a008 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	61fb      	str	r3, [r7, #28]
 800a006:	e002      	b.n	800a00e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a008:	69bb      	ldr	r3, [r7, #24]
 800a00a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a00c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a00e:	69bb      	ldr	r3, [r7, #24]
 800a010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a012:	69fa      	ldr	r2, [r7, #28]
 800a014:	429a      	cmp	r2, r3
 800a016:	d065      	beq.n	800a0e4 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a018:	69bb      	ldr	r3, [r7, #24]
 800a01a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a01c:	697a      	ldr	r2, [r7, #20]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d160      	bne.n	800a0e4 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a022:	4b32      	ldr	r3, [pc, #200]	; (800a0ec <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	69ba      	ldr	r2, [r7, #24]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d10c      	bne.n	800a046 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800a02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a030:	b672      	cpsid	i
 800a032:	f383 8811 	msr	BASEPRI, r3
 800a036:	f3bf 8f6f 	isb	sy
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	b662      	cpsie	i
 800a040:	60bb      	str	r3, [r7, #8]
}
 800a042:	bf00      	nop
 800a044:	e7fe      	b.n	800a044 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a046:	69bb      	ldr	r3, [r7, #24]
 800a048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a04a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	69fa      	ldr	r2, [r7, #28]
 800a050:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	699b      	ldr	r3, [r3, #24]
 800a056:	2b00      	cmp	r3, #0
 800a058:	db04      	blt.n	800a064 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a05a:	69fb      	ldr	r3, [r7, #28]
 800a05c:	f1c3 0207 	rsb	r2, r3, #7
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a064:	69bb      	ldr	r3, [r7, #24]
 800a066:	6959      	ldr	r1, [r3, #20]
 800a068:	693a      	ldr	r2, [r7, #16]
 800a06a:	4613      	mov	r3, r2
 800a06c:	009b      	lsls	r3, r3, #2
 800a06e:	4413      	add	r3, r2
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	4a1f      	ldr	r2, [pc, #124]	; (800a0f0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a074:	4413      	add	r3, r2
 800a076:	4299      	cmp	r1, r3
 800a078:	d134      	bne.n	800a0e4 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a07a:	69bb      	ldr	r3, [r7, #24]
 800a07c:	3304      	adds	r3, #4
 800a07e:	4618      	mov	r0, r3
 800a080:	f7fe f89c 	bl	80081bc <uxListRemove>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d115      	bne.n	800a0b6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a08e:	4918      	ldr	r1, [pc, #96]	; (800a0f0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a090:	4613      	mov	r3, r2
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	4413      	add	r3, r2
 800a096:	009b      	lsls	r3, r3, #2
 800a098:	440b      	add	r3, r1
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d10a      	bne.n	800a0b6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a0aa:	43da      	mvns	r2, r3
 800a0ac:	4b11      	ldr	r3, [pc, #68]	; (800a0f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4013      	ands	r3, r2
 800a0b2:	4a10      	ldr	r2, [pc, #64]	; (800a0f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a0b4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	409a      	lsls	r2, r3
 800a0be:	4b0d      	ldr	r3, [pc, #52]	; (800a0f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	4a0b      	ldr	r2, [pc, #44]	; (800a0f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a0c6:	6013      	str	r3, [r2, #0]
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0cc:	4613      	mov	r3, r2
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	4413      	add	r3, r2
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	4a06      	ldr	r2, [pc, #24]	; (800a0f0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a0d6:	441a      	add	r2, r3
 800a0d8:	69bb      	ldr	r3, [r7, #24]
 800a0da:	3304      	adds	r3, #4
 800a0dc:	4619      	mov	r1, r3
 800a0de:	4610      	mov	r0, r2
 800a0e0:	f7fe f80f 	bl	8008102 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a0e4:	bf00      	nop
 800a0e6:	3720      	adds	r7, #32
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	20001094 	.word	0x20001094
 800a0f0:	20001098 	.word	0x20001098
 800a0f4:	2000119c 	.word	0x2000119c

0800a0f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a0f8:	b480      	push	{r7}
 800a0fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a0fc:	4b07      	ldr	r3, [pc, #28]	; (800a11c <pvTaskIncrementMutexHeldCount+0x24>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d004      	beq.n	800a10e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a104:	4b05      	ldr	r3, [pc, #20]	; (800a11c <pvTaskIncrementMutexHeldCount+0x24>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a10a:	3201      	adds	r2, #1
 800a10c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a10e:	4b03      	ldr	r3, [pc, #12]	; (800a11c <pvTaskIncrementMutexHeldCount+0x24>)
 800a110:	681b      	ldr	r3, [r3, #0]
	}
 800a112:	4618      	mov	r0, r3
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr
 800a11c:	20001094 	.word	0x20001094

0800a120 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a12a:	4b29      	ldr	r3, [pc, #164]	; (800a1d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a130:	4b28      	ldr	r3, [pc, #160]	; (800a1d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	3304      	adds	r3, #4
 800a136:	4618      	mov	r0, r3
 800a138:	f7fe f840 	bl	80081bc <uxListRemove>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d10b      	bne.n	800a15a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a142:	4b24      	ldr	r3, [pc, #144]	; (800a1d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a148:	2201      	movs	r2, #1
 800a14a:	fa02 f303 	lsl.w	r3, r2, r3
 800a14e:	43da      	mvns	r2, r3
 800a150:	4b21      	ldr	r3, [pc, #132]	; (800a1d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4013      	ands	r3, r2
 800a156:	4a20      	ldr	r2, [pc, #128]	; (800a1d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a158:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a160:	d10a      	bne.n	800a178 <prvAddCurrentTaskToDelayedList+0x58>
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d007      	beq.n	800a178 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a168:	4b1a      	ldr	r3, [pc, #104]	; (800a1d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	3304      	adds	r3, #4
 800a16e:	4619      	mov	r1, r3
 800a170:	481a      	ldr	r0, [pc, #104]	; (800a1dc <prvAddCurrentTaskToDelayedList+0xbc>)
 800a172:	f7fd ffc6 	bl	8008102 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a176:	e026      	b.n	800a1c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a178:	68fa      	ldr	r2, [r7, #12]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	4413      	add	r3, r2
 800a17e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a180:	4b14      	ldr	r3, [pc, #80]	; (800a1d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	68ba      	ldr	r2, [r7, #8]
 800a186:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a188:	68ba      	ldr	r2, [r7, #8]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d209      	bcs.n	800a1a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a190:	4b13      	ldr	r3, [pc, #76]	; (800a1e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	4b0f      	ldr	r3, [pc, #60]	; (800a1d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	3304      	adds	r3, #4
 800a19a:	4619      	mov	r1, r3
 800a19c:	4610      	mov	r0, r2
 800a19e:	f7fd ffd4 	bl	800814a <vListInsert>
}
 800a1a2:	e010      	b.n	800a1c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1a4:	4b0f      	ldr	r3, [pc, #60]	; (800a1e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	4b0a      	ldr	r3, [pc, #40]	; (800a1d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	3304      	adds	r3, #4
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	4610      	mov	r0, r2
 800a1b2:	f7fd ffca 	bl	800814a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a1b6:	4b0c      	ldr	r3, [pc, #48]	; (800a1e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	68ba      	ldr	r2, [r7, #8]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d202      	bcs.n	800a1c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a1c0:	4a09      	ldr	r2, [pc, #36]	; (800a1e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	6013      	str	r3, [r2, #0]
}
 800a1c6:	bf00      	nop
 800a1c8:	3710      	adds	r7, #16
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	20001198 	.word	0x20001198
 800a1d4:	20001094 	.word	0x20001094
 800a1d8:	2000119c 	.word	0x2000119c
 800a1dc:	20001180 	.word	0x20001180
 800a1e0:	20001150 	.word	0x20001150
 800a1e4:	2000114c 	.word	0x2000114c
 800a1e8:	200011b4 	.word	0x200011b4

0800a1ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b085      	sub	sp, #20
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	3b04      	subs	r3, #4
 800a1fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a204:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	3b04      	subs	r3, #4
 800a20a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	f023 0201 	bic.w	r2, r3, #1
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	3b04      	subs	r3, #4
 800a21a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a21c:	4a0c      	ldr	r2, [pc, #48]	; (800a250 <pxPortInitialiseStack+0x64>)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	3b14      	subs	r3, #20
 800a226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	3b04      	subs	r3, #4
 800a232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f06f 0202 	mvn.w	r2, #2
 800a23a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	3b20      	subs	r3, #32
 800a240:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a242:	68fb      	ldr	r3, [r7, #12]
}
 800a244:	4618      	mov	r0, r3
 800a246:	3714      	adds	r7, #20
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr
 800a250:	0800a255 	.word	0x0800a255

0800a254 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a254:	b480      	push	{r7}
 800a256:	b085      	sub	sp, #20
 800a258:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a25a:	2300      	movs	r3, #0
 800a25c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a25e:	4b14      	ldr	r3, [pc, #80]	; (800a2b0 <prvTaskExitError+0x5c>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a266:	d00c      	beq.n	800a282 <prvTaskExitError+0x2e>
	__asm volatile
 800a268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a26c:	b672      	cpsid	i
 800a26e:	f383 8811 	msr	BASEPRI, r3
 800a272:	f3bf 8f6f 	isb	sy
 800a276:	f3bf 8f4f 	dsb	sy
 800a27a:	b662      	cpsie	i
 800a27c:	60fb      	str	r3, [r7, #12]
}
 800a27e:	bf00      	nop
 800a280:	e7fe      	b.n	800a280 <prvTaskExitError+0x2c>
	__asm volatile
 800a282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a286:	b672      	cpsid	i
 800a288:	f383 8811 	msr	BASEPRI, r3
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	b662      	cpsie	i
 800a296:	60bb      	str	r3, [r7, #8]
}
 800a298:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a29a:	bf00      	nop
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d0fc      	beq.n	800a29c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a2a2:	bf00      	nop
 800a2a4:	bf00      	nop
 800a2a6:	3714      	adds	r7, #20
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr
 800a2b0:	20000720 	.word	0x20000720
	...

0800a2c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a2c0:	4b07      	ldr	r3, [pc, #28]	; (800a2e0 <pxCurrentTCBConst2>)
 800a2c2:	6819      	ldr	r1, [r3, #0]
 800a2c4:	6808      	ldr	r0, [r1, #0]
 800a2c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ca:	f380 8809 	msr	PSP, r0
 800a2ce:	f3bf 8f6f 	isb	sy
 800a2d2:	f04f 0000 	mov.w	r0, #0
 800a2d6:	f380 8811 	msr	BASEPRI, r0
 800a2da:	4770      	bx	lr
 800a2dc:	f3af 8000 	nop.w

0800a2e0 <pxCurrentTCBConst2>:
 800a2e0:	20001094 	.word	0x20001094
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a2e4:	bf00      	nop
 800a2e6:	bf00      	nop

0800a2e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a2e8:	4808      	ldr	r0, [pc, #32]	; (800a30c <prvPortStartFirstTask+0x24>)
 800a2ea:	6800      	ldr	r0, [r0, #0]
 800a2ec:	6800      	ldr	r0, [r0, #0]
 800a2ee:	f380 8808 	msr	MSP, r0
 800a2f2:	f04f 0000 	mov.w	r0, #0
 800a2f6:	f380 8814 	msr	CONTROL, r0
 800a2fa:	b662      	cpsie	i
 800a2fc:	b661      	cpsie	f
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	f3bf 8f6f 	isb	sy
 800a306:	df00      	svc	0
 800a308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a30a:	bf00      	nop
 800a30c:	e000ed08 	.word	0xe000ed08

0800a310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a316:	4b37      	ldr	r3, [pc, #220]	; (800a3f4 <xPortStartScheduler+0xe4>)
 800a318:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	b2db      	uxtb	r3, r3
 800a320:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	22ff      	movs	r2, #255	; 0xff
 800a326:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a330:	78fb      	ldrb	r3, [r7, #3]
 800a332:	b2db      	uxtb	r3, r3
 800a334:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a338:	b2da      	uxtb	r2, r3
 800a33a:	4b2f      	ldr	r3, [pc, #188]	; (800a3f8 <xPortStartScheduler+0xe8>)
 800a33c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a33e:	4b2f      	ldr	r3, [pc, #188]	; (800a3fc <xPortStartScheduler+0xec>)
 800a340:	2207      	movs	r2, #7
 800a342:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a344:	e009      	b.n	800a35a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a346:	4b2d      	ldr	r3, [pc, #180]	; (800a3fc <xPortStartScheduler+0xec>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	3b01      	subs	r3, #1
 800a34c:	4a2b      	ldr	r2, [pc, #172]	; (800a3fc <xPortStartScheduler+0xec>)
 800a34e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a350:	78fb      	ldrb	r3, [r7, #3]
 800a352:	b2db      	uxtb	r3, r3
 800a354:	005b      	lsls	r3, r3, #1
 800a356:	b2db      	uxtb	r3, r3
 800a358:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a35a:	78fb      	ldrb	r3, [r7, #3]
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a362:	2b80      	cmp	r3, #128	; 0x80
 800a364:	d0ef      	beq.n	800a346 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a366:	4b25      	ldr	r3, [pc, #148]	; (800a3fc <xPortStartScheduler+0xec>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f1c3 0307 	rsb	r3, r3, #7
 800a36e:	2b04      	cmp	r3, #4
 800a370:	d00c      	beq.n	800a38c <xPortStartScheduler+0x7c>
	__asm volatile
 800a372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a376:	b672      	cpsid	i
 800a378:	f383 8811 	msr	BASEPRI, r3
 800a37c:	f3bf 8f6f 	isb	sy
 800a380:	f3bf 8f4f 	dsb	sy
 800a384:	b662      	cpsie	i
 800a386:	60bb      	str	r3, [r7, #8]
}
 800a388:	bf00      	nop
 800a38a:	e7fe      	b.n	800a38a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a38c:	4b1b      	ldr	r3, [pc, #108]	; (800a3fc <xPortStartScheduler+0xec>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	021b      	lsls	r3, r3, #8
 800a392:	4a1a      	ldr	r2, [pc, #104]	; (800a3fc <xPortStartScheduler+0xec>)
 800a394:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a396:	4b19      	ldr	r3, [pc, #100]	; (800a3fc <xPortStartScheduler+0xec>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a39e:	4a17      	ldr	r2, [pc, #92]	; (800a3fc <xPortStartScheduler+0xec>)
 800a3a0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	b2da      	uxtb	r2, r3
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a3aa:	4b15      	ldr	r3, [pc, #84]	; (800a400 <xPortStartScheduler+0xf0>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a14      	ldr	r2, [pc, #80]	; (800a400 <xPortStartScheduler+0xf0>)
 800a3b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a3b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a3b6:	4b12      	ldr	r3, [pc, #72]	; (800a400 <xPortStartScheduler+0xf0>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a11      	ldr	r2, [pc, #68]	; (800a400 <xPortStartScheduler+0xf0>)
 800a3bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a3c0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a3c2:	f000 f8dd 	bl	800a580 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a3c6:	4b0f      	ldr	r3, [pc, #60]	; (800a404 <xPortStartScheduler+0xf4>)
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a3cc:	f000 f8fc 	bl	800a5c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a3d0:	4b0d      	ldr	r3, [pc, #52]	; (800a408 <xPortStartScheduler+0xf8>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a0c      	ldr	r2, [pc, #48]	; (800a408 <xPortStartScheduler+0xf8>)
 800a3d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a3da:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a3dc:	f7ff ff84 	bl	800a2e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a3e0:	f7ff fa72 	bl	80098c8 <vTaskSwitchContext>
	prvTaskExitError();
 800a3e4:	f7ff ff36 	bl	800a254 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	e000e400 	.word	0xe000e400
 800a3f8:	200011c0 	.word	0x200011c0
 800a3fc:	200011c4 	.word	0x200011c4
 800a400:	e000ed20 	.word	0xe000ed20
 800a404:	20000720 	.word	0x20000720
 800a408:	e000ef34 	.word	0xe000ef34

0800a40c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
	__asm volatile
 800a412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a416:	b672      	cpsid	i
 800a418:	f383 8811 	msr	BASEPRI, r3
 800a41c:	f3bf 8f6f 	isb	sy
 800a420:	f3bf 8f4f 	dsb	sy
 800a424:	b662      	cpsie	i
 800a426:	607b      	str	r3, [r7, #4]
}
 800a428:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a42a:	4b10      	ldr	r3, [pc, #64]	; (800a46c <vPortEnterCritical+0x60>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	3301      	adds	r3, #1
 800a430:	4a0e      	ldr	r2, [pc, #56]	; (800a46c <vPortEnterCritical+0x60>)
 800a432:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a434:	4b0d      	ldr	r3, [pc, #52]	; (800a46c <vPortEnterCritical+0x60>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d111      	bne.n	800a460 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a43c:	4b0c      	ldr	r3, [pc, #48]	; (800a470 <vPortEnterCritical+0x64>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	b2db      	uxtb	r3, r3
 800a442:	2b00      	cmp	r3, #0
 800a444:	d00c      	beq.n	800a460 <vPortEnterCritical+0x54>
	__asm volatile
 800a446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44a:	b672      	cpsid	i
 800a44c:	f383 8811 	msr	BASEPRI, r3
 800a450:	f3bf 8f6f 	isb	sy
 800a454:	f3bf 8f4f 	dsb	sy
 800a458:	b662      	cpsie	i
 800a45a:	603b      	str	r3, [r7, #0]
}
 800a45c:	bf00      	nop
 800a45e:	e7fe      	b.n	800a45e <vPortEnterCritical+0x52>
	}
}
 800a460:	bf00      	nop
 800a462:	370c      	adds	r7, #12
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr
 800a46c:	20000720 	.word	0x20000720
 800a470:	e000ed04 	.word	0xe000ed04

0800a474 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a47a:	4b13      	ldr	r3, [pc, #76]	; (800a4c8 <vPortExitCritical+0x54>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d10c      	bne.n	800a49c <vPortExitCritical+0x28>
	__asm volatile
 800a482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a486:	b672      	cpsid	i
 800a488:	f383 8811 	msr	BASEPRI, r3
 800a48c:	f3bf 8f6f 	isb	sy
 800a490:	f3bf 8f4f 	dsb	sy
 800a494:	b662      	cpsie	i
 800a496:	607b      	str	r3, [r7, #4]
}
 800a498:	bf00      	nop
 800a49a:	e7fe      	b.n	800a49a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a49c:	4b0a      	ldr	r3, [pc, #40]	; (800a4c8 <vPortExitCritical+0x54>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	3b01      	subs	r3, #1
 800a4a2:	4a09      	ldr	r2, [pc, #36]	; (800a4c8 <vPortExitCritical+0x54>)
 800a4a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a4a6:	4b08      	ldr	r3, [pc, #32]	; (800a4c8 <vPortExitCritical+0x54>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d105      	bne.n	800a4ba <vPortExitCritical+0x46>
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	f383 8811 	msr	BASEPRI, r3
}
 800a4b8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a4ba:	bf00      	nop
 800a4bc:	370c      	adds	r7, #12
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr
 800a4c6:	bf00      	nop
 800a4c8:	20000720 	.word	0x20000720
 800a4cc:	00000000 	.word	0x00000000

0800a4d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a4d0:	f3ef 8009 	mrs	r0, PSP
 800a4d4:	f3bf 8f6f 	isb	sy
 800a4d8:	4b15      	ldr	r3, [pc, #84]	; (800a530 <pxCurrentTCBConst>)
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	f01e 0f10 	tst.w	lr, #16
 800a4e0:	bf08      	it	eq
 800a4e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a4e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ea:	6010      	str	r0, [r2, #0]
 800a4ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a4f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a4f4:	b672      	cpsid	i
 800a4f6:	f380 8811 	msr	BASEPRI, r0
 800a4fa:	f3bf 8f4f 	dsb	sy
 800a4fe:	f3bf 8f6f 	isb	sy
 800a502:	b662      	cpsie	i
 800a504:	f7ff f9e0 	bl	80098c8 <vTaskSwitchContext>
 800a508:	f04f 0000 	mov.w	r0, #0
 800a50c:	f380 8811 	msr	BASEPRI, r0
 800a510:	bc09      	pop	{r0, r3}
 800a512:	6819      	ldr	r1, [r3, #0]
 800a514:	6808      	ldr	r0, [r1, #0]
 800a516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a51a:	f01e 0f10 	tst.w	lr, #16
 800a51e:	bf08      	it	eq
 800a520:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a524:	f380 8809 	msr	PSP, r0
 800a528:	f3bf 8f6f 	isb	sy
 800a52c:	4770      	bx	lr
 800a52e:	bf00      	nop

0800a530 <pxCurrentTCBConst>:
 800a530:	20001094 	.word	0x20001094
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a534:	bf00      	nop
 800a536:	bf00      	nop

0800a538 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
	__asm volatile
 800a53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a542:	b672      	cpsid	i
 800a544:	f383 8811 	msr	BASEPRI, r3
 800a548:	f3bf 8f6f 	isb	sy
 800a54c:	f3bf 8f4f 	dsb	sy
 800a550:	b662      	cpsie	i
 800a552:	607b      	str	r3, [r7, #4]
}
 800a554:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a556:	f7ff f8fd 	bl	8009754 <xTaskIncrementTick>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d003      	beq.n	800a568 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a560:	4b06      	ldr	r3, [pc, #24]	; (800a57c <SysTick_Handler+0x44>)
 800a562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a566:	601a      	str	r2, [r3, #0]
 800a568:	2300      	movs	r3, #0
 800a56a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	f383 8811 	msr	BASEPRI, r3
}
 800a572:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a574:	bf00      	nop
 800a576:	3708      	adds	r7, #8
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	e000ed04 	.word	0xe000ed04

0800a580 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a580:	b480      	push	{r7}
 800a582:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a584:	4b0b      	ldr	r3, [pc, #44]	; (800a5b4 <vPortSetupTimerInterrupt+0x34>)
 800a586:	2200      	movs	r2, #0
 800a588:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a58a:	4b0b      	ldr	r3, [pc, #44]	; (800a5b8 <vPortSetupTimerInterrupt+0x38>)
 800a58c:	2200      	movs	r2, #0
 800a58e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a590:	4b0a      	ldr	r3, [pc, #40]	; (800a5bc <vPortSetupTimerInterrupt+0x3c>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a0a      	ldr	r2, [pc, #40]	; (800a5c0 <vPortSetupTimerInterrupt+0x40>)
 800a596:	fba2 2303 	umull	r2, r3, r2, r3
 800a59a:	099b      	lsrs	r3, r3, #6
 800a59c:	4a09      	ldr	r2, [pc, #36]	; (800a5c4 <vPortSetupTimerInterrupt+0x44>)
 800a59e:	3b01      	subs	r3, #1
 800a5a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a5a2:	4b04      	ldr	r3, [pc, #16]	; (800a5b4 <vPortSetupTimerInterrupt+0x34>)
 800a5a4:	2207      	movs	r2, #7
 800a5a6:	601a      	str	r2, [r3, #0]
}
 800a5a8:	bf00      	nop
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr
 800a5b2:	bf00      	nop
 800a5b4:	e000e010 	.word	0xe000e010
 800a5b8:	e000e018 	.word	0xe000e018
 800a5bc:	20000700 	.word	0x20000700
 800a5c0:	10624dd3 	.word	0x10624dd3
 800a5c4:	e000e014 	.word	0xe000e014

0800a5c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a5c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a5d8 <vPortEnableVFP+0x10>
 800a5cc:	6801      	ldr	r1, [r0, #0]
 800a5ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a5d2:	6001      	str	r1, [r0, #0]
 800a5d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a5d6:	bf00      	nop
 800a5d8:	e000ed88 	.word	0xe000ed88

0800a5dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a5dc:	b480      	push	{r7}
 800a5de:	b085      	sub	sp, #20
 800a5e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a5e2:	f3ef 8305 	mrs	r3, IPSR
 800a5e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2b0f      	cmp	r3, #15
 800a5ec:	d916      	bls.n	800a61c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a5ee:	4a19      	ldr	r2, [pc, #100]	; (800a654 <vPortValidateInterruptPriority+0x78>)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	4413      	add	r3, r2
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a5f8:	4b17      	ldr	r3, [pc, #92]	; (800a658 <vPortValidateInterruptPriority+0x7c>)
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	7afa      	ldrb	r2, [r7, #11]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d20c      	bcs.n	800a61c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800a602:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a606:	b672      	cpsid	i
 800a608:	f383 8811 	msr	BASEPRI, r3
 800a60c:	f3bf 8f6f 	isb	sy
 800a610:	f3bf 8f4f 	dsb	sy
 800a614:	b662      	cpsie	i
 800a616:	607b      	str	r3, [r7, #4]
}
 800a618:	bf00      	nop
 800a61a:	e7fe      	b.n	800a61a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a61c:	4b0f      	ldr	r3, [pc, #60]	; (800a65c <vPortValidateInterruptPriority+0x80>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a624:	4b0e      	ldr	r3, [pc, #56]	; (800a660 <vPortValidateInterruptPriority+0x84>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	429a      	cmp	r2, r3
 800a62a:	d90c      	bls.n	800a646 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800a62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a630:	b672      	cpsid	i
 800a632:	f383 8811 	msr	BASEPRI, r3
 800a636:	f3bf 8f6f 	isb	sy
 800a63a:	f3bf 8f4f 	dsb	sy
 800a63e:	b662      	cpsie	i
 800a640:	603b      	str	r3, [r7, #0]
}
 800a642:	bf00      	nop
 800a644:	e7fe      	b.n	800a644 <vPortValidateInterruptPriority+0x68>
	}
 800a646:	bf00      	nop
 800a648:	3714      	adds	r7, #20
 800a64a:	46bd      	mov	sp, r7
 800a64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a650:	4770      	bx	lr
 800a652:	bf00      	nop
 800a654:	e000e3f0 	.word	0xe000e3f0
 800a658:	200011c0 	.word	0x200011c0
 800a65c:	e000ed0c 	.word	0xe000ed0c
 800a660:	200011c4 	.word	0x200011c4

0800a664 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b08a      	sub	sp, #40	; 0x28
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a66c:	2300      	movs	r3, #0
 800a66e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a670:	f7fe ffa2 	bl	80095b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a674:	4b5b      	ldr	r3, [pc, #364]	; (800a7e4 <pvPortMalloc+0x180>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d101      	bne.n	800a680 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a67c:	f000 f91a 	bl	800a8b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a680:	4b59      	ldr	r3, [pc, #356]	; (800a7e8 <pvPortMalloc+0x184>)
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	4013      	ands	r3, r2
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f040 8092 	bne.w	800a7b2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d01f      	beq.n	800a6d4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800a694:	2208      	movs	r2, #8
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	4413      	add	r3, r2
 800a69a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f003 0307 	and.w	r3, r3, #7
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d016      	beq.n	800a6d4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f023 0307 	bic.w	r3, r3, #7
 800a6ac:	3308      	adds	r3, #8
 800a6ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f003 0307 	and.w	r3, r3, #7
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d00c      	beq.n	800a6d4 <pvPortMalloc+0x70>
	__asm volatile
 800a6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6be:	b672      	cpsid	i
 800a6c0:	f383 8811 	msr	BASEPRI, r3
 800a6c4:	f3bf 8f6f 	isb	sy
 800a6c8:	f3bf 8f4f 	dsb	sy
 800a6cc:	b662      	cpsie	i
 800a6ce:	617b      	str	r3, [r7, #20]
}
 800a6d0:	bf00      	nop
 800a6d2:	e7fe      	b.n	800a6d2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d06b      	beq.n	800a7b2 <pvPortMalloc+0x14e>
 800a6da:	4b44      	ldr	r3, [pc, #272]	; (800a7ec <pvPortMalloc+0x188>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	687a      	ldr	r2, [r7, #4]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d866      	bhi.n	800a7b2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a6e4:	4b42      	ldr	r3, [pc, #264]	; (800a7f0 <pvPortMalloc+0x18c>)
 800a6e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a6e8:	4b41      	ldr	r3, [pc, #260]	; (800a7f0 <pvPortMalloc+0x18c>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6ee:	e004      	b.n	800a6fa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800a6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	429a      	cmp	r2, r3
 800a702:	d903      	bls.n	800a70c <pvPortMalloc+0xa8>
 800a704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d1f1      	bne.n	800a6f0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a70c:	4b35      	ldr	r3, [pc, #212]	; (800a7e4 <pvPortMalloc+0x180>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a712:	429a      	cmp	r2, r3
 800a714:	d04d      	beq.n	800a7b2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a716:	6a3b      	ldr	r3, [r7, #32]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2208      	movs	r2, #8
 800a71c:	4413      	add	r3, r2
 800a71e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	6a3b      	ldr	r3, [r7, #32]
 800a726:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72a:	685a      	ldr	r2, [r3, #4]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	1ad2      	subs	r2, r2, r3
 800a730:	2308      	movs	r3, #8
 800a732:	005b      	lsls	r3, r3, #1
 800a734:	429a      	cmp	r2, r3
 800a736:	d921      	bls.n	800a77c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	4413      	add	r3, r2
 800a73e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a740:	69bb      	ldr	r3, [r7, #24]
 800a742:	f003 0307 	and.w	r3, r3, #7
 800a746:	2b00      	cmp	r3, #0
 800a748:	d00c      	beq.n	800a764 <pvPortMalloc+0x100>
	__asm volatile
 800a74a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74e:	b672      	cpsid	i
 800a750:	f383 8811 	msr	BASEPRI, r3
 800a754:	f3bf 8f6f 	isb	sy
 800a758:	f3bf 8f4f 	dsb	sy
 800a75c:	b662      	cpsie	i
 800a75e:	613b      	str	r3, [r7, #16]
}
 800a760:	bf00      	nop
 800a762:	e7fe      	b.n	800a762 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a766:	685a      	ldr	r2, [r3, #4]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	1ad2      	subs	r2, r2, r3
 800a76c:	69bb      	ldr	r3, [r7, #24]
 800a76e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a776:	69b8      	ldr	r0, [r7, #24]
 800a778:	f000 f8fe 	bl	800a978 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a77c:	4b1b      	ldr	r3, [pc, #108]	; (800a7ec <pvPortMalloc+0x188>)
 800a77e:	681a      	ldr	r2, [r3, #0]
 800a780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	1ad3      	subs	r3, r2, r3
 800a786:	4a19      	ldr	r2, [pc, #100]	; (800a7ec <pvPortMalloc+0x188>)
 800a788:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a78a:	4b18      	ldr	r3, [pc, #96]	; (800a7ec <pvPortMalloc+0x188>)
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	4b19      	ldr	r3, [pc, #100]	; (800a7f4 <pvPortMalloc+0x190>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	429a      	cmp	r2, r3
 800a794:	d203      	bcs.n	800a79e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a796:	4b15      	ldr	r3, [pc, #84]	; (800a7ec <pvPortMalloc+0x188>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a16      	ldr	r2, [pc, #88]	; (800a7f4 <pvPortMalloc+0x190>)
 800a79c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a0:	685a      	ldr	r2, [r3, #4]
 800a7a2:	4b11      	ldr	r3, [pc, #68]	; (800a7e8 <pvPortMalloc+0x184>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	431a      	orrs	r2, r3
 800a7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a7b2:	f7fe ff0f 	bl	80095d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7b6:	69fb      	ldr	r3, [r7, #28]
 800a7b8:	f003 0307 	and.w	r3, r3, #7
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d00c      	beq.n	800a7da <pvPortMalloc+0x176>
	__asm volatile
 800a7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c4:	b672      	cpsid	i
 800a7c6:	f383 8811 	msr	BASEPRI, r3
 800a7ca:	f3bf 8f6f 	isb	sy
 800a7ce:	f3bf 8f4f 	dsb	sy
 800a7d2:	b662      	cpsie	i
 800a7d4:	60fb      	str	r3, [r7, #12]
}
 800a7d6:	bf00      	nop
 800a7d8:	e7fe      	b.n	800a7d8 <pvPortMalloc+0x174>
	return pvReturn;
 800a7da:	69fb      	ldr	r3, [r7, #28]
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3728      	adds	r7, #40	; 0x28
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	20004dd0 	.word	0x20004dd0
 800a7e8:	20004ddc 	.word	0x20004ddc
 800a7ec:	20004dd4 	.word	0x20004dd4
 800a7f0:	20004dc8 	.word	0x20004dc8
 800a7f4:	20004dd8 	.word	0x20004dd8

0800a7f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b086      	sub	sp, #24
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d04c      	beq.n	800a8a4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a80a:	2308      	movs	r3, #8
 800a80c:	425b      	negs	r3, r3
 800a80e:	697a      	ldr	r2, [r7, #20]
 800a810:	4413      	add	r3, r2
 800a812:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	685a      	ldr	r2, [r3, #4]
 800a81c:	4b23      	ldr	r3, [pc, #140]	; (800a8ac <vPortFree+0xb4>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4013      	ands	r3, r2
 800a822:	2b00      	cmp	r3, #0
 800a824:	d10c      	bne.n	800a840 <vPortFree+0x48>
	__asm volatile
 800a826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a82a:	b672      	cpsid	i
 800a82c:	f383 8811 	msr	BASEPRI, r3
 800a830:	f3bf 8f6f 	isb	sy
 800a834:	f3bf 8f4f 	dsb	sy
 800a838:	b662      	cpsie	i
 800a83a:	60fb      	str	r3, [r7, #12]
}
 800a83c:	bf00      	nop
 800a83e:	e7fe      	b.n	800a83e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d00c      	beq.n	800a862 <vPortFree+0x6a>
	__asm volatile
 800a848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a84c:	b672      	cpsid	i
 800a84e:	f383 8811 	msr	BASEPRI, r3
 800a852:	f3bf 8f6f 	isb	sy
 800a856:	f3bf 8f4f 	dsb	sy
 800a85a:	b662      	cpsie	i
 800a85c:	60bb      	str	r3, [r7, #8]
}
 800a85e:	bf00      	nop
 800a860:	e7fe      	b.n	800a860 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	685a      	ldr	r2, [r3, #4]
 800a866:	4b11      	ldr	r3, [pc, #68]	; (800a8ac <vPortFree+0xb4>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4013      	ands	r3, r2
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d019      	beq.n	800a8a4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d115      	bne.n	800a8a4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	685a      	ldr	r2, [r3, #4]
 800a87c:	4b0b      	ldr	r3, [pc, #44]	; (800a8ac <vPortFree+0xb4>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	43db      	mvns	r3, r3
 800a882:	401a      	ands	r2, r3
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a888:	f7fe fe96 	bl	80095b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	685a      	ldr	r2, [r3, #4]
 800a890:	4b07      	ldr	r3, [pc, #28]	; (800a8b0 <vPortFree+0xb8>)
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4413      	add	r3, r2
 800a896:	4a06      	ldr	r2, [pc, #24]	; (800a8b0 <vPortFree+0xb8>)
 800a898:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a89a:	6938      	ldr	r0, [r7, #16]
 800a89c:	f000 f86c 	bl	800a978 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a8a0:	f7fe fe98 	bl	80095d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a8a4:	bf00      	nop
 800a8a6:	3718      	adds	r7, #24
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}
 800a8ac:	20004ddc 	.word	0x20004ddc
 800a8b0:	20004dd4 	.word	0x20004dd4

0800a8b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b085      	sub	sp, #20
 800a8b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a8ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a8be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a8c0:	4b27      	ldr	r3, [pc, #156]	; (800a960 <prvHeapInit+0xac>)
 800a8c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f003 0307 	and.w	r3, r3, #7
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d00c      	beq.n	800a8e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	3307      	adds	r3, #7
 800a8d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f023 0307 	bic.w	r3, r3, #7
 800a8da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a8dc:	68ba      	ldr	r2, [r7, #8]
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	1ad3      	subs	r3, r2, r3
 800a8e2:	4a1f      	ldr	r2, [pc, #124]	; (800a960 <prvHeapInit+0xac>)
 800a8e4:	4413      	add	r3, r2
 800a8e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a8ec:	4a1d      	ldr	r2, [pc, #116]	; (800a964 <prvHeapInit+0xb0>)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a8f2:	4b1c      	ldr	r3, [pc, #112]	; (800a964 <prvHeapInit+0xb0>)
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	68ba      	ldr	r2, [r7, #8]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a900:	2208      	movs	r2, #8
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	1a9b      	subs	r3, r3, r2
 800a906:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f023 0307 	bic.w	r3, r3, #7
 800a90e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	4a15      	ldr	r2, [pc, #84]	; (800a968 <prvHeapInit+0xb4>)
 800a914:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a916:	4b14      	ldr	r3, [pc, #80]	; (800a968 <prvHeapInit+0xb4>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2200      	movs	r2, #0
 800a91c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a91e:	4b12      	ldr	r3, [pc, #72]	; (800a968 <prvHeapInit+0xb4>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2200      	movs	r2, #0
 800a924:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	68fa      	ldr	r2, [r7, #12]
 800a92e:	1ad2      	subs	r2, r2, r3
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a934:	4b0c      	ldr	r3, [pc, #48]	; (800a968 <prvHeapInit+0xb4>)
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	4a0a      	ldr	r2, [pc, #40]	; (800a96c <prvHeapInit+0xb8>)
 800a942:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	4a09      	ldr	r2, [pc, #36]	; (800a970 <prvHeapInit+0xbc>)
 800a94a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a94c:	4b09      	ldr	r3, [pc, #36]	; (800a974 <prvHeapInit+0xc0>)
 800a94e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a952:	601a      	str	r2, [r3, #0]
}
 800a954:	bf00      	nop
 800a956:	3714      	adds	r7, #20
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr
 800a960:	200011c8 	.word	0x200011c8
 800a964:	20004dc8 	.word	0x20004dc8
 800a968:	20004dd0 	.word	0x20004dd0
 800a96c:	20004dd8 	.word	0x20004dd8
 800a970:	20004dd4 	.word	0x20004dd4
 800a974:	20004ddc 	.word	0x20004ddc

0800a978 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a978:	b480      	push	{r7}
 800a97a:	b085      	sub	sp, #20
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a980:	4b28      	ldr	r3, [pc, #160]	; (800aa24 <prvInsertBlockIntoFreeList+0xac>)
 800a982:	60fb      	str	r3, [r7, #12]
 800a984:	e002      	b.n	800a98c <prvInsertBlockIntoFreeList+0x14>
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	60fb      	str	r3, [r7, #12]
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	429a      	cmp	r2, r3
 800a994:	d8f7      	bhi.n	800a986 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	68ba      	ldr	r2, [r7, #8]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	687a      	ldr	r2, [r7, #4]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d108      	bne.n	800a9ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	685a      	ldr	r2, [r3, #4]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	441a      	add	r2, r3
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	68ba      	ldr	r2, [r7, #8]
 800a9c4:	441a      	add	r2, r3
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d118      	bne.n	800aa00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681a      	ldr	r2, [r3, #0]
 800a9d2:	4b15      	ldr	r3, [pc, #84]	; (800aa28 <prvInsertBlockIntoFreeList+0xb0>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d00d      	beq.n	800a9f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	685a      	ldr	r2, [r3, #4]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	441a      	add	r2, r3
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	601a      	str	r2, [r3, #0]
 800a9f4:	e008      	b.n	800aa08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a9f6:	4b0c      	ldr	r3, [pc, #48]	; (800aa28 <prvInsertBlockIntoFreeList+0xb0>)
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	601a      	str	r2, [r3, #0]
 800a9fe:	e003      	b.n	800aa08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681a      	ldr	r2, [r3, #0]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa08:	68fa      	ldr	r2, [r7, #12]
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	d002      	beq.n	800aa16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa16:	bf00      	nop
 800aa18:	3714      	adds	r7, #20
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop
 800aa24:	20004dc8 	.word	0x20004dc8
 800aa28:	20004dd0 	.word	0x20004dd0

0800aa2c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
 800aa34:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800aa36:	f00a fa21 	bl	8014e7c <sys_timeouts_sleeptime>
 800aa3a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa42:	d10b      	bne.n	800aa5c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800aa44:	4813      	ldr	r0, [pc, #76]	; (800aa94 <tcpip_timeouts_mbox_fetch+0x68>)
 800aa46:	f00c ff90 	bl	801796a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	6839      	ldr	r1, [r7, #0]
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f00c ff02 	bl	8017858 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800aa54:	480f      	ldr	r0, [pc, #60]	; (800aa94 <tcpip_timeouts_mbox_fetch+0x68>)
 800aa56:	f00c ff79 	bl	801794c <sys_mutex_lock>
    return;
 800aa5a:	e018      	b.n	800aa8e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d102      	bne.n	800aa68 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800aa62:	f00a f9d1 	bl	8014e08 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800aa66:	e7e6      	b.n	800aa36 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800aa68:	480a      	ldr	r0, [pc, #40]	; (800aa94 <tcpip_timeouts_mbox_fetch+0x68>)
 800aa6a:	f00c ff7e 	bl	801796a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800aa6e:	68fa      	ldr	r2, [r7, #12]
 800aa70:	6839      	ldr	r1, [r7, #0]
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f00c fef0 	bl	8017858 <sys_arch_mbox_fetch>
 800aa78:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800aa7a:	4806      	ldr	r0, [pc, #24]	; (800aa94 <tcpip_timeouts_mbox_fetch+0x68>)
 800aa7c:	f00c ff66 	bl	801794c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800aa80:	68bb      	ldr	r3, [r7, #8]
 800aa82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa86:	d102      	bne.n	800aa8e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800aa88:	f00a f9be 	bl	8014e08 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800aa8c:	e7d3      	b.n	800aa36 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800aa8e:	3710      	adds	r7, #16
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	2000e2cc 	.word	0x2000e2cc

0800aa98 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800aaa0:	4810      	ldr	r0, [pc, #64]	; (800aae4 <tcpip_thread+0x4c>)
 800aaa2:	f00c ff53 	bl	801794c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800aaa6:	4b10      	ldr	r3, [pc, #64]	; (800aae8 <tcpip_thread+0x50>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d005      	beq.n	800aaba <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800aaae:	4b0e      	ldr	r3, [pc, #56]	; (800aae8 <tcpip_thread+0x50>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a0e      	ldr	r2, [pc, #56]	; (800aaec <tcpip_thread+0x54>)
 800aab4:	6812      	ldr	r2, [r2, #0]
 800aab6:	4610      	mov	r0, r2
 800aab8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800aaba:	f107 030c 	add.w	r3, r7, #12
 800aabe:	4619      	mov	r1, r3
 800aac0:	480b      	ldr	r0, [pc, #44]	; (800aaf0 <tcpip_thread+0x58>)
 800aac2:	f7ff ffb3 	bl	800aa2c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d106      	bne.n	800aada <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800aacc:	4b09      	ldr	r3, [pc, #36]	; (800aaf4 <tcpip_thread+0x5c>)
 800aace:	2291      	movs	r2, #145	; 0x91
 800aad0:	4909      	ldr	r1, [pc, #36]	; (800aaf8 <tcpip_thread+0x60>)
 800aad2:	480a      	ldr	r0, [pc, #40]	; (800aafc <tcpip_thread+0x64>)
 800aad4:	f00d f9b4 	bl	8017e40 <iprintf>
      continue;
 800aad8:	e003      	b.n	800aae2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	4618      	mov	r0, r3
 800aade:	f000 f80f 	bl	800ab00 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800aae2:	e7ea      	b.n	800aaba <tcpip_thread+0x22>
 800aae4:	2000e2cc 	.word	0x2000e2cc
 800aae8:	20004de0 	.word	0x20004de0
 800aaec:	20004de4 	.word	0x20004de4
 800aaf0:	20004de8 	.word	0x20004de8
 800aaf4:	08019f9c 	.word	0x08019f9c
 800aaf8:	08019fcc 	.word	0x08019fcc
 800aafc:	08019fec 	.word	0x08019fec

0800ab00 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	2b02      	cmp	r3, #2
 800ab0e:	d026      	beq.n	800ab5e <tcpip_thread_handle_msg+0x5e>
 800ab10:	2b02      	cmp	r3, #2
 800ab12:	dc2b      	bgt.n	800ab6c <tcpip_thread_handle_msg+0x6c>
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d002      	beq.n	800ab1e <tcpip_thread_handle_msg+0x1e>
 800ab18:	2b01      	cmp	r3, #1
 800ab1a:	d015      	beq.n	800ab48 <tcpip_thread_handle_msg+0x48>
 800ab1c:	e026      	b.n	800ab6c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	6850      	ldr	r0, [r2, #4]
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	6892      	ldr	r2, [r2, #8]
 800ab2a:	4611      	mov	r1, r2
 800ab2c:	4798      	blx	r3
 800ab2e:	4603      	mov	r3, r0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d004      	beq.n	800ab3e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f003 fd6d 	bl	800e618 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ab3e:	6879      	ldr	r1, [r7, #4]
 800ab40:	2009      	movs	r0, #9
 800ab42:	f002 fec5 	bl	800d8d0 <memp_free>
      break;
 800ab46:	e018      	b.n	800ab7a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	6892      	ldr	r2, [r2, #8]
 800ab50:	4610      	mov	r0, r2
 800ab52:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800ab54:	6879      	ldr	r1, [r7, #4]
 800ab56:	2008      	movs	r0, #8
 800ab58:	f002 feba 	bl	800d8d0 <memp_free>
      break;
 800ab5c:	e00d      	b.n	800ab7a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	685b      	ldr	r3, [r3, #4]
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	6892      	ldr	r2, [r2, #8]
 800ab66:	4610      	mov	r0, r2
 800ab68:	4798      	blx	r3
      break;
 800ab6a:	e006      	b.n	800ab7a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ab6c:	4b05      	ldr	r3, [pc, #20]	; (800ab84 <tcpip_thread_handle_msg+0x84>)
 800ab6e:	22cf      	movs	r2, #207	; 0xcf
 800ab70:	4905      	ldr	r1, [pc, #20]	; (800ab88 <tcpip_thread_handle_msg+0x88>)
 800ab72:	4806      	ldr	r0, [pc, #24]	; (800ab8c <tcpip_thread_handle_msg+0x8c>)
 800ab74:	f00d f964 	bl	8017e40 <iprintf>
      break;
 800ab78:	bf00      	nop
  }
}
 800ab7a:	bf00      	nop
 800ab7c:	3708      	adds	r7, #8
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	08019f9c 	.word	0x08019f9c
 800ab88:	08019fcc 	.word	0x08019fcc
 800ab8c:	08019fec 	.word	0x08019fec

0800ab90 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b086      	sub	sp, #24
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	60f8      	str	r0, [r7, #12]
 800ab98:	60b9      	str	r1, [r7, #8]
 800ab9a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ab9c:	481a      	ldr	r0, [pc, #104]	; (800ac08 <tcpip_inpkt+0x78>)
 800ab9e:	f00c fe9a 	bl	80178d6 <sys_mbox_valid>
 800aba2:	4603      	mov	r3, r0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d105      	bne.n	800abb4 <tcpip_inpkt+0x24>
 800aba8:	4b18      	ldr	r3, [pc, #96]	; (800ac0c <tcpip_inpkt+0x7c>)
 800abaa:	22fc      	movs	r2, #252	; 0xfc
 800abac:	4918      	ldr	r1, [pc, #96]	; (800ac10 <tcpip_inpkt+0x80>)
 800abae:	4819      	ldr	r0, [pc, #100]	; (800ac14 <tcpip_inpkt+0x84>)
 800abb0:	f00d f946 	bl	8017e40 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800abb4:	2009      	movs	r0, #9
 800abb6:	f002 fe39 	bl	800d82c <memp_malloc>
 800abba:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d102      	bne.n	800abc8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800abc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abc6:	e01a      	b.n	800abfe <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	2200      	movs	r2, #0
 800abcc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	68fa      	ldr	r2, [r7, #12]
 800abd2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	68ba      	ldr	r2, [r7, #8]
 800abd8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800abe0:	6979      	ldr	r1, [r7, #20]
 800abe2:	4809      	ldr	r0, [pc, #36]	; (800ac08 <tcpip_inpkt+0x78>)
 800abe4:	f00c fe1e 	bl	8017824 <sys_mbox_trypost>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b00      	cmp	r3, #0
 800abec:	d006      	beq.n	800abfc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800abee:	6979      	ldr	r1, [r7, #20]
 800abf0:	2009      	movs	r0, #9
 800abf2:	f002 fe6d 	bl	800d8d0 <memp_free>
    return ERR_MEM;
 800abf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abfa:	e000      	b.n	800abfe <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800abfc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3718      	adds	r7, #24
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop
 800ac08:	20004de8 	.word	0x20004de8
 800ac0c:	08019f9c 	.word	0x08019f9c
 800ac10:	0801a014 	.word	0x0801a014
 800ac14:	08019fec 	.word	0x08019fec

0800ac18 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ac28:	f003 0318 	and.w	r3, r3, #24
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d006      	beq.n	800ac3e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ac30:	4a08      	ldr	r2, [pc, #32]	; (800ac54 <tcpip_input+0x3c>)
 800ac32:	6839      	ldr	r1, [r7, #0]
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f7ff ffab 	bl	800ab90 <tcpip_inpkt>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	e005      	b.n	800ac4a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ac3e:	4a06      	ldr	r2, [pc, #24]	; (800ac58 <tcpip_input+0x40>)
 800ac40:	6839      	ldr	r1, [r7, #0]
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f7ff ffa4 	bl	800ab90 <tcpip_inpkt>
 800ac48:	4603      	mov	r3, r0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3708      	adds	r7, #8
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	08017635 	.word	0x08017635
 800ac58:	08016549 	.word	0x08016549

0800ac5c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ac66:	4819      	ldr	r0, [pc, #100]	; (800accc <tcpip_try_callback+0x70>)
 800ac68:	f00c fe35 	bl	80178d6 <sys_mbox_valid>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d106      	bne.n	800ac80 <tcpip_try_callback+0x24>
 800ac72:	4b17      	ldr	r3, [pc, #92]	; (800acd0 <tcpip_try_callback+0x74>)
 800ac74:	f240 125d 	movw	r2, #349	; 0x15d
 800ac78:	4916      	ldr	r1, [pc, #88]	; (800acd4 <tcpip_try_callback+0x78>)
 800ac7a:	4817      	ldr	r0, [pc, #92]	; (800acd8 <tcpip_try_callback+0x7c>)
 800ac7c:	f00d f8e0 	bl	8017e40 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800ac80:	2008      	movs	r0, #8
 800ac82:	f002 fdd3 	bl	800d82c <memp_malloc>
 800ac86:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d102      	bne.n	800ac94 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800ac8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac92:	e017      	b.n	800acc4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2201      	movs	r2, #1
 800ac98:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	687a      	ldr	r2, [r7, #4]
 800ac9e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	683a      	ldr	r2, [r7, #0]
 800aca4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800aca6:	68f9      	ldr	r1, [r7, #12]
 800aca8:	4808      	ldr	r0, [pc, #32]	; (800accc <tcpip_try_callback+0x70>)
 800acaa:	f00c fdbb 	bl	8017824 <sys_mbox_trypost>
 800acae:	4603      	mov	r3, r0
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d006      	beq.n	800acc2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800acb4:	68f9      	ldr	r1, [r7, #12]
 800acb6:	2008      	movs	r0, #8
 800acb8:	f002 fe0a 	bl	800d8d0 <memp_free>
    return ERR_MEM;
 800acbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800acc0:	e000      	b.n	800acc4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3710      	adds	r7, #16
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	20004de8 	.word	0x20004de8
 800acd0:	08019f9c 	.word	0x08019f9c
 800acd4:	0801a014 	.word	0x0801a014
 800acd8:	08019fec 	.word	0x08019fec

0800acdc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b084      	sub	sp, #16
 800ace0:	af02      	add	r7, sp, #8
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ace6:	f002 f919 	bl	800cf1c <lwip_init>

  tcpip_init_done = initfunc;
 800acea:	4a17      	ldr	r2, [pc, #92]	; (800ad48 <tcpip_init+0x6c>)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800acf0:	4a16      	ldr	r2, [pc, #88]	; (800ad4c <tcpip_init+0x70>)
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800acf6:	2106      	movs	r1, #6
 800acf8:	4815      	ldr	r0, [pc, #84]	; (800ad50 <tcpip_init+0x74>)
 800acfa:	f00c fd71 	bl	80177e0 <sys_mbox_new>
 800acfe:	4603      	mov	r3, r0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d006      	beq.n	800ad12 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ad04:	4b13      	ldr	r3, [pc, #76]	; (800ad54 <tcpip_init+0x78>)
 800ad06:	f240 2261 	movw	r2, #609	; 0x261
 800ad0a:	4913      	ldr	r1, [pc, #76]	; (800ad58 <tcpip_init+0x7c>)
 800ad0c:	4813      	ldr	r0, [pc, #76]	; (800ad5c <tcpip_init+0x80>)
 800ad0e:	f00d f897 	bl	8017e40 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ad12:	4813      	ldr	r0, [pc, #76]	; (800ad60 <tcpip_init+0x84>)
 800ad14:	f00c fdfe 	bl	8017914 <sys_mutex_new>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d006      	beq.n	800ad2c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ad1e:	4b0d      	ldr	r3, [pc, #52]	; (800ad54 <tcpip_init+0x78>)
 800ad20:	f240 2265 	movw	r2, #613	; 0x265
 800ad24:	490f      	ldr	r1, [pc, #60]	; (800ad64 <tcpip_init+0x88>)
 800ad26:	480d      	ldr	r0, [pc, #52]	; (800ad5c <tcpip_init+0x80>)
 800ad28:	f00d f88a 	bl	8017e40 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	9300      	str	r3, [sp, #0]
 800ad30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad34:	2200      	movs	r2, #0
 800ad36:	490c      	ldr	r1, [pc, #48]	; (800ad68 <tcpip_init+0x8c>)
 800ad38:	480c      	ldr	r0, [pc, #48]	; (800ad6c <tcpip_init+0x90>)
 800ad3a:	f00c fe23 	bl	8017984 <sys_thread_new>
}
 800ad3e:	bf00      	nop
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	20004de0 	.word	0x20004de0
 800ad4c:	20004de4 	.word	0x20004de4
 800ad50:	20004de8 	.word	0x20004de8
 800ad54:	08019f9c 	.word	0x08019f9c
 800ad58:	0801a024 	.word	0x0801a024
 800ad5c:	08019fec 	.word	0x08019fec
 800ad60:	2000e2cc 	.word	0x2000e2cc
 800ad64:	0801a048 	.word	0x0801a048
 800ad68:	0800aa99 	.word	0x0800aa99
 800ad6c:	0801a06c 	.word	0x0801a06c

0800ad70 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b084      	sub	sp, #16
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d002      	beq.n	800ad86 <fs_open+0x16>
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d102      	bne.n	800ad8c <fs_open+0x1c>
    return ERR_ARG;
 800ad86:	f06f 030f 	mvn.w	r3, #15
 800ad8a:	e028      	b.n	800adde <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800ad8c:	4b16      	ldr	r3, [pc, #88]	; (800ade8 <fs_open+0x78>)
 800ad8e:	60fb      	str	r3, [r7, #12]
 800ad90:	e020      	b.n	800add4 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	4619      	mov	r1, r3
 800ad98:	6838      	ldr	r0, [r7, #0]
 800ad9a:	f7f5 fa51 	bl	8000240 <strcmp>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d114      	bne.n	800adce <fs_open+0x5e>
      file->data = (const char *)f->data;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	689a      	ldr	r2, [r3, #8]
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	68da      	ldr	r2, [r3, #12]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	68da      	ldr	r2, [r3, #12]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	7c1a      	ldrb	r2, [r3, #16]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800adca:	2300      	movs	r3, #0
 800adcc:	e007      	b.n	800adde <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	60fb      	str	r3, [r7, #12]
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d1db      	bne.n	800ad92 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800adda:	f06f 0305 	mvn.w	r3, #5
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3710      	adds	r7, #16
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop
 800ade8:	0801e700 	.word	0x0801e700

0800adec <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800adf4:	bf00      	nop
 800adf6:	370c      	adds	r7, #12
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b083      	sub	sp, #12
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	685a      	ldr	r2, [r3, #4]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	1ad3      	subs	r3, r2, r3
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	370c      	adds	r7, #12
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr

0800ae1e <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 800ae1e:	b580      	push	{r7, lr}
 800ae20:	b082      	sub	sp, #8
 800ae22:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 800ae24:	f240 4024 	movw	r0, #1060	; 0x424
 800ae28:	f002 fb7e 	bl	800d528 <mem_malloc>
 800ae2c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d005      	beq.n	800ae40 <http_ssi_state_alloc+0x22>
    memset(ret, 0, sizeof(struct http_ssi_state));
 800ae34:	f240 4224 	movw	r2, #1060	; 0x424
 800ae38:	2100      	movs	r1, #0
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f00c ff4e 	bl	8017cdc <memset>
  }
  return ret;
 800ae40:	687b      	ldr	r3, [r7, #4]
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3708      	adds	r7, #8
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b082      	sub	sp, #8
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d002      	beq.n	800ae5e <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f002 f9cb 	bl	800d1f4 <mem_free>
  }
}
 800ae5e:	bf00      	nop
 800ae60:	3708      	adds	r7, #8
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}

0800ae66 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b082      	sub	sp, #8
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800ae6e:	22d8      	movs	r2, #216	; 0xd8
 800ae70:	2100      	movs	r1, #0
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f00c ff32 	bl	8017cdc <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2205      	movs	r2, #5
 800ae7c:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800ae80:	bf00      	nop
 800ae82:	3708      	adds	r7, #8
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800ae8e:	20d8      	movs	r0, #216	; 0xd8
 800ae90:	f002 fb4a 	bl	800d528 <mem_malloc>
 800ae94:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d002      	beq.n	800aea2 <http_state_alloc+0x1a>
    http_state_init(ret);
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f7ff ffe2 	bl	800ae66 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800aea2:	687b      	ldr	r3, [r7, #4]
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3708      	adds	r7, #8
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	695b      	ldr	r3, [r3, #20]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d007      	beq.n	800aecc <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	695b      	ldr	r3, [r3, #20]
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7ff ff93 	bl	800adec <fs_close>
    hs->handle = NULL;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2200      	movs	r2, #0
 800aeca:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d007      	beq.n	800aee4 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7ff ffb6 	bl	800ae4a <http_ssi_state_free>
    hs->ssi = NULL;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6a1b      	ldr	r3, [r3, #32]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d007      	beq.n	800aefc <http_state_eof+0x50>
    pbuf_free(hs->req);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6a1b      	ldr	r3, [r3, #32]
 800aef0:	4618      	mov	r0, r3
 800aef2:	f003 fb91 	bl	800e618 <pbuf_free>
    hs->req = NULL;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2200      	movs	r2, #0
 800aefa:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800aefc:	bf00      	nop
 800aefe:	3708      	adds	r7, #8
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b082      	sub	sp, #8
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d005      	beq.n	800af1e <http_state_free+0x1a>
    http_state_eof(hs);
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f7ff ffca 	bl	800aeac <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f002 f96b 	bl	800d1f4 <mem_free>
  }
}
 800af1e:	bf00      	nop
 800af20:	3708      	adds	r7, #8
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
	...

0800af28 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b086      	sub	sp, #24
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	60f8      	str	r0, [r7, #12]
 800af30:	60b9      	str	r1, [r7, #8]
 800af32:	607a      	str	r2, [r7, #4]
 800af34:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d106      	bne.n	800af4a <http_write+0x22>
 800af3c:	4b2c      	ldr	r3, [pc, #176]	; (800aff0 <http_write+0xc8>)
 800af3e:	f240 2219 	movw	r2, #537	; 0x219
 800af42:	492c      	ldr	r1, [pc, #176]	; (800aff4 <http_write+0xcc>)
 800af44:	482c      	ldr	r0, [pc, #176]	; (800aff8 <http_write+0xd0>)
 800af46:	f00c ff7b 	bl	8017e40 <iprintf>
  len = *length;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	881b      	ldrh	r3, [r3, #0]
 800af4e:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800af50:	8afb      	ldrh	r3, [r7, #22]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d101      	bne.n	800af5a <http_write+0x32>
    return ERR_OK;
 800af56:	2300      	movs	r3, #0
 800af58:	e045      	b.n	800afe6 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800af60:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800af62:	8aba      	ldrh	r2, [r7, #20]
 800af64:	8afb      	ldrh	r3, [r7, #22]
 800af66:	429a      	cmp	r2, r3
 800af68:	d201      	bcs.n	800af6e <http_write+0x46>
    len = max_len;
 800af6a:	8abb      	ldrh	r3, [r7, #20]
 800af6c:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800af72:	005b      	lsls	r3, r3, #1
 800af74:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800af76:	8afa      	ldrh	r2, [r7, #22]
 800af78:	8abb      	ldrh	r3, [r7, #20]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d901      	bls.n	800af82 <http_write+0x5a>
    len = max_len;
 800af7e:	8abb      	ldrh	r3, [r7, #20]
 800af80:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800af82:	78fb      	ldrb	r3, [r7, #3]
 800af84:	8afa      	ldrh	r2, [r7, #22]
 800af86:	68b9      	ldr	r1, [r7, #8]
 800af88:	68f8      	ldr	r0, [r7, #12]
 800af8a:	f008 f8d5 	bl	8013138 <tcp_write>
 800af8e:	4603      	mov	r3, r0
 800af90:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800af92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800af96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800af9a:	d10f      	bne.n	800afbc <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d004      	beq.n	800afb0 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800afac:	2b08      	cmp	r3, #8
 800afae:	d902      	bls.n	800afb6 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800afb0:	2301      	movs	r3, #1
 800afb2:	82fb      	strh	r3, [r7, #22]
 800afb4:	e002      	b.n	800afbc <http_write+0x94>
      } else {
        len /= 2;
 800afb6:	8afb      	ldrh	r3, [r7, #22]
 800afb8:	085b      	lsrs	r3, r3, #1
 800afba:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800afbc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800afc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800afc4:	d102      	bne.n	800afcc <http_write+0xa4>
 800afc6:	8afb      	ldrh	r3, [r7, #22]
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d8da      	bhi.n	800af82 <http_write+0x5a>

  if (err == ERR_OK) {
 800afcc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d103      	bne.n	800afdc <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	8afa      	ldrh	r2, [r7, #22]
 800afd8:	801a      	strh	r2, [r3, #0]
 800afda:	e002      	b.n	800afe2 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800afe2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3718      	adds	r7, #24
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	0801a51c 	.word	0x0801a51c
 800aff4:	0801a554 	.word	0x0801a554
 800aff8:	0801a564 	.word	0x0801a564

0800affc <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b086      	sub	sp, #24
 800b000:	af00      	add	r7, sp, #0
 800b002:	60f8      	str	r0, [r7, #12]
 800b004:	60b9      	str	r1, [r7, #8]
 800b006:	4613      	mov	r3, r2
 800b008:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void *)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d00c      	beq.n	800b02a <http_close_or_abort_conn+0x2e>
    if ((hs->post_content_len_left != 0)
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b016:	2b00      	cmp	r3, #0
 800b018:	d007      	beq.n	800b02a <http_close_or_abort_conn+0x2e>
#if LWIP_HTTPD_POST_MANUAL_WND
        || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 800b01a:	4b1f      	ldr	r3, [pc, #124]	; (800b098 <http_close_or_abort_conn+0x9c>)
 800b01c:	2200      	movs	r2, #0
 800b01e:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800b020:	223f      	movs	r2, #63	; 0x3f
 800b022:	491d      	ldr	r1, [pc, #116]	; (800b098 <http_close_or_abort_conn+0x9c>)
 800b024:	68b8      	ldr	r0, [r7, #8]
 800b026:	f7f7 fd91 	bl	8002b4c <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800b02a:	2100      	movs	r1, #0
 800b02c:	68f8      	ldr	r0, [r7, #12]
 800b02e:	f005 f945 	bl	80102bc <tcp_arg>
  altcp_recv(pcb, NULL);
 800b032:	2100      	movs	r1, #0
 800b034:	68f8      	ldr	r0, [r7, #12]
 800b036:	f005 f953 	bl	80102e0 <tcp_recv>
  altcp_err(pcb, NULL);
 800b03a:	2100      	movs	r1, #0
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f005 f993 	bl	8010368 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800b042:	2200      	movs	r2, #0
 800b044:	2100      	movs	r1, #0
 800b046:	68f8      	ldr	r0, [r7, #12]
 800b048:	f005 f9c8 	bl	80103dc <tcp_poll>
  altcp_sent(pcb, NULL);
 800b04c:	2100      	movs	r1, #0
 800b04e:	68f8      	ldr	r0, [r7, #12]
 800b050:	f005 f968 	bl	8010324 <tcp_sent>
  if (hs != NULL) {
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d002      	beq.n	800b060 <http_close_or_abort_conn+0x64>
    http_state_free(hs);
 800b05a:	68b8      	ldr	r0, [r7, #8]
 800b05c:	f7ff ff52 	bl	800af04 <http_state_free>
  }

  if (abort_conn) {
 800b060:	79fb      	ldrb	r3, [r7, #7]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d004      	beq.n	800b070 <http_close_or_abort_conn+0x74>
    altcp_abort(pcb);
 800b066:	68f8      	ldr	r0, [r7, #12]
 800b068:	f004 f86a 	bl	800f140 <tcp_abort>
    return ERR_OK;
 800b06c:	2300      	movs	r3, #0
 800b06e:	e00f      	b.n	800b090 <http_close_or_abort_conn+0x94>
  }
  err = altcp_close(pcb);
 800b070:	68f8      	ldr	r0, [r7, #12]
 800b072:	f003 ff7b 	bl	800ef6c <tcp_close>
 800b076:	4603      	mov	r3, r0
 800b078:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800b07a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d004      	beq.n	800b08c <http_close_or_abort_conn+0x90>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800b082:	2204      	movs	r2, #4
 800b084:	4905      	ldr	r1, [pc, #20]	; (800b09c <http_close_or_abort_conn+0xa0>)
 800b086:	68f8      	ldr	r0, [r7, #12]
 800b088:	f005 f9a8 	bl	80103dc <tcp_poll>
  }
  return err;
 800b08c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b090:	4618      	mov	r0, r3
 800b092:	3718      	adds	r7, #24
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}
 800b098:	200051ec 	.word	0x200051ec
 800b09c:	0800c91b 	.word	0x0800c91b

0800b0a0 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	6839      	ldr	r1, [r7, #0]
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f7ff ffa4 	bl	800affc <http_close_or_abort_conn>
 800b0b4:	4603      	mov	r3, r0
}
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	3708      	adds	r7, #8
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}

0800b0be <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b0be:	b580      	push	{r7, lr}
 800b0c0:	b082      	sub	sp, #8
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	6078      	str	r0, [r7, #4]
 800b0c6:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800b0c8:	6839      	ldr	r1, [r7, #0]
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f7ff ffe8 	bl	800b0a0 <http_close_conn>
  }
}
 800b0d0:	bf00      	nop
 800b0d2:	3708      	adds	r7, #8
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}

0800b0d8 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b086      	sub	sp, #24
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d003      	beq.n	800b0f0 <extract_uri_parameters+0x18>
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d101      	bne.n	800b0f4 <extract_uri_parameters+0x1c>
    return (0);
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	e04b      	b.n	800b18c <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	613b      	str	r3, [r7, #16]
 800b0fc:	e03f      	b.n	800b17e <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	693a      	ldr	r2, [r7, #16]
 800b102:	320c      	adds	r2, #12
 800b104:	6979      	ldr	r1, [r7, #20]
 800b106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 800b10e:	2126      	movs	r1, #38	; 0x26
 800b110:	6978      	ldr	r0, [r7, #20]
 800b112:	f00d f8b9 	bl	8018288 <strchr>
 800b116:	6178      	str	r0, [r7, #20]
    if (pair) {
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d006      	beq.n	800b12c <extract_uri_parameters+0x54>
      *pair = '\0';
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	2200      	movs	r2, #0
 800b122:	701a      	strb	r2, [r3, #0]
      pair++;
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	3301      	adds	r3, #1
 800b128:	617b      	str	r3, [r7, #20]
 800b12a:	e00c      	b.n	800b146 <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 800b12c:	2120      	movs	r1, #32
 800b12e:	68f8      	ldr	r0, [r7, #12]
 800b130:	f00d f8aa 	bl	8018288 <strchr>
 800b134:	6178      	str	r0, [r7, #20]
      if (pair) {
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d002      	beq.n	800b142 <extract_uri_parameters+0x6a>
        *pair = '\0';
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	2200      	movs	r2, #0
 800b140:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 800b142:	2300      	movs	r3, #0
 800b144:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 800b146:	213d      	movs	r1, #61	; 0x3d
 800b148:	68f8      	ldr	r0, [r7, #12]
 800b14a:	f00d f89d 	bl	8018288 <strchr>
 800b14e:	60f8      	str	r0, [r7, #12]
    if (equals) {
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d00a      	beq.n	800b16c <extract_uri_parameters+0x94>
      *equals = '\0';
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	2200      	movs	r2, #0
 800b15a:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	1c59      	adds	r1, r3, #1
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	693a      	ldr	r2, [r7, #16]
 800b164:	321c      	adds	r2, #28
 800b166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b16a:	e005      	b.n	800b178 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	693a      	ldr	r2, [r7, #16]
 800b170:	321c      	adds	r2, #28
 800b172:	2100      	movs	r1, #0
 800b174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	3301      	adds	r3, #1
 800b17c:	613b      	str	r3, [r7, #16]
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	2b0f      	cmp	r3, #15
 800b182:	dc02      	bgt.n	800b18a <extract_uri_parameters+0xb2>
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d1b9      	bne.n	800b0fe <extract_uri_parameters+0x26>
    }
  }

  return loop;
 800b18a:	693b      	ldr	r3, [r7, #16]
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3718      	adds	r7, #24
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 800b194:	b590      	push	{r4, r7, lr}
 800b196:	b089      	sub	sp, #36	; 0x24
 800b198:	af02      	add	r7, sp, #8
 800b19a:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d106      	bne.n	800b1b0 <get_tag_insert+0x1c>
 800b1a2:	4b5b      	ldr	r3, [pc, #364]	; (800b310 <get_tag_insert+0x17c>)
 800b1a4:	f44f 7241 	mov.w	r2, #772	; 0x304
 800b1a8:	495a      	ldr	r1, [pc, #360]	; (800b314 <get_tag_insert+0x180>)
 800b1aa:	485b      	ldr	r0, [pc, #364]	; (800b318 <get_tag_insert+0x184>)
 800b1ac:	f00c fe48 	bl	8017e40 <iprintf>
  ssi = hs->ssi;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b4:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800b1b6:	693b      	ldr	r3, [r7, #16]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d106      	bne.n	800b1ca <get_tag_insert+0x36>
 800b1bc:	4b54      	ldr	r3, [pc, #336]	; (800b310 <get_tag_insert+0x17c>)
 800b1be:	f240 3206 	movw	r2, #774	; 0x306
 800b1c2:	4956      	ldr	r1, [pc, #344]	; (800b31c <get_tag_insert+0x188>)
 800b1c4:	4854      	ldr	r0, [pc, #336]	; (800b318 <get_tag_insert+0x184>)
 800b1c6:	f00c fe3b 	bl	8017e40 <iprintf>
#if LWIP_HTTPD_SSI_MULTIPART
  current_tag_part = ssi->tag_part;
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	8a9b      	ldrh	r3, [r3, #20]
 800b1ce:	81fb      	strh	r3, [r7, #14]
  ssi->tag_part = HTTPD_LAST_TAG_PART;
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1d6:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 800b1d8:	4b51      	ldr	r3, [pc, #324]	; (800b320 <get_tag_insert+0x18c>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d034      	beq.n	800b24a <get_tag_insert+0xb6>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 800b1e0:	4b50      	ldr	r3, [pc, #320]	; (800b324 <get_tag_insert+0x190>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d030      	beq.n	800b24a <get_tag_insert+0xb6>
 800b1e8:	4b4f      	ldr	r3, [pc, #316]	; (800b328 <get_tag_insert+0x194>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d02c      	beq.n	800b24a <get_tag_insert+0xb6>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	617b      	str	r3, [r7, #20]
 800b1f4:	e024      	b.n	800b240 <get_tag_insert+0xac>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	f103 0018 	add.w	r0, r3, #24
 800b1fc:	4b49      	ldr	r3, [pc, #292]	; (800b324 <get_tag_insert+0x190>)
 800b1fe:	681a      	ldr	r2, [r3, #0]
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	009b      	lsls	r3, r3, #2
 800b204:	4413      	add	r3, r2
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4619      	mov	r1, r3
 800b20a:	f7f5 f819 	bl	8000240 <strcmp>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d112      	bne.n	800b23a <get_tag_insert+0xa6>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 800b214:	4b42      	ldr	r3, [pc, #264]	; (800b320 <get_tag_insert+0x18c>)
 800b216:	681c      	ldr	r4, [r3, #0]
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	f103 0121 	add.w	r1, r3, #33	; 0x21
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	3314      	adds	r3, #20
 800b222:	89fa      	ldrh	r2, [r7, #14]
 800b224:	9300      	str	r3, [sp, #0]
 800b226:	4613      	mov	r3, r2
 800b228:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b22c:	6978      	ldr	r0, [r7, #20]
 800b22e:	47a0      	blx	r4
 800b230:	4603      	mov	r3, r0
 800b232:	461a      	mov	r2, r3
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	825a      	strh	r2, [r3, #18]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 800b238:	e066      	b.n	800b308 <get_tag_insert+0x174>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	3301      	adds	r3, #1
 800b23e:	617b      	str	r3, [r7, #20]
 800b240:	4b39      	ldr	r3, [pc, #228]	; (800b328 <get_tag_insert+0x194>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	697a      	ldr	r2, [r7, #20]
 800b246:	429a      	cmp	r2, r3
 800b248:	dbd5      	blt.n	800b1f6 <get_tag_insert+0x62>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	3318      	adds	r3, #24
 800b24e:	4618      	mov	r0, r3
 800b250:	f7f5 f800 	bl	8000254 <strlen>
 800b254:	4603      	mov	r3, r0
 800b256:	f240 32e6 	movw	r2, #998	; 0x3e6
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d81b      	bhi.n	800b296 <get_tag_insert+0x102>
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	3318      	adds	r3, #24
 800b262:	4618      	mov	r0, r3
 800b264:	f7f4 fff6 	bl	8000254 <strlen>
 800b268:	4603      	mov	r3, r0
 800b26a:	2b09      	cmp	r3, #9
 800b26c:	d813      	bhi.n	800b296 <get_tag_insert+0x102>
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	3318      	adds	r3, #24
 800b272:	4618      	mov	r0, r3
 800b274:	f7f4 ffee 	bl	8000254 <strlen>
 800b278:	4603      	mov	r3, r0
 800b27a:	f240 32e6 	movw	r2, #998	; 0x3e6
 800b27e:	4293      	cmp	r3, r2
 800b280:	d806      	bhi.n	800b290 <get_tag_insert+0xfc>
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	3318      	adds	r3, #24
 800b286:	4618      	mov	r0, r3
 800b288:	f7f4 ffe4 	bl	8000254 <strlen>
 800b28c:	4603      	mov	r3, r0
 800b28e:	e003      	b.n	800b298 <get_tag_insert+0x104>
 800b290:	f240 33e7 	movw	r3, #999	; 0x3e7
 800b294:	e000      	b.n	800b298 <get_tag_insert+0x104>
 800b296:	2309      	movs	r3, #9
 800b298:	60bb      	str	r3, [r7, #8]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	3321      	adds	r3, #33	; 0x21
 800b29e:	2212      	movs	r2, #18
 800b2a0:	4922      	ldr	r1, [pc, #136]	; (800b32c <get_tag_insert+0x198>)
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f00c fcf2 	bl	8017c8c <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	f103 0033 	add.w	r0, r3, #51	; 0x33
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	3318      	adds	r3, #24
 800b2b2:	68ba      	ldr	r2, [r7, #8]
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	f00c fce9 	bl	8017c8c <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	3312      	adds	r3, #18
 800b2be:	3320      	adds	r3, #32
 800b2c0:	693a      	ldr	r2, [r7, #16]
 800b2c2:	4413      	add	r3, r2
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	2207      	movs	r2, #7
 800b2c8:	4919      	ldr	r1, [pc, #100]	; (800b330 <get_tag_insert+0x19c>)
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f00c fcde 	bl	8017c8c <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	3319      	adds	r3, #25
 800b2d4:	693a      	ldr	r2, [r7, #16]
 800b2d6:	4413      	add	r3, r2
 800b2d8:	2200      	movs	r2, #0
 800b2da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  len = strlen(ssi->tag_insert);
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	3321      	adds	r3, #33	; 0x21
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7f4 ffb6 	bl	8000254 <strlen>
 800b2e8:	60b8      	str	r0, [r7, #8]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2f0:	d306      	bcc.n	800b300 <get_tag_insert+0x16c>
 800b2f2:	4b07      	ldr	r3, [pc, #28]	; (800b310 <get_tag_insert+0x17c>)
 800b2f4:	f240 323f 	movw	r2, #831	; 0x33f
 800b2f8:	490e      	ldr	r1, [pc, #56]	; (800b334 <get_tag_insert+0x1a0>)
 800b2fa:	4807      	ldr	r0, [pc, #28]	; (800b318 <get_tag_insert+0x184>)
 800b2fc:	f00c fda0 	bl	8017e40 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	b29a      	uxth	r2, r3
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	825a      	strh	r2, [r3, #18]
}
 800b308:	371c      	adds	r7, #28
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd90      	pop	{r4, r7, pc}
 800b30e:	bf00      	nop
 800b310:	0801a51c 	.word	0x0801a51c
 800b314:	0801a58c 	.word	0x0801a58c
 800b318:	0801a564 	.word	0x0801a564
 800b31c:	0801a598 	.word	0x0801a598
 800b320:	2000522c 	.word	0x2000522c
 800b324:	20005234 	.word	0x20005234
 800b328:	20005230 	.word	0x20005230
 800b32c:	0801a5a4 	.word	0x0801a5a4
 800b330:	0801a5b8 	.word	0x0801a5b8
 800b334:	0801a5c0 	.word	0x0801a5c0

0800b338 <get_http_headers>:
 * Generate the relevant HTTP headers for the given filename and write
 * them into the supplied buffer.
 */
static void
get_http_headers(struct http_state *hs, const char *uri)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b086      	sub	sp, #24
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
  char *ext;
  char *vars;

  /* In all cases, the second header we send is the server identification
     so set it here. */
  hs->hdrs[HDR_STRINGS_IDX_SERVER_NAME] = g_psHTTPHeaderStrings[HTTP_HDR_SERVER];
 800b342:	4a55      	ldr	r2, [pc, #340]	; (800b498 <get_http_headers+0x160>)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = NULL;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2200      	movs	r2, #0
 800b34e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = NULL;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2200      	movs	r2, #0
 800b356:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

  /* Is this a normal file or the special case we use to send back the
     default "404: Page not found" response? */
  if (uri == NULL) {
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d110      	bne.n	800b382 <get_http_headers+0x4a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 800b360:	4a4e      	ldr	r2, [pc, #312]	; (800b49c <get_http_headers+0x164>)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if (hs->keepalive) {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML_PERSISTENT];
    } else
#endif
    {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML];
 800b368:	4a4d      	ldr	r2, [pc, #308]	; (800b4a0 <get_http_headers+0x168>)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    }

    /* Set up to send the first header string. */
    hs->hdr_index = 0;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    hs->hdr_pos = 0;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    return;
 800b380:	e087      	b.n	800b492 <get_http_headers+0x15a>
  }
  /* We are dealing with a particular filename. Look for one other
      special case.  We assume that any filename with "404" in it must be
      indicative of a 404 server error whereas all other files require
      the 200 OK header. */
  if (strstr(uri, "404")) {
 800b382:	4948      	ldr	r1, [pc, #288]	; (800b4a4 <get_http_headers+0x16c>)
 800b384:	6838      	ldr	r0, [r7, #0]
 800b386:	f00c ffb9 	bl	80182fc <strstr>
 800b38a:	4603      	mov	r3, r0
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d004      	beq.n	800b39a <get_http_headers+0x62>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 800b390:	4a42      	ldr	r2, [pc, #264]	; (800b49c <get_http_headers+0x164>)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800b398:	e01b      	b.n	800b3d2 <get_http_headers+0x9a>
  } else if (strstr(uri, "400")) {
 800b39a:	4943      	ldr	r1, [pc, #268]	; (800b4a8 <get_http_headers+0x170>)
 800b39c:	6838      	ldr	r0, [r7, #0]
 800b39e:	f00c ffad 	bl	80182fc <strstr>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d004      	beq.n	800b3b2 <get_http_headers+0x7a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_BAD_REQUEST];
 800b3a8:	4a40      	ldr	r2, [pc, #256]	; (800b4ac <get_http_headers+0x174>)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800b3b0:	e00f      	b.n	800b3d2 <get_http_headers+0x9a>
  } else if (strstr(uri, "501")) {
 800b3b2:	493f      	ldr	r1, [pc, #252]	; (800b4b0 <get_http_headers+0x178>)
 800b3b4:	6838      	ldr	r0, [r7, #0]
 800b3b6:	f00c ffa1 	bl	80182fc <strstr>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d004      	beq.n	800b3ca <get_http_headers+0x92>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_IMPL];
 800b3c0:	4a3c      	ldr	r2, [pc, #240]	; (800b4b4 <get_http_headers+0x17c>)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800b3c8:	e003      	b.n	800b3d2 <get_http_headers+0x9a>
  } else {
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_OK];
 800b3ca:	4a3b      	ldr	r2, [pc, #236]	; (800b4b8 <get_http_headers+0x180>)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  /* Determine if the URI has any variables and, if so, temporarily remove
      them. */
  vars = strchr(uri, '?');
 800b3d2:	213f      	movs	r1, #63	; 0x3f
 800b3d4:	6838      	ldr	r0, [r7, #0]
 800b3d6:	f00c ff57 	bl	8018288 <strchr>
 800b3da:	60b8      	str	r0, [r7, #8]
  if (vars) {
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d002      	beq.n	800b3e8 <get_http_headers+0xb0>
    *vars = '\0';
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	701a      	strb	r2, [r3, #0]
  }

  /* Get a pointer to the file extension.  We find this by looking for the
      last occurrence of "." in the filename passed. */
  ext = NULL;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	60fb      	str	r3, [r7, #12]
  tmp = strchr(uri, '.');
 800b3ec:	212e      	movs	r1, #46	; 0x2e
 800b3ee:	6838      	ldr	r0, [r7, #0]
 800b3f0:	f00c ff4a 	bl	8018288 <strchr>
 800b3f4:	6138      	str	r0, [r7, #16]
  while (tmp) {
 800b3f6:	e007      	b.n	800b408 <get_http_headers+0xd0>
    ext = tmp + 1;
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	60fb      	str	r3, [r7, #12]
    tmp = strchr(ext, '.');
 800b3fe:	212e      	movs	r1, #46	; 0x2e
 800b400:	68f8      	ldr	r0, [r7, #12]
 800b402:	f00c ff41 	bl	8018288 <strchr>
 800b406:	6138      	str	r0, [r7, #16]
  while (tmp) {
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d1f4      	bne.n	800b3f8 <get_http_headers+0xc0>
  }
  if (ext != NULL) {
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d014      	beq.n	800b43e <get_http_headers+0x106>
    /* Now determine the content type and add the relevant header for that. */
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 800b414:	2300      	movs	r3, #0
 800b416:	617b      	str	r3, [r7, #20]
 800b418:	e00d      	b.n	800b436 <get_http_headers+0xfe>
      /* Have we found a matching extension? */
      if (!lwip_stricmp(g_psHTTPHeaders[content_type].extension, ext)) {
 800b41a:	4a28      	ldr	r2, [pc, #160]	; (800b4bc <get_http_headers+0x184>)
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b422:	68f9      	ldr	r1, [r7, #12]
 800b424:	4618      	mov	r0, r3
 800b426:	f001 fcd1 	bl	800cdcc <lwip_stricmp>
 800b42a:	4603      	mov	r3, r0
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d009      	beq.n	800b444 <get_http_headers+0x10c>
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	3301      	adds	r3, #1
 800b434:	617b      	str	r3, [r7, #20]
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	2b13      	cmp	r3, #19
 800b43a:	d9ee      	bls.n	800b41a <get_http_headers+0xe2>
 800b43c:	e003      	b.n	800b446 <get_http_headers+0x10e>
        break;
      }
    }
  } else {
    content_type = NUM_HTTP_HEADERS;
 800b43e:	2314      	movs	r3, #20
 800b440:	617b      	str	r3, [r7, #20]
 800b442:	e000      	b.n	800b446 <get_http_headers+0x10e>
        break;
 800b444:	bf00      	nop
  }

  /* Reinstate the parameter marker if there was one in the original URI. */
  if (vars) {
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d002      	beq.n	800b452 <get_http_headers+0x11a>
    *vars = '?';
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	223f      	movs	r2, #63	; 0x3f
 800b450:	701a      	strb	r2, [r3, #0]
    hs->hdr_index = NUM_FILE_HDR_STRINGS;
    return;
  }
#endif /* LWIP_HTTPD_OMIT_HEADER_FOR_EXTENSIONLESS_URI */
  /* Did we find a matching extension? */
  if (content_type < NUM_HTTP_HEADERS) {
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	2b13      	cmp	r3, #19
 800b456:	d808      	bhi.n	800b46a <get_http_headers+0x132>
    /* yes, store it */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaders[content_type].content_type;
 800b458:	4a18      	ldr	r2, [pc, #96]	; (800b4bc <get_http_headers+0x184>)
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	00db      	lsls	r3, r3, #3
 800b45e:	4413      	add	r3, r2
 800b460:	685a      	ldr	r2, [r3, #4]
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800b468:	e00b      	b.n	800b482 <get_http_headers+0x14a>
  } else if (!ext) {
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d104      	bne.n	800b47a <get_http_headers+0x142>
    /* no, no extension found -> use binary transfer to prevent the browser adding '.txt' on save */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_APP;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	4a13      	ldr	r2, [pc, #76]	; (800b4c0 <get_http_headers+0x188>)
 800b474:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800b478:	e003      	b.n	800b482 <get_http_headers+0x14a>
  } else {
    /* No - use the default, plain text file type. */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_DEFAULT_TYPE;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	4a11      	ldr	r2, [pc, #68]	; (800b4c4 <get_http_headers+0x18c>)
 800b47e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }
  /* Set up to send the first header string. */
  hs->hdr_index = 0;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2200      	movs	r2, #0
 800b486:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
  hs->hdr_pos = 0;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2200      	movs	r2, #0
 800b48e:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
}
 800b492:	3718      	adds	r7, #24
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}
 800b498:	0801a1cc 	.word	0x0801a1cc
 800b49c:	0801a090 	.word	0x0801a090
 800b4a0:	0801a20c 	.word	0x0801a20c
 800b4a4:	0801a5d0 	.word	0x0801a5d0
 800b4a8:	0801a5d4 	.word	0x0801a5d4
 800b4ac:	0801a0b0 	.word	0x0801a0b0
 800b4b0:	0801a5d8 	.word	0x0801a5d8
 800b4b4:	0801a0cc 	.word	0x0801a0cc
 800b4b8:	0801a07c 	.word	0x0801a07c
 800b4bc:	0801e714 	.word	0x0801e714
 800b4c0:	0801a3a0 	.word	0x0801a3a0
 800b4c4:	0801a5dc 	.word	0x0801a5dc

0800b4c8 <get_http_content_length>:

/* Add content-length header? */
static void
get_http_content_length(struct http_state *hs)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  u8_t add_content_len = 0;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("already been here?", hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d006      	beq.n	800b4ec <get_http_content_length+0x24>
 800b4de:	4b27      	ldr	r3, [pc, #156]	; (800b57c <get_http_content_length+0xb4>)
 800b4e0:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 800b4e4:	4926      	ldr	r1, [pc, #152]	; (800b580 <get_http_content_length+0xb8>)
 800b4e6:	4827      	ldr	r0, [pc, #156]	; (800b584 <get_http_content_length+0xbc>)
 800b4e8:	f00c fcaa 	bl	8017e40 <iprintf>

  add_content_len = 0;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	73fb      	strb	r3, [r7, #15]
#if LWIP_HTTPD_SSI
  if (hs->ssi == NULL) /* @todo: get maximum file length from SSI */
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d10c      	bne.n	800b512 <get_http_content_length+0x4a>
#endif /* LWIP_HTTPD_SSI */
  {
    if ((hs->handle != NULL) && (hs->handle->flags & FS_FILE_FLAGS_HEADER_PERSISTENT)) {
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	695b      	ldr	r3, [r3, #20]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d008      	beq.n	800b512 <get_http_content_length+0x4a>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	695b      	ldr	r3, [r3, #20]
 800b504:	7c1b      	ldrb	r3, [r3, #16]
 800b506:	f003 0302 	and.w	r3, r3, #2
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d001      	beq.n	800b512 <get_http_content_length+0x4a>
      add_content_len = 1;
 800b50e:	2301      	movs	r3, #1
 800b510:	73fb      	strb	r3, [r7, #15]
    }
  }
  if (add_content_len) {
 800b512:	7bfb      	ldrb	r3, [r7, #15]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d025      	beq.n	800b564 <get_http_content_length+0x9c>
    size_t len;
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
              hs->handle->len);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	695b      	ldr	r3, [r3, #20]
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	461a      	mov	r2, r3
 800b526:	210c      	movs	r1, #12
 800b528:	f001 fc84 	bl	800ce34 <lwip_itoa>
    len = strlen(hs->hdr_content_len);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	33c4      	adds	r3, #196	; 0xc4
 800b530:	4618      	mov	r0, r3
 800b532:	f7f4 fe8f 	bl	8000254 <strlen>
 800b536:	60b8      	str	r0, [r7, #8]
    if (len <= LWIP_HTTPD_MAX_CONTENT_LEN_SIZE - LWIP_HTTPD_MAX_CONTENT_LEN_OFFSET) {
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	2b09      	cmp	r3, #9
 800b53c:	d810      	bhi.n	800b560 <get_http_content_length+0x98>
      SMEMCPY(&hs->hdr_content_len[len], CRLF, 3);
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	33c0      	adds	r3, #192	; 0xc0
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	4413      	add	r3, r2
 800b546:	3304      	adds	r3, #4
 800b548:	2203      	movs	r2, #3
 800b54a:	490f      	ldr	r1, [pc, #60]	; (800b588 <get_http_content_length+0xc0>)
 800b54c:	4618      	mov	r0, r3
 800b54e:	f00c fb9d 	bl	8017c8c <memcpy>
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = hs->hdr_content_len;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800b55e:	e001      	b.n	800b564 <get_http_content_length+0x9c>
    } else {
      add_content_len = 0;
 800b560:	2300      	movs	r3, #0
 800b562:	73fb      	strb	r3, [r7, #15]
  } else {
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONN_CLOSE];
    hs->keepalive = 0;
  }
#else /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  if (add_content_len) {
 800b564:	7bfb      	ldrb	r3, [r7, #15]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d003      	beq.n	800b572 <get_http_content_length+0xaa>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONTENT_LENGTH];
 800b56a:	4a08      	ldr	r2, [pc, #32]	; (800b58c <get_http_content_length+0xc4>)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
}
 800b572:	bf00      	nop
 800b574:	3710      	adds	r7, #16
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	0801a51c 	.word	0x0801a51c
 800b580:	0801a5fc 	.word	0x0801a5fc
 800b584:	0801a564 	.word	0x0801a564
 800b588:	0801a610 	.word	0x0801a610
 800b58c:	0801a15c 	.word	0x0801a15c

0800b590 <http_send_headers>:
 *                                      so don't send HTTP body yet
 *           - HTTP_DATA_TO_SEND_FREED: http_state and pcb are already freed
 */
static u8_t
http_send_headers(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b088      	sub	sp, #32
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800b59a:	2300      	movs	r3, #0
 800b59c:	777b      	strb	r3, [r7, #29]
  u16_t hdrlen, sendlen;

  if (hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL) {
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d102      	bne.n	800b5ae <http_send_headers+0x1e>
    /* set up "content-length" and "connection:" headers */
    get_http_content_length(hs);
 800b5a8:	6838      	ldr	r0, [r7, #0]
 800b5aa:	f7ff ff8d 	bl	800b4c8 <get_http_content_length>
  }

  /* How much data can we send? */
  len = altcp_sndbuf(pcb);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b5b4:	83fb      	strh	r3, [r7, #30]
  sendlen = len;
 800b5b6:	8bfb      	ldrh	r3, [r7, #30]
 800b5b8:	81fb      	strh	r3, [r7, #14]

  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 800b5ba:	e08b      	b.n	800b6d4 <http_send_headers+0x144>
    const void *ptr;
    u16_t old_sendlen;
    u8_t apiflags;
    /* How much do we have to send from the current header? */
    hdrlen = (u16_t)strlen(hs->hdrs[hs->hdr_index]);
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	322c      	adds	r2, #44	; 0x2c
 800b5c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f7f4 fe41 	bl	8000254 <strlen>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	837b      	strh	r3, [r7, #26]

    /* How much of this can we send? */
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 800b5d6:	8b7b      	ldrh	r3, [r7, #26]
 800b5d8:	683a      	ldr	r2, [r7, #0]
 800b5da:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 800b5de:	1a9a      	subs	r2, r3, r2
 800b5e0:	8bfb      	ldrh	r3, [r7, #30]
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	bfa8      	it	ge
 800b5e6:	4613      	movge	r3, r2
 800b5e8:	b29b      	uxth	r3, r3
 800b5ea:	81fb      	strh	r3, [r7, #14]

    /* Send this amount of data or as much as we can given memory
     * constraints. */
    ptr = (const void *)(hs->hdrs[hs->hdr_index] + hs->hdr_pos);
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	322c      	adds	r2, #44	; 0x2c
 800b5f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5fc:	683a      	ldr	r2, [r7, #0]
 800b5fe:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 800b602:	4413      	add	r3, r2
 800b604:	617b      	str	r3, [r7, #20]
    old_sendlen = sendlen;
 800b606:	89fb      	ldrh	r3, [r7, #14]
 800b608:	827b      	strh	r3, [r7, #18]
    apiflags = HTTP_IS_HDR_VOLATILE(hs, ptr);
 800b60a:	2300      	movs	r3, #0
 800b60c:	773b      	strb	r3, [r7, #28]
    if (hs->hdr_index == HDR_STRINGS_IDX_CONTENT_LEN_NR) {
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b614:	2b03      	cmp	r3, #3
 800b616:	d103      	bne.n	800b620 <http_send_headers+0x90>
      /* content-length is always volatile */
      apiflags |= TCP_WRITE_FLAG_COPY;
 800b618:	7f3b      	ldrb	r3, [r7, #28]
 800b61a:	f043 0301 	orr.w	r3, r3, #1
 800b61e:	773b      	strb	r3, [r7, #28]
    }
    if (hs->hdr_index < NUM_FILE_HDR_STRINGS - 1) {
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b626:	2b03      	cmp	r3, #3
 800b628:	d803      	bhi.n	800b632 <http_send_headers+0xa2>
      apiflags |= TCP_WRITE_FLAG_MORE;
 800b62a:	7f3b      	ldrb	r3, [r7, #28]
 800b62c:	f043 0302 	orr.w	r3, r3, #2
 800b630:	773b      	strb	r3, [r7, #28]
    }
    err = http_write(pcb, ptr, &sendlen, apiflags);
 800b632:	7f3b      	ldrb	r3, [r7, #28]
 800b634:	f107 020e 	add.w	r2, r7, #14
 800b638:	6979      	ldr	r1, [r7, #20]
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f7ff fc74 	bl	800af28 <http_write>
 800b640:	4603      	mov	r3, r0
 800b642:	747b      	strb	r3, [r7, #17]
    if ((err == ERR_OK) && (old_sendlen != sendlen)) {
 800b644:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d106      	bne.n	800b65a <http_send_headers+0xca>
 800b64c:	89fb      	ldrh	r3, [r7, #14]
 800b64e:	8a7a      	ldrh	r2, [r7, #18]
 800b650:	429a      	cmp	r2, r3
 800b652:	d002      	beq.n	800b65a <http_send_headers+0xca>
      /* Remember that we added some more data to be transmitted. */
      data_to_send = HTTP_DATA_TO_SEND_CONTINUE;
 800b654:	2301      	movs	r3, #1
 800b656:	777b      	strb	r3, [r7, #29]
 800b658:	e005      	b.n	800b666 <http_send_headers+0xd6>
    } else if (err != ERR_OK) {
 800b65a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d001      	beq.n	800b666 <http_send_headers+0xd6>
      /* special case: http_write does not try to send 1 byte */
      sendlen = 0;
 800b662:	2300      	movs	r3, #0
 800b664:	81fb      	strh	r3, [r7, #14]
    }

    /* Fix up the header position for the next time round. */
    hs->hdr_pos += sendlen;
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 800b66c:	89fb      	ldrh	r3, [r7, #14]
 800b66e:	4413      	add	r3, r2
 800b670:	b29a      	uxth	r2, r3
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    len -= sendlen;
 800b678:	89fb      	ldrh	r3, [r7, #14]
 800b67a:	8bfa      	ldrh	r2, [r7, #30]
 800b67c:	1ad3      	subs	r3, r2, r3
 800b67e:	83fb      	strh	r3, [r7, #30]

    /* Have we finished sending this string? */
    if (hs->hdr_pos == hdrlen) {
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800b686:	8b7a      	ldrh	r2, [r7, #26]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d123      	bne.n	800b6d4 <http_send_headers+0x144>
      /* Yes - move on to the next one */
      hs->hdr_index++;
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b692:	3301      	adds	r3, #1
 800b694:	b29a      	uxth	r2, r3
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      /* skip headers that are NULL (not all headers are required) */
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800b69c:	e007      	b.n	800b6ae <http_send_headers+0x11e>
             (hs->hdrs[hs->hdr_index] == NULL)) {
        hs->hdr_index++;
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	b29a      	uxth	r2, r3
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b6b4:	2b04      	cmp	r3, #4
 800b6b6:	d809      	bhi.n	800b6cc <http_send_headers+0x13c>
             (hs->hdrs[hs->hdr_index] == NULL)) {
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b6be:	461a      	mov	r2, r3
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	322c      	adds	r2, #44	; 0x2c
 800b6c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d0e8      	beq.n	800b69e <http_send_headers+0x10e>
      }
      hs->hdr_pos = 0;
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 800b6d4:	8bfb      	ldrh	r3, [r7, #30]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d008      	beq.n	800b6ec <http_send_headers+0x15c>
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b6e0:	2b04      	cmp	r3, #4
 800b6e2:	d803      	bhi.n	800b6ec <http_send_headers+0x15c>
 800b6e4:	89fb      	ldrh	r3, [r7, #14]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	f47f af68 	bne.w	800b5bc <http_send_headers+0x2c>
    }
  }

  if ((hs->hdr_index >= NUM_FILE_HDR_STRINGS) && (hs->file == NULL)) {
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b6f2:	2b04      	cmp	r3, #4
 800b6f4:	d90f      	bls.n	800b716 <http_send_headers+0x186>
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	699b      	ldr	r3, [r3, #24]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d10b      	bne.n	800b716 <http_send_headers+0x186>
    /* When we are at the end of the headers, check for data to send
     * instead of waiting for ACK from remote side to continue
     * (which would happen when sending files from async read). */
    if (http_check_eof(pcb, hs)) {
 800b6fe:	6839      	ldr	r1, [r7, #0]
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 f819 	bl	800b738 <http_check_eof>
 800b706:	4603      	mov	r3, r0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d002      	beq.n	800b712 <http_send_headers+0x182>
      data_to_send = HTTP_DATA_TO_SEND_BREAK;
 800b70c:	2302      	movs	r3, #2
 800b70e:	777b      	strb	r3, [r7, #29]
 800b710:	e001      	b.n	800b716 <http_send_headers+0x186>
    } else {
      /* At this point, for non-keepalive connections, hs is deallocated an
         pcb is closed. */
      return HTTP_DATA_TO_SEND_FREED;
 800b712:	2303      	movs	r3, #3
 800b714:	e00b      	b.n	800b72e <http_send_headers+0x19e>
  }
  /* If we get here and there are still header bytes to send, we send
   * the header information we just wrote immediately. If there are no
   * more headers to send, but we do have file data to send, drop through
   * to try to send some file data too. */
  if ((hs->hdr_index < NUM_FILE_HDR_STRINGS) || !hs->file) {
 800b716:	683b      	ldr	r3, [r7, #0]
 800b718:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b71c:	2b04      	cmp	r3, #4
 800b71e:	d903      	bls.n	800b728 <http_send_headers+0x198>
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	699b      	ldr	r3, [r3, #24]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d101      	bne.n	800b72c <http_send_headers+0x19c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("tcp_output\n"));
    return HTTP_DATA_TO_SEND_BREAK;
 800b728:	2302      	movs	r3, #2
 800b72a:	e000      	b.n	800b72e <http_send_headers+0x19e>
  }
  return data_to_send;
 800b72c:	7f7b      	ldrb	r3, [r7, #29]
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3720      	adds	r7, #32
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}
	...

0800b738 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b084      	sub	sp, #16
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	695b      	ldr	r3, [r3, #20]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d105      	bne.n	800b756 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800b74a:	6839      	ldr	r1, [r7, #0]
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f7ff fcb6 	bl	800b0be <http_eof>
    return 0;
 800b752:	2300      	movs	r3, #0
 800b754:	e016      	b.n	800b784 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800b756:	683b      	ldr	r3, [r7, #0]
 800b758:	695b      	ldr	r3, [r3, #20]
 800b75a:	4618      	mov	r0, r3
 800b75c:	f7ff fb50 	bl	800ae00 <fs_bytes_left>
 800b760:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2b00      	cmp	r3, #0
 800b766:	dc05      	bgt.n	800b774 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800b768:	6839      	ldr	r1, [r7, #0]
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f7ff fca7 	bl	800b0be <http_eof>
    return 0;
 800b770:	2300      	movs	r3, #0
 800b772:	e007      	b.n	800b784 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800b774:	4b05      	ldr	r3, [pc, #20]	; (800b78c <http_check_eof+0x54>)
 800b776:	f240 429d 	movw	r2, #1181	; 0x49d
 800b77a:	4905      	ldr	r1, [pc, #20]	; (800b790 <http_check_eof+0x58>)
 800b77c:	4805      	ldr	r0, [pc, #20]	; (800b794 <http_check_eof+0x5c>)
 800b77e:	f00c fb5f 	bl	8017e40 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800b782:	2301      	movs	r3, #1
}
 800b784:	4618      	mov	r0, r3
 800b786:	3710      	adds	r7, #16
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	0801a51c 	.word	0x0801a51c
 800b790:	0801a614 	.word	0x0801a614
 800b794:	0801a564 	.word	0x0801a564

0800b798 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b084      	sub	sp, #16
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d803      	bhi.n	800b7ba <http_send_data_nonssi+0x22>
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	e001      	b.n	800b7be <http_send_data_nonssi+0x26>
 800b7ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b7be:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	6999      	ldr	r1, [r3, #24]
 800b7c4:	f107 020c 	add.w	r2, r7, #12
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f7ff fbac 	bl	800af28 <http_write>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800b7d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d10d      	bne.n	800b7f8 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	699b      	ldr	r3, [r3, #24]
 800b7e4:	89ba      	ldrh	r2, [r7, #12]
 800b7e6:	441a      	add	r2, r3
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f0:	89ba      	ldrh	r2, [r7, #12]
 800b7f2:	1a9a      	subs	r2, r3, r2
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800b7f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3710      	adds	r7, #16
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
	...

0800b804 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b086      	sub	sp, #24
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 800b80e:	2300      	movs	r3, #0
 800b810:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 800b812:	2300      	movs	r3, #0
 800b814:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b81a:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d106      	bne.n	800b830 <http_send_data_ssi+0x2c>
 800b822:	4b89      	ldr	r3, [pc, #548]	; (800ba48 <http_send_data_ssi+0x244>)
 800b824:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800b828:	4988      	ldr	r1, [pc, #544]	; (800ba4c <http_send_data_ssi+0x248>)
 800b82a:	4889      	ldr	r0, [pc, #548]	; (800ba50 <http_send_data_ssi+0x24c>)
 800b82c:	f00c fb08 	bl	8017e40 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b836:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	681a      	ldr	r2, [r3, #0]
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	699b      	ldr	r3, [r3, #24]
 800b840:	429a      	cmp	r2, r3
 800b842:	f240 82c5 	bls.w	800bdd0 <http_send_data_ssi+0x5cc>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	681a      	ldr	r2, [r3, #0]
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	699b      	ldr	r3, [r3, #24]
 800b84e:	1ad3      	subs	r3, r2, r3
 800b850:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b854:	4293      	cmp	r3, r2
 800b856:	dc06      	bgt.n	800b866 <http_send_data_ssi+0x62>
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	681a      	ldr	r2, [r3, #0]
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	699b      	ldr	r3, [r3, #24]
 800b860:	1ad3      	subs	r3, r2, r3
 800b862:	b29b      	uxth	r3, r3
 800b864:	e001      	b.n	800b86a <http_send_data_ssi+0x66>
 800b866:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b86a:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	6999      	ldr	r1, [r3, #24]
 800b870:	f107 020e 	add.w	r2, r7, #14
 800b874:	2300      	movs	r3, #0
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f7ff fb56 	bl	800af28 <http_write>
 800b87c:	4603      	mov	r3, r0
 800b87e:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800b880:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d10d      	bne.n	800b8a4 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 800b888:	2301      	movs	r3, #1
 800b88a:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	699b      	ldr	r3, [r3, #24]
 800b890:	89fa      	ldrh	r2, [r7, #14]
 800b892:	441a      	add	r2, r3
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b89c:	89fa      	ldrh	r2, [r7, #14]
 800b89e:	1a9a      	subs	r2, r3, r2
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	f040 8290 	bne.w	800bdd0 <http_send_data_ssi+0x5cc>
      return data_to_send;
 800b8b0:	7dbb      	ldrb	r3, [r7, #22]
 800b8b2:	e2d6      	b.n	800be62 <http_send_data_ssi+0x65e>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 800b8b4:	89fb      	ldrh	r3, [r7, #14]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d101      	bne.n	800b8be <http_send_data_ssi+0xba>
      return data_to_send;
 800b8ba:	7dbb      	ldrb	r3, [r7, #22]
 800b8bc:	e2d1      	b.n	800be62 <http_send_data_ssi+0x65e>
    }
    switch (ssi->tag_state) {
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	f893 3422 	ldrb.w	r3, [r3, #1058]	; 0x422
 800b8c4:	2b04      	cmp	r3, #4
 800b8c6:	f200 8282 	bhi.w	800bdce <http_send_data_ssi+0x5ca>
 800b8ca:	a201      	add	r2, pc, #4	; (adr r2, 800b8d0 <http_send_data_ssi+0xcc>)
 800b8cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8d0:	0800b8e5 	.word	0x0800b8e5
 800b8d4:	0800b93f 	.word	0x0800b93f
 800b8d8:	0800b9b1 	.word	0x0800b9b1
 800b8dc:	0800baf9 	.word	0x0800baf9
 800b8e0:	0800bc6f 	.word	0x0800bc6f
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	757b      	strb	r3, [r7, #21]
 800b8e8:	e01b      	b.n	800b922 <http_send_data_ssi+0x11e>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	781a      	ldrb	r2, [r3, #0]
 800b8f0:	7d7b      	ldrb	r3, [r7, #21]
 800b8f2:	4958      	ldr	r1, [pc, #352]	; (800ba54 <http_send_data_ssi+0x250>)
 800b8f4:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d10e      	bne.n	800b91c <http_send_data_ssi+0x118>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	7d7a      	ldrb	r2, [r7, #21]
 800b902:	759a      	strb	r2, [r3, #22]
            ssi->tag_state = TAG_LEADIN;
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	2201      	movs	r2, #1
 800b908:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
            ssi->tag_index = 1;
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	2201      	movs	r2, #1
 800b910:	821a      	strh	r2, [r3, #16]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	605a      	str	r2, [r3, #4]
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 800b91a:	e005      	b.n	800b928 <http_send_data_ssi+0x124>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800b91c:	7d7b      	ldrb	r3, [r7, #21]
 800b91e:	3301      	adds	r3, #1
 800b920:	757b      	strb	r3, [r7, #21]
 800b922:	7d7b      	ldrb	r3, [r7, #21]
 800b924:	2b01      	cmp	r3, #1
 800b926:	d9e0      	bls.n	800b8ea <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	68db      	ldr	r3, [r3, #12]
 800b92c:	1e5a      	subs	r2, r3, #1
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	1c5a      	adds	r2, r3, #1
 800b938:	693b      	ldr	r3, [r7, #16]
 800b93a:	601a      	str	r2, [r3, #0]
        break;
 800b93c:	e248      	b.n	800bdd0 <http_send_data_ssi+0x5cc>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	7d9b      	ldrb	r3, [r3, #22]
 800b942:	461a      	mov	r2, r3
 800b944:	4b43      	ldr	r3, [pc, #268]	; (800ba54 <http_send_data_ssi+0x250>)
 800b946:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800b94a:	693a      	ldr	r2, [r7, #16]
 800b94c:	8a12      	ldrh	r2, [r2, #16]
 800b94e:	4413      	add	r3, r2
 800b950:	781b      	ldrb	r3, [r3, #0]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d107      	bne.n	800b966 <http_send_data_ssi+0x162>
          ssi->tag_index = 0;
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	2200      	movs	r2, #0
 800b95a:	821a      	strh	r2, [r3, #16]
          ssi->tag_state = TAG_FOUND;
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	2202      	movs	r2, #2
 800b960:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
 800b964:	e234      	b.n	800bdd0 <http_send_data_ssi+0x5cc>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	781a      	ldrb	r2, [r3, #0]
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	7d9b      	ldrb	r3, [r3, #22]
 800b970:	4619      	mov	r1, r3
 800b972:	4b38      	ldr	r3, [pc, #224]	; (800ba54 <http_send_data_ssi+0x250>)
 800b974:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 800b978:	6939      	ldr	r1, [r7, #16]
 800b97a:	8a09      	ldrh	r1, [r1, #16]
 800b97c:	440b      	add	r3, r1
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	429a      	cmp	r2, r3
 800b982:	d106      	bne.n	800b992 <http_send_data_ssi+0x18e>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	8a1b      	ldrh	r3, [r3, #16]
 800b988:	3301      	adds	r3, #1
 800b98a:	b29a      	uxth	r2, r3
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	821a      	strh	r2, [r3, #16]
 800b990:	e003      	b.n	800b99a <http_send_data_ssi+0x196>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	2200      	movs	r2, #0
 800b996:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	68db      	ldr	r3, [r3, #12]
 800b99e:	1e5a      	subs	r2, r3, #1
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	1c5a      	adds	r2, r3, #1
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	601a      	str	r2, [r3, #0]
        }
        break;
 800b9ae:	e20f      	b.n	800bdd0 <http_send_data_ssi+0x5cc>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800b9b0:	693b      	ldr	r3, [r7, #16]
 800b9b2:	8a1b      	ldrh	r3, [r3, #16]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d11e      	bne.n	800b9f6 <http_send_data_ssi+0x1f2>
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	781b      	ldrb	r3, [r3, #0]
 800b9be:	2b20      	cmp	r3, #32
 800b9c0:	d00e      	beq.n	800b9e0 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800b9c8:	2b09      	cmp	r3, #9
 800b9ca:	d009      	beq.n	800b9e0 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	2b0a      	cmp	r3, #10
 800b9d4:	d004      	beq.n	800b9e0 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\r'))) {
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b9dc:	2b0d      	cmp	r3, #13
 800b9de:	d10a      	bne.n	800b9f6 <http_send_data_ssi+0x1f2>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	1e5a      	subs	r2, r3, #1
 800b9e6:	693b      	ldr	r3, [r7, #16]
 800b9e8:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	1c5a      	adds	r2, r3, #1
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	601a      	str	r2, [r3, #0]
          break;
 800b9f4:	e1ec      	b.n	800bdd0 <http_send_data_ssi+0x5cc>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	781a      	ldrb	r2, [r3, #0]
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	7d9b      	ldrb	r3, [r3, #22]
 800ba00:	4914      	ldr	r1, [pc, #80]	; (800ba54 <http_send_data_ssi+0x250>)
 800ba02:	00db      	lsls	r3, r3, #3
 800ba04:	440b      	add	r3, r1
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d013      	beq.n	800ba36 <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800ba14:	2b20      	cmp	r3, #32
 800ba16:	d00e      	beq.n	800ba36 <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	781b      	ldrb	r3, [r3, #0]
 800ba1e:	2b09      	cmp	r3, #9
 800ba20:	d009      	beq.n	800ba36 <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800ba28:	2b0a      	cmp	r3, #10
 800ba2a:	d004      	beq.n	800ba36 <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	2b0d      	cmp	r3, #13
 800ba34:	d13f      	bne.n	800bab6 <http_send_data_ssi+0x2b2>

          if (ssi->tag_index == 0) {
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	8a1b      	ldrh	r3, [r3, #16]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d10c      	bne.n	800ba58 <http_send_data_ssi+0x254>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	2200      	movs	r2, #0
 800ba42:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
          if (ssi->tag_index == 0) {
 800ba46:	e04c      	b.n	800bae2 <http_send_data_ssi+0x2de>
 800ba48:	0801a51c 	.word	0x0801a51c
 800ba4c:	0801a598 	.word	0x0801a598
 800ba50:	0801a564 	.word	0x0801a564
 800ba54:	0801e7d0 	.word	0x0801e7d0
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	2203      	movs	r2, #3
 800ba5c:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	8a1b      	ldrh	r3, [r3, #16]
 800ba64:	2bff      	cmp	r3, #255	; 0xff
 800ba66:	d906      	bls.n	800ba76 <http_send_data_ssi+0x272>
 800ba68:	4b92      	ldr	r3, [pc, #584]	; (800bcb4 <http_send_data_ssi+0x4b0>)
 800ba6a:	f240 523a 	movw	r2, #1338	; 0x53a
 800ba6e:	4992      	ldr	r1, [pc, #584]	; (800bcb8 <http_send_data_ssi+0x4b4>)
 800ba70:	4892      	ldr	r0, [pc, #584]	; (800bcbc <http_send_data_ssi+0x4b8>)
 800ba72:	f00c f9e5 	bl	8017e40 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	8a1b      	ldrh	r3, [r3, #16]
 800ba7a:	b2da      	uxtb	r2, r3
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	75da      	strb	r2, [r3, #23]
            ssi->tag_name[ssi->tag_index] = '\0';
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	8a1b      	ldrh	r3, [r3, #16]
 800ba84:	461a      	mov	r2, r3
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	4413      	add	r3, r2
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	761a      	strb	r2, [r3, #24]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	781a      	ldrb	r2, [r3, #0]
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	7d9b      	ldrb	r3, [r3, #22]
 800ba98:	4989      	ldr	r1, [pc, #548]	; (800bcc0 <http_send_data_ssi+0x4bc>)
 800ba9a:	00db      	lsls	r3, r3, #3
 800ba9c:	440b      	add	r3, r1
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d103      	bne.n	800baae <http_send_data_ssi+0x2aa>
              ssi->tag_index = 1;
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	2201      	movs	r2, #1
 800baaa:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 800baac:	e019      	b.n	800bae2 <http_send_data_ssi+0x2de>
            } else {
              ssi->tag_index = 0;
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	2200      	movs	r2, #0
 800bab2:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 800bab4:	e015      	b.n	800bae2 <http_send_data_ssi+0x2de>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	8a1b      	ldrh	r3, [r3, #16]
 800baba:	2b07      	cmp	r3, #7
 800babc:	d80d      	bhi.n	800bada <http_send_data_ssi+0x2d6>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	8a1b      	ldrh	r3, [r3, #16]
 800bac6:	1c59      	adds	r1, r3, #1
 800bac8:	b288      	uxth	r0, r1
 800baca:	6939      	ldr	r1, [r7, #16]
 800bacc:	8208      	strh	r0, [r1, #16]
 800bace:	4619      	mov	r1, r3
 800bad0:	7812      	ldrb	r2, [r2, #0]
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	440b      	add	r3, r1
 800bad6:	761a      	strb	r2, [r3, #24]
 800bad8:	e003      	b.n	800bae2 <http_send_data_ssi+0x2de>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	2200      	movs	r2, #0
 800bade:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	68db      	ldr	r3, [r3, #12]
 800bae6:	1e5a      	subs	r2, r3, #1
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	1c5a      	adds	r2, r3, #1
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	601a      	str	r2, [r3, #0]

        break;
 800baf6:	e16b      	b.n	800bdd0 <http_send_data_ssi+0x5cc>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	8a1b      	ldrh	r3, [r3, #16]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d11e      	bne.n	800bb3e <http_send_data_ssi+0x33a>
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	2b20      	cmp	r3, #32
 800bb08:	d00e      	beq.n	800bb28 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800bb10:	2b09      	cmp	r3, #9
 800bb12:	d009      	beq.n	800bb28 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	2b0a      	cmp	r3, #10
 800bb1c:	d004      	beq.n	800bb28 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\r'))) {
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800bb24:	2b0d      	cmp	r3, #13
 800bb26:	d10a      	bne.n	800bb3e <http_send_data_ssi+0x33a>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	68db      	ldr	r3, [r3, #12]
 800bb2c:	1e5a      	subs	r2, r3, #1
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	1c5a      	adds	r2, r3, #1
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	601a      	str	r2, [r3, #0]
          break;
 800bb3c:	e148      	b.n	800bdd0 <http_send_data_ssi+0x5cc>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 800bb3e:	693b      	ldr	r3, [r7, #16]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	781a      	ldrb	r2, [r3, #0]
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	7d9b      	ldrb	r3, [r3, #22]
 800bb48:	495d      	ldr	r1, [pc, #372]	; (800bcc0 <http_send_data_ssi+0x4bc>)
 800bb4a:	00db      	lsls	r3, r3, #3
 800bb4c:	440b      	add	r3, r1
 800bb4e:	685b      	ldr	r3, [r3, #4]
 800bb50:	6939      	ldr	r1, [r7, #16]
 800bb52:	8a09      	ldrh	r1, [r1, #16]
 800bb54:	440b      	add	r3, r1
 800bb56:	781b      	ldrb	r3, [r3, #0]
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	d179      	bne.n	800bc50 <http_send_data_ssi+0x44c>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	68db      	ldr	r3, [r3, #12]
 800bb60:	1e5a      	subs	r2, r3, #1
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	1c5a      	adds	r2, r3, #1
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	8a1b      	ldrh	r3, [r3, #16]
 800bb74:	3301      	adds	r3, #1
 800bb76:	b29a      	uxth	r2, r3
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	821a      	strh	r2, [r3, #16]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	7d9b      	ldrb	r3, [r3, #22]
 800bb80:	4a4f      	ldr	r2, [pc, #316]	; (800bcc0 <http_send_data_ssi+0x4bc>)
 800bb82:	00db      	lsls	r3, r3, #3
 800bb84:	4413      	add	r3, r2
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	693a      	ldr	r2, [r7, #16]
 800bb8a:	8a12      	ldrh	r2, [r2, #16]
 800bb8c:	4413      	add	r3, r2
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	f040 811d 	bne.w	800bdd0 <http_send_data_ssi+0x5cc>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 800bb9c:	6838      	ldr	r0, [r7, #0]
 800bb9e:	f7ff faf9 	bl	800b194 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	2200      	movs	r2, #0
 800bba6:	821a      	strh	r2, [r3, #16]
            ssi->tag_state = TAG_SENDING;
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	2204      	movs	r2, #4
 800bbac:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
            ssi->tag_end = ssi->parsed;
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	609a      	str	r2, [r3, #8]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->parsed = ssi->tag_started;
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	685a      	ldr	r2, [r3, #4]
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	689a      	ldr	r2, [r3, #8]
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	699b      	ldr	r3, [r3, #24]
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	f240 8101 	bls.w	800bdd0 <http_send_data_ssi+0x5cc>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	685a      	ldr	r2, [r3, #4]
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	699b      	ldr	r3, [r3, #24]
 800bbd6:	1ad3      	subs	r3, r2, r3
 800bbd8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	dc06      	bgt.n	800bbee <http_send_data_ssi+0x3ea>
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	685a      	ldr	r2, [r3, #4]
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	699b      	ldr	r3, [r3, #24]
 800bbe8:	1ad3      	subs	r3, r2, r3
 800bbea:	b29b      	uxth	r3, r3
 800bbec:	e001      	b.n	800bbf2 <http_send_data_ssi+0x3ee>
 800bbee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bbf2:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	6999      	ldr	r1, [r3, #24]
 800bbf8:	f107 020e 	add.w	r2, r7, #14
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f7ff f992 	bl	800af28 <http_write>
 800bc04:	4603      	mov	r3, r0
 800bc06:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 800bc08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	f040 80df 	bne.w	800bdd0 <http_send_data_ssi+0x5cc>
                data_to_send = 1;
 800bc12:	2301      	movs	r3, #1
 800bc14:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
                if (ssi->tag_started <= hs->file) {
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	685a      	ldr	r2, [r3, #4]
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	699b      	ldr	r3, [r3, #24]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d809      	bhi.n	800bc36 <http_send_data_ssi+0x432>
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	689a      	ldr	r2, [r3, #8]
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	1ad3      	subs	r3, r2, r3
 800bc2c:	b29a      	uxth	r2, r3
 800bc2e:	89fb      	ldrh	r3, [r7, #14]
 800bc30:	4413      	add	r3, r2
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	81fb      	strh	r3, [r7, #14]
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	699b      	ldr	r3, [r3, #24]
 800bc3a:	89fa      	ldrh	r2, [r7, #14]
 800bc3c:	441a      	add	r2, r3
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc46:	89fa      	ldrh	r2, [r7, #14]
 800bc48:	1a9a      	subs	r2, r3, r2
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	625a      	str	r2, [r3, #36]	; 0x24
 800bc4e:	e0bf      	b.n	800bdd0 <http_send_data_ssi+0x5cc>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	68db      	ldr	r3, [r3, #12]
 800bc54:	1e5a      	subs	r2, r3, #1
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	1c5a      	adds	r2, r3, #1
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 800bc64:	693b      	ldr	r3, [r7, #16]
 800bc66:	2200      	movs	r2, #0
 800bc68:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
        }
        break;
 800bc6c:	e0b0      	b.n	800bdd0 <http_send_data_ssi+0x5cc>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	689a      	ldr	r2, [r3, #8]
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	699b      	ldr	r3, [r3, #24]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d95c      	bls.n	800bd34 <http_send_data_ssi+0x530>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	685a      	ldr	r2, [r3, #4]
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	699b      	ldr	r3, [r3, #24]
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d206      	bcs.n	800bc94 <http_send_data_ssi+0x490>
 800bc86:	4b0b      	ldr	r3, [pc, #44]	; (800bcb4 <http_send_data_ssi+0x4b0>)
 800bc88:	f240 52ac 	movw	r2, #1452	; 0x5ac
 800bc8c:	490d      	ldr	r1, [pc, #52]	; (800bcc4 <http_send_data_ssi+0x4c0>)
 800bc8e:	480b      	ldr	r0, [pc, #44]	; (800bcbc <http_send_data_ssi+0x4b8>)
 800bc90:	f00c f8d6 	bl	8017e40 <iprintf>
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	685a      	ldr	r2, [r3, #4]
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	699b      	ldr	r3, [r3, #24]
 800bc9c:	1ad3      	subs	r3, r2, r3
 800bc9e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bca2:	4293      	cmp	r3, r2
 800bca4:	dc10      	bgt.n	800bcc8 <http_send_data_ssi+0x4c4>
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	685a      	ldr	r2, [r3, #4]
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	699b      	ldr	r3, [r3, #24]
 800bcae:	1ad3      	subs	r3, r2, r3
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	e00b      	b.n	800bccc <http_send_data_ssi+0x4c8>
 800bcb4:	0801a51c 	.word	0x0801a51c
 800bcb8:	0801a64c 	.word	0x0801a64c
 800bcbc:	0801a564 	.word	0x0801a564
 800bcc0:	0801e7d0 	.word	0x0801e7d0
 800bcc4:	0801a664 	.word	0x0801a664
 800bcc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bccc:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 800bcce:	89fb      	ldrh	r3, [r7, #14]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d00a      	beq.n	800bcea <http_send_data_ssi+0x4e6>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	6999      	ldr	r1, [r3, #24]
 800bcd8:	f107 020e 	add.w	r2, r7, #14
 800bcdc:	2300      	movs	r3, #0
 800bcde:	6878      	ldr	r0, [r7, #4]
 800bce0:	f7ff f922 	bl	800af28 <http_write>
 800bce4:	4603      	mov	r3, r0
 800bce6:	75fb      	strb	r3, [r7, #23]
 800bce8:	e001      	b.n	800bcee <http_send_data_ssi+0x4ea>
          } else {
            err = ERR_OK;
 800bcea:	2300      	movs	r3, #0
 800bcec:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 800bcee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d16c      	bne.n	800bdd0 <http_send_data_ssi+0x5cc>
            data_to_send = 1;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            if (ssi->tag_started <= hs->file) {
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	685a      	ldr	r2, [r3, #4]
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	699b      	ldr	r3, [r3, #24]
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d809      	bhi.n	800bd1a <http_send_data_ssi+0x516>
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	689a      	ldr	r2, [r3, #8]
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	685b      	ldr	r3, [r3, #4]
 800bd0e:	1ad3      	subs	r3, r2, r3
 800bd10:	b29a      	uxth	r2, r3
 800bd12:	89fb      	ldrh	r3, [r7, #14]
 800bd14:	4413      	add	r3, r2
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	81fb      	strh	r3, [r7, #14]
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	699b      	ldr	r3, [r3, #24]
 800bd1e:	89fa      	ldrh	r2, [r7, #14]
 800bd20:	441a      	add	r2, r3
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd2a:	89fa      	ldrh	r2, [r7, #14]
 800bd2c:	1a9a      	subs	r2, r3, r2
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	625a      	str	r2, [r3, #36]	; 0x24
 800bd32:	e04d      	b.n	800bdd0 <http_send_data_ssi+0x5cc>
          }
        } else {
#if LWIP_HTTPD_SSI_MULTIPART
          if (ssi->tag_index >= ssi->tag_insert_len) {
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	8a1a      	ldrh	r2, [r3, #16]
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	8a5b      	ldrh	r3, [r3, #18]
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d30b      	bcc.n	800bd58 <http_send_data_ssi+0x554>
            /* Did the last SSIHandler have more to send? */
            if (ssi->tag_part != HTTPD_LAST_TAG_PART) {
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	8a9b      	ldrh	r3, [r3, #20]
 800bd44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	d005      	beq.n	800bd58 <http_send_data_ssi+0x554>
              /* If so, call it again */
              ssi->tag_index = 0;
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	821a      	strh	r2, [r3, #16]
              get_tag_insert(hs);
 800bd52:	6838      	ldr	r0, [r7, #0]
 800bd54:	f7ff fa1e 	bl	800b194 <get_tag_insert>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	8a1a      	ldrh	r2, [r3, #16]
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	8a5b      	ldrh	r3, [r3, #18]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d222      	bcs.n	800bdaa <http_send_data_ssi+0x5a6>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	8a5a      	ldrh	r2, [r3, #18]
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	8a1b      	ldrh	r3, [r3, #16]
 800bd6c:	1ad3      	subs	r3, r2, r3
 800bd6e:	b29b      	uxth	r3, r3
 800bd70:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	8a1b      	ldrh	r3, [r3, #16]
 800bd76:	3320      	adds	r3, #32
 800bd78:	693a      	ldr	r2, [r7, #16]
 800bd7a:	4413      	add	r3, r2
 800bd7c:	1c59      	adds	r1, r3, #1
 800bd7e:	f107 020e 	add.w	r2, r7, #14
 800bd82:	2301      	movs	r3, #1
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f7ff f8cf 	bl	800af28 <http_write>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 800bd8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d11c      	bne.n	800bdd0 <http_send_data_ssi+0x5cc>
              data_to_send = 1;
 800bd96:	2301      	movs	r3, #1
 800bd98:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	8a1a      	ldrh	r2, [r3, #16]
 800bd9e:	89fb      	ldrh	r3, [r7, #14]
 800bda0:	4413      	add	r3, r2
 800bda2:	b29a      	uxth	r2, r3
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	821a      	strh	r2, [r3, #16]
 800bda8:	e012      	b.n	800bdd0 <http_send_data_ssi+0x5cc>
              /* Don't return here: keep on sending data */
            }
          } else {
#if LWIP_HTTPD_SSI_MULTIPART
            if (ssi->tag_part == HTTPD_LAST_TAG_PART)
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	8a9b      	ldrh	r3, [r3, #20]
 800bdae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d10c      	bne.n	800bdd0 <http_send_data_ssi+0x5cc>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	821a      	strh	r2, [r3, #16]
              ssi->tag_state = TAG_NONE;
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	689a      	ldr	r2, [r3, #8]
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 800bdcc:	e000      	b.n	800bdd0 <http_send_data_ssi+0x5cc>
        default:
          break;
 800bdce:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	f893 3422 	ldrb.w	r3, [r3, #1058]	; 0x422
 800bdd6:	2b04      	cmp	r3, #4
 800bdd8:	d003      	beq.n	800bde2 <http_send_data_ssi+0x5de>
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	68db      	ldr	r3, [r3, #12]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d004      	beq.n	800bdec <http_send_data_ssi+0x5e8>
 800bde2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	f43f ad64 	beq.w	800b8b4 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	f893 3422 	ldrb.w	r3, [r3, #1058]	; 0x422
 800bdf2:	2b04      	cmp	r3, #4
 800bdf4:	d034      	beq.n	800be60 <http_send_data_ssi+0x65c>
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	699b      	ldr	r3, [r3, #24]
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d92e      	bls.n	800be60 <http_send_data_ssi+0x65c>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	681a      	ldr	r2, [r3, #0]
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	699b      	ldr	r3, [r3, #24]
 800be0a:	1ad3      	subs	r3, r2, r3
 800be0c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800be10:	4293      	cmp	r3, r2
 800be12:	dc06      	bgt.n	800be22 <http_send_data_ssi+0x61e>
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	681a      	ldr	r2, [r3, #0]
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	699b      	ldr	r3, [r3, #24]
 800be1c:	1ad3      	subs	r3, r2, r3
 800be1e:	b29b      	uxth	r3, r3
 800be20:	e001      	b.n	800be26 <http_send_data_ssi+0x622>
 800be22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be26:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	6999      	ldr	r1, [r3, #24]
 800be2c:	f107 020e 	add.w	r2, r7, #14
 800be30:	2300      	movs	r3, #0
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f7ff f878 	bl	800af28 <http_write>
 800be38:	4603      	mov	r3, r0
 800be3a:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800be3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d10d      	bne.n	800be60 <http_send_data_ssi+0x65c>
      data_to_send = 1;
 800be44:	2301      	movs	r3, #1
 800be46:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	699b      	ldr	r3, [r3, #24]
 800be4c:	89fa      	ldrh	r2, [r7, #14]
 800be4e:	441a      	add	r2, r3
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be58:	89fa      	ldrh	r2, [r7, #14]
 800be5a:	1a9a      	subs	r2, r3, r2
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 800be60:	7dbb      	ldrb	r3, [r7, #22]
}
 800be62:	4618      	mov	r0, r3
 800be64:	3718      	adds	r7, #24
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}
 800be6a:	bf00      	nop

0800be6c <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b084      	sub	sp, #16
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800be76:	2300      	movs	r3, #0
 800be78:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d101      	bne.n	800be84 <http_send+0x18>
    return 0;
 800be80:	2300      	movs	r3, #0
 800be82:	e048      	b.n	800bf16 <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_FS_ASYNC_READ */

#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Do we have any more header data to send for this file? */
  if (hs->hdr_index < NUM_FILE_HDR_STRINGS) {
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800be8a:	2b04      	cmp	r3, #4
 800be8c:	d812      	bhi.n	800beb4 <http_send+0x48>
    data_to_send = http_send_headers(pcb, hs);
 800be8e:	6839      	ldr	r1, [r7, #0]
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f7ff fb7d 	bl	800b590 <http_send_headers>
 800be96:	4603      	mov	r3, r0
 800be98:	73fb      	strb	r3, [r7, #15]
    if ((data_to_send == HTTP_DATA_TO_SEND_FREED) ||
 800be9a:	7bfb      	ldrb	r3, [r7, #15]
 800be9c:	2b03      	cmp	r3, #3
 800be9e:	d007      	beq.n	800beb0 <http_send+0x44>
 800bea0:	7bfb      	ldrb	r3, [r7, #15]
 800bea2:	2b01      	cmp	r3, #1
 800bea4:	d006      	beq.n	800beb4 <http_send+0x48>
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
         (hs->hdr_index < NUM_FILE_HDR_STRINGS))) {
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
 800beac:	2b04      	cmp	r3, #4
 800beae:	d801      	bhi.n	800beb4 <http_send+0x48>
      return data_to_send;
 800beb0:	7bfb      	ldrb	r3, [r7, #15]
 800beb2:	e030      	b.n	800bf16 <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d108      	bne.n	800bece <http_send+0x62>
    if (!http_check_eof(pcb, hs)) {
 800bebc:	6839      	ldr	r1, [r7, #0]
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f7ff fc3a 	bl	800b738 <http_check_eof>
 800bec4:	4603      	mov	r3, r0
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d101      	bne.n	800bece <http_send+0x62>
      return 0;
 800beca:	2300      	movs	r3, #0
 800becc:	e023      	b.n	800bf16 <http_send+0xaa>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d006      	beq.n	800bee4 <http_send+0x78>
    data_to_send = http_send_data_ssi(pcb, hs);
 800bed6:	6839      	ldr	r1, [r7, #0]
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f7ff fc93 	bl	800b804 <http_send_data_ssi>
 800bede:	4603      	mov	r3, r0
 800bee0:	73fb      	strb	r3, [r7, #15]
 800bee2:	e005      	b.n	800bef0 <http_send+0x84>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800bee4:	6839      	ldr	r1, [r7, #0]
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f7ff fc56 	bl	800b798 <http_send_data_nonssi>
 800beec:	4603      	mov	r3, r0
 800beee:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d10d      	bne.n	800bf14 <http_send+0xa8>
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	695b      	ldr	r3, [r3, #20]
 800befc:	4618      	mov	r0, r3
 800befe:	f7fe ff7f 	bl	800ae00 <fs_bytes_left>
 800bf02:	4603      	mov	r3, r0
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	dc05      	bgt.n	800bf14 <http_send+0xa8>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800bf08:	6839      	ldr	r1, [r7, #0]
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f7ff f8d7 	bl	800b0be <http_eof>
    return 0;
 800bf10:	2300      	movs	r3, #0
 800bf12:	e000      	b.n	800bf16 <http_send+0xaa>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800bf14:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
	...

0800bf20 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b084      	sub	sp, #16
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	4a1c      	ldr	r2, [pc, #112]	; (800bfa0 <http_get_404_file+0x80>)
 800bf2e:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4619      	mov	r1, r3
 800bf38:	4610      	mov	r0, r2
 800bf3a:	f7fe ff19 	bl	800ad70 <fs_open>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800bf42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d024      	beq.n	800bf94 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	4a15      	ldr	r2, [pc, #84]	; (800bfa4 <http_get_404_file+0x84>)
 800bf4e:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	4619      	mov	r1, r3
 800bf58:	4610      	mov	r0, r2
 800bf5a:	f7fe ff09 	bl	800ad70 <fs_open>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800bf62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d014      	beq.n	800bf94 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	4a0e      	ldr	r2, [pc, #56]	; (800bfa8 <http_get_404_file+0x88>)
 800bf6e:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800bf70:	687a      	ldr	r2, [r7, #4]
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	4619      	mov	r1, r3
 800bf78:	4610      	mov	r0, r2
 800bf7a:	f7fe fef9 	bl	800ad70 <fs_open>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800bf82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d004      	beq.n	800bf94 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	601a      	str	r2, [r3, #0]
        return NULL;
 800bf90:	2300      	movs	r3, #0
 800bf92:	e000      	b.n	800bf96 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800bf94:	687b      	ldr	r3, [r7, #4]
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3710      	adds	r7, #16
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
 800bf9e:	bf00      	nop
 800bfa0:	0801a67c 	.word	0x0801a67c
 800bfa4:	0801a688 	.word	0x0801a688
 800bfa8:	0801a694 	.word	0x0801a694

0800bfac <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b082      	sub	sp, #8
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 800bfb4:	4b08      	ldr	r3, [pc, #32]	; (800bfd8 <http_handle_post_finished+0x2c>)
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800bfba:	223f      	movs	r2, #63	; 0x3f
 800bfbc:	4906      	ldr	r1, [pc, #24]	; (800bfd8 <http_handle_post_finished+0x2c>)
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f7f6 fdc4 	bl	8002b4c <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	4904      	ldr	r1, [pc, #16]	; (800bfd8 <http_handle_post_finished+0x2c>)
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f000 faab 	bl	800c524 <http_find_file>
 800bfce:	4603      	mov	r3, r0
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3708      	adds	r7, #8
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}
 800bfd8:	200051ec 	.word	0x200051ec

0800bfdc <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d014      	beq.n	800c016 <http_post_rxpbuf+0x3a>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800bff2:	683a      	ldr	r2, [r7, #0]
 800bff4:	8912      	ldrh	r2, [r2, #8]
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d204      	bcs.n	800c004 <http_post_rxpbuf+0x28>
      hs->post_content_len_left = 0;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2200      	movs	r2, #0
 800bffe:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800c002:	e008      	b.n	800c016 <http_post_rxpbuf+0x3a>
    } else {
      hs->post_content_len_left -= p->tot_len;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c00a:	683a      	ldr	r2, [r7, #0]
 800c00c:	8912      	ldrh	r2, [r2, #8]
 800c00e:	1a9a      	subs	r2, r3, r2
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  if (p != NULL) {
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d006      	beq.n	800c02a <http_post_rxpbuf+0x4e>
    err = httpd_post_receive_data(hs, p);
 800c01c:	6839      	ldr	r1, [r7, #0]
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f7f6 fd52 	bl	8002ac8 <httpd_post_receive_data>
 800c024:	4603      	mov	r3, r0
 800c026:	73fb      	strb	r3, [r7, #15]
 800c028:	e001      	b.n	800c02e <http_post_rxpbuf+0x52>
  } else {
    err = ERR_OK;
 800c02a:	2300      	movs	r3, #0
 800c02c:	73fb      	strb	r3, [r7, #15]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 800c02e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d003      	beq.n	800c03e <http_post_rxpbuf+0x62>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2200      	movs	r2, #0
 800c03a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
  if (hs->post_content_len_left == 0) {
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c044:	2b00      	cmp	r3, #0
 800c046:	d104      	bne.n	800c052 <http_post_rxpbuf+0x76>
    if (hs->unrecved_bytes != 0) {
      return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f7ff ffaf 	bl	800bfac <http_handle_post_finished>
 800c04e:	4603      	mov	r3, r0
 800c050:	e000      	b.n	800c054 <http_post_rxpbuf+0x78>
  }

  return ERR_OK;
 800c052:	2300      	movs	r3, #0
}
 800c054:	4618      	mov	r0, r3
 800c056:	3710      	adds	r7, #16
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}

0800c05c <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b092      	sub	sp, #72	; 0x48
 800c060:	af04      	add	r7, sp, #16
 800c062:	60f8      	str	r0, [r7, #12]
 800c064:	60b9      	str	r1, [r7, #8]
 800c066:	607a      	str	r2, [r7, #4]
 800c068:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 800c06a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c06c:	1c58      	adds	r0, r3, #1
 800c06e:	887a      	ldrh	r2, [r7, #2]
 800c070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c072:	1c59      	adds	r1, r3, #1
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	1acb      	subs	r3, r1, r3
 800c078:	1ad3      	subs	r3, r2, r3
 800c07a:	461a      	mov	r2, r3
 800c07c:	4965      	ldr	r1, [pc, #404]	; (800c214 <http_post_request+0x1b8>)
 800c07e:	f000 fe6f 	bl	800cd60 <lwip_strnstr>
 800c082:	62b8      	str	r0, [r7, #40]	; 0x28

  if (crlfcrlf != NULL) {
 800c084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c086:	2b00      	cmp	r3, #0
 800c088:	f000 80be 	beq.w	800c208 <http_post_request+0x1ac>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 800c08c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c08e:	1c58      	adds	r0, r3, #1
 800c090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c092:	3301      	adds	r3, #1
 800c094:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c096:	1ad3      	subs	r3, r2, r3
 800c098:	461a      	mov	r2, r3
 800c09a:	495f      	ldr	r1, [pc, #380]	; (800c218 <http_post_request+0x1bc>)
 800c09c:	f000 fe60 	bl	800cd60 <lwip_strnstr>
 800c0a0:	6278      	str	r0, [r7, #36]	; 0x24
    if (scontent_len != NULL) {
 800c0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	f000 80ac 	beq.w	800c202 <http_post_request+0x1a6>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 800c0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ac:	3310      	adds	r3, #16
 800c0ae:	220a      	movs	r2, #10
 800c0b0:	495a      	ldr	r1, [pc, #360]	; (800c21c <http_post_request+0x1c0>)
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f000 fe54 	bl	800cd60 <lwip_strnstr>
 800c0b8:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 800c0ba:	6a3b      	ldr	r3, [r7, #32]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	f000 80a0 	beq.w	800c202 <http_post_request+0x1a6>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 800c0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c4:	3310      	adds	r3, #16
 800c0c6:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 800c0c8:	69f8      	ldr	r0, [r7, #28]
 800c0ca:	f00b fc9f 	bl	8017a0c <atoi>
 800c0ce:	6378      	str	r0, [r7, #52]	; 0x34
        if (content_len == 0) {
 800c0d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d10b      	bne.n	800c0ee <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 800c0d6:	69fb      	ldr	r3, [r7, #28]
 800c0d8:	781b      	ldrb	r3, [r3, #0]
 800c0da:	2b30      	cmp	r3, #48	; 0x30
 800c0dc:	d104      	bne.n	800c0e8 <http_post_request+0x8c>
 800c0de:	69fb      	ldr	r3, [r7, #28]
 800c0e0:	3301      	adds	r3, #1
 800c0e2:	781b      	ldrb	r3, [r3, #0]
 800c0e4:	2b0d      	cmp	r3, #13
 800c0e6:	d002      	beq.n	800c0ee <http_post_request+0x92>
            content_len = -1;
 800c0e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c0ec:	637b      	str	r3, [r7, #52]	; 0x34
          }
        }
        if (content_len >= 0) {
 800c0ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	f2c0 8083 	blt.w	800c1fc <http_post_request+0x1a0>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 800c0f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0f8:	3301      	adds	r3, #1
 800c0fa:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 800c0fc:	887a      	ldrh	r2, [r7, #2]
 800c0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c100:	1d19      	adds	r1, r3, #4
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	1acb      	subs	r3, r1, r3
 800c106:	429a      	cmp	r2, r3
 800c108:	db05      	blt.n	800c116 <http_post_request+0xba>
 800c10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10c:	1d1a      	adds	r2, r3, #4
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	1ad3      	subs	r3, r2, r3
 800c112:	b29b      	uxth	r3, r3
 800c114:	e000      	b.n	800c118 <http_post_request+0xbc>
 800c116:	887b      	ldrh	r3, [r7, #2]
 800c118:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 800c11a:	887a      	ldrh	r2, [r7, #2]
 800c11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c11e:	1d19      	adds	r1, r3, #4
 800c120:	69bb      	ldr	r3, [r7, #24]
 800c122:	1acb      	subs	r3, r1, r3
 800c124:	429a      	cmp	r2, r3
 800c126:	db05      	blt.n	800c134 <http_post_request+0xd8>
 800c128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12a:	1d1a      	adds	r2, r3, #4
 800c12c:	69bb      	ldr	r3, [r7, #24]
 800c12e:	1ad3      	subs	r3, r2, r3
 800c130:	b29b      	uxth	r3, r3
 800c132:	e000      	b.n	800c136 <http_post_request+0xda>
 800c134:	887b      	ldrh	r3, [r7, #2]
 800c136:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 800c138:	2301      	movs	r3, #1
 800c13a:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 800c13c:	4b38      	ldr	r3, [pc, #224]	; (800c220 <http_post_request+0x1c4>)
 800c13e:	2200      	movs	r2, #0
 800c140:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 800c142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c144:	2200      	movs	r2, #0
 800c146:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 800c148:	8aba      	ldrh	r2, [r7, #20]
 800c14a:	f107 0312 	add.w	r3, r7, #18
 800c14e:	9303      	str	r3, [sp, #12]
 800c150:	233f      	movs	r3, #63	; 0x3f
 800c152:	9302      	str	r3, [sp, #8]
 800c154:	4b32      	ldr	r3, [pc, #200]	; (800c220 <http_post_request+0x1c4>)
 800c156:	9301      	str	r3, [sp, #4]
 800c158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c15a:	9300      	str	r3, [sp, #0]
 800c15c:	4613      	mov	r3, r2
 800c15e:	69ba      	ldr	r2, [r7, #24]
 800c160:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c162:	68b8      	ldr	r0, [r7, #8]
 800c164:	f7f6 fc72 	bl	8002a4c <httpd_post_begin>
 800c168:	4603      	mov	r3, r0
 800c16a:	74fb      	strb	r3, [r7, #19]
                                 http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 800c16c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d13c      	bne.n	800c1ee <http_post_request+0x192>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	633b      	str	r3, [r7, #48]	; 0x30
            u16_t start_offset = hdr_len;
 800c178:	8afb      	ldrh	r3, [r7, #22]
 800c17a:	85fb      	strh	r3, [r7, #46]	; 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 800c17c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

            /* get to the pbuf where the body starts */
            while ((q != NULL) && (q->len <= start_offset)) {
 800c184:	e007      	b.n	800c196 <http_post_request+0x13a>
              start_offset -= q->len;
 800c186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c188:	895b      	ldrh	r3, [r3, #10]
 800c18a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c18c:	1ad3      	subs	r3, r2, r3
 800c18e:	85fb      	strh	r3, [r7, #46]	; 0x2e
              q = q->next;
 800c190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	633b      	str	r3, [r7, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 800c196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d004      	beq.n	800c1a6 <http_post_request+0x14a>
 800c19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19e:	895b      	ldrh	r3, [r3, #10]
 800c1a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d2ef      	bcs.n	800c186 <http_post_request+0x12a>
            }
            if (q != NULL) {
 800c1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d00d      	beq.n	800c1c8 <http_post_request+0x16c>
              /* hide the remaining HTTP header */
              pbuf_remove_header(q, start_offset);
 800c1ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1b2:	f002 f9ab 	bl	800e50c <pbuf_remove_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 800c1b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c1b8:	f002 fad4 	bl	800e764 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 800c1bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c1be:	68b8      	ldr	r0, [r7, #8]
 800c1c0:	f7ff ff0c 	bl	800bfdc <http_post_rxpbuf>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	e021      	b.n	800c20c <http_post_request+0x1b0>
            } else if (hs->post_content_len_left == 0) {
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d10b      	bne.n	800c1ea <http_post_request+0x18e>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 800c1d2:	2241      	movs	r2, #65	; 0x41
 800c1d4:	2100      	movs	r1, #0
 800c1d6:	2000      	movs	r0, #0
 800c1d8:	f001 ff3a 	bl	800e050 <pbuf_alloc>
 800c1dc:	6338      	str	r0, [r7, #48]	; 0x30
              return http_post_rxpbuf(hs, q);
 800c1de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c1e0:	68b8      	ldr	r0, [r7, #8]
 800c1e2:	f7ff fefb 	bl	800bfdc <http_post_rxpbuf>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	e010      	b.n	800c20c <http_post_request+0x1b0>
            } else {
              return ERR_OK;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	e00e      	b.n	800c20c <http_post_request+0x1b0>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	490b      	ldr	r1, [pc, #44]	; (800c220 <http_post_request+0x1c4>)
 800c1f2:	68b8      	ldr	r0, [r7, #8]
 800c1f4:	f000 f996 	bl	800c524 <http_find_file>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	e007      	b.n	800c20c <http_post_request+0x1b0>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
                                    content_len_num));
          return ERR_ARG;
 800c1fc:	f06f 030f 	mvn.w	r3, #15
 800c200:	e004      	b.n	800c20c <http_post_request+0x1b0>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 800c202:	f06f 030f 	mvn.w	r3, #15
 800c206:	e001      	b.n	800c20c <http_post_request+0x1b0>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 800c208:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3738      	adds	r7, #56	; 0x38
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}
 800c214:	0801a6a0 	.word	0x0801a6a0
 800c218:	0801a15c 	.word	0x0801a15c
 800c21c:	0801a610 	.word	0x0801a610
 800c220:	200051ec 	.word	0x200051ec

0800c224 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b092      	sub	sp, #72	; 0x48
 800c228:	af02      	add	r7, sp, #8
 800c22a:	60f8      	str	r0, [r7, #12]
 800c22c:	60b9      	str	r1, [r7, #8]
 800c22e:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800c234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c236:	2b00      	cmp	r3, #0
 800c238:	d106      	bne.n	800c248 <http_parse_request+0x24>
 800c23a:	4b87      	ldr	r3, [pc, #540]	; (800c458 <http_parse_request+0x234>)
 800c23c:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800c240:	4986      	ldr	r1, [pc, #536]	; (800c45c <http_parse_request+0x238>)
 800c242:	4887      	ldr	r0, [pc, #540]	; (800c460 <http_parse_request+0x23c>)
 800c244:	f00b fdfc 	bl	8017e40 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800c248:	68bb      	ldr	r3, [r7, #8]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d106      	bne.n	800c25c <http_parse_request+0x38>
 800c24e:	4b82      	ldr	r3, [pc, #520]	; (800c458 <http_parse_request+0x234>)
 800c250:	f240 72af 	movw	r2, #1967	; 0x7af
 800c254:	4983      	ldr	r1, [pc, #524]	; (800c464 <http_parse_request+0x240>)
 800c256:	4882      	ldr	r0, [pc, #520]	; (800c460 <http_parse_request+0x23c>)
 800c258:	f00b fdf2 	bl	8017e40 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	695b      	ldr	r3, [r3, #20]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d103      	bne.n	800c26c <http_parse_request+0x48>
 800c264:	68bb      	ldr	r3, [r7, #8]
 800c266:	699b      	ldr	r3, [r3, #24]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d002      	beq.n	800c272 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800c26c:	f06f 0307 	mvn.w	r3, #7
 800c270:	e0ed      	b.n	800c44e <http_parse_request+0x22a>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	6a1b      	ldr	r3, [r3, #32]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d103      	bne.n	800c282 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c27e:	621a      	str	r2, [r3, #32]
 800c280:	e005      	b.n	800c28e <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	6a1b      	ldr	r3, [r3, #32]
 800c286:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c288:	4618      	mov	r0, r3
 800c28a:	f002 fa93 	bl	800e7b4 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800c28e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c290:	f002 fa68 	bl	800e764 <pbuf_ref>

  if (hs->req->next != NULL) {
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	6a1b      	ldr	r3, [r3, #32]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d012      	beq.n	800c2c4 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	6a1b      	ldr	r3, [r3, #32]
 800c2a2:	891b      	ldrh	r3, [r3, #8]
 800c2a4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	bf28      	it	cs
 800c2ac:	4613      	movcs	r3, r2
 800c2ae:	877b      	strh	r3, [r7, #58]	; 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	6a18      	ldr	r0, [r3, #32]
 800c2b4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	496b      	ldr	r1, [pc, #428]	; (800c468 <http_parse_request+0x244>)
 800c2ba:	f002 fba3 	bl	800ea04 <pbuf_copy_partial>
    data = httpd_req_buf;
 800c2be:	4b6a      	ldr	r3, [pc, #424]	; (800c468 <http_parse_request+0x244>)
 800c2c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2c2:	e005      	b.n	800c2d0 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800c2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    data_len = p->len;
 800c2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2cc:	895b      	ldrh	r3, [r3, #10]
 800c2ce:	877b      	strh	r3, [r7, #58]	; 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800c2d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c2d2:	2b06      	cmp	r3, #6
 800c2d4:	f240 80a1 	bls.w	800c41a <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800c2d8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c2da:	461a      	mov	r2, r3
 800c2dc:	4963      	ldr	r1, [pc, #396]	; (800c46c <http_parse_request+0x248>)
 800c2de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c2e0:	f000 fd3e 	bl	800cd60 <lwip_strnstr>
 800c2e4:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800c2e6:	6a3b      	ldr	r3, [r7, #32]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	f000 8096 	beq.w	800c41a <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	633b      	str	r3, [r7, #48]	; 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800c2f6:	2204      	movs	r2, #4
 800c2f8:	495d      	ldr	r1, [pc, #372]	; (800c470 <http_parse_request+0x24c>)
 800c2fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c2fc:	f00b ffd9 	bl	80182b2 <strncmp>
 800c300:	4603      	mov	r3, r0
 800c302:	2b00      	cmp	r3, #0
 800c304:	d103      	bne.n	800c30e <http_parse_request+0xea>
        sp1 = data + 3;
 800c306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c308:	3303      	adds	r3, #3
 800c30a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c30c:	e014      	b.n	800c338 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 800c30e:	2205      	movs	r2, #5
 800c310:	4958      	ldr	r1, [pc, #352]	; (800c474 <http_parse_request+0x250>)
 800c312:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c314:	f00b ffcd 	bl	80182b2 <strncmp>
 800c318:	4603      	mov	r3, r0
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d105      	bne.n	800c32a <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 800c31e:	2301      	movs	r3, #1
 800c320:	637b      	str	r3, [r7, #52]	; 0x34
        sp1 = data + 4;
 800c322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c324:	3304      	adds	r3, #4
 800c326:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c328:	e006      	b.n	800c338 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 800c32a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c32c:	3304      	adds	r3, #4
 800c32e:	2200      	movs	r2, #0
 800c330:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
 800c332:	f06f 030f 	mvn.w	r3, #15
 800c336:	e08a      	b.n	800c44e <http_parse_request+0x22a>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800c338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c33a:	1c5a      	adds	r2, r3, #1
 800c33c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c33e:	1ad3      	subs	r3, r2, r3
 800c340:	b29b      	uxth	r3, r3
 800c342:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c344:	1ad3      	subs	r3, r2, r3
 800c346:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800c348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c34a:	3301      	adds	r3, #1
 800c34c:	8bfa      	ldrh	r2, [r7, #30]
 800c34e:	494a      	ldr	r1, [pc, #296]	; (800c478 <http_parse_request+0x254>)
 800c350:	4618      	mov	r0, r3
 800c352:	f000 fd05 	bl	800cd60 <lwip_strnstr>
 800c356:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800c358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d10c      	bne.n	800c378 <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800c35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c360:	3301      	adds	r3, #1
 800c362:	8bfa      	ldrh	r2, [r7, #30]
 800c364:	4941      	ldr	r1, [pc, #260]	; (800c46c <http_parse_request+0x248>)
 800c366:	4618      	mov	r0, r3
 800c368:	f000 fcfa 	bl	800cd60 <lwip_strnstr>
 800c36c:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800c36e:	2301      	movs	r3, #1
 800c370:	633b      	str	r3, [r7, #48]	; 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 800c372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c374:	2b00      	cmp	r3, #0
 800c376:	d163      	bne.n	800c440 <http_parse_request+0x21c>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800c378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c37a:	3301      	adds	r3, #1
 800c37c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c37e:	1ad3      	subs	r3, r2, r3
 800c380:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800c382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c384:	2b00      	cmp	r3, #0
 800c386:	d048      	beq.n	800c41a <http_parse_request+0x1f6>
 800c388:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d944      	bls.n	800c41a <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800c390:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c392:	461a      	mov	r2, r3
 800c394:	4939      	ldr	r1, [pc, #228]	; (800c47c <http_parse_request+0x258>)
 800c396:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c398:	f000 fce2 	bl	800cd60 <lwip_strnstr>
 800c39c:	4603      	mov	r3, r0
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d03b      	beq.n	800c41a <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 800c3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800c3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800c3ae:	8bbb      	ldrh	r3, [r7, #28]
 800c3b0:	69ba      	ldr	r2, [r7, #24]
 800c3b2:	4413      	add	r3, r2
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                                    data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 800c3b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d026      	beq.n	800c40c <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	6a1b      	ldr	r3, [r3, #32]
 800c3c2:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 800c3c4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c8:	9301      	str	r3, [sp, #4]
 800c3ca:	69bb      	ldr	r3, [r7, #24]
 800c3cc:	9300      	str	r3, [sp, #0]
 800c3ce:	4613      	mov	r3, r2
 800c3d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c3d2:	68b9      	ldr	r1, [r7, #8]
 800c3d4:	6978      	ldr	r0, [r7, #20]
 800c3d6:	f7ff fe41 	bl	800c05c <http_post_request>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 800c3de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d00a      	beq.n	800c3fc <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 800c3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e8:	2220      	movs	r2, #32
 800c3ea:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 800c3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ee:	2220      	movs	r2, #32
 800c3f0:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 800c3f2:	8bbb      	ldrh	r3, [r7, #28]
 800c3f4:	69ba      	ldr	r2, [r7, #24]
 800c3f6:	4413      	add	r3, r2
 800c3f8:	2220      	movs	r2, #32
 800c3fa:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 800c3fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c400:	f113 0f10 	cmn.w	r3, #16
 800c404:	d01e      	beq.n	800c444 <http_parse_request+0x220>
              goto badrequest;
            }
            return err;
 800c406:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c40a:	e020      	b.n	800c44e <http_parse_request+0x22a>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800c40c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c40e:	69b9      	ldr	r1, [r7, #24]
 800c410:	68b8      	ldr	r0, [r7, #8]
 800c412:	f000 f887 	bl	800c524 <http_find_file>
 800c416:	4603      	mov	r3, r0
 800c418:	e019      	b.n	800c44e <http_parse_request+0x22a>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	6a1b      	ldr	r3, [r3, #32]
 800c41e:	4618      	mov	r0, r3
 800c420:	f002 f988 	bl	800e734 <pbuf_clen>
 800c424:	4603      	mov	r3, r0
 800c426:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	6a1b      	ldr	r3, [r3, #32]
 800c42c:	891b      	ldrh	r3, [r3, #8]
 800c42e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c432:	d209      	bcs.n	800c448 <http_parse_request+0x224>
 800c434:	8a3b      	ldrh	r3, [r7, #16]
 800c436:	2b05      	cmp	r3, #5
 800c438:	d806      	bhi.n	800c448 <http_parse_request+0x224>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800c43a:	f06f 0304 	mvn.w	r3, #4
 800c43e:	e006      	b.n	800c44e <http_parse_request+0x22a>
          goto badrequest;
 800c440:	bf00      	nop
 800c442:	e002      	b.n	800c44a <http_parse_request+0x226>
              goto badrequest;
 800c444:	bf00      	nop
 800c446:	e000      	b.n	800c44a <http_parse_request+0x226>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 800c448:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800c44a:	f06f 030f 	mvn.w	r3, #15
  }
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3740      	adds	r7, #64	; 0x40
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop
 800c458:	0801a51c 	.word	0x0801a51c
 800c45c:	0801a6a8 	.word	0x0801a6a8
 800c460:	0801a564 	.word	0x0801a564
 800c464:	0801a58c 	.word	0x0801a58c
 800c468:	20004dec 	.word	0x20004dec
 800c46c:	0801a610 	.word	0x0801a610
 800c470:	0801a6b4 	.word	0x0801a6b4
 800c474:	0801a6bc 	.word	0x0801a6bc
 800c478:	0801a6c4 	.word	0x0801a6c4
 800c47c:	0801a6a0 	.word	0x0801a6a0

0800c480 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b088      	sub	sp, #32
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 800c48a:	2300      	movs	r3, #0
 800c48c:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d040      	beq.n	800c516 <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 800c494:	2300      	movs	r3, #0
 800c496:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 800c498:	213f      	movs	r1, #63	; 0x3f
 800c49a:	6838      	ldr	r0, [r7, #0]
 800c49c:	f00b fef4 	bl	8018288 <strchr>
 800c4a0:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d002      	beq.n	800c4ae <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	613b      	str	r3, [r7, #16]
    ext = uri;
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800c4b6:	212e      	movs	r1, #46	; 0x2e
 800c4b8:	6938      	ldr	r0, [r7, #16]
 800c4ba:	f00b fee5 	bl	8018288 <strchr>
 800c4be:	6138      	str	r0, [r7, #16]
 800c4c0:	e009      	b.n	800c4d6 <http_uri_is_ssi+0x56>
      ext = sub;
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	617b      	str	r3, [r7, #20]
      sub++;
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800c4cc:	212e      	movs	r1, #46	; 0x2e
 800c4ce:	6938      	ldr	r0, [r7, #16]
 800c4d0:	f00b feda 	bl	8018288 <strchr>
 800c4d4:	6138      	str	r0, [r7, #16]
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d1f2      	bne.n	800c4c2 <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800c4dc:	2300      	movs	r3, #0
 800c4de:	61fb      	str	r3, [r7, #28]
 800c4e0:	e010      	b.n	800c504 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 800c4e2:	4a0f      	ldr	r2, [pc, #60]	; (800c520 <http_uri_is_ssi+0xa0>)
 800c4e4:	69fb      	ldr	r3, [r7, #28]
 800c4e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	6978      	ldr	r0, [r7, #20]
 800c4ee:	f000 fc6d 	bl	800cdcc <lwip_stricmp>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d102      	bne.n	800c4fe <http_uri_is_ssi+0x7e>
        tag_check = 1;
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	76fb      	strb	r3, [r7, #27]
        break;
 800c4fc:	e005      	b.n	800c50a <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800c4fe:	69fb      	ldr	r3, [r7, #28]
 800c500:	3301      	adds	r3, #1
 800c502:	61fb      	str	r3, [r7, #28]
 800c504:	69fb      	ldr	r3, [r7, #28]
 800c506:	2b04      	cmp	r3, #4
 800c508:	d9eb      	bls.n	800c4e2 <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d002      	beq.n	800c516 <http_uri_is_ssi+0x96>
      *param = '?';
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	223f      	movs	r2, #63	; 0x3f
 800c514:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 800c516:	7efb      	ldrb	r3, [r7, #27]
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3720      	adds	r7, #32
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	0801e7b4 	.word	0x0801e7b4

0800c524 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800c524:	b590      	push	{r4, r7, lr}
 800c526:	b093      	sub	sp, #76	; 0x4c
 800c528:	af02      	add	r7, sp, #8
 800c52a:	60f8      	str	r0, [r7, #12]
 800c52c:	60b9      	str	r1, [r7, #8]
 800c52e:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800c530:	2300      	movs	r3, #0
 800c532:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800c534:	2300      	movs	r3, #0
 800c536:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800c538:	2300      	movs	r3, #0
 800c53a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	4618      	mov	r0, r3
 800c542:	f7f3 fe87 	bl	8000254 <strlen>
 800c546:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800c548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d072      	beq.n	800c634 <http_find_file+0x110>
 800c54e:	68ba      	ldr	r2, [r7, #8]
 800c550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c552:	3b01      	subs	r3, #1
 800c554:	4413      	add	r3, r2
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	2b2f      	cmp	r3, #47	; 0x2f
 800c55a:	d16b      	bne.n	800c634 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800c55c:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800c55e:	4a80      	ldr	r2, [pc, #512]	; (800c760 <http_find_file+0x23c>)
 800c560:	4293      	cmp	r3, r2
 800c562:	d102      	bne.n	800c56a <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800c564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c566:	2b01      	cmp	r3, #1
 800c568:	d164      	bne.n	800c634 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800c56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c56c:	3b01      	subs	r3, #1
 800c56e:	2b3f      	cmp	r3, #63	; 0x3f
 800c570:	bf28      	it	cs
 800c572:	233f      	movcs	r3, #63	; 0x3f
 800c574:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 800c576:	6a3b      	ldr	r3, [r7, #32]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d00a      	beq.n	800c592 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	6a3a      	ldr	r2, [r7, #32]
 800c580:	4619      	mov	r1, r3
 800c582:	4877      	ldr	r0, [pc, #476]	; (800c760 <http_find_file+0x23c>)
 800c584:	f00b fb82 	bl	8017c8c <memcpy>
      http_uri_buf[copy_len] = 0;
 800c588:	4a75      	ldr	r2, [pc, #468]	; (800c760 <http_find_file+0x23c>)
 800c58a:	6a3b      	ldr	r3, [r7, #32]
 800c58c:	4413      	add	r3, r2
 800c58e:	2200      	movs	r2, #0
 800c590:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800c592:	2300      	movs	r3, #0
 800c594:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c596:	e04a      	b.n	800c62e <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800c598:	6a3b      	ldr	r3, [r7, #32]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d028      	beq.n	800c5f0 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800c59e:	6a3b      	ldr	r3, [r7, #32]
 800c5a0:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800c5a4:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 800c5a6:	69fb      	ldr	r3, [r7, #28]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d01e      	beq.n	800c5ea <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800c5ac:	4a6d      	ldr	r2, [pc, #436]	; (800c764 <http_find_file+0x240>)
 800c5ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f7f3 fe4d 	bl	8000254 <strlen>
 800c5ba:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800c5bc:	69ba      	ldr	r2, [r7, #24]
 800c5be:	69fb      	ldr	r3, [r7, #28]
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	bf28      	it	cs
 800c5c4:	4613      	movcs	r3, r2
 800c5c6:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800c5c8:	6a3b      	ldr	r3, [r7, #32]
 800c5ca:	4a65      	ldr	r2, [pc, #404]	; (800c760 <http_find_file+0x23c>)
 800c5cc:	1898      	adds	r0, r3, r2
 800c5ce:	4a65      	ldr	r2, [pc, #404]	; (800c764 <http_find_file+0x240>)
 800c5d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5d2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c5d6:	697a      	ldr	r2, [r7, #20]
 800c5d8:	4619      	mov	r1, r3
 800c5da:	f00b fb57 	bl	8017c8c <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800c5de:	6a3a      	ldr	r2, [r7, #32]
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	4413      	add	r3, r2
 800c5e4:	4a5e      	ldr	r2, [pc, #376]	; (800c760 <http_find_file+0x23c>)
 800c5e6:	2100      	movs	r1, #0
 800c5e8:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800c5ea:	4b5d      	ldr	r3, [pc, #372]	; (800c760 <http_find_file+0x23c>)
 800c5ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800c5ee:	e004      	b.n	800c5fa <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800c5f0:	4a5c      	ldr	r2, [pc, #368]	; (800c764 <http_find_file+0x240>)
 800c5f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c5f8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c5fe:	4618      	mov	r0, r3
 800c600:	f7fe fbb6 	bl	800ad70 <fs_open>
 800c604:	4603      	mov	r3, r0
 800c606:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 800c608:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d10b      	bne.n	800c628 <http_find_file+0x104>
        uri = file_name;
 800c610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c612:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 800c618:	4a52      	ldr	r2, [pc, #328]	; (800c764 <http_find_file+0x240>)
 800c61a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c61c:	00db      	lsls	r3, r3, #3
 800c61e:	4413      	add	r3, r2
 800c620:	791b      	ldrb	r3, [r3, #4]
 800c622:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 800c626:	e005      	b.n	800c634 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800c628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c62a:	3301      	adds	r3, #1
 800c62c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c62e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c630:	2b00      	cmp	r3, #0
 800c632:	d0b1      	beq.n	800c598 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800c634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c636:	2b00      	cmp	r3, #0
 800c638:	d176      	bne.n	800c728 <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	213f      	movs	r1, #63	; 0x3f
 800c63e:	4618      	mov	r0, r3
 800c640:	f00b fe22 	bl	8018288 <strchr>
 800c644:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800c646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d005      	beq.n	800c658 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800c64c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c64e:	2200      	movs	r2, #0
 800c650:	701a      	strb	r2, [r3, #0]
      params++;
 800c652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c654:	3301      	adds	r3, #1
 800c656:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 800c658:	4b43      	ldr	r3, [pc, #268]	; (800c768 <http_find_file+0x244>)
 800c65a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c65e:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 800c660:	4b42      	ldr	r3, [pc, #264]	; (800c76c <http_find_file+0x248>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d034      	beq.n	800c6d2 <http_find_file+0x1ae>
 800c668:	4b41      	ldr	r3, [pc, #260]	; (800c770 <http_find_file+0x24c>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d030      	beq.n	800c6d2 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800c670:	2300      	movs	r3, #0
 800c672:	633b      	str	r3, [r7, #48]	; 0x30
 800c674:	e028      	b.n	800c6c8 <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 800c676:	68b8      	ldr	r0, [r7, #8]
 800c678:	4b3d      	ldr	r3, [pc, #244]	; (800c770 <http_find_file+0x24c>)
 800c67a:	681a      	ldr	r2, [r3, #0]
 800c67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67e:	00db      	lsls	r3, r3, #3
 800c680:	4413      	add	r3, r2
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4619      	mov	r1, r3
 800c686:	f7f3 fddb 	bl	8000240 <strcmp>
 800c68a:	4603      	mov	r3, r0
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d118      	bne.n	800c6c2 <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 800c690:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c692:	68f8      	ldr	r0, [r7, #12]
 800c694:	f7fe fd20 	bl	800b0d8 <extract_uri_parameters>
 800c698:	4603      	mov	r3, r0
 800c69a:	4a33      	ldr	r2, [pc, #204]	; (800c768 <http_find_file+0x244>)
 800c69c:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800c69e:	4b34      	ldr	r3, [pc, #208]	; (800c770 <http_find_file+0x24c>)
 800c6a0:	681a      	ldr	r2, [r3, #0]
 800c6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a4:	00db      	lsls	r3, r3, #3
 800c6a6:	4413      	add	r3, r2
 800c6a8:	685c      	ldr	r4, [r3, #4]
 800c6aa:	4b2f      	ldr	r3, [pc, #188]	; (800c768 <http_find_file+0x244>)
 800c6ac:	6819      	ldr	r1, [r3, #0]
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800c6b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c6ba:	47a0      	blx	r4
 800c6bc:	4603      	mov	r3, r0
 800c6be:	60bb      	str	r3, [r7, #8]
          break;
 800c6c0:	e007      	b.n	800c6d2 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800c6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c4:	3301      	adds	r3, #1
 800c6c6:	633b      	str	r3, [r7, #48]	; 0x30
 800c6c8:	4b28      	ldr	r3, [pc, #160]	; (800c76c <http_find_file+0x248>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	dbd1      	blt.n	800c676 <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	68ba      	ldr	r2, [r7, #8]
 800c6d6:	4611      	mov	r1, r2
 800c6d8:	4618      	mov	r0, r3
 800c6da:	f7fe fb49 	bl	800ad70 <fs_open>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 800c6e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d102      	bne.n	800c6f0 <http_find_file+0x1cc>
      file = &hs->file_handle;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	63bb      	str	r3, [r7, #56]	; 0x38
 800c6ee:	e006      	b.n	800c6fe <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 800c6f0:	f107 0308 	add.w	r3, r7, #8
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	68f8      	ldr	r0, [r7, #12]
 800c6f8:	f7ff fc12 	bl	800bf20 <http_get_404_file>
 800c6fc:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 800c6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c700:	2b00      	cmp	r3, #0
 800c702:	d011      	beq.n	800c728 <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 800c704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c706:	7c1b      	ldrb	r3, [r3, #16]
 800c708:	f003 0308 	and.w	r3, r3, #8
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d003      	beq.n	800c718 <http_find_file+0x1f4>
        tag_check = 1;
 800c710:	2301      	movs	r3, #1
 800c712:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c716:	e007      	b.n	800c728 <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	4619      	mov	r1, r3
 800c71c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c71e:	f7ff feaf 	bl	800c480 <http_uri_is_ssi>
 800c722:	4603      	mov	r3, r0
 800c724:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800c728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d106      	bne.n	800c73c <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800c72e:	f107 0308 	add.w	r3, r7, #8
 800c732:	4619      	mov	r1, r3
 800c734:	68f8      	ldr	r0, [r7, #12]
 800c736:	f7ff fbf3 	bl	800bf20 <http_get_404_file>
 800c73a:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800c73c:	68ba      	ldr	r2, [r7, #8]
 800c73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c740:	9301      	str	r3, [sp, #4]
 800c742:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c746:	9300      	str	r3, [sp, #0]
 800c748:	4613      	mov	r3, r2
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c74e:	68f8      	ldr	r0, [r7, #12]
 800c750:	f000 f810 	bl	800c774 <http_init_file>
 800c754:	4603      	mov	r3, r0
}
 800c756:	4618      	mov	r0, r3
 800c758:	3744      	adds	r7, #68	; 0x44
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd90      	pop	{r4, r7, pc}
 800c75e:	bf00      	nop
 800c760:	200051ec 	.word	0x200051ec
 800c764:	0801e7c8 	.word	0x0801e7c8
 800c768:	20005240 	.word	0x20005240
 800c76c:	2000523c 	.word	0x2000523c
 800c770:	20005238 	.word	0x20005238

0800c774 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b088      	sub	sp, #32
 800c778:	af00      	add	r7, sp, #0
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	60b9      	str	r1, [r7, #8]
 800c77e:	607a      	str	r2, [r7, #4]
 800c780:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d06f      	beq.n	800c868 <http_init_file+0xf4>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800c788:	68bb      	ldr	r3, [r7, #8]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d106      	bne.n	800c79e <http_init_file+0x2a>
 800c790:	4b46      	ldr	r3, [pc, #280]	; (800c8ac <http_init_file+0x138>)
 800c792:	f640 120b 	movw	r2, #2315	; 0x90b
 800c796:	4946      	ldr	r1, [pc, #280]	; (800c8b0 <http_init_file+0x13c>)
 800c798:	4846      	ldr	r0, [pc, #280]	; (800c8b4 <http_init_file+0x140>)
 800c79a:	f00b fb51 	bl	8017e40 <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 800c79e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d01c      	beq.n	800c7e0 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 800c7a6:	f7fe fb3a 	bl	800ae1e <http_ssi_state_alloc>
 800c7aa:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 800c7ac:	69fb      	ldr	r3, [r7, #28]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d016      	beq.n	800c7e0 <http_init_file+0x6c>
        ssi->tag_index = 0;
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	821a      	strh	r2, [r3, #16]
        ssi->tag_state = TAG_NONE;
 800c7b8:	69fb      	ldr	r3, [r7, #28]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
        ssi->parsed = file->data;
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	681a      	ldr	r2, [r3, #0]
 800c7c4:	69fb      	ldr	r3, [r7, #28]
 800c7c6:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	69fb      	ldr	r3, [r7, #28]
 800c7d0:	60da      	str	r2, [r3, #12]
        ssi->tag_end = file->data;
 800c7d2:	68bb      	ldr	r3, [r7, #8]
 800c7d4:	681a      	ldr	r2, [r3, #0]
 800c7d6:	69fb      	ldr	r3, [r7, #28]
 800c7d8:	609a      	str	r2, [r3, #8]
        hs->ssi = ssi;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	69fa      	ldr	r2, [r7, #28]
 800c7de:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	68ba      	ldr	r2, [r7, #8]
 800c7e4:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	681a      	ldr	r2, [r3, #0]
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	685b      	ldr	r3, [r3, #4]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	da06      	bge.n	800c804 <http_init_file+0x90>
 800c7f6:	4b2d      	ldr	r3, [pc, #180]	; (800c8ac <http_init_file+0x138>)
 800c7f8:	f640 1234 	movw	r2, #2356	; 0x934
 800c7fc:	492e      	ldr	r1, [pc, #184]	; (800c8b8 <http_init_file+0x144>)
 800c7fe:	482d      	ldr	r0, [pc, #180]	; (800c8b4 <http_init_file+0x140>)
 800c800:	f00b fb1e 	bl	8017e40 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	685b      	ldr	r3, [r3, #4]
 800c808:	461a      	mov	r2, r3
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2200      	movs	r2, #0
 800c812:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d032      	beq.n	800c882 <http_init_file+0x10e>
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	695b      	ldr	r3, [r3, #20]
 800c820:	7c1b      	ldrb	r3, [r3, #16]
 800c822:	f003 0301 	and.w	r3, r3, #1
 800c826:	2b00      	cmp	r3, #0
 800c828:	d02b      	beq.n	800c882 <http_init_file+0x10e>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	6998      	ldr	r0, [r3, #24]
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c832:	461a      	mov	r2, r3
 800c834:	4921      	ldr	r1, [pc, #132]	; (800c8bc <http_init_file+0x148>)
 800c836:	f000 fa93 	bl	800cd60 <lwip_strnstr>
 800c83a:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 800c83c:	69bb      	ldr	r3, [r7, #24]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d01f      	beq.n	800c882 <http_init_file+0x10e>
        int diff = file_start + 4 - hs->file;
 800c842:	69bb      	ldr	r3, [r7, #24]
 800c844:	1d1a      	adds	r2, r3, #4
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	699b      	ldr	r3, [r3, #24]
 800c84a:	1ad3      	subs	r3, r2, r3
 800c84c:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	699a      	ldr	r2, [r3, #24]
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	441a      	add	r2, r3
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	1ad2      	subs	r2, r2, r3
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	625a      	str	r2, [r3, #36]	; 0x24
 800c866:	e00c      	b.n	800c882 <http_init_file+0x10e>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	2200      	movs	r2, #0
 800c86c:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	2200      	movs	r2, #0
 800c872:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2200      	movs	r2, #0
 800c878:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2200      	movs	r2, #0
 800c87e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  }
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Determine the HTTP headers to send based on the file extension of
   * the requested URI. */
  if ((hs->handle == NULL) || ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) == 0)) {
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	695b      	ldr	r3, [r3, #20]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d006      	beq.n	800c898 <http_init_file+0x124>
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	695b      	ldr	r3, [r3, #20]
 800c88e:	7c1b      	ldrb	r3, [r3, #16]
 800c890:	f003 0301 	and.w	r3, r3, #1
 800c894:	2b00      	cmp	r3, #0
 800c896:	d103      	bne.n	800c8a0 <http_init_file+0x12c>
    get_http_headers(hs, uri);
 800c898:	6839      	ldr	r1, [r7, #0]
 800c89a:	68f8      	ldr	r0, [r7, #12]
 800c89c:	f7fe fd4c 	bl	800b338 <get_http_headers>
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800c8a0:	2300      	movs	r3, #0
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3720      	adds	r7, #32
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}
 800c8aa:	bf00      	nop
 800c8ac:	0801a51c 	.word	0x0801a51c
 800c8b0:	0801a6c8 	.word	0x0801a6c8
 800c8b4:	0801a564 	.word	0x0801a564
 800c8b8:	0801a6dc 	.word	0x0801a6dc
 800c8bc:	0801a6a0 	.word	0x0801a6a0

0800c8c0 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b084      	sub	sp, #16
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
 800c8c8:	460b      	mov	r3, r1
 800c8ca:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d002      	beq.n	800c8dc <http_err+0x1c>
    http_state_free(hs);
 800c8d6:	68f8      	ldr	r0, [r7, #12]
 800c8d8:	f7fe fb14 	bl	800af04 <http_state_free>
  }
}
 800c8dc:	bf00      	nop
 800c8de:	3710      	adds	r7, #16
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b086      	sub	sp, #24
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	60f8      	str	r0, [r7, #12]
 800c8ec:	60b9      	str	r1, [r7, #8]
 800c8ee:	4613      	mov	r3, r2
 800c8f0:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d101      	bne.n	800c900 <http_sent+0x1c>
    return ERR_OK;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	e008      	b.n	800c912 <http_sent+0x2e>
  }

  hs->retries = 0;
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	2200      	movs	r2, #0
 800c904:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800c908:	6979      	ldr	r1, [r7, #20]
 800c90a:	68b8      	ldr	r0, [r7, #8]
 800c90c:	f7ff faae 	bl	800be6c <http_send>

  return ERR_OK;
 800c910:	2300      	movs	r3, #0
}
 800c912:	4618      	mov	r0, r3
 800c914:	3718      	adds	r7, #24
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}

0800c91a <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800c91a:	b580      	push	{r7, lr}
 800c91c:	b084      	sub	sp, #16
 800c91e:	af00      	add	r7, sp, #0
 800c920:	6078      	str	r0, [r7, #4]
 800c922:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d107      	bne.n	800c93e <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800c92e:	2100      	movs	r1, #0
 800c930:	6838      	ldr	r0, [r7, #0]
 800c932:	f7fe fbb5 	bl	800b0a0 <http_close_conn>
 800c936:	4603      	mov	r3, r0
 800c938:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800c93a:	2300      	movs	r3, #0
 800c93c:	e021      	b.n	800c982 <http_poll+0x68>
  } else {
    hs->retries++;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c944:	3301      	adds	r3, #1
 800c946:	b2da      	uxtb	r2, r3
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c954:	2b04      	cmp	r3, #4
 800c956:	d105      	bne.n	800c964 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800c958:	68f9      	ldr	r1, [r7, #12]
 800c95a:	6838      	ldr	r0, [r7, #0]
 800c95c:	f7fe fba0 	bl	800b0a0 <http_close_conn>
      return ERR_OK;
 800c960:	2300      	movs	r3, #0
 800c962:	e00e      	b.n	800c982 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	695b      	ldr	r3, [r3, #20]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d009      	beq.n	800c980 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800c96c:	68f9      	ldr	r1, [r7, #12]
 800c96e:	6838      	ldr	r0, [r7, #0]
 800c970:	f7ff fa7c 	bl	800be6c <http_send>
 800c974:	4603      	mov	r3, r0
 800c976:	2b00      	cmp	r3, #0
 800c978:	d002      	beq.n	800c980 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800c97a:	6838      	ldr	r0, [r7, #0]
 800c97c:	f007 f9c6 	bl	8013d0c <tcp_output>
      }
    }
  }

  return ERR_OK;
 800c980:	2300      	movs	r3, #0
}
 800c982:	4618      	mov	r0, r3
 800c984:	3710      	adds	r7, #16
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}
	...

0800c98c <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b086      	sub	sp, #24
 800c990:	af00      	add	r7, sp, #0
 800c992:	60f8      	str	r0, [r7, #12]
 800c994:	60b9      	str	r1, [r7, #8]
 800c996:	607a      	str	r2, [r7, #4]
 800c998:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800c99e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d105      	bne.n	800c9b2 <http_recv+0x26>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d002      	beq.n	800c9b2 <http_recv+0x26>
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d111      	bne.n	800c9d6 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d008      	beq.n	800c9ca <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	891b      	ldrh	r3, [r3, #8]
 800c9bc:	4619      	mov	r1, r3
 800c9be:	68b8      	ldr	r0, [r7, #8]
 800c9c0:	f002 fd98 	bl	800f4f4 <tcp_recved>
      pbuf_free(p);
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f001 fe27 	bl	800e618 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800c9ca:	6979      	ldr	r1, [r7, #20]
 800c9cc:	68b8      	ldr	r0, [r7, #8]
 800c9ce:	f7fe fb67 	bl	800b0a0 <http_close_conn>
    return ERR_OK;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	e072      	b.n	800cabc <http_recv+0x130>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	891b      	ldrh	r3, [r3, #8]
 800c9da:	4619      	mov	r1, r3
 800c9dc:	68b8      	ldr	r0, [r7, #8]
 800c9de:	f002 fd89 	bl	800f4f4 <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 800c9e2:	697b      	ldr	r3, [r7, #20]
 800c9e4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d012      	beq.n	800ca12 <http_recv+0x86>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 800c9f4:	6879      	ldr	r1, [r7, #4]
 800c9f6:	6978      	ldr	r0, [r7, #20]
 800c9f8:	f7ff faf0 	bl	800bfdc <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d103      	bne.n	800ca0e <http_recv+0x82>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 800ca06:	6979      	ldr	r1, [r7, #20]
 800ca08:	68b8      	ldr	r0, [r7, #8]
 800ca0a:	f7ff fa2f 	bl	800be6c <http_send>
    }
    return ERR_OK;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	e054      	b.n	800cabc <http_recv+0x130>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	695b      	ldr	r3, [r3, #20]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d14c      	bne.n	800cab4 <http_recv+0x128>
      err_t parsed = http_parse_request(p, hs, pcb);
 800ca1a:	68ba      	ldr	r2, [r7, #8]
 800ca1c:	6979      	ldr	r1, [r7, #20]
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f7ff fc00 	bl	800c224 <http_parse_request>
 800ca24:	4603      	mov	r3, r0
 800ca26:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800ca28:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d015      	beq.n	800ca5c <http_recv+0xd0>
 800ca30:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ca34:	f113 0f05 	cmn.w	r3, #5
 800ca38:	d010      	beq.n	800ca5c <http_recv+0xd0>
 800ca3a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ca3e:	f113 0f10 	cmn.w	r3, #16
 800ca42:	d00b      	beq.n	800ca5c <http_recv+0xd0>
 800ca44:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ca48:	f113 0f08 	cmn.w	r3, #8
 800ca4c:	d006      	beq.n	800ca5c <http_recv+0xd0>
 800ca4e:	4b1d      	ldr	r3, [pc, #116]	; (800cac4 <http_recv+0x138>)
 800ca50:	f640 2204 	movw	r2, #2564	; 0xa04
 800ca54:	491c      	ldr	r1, [pc, #112]	; (800cac8 <http_recv+0x13c>)
 800ca56:	481d      	ldr	r0, [pc, #116]	; (800cacc <http_recv+0x140>)
 800ca58:	f00b f9f2 	bl	8017e40 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800ca5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ca60:	f113 0f05 	cmn.w	r3, #5
 800ca64:	d00b      	beq.n	800ca7e <http_recv+0xf2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	6a1b      	ldr	r3, [r3, #32]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d007      	beq.n	800ca7e <http_recv+0xf2>
          pbuf_free(hs->req);
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	6a1b      	ldr	r3, [r3, #32]
 800ca72:	4618      	mov	r0, r3
 800ca74:	f001 fdd0 	bl	800e618 <pbuf_free>
          hs->req = NULL;
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f001 fdca 	bl	800e618 <pbuf_free>
      if (parsed == ERR_OK) {
 800ca84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d109      	bne.n	800caa0 <http_recv+0x114>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
 800ca8c:	697b      	ldr	r3, [r7, #20]
 800ca8e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d111      	bne.n	800caba <http_recv+0x12e>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800ca96:	6979      	ldr	r1, [r7, #20]
 800ca98:	68b8      	ldr	r0, [r7, #8]
 800ca9a:	f7ff f9e7 	bl	800be6c <http_send>
 800ca9e:	e00c      	b.n	800caba <http_recv+0x12e>
        }
      } else if (parsed == ERR_ARG) {
 800caa0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800caa4:	f113 0f10 	cmn.w	r3, #16
 800caa8:	d107      	bne.n	800caba <http_recv+0x12e>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800caaa:	6979      	ldr	r1, [r7, #20]
 800caac:	68b8      	ldr	r0, [r7, #8]
 800caae:	f7fe faf7 	bl	800b0a0 <http_close_conn>
 800cab2:	e002      	b.n	800caba <http_recv+0x12e>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f001 fdaf 	bl	800e618 <pbuf_free>
    }
  }
  return ERR_OK;
 800caba:	2300      	movs	r3, #0
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3718      	adds	r7, #24
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}
 800cac4:	0801a51c 	.word	0x0801a51c
 800cac8:	0801a6fc 	.word	0x0801a6fc
 800cacc:	0801a564 	.word	0x0801a564

0800cad0 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b086      	sub	sp, #24
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	60f8      	str	r0, [r7, #12]
 800cad8:	60b9      	str	r1, [r7, #8]
 800cada:	4613      	mov	r3, r2
 800cadc:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800cade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d102      	bne.n	800caec <http_accept+0x1c>
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d102      	bne.n	800caf2 <http_accept+0x22>
    return ERR_VAL;
 800caec:	f06f 0305 	mvn.w	r3, #5
 800caf0:	e025      	b.n	800cb3e <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800caf2:	2101      	movs	r1, #1
 800caf4:	68b8      	ldr	r0, [r7, #8]
 800caf6:	f003 f9e1 	bl	800febc <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800cafa:	f7fe f9c5 	bl	800ae88 <http_state_alloc>
 800cafe:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800cb00:	697b      	ldr	r3, [r7, #20]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d102      	bne.n	800cb0c <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800cb06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cb0a:	e018      	b.n	800cb3e <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	68ba      	ldr	r2, [r7, #8]
 800cb10:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800cb12:	6979      	ldr	r1, [r7, #20]
 800cb14:	68b8      	ldr	r0, [r7, #8]
 800cb16:	f003 fbd1 	bl	80102bc <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800cb1a:	490b      	ldr	r1, [pc, #44]	; (800cb48 <http_accept+0x78>)
 800cb1c:	68b8      	ldr	r0, [r7, #8]
 800cb1e:	f003 fbdf 	bl	80102e0 <tcp_recv>
  altcp_err(pcb, http_err);
 800cb22:	490a      	ldr	r1, [pc, #40]	; (800cb4c <http_accept+0x7c>)
 800cb24:	68b8      	ldr	r0, [r7, #8]
 800cb26:	f003 fc1f 	bl	8010368 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800cb2a:	2204      	movs	r2, #4
 800cb2c:	4908      	ldr	r1, [pc, #32]	; (800cb50 <http_accept+0x80>)
 800cb2e:	68b8      	ldr	r0, [r7, #8]
 800cb30:	f003 fc54 	bl	80103dc <tcp_poll>
  altcp_sent(pcb, http_sent);
 800cb34:	4907      	ldr	r1, [pc, #28]	; (800cb54 <http_accept+0x84>)
 800cb36:	68b8      	ldr	r0, [r7, #8]
 800cb38:	f003 fbf4 	bl	8010324 <tcp_sent>

  return ERR_OK;
 800cb3c:	2300      	movs	r3, #0
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3718      	adds	r7, #24
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	bf00      	nop
 800cb48:	0800c98d 	.word	0x0800c98d
 800cb4c:	0800c8c1 	.word	0x0800c8c1
 800cb50:	0800c91b 	.word	0x0800c91b
 800cb54:	0800c8e5 	.word	0x0800c8e5

0800cb58 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b084      	sub	sp, #16
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
 800cb60:	460b      	mov	r3, r1
 800cb62:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d029      	beq.n	800cbbe <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800cb6a:	2101      	movs	r1, #1
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f003 f9a5 	bl	800febc <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800cb72:	887b      	ldrh	r3, [r7, #2]
 800cb74:	461a      	mov	r2, r3
 800cb76:	4914      	ldr	r1, [pc, #80]	; (800cbc8 <httpd_init_pcb+0x70>)
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f002 faed 	bl	800f158 <tcp_bind>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800cb82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d006      	beq.n	800cb98 <httpd_init_pcb+0x40>
 800cb8a:	4b10      	ldr	r3, [pc, #64]	; (800cbcc <httpd_init_pcb+0x74>)
 800cb8c:	f640 2257 	movw	r2, #2647	; 0xa57
 800cb90:	490f      	ldr	r1, [pc, #60]	; (800cbd0 <httpd_init_pcb+0x78>)
 800cb92:	4810      	ldr	r0, [pc, #64]	; (800cbd4 <httpd_init_pcb+0x7c>)
 800cb94:	f00b f954 	bl	8017e40 <iprintf>
    pcb = altcp_listen(pcb);
 800cb98:	21ff      	movs	r1, #255	; 0xff
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	f002 fb94 	bl	800f2c8 <tcp_listen_with_backlog>
 800cba0:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d106      	bne.n	800cbb6 <httpd_init_pcb+0x5e>
 800cba8:	4b08      	ldr	r3, [pc, #32]	; (800cbcc <httpd_init_pcb+0x74>)
 800cbaa:	f640 2259 	movw	r2, #2649	; 0xa59
 800cbae:	490a      	ldr	r1, [pc, #40]	; (800cbd8 <httpd_init_pcb+0x80>)
 800cbb0:	4808      	ldr	r0, [pc, #32]	; (800cbd4 <httpd_init_pcb+0x7c>)
 800cbb2:	f00b f945 	bl	8017e40 <iprintf>
    altcp_accept(pcb, http_accept);
 800cbb6:	4909      	ldr	r1, [pc, #36]	; (800cbdc <httpd_init_pcb+0x84>)
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f003 fbf7 	bl	80103ac <tcp_accept>
  }
}
 800cbbe:	bf00      	nop
 800cbc0:	3710      	adds	r7, #16
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}
 800cbc6:	bf00      	nop
 800cbc8:	0801e8f0 	.word	0x0801e8f0
 800cbcc:	0801a51c 	.word	0x0801a51c
 800cbd0:	0801a728 	.word	0x0801a728
 800cbd4:	0801a564 	.word	0x0801a564
 800cbd8:	0801a744 	.word	0x0801a744
 800cbdc:	0800cad1 	.word	0x0800cad1

0800cbe0 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800cbe6:	202e      	movs	r0, #46	; 0x2e
 800cbe8:	f003 fb5a 	bl	80102a0 <tcp_new_ip_type>
 800cbec:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d106      	bne.n	800cc02 <httpd_init+0x22>
 800cbf4:	4b07      	ldr	r3, [pc, #28]	; (800cc14 <httpd_init+0x34>)
 800cbf6:	f640 2272 	movw	r2, #2674	; 0xa72
 800cbfa:	4907      	ldr	r1, [pc, #28]	; (800cc18 <httpd_init+0x38>)
 800cbfc:	4807      	ldr	r0, [pc, #28]	; (800cc1c <httpd_init+0x3c>)
 800cbfe:	f00b f91f 	bl	8017e40 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800cc02:	2150      	movs	r1, #80	; 0x50
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f7ff ffa7 	bl	800cb58 <httpd_init_pcb>
}
 800cc0a:	bf00      	nop
 800cc0c:	3708      	adds	r7, #8
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	0801a51c 	.word	0x0801a51c
 800cc18:	0801a764 	.word	0x0801a764
 800cc1c:	0801a564 	.word	0x0801a564

0800cc20 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b084      	sub	sp, #16
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	60f8      	str	r0, [r7, #12]
 800cc28:	60b9      	str	r1, [r7, #8]
 800cc2a:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d106      	bne.n	800cc40 <http_set_ssi_handler+0x20>
 800cc32:	4b14      	ldr	r3, [pc, #80]	; (800cc84 <http_set_ssi_handler+0x64>)
 800cc34:	f640 2297 	movw	r2, #2711	; 0xa97
 800cc38:	4913      	ldr	r1, [pc, #76]	; (800cc88 <http_set_ssi_handler+0x68>)
 800cc3a:	4814      	ldr	r0, [pc, #80]	; (800cc8c <http_set_ssi_handler+0x6c>)
 800cc3c:	f00b f900 	bl	8017e40 <iprintf>
  httpd_ssi_handler = ssi_handler;
 800cc40:	4a13      	ldr	r2, [pc, #76]	; (800cc90 <http_set_ssi_handler+0x70>)
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d106      	bne.n	800cc5a <http_set_ssi_handler+0x3a>
 800cc4c:	4b0d      	ldr	r3, [pc, #52]	; (800cc84 <http_set_ssi_handler+0x64>)
 800cc4e:	f640 229e 	movw	r2, #2718	; 0xa9e
 800cc52:	4910      	ldr	r1, [pc, #64]	; (800cc94 <http_set_ssi_handler+0x74>)
 800cc54:	480d      	ldr	r0, [pc, #52]	; (800cc8c <http_set_ssi_handler+0x6c>)
 800cc56:	f00b f8f3 	bl	8017e40 <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	dc06      	bgt.n	800cc6e <http_set_ssi_handler+0x4e>
 800cc60:	4b08      	ldr	r3, [pc, #32]	; (800cc84 <http_set_ssi_handler+0x64>)
 800cc62:	f640 229f 	movw	r2, #2719	; 0xa9f
 800cc66:	490c      	ldr	r1, [pc, #48]	; (800cc98 <http_set_ssi_handler+0x78>)
 800cc68:	4808      	ldr	r0, [pc, #32]	; (800cc8c <http_set_ssi_handler+0x6c>)
 800cc6a:	f00b f8e9 	bl	8017e40 <iprintf>

  httpd_tags = tags;
 800cc6e:	4a0b      	ldr	r2, [pc, #44]	; (800cc9c <http_set_ssi_handler+0x7c>)
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 800cc74:	4a0a      	ldr	r2, [pc, #40]	; (800cca0 <http_set_ssi_handler+0x80>)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 800cc7a:	bf00      	nop
 800cc7c:	3710      	adds	r7, #16
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}
 800cc82:	bf00      	nop
 800cc84:	0801a51c 	.word	0x0801a51c
 800cc88:	0801a780 	.word	0x0801a780
 800cc8c:	0801a564 	.word	0x0801a564
 800cc90:	2000522c 	.word	0x2000522c
 800cc94:	0801a798 	.word	0x0801a798
 800cc98:	0801a7a8 	.word	0x0801a7a8
 800cc9c:	20005234 	.word	0x20005234
 800cca0:	20005230 	.word	0x20005230

0800cca4 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b082      	sub	sp, #8
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d106      	bne.n	800ccc2 <http_set_cgi_handlers+0x1e>
 800ccb4:	4b0d      	ldr	r3, [pc, #52]	; (800ccec <http_set_cgi_handlers+0x48>)
 800ccb6:	f640 22b2 	movw	r2, #2738	; 0xab2
 800ccba:	490d      	ldr	r1, [pc, #52]	; (800ccf0 <http_set_cgi_handlers+0x4c>)
 800ccbc:	480d      	ldr	r0, [pc, #52]	; (800ccf4 <http_set_cgi_handlers+0x50>)
 800ccbe:	f00b f8bf 	bl	8017e40 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	dc06      	bgt.n	800ccd6 <http_set_cgi_handlers+0x32>
 800ccc8:	4b08      	ldr	r3, [pc, #32]	; (800ccec <http_set_cgi_handlers+0x48>)
 800ccca:	f640 22b3 	movw	r2, #2739	; 0xab3
 800ccce:	490a      	ldr	r1, [pc, #40]	; (800ccf8 <http_set_cgi_handlers+0x54>)
 800ccd0:	4808      	ldr	r0, [pc, #32]	; (800ccf4 <http_set_cgi_handlers+0x50>)
 800ccd2:	f00b f8b5 	bl	8017e40 <iprintf>

  httpd_cgis = cgis;
 800ccd6:	4a09      	ldr	r2, [pc, #36]	; (800ccfc <http_set_cgi_handlers+0x58>)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 800ccdc:	4a08      	ldr	r2, [pc, #32]	; (800cd00 <http_set_cgi_handlers+0x5c>)
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	6013      	str	r3, [r2, #0]
}
 800cce2:	bf00      	nop
 800cce4:	3708      	adds	r7, #8
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}
 800ccea:	bf00      	nop
 800ccec:	0801a51c 	.word	0x0801a51c
 800ccf0:	0801a7c0 	.word	0x0801a7c0
 800ccf4:	0801a564 	.word	0x0801a564
 800ccf8:	0801a7d0 	.word	0x0801a7d0
 800ccfc:	20005238 	.word	0x20005238
 800cd00:	2000523c 	.word	0x2000523c

0800cd04 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b083      	sub	sp, #12
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800cd0e:	88fb      	ldrh	r3, [r7, #6]
 800cd10:	021b      	lsls	r3, r3, #8
 800cd12:	b21a      	sxth	r2, r3
 800cd14:	88fb      	ldrh	r3, [r7, #6]
 800cd16:	0a1b      	lsrs	r3, r3, #8
 800cd18:	b29b      	uxth	r3, r3
 800cd1a:	b21b      	sxth	r3, r3
 800cd1c:	4313      	orrs	r3, r2
 800cd1e:	b21b      	sxth	r3, r3
 800cd20:	b29b      	uxth	r3, r3
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	370c      	adds	r7, #12
 800cd26:	46bd      	mov	sp, r7
 800cd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2c:	4770      	bx	lr

0800cd2e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800cd2e:	b480      	push	{r7}
 800cd30:	b083      	sub	sp, #12
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	061a      	lsls	r2, r3, #24
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	021b      	lsls	r3, r3, #8
 800cd3e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cd42:	431a      	orrs	r2, r3
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	0a1b      	lsrs	r3, r3, #8
 800cd48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800cd4c:	431a      	orrs	r2, r3
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	0e1b      	lsrs	r3, r3, #24
 800cd52:	4313      	orrs	r3, r2
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	370c      	adds	r7, #12
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5e:	4770      	bx	lr

0800cd60 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b086      	sub	sp, #24
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	60f8      	str	r0, [r7, #12]
 800cd68:	60b9      	str	r1, [r7, #8]
 800cd6a:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800cd6c:	68b8      	ldr	r0, [r7, #8]
 800cd6e:	f7f3 fa71 	bl	8000254 <strlen>
 800cd72:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d101      	bne.n	800cd7e <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	e022      	b.n	800cdc4 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	617b      	str	r3, [r7, #20]
 800cd82:	e012      	b.n	800cdaa <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	781a      	ldrb	r2, [r3, #0]
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	781b      	ldrb	r3, [r3, #0]
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d109      	bne.n	800cda4 <lwip_strnstr+0x44>
 800cd90:	693a      	ldr	r2, [r7, #16]
 800cd92:	68b9      	ldr	r1, [r7, #8]
 800cd94:	6978      	ldr	r0, [r7, #20]
 800cd96:	f00b fa8c 	bl	80182b2 <strncmp>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d101      	bne.n	800cda4 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	e00f      	b.n	800cdc4 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	3301      	adds	r3, #1
 800cda8:	617b      	str	r3, [r7, #20]
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	781b      	ldrb	r3, [r3, #0]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d007      	beq.n	800cdc2 <lwip_strnstr+0x62>
 800cdb2:	697a      	ldr	r2, [r7, #20]
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	441a      	add	r2, r3
 800cdb8:	68f9      	ldr	r1, [r7, #12]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	440b      	add	r3, r1
 800cdbe:	429a      	cmp	r2, r3
 800cdc0:	d9e0      	bls.n	800cd84 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800cdc2:	2300      	movs	r3, #0
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3718      	adds	r7, #24
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}

0800cdcc <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 800cdcc:	b480      	push	{r7}
 800cdce:	b085      	sub	sp, #20
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	1c5a      	adds	r2, r3, #1
 800cdda:	607a      	str	r2, [r7, #4]
 800cddc:	781b      	ldrb	r3, [r3, #0]
 800cdde:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	1c5a      	adds	r2, r3, #1
 800cde4:	603a      	str	r2, [r7, #0]
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 800cdea:	7bfa      	ldrb	r2, [r7, #15]
 800cdec:	7bbb      	ldrb	r3, [r7, #14]
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	d016      	beq.n	800ce20 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 800cdf2:	7bfb      	ldrb	r3, [r7, #15]
 800cdf4:	f043 0320 	orr.w	r3, r3, #32
 800cdf8:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800cdfa:	7b7b      	ldrb	r3, [r7, #13]
 800cdfc:	2b60      	cmp	r3, #96	; 0x60
 800cdfe:	d90c      	bls.n	800ce1a <lwip_stricmp+0x4e>
 800ce00:	7b7b      	ldrb	r3, [r7, #13]
 800ce02:	2b7a      	cmp	r3, #122	; 0x7a
 800ce04:	d809      	bhi.n	800ce1a <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 800ce06:	7bbb      	ldrb	r3, [r7, #14]
 800ce08:	f043 0320 	orr.w	r3, r3, #32
 800ce0c:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 800ce0e:	7b7a      	ldrb	r2, [r7, #13]
 800ce10:	7b3b      	ldrb	r3, [r7, #12]
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d003      	beq.n	800ce1e <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 800ce16:	2301      	movs	r3, #1
 800ce18:	e006      	b.n	800ce28 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	e004      	b.n	800ce28 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800ce1e:	bf00      	nop
      }
    }
  } while (c1 != 0);
 800ce20:	7bfb      	ldrb	r3, [r7, #15]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d1d7      	bne.n	800cdd6 <lwip_stricmp+0xa>
  return 0;
 800ce26:	2300      	movs	r3, #0
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3714      	adds	r7, #20
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr

0800ce34 <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char *result, size_t bufsize, int number)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b088      	sub	sp, #32
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	60f8      	str	r0, [r7, #12]
 800ce3c:	60b9      	str	r1, [r7, #8]
 800ce3e:	607a      	str	r2, [r7, #4]
  char *res = result;
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	61fb      	str	r3, [r7, #28]
  char *tmp = result + bufsize - 1;
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	3b01      	subs	r3, #1
 800ce48:	68fa      	ldr	r2, [r7, #12]
 800ce4a:	4413      	add	r3, r2
 800ce4c:	61bb      	str	r3, [r7, #24]
  int n = (number >= 0) ? number : -number;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	bfb8      	it	lt
 800ce54:	425b      	neglt	r3, r3
 800ce56:	617b      	str	r3, [r7, #20]

  /* handle invalid bufsize */
  if (bufsize < 2) {
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	2b01      	cmp	r3, #1
 800ce5c:	d806      	bhi.n	800ce6c <lwip_itoa+0x38>
    if (bufsize == 1) {
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	d154      	bne.n	800cf0e <lwip_itoa+0xda>
      *result = 0;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2200      	movs	r2, #0
 800ce68:	701a      	strb	r2, [r3, #0]
    }
    return;
 800ce6a:	e050      	b.n	800cf0e <lwip_itoa+0xda>
  }

  /* First, add sign */
  if (number < 0) {
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	da04      	bge.n	800ce7c <lwip_itoa+0x48>
    *res++ = '-';
 800ce72:	69fb      	ldr	r3, [r7, #28]
 800ce74:	1c5a      	adds	r2, r3, #1
 800ce76:	61fa      	str	r2, [r7, #28]
 800ce78:	222d      	movs	r2, #45	; 0x2d
 800ce7a:	701a      	strb	r2, [r3, #0]
  }
  /* Then create the string from the end and stop if buffer full,
     and ensure output string is zero terminated */
  *tmp = 0;
 800ce7c:	69bb      	ldr	r3, [r7, #24]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	701a      	strb	r2, [r3, #0]
  while ((n != 0) && (tmp > res)) {
 800ce82:	e01c      	b.n	800cebe <lwip_itoa+0x8a>
    char val = (char)('0' + (n % 10));
 800ce84:	697a      	ldr	r2, [r7, #20]
 800ce86:	4b24      	ldr	r3, [pc, #144]	; (800cf18 <lwip_itoa+0xe4>)
 800ce88:	fb83 1302 	smull	r1, r3, r3, r2
 800ce8c:	1099      	asrs	r1, r3, #2
 800ce8e:	17d3      	asrs	r3, r2, #31
 800ce90:	1ac9      	subs	r1, r1, r3
 800ce92:	460b      	mov	r3, r1
 800ce94:	009b      	lsls	r3, r3, #2
 800ce96:	440b      	add	r3, r1
 800ce98:	005b      	lsls	r3, r3, #1
 800ce9a:	1ad1      	subs	r1, r2, r3
 800ce9c:	b2cb      	uxtb	r3, r1
 800ce9e:	3330      	adds	r3, #48	; 0x30
 800cea0:	74fb      	strb	r3, [r7, #19]
    tmp--;
 800cea2:	69bb      	ldr	r3, [r7, #24]
 800cea4:	3b01      	subs	r3, #1
 800cea6:	61bb      	str	r3, [r7, #24]
    *tmp = val;
 800cea8:	69bb      	ldr	r3, [r7, #24]
 800ceaa:	7cfa      	ldrb	r2, [r7, #19]
 800ceac:	701a      	strb	r2, [r3, #0]
    n = n / 10;
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	4a19      	ldr	r2, [pc, #100]	; (800cf18 <lwip_itoa+0xe4>)
 800ceb2:	fb82 1203 	smull	r1, r2, r2, r3
 800ceb6:	1092      	asrs	r2, r2, #2
 800ceb8:	17db      	asrs	r3, r3, #31
 800ceba:	1ad3      	subs	r3, r2, r3
 800cebc:	617b      	str	r3, [r7, #20]
  while ((n != 0) && (tmp > res)) {
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d003      	beq.n	800cecc <lwip_itoa+0x98>
 800cec4:	69ba      	ldr	r2, [r7, #24]
 800cec6:	69fb      	ldr	r3, [r7, #28]
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d8db      	bhi.n	800ce84 <lwip_itoa+0x50>
  }
  if (n) {
 800cecc:	697b      	ldr	r3, [r7, #20]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d003      	beq.n	800ceda <lwip_itoa+0xa6>
    /* buffer is too small */
    *result = 0;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2200      	movs	r2, #0
 800ced6:	701a      	strb	r2, [r3, #0]
    return;
 800ced8:	e01a      	b.n	800cf10 <lwip_itoa+0xdc>
  }
  if (*tmp == 0) {
 800ceda:	69bb      	ldr	r3, [r7, #24]
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d10a      	bne.n	800cef8 <lwip_itoa+0xc4>
    /* Nothing added? */
    *res++ = '0';
 800cee2:	69fb      	ldr	r3, [r7, #28]
 800cee4:	1c5a      	adds	r2, r3, #1
 800cee6:	61fa      	str	r2, [r7, #28]
 800cee8:	2230      	movs	r2, #48	; 0x30
 800ceea:	701a      	strb	r2, [r3, #0]
    *res++ = 0;
 800ceec:	69fb      	ldr	r3, [r7, #28]
 800ceee:	1c5a      	adds	r2, r3, #1
 800cef0:	61fa      	str	r2, [r7, #28]
 800cef2:	2200      	movs	r2, #0
 800cef4:	701a      	strb	r2, [r3, #0]
    return;
 800cef6:	e00b      	b.n	800cf10 <lwip_itoa+0xdc>
  }
  /* move from temporary buffer to output buffer (sign is not moved) */
  memmove(res, tmp, (size_t)((result + bufsize) - tmp));
 800cef8:	68fa      	ldr	r2, [r7, #12]
 800cefa:	68bb      	ldr	r3, [r7, #8]
 800cefc:	441a      	add	r2, r3
 800cefe:	69bb      	ldr	r3, [r7, #24]
 800cf00:	1ad3      	subs	r3, r2, r3
 800cf02:	461a      	mov	r2, r3
 800cf04:	69b9      	ldr	r1, [r7, #24]
 800cf06:	69f8      	ldr	r0, [r7, #28]
 800cf08:	f00a fece 	bl	8017ca8 <memmove>
 800cf0c:	e000      	b.n	800cf10 <lwip_itoa+0xdc>
    return;
 800cf0e:	bf00      	nop
}
 800cf10:	3720      	adds	r7, #32
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	66666667 	.word	0x66666667

0800cf1c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b082      	sub	sp, #8
 800cf20:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800cf22:	2300      	movs	r3, #0
 800cf24:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800cf26:	f00a fce7 	bl	80178f8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800cf2a:	f000 f8d5 	bl	800d0d8 <mem_init>
  memp_init();
 800cf2e:	f000 fc31 	bl	800d794 <memp_init>
  pbuf_init();
  netif_init();
 800cf32:	f000 fcf7 	bl	800d924 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800cf36:	f007 ffd9 	bl	8014eec <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800cf3a:	f001 fe07 	bl	800eb4c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800cf3e:	f007 ff1b 	bl	8014d78 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800cf42:	bf00      	nop
 800cf44:	3708      	adds	r7, #8
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
	...

0800cf4c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b083      	sub	sp, #12
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	4603      	mov	r3, r0
 800cf54:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800cf56:	4b05      	ldr	r3, [pc, #20]	; (800cf6c <ptr_to_mem+0x20>)
 800cf58:	681a      	ldr	r2, [r3, #0]
 800cf5a:	88fb      	ldrh	r3, [r7, #6]
 800cf5c:	4413      	add	r3, r2
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	370c      	adds	r7, #12
 800cf62:	46bd      	mov	sp, r7
 800cf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf68:	4770      	bx	lr
 800cf6a:	bf00      	nop
 800cf6c:	20005244 	.word	0x20005244

0800cf70 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800cf70:	b480      	push	{r7}
 800cf72:	b083      	sub	sp, #12
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800cf78:	4b05      	ldr	r3, [pc, #20]	; (800cf90 <mem_to_ptr+0x20>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	687a      	ldr	r2, [r7, #4]
 800cf7e:	1ad3      	subs	r3, r2, r3
 800cf80:	b29b      	uxth	r3, r3
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	370c      	adds	r7, #12
 800cf86:	46bd      	mov	sp, r7
 800cf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8c:	4770      	bx	lr
 800cf8e:	bf00      	nop
 800cf90:	20005244 	.word	0x20005244

0800cf94 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800cf94:	b590      	push	{r4, r7, lr}
 800cf96:	b085      	sub	sp, #20
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800cf9c:	4b45      	ldr	r3, [pc, #276]	; (800d0b4 <plug_holes+0x120>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	687a      	ldr	r2, [r7, #4]
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d206      	bcs.n	800cfb4 <plug_holes+0x20>
 800cfa6:	4b44      	ldr	r3, [pc, #272]	; (800d0b8 <plug_holes+0x124>)
 800cfa8:	f240 12df 	movw	r2, #479	; 0x1df
 800cfac:	4943      	ldr	r1, [pc, #268]	; (800d0bc <plug_holes+0x128>)
 800cfae:	4844      	ldr	r0, [pc, #272]	; (800d0c0 <plug_holes+0x12c>)
 800cfb0:	f00a ff46 	bl	8017e40 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800cfb4:	4b43      	ldr	r3, [pc, #268]	; (800d0c4 <plug_holes+0x130>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	687a      	ldr	r2, [r7, #4]
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d306      	bcc.n	800cfcc <plug_holes+0x38>
 800cfbe:	4b3e      	ldr	r3, [pc, #248]	; (800d0b8 <plug_holes+0x124>)
 800cfc0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800cfc4:	4940      	ldr	r1, [pc, #256]	; (800d0c8 <plug_holes+0x134>)
 800cfc6:	483e      	ldr	r0, [pc, #248]	; (800d0c0 <plug_holes+0x12c>)
 800cfc8:	f00a ff3a 	bl	8017e40 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	791b      	ldrb	r3, [r3, #4]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d006      	beq.n	800cfe2 <plug_holes+0x4e>
 800cfd4:	4b38      	ldr	r3, [pc, #224]	; (800d0b8 <plug_holes+0x124>)
 800cfd6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800cfda:	493c      	ldr	r1, [pc, #240]	; (800d0cc <plug_holes+0x138>)
 800cfdc:	4838      	ldr	r0, [pc, #224]	; (800d0c0 <plug_holes+0x12c>)
 800cfde:	f00a ff2f 	bl	8017e40 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	881b      	ldrh	r3, [r3, #0]
 800cfe6:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800cfea:	d906      	bls.n	800cffa <plug_holes+0x66>
 800cfec:	4b32      	ldr	r3, [pc, #200]	; (800d0b8 <plug_holes+0x124>)
 800cfee:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800cff2:	4937      	ldr	r1, [pc, #220]	; (800d0d0 <plug_holes+0x13c>)
 800cff4:	4832      	ldr	r0, [pc, #200]	; (800d0c0 <plug_holes+0x12c>)
 800cff6:	f00a ff23 	bl	8017e40 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	881b      	ldrh	r3, [r3, #0]
 800cffe:	4618      	mov	r0, r3
 800d000:	f7ff ffa4 	bl	800cf4c <ptr_to_mem>
 800d004:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d006:	687a      	ldr	r2, [r7, #4]
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d024      	beq.n	800d058 <plug_holes+0xc4>
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	791b      	ldrb	r3, [r3, #4]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d120      	bne.n	800d058 <plug_holes+0xc4>
 800d016:	4b2b      	ldr	r3, [pc, #172]	; (800d0c4 <plug_holes+0x130>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	68fa      	ldr	r2, [r7, #12]
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d01b      	beq.n	800d058 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d020:	4b2c      	ldr	r3, [pc, #176]	; (800d0d4 <plug_holes+0x140>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	68fa      	ldr	r2, [r7, #12]
 800d026:	429a      	cmp	r2, r3
 800d028:	d102      	bne.n	800d030 <plug_holes+0x9c>
      lfree = mem;
 800d02a:	4a2a      	ldr	r2, [pc, #168]	; (800d0d4 <plug_holes+0x140>)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	881a      	ldrh	r2, [r3, #0]
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	881b      	ldrh	r3, [r3, #0]
 800d03c:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800d040:	d00a      	beq.n	800d058 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	881b      	ldrh	r3, [r3, #0]
 800d046:	4618      	mov	r0, r3
 800d048:	f7ff ff80 	bl	800cf4c <ptr_to_mem>
 800d04c:	4604      	mov	r4, r0
 800d04e:	6878      	ldr	r0, [r7, #4]
 800d050:	f7ff ff8e 	bl	800cf70 <mem_to_ptr>
 800d054:	4603      	mov	r3, r0
 800d056:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	885b      	ldrh	r3, [r3, #2]
 800d05c:	4618      	mov	r0, r3
 800d05e:	f7ff ff75 	bl	800cf4c <ptr_to_mem>
 800d062:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d064:	68ba      	ldr	r2, [r7, #8]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	429a      	cmp	r2, r3
 800d06a:	d01f      	beq.n	800d0ac <plug_holes+0x118>
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	791b      	ldrb	r3, [r3, #4]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d11b      	bne.n	800d0ac <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d074:	4b17      	ldr	r3, [pc, #92]	; (800d0d4 <plug_holes+0x140>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	687a      	ldr	r2, [r7, #4]
 800d07a:	429a      	cmp	r2, r3
 800d07c:	d102      	bne.n	800d084 <plug_holes+0xf0>
      lfree = pmem;
 800d07e:	4a15      	ldr	r2, [pc, #84]	; (800d0d4 <plug_holes+0x140>)
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	881a      	ldrh	r2, [r3, #0]
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	881b      	ldrh	r3, [r3, #0]
 800d090:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800d094:	d00a      	beq.n	800d0ac <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	881b      	ldrh	r3, [r3, #0]
 800d09a:	4618      	mov	r0, r3
 800d09c:	f7ff ff56 	bl	800cf4c <ptr_to_mem>
 800d0a0:	4604      	mov	r4, r0
 800d0a2:	68b8      	ldr	r0, [r7, #8]
 800d0a4:	f7ff ff64 	bl	800cf70 <mem_to_ptr>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d0ac:	bf00      	nop
 800d0ae:	3714      	adds	r7, #20
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd90      	pop	{r4, r7, pc}
 800d0b4:	20005244 	.word	0x20005244
 800d0b8:	0801a7ec 	.word	0x0801a7ec
 800d0bc:	0801a81c 	.word	0x0801a81c
 800d0c0:	0801a834 	.word	0x0801a834
 800d0c4:	20005248 	.word	0x20005248
 800d0c8:	0801a85c 	.word	0x0801a85c
 800d0cc:	0801a878 	.word	0x0801a878
 800d0d0:	0801a894 	.word	0x0801a894
 800d0d4:	20005250 	.word	0x20005250

0800d0d8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b082      	sub	sp, #8
 800d0dc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d0de:	4b1f      	ldr	r3, [pc, #124]	; (800d15c <mem_init+0x84>)
 800d0e0:	3303      	adds	r3, #3
 800d0e2:	f023 0303 	bic.w	r3, r3, #3
 800d0e6:	461a      	mov	r2, r3
 800d0e8:	4b1d      	ldr	r3, [pc, #116]	; (800d160 <mem_init+0x88>)
 800d0ea:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d0ec:	4b1c      	ldr	r3, [pc, #112]	; (800d160 <mem_init+0x88>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 800d0f8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2200      	movs	r2, #0
 800d104:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d106:	f44f 40f0 	mov.w	r0, #30720	; 0x7800
 800d10a:	f7ff ff1f 	bl	800cf4c <ptr_to_mem>
 800d10e:	4603      	mov	r3, r0
 800d110:	4a14      	ldr	r2, [pc, #80]	; (800d164 <mem_init+0x8c>)
 800d112:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d114:	4b13      	ldr	r3, [pc, #76]	; (800d164 <mem_init+0x8c>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	2201      	movs	r2, #1
 800d11a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d11c:	4b11      	ldr	r3, [pc, #68]	; (800d164 <mem_init+0x8c>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 800d124:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d126:	4b0f      	ldr	r3, [pc, #60]	; (800d164 <mem_init+0x8c>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 800d12e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d130:	4b0b      	ldr	r3, [pc, #44]	; (800d160 <mem_init+0x88>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	4a0c      	ldr	r2, [pc, #48]	; (800d168 <mem_init+0x90>)
 800d136:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d138:	480c      	ldr	r0, [pc, #48]	; (800d16c <mem_init+0x94>)
 800d13a:	f00a fbeb 	bl	8017914 <sys_mutex_new>
 800d13e:	4603      	mov	r3, r0
 800d140:	2b00      	cmp	r3, #0
 800d142:	d006      	beq.n	800d152 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d144:	4b0a      	ldr	r3, [pc, #40]	; (800d170 <mem_init+0x98>)
 800d146:	f240 221f 	movw	r2, #543	; 0x21f
 800d14a:	490a      	ldr	r1, [pc, #40]	; (800d174 <mem_init+0x9c>)
 800d14c:	480a      	ldr	r0, [pc, #40]	; (800d178 <mem_init+0xa0>)
 800d14e:	f00a fe77 	bl	8017e40 <iprintf>
  }
}
 800d152:	bf00      	nop
 800d154:	3708      	adds	r7, #8
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	bf00      	nop
 800d15c:	2000e2e8 	.word	0x2000e2e8
 800d160:	20005244 	.word	0x20005244
 800d164:	20005248 	.word	0x20005248
 800d168:	20005250 	.word	0x20005250
 800d16c:	2000524c 	.word	0x2000524c
 800d170:	0801a7ec 	.word	0x0801a7ec
 800d174:	0801a8c0 	.word	0x0801a8c0
 800d178:	0801a834 	.word	0x0801a834

0800d17c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b086      	sub	sp, #24
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f7ff fef3 	bl	800cf70 <mem_to_ptr>
 800d18a:	4603      	mov	r3, r0
 800d18c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	881b      	ldrh	r3, [r3, #0]
 800d192:	4618      	mov	r0, r3
 800d194:	f7ff feda 	bl	800cf4c <ptr_to_mem>
 800d198:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	885b      	ldrh	r3, [r3, #2]
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7ff fed4 	bl	800cf4c <ptr_to_mem>
 800d1a4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	881b      	ldrh	r3, [r3, #0]
 800d1aa:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800d1ae:	d818      	bhi.n	800d1e2 <mem_link_valid+0x66>
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	885b      	ldrh	r3, [r3, #2]
 800d1b4:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800d1b8:	d813      	bhi.n	800d1e2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d1be:	8afa      	ldrh	r2, [r7, #22]
 800d1c0:	429a      	cmp	r2, r3
 800d1c2:	d004      	beq.n	800d1ce <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	881b      	ldrh	r3, [r3, #0]
 800d1c8:	8afa      	ldrh	r2, [r7, #22]
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d109      	bne.n	800d1e2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d1ce:	4b08      	ldr	r3, [pc, #32]	; (800d1f0 <mem_link_valid+0x74>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d1d2:	693a      	ldr	r2, [r7, #16]
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	d006      	beq.n	800d1e6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	885b      	ldrh	r3, [r3, #2]
 800d1dc:	8afa      	ldrh	r2, [r7, #22]
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	d001      	beq.n	800d1e6 <mem_link_valid+0x6a>
    return 0;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	e000      	b.n	800d1e8 <mem_link_valid+0x6c>
  }
  return 1;
 800d1e6:	2301      	movs	r3, #1
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3718      	adds	r7, #24
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}
 800d1f0:	20005248 	.word	0x20005248

0800d1f4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b088      	sub	sp, #32
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d070      	beq.n	800d2e4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f003 0303 	and.w	r3, r3, #3
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d00d      	beq.n	800d228 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d20c:	4b37      	ldr	r3, [pc, #220]	; (800d2ec <mem_free+0xf8>)
 800d20e:	f240 2273 	movw	r2, #627	; 0x273
 800d212:	4937      	ldr	r1, [pc, #220]	; (800d2f0 <mem_free+0xfc>)
 800d214:	4837      	ldr	r0, [pc, #220]	; (800d2f4 <mem_free+0x100>)
 800d216:	f00a fe13 	bl	8017e40 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d21a:	f00a fbd9 	bl	80179d0 <sys_arch_protect>
 800d21e:	60f8      	str	r0, [r7, #12]
 800d220:	68f8      	ldr	r0, [r7, #12]
 800d222:	f00a fbe3 	bl	80179ec <sys_arch_unprotect>
    return;
 800d226:	e05e      	b.n	800d2e6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	3b08      	subs	r3, #8
 800d22c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d22e:	4b32      	ldr	r3, [pc, #200]	; (800d2f8 <mem_free+0x104>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	69fa      	ldr	r2, [r7, #28]
 800d234:	429a      	cmp	r2, r3
 800d236:	d306      	bcc.n	800d246 <mem_free+0x52>
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f103 020c 	add.w	r2, r3, #12
 800d23e:	4b2f      	ldr	r3, [pc, #188]	; (800d2fc <mem_free+0x108>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	429a      	cmp	r2, r3
 800d244:	d90d      	bls.n	800d262 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d246:	4b29      	ldr	r3, [pc, #164]	; (800d2ec <mem_free+0xf8>)
 800d248:	f240 227f 	movw	r2, #639	; 0x27f
 800d24c:	492c      	ldr	r1, [pc, #176]	; (800d300 <mem_free+0x10c>)
 800d24e:	4829      	ldr	r0, [pc, #164]	; (800d2f4 <mem_free+0x100>)
 800d250:	f00a fdf6 	bl	8017e40 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d254:	f00a fbbc 	bl	80179d0 <sys_arch_protect>
 800d258:	6138      	str	r0, [r7, #16]
 800d25a:	6938      	ldr	r0, [r7, #16]
 800d25c:	f00a fbc6 	bl	80179ec <sys_arch_unprotect>
    return;
 800d260:	e041      	b.n	800d2e6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d262:	4828      	ldr	r0, [pc, #160]	; (800d304 <mem_free+0x110>)
 800d264:	f00a fb72 	bl	801794c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d268:	69fb      	ldr	r3, [r7, #28]
 800d26a:	791b      	ldrb	r3, [r3, #4]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d110      	bne.n	800d292 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d270:	4b1e      	ldr	r3, [pc, #120]	; (800d2ec <mem_free+0xf8>)
 800d272:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d276:	4924      	ldr	r1, [pc, #144]	; (800d308 <mem_free+0x114>)
 800d278:	481e      	ldr	r0, [pc, #120]	; (800d2f4 <mem_free+0x100>)
 800d27a:	f00a fde1 	bl	8017e40 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d27e:	4821      	ldr	r0, [pc, #132]	; (800d304 <mem_free+0x110>)
 800d280:	f00a fb73 	bl	801796a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d284:	f00a fba4 	bl	80179d0 <sys_arch_protect>
 800d288:	6178      	str	r0, [r7, #20]
 800d28a:	6978      	ldr	r0, [r7, #20]
 800d28c:	f00a fbae 	bl	80179ec <sys_arch_unprotect>
    return;
 800d290:	e029      	b.n	800d2e6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d292:	69f8      	ldr	r0, [r7, #28]
 800d294:	f7ff ff72 	bl	800d17c <mem_link_valid>
 800d298:	4603      	mov	r3, r0
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d110      	bne.n	800d2c0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d29e:	4b13      	ldr	r3, [pc, #76]	; (800d2ec <mem_free+0xf8>)
 800d2a0:	f240 2295 	movw	r2, #661	; 0x295
 800d2a4:	4919      	ldr	r1, [pc, #100]	; (800d30c <mem_free+0x118>)
 800d2a6:	4813      	ldr	r0, [pc, #76]	; (800d2f4 <mem_free+0x100>)
 800d2a8:	f00a fdca 	bl	8017e40 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d2ac:	4815      	ldr	r0, [pc, #84]	; (800d304 <mem_free+0x110>)
 800d2ae:	f00a fb5c 	bl	801796a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d2b2:	f00a fb8d 	bl	80179d0 <sys_arch_protect>
 800d2b6:	61b8      	str	r0, [r7, #24]
 800d2b8:	69b8      	ldr	r0, [r7, #24]
 800d2ba:	f00a fb97 	bl	80179ec <sys_arch_unprotect>
    return;
 800d2be:	e012      	b.n	800d2e6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d2c0:	69fb      	ldr	r3, [r7, #28]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d2c6:	4b12      	ldr	r3, [pc, #72]	; (800d310 <mem_free+0x11c>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	69fa      	ldr	r2, [r7, #28]
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	d202      	bcs.n	800d2d6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d2d0:	4a0f      	ldr	r2, [pc, #60]	; (800d310 <mem_free+0x11c>)
 800d2d2:	69fb      	ldr	r3, [r7, #28]
 800d2d4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d2d6:	69f8      	ldr	r0, [r7, #28]
 800d2d8:	f7ff fe5c 	bl	800cf94 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d2dc:	4809      	ldr	r0, [pc, #36]	; (800d304 <mem_free+0x110>)
 800d2de:	f00a fb44 	bl	801796a <sys_mutex_unlock>
 800d2e2:	e000      	b.n	800d2e6 <mem_free+0xf2>
    return;
 800d2e4:	bf00      	nop
}
 800d2e6:	3720      	adds	r7, #32
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}
 800d2ec:	0801a7ec 	.word	0x0801a7ec
 800d2f0:	0801a8dc 	.word	0x0801a8dc
 800d2f4:	0801a834 	.word	0x0801a834
 800d2f8:	20005244 	.word	0x20005244
 800d2fc:	20005248 	.word	0x20005248
 800d300:	0801a900 	.word	0x0801a900
 800d304:	2000524c 	.word	0x2000524c
 800d308:	0801a91c 	.word	0x0801a91c
 800d30c:	0801a944 	.word	0x0801a944
 800d310:	20005250 	.word	0x20005250

0800d314 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b088      	sub	sp, #32
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	460b      	mov	r3, r1
 800d31e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d320:	887b      	ldrh	r3, [r7, #2]
 800d322:	3303      	adds	r3, #3
 800d324:	b29b      	uxth	r3, r3
 800d326:	f023 0303 	bic.w	r3, r3, #3
 800d32a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d32c:	8bfb      	ldrh	r3, [r7, #30]
 800d32e:	2b0b      	cmp	r3, #11
 800d330:	d801      	bhi.n	800d336 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d332:	230c      	movs	r3, #12
 800d334:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d336:	8bfb      	ldrh	r3, [r7, #30]
 800d338:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800d33c:	d803      	bhi.n	800d346 <mem_trim+0x32>
 800d33e:	8bfa      	ldrh	r2, [r7, #30]
 800d340:	887b      	ldrh	r3, [r7, #2]
 800d342:	429a      	cmp	r2, r3
 800d344:	d201      	bcs.n	800d34a <mem_trim+0x36>
    return NULL;
 800d346:	2300      	movs	r3, #0
 800d348:	e0d8      	b.n	800d4fc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d34a:	4b6e      	ldr	r3, [pc, #440]	; (800d504 <mem_trim+0x1f0>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	687a      	ldr	r2, [r7, #4]
 800d350:	429a      	cmp	r2, r3
 800d352:	d304      	bcc.n	800d35e <mem_trim+0x4a>
 800d354:	4b6c      	ldr	r3, [pc, #432]	; (800d508 <mem_trim+0x1f4>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d306      	bcc.n	800d36c <mem_trim+0x58>
 800d35e:	4b6b      	ldr	r3, [pc, #428]	; (800d50c <mem_trim+0x1f8>)
 800d360:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d364:	496a      	ldr	r1, [pc, #424]	; (800d510 <mem_trim+0x1fc>)
 800d366:	486b      	ldr	r0, [pc, #428]	; (800d514 <mem_trim+0x200>)
 800d368:	f00a fd6a 	bl	8017e40 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d36c:	4b65      	ldr	r3, [pc, #404]	; (800d504 <mem_trim+0x1f0>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	687a      	ldr	r2, [r7, #4]
 800d372:	429a      	cmp	r2, r3
 800d374:	d304      	bcc.n	800d380 <mem_trim+0x6c>
 800d376:	4b64      	ldr	r3, [pc, #400]	; (800d508 <mem_trim+0x1f4>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	687a      	ldr	r2, [r7, #4]
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d307      	bcc.n	800d390 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d380:	f00a fb26 	bl	80179d0 <sys_arch_protect>
 800d384:	60b8      	str	r0, [r7, #8]
 800d386:	68b8      	ldr	r0, [r7, #8]
 800d388:	f00a fb30 	bl	80179ec <sys_arch_unprotect>
    return rmem;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	e0b5      	b.n	800d4fc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	3b08      	subs	r3, #8
 800d394:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d396:	69b8      	ldr	r0, [r7, #24]
 800d398:	f7ff fdea 	bl	800cf70 <mem_to_ptr>
 800d39c:	4603      	mov	r3, r0
 800d39e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d3a0:	69bb      	ldr	r3, [r7, #24]
 800d3a2:	881a      	ldrh	r2, [r3, #0]
 800d3a4:	8afb      	ldrh	r3, [r7, #22]
 800d3a6:	1ad3      	subs	r3, r2, r3
 800d3a8:	b29b      	uxth	r3, r3
 800d3aa:	3b08      	subs	r3, #8
 800d3ac:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d3ae:	8bfa      	ldrh	r2, [r7, #30]
 800d3b0:	8abb      	ldrh	r3, [r7, #20]
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d906      	bls.n	800d3c4 <mem_trim+0xb0>
 800d3b6:	4b55      	ldr	r3, [pc, #340]	; (800d50c <mem_trim+0x1f8>)
 800d3b8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d3bc:	4956      	ldr	r1, [pc, #344]	; (800d518 <mem_trim+0x204>)
 800d3be:	4855      	ldr	r0, [pc, #340]	; (800d514 <mem_trim+0x200>)
 800d3c0:	f00a fd3e 	bl	8017e40 <iprintf>
  if (newsize > size) {
 800d3c4:	8bfa      	ldrh	r2, [r7, #30]
 800d3c6:	8abb      	ldrh	r3, [r7, #20]
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d901      	bls.n	800d3d0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	e095      	b.n	800d4fc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800d3d0:	8bfa      	ldrh	r2, [r7, #30]
 800d3d2:	8abb      	ldrh	r3, [r7, #20]
 800d3d4:	429a      	cmp	r2, r3
 800d3d6:	d101      	bne.n	800d3dc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	e08f      	b.n	800d4fc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d3dc:	484f      	ldr	r0, [pc, #316]	; (800d51c <mem_trim+0x208>)
 800d3de:	f00a fab5 	bl	801794c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d3e2:	69bb      	ldr	r3, [r7, #24]
 800d3e4:	881b      	ldrh	r3, [r3, #0]
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f7ff fdb0 	bl	800cf4c <ptr_to_mem>
 800d3ec:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	791b      	ldrb	r3, [r3, #4]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d13f      	bne.n	800d476 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d3f6:	69bb      	ldr	r3, [r7, #24]
 800d3f8:	881b      	ldrh	r3, [r3, #0]
 800d3fa:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800d3fe:	d106      	bne.n	800d40e <mem_trim+0xfa>
 800d400:	4b42      	ldr	r3, [pc, #264]	; (800d50c <mem_trim+0x1f8>)
 800d402:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d406:	4946      	ldr	r1, [pc, #280]	; (800d520 <mem_trim+0x20c>)
 800d408:	4842      	ldr	r0, [pc, #264]	; (800d514 <mem_trim+0x200>)
 800d40a:	f00a fd19 	bl	8017e40 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	881b      	ldrh	r3, [r3, #0]
 800d412:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d414:	8afa      	ldrh	r2, [r7, #22]
 800d416:	8bfb      	ldrh	r3, [r7, #30]
 800d418:	4413      	add	r3, r2
 800d41a:	b29b      	uxth	r3, r3
 800d41c:	3308      	adds	r3, #8
 800d41e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d420:	4b40      	ldr	r3, [pc, #256]	; (800d524 <mem_trim+0x210>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	693a      	ldr	r2, [r7, #16]
 800d426:	429a      	cmp	r2, r3
 800d428:	d106      	bne.n	800d438 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800d42a:	89fb      	ldrh	r3, [r7, #14]
 800d42c:	4618      	mov	r0, r3
 800d42e:	f7ff fd8d 	bl	800cf4c <ptr_to_mem>
 800d432:	4603      	mov	r3, r0
 800d434:	4a3b      	ldr	r2, [pc, #236]	; (800d524 <mem_trim+0x210>)
 800d436:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d438:	89fb      	ldrh	r3, [r7, #14]
 800d43a:	4618      	mov	r0, r3
 800d43c:	f7ff fd86 	bl	800cf4c <ptr_to_mem>
 800d440:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	2200      	movs	r2, #0
 800d446:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	89ba      	ldrh	r2, [r7, #12]
 800d44c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	8afa      	ldrh	r2, [r7, #22]
 800d452:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d454:	69bb      	ldr	r3, [r7, #24]
 800d456:	89fa      	ldrh	r2, [r7, #14]
 800d458:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	881b      	ldrh	r3, [r3, #0]
 800d45e:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800d462:	d047      	beq.n	800d4f4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	881b      	ldrh	r3, [r3, #0]
 800d468:	4618      	mov	r0, r3
 800d46a:	f7ff fd6f 	bl	800cf4c <ptr_to_mem>
 800d46e:	4602      	mov	r2, r0
 800d470:	89fb      	ldrh	r3, [r7, #14]
 800d472:	8053      	strh	r3, [r2, #2]
 800d474:	e03e      	b.n	800d4f4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d476:	8bfb      	ldrh	r3, [r7, #30]
 800d478:	f103 0214 	add.w	r2, r3, #20
 800d47c:	8abb      	ldrh	r3, [r7, #20]
 800d47e:	429a      	cmp	r2, r3
 800d480:	d838      	bhi.n	800d4f4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d482:	8afa      	ldrh	r2, [r7, #22]
 800d484:	8bfb      	ldrh	r3, [r7, #30]
 800d486:	4413      	add	r3, r2
 800d488:	b29b      	uxth	r3, r3
 800d48a:	3308      	adds	r3, #8
 800d48c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d48e:	69bb      	ldr	r3, [r7, #24]
 800d490:	881b      	ldrh	r3, [r3, #0]
 800d492:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800d496:	d106      	bne.n	800d4a6 <mem_trim+0x192>
 800d498:	4b1c      	ldr	r3, [pc, #112]	; (800d50c <mem_trim+0x1f8>)
 800d49a:	f240 3216 	movw	r2, #790	; 0x316
 800d49e:	4920      	ldr	r1, [pc, #128]	; (800d520 <mem_trim+0x20c>)
 800d4a0:	481c      	ldr	r0, [pc, #112]	; (800d514 <mem_trim+0x200>)
 800d4a2:	f00a fccd 	bl	8017e40 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d4a6:	89fb      	ldrh	r3, [r7, #14]
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f7ff fd4f 	bl	800cf4c <ptr_to_mem>
 800d4ae:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d4b0:	4b1c      	ldr	r3, [pc, #112]	; (800d524 <mem_trim+0x210>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	693a      	ldr	r2, [r7, #16]
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	d202      	bcs.n	800d4c0 <mem_trim+0x1ac>
      lfree = mem2;
 800d4ba:	4a1a      	ldr	r2, [pc, #104]	; (800d524 <mem_trim+0x210>)
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d4c6:	69bb      	ldr	r3, [r7, #24]
 800d4c8:	881a      	ldrh	r2, [r3, #0]
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	8afa      	ldrh	r2, [r7, #22]
 800d4d2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d4d4:	69bb      	ldr	r3, [r7, #24]
 800d4d6:	89fa      	ldrh	r2, [r7, #14]
 800d4d8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	881b      	ldrh	r3, [r3, #0]
 800d4de:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800d4e2:	d007      	beq.n	800d4f4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	881b      	ldrh	r3, [r3, #0]
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f7ff fd2f 	bl	800cf4c <ptr_to_mem>
 800d4ee:	4602      	mov	r2, r0
 800d4f0:	89fb      	ldrh	r3, [r7, #14]
 800d4f2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d4f4:	4809      	ldr	r0, [pc, #36]	; (800d51c <mem_trim+0x208>)
 800d4f6:	f00a fa38 	bl	801796a <sys_mutex_unlock>
  return rmem;
 800d4fa:	687b      	ldr	r3, [r7, #4]
}
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	3720      	adds	r7, #32
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}
 800d504:	20005244 	.word	0x20005244
 800d508:	20005248 	.word	0x20005248
 800d50c:	0801a7ec 	.word	0x0801a7ec
 800d510:	0801a978 	.word	0x0801a978
 800d514:	0801a834 	.word	0x0801a834
 800d518:	0801a990 	.word	0x0801a990
 800d51c:	2000524c 	.word	0x2000524c
 800d520:	0801a9b0 	.word	0x0801a9b0
 800d524:	20005250 	.word	0x20005250

0800d528 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b088      	sub	sp, #32
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	4603      	mov	r3, r0
 800d530:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d532:	88fb      	ldrh	r3, [r7, #6]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d101      	bne.n	800d53c <mem_malloc+0x14>
    return NULL;
 800d538:	2300      	movs	r3, #0
 800d53a:	e0e2      	b.n	800d702 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d53c:	88fb      	ldrh	r3, [r7, #6]
 800d53e:	3303      	adds	r3, #3
 800d540:	b29b      	uxth	r3, r3
 800d542:	f023 0303 	bic.w	r3, r3, #3
 800d546:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d548:	8bbb      	ldrh	r3, [r7, #28]
 800d54a:	2b0b      	cmp	r3, #11
 800d54c:	d801      	bhi.n	800d552 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d54e:	230c      	movs	r3, #12
 800d550:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d552:	8bbb      	ldrh	r3, [r7, #28]
 800d554:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800d558:	d803      	bhi.n	800d562 <mem_malloc+0x3a>
 800d55a:	8bba      	ldrh	r2, [r7, #28]
 800d55c:	88fb      	ldrh	r3, [r7, #6]
 800d55e:	429a      	cmp	r2, r3
 800d560:	d201      	bcs.n	800d566 <mem_malloc+0x3e>
    return NULL;
 800d562:	2300      	movs	r3, #0
 800d564:	e0cd      	b.n	800d702 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d566:	4869      	ldr	r0, [pc, #420]	; (800d70c <mem_malloc+0x1e4>)
 800d568:	f00a f9f0 	bl	801794c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d56c:	4b68      	ldr	r3, [pc, #416]	; (800d710 <mem_malloc+0x1e8>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	4618      	mov	r0, r3
 800d572:	f7ff fcfd 	bl	800cf70 <mem_to_ptr>
 800d576:	4603      	mov	r3, r0
 800d578:	83fb      	strh	r3, [r7, #30]
 800d57a:	e0b7      	b.n	800d6ec <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d57c:	8bfb      	ldrh	r3, [r7, #30]
 800d57e:	4618      	mov	r0, r3
 800d580:	f7ff fce4 	bl	800cf4c <ptr_to_mem>
 800d584:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	791b      	ldrb	r3, [r3, #4]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	f040 80a7 	bne.w	800d6de <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	881b      	ldrh	r3, [r3, #0]
 800d594:	461a      	mov	r2, r3
 800d596:	8bfb      	ldrh	r3, [r7, #30]
 800d598:	1ad3      	subs	r3, r2, r3
 800d59a:	f1a3 0208 	sub.w	r2, r3, #8
 800d59e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	f0c0 809c 	bcc.w	800d6de <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	881b      	ldrh	r3, [r3, #0]
 800d5aa:	461a      	mov	r2, r3
 800d5ac:	8bfb      	ldrh	r3, [r7, #30]
 800d5ae:	1ad3      	subs	r3, r2, r3
 800d5b0:	f1a3 0208 	sub.w	r2, r3, #8
 800d5b4:	8bbb      	ldrh	r3, [r7, #28]
 800d5b6:	3314      	adds	r3, #20
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d333      	bcc.n	800d624 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d5bc:	8bfa      	ldrh	r2, [r7, #30]
 800d5be:	8bbb      	ldrh	r3, [r7, #28]
 800d5c0:	4413      	add	r3, r2
 800d5c2:	b29b      	uxth	r3, r3
 800d5c4:	3308      	adds	r3, #8
 800d5c6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d5c8:	8a7b      	ldrh	r3, [r7, #18]
 800d5ca:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800d5ce:	d106      	bne.n	800d5de <mem_malloc+0xb6>
 800d5d0:	4b50      	ldr	r3, [pc, #320]	; (800d714 <mem_malloc+0x1ec>)
 800d5d2:	f240 3287 	movw	r2, #903	; 0x387
 800d5d6:	4950      	ldr	r1, [pc, #320]	; (800d718 <mem_malloc+0x1f0>)
 800d5d8:	4850      	ldr	r0, [pc, #320]	; (800d71c <mem_malloc+0x1f4>)
 800d5da:	f00a fc31 	bl	8017e40 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d5de:	8a7b      	ldrh	r3, [r7, #18]
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f7ff fcb3 	bl	800cf4c <ptr_to_mem>
 800d5e6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	881a      	ldrh	r2, [r3, #0]
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	8bfa      	ldrh	r2, [r7, #30]
 800d5fa:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	8a7a      	ldrh	r2, [r7, #18]
 800d600:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	2201      	movs	r2, #1
 800d606:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	881b      	ldrh	r3, [r3, #0]
 800d60c:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800d610:	d00b      	beq.n	800d62a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	881b      	ldrh	r3, [r3, #0]
 800d616:	4618      	mov	r0, r3
 800d618:	f7ff fc98 	bl	800cf4c <ptr_to_mem>
 800d61c:	4602      	mov	r2, r0
 800d61e:	8a7b      	ldrh	r3, [r7, #18]
 800d620:	8053      	strh	r3, [r2, #2]
 800d622:	e002      	b.n	800d62a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	2201      	movs	r2, #1
 800d628:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d62a:	4b39      	ldr	r3, [pc, #228]	; (800d710 <mem_malloc+0x1e8>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	697a      	ldr	r2, [r7, #20]
 800d630:	429a      	cmp	r2, r3
 800d632:	d127      	bne.n	800d684 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d634:	4b36      	ldr	r3, [pc, #216]	; (800d710 <mem_malloc+0x1e8>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d63a:	e005      	b.n	800d648 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d63c:	69bb      	ldr	r3, [r7, #24]
 800d63e:	881b      	ldrh	r3, [r3, #0]
 800d640:	4618      	mov	r0, r3
 800d642:	f7ff fc83 	bl	800cf4c <ptr_to_mem>
 800d646:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d648:	69bb      	ldr	r3, [r7, #24]
 800d64a:	791b      	ldrb	r3, [r3, #4]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d004      	beq.n	800d65a <mem_malloc+0x132>
 800d650:	4b33      	ldr	r3, [pc, #204]	; (800d720 <mem_malloc+0x1f8>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	69ba      	ldr	r2, [r7, #24]
 800d656:	429a      	cmp	r2, r3
 800d658:	d1f0      	bne.n	800d63c <mem_malloc+0x114>
          }
          lfree = cur;
 800d65a:	4a2d      	ldr	r2, [pc, #180]	; (800d710 <mem_malloc+0x1e8>)
 800d65c:	69bb      	ldr	r3, [r7, #24]
 800d65e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d660:	4b2b      	ldr	r3, [pc, #172]	; (800d710 <mem_malloc+0x1e8>)
 800d662:	681a      	ldr	r2, [r3, #0]
 800d664:	4b2e      	ldr	r3, [pc, #184]	; (800d720 <mem_malloc+0x1f8>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	429a      	cmp	r2, r3
 800d66a:	d00b      	beq.n	800d684 <mem_malloc+0x15c>
 800d66c:	4b28      	ldr	r3, [pc, #160]	; (800d710 <mem_malloc+0x1e8>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	791b      	ldrb	r3, [r3, #4]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d006      	beq.n	800d684 <mem_malloc+0x15c>
 800d676:	4b27      	ldr	r3, [pc, #156]	; (800d714 <mem_malloc+0x1ec>)
 800d678:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d67c:	4929      	ldr	r1, [pc, #164]	; (800d724 <mem_malloc+0x1fc>)
 800d67e:	4827      	ldr	r0, [pc, #156]	; (800d71c <mem_malloc+0x1f4>)
 800d680:	f00a fbde 	bl	8017e40 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d684:	4821      	ldr	r0, [pc, #132]	; (800d70c <mem_malloc+0x1e4>)
 800d686:	f00a f970 	bl	801796a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d68a:	8bba      	ldrh	r2, [r7, #28]
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	4413      	add	r3, r2
 800d690:	3308      	adds	r3, #8
 800d692:	4a23      	ldr	r2, [pc, #140]	; (800d720 <mem_malloc+0x1f8>)
 800d694:	6812      	ldr	r2, [r2, #0]
 800d696:	4293      	cmp	r3, r2
 800d698:	d906      	bls.n	800d6a8 <mem_malloc+0x180>
 800d69a:	4b1e      	ldr	r3, [pc, #120]	; (800d714 <mem_malloc+0x1ec>)
 800d69c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800d6a0:	4921      	ldr	r1, [pc, #132]	; (800d728 <mem_malloc+0x200>)
 800d6a2:	481e      	ldr	r0, [pc, #120]	; (800d71c <mem_malloc+0x1f4>)
 800d6a4:	f00a fbcc 	bl	8017e40 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	f003 0303 	and.w	r3, r3, #3
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d006      	beq.n	800d6c0 <mem_malloc+0x198>
 800d6b2:	4b18      	ldr	r3, [pc, #96]	; (800d714 <mem_malloc+0x1ec>)
 800d6b4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800d6b8:	491c      	ldr	r1, [pc, #112]	; (800d72c <mem_malloc+0x204>)
 800d6ba:	4818      	ldr	r0, [pc, #96]	; (800d71c <mem_malloc+0x1f4>)
 800d6bc:	f00a fbc0 	bl	8017e40 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	f003 0303 	and.w	r3, r3, #3
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d006      	beq.n	800d6d8 <mem_malloc+0x1b0>
 800d6ca:	4b12      	ldr	r3, [pc, #72]	; (800d714 <mem_malloc+0x1ec>)
 800d6cc:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d6d0:	4917      	ldr	r1, [pc, #92]	; (800d730 <mem_malloc+0x208>)
 800d6d2:	4812      	ldr	r0, [pc, #72]	; (800d71c <mem_malloc+0x1f4>)
 800d6d4:	f00a fbb4 	bl	8017e40 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	3308      	adds	r3, #8
 800d6dc:	e011      	b.n	800d702 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800d6de:	8bfb      	ldrh	r3, [r7, #30]
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f7ff fc33 	bl	800cf4c <ptr_to_mem>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	881b      	ldrh	r3, [r3, #0]
 800d6ea:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d6ec:	8bfa      	ldrh	r2, [r7, #30]
 800d6ee:	8bbb      	ldrh	r3, [r7, #28]
 800d6f0:	f5c3 43f0 	rsb	r3, r3, #30720	; 0x7800
 800d6f4:	429a      	cmp	r2, r3
 800d6f6:	f4ff af41 	bcc.w	800d57c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d6fa:	4804      	ldr	r0, [pc, #16]	; (800d70c <mem_malloc+0x1e4>)
 800d6fc:	f00a f935 	bl	801796a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d700:	2300      	movs	r3, #0
}
 800d702:	4618      	mov	r0, r3
 800d704:	3720      	adds	r7, #32
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}
 800d70a:	bf00      	nop
 800d70c:	2000524c 	.word	0x2000524c
 800d710:	20005250 	.word	0x20005250
 800d714:	0801a7ec 	.word	0x0801a7ec
 800d718:	0801a9b0 	.word	0x0801a9b0
 800d71c:	0801a834 	.word	0x0801a834
 800d720:	20005248 	.word	0x20005248
 800d724:	0801a9c4 	.word	0x0801a9c4
 800d728:	0801a9e0 	.word	0x0801a9e0
 800d72c:	0801aa10 	.word	0x0801aa10
 800d730:	0801aa40 	.word	0x0801aa40

0800d734 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d734:	b480      	push	{r7}
 800d736:	b085      	sub	sp, #20
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	689b      	ldr	r3, [r3, #8]
 800d740:	2200      	movs	r2, #0
 800d742:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	685b      	ldr	r3, [r3, #4]
 800d748:	3303      	adds	r3, #3
 800d74a:	f023 0303 	bic.w	r3, r3, #3
 800d74e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d750:	2300      	movs	r3, #0
 800d752:	60fb      	str	r3, [r7, #12]
 800d754:	e011      	b.n	800d77a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	689b      	ldr	r3, [r3, #8]
 800d75a:	681a      	ldr	r2, [r3, #0]
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	689b      	ldr	r3, [r3, #8]
 800d764:	68ba      	ldr	r2, [r7, #8]
 800d766:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	881b      	ldrh	r3, [r3, #0]
 800d76c:	461a      	mov	r2, r3
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	4413      	add	r3, r2
 800d772:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	3301      	adds	r3, #1
 800d778:	60fb      	str	r3, [r7, #12]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	885b      	ldrh	r3, [r3, #2]
 800d77e:	461a      	mov	r2, r3
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	4293      	cmp	r3, r2
 800d784:	dbe7      	blt.n	800d756 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d786:	bf00      	nop
 800d788:	bf00      	nop
 800d78a:	3714      	adds	r7, #20
 800d78c:	46bd      	mov	sp, r7
 800d78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d792:	4770      	bx	lr

0800d794 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b082      	sub	sp, #8
 800d798:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d79a:	2300      	movs	r3, #0
 800d79c:	80fb      	strh	r3, [r7, #6]
 800d79e:	e009      	b.n	800d7b4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d7a0:	88fb      	ldrh	r3, [r7, #6]
 800d7a2:	4a08      	ldr	r2, [pc, #32]	; (800d7c4 <memp_init+0x30>)
 800d7a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f7ff ffc3 	bl	800d734 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d7ae:	88fb      	ldrh	r3, [r7, #6]
 800d7b0:	3301      	adds	r3, #1
 800d7b2:	80fb      	strh	r3, [r7, #6]
 800d7b4:	88fb      	ldrh	r3, [r7, #6]
 800d7b6:	2b0c      	cmp	r3, #12
 800d7b8:	d9f2      	bls.n	800d7a0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d7ba:	bf00      	nop
 800d7bc:	bf00      	nop
 800d7be:	3708      	adds	r7, #8
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}
 800d7c4:	0801e87c 	.word	0x0801e87c

0800d7c8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b084      	sub	sp, #16
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d7d0:	f00a f8fe 	bl	80179d0 <sys_arch_protect>
 800d7d4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	689b      	ldr	r3, [r3, #8]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d015      	beq.n	800d810 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	689b      	ldr	r3, [r3, #8]
 800d7e8:	68ba      	ldr	r2, [r7, #8]
 800d7ea:	6812      	ldr	r2, [r2, #0]
 800d7ec:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	f003 0303 	and.w	r3, r3, #3
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d006      	beq.n	800d806 <do_memp_malloc_pool+0x3e>
 800d7f8:	4b09      	ldr	r3, [pc, #36]	; (800d820 <do_memp_malloc_pool+0x58>)
 800d7fa:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d7fe:	4909      	ldr	r1, [pc, #36]	; (800d824 <do_memp_malloc_pool+0x5c>)
 800d800:	4809      	ldr	r0, [pc, #36]	; (800d828 <do_memp_malloc_pool+0x60>)
 800d802:	f00a fb1d 	bl	8017e40 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d806:	68f8      	ldr	r0, [r7, #12]
 800d808:	f00a f8f0 	bl	80179ec <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	e003      	b.n	800d818 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d810:	68f8      	ldr	r0, [r7, #12]
 800d812:	f00a f8eb 	bl	80179ec <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d816:	2300      	movs	r3, #0
}
 800d818:	4618      	mov	r0, r3
 800d81a:	3710      	adds	r7, #16
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}
 800d820:	0801aa64 	.word	0x0801aa64
 800d824:	0801aa94 	.word	0x0801aa94
 800d828:	0801aab8 	.word	0x0801aab8

0800d82c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b084      	sub	sp, #16
 800d830:	af00      	add	r7, sp, #0
 800d832:	4603      	mov	r3, r0
 800d834:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d836:	79fb      	ldrb	r3, [r7, #7]
 800d838:	2b0c      	cmp	r3, #12
 800d83a:	d908      	bls.n	800d84e <memp_malloc+0x22>
 800d83c:	4b0a      	ldr	r3, [pc, #40]	; (800d868 <memp_malloc+0x3c>)
 800d83e:	f240 1257 	movw	r2, #343	; 0x157
 800d842:	490a      	ldr	r1, [pc, #40]	; (800d86c <memp_malloc+0x40>)
 800d844:	480a      	ldr	r0, [pc, #40]	; (800d870 <memp_malloc+0x44>)
 800d846:	f00a fafb 	bl	8017e40 <iprintf>
 800d84a:	2300      	movs	r3, #0
 800d84c:	e008      	b.n	800d860 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d84e:	79fb      	ldrb	r3, [r7, #7]
 800d850:	4a08      	ldr	r2, [pc, #32]	; (800d874 <memp_malloc+0x48>)
 800d852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d856:	4618      	mov	r0, r3
 800d858:	f7ff ffb6 	bl	800d7c8 <do_memp_malloc_pool>
 800d85c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d85e:	68fb      	ldr	r3, [r7, #12]
}
 800d860:	4618      	mov	r0, r3
 800d862:	3710      	adds	r7, #16
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}
 800d868:	0801aa64 	.word	0x0801aa64
 800d86c:	0801aaf4 	.word	0x0801aaf4
 800d870:	0801aab8 	.word	0x0801aab8
 800d874:	0801e87c 	.word	0x0801e87c

0800d878 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b084      	sub	sp, #16
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	f003 0303 	and.w	r3, r3, #3
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d006      	beq.n	800d89a <do_memp_free_pool+0x22>
 800d88c:	4b0d      	ldr	r3, [pc, #52]	; (800d8c4 <do_memp_free_pool+0x4c>)
 800d88e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d892:	490d      	ldr	r1, [pc, #52]	; (800d8c8 <do_memp_free_pool+0x50>)
 800d894:	480d      	ldr	r0, [pc, #52]	; (800d8cc <do_memp_free_pool+0x54>)
 800d896:	f00a fad3 	bl	8017e40 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d89e:	f00a f897 	bl	80179d0 <sys_arch_protect>
 800d8a2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	689b      	ldr	r3, [r3, #8]
 800d8a8:	681a      	ldr	r2, [r3, #0]
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	689b      	ldr	r3, [r3, #8]
 800d8b2:	68fa      	ldr	r2, [r7, #12]
 800d8b4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d8b6:	68b8      	ldr	r0, [r7, #8]
 800d8b8:	f00a f898 	bl	80179ec <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d8bc:	bf00      	nop
 800d8be:	3710      	adds	r7, #16
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}
 800d8c4:	0801aa64 	.word	0x0801aa64
 800d8c8:	0801ab14 	.word	0x0801ab14
 800d8cc:	0801aab8 	.word	0x0801aab8

0800d8d0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b082      	sub	sp, #8
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	6039      	str	r1, [r7, #0]
 800d8da:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d8dc:	79fb      	ldrb	r3, [r7, #7]
 800d8de:	2b0c      	cmp	r3, #12
 800d8e0:	d907      	bls.n	800d8f2 <memp_free+0x22>
 800d8e2:	4b0c      	ldr	r3, [pc, #48]	; (800d914 <memp_free+0x44>)
 800d8e4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d8e8:	490b      	ldr	r1, [pc, #44]	; (800d918 <memp_free+0x48>)
 800d8ea:	480c      	ldr	r0, [pc, #48]	; (800d91c <memp_free+0x4c>)
 800d8ec:	f00a faa8 	bl	8017e40 <iprintf>
 800d8f0:	e00c      	b.n	800d90c <memp_free+0x3c>

  if (mem == NULL) {
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d008      	beq.n	800d90a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d8f8:	79fb      	ldrb	r3, [r7, #7]
 800d8fa:	4a09      	ldr	r2, [pc, #36]	; (800d920 <memp_free+0x50>)
 800d8fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d900:	6839      	ldr	r1, [r7, #0]
 800d902:	4618      	mov	r0, r3
 800d904:	f7ff ffb8 	bl	800d878 <do_memp_free_pool>
 800d908:	e000      	b.n	800d90c <memp_free+0x3c>
    return;
 800d90a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d90c:	3708      	adds	r7, #8
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd80      	pop	{r7, pc}
 800d912:	bf00      	nop
 800d914:	0801aa64 	.word	0x0801aa64
 800d918:	0801ab34 	.word	0x0801ab34
 800d91c:	0801aab8 	.word	0x0801aab8
 800d920:	0801e87c 	.word	0x0801e87c

0800d924 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d924:	b480      	push	{r7}
 800d926:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d928:	bf00      	nop
 800d92a:	46bd      	mov	sp, r7
 800d92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d930:	4770      	bx	lr
	...

0800d934 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b086      	sub	sp, #24
 800d938:	af00      	add	r7, sp, #0
 800d93a:	60f8      	str	r0, [r7, #12]
 800d93c:	60b9      	str	r1, [r7, #8]
 800d93e:	607a      	str	r2, [r7, #4]
 800d940:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d108      	bne.n	800d95a <netif_add+0x26>
 800d948:	4b57      	ldr	r3, [pc, #348]	; (800daa8 <netif_add+0x174>)
 800d94a:	f240 1227 	movw	r2, #295	; 0x127
 800d94e:	4957      	ldr	r1, [pc, #348]	; (800daac <netif_add+0x178>)
 800d950:	4857      	ldr	r0, [pc, #348]	; (800dab0 <netif_add+0x17c>)
 800d952:	f00a fa75 	bl	8017e40 <iprintf>
 800d956:	2300      	movs	r3, #0
 800d958:	e0a2      	b.n	800daa0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d108      	bne.n	800d972 <netif_add+0x3e>
 800d960:	4b51      	ldr	r3, [pc, #324]	; (800daa8 <netif_add+0x174>)
 800d962:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d966:	4953      	ldr	r1, [pc, #332]	; (800dab4 <netif_add+0x180>)
 800d968:	4851      	ldr	r0, [pc, #324]	; (800dab0 <netif_add+0x17c>)
 800d96a:	f00a fa69 	bl	8017e40 <iprintf>
 800d96e:	2300      	movs	r3, #0
 800d970:	e096      	b.n	800daa0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d101      	bne.n	800d97c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d978:	4b4f      	ldr	r3, [pc, #316]	; (800dab8 <netif_add+0x184>)
 800d97a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d101      	bne.n	800d986 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d982:	4b4d      	ldr	r3, [pc, #308]	; (800dab8 <netif_add+0x184>)
 800d984:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d101      	bne.n	800d990 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d98c:	4b4a      	ldr	r3, [pc, #296]	; (800dab8 <netif_add+0x184>)
 800d98e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	2200      	movs	r2, #0
 800d994:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	2200      	movs	r2, #0
 800d99a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	4a45      	ldr	r2, [pc, #276]	; (800dabc <netif_add+0x188>)
 800d9a6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	6a3a      	ldr	r2, [r7, #32]
 800d9c0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d9c2:	4b3f      	ldr	r3, [pc, #252]	; (800dac0 <netif_add+0x18c>)
 800d9c4:	781a      	ldrb	r2, [r3, #0]
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9d0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	687a      	ldr	r2, [r7, #4]
 800d9d6:	68b9      	ldr	r1, [r7, #8]
 800d9d8:	68f8      	ldr	r0, [r7, #12]
 800d9da:	f000 f913 	bl	800dc04 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9e0:	68f8      	ldr	r0, [r7, #12]
 800d9e2:	4798      	blx	r3
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d001      	beq.n	800d9ee <netif_add+0xba>
    return NULL;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	e058      	b.n	800daa0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d9f4:	2bff      	cmp	r3, #255	; 0xff
 800d9f6:	d103      	bne.n	800da00 <netif_add+0xcc>
        netif->num = 0;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800da00:	2300      	movs	r3, #0
 800da02:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800da04:	4b2f      	ldr	r3, [pc, #188]	; (800dac4 <netif_add+0x190>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	617b      	str	r3, [r7, #20]
 800da0a:	e02b      	b.n	800da64 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800da0c:	697a      	ldr	r2, [r7, #20]
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	429a      	cmp	r2, r3
 800da12:	d106      	bne.n	800da22 <netif_add+0xee>
 800da14:	4b24      	ldr	r3, [pc, #144]	; (800daa8 <netif_add+0x174>)
 800da16:	f240 128b 	movw	r2, #395	; 0x18b
 800da1a:	492b      	ldr	r1, [pc, #172]	; (800dac8 <netif_add+0x194>)
 800da1c:	4824      	ldr	r0, [pc, #144]	; (800dab0 <netif_add+0x17c>)
 800da1e:	f00a fa0f 	bl	8017e40 <iprintf>
        num_netifs++;
 800da22:	693b      	ldr	r3, [r7, #16]
 800da24:	3301      	adds	r3, #1
 800da26:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800da28:	693b      	ldr	r3, [r7, #16]
 800da2a:	2bff      	cmp	r3, #255	; 0xff
 800da2c:	dd06      	ble.n	800da3c <netif_add+0x108>
 800da2e:	4b1e      	ldr	r3, [pc, #120]	; (800daa8 <netif_add+0x174>)
 800da30:	f240 128d 	movw	r2, #397	; 0x18d
 800da34:	4925      	ldr	r1, [pc, #148]	; (800dacc <netif_add+0x198>)
 800da36:	481e      	ldr	r0, [pc, #120]	; (800dab0 <netif_add+0x17c>)
 800da38:	f00a fa02 	bl	8017e40 <iprintf>
        if (netif2->num == netif->num) {
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800da48:	429a      	cmp	r2, r3
 800da4a:	d108      	bne.n	800da5e <netif_add+0x12a>
          netif->num++;
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800da52:	3301      	adds	r3, #1
 800da54:	b2da      	uxtb	r2, r3
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800da5c:	e005      	b.n	800da6a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800da5e:	697b      	ldr	r3, [r7, #20]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	617b      	str	r3, [r7, #20]
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d1d0      	bne.n	800da0c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d1be      	bne.n	800d9ee <netif_add+0xba>
  }
  if (netif->num == 254) {
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800da76:	2bfe      	cmp	r3, #254	; 0xfe
 800da78:	d103      	bne.n	800da82 <netif_add+0x14e>
    netif_num = 0;
 800da7a:	4b11      	ldr	r3, [pc, #68]	; (800dac0 <netif_add+0x18c>)
 800da7c:	2200      	movs	r2, #0
 800da7e:	701a      	strb	r2, [r3, #0]
 800da80:	e006      	b.n	800da90 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800da88:	3301      	adds	r3, #1
 800da8a:	b2da      	uxtb	r2, r3
 800da8c:	4b0c      	ldr	r3, [pc, #48]	; (800dac0 <netif_add+0x18c>)
 800da8e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800da90:	4b0c      	ldr	r3, [pc, #48]	; (800dac4 <netif_add+0x190>)
 800da92:	681a      	ldr	r2, [r3, #0]
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800da98:	4a0a      	ldr	r2, [pc, #40]	; (800dac4 <netif_add+0x190>)
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800da9e:	68fb      	ldr	r3, [r7, #12]
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	3718      	adds	r7, #24
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}
 800daa8:	0801ab50 	.word	0x0801ab50
 800daac:	0801abe4 	.word	0x0801abe4
 800dab0:	0801aba0 	.word	0x0801aba0
 800dab4:	0801ac00 	.word	0x0801ac00
 800dab8:	0801e8f0 	.word	0x0801e8f0
 800dabc:	0800dedf 	.word	0x0800dedf
 800dac0:	20005288 	.word	0x20005288
 800dac4:	20018b94 	.word	0x20018b94
 800dac8:	0801ac24 	.word	0x0801ac24
 800dacc:	0801ac38 	.word	0x0801ac38

0800dad0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b082      	sub	sp, #8
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800dada:	6839      	ldr	r1, [r7, #0]
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f002 fe23 	bl	8010728 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800dae2:	6839      	ldr	r1, [r7, #0]
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f007 fb8b 	bl	8015200 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800daea:	bf00      	nop
 800daec:	3708      	adds	r7, #8
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}
	...

0800daf4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b086      	sub	sp, #24
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	60f8      	str	r0, [r7, #12]
 800dafc:	60b9      	str	r1, [r7, #8]
 800dafe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800db00:	68bb      	ldr	r3, [r7, #8]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d106      	bne.n	800db14 <netif_do_set_ipaddr+0x20>
 800db06:	4b1d      	ldr	r3, [pc, #116]	; (800db7c <netif_do_set_ipaddr+0x88>)
 800db08:	f240 12cb 	movw	r2, #459	; 0x1cb
 800db0c:	491c      	ldr	r1, [pc, #112]	; (800db80 <netif_do_set_ipaddr+0x8c>)
 800db0e:	481d      	ldr	r0, [pc, #116]	; (800db84 <netif_do_set_ipaddr+0x90>)
 800db10:	f00a f996 	bl	8017e40 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d106      	bne.n	800db28 <netif_do_set_ipaddr+0x34>
 800db1a:	4b18      	ldr	r3, [pc, #96]	; (800db7c <netif_do_set_ipaddr+0x88>)
 800db1c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800db20:	4917      	ldr	r1, [pc, #92]	; (800db80 <netif_do_set_ipaddr+0x8c>)
 800db22:	4818      	ldr	r0, [pc, #96]	; (800db84 <netif_do_set_ipaddr+0x90>)
 800db24:	f00a f98c 	bl	8017e40 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	681a      	ldr	r2, [r3, #0]
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	3304      	adds	r3, #4
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	429a      	cmp	r2, r3
 800db34:	d01c      	beq.n	800db70 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	3304      	adds	r3, #4
 800db40:	681a      	ldr	r2, [r3, #0]
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800db46:	f107 0314 	add.w	r3, r7, #20
 800db4a:	4619      	mov	r1, r3
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f7ff ffbf 	bl	800dad0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d002      	beq.n	800db5e <netif_do_set_ipaddr+0x6a>
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	e000      	b.n	800db60 <netif_do_set_ipaddr+0x6c>
 800db5e:	2300      	movs	r3, #0
 800db60:	68fa      	ldr	r2, [r7, #12]
 800db62:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800db64:	2101      	movs	r1, #1
 800db66:	68f8      	ldr	r0, [r7, #12]
 800db68:	f000 f8d2 	bl	800dd10 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800db6c:	2301      	movs	r3, #1
 800db6e:	e000      	b.n	800db72 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800db70:	2300      	movs	r3, #0
}
 800db72:	4618      	mov	r0, r3
 800db74:	3718      	adds	r7, #24
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}
 800db7a:	bf00      	nop
 800db7c:	0801ab50 	.word	0x0801ab50
 800db80:	0801ac68 	.word	0x0801ac68
 800db84:	0801aba0 	.word	0x0801aba0

0800db88 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800db88:	b480      	push	{r7}
 800db8a:	b085      	sub	sp, #20
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	60f8      	str	r0, [r7, #12]
 800db90:	60b9      	str	r1, [r7, #8]
 800db92:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	681a      	ldr	r2, [r3, #0]
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	3308      	adds	r3, #8
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	429a      	cmp	r2, r3
 800dba0:	d00a      	beq.n	800dbb8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800dba2:	68bb      	ldr	r3, [r7, #8]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d002      	beq.n	800dbae <netif_do_set_netmask+0x26>
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	e000      	b.n	800dbb0 <netif_do_set_netmask+0x28>
 800dbae:	2300      	movs	r3, #0
 800dbb0:	68fa      	ldr	r2, [r7, #12]
 800dbb2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	e000      	b.n	800dbba <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800dbb8:	2300      	movs	r3, #0
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3714      	adds	r7, #20
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc4:	4770      	bx	lr

0800dbc6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800dbc6:	b480      	push	{r7}
 800dbc8:	b085      	sub	sp, #20
 800dbca:	af00      	add	r7, sp, #0
 800dbcc:	60f8      	str	r0, [r7, #12]
 800dbce:	60b9      	str	r1, [r7, #8]
 800dbd0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	681a      	ldr	r2, [r3, #0]
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	330c      	adds	r3, #12
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	d00a      	beq.n	800dbf6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d002      	beq.n	800dbec <netif_do_set_gw+0x26>
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	e000      	b.n	800dbee <netif_do_set_gw+0x28>
 800dbec:	2300      	movs	r3, #0
 800dbee:	68fa      	ldr	r2, [r7, #12]
 800dbf0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	e000      	b.n	800dbf8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800dbf6:	2300      	movs	r3, #0
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3714      	adds	r7, #20
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc02:	4770      	bx	lr

0800dc04 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b088      	sub	sp, #32
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	60f8      	str	r0, [r7, #12]
 800dc0c:	60b9      	str	r1, [r7, #8]
 800dc0e:	607a      	str	r2, [r7, #4]
 800dc10:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800dc12:	2300      	movs	r3, #0
 800dc14:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800dc16:	2300      	movs	r3, #0
 800dc18:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d101      	bne.n	800dc24 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800dc20:	4b1c      	ldr	r3, [pc, #112]	; (800dc94 <netif_set_addr+0x90>)
 800dc22:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d101      	bne.n	800dc2e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800dc2a:	4b1a      	ldr	r3, [pc, #104]	; (800dc94 <netif_set_addr+0x90>)
 800dc2c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d101      	bne.n	800dc38 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800dc34:	4b17      	ldr	r3, [pc, #92]	; (800dc94 <netif_set_addr+0x90>)
 800dc36:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d003      	beq.n	800dc46 <netif_set_addr+0x42>
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d101      	bne.n	800dc4a <netif_set_addr+0x46>
 800dc46:	2301      	movs	r3, #1
 800dc48:	e000      	b.n	800dc4c <netif_set_addr+0x48>
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d006      	beq.n	800dc62 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dc54:	f107 0310 	add.w	r3, r7, #16
 800dc58:	461a      	mov	r2, r3
 800dc5a:	68b9      	ldr	r1, [r7, #8]
 800dc5c:	68f8      	ldr	r0, [r7, #12]
 800dc5e:	f7ff ff49 	bl	800daf4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800dc62:	69fa      	ldr	r2, [r7, #28]
 800dc64:	6879      	ldr	r1, [r7, #4]
 800dc66:	68f8      	ldr	r0, [r7, #12]
 800dc68:	f7ff ff8e 	bl	800db88 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800dc6c:	69ba      	ldr	r2, [r7, #24]
 800dc6e:	6839      	ldr	r1, [r7, #0]
 800dc70:	68f8      	ldr	r0, [r7, #12]
 800dc72:	f7ff ffa8 	bl	800dbc6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d106      	bne.n	800dc8a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dc7c:	f107 0310 	add.w	r3, r7, #16
 800dc80:	461a      	mov	r2, r3
 800dc82:	68b9      	ldr	r1, [r7, #8]
 800dc84:	68f8      	ldr	r0, [r7, #12]
 800dc86:	f7ff ff35 	bl	800daf4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800dc8a:	bf00      	nop
 800dc8c:	3720      	adds	r7, #32
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}
 800dc92:	bf00      	nop
 800dc94:	0801e8f0 	.word	0x0801e8f0

0800dc98 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800dc98:	b480      	push	{r7}
 800dc9a:	b083      	sub	sp, #12
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800dca0:	4a04      	ldr	r2, [pc, #16]	; (800dcb4 <netif_set_default+0x1c>)
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800dca6:	bf00      	nop
 800dca8:	370c      	adds	r7, #12
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb0:	4770      	bx	lr
 800dcb2:	bf00      	nop
 800dcb4:	20018b98 	.word	0x20018b98

0800dcb8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b082      	sub	sp, #8
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d107      	bne.n	800dcd6 <netif_set_up+0x1e>
 800dcc6:	4b0f      	ldr	r3, [pc, #60]	; (800dd04 <netif_set_up+0x4c>)
 800dcc8:	f44f 7254 	mov.w	r2, #848	; 0x350
 800dccc:	490e      	ldr	r1, [pc, #56]	; (800dd08 <netif_set_up+0x50>)
 800dcce:	480f      	ldr	r0, [pc, #60]	; (800dd0c <netif_set_up+0x54>)
 800dcd0:	f00a f8b6 	bl	8017e40 <iprintf>
 800dcd4:	e013      	b.n	800dcfe <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dcdc:	f003 0301 	and.w	r3, r3, #1
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d10c      	bne.n	800dcfe <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dcea:	f043 0301 	orr.w	r3, r3, #1
 800dcee:	b2da      	uxtb	r2, r3
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800dcf6:	2103      	movs	r1, #3
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f000 f809 	bl	800dd10 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800dcfe:	3708      	adds	r7, #8
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}
 800dd04:	0801ab50 	.word	0x0801ab50
 800dd08:	0801acd8 	.word	0x0801acd8
 800dd0c:	0801aba0 	.word	0x0801aba0

0800dd10 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b082      	sub	sp, #8
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
 800dd18:	460b      	mov	r3, r1
 800dd1a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d106      	bne.n	800dd30 <netif_issue_reports+0x20>
 800dd22:	4b18      	ldr	r3, [pc, #96]	; (800dd84 <netif_issue_reports+0x74>)
 800dd24:	f240 326d 	movw	r2, #877	; 0x36d
 800dd28:	4917      	ldr	r1, [pc, #92]	; (800dd88 <netif_issue_reports+0x78>)
 800dd2a:	4818      	ldr	r0, [pc, #96]	; (800dd8c <netif_issue_reports+0x7c>)
 800dd2c:	f00a f888 	bl	8017e40 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd36:	f003 0304 	and.w	r3, r3, #4
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d01e      	beq.n	800dd7c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd44:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d017      	beq.n	800dd7c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800dd4c:	78fb      	ldrb	r3, [r7, #3]
 800dd4e:	f003 0301 	and.w	r3, r3, #1
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d013      	beq.n	800dd7e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	3304      	adds	r3, #4
 800dd5a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d00e      	beq.n	800dd7e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd66:	f003 0308 	and.w	r3, r3, #8
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d007      	beq.n	800dd7e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	3304      	adds	r3, #4
 800dd72:	4619      	mov	r1, r3
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f008 f9ad 	bl	80160d4 <etharp_request>
 800dd7a:	e000      	b.n	800dd7e <netif_issue_reports+0x6e>
    return;
 800dd7c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800dd7e:	3708      	adds	r7, #8
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}
 800dd84:	0801ab50 	.word	0x0801ab50
 800dd88:	0801acf4 	.word	0x0801acf4
 800dd8c:	0801aba0 	.word	0x0801aba0

0800dd90 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b082      	sub	sp, #8
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d107      	bne.n	800ddae <netif_set_down+0x1e>
 800dd9e:	4b12      	ldr	r3, [pc, #72]	; (800dde8 <netif_set_down+0x58>)
 800dda0:	f240 329b 	movw	r2, #923	; 0x39b
 800dda4:	4911      	ldr	r1, [pc, #68]	; (800ddec <netif_set_down+0x5c>)
 800dda6:	4812      	ldr	r0, [pc, #72]	; (800ddf0 <netif_set_down+0x60>)
 800dda8:	f00a f84a 	bl	8017e40 <iprintf>
 800ddac:	e019      	b.n	800dde2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ddb4:	f003 0301 	and.w	r3, r3, #1
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d012      	beq.n	800dde2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ddc2:	f023 0301 	bic.w	r3, r3, #1
 800ddc6:	b2da      	uxtb	r2, r3
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ddd4:	f003 0308 	and.w	r3, r3, #8
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d002      	beq.n	800dde2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800dddc:	6878      	ldr	r0, [r7, #4]
 800ddde:	f007 fd37 	bl	8015850 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800dde2:	3708      	adds	r7, #8
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}
 800dde8:	0801ab50 	.word	0x0801ab50
 800ddec:	0801ad18 	.word	0x0801ad18
 800ddf0:	0801aba0 	.word	0x0801aba0

0800ddf4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b082      	sub	sp, #8
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d107      	bne.n	800de12 <netif_set_link_up+0x1e>
 800de02:	4b13      	ldr	r3, [pc, #76]	; (800de50 <netif_set_link_up+0x5c>)
 800de04:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800de08:	4912      	ldr	r1, [pc, #72]	; (800de54 <netif_set_link_up+0x60>)
 800de0a:	4813      	ldr	r0, [pc, #76]	; (800de58 <netif_set_link_up+0x64>)
 800de0c:	f00a f818 	bl	8017e40 <iprintf>
 800de10:	e01b      	b.n	800de4a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de18:	f003 0304 	and.w	r3, r3, #4
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d114      	bne.n	800de4a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de26:	f043 0304 	orr.w	r3, r3, #4
 800de2a:	b2da      	uxtb	r2, r3
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800de32:	2103      	movs	r1, #3
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f7ff ff6b 	bl	800dd10 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	69db      	ldr	r3, [r3, #28]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d003      	beq.n	800de4a <netif_set_link_up+0x56>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	69db      	ldr	r3, [r3, #28]
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800de4a:	3708      	adds	r7, #8
 800de4c:	46bd      	mov	sp, r7
 800de4e:	bd80      	pop	{r7, pc}
 800de50:	0801ab50 	.word	0x0801ab50
 800de54:	0801ad38 	.word	0x0801ad38
 800de58:	0801aba0 	.word	0x0801aba0

0800de5c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b082      	sub	sp, #8
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d107      	bne.n	800de7a <netif_set_link_down+0x1e>
 800de6a:	4b11      	ldr	r3, [pc, #68]	; (800deb0 <netif_set_link_down+0x54>)
 800de6c:	f240 4206 	movw	r2, #1030	; 0x406
 800de70:	4910      	ldr	r1, [pc, #64]	; (800deb4 <netif_set_link_down+0x58>)
 800de72:	4811      	ldr	r0, [pc, #68]	; (800deb8 <netif_set_link_down+0x5c>)
 800de74:	f009 ffe4 	bl	8017e40 <iprintf>
 800de78:	e017      	b.n	800deaa <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de80:	f003 0304 	and.w	r3, r3, #4
 800de84:	2b00      	cmp	r3, #0
 800de86:	d010      	beq.n	800deaa <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800de8e:	f023 0304 	bic.w	r3, r3, #4
 800de92:	b2da      	uxtb	r2, r3
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	69db      	ldr	r3, [r3, #28]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d003      	beq.n	800deaa <netif_set_link_down+0x4e>
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	69db      	ldr	r3, [r3, #28]
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800deaa:	3708      	adds	r7, #8
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}
 800deb0:	0801ab50 	.word	0x0801ab50
 800deb4:	0801ad5c 	.word	0x0801ad5c
 800deb8:	0801aba0 	.word	0x0801aba0

0800debc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800debc:	b480      	push	{r7}
 800debe:	b083      	sub	sp, #12
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
 800dec4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d002      	beq.n	800ded2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	683a      	ldr	r2, [r7, #0]
 800ded0:	61da      	str	r2, [r3, #28]
  }
}
 800ded2:	bf00      	nop
 800ded4:	370c      	adds	r7, #12
 800ded6:	46bd      	mov	sp, r7
 800ded8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dedc:	4770      	bx	lr

0800dede <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800dede:	b480      	push	{r7}
 800dee0:	b085      	sub	sp, #20
 800dee2:	af00      	add	r7, sp, #0
 800dee4:	60f8      	str	r0, [r7, #12]
 800dee6:	60b9      	str	r1, [r7, #8]
 800dee8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800deea:	f06f 030b 	mvn.w	r3, #11
}
 800deee:	4618      	mov	r0, r3
 800def0:	3714      	adds	r7, #20
 800def2:	46bd      	mov	sp, r7
 800def4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def8:	4770      	bx	lr
	...

0800defc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800defc:	b480      	push	{r7}
 800defe:	b085      	sub	sp, #20
 800df00:	af00      	add	r7, sp, #0
 800df02:	4603      	mov	r3, r0
 800df04:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800df06:	79fb      	ldrb	r3, [r7, #7]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d013      	beq.n	800df34 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800df0c:	4b0d      	ldr	r3, [pc, #52]	; (800df44 <netif_get_by_index+0x48>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	60fb      	str	r3, [r7, #12]
 800df12:	e00c      	b.n	800df2e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800df1a:	3301      	adds	r3, #1
 800df1c:	b2db      	uxtb	r3, r3
 800df1e:	79fa      	ldrb	r2, [r7, #7]
 800df20:	429a      	cmp	r2, r3
 800df22:	d101      	bne.n	800df28 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	e006      	b.n	800df36 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	60fb      	str	r3, [r7, #12]
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d1ef      	bne.n	800df14 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800df34:	2300      	movs	r3, #0
}
 800df36:	4618      	mov	r0, r3
 800df38:	3714      	adds	r7, #20
 800df3a:	46bd      	mov	sp, r7
 800df3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df40:	4770      	bx	lr
 800df42:	bf00      	nop
 800df44:	20018b94 	.word	0x20018b94

0800df48 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b082      	sub	sp, #8
 800df4c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800df4e:	f009 fd3f 	bl	80179d0 <sys_arch_protect>
 800df52:	6038      	str	r0, [r7, #0]
 800df54:	4b0d      	ldr	r3, [pc, #52]	; (800df8c <pbuf_free_ooseq+0x44>)
 800df56:	2200      	movs	r2, #0
 800df58:	701a      	strb	r2, [r3, #0]
 800df5a:	6838      	ldr	r0, [r7, #0]
 800df5c:	f009 fd46 	bl	80179ec <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800df60:	4b0b      	ldr	r3, [pc, #44]	; (800df90 <pbuf_free_ooseq+0x48>)
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	607b      	str	r3, [r7, #4]
 800df66:	e00a      	b.n	800df7e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d003      	beq.n	800df78 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f002 fc17 	bl	80107a4 <tcp_free_ooseq>
      return;
 800df76:	e005      	b.n	800df84 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	68db      	ldr	r3, [r3, #12]
 800df7c:	607b      	str	r3, [r7, #4]
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d1f1      	bne.n	800df68 <pbuf_free_ooseq+0x20>
    }
  }
}
 800df84:	3708      	adds	r7, #8
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop
 800df8c:	20018b9c 	.word	0x20018b9c
 800df90:	20018ba4 	.word	0x20018ba4

0800df94 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b082      	sub	sp, #8
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800df9c:	f7ff ffd4 	bl	800df48 <pbuf_free_ooseq>
}
 800dfa0:	bf00      	nop
 800dfa2:	3708      	adds	r7, #8
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}

0800dfa8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b082      	sub	sp, #8
 800dfac:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800dfae:	f009 fd0f 	bl	80179d0 <sys_arch_protect>
 800dfb2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800dfb4:	4b0f      	ldr	r3, [pc, #60]	; (800dff4 <pbuf_pool_is_empty+0x4c>)
 800dfb6:	781b      	ldrb	r3, [r3, #0]
 800dfb8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800dfba:	4b0e      	ldr	r3, [pc, #56]	; (800dff4 <pbuf_pool_is_empty+0x4c>)
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f009 fd13 	bl	80179ec <sys_arch_unprotect>

  if (!queued) {
 800dfc6:	78fb      	ldrb	r3, [r7, #3]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d10f      	bne.n	800dfec <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800dfcc:	2100      	movs	r1, #0
 800dfce:	480a      	ldr	r0, [pc, #40]	; (800dff8 <pbuf_pool_is_empty+0x50>)
 800dfd0:	f7fc fe44 	bl	800ac5c <tcpip_try_callback>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d008      	beq.n	800dfec <pbuf_pool_is_empty+0x44>
 800dfda:	f009 fcf9 	bl	80179d0 <sys_arch_protect>
 800dfde:	6078      	str	r0, [r7, #4]
 800dfe0:	4b04      	ldr	r3, [pc, #16]	; (800dff4 <pbuf_pool_is_empty+0x4c>)
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	701a      	strb	r2, [r3, #0]
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f009 fd00 	bl	80179ec <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800dfec:	bf00      	nop
 800dfee:	3708      	adds	r7, #8
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}
 800dff4:	20018b9c 	.word	0x20018b9c
 800dff8:	0800df95 	.word	0x0800df95

0800dffc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800dffc:	b480      	push	{r7}
 800dffe:	b085      	sub	sp, #20
 800e000:	af00      	add	r7, sp, #0
 800e002:	60f8      	str	r0, [r7, #12]
 800e004:	60b9      	str	r1, [r7, #8]
 800e006:	4611      	mov	r1, r2
 800e008:	461a      	mov	r2, r3
 800e00a:	460b      	mov	r3, r1
 800e00c:	80fb      	strh	r3, [r7, #6]
 800e00e:	4613      	mov	r3, r2
 800e010:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2200      	movs	r2, #0
 800e016:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	68ba      	ldr	r2, [r7, #8]
 800e01c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	88fa      	ldrh	r2, [r7, #6]
 800e022:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	88ba      	ldrh	r2, [r7, #4]
 800e028:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e02a:	8b3b      	ldrh	r3, [r7, #24]
 800e02c:	b2da      	uxtb	r2, r3
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	7f3a      	ldrb	r2, [r7, #28]
 800e036:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	2201      	movs	r2, #1
 800e03c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	2200      	movs	r2, #0
 800e042:	73da      	strb	r2, [r3, #15]
}
 800e044:	bf00      	nop
 800e046:	3714      	adds	r7, #20
 800e048:	46bd      	mov	sp, r7
 800e04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04e:	4770      	bx	lr

0800e050 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b08c      	sub	sp, #48	; 0x30
 800e054:	af02      	add	r7, sp, #8
 800e056:	4603      	mov	r3, r0
 800e058:	71fb      	strb	r3, [r7, #7]
 800e05a:	460b      	mov	r3, r1
 800e05c:	80bb      	strh	r3, [r7, #4]
 800e05e:	4613      	mov	r3, r2
 800e060:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e062:	79fb      	ldrb	r3, [r7, #7]
 800e064:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e066:	887b      	ldrh	r3, [r7, #2]
 800e068:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e06c:	d07f      	beq.n	800e16e <pbuf_alloc+0x11e>
 800e06e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e072:	f300 80c8 	bgt.w	800e206 <pbuf_alloc+0x1b6>
 800e076:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e07a:	d010      	beq.n	800e09e <pbuf_alloc+0x4e>
 800e07c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e080:	f300 80c1 	bgt.w	800e206 <pbuf_alloc+0x1b6>
 800e084:	2b01      	cmp	r3, #1
 800e086:	d002      	beq.n	800e08e <pbuf_alloc+0x3e>
 800e088:	2b41      	cmp	r3, #65	; 0x41
 800e08a:	f040 80bc 	bne.w	800e206 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e08e:	887a      	ldrh	r2, [r7, #2]
 800e090:	88bb      	ldrh	r3, [r7, #4]
 800e092:	4619      	mov	r1, r3
 800e094:	2000      	movs	r0, #0
 800e096:	f000 f8d1 	bl	800e23c <pbuf_alloc_reference>
 800e09a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e09c:	e0bd      	b.n	800e21a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e0a6:	88bb      	ldrh	r3, [r7, #4]
 800e0a8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e0aa:	200c      	movs	r0, #12
 800e0ac:	f7ff fbbe 	bl	800d82c <memp_malloc>
 800e0b0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d109      	bne.n	800e0cc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800e0b8:	f7ff ff76 	bl	800dfa8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d002      	beq.n	800e0c8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800e0c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0c4:	f000 faa8 	bl	800e618 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	e0a7      	b.n	800e21c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e0cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e0ce:	3303      	adds	r3, #3
 800e0d0:	b29b      	uxth	r3, r3
 800e0d2:	f023 0303 	bic.w	r3, r3, #3
 800e0d6:	b29b      	uxth	r3, r3
 800e0d8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e0dc:	b29b      	uxth	r3, r3
 800e0de:	8b7a      	ldrh	r2, [r7, #26]
 800e0e0:	4293      	cmp	r3, r2
 800e0e2:	bf28      	it	cs
 800e0e4:	4613      	movcs	r3, r2
 800e0e6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e0e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e0ea:	3310      	adds	r3, #16
 800e0ec:	693a      	ldr	r2, [r7, #16]
 800e0ee:	4413      	add	r3, r2
 800e0f0:	3303      	adds	r3, #3
 800e0f2:	f023 0303 	bic.w	r3, r3, #3
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	89f9      	ldrh	r1, [r7, #14]
 800e0fa:	8b7a      	ldrh	r2, [r7, #26]
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	9301      	str	r3, [sp, #4]
 800e100:	887b      	ldrh	r3, [r7, #2]
 800e102:	9300      	str	r3, [sp, #0]
 800e104:	460b      	mov	r3, r1
 800e106:	4601      	mov	r1, r0
 800e108:	6938      	ldr	r0, [r7, #16]
 800e10a:	f7ff ff77 	bl	800dffc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	685b      	ldr	r3, [r3, #4]
 800e112:	f003 0303 	and.w	r3, r3, #3
 800e116:	2b00      	cmp	r3, #0
 800e118:	d006      	beq.n	800e128 <pbuf_alloc+0xd8>
 800e11a:	4b42      	ldr	r3, [pc, #264]	; (800e224 <pbuf_alloc+0x1d4>)
 800e11c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e120:	4941      	ldr	r1, [pc, #260]	; (800e228 <pbuf_alloc+0x1d8>)
 800e122:	4842      	ldr	r0, [pc, #264]	; (800e22c <pbuf_alloc+0x1dc>)
 800e124:	f009 fe8c 	bl	8017e40 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e128:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e12a:	3303      	adds	r3, #3
 800e12c:	f023 0303 	bic.w	r3, r3, #3
 800e130:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e134:	d106      	bne.n	800e144 <pbuf_alloc+0xf4>
 800e136:	4b3b      	ldr	r3, [pc, #236]	; (800e224 <pbuf_alloc+0x1d4>)
 800e138:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e13c:	493c      	ldr	r1, [pc, #240]	; (800e230 <pbuf_alloc+0x1e0>)
 800e13e:	483b      	ldr	r0, [pc, #236]	; (800e22c <pbuf_alloc+0x1dc>)
 800e140:	f009 fe7e 	bl	8017e40 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e146:	2b00      	cmp	r3, #0
 800e148:	d102      	bne.n	800e150 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	627b      	str	r3, [r7, #36]	; 0x24
 800e14e:	e002      	b.n	800e156 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e150:	69fb      	ldr	r3, [r7, #28]
 800e152:	693a      	ldr	r2, [r7, #16]
 800e154:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e15a:	8b7a      	ldrh	r2, [r7, #26]
 800e15c:	89fb      	ldrh	r3, [r7, #14]
 800e15e:	1ad3      	subs	r3, r2, r3
 800e160:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e162:	2300      	movs	r3, #0
 800e164:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e166:	8b7b      	ldrh	r3, [r7, #26]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d19e      	bne.n	800e0aa <pbuf_alloc+0x5a>
      break;
 800e16c:	e055      	b.n	800e21a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e16e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e170:	3303      	adds	r3, #3
 800e172:	b29b      	uxth	r3, r3
 800e174:	f023 0303 	bic.w	r3, r3, #3
 800e178:	b29a      	uxth	r2, r3
 800e17a:	88bb      	ldrh	r3, [r7, #4]
 800e17c:	3303      	adds	r3, #3
 800e17e:	b29b      	uxth	r3, r3
 800e180:	f023 0303 	bic.w	r3, r3, #3
 800e184:	b29b      	uxth	r3, r3
 800e186:	4413      	add	r3, r2
 800e188:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e18a:	8b3b      	ldrh	r3, [r7, #24]
 800e18c:	3310      	adds	r3, #16
 800e18e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e190:	8b3a      	ldrh	r2, [r7, #24]
 800e192:	88bb      	ldrh	r3, [r7, #4]
 800e194:	3303      	adds	r3, #3
 800e196:	f023 0303 	bic.w	r3, r3, #3
 800e19a:	429a      	cmp	r2, r3
 800e19c:	d306      	bcc.n	800e1ac <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e19e:	8afa      	ldrh	r2, [r7, #22]
 800e1a0:	88bb      	ldrh	r3, [r7, #4]
 800e1a2:	3303      	adds	r3, #3
 800e1a4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d201      	bcs.n	800e1b0 <pbuf_alloc+0x160>
        return NULL;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	e035      	b.n	800e21c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e1b0:	8afb      	ldrh	r3, [r7, #22]
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7ff f9b8 	bl	800d528 <mem_malloc>
 800e1b8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d101      	bne.n	800e1c4 <pbuf_alloc+0x174>
        return NULL;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	e02b      	b.n	800e21c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e1c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e1c6:	3310      	adds	r3, #16
 800e1c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1ca:	4413      	add	r3, r2
 800e1cc:	3303      	adds	r3, #3
 800e1ce:	f023 0303 	bic.w	r3, r3, #3
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	88b9      	ldrh	r1, [r7, #4]
 800e1d6:	88ba      	ldrh	r2, [r7, #4]
 800e1d8:	2300      	movs	r3, #0
 800e1da:	9301      	str	r3, [sp, #4]
 800e1dc:	887b      	ldrh	r3, [r7, #2]
 800e1de:	9300      	str	r3, [sp, #0]
 800e1e0:	460b      	mov	r3, r1
 800e1e2:	4601      	mov	r1, r0
 800e1e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1e6:	f7ff ff09 	bl	800dffc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ec:	685b      	ldr	r3, [r3, #4]
 800e1ee:	f003 0303 	and.w	r3, r3, #3
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d010      	beq.n	800e218 <pbuf_alloc+0x1c8>
 800e1f6:	4b0b      	ldr	r3, [pc, #44]	; (800e224 <pbuf_alloc+0x1d4>)
 800e1f8:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e1fc:	490d      	ldr	r1, [pc, #52]	; (800e234 <pbuf_alloc+0x1e4>)
 800e1fe:	480b      	ldr	r0, [pc, #44]	; (800e22c <pbuf_alloc+0x1dc>)
 800e200:	f009 fe1e 	bl	8017e40 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e204:	e008      	b.n	800e218 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e206:	4b07      	ldr	r3, [pc, #28]	; (800e224 <pbuf_alloc+0x1d4>)
 800e208:	f240 1227 	movw	r2, #295	; 0x127
 800e20c:	490a      	ldr	r1, [pc, #40]	; (800e238 <pbuf_alloc+0x1e8>)
 800e20e:	4807      	ldr	r0, [pc, #28]	; (800e22c <pbuf_alloc+0x1dc>)
 800e210:	f009 fe16 	bl	8017e40 <iprintf>
      return NULL;
 800e214:	2300      	movs	r3, #0
 800e216:	e001      	b.n	800e21c <pbuf_alloc+0x1cc>
      break;
 800e218:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3728      	adds	r7, #40	; 0x28
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}
 800e224:	0801ad80 	.word	0x0801ad80
 800e228:	0801adb0 	.word	0x0801adb0
 800e22c:	0801ade0 	.word	0x0801ade0
 800e230:	0801ae08 	.word	0x0801ae08
 800e234:	0801ae3c 	.word	0x0801ae3c
 800e238:	0801ae68 	.word	0x0801ae68

0800e23c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b086      	sub	sp, #24
 800e240:	af02      	add	r7, sp, #8
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	460b      	mov	r3, r1
 800e246:	807b      	strh	r3, [r7, #2]
 800e248:	4613      	mov	r3, r2
 800e24a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e24c:	883b      	ldrh	r3, [r7, #0]
 800e24e:	2b41      	cmp	r3, #65	; 0x41
 800e250:	d009      	beq.n	800e266 <pbuf_alloc_reference+0x2a>
 800e252:	883b      	ldrh	r3, [r7, #0]
 800e254:	2b01      	cmp	r3, #1
 800e256:	d006      	beq.n	800e266 <pbuf_alloc_reference+0x2a>
 800e258:	4b0f      	ldr	r3, [pc, #60]	; (800e298 <pbuf_alloc_reference+0x5c>)
 800e25a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e25e:	490f      	ldr	r1, [pc, #60]	; (800e29c <pbuf_alloc_reference+0x60>)
 800e260:	480f      	ldr	r0, [pc, #60]	; (800e2a0 <pbuf_alloc_reference+0x64>)
 800e262:	f009 fded 	bl	8017e40 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e266:	200b      	movs	r0, #11
 800e268:	f7ff fae0 	bl	800d82c <memp_malloc>
 800e26c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d101      	bne.n	800e278 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e274:	2300      	movs	r3, #0
 800e276:	e00b      	b.n	800e290 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e278:	8879      	ldrh	r1, [r7, #2]
 800e27a:	887a      	ldrh	r2, [r7, #2]
 800e27c:	2300      	movs	r3, #0
 800e27e:	9301      	str	r3, [sp, #4]
 800e280:	883b      	ldrh	r3, [r7, #0]
 800e282:	9300      	str	r3, [sp, #0]
 800e284:	460b      	mov	r3, r1
 800e286:	6879      	ldr	r1, [r7, #4]
 800e288:	68f8      	ldr	r0, [r7, #12]
 800e28a:	f7ff feb7 	bl	800dffc <pbuf_init_alloced_pbuf>
  return p;
 800e28e:	68fb      	ldr	r3, [r7, #12]
}
 800e290:	4618      	mov	r0, r3
 800e292:	3710      	adds	r7, #16
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}
 800e298:	0801ad80 	.word	0x0801ad80
 800e29c:	0801ae84 	.word	0x0801ae84
 800e2a0:	0801ade0 	.word	0x0801ade0

0800e2a4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b088      	sub	sp, #32
 800e2a8:	af02      	add	r7, sp, #8
 800e2aa:	607b      	str	r3, [r7, #4]
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	73fb      	strb	r3, [r7, #15]
 800e2b0:	460b      	mov	r3, r1
 800e2b2:	81bb      	strh	r3, [r7, #12]
 800e2b4:	4613      	mov	r3, r2
 800e2b6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e2b8:	7bfb      	ldrb	r3, [r7, #15]
 800e2ba:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e2bc:	8a7b      	ldrh	r3, [r7, #18]
 800e2be:	3303      	adds	r3, #3
 800e2c0:	f023 0203 	bic.w	r2, r3, #3
 800e2c4:	89bb      	ldrh	r3, [r7, #12]
 800e2c6:	441a      	add	r2, r3
 800e2c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d901      	bls.n	800e2d2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	e018      	b.n	800e304 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e2d2:	6a3b      	ldr	r3, [r7, #32]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d007      	beq.n	800e2e8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e2d8:	8a7b      	ldrh	r3, [r7, #18]
 800e2da:	3303      	adds	r3, #3
 800e2dc:	f023 0303 	bic.w	r3, r3, #3
 800e2e0:	6a3a      	ldr	r2, [r7, #32]
 800e2e2:	4413      	add	r3, r2
 800e2e4:	617b      	str	r3, [r7, #20]
 800e2e6:	e001      	b.n	800e2ec <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	89b9      	ldrh	r1, [r7, #12]
 800e2f0:	89ba      	ldrh	r2, [r7, #12]
 800e2f2:	2302      	movs	r3, #2
 800e2f4:	9301      	str	r3, [sp, #4]
 800e2f6:	897b      	ldrh	r3, [r7, #10]
 800e2f8:	9300      	str	r3, [sp, #0]
 800e2fa:	460b      	mov	r3, r1
 800e2fc:	6979      	ldr	r1, [r7, #20]
 800e2fe:	f7ff fe7d 	bl	800dffc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e302:	687b      	ldr	r3, [r7, #4]
}
 800e304:	4618      	mov	r0, r3
 800e306:	3718      	adds	r7, #24
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}

0800e30c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b084      	sub	sp, #16
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
 800e314:	460b      	mov	r3, r1
 800e316:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d106      	bne.n	800e32c <pbuf_realloc+0x20>
 800e31e:	4b3a      	ldr	r3, [pc, #232]	; (800e408 <pbuf_realloc+0xfc>)
 800e320:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e324:	4939      	ldr	r1, [pc, #228]	; (800e40c <pbuf_realloc+0x100>)
 800e326:	483a      	ldr	r0, [pc, #232]	; (800e410 <pbuf_realloc+0x104>)
 800e328:	f009 fd8a 	bl	8017e40 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	891b      	ldrh	r3, [r3, #8]
 800e330:	887a      	ldrh	r2, [r7, #2]
 800e332:	429a      	cmp	r2, r3
 800e334:	d263      	bcs.n	800e3fe <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	891a      	ldrh	r2, [r3, #8]
 800e33a:	887b      	ldrh	r3, [r7, #2]
 800e33c:	1ad3      	subs	r3, r2, r3
 800e33e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e340:	887b      	ldrh	r3, [r7, #2]
 800e342:	817b      	strh	r3, [r7, #10]
  q = p;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e348:	e018      	b.n	800e37c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	895b      	ldrh	r3, [r3, #10]
 800e34e:	897a      	ldrh	r2, [r7, #10]
 800e350:	1ad3      	subs	r3, r2, r3
 800e352:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	891a      	ldrh	r2, [r3, #8]
 800e358:	893b      	ldrh	r3, [r7, #8]
 800e35a:	1ad3      	subs	r3, r2, r3
 800e35c:	b29a      	uxth	r2, r3
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d106      	bne.n	800e37c <pbuf_realloc+0x70>
 800e36e:	4b26      	ldr	r3, [pc, #152]	; (800e408 <pbuf_realloc+0xfc>)
 800e370:	f240 12af 	movw	r2, #431	; 0x1af
 800e374:	4927      	ldr	r1, [pc, #156]	; (800e414 <pbuf_realloc+0x108>)
 800e376:	4826      	ldr	r0, [pc, #152]	; (800e410 <pbuf_realloc+0x104>)
 800e378:	f009 fd62 	bl	8017e40 <iprintf>
  while (rem_len > q->len) {
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	895b      	ldrh	r3, [r3, #10]
 800e380:	897a      	ldrh	r2, [r7, #10]
 800e382:	429a      	cmp	r2, r3
 800e384:	d8e1      	bhi.n	800e34a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	7b1b      	ldrb	r3, [r3, #12]
 800e38a:	f003 030f 	and.w	r3, r3, #15
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d121      	bne.n	800e3d6 <pbuf_realloc+0xca>
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	895b      	ldrh	r3, [r3, #10]
 800e396:	897a      	ldrh	r2, [r7, #10]
 800e398:	429a      	cmp	r2, r3
 800e39a:	d01c      	beq.n	800e3d6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	7b5b      	ldrb	r3, [r3, #13]
 800e3a0:	f003 0302 	and.w	r3, r3, #2
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d116      	bne.n	800e3d6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	685a      	ldr	r2, [r3, #4]
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	1ad3      	subs	r3, r2, r3
 800e3b0:	b29a      	uxth	r2, r3
 800e3b2:	897b      	ldrh	r3, [r7, #10]
 800e3b4:	4413      	add	r3, r2
 800e3b6:	b29b      	uxth	r3, r3
 800e3b8:	4619      	mov	r1, r3
 800e3ba:	68f8      	ldr	r0, [r7, #12]
 800e3bc:	f7fe ffaa 	bl	800d314 <mem_trim>
 800e3c0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d106      	bne.n	800e3d6 <pbuf_realloc+0xca>
 800e3c8:	4b0f      	ldr	r3, [pc, #60]	; (800e408 <pbuf_realloc+0xfc>)
 800e3ca:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e3ce:	4912      	ldr	r1, [pc, #72]	; (800e418 <pbuf_realloc+0x10c>)
 800e3d0:	480f      	ldr	r0, [pc, #60]	; (800e410 <pbuf_realloc+0x104>)
 800e3d2:	f009 fd35 	bl	8017e40 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	897a      	ldrh	r2, [r7, #10]
 800e3da:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	895a      	ldrh	r2, [r3, #10]
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d004      	beq.n	800e3f6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f000 f911 	bl	800e618 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	601a      	str	r2, [r3, #0]
 800e3fc:	e000      	b.n	800e400 <pbuf_realloc+0xf4>
    return;
 800e3fe:	bf00      	nop

}
 800e400:	3710      	adds	r7, #16
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}
 800e406:	bf00      	nop
 800e408:	0801ad80 	.word	0x0801ad80
 800e40c:	0801ae98 	.word	0x0801ae98
 800e410:	0801ade0 	.word	0x0801ade0
 800e414:	0801aeb0 	.word	0x0801aeb0
 800e418:	0801aec8 	.word	0x0801aec8

0800e41c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b086      	sub	sp, #24
 800e420:	af00      	add	r7, sp, #0
 800e422:	60f8      	str	r0, [r7, #12]
 800e424:	60b9      	str	r1, [r7, #8]
 800e426:	4613      	mov	r3, r2
 800e428:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d106      	bne.n	800e43e <pbuf_add_header_impl+0x22>
 800e430:	4b2b      	ldr	r3, [pc, #172]	; (800e4e0 <pbuf_add_header_impl+0xc4>)
 800e432:	f240 12df 	movw	r2, #479	; 0x1df
 800e436:	492b      	ldr	r1, [pc, #172]	; (800e4e4 <pbuf_add_header_impl+0xc8>)
 800e438:	482b      	ldr	r0, [pc, #172]	; (800e4e8 <pbuf_add_header_impl+0xcc>)
 800e43a:	f009 fd01 	bl	8017e40 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d003      	beq.n	800e44c <pbuf_add_header_impl+0x30>
 800e444:	68bb      	ldr	r3, [r7, #8]
 800e446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e44a:	d301      	bcc.n	800e450 <pbuf_add_header_impl+0x34>
    return 1;
 800e44c:	2301      	movs	r3, #1
 800e44e:	e043      	b.n	800e4d8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d101      	bne.n	800e45a <pbuf_add_header_impl+0x3e>
    return 0;
 800e456:	2300      	movs	r3, #0
 800e458:	e03e      	b.n	800e4d8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	891a      	ldrh	r2, [r3, #8]
 800e462:	8a7b      	ldrh	r3, [r7, #18]
 800e464:	4413      	add	r3, r2
 800e466:	b29b      	uxth	r3, r3
 800e468:	8a7a      	ldrh	r2, [r7, #18]
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d901      	bls.n	800e472 <pbuf_add_header_impl+0x56>
    return 1;
 800e46e:	2301      	movs	r3, #1
 800e470:	e032      	b.n	800e4d8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	7b1b      	ldrb	r3, [r3, #12]
 800e476:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e478:	8a3b      	ldrh	r3, [r7, #16]
 800e47a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d00c      	beq.n	800e49c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	685a      	ldr	r2, [r3, #4]
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	425b      	negs	r3, r3
 800e48a:	4413      	add	r3, r2
 800e48c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	3310      	adds	r3, #16
 800e492:	697a      	ldr	r2, [r7, #20]
 800e494:	429a      	cmp	r2, r3
 800e496:	d20d      	bcs.n	800e4b4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e498:	2301      	movs	r3, #1
 800e49a:	e01d      	b.n	800e4d8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e49c:	79fb      	ldrb	r3, [r7, #7]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d006      	beq.n	800e4b0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	685a      	ldr	r2, [r3, #4]
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	425b      	negs	r3, r3
 800e4aa:	4413      	add	r3, r2
 800e4ac:	617b      	str	r3, [r7, #20]
 800e4ae:	e001      	b.n	800e4b4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e4b0:	2301      	movs	r3, #1
 800e4b2:	e011      	b.n	800e4d8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	697a      	ldr	r2, [r7, #20]
 800e4b8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	895a      	ldrh	r2, [r3, #10]
 800e4be:	8a7b      	ldrh	r3, [r7, #18]
 800e4c0:	4413      	add	r3, r2
 800e4c2:	b29a      	uxth	r2, r3
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	891a      	ldrh	r2, [r3, #8]
 800e4cc:	8a7b      	ldrh	r3, [r7, #18]
 800e4ce:	4413      	add	r3, r2
 800e4d0:	b29a      	uxth	r2, r3
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	811a      	strh	r2, [r3, #8]


  return 0;
 800e4d6:	2300      	movs	r3, #0
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3718      	adds	r7, #24
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}
 800e4e0:	0801ad80 	.word	0x0801ad80
 800e4e4:	0801aee4 	.word	0x0801aee4
 800e4e8:	0801ade0 	.word	0x0801ade0

0800e4ec <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b082      	sub	sp, #8
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	6839      	ldr	r1, [r7, #0]
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f7ff ff8e 	bl	800e41c <pbuf_add_header_impl>
 800e500:	4603      	mov	r3, r0
}
 800e502:	4618      	mov	r0, r3
 800e504:	3708      	adds	r7, #8
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}
	...

0800e50c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b084      	sub	sp, #16
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
 800e514:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d106      	bne.n	800e52a <pbuf_remove_header+0x1e>
 800e51c:	4b20      	ldr	r3, [pc, #128]	; (800e5a0 <pbuf_remove_header+0x94>)
 800e51e:	f240 224b 	movw	r2, #587	; 0x24b
 800e522:	4920      	ldr	r1, [pc, #128]	; (800e5a4 <pbuf_remove_header+0x98>)
 800e524:	4820      	ldr	r0, [pc, #128]	; (800e5a8 <pbuf_remove_header+0x9c>)
 800e526:	f009 fc8b 	bl	8017e40 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d003      	beq.n	800e538 <pbuf_remove_header+0x2c>
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e536:	d301      	bcc.n	800e53c <pbuf_remove_header+0x30>
    return 1;
 800e538:	2301      	movs	r3, #1
 800e53a:	e02c      	b.n	800e596 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d101      	bne.n	800e546 <pbuf_remove_header+0x3a>
    return 0;
 800e542:	2300      	movs	r3, #0
 800e544:	e027      	b.n	800e596 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	895b      	ldrh	r3, [r3, #10]
 800e54e:	89fa      	ldrh	r2, [r7, #14]
 800e550:	429a      	cmp	r2, r3
 800e552:	d908      	bls.n	800e566 <pbuf_remove_header+0x5a>
 800e554:	4b12      	ldr	r3, [pc, #72]	; (800e5a0 <pbuf_remove_header+0x94>)
 800e556:	f240 2255 	movw	r2, #597	; 0x255
 800e55a:	4914      	ldr	r1, [pc, #80]	; (800e5ac <pbuf_remove_header+0xa0>)
 800e55c:	4812      	ldr	r0, [pc, #72]	; (800e5a8 <pbuf_remove_header+0x9c>)
 800e55e:	f009 fc6f 	bl	8017e40 <iprintf>
 800e562:	2301      	movs	r3, #1
 800e564:	e017      	b.n	800e596 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	685b      	ldr	r3, [r3, #4]
 800e56a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	685a      	ldr	r2, [r3, #4]
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	441a      	add	r2, r3
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	895a      	ldrh	r2, [r3, #10]
 800e57c:	89fb      	ldrh	r3, [r7, #14]
 800e57e:	1ad3      	subs	r3, r2, r3
 800e580:	b29a      	uxth	r2, r3
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	891a      	ldrh	r2, [r3, #8]
 800e58a:	89fb      	ldrh	r3, [r7, #14]
 800e58c:	1ad3      	subs	r3, r2, r3
 800e58e:	b29a      	uxth	r2, r3
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e594:	2300      	movs	r3, #0
}
 800e596:	4618      	mov	r0, r3
 800e598:	3710      	adds	r7, #16
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}
 800e59e:	bf00      	nop
 800e5a0:	0801ad80 	.word	0x0801ad80
 800e5a4:	0801aee4 	.word	0x0801aee4
 800e5a8:	0801ade0 	.word	0x0801ade0
 800e5ac:	0801aef0 	.word	0x0801aef0

0800e5b0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b082      	sub	sp, #8
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
 800e5b8:	460b      	mov	r3, r1
 800e5ba:	807b      	strh	r3, [r7, #2]
 800e5bc:	4613      	mov	r3, r2
 800e5be:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e5c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	da08      	bge.n	800e5da <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e5c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e5cc:	425b      	negs	r3, r3
 800e5ce:	4619      	mov	r1, r3
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	f7ff ff9b 	bl	800e50c <pbuf_remove_header>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	e007      	b.n	800e5ea <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e5da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e5de:	787a      	ldrb	r2, [r7, #1]
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f7ff ff1a 	bl	800e41c <pbuf_add_header_impl>
 800e5e8:	4603      	mov	r3, r0
  }
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3708      	adds	r7, #8
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}

0800e5f2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e5f2:	b580      	push	{r7, lr}
 800e5f4:	b082      	sub	sp, #8
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	6078      	str	r0, [r7, #4]
 800e5fa:	460b      	mov	r3, r1
 800e5fc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e5fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e602:	2201      	movs	r2, #1
 800e604:	4619      	mov	r1, r3
 800e606:	6878      	ldr	r0, [r7, #4]
 800e608:	f7ff ffd2 	bl	800e5b0 <pbuf_header_impl>
 800e60c:	4603      	mov	r3, r0
}
 800e60e:	4618      	mov	r0, r3
 800e610:	3708      	adds	r7, #8
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}
	...

0800e618 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b088      	sub	sp, #32
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d10b      	bne.n	800e63e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d106      	bne.n	800e63a <pbuf_free+0x22>
 800e62c:	4b3b      	ldr	r3, [pc, #236]	; (800e71c <pbuf_free+0x104>)
 800e62e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e632:	493b      	ldr	r1, [pc, #236]	; (800e720 <pbuf_free+0x108>)
 800e634:	483b      	ldr	r0, [pc, #236]	; (800e724 <pbuf_free+0x10c>)
 800e636:	f009 fc03 	bl	8017e40 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e63a:	2300      	movs	r3, #0
 800e63c:	e069      	b.n	800e712 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e63e:	2300      	movs	r3, #0
 800e640:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e642:	e062      	b.n	800e70a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e644:	f009 f9c4 	bl	80179d0 <sys_arch_protect>
 800e648:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	7b9b      	ldrb	r3, [r3, #14]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d106      	bne.n	800e660 <pbuf_free+0x48>
 800e652:	4b32      	ldr	r3, [pc, #200]	; (800e71c <pbuf_free+0x104>)
 800e654:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e658:	4933      	ldr	r1, [pc, #204]	; (800e728 <pbuf_free+0x110>)
 800e65a:	4832      	ldr	r0, [pc, #200]	; (800e724 <pbuf_free+0x10c>)
 800e65c:	f009 fbf0 	bl	8017e40 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	7b9b      	ldrb	r3, [r3, #14]
 800e664:	3b01      	subs	r3, #1
 800e666:	b2da      	uxtb	r2, r3
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	739a      	strb	r2, [r3, #14]
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	7b9b      	ldrb	r3, [r3, #14]
 800e670:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e672:	69b8      	ldr	r0, [r7, #24]
 800e674:	f009 f9ba 	bl	80179ec <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e678:	7dfb      	ldrb	r3, [r7, #23]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d143      	bne.n	800e706 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	7b1b      	ldrb	r3, [r3, #12]
 800e688:	f003 030f 	and.w	r3, r3, #15
 800e68c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	7b5b      	ldrb	r3, [r3, #13]
 800e692:	f003 0302 	and.w	r3, r3, #2
 800e696:	2b00      	cmp	r3, #0
 800e698:	d011      	beq.n	800e6be <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e69e:	68bb      	ldr	r3, [r7, #8]
 800e6a0:	691b      	ldr	r3, [r3, #16]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d106      	bne.n	800e6b4 <pbuf_free+0x9c>
 800e6a6:	4b1d      	ldr	r3, [pc, #116]	; (800e71c <pbuf_free+0x104>)
 800e6a8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e6ac:	491f      	ldr	r1, [pc, #124]	; (800e72c <pbuf_free+0x114>)
 800e6ae:	481d      	ldr	r0, [pc, #116]	; (800e724 <pbuf_free+0x10c>)
 800e6b0:	f009 fbc6 	bl	8017e40 <iprintf>
        pc->custom_free_function(p);
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	691b      	ldr	r3, [r3, #16]
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	4798      	blx	r3
 800e6bc:	e01d      	b.n	800e6fa <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e6be:	7bfb      	ldrb	r3, [r7, #15]
 800e6c0:	2b02      	cmp	r3, #2
 800e6c2:	d104      	bne.n	800e6ce <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e6c4:	6879      	ldr	r1, [r7, #4]
 800e6c6:	200c      	movs	r0, #12
 800e6c8:	f7ff f902 	bl	800d8d0 <memp_free>
 800e6cc:	e015      	b.n	800e6fa <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e6ce:	7bfb      	ldrb	r3, [r7, #15]
 800e6d0:	2b01      	cmp	r3, #1
 800e6d2:	d104      	bne.n	800e6de <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e6d4:	6879      	ldr	r1, [r7, #4]
 800e6d6:	200b      	movs	r0, #11
 800e6d8:	f7ff f8fa 	bl	800d8d0 <memp_free>
 800e6dc:	e00d      	b.n	800e6fa <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e6de:	7bfb      	ldrb	r3, [r7, #15]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d103      	bne.n	800e6ec <pbuf_free+0xd4>
          mem_free(p);
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f7fe fd85 	bl	800d1f4 <mem_free>
 800e6ea:	e006      	b.n	800e6fa <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e6ec:	4b0b      	ldr	r3, [pc, #44]	; (800e71c <pbuf_free+0x104>)
 800e6ee:	f240 320f 	movw	r2, #783	; 0x30f
 800e6f2:	490f      	ldr	r1, [pc, #60]	; (800e730 <pbuf_free+0x118>)
 800e6f4:	480b      	ldr	r0, [pc, #44]	; (800e724 <pbuf_free+0x10c>)
 800e6f6:	f009 fba3 	bl	8017e40 <iprintf>
        }
      }
      count++;
 800e6fa:	7ffb      	ldrb	r3, [r7, #31]
 800e6fc:	3301      	adds	r3, #1
 800e6fe:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e700:	693b      	ldr	r3, [r7, #16]
 800e702:	607b      	str	r3, [r7, #4]
 800e704:	e001      	b.n	800e70a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e706:	2300      	movs	r3, #0
 800e708:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d199      	bne.n	800e644 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e710:	7ffb      	ldrb	r3, [r7, #31]
}
 800e712:	4618      	mov	r0, r3
 800e714:	3720      	adds	r7, #32
 800e716:	46bd      	mov	sp, r7
 800e718:	bd80      	pop	{r7, pc}
 800e71a:	bf00      	nop
 800e71c:	0801ad80 	.word	0x0801ad80
 800e720:	0801aee4 	.word	0x0801aee4
 800e724:	0801ade0 	.word	0x0801ade0
 800e728:	0801af10 	.word	0x0801af10
 800e72c:	0801af28 	.word	0x0801af28
 800e730:	0801af4c 	.word	0x0801af4c

0800e734 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e734:	b480      	push	{r7}
 800e736:	b085      	sub	sp, #20
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e73c:	2300      	movs	r3, #0
 800e73e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e740:	e005      	b.n	800e74e <pbuf_clen+0x1a>
    ++len;
 800e742:	89fb      	ldrh	r3, [r7, #14]
 800e744:	3301      	adds	r3, #1
 800e746:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d1f6      	bne.n	800e742 <pbuf_clen+0xe>
  }
  return len;
 800e754:	89fb      	ldrh	r3, [r7, #14]
}
 800e756:	4618      	mov	r0, r3
 800e758:	3714      	adds	r7, #20
 800e75a:	46bd      	mov	sp, r7
 800e75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e760:	4770      	bx	lr
	...

0800e764 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b084      	sub	sp, #16
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d016      	beq.n	800e7a0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e772:	f009 f92d 	bl	80179d0 <sys_arch_protect>
 800e776:	60f8      	str	r0, [r7, #12]
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	7b9b      	ldrb	r3, [r3, #14]
 800e77c:	3301      	adds	r3, #1
 800e77e:	b2da      	uxtb	r2, r3
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	739a      	strb	r2, [r3, #14]
 800e784:	68f8      	ldr	r0, [r7, #12]
 800e786:	f009 f931 	bl	80179ec <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	7b9b      	ldrb	r3, [r3, #14]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d106      	bne.n	800e7a0 <pbuf_ref+0x3c>
 800e792:	4b05      	ldr	r3, [pc, #20]	; (800e7a8 <pbuf_ref+0x44>)
 800e794:	f240 3242 	movw	r2, #834	; 0x342
 800e798:	4904      	ldr	r1, [pc, #16]	; (800e7ac <pbuf_ref+0x48>)
 800e79a:	4805      	ldr	r0, [pc, #20]	; (800e7b0 <pbuf_ref+0x4c>)
 800e79c:	f009 fb50 	bl	8017e40 <iprintf>
  }
}
 800e7a0:	bf00      	nop
 800e7a2:	3710      	adds	r7, #16
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}
 800e7a8:	0801ad80 	.word	0x0801ad80
 800e7ac:	0801af60 	.word	0x0801af60
 800e7b0:	0801ade0 	.word	0x0801ade0

0800e7b4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b084      	sub	sp, #16
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
 800e7bc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d002      	beq.n	800e7ca <pbuf_cat+0x16>
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d107      	bne.n	800e7da <pbuf_cat+0x26>
 800e7ca:	4b20      	ldr	r3, [pc, #128]	; (800e84c <pbuf_cat+0x98>)
 800e7cc:	f240 3259 	movw	r2, #857	; 0x359
 800e7d0:	491f      	ldr	r1, [pc, #124]	; (800e850 <pbuf_cat+0x9c>)
 800e7d2:	4820      	ldr	r0, [pc, #128]	; (800e854 <pbuf_cat+0xa0>)
 800e7d4:	f009 fb34 	bl	8017e40 <iprintf>
 800e7d8:	e034      	b.n	800e844 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	60fb      	str	r3, [r7, #12]
 800e7de:	e00a      	b.n	800e7f6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	891a      	ldrh	r2, [r3, #8]
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	891b      	ldrh	r3, [r3, #8]
 800e7e8:	4413      	add	r3, r2
 800e7ea:	b29a      	uxth	r2, r3
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	60fb      	str	r3, [r7, #12]
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d1f0      	bne.n	800e7e0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	891a      	ldrh	r2, [r3, #8]
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	895b      	ldrh	r3, [r3, #10]
 800e806:	429a      	cmp	r2, r3
 800e808:	d006      	beq.n	800e818 <pbuf_cat+0x64>
 800e80a:	4b10      	ldr	r3, [pc, #64]	; (800e84c <pbuf_cat+0x98>)
 800e80c:	f240 3262 	movw	r2, #866	; 0x362
 800e810:	4911      	ldr	r1, [pc, #68]	; (800e858 <pbuf_cat+0xa4>)
 800e812:	4810      	ldr	r0, [pc, #64]	; (800e854 <pbuf_cat+0xa0>)
 800e814:	f009 fb14 	bl	8017e40 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d006      	beq.n	800e82e <pbuf_cat+0x7a>
 800e820:	4b0a      	ldr	r3, [pc, #40]	; (800e84c <pbuf_cat+0x98>)
 800e822:	f240 3263 	movw	r2, #867	; 0x363
 800e826:	490d      	ldr	r1, [pc, #52]	; (800e85c <pbuf_cat+0xa8>)
 800e828:	480a      	ldr	r0, [pc, #40]	; (800e854 <pbuf_cat+0xa0>)
 800e82a:	f009 fb09 	bl	8017e40 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	891a      	ldrh	r2, [r3, #8]
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	891b      	ldrh	r3, [r3, #8]
 800e836:	4413      	add	r3, r2
 800e838:	b29a      	uxth	r2, r3
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	683a      	ldr	r2, [r7, #0]
 800e842:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e844:	3710      	adds	r7, #16
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}
 800e84a:	bf00      	nop
 800e84c:	0801ad80 	.word	0x0801ad80
 800e850:	0801af74 	.word	0x0801af74
 800e854:	0801ade0 	.word	0x0801ade0
 800e858:	0801afac 	.word	0x0801afac
 800e85c:	0801afdc 	.word	0x0801afdc

0800e860 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b086      	sub	sp, #24
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
 800e868:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e86a:	2300      	movs	r3, #0
 800e86c:	617b      	str	r3, [r7, #20]
 800e86e:	2300      	movs	r3, #0
 800e870:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d008      	beq.n	800e88a <pbuf_copy+0x2a>
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d005      	beq.n	800e88a <pbuf_copy+0x2a>
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	891a      	ldrh	r2, [r3, #8]
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	891b      	ldrh	r3, [r3, #8]
 800e886:	429a      	cmp	r2, r3
 800e888:	d209      	bcs.n	800e89e <pbuf_copy+0x3e>
 800e88a:	4b57      	ldr	r3, [pc, #348]	; (800e9e8 <pbuf_copy+0x188>)
 800e88c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800e890:	4956      	ldr	r1, [pc, #344]	; (800e9ec <pbuf_copy+0x18c>)
 800e892:	4857      	ldr	r0, [pc, #348]	; (800e9f0 <pbuf_copy+0x190>)
 800e894:	f009 fad4 	bl	8017e40 <iprintf>
 800e898:	f06f 030f 	mvn.w	r3, #15
 800e89c:	e09f      	b.n	800e9de <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	895b      	ldrh	r3, [r3, #10]
 800e8a2:	461a      	mov	r2, r3
 800e8a4:	697b      	ldr	r3, [r7, #20]
 800e8a6:	1ad2      	subs	r2, r2, r3
 800e8a8:	683b      	ldr	r3, [r7, #0]
 800e8aa:	895b      	ldrh	r3, [r3, #10]
 800e8ac:	4619      	mov	r1, r3
 800e8ae:	693b      	ldr	r3, [r7, #16]
 800e8b0:	1acb      	subs	r3, r1, r3
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	d306      	bcc.n	800e8c4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	895b      	ldrh	r3, [r3, #10]
 800e8ba:	461a      	mov	r2, r3
 800e8bc:	693b      	ldr	r3, [r7, #16]
 800e8be:	1ad3      	subs	r3, r2, r3
 800e8c0:	60fb      	str	r3, [r7, #12]
 800e8c2:	e005      	b.n	800e8d0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	895b      	ldrh	r3, [r3, #10]
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	1ad3      	subs	r3, r2, r3
 800e8ce:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	685a      	ldr	r2, [r3, #4]
 800e8d4:	697b      	ldr	r3, [r7, #20]
 800e8d6:	18d0      	adds	r0, r2, r3
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	685a      	ldr	r2, [r3, #4]
 800e8dc:	693b      	ldr	r3, [r7, #16]
 800e8de:	4413      	add	r3, r2
 800e8e0:	68fa      	ldr	r2, [r7, #12]
 800e8e2:	4619      	mov	r1, r3
 800e8e4:	f009 f9d2 	bl	8017c8c <memcpy>
    offset_to += len;
 800e8e8:	697a      	ldr	r2, [r7, #20]
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	4413      	add	r3, r2
 800e8ee:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e8f0:	693a      	ldr	r2, [r7, #16]
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	4413      	add	r3, r2
 800e8f6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	895b      	ldrh	r3, [r3, #10]
 800e8fc:	461a      	mov	r2, r3
 800e8fe:	697b      	ldr	r3, [r7, #20]
 800e900:	4293      	cmp	r3, r2
 800e902:	d906      	bls.n	800e912 <pbuf_copy+0xb2>
 800e904:	4b38      	ldr	r3, [pc, #224]	; (800e9e8 <pbuf_copy+0x188>)
 800e906:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e90a:	493a      	ldr	r1, [pc, #232]	; (800e9f4 <pbuf_copy+0x194>)
 800e90c:	4838      	ldr	r0, [pc, #224]	; (800e9f0 <pbuf_copy+0x190>)
 800e90e:	f009 fa97 	bl	8017e40 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	895b      	ldrh	r3, [r3, #10]
 800e916:	461a      	mov	r2, r3
 800e918:	693b      	ldr	r3, [r7, #16]
 800e91a:	4293      	cmp	r3, r2
 800e91c:	d906      	bls.n	800e92c <pbuf_copy+0xcc>
 800e91e:	4b32      	ldr	r3, [pc, #200]	; (800e9e8 <pbuf_copy+0x188>)
 800e920:	f240 32da 	movw	r2, #986	; 0x3da
 800e924:	4934      	ldr	r1, [pc, #208]	; (800e9f8 <pbuf_copy+0x198>)
 800e926:	4832      	ldr	r0, [pc, #200]	; (800e9f0 <pbuf_copy+0x190>)
 800e928:	f009 fa8a 	bl	8017e40 <iprintf>
    if (offset_from >= p_from->len) {
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	895b      	ldrh	r3, [r3, #10]
 800e930:	461a      	mov	r2, r3
 800e932:	693b      	ldr	r3, [r7, #16]
 800e934:	4293      	cmp	r3, r2
 800e936:	d304      	bcc.n	800e942 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e938:	2300      	movs	r3, #0
 800e93a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	895b      	ldrh	r3, [r3, #10]
 800e946:	461a      	mov	r2, r3
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	4293      	cmp	r3, r2
 800e94c:	d114      	bne.n	800e978 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e94e:	2300      	movs	r3, #0
 800e950:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d10c      	bne.n	800e978 <pbuf_copy+0x118>
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d009      	beq.n	800e978 <pbuf_copy+0x118>
 800e964:	4b20      	ldr	r3, [pc, #128]	; (800e9e8 <pbuf_copy+0x188>)
 800e966:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e96a:	4924      	ldr	r1, [pc, #144]	; (800e9fc <pbuf_copy+0x19c>)
 800e96c:	4820      	ldr	r0, [pc, #128]	; (800e9f0 <pbuf_copy+0x190>)
 800e96e:	f009 fa67 	bl	8017e40 <iprintf>
 800e972:	f06f 030f 	mvn.w	r3, #15
 800e976:	e032      	b.n	800e9de <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d013      	beq.n	800e9a6 <pbuf_copy+0x146>
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	895a      	ldrh	r2, [r3, #10]
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	891b      	ldrh	r3, [r3, #8]
 800e986:	429a      	cmp	r2, r3
 800e988:	d10d      	bne.n	800e9a6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d009      	beq.n	800e9a6 <pbuf_copy+0x146>
 800e992:	4b15      	ldr	r3, [pc, #84]	; (800e9e8 <pbuf_copy+0x188>)
 800e994:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800e998:	4919      	ldr	r1, [pc, #100]	; (800ea00 <pbuf_copy+0x1a0>)
 800e99a:	4815      	ldr	r0, [pc, #84]	; (800e9f0 <pbuf_copy+0x190>)
 800e99c:	f009 fa50 	bl	8017e40 <iprintf>
 800e9a0:	f06f 0305 	mvn.w	r3, #5
 800e9a4:	e01b      	b.n	800e9de <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d013      	beq.n	800e9d4 <pbuf_copy+0x174>
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	895a      	ldrh	r2, [r3, #10]
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	891b      	ldrh	r3, [r3, #8]
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d10d      	bne.n	800e9d4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d009      	beq.n	800e9d4 <pbuf_copy+0x174>
 800e9c0:	4b09      	ldr	r3, [pc, #36]	; (800e9e8 <pbuf_copy+0x188>)
 800e9c2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e9c6:	490e      	ldr	r1, [pc, #56]	; (800ea00 <pbuf_copy+0x1a0>)
 800e9c8:	4809      	ldr	r0, [pc, #36]	; (800e9f0 <pbuf_copy+0x190>)
 800e9ca:	f009 fa39 	bl	8017e40 <iprintf>
 800e9ce:	f06f 0305 	mvn.w	r3, #5
 800e9d2:	e004      	b.n	800e9de <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	f47f af61 	bne.w	800e89e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e9dc:	2300      	movs	r3, #0
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3718      	adds	r7, #24
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}
 800e9e6:	bf00      	nop
 800e9e8:	0801ad80 	.word	0x0801ad80
 800e9ec:	0801b028 	.word	0x0801b028
 800e9f0:	0801ade0 	.word	0x0801ade0
 800e9f4:	0801b058 	.word	0x0801b058
 800e9f8:	0801b070 	.word	0x0801b070
 800e9fc:	0801b08c 	.word	0x0801b08c
 800ea00:	0801b09c 	.word	0x0801b09c

0800ea04 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b088      	sub	sp, #32
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	60f8      	str	r0, [r7, #12]
 800ea0c:	60b9      	str	r1, [r7, #8]
 800ea0e:	4611      	mov	r1, r2
 800ea10:	461a      	mov	r2, r3
 800ea12:	460b      	mov	r3, r1
 800ea14:	80fb      	strh	r3, [r7, #6]
 800ea16:	4613      	mov	r3, r2
 800ea18:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d108      	bne.n	800ea3a <pbuf_copy_partial+0x36>
 800ea28:	4b2b      	ldr	r3, [pc, #172]	; (800ead8 <pbuf_copy_partial+0xd4>)
 800ea2a:	f240 420a 	movw	r2, #1034	; 0x40a
 800ea2e:	492b      	ldr	r1, [pc, #172]	; (800eadc <pbuf_copy_partial+0xd8>)
 800ea30:	482b      	ldr	r0, [pc, #172]	; (800eae0 <pbuf_copy_partial+0xdc>)
 800ea32:	f009 fa05 	bl	8017e40 <iprintf>
 800ea36:	2300      	movs	r3, #0
 800ea38:	e04a      	b.n	800ead0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ea3a:	68bb      	ldr	r3, [r7, #8]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d108      	bne.n	800ea52 <pbuf_copy_partial+0x4e>
 800ea40:	4b25      	ldr	r3, [pc, #148]	; (800ead8 <pbuf_copy_partial+0xd4>)
 800ea42:	f240 420b 	movw	r2, #1035	; 0x40b
 800ea46:	4927      	ldr	r1, [pc, #156]	; (800eae4 <pbuf_copy_partial+0xe0>)
 800ea48:	4825      	ldr	r0, [pc, #148]	; (800eae0 <pbuf_copy_partial+0xdc>)
 800ea4a:	f009 f9f9 	bl	8017e40 <iprintf>
 800ea4e:	2300      	movs	r3, #0
 800ea50:	e03e      	b.n	800ead0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	61fb      	str	r3, [r7, #28]
 800ea56:	e034      	b.n	800eac2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ea58:	88bb      	ldrh	r3, [r7, #4]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d00a      	beq.n	800ea74 <pbuf_copy_partial+0x70>
 800ea5e:	69fb      	ldr	r3, [r7, #28]
 800ea60:	895b      	ldrh	r3, [r3, #10]
 800ea62:	88ba      	ldrh	r2, [r7, #4]
 800ea64:	429a      	cmp	r2, r3
 800ea66:	d305      	bcc.n	800ea74 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ea68:	69fb      	ldr	r3, [r7, #28]
 800ea6a:	895b      	ldrh	r3, [r3, #10]
 800ea6c:	88ba      	ldrh	r2, [r7, #4]
 800ea6e:	1ad3      	subs	r3, r2, r3
 800ea70:	80bb      	strh	r3, [r7, #4]
 800ea72:	e023      	b.n	800eabc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ea74:	69fb      	ldr	r3, [r7, #28]
 800ea76:	895a      	ldrh	r2, [r3, #10]
 800ea78:	88bb      	ldrh	r3, [r7, #4]
 800ea7a:	1ad3      	subs	r3, r2, r3
 800ea7c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ea7e:	8b3a      	ldrh	r2, [r7, #24]
 800ea80:	88fb      	ldrh	r3, [r7, #6]
 800ea82:	429a      	cmp	r2, r3
 800ea84:	d901      	bls.n	800ea8a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ea86:	88fb      	ldrh	r3, [r7, #6]
 800ea88:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ea8a:	8b7b      	ldrh	r3, [r7, #26]
 800ea8c:	68ba      	ldr	r2, [r7, #8]
 800ea8e:	18d0      	adds	r0, r2, r3
 800ea90:	69fb      	ldr	r3, [r7, #28]
 800ea92:	685a      	ldr	r2, [r3, #4]
 800ea94:	88bb      	ldrh	r3, [r7, #4]
 800ea96:	4413      	add	r3, r2
 800ea98:	8b3a      	ldrh	r2, [r7, #24]
 800ea9a:	4619      	mov	r1, r3
 800ea9c:	f009 f8f6 	bl	8017c8c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800eaa0:	8afa      	ldrh	r2, [r7, #22]
 800eaa2:	8b3b      	ldrh	r3, [r7, #24]
 800eaa4:	4413      	add	r3, r2
 800eaa6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800eaa8:	8b7a      	ldrh	r2, [r7, #26]
 800eaaa:	8b3b      	ldrh	r3, [r7, #24]
 800eaac:	4413      	add	r3, r2
 800eaae:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800eab0:	88fa      	ldrh	r2, [r7, #6]
 800eab2:	8b3b      	ldrh	r3, [r7, #24]
 800eab4:	1ad3      	subs	r3, r2, r3
 800eab6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800eab8:	2300      	movs	r3, #0
 800eaba:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800eabc:	69fb      	ldr	r3, [r7, #28]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	61fb      	str	r3, [r7, #28]
 800eac2:	88fb      	ldrh	r3, [r7, #6]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d002      	beq.n	800eace <pbuf_copy_partial+0xca>
 800eac8:	69fb      	ldr	r3, [r7, #28]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d1c4      	bne.n	800ea58 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800eace:	8afb      	ldrh	r3, [r7, #22]
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	3720      	adds	r7, #32
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}
 800ead8:	0801ad80 	.word	0x0801ad80
 800eadc:	0801b0c8 	.word	0x0801b0c8
 800eae0:	0801ade0 	.word	0x0801ade0
 800eae4:	0801b0e8 	.word	0x0801b0e8

0800eae8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b084      	sub	sp, #16
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	4603      	mov	r3, r0
 800eaf0:	603a      	str	r2, [r7, #0]
 800eaf2:	71fb      	strb	r3, [r7, #7]
 800eaf4:	460b      	mov	r3, r1
 800eaf6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800eaf8:	683b      	ldr	r3, [r7, #0]
 800eafa:	8919      	ldrh	r1, [r3, #8]
 800eafc:	88ba      	ldrh	r2, [r7, #4]
 800eafe:	79fb      	ldrb	r3, [r7, #7]
 800eb00:	4618      	mov	r0, r3
 800eb02:	f7ff faa5 	bl	800e050 <pbuf_alloc>
 800eb06:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d101      	bne.n	800eb12 <pbuf_clone+0x2a>
    return NULL;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	e011      	b.n	800eb36 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800eb12:	6839      	ldr	r1, [r7, #0]
 800eb14:	68f8      	ldr	r0, [r7, #12]
 800eb16:	f7ff fea3 	bl	800e860 <pbuf_copy>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800eb1e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d006      	beq.n	800eb34 <pbuf_clone+0x4c>
 800eb26:	4b06      	ldr	r3, [pc, #24]	; (800eb40 <pbuf_clone+0x58>)
 800eb28:	f240 5224 	movw	r2, #1316	; 0x524
 800eb2c:	4905      	ldr	r1, [pc, #20]	; (800eb44 <pbuf_clone+0x5c>)
 800eb2e:	4806      	ldr	r0, [pc, #24]	; (800eb48 <pbuf_clone+0x60>)
 800eb30:	f009 f986 	bl	8017e40 <iprintf>
  return q;
 800eb34:	68fb      	ldr	r3, [r7, #12]
}
 800eb36:	4618      	mov	r0, r3
 800eb38:	3710      	adds	r7, #16
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}
 800eb3e:	bf00      	nop
 800eb40:	0801ad80 	.word	0x0801ad80
 800eb44:	0801b1f4 	.word	0x0801b1f4
 800eb48:	0801ade0 	.word	0x0801ade0

0800eb4c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800eb50:	f009 fa04 	bl	8017f5c <rand>
 800eb54:	4603      	mov	r3, r0
 800eb56:	b29b      	uxth	r3, r3
 800eb58:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800eb5c:	b29b      	uxth	r3, r3
 800eb5e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800eb62:	b29a      	uxth	r2, r3
 800eb64:	4b01      	ldr	r3, [pc, #4]	; (800eb6c <tcp_init+0x20>)
 800eb66:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800eb68:	bf00      	nop
 800eb6a:	bd80      	pop	{r7, pc}
 800eb6c:	20000724 	.word	0x20000724

0800eb70 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b082      	sub	sp, #8
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	7d1b      	ldrb	r3, [r3, #20]
 800eb7c:	2b01      	cmp	r3, #1
 800eb7e:	d105      	bne.n	800eb8c <tcp_free+0x1c>
 800eb80:	4b06      	ldr	r3, [pc, #24]	; (800eb9c <tcp_free+0x2c>)
 800eb82:	22d4      	movs	r2, #212	; 0xd4
 800eb84:	4906      	ldr	r1, [pc, #24]	; (800eba0 <tcp_free+0x30>)
 800eb86:	4807      	ldr	r0, [pc, #28]	; (800eba4 <tcp_free+0x34>)
 800eb88:	f009 f95a 	bl	8017e40 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800eb8c:	6879      	ldr	r1, [r7, #4]
 800eb8e:	2001      	movs	r0, #1
 800eb90:	f7fe fe9e 	bl	800d8d0 <memp_free>
}
 800eb94:	bf00      	nop
 800eb96:	3708      	adds	r7, #8
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}
 800eb9c:	0801b280 	.word	0x0801b280
 800eba0:	0801b2b0 	.word	0x0801b2b0
 800eba4:	0801b2c4 	.word	0x0801b2c4

0800eba8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b082      	sub	sp, #8
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	7d1b      	ldrb	r3, [r3, #20]
 800ebb4:	2b01      	cmp	r3, #1
 800ebb6:	d105      	bne.n	800ebc4 <tcp_free_listen+0x1c>
 800ebb8:	4b06      	ldr	r3, [pc, #24]	; (800ebd4 <tcp_free_listen+0x2c>)
 800ebba:	22df      	movs	r2, #223	; 0xdf
 800ebbc:	4906      	ldr	r1, [pc, #24]	; (800ebd8 <tcp_free_listen+0x30>)
 800ebbe:	4807      	ldr	r0, [pc, #28]	; (800ebdc <tcp_free_listen+0x34>)
 800ebc0:	f009 f93e 	bl	8017e40 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ebc4:	6879      	ldr	r1, [r7, #4]
 800ebc6:	2002      	movs	r0, #2
 800ebc8:	f7fe fe82 	bl	800d8d0 <memp_free>
}
 800ebcc:	bf00      	nop
 800ebce:	3708      	adds	r7, #8
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}
 800ebd4:	0801b280 	.word	0x0801b280
 800ebd8:	0801b2ec 	.word	0x0801b2ec
 800ebdc:	0801b2c4 	.word	0x0801b2c4

0800ebe0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ebe4:	f001 f85c 	bl	800fca0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ebe8:	4b07      	ldr	r3, [pc, #28]	; (800ec08 <tcp_tmr+0x28>)
 800ebea:	781b      	ldrb	r3, [r3, #0]
 800ebec:	3301      	adds	r3, #1
 800ebee:	b2da      	uxtb	r2, r3
 800ebf0:	4b05      	ldr	r3, [pc, #20]	; (800ec08 <tcp_tmr+0x28>)
 800ebf2:	701a      	strb	r2, [r3, #0]
 800ebf4:	4b04      	ldr	r3, [pc, #16]	; (800ec08 <tcp_tmr+0x28>)
 800ebf6:	781b      	ldrb	r3, [r3, #0]
 800ebf8:	f003 0301 	and.w	r3, r3, #1
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d001      	beq.n	800ec04 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ec00:	f000 fd0e 	bl	800f620 <tcp_slowtmr>
  }
}
 800ec04:	bf00      	nop
 800ec06:	bd80      	pop	{r7, pc}
 800ec08:	20005289 	.word	0x20005289

0800ec0c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b084      	sub	sp, #16
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
 800ec14:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d105      	bne.n	800ec28 <tcp_remove_listener+0x1c>
 800ec1c:	4b0d      	ldr	r3, [pc, #52]	; (800ec54 <tcp_remove_listener+0x48>)
 800ec1e:	22ff      	movs	r2, #255	; 0xff
 800ec20:	490d      	ldr	r1, [pc, #52]	; (800ec58 <tcp_remove_listener+0x4c>)
 800ec22:	480e      	ldr	r0, [pc, #56]	; (800ec5c <tcp_remove_listener+0x50>)
 800ec24:	f009 f90c 	bl	8017e40 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	60fb      	str	r3, [r7, #12]
 800ec2c:	e00a      	b.n	800ec44 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec32:	683a      	ldr	r2, [r7, #0]
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d102      	bne.n	800ec3e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	68db      	ldr	r3, [r3, #12]
 800ec42:	60fb      	str	r3, [r7, #12]
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d1f1      	bne.n	800ec2e <tcp_remove_listener+0x22>
    }
  }
}
 800ec4a:	bf00      	nop
 800ec4c:	bf00      	nop
 800ec4e:	3710      	adds	r7, #16
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bd80      	pop	{r7, pc}
 800ec54:	0801b280 	.word	0x0801b280
 800ec58:	0801b308 	.word	0x0801b308
 800ec5c:	0801b2c4 	.word	0x0801b2c4

0800ec60 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b084      	sub	sp, #16
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d106      	bne.n	800ec7c <tcp_listen_closed+0x1c>
 800ec6e:	4b14      	ldr	r3, [pc, #80]	; (800ecc0 <tcp_listen_closed+0x60>)
 800ec70:	f240 1211 	movw	r2, #273	; 0x111
 800ec74:	4913      	ldr	r1, [pc, #76]	; (800ecc4 <tcp_listen_closed+0x64>)
 800ec76:	4814      	ldr	r0, [pc, #80]	; (800ecc8 <tcp_listen_closed+0x68>)
 800ec78:	f009 f8e2 	bl	8017e40 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	7d1b      	ldrb	r3, [r3, #20]
 800ec80:	2b01      	cmp	r3, #1
 800ec82:	d006      	beq.n	800ec92 <tcp_listen_closed+0x32>
 800ec84:	4b0e      	ldr	r3, [pc, #56]	; (800ecc0 <tcp_listen_closed+0x60>)
 800ec86:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ec8a:	4910      	ldr	r1, [pc, #64]	; (800eccc <tcp_listen_closed+0x6c>)
 800ec8c:	480e      	ldr	r0, [pc, #56]	; (800ecc8 <tcp_listen_closed+0x68>)
 800ec8e:	f009 f8d7 	bl	8017e40 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ec92:	2301      	movs	r3, #1
 800ec94:	60fb      	str	r3, [r7, #12]
 800ec96:	e00b      	b.n	800ecb0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ec98:	4a0d      	ldr	r2, [pc, #52]	; (800ecd0 <tcp_listen_closed+0x70>)
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	6879      	ldr	r1, [r7, #4]
 800eca4:	4618      	mov	r0, r3
 800eca6:	f7ff ffb1 	bl	800ec0c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	3301      	adds	r3, #1
 800ecae:	60fb      	str	r3, [r7, #12]
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	2b03      	cmp	r3, #3
 800ecb4:	d9f0      	bls.n	800ec98 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ecb6:	bf00      	nop
 800ecb8:	bf00      	nop
 800ecba:	3710      	adds	r7, #16
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	bd80      	pop	{r7, pc}
 800ecc0:	0801b280 	.word	0x0801b280
 800ecc4:	0801b330 	.word	0x0801b330
 800ecc8:	0801b2c4 	.word	0x0801b2c4
 800eccc:	0801b33c 	.word	0x0801b33c
 800ecd0:	0801e8c8 	.word	0x0801e8c8

0800ecd4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ecd4:	b5b0      	push	{r4, r5, r7, lr}
 800ecd6:	b088      	sub	sp, #32
 800ecd8:	af04      	add	r7, sp, #16
 800ecda:	6078      	str	r0, [r7, #4]
 800ecdc:	460b      	mov	r3, r1
 800ecde:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d106      	bne.n	800ecf4 <tcp_close_shutdown+0x20>
 800ece6:	4b63      	ldr	r3, [pc, #396]	; (800ee74 <tcp_close_shutdown+0x1a0>)
 800ece8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ecec:	4962      	ldr	r1, [pc, #392]	; (800ee78 <tcp_close_shutdown+0x1a4>)
 800ecee:	4863      	ldr	r0, [pc, #396]	; (800ee7c <tcp_close_shutdown+0x1a8>)
 800ecf0:	f009 f8a6 	bl	8017e40 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ecf4:	78fb      	ldrb	r3, [r7, #3]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d066      	beq.n	800edc8 <tcp_close_shutdown+0xf4>
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	7d1b      	ldrb	r3, [r3, #20]
 800ecfe:	2b04      	cmp	r3, #4
 800ed00:	d003      	beq.n	800ed0a <tcp_close_shutdown+0x36>
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	7d1b      	ldrb	r3, [r3, #20]
 800ed06:	2b07      	cmp	r3, #7
 800ed08:	d15e      	bne.n	800edc8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d104      	bne.n	800ed1c <tcp_close_shutdown+0x48>
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ed16:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ed1a:	d055      	beq.n	800edc8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	8b5b      	ldrh	r3, [r3, #26]
 800ed20:	f003 0310 	and.w	r3, r3, #16
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d106      	bne.n	800ed36 <tcp_close_shutdown+0x62>
 800ed28:	4b52      	ldr	r3, [pc, #328]	; (800ee74 <tcp_close_shutdown+0x1a0>)
 800ed2a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ed2e:	4954      	ldr	r1, [pc, #336]	; (800ee80 <tcp_close_shutdown+0x1ac>)
 800ed30:	4852      	ldr	r0, [pc, #328]	; (800ee7c <tcp_close_shutdown+0x1a8>)
 800ed32:	f009 f885 	bl	8017e40 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ed3e:	687d      	ldr	r5, [r7, #4]
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	3304      	adds	r3, #4
 800ed44:	687a      	ldr	r2, [r7, #4]
 800ed46:	8ad2      	ldrh	r2, [r2, #22]
 800ed48:	6879      	ldr	r1, [r7, #4]
 800ed4a:	8b09      	ldrh	r1, [r1, #24]
 800ed4c:	9102      	str	r1, [sp, #8]
 800ed4e:	9201      	str	r2, [sp, #4]
 800ed50:	9300      	str	r3, [sp, #0]
 800ed52:	462b      	mov	r3, r5
 800ed54:	4622      	mov	r2, r4
 800ed56:	4601      	mov	r1, r0
 800ed58:	6878      	ldr	r0, [r7, #4]
 800ed5a:	f005 fd8b 	bl	8014874 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f001 fb6c 	bl	801043c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ed64:	4b47      	ldr	r3, [pc, #284]	; (800ee84 <tcp_close_shutdown+0x1b0>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	687a      	ldr	r2, [r7, #4]
 800ed6a:	429a      	cmp	r2, r3
 800ed6c:	d105      	bne.n	800ed7a <tcp_close_shutdown+0xa6>
 800ed6e:	4b45      	ldr	r3, [pc, #276]	; (800ee84 <tcp_close_shutdown+0x1b0>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	68db      	ldr	r3, [r3, #12]
 800ed74:	4a43      	ldr	r2, [pc, #268]	; (800ee84 <tcp_close_shutdown+0x1b0>)
 800ed76:	6013      	str	r3, [r2, #0]
 800ed78:	e013      	b.n	800eda2 <tcp_close_shutdown+0xce>
 800ed7a:	4b42      	ldr	r3, [pc, #264]	; (800ee84 <tcp_close_shutdown+0x1b0>)
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	60fb      	str	r3, [r7, #12]
 800ed80:	e00c      	b.n	800ed9c <tcp_close_shutdown+0xc8>
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	68db      	ldr	r3, [r3, #12]
 800ed86:	687a      	ldr	r2, [r7, #4]
 800ed88:	429a      	cmp	r2, r3
 800ed8a:	d104      	bne.n	800ed96 <tcp_close_shutdown+0xc2>
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	68da      	ldr	r2, [r3, #12]
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	60da      	str	r2, [r3, #12]
 800ed94:	e005      	b.n	800eda2 <tcp_close_shutdown+0xce>
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	68db      	ldr	r3, [r3, #12]
 800ed9a:	60fb      	str	r3, [r7, #12]
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d1ef      	bne.n	800ed82 <tcp_close_shutdown+0xae>
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2200      	movs	r2, #0
 800eda6:	60da      	str	r2, [r3, #12]
 800eda8:	4b37      	ldr	r3, [pc, #220]	; (800ee88 <tcp_close_shutdown+0x1b4>)
 800edaa:	2201      	movs	r2, #1
 800edac:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800edae:	4b37      	ldr	r3, [pc, #220]	; (800ee8c <tcp_close_shutdown+0x1b8>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	687a      	ldr	r2, [r7, #4]
 800edb4:	429a      	cmp	r2, r3
 800edb6:	d102      	bne.n	800edbe <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800edb8:	f004 f800 	bl	8012dbc <tcp_trigger_input_pcb_close>
 800edbc:	e002      	b.n	800edc4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f7ff fed6 	bl	800eb70 <tcp_free>
      }
      return ERR_OK;
 800edc4:	2300      	movs	r3, #0
 800edc6:	e050      	b.n	800ee6a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	7d1b      	ldrb	r3, [r3, #20]
 800edcc:	2b02      	cmp	r3, #2
 800edce:	d03b      	beq.n	800ee48 <tcp_close_shutdown+0x174>
 800edd0:	2b02      	cmp	r3, #2
 800edd2:	dc44      	bgt.n	800ee5e <tcp_close_shutdown+0x18a>
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d002      	beq.n	800edde <tcp_close_shutdown+0x10a>
 800edd8:	2b01      	cmp	r3, #1
 800edda:	d02a      	beq.n	800ee32 <tcp_close_shutdown+0x15e>
 800eddc:	e03f      	b.n	800ee5e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	8adb      	ldrh	r3, [r3, #22]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d021      	beq.n	800ee2a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ede6:	4b2a      	ldr	r3, [pc, #168]	; (800ee90 <tcp_close_shutdown+0x1bc>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	687a      	ldr	r2, [r7, #4]
 800edec:	429a      	cmp	r2, r3
 800edee:	d105      	bne.n	800edfc <tcp_close_shutdown+0x128>
 800edf0:	4b27      	ldr	r3, [pc, #156]	; (800ee90 <tcp_close_shutdown+0x1bc>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	68db      	ldr	r3, [r3, #12]
 800edf6:	4a26      	ldr	r2, [pc, #152]	; (800ee90 <tcp_close_shutdown+0x1bc>)
 800edf8:	6013      	str	r3, [r2, #0]
 800edfa:	e013      	b.n	800ee24 <tcp_close_shutdown+0x150>
 800edfc:	4b24      	ldr	r3, [pc, #144]	; (800ee90 <tcp_close_shutdown+0x1bc>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	60bb      	str	r3, [r7, #8]
 800ee02:	e00c      	b.n	800ee1e <tcp_close_shutdown+0x14a>
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	68db      	ldr	r3, [r3, #12]
 800ee08:	687a      	ldr	r2, [r7, #4]
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d104      	bne.n	800ee18 <tcp_close_shutdown+0x144>
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	68da      	ldr	r2, [r3, #12]
 800ee12:	68bb      	ldr	r3, [r7, #8]
 800ee14:	60da      	str	r2, [r3, #12]
 800ee16:	e005      	b.n	800ee24 <tcp_close_shutdown+0x150>
 800ee18:	68bb      	ldr	r3, [r7, #8]
 800ee1a:	68db      	ldr	r3, [r3, #12]
 800ee1c:	60bb      	str	r3, [r7, #8]
 800ee1e:	68bb      	ldr	r3, [r7, #8]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d1ef      	bne.n	800ee04 <tcp_close_shutdown+0x130>
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	2200      	movs	r2, #0
 800ee28:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800ee2a:	6878      	ldr	r0, [r7, #4]
 800ee2c:	f7ff fea0 	bl	800eb70 <tcp_free>
      break;
 800ee30:	e01a      	b.n	800ee68 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	f7ff ff14 	bl	800ec60 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ee38:	6879      	ldr	r1, [r7, #4]
 800ee3a:	4816      	ldr	r0, [pc, #88]	; (800ee94 <tcp_close_shutdown+0x1c0>)
 800ee3c:	f001 fb4e 	bl	80104dc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800ee40:	6878      	ldr	r0, [r7, #4]
 800ee42:	f7ff feb1 	bl	800eba8 <tcp_free_listen>
      break;
 800ee46:	e00f      	b.n	800ee68 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ee48:	6879      	ldr	r1, [r7, #4]
 800ee4a:	480e      	ldr	r0, [pc, #56]	; (800ee84 <tcp_close_shutdown+0x1b0>)
 800ee4c:	f001 fb46 	bl	80104dc <tcp_pcb_remove>
 800ee50:	4b0d      	ldr	r3, [pc, #52]	; (800ee88 <tcp_close_shutdown+0x1b4>)
 800ee52:	2201      	movs	r2, #1
 800ee54:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	f7ff fe8a 	bl	800eb70 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800ee5c:	e004      	b.n	800ee68 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f000 f81a 	bl	800ee98 <tcp_close_shutdown_fin>
 800ee64:	4603      	mov	r3, r0
 800ee66:	e000      	b.n	800ee6a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800ee68:	2300      	movs	r3, #0
}
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	3710      	adds	r7, #16
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bdb0      	pop	{r4, r5, r7, pc}
 800ee72:	bf00      	nop
 800ee74:	0801b280 	.word	0x0801b280
 800ee78:	0801b354 	.word	0x0801b354
 800ee7c:	0801b2c4 	.word	0x0801b2c4
 800ee80:	0801b374 	.word	0x0801b374
 800ee84:	20018ba4 	.word	0x20018ba4
 800ee88:	20018ba0 	.word	0x20018ba0
 800ee8c:	20018bb8 	.word	0x20018bb8
 800ee90:	20018bb0 	.word	0x20018bb0
 800ee94:	20018bac 	.word	0x20018bac

0800ee98 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b084      	sub	sp, #16
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d106      	bne.n	800eeb4 <tcp_close_shutdown_fin+0x1c>
 800eea6:	4b2e      	ldr	r3, [pc, #184]	; (800ef60 <tcp_close_shutdown_fin+0xc8>)
 800eea8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800eeac:	492d      	ldr	r1, [pc, #180]	; (800ef64 <tcp_close_shutdown_fin+0xcc>)
 800eeae:	482e      	ldr	r0, [pc, #184]	; (800ef68 <tcp_close_shutdown_fin+0xd0>)
 800eeb0:	f008 ffc6 	bl	8017e40 <iprintf>

  switch (pcb->state) {
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	7d1b      	ldrb	r3, [r3, #20]
 800eeb8:	2b07      	cmp	r3, #7
 800eeba:	d020      	beq.n	800eefe <tcp_close_shutdown_fin+0x66>
 800eebc:	2b07      	cmp	r3, #7
 800eebe:	dc2b      	bgt.n	800ef18 <tcp_close_shutdown_fin+0x80>
 800eec0:	2b03      	cmp	r3, #3
 800eec2:	d002      	beq.n	800eeca <tcp_close_shutdown_fin+0x32>
 800eec4:	2b04      	cmp	r3, #4
 800eec6:	d00d      	beq.n	800eee4 <tcp_close_shutdown_fin+0x4c>
 800eec8:	e026      	b.n	800ef18 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800eeca:	6878      	ldr	r0, [r7, #4]
 800eecc:	f004 fde0 	bl	8013a90 <tcp_send_fin>
 800eed0:	4603      	mov	r3, r0
 800eed2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800eed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d11f      	bne.n	800ef1c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2205      	movs	r2, #5
 800eee0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800eee2:	e01b      	b.n	800ef1c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f004 fdd3 	bl	8013a90 <tcp_send_fin>
 800eeea:	4603      	mov	r3, r0
 800eeec:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800eeee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d114      	bne.n	800ef20 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	2205      	movs	r2, #5
 800eefa:	751a      	strb	r2, [r3, #20]
      }
      break;
 800eefc:	e010      	b.n	800ef20 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800eefe:	6878      	ldr	r0, [r7, #4]
 800ef00:	f004 fdc6 	bl	8013a90 <tcp_send_fin>
 800ef04:	4603      	mov	r3, r0
 800ef06:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ef08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d109      	bne.n	800ef24 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2209      	movs	r2, #9
 800ef14:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ef16:	e005      	b.n	800ef24 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ef18:	2300      	movs	r3, #0
 800ef1a:	e01c      	b.n	800ef56 <tcp_close_shutdown_fin+0xbe>
      break;
 800ef1c:	bf00      	nop
 800ef1e:	e002      	b.n	800ef26 <tcp_close_shutdown_fin+0x8e>
      break;
 800ef20:	bf00      	nop
 800ef22:	e000      	b.n	800ef26 <tcp_close_shutdown_fin+0x8e>
      break;
 800ef24:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ef26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d103      	bne.n	800ef36 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ef2e:	6878      	ldr	r0, [r7, #4]
 800ef30:	f004 feec 	bl	8013d0c <tcp_output>
 800ef34:	e00d      	b.n	800ef52 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ef36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ef3e:	d108      	bne.n	800ef52 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	8b5b      	ldrh	r3, [r3, #26]
 800ef44:	f043 0308 	orr.w	r3, r3, #8
 800ef48:	b29a      	uxth	r2, r3
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	e001      	b.n	800ef56 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ef52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	3710      	adds	r7, #16
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}
 800ef5e:	bf00      	nop
 800ef60:	0801b280 	.word	0x0801b280
 800ef64:	0801b330 	.word	0x0801b330
 800ef68:	0801b2c4 	.word	0x0801b2c4

0800ef6c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b082      	sub	sp, #8
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d109      	bne.n	800ef8e <tcp_close+0x22>
 800ef7a:	4b0f      	ldr	r3, [pc, #60]	; (800efb8 <tcp_close+0x4c>)
 800ef7c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800ef80:	490e      	ldr	r1, [pc, #56]	; (800efbc <tcp_close+0x50>)
 800ef82:	480f      	ldr	r0, [pc, #60]	; (800efc0 <tcp_close+0x54>)
 800ef84:	f008 ff5c 	bl	8017e40 <iprintf>
 800ef88:	f06f 030f 	mvn.w	r3, #15
 800ef8c:	e00f      	b.n	800efae <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	7d1b      	ldrb	r3, [r3, #20]
 800ef92:	2b01      	cmp	r3, #1
 800ef94:	d006      	beq.n	800efa4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	8b5b      	ldrh	r3, [r3, #26]
 800ef9a:	f043 0310 	orr.w	r3, r3, #16
 800ef9e:	b29a      	uxth	r2, r3
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800efa4:	2101      	movs	r1, #1
 800efa6:	6878      	ldr	r0, [r7, #4]
 800efa8:	f7ff fe94 	bl	800ecd4 <tcp_close_shutdown>
 800efac:	4603      	mov	r3, r0
}
 800efae:	4618      	mov	r0, r3
 800efb0:	3708      	adds	r7, #8
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}
 800efb6:	bf00      	nop
 800efb8:	0801b280 	.word	0x0801b280
 800efbc:	0801b390 	.word	0x0801b390
 800efc0:	0801b2c4 	.word	0x0801b2c4

0800efc4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b08e      	sub	sp, #56	; 0x38
 800efc8:	af04      	add	r7, sp, #16
 800efca:	6078      	str	r0, [r7, #4]
 800efcc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d107      	bne.n	800efe4 <tcp_abandon+0x20>
 800efd4:	4b52      	ldr	r3, [pc, #328]	; (800f120 <tcp_abandon+0x15c>)
 800efd6:	f240 223d 	movw	r2, #573	; 0x23d
 800efda:	4952      	ldr	r1, [pc, #328]	; (800f124 <tcp_abandon+0x160>)
 800efdc:	4852      	ldr	r0, [pc, #328]	; (800f128 <tcp_abandon+0x164>)
 800efde:	f008 ff2f 	bl	8017e40 <iprintf>
 800efe2:	e099      	b.n	800f118 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	7d1b      	ldrb	r3, [r3, #20]
 800efe8:	2b01      	cmp	r3, #1
 800efea:	d106      	bne.n	800effa <tcp_abandon+0x36>
 800efec:	4b4c      	ldr	r3, [pc, #304]	; (800f120 <tcp_abandon+0x15c>)
 800efee:	f44f 7210 	mov.w	r2, #576	; 0x240
 800eff2:	494e      	ldr	r1, [pc, #312]	; (800f12c <tcp_abandon+0x168>)
 800eff4:	484c      	ldr	r0, [pc, #304]	; (800f128 <tcp_abandon+0x164>)
 800eff6:	f008 ff23 	bl	8017e40 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	7d1b      	ldrb	r3, [r3, #20]
 800effe:	2b0a      	cmp	r3, #10
 800f000:	d107      	bne.n	800f012 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f002:	6879      	ldr	r1, [r7, #4]
 800f004:	484a      	ldr	r0, [pc, #296]	; (800f130 <tcp_abandon+0x16c>)
 800f006:	f001 fa69 	bl	80104dc <tcp_pcb_remove>
    tcp_free(pcb);
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f7ff fdb0 	bl	800eb70 <tcp_free>
 800f010:	e082      	b.n	800f118 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f012:	2300      	movs	r3, #0
 800f014:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f016:	2300      	movs	r3, #0
 800f018:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f01e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f024:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f02c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	691b      	ldr	r3, [r3, #16]
 800f032:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	7d1b      	ldrb	r3, [r3, #20]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d126      	bne.n	800f08a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	8adb      	ldrh	r3, [r3, #22]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d02e      	beq.n	800f0a2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f044:	4b3b      	ldr	r3, [pc, #236]	; (800f134 <tcp_abandon+0x170>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	687a      	ldr	r2, [r7, #4]
 800f04a:	429a      	cmp	r2, r3
 800f04c:	d105      	bne.n	800f05a <tcp_abandon+0x96>
 800f04e:	4b39      	ldr	r3, [pc, #228]	; (800f134 <tcp_abandon+0x170>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	68db      	ldr	r3, [r3, #12]
 800f054:	4a37      	ldr	r2, [pc, #220]	; (800f134 <tcp_abandon+0x170>)
 800f056:	6013      	str	r3, [r2, #0]
 800f058:	e013      	b.n	800f082 <tcp_abandon+0xbe>
 800f05a:	4b36      	ldr	r3, [pc, #216]	; (800f134 <tcp_abandon+0x170>)
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	61fb      	str	r3, [r7, #28]
 800f060:	e00c      	b.n	800f07c <tcp_abandon+0xb8>
 800f062:	69fb      	ldr	r3, [r7, #28]
 800f064:	68db      	ldr	r3, [r3, #12]
 800f066:	687a      	ldr	r2, [r7, #4]
 800f068:	429a      	cmp	r2, r3
 800f06a:	d104      	bne.n	800f076 <tcp_abandon+0xb2>
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	68da      	ldr	r2, [r3, #12]
 800f070:	69fb      	ldr	r3, [r7, #28]
 800f072:	60da      	str	r2, [r3, #12]
 800f074:	e005      	b.n	800f082 <tcp_abandon+0xbe>
 800f076:	69fb      	ldr	r3, [r7, #28]
 800f078:	68db      	ldr	r3, [r3, #12]
 800f07a:	61fb      	str	r3, [r7, #28]
 800f07c:	69fb      	ldr	r3, [r7, #28]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d1ef      	bne.n	800f062 <tcp_abandon+0x9e>
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2200      	movs	r2, #0
 800f086:	60da      	str	r2, [r3, #12]
 800f088:	e00b      	b.n	800f0a2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	8adb      	ldrh	r3, [r3, #22]
 800f092:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f094:	6879      	ldr	r1, [r7, #4]
 800f096:	4828      	ldr	r0, [pc, #160]	; (800f138 <tcp_abandon+0x174>)
 800f098:	f001 fa20 	bl	80104dc <tcp_pcb_remove>
 800f09c:	4b27      	ldr	r3, [pc, #156]	; (800f13c <tcp_abandon+0x178>)
 800f09e:	2201      	movs	r2, #1
 800f0a0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d004      	beq.n	800f0b4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f000 fed6 	bl	800fe60 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d004      	beq.n	800f0c6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f000 fecd 	bl	800fe60 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d004      	beq.n	800f0d8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f000 fec4 	bl	800fe60 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d00e      	beq.n	800f0fc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f0de:	6879      	ldr	r1, [r7, #4]
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	3304      	adds	r3, #4
 800f0e4:	687a      	ldr	r2, [r7, #4]
 800f0e6:	8b12      	ldrh	r2, [r2, #24]
 800f0e8:	9202      	str	r2, [sp, #8]
 800f0ea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f0ec:	9201      	str	r2, [sp, #4]
 800f0ee:	9300      	str	r3, [sp, #0]
 800f0f0:	460b      	mov	r3, r1
 800f0f2:	697a      	ldr	r2, [r7, #20]
 800f0f4:	69b9      	ldr	r1, [r7, #24]
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f005 fbbc 	bl	8014874 <tcp_rst>
    }
    last_state = pcb->state;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	7d1b      	ldrb	r3, [r3, #20]
 800f100:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f102:	6878      	ldr	r0, [r7, #4]
 800f104:	f7ff fd34 	bl	800eb70 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f108:	693b      	ldr	r3, [r7, #16]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d004      	beq.n	800f118 <tcp_abandon+0x154>
 800f10e:	693b      	ldr	r3, [r7, #16]
 800f110:	f06f 010c 	mvn.w	r1, #12
 800f114:	68f8      	ldr	r0, [r7, #12]
 800f116:	4798      	blx	r3
  }
}
 800f118:	3728      	adds	r7, #40	; 0x28
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}
 800f11e:	bf00      	nop
 800f120:	0801b280 	.word	0x0801b280
 800f124:	0801b3c4 	.word	0x0801b3c4
 800f128:	0801b2c4 	.word	0x0801b2c4
 800f12c:	0801b3e0 	.word	0x0801b3e0
 800f130:	20018bb4 	.word	0x20018bb4
 800f134:	20018bb0 	.word	0x20018bb0
 800f138:	20018ba4 	.word	0x20018ba4
 800f13c:	20018ba0 	.word	0x20018ba0

0800f140 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b082      	sub	sp, #8
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f148:	2101      	movs	r1, #1
 800f14a:	6878      	ldr	r0, [r7, #4]
 800f14c:	f7ff ff3a 	bl	800efc4 <tcp_abandon>
}
 800f150:	bf00      	nop
 800f152:	3708      	adds	r7, #8
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}

0800f158 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b088      	sub	sp, #32
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	60f8      	str	r0, [r7, #12]
 800f160:	60b9      	str	r1, [r7, #8]
 800f162:	4613      	mov	r3, r2
 800f164:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800f166:	2304      	movs	r3, #4
 800f168:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d101      	bne.n	800f174 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800f170:	4b3e      	ldr	r3, [pc, #248]	; (800f26c <tcp_bind+0x114>)
 800f172:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d109      	bne.n	800f18e <tcp_bind+0x36>
 800f17a:	4b3d      	ldr	r3, [pc, #244]	; (800f270 <tcp_bind+0x118>)
 800f17c:	f240 22a9 	movw	r2, #681	; 0x2a9
 800f180:	493c      	ldr	r1, [pc, #240]	; (800f274 <tcp_bind+0x11c>)
 800f182:	483d      	ldr	r0, [pc, #244]	; (800f278 <tcp_bind+0x120>)
 800f184:	f008 fe5c 	bl	8017e40 <iprintf>
 800f188:	f06f 030f 	mvn.w	r3, #15
 800f18c:	e06a      	b.n	800f264 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	7d1b      	ldrb	r3, [r3, #20]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d009      	beq.n	800f1aa <tcp_bind+0x52>
 800f196:	4b36      	ldr	r3, [pc, #216]	; (800f270 <tcp_bind+0x118>)
 800f198:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f19c:	4937      	ldr	r1, [pc, #220]	; (800f27c <tcp_bind+0x124>)
 800f19e:	4836      	ldr	r0, [pc, #216]	; (800f278 <tcp_bind+0x120>)
 800f1a0:	f008 fe4e 	bl	8017e40 <iprintf>
 800f1a4:	f06f 0305 	mvn.w	r3, #5
 800f1a8:	e05c      	b.n	800f264 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800f1aa:	88fb      	ldrh	r3, [r7, #6]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d109      	bne.n	800f1c4 <tcp_bind+0x6c>
    port = tcp_new_port();
 800f1b0:	f000 f9f0 	bl	800f594 <tcp_new_port>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f1b8:	88fb      	ldrh	r3, [r7, #6]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d135      	bne.n	800f22a <tcp_bind+0xd2>
      return ERR_BUF;
 800f1be:	f06f 0301 	mvn.w	r3, #1
 800f1c2:	e04f      	b.n	800f264 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	61fb      	str	r3, [r7, #28]
 800f1c8:	e02b      	b.n	800f222 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f1ca:	4a2d      	ldr	r2, [pc, #180]	; (800f280 <tcp_bind+0x128>)
 800f1cc:	69fb      	ldr	r3, [r7, #28]
 800f1ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	61bb      	str	r3, [r7, #24]
 800f1d6:	e01e      	b.n	800f216 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800f1d8:	69bb      	ldr	r3, [r7, #24]
 800f1da:	8adb      	ldrh	r3, [r3, #22]
 800f1dc:	88fa      	ldrh	r2, [r7, #6]
 800f1de:	429a      	cmp	r2, r3
 800f1e0:	d116      	bne.n	800f210 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800f1e2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d010      	beq.n	800f20a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800f1e8:	69bb      	ldr	r3, [r7, #24]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d00c      	beq.n	800f20a <tcp_bind+0xb2>
 800f1f0:	68bb      	ldr	r3, [r7, #8]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d009      	beq.n	800f20a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800f1f6:	68bb      	ldr	r3, [r7, #8]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d005      	beq.n	800f20a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800f1fe:	69bb      	ldr	r3, [r7, #24]
 800f200:	681a      	ldr	r2, [r3, #0]
 800f202:	68bb      	ldr	r3, [r7, #8]
 800f204:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f206:	429a      	cmp	r2, r3
 800f208:	d102      	bne.n	800f210 <tcp_bind+0xb8>
              return ERR_USE;
 800f20a:	f06f 0307 	mvn.w	r3, #7
 800f20e:	e029      	b.n	800f264 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f210:	69bb      	ldr	r3, [r7, #24]
 800f212:	68db      	ldr	r3, [r3, #12]
 800f214:	61bb      	str	r3, [r7, #24]
 800f216:	69bb      	ldr	r3, [r7, #24]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d1dd      	bne.n	800f1d8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800f21c:	69fb      	ldr	r3, [r7, #28]
 800f21e:	3301      	adds	r3, #1
 800f220:	61fb      	str	r3, [r7, #28]
 800f222:	69fa      	ldr	r2, [r7, #28]
 800f224:	697b      	ldr	r3, [r7, #20]
 800f226:	429a      	cmp	r2, r3
 800f228:	dbcf      	blt.n	800f1ca <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d00c      	beq.n	800f24a <tcp_bind+0xf2>
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d008      	beq.n	800f24a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d002      	beq.n	800f244 <tcp_bind+0xec>
 800f23e:	68bb      	ldr	r3, [r7, #8]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	e000      	b.n	800f246 <tcp_bind+0xee>
 800f244:	2300      	movs	r3, #0
 800f246:	68fa      	ldr	r2, [r7, #12]
 800f248:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	88fa      	ldrh	r2, [r7, #6]
 800f24e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800f250:	4b0c      	ldr	r3, [pc, #48]	; (800f284 <tcp_bind+0x12c>)
 800f252:	681a      	ldr	r2, [r3, #0]
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	60da      	str	r2, [r3, #12]
 800f258:	4a0a      	ldr	r2, [pc, #40]	; (800f284 <tcp_bind+0x12c>)
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	6013      	str	r3, [r2, #0]
 800f25e:	f005 fccb 	bl	8014bf8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800f262:	2300      	movs	r3, #0
}
 800f264:	4618      	mov	r0, r3
 800f266:	3720      	adds	r7, #32
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}
 800f26c:	0801e8f0 	.word	0x0801e8f0
 800f270:	0801b280 	.word	0x0801b280
 800f274:	0801b414 	.word	0x0801b414
 800f278:	0801b2c4 	.word	0x0801b2c4
 800f27c:	0801b42c 	.word	0x0801b42c
 800f280:	0801e8c8 	.word	0x0801e8c8
 800f284:	20018bb0 	.word	0x20018bb0

0800f288 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b084      	sub	sp, #16
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	60f8      	str	r0, [r7, #12]
 800f290:	60b9      	str	r1, [r7, #8]
 800f292:	4613      	mov	r3, r2
 800f294:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d106      	bne.n	800f2aa <tcp_accept_null+0x22>
 800f29c:	4b07      	ldr	r3, [pc, #28]	; (800f2bc <tcp_accept_null+0x34>)
 800f29e:	f240 320f 	movw	r2, #783	; 0x30f
 800f2a2:	4907      	ldr	r1, [pc, #28]	; (800f2c0 <tcp_accept_null+0x38>)
 800f2a4:	4807      	ldr	r0, [pc, #28]	; (800f2c4 <tcp_accept_null+0x3c>)
 800f2a6:	f008 fdcb 	bl	8017e40 <iprintf>

  tcp_abort(pcb);
 800f2aa:	68b8      	ldr	r0, [r7, #8]
 800f2ac:	f7ff ff48 	bl	800f140 <tcp_abort>

  return ERR_ABRT;
 800f2b0:	f06f 030c 	mvn.w	r3, #12
}
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	3710      	adds	r7, #16
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}
 800f2bc:	0801b280 	.word	0x0801b280
 800f2c0:	0801b454 	.word	0x0801b454
 800f2c4:	0801b2c4 	.word	0x0801b2c4

0800f2c8 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b082      	sub	sp, #8
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
 800f2d0:	460b      	mov	r3, r1
 800f2d2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800f2d4:	78fb      	ldrb	r3, [r7, #3]
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	4619      	mov	r1, r3
 800f2da:	6878      	ldr	r0, [r7, #4]
 800f2dc:	f000 f806 	bl	800f2ec <tcp_listen_with_backlog_and_err>
 800f2e0:	4603      	mov	r3, r0
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	3708      	adds	r7, #8
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}
	...

0800f2ec <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b088      	sub	sp, #32
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	60f8      	str	r0, [r7, #12]
 800f2f4:	460b      	mov	r3, r1
 800f2f6:	607a      	str	r2, [r7, #4]
 800f2f8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d109      	bne.n	800f318 <tcp_listen_with_backlog_and_err+0x2c>
 800f304:	4b47      	ldr	r3, [pc, #284]	; (800f424 <tcp_listen_with_backlog_and_err+0x138>)
 800f306:	f240 3259 	movw	r2, #857	; 0x359
 800f30a:	4947      	ldr	r1, [pc, #284]	; (800f428 <tcp_listen_with_backlog_and_err+0x13c>)
 800f30c:	4847      	ldr	r0, [pc, #284]	; (800f42c <tcp_listen_with_backlog_and_err+0x140>)
 800f30e:	f008 fd97 	bl	8017e40 <iprintf>
 800f312:	23f0      	movs	r3, #240	; 0xf0
 800f314:	76fb      	strb	r3, [r7, #27]
 800f316:	e079      	b.n	800f40c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	7d1b      	ldrb	r3, [r3, #20]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d009      	beq.n	800f334 <tcp_listen_with_backlog_and_err+0x48>
 800f320:	4b40      	ldr	r3, [pc, #256]	; (800f424 <tcp_listen_with_backlog_and_err+0x138>)
 800f322:	f240 325a 	movw	r2, #858	; 0x35a
 800f326:	4942      	ldr	r1, [pc, #264]	; (800f430 <tcp_listen_with_backlog_and_err+0x144>)
 800f328:	4840      	ldr	r0, [pc, #256]	; (800f42c <tcp_listen_with_backlog_and_err+0x140>)
 800f32a:	f008 fd89 	bl	8017e40 <iprintf>
 800f32e:	23f1      	movs	r3, #241	; 0xf1
 800f330:	76fb      	strb	r3, [r7, #27]
 800f332:	e06b      	b.n	800f40c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	7d1b      	ldrb	r3, [r3, #20]
 800f338:	2b01      	cmp	r3, #1
 800f33a:	d104      	bne.n	800f346 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800f340:	23f7      	movs	r3, #247	; 0xf7
 800f342:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f344:	e062      	b.n	800f40c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800f346:	2002      	movs	r0, #2
 800f348:	f7fe fa70 	bl	800d82c <memp_malloc>
 800f34c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800f34e:	69fb      	ldr	r3, [r7, #28]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d102      	bne.n	800f35a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800f354:	23ff      	movs	r3, #255	; 0xff
 800f356:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f358:	e058      	b.n	800f40c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	691a      	ldr	r2, [r3, #16]
 800f35e:	69fb      	ldr	r3, [r7, #28]
 800f360:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	8ada      	ldrh	r2, [r3, #22]
 800f366:	69fb      	ldr	r3, [r7, #28]
 800f368:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800f36a:	69fb      	ldr	r3, [r7, #28]
 800f36c:	2201      	movs	r2, #1
 800f36e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	7d5a      	ldrb	r2, [r3, #21]
 800f374:	69fb      	ldr	r3, [r7, #28]
 800f376:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	7a5a      	ldrb	r2, [r3, #9]
 800f37c:	69fb      	ldr	r3, [r7, #28]
 800f37e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800f380:	69fb      	ldr	r3, [r7, #28]
 800f382:	2200      	movs	r2, #0
 800f384:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	7ada      	ldrb	r2, [r3, #11]
 800f38a:	69fb      	ldr	r3, [r7, #28]
 800f38c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	7a9a      	ldrb	r2, [r3, #10]
 800f392:	69fb      	ldr	r3, [r7, #28]
 800f394:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	681a      	ldr	r2, [r3, #0]
 800f39a:	69fb      	ldr	r3, [r7, #28]
 800f39c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	8adb      	ldrh	r3, [r3, #22]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d021      	beq.n	800f3ea <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800f3a6:	4b23      	ldr	r3, [pc, #140]	; (800f434 <tcp_listen_with_backlog_and_err+0x148>)
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	68fa      	ldr	r2, [r7, #12]
 800f3ac:	429a      	cmp	r2, r3
 800f3ae:	d105      	bne.n	800f3bc <tcp_listen_with_backlog_and_err+0xd0>
 800f3b0:	4b20      	ldr	r3, [pc, #128]	; (800f434 <tcp_listen_with_backlog_and_err+0x148>)
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	68db      	ldr	r3, [r3, #12]
 800f3b6:	4a1f      	ldr	r2, [pc, #124]	; (800f434 <tcp_listen_with_backlog_and_err+0x148>)
 800f3b8:	6013      	str	r3, [r2, #0]
 800f3ba:	e013      	b.n	800f3e4 <tcp_listen_with_backlog_and_err+0xf8>
 800f3bc:	4b1d      	ldr	r3, [pc, #116]	; (800f434 <tcp_listen_with_backlog_and_err+0x148>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	617b      	str	r3, [r7, #20]
 800f3c2:	e00c      	b.n	800f3de <tcp_listen_with_backlog_and_err+0xf2>
 800f3c4:	697b      	ldr	r3, [r7, #20]
 800f3c6:	68db      	ldr	r3, [r3, #12]
 800f3c8:	68fa      	ldr	r2, [r7, #12]
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	d104      	bne.n	800f3d8 <tcp_listen_with_backlog_and_err+0xec>
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	68da      	ldr	r2, [r3, #12]
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	60da      	str	r2, [r3, #12]
 800f3d6:	e005      	b.n	800f3e4 <tcp_listen_with_backlog_and_err+0xf8>
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	68db      	ldr	r3, [r3, #12]
 800f3dc:	617b      	str	r3, [r7, #20]
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d1ef      	bne.n	800f3c4 <tcp_listen_with_backlog_and_err+0xd8>
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800f3ea:	68f8      	ldr	r0, [r7, #12]
 800f3ec:	f7ff fbc0 	bl	800eb70 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800f3f0:	69fb      	ldr	r3, [r7, #28]
 800f3f2:	4a11      	ldr	r2, [pc, #68]	; (800f438 <tcp_listen_with_backlog_and_err+0x14c>)
 800f3f4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800f3f6:	4b11      	ldr	r3, [pc, #68]	; (800f43c <tcp_listen_with_backlog_and_err+0x150>)
 800f3f8:	681a      	ldr	r2, [r3, #0]
 800f3fa:	69fb      	ldr	r3, [r7, #28]
 800f3fc:	60da      	str	r2, [r3, #12]
 800f3fe:	4a0f      	ldr	r2, [pc, #60]	; (800f43c <tcp_listen_with_backlog_and_err+0x150>)
 800f400:	69fb      	ldr	r3, [r7, #28]
 800f402:	6013      	str	r3, [r2, #0]
 800f404:	f005 fbf8 	bl	8014bf8 <tcp_timer_needed>
  res = ERR_OK;
 800f408:	2300      	movs	r3, #0
 800f40a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d002      	beq.n	800f418 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	7efa      	ldrb	r2, [r7, #27]
 800f416:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800f418:	69fb      	ldr	r3, [r7, #28]
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	3720      	adds	r7, #32
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}
 800f422:	bf00      	nop
 800f424:	0801b280 	.word	0x0801b280
 800f428:	0801b474 	.word	0x0801b474
 800f42c:	0801b2c4 	.word	0x0801b2c4
 800f430:	0801b4a4 	.word	0x0801b4a4
 800f434:	20018bb0 	.word	0x20018bb0
 800f438:	0800f289 	.word	0x0800f289
 800f43c:	20018bac 	.word	0x20018bac

0800f440 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b084      	sub	sp, #16
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d106      	bne.n	800f45c <tcp_update_rcv_ann_wnd+0x1c>
 800f44e:	4b25      	ldr	r3, [pc, #148]	; (800f4e4 <tcp_update_rcv_ann_wnd+0xa4>)
 800f450:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f454:	4924      	ldr	r1, [pc, #144]	; (800f4e8 <tcp_update_rcv_ann_wnd+0xa8>)
 800f456:	4825      	ldr	r0, [pc, #148]	; (800f4ec <tcp_update_rcv_ann_wnd+0xac>)
 800f458:	f008 fcf2 	bl	8017e40 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f460:	687a      	ldr	r2, [r7, #4]
 800f462:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f464:	4413      	add	r3, r2
 800f466:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f46c:	687a      	ldr	r2, [r7, #4]
 800f46e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f470:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f474:	bf28      	it	cs
 800f476:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f47a:	b292      	uxth	r2, r2
 800f47c:	4413      	add	r3, r2
 800f47e:	68fa      	ldr	r2, [r7, #12]
 800f480:	1ad3      	subs	r3, r2, r3
 800f482:	2b00      	cmp	r3, #0
 800f484:	db08      	blt.n	800f498 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f492:	68fa      	ldr	r2, [r7, #12]
 800f494:	1ad3      	subs	r3, r2, r3
 800f496:	e020      	b.n	800f4da <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4a0:	1ad3      	subs	r3, r2, r3
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	dd03      	ble.n	800f4ae <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f4ac:	e014      	b.n	800f4d8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4b6:	1ad3      	subs	r3, r2, r3
 800f4b8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f4c0:	d306      	bcc.n	800f4d0 <tcp_update_rcv_ann_wnd+0x90>
 800f4c2:	4b08      	ldr	r3, [pc, #32]	; (800f4e4 <tcp_update_rcv_ann_wnd+0xa4>)
 800f4c4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f4c8:	4909      	ldr	r1, [pc, #36]	; (800f4f0 <tcp_update_rcv_ann_wnd+0xb0>)
 800f4ca:	4808      	ldr	r0, [pc, #32]	; (800f4ec <tcp_update_rcv_ann_wnd+0xac>)
 800f4cc:	f008 fcb8 	bl	8017e40 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	b29a      	uxth	r2, r3
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f4d8:	2300      	movs	r3, #0
  }
}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	3710      	adds	r7, #16
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}
 800f4e2:	bf00      	nop
 800f4e4:	0801b280 	.word	0x0801b280
 800f4e8:	0801b4dc 	.word	0x0801b4dc
 800f4ec:	0801b2c4 	.word	0x0801b2c4
 800f4f0:	0801b500 	.word	0x0801b500

0800f4f4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b084      	sub	sp, #16
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
 800f4fc:	460b      	mov	r3, r1
 800f4fe:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d107      	bne.n	800f516 <tcp_recved+0x22>
 800f506:	4b1f      	ldr	r3, [pc, #124]	; (800f584 <tcp_recved+0x90>)
 800f508:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f50c:	491e      	ldr	r1, [pc, #120]	; (800f588 <tcp_recved+0x94>)
 800f50e:	481f      	ldr	r0, [pc, #124]	; (800f58c <tcp_recved+0x98>)
 800f510:	f008 fc96 	bl	8017e40 <iprintf>
 800f514:	e032      	b.n	800f57c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	7d1b      	ldrb	r3, [r3, #20]
 800f51a:	2b01      	cmp	r3, #1
 800f51c:	d106      	bne.n	800f52c <tcp_recved+0x38>
 800f51e:	4b19      	ldr	r3, [pc, #100]	; (800f584 <tcp_recved+0x90>)
 800f520:	f240 32d2 	movw	r2, #978	; 0x3d2
 800f524:	491a      	ldr	r1, [pc, #104]	; (800f590 <tcp_recved+0x9c>)
 800f526:	4819      	ldr	r0, [pc, #100]	; (800f58c <tcp_recved+0x98>)
 800f528:	f008 fc8a 	bl	8017e40 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f530:	887b      	ldrh	r3, [r7, #2]
 800f532:	4413      	add	r3, r2
 800f534:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f536:	89fb      	ldrh	r3, [r7, #14]
 800f538:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f53c:	d804      	bhi.n	800f548 <tcp_recved+0x54>
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f542:	89fa      	ldrh	r2, [r7, #14]
 800f544:	429a      	cmp	r2, r3
 800f546:	d204      	bcs.n	800f552 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f54e:	851a      	strh	r2, [r3, #40]	; 0x28
 800f550:	e002      	b.n	800f558 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	89fa      	ldrh	r2, [r7, #14]
 800f556:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f558:	6878      	ldr	r0, [r7, #4]
 800f55a:	f7ff ff71 	bl	800f440 <tcp_update_rcv_ann_wnd>
 800f55e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f560:	68bb      	ldr	r3, [r7, #8]
 800f562:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f566:	d309      	bcc.n	800f57c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	8b5b      	ldrh	r3, [r3, #26]
 800f56c:	f043 0302 	orr.w	r3, r3, #2
 800f570:	b29a      	uxth	r2, r3
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f576:	6878      	ldr	r0, [r7, #4]
 800f578:	f004 fbc8 	bl	8013d0c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f57c:	3710      	adds	r7, #16
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}
 800f582:	bf00      	nop
 800f584:	0801b280 	.word	0x0801b280
 800f588:	0801b51c 	.word	0x0801b51c
 800f58c:	0801b2c4 	.word	0x0801b2c4
 800f590:	0801b534 	.word	0x0801b534

0800f594 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800f594:	b480      	push	{r7}
 800f596:	b083      	sub	sp, #12
 800f598:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800f59a:	2300      	movs	r3, #0
 800f59c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800f59e:	4b1e      	ldr	r3, [pc, #120]	; (800f618 <tcp_new_port+0x84>)
 800f5a0:	881b      	ldrh	r3, [r3, #0]
 800f5a2:	3301      	adds	r3, #1
 800f5a4:	b29a      	uxth	r2, r3
 800f5a6:	4b1c      	ldr	r3, [pc, #112]	; (800f618 <tcp_new_port+0x84>)
 800f5a8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800f5aa:	4b1b      	ldr	r3, [pc, #108]	; (800f618 <tcp_new_port+0x84>)
 800f5ac:	881b      	ldrh	r3, [r3, #0]
 800f5ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f5b2:	4293      	cmp	r3, r2
 800f5b4:	d103      	bne.n	800f5be <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800f5b6:	4b18      	ldr	r3, [pc, #96]	; (800f618 <tcp_new_port+0x84>)
 800f5b8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f5bc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f5be:	2300      	movs	r3, #0
 800f5c0:	71fb      	strb	r3, [r7, #7]
 800f5c2:	e01e      	b.n	800f602 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f5c4:	79fb      	ldrb	r3, [r7, #7]
 800f5c6:	4a15      	ldr	r2, [pc, #84]	; (800f61c <tcp_new_port+0x88>)
 800f5c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	603b      	str	r3, [r7, #0]
 800f5d0:	e011      	b.n	800f5f6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	8ada      	ldrh	r2, [r3, #22]
 800f5d6:	4b10      	ldr	r3, [pc, #64]	; (800f618 <tcp_new_port+0x84>)
 800f5d8:	881b      	ldrh	r3, [r3, #0]
 800f5da:	429a      	cmp	r2, r3
 800f5dc:	d108      	bne.n	800f5f0 <tcp_new_port+0x5c>
        n++;
 800f5de:	88bb      	ldrh	r3, [r7, #4]
 800f5e0:	3301      	adds	r3, #1
 800f5e2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800f5e4:	88bb      	ldrh	r3, [r7, #4]
 800f5e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f5ea:	d3d8      	bcc.n	800f59e <tcp_new_port+0xa>
          return 0;
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	e00d      	b.n	800f60c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	68db      	ldr	r3, [r3, #12]
 800f5f4:	603b      	str	r3, [r7, #0]
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d1ea      	bne.n	800f5d2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f5fc:	79fb      	ldrb	r3, [r7, #7]
 800f5fe:	3301      	adds	r3, #1
 800f600:	71fb      	strb	r3, [r7, #7]
 800f602:	79fb      	ldrb	r3, [r7, #7]
 800f604:	2b03      	cmp	r3, #3
 800f606:	d9dd      	bls.n	800f5c4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800f608:	4b03      	ldr	r3, [pc, #12]	; (800f618 <tcp_new_port+0x84>)
 800f60a:	881b      	ldrh	r3, [r3, #0]
}
 800f60c:	4618      	mov	r0, r3
 800f60e:	370c      	adds	r7, #12
 800f610:	46bd      	mov	sp, r7
 800f612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f616:	4770      	bx	lr
 800f618:	20000724 	.word	0x20000724
 800f61c:	0801e8c8 	.word	0x0801e8c8

0800f620 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f620:	b5b0      	push	{r4, r5, r7, lr}
 800f622:	b090      	sub	sp, #64	; 0x40
 800f624:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f626:	2300      	movs	r3, #0
 800f628:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f62c:	4b94      	ldr	r3, [pc, #592]	; (800f880 <tcp_slowtmr+0x260>)
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	3301      	adds	r3, #1
 800f632:	4a93      	ldr	r2, [pc, #588]	; (800f880 <tcp_slowtmr+0x260>)
 800f634:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f636:	4b93      	ldr	r3, [pc, #588]	; (800f884 <tcp_slowtmr+0x264>)
 800f638:	781b      	ldrb	r3, [r3, #0]
 800f63a:	3301      	adds	r3, #1
 800f63c:	b2da      	uxtb	r2, r3
 800f63e:	4b91      	ldr	r3, [pc, #580]	; (800f884 <tcp_slowtmr+0x264>)
 800f640:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f642:	2300      	movs	r3, #0
 800f644:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f646:	4b90      	ldr	r3, [pc, #576]	; (800f888 <tcp_slowtmr+0x268>)
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f64c:	e29d      	b.n	800fb8a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f650:	7d1b      	ldrb	r3, [r3, #20]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d106      	bne.n	800f664 <tcp_slowtmr+0x44>
 800f656:	4b8d      	ldr	r3, [pc, #564]	; (800f88c <tcp_slowtmr+0x26c>)
 800f658:	f240 42be 	movw	r2, #1214	; 0x4be
 800f65c:	498c      	ldr	r1, [pc, #560]	; (800f890 <tcp_slowtmr+0x270>)
 800f65e:	488d      	ldr	r0, [pc, #564]	; (800f894 <tcp_slowtmr+0x274>)
 800f660:	f008 fbee 	bl	8017e40 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f666:	7d1b      	ldrb	r3, [r3, #20]
 800f668:	2b01      	cmp	r3, #1
 800f66a:	d106      	bne.n	800f67a <tcp_slowtmr+0x5a>
 800f66c:	4b87      	ldr	r3, [pc, #540]	; (800f88c <tcp_slowtmr+0x26c>)
 800f66e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800f672:	4989      	ldr	r1, [pc, #548]	; (800f898 <tcp_slowtmr+0x278>)
 800f674:	4887      	ldr	r0, [pc, #540]	; (800f894 <tcp_slowtmr+0x274>)
 800f676:	f008 fbe3 	bl	8017e40 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f67c:	7d1b      	ldrb	r3, [r3, #20]
 800f67e:	2b0a      	cmp	r3, #10
 800f680:	d106      	bne.n	800f690 <tcp_slowtmr+0x70>
 800f682:	4b82      	ldr	r3, [pc, #520]	; (800f88c <tcp_slowtmr+0x26c>)
 800f684:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f688:	4984      	ldr	r1, [pc, #528]	; (800f89c <tcp_slowtmr+0x27c>)
 800f68a:	4882      	ldr	r0, [pc, #520]	; (800f894 <tcp_slowtmr+0x274>)
 800f68c:	f008 fbd8 	bl	8017e40 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f692:	7f9a      	ldrb	r2, [r3, #30]
 800f694:	4b7b      	ldr	r3, [pc, #492]	; (800f884 <tcp_slowtmr+0x264>)
 800f696:	781b      	ldrb	r3, [r3, #0]
 800f698:	429a      	cmp	r2, r3
 800f69a:	d105      	bne.n	800f6a8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f69e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6a2:	68db      	ldr	r3, [r3, #12]
 800f6a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800f6a6:	e270      	b.n	800fb8a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800f6a8:	4b76      	ldr	r3, [pc, #472]	; (800f884 <tcp_slowtmr+0x264>)
 800f6aa:	781a      	ldrb	r2, [r3, #0]
 800f6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ae:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6be:	7d1b      	ldrb	r3, [r3, #20]
 800f6c0:	2b02      	cmp	r3, #2
 800f6c2:	d10a      	bne.n	800f6da <tcp_slowtmr+0xba>
 800f6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f6ca:	2b05      	cmp	r3, #5
 800f6cc:	d905      	bls.n	800f6da <tcp_slowtmr+0xba>
      ++pcb_remove;
 800f6ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6d2:	3301      	adds	r3, #1
 800f6d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f6d8:	e11e      	b.n	800f918 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800f6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f6e0:	2b0b      	cmp	r3, #11
 800f6e2:	d905      	bls.n	800f6f0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800f6e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f6e8:	3301      	adds	r3, #1
 800f6ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f6ee:	e113      	b.n	800f918 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800f6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6f2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d075      	beq.n	800f7e6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800f6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d006      	beq.n	800f710 <tcp_slowtmr+0xf0>
 800f702:	4b62      	ldr	r3, [pc, #392]	; (800f88c <tcp_slowtmr+0x26c>)
 800f704:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800f708:	4965      	ldr	r1, [pc, #404]	; (800f8a0 <tcp_slowtmr+0x280>)
 800f70a:	4862      	ldr	r0, [pc, #392]	; (800f894 <tcp_slowtmr+0x274>)
 800f70c:	f008 fb98 	bl	8017e40 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800f710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f714:	2b00      	cmp	r3, #0
 800f716:	d106      	bne.n	800f726 <tcp_slowtmr+0x106>
 800f718:	4b5c      	ldr	r3, [pc, #368]	; (800f88c <tcp_slowtmr+0x26c>)
 800f71a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800f71e:	4961      	ldr	r1, [pc, #388]	; (800f8a4 <tcp_slowtmr+0x284>)
 800f720:	485c      	ldr	r0, [pc, #368]	; (800f894 <tcp_slowtmr+0x274>)
 800f722:	f008 fb8d 	bl	8017e40 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800f726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f728:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f72c:	2b0b      	cmp	r3, #11
 800f72e:	d905      	bls.n	800f73c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800f730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f734:	3301      	adds	r3, #1
 800f736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f73a:	e0ed      	b.n	800f918 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800f73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f73e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f742:	3b01      	subs	r3, #1
 800f744:	4a58      	ldr	r2, [pc, #352]	; (800f8a8 <tcp_slowtmr+0x288>)
 800f746:	5cd3      	ldrb	r3, [r2, r3]
 800f748:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800f74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f74c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f750:	7c7a      	ldrb	r2, [r7, #17]
 800f752:	429a      	cmp	r2, r3
 800f754:	d907      	bls.n	800f766 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800f756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f758:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f75c:	3301      	adds	r3, #1
 800f75e:	b2da      	uxtb	r2, r3
 800f760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f762:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800f766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f768:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f76c:	7c7a      	ldrb	r2, [r7, #17]
 800f76e:	429a      	cmp	r2, r3
 800f770:	f200 80d2 	bhi.w	800f918 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800f774:	2301      	movs	r3, #1
 800f776:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800f778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f77a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d108      	bne.n	800f794 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800f782:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f784:	f005 f96a 	bl	8014a5c <tcp_zero_window_probe>
 800f788:	4603      	mov	r3, r0
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d014      	beq.n	800f7b8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800f78e:	2300      	movs	r3, #0
 800f790:	623b      	str	r3, [r7, #32]
 800f792:	e011      	b.n	800f7b8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800f794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f796:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f79a:	4619      	mov	r1, r3
 800f79c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f79e:	f004 f82f 	bl	8013800 <tcp_split_unsent_seg>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d107      	bne.n	800f7b8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800f7a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f7aa:	f004 faaf 	bl	8013d0c <tcp_output>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d101      	bne.n	800f7b8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800f7b8:	6a3b      	ldr	r3, [r7, #32]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	f000 80ac 	beq.w	800f918 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800f7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800f7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f7ce:	2b06      	cmp	r3, #6
 800f7d0:	f200 80a2 	bhi.w	800f918 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800f7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7d6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800f7da:	3301      	adds	r3, #1
 800f7dc:	b2da      	uxtb	r2, r3
 800f7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7e0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800f7e4:	e098      	b.n	800f918 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800f7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7e8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	db0f      	blt.n	800f810 <tcp_slowtmr+0x1f0>
 800f7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7f2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f7f6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f7fa:	4293      	cmp	r3, r2
 800f7fc:	d008      	beq.n	800f810 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800f7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f800:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f804:	b29b      	uxth	r3, r3
 800f806:	3301      	adds	r3, #1
 800f808:	b29b      	uxth	r3, r3
 800f80a:	b21a      	sxth	r2, r3
 800f80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f80e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800f810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f812:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800f816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f818:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f81c:	429a      	cmp	r2, r3
 800f81e:	db7b      	blt.n	800f918 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800f820:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f822:	f004 fd65 	bl	80142f0 <tcp_rexmit_rto_prepare>
 800f826:	4603      	mov	r3, r0
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d007      	beq.n	800f83c <tcp_slowtmr+0x21c>
 800f82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f82e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f830:	2b00      	cmp	r3, #0
 800f832:	d171      	bne.n	800f918 <tcp_slowtmr+0x2f8>
 800f834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d06d      	beq.n	800f918 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800f83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f83e:	7d1b      	ldrb	r3, [r3, #20]
 800f840:	2b02      	cmp	r3, #2
 800f842:	d03a      	beq.n	800f8ba <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800f844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f846:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f84a:	2b0c      	cmp	r3, #12
 800f84c:	bf28      	it	cs
 800f84e:	230c      	movcs	r3, #12
 800f850:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800f852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f854:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f858:	10db      	asrs	r3, r3, #3
 800f85a:	b21b      	sxth	r3, r3
 800f85c:	461a      	mov	r2, r3
 800f85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f860:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f864:	4413      	add	r3, r2
 800f866:	7efa      	ldrb	r2, [r7, #27]
 800f868:	4910      	ldr	r1, [pc, #64]	; (800f8ac <tcp_slowtmr+0x28c>)
 800f86a:	5c8a      	ldrb	r2, [r1, r2]
 800f86c:	4093      	lsls	r3, r2
 800f86e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800f870:	697b      	ldr	r3, [r7, #20]
 800f872:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800f876:	4293      	cmp	r3, r2
 800f878:	dc1a      	bgt.n	800f8b0 <tcp_slowtmr+0x290>
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	b21a      	sxth	r2, r3
 800f87e:	e019      	b.n	800f8b4 <tcp_slowtmr+0x294>
 800f880:	20018ba8 	.word	0x20018ba8
 800f884:	2000528a 	.word	0x2000528a
 800f888:	20018ba4 	.word	0x20018ba4
 800f88c:	0801b280 	.word	0x0801b280
 800f890:	0801b5c4 	.word	0x0801b5c4
 800f894:	0801b2c4 	.word	0x0801b2c4
 800f898:	0801b5f0 	.word	0x0801b5f0
 800f89c:	0801b61c 	.word	0x0801b61c
 800f8a0:	0801b64c 	.word	0x0801b64c
 800f8a4:	0801b680 	.word	0x0801b680
 800f8a8:	0801e8c0 	.word	0x0801e8c0
 800f8ac:	0801e8b0 	.word	0x0801e8b0
 800f8b0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8bc:	2200      	movs	r2, #0
 800f8be:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f8cc:	4293      	cmp	r3, r2
 800f8ce:	bf28      	it	cs
 800f8d0:	4613      	movcs	r3, r2
 800f8d2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f8d4:	8a7b      	ldrh	r3, [r7, #18]
 800f8d6:	085b      	lsrs	r3, r3, #1
 800f8d8:	b29a      	uxth	r2, r3
 800f8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8dc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8ea:	005b      	lsls	r3, r3, #1
 800f8ec:	b29b      	uxth	r3, r3
 800f8ee:	429a      	cmp	r2, r3
 800f8f0:	d206      	bcs.n	800f900 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8f6:	005b      	lsls	r3, r3, #1
 800f8f8:	b29a      	uxth	r2, r3
 800f8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f902:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f906:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f90c:	2200      	movs	r2, #0
 800f90e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f912:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f914:	f004 fd5c 	bl	80143d0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f91a:	7d1b      	ldrb	r3, [r3, #20]
 800f91c:	2b06      	cmp	r3, #6
 800f91e:	d111      	bne.n	800f944 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f922:	8b5b      	ldrh	r3, [r3, #26]
 800f924:	f003 0310 	and.w	r3, r3, #16
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d00b      	beq.n	800f944 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f92c:	4b9c      	ldr	r3, [pc, #624]	; (800fba0 <tcp_slowtmr+0x580>)
 800f92e:	681a      	ldr	r2, [r3, #0]
 800f930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f932:	6a1b      	ldr	r3, [r3, #32]
 800f934:	1ad3      	subs	r3, r2, r3
 800f936:	2b28      	cmp	r3, #40	; 0x28
 800f938:	d904      	bls.n	800f944 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f93a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f93e:	3301      	adds	r3, #1
 800f940:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f946:	7a5b      	ldrb	r3, [r3, #9]
 800f948:	f003 0308 	and.w	r3, r3, #8
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d04a      	beq.n	800f9e6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800f950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f952:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f954:	2b04      	cmp	r3, #4
 800f956:	d003      	beq.n	800f960 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f95a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f95c:	2b07      	cmp	r3, #7
 800f95e:	d142      	bne.n	800f9e6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f960:	4b8f      	ldr	r3, [pc, #572]	; (800fba0 <tcp_slowtmr+0x580>)
 800f962:	681a      	ldr	r2, [r3, #0]
 800f964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f966:	6a1b      	ldr	r3, [r3, #32]
 800f968:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f96c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f970:	4b8c      	ldr	r3, [pc, #560]	; (800fba4 <tcp_slowtmr+0x584>)
 800f972:	440b      	add	r3, r1
 800f974:	498c      	ldr	r1, [pc, #560]	; (800fba8 <tcp_slowtmr+0x588>)
 800f976:	fba1 1303 	umull	r1, r3, r1, r3
 800f97a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f97c:	429a      	cmp	r2, r3
 800f97e:	d90a      	bls.n	800f996 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f984:	3301      	adds	r3, #1
 800f986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f98a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f98e:	3301      	adds	r3, #1
 800f990:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f994:	e027      	b.n	800f9e6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f996:	4b82      	ldr	r3, [pc, #520]	; (800fba0 <tcp_slowtmr+0x580>)
 800f998:	681a      	ldr	r2, [r3, #0]
 800f99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f99c:	6a1b      	ldr	r3, [r3, #32]
 800f99e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	4b7f      	ldr	r3, [pc, #508]	; (800fbac <tcp_slowtmr+0x58c>)
 800f9b0:	fb03 f300 	mul.w	r3, r3, r0
 800f9b4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f9b6:	497c      	ldr	r1, [pc, #496]	; (800fba8 <tcp_slowtmr+0x588>)
 800f9b8:	fba1 1303 	umull	r1, r3, r1, r3
 800f9bc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f9be:	429a      	cmp	r2, r3
 800f9c0:	d911      	bls.n	800f9e6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800f9c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9c4:	f005 f80a 	bl	80149dc <tcp_keepalive>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f9ce:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d107      	bne.n	800f9e6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800f9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9d8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f9dc:	3301      	adds	r3, #1
 800f9de:	b2da      	uxtb	r2, r3
 800f9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9e2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d011      	beq.n	800fa12 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f9ee:	4b6c      	ldr	r3, [pc, #432]	; (800fba0 <tcp_slowtmr+0x580>)
 800f9f0:	681a      	ldr	r2, [r3, #0]
 800f9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9f4:	6a1b      	ldr	r3, [r3, #32]
 800f9f6:	1ad2      	subs	r2, r2, r3
 800f9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9fa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f9fe:	4619      	mov	r1, r3
 800fa00:	460b      	mov	r3, r1
 800fa02:	005b      	lsls	r3, r3, #1
 800fa04:	440b      	add	r3, r1
 800fa06:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800fa08:	429a      	cmp	r2, r3
 800fa0a:	d302      	bcc.n	800fa12 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800fa0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa0e:	f000 fec9 	bl	80107a4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800fa12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa14:	7d1b      	ldrb	r3, [r3, #20]
 800fa16:	2b03      	cmp	r3, #3
 800fa18:	d10b      	bne.n	800fa32 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fa1a:	4b61      	ldr	r3, [pc, #388]	; (800fba0 <tcp_slowtmr+0x580>)
 800fa1c:	681a      	ldr	r2, [r3, #0]
 800fa1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa20:	6a1b      	ldr	r3, [r3, #32]
 800fa22:	1ad3      	subs	r3, r2, r3
 800fa24:	2b28      	cmp	r3, #40	; 0x28
 800fa26:	d904      	bls.n	800fa32 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800fa28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa2c:	3301      	adds	r3, #1
 800fa2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800fa32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa34:	7d1b      	ldrb	r3, [r3, #20]
 800fa36:	2b09      	cmp	r3, #9
 800fa38:	d10b      	bne.n	800fa52 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fa3a:	4b59      	ldr	r3, [pc, #356]	; (800fba0 <tcp_slowtmr+0x580>)
 800fa3c:	681a      	ldr	r2, [r3, #0]
 800fa3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa40:	6a1b      	ldr	r3, [r3, #32]
 800fa42:	1ad3      	subs	r3, r2, r3
 800fa44:	2bf0      	cmp	r3, #240	; 0xf0
 800fa46:	d904      	bls.n	800fa52 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800fa48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa4c:	3301      	adds	r3, #1
 800fa4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fa52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d060      	beq.n	800fb1c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800fa5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa60:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800fa62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fa64:	f000 fcea 	bl	801043c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800fa68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d010      	beq.n	800fa90 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800fa6e:	4b50      	ldr	r3, [pc, #320]	; (800fbb0 <tcp_slowtmr+0x590>)
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa74:	429a      	cmp	r2, r3
 800fa76:	d106      	bne.n	800fa86 <tcp_slowtmr+0x466>
 800fa78:	4b4e      	ldr	r3, [pc, #312]	; (800fbb4 <tcp_slowtmr+0x594>)
 800fa7a:	f240 526d 	movw	r2, #1389	; 0x56d
 800fa7e:	494e      	ldr	r1, [pc, #312]	; (800fbb8 <tcp_slowtmr+0x598>)
 800fa80:	484e      	ldr	r0, [pc, #312]	; (800fbbc <tcp_slowtmr+0x59c>)
 800fa82:	f008 f9dd 	bl	8017e40 <iprintf>
        prev->next = pcb->next;
 800fa86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa88:	68da      	ldr	r2, [r3, #12]
 800fa8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa8c:	60da      	str	r2, [r3, #12]
 800fa8e:	e00f      	b.n	800fab0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800fa90:	4b47      	ldr	r3, [pc, #284]	; (800fbb0 <tcp_slowtmr+0x590>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d006      	beq.n	800faa8 <tcp_slowtmr+0x488>
 800fa9a:	4b46      	ldr	r3, [pc, #280]	; (800fbb4 <tcp_slowtmr+0x594>)
 800fa9c:	f240 5271 	movw	r2, #1393	; 0x571
 800faa0:	4947      	ldr	r1, [pc, #284]	; (800fbc0 <tcp_slowtmr+0x5a0>)
 800faa2:	4846      	ldr	r0, [pc, #280]	; (800fbbc <tcp_slowtmr+0x59c>)
 800faa4:	f008 f9cc 	bl	8017e40 <iprintf>
        tcp_active_pcbs = pcb->next;
 800faa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faaa:	68db      	ldr	r3, [r3, #12]
 800faac:	4a40      	ldr	r2, [pc, #256]	; (800fbb0 <tcp_slowtmr+0x590>)
 800faae:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800fab0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d013      	beq.n	800fae0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faba:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fabe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fac0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800fac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac4:	3304      	adds	r3, #4
 800fac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fac8:	8ad2      	ldrh	r2, [r2, #22]
 800faca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800facc:	8b09      	ldrh	r1, [r1, #24]
 800face:	9102      	str	r1, [sp, #8]
 800fad0:	9201      	str	r2, [sp, #4]
 800fad2:	9300      	str	r3, [sp, #0]
 800fad4:	462b      	mov	r3, r5
 800fad6:	4622      	mov	r2, r4
 800fad8:	4601      	mov	r1, r0
 800fada:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fadc:	f004 feca 	bl	8014874 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800fae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fae2:	691b      	ldr	r3, [r3, #16]
 800fae4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800fae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fae8:	7d1b      	ldrb	r3, [r3, #20]
 800faea:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800faec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faee:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800faf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf2:	68db      	ldr	r3, [r3, #12]
 800faf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800faf6:	6838      	ldr	r0, [r7, #0]
 800faf8:	f7ff f83a 	bl	800eb70 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800fafc:	4b31      	ldr	r3, [pc, #196]	; (800fbc4 <tcp_slowtmr+0x5a4>)
 800fafe:	2200      	movs	r2, #0
 800fb00:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d004      	beq.n	800fb12 <tcp_slowtmr+0x4f2>
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	f06f 010c 	mvn.w	r1, #12
 800fb0e:	68b8      	ldr	r0, [r7, #8]
 800fb10:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800fb12:	4b2c      	ldr	r3, [pc, #176]	; (800fbc4 <tcp_slowtmr+0x5a4>)
 800fb14:	781b      	ldrb	r3, [r3, #0]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d037      	beq.n	800fb8a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800fb1a:	e592      	b.n	800f642 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800fb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb1e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fb20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb22:	68db      	ldr	r3, [r3, #12]
 800fb24:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800fb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb28:	7f1b      	ldrb	r3, [r3, #28]
 800fb2a:	3301      	adds	r3, #1
 800fb2c:	b2da      	uxtb	r2, r3
 800fb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb30:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800fb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb34:	7f1a      	ldrb	r2, [r3, #28]
 800fb36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb38:	7f5b      	ldrb	r3, [r3, #29]
 800fb3a:	429a      	cmp	r2, r3
 800fb3c:	d325      	bcc.n	800fb8a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800fb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb40:	2200      	movs	r2, #0
 800fb42:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800fb44:	4b1f      	ldr	r3, [pc, #124]	; (800fbc4 <tcp_slowtmr+0x5a4>)
 800fb46:	2200      	movs	r2, #0
 800fb48:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800fb4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d00b      	beq.n	800fb6c <tcp_slowtmr+0x54c>
 800fb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb5c:	6912      	ldr	r2, [r2, #16]
 800fb5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fb60:	4610      	mov	r0, r2
 800fb62:	4798      	blx	r3
 800fb64:	4603      	mov	r3, r0
 800fb66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800fb6a:	e002      	b.n	800fb72 <tcp_slowtmr+0x552>
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800fb72:	4b14      	ldr	r3, [pc, #80]	; (800fbc4 <tcp_slowtmr+0x5a4>)
 800fb74:	781b      	ldrb	r3, [r3, #0]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d000      	beq.n	800fb7c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800fb7a:	e562      	b.n	800f642 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800fb7c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d102      	bne.n	800fb8a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800fb84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb86:	f004 f8c1 	bl	8013d0c <tcp_output>
  while (pcb != NULL) {
 800fb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	f47f ad5e 	bne.w	800f64e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800fb92:	2300      	movs	r3, #0
 800fb94:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800fb96:	4b0c      	ldr	r3, [pc, #48]	; (800fbc8 <tcp_slowtmr+0x5a8>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fb9c:	e069      	b.n	800fc72 <tcp_slowtmr+0x652>
 800fb9e:	bf00      	nop
 800fba0:	20018ba8 	.word	0x20018ba8
 800fba4:	000a4cb8 	.word	0x000a4cb8
 800fba8:	10624dd3 	.word	0x10624dd3
 800fbac:	000124f8 	.word	0x000124f8
 800fbb0:	20018ba4 	.word	0x20018ba4
 800fbb4:	0801b280 	.word	0x0801b280
 800fbb8:	0801b6b8 	.word	0x0801b6b8
 800fbbc:	0801b2c4 	.word	0x0801b2c4
 800fbc0:	0801b6e4 	.word	0x0801b6e4
 800fbc4:	20018ba0 	.word	0x20018ba0
 800fbc8:	20018bb4 	.word	0x20018bb4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbce:	7d1b      	ldrb	r3, [r3, #20]
 800fbd0:	2b0a      	cmp	r3, #10
 800fbd2:	d006      	beq.n	800fbe2 <tcp_slowtmr+0x5c2>
 800fbd4:	4b2b      	ldr	r3, [pc, #172]	; (800fc84 <tcp_slowtmr+0x664>)
 800fbd6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800fbda:	492b      	ldr	r1, [pc, #172]	; (800fc88 <tcp_slowtmr+0x668>)
 800fbdc:	482b      	ldr	r0, [pc, #172]	; (800fc8c <tcp_slowtmr+0x66c>)
 800fbde:	f008 f92f 	bl	8017e40 <iprintf>
    pcb_remove = 0;
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fbe8:	4b29      	ldr	r3, [pc, #164]	; (800fc90 <tcp_slowtmr+0x670>)
 800fbea:	681a      	ldr	r2, [r3, #0]
 800fbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbee:	6a1b      	ldr	r3, [r3, #32]
 800fbf0:	1ad3      	subs	r3, r2, r3
 800fbf2:	2bf0      	cmp	r3, #240	; 0xf0
 800fbf4:	d904      	bls.n	800fc00 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800fbf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbfa:	3301      	adds	r3, #1
 800fbfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fc00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d02f      	beq.n	800fc68 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800fc08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc0a:	f000 fc17 	bl	801043c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800fc0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d010      	beq.n	800fc36 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800fc14:	4b1f      	ldr	r3, [pc, #124]	; (800fc94 <tcp_slowtmr+0x674>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc1a:	429a      	cmp	r2, r3
 800fc1c:	d106      	bne.n	800fc2c <tcp_slowtmr+0x60c>
 800fc1e:	4b19      	ldr	r3, [pc, #100]	; (800fc84 <tcp_slowtmr+0x664>)
 800fc20:	f240 52af 	movw	r2, #1455	; 0x5af
 800fc24:	491c      	ldr	r1, [pc, #112]	; (800fc98 <tcp_slowtmr+0x678>)
 800fc26:	4819      	ldr	r0, [pc, #100]	; (800fc8c <tcp_slowtmr+0x66c>)
 800fc28:	f008 f90a 	bl	8017e40 <iprintf>
        prev->next = pcb->next;
 800fc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc2e:	68da      	ldr	r2, [r3, #12]
 800fc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc32:	60da      	str	r2, [r3, #12]
 800fc34:	e00f      	b.n	800fc56 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800fc36:	4b17      	ldr	r3, [pc, #92]	; (800fc94 <tcp_slowtmr+0x674>)
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc3c:	429a      	cmp	r2, r3
 800fc3e:	d006      	beq.n	800fc4e <tcp_slowtmr+0x62e>
 800fc40:	4b10      	ldr	r3, [pc, #64]	; (800fc84 <tcp_slowtmr+0x664>)
 800fc42:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800fc46:	4915      	ldr	r1, [pc, #84]	; (800fc9c <tcp_slowtmr+0x67c>)
 800fc48:	4810      	ldr	r0, [pc, #64]	; (800fc8c <tcp_slowtmr+0x66c>)
 800fc4a:	f008 f8f9 	bl	8017e40 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800fc4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc50:	68db      	ldr	r3, [r3, #12]
 800fc52:	4a10      	ldr	r2, [pc, #64]	; (800fc94 <tcp_slowtmr+0x674>)
 800fc54:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800fc56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc58:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800fc5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc5c:	68db      	ldr	r3, [r3, #12]
 800fc5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fc60:	69f8      	ldr	r0, [r7, #28]
 800fc62:	f7fe ff85 	bl	800eb70 <tcp_free>
 800fc66:	e004      	b.n	800fc72 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800fc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc6a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc6e:	68db      	ldr	r3, [r3, #12]
 800fc70:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fc72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d1a9      	bne.n	800fbcc <tcp_slowtmr+0x5ac>
    }
  }
}
 800fc78:	bf00      	nop
 800fc7a:	bf00      	nop
 800fc7c:	3730      	adds	r7, #48	; 0x30
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bdb0      	pop	{r4, r5, r7, pc}
 800fc82:	bf00      	nop
 800fc84:	0801b280 	.word	0x0801b280
 800fc88:	0801b710 	.word	0x0801b710
 800fc8c:	0801b2c4 	.word	0x0801b2c4
 800fc90:	20018ba8 	.word	0x20018ba8
 800fc94:	20018bb4 	.word	0x20018bb4
 800fc98:	0801b740 	.word	0x0801b740
 800fc9c:	0801b768 	.word	0x0801b768

0800fca0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b082      	sub	sp, #8
 800fca4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800fca6:	4b2d      	ldr	r3, [pc, #180]	; (800fd5c <tcp_fasttmr+0xbc>)
 800fca8:	781b      	ldrb	r3, [r3, #0]
 800fcaa:	3301      	adds	r3, #1
 800fcac:	b2da      	uxtb	r2, r3
 800fcae:	4b2b      	ldr	r3, [pc, #172]	; (800fd5c <tcp_fasttmr+0xbc>)
 800fcb0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800fcb2:	4b2b      	ldr	r3, [pc, #172]	; (800fd60 <tcp_fasttmr+0xc0>)
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800fcb8:	e048      	b.n	800fd4c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	7f9a      	ldrb	r2, [r3, #30]
 800fcbe:	4b27      	ldr	r3, [pc, #156]	; (800fd5c <tcp_fasttmr+0xbc>)
 800fcc0:	781b      	ldrb	r3, [r3, #0]
 800fcc2:	429a      	cmp	r2, r3
 800fcc4:	d03f      	beq.n	800fd46 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800fcc6:	4b25      	ldr	r3, [pc, #148]	; (800fd5c <tcp_fasttmr+0xbc>)
 800fcc8:	781a      	ldrb	r2, [r3, #0]
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	8b5b      	ldrh	r3, [r3, #26]
 800fcd2:	f003 0301 	and.w	r3, r3, #1
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d010      	beq.n	800fcfc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	8b5b      	ldrh	r3, [r3, #26]
 800fcde:	f043 0302 	orr.w	r3, r3, #2
 800fce2:	b29a      	uxth	r2, r3
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800fce8:	6878      	ldr	r0, [r7, #4]
 800fcea:	f004 f80f 	bl	8013d0c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	8b5b      	ldrh	r3, [r3, #26]
 800fcf2:	f023 0303 	bic.w	r3, r3, #3
 800fcf6:	b29a      	uxth	r2, r3
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	8b5b      	ldrh	r3, [r3, #26]
 800fd00:	f003 0308 	and.w	r3, r3, #8
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d009      	beq.n	800fd1c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	8b5b      	ldrh	r3, [r3, #26]
 800fd0c:	f023 0308 	bic.w	r3, r3, #8
 800fd10:	b29a      	uxth	r2, r3
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800fd16:	6878      	ldr	r0, [r7, #4]
 800fd18:	f7ff f8be 	bl	800ee98 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	68db      	ldr	r3, [r3, #12]
 800fd20:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d00a      	beq.n	800fd40 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800fd2a:	4b0e      	ldr	r3, [pc, #56]	; (800fd64 <tcp_fasttmr+0xc4>)
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800fd30:	6878      	ldr	r0, [r7, #4]
 800fd32:	f000 f819 	bl	800fd68 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800fd36:	4b0b      	ldr	r3, [pc, #44]	; (800fd64 <tcp_fasttmr+0xc4>)
 800fd38:	781b      	ldrb	r3, [r3, #0]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d000      	beq.n	800fd40 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800fd3e:	e7b8      	b.n	800fcb2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	607b      	str	r3, [r7, #4]
 800fd44:	e002      	b.n	800fd4c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	68db      	ldr	r3, [r3, #12]
 800fd4a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d1b3      	bne.n	800fcba <tcp_fasttmr+0x1a>
    }
  }
}
 800fd52:	bf00      	nop
 800fd54:	bf00      	nop
 800fd56:	3708      	adds	r7, #8
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bd80      	pop	{r7, pc}
 800fd5c:	2000528a 	.word	0x2000528a
 800fd60:	20018ba4 	.word	0x20018ba4
 800fd64:	20018ba0 	.word	0x20018ba0

0800fd68 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800fd68:	b590      	push	{r4, r7, lr}
 800fd6a:	b085      	sub	sp, #20
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d109      	bne.n	800fd8a <tcp_process_refused_data+0x22>
 800fd76:	4b37      	ldr	r3, [pc, #220]	; (800fe54 <tcp_process_refused_data+0xec>)
 800fd78:	f240 6209 	movw	r2, #1545	; 0x609
 800fd7c:	4936      	ldr	r1, [pc, #216]	; (800fe58 <tcp_process_refused_data+0xf0>)
 800fd7e:	4837      	ldr	r0, [pc, #220]	; (800fe5c <tcp_process_refused_data+0xf4>)
 800fd80:	f008 f85e 	bl	8017e40 <iprintf>
 800fd84:	f06f 030f 	mvn.w	r3, #15
 800fd88:	e060      	b.n	800fe4c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd8e:	7b5b      	ldrb	r3, [r3, #13]
 800fd90:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd96:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d00b      	beq.n	800fdc0 <tcp_process_refused_data+0x58>
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	6918      	ldr	r0, [r3, #16]
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	68ba      	ldr	r2, [r7, #8]
 800fdb6:	6879      	ldr	r1, [r7, #4]
 800fdb8:	47a0      	blx	r4
 800fdba:	4603      	mov	r3, r0
 800fdbc:	73fb      	strb	r3, [r7, #15]
 800fdbe:	e007      	b.n	800fdd0 <tcp_process_refused_data+0x68>
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	68ba      	ldr	r2, [r7, #8]
 800fdc4:	6879      	ldr	r1, [r7, #4]
 800fdc6:	2000      	movs	r0, #0
 800fdc8:	f000 f8c2 	bl	800ff50 <tcp_recv_null>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800fdd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d12a      	bne.n	800fe2e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800fdd8:	7bbb      	ldrb	r3, [r7, #14]
 800fdda:	f003 0320 	and.w	r3, r3, #32
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d033      	beq.n	800fe4a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fde6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fdea:	d005      	beq.n	800fdf8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fdf0:	3301      	adds	r3, #1
 800fdf2:	b29a      	uxth	r2, r3
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d00b      	beq.n	800fe1a <tcp_process_refused_data+0xb2>
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	6918      	ldr	r0, [r3, #16]
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	2200      	movs	r2, #0
 800fe10:	6879      	ldr	r1, [r7, #4]
 800fe12:	47a0      	blx	r4
 800fe14:	4603      	mov	r3, r0
 800fe16:	73fb      	strb	r3, [r7, #15]
 800fe18:	e001      	b.n	800fe1e <tcp_process_refused_data+0xb6>
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800fe1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe22:	f113 0f0d 	cmn.w	r3, #13
 800fe26:	d110      	bne.n	800fe4a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800fe28:	f06f 030c 	mvn.w	r3, #12
 800fe2c:	e00e      	b.n	800fe4c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800fe2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe32:	f113 0f0d 	cmn.w	r3, #13
 800fe36:	d102      	bne.n	800fe3e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800fe38:	f06f 030c 	mvn.w	r3, #12
 800fe3c:	e006      	b.n	800fe4c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	68ba      	ldr	r2, [r7, #8]
 800fe42:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800fe44:	f06f 0304 	mvn.w	r3, #4
 800fe48:	e000      	b.n	800fe4c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800fe4a:	2300      	movs	r3, #0
}
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	3714      	adds	r7, #20
 800fe50:	46bd      	mov	sp, r7
 800fe52:	bd90      	pop	{r4, r7, pc}
 800fe54:	0801b280 	.word	0x0801b280
 800fe58:	0801b790 	.word	0x0801b790
 800fe5c:	0801b2c4 	.word	0x0801b2c4

0800fe60 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b084      	sub	sp, #16
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800fe68:	e007      	b.n	800fe7a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800fe70:	6878      	ldr	r0, [r7, #4]
 800fe72:	f000 f80a 	bl	800fe8a <tcp_seg_free>
    seg = next;
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d1f4      	bne.n	800fe6a <tcp_segs_free+0xa>
  }
}
 800fe80:	bf00      	nop
 800fe82:	bf00      	nop
 800fe84:	3710      	adds	r7, #16
 800fe86:	46bd      	mov	sp, r7
 800fe88:	bd80      	pop	{r7, pc}

0800fe8a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800fe8a:	b580      	push	{r7, lr}
 800fe8c:	b082      	sub	sp, #8
 800fe8e:	af00      	add	r7, sp, #0
 800fe90:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d00c      	beq.n	800feb2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	685b      	ldr	r3, [r3, #4]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d004      	beq.n	800feaa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	685b      	ldr	r3, [r3, #4]
 800fea4:	4618      	mov	r0, r3
 800fea6:	f7fe fbb7 	bl	800e618 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800feaa:	6879      	ldr	r1, [r7, #4]
 800feac:	2003      	movs	r0, #3
 800feae:	f7fd fd0f 	bl	800d8d0 <memp_free>
  }
}
 800feb2:	bf00      	nop
 800feb4:	3708      	adds	r7, #8
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bd80      	pop	{r7, pc}
	...

0800febc <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b082      	sub	sp, #8
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
 800fec4:	460b      	mov	r3, r1
 800fec6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d107      	bne.n	800fede <tcp_setprio+0x22>
 800fece:	4b07      	ldr	r3, [pc, #28]	; (800feec <tcp_setprio+0x30>)
 800fed0:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800fed4:	4906      	ldr	r1, [pc, #24]	; (800fef0 <tcp_setprio+0x34>)
 800fed6:	4807      	ldr	r0, [pc, #28]	; (800fef4 <tcp_setprio+0x38>)
 800fed8:	f007 ffb2 	bl	8017e40 <iprintf>
 800fedc:	e002      	b.n	800fee4 <tcp_setprio+0x28>

  pcb->prio = prio;
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	78fa      	ldrb	r2, [r7, #3]
 800fee2:	755a      	strb	r2, [r3, #21]
}
 800fee4:	3708      	adds	r7, #8
 800fee6:	46bd      	mov	sp, r7
 800fee8:	bd80      	pop	{r7, pc}
 800feea:	bf00      	nop
 800feec:	0801b280 	.word	0x0801b280
 800fef0:	0801b7b8 	.word	0x0801b7b8
 800fef4:	0801b2c4 	.word	0x0801b2c4

0800fef8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b084      	sub	sp, #16
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d106      	bne.n	800ff14 <tcp_seg_copy+0x1c>
 800ff06:	4b0f      	ldr	r3, [pc, #60]	; (800ff44 <tcp_seg_copy+0x4c>)
 800ff08:	f240 6282 	movw	r2, #1666	; 0x682
 800ff0c:	490e      	ldr	r1, [pc, #56]	; (800ff48 <tcp_seg_copy+0x50>)
 800ff0e:	480f      	ldr	r0, [pc, #60]	; (800ff4c <tcp_seg_copy+0x54>)
 800ff10:	f007 ff96 	bl	8017e40 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ff14:	2003      	movs	r0, #3
 800ff16:	f7fd fc89 	bl	800d82c <memp_malloc>
 800ff1a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d101      	bne.n	800ff26 <tcp_seg_copy+0x2e>
    return NULL;
 800ff22:	2300      	movs	r3, #0
 800ff24:	e00a      	b.n	800ff3c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ff26:	2210      	movs	r2, #16
 800ff28:	6879      	ldr	r1, [r7, #4]
 800ff2a:	68f8      	ldr	r0, [r7, #12]
 800ff2c:	f007 feae 	bl	8017c8c <memcpy>
  pbuf_ref(cseg->p);
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	685b      	ldr	r3, [r3, #4]
 800ff34:	4618      	mov	r0, r3
 800ff36:	f7fe fc15 	bl	800e764 <pbuf_ref>
  return cseg;
 800ff3a:	68fb      	ldr	r3, [r7, #12]
}
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	3710      	adds	r7, #16
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}
 800ff44:	0801b280 	.word	0x0801b280
 800ff48:	0801b7d4 	.word	0x0801b7d4
 800ff4c:	0801b2c4 	.word	0x0801b2c4

0800ff50 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b084      	sub	sp, #16
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	60f8      	str	r0, [r7, #12]
 800ff58:	60b9      	str	r1, [r7, #8]
 800ff5a:	607a      	str	r2, [r7, #4]
 800ff5c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ff5e:	68bb      	ldr	r3, [r7, #8]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d109      	bne.n	800ff78 <tcp_recv_null+0x28>
 800ff64:	4b12      	ldr	r3, [pc, #72]	; (800ffb0 <tcp_recv_null+0x60>)
 800ff66:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ff6a:	4912      	ldr	r1, [pc, #72]	; (800ffb4 <tcp_recv_null+0x64>)
 800ff6c:	4812      	ldr	r0, [pc, #72]	; (800ffb8 <tcp_recv_null+0x68>)
 800ff6e:	f007 ff67 	bl	8017e40 <iprintf>
 800ff72:	f06f 030f 	mvn.w	r3, #15
 800ff76:	e016      	b.n	800ffa6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d009      	beq.n	800ff92 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	891b      	ldrh	r3, [r3, #8]
 800ff82:	4619      	mov	r1, r3
 800ff84:	68b8      	ldr	r0, [r7, #8]
 800ff86:	f7ff fab5 	bl	800f4f4 <tcp_recved>
    pbuf_free(p);
 800ff8a:	6878      	ldr	r0, [r7, #4]
 800ff8c:	f7fe fb44 	bl	800e618 <pbuf_free>
 800ff90:	e008      	b.n	800ffa4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ff92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d104      	bne.n	800ffa4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ff9a:	68b8      	ldr	r0, [r7, #8]
 800ff9c:	f7fe ffe6 	bl	800ef6c <tcp_close>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	e000      	b.n	800ffa6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ffa4:	2300      	movs	r3, #0
}
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	3710      	adds	r7, #16
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	bd80      	pop	{r7, pc}
 800ffae:	bf00      	nop
 800ffb0:	0801b280 	.word	0x0801b280
 800ffb4:	0801b7f0 	.word	0x0801b7f0
 800ffb8:	0801b2c4 	.word	0x0801b2c4

0800ffbc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b086      	sub	sp, #24
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ffc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	db01      	blt.n	800ffd2 <tcp_kill_prio+0x16>
 800ffce:	79fb      	ldrb	r3, [r7, #7]
 800ffd0:	e000      	b.n	800ffd4 <tcp_kill_prio+0x18>
 800ffd2:	237f      	movs	r3, #127	; 0x7f
 800ffd4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ffd6:	7afb      	ldrb	r3, [r7, #11]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d034      	beq.n	8010046 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ffdc:	7afb      	ldrb	r3, [r7, #11]
 800ffde:	3b01      	subs	r3, #1
 800ffe0:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ffea:	4b19      	ldr	r3, [pc, #100]	; (8010050 <tcp_kill_prio+0x94>)
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	617b      	str	r3, [r7, #20]
 800fff0:	e01f      	b.n	8010032 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800fff2:	697b      	ldr	r3, [r7, #20]
 800fff4:	7d5b      	ldrb	r3, [r3, #21]
 800fff6:	7afa      	ldrb	r2, [r7, #11]
 800fff8:	429a      	cmp	r2, r3
 800fffa:	d80c      	bhi.n	8010016 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800fffc:	697b      	ldr	r3, [r7, #20]
 800fffe:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010000:	7afa      	ldrb	r2, [r7, #11]
 8010002:	429a      	cmp	r2, r3
 8010004:	d112      	bne.n	801002c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010006:	4b13      	ldr	r3, [pc, #76]	; (8010054 <tcp_kill_prio+0x98>)
 8010008:	681a      	ldr	r2, [r3, #0]
 801000a:	697b      	ldr	r3, [r7, #20]
 801000c:	6a1b      	ldr	r3, [r3, #32]
 801000e:	1ad3      	subs	r3, r2, r3
 8010010:	68fa      	ldr	r2, [r7, #12]
 8010012:	429a      	cmp	r2, r3
 8010014:	d80a      	bhi.n	801002c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8010016:	4b0f      	ldr	r3, [pc, #60]	; (8010054 <tcp_kill_prio+0x98>)
 8010018:	681a      	ldr	r2, [r3, #0]
 801001a:	697b      	ldr	r3, [r7, #20]
 801001c:	6a1b      	ldr	r3, [r3, #32]
 801001e:	1ad3      	subs	r3, r2, r3
 8010020:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8010022:	697b      	ldr	r3, [r7, #20]
 8010024:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010026:	697b      	ldr	r3, [r7, #20]
 8010028:	7d5b      	ldrb	r3, [r3, #21]
 801002a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801002c:	697b      	ldr	r3, [r7, #20]
 801002e:	68db      	ldr	r3, [r3, #12]
 8010030:	617b      	str	r3, [r7, #20]
 8010032:	697b      	ldr	r3, [r7, #20]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d1dc      	bne.n	800fff2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010038:	693b      	ldr	r3, [r7, #16]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d004      	beq.n	8010048 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801003e:	6938      	ldr	r0, [r7, #16]
 8010040:	f7ff f87e 	bl	800f140 <tcp_abort>
 8010044:	e000      	b.n	8010048 <tcp_kill_prio+0x8c>
    return;
 8010046:	bf00      	nop
  }
}
 8010048:	3718      	adds	r7, #24
 801004a:	46bd      	mov	sp, r7
 801004c:	bd80      	pop	{r7, pc}
 801004e:	bf00      	nop
 8010050:	20018ba4 	.word	0x20018ba4
 8010054:	20018ba8 	.word	0x20018ba8

08010058 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b086      	sub	sp, #24
 801005c:	af00      	add	r7, sp, #0
 801005e:	4603      	mov	r3, r0
 8010060:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010062:	79fb      	ldrb	r3, [r7, #7]
 8010064:	2b08      	cmp	r3, #8
 8010066:	d009      	beq.n	801007c <tcp_kill_state+0x24>
 8010068:	79fb      	ldrb	r3, [r7, #7]
 801006a:	2b09      	cmp	r3, #9
 801006c:	d006      	beq.n	801007c <tcp_kill_state+0x24>
 801006e:	4b1a      	ldr	r3, [pc, #104]	; (80100d8 <tcp_kill_state+0x80>)
 8010070:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010074:	4919      	ldr	r1, [pc, #100]	; (80100dc <tcp_kill_state+0x84>)
 8010076:	481a      	ldr	r0, [pc, #104]	; (80100e0 <tcp_kill_state+0x88>)
 8010078:	f007 fee2 	bl	8017e40 <iprintf>

  inactivity = 0;
 801007c:	2300      	movs	r3, #0
 801007e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010080:	2300      	movs	r3, #0
 8010082:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010084:	4b17      	ldr	r3, [pc, #92]	; (80100e4 <tcp_kill_state+0x8c>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	617b      	str	r3, [r7, #20]
 801008a:	e017      	b.n	80100bc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801008c:	697b      	ldr	r3, [r7, #20]
 801008e:	7d1b      	ldrb	r3, [r3, #20]
 8010090:	79fa      	ldrb	r2, [r7, #7]
 8010092:	429a      	cmp	r2, r3
 8010094:	d10f      	bne.n	80100b6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010096:	4b14      	ldr	r3, [pc, #80]	; (80100e8 <tcp_kill_state+0x90>)
 8010098:	681a      	ldr	r2, [r3, #0]
 801009a:	697b      	ldr	r3, [r7, #20]
 801009c:	6a1b      	ldr	r3, [r3, #32]
 801009e:	1ad3      	subs	r3, r2, r3
 80100a0:	68fa      	ldr	r2, [r7, #12]
 80100a2:	429a      	cmp	r2, r3
 80100a4:	d807      	bhi.n	80100b6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80100a6:	4b10      	ldr	r3, [pc, #64]	; (80100e8 <tcp_kill_state+0x90>)
 80100a8:	681a      	ldr	r2, [r3, #0]
 80100aa:	697b      	ldr	r3, [r7, #20]
 80100ac:	6a1b      	ldr	r3, [r3, #32]
 80100ae:	1ad3      	subs	r3, r2, r3
 80100b0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80100b6:	697b      	ldr	r3, [r7, #20]
 80100b8:	68db      	ldr	r3, [r3, #12]
 80100ba:	617b      	str	r3, [r7, #20]
 80100bc:	697b      	ldr	r3, [r7, #20]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d1e4      	bne.n	801008c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80100c2:	693b      	ldr	r3, [r7, #16]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d003      	beq.n	80100d0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80100c8:	2100      	movs	r1, #0
 80100ca:	6938      	ldr	r0, [r7, #16]
 80100cc:	f7fe ff7a 	bl	800efc4 <tcp_abandon>
  }
}
 80100d0:	bf00      	nop
 80100d2:	3718      	adds	r7, #24
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}
 80100d8:	0801b280 	.word	0x0801b280
 80100dc:	0801b80c 	.word	0x0801b80c
 80100e0:	0801b2c4 	.word	0x0801b2c4
 80100e4:	20018ba4 	.word	0x20018ba4
 80100e8:	20018ba8 	.word	0x20018ba8

080100ec <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b084      	sub	sp, #16
 80100f0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80100f2:	2300      	movs	r3, #0
 80100f4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80100f6:	2300      	movs	r3, #0
 80100f8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80100fa:	4b12      	ldr	r3, [pc, #72]	; (8010144 <tcp_kill_timewait+0x58>)
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	60fb      	str	r3, [r7, #12]
 8010100:	e012      	b.n	8010128 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010102:	4b11      	ldr	r3, [pc, #68]	; (8010148 <tcp_kill_timewait+0x5c>)
 8010104:	681a      	ldr	r2, [r3, #0]
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	6a1b      	ldr	r3, [r3, #32]
 801010a:	1ad3      	subs	r3, r2, r3
 801010c:	687a      	ldr	r2, [r7, #4]
 801010e:	429a      	cmp	r2, r3
 8010110:	d807      	bhi.n	8010122 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8010112:	4b0d      	ldr	r3, [pc, #52]	; (8010148 <tcp_kill_timewait+0x5c>)
 8010114:	681a      	ldr	r2, [r3, #0]
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	6a1b      	ldr	r3, [r3, #32]
 801011a:	1ad3      	subs	r3, r2, r3
 801011c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	68db      	ldr	r3, [r3, #12]
 8010126:	60fb      	str	r3, [r7, #12]
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d1e9      	bne.n	8010102 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d002      	beq.n	801013a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010134:	68b8      	ldr	r0, [r7, #8]
 8010136:	f7ff f803 	bl	800f140 <tcp_abort>
  }
}
 801013a:	bf00      	nop
 801013c:	3710      	adds	r7, #16
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}
 8010142:	bf00      	nop
 8010144:	20018bb4 	.word	0x20018bb4
 8010148:	20018ba8 	.word	0x20018ba8

0801014c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b082      	sub	sp, #8
 8010150:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010152:	4b10      	ldr	r3, [pc, #64]	; (8010194 <tcp_handle_closepend+0x48>)
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010158:	e014      	b.n	8010184 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	68db      	ldr	r3, [r3, #12]
 801015e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	8b5b      	ldrh	r3, [r3, #26]
 8010164:	f003 0308 	and.w	r3, r3, #8
 8010168:	2b00      	cmp	r3, #0
 801016a:	d009      	beq.n	8010180 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	8b5b      	ldrh	r3, [r3, #26]
 8010170:	f023 0308 	bic.w	r3, r3, #8
 8010174:	b29a      	uxth	r2, r3
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801017a:	6878      	ldr	r0, [r7, #4]
 801017c:	f7fe fe8c 	bl	800ee98 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d1e7      	bne.n	801015a <tcp_handle_closepend+0xe>
  }
}
 801018a:	bf00      	nop
 801018c:	bf00      	nop
 801018e:	3708      	adds	r7, #8
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}
 8010194:	20018ba4 	.word	0x20018ba4

08010198 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010198:	b580      	push	{r7, lr}
 801019a:	b084      	sub	sp, #16
 801019c:	af00      	add	r7, sp, #0
 801019e:	4603      	mov	r3, r0
 80101a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80101a2:	2001      	movs	r0, #1
 80101a4:	f7fd fb42 	bl	800d82c <memp_malloc>
 80101a8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d126      	bne.n	80101fe <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80101b0:	f7ff ffcc 	bl	801014c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80101b4:	f7ff ff9a 	bl	80100ec <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80101b8:	2001      	movs	r0, #1
 80101ba:	f7fd fb37 	bl	800d82c <memp_malloc>
 80101be:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d11b      	bne.n	80101fe <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80101c6:	2009      	movs	r0, #9
 80101c8:	f7ff ff46 	bl	8010058 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80101cc:	2001      	movs	r0, #1
 80101ce:	f7fd fb2d 	bl	800d82c <memp_malloc>
 80101d2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d111      	bne.n	80101fe <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80101da:	2008      	movs	r0, #8
 80101dc:	f7ff ff3c 	bl	8010058 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80101e0:	2001      	movs	r0, #1
 80101e2:	f7fd fb23 	bl	800d82c <memp_malloc>
 80101e6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d107      	bne.n	80101fe <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80101ee:	79fb      	ldrb	r3, [r7, #7]
 80101f0:	4618      	mov	r0, r3
 80101f2:	f7ff fee3 	bl	800ffbc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80101f6:	2001      	movs	r0, #1
 80101f8:	f7fd fb18 	bl	800d82c <memp_malloc>
 80101fc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d03f      	beq.n	8010284 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010204:	229c      	movs	r2, #156	; 0x9c
 8010206:	2100      	movs	r1, #0
 8010208:	68f8      	ldr	r0, [r7, #12]
 801020a:	f007 fd67 	bl	8017cdc <memset>
    pcb->prio = prio;
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	79fa      	ldrb	r2, [r7, #7]
 8010212:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801021a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010224:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	22ff      	movs	r2, #255	; 0xff
 8010232:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	f44f 7206 	mov.w	r2, #536	; 0x218
 801023a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	2206      	movs	r2, #6
 8010240:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	2206      	movs	r2, #6
 8010248:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010250:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	2201      	movs	r2, #1
 8010256:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801025a:	4b0d      	ldr	r3, [pc, #52]	; (8010290 <tcp_alloc+0xf8>)
 801025c:	681a      	ldr	r2, [r3, #0]
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010262:	4b0c      	ldr	r3, [pc, #48]	; (8010294 <tcp_alloc+0xfc>)
 8010264:	781a      	ldrb	r2, [r3, #0]
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010270:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	4a08      	ldr	r2, [pc, #32]	; (8010298 <tcp_alloc+0x100>)
 8010278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	4a07      	ldr	r2, [pc, #28]	; (801029c <tcp_alloc+0x104>)
 8010280:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010284:	68fb      	ldr	r3, [r7, #12]
}
 8010286:	4618      	mov	r0, r3
 8010288:	3710      	adds	r7, #16
 801028a:	46bd      	mov	sp, r7
 801028c:	bd80      	pop	{r7, pc}
 801028e:	bf00      	nop
 8010290:	20018ba8 	.word	0x20018ba8
 8010294:	2000528a 	.word	0x2000528a
 8010298:	0800ff51 	.word	0x0800ff51
 801029c:	006ddd00 	.word	0x006ddd00

080102a0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b084      	sub	sp, #16
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	4603      	mov	r3, r0
 80102a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80102aa:	2040      	movs	r0, #64	; 0x40
 80102ac:	f7ff ff74 	bl	8010198 <tcp_alloc>
 80102b0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80102b2:	68fb      	ldr	r3, [r7, #12]
}
 80102b4:	4618      	mov	r0, r3
 80102b6:	3710      	adds	r7, #16
 80102b8:	46bd      	mov	sp, r7
 80102ba:	bd80      	pop	{r7, pc}

080102bc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80102bc:	b480      	push	{r7}
 80102be:	b083      	sub	sp, #12
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
 80102c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d002      	beq.n	80102d2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	683a      	ldr	r2, [r7, #0]
 80102d0:	611a      	str	r2, [r3, #16]
  }
}
 80102d2:	bf00      	nop
 80102d4:	370c      	adds	r7, #12
 80102d6:	46bd      	mov	sp, r7
 80102d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102dc:	4770      	bx	lr
	...

080102e0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b082      	sub	sp, #8
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
 80102e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d00e      	beq.n	801030e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	7d1b      	ldrb	r3, [r3, #20]
 80102f4:	2b01      	cmp	r3, #1
 80102f6:	d106      	bne.n	8010306 <tcp_recv+0x26>
 80102f8:	4b07      	ldr	r3, [pc, #28]	; (8010318 <tcp_recv+0x38>)
 80102fa:	f240 72df 	movw	r2, #2015	; 0x7df
 80102fe:	4907      	ldr	r1, [pc, #28]	; (801031c <tcp_recv+0x3c>)
 8010300:	4807      	ldr	r0, [pc, #28]	; (8010320 <tcp_recv+0x40>)
 8010302:	f007 fd9d 	bl	8017e40 <iprintf>
    pcb->recv = recv;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	683a      	ldr	r2, [r7, #0]
 801030a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801030e:	bf00      	nop
 8010310:	3708      	adds	r7, #8
 8010312:	46bd      	mov	sp, r7
 8010314:	bd80      	pop	{r7, pc}
 8010316:	bf00      	nop
 8010318:	0801b280 	.word	0x0801b280
 801031c:	0801b81c 	.word	0x0801b81c
 8010320:	0801b2c4 	.word	0x0801b2c4

08010324 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b082      	sub	sp, #8
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
 801032c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d00e      	beq.n	8010352 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	7d1b      	ldrb	r3, [r3, #20]
 8010338:	2b01      	cmp	r3, #1
 801033a:	d106      	bne.n	801034a <tcp_sent+0x26>
 801033c:	4b07      	ldr	r3, [pc, #28]	; (801035c <tcp_sent+0x38>)
 801033e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8010342:	4907      	ldr	r1, [pc, #28]	; (8010360 <tcp_sent+0x3c>)
 8010344:	4807      	ldr	r0, [pc, #28]	; (8010364 <tcp_sent+0x40>)
 8010346:	f007 fd7b 	bl	8017e40 <iprintf>
    pcb->sent = sent;
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	683a      	ldr	r2, [r7, #0]
 801034e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8010352:	bf00      	nop
 8010354:	3708      	adds	r7, #8
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}
 801035a:	bf00      	nop
 801035c:	0801b280 	.word	0x0801b280
 8010360:	0801b844 	.word	0x0801b844
 8010364:	0801b2c4 	.word	0x0801b2c4

08010368 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b082      	sub	sp, #8
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
 8010370:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d00e      	beq.n	8010396 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	7d1b      	ldrb	r3, [r3, #20]
 801037c:	2b01      	cmp	r3, #1
 801037e:	d106      	bne.n	801038e <tcp_err+0x26>
 8010380:	4b07      	ldr	r3, [pc, #28]	; (80103a0 <tcp_err+0x38>)
 8010382:	f640 020d 	movw	r2, #2061	; 0x80d
 8010386:	4907      	ldr	r1, [pc, #28]	; (80103a4 <tcp_err+0x3c>)
 8010388:	4807      	ldr	r0, [pc, #28]	; (80103a8 <tcp_err+0x40>)
 801038a:	f007 fd59 	bl	8017e40 <iprintf>
    pcb->errf = err;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	683a      	ldr	r2, [r7, #0]
 8010392:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8010396:	bf00      	nop
 8010398:	3708      	adds	r7, #8
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}
 801039e:	bf00      	nop
 80103a0:	0801b280 	.word	0x0801b280
 80103a4:	0801b86c 	.word	0x0801b86c
 80103a8:	0801b2c4 	.word	0x0801b2c4

080103ac <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80103ac:	b480      	push	{r7}
 80103ae:	b085      	sub	sp, #20
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
 80103b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d008      	beq.n	80103ce <tcp_accept+0x22>
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	7d1b      	ldrb	r3, [r3, #20]
 80103c0:	2b01      	cmp	r3, #1
 80103c2:	d104      	bne.n	80103ce <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	683a      	ldr	r2, [r7, #0]
 80103cc:	619a      	str	r2, [r3, #24]
  }
}
 80103ce:	bf00      	nop
 80103d0:	3714      	adds	r7, #20
 80103d2:	46bd      	mov	sp, r7
 80103d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d8:	4770      	bx	lr
	...

080103dc <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b084      	sub	sp, #16
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	60f8      	str	r0, [r7, #12]
 80103e4:	60b9      	str	r1, [r7, #8]
 80103e6:	4613      	mov	r3, r2
 80103e8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d107      	bne.n	8010400 <tcp_poll+0x24>
 80103f0:	4b0e      	ldr	r3, [pc, #56]	; (801042c <tcp_poll+0x50>)
 80103f2:	f640 023d 	movw	r2, #2109	; 0x83d
 80103f6:	490e      	ldr	r1, [pc, #56]	; (8010430 <tcp_poll+0x54>)
 80103f8:	480e      	ldr	r0, [pc, #56]	; (8010434 <tcp_poll+0x58>)
 80103fa:	f007 fd21 	bl	8017e40 <iprintf>
 80103fe:	e011      	b.n	8010424 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	7d1b      	ldrb	r3, [r3, #20]
 8010404:	2b01      	cmp	r3, #1
 8010406:	d106      	bne.n	8010416 <tcp_poll+0x3a>
 8010408:	4b08      	ldr	r3, [pc, #32]	; (801042c <tcp_poll+0x50>)
 801040a:	f640 023e 	movw	r2, #2110	; 0x83e
 801040e:	490a      	ldr	r1, [pc, #40]	; (8010438 <tcp_poll+0x5c>)
 8010410:	4808      	ldr	r0, [pc, #32]	; (8010434 <tcp_poll+0x58>)
 8010412:	f007 fd15 	bl	8017e40 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	68ba      	ldr	r2, [r7, #8]
 801041a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	79fa      	ldrb	r2, [r7, #7]
 8010422:	775a      	strb	r2, [r3, #29]
}
 8010424:	3710      	adds	r7, #16
 8010426:	46bd      	mov	sp, r7
 8010428:	bd80      	pop	{r7, pc}
 801042a:	bf00      	nop
 801042c:	0801b280 	.word	0x0801b280
 8010430:	0801b894 	.word	0x0801b894
 8010434:	0801b2c4 	.word	0x0801b2c4
 8010438:	0801b8ac 	.word	0x0801b8ac

0801043c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b082      	sub	sp, #8
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d107      	bne.n	801045a <tcp_pcb_purge+0x1e>
 801044a:	4b21      	ldr	r3, [pc, #132]	; (80104d0 <tcp_pcb_purge+0x94>)
 801044c:	f640 0251 	movw	r2, #2129	; 0x851
 8010450:	4920      	ldr	r1, [pc, #128]	; (80104d4 <tcp_pcb_purge+0x98>)
 8010452:	4821      	ldr	r0, [pc, #132]	; (80104d8 <tcp_pcb_purge+0x9c>)
 8010454:	f007 fcf4 	bl	8017e40 <iprintf>
 8010458:	e037      	b.n	80104ca <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	7d1b      	ldrb	r3, [r3, #20]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d033      	beq.n	80104ca <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010466:	2b0a      	cmp	r3, #10
 8010468:	d02f      	beq.n	80104ca <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801046e:	2b01      	cmp	r3, #1
 8010470:	d02b      	beq.n	80104ca <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010476:	2b00      	cmp	r3, #0
 8010478:	d007      	beq.n	801048a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801047e:	4618      	mov	r0, r3
 8010480:	f7fe f8ca 	bl	800e618 <pbuf_free>
      pcb->refused_data = NULL;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	2200      	movs	r2, #0
 8010488:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801048e:	2b00      	cmp	r3, #0
 8010490:	d002      	beq.n	8010498 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010492:	6878      	ldr	r0, [r7, #4]
 8010494:	f000 f986 	bl	80107a4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801049e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104a4:	4618      	mov	r0, r3
 80104a6:	f7ff fcdb 	bl	800fe60 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104ae:	4618      	mov	r0, r3
 80104b0:	f7ff fcd6 	bl	800fe60 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	2200      	movs	r2, #0
 80104b8:	66da      	str	r2, [r3, #108]	; 0x6c
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	2200      	movs	r2, #0
 80104c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80104ca:	3708      	adds	r7, #8
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bd80      	pop	{r7, pc}
 80104d0:	0801b280 	.word	0x0801b280
 80104d4:	0801b8cc 	.word	0x0801b8cc
 80104d8:	0801b2c4 	.word	0x0801b2c4

080104dc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b084      	sub	sp, #16
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
 80104e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80104e6:	683b      	ldr	r3, [r7, #0]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d106      	bne.n	80104fa <tcp_pcb_remove+0x1e>
 80104ec:	4b3e      	ldr	r3, [pc, #248]	; (80105e8 <tcp_pcb_remove+0x10c>)
 80104ee:	f640 0283 	movw	r2, #2179	; 0x883
 80104f2:	493e      	ldr	r1, [pc, #248]	; (80105ec <tcp_pcb_remove+0x110>)
 80104f4:	483e      	ldr	r0, [pc, #248]	; (80105f0 <tcp_pcb_remove+0x114>)
 80104f6:	f007 fca3 	bl	8017e40 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d106      	bne.n	801050e <tcp_pcb_remove+0x32>
 8010500:	4b39      	ldr	r3, [pc, #228]	; (80105e8 <tcp_pcb_remove+0x10c>)
 8010502:	f640 0284 	movw	r2, #2180	; 0x884
 8010506:	493b      	ldr	r1, [pc, #236]	; (80105f4 <tcp_pcb_remove+0x118>)
 8010508:	4839      	ldr	r0, [pc, #228]	; (80105f0 <tcp_pcb_remove+0x114>)
 801050a:	f007 fc99 	bl	8017e40 <iprintf>

  TCP_RMV(pcblist, pcb);
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	683a      	ldr	r2, [r7, #0]
 8010514:	429a      	cmp	r2, r3
 8010516:	d105      	bne.n	8010524 <tcp_pcb_remove+0x48>
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	68da      	ldr	r2, [r3, #12]
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	601a      	str	r2, [r3, #0]
 8010522:	e013      	b.n	801054c <tcp_pcb_remove+0x70>
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	60fb      	str	r3, [r7, #12]
 801052a:	e00c      	b.n	8010546 <tcp_pcb_remove+0x6a>
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	68db      	ldr	r3, [r3, #12]
 8010530:	683a      	ldr	r2, [r7, #0]
 8010532:	429a      	cmp	r2, r3
 8010534:	d104      	bne.n	8010540 <tcp_pcb_remove+0x64>
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	68da      	ldr	r2, [r3, #12]
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	60da      	str	r2, [r3, #12]
 801053e:	e005      	b.n	801054c <tcp_pcb_remove+0x70>
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	68db      	ldr	r3, [r3, #12]
 8010544:	60fb      	str	r3, [r7, #12]
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d1ef      	bne.n	801052c <tcp_pcb_remove+0x50>
 801054c:	683b      	ldr	r3, [r7, #0]
 801054e:	2200      	movs	r2, #0
 8010550:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8010552:	6838      	ldr	r0, [r7, #0]
 8010554:	f7ff ff72 	bl	801043c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010558:	683b      	ldr	r3, [r7, #0]
 801055a:	7d1b      	ldrb	r3, [r3, #20]
 801055c:	2b0a      	cmp	r3, #10
 801055e:	d013      	beq.n	8010588 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010560:	683b      	ldr	r3, [r7, #0]
 8010562:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010564:	2b01      	cmp	r3, #1
 8010566:	d00f      	beq.n	8010588 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010568:	683b      	ldr	r3, [r7, #0]
 801056a:	8b5b      	ldrh	r3, [r3, #26]
 801056c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010570:	2b00      	cmp	r3, #0
 8010572:	d009      	beq.n	8010588 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010574:	683b      	ldr	r3, [r7, #0]
 8010576:	8b5b      	ldrh	r3, [r3, #26]
 8010578:	f043 0302 	orr.w	r3, r3, #2
 801057c:	b29a      	uxth	r2, r3
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010582:	6838      	ldr	r0, [r7, #0]
 8010584:	f003 fbc2 	bl	8013d0c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	7d1b      	ldrb	r3, [r3, #20]
 801058c:	2b01      	cmp	r3, #1
 801058e:	d020      	beq.n	80105d2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010590:	683b      	ldr	r3, [r7, #0]
 8010592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010594:	2b00      	cmp	r3, #0
 8010596:	d006      	beq.n	80105a6 <tcp_pcb_remove+0xca>
 8010598:	4b13      	ldr	r3, [pc, #76]	; (80105e8 <tcp_pcb_remove+0x10c>)
 801059a:	f640 0293 	movw	r2, #2195	; 0x893
 801059e:	4916      	ldr	r1, [pc, #88]	; (80105f8 <tcp_pcb_remove+0x11c>)
 80105a0:	4813      	ldr	r0, [pc, #76]	; (80105f0 <tcp_pcb_remove+0x114>)
 80105a2:	f007 fc4d 	bl	8017e40 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80105a6:	683b      	ldr	r3, [r7, #0]
 80105a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	d006      	beq.n	80105bc <tcp_pcb_remove+0xe0>
 80105ae:	4b0e      	ldr	r3, [pc, #56]	; (80105e8 <tcp_pcb_remove+0x10c>)
 80105b0:	f640 0294 	movw	r2, #2196	; 0x894
 80105b4:	4911      	ldr	r1, [pc, #68]	; (80105fc <tcp_pcb_remove+0x120>)
 80105b6:	480e      	ldr	r0, [pc, #56]	; (80105f0 <tcp_pcb_remove+0x114>)
 80105b8:	f007 fc42 	bl	8017e40 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d006      	beq.n	80105d2 <tcp_pcb_remove+0xf6>
 80105c4:	4b08      	ldr	r3, [pc, #32]	; (80105e8 <tcp_pcb_remove+0x10c>)
 80105c6:	f640 0296 	movw	r2, #2198	; 0x896
 80105ca:	490d      	ldr	r1, [pc, #52]	; (8010600 <tcp_pcb_remove+0x124>)
 80105cc:	4808      	ldr	r0, [pc, #32]	; (80105f0 <tcp_pcb_remove+0x114>)
 80105ce:	f007 fc37 	bl	8017e40 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80105d2:	683b      	ldr	r3, [r7, #0]
 80105d4:	2200      	movs	r2, #0
 80105d6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	2200      	movs	r2, #0
 80105dc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80105de:	bf00      	nop
 80105e0:	3710      	adds	r7, #16
 80105e2:	46bd      	mov	sp, r7
 80105e4:	bd80      	pop	{r7, pc}
 80105e6:	bf00      	nop
 80105e8:	0801b280 	.word	0x0801b280
 80105ec:	0801b8e8 	.word	0x0801b8e8
 80105f0:	0801b2c4 	.word	0x0801b2c4
 80105f4:	0801b904 	.word	0x0801b904
 80105f8:	0801b924 	.word	0x0801b924
 80105fc:	0801b93c 	.word	0x0801b93c
 8010600:	0801b958 	.word	0x0801b958

08010604 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b082      	sub	sp, #8
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d106      	bne.n	8010620 <tcp_next_iss+0x1c>
 8010612:	4b0a      	ldr	r3, [pc, #40]	; (801063c <tcp_next_iss+0x38>)
 8010614:	f640 02af 	movw	r2, #2223	; 0x8af
 8010618:	4909      	ldr	r1, [pc, #36]	; (8010640 <tcp_next_iss+0x3c>)
 801061a:	480a      	ldr	r0, [pc, #40]	; (8010644 <tcp_next_iss+0x40>)
 801061c:	f007 fc10 	bl	8017e40 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010620:	4b09      	ldr	r3, [pc, #36]	; (8010648 <tcp_next_iss+0x44>)
 8010622:	681a      	ldr	r2, [r3, #0]
 8010624:	4b09      	ldr	r3, [pc, #36]	; (801064c <tcp_next_iss+0x48>)
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	4413      	add	r3, r2
 801062a:	4a07      	ldr	r2, [pc, #28]	; (8010648 <tcp_next_iss+0x44>)
 801062c:	6013      	str	r3, [r2, #0]
  return iss;
 801062e:	4b06      	ldr	r3, [pc, #24]	; (8010648 <tcp_next_iss+0x44>)
 8010630:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8010632:	4618      	mov	r0, r3
 8010634:	3708      	adds	r7, #8
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}
 801063a:	bf00      	nop
 801063c:	0801b280 	.word	0x0801b280
 8010640:	0801b970 	.word	0x0801b970
 8010644:	0801b2c4 	.word	0x0801b2c4
 8010648:	20000728 	.word	0x20000728
 801064c:	20018ba8 	.word	0x20018ba8

08010650 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b086      	sub	sp, #24
 8010654:	af00      	add	r7, sp, #0
 8010656:	4603      	mov	r3, r0
 8010658:	60b9      	str	r1, [r7, #8]
 801065a:	607a      	str	r2, [r7, #4]
 801065c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d106      	bne.n	8010672 <tcp_eff_send_mss_netif+0x22>
 8010664:	4b14      	ldr	r3, [pc, #80]	; (80106b8 <tcp_eff_send_mss_netif+0x68>)
 8010666:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801066a:	4914      	ldr	r1, [pc, #80]	; (80106bc <tcp_eff_send_mss_netif+0x6c>)
 801066c:	4814      	ldr	r0, [pc, #80]	; (80106c0 <tcp_eff_send_mss_netif+0x70>)
 801066e:	f007 fbe7 	bl	8017e40 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d101      	bne.n	801067c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010678:	89fb      	ldrh	r3, [r7, #14]
 801067a:	e019      	b.n	80106b0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801067c:	68bb      	ldr	r3, [r7, #8]
 801067e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010680:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8010682:	8afb      	ldrh	r3, [r7, #22]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d012      	beq.n	80106ae <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010688:	2328      	movs	r3, #40	; 0x28
 801068a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801068c:	8afa      	ldrh	r2, [r7, #22]
 801068e:	8abb      	ldrh	r3, [r7, #20]
 8010690:	429a      	cmp	r2, r3
 8010692:	d904      	bls.n	801069e <tcp_eff_send_mss_netif+0x4e>
 8010694:	8afa      	ldrh	r2, [r7, #22]
 8010696:	8abb      	ldrh	r3, [r7, #20]
 8010698:	1ad3      	subs	r3, r2, r3
 801069a:	b29b      	uxth	r3, r3
 801069c:	e000      	b.n	80106a0 <tcp_eff_send_mss_netif+0x50>
 801069e:	2300      	movs	r3, #0
 80106a0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80106a2:	8a7a      	ldrh	r2, [r7, #18]
 80106a4:	89fb      	ldrh	r3, [r7, #14]
 80106a6:	4293      	cmp	r3, r2
 80106a8:	bf28      	it	cs
 80106aa:	4613      	movcs	r3, r2
 80106ac:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80106ae:	89fb      	ldrh	r3, [r7, #14]
}
 80106b0:	4618      	mov	r0, r3
 80106b2:	3718      	adds	r7, #24
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd80      	pop	{r7, pc}
 80106b8:	0801b280 	.word	0x0801b280
 80106bc:	0801b98c 	.word	0x0801b98c
 80106c0:	0801b2c4 	.word	0x0801b2c4

080106c4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b084      	sub	sp, #16
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	6078      	str	r0, [r7, #4]
 80106cc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80106ce:	683b      	ldr	r3, [r7, #0]
 80106d0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d119      	bne.n	801070c <tcp_netif_ip_addr_changed_pcblist+0x48>
 80106d8:	4b10      	ldr	r3, [pc, #64]	; (801071c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80106da:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80106de:	4910      	ldr	r1, [pc, #64]	; (8010720 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80106e0:	4810      	ldr	r0, [pc, #64]	; (8010724 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80106e2:	f007 fbad 	bl	8017e40 <iprintf>

  while (pcb != NULL) {
 80106e6:	e011      	b.n	801070c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	681a      	ldr	r2, [r3, #0]
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	429a      	cmp	r2, r3
 80106f2:	d108      	bne.n	8010706 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	68db      	ldr	r3, [r3, #12]
 80106f8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80106fa:	68f8      	ldr	r0, [r7, #12]
 80106fc:	f7fe fd20 	bl	800f140 <tcp_abort>
      pcb = next;
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	60fb      	str	r3, [r7, #12]
 8010704:	e002      	b.n	801070c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	68db      	ldr	r3, [r3, #12]
 801070a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d1ea      	bne.n	80106e8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010712:	bf00      	nop
 8010714:	bf00      	nop
 8010716:	3710      	adds	r7, #16
 8010718:	46bd      	mov	sp, r7
 801071a:	bd80      	pop	{r7, pc}
 801071c:	0801b280 	.word	0x0801b280
 8010720:	0801b9b4 	.word	0x0801b9b4
 8010724:	0801b2c4 	.word	0x0801b2c4

08010728 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010728:	b580      	push	{r7, lr}
 801072a:	b084      	sub	sp, #16
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
 8010730:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d02a      	beq.n	801078e <tcp_netif_ip_addr_changed+0x66>
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d026      	beq.n	801078e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010740:	4b15      	ldr	r3, [pc, #84]	; (8010798 <tcp_netif_ip_addr_changed+0x70>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	4619      	mov	r1, r3
 8010746:	6878      	ldr	r0, [r7, #4]
 8010748:	f7ff ffbc 	bl	80106c4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801074c:	4b13      	ldr	r3, [pc, #76]	; (801079c <tcp_netif_ip_addr_changed+0x74>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	4619      	mov	r1, r3
 8010752:	6878      	ldr	r0, [r7, #4]
 8010754:	f7ff ffb6 	bl	80106c4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010758:	683b      	ldr	r3, [r7, #0]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d017      	beq.n	801078e <tcp_netif_ip_addr_changed+0x66>
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	2b00      	cmp	r3, #0
 8010764:	d013      	beq.n	801078e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010766:	4b0e      	ldr	r3, [pc, #56]	; (80107a0 <tcp_netif_ip_addr_changed+0x78>)
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	60fb      	str	r3, [r7, #12]
 801076c:	e00c      	b.n	8010788 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	681a      	ldr	r2, [r3, #0]
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	429a      	cmp	r2, r3
 8010778:	d103      	bne.n	8010782 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801077a:	683b      	ldr	r3, [r7, #0]
 801077c:	681a      	ldr	r2, [r3, #0]
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	68db      	ldr	r3, [r3, #12]
 8010786:	60fb      	str	r3, [r7, #12]
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d1ef      	bne.n	801076e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801078e:	bf00      	nop
 8010790:	3710      	adds	r7, #16
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}
 8010796:	bf00      	nop
 8010798:	20018ba4 	.word	0x20018ba4
 801079c:	20018bb0 	.word	0x20018bb0
 80107a0:	20018bac 	.word	0x20018bac

080107a4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b082      	sub	sp, #8
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d007      	beq.n	80107c4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80107b8:	4618      	mov	r0, r3
 80107ba:	f7ff fb51 	bl	800fe60 <tcp_segs_free>
    pcb->ooseq = NULL;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	2200      	movs	r2, #0
 80107c2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80107c4:	bf00      	nop
 80107c6:	3708      	adds	r7, #8
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}

080107cc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80107cc:	b590      	push	{r4, r7, lr}
 80107ce:	b08d      	sub	sp, #52	; 0x34
 80107d0:	af04      	add	r7, sp, #16
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d105      	bne.n	80107e8 <tcp_input+0x1c>
 80107dc:	4b9b      	ldr	r3, [pc, #620]	; (8010a4c <tcp_input+0x280>)
 80107de:	2283      	movs	r2, #131	; 0x83
 80107e0:	499b      	ldr	r1, [pc, #620]	; (8010a50 <tcp_input+0x284>)
 80107e2:	489c      	ldr	r0, [pc, #624]	; (8010a54 <tcp_input+0x288>)
 80107e4:	f007 fb2c 	bl	8017e40 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	685b      	ldr	r3, [r3, #4]
 80107ec:	4a9a      	ldr	r2, [pc, #616]	; (8010a58 <tcp_input+0x28c>)
 80107ee:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	895b      	ldrh	r3, [r3, #10]
 80107f4:	2b13      	cmp	r3, #19
 80107f6:	f240 83c4 	bls.w	8010f82 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80107fa:	4b98      	ldr	r3, [pc, #608]	; (8010a5c <tcp_input+0x290>)
 80107fc:	695b      	ldr	r3, [r3, #20]
 80107fe:	4a97      	ldr	r2, [pc, #604]	; (8010a5c <tcp_input+0x290>)
 8010800:	6812      	ldr	r2, [r2, #0]
 8010802:	4611      	mov	r1, r2
 8010804:	4618      	mov	r0, r3
 8010806:	f006 f89b 	bl	8016940 <ip4_addr_isbroadcast_u32>
 801080a:	4603      	mov	r3, r0
 801080c:	2b00      	cmp	r3, #0
 801080e:	f040 83ba 	bne.w	8010f86 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010812:	4b92      	ldr	r3, [pc, #584]	; (8010a5c <tcp_input+0x290>)
 8010814:	695b      	ldr	r3, [r3, #20]
 8010816:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801081a:	2be0      	cmp	r3, #224	; 0xe0
 801081c:	f000 83b3 	beq.w	8010f86 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010820:	4b8d      	ldr	r3, [pc, #564]	; (8010a58 <tcp_input+0x28c>)
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	899b      	ldrh	r3, [r3, #12]
 8010826:	b29b      	uxth	r3, r3
 8010828:	4618      	mov	r0, r3
 801082a:	f7fc fa6b 	bl	800cd04 <lwip_htons>
 801082e:	4603      	mov	r3, r0
 8010830:	0b1b      	lsrs	r3, r3, #12
 8010832:	b29b      	uxth	r3, r3
 8010834:	b2db      	uxtb	r3, r3
 8010836:	009b      	lsls	r3, r3, #2
 8010838:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801083a:	7cbb      	ldrb	r3, [r7, #18]
 801083c:	2b13      	cmp	r3, #19
 801083e:	f240 83a4 	bls.w	8010f8a <tcp_input+0x7be>
 8010842:	7cbb      	ldrb	r3, [r7, #18]
 8010844:	b29a      	uxth	r2, r3
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	891b      	ldrh	r3, [r3, #8]
 801084a:	429a      	cmp	r2, r3
 801084c:	f200 839d 	bhi.w	8010f8a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010850:	7cbb      	ldrb	r3, [r7, #18]
 8010852:	b29b      	uxth	r3, r3
 8010854:	3b14      	subs	r3, #20
 8010856:	b29a      	uxth	r2, r3
 8010858:	4b81      	ldr	r3, [pc, #516]	; (8010a60 <tcp_input+0x294>)
 801085a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801085c:	4b81      	ldr	r3, [pc, #516]	; (8010a64 <tcp_input+0x298>)
 801085e:	2200      	movs	r2, #0
 8010860:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	895a      	ldrh	r2, [r3, #10]
 8010866:	7cbb      	ldrb	r3, [r7, #18]
 8010868:	b29b      	uxth	r3, r3
 801086a:	429a      	cmp	r2, r3
 801086c:	d309      	bcc.n	8010882 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801086e:	4b7c      	ldr	r3, [pc, #496]	; (8010a60 <tcp_input+0x294>)
 8010870:	881a      	ldrh	r2, [r3, #0]
 8010872:	4b7d      	ldr	r3, [pc, #500]	; (8010a68 <tcp_input+0x29c>)
 8010874:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010876:	7cbb      	ldrb	r3, [r7, #18]
 8010878:	4619      	mov	r1, r3
 801087a:	6878      	ldr	r0, [r7, #4]
 801087c:	f7fd fe46 	bl	800e50c <pbuf_remove_header>
 8010880:	e04e      	b.n	8010920 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d105      	bne.n	8010896 <tcp_input+0xca>
 801088a:	4b70      	ldr	r3, [pc, #448]	; (8010a4c <tcp_input+0x280>)
 801088c:	22c2      	movs	r2, #194	; 0xc2
 801088e:	4977      	ldr	r1, [pc, #476]	; (8010a6c <tcp_input+0x2a0>)
 8010890:	4870      	ldr	r0, [pc, #448]	; (8010a54 <tcp_input+0x288>)
 8010892:	f007 fad5 	bl	8017e40 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010896:	2114      	movs	r1, #20
 8010898:	6878      	ldr	r0, [r7, #4]
 801089a:	f7fd fe37 	bl	800e50c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	895a      	ldrh	r2, [r3, #10]
 80108a2:	4b71      	ldr	r3, [pc, #452]	; (8010a68 <tcp_input+0x29c>)
 80108a4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80108a6:	4b6e      	ldr	r3, [pc, #440]	; (8010a60 <tcp_input+0x294>)
 80108a8:	881a      	ldrh	r2, [r3, #0]
 80108aa:	4b6f      	ldr	r3, [pc, #444]	; (8010a68 <tcp_input+0x29c>)
 80108ac:	881b      	ldrh	r3, [r3, #0]
 80108ae:	1ad3      	subs	r3, r2, r3
 80108b0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80108b2:	4b6d      	ldr	r3, [pc, #436]	; (8010a68 <tcp_input+0x29c>)
 80108b4:	881b      	ldrh	r3, [r3, #0]
 80108b6:	4619      	mov	r1, r3
 80108b8:	6878      	ldr	r0, [r7, #4]
 80108ba:	f7fd fe27 	bl	800e50c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	895b      	ldrh	r3, [r3, #10]
 80108c4:	8a3a      	ldrh	r2, [r7, #16]
 80108c6:	429a      	cmp	r2, r3
 80108c8:	f200 8361 	bhi.w	8010f8e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	685b      	ldr	r3, [r3, #4]
 80108d2:	4a64      	ldr	r2, [pc, #400]	; (8010a64 <tcp_input+0x298>)
 80108d4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	8a3a      	ldrh	r2, [r7, #16]
 80108dc:	4611      	mov	r1, r2
 80108de:	4618      	mov	r0, r3
 80108e0:	f7fd fe14 	bl	800e50c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	891a      	ldrh	r2, [r3, #8]
 80108e8:	8a3b      	ldrh	r3, [r7, #16]
 80108ea:	1ad3      	subs	r3, r2, r3
 80108ec:	b29a      	uxth	r2, r3
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	895b      	ldrh	r3, [r3, #10]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d005      	beq.n	8010906 <tcp_input+0x13a>
 80108fa:	4b54      	ldr	r3, [pc, #336]	; (8010a4c <tcp_input+0x280>)
 80108fc:	22df      	movs	r2, #223	; 0xdf
 80108fe:	495c      	ldr	r1, [pc, #368]	; (8010a70 <tcp_input+0x2a4>)
 8010900:	4854      	ldr	r0, [pc, #336]	; (8010a54 <tcp_input+0x288>)
 8010902:	f007 fa9d 	bl	8017e40 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	891a      	ldrh	r2, [r3, #8]
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	891b      	ldrh	r3, [r3, #8]
 8010910:	429a      	cmp	r2, r3
 8010912:	d005      	beq.n	8010920 <tcp_input+0x154>
 8010914:	4b4d      	ldr	r3, [pc, #308]	; (8010a4c <tcp_input+0x280>)
 8010916:	22e0      	movs	r2, #224	; 0xe0
 8010918:	4956      	ldr	r1, [pc, #344]	; (8010a74 <tcp_input+0x2a8>)
 801091a:	484e      	ldr	r0, [pc, #312]	; (8010a54 <tcp_input+0x288>)
 801091c:	f007 fa90 	bl	8017e40 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010920:	4b4d      	ldr	r3, [pc, #308]	; (8010a58 <tcp_input+0x28c>)
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	881b      	ldrh	r3, [r3, #0]
 8010926:	b29b      	uxth	r3, r3
 8010928:	4a4b      	ldr	r2, [pc, #300]	; (8010a58 <tcp_input+0x28c>)
 801092a:	6814      	ldr	r4, [r2, #0]
 801092c:	4618      	mov	r0, r3
 801092e:	f7fc f9e9 	bl	800cd04 <lwip_htons>
 8010932:	4603      	mov	r3, r0
 8010934:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010936:	4b48      	ldr	r3, [pc, #288]	; (8010a58 <tcp_input+0x28c>)
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	885b      	ldrh	r3, [r3, #2]
 801093c:	b29b      	uxth	r3, r3
 801093e:	4a46      	ldr	r2, [pc, #280]	; (8010a58 <tcp_input+0x28c>)
 8010940:	6814      	ldr	r4, [r2, #0]
 8010942:	4618      	mov	r0, r3
 8010944:	f7fc f9de 	bl	800cd04 <lwip_htons>
 8010948:	4603      	mov	r3, r0
 801094a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801094c:	4b42      	ldr	r3, [pc, #264]	; (8010a58 <tcp_input+0x28c>)
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	685b      	ldr	r3, [r3, #4]
 8010952:	4a41      	ldr	r2, [pc, #260]	; (8010a58 <tcp_input+0x28c>)
 8010954:	6814      	ldr	r4, [r2, #0]
 8010956:	4618      	mov	r0, r3
 8010958:	f7fc f9e9 	bl	800cd2e <lwip_htonl>
 801095c:	4603      	mov	r3, r0
 801095e:	6063      	str	r3, [r4, #4]
 8010960:	6863      	ldr	r3, [r4, #4]
 8010962:	4a45      	ldr	r2, [pc, #276]	; (8010a78 <tcp_input+0x2ac>)
 8010964:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010966:	4b3c      	ldr	r3, [pc, #240]	; (8010a58 <tcp_input+0x28c>)
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	689b      	ldr	r3, [r3, #8]
 801096c:	4a3a      	ldr	r2, [pc, #232]	; (8010a58 <tcp_input+0x28c>)
 801096e:	6814      	ldr	r4, [r2, #0]
 8010970:	4618      	mov	r0, r3
 8010972:	f7fc f9dc 	bl	800cd2e <lwip_htonl>
 8010976:	4603      	mov	r3, r0
 8010978:	60a3      	str	r3, [r4, #8]
 801097a:	68a3      	ldr	r3, [r4, #8]
 801097c:	4a3f      	ldr	r2, [pc, #252]	; (8010a7c <tcp_input+0x2b0>)
 801097e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010980:	4b35      	ldr	r3, [pc, #212]	; (8010a58 <tcp_input+0x28c>)
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	89db      	ldrh	r3, [r3, #14]
 8010986:	b29b      	uxth	r3, r3
 8010988:	4a33      	ldr	r2, [pc, #204]	; (8010a58 <tcp_input+0x28c>)
 801098a:	6814      	ldr	r4, [r2, #0]
 801098c:	4618      	mov	r0, r3
 801098e:	f7fc f9b9 	bl	800cd04 <lwip_htons>
 8010992:	4603      	mov	r3, r0
 8010994:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010996:	4b30      	ldr	r3, [pc, #192]	; (8010a58 <tcp_input+0x28c>)
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	899b      	ldrh	r3, [r3, #12]
 801099c:	b29b      	uxth	r3, r3
 801099e:	4618      	mov	r0, r3
 80109a0:	f7fc f9b0 	bl	800cd04 <lwip_htons>
 80109a4:	4603      	mov	r3, r0
 80109a6:	b2db      	uxtb	r3, r3
 80109a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80109ac:	b2da      	uxtb	r2, r3
 80109ae:	4b34      	ldr	r3, [pc, #208]	; (8010a80 <tcp_input+0x2b4>)
 80109b0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	891a      	ldrh	r2, [r3, #8]
 80109b6:	4b33      	ldr	r3, [pc, #204]	; (8010a84 <tcp_input+0x2b8>)
 80109b8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80109ba:	4b31      	ldr	r3, [pc, #196]	; (8010a80 <tcp_input+0x2b4>)
 80109bc:	781b      	ldrb	r3, [r3, #0]
 80109be:	f003 0303 	and.w	r3, r3, #3
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d00c      	beq.n	80109e0 <tcp_input+0x214>
    tcplen++;
 80109c6:	4b2f      	ldr	r3, [pc, #188]	; (8010a84 <tcp_input+0x2b8>)
 80109c8:	881b      	ldrh	r3, [r3, #0]
 80109ca:	3301      	adds	r3, #1
 80109cc:	b29a      	uxth	r2, r3
 80109ce:	4b2d      	ldr	r3, [pc, #180]	; (8010a84 <tcp_input+0x2b8>)
 80109d0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	891a      	ldrh	r2, [r3, #8]
 80109d6:	4b2b      	ldr	r3, [pc, #172]	; (8010a84 <tcp_input+0x2b8>)
 80109d8:	881b      	ldrh	r3, [r3, #0]
 80109da:	429a      	cmp	r2, r3
 80109dc:	f200 82d9 	bhi.w	8010f92 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80109e0:	2300      	movs	r3, #0
 80109e2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80109e4:	4b28      	ldr	r3, [pc, #160]	; (8010a88 <tcp_input+0x2bc>)
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	61fb      	str	r3, [r7, #28]
 80109ea:	e09d      	b.n	8010b28 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80109ec:	69fb      	ldr	r3, [r7, #28]
 80109ee:	7d1b      	ldrb	r3, [r3, #20]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d105      	bne.n	8010a00 <tcp_input+0x234>
 80109f4:	4b15      	ldr	r3, [pc, #84]	; (8010a4c <tcp_input+0x280>)
 80109f6:	22fb      	movs	r2, #251	; 0xfb
 80109f8:	4924      	ldr	r1, [pc, #144]	; (8010a8c <tcp_input+0x2c0>)
 80109fa:	4816      	ldr	r0, [pc, #88]	; (8010a54 <tcp_input+0x288>)
 80109fc:	f007 fa20 	bl	8017e40 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010a00:	69fb      	ldr	r3, [r7, #28]
 8010a02:	7d1b      	ldrb	r3, [r3, #20]
 8010a04:	2b0a      	cmp	r3, #10
 8010a06:	d105      	bne.n	8010a14 <tcp_input+0x248>
 8010a08:	4b10      	ldr	r3, [pc, #64]	; (8010a4c <tcp_input+0x280>)
 8010a0a:	22fc      	movs	r2, #252	; 0xfc
 8010a0c:	4920      	ldr	r1, [pc, #128]	; (8010a90 <tcp_input+0x2c4>)
 8010a0e:	4811      	ldr	r0, [pc, #68]	; (8010a54 <tcp_input+0x288>)
 8010a10:	f007 fa16 	bl	8017e40 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010a14:	69fb      	ldr	r3, [r7, #28]
 8010a16:	7d1b      	ldrb	r3, [r3, #20]
 8010a18:	2b01      	cmp	r3, #1
 8010a1a:	d105      	bne.n	8010a28 <tcp_input+0x25c>
 8010a1c:	4b0b      	ldr	r3, [pc, #44]	; (8010a4c <tcp_input+0x280>)
 8010a1e:	22fd      	movs	r2, #253	; 0xfd
 8010a20:	491c      	ldr	r1, [pc, #112]	; (8010a94 <tcp_input+0x2c8>)
 8010a22:	480c      	ldr	r0, [pc, #48]	; (8010a54 <tcp_input+0x288>)
 8010a24:	f007 fa0c 	bl	8017e40 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010a28:	69fb      	ldr	r3, [r7, #28]
 8010a2a:	7a1b      	ldrb	r3, [r3, #8]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d033      	beq.n	8010a98 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010a30:	69fb      	ldr	r3, [r7, #28]
 8010a32:	7a1a      	ldrb	r2, [r3, #8]
 8010a34:	4b09      	ldr	r3, [pc, #36]	; (8010a5c <tcp_input+0x290>)
 8010a36:	685b      	ldr	r3, [r3, #4]
 8010a38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010a3c:	3301      	adds	r3, #1
 8010a3e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010a40:	429a      	cmp	r2, r3
 8010a42:	d029      	beq.n	8010a98 <tcp_input+0x2cc>
      prev = pcb;
 8010a44:	69fb      	ldr	r3, [r7, #28]
 8010a46:	61bb      	str	r3, [r7, #24]
      continue;
 8010a48:	e06b      	b.n	8010b22 <tcp_input+0x356>
 8010a4a:	bf00      	nop
 8010a4c:	0801b9e8 	.word	0x0801b9e8
 8010a50:	0801ba1c 	.word	0x0801ba1c
 8010a54:	0801ba34 	.word	0x0801ba34
 8010a58:	2000529c 	.word	0x2000529c
 8010a5c:	2000e2d0 	.word	0x2000e2d0
 8010a60:	200052a0 	.word	0x200052a0
 8010a64:	200052a4 	.word	0x200052a4
 8010a68:	200052a2 	.word	0x200052a2
 8010a6c:	0801ba5c 	.word	0x0801ba5c
 8010a70:	0801ba6c 	.word	0x0801ba6c
 8010a74:	0801ba78 	.word	0x0801ba78
 8010a78:	200052ac 	.word	0x200052ac
 8010a7c:	200052b0 	.word	0x200052b0
 8010a80:	200052b8 	.word	0x200052b8
 8010a84:	200052b6 	.word	0x200052b6
 8010a88:	20018ba4 	.word	0x20018ba4
 8010a8c:	0801ba98 	.word	0x0801ba98
 8010a90:	0801bac0 	.word	0x0801bac0
 8010a94:	0801baec 	.word	0x0801baec
    }

    if (pcb->remote_port == tcphdr->src &&
 8010a98:	69fb      	ldr	r3, [r7, #28]
 8010a9a:	8b1a      	ldrh	r2, [r3, #24]
 8010a9c:	4b94      	ldr	r3, [pc, #592]	; (8010cf0 <tcp_input+0x524>)
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	881b      	ldrh	r3, [r3, #0]
 8010aa2:	b29b      	uxth	r3, r3
 8010aa4:	429a      	cmp	r2, r3
 8010aa6:	d13a      	bne.n	8010b1e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010aa8:	69fb      	ldr	r3, [r7, #28]
 8010aaa:	8ada      	ldrh	r2, [r3, #22]
 8010aac:	4b90      	ldr	r3, [pc, #576]	; (8010cf0 <tcp_input+0x524>)
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	885b      	ldrh	r3, [r3, #2]
 8010ab2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010ab4:	429a      	cmp	r2, r3
 8010ab6:	d132      	bne.n	8010b1e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010ab8:	69fb      	ldr	r3, [r7, #28]
 8010aba:	685a      	ldr	r2, [r3, #4]
 8010abc:	4b8d      	ldr	r3, [pc, #564]	; (8010cf4 <tcp_input+0x528>)
 8010abe:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	d12c      	bne.n	8010b1e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010ac4:	69fb      	ldr	r3, [r7, #28]
 8010ac6:	681a      	ldr	r2, [r3, #0]
 8010ac8:	4b8a      	ldr	r3, [pc, #552]	; (8010cf4 <tcp_input+0x528>)
 8010aca:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010acc:	429a      	cmp	r2, r3
 8010ace:	d126      	bne.n	8010b1e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010ad0:	69fb      	ldr	r3, [r7, #28]
 8010ad2:	68db      	ldr	r3, [r3, #12]
 8010ad4:	69fa      	ldr	r2, [r7, #28]
 8010ad6:	429a      	cmp	r2, r3
 8010ad8:	d106      	bne.n	8010ae8 <tcp_input+0x31c>
 8010ada:	4b87      	ldr	r3, [pc, #540]	; (8010cf8 <tcp_input+0x52c>)
 8010adc:	f240 120d 	movw	r2, #269	; 0x10d
 8010ae0:	4986      	ldr	r1, [pc, #536]	; (8010cfc <tcp_input+0x530>)
 8010ae2:	4887      	ldr	r0, [pc, #540]	; (8010d00 <tcp_input+0x534>)
 8010ae4:	f007 f9ac 	bl	8017e40 <iprintf>
      if (prev != NULL) {
 8010ae8:	69bb      	ldr	r3, [r7, #24]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d00a      	beq.n	8010b04 <tcp_input+0x338>
        prev->next = pcb->next;
 8010aee:	69fb      	ldr	r3, [r7, #28]
 8010af0:	68da      	ldr	r2, [r3, #12]
 8010af2:	69bb      	ldr	r3, [r7, #24]
 8010af4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010af6:	4b83      	ldr	r3, [pc, #524]	; (8010d04 <tcp_input+0x538>)
 8010af8:	681a      	ldr	r2, [r3, #0]
 8010afa:	69fb      	ldr	r3, [r7, #28]
 8010afc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010afe:	4a81      	ldr	r2, [pc, #516]	; (8010d04 <tcp_input+0x538>)
 8010b00:	69fb      	ldr	r3, [r7, #28]
 8010b02:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010b04:	69fb      	ldr	r3, [r7, #28]
 8010b06:	68db      	ldr	r3, [r3, #12]
 8010b08:	69fa      	ldr	r2, [r7, #28]
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	d111      	bne.n	8010b32 <tcp_input+0x366>
 8010b0e:	4b7a      	ldr	r3, [pc, #488]	; (8010cf8 <tcp_input+0x52c>)
 8010b10:	f240 1215 	movw	r2, #277	; 0x115
 8010b14:	497c      	ldr	r1, [pc, #496]	; (8010d08 <tcp_input+0x53c>)
 8010b16:	487a      	ldr	r0, [pc, #488]	; (8010d00 <tcp_input+0x534>)
 8010b18:	f007 f992 	bl	8017e40 <iprintf>
      break;
 8010b1c:	e009      	b.n	8010b32 <tcp_input+0x366>
    }
    prev = pcb;
 8010b1e:	69fb      	ldr	r3, [r7, #28]
 8010b20:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b22:	69fb      	ldr	r3, [r7, #28]
 8010b24:	68db      	ldr	r3, [r3, #12]
 8010b26:	61fb      	str	r3, [r7, #28]
 8010b28:	69fb      	ldr	r3, [r7, #28]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	f47f af5e 	bne.w	80109ec <tcp_input+0x220>
 8010b30:	e000      	b.n	8010b34 <tcp_input+0x368>
      break;
 8010b32:	bf00      	nop
  }

  if (pcb == NULL) {
 8010b34:	69fb      	ldr	r3, [r7, #28]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	f040 8095 	bne.w	8010c66 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b3c:	4b73      	ldr	r3, [pc, #460]	; (8010d0c <tcp_input+0x540>)
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	61fb      	str	r3, [r7, #28]
 8010b42:	e03f      	b.n	8010bc4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010b44:	69fb      	ldr	r3, [r7, #28]
 8010b46:	7d1b      	ldrb	r3, [r3, #20]
 8010b48:	2b0a      	cmp	r3, #10
 8010b4a:	d006      	beq.n	8010b5a <tcp_input+0x38e>
 8010b4c:	4b6a      	ldr	r3, [pc, #424]	; (8010cf8 <tcp_input+0x52c>)
 8010b4e:	f240 121f 	movw	r2, #287	; 0x11f
 8010b52:	496f      	ldr	r1, [pc, #444]	; (8010d10 <tcp_input+0x544>)
 8010b54:	486a      	ldr	r0, [pc, #424]	; (8010d00 <tcp_input+0x534>)
 8010b56:	f007 f973 	bl	8017e40 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010b5a:	69fb      	ldr	r3, [r7, #28]
 8010b5c:	7a1b      	ldrb	r3, [r3, #8]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d009      	beq.n	8010b76 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010b62:	69fb      	ldr	r3, [r7, #28]
 8010b64:	7a1a      	ldrb	r2, [r3, #8]
 8010b66:	4b63      	ldr	r3, [pc, #396]	; (8010cf4 <tcp_input+0x528>)
 8010b68:	685b      	ldr	r3, [r3, #4]
 8010b6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010b6e:	3301      	adds	r3, #1
 8010b70:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010b72:	429a      	cmp	r2, r3
 8010b74:	d122      	bne.n	8010bbc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010b76:	69fb      	ldr	r3, [r7, #28]
 8010b78:	8b1a      	ldrh	r2, [r3, #24]
 8010b7a:	4b5d      	ldr	r3, [pc, #372]	; (8010cf0 <tcp_input+0x524>)
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	881b      	ldrh	r3, [r3, #0]
 8010b80:	b29b      	uxth	r3, r3
 8010b82:	429a      	cmp	r2, r3
 8010b84:	d11b      	bne.n	8010bbe <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010b86:	69fb      	ldr	r3, [r7, #28]
 8010b88:	8ada      	ldrh	r2, [r3, #22]
 8010b8a:	4b59      	ldr	r3, [pc, #356]	; (8010cf0 <tcp_input+0x524>)
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	885b      	ldrh	r3, [r3, #2]
 8010b90:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010b92:	429a      	cmp	r2, r3
 8010b94:	d113      	bne.n	8010bbe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010b96:	69fb      	ldr	r3, [r7, #28]
 8010b98:	685a      	ldr	r2, [r3, #4]
 8010b9a:	4b56      	ldr	r3, [pc, #344]	; (8010cf4 <tcp_input+0x528>)
 8010b9c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010b9e:	429a      	cmp	r2, r3
 8010ba0:	d10d      	bne.n	8010bbe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010ba2:	69fb      	ldr	r3, [r7, #28]
 8010ba4:	681a      	ldr	r2, [r3, #0]
 8010ba6:	4b53      	ldr	r3, [pc, #332]	; (8010cf4 <tcp_input+0x528>)
 8010ba8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010baa:	429a      	cmp	r2, r3
 8010bac:	d107      	bne.n	8010bbe <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010bae:	69f8      	ldr	r0, [r7, #28]
 8010bb0:	f000 fb54 	bl	801125c <tcp_timewait_input>
        }
        pbuf_free(p);
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f7fd fd2f 	bl	800e618 <pbuf_free>
        return;
 8010bba:	e1f0      	b.n	8010f9e <tcp_input+0x7d2>
        continue;
 8010bbc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010bbe:	69fb      	ldr	r3, [r7, #28]
 8010bc0:	68db      	ldr	r3, [r3, #12]
 8010bc2:	61fb      	str	r3, [r7, #28]
 8010bc4:	69fb      	ldr	r3, [r7, #28]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d1bc      	bne.n	8010b44 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010bca:	2300      	movs	r3, #0
 8010bcc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010bce:	4b51      	ldr	r3, [pc, #324]	; (8010d14 <tcp_input+0x548>)
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	617b      	str	r3, [r7, #20]
 8010bd4:	e02a      	b.n	8010c2c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010bd6:	697b      	ldr	r3, [r7, #20]
 8010bd8:	7a1b      	ldrb	r3, [r3, #8]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d00c      	beq.n	8010bf8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	7a1a      	ldrb	r2, [r3, #8]
 8010be2:	4b44      	ldr	r3, [pc, #272]	; (8010cf4 <tcp_input+0x528>)
 8010be4:	685b      	ldr	r3, [r3, #4]
 8010be6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010bea:	3301      	adds	r3, #1
 8010bec:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010bee:	429a      	cmp	r2, r3
 8010bf0:	d002      	beq.n	8010bf8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010bf2:	697b      	ldr	r3, [r7, #20]
 8010bf4:	61bb      	str	r3, [r7, #24]
        continue;
 8010bf6:	e016      	b.n	8010c26 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010bf8:	697b      	ldr	r3, [r7, #20]
 8010bfa:	8ada      	ldrh	r2, [r3, #22]
 8010bfc:	4b3c      	ldr	r3, [pc, #240]	; (8010cf0 <tcp_input+0x524>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	885b      	ldrh	r3, [r3, #2]
 8010c02:	b29b      	uxth	r3, r3
 8010c04:	429a      	cmp	r2, r3
 8010c06:	d10c      	bne.n	8010c22 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010c08:	697b      	ldr	r3, [r7, #20]
 8010c0a:	681a      	ldr	r2, [r3, #0]
 8010c0c:	4b39      	ldr	r3, [pc, #228]	; (8010cf4 <tcp_input+0x528>)
 8010c0e:	695b      	ldr	r3, [r3, #20]
 8010c10:	429a      	cmp	r2, r3
 8010c12:	d00f      	beq.n	8010c34 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010c14:	697b      	ldr	r3, [r7, #20]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d00d      	beq.n	8010c36 <tcp_input+0x46a>
 8010c1a:	697b      	ldr	r3, [r7, #20]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d009      	beq.n	8010c36 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010c22:	697b      	ldr	r3, [r7, #20]
 8010c24:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010c26:	697b      	ldr	r3, [r7, #20]
 8010c28:	68db      	ldr	r3, [r3, #12]
 8010c2a:	617b      	str	r3, [r7, #20]
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d1d1      	bne.n	8010bd6 <tcp_input+0x40a>
 8010c32:	e000      	b.n	8010c36 <tcp_input+0x46a>
            break;
 8010c34:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010c36:	697b      	ldr	r3, [r7, #20]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d014      	beq.n	8010c66 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010c3c:	69bb      	ldr	r3, [r7, #24]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d00a      	beq.n	8010c58 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010c42:	697b      	ldr	r3, [r7, #20]
 8010c44:	68da      	ldr	r2, [r3, #12]
 8010c46:	69bb      	ldr	r3, [r7, #24]
 8010c48:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010c4a:	4b32      	ldr	r3, [pc, #200]	; (8010d14 <tcp_input+0x548>)
 8010c4c:	681a      	ldr	r2, [r3, #0]
 8010c4e:	697b      	ldr	r3, [r7, #20]
 8010c50:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010c52:	4a30      	ldr	r2, [pc, #192]	; (8010d14 <tcp_input+0x548>)
 8010c54:	697b      	ldr	r3, [r7, #20]
 8010c56:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010c58:	6978      	ldr	r0, [r7, #20]
 8010c5a:	f000 fa01 	bl	8011060 <tcp_listen_input>
      }
      pbuf_free(p);
 8010c5e:	6878      	ldr	r0, [r7, #4]
 8010c60:	f7fd fcda 	bl	800e618 <pbuf_free>
      return;
 8010c64:	e19b      	b.n	8010f9e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010c66:	69fb      	ldr	r3, [r7, #28]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	f000 8160 	beq.w	8010f2e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010c6e:	4b2a      	ldr	r3, [pc, #168]	; (8010d18 <tcp_input+0x54c>)
 8010c70:	2200      	movs	r2, #0
 8010c72:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	891a      	ldrh	r2, [r3, #8]
 8010c78:	4b27      	ldr	r3, [pc, #156]	; (8010d18 <tcp_input+0x54c>)
 8010c7a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010c7c:	4a26      	ldr	r2, [pc, #152]	; (8010d18 <tcp_input+0x54c>)
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010c82:	4b1b      	ldr	r3, [pc, #108]	; (8010cf0 <tcp_input+0x524>)
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	4a24      	ldr	r2, [pc, #144]	; (8010d18 <tcp_input+0x54c>)
 8010c88:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010c8a:	4b24      	ldr	r3, [pc, #144]	; (8010d1c <tcp_input+0x550>)
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010c90:	4b23      	ldr	r3, [pc, #140]	; (8010d20 <tcp_input+0x554>)
 8010c92:	2200      	movs	r2, #0
 8010c94:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010c96:	4b23      	ldr	r3, [pc, #140]	; (8010d24 <tcp_input+0x558>)
 8010c98:	2200      	movs	r2, #0
 8010c9a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010c9c:	4b22      	ldr	r3, [pc, #136]	; (8010d28 <tcp_input+0x55c>)
 8010c9e:	781b      	ldrb	r3, [r3, #0]
 8010ca0:	f003 0308 	and.w	r3, r3, #8
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d006      	beq.n	8010cb6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	7b5b      	ldrb	r3, [r3, #13]
 8010cac:	f043 0301 	orr.w	r3, r3, #1
 8010cb0:	b2da      	uxtb	r2, r3
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010cb6:	69fb      	ldr	r3, [r7, #28]
 8010cb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d038      	beq.n	8010d30 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010cbe:	69f8      	ldr	r0, [r7, #28]
 8010cc0:	f7ff f852 	bl	800fd68 <tcp_process_refused_data>
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	f113 0f0d 	cmn.w	r3, #13
 8010cca:	d007      	beq.n	8010cdc <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010ccc:	69fb      	ldr	r3, [r7, #28]
 8010cce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d02d      	beq.n	8010d30 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010cd4:	4b15      	ldr	r3, [pc, #84]	; (8010d2c <tcp_input+0x560>)
 8010cd6:	881b      	ldrh	r3, [r3, #0]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d029      	beq.n	8010d30 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010cdc:	69fb      	ldr	r3, [r7, #28]
 8010cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	f040 8104 	bne.w	8010eee <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010ce6:	69f8      	ldr	r0, [r7, #28]
 8010ce8:	f003 fe16 	bl	8014918 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010cec:	e0ff      	b.n	8010eee <tcp_input+0x722>
 8010cee:	bf00      	nop
 8010cf0:	2000529c 	.word	0x2000529c
 8010cf4:	2000e2d0 	.word	0x2000e2d0
 8010cf8:	0801b9e8 	.word	0x0801b9e8
 8010cfc:	0801bb14 	.word	0x0801bb14
 8010d00:	0801ba34 	.word	0x0801ba34
 8010d04:	20018ba4 	.word	0x20018ba4
 8010d08:	0801bb40 	.word	0x0801bb40
 8010d0c:	20018bb4 	.word	0x20018bb4
 8010d10:	0801bb6c 	.word	0x0801bb6c
 8010d14:	20018bac 	.word	0x20018bac
 8010d18:	2000528c 	.word	0x2000528c
 8010d1c:	200052bc 	.word	0x200052bc
 8010d20:	200052b9 	.word	0x200052b9
 8010d24:	200052b4 	.word	0x200052b4
 8010d28:	200052b8 	.word	0x200052b8
 8010d2c:	200052b6 	.word	0x200052b6
      }
    }
    tcp_input_pcb = pcb;
 8010d30:	4a9c      	ldr	r2, [pc, #624]	; (8010fa4 <tcp_input+0x7d8>)
 8010d32:	69fb      	ldr	r3, [r7, #28]
 8010d34:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8010d36:	69f8      	ldr	r0, [r7, #28]
 8010d38:	f000 fb0a 	bl	8011350 <tcp_process>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010d40:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010d44:	f113 0f0d 	cmn.w	r3, #13
 8010d48:	f000 80d3 	beq.w	8010ef2 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8010d4c:	4b96      	ldr	r3, [pc, #600]	; (8010fa8 <tcp_input+0x7dc>)
 8010d4e:	781b      	ldrb	r3, [r3, #0]
 8010d50:	f003 0308 	and.w	r3, r3, #8
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d015      	beq.n	8010d84 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010d58:	69fb      	ldr	r3, [r7, #28]
 8010d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d008      	beq.n	8010d74 <tcp_input+0x5a8>
 8010d62:	69fb      	ldr	r3, [r7, #28]
 8010d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d68:	69fa      	ldr	r2, [r7, #28]
 8010d6a:	6912      	ldr	r2, [r2, #16]
 8010d6c:	f06f 010d 	mvn.w	r1, #13
 8010d70:	4610      	mov	r0, r2
 8010d72:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010d74:	69f9      	ldr	r1, [r7, #28]
 8010d76:	488d      	ldr	r0, [pc, #564]	; (8010fac <tcp_input+0x7e0>)
 8010d78:	f7ff fbb0 	bl	80104dc <tcp_pcb_remove>
        tcp_free(pcb);
 8010d7c:	69f8      	ldr	r0, [r7, #28]
 8010d7e:	f7fd fef7 	bl	800eb70 <tcp_free>
 8010d82:	e0c1      	b.n	8010f08 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8010d84:	2300      	movs	r3, #0
 8010d86:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8010d88:	4b89      	ldr	r3, [pc, #548]	; (8010fb0 <tcp_input+0x7e4>)
 8010d8a:	881b      	ldrh	r3, [r3, #0]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d01d      	beq.n	8010dcc <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010d90:	4b87      	ldr	r3, [pc, #540]	; (8010fb0 <tcp_input+0x7e4>)
 8010d92:	881b      	ldrh	r3, [r3, #0]
 8010d94:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8010d96:	69fb      	ldr	r3, [r7, #28]
 8010d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d00a      	beq.n	8010db6 <tcp_input+0x5ea>
 8010da0:	69fb      	ldr	r3, [r7, #28]
 8010da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010da6:	69fa      	ldr	r2, [r7, #28]
 8010da8:	6910      	ldr	r0, [r2, #16]
 8010daa:	89fa      	ldrh	r2, [r7, #14]
 8010dac:	69f9      	ldr	r1, [r7, #28]
 8010dae:	4798      	blx	r3
 8010db0:	4603      	mov	r3, r0
 8010db2:	74fb      	strb	r3, [r7, #19]
 8010db4:	e001      	b.n	8010dba <tcp_input+0x5ee>
 8010db6:	2300      	movs	r3, #0
 8010db8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010dba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010dbe:	f113 0f0d 	cmn.w	r3, #13
 8010dc2:	f000 8098 	beq.w	8010ef6 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8010dc6:	4b7a      	ldr	r3, [pc, #488]	; (8010fb0 <tcp_input+0x7e4>)
 8010dc8:	2200      	movs	r2, #0
 8010dca:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010dcc:	69f8      	ldr	r0, [r7, #28]
 8010dce:	f000 f907 	bl	8010fe0 <tcp_input_delayed_close>
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	f040 8090 	bne.w	8010efa <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010dda:	4b76      	ldr	r3, [pc, #472]	; (8010fb4 <tcp_input+0x7e8>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d041      	beq.n	8010e66 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010de2:	69fb      	ldr	r3, [r7, #28]
 8010de4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d006      	beq.n	8010df8 <tcp_input+0x62c>
 8010dea:	4b73      	ldr	r3, [pc, #460]	; (8010fb8 <tcp_input+0x7ec>)
 8010dec:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010df0:	4972      	ldr	r1, [pc, #456]	; (8010fbc <tcp_input+0x7f0>)
 8010df2:	4873      	ldr	r0, [pc, #460]	; (8010fc0 <tcp_input+0x7f4>)
 8010df4:	f007 f824 	bl	8017e40 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010df8:	69fb      	ldr	r3, [r7, #28]
 8010dfa:	8b5b      	ldrh	r3, [r3, #26]
 8010dfc:	f003 0310 	and.w	r3, r3, #16
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d008      	beq.n	8010e16 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010e04:	4b6b      	ldr	r3, [pc, #428]	; (8010fb4 <tcp_input+0x7e8>)
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	4618      	mov	r0, r3
 8010e0a:	f7fd fc05 	bl	800e618 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010e0e:	69f8      	ldr	r0, [r7, #28]
 8010e10:	f7fe f996 	bl	800f140 <tcp_abort>
            goto aborted;
 8010e14:	e078      	b.n	8010f08 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8010e16:	69fb      	ldr	r3, [r7, #28]
 8010e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d00c      	beq.n	8010e3a <tcp_input+0x66e>
 8010e20:	69fb      	ldr	r3, [r7, #28]
 8010e22:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010e26:	69fb      	ldr	r3, [r7, #28]
 8010e28:	6918      	ldr	r0, [r3, #16]
 8010e2a:	4b62      	ldr	r3, [pc, #392]	; (8010fb4 <tcp_input+0x7e8>)
 8010e2c:	681a      	ldr	r2, [r3, #0]
 8010e2e:	2300      	movs	r3, #0
 8010e30:	69f9      	ldr	r1, [r7, #28]
 8010e32:	47a0      	blx	r4
 8010e34:	4603      	mov	r3, r0
 8010e36:	74fb      	strb	r3, [r7, #19]
 8010e38:	e008      	b.n	8010e4c <tcp_input+0x680>
 8010e3a:	4b5e      	ldr	r3, [pc, #376]	; (8010fb4 <tcp_input+0x7e8>)
 8010e3c:	681a      	ldr	r2, [r3, #0]
 8010e3e:	2300      	movs	r3, #0
 8010e40:	69f9      	ldr	r1, [r7, #28]
 8010e42:	2000      	movs	r0, #0
 8010e44:	f7ff f884 	bl	800ff50 <tcp_recv_null>
 8010e48:	4603      	mov	r3, r0
 8010e4a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010e4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010e50:	f113 0f0d 	cmn.w	r3, #13
 8010e54:	d053      	beq.n	8010efe <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8010e56:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d003      	beq.n	8010e66 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010e5e:	4b55      	ldr	r3, [pc, #340]	; (8010fb4 <tcp_input+0x7e8>)
 8010e60:	681a      	ldr	r2, [r3, #0]
 8010e62:	69fb      	ldr	r3, [r7, #28]
 8010e64:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8010e66:	4b50      	ldr	r3, [pc, #320]	; (8010fa8 <tcp_input+0x7dc>)
 8010e68:	781b      	ldrb	r3, [r3, #0]
 8010e6a:	f003 0320 	and.w	r3, r3, #32
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d030      	beq.n	8010ed4 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8010e72:	69fb      	ldr	r3, [r7, #28]
 8010e74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d009      	beq.n	8010e8e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010e7a:	69fb      	ldr	r3, [r7, #28]
 8010e7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010e7e:	7b5a      	ldrb	r2, [r3, #13]
 8010e80:	69fb      	ldr	r3, [r7, #28]
 8010e82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010e84:	f042 0220 	orr.w	r2, r2, #32
 8010e88:	b2d2      	uxtb	r2, r2
 8010e8a:	735a      	strb	r2, [r3, #13]
 8010e8c:	e022      	b.n	8010ed4 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010e8e:	69fb      	ldr	r3, [r7, #28]
 8010e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010e92:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010e96:	d005      	beq.n	8010ea4 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8010e98:	69fb      	ldr	r3, [r7, #28]
 8010e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010e9c:	3301      	adds	r3, #1
 8010e9e:	b29a      	uxth	r2, r3
 8010ea0:	69fb      	ldr	r3, [r7, #28]
 8010ea2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010ea4:	69fb      	ldr	r3, [r7, #28]
 8010ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d00b      	beq.n	8010ec6 <tcp_input+0x6fa>
 8010eae:	69fb      	ldr	r3, [r7, #28]
 8010eb0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010eb4:	69fb      	ldr	r3, [r7, #28]
 8010eb6:	6918      	ldr	r0, [r3, #16]
 8010eb8:	2300      	movs	r3, #0
 8010eba:	2200      	movs	r2, #0
 8010ebc:	69f9      	ldr	r1, [r7, #28]
 8010ebe:	47a0      	blx	r4
 8010ec0:	4603      	mov	r3, r0
 8010ec2:	74fb      	strb	r3, [r7, #19]
 8010ec4:	e001      	b.n	8010eca <tcp_input+0x6fe>
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8010eca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010ece:	f113 0f0d 	cmn.w	r3, #13
 8010ed2:	d016      	beq.n	8010f02 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010ed4:	4b33      	ldr	r3, [pc, #204]	; (8010fa4 <tcp_input+0x7d8>)
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010eda:	69f8      	ldr	r0, [r7, #28]
 8010edc:	f000 f880 	bl	8010fe0 <tcp_input_delayed_close>
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d10f      	bne.n	8010f06 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8010ee6:	69f8      	ldr	r0, [r7, #28]
 8010ee8:	f002 ff10 	bl	8013d0c <tcp_output>
 8010eec:	e00c      	b.n	8010f08 <tcp_input+0x73c>
        goto aborted;
 8010eee:	bf00      	nop
 8010ef0:	e00a      	b.n	8010f08 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010ef2:	bf00      	nop
 8010ef4:	e008      	b.n	8010f08 <tcp_input+0x73c>
              goto aborted;
 8010ef6:	bf00      	nop
 8010ef8:	e006      	b.n	8010f08 <tcp_input+0x73c>
          goto aborted;
 8010efa:	bf00      	nop
 8010efc:	e004      	b.n	8010f08 <tcp_input+0x73c>
            goto aborted;
 8010efe:	bf00      	nop
 8010f00:	e002      	b.n	8010f08 <tcp_input+0x73c>
              goto aborted;
 8010f02:	bf00      	nop
 8010f04:	e000      	b.n	8010f08 <tcp_input+0x73c>
          goto aborted;
 8010f06:	bf00      	nop
    tcp_input_pcb = NULL;
 8010f08:	4b26      	ldr	r3, [pc, #152]	; (8010fa4 <tcp_input+0x7d8>)
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010f0e:	4b29      	ldr	r3, [pc, #164]	; (8010fb4 <tcp_input+0x7e8>)
 8010f10:	2200      	movs	r2, #0
 8010f12:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8010f14:	4b2b      	ldr	r3, [pc, #172]	; (8010fc4 <tcp_input+0x7f8>)
 8010f16:	685b      	ldr	r3, [r3, #4]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d03f      	beq.n	8010f9c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8010f1c:	4b29      	ldr	r3, [pc, #164]	; (8010fc4 <tcp_input+0x7f8>)
 8010f1e:	685b      	ldr	r3, [r3, #4]
 8010f20:	4618      	mov	r0, r3
 8010f22:	f7fd fb79 	bl	800e618 <pbuf_free>
      inseg.p = NULL;
 8010f26:	4b27      	ldr	r3, [pc, #156]	; (8010fc4 <tcp_input+0x7f8>)
 8010f28:	2200      	movs	r2, #0
 8010f2a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010f2c:	e036      	b.n	8010f9c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010f2e:	4b26      	ldr	r3, [pc, #152]	; (8010fc8 <tcp_input+0x7fc>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	899b      	ldrh	r3, [r3, #12]
 8010f34:	b29b      	uxth	r3, r3
 8010f36:	4618      	mov	r0, r3
 8010f38:	f7fb fee4 	bl	800cd04 <lwip_htons>
 8010f3c:	4603      	mov	r3, r0
 8010f3e:	b2db      	uxtb	r3, r3
 8010f40:	f003 0304 	and.w	r3, r3, #4
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d118      	bne.n	8010f7a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f48:	4b20      	ldr	r3, [pc, #128]	; (8010fcc <tcp_input+0x800>)
 8010f4a:	6819      	ldr	r1, [r3, #0]
 8010f4c:	4b20      	ldr	r3, [pc, #128]	; (8010fd0 <tcp_input+0x804>)
 8010f4e:	881b      	ldrh	r3, [r3, #0]
 8010f50:	461a      	mov	r2, r3
 8010f52:	4b20      	ldr	r3, [pc, #128]	; (8010fd4 <tcp_input+0x808>)
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010f58:	4b1b      	ldr	r3, [pc, #108]	; (8010fc8 <tcp_input+0x7fc>)
 8010f5a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f5c:	885b      	ldrh	r3, [r3, #2]
 8010f5e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010f60:	4a19      	ldr	r2, [pc, #100]	; (8010fc8 <tcp_input+0x7fc>)
 8010f62:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010f64:	8812      	ldrh	r2, [r2, #0]
 8010f66:	b292      	uxth	r2, r2
 8010f68:	9202      	str	r2, [sp, #8]
 8010f6a:	9301      	str	r3, [sp, #4]
 8010f6c:	4b1a      	ldr	r3, [pc, #104]	; (8010fd8 <tcp_input+0x80c>)
 8010f6e:	9300      	str	r3, [sp, #0]
 8010f70:	4b1a      	ldr	r3, [pc, #104]	; (8010fdc <tcp_input+0x810>)
 8010f72:	4602      	mov	r2, r0
 8010f74:	2000      	movs	r0, #0
 8010f76:	f003 fc7d 	bl	8014874 <tcp_rst>
    pbuf_free(p);
 8010f7a:	6878      	ldr	r0, [r7, #4]
 8010f7c:	f7fd fb4c 	bl	800e618 <pbuf_free>
  return;
 8010f80:	e00c      	b.n	8010f9c <tcp_input+0x7d0>
    goto dropped;
 8010f82:	bf00      	nop
 8010f84:	e006      	b.n	8010f94 <tcp_input+0x7c8>
    goto dropped;
 8010f86:	bf00      	nop
 8010f88:	e004      	b.n	8010f94 <tcp_input+0x7c8>
    goto dropped;
 8010f8a:	bf00      	nop
 8010f8c:	e002      	b.n	8010f94 <tcp_input+0x7c8>
      goto dropped;
 8010f8e:	bf00      	nop
 8010f90:	e000      	b.n	8010f94 <tcp_input+0x7c8>
      goto dropped;
 8010f92:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8010f94:	6878      	ldr	r0, [r7, #4]
 8010f96:	f7fd fb3f 	bl	800e618 <pbuf_free>
 8010f9a:	e000      	b.n	8010f9e <tcp_input+0x7d2>
  return;
 8010f9c:	bf00      	nop
}
 8010f9e:	3724      	adds	r7, #36	; 0x24
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	bd90      	pop	{r4, r7, pc}
 8010fa4:	20018bb8 	.word	0x20018bb8
 8010fa8:	200052b9 	.word	0x200052b9
 8010fac:	20018ba4 	.word	0x20018ba4
 8010fb0:	200052b4 	.word	0x200052b4
 8010fb4:	200052bc 	.word	0x200052bc
 8010fb8:	0801b9e8 	.word	0x0801b9e8
 8010fbc:	0801bb9c 	.word	0x0801bb9c
 8010fc0:	0801ba34 	.word	0x0801ba34
 8010fc4:	2000528c 	.word	0x2000528c
 8010fc8:	2000529c 	.word	0x2000529c
 8010fcc:	200052b0 	.word	0x200052b0
 8010fd0:	200052b6 	.word	0x200052b6
 8010fd4:	200052ac 	.word	0x200052ac
 8010fd8:	2000e2e0 	.word	0x2000e2e0
 8010fdc:	2000e2e4 	.word	0x2000e2e4

08010fe0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010fe0:	b580      	push	{r7, lr}
 8010fe2:	b082      	sub	sp, #8
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d106      	bne.n	8010ffc <tcp_input_delayed_close+0x1c>
 8010fee:	4b17      	ldr	r3, [pc, #92]	; (801104c <tcp_input_delayed_close+0x6c>)
 8010ff0:	f240 225a 	movw	r2, #602	; 0x25a
 8010ff4:	4916      	ldr	r1, [pc, #88]	; (8011050 <tcp_input_delayed_close+0x70>)
 8010ff6:	4817      	ldr	r0, [pc, #92]	; (8011054 <tcp_input_delayed_close+0x74>)
 8010ff8:	f006 ff22 	bl	8017e40 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010ffc:	4b16      	ldr	r3, [pc, #88]	; (8011058 <tcp_input_delayed_close+0x78>)
 8010ffe:	781b      	ldrb	r3, [r3, #0]
 8011000:	f003 0310 	and.w	r3, r3, #16
 8011004:	2b00      	cmp	r3, #0
 8011006:	d01c      	beq.n	8011042 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	8b5b      	ldrh	r3, [r3, #26]
 801100c:	f003 0310 	and.w	r3, r3, #16
 8011010:	2b00      	cmp	r3, #0
 8011012:	d10d      	bne.n	8011030 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801101a:	2b00      	cmp	r3, #0
 801101c:	d008      	beq.n	8011030 <tcp_input_delayed_close+0x50>
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011024:	687a      	ldr	r2, [r7, #4]
 8011026:	6912      	ldr	r2, [r2, #16]
 8011028:	f06f 010e 	mvn.w	r1, #14
 801102c:	4610      	mov	r0, r2
 801102e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011030:	6879      	ldr	r1, [r7, #4]
 8011032:	480a      	ldr	r0, [pc, #40]	; (801105c <tcp_input_delayed_close+0x7c>)
 8011034:	f7ff fa52 	bl	80104dc <tcp_pcb_remove>
    tcp_free(pcb);
 8011038:	6878      	ldr	r0, [r7, #4]
 801103a:	f7fd fd99 	bl	800eb70 <tcp_free>
    return 1;
 801103e:	2301      	movs	r3, #1
 8011040:	e000      	b.n	8011044 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8011042:	2300      	movs	r3, #0
}
 8011044:	4618      	mov	r0, r3
 8011046:	3708      	adds	r7, #8
 8011048:	46bd      	mov	sp, r7
 801104a:	bd80      	pop	{r7, pc}
 801104c:	0801b9e8 	.word	0x0801b9e8
 8011050:	0801bbb8 	.word	0x0801bbb8
 8011054:	0801ba34 	.word	0x0801ba34
 8011058:	200052b9 	.word	0x200052b9
 801105c:	20018ba4 	.word	0x20018ba4

08011060 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011060:	b590      	push	{r4, r7, lr}
 8011062:	b08b      	sub	sp, #44	; 0x2c
 8011064:	af04      	add	r7, sp, #16
 8011066:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011068:	4b6f      	ldr	r3, [pc, #444]	; (8011228 <tcp_listen_input+0x1c8>)
 801106a:	781b      	ldrb	r3, [r3, #0]
 801106c:	f003 0304 	and.w	r3, r3, #4
 8011070:	2b00      	cmp	r3, #0
 8011072:	f040 80d2 	bne.w	801121a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d106      	bne.n	801108a <tcp_listen_input+0x2a>
 801107c:	4b6b      	ldr	r3, [pc, #428]	; (801122c <tcp_listen_input+0x1cc>)
 801107e:	f240 2281 	movw	r2, #641	; 0x281
 8011082:	496b      	ldr	r1, [pc, #428]	; (8011230 <tcp_listen_input+0x1d0>)
 8011084:	486b      	ldr	r0, [pc, #428]	; (8011234 <tcp_listen_input+0x1d4>)
 8011086:	f006 fedb 	bl	8017e40 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801108a:	4b67      	ldr	r3, [pc, #412]	; (8011228 <tcp_listen_input+0x1c8>)
 801108c:	781b      	ldrb	r3, [r3, #0]
 801108e:	f003 0310 	and.w	r3, r3, #16
 8011092:	2b00      	cmp	r3, #0
 8011094:	d019      	beq.n	80110ca <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011096:	4b68      	ldr	r3, [pc, #416]	; (8011238 <tcp_listen_input+0x1d8>)
 8011098:	6819      	ldr	r1, [r3, #0]
 801109a:	4b68      	ldr	r3, [pc, #416]	; (801123c <tcp_listen_input+0x1dc>)
 801109c:	881b      	ldrh	r3, [r3, #0]
 801109e:	461a      	mov	r2, r3
 80110a0:	4b67      	ldr	r3, [pc, #412]	; (8011240 <tcp_listen_input+0x1e0>)
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80110a6:	4b67      	ldr	r3, [pc, #412]	; (8011244 <tcp_listen_input+0x1e4>)
 80110a8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80110aa:	885b      	ldrh	r3, [r3, #2]
 80110ac:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80110ae:	4a65      	ldr	r2, [pc, #404]	; (8011244 <tcp_listen_input+0x1e4>)
 80110b0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80110b2:	8812      	ldrh	r2, [r2, #0]
 80110b4:	b292      	uxth	r2, r2
 80110b6:	9202      	str	r2, [sp, #8]
 80110b8:	9301      	str	r3, [sp, #4]
 80110ba:	4b63      	ldr	r3, [pc, #396]	; (8011248 <tcp_listen_input+0x1e8>)
 80110bc:	9300      	str	r3, [sp, #0]
 80110be:	4b63      	ldr	r3, [pc, #396]	; (801124c <tcp_listen_input+0x1ec>)
 80110c0:	4602      	mov	r2, r0
 80110c2:	6878      	ldr	r0, [r7, #4]
 80110c4:	f003 fbd6 	bl	8014874 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80110c8:	e0a9      	b.n	801121e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80110ca:	4b57      	ldr	r3, [pc, #348]	; (8011228 <tcp_listen_input+0x1c8>)
 80110cc:	781b      	ldrb	r3, [r3, #0]
 80110ce:	f003 0302 	and.w	r3, r3, #2
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	f000 80a3 	beq.w	801121e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	7d5b      	ldrb	r3, [r3, #21]
 80110dc:	4618      	mov	r0, r3
 80110de:	f7ff f85b 	bl	8010198 <tcp_alloc>
 80110e2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80110e4:	697b      	ldr	r3, [r7, #20]
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d111      	bne.n	801110e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	699b      	ldr	r3, [r3, #24]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d00a      	beq.n	8011108 <tcp_listen_input+0xa8>
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	699b      	ldr	r3, [r3, #24]
 80110f6:	687a      	ldr	r2, [r7, #4]
 80110f8:	6910      	ldr	r0, [r2, #16]
 80110fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80110fe:	2100      	movs	r1, #0
 8011100:	4798      	blx	r3
 8011102:	4603      	mov	r3, r0
 8011104:	73bb      	strb	r3, [r7, #14]
      return;
 8011106:	e08b      	b.n	8011220 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011108:	23f0      	movs	r3, #240	; 0xf0
 801110a:	73bb      	strb	r3, [r7, #14]
      return;
 801110c:	e088      	b.n	8011220 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801110e:	4b50      	ldr	r3, [pc, #320]	; (8011250 <tcp_listen_input+0x1f0>)
 8011110:	695a      	ldr	r2, [r3, #20]
 8011112:	697b      	ldr	r3, [r7, #20]
 8011114:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011116:	4b4e      	ldr	r3, [pc, #312]	; (8011250 <tcp_listen_input+0x1f0>)
 8011118:	691a      	ldr	r2, [r3, #16]
 801111a:	697b      	ldr	r3, [r7, #20]
 801111c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	8ada      	ldrh	r2, [r3, #22]
 8011122:	697b      	ldr	r3, [r7, #20]
 8011124:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011126:	4b47      	ldr	r3, [pc, #284]	; (8011244 <tcp_listen_input+0x1e4>)
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	881b      	ldrh	r3, [r3, #0]
 801112c:	b29a      	uxth	r2, r3
 801112e:	697b      	ldr	r3, [r7, #20]
 8011130:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8011132:	697b      	ldr	r3, [r7, #20]
 8011134:	2203      	movs	r2, #3
 8011136:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011138:	4b41      	ldr	r3, [pc, #260]	; (8011240 <tcp_listen_input+0x1e0>)
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	1c5a      	adds	r2, r3, #1
 801113e:	697b      	ldr	r3, [r7, #20]
 8011140:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8011142:	697b      	ldr	r3, [r7, #20]
 8011144:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011146:	697b      	ldr	r3, [r7, #20]
 8011148:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801114a:	6978      	ldr	r0, [r7, #20]
 801114c:	f7ff fa5a 	bl	8010604 <tcp_next_iss>
 8011150:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8011152:	697b      	ldr	r3, [r7, #20]
 8011154:	693a      	ldr	r2, [r7, #16]
 8011156:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011158:	697b      	ldr	r3, [r7, #20]
 801115a:	693a      	ldr	r2, [r7, #16]
 801115c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801115e:	697b      	ldr	r3, [r7, #20]
 8011160:	693a      	ldr	r2, [r7, #16]
 8011162:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011164:	697b      	ldr	r3, [r7, #20]
 8011166:	693a      	ldr	r2, [r7, #16]
 8011168:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801116a:	4b35      	ldr	r3, [pc, #212]	; (8011240 <tcp_listen_input+0x1e0>)
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	1e5a      	subs	r2, r3, #1
 8011170:	697b      	ldr	r3, [r7, #20]
 8011172:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	691a      	ldr	r2, [r3, #16]
 8011178:	697b      	ldr	r3, [r7, #20]
 801117a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801117c:	697b      	ldr	r3, [r7, #20]
 801117e:	687a      	ldr	r2, [r7, #4]
 8011180:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	7a5b      	ldrb	r3, [r3, #9]
 8011186:	f003 030c 	and.w	r3, r3, #12
 801118a:	b2da      	uxtb	r2, r3
 801118c:	697b      	ldr	r3, [r7, #20]
 801118e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	7a1a      	ldrb	r2, [r3, #8]
 8011194:	697b      	ldr	r3, [r7, #20]
 8011196:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011198:	4b2e      	ldr	r3, [pc, #184]	; (8011254 <tcp_listen_input+0x1f4>)
 801119a:	681a      	ldr	r2, [r3, #0]
 801119c:	697b      	ldr	r3, [r7, #20]
 801119e:	60da      	str	r2, [r3, #12]
 80111a0:	4a2c      	ldr	r2, [pc, #176]	; (8011254 <tcp_listen_input+0x1f4>)
 80111a2:	697b      	ldr	r3, [r7, #20]
 80111a4:	6013      	str	r3, [r2, #0]
 80111a6:	f003 fd27 	bl	8014bf8 <tcp_timer_needed>
 80111aa:	4b2b      	ldr	r3, [pc, #172]	; (8011258 <tcp_listen_input+0x1f8>)
 80111ac:	2201      	movs	r2, #1
 80111ae:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80111b0:	6978      	ldr	r0, [r7, #20]
 80111b2:	f001 fd8d 	bl	8012cd0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80111b6:	4b23      	ldr	r3, [pc, #140]	; (8011244 <tcp_listen_input+0x1e4>)
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	89db      	ldrh	r3, [r3, #14]
 80111bc:	b29a      	uxth	r2, r3
 80111be:	697b      	ldr	r3, [r7, #20]
 80111c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80111c4:	697b      	ldr	r3, [r7, #20]
 80111c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80111ca:	697b      	ldr	r3, [r7, #20]
 80111cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80111d0:	697b      	ldr	r3, [r7, #20]
 80111d2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80111d4:	697b      	ldr	r3, [r7, #20]
 80111d6:	3304      	adds	r3, #4
 80111d8:	4618      	mov	r0, r3
 80111da:	f005 f91b 	bl	8016414 <ip4_route>
 80111de:	4601      	mov	r1, r0
 80111e0:	697b      	ldr	r3, [r7, #20]
 80111e2:	3304      	adds	r3, #4
 80111e4:	461a      	mov	r2, r3
 80111e6:	4620      	mov	r0, r4
 80111e8:	f7ff fa32 	bl	8010650 <tcp_eff_send_mss_netif>
 80111ec:	4603      	mov	r3, r0
 80111ee:	461a      	mov	r2, r3
 80111f0:	697b      	ldr	r3, [r7, #20]
 80111f2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80111f4:	2112      	movs	r1, #18
 80111f6:	6978      	ldr	r0, [r7, #20]
 80111f8:	f002 fc9a 	bl	8013b30 <tcp_enqueue_flags>
 80111fc:	4603      	mov	r3, r0
 80111fe:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d004      	beq.n	8011212 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011208:	2100      	movs	r1, #0
 801120a:	6978      	ldr	r0, [r7, #20]
 801120c:	f7fd feda 	bl	800efc4 <tcp_abandon>
      return;
 8011210:	e006      	b.n	8011220 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8011212:	6978      	ldr	r0, [r7, #20]
 8011214:	f002 fd7a 	bl	8013d0c <tcp_output>
  return;
 8011218:	e001      	b.n	801121e <tcp_listen_input+0x1be>
    return;
 801121a:	bf00      	nop
 801121c:	e000      	b.n	8011220 <tcp_listen_input+0x1c0>
  return;
 801121e:	bf00      	nop
}
 8011220:	371c      	adds	r7, #28
 8011222:	46bd      	mov	sp, r7
 8011224:	bd90      	pop	{r4, r7, pc}
 8011226:	bf00      	nop
 8011228:	200052b8 	.word	0x200052b8
 801122c:	0801b9e8 	.word	0x0801b9e8
 8011230:	0801bbe0 	.word	0x0801bbe0
 8011234:	0801ba34 	.word	0x0801ba34
 8011238:	200052b0 	.word	0x200052b0
 801123c:	200052b6 	.word	0x200052b6
 8011240:	200052ac 	.word	0x200052ac
 8011244:	2000529c 	.word	0x2000529c
 8011248:	2000e2e0 	.word	0x2000e2e0
 801124c:	2000e2e4 	.word	0x2000e2e4
 8011250:	2000e2d0 	.word	0x2000e2d0
 8011254:	20018ba4 	.word	0x20018ba4
 8011258:	20018ba0 	.word	0x20018ba0

0801125c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b086      	sub	sp, #24
 8011260:	af04      	add	r7, sp, #16
 8011262:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011264:	4b2f      	ldr	r3, [pc, #188]	; (8011324 <tcp_timewait_input+0xc8>)
 8011266:	781b      	ldrb	r3, [r3, #0]
 8011268:	f003 0304 	and.w	r3, r3, #4
 801126c:	2b00      	cmp	r3, #0
 801126e:	d153      	bne.n	8011318 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d106      	bne.n	8011284 <tcp_timewait_input+0x28>
 8011276:	4b2c      	ldr	r3, [pc, #176]	; (8011328 <tcp_timewait_input+0xcc>)
 8011278:	f240 22ee 	movw	r2, #750	; 0x2ee
 801127c:	492b      	ldr	r1, [pc, #172]	; (801132c <tcp_timewait_input+0xd0>)
 801127e:	482c      	ldr	r0, [pc, #176]	; (8011330 <tcp_timewait_input+0xd4>)
 8011280:	f006 fdde 	bl	8017e40 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011284:	4b27      	ldr	r3, [pc, #156]	; (8011324 <tcp_timewait_input+0xc8>)
 8011286:	781b      	ldrb	r3, [r3, #0]
 8011288:	f003 0302 	and.w	r3, r3, #2
 801128c:	2b00      	cmp	r3, #0
 801128e:	d02a      	beq.n	80112e6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011290:	4b28      	ldr	r3, [pc, #160]	; (8011334 <tcp_timewait_input+0xd8>)
 8011292:	681a      	ldr	r2, [r3, #0]
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011298:	1ad3      	subs	r3, r2, r3
 801129a:	2b00      	cmp	r3, #0
 801129c:	db2d      	blt.n	80112fa <tcp_timewait_input+0x9e>
 801129e:	4b25      	ldr	r3, [pc, #148]	; (8011334 <tcp_timewait_input+0xd8>)
 80112a0:	681a      	ldr	r2, [r3, #0]
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112a6:	6879      	ldr	r1, [r7, #4]
 80112a8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80112aa:	440b      	add	r3, r1
 80112ac:	1ad3      	subs	r3, r2, r3
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	dc23      	bgt.n	80112fa <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80112b2:	4b21      	ldr	r3, [pc, #132]	; (8011338 <tcp_timewait_input+0xdc>)
 80112b4:	6819      	ldr	r1, [r3, #0]
 80112b6:	4b21      	ldr	r3, [pc, #132]	; (801133c <tcp_timewait_input+0xe0>)
 80112b8:	881b      	ldrh	r3, [r3, #0]
 80112ba:	461a      	mov	r2, r3
 80112bc:	4b1d      	ldr	r3, [pc, #116]	; (8011334 <tcp_timewait_input+0xd8>)
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80112c2:	4b1f      	ldr	r3, [pc, #124]	; (8011340 <tcp_timewait_input+0xe4>)
 80112c4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80112c6:	885b      	ldrh	r3, [r3, #2]
 80112c8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80112ca:	4a1d      	ldr	r2, [pc, #116]	; (8011340 <tcp_timewait_input+0xe4>)
 80112cc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80112ce:	8812      	ldrh	r2, [r2, #0]
 80112d0:	b292      	uxth	r2, r2
 80112d2:	9202      	str	r2, [sp, #8]
 80112d4:	9301      	str	r3, [sp, #4]
 80112d6:	4b1b      	ldr	r3, [pc, #108]	; (8011344 <tcp_timewait_input+0xe8>)
 80112d8:	9300      	str	r3, [sp, #0]
 80112da:	4b1b      	ldr	r3, [pc, #108]	; (8011348 <tcp_timewait_input+0xec>)
 80112dc:	4602      	mov	r2, r0
 80112de:	6878      	ldr	r0, [r7, #4]
 80112e0:	f003 fac8 	bl	8014874 <tcp_rst>
      return;
 80112e4:	e01b      	b.n	801131e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80112e6:	4b0f      	ldr	r3, [pc, #60]	; (8011324 <tcp_timewait_input+0xc8>)
 80112e8:	781b      	ldrb	r3, [r3, #0]
 80112ea:	f003 0301 	and.w	r3, r3, #1
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d003      	beq.n	80112fa <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80112f2:	4b16      	ldr	r3, [pc, #88]	; (801134c <tcp_timewait_input+0xf0>)
 80112f4:	681a      	ldr	r2, [r3, #0]
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80112fa:	4b10      	ldr	r3, [pc, #64]	; (801133c <tcp_timewait_input+0xe0>)
 80112fc:	881b      	ldrh	r3, [r3, #0]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d00c      	beq.n	801131c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	8b5b      	ldrh	r3, [r3, #26]
 8011306:	f043 0302 	orr.w	r3, r3, #2
 801130a:	b29a      	uxth	r2, r3
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011310:	6878      	ldr	r0, [r7, #4]
 8011312:	f002 fcfb 	bl	8013d0c <tcp_output>
  }
  return;
 8011316:	e001      	b.n	801131c <tcp_timewait_input+0xc0>
    return;
 8011318:	bf00      	nop
 801131a:	e000      	b.n	801131e <tcp_timewait_input+0xc2>
  return;
 801131c:	bf00      	nop
}
 801131e:	3708      	adds	r7, #8
 8011320:	46bd      	mov	sp, r7
 8011322:	bd80      	pop	{r7, pc}
 8011324:	200052b8 	.word	0x200052b8
 8011328:	0801b9e8 	.word	0x0801b9e8
 801132c:	0801bc00 	.word	0x0801bc00
 8011330:	0801ba34 	.word	0x0801ba34
 8011334:	200052ac 	.word	0x200052ac
 8011338:	200052b0 	.word	0x200052b0
 801133c:	200052b6 	.word	0x200052b6
 8011340:	2000529c 	.word	0x2000529c
 8011344:	2000e2e0 	.word	0x2000e2e0
 8011348:	2000e2e4 	.word	0x2000e2e4
 801134c:	20018ba8 	.word	0x20018ba8

08011350 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011350:	b590      	push	{r4, r7, lr}
 8011352:	b08d      	sub	sp, #52	; 0x34
 8011354:	af04      	add	r7, sp, #16
 8011356:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011358:	2300      	movs	r3, #0
 801135a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801135c:	2300      	movs	r3, #0
 801135e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d106      	bne.n	8011374 <tcp_process+0x24>
 8011366:	4ba5      	ldr	r3, [pc, #660]	; (80115fc <tcp_process+0x2ac>)
 8011368:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801136c:	49a4      	ldr	r1, [pc, #656]	; (8011600 <tcp_process+0x2b0>)
 801136e:	48a5      	ldr	r0, [pc, #660]	; (8011604 <tcp_process+0x2b4>)
 8011370:	f006 fd66 	bl	8017e40 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011374:	4ba4      	ldr	r3, [pc, #656]	; (8011608 <tcp_process+0x2b8>)
 8011376:	781b      	ldrb	r3, [r3, #0]
 8011378:	f003 0304 	and.w	r3, r3, #4
 801137c:	2b00      	cmp	r3, #0
 801137e:	d04e      	beq.n	801141e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	7d1b      	ldrb	r3, [r3, #20]
 8011384:	2b02      	cmp	r3, #2
 8011386:	d108      	bne.n	801139a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801138c:	4b9f      	ldr	r3, [pc, #636]	; (801160c <tcp_process+0x2bc>)
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	429a      	cmp	r2, r3
 8011392:	d123      	bne.n	80113dc <tcp_process+0x8c>
        acceptable = 1;
 8011394:	2301      	movs	r3, #1
 8011396:	76fb      	strb	r3, [r7, #27]
 8011398:	e020      	b.n	80113dc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801139e:	4b9c      	ldr	r3, [pc, #624]	; (8011610 <tcp_process+0x2c0>)
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	429a      	cmp	r2, r3
 80113a4:	d102      	bne.n	80113ac <tcp_process+0x5c>
        acceptable = 1;
 80113a6:	2301      	movs	r3, #1
 80113a8:	76fb      	strb	r3, [r7, #27]
 80113aa:	e017      	b.n	80113dc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80113ac:	4b98      	ldr	r3, [pc, #608]	; (8011610 <tcp_process+0x2c0>)
 80113ae:	681a      	ldr	r2, [r3, #0]
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113b4:	1ad3      	subs	r3, r2, r3
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	db10      	blt.n	80113dc <tcp_process+0x8c>
 80113ba:	4b95      	ldr	r3, [pc, #596]	; (8011610 <tcp_process+0x2c0>)
 80113bc:	681a      	ldr	r2, [r3, #0]
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113c2:	6879      	ldr	r1, [r7, #4]
 80113c4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80113c6:	440b      	add	r3, r1
 80113c8:	1ad3      	subs	r3, r2, r3
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	dc06      	bgt.n	80113dc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	8b5b      	ldrh	r3, [r3, #26]
 80113d2:	f043 0302 	orr.w	r3, r3, #2
 80113d6:	b29a      	uxth	r2, r3
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80113dc:	7efb      	ldrb	r3, [r7, #27]
 80113de:	2b00      	cmp	r3, #0
 80113e0:	d01b      	beq.n	801141a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	7d1b      	ldrb	r3, [r3, #20]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d106      	bne.n	80113f8 <tcp_process+0xa8>
 80113ea:	4b84      	ldr	r3, [pc, #528]	; (80115fc <tcp_process+0x2ac>)
 80113ec:	f44f 724e 	mov.w	r2, #824	; 0x338
 80113f0:	4988      	ldr	r1, [pc, #544]	; (8011614 <tcp_process+0x2c4>)
 80113f2:	4884      	ldr	r0, [pc, #528]	; (8011604 <tcp_process+0x2b4>)
 80113f4:	f006 fd24 	bl	8017e40 <iprintf>
      recv_flags |= TF_RESET;
 80113f8:	4b87      	ldr	r3, [pc, #540]	; (8011618 <tcp_process+0x2c8>)
 80113fa:	781b      	ldrb	r3, [r3, #0]
 80113fc:	f043 0308 	orr.w	r3, r3, #8
 8011400:	b2da      	uxtb	r2, r3
 8011402:	4b85      	ldr	r3, [pc, #532]	; (8011618 <tcp_process+0x2c8>)
 8011404:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	8b5b      	ldrh	r3, [r3, #26]
 801140a:	f023 0301 	bic.w	r3, r3, #1
 801140e:	b29a      	uxth	r2, r3
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011414:	f06f 030d 	mvn.w	r3, #13
 8011418:	e37a      	b.n	8011b10 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801141a:	2300      	movs	r3, #0
 801141c:	e378      	b.n	8011b10 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801141e:	4b7a      	ldr	r3, [pc, #488]	; (8011608 <tcp_process+0x2b8>)
 8011420:	781b      	ldrb	r3, [r3, #0]
 8011422:	f003 0302 	and.w	r3, r3, #2
 8011426:	2b00      	cmp	r3, #0
 8011428:	d010      	beq.n	801144c <tcp_process+0xfc>
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	7d1b      	ldrb	r3, [r3, #20]
 801142e:	2b02      	cmp	r3, #2
 8011430:	d00c      	beq.n	801144c <tcp_process+0xfc>
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	7d1b      	ldrb	r3, [r3, #20]
 8011436:	2b03      	cmp	r3, #3
 8011438:	d008      	beq.n	801144c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	8b5b      	ldrh	r3, [r3, #26]
 801143e:	f043 0302 	orr.w	r3, r3, #2
 8011442:	b29a      	uxth	r2, r3
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011448:	2300      	movs	r3, #0
 801144a:	e361      	b.n	8011b10 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	8b5b      	ldrh	r3, [r3, #26]
 8011450:	f003 0310 	and.w	r3, r3, #16
 8011454:	2b00      	cmp	r3, #0
 8011456:	d103      	bne.n	8011460 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011458:	4b70      	ldr	r3, [pc, #448]	; (801161c <tcp_process+0x2cc>)
 801145a:	681a      	ldr	r2, [r3, #0]
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	2200      	movs	r2, #0
 8011464:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	2200      	movs	r2, #0
 801146c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8011470:	6878      	ldr	r0, [r7, #4]
 8011472:	f001 fc2d 	bl	8012cd0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	7d1b      	ldrb	r3, [r3, #20]
 801147a:	3b02      	subs	r3, #2
 801147c:	2b07      	cmp	r3, #7
 801147e:	f200 8337 	bhi.w	8011af0 <tcp_process+0x7a0>
 8011482:	a201      	add	r2, pc, #4	; (adr r2, 8011488 <tcp_process+0x138>)
 8011484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011488:	080114a9 	.word	0x080114a9
 801148c:	080116d9 	.word	0x080116d9
 8011490:	08011851 	.word	0x08011851
 8011494:	0801187b 	.word	0x0801187b
 8011498:	0801199f 	.word	0x0801199f
 801149c:	08011851 	.word	0x08011851
 80114a0:	08011a2b 	.word	0x08011a2b
 80114a4:	08011abb 	.word	0x08011abb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80114a8:	4b57      	ldr	r3, [pc, #348]	; (8011608 <tcp_process+0x2b8>)
 80114aa:	781b      	ldrb	r3, [r3, #0]
 80114ac:	f003 0310 	and.w	r3, r3, #16
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	f000 80e4 	beq.w	801167e <tcp_process+0x32e>
 80114b6:	4b54      	ldr	r3, [pc, #336]	; (8011608 <tcp_process+0x2b8>)
 80114b8:	781b      	ldrb	r3, [r3, #0]
 80114ba:	f003 0302 	and.w	r3, r3, #2
 80114be:	2b00      	cmp	r3, #0
 80114c0:	f000 80dd 	beq.w	801167e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114c8:	1c5a      	adds	r2, r3, #1
 80114ca:	4b50      	ldr	r3, [pc, #320]	; (801160c <tcp_process+0x2bc>)
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	429a      	cmp	r2, r3
 80114d0:	f040 80d5 	bne.w	801167e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80114d4:	4b4e      	ldr	r3, [pc, #312]	; (8011610 <tcp_process+0x2c0>)
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	1c5a      	adds	r2, r3, #1
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80114e6:	4b49      	ldr	r3, [pc, #292]	; (801160c <tcp_process+0x2bc>)
 80114e8:	681a      	ldr	r2, [r3, #0]
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80114ee:	4b4c      	ldr	r3, [pc, #304]	; (8011620 <tcp_process+0x2d0>)
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	89db      	ldrh	r3, [r3, #14]
 80114f4:	b29a      	uxth	r2, r3
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011508:	4b41      	ldr	r3, [pc, #260]	; (8011610 <tcp_process+0x2c0>)
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	1e5a      	subs	r2, r3, #1
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	2204      	movs	r2, #4
 8011516:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	3304      	adds	r3, #4
 8011520:	4618      	mov	r0, r3
 8011522:	f004 ff77 	bl	8016414 <ip4_route>
 8011526:	4601      	mov	r1, r0
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	3304      	adds	r3, #4
 801152c:	461a      	mov	r2, r3
 801152e:	4620      	mov	r0, r4
 8011530:	f7ff f88e 	bl	8010650 <tcp_eff_send_mss_netif>
 8011534:	4603      	mov	r3, r0
 8011536:	461a      	mov	r2, r3
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011540:	009a      	lsls	r2, r3, #2
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011546:	005b      	lsls	r3, r3, #1
 8011548:	f241 111c 	movw	r1, #4380	; 0x111c
 801154c:	428b      	cmp	r3, r1
 801154e:	bf38      	it	cc
 8011550:	460b      	movcc	r3, r1
 8011552:	429a      	cmp	r2, r3
 8011554:	d204      	bcs.n	8011560 <tcp_process+0x210>
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801155a:	009b      	lsls	r3, r3, #2
 801155c:	b29b      	uxth	r3, r3
 801155e:	e00d      	b.n	801157c <tcp_process+0x22c>
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011564:	005b      	lsls	r3, r3, #1
 8011566:	f241 121c 	movw	r2, #4380	; 0x111c
 801156a:	4293      	cmp	r3, r2
 801156c:	d904      	bls.n	8011578 <tcp_process+0x228>
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011572:	005b      	lsls	r3, r3, #1
 8011574:	b29b      	uxth	r3, r3
 8011576:	e001      	b.n	801157c <tcp_process+0x22c>
 8011578:	f241 131c 	movw	r3, #4380	; 0x111c
 801157c:	687a      	ldr	r2, [r7, #4]
 801157e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011588:	2b00      	cmp	r3, #0
 801158a:	d106      	bne.n	801159a <tcp_process+0x24a>
 801158c:	4b1b      	ldr	r3, [pc, #108]	; (80115fc <tcp_process+0x2ac>)
 801158e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8011592:	4924      	ldr	r1, [pc, #144]	; (8011624 <tcp_process+0x2d4>)
 8011594:	481b      	ldr	r0, [pc, #108]	; (8011604 <tcp_process+0x2b4>)
 8011596:	f006 fc53 	bl	8017e40 <iprintf>
        --pcb->snd_queuelen;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80115a0:	3b01      	subs	r3, #1
 80115a2:	b29a      	uxth	r2, r3
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115ae:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80115b0:	69fb      	ldr	r3, [r7, #28]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d111      	bne.n	80115da <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115ba:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80115bc:	69fb      	ldr	r3, [r7, #28]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d106      	bne.n	80115d0 <tcp_process+0x280>
 80115c2:	4b0e      	ldr	r3, [pc, #56]	; (80115fc <tcp_process+0x2ac>)
 80115c4:	f44f 725d 	mov.w	r2, #884	; 0x374
 80115c8:	4917      	ldr	r1, [pc, #92]	; (8011628 <tcp_process+0x2d8>)
 80115ca:	480e      	ldr	r0, [pc, #56]	; (8011604 <tcp_process+0x2b4>)
 80115cc:	f006 fc38 	bl	8017e40 <iprintf>
          pcb->unsent = rseg->next;
 80115d0:	69fb      	ldr	r3, [r7, #28]
 80115d2:	681a      	ldr	r2, [r3, #0]
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	66da      	str	r2, [r3, #108]	; 0x6c
 80115d8:	e003      	b.n	80115e2 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80115da:	69fb      	ldr	r3, [r7, #28]
 80115dc:	681a      	ldr	r2, [r3, #0]
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80115e2:	69f8      	ldr	r0, [r7, #28]
 80115e4:	f7fe fc51 	bl	800fe8a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d11d      	bne.n	801162c <tcp_process+0x2dc>
          pcb->rtime = -1;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80115f6:	861a      	strh	r2, [r3, #48]	; 0x30
 80115f8:	e01f      	b.n	801163a <tcp_process+0x2ea>
 80115fa:	bf00      	nop
 80115fc:	0801b9e8 	.word	0x0801b9e8
 8011600:	0801bc20 	.word	0x0801bc20
 8011604:	0801ba34 	.word	0x0801ba34
 8011608:	200052b8 	.word	0x200052b8
 801160c:	200052b0 	.word	0x200052b0
 8011610:	200052ac 	.word	0x200052ac
 8011614:	0801bc3c 	.word	0x0801bc3c
 8011618:	200052b9 	.word	0x200052b9
 801161c:	20018ba8 	.word	0x20018ba8
 8011620:	2000529c 	.word	0x2000529c
 8011624:	0801bc5c 	.word	0x0801bc5c
 8011628:	0801bc74 	.word	0x0801bc74
        } else {
          pcb->rtime = 0;
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	2200      	movs	r2, #0
 8011630:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	2200      	movs	r2, #0
 8011636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011640:	2b00      	cmp	r3, #0
 8011642:	d00a      	beq.n	801165a <tcp_process+0x30a>
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801164a:	687a      	ldr	r2, [r7, #4]
 801164c:	6910      	ldr	r0, [r2, #16]
 801164e:	2200      	movs	r2, #0
 8011650:	6879      	ldr	r1, [r7, #4]
 8011652:	4798      	blx	r3
 8011654:	4603      	mov	r3, r0
 8011656:	76bb      	strb	r3, [r7, #26]
 8011658:	e001      	b.n	801165e <tcp_process+0x30e>
 801165a:	2300      	movs	r3, #0
 801165c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801165e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011662:	f113 0f0d 	cmn.w	r3, #13
 8011666:	d102      	bne.n	801166e <tcp_process+0x31e>
          return ERR_ABRT;
 8011668:	f06f 030c 	mvn.w	r3, #12
 801166c:	e250      	b.n	8011b10 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	8b5b      	ldrh	r3, [r3, #26]
 8011672:	f043 0302 	orr.w	r3, r3, #2
 8011676:	b29a      	uxth	r2, r3
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801167c:	e23a      	b.n	8011af4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801167e:	4b9d      	ldr	r3, [pc, #628]	; (80118f4 <tcp_process+0x5a4>)
 8011680:	781b      	ldrb	r3, [r3, #0]
 8011682:	f003 0310 	and.w	r3, r3, #16
 8011686:	2b00      	cmp	r3, #0
 8011688:	f000 8234 	beq.w	8011af4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801168c:	4b9a      	ldr	r3, [pc, #616]	; (80118f8 <tcp_process+0x5a8>)
 801168e:	6819      	ldr	r1, [r3, #0]
 8011690:	4b9a      	ldr	r3, [pc, #616]	; (80118fc <tcp_process+0x5ac>)
 8011692:	881b      	ldrh	r3, [r3, #0]
 8011694:	461a      	mov	r2, r3
 8011696:	4b9a      	ldr	r3, [pc, #616]	; (8011900 <tcp_process+0x5b0>)
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801169c:	4b99      	ldr	r3, [pc, #612]	; (8011904 <tcp_process+0x5b4>)
 801169e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80116a0:	885b      	ldrh	r3, [r3, #2]
 80116a2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80116a4:	4a97      	ldr	r2, [pc, #604]	; (8011904 <tcp_process+0x5b4>)
 80116a6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80116a8:	8812      	ldrh	r2, [r2, #0]
 80116aa:	b292      	uxth	r2, r2
 80116ac:	9202      	str	r2, [sp, #8]
 80116ae:	9301      	str	r3, [sp, #4]
 80116b0:	4b95      	ldr	r3, [pc, #596]	; (8011908 <tcp_process+0x5b8>)
 80116b2:	9300      	str	r3, [sp, #0]
 80116b4:	4b95      	ldr	r3, [pc, #596]	; (801190c <tcp_process+0x5bc>)
 80116b6:	4602      	mov	r2, r0
 80116b8:	6878      	ldr	r0, [r7, #4]
 80116ba:	f003 f8db 	bl	8014874 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80116c4:	2b05      	cmp	r3, #5
 80116c6:	f200 8215 	bhi.w	8011af4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	2200      	movs	r2, #0
 80116ce:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80116d0:	6878      	ldr	r0, [r7, #4]
 80116d2:	f002 fea5 	bl	8014420 <tcp_rexmit_rto>
      break;
 80116d6:	e20d      	b.n	8011af4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80116d8:	4b86      	ldr	r3, [pc, #536]	; (80118f4 <tcp_process+0x5a4>)
 80116da:	781b      	ldrb	r3, [r3, #0]
 80116dc:	f003 0310 	and.w	r3, r3, #16
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	f000 80a1 	beq.w	8011828 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80116e6:	4b84      	ldr	r3, [pc, #528]	; (80118f8 <tcp_process+0x5a8>)
 80116e8:	681a      	ldr	r2, [r3, #0]
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116ee:	1ad3      	subs	r3, r2, r3
 80116f0:	3b01      	subs	r3, #1
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	db7e      	blt.n	80117f4 <tcp_process+0x4a4>
 80116f6:	4b80      	ldr	r3, [pc, #512]	; (80118f8 <tcp_process+0x5a8>)
 80116f8:	681a      	ldr	r2, [r3, #0]
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80116fe:	1ad3      	subs	r3, r2, r3
 8011700:	2b00      	cmp	r3, #0
 8011702:	dc77      	bgt.n	80117f4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	2204      	movs	r2, #4
 8011708:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801170e:	2b00      	cmp	r3, #0
 8011710:	d102      	bne.n	8011718 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011712:	23fa      	movs	r3, #250	; 0xfa
 8011714:	76bb      	strb	r3, [r7, #26]
 8011716:	e01d      	b.n	8011754 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801171c:	699b      	ldr	r3, [r3, #24]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d106      	bne.n	8011730 <tcp_process+0x3e0>
 8011722:	4b7b      	ldr	r3, [pc, #492]	; (8011910 <tcp_process+0x5c0>)
 8011724:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011728:	497a      	ldr	r1, [pc, #488]	; (8011914 <tcp_process+0x5c4>)
 801172a:	487b      	ldr	r0, [pc, #492]	; (8011918 <tcp_process+0x5c8>)
 801172c:	f006 fb88 	bl	8017e40 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011734:	699b      	ldr	r3, [r3, #24]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d00a      	beq.n	8011750 <tcp_process+0x400>
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801173e:	699b      	ldr	r3, [r3, #24]
 8011740:	687a      	ldr	r2, [r7, #4]
 8011742:	6910      	ldr	r0, [r2, #16]
 8011744:	2200      	movs	r2, #0
 8011746:	6879      	ldr	r1, [r7, #4]
 8011748:	4798      	blx	r3
 801174a:	4603      	mov	r3, r0
 801174c:	76bb      	strb	r3, [r7, #26]
 801174e:	e001      	b.n	8011754 <tcp_process+0x404>
 8011750:	23f0      	movs	r3, #240	; 0xf0
 8011752:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011754:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d00a      	beq.n	8011772 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801175c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011760:	f113 0f0d 	cmn.w	r3, #13
 8011764:	d002      	beq.n	801176c <tcp_process+0x41c>
              tcp_abort(pcb);
 8011766:	6878      	ldr	r0, [r7, #4]
 8011768:	f7fd fcea 	bl	800f140 <tcp_abort>
            }
            return ERR_ABRT;
 801176c:	f06f 030c 	mvn.w	r3, #12
 8011770:	e1ce      	b.n	8011b10 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011772:	6878      	ldr	r0, [r7, #4]
 8011774:	f000 fae0 	bl	8011d38 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011778:	4b68      	ldr	r3, [pc, #416]	; (801191c <tcp_process+0x5cc>)
 801177a:	881b      	ldrh	r3, [r3, #0]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d005      	beq.n	801178c <tcp_process+0x43c>
            recv_acked--;
 8011780:	4b66      	ldr	r3, [pc, #408]	; (801191c <tcp_process+0x5cc>)
 8011782:	881b      	ldrh	r3, [r3, #0]
 8011784:	3b01      	subs	r3, #1
 8011786:	b29a      	uxth	r2, r3
 8011788:	4b64      	ldr	r3, [pc, #400]	; (801191c <tcp_process+0x5cc>)
 801178a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011790:	009a      	lsls	r2, r3, #2
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011796:	005b      	lsls	r3, r3, #1
 8011798:	f241 111c 	movw	r1, #4380	; 0x111c
 801179c:	428b      	cmp	r3, r1
 801179e:	bf38      	it	cc
 80117a0:	460b      	movcc	r3, r1
 80117a2:	429a      	cmp	r2, r3
 80117a4:	d204      	bcs.n	80117b0 <tcp_process+0x460>
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117aa:	009b      	lsls	r3, r3, #2
 80117ac:	b29b      	uxth	r3, r3
 80117ae:	e00d      	b.n	80117cc <tcp_process+0x47c>
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117b4:	005b      	lsls	r3, r3, #1
 80117b6:	f241 121c 	movw	r2, #4380	; 0x111c
 80117ba:	4293      	cmp	r3, r2
 80117bc:	d904      	bls.n	80117c8 <tcp_process+0x478>
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117c2:	005b      	lsls	r3, r3, #1
 80117c4:	b29b      	uxth	r3, r3
 80117c6:	e001      	b.n	80117cc <tcp_process+0x47c>
 80117c8:	f241 131c 	movw	r3, #4380	; 0x111c
 80117cc:	687a      	ldr	r2, [r7, #4]
 80117ce:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80117d2:	4b53      	ldr	r3, [pc, #332]	; (8011920 <tcp_process+0x5d0>)
 80117d4:	781b      	ldrb	r3, [r3, #0]
 80117d6:	f003 0320 	and.w	r3, r3, #32
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d037      	beq.n	801184e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	8b5b      	ldrh	r3, [r3, #26]
 80117e2:	f043 0302 	orr.w	r3, r3, #2
 80117e6:	b29a      	uxth	r2, r3
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	2207      	movs	r2, #7
 80117f0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80117f2:	e02c      	b.n	801184e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117f4:	4b40      	ldr	r3, [pc, #256]	; (80118f8 <tcp_process+0x5a8>)
 80117f6:	6819      	ldr	r1, [r3, #0]
 80117f8:	4b40      	ldr	r3, [pc, #256]	; (80118fc <tcp_process+0x5ac>)
 80117fa:	881b      	ldrh	r3, [r3, #0]
 80117fc:	461a      	mov	r2, r3
 80117fe:	4b40      	ldr	r3, [pc, #256]	; (8011900 <tcp_process+0x5b0>)
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011804:	4b3f      	ldr	r3, [pc, #252]	; (8011904 <tcp_process+0x5b4>)
 8011806:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011808:	885b      	ldrh	r3, [r3, #2]
 801180a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801180c:	4a3d      	ldr	r2, [pc, #244]	; (8011904 <tcp_process+0x5b4>)
 801180e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011810:	8812      	ldrh	r2, [r2, #0]
 8011812:	b292      	uxth	r2, r2
 8011814:	9202      	str	r2, [sp, #8]
 8011816:	9301      	str	r3, [sp, #4]
 8011818:	4b3b      	ldr	r3, [pc, #236]	; (8011908 <tcp_process+0x5b8>)
 801181a:	9300      	str	r3, [sp, #0]
 801181c:	4b3b      	ldr	r3, [pc, #236]	; (801190c <tcp_process+0x5bc>)
 801181e:	4602      	mov	r2, r0
 8011820:	6878      	ldr	r0, [r7, #4]
 8011822:	f003 f827 	bl	8014874 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011826:	e167      	b.n	8011af8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011828:	4b32      	ldr	r3, [pc, #200]	; (80118f4 <tcp_process+0x5a4>)
 801182a:	781b      	ldrb	r3, [r3, #0]
 801182c:	f003 0302 	and.w	r3, r3, #2
 8011830:	2b00      	cmp	r3, #0
 8011832:	f000 8161 	beq.w	8011af8 <tcp_process+0x7a8>
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801183a:	1e5a      	subs	r2, r3, #1
 801183c:	4b30      	ldr	r3, [pc, #192]	; (8011900 <tcp_process+0x5b0>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	429a      	cmp	r2, r3
 8011842:	f040 8159 	bne.w	8011af8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011846:	6878      	ldr	r0, [r7, #4]
 8011848:	f002 fe0c 	bl	8014464 <tcp_rexmit>
      break;
 801184c:	e154      	b.n	8011af8 <tcp_process+0x7a8>
 801184e:	e153      	b.n	8011af8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011850:	6878      	ldr	r0, [r7, #4]
 8011852:	f000 fa71 	bl	8011d38 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011856:	4b32      	ldr	r3, [pc, #200]	; (8011920 <tcp_process+0x5d0>)
 8011858:	781b      	ldrb	r3, [r3, #0]
 801185a:	f003 0320 	and.w	r3, r3, #32
 801185e:	2b00      	cmp	r3, #0
 8011860:	f000 814c 	beq.w	8011afc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	8b5b      	ldrh	r3, [r3, #26]
 8011868:	f043 0302 	orr.w	r3, r3, #2
 801186c:	b29a      	uxth	r2, r3
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	2207      	movs	r2, #7
 8011876:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011878:	e140      	b.n	8011afc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801187a:	6878      	ldr	r0, [r7, #4]
 801187c:	f000 fa5c 	bl	8011d38 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011880:	4b27      	ldr	r3, [pc, #156]	; (8011920 <tcp_process+0x5d0>)
 8011882:	781b      	ldrb	r3, [r3, #0]
 8011884:	f003 0320 	and.w	r3, r3, #32
 8011888:	2b00      	cmp	r3, #0
 801188a:	d071      	beq.n	8011970 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801188c:	4b19      	ldr	r3, [pc, #100]	; (80118f4 <tcp_process+0x5a4>)
 801188e:	781b      	ldrb	r3, [r3, #0]
 8011890:	f003 0310 	and.w	r3, r3, #16
 8011894:	2b00      	cmp	r3, #0
 8011896:	d060      	beq.n	801195a <tcp_process+0x60a>
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801189c:	4b16      	ldr	r3, [pc, #88]	; (80118f8 <tcp_process+0x5a8>)
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	429a      	cmp	r2, r3
 80118a2:	d15a      	bne.n	801195a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d156      	bne.n	801195a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	8b5b      	ldrh	r3, [r3, #26]
 80118b0:	f043 0302 	orr.w	r3, r3, #2
 80118b4:	b29a      	uxth	r2, r3
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80118ba:	6878      	ldr	r0, [r7, #4]
 80118bc:	f7fe fdbe 	bl	801043c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80118c0:	4b18      	ldr	r3, [pc, #96]	; (8011924 <tcp_process+0x5d4>)
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	687a      	ldr	r2, [r7, #4]
 80118c6:	429a      	cmp	r2, r3
 80118c8:	d105      	bne.n	80118d6 <tcp_process+0x586>
 80118ca:	4b16      	ldr	r3, [pc, #88]	; (8011924 <tcp_process+0x5d4>)
 80118cc:	681b      	ldr	r3, [r3, #0]
 80118ce:	68db      	ldr	r3, [r3, #12]
 80118d0:	4a14      	ldr	r2, [pc, #80]	; (8011924 <tcp_process+0x5d4>)
 80118d2:	6013      	str	r3, [r2, #0]
 80118d4:	e02e      	b.n	8011934 <tcp_process+0x5e4>
 80118d6:	4b13      	ldr	r3, [pc, #76]	; (8011924 <tcp_process+0x5d4>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	617b      	str	r3, [r7, #20]
 80118dc:	e027      	b.n	801192e <tcp_process+0x5de>
 80118de:	697b      	ldr	r3, [r7, #20]
 80118e0:	68db      	ldr	r3, [r3, #12]
 80118e2:	687a      	ldr	r2, [r7, #4]
 80118e4:	429a      	cmp	r2, r3
 80118e6:	d11f      	bne.n	8011928 <tcp_process+0x5d8>
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	68da      	ldr	r2, [r3, #12]
 80118ec:	697b      	ldr	r3, [r7, #20]
 80118ee:	60da      	str	r2, [r3, #12]
 80118f0:	e020      	b.n	8011934 <tcp_process+0x5e4>
 80118f2:	bf00      	nop
 80118f4:	200052b8 	.word	0x200052b8
 80118f8:	200052b0 	.word	0x200052b0
 80118fc:	200052b6 	.word	0x200052b6
 8011900:	200052ac 	.word	0x200052ac
 8011904:	2000529c 	.word	0x2000529c
 8011908:	2000e2e0 	.word	0x2000e2e0
 801190c:	2000e2e4 	.word	0x2000e2e4
 8011910:	0801b9e8 	.word	0x0801b9e8
 8011914:	0801bc88 	.word	0x0801bc88
 8011918:	0801ba34 	.word	0x0801ba34
 801191c:	200052b4 	.word	0x200052b4
 8011920:	200052b9 	.word	0x200052b9
 8011924:	20018ba4 	.word	0x20018ba4
 8011928:	697b      	ldr	r3, [r7, #20]
 801192a:	68db      	ldr	r3, [r3, #12]
 801192c:	617b      	str	r3, [r7, #20]
 801192e:	697b      	ldr	r3, [r7, #20]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d1d4      	bne.n	80118de <tcp_process+0x58e>
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	2200      	movs	r2, #0
 8011938:	60da      	str	r2, [r3, #12]
 801193a:	4b77      	ldr	r3, [pc, #476]	; (8011b18 <tcp_process+0x7c8>)
 801193c:	2201      	movs	r2, #1
 801193e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	220a      	movs	r2, #10
 8011944:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011946:	4b75      	ldr	r3, [pc, #468]	; (8011b1c <tcp_process+0x7cc>)
 8011948:	681a      	ldr	r2, [r3, #0]
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	60da      	str	r2, [r3, #12]
 801194e:	4a73      	ldr	r2, [pc, #460]	; (8011b1c <tcp_process+0x7cc>)
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	6013      	str	r3, [r2, #0]
 8011954:	f003 f950 	bl	8014bf8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011958:	e0d2      	b.n	8011b00 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	8b5b      	ldrh	r3, [r3, #26]
 801195e:	f043 0302 	orr.w	r3, r3, #2
 8011962:	b29a      	uxth	r2, r3
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	2208      	movs	r2, #8
 801196c:	751a      	strb	r2, [r3, #20]
      break;
 801196e:	e0c7      	b.n	8011b00 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011970:	4b6b      	ldr	r3, [pc, #428]	; (8011b20 <tcp_process+0x7d0>)
 8011972:	781b      	ldrb	r3, [r3, #0]
 8011974:	f003 0310 	and.w	r3, r3, #16
 8011978:	2b00      	cmp	r3, #0
 801197a:	f000 80c1 	beq.w	8011b00 <tcp_process+0x7b0>
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011982:	4b68      	ldr	r3, [pc, #416]	; (8011b24 <tcp_process+0x7d4>)
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	429a      	cmp	r2, r3
 8011988:	f040 80ba 	bne.w	8011b00 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011990:	2b00      	cmp	r3, #0
 8011992:	f040 80b5 	bne.w	8011b00 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	2206      	movs	r2, #6
 801199a:	751a      	strb	r2, [r3, #20]
      break;
 801199c:	e0b0      	b.n	8011b00 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801199e:	6878      	ldr	r0, [r7, #4]
 80119a0:	f000 f9ca 	bl	8011d38 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80119a4:	4b60      	ldr	r3, [pc, #384]	; (8011b28 <tcp_process+0x7d8>)
 80119a6:	781b      	ldrb	r3, [r3, #0]
 80119a8:	f003 0320 	and.w	r3, r3, #32
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	f000 80a9 	beq.w	8011b04 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	8b5b      	ldrh	r3, [r3, #26]
 80119b6:	f043 0302 	orr.w	r3, r3, #2
 80119ba:	b29a      	uxth	r2, r3
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80119c0:	6878      	ldr	r0, [r7, #4]
 80119c2:	f7fe fd3b 	bl	801043c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80119c6:	4b59      	ldr	r3, [pc, #356]	; (8011b2c <tcp_process+0x7dc>)
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	687a      	ldr	r2, [r7, #4]
 80119cc:	429a      	cmp	r2, r3
 80119ce:	d105      	bne.n	80119dc <tcp_process+0x68c>
 80119d0:	4b56      	ldr	r3, [pc, #344]	; (8011b2c <tcp_process+0x7dc>)
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	68db      	ldr	r3, [r3, #12]
 80119d6:	4a55      	ldr	r2, [pc, #340]	; (8011b2c <tcp_process+0x7dc>)
 80119d8:	6013      	str	r3, [r2, #0]
 80119da:	e013      	b.n	8011a04 <tcp_process+0x6b4>
 80119dc:	4b53      	ldr	r3, [pc, #332]	; (8011b2c <tcp_process+0x7dc>)
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	613b      	str	r3, [r7, #16]
 80119e2:	e00c      	b.n	80119fe <tcp_process+0x6ae>
 80119e4:	693b      	ldr	r3, [r7, #16]
 80119e6:	68db      	ldr	r3, [r3, #12]
 80119e8:	687a      	ldr	r2, [r7, #4]
 80119ea:	429a      	cmp	r2, r3
 80119ec:	d104      	bne.n	80119f8 <tcp_process+0x6a8>
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	68da      	ldr	r2, [r3, #12]
 80119f2:	693b      	ldr	r3, [r7, #16]
 80119f4:	60da      	str	r2, [r3, #12]
 80119f6:	e005      	b.n	8011a04 <tcp_process+0x6b4>
 80119f8:	693b      	ldr	r3, [r7, #16]
 80119fa:	68db      	ldr	r3, [r3, #12]
 80119fc:	613b      	str	r3, [r7, #16]
 80119fe:	693b      	ldr	r3, [r7, #16]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d1ef      	bne.n	80119e4 <tcp_process+0x694>
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	2200      	movs	r2, #0
 8011a08:	60da      	str	r2, [r3, #12]
 8011a0a:	4b43      	ldr	r3, [pc, #268]	; (8011b18 <tcp_process+0x7c8>)
 8011a0c:	2201      	movs	r2, #1
 8011a0e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	220a      	movs	r2, #10
 8011a14:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011a16:	4b41      	ldr	r3, [pc, #260]	; (8011b1c <tcp_process+0x7cc>)
 8011a18:	681a      	ldr	r2, [r3, #0]
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	60da      	str	r2, [r3, #12]
 8011a1e:	4a3f      	ldr	r2, [pc, #252]	; (8011b1c <tcp_process+0x7cc>)
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	6013      	str	r3, [r2, #0]
 8011a24:	f003 f8e8 	bl	8014bf8 <tcp_timer_needed>
      }
      break;
 8011a28:	e06c      	b.n	8011b04 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011a2a:	6878      	ldr	r0, [r7, #4]
 8011a2c:	f000 f984 	bl	8011d38 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011a30:	4b3b      	ldr	r3, [pc, #236]	; (8011b20 <tcp_process+0x7d0>)
 8011a32:	781b      	ldrb	r3, [r3, #0]
 8011a34:	f003 0310 	and.w	r3, r3, #16
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d065      	beq.n	8011b08 <tcp_process+0x7b8>
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011a40:	4b38      	ldr	r3, [pc, #224]	; (8011b24 <tcp_process+0x7d4>)
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	429a      	cmp	r2, r3
 8011a46:	d15f      	bne.n	8011b08 <tcp_process+0x7b8>
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d15b      	bne.n	8011b08 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011a50:	6878      	ldr	r0, [r7, #4]
 8011a52:	f7fe fcf3 	bl	801043c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011a56:	4b35      	ldr	r3, [pc, #212]	; (8011b2c <tcp_process+0x7dc>)
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	687a      	ldr	r2, [r7, #4]
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	d105      	bne.n	8011a6c <tcp_process+0x71c>
 8011a60:	4b32      	ldr	r3, [pc, #200]	; (8011b2c <tcp_process+0x7dc>)
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	68db      	ldr	r3, [r3, #12]
 8011a66:	4a31      	ldr	r2, [pc, #196]	; (8011b2c <tcp_process+0x7dc>)
 8011a68:	6013      	str	r3, [r2, #0]
 8011a6a:	e013      	b.n	8011a94 <tcp_process+0x744>
 8011a6c:	4b2f      	ldr	r3, [pc, #188]	; (8011b2c <tcp_process+0x7dc>)
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	60fb      	str	r3, [r7, #12]
 8011a72:	e00c      	b.n	8011a8e <tcp_process+0x73e>
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	68db      	ldr	r3, [r3, #12]
 8011a78:	687a      	ldr	r2, [r7, #4]
 8011a7a:	429a      	cmp	r2, r3
 8011a7c:	d104      	bne.n	8011a88 <tcp_process+0x738>
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	68da      	ldr	r2, [r3, #12]
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	60da      	str	r2, [r3, #12]
 8011a86:	e005      	b.n	8011a94 <tcp_process+0x744>
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	68db      	ldr	r3, [r3, #12]
 8011a8c:	60fb      	str	r3, [r7, #12]
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d1ef      	bne.n	8011a74 <tcp_process+0x724>
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	2200      	movs	r2, #0
 8011a98:	60da      	str	r2, [r3, #12]
 8011a9a:	4b1f      	ldr	r3, [pc, #124]	; (8011b18 <tcp_process+0x7c8>)
 8011a9c:	2201      	movs	r2, #1
 8011a9e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	220a      	movs	r2, #10
 8011aa4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011aa6:	4b1d      	ldr	r3, [pc, #116]	; (8011b1c <tcp_process+0x7cc>)
 8011aa8:	681a      	ldr	r2, [r3, #0]
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	60da      	str	r2, [r3, #12]
 8011aae:	4a1b      	ldr	r2, [pc, #108]	; (8011b1c <tcp_process+0x7cc>)
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	6013      	str	r3, [r2, #0]
 8011ab4:	f003 f8a0 	bl	8014bf8 <tcp_timer_needed>
      }
      break;
 8011ab8:	e026      	b.n	8011b08 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011aba:	6878      	ldr	r0, [r7, #4]
 8011abc:	f000 f93c 	bl	8011d38 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011ac0:	4b17      	ldr	r3, [pc, #92]	; (8011b20 <tcp_process+0x7d0>)
 8011ac2:	781b      	ldrb	r3, [r3, #0]
 8011ac4:	f003 0310 	and.w	r3, r3, #16
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d01f      	beq.n	8011b0c <tcp_process+0x7bc>
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011ad0:	4b14      	ldr	r3, [pc, #80]	; (8011b24 <tcp_process+0x7d4>)
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	429a      	cmp	r2, r3
 8011ad6:	d119      	bne.n	8011b0c <tcp_process+0x7bc>
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d115      	bne.n	8011b0c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011ae0:	4b11      	ldr	r3, [pc, #68]	; (8011b28 <tcp_process+0x7d8>)
 8011ae2:	781b      	ldrb	r3, [r3, #0]
 8011ae4:	f043 0310 	orr.w	r3, r3, #16
 8011ae8:	b2da      	uxtb	r2, r3
 8011aea:	4b0f      	ldr	r3, [pc, #60]	; (8011b28 <tcp_process+0x7d8>)
 8011aec:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011aee:	e00d      	b.n	8011b0c <tcp_process+0x7bc>
    default:
      break;
 8011af0:	bf00      	nop
 8011af2:	e00c      	b.n	8011b0e <tcp_process+0x7be>
      break;
 8011af4:	bf00      	nop
 8011af6:	e00a      	b.n	8011b0e <tcp_process+0x7be>
      break;
 8011af8:	bf00      	nop
 8011afa:	e008      	b.n	8011b0e <tcp_process+0x7be>
      break;
 8011afc:	bf00      	nop
 8011afe:	e006      	b.n	8011b0e <tcp_process+0x7be>
      break;
 8011b00:	bf00      	nop
 8011b02:	e004      	b.n	8011b0e <tcp_process+0x7be>
      break;
 8011b04:	bf00      	nop
 8011b06:	e002      	b.n	8011b0e <tcp_process+0x7be>
      break;
 8011b08:	bf00      	nop
 8011b0a:	e000      	b.n	8011b0e <tcp_process+0x7be>
      break;
 8011b0c:	bf00      	nop
  }
  return ERR_OK;
 8011b0e:	2300      	movs	r3, #0
}
 8011b10:	4618      	mov	r0, r3
 8011b12:	3724      	adds	r7, #36	; 0x24
 8011b14:	46bd      	mov	sp, r7
 8011b16:	bd90      	pop	{r4, r7, pc}
 8011b18:	20018ba0 	.word	0x20018ba0
 8011b1c:	20018bb4 	.word	0x20018bb4
 8011b20:	200052b8 	.word	0x200052b8
 8011b24:	200052b0 	.word	0x200052b0
 8011b28:	200052b9 	.word	0x200052b9
 8011b2c:	20018ba4 	.word	0x20018ba4

08011b30 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011b30:	b590      	push	{r4, r7, lr}
 8011b32:	b085      	sub	sp, #20
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
 8011b38:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d106      	bne.n	8011b4e <tcp_oos_insert_segment+0x1e>
 8011b40:	4b3b      	ldr	r3, [pc, #236]	; (8011c30 <tcp_oos_insert_segment+0x100>)
 8011b42:	f240 421f 	movw	r2, #1055	; 0x41f
 8011b46:	493b      	ldr	r1, [pc, #236]	; (8011c34 <tcp_oos_insert_segment+0x104>)
 8011b48:	483b      	ldr	r0, [pc, #236]	; (8011c38 <tcp_oos_insert_segment+0x108>)
 8011b4a:	f006 f979 	bl	8017e40 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	68db      	ldr	r3, [r3, #12]
 8011b52:	899b      	ldrh	r3, [r3, #12]
 8011b54:	b29b      	uxth	r3, r3
 8011b56:	4618      	mov	r0, r3
 8011b58:	f7fb f8d4 	bl	800cd04 <lwip_htons>
 8011b5c:	4603      	mov	r3, r0
 8011b5e:	b2db      	uxtb	r3, r3
 8011b60:	f003 0301 	and.w	r3, r3, #1
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d028      	beq.n	8011bba <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011b68:	6838      	ldr	r0, [r7, #0]
 8011b6a:	f7fe f979 	bl	800fe60 <tcp_segs_free>
    next = NULL;
 8011b6e:	2300      	movs	r3, #0
 8011b70:	603b      	str	r3, [r7, #0]
 8011b72:	e056      	b.n	8011c22 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011b74:	683b      	ldr	r3, [r7, #0]
 8011b76:	68db      	ldr	r3, [r3, #12]
 8011b78:	899b      	ldrh	r3, [r3, #12]
 8011b7a:	b29b      	uxth	r3, r3
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	f7fb f8c1 	bl	800cd04 <lwip_htons>
 8011b82:	4603      	mov	r3, r0
 8011b84:	b2db      	uxtb	r3, r3
 8011b86:	f003 0301 	and.w	r3, r3, #1
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d00d      	beq.n	8011baa <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	68db      	ldr	r3, [r3, #12]
 8011b92:	899b      	ldrh	r3, [r3, #12]
 8011b94:	b29c      	uxth	r4, r3
 8011b96:	2001      	movs	r0, #1
 8011b98:	f7fb f8b4 	bl	800cd04 <lwip_htons>
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	461a      	mov	r2, r3
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	68db      	ldr	r3, [r3, #12]
 8011ba4:	4322      	orrs	r2, r4
 8011ba6:	b292      	uxth	r2, r2
 8011ba8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011baa:	683b      	ldr	r3, [r7, #0]
 8011bac:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011bae:	683b      	ldr	r3, [r7, #0]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011bb4:	68f8      	ldr	r0, [r7, #12]
 8011bb6:	f7fe f968 	bl	800fe8a <tcp_seg_free>
    while (next &&
 8011bba:	683b      	ldr	r3, [r7, #0]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d00e      	beq.n	8011bde <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	891b      	ldrh	r3, [r3, #8]
 8011bc4:	461a      	mov	r2, r3
 8011bc6:	4b1d      	ldr	r3, [pc, #116]	; (8011c3c <tcp_oos_insert_segment+0x10c>)
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	441a      	add	r2, r3
 8011bcc:	683b      	ldr	r3, [r7, #0]
 8011bce:	68db      	ldr	r3, [r3, #12]
 8011bd0:	685b      	ldr	r3, [r3, #4]
 8011bd2:	6839      	ldr	r1, [r7, #0]
 8011bd4:	8909      	ldrh	r1, [r1, #8]
 8011bd6:	440b      	add	r3, r1
 8011bd8:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	daca      	bge.n	8011b74 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011bde:	683b      	ldr	r3, [r7, #0]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d01e      	beq.n	8011c22 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	891b      	ldrh	r3, [r3, #8]
 8011be8:	461a      	mov	r2, r3
 8011bea:	4b14      	ldr	r3, [pc, #80]	; (8011c3c <tcp_oos_insert_segment+0x10c>)
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	441a      	add	r2, r3
 8011bf0:	683b      	ldr	r3, [r7, #0]
 8011bf2:	68db      	ldr	r3, [r3, #12]
 8011bf4:	685b      	ldr	r3, [r3, #4]
 8011bf6:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	dd12      	ble.n	8011c22 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	68db      	ldr	r3, [r3, #12]
 8011c00:	685b      	ldr	r3, [r3, #4]
 8011c02:	b29a      	uxth	r2, r3
 8011c04:	4b0d      	ldr	r3, [pc, #52]	; (8011c3c <tcp_oos_insert_segment+0x10c>)
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	b29b      	uxth	r3, r3
 8011c0a:	1ad3      	subs	r3, r2, r3
 8011c0c:	b29a      	uxth	r2, r3
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	685a      	ldr	r2, [r3, #4]
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	891b      	ldrh	r3, [r3, #8]
 8011c1a:	4619      	mov	r1, r3
 8011c1c:	4610      	mov	r0, r2
 8011c1e:	f7fc fb75 	bl	800e30c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	683a      	ldr	r2, [r7, #0]
 8011c26:	601a      	str	r2, [r3, #0]
}
 8011c28:	bf00      	nop
 8011c2a:	3714      	adds	r7, #20
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	bd90      	pop	{r4, r7, pc}
 8011c30:	0801b9e8 	.word	0x0801b9e8
 8011c34:	0801bca8 	.word	0x0801bca8
 8011c38:	0801ba34 	.word	0x0801ba34
 8011c3c:	200052ac 	.word	0x200052ac

08011c40 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011c40:	b5b0      	push	{r4, r5, r7, lr}
 8011c42:	b086      	sub	sp, #24
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	60f8      	str	r0, [r7, #12]
 8011c48:	60b9      	str	r1, [r7, #8]
 8011c4a:	607a      	str	r2, [r7, #4]
 8011c4c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011c4e:	e03e      	b.n	8011cce <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011c50:	68bb      	ldr	r3, [r7, #8]
 8011c52:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011c54:	68bb      	ldr	r3, [r7, #8]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011c5a:	697b      	ldr	r3, [r7, #20]
 8011c5c:	685b      	ldr	r3, [r3, #4]
 8011c5e:	4618      	mov	r0, r3
 8011c60:	f7fc fd68 	bl	800e734 <pbuf_clen>
 8011c64:	4603      	mov	r3, r0
 8011c66:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011c6e:	8a7a      	ldrh	r2, [r7, #18]
 8011c70:	429a      	cmp	r2, r3
 8011c72:	d906      	bls.n	8011c82 <tcp_free_acked_segments+0x42>
 8011c74:	4b2a      	ldr	r3, [pc, #168]	; (8011d20 <tcp_free_acked_segments+0xe0>)
 8011c76:	f240 4257 	movw	r2, #1111	; 0x457
 8011c7a:	492a      	ldr	r1, [pc, #168]	; (8011d24 <tcp_free_acked_segments+0xe4>)
 8011c7c:	482a      	ldr	r0, [pc, #168]	; (8011d28 <tcp_free_acked_segments+0xe8>)
 8011c7e:	f006 f8df 	bl	8017e40 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011c88:	8a7b      	ldrh	r3, [r7, #18]
 8011c8a:	1ad3      	subs	r3, r2, r3
 8011c8c:	b29a      	uxth	r2, r3
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011c94:	697b      	ldr	r3, [r7, #20]
 8011c96:	891a      	ldrh	r2, [r3, #8]
 8011c98:	4b24      	ldr	r3, [pc, #144]	; (8011d2c <tcp_free_acked_segments+0xec>)
 8011c9a:	881b      	ldrh	r3, [r3, #0]
 8011c9c:	4413      	add	r3, r2
 8011c9e:	b29a      	uxth	r2, r3
 8011ca0:	4b22      	ldr	r3, [pc, #136]	; (8011d2c <tcp_free_acked_segments+0xec>)
 8011ca2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011ca4:	6978      	ldr	r0, [r7, #20]
 8011ca6:	f7fe f8f0 	bl	800fe8a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011caa:	68fb      	ldr	r3, [r7, #12]
 8011cac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d00c      	beq.n	8011cce <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011cb4:	68bb      	ldr	r3, [r7, #8]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d109      	bne.n	8011cce <tcp_free_acked_segments+0x8e>
 8011cba:	683b      	ldr	r3, [r7, #0]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d106      	bne.n	8011cce <tcp_free_acked_segments+0x8e>
 8011cc0:	4b17      	ldr	r3, [pc, #92]	; (8011d20 <tcp_free_acked_segments+0xe0>)
 8011cc2:	f240 4261 	movw	r2, #1121	; 0x461
 8011cc6:	491a      	ldr	r1, [pc, #104]	; (8011d30 <tcp_free_acked_segments+0xf0>)
 8011cc8:	4817      	ldr	r0, [pc, #92]	; (8011d28 <tcp_free_acked_segments+0xe8>)
 8011cca:	f006 f8b9 	bl	8017e40 <iprintf>
  while (seg_list != NULL &&
 8011cce:	68bb      	ldr	r3, [r7, #8]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d020      	beq.n	8011d16 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011cd4:	68bb      	ldr	r3, [r7, #8]
 8011cd6:	68db      	ldr	r3, [r3, #12]
 8011cd8:	685b      	ldr	r3, [r3, #4]
 8011cda:	4618      	mov	r0, r3
 8011cdc:	f7fb f827 	bl	800cd2e <lwip_htonl>
 8011ce0:	4604      	mov	r4, r0
 8011ce2:	68bb      	ldr	r3, [r7, #8]
 8011ce4:	891b      	ldrh	r3, [r3, #8]
 8011ce6:	461d      	mov	r5, r3
 8011ce8:	68bb      	ldr	r3, [r7, #8]
 8011cea:	68db      	ldr	r3, [r3, #12]
 8011cec:	899b      	ldrh	r3, [r3, #12]
 8011cee:	b29b      	uxth	r3, r3
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	f7fb f807 	bl	800cd04 <lwip_htons>
 8011cf6:	4603      	mov	r3, r0
 8011cf8:	b2db      	uxtb	r3, r3
 8011cfa:	f003 0303 	and.w	r3, r3, #3
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d001      	beq.n	8011d06 <tcp_free_acked_segments+0xc6>
 8011d02:	2301      	movs	r3, #1
 8011d04:	e000      	b.n	8011d08 <tcp_free_acked_segments+0xc8>
 8011d06:	2300      	movs	r3, #0
 8011d08:	442b      	add	r3, r5
 8011d0a:	18e2      	adds	r2, r4, r3
 8011d0c:	4b09      	ldr	r3, [pc, #36]	; (8011d34 <tcp_free_acked_segments+0xf4>)
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	dd9c      	ble.n	8011c50 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8011d16:	68bb      	ldr	r3, [r7, #8]
}
 8011d18:	4618      	mov	r0, r3
 8011d1a:	3718      	adds	r7, #24
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	bdb0      	pop	{r4, r5, r7, pc}
 8011d20:	0801b9e8 	.word	0x0801b9e8
 8011d24:	0801bcd0 	.word	0x0801bcd0
 8011d28:	0801ba34 	.word	0x0801ba34
 8011d2c:	200052b4 	.word	0x200052b4
 8011d30:	0801bcf8 	.word	0x0801bcf8
 8011d34:	200052b0 	.word	0x200052b0

08011d38 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8011d38:	b5b0      	push	{r4, r5, r7, lr}
 8011d3a:	b094      	sub	sp, #80	; 0x50
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011d40:	2300      	movs	r3, #0
 8011d42:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d106      	bne.n	8011d58 <tcp_receive+0x20>
 8011d4a:	4ba6      	ldr	r3, [pc, #664]	; (8011fe4 <tcp_receive+0x2ac>)
 8011d4c:	f240 427b 	movw	r2, #1147	; 0x47b
 8011d50:	49a5      	ldr	r1, [pc, #660]	; (8011fe8 <tcp_receive+0x2b0>)
 8011d52:	48a6      	ldr	r0, [pc, #664]	; (8011fec <tcp_receive+0x2b4>)
 8011d54:	f006 f874 	bl	8017e40 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	7d1b      	ldrb	r3, [r3, #20]
 8011d5c:	2b03      	cmp	r3, #3
 8011d5e:	d806      	bhi.n	8011d6e <tcp_receive+0x36>
 8011d60:	4ba0      	ldr	r3, [pc, #640]	; (8011fe4 <tcp_receive+0x2ac>)
 8011d62:	f240 427c 	movw	r2, #1148	; 0x47c
 8011d66:	49a2      	ldr	r1, [pc, #648]	; (8011ff0 <tcp_receive+0x2b8>)
 8011d68:	48a0      	ldr	r0, [pc, #640]	; (8011fec <tcp_receive+0x2b4>)
 8011d6a:	f006 f869 	bl	8017e40 <iprintf>

  if (flags & TCP_ACK) {
 8011d6e:	4ba1      	ldr	r3, [pc, #644]	; (8011ff4 <tcp_receive+0x2bc>)
 8011d70:	781b      	ldrb	r3, [r3, #0]
 8011d72:	f003 0310 	and.w	r3, r3, #16
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	f000 8263 	beq.w	8012242 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d82:	461a      	mov	r2, r3
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d88:	4413      	add	r3, r2
 8011d8a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011d90:	4b99      	ldr	r3, [pc, #612]	; (8011ff8 <tcp_receive+0x2c0>)
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	1ad3      	subs	r3, r2, r3
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	db1b      	blt.n	8011dd2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011d9e:	4b96      	ldr	r3, [pc, #600]	; (8011ff8 <tcp_receive+0x2c0>)
 8011da0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011da2:	429a      	cmp	r2, r3
 8011da4:	d106      	bne.n	8011db4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011daa:	4b94      	ldr	r3, [pc, #592]	; (8011ffc <tcp_receive+0x2c4>)
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	1ad3      	subs	r3, r2, r3
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	db0e      	blt.n	8011dd2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011db8:	4b90      	ldr	r3, [pc, #576]	; (8011ffc <tcp_receive+0x2c4>)
 8011dba:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011dbc:	429a      	cmp	r2, r3
 8011dbe:	d125      	bne.n	8011e0c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011dc0:	4b8f      	ldr	r3, [pc, #572]	; (8012000 <tcp_receive+0x2c8>)
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	89db      	ldrh	r3, [r3, #14]
 8011dc6:	b29a      	uxth	r2, r3
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011dce:	429a      	cmp	r2, r3
 8011dd0:	d91c      	bls.n	8011e0c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011dd2:	4b8b      	ldr	r3, [pc, #556]	; (8012000 <tcp_receive+0x2c8>)
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	89db      	ldrh	r3, [r3, #14]
 8011dd8:	b29a      	uxth	r2, r3
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011dec:	429a      	cmp	r2, r3
 8011dee:	d205      	bcs.n	8011dfc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011dfc:	4b7e      	ldr	r3, [pc, #504]	; (8011ff8 <tcp_receive+0x2c0>)
 8011dfe:	681a      	ldr	r2, [r3, #0]
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011e04:	4b7d      	ldr	r3, [pc, #500]	; (8011ffc <tcp_receive+0x2c4>)
 8011e06:	681a      	ldr	r2, [r3, #0]
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011e0c:	4b7b      	ldr	r3, [pc, #492]	; (8011ffc <tcp_receive+0x2c4>)
 8011e0e:	681a      	ldr	r2, [r3, #0]
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e14:	1ad3      	subs	r3, r2, r3
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	dc58      	bgt.n	8011ecc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8011e1a:	4b7a      	ldr	r3, [pc, #488]	; (8012004 <tcp_receive+0x2cc>)
 8011e1c:	881b      	ldrh	r3, [r3, #0]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d14b      	bne.n	8011eba <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e26:	687a      	ldr	r2, [r7, #4]
 8011e28:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011e2c:	4413      	add	r3, r2
 8011e2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e30:	429a      	cmp	r2, r3
 8011e32:	d142      	bne.n	8011eba <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	db3d      	blt.n	8011eba <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011e42:	4b6e      	ldr	r3, [pc, #440]	; (8011ffc <tcp_receive+0x2c4>)
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	429a      	cmp	r2, r3
 8011e48:	d137      	bne.n	8011eba <tcp_receive+0x182>
              found_dupack = 1;
 8011e4a:	2301      	movs	r3, #1
 8011e4c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011e54:	2bff      	cmp	r3, #255	; 0xff
 8011e56:	d007      	beq.n	8011e68 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011e5e:	3301      	adds	r3, #1
 8011e60:	b2da      	uxtb	r2, r3
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011e6e:	2b03      	cmp	r3, #3
 8011e70:	d91b      	bls.n	8011eaa <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e7c:	4413      	add	r3, r2
 8011e7e:	b29a      	uxth	r2, r3
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011e86:	429a      	cmp	r2, r3
 8011e88:	d30a      	bcc.n	8011ea0 <tcp_receive+0x168>
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e94:	4413      	add	r3, r2
 8011e96:	b29a      	uxth	r2, r3
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011e9e:	e004      	b.n	8011eaa <tcp_receive+0x172>
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ea6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011eb0:	2b02      	cmp	r3, #2
 8011eb2:	d902      	bls.n	8011eba <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011eb4:	6878      	ldr	r0, [r7, #4]
 8011eb6:	f002 fb41 	bl	801453c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8011eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	f040 8160 	bne.w	8012182 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011eca:	e15a      	b.n	8012182 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011ecc:	4b4b      	ldr	r3, [pc, #300]	; (8011ffc <tcp_receive+0x2c4>)
 8011ece:	681a      	ldr	r2, [r3, #0]
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ed4:	1ad3      	subs	r3, r2, r3
 8011ed6:	3b01      	subs	r3, #1
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	f2c0 814d 	blt.w	8012178 <tcp_receive+0x440>
 8011ede:	4b47      	ldr	r3, [pc, #284]	; (8011ffc <tcp_receive+0x2c4>)
 8011ee0:	681a      	ldr	r2, [r3, #0]
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ee6:	1ad3      	subs	r3, r2, r3
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	f300 8145 	bgt.w	8012178 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	8b5b      	ldrh	r3, [r3, #26]
 8011ef2:	f003 0304 	and.w	r3, r3, #4
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d010      	beq.n	8011f1c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	8b5b      	ldrh	r3, [r3, #26]
 8011efe:	f023 0304 	bic.w	r3, r3, #4
 8011f02:	b29a      	uxth	r2, r3
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	2200      	movs	r2, #0
 8011f18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	2200      	movs	r2, #0
 8011f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011f2a:	10db      	asrs	r3, r3, #3
 8011f2c:	b21b      	sxth	r3, r3
 8011f2e:	b29a      	uxth	r2, r3
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011f36:	b29b      	uxth	r3, r3
 8011f38:	4413      	add	r3, r2
 8011f3a:	b29b      	uxth	r3, r3
 8011f3c:	b21a      	sxth	r2, r3
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011f44:	4b2d      	ldr	r3, [pc, #180]	; (8011ffc <tcp_receive+0x2c4>)
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	b29a      	uxth	r2, r3
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f4e:	b29b      	uxth	r3, r3
 8011f50:	1ad3      	subs	r3, r2, r3
 8011f52:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	2200      	movs	r2, #0
 8011f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8011f5c:	4b27      	ldr	r3, [pc, #156]	; (8011ffc <tcp_receive+0x2c4>)
 8011f5e:	681a      	ldr	r2, [r3, #0]
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	7d1b      	ldrb	r3, [r3, #20]
 8011f68:	2b03      	cmp	r3, #3
 8011f6a:	f240 8096 	bls.w	801209a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011f7a:	429a      	cmp	r2, r3
 8011f7c:	d244      	bcs.n	8012008 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	8b5b      	ldrh	r3, [r3, #26]
 8011f82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d001      	beq.n	8011f8e <tcp_receive+0x256>
 8011f8a:	2301      	movs	r3, #1
 8011f8c:	e000      	b.n	8011f90 <tcp_receive+0x258>
 8011f8e:	2302      	movs	r3, #2
 8011f90:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011f94:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011f98:	b29a      	uxth	r2, r3
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f9e:	fb12 f303 	smulbb	r3, r2, r3
 8011fa2:	b29b      	uxth	r3, r3
 8011fa4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011fa6:	4293      	cmp	r3, r2
 8011fa8:	bf28      	it	cs
 8011faa:	4613      	movcs	r3, r2
 8011fac:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011fb4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011fb6:	4413      	add	r3, r2
 8011fb8:	b29a      	uxth	r2, r3
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011fc0:	429a      	cmp	r2, r3
 8011fc2:	d309      	bcc.n	8011fd8 <tcp_receive+0x2a0>
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011fca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011fcc:	4413      	add	r3, r2
 8011fce:	b29a      	uxth	r2, r3
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011fd6:	e060      	b.n	801209a <tcp_receive+0x362>
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011fde:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011fe2:	e05a      	b.n	801209a <tcp_receive+0x362>
 8011fe4:	0801b9e8 	.word	0x0801b9e8
 8011fe8:	0801bd18 	.word	0x0801bd18
 8011fec:	0801ba34 	.word	0x0801ba34
 8011ff0:	0801bd34 	.word	0x0801bd34
 8011ff4:	200052b8 	.word	0x200052b8
 8011ff8:	200052ac 	.word	0x200052ac
 8011ffc:	200052b0 	.word	0x200052b0
 8012000:	2000529c 	.word	0x2000529c
 8012004:	200052b6 	.word	0x200052b6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801200e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012010:	4413      	add	r3, r2
 8012012:	b29a      	uxth	r2, r3
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801201a:	429a      	cmp	r2, r3
 801201c:	d309      	bcc.n	8012032 <tcp_receive+0x2fa>
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012024:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012026:	4413      	add	r3, r2
 8012028:	b29a      	uxth	r2, r3
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8012030:	e004      	b.n	801203c <tcp_receive+0x304>
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012038:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012048:	429a      	cmp	r2, r3
 801204a:	d326      	bcc.n	801209a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012058:	1ad3      	subs	r3, r2, r3
 801205a:	b29a      	uxth	r2, r3
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801206c:	4413      	add	r3, r2
 801206e:	b29a      	uxth	r2, r3
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012076:	429a      	cmp	r2, r3
 8012078:	d30a      	bcc.n	8012090 <tcp_receive+0x358>
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012084:	4413      	add	r3, r2
 8012086:	b29a      	uxth	r2, r3
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801208e:	e004      	b.n	801209a <tcp_receive+0x362>
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012096:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120a2:	4a98      	ldr	r2, [pc, #608]	; (8012304 <tcp_receive+0x5cc>)
 80120a4:	6878      	ldr	r0, [r7, #4]
 80120a6:	f7ff fdcb 	bl	8011c40 <tcp_free_acked_segments>
 80120aa:	4602      	mov	r2, r0
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120b8:	4a93      	ldr	r2, [pc, #588]	; (8012308 <tcp_receive+0x5d0>)
 80120ba:	6878      	ldr	r0, [r7, #4]
 80120bc:	f7ff fdc0 	bl	8011c40 <tcp_free_acked_segments>
 80120c0:	4602      	mov	r2, r0
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d104      	bne.n	80120d8 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80120d4:	861a      	strh	r2, [r3, #48]	; 0x30
 80120d6:	e002      	b.n	80120de <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	2200      	movs	r2, #0
 80120dc:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	2200      	movs	r2, #0
 80120e2:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d103      	bne.n	80120f4 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	2200      	movs	r2, #0
 80120f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80120fa:	4b84      	ldr	r3, [pc, #528]	; (801230c <tcp_receive+0x5d4>)
 80120fc:	881b      	ldrh	r3, [r3, #0]
 80120fe:	4413      	add	r3, r2
 8012100:	b29a      	uxth	r2, r3
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	8b5b      	ldrh	r3, [r3, #26]
 801210c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012110:	2b00      	cmp	r3, #0
 8012112:	d035      	beq.n	8012180 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012118:	2b00      	cmp	r3, #0
 801211a:	d118      	bne.n	801214e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012120:	2b00      	cmp	r3, #0
 8012122:	d00c      	beq.n	801213e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801212c:	68db      	ldr	r3, [r3, #12]
 801212e:	685b      	ldr	r3, [r3, #4]
 8012130:	4618      	mov	r0, r3
 8012132:	f7fa fdfc 	bl	800cd2e <lwip_htonl>
 8012136:	4603      	mov	r3, r0
 8012138:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801213a:	2b00      	cmp	r3, #0
 801213c:	dc20      	bgt.n	8012180 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	8b5b      	ldrh	r3, [r3, #26]
 8012142:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012146:	b29a      	uxth	r2, r3
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801214c:	e018      	b.n	8012180 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012156:	68db      	ldr	r3, [r3, #12]
 8012158:	685b      	ldr	r3, [r3, #4]
 801215a:	4618      	mov	r0, r3
 801215c:	f7fa fde7 	bl	800cd2e <lwip_htonl>
 8012160:	4603      	mov	r3, r0
 8012162:	1ae3      	subs	r3, r4, r3
 8012164:	2b00      	cmp	r3, #0
 8012166:	dc0b      	bgt.n	8012180 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	8b5b      	ldrh	r3, [r3, #26]
 801216c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012170:	b29a      	uxth	r2, r3
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012176:	e003      	b.n	8012180 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012178:	6878      	ldr	r0, [r7, #4]
 801217a:	f002 fbcd 	bl	8014918 <tcp_send_empty_ack>
 801217e:	e000      	b.n	8012182 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012180:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012186:	2b00      	cmp	r3, #0
 8012188:	d05b      	beq.n	8012242 <tcp_receive+0x50a>
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801218e:	4b60      	ldr	r3, [pc, #384]	; (8012310 <tcp_receive+0x5d8>)
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	1ad3      	subs	r3, r2, r3
 8012194:	2b00      	cmp	r3, #0
 8012196:	da54      	bge.n	8012242 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012198:	4b5e      	ldr	r3, [pc, #376]	; (8012314 <tcp_receive+0x5dc>)
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	b29a      	uxth	r2, r3
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121a2:	b29b      	uxth	r3, r3
 80121a4:	1ad3      	subs	r3, r2, r3
 80121a6:	b29b      	uxth	r3, r3
 80121a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80121ac:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80121b6:	10db      	asrs	r3, r3, #3
 80121b8:	b21b      	sxth	r3, r3
 80121ba:	b29b      	uxth	r3, r3
 80121bc:	1ad3      	subs	r3, r2, r3
 80121be:	b29b      	uxth	r3, r3
 80121c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80121ca:	b29a      	uxth	r2, r3
 80121cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80121d0:	4413      	add	r3, r2
 80121d2:	b29b      	uxth	r3, r3
 80121d4:	b21a      	sxth	r2, r3
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80121da:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80121de:	2b00      	cmp	r3, #0
 80121e0:	da05      	bge.n	80121ee <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80121e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80121e6:	425b      	negs	r3, r3
 80121e8:	b29b      	uxth	r3, r3
 80121ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80121ee:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80121f8:	109b      	asrs	r3, r3, #2
 80121fa:	b21b      	sxth	r3, r3
 80121fc:	b29b      	uxth	r3, r3
 80121fe:	1ad3      	subs	r3, r2, r3
 8012200:	b29b      	uxth	r3, r3
 8012202:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801220c:	b29a      	uxth	r2, r3
 801220e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012212:	4413      	add	r3, r2
 8012214:	b29b      	uxth	r3, r3
 8012216:	b21a      	sxth	r2, r3
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012222:	10db      	asrs	r3, r3, #3
 8012224:	b21b      	sxth	r3, r3
 8012226:	b29a      	uxth	r2, r3
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801222e:	b29b      	uxth	r3, r3
 8012230:	4413      	add	r3, r2
 8012232:	b29b      	uxth	r3, r3
 8012234:	b21a      	sxth	r2, r3
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	2200      	movs	r2, #0
 8012240:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012242:	4b35      	ldr	r3, [pc, #212]	; (8012318 <tcp_receive+0x5e0>)
 8012244:	881b      	ldrh	r3, [r3, #0]
 8012246:	2b00      	cmp	r3, #0
 8012248:	f000 84e1 	beq.w	8012c0e <tcp_receive+0xed6>
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	7d1b      	ldrb	r3, [r3, #20]
 8012250:	2b06      	cmp	r3, #6
 8012252:	f200 84dc 	bhi.w	8012c0e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801225a:	4b30      	ldr	r3, [pc, #192]	; (801231c <tcp_receive+0x5e4>)
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	1ad3      	subs	r3, r2, r3
 8012260:	3b01      	subs	r3, #1
 8012262:	2b00      	cmp	r3, #0
 8012264:	f2c0 808e 	blt.w	8012384 <tcp_receive+0x64c>
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801226c:	4b2a      	ldr	r3, [pc, #168]	; (8012318 <tcp_receive+0x5e0>)
 801226e:	881b      	ldrh	r3, [r3, #0]
 8012270:	4619      	mov	r1, r3
 8012272:	4b2a      	ldr	r3, [pc, #168]	; (801231c <tcp_receive+0x5e4>)
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	440b      	add	r3, r1
 8012278:	1ad3      	subs	r3, r2, r3
 801227a:	3301      	adds	r3, #1
 801227c:	2b00      	cmp	r3, #0
 801227e:	f300 8081 	bgt.w	8012384 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012282:	4b27      	ldr	r3, [pc, #156]	; (8012320 <tcp_receive+0x5e8>)
 8012284:	685b      	ldr	r3, [r3, #4]
 8012286:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801228c:	4b23      	ldr	r3, [pc, #140]	; (801231c <tcp_receive+0x5e4>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	1ad3      	subs	r3, r2, r3
 8012292:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012294:	4b22      	ldr	r3, [pc, #136]	; (8012320 <tcp_receive+0x5e8>)
 8012296:	685b      	ldr	r3, [r3, #4]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d106      	bne.n	80122aa <tcp_receive+0x572>
 801229c:	4b21      	ldr	r3, [pc, #132]	; (8012324 <tcp_receive+0x5ec>)
 801229e:	f240 5294 	movw	r2, #1428	; 0x594
 80122a2:	4921      	ldr	r1, [pc, #132]	; (8012328 <tcp_receive+0x5f0>)
 80122a4:	4821      	ldr	r0, [pc, #132]	; (801232c <tcp_receive+0x5f4>)
 80122a6:	f005 fdcb 	bl	8017e40 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80122aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80122b0:	4293      	cmp	r3, r2
 80122b2:	d906      	bls.n	80122c2 <tcp_receive+0x58a>
 80122b4:	4b1b      	ldr	r3, [pc, #108]	; (8012324 <tcp_receive+0x5ec>)
 80122b6:	f240 5295 	movw	r2, #1429	; 0x595
 80122ba:	491d      	ldr	r1, [pc, #116]	; (8012330 <tcp_receive+0x5f8>)
 80122bc:	481b      	ldr	r0, [pc, #108]	; (801232c <tcp_receive+0x5f4>)
 80122be:	f005 fdbf 	bl	8017e40 <iprintf>
      off = (u16_t)off32;
 80122c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122c4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80122c8:	4b15      	ldr	r3, [pc, #84]	; (8012320 <tcp_receive+0x5e8>)
 80122ca:	685b      	ldr	r3, [r3, #4]
 80122cc:	891b      	ldrh	r3, [r3, #8]
 80122ce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80122d2:	429a      	cmp	r2, r3
 80122d4:	d906      	bls.n	80122e4 <tcp_receive+0x5ac>
 80122d6:	4b13      	ldr	r3, [pc, #76]	; (8012324 <tcp_receive+0x5ec>)
 80122d8:	f240 5297 	movw	r2, #1431	; 0x597
 80122dc:	4915      	ldr	r1, [pc, #84]	; (8012334 <tcp_receive+0x5fc>)
 80122de:	4813      	ldr	r0, [pc, #76]	; (801232c <tcp_receive+0x5f4>)
 80122e0:	f005 fdae 	bl	8017e40 <iprintf>
      inseg.len -= off;
 80122e4:	4b0e      	ldr	r3, [pc, #56]	; (8012320 <tcp_receive+0x5e8>)
 80122e6:	891a      	ldrh	r2, [r3, #8]
 80122e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80122ec:	1ad3      	subs	r3, r2, r3
 80122ee:	b29a      	uxth	r2, r3
 80122f0:	4b0b      	ldr	r3, [pc, #44]	; (8012320 <tcp_receive+0x5e8>)
 80122f2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80122f4:	4b0a      	ldr	r3, [pc, #40]	; (8012320 <tcp_receive+0x5e8>)
 80122f6:	685b      	ldr	r3, [r3, #4]
 80122f8:	891a      	ldrh	r2, [r3, #8]
 80122fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80122fe:	1ad3      	subs	r3, r2, r3
 8012300:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8012302:	e029      	b.n	8012358 <tcp_receive+0x620>
 8012304:	0801bd50 	.word	0x0801bd50
 8012308:	0801bd58 	.word	0x0801bd58
 801230c:	200052b4 	.word	0x200052b4
 8012310:	200052b0 	.word	0x200052b0
 8012314:	20018ba8 	.word	0x20018ba8
 8012318:	200052b6 	.word	0x200052b6
 801231c:	200052ac 	.word	0x200052ac
 8012320:	2000528c 	.word	0x2000528c
 8012324:	0801b9e8 	.word	0x0801b9e8
 8012328:	0801bd60 	.word	0x0801bd60
 801232c:	0801ba34 	.word	0x0801ba34
 8012330:	0801bd70 	.word	0x0801bd70
 8012334:	0801bd80 	.word	0x0801bd80
        off -= p->len;
 8012338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801233a:	895b      	ldrh	r3, [r3, #10]
 801233c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012340:	1ad3      	subs	r3, r2, r3
 8012342:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012348:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801234a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801234c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801234e:	2200      	movs	r2, #0
 8012350:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801235a:	895b      	ldrh	r3, [r3, #10]
 801235c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012360:	429a      	cmp	r2, r3
 8012362:	d8e9      	bhi.n	8012338 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012364:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012368:	4619      	mov	r1, r3
 801236a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801236c:	f7fc f8ce 	bl	800e50c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012374:	4a91      	ldr	r2, [pc, #580]	; (80125bc <tcp_receive+0x884>)
 8012376:	6013      	str	r3, [r2, #0]
 8012378:	4b91      	ldr	r3, [pc, #580]	; (80125c0 <tcp_receive+0x888>)
 801237a:	68db      	ldr	r3, [r3, #12]
 801237c:	4a8f      	ldr	r2, [pc, #572]	; (80125bc <tcp_receive+0x884>)
 801237e:	6812      	ldr	r2, [r2, #0]
 8012380:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012382:	e00d      	b.n	80123a0 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012384:	4b8d      	ldr	r3, [pc, #564]	; (80125bc <tcp_receive+0x884>)
 8012386:	681a      	ldr	r2, [r3, #0]
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801238c:	1ad3      	subs	r3, r2, r3
 801238e:	2b00      	cmp	r3, #0
 8012390:	da06      	bge.n	80123a0 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	8b5b      	ldrh	r3, [r3, #26]
 8012396:	f043 0302 	orr.w	r3, r3, #2
 801239a:	b29a      	uxth	r2, r3
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80123a0:	4b86      	ldr	r3, [pc, #536]	; (80125bc <tcp_receive+0x884>)
 80123a2:	681a      	ldr	r2, [r3, #0]
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123a8:	1ad3      	subs	r3, r2, r3
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	f2c0 842a 	blt.w	8012c04 <tcp_receive+0xecc>
 80123b0:	4b82      	ldr	r3, [pc, #520]	; (80125bc <tcp_receive+0x884>)
 80123b2:	681a      	ldr	r2, [r3, #0]
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123b8:	6879      	ldr	r1, [r7, #4]
 80123ba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80123bc:	440b      	add	r3, r1
 80123be:	1ad3      	subs	r3, r2, r3
 80123c0:	3301      	adds	r3, #1
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	f300 841e 	bgt.w	8012c04 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80123cc:	4b7b      	ldr	r3, [pc, #492]	; (80125bc <tcp_receive+0x884>)
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	429a      	cmp	r2, r3
 80123d2:	f040 829a 	bne.w	801290a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80123d6:	4b7a      	ldr	r3, [pc, #488]	; (80125c0 <tcp_receive+0x888>)
 80123d8:	891c      	ldrh	r4, [r3, #8]
 80123da:	4b79      	ldr	r3, [pc, #484]	; (80125c0 <tcp_receive+0x888>)
 80123dc:	68db      	ldr	r3, [r3, #12]
 80123de:	899b      	ldrh	r3, [r3, #12]
 80123e0:	b29b      	uxth	r3, r3
 80123e2:	4618      	mov	r0, r3
 80123e4:	f7fa fc8e 	bl	800cd04 <lwip_htons>
 80123e8:	4603      	mov	r3, r0
 80123ea:	b2db      	uxtb	r3, r3
 80123ec:	f003 0303 	and.w	r3, r3, #3
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d001      	beq.n	80123f8 <tcp_receive+0x6c0>
 80123f4:	2301      	movs	r3, #1
 80123f6:	e000      	b.n	80123fa <tcp_receive+0x6c2>
 80123f8:	2300      	movs	r3, #0
 80123fa:	4423      	add	r3, r4
 80123fc:	b29a      	uxth	r2, r3
 80123fe:	4b71      	ldr	r3, [pc, #452]	; (80125c4 <tcp_receive+0x88c>)
 8012400:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012406:	4b6f      	ldr	r3, [pc, #444]	; (80125c4 <tcp_receive+0x88c>)
 8012408:	881b      	ldrh	r3, [r3, #0]
 801240a:	429a      	cmp	r2, r3
 801240c:	d275      	bcs.n	80124fa <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801240e:	4b6c      	ldr	r3, [pc, #432]	; (80125c0 <tcp_receive+0x888>)
 8012410:	68db      	ldr	r3, [r3, #12]
 8012412:	899b      	ldrh	r3, [r3, #12]
 8012414:	b29b      	uxth	r3, r3
 8012416:	4618      	mov	r0, r3
 8012418:	f7fa fc74 	bl	800cd04 <lwip_htons>
 801241c:	4603      	mov	r3, r0
 801241e:	b2db      	uxtb	r3, r3
 8012420:	f003 0301 	and.w	r3, r3, #1
 8012424:	2b00      	cmp	r3, #0
 8012426:	d01f      	beq.n	8012468 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012428:	4b65      	ldr	r3, [pc, #404]	; (80125c0 <tcp_receive+0x888>)
 801242a:	68db      	ldr	r3, [r3, #12]
 801242c:	899b      	ldrh	r3, [r3, #12]
 801242e:	b29b      	uxth	r3, r3
 8012430:	b21b      	sxth	r3, r3
 8012432:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012436:	b21c      	sxth	r4, r3
 8012438:	4b61      	ldr	r3, [pc, #388]	; (80125c0 <tcp_receive+0x888>)
 801243a:	68db      	ldr	r3, [r3, #12]
 801243c:	899b      	ldrh	r3, [r3, #12]
 801243e:	b29b      	uxth	r3, r3
 8012440:	4618      	mov	r0, r3
 8012442:	f7fa fc5f 	bl	800cd04 <lwip_htons>
 8012446:	4603      	mov	r3, r0
 8012448:	b2db      	uxtb	r3, r3
 801244a:	b29b      	uxth	r3, r3
 801244c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012450:	b29b      	uxth	r3, r3
 8012452:	4618      	mov	r0, r3
 8012454:	f7fa fc56 	bl	800cd04 <lwip_htons>
 8012458:	4603      	mov	r3, r0
 801245a:	b21b      	sxth	r3, r3
 801245c:	4323      	orrs	r3, r4
 801245e:	b21a      	sxth	r2, r3
 8012460:	4b57      	ldr	r3, [pc, #348]	; (80125c0 <tcp_receive+0x888>)
 8012462:	68db      	ldr	r3, [r3, #12]
 8012464:	b292      	uxth	r2, r2
 8012466:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801246c:	4b54      	ldr	r3, [pc, #336]	; (80125c0 <tcp_receive+0x888>)
 801246e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012470:	4b53      	ldr	r3, [pc, #332]	; (80125c0 <tcp_receive+0x888>)
 8012472:	68db      	ldr	r3, [r3, #12]
 8012474:	899b      	ldrh	r3, [r3, #12]
 8012476:	b29b      	uxth	r3, r3
 8012478:	4618      	mov	r0, r3
 801247a:	f7fa fc43 	bl	800cd04 <lwip_htons>
 801247e:	4603      	mov	r3, r0
 8012480:	b2db      	uxtb	r3, r3
 8012482:	f003 0302 	and.w	r3, r3, #2
 8012486:	2b00      	cmp	r3, #0
 8012488:	d005      	beq.n	8012496 <tcp_receive+0x75e>
            inseg.len -= 1;
 801248a:	4b4d      	ldr	r3, [pc, #308]	; (80125c0 <tcp_receive+0x888>)
 801248c:	891b      	ldrh	r3, [r3, #8]
 801248e:	3b01      	subs	r3, #1
 8012490:	b29a      	uxth	r2, r3
 8012492:	4b4b      	ldr	r3, [pc, #300]	; (80125c0 <tcp_receive+0x888>)
 8012494:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012496:	4b4a      	ldr	r3, [pc, #296]	; (80125c0 <tcp_receive+0x888>)
 8012498:	685b      	ldr	r3, [r3, #4]
 801249a:	4a49      	ldr	r2, [pc, #292]	; (80125c0 <tcp_receive+0x888>)
 801249c:	8912      	ldrh	r2, [r2, #8]
 801249e:	4611      	mov	r1, r2
 80124a0:	4618      	mov	r0, r3
 80124a2:	f7fb ff33 	bl	800e30c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80124a6:	4b46      	ldr	r3, [pc, #280]	; (80125c0 <tcp_receive+0x888>)
 80124a8:	891c      	ldrh	r4, [r3, #8]
 80124aa:	4b45      	ldr	r3, [pc, #276]	; (80125c0 <tcp_receive+0x888>)
 80124ac:	68db      	ldr	r3, [r3, #12]
 80124ae:	899b      	ldrh	r3, [r3, #12]
 80124b0:	b29b      	uxth	r3, r3
 80124b2:	4618      	mov	r0, r3
 80124b4:	f7fa fc26 	bl	800cd04 <lwip_htons>
 80124b8:	4603      	mov	r3, r0
 80124ba:	b2db      	uxtb	r3, r3
 80124bc:	f003 0303 	and.w	r3, r3, #3
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d001      	beq.n	80124c8 <tcp_receive+0x790>
 80124c4:	2301      	movs	r3, #1
 80124c6:	e000      	b.n	80124ca <tcp_receive+0x792>
 80124c8:	2300      	movs	r3, #0
 80124ca:	4423      	add	r3, r4
 80124cc:	b29a      	uxth	r2, r3
 80124ce:	4b3d      	ldr	r3, [pc, #244]	; (80125c4 <tcp_receive+0x88c>)
 80124d0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80124d2:	4b3c      	ldr	r3, [pc, #240]	; (80125c4 <tcp_receive+0x88c>)
 80124d4:	881b      	ldrh	r3, [r3, #0]
 80124d6:	461a      	mov	r2, r3
 80124d8:	4b38      	ldr	r3, [pc, #224]	; (80125bc <tcp_receive+0x884>)
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	441a      	add	r2, r3
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124e2:	6879      	ldr	r1, [r7, #4]
 80124e4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80124e6:	440b      	add	r3, r1
 80124e8:	429a      	cmp	r2, r3
 80124ea:	d006      	beq.n	80124fa <tcp_receive+0x7c2>
 80124ec:	4b36      	ldr	r3, [pc, #216]	; (80125c8 <tcp_receive+0x890>)
 80124ee:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80124f2:	4936      	ldr	r1, [pc, #216]	; (80125cc <tcp_receive+0x894>)
 80124f4:	4836      	ldr	r0, [pc, #216]	; (80125d0 <tcp_receive+0x898>)
 80124f6:	f005 fca3 	bl	8017e40 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80124fe:	2b00      	cmp	r3, #0
 8012500:	f000 80e7 	beq.w	80126d2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012504:	4b2e      	ldr	r3, [pc, #184]	; (80125c0 <tcp_receive+0x888>)
 8012506:	68db      	ldr	r3, [r3, #12]
 8012508:	899b      	ldrh	r3, [r3, #12]
 801250a:	b29b      	uxth	r3, r3
 801250c:	4618      	mov	r0, r3
 801250e:	f7fa fbf9 	bl	800cd04 <lwip_htons>
 8012512:	4603      	mov	r3, r0
 8012514:	b2db      	uxtb	r3, r3
 8012516:	f003 0301 	and.w	r3, r3, #1
 801251a:	2b00      	cmp	r3, #0
 801251c:	d010      	beq.n	8012540 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801251e:	e00a      	b.n	8012536 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012524:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801252a:	681a      	ldr	r2, [r3, #0]
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8012530:	68f8      	ldr	r0, [r7, #12]
 8012532:	f7fd fcaa 	bl	800fe8a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801253a:	2b00      	cmp	r3, #0
 801253c:	d1f0      	bne.n	8012520 <tcp_receive+0x7e8>
 801253e:	e0c8      	b.n	80126d2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012544:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012546:	e052      	b.n	80125ee <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801254a:	68db      	ldr	r3, [r3, #12]
 801254c:	899b      	ldrh	r3, [r3, #12]
 801254e:	b29b      	uxth	r3, r3
 8012550:	4618      	mov	r0, r3
 8012552:	f7fa fbd7 	bl	800cd04 <lwip_htons>
 8012556:	4603      	mov	r3, r0
 8012558:	b2db      	uxtb	r3, r3
 801255a:	f003 0301 	and.w	r3, r3, #1
 801255e:	2b00      	cmp	r3, #0
 8012560:	d03d      	beq.n	80125de <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012562:	4b17      	ldr	r3, [pc, #92]	; (80125c0 <tcp_receive+0x888>)
 8012564:	68db      	ldr	r3, [r3, #12]
 8012566:	899b      	ldrh	r3, [r3, #12]
 8012568:	b29b      	uxth	r3, r3
 801256a:	4618      	mov	r0, r3
 801256c:	f7fa fbca 	bl	800cd04 <lwip_htons>
 8012570:	4603      	mov	r3, r0
 8012572:	b2db      	uxtb	r3, r3
 8012574:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012578:	2b00      	cmp	r3, #0
 801257a:	d130      	bne.n	80125de <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801257c:	4b10      	ldr	r3, [pc, #64]	; (80125c0 <tcp_receive+0x888>)
 801257e:	68db      	ldr	r3, [r3, #12]
 8012580:	899b      	ldrh	r3, [r3, #12]
 8012582:	b29c      	uxth	r4, r3
 8012584:	2001      	movs	r0, #1
 8012586:	f7fa fbbd 	bl	800cd04 <lwip_htons>
 801258a:	4603      	mov	r3, r0
 801258c:	461a      	mov	r2, r3
 801258e:	4b0c      	ldr	r3, [pc, #48]	; (80125c0 <tcp_receive+0x888>)
 8012590:	68db      	ldr	r3, [r3, #12]
 8012592:	4322      	orrs	r2, r4
 8012594:	b292      	uxth	r2, r2
 8012596:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012598:	4b09      	ldr	r3, [pc, #36]	; (80125c0 <tcp_receive+0x888>)
 801259a:	891c      	ldrh	r4, [r3, #8]
 801259c:	4b08      	ldr	r3, [pc, #32]	; (80125c0 <tcp_receive+0x888>)
 801259e:	68db      	ldr	r3, [r3, #12]
 80125a0:	899b      	ldrh	r3, [r3, #12]
 80125a2:	b29b      	uxth	r3, r3
 80125a4:	4618      	mov	r0, r3
 80125a6:	f7fa fbad 	bl	800cd04 <lwip_htons>
 80125aa:	4603      	mov	r3, r0
 80125ac:	b2db      	uxtb	r3, r3
 80125ae:	f003 0303 	and.w	r3, r3, #3
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d00e      	beq.n	80125d4 <tcp_receive+0x89c>
 80125b6:	2301      	movs	r3, #1
 80125b8:	e00d      	b.n	80125d6 <tcp_receive+0x89e>
 80125ba:	bf00      	nop
 80125bc:	200052ac 	.word	0x200052ac
 80125c0:	2000528c 	.word	0x2000528c
 80125c4:	200052b6 	.word	0x200052b6
 80125c8:	0801b9e8 	.word	0x0801b9e8
 80125cc:	0801bd90 	.word	0x0801bd90
 80125d0:	0801ba34 	.word	0x0801ba34
 80125d4:	2300      	movs	r3, #0
 80125d6:	4423      	add	r3, r4
 80125d8:	b29a      	uxth	r2, r3
 80125da:	4b98      	ldr	r3, [pc, #608]	; (801283c <tcp_receive+0xb04>)
 80125dc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80125de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125e0:	613b      	str	r3, [r7, #16]
              next = next->next;
 80125e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80125e8:	6938      	ldr	r0, [r7, #16]
 80125ea:	f7fd fc4e 	bl	800fe8a <tcp_seg_free>
            while (next &&
 80125ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d00e      	beq.n	8012612 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80125f4:	4b91      	ldr	r3, [pc, #580]	; (801283c <tcp_receive+0xb04>)
 80125f6:	881b      	ldrh	r3, [r3, #0]
 80125f8:	461a      	mov	r2, r3
 80125fa:	4b91      	ldr	r3, [pc, #580]	; (8012840 <tcp_receive+0xb08>)
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	441a      	add	r2, r3
 8012600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012602:	68db      	ldr	r3, [r3, #12]
 8012604:	685b      	ldr	r3, [r3, #4]
 8012606:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012608:	8909      	ldrh	r1, [r1, #8]
 801260a:	440b      	add	r3, r1
 801260c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801260e:	2b00      	cmp	r3, #0
 8012610:	da9a      	bge.n	8012548 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012614:	2b00      	cmp	r3, #0
 8012616:	d059      	beq.n	80126cc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8012618:	4b88      	ldr	r3, [pc, #544]	; (801283c <tcp_receive+0xb04>)
 801261a:	881b      	ldrh	r3, [r3, #0]
 801261c:	461a      	mov	r2, r3
 801261e:	4b88      	ldr	r3, [pc, #544]	; (8012840 <tcp_receive+0xb08>)
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	441a      	add	r2, r3
 8012624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012626:	68db      	ldr	r3, [r3, #12]
 8012628:	685b      	ldr	r3, [r3, #4]
 801262a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801262c:	2b00      	cmp	r3, #0
 801262e:	dd4d      	ble.n	80126cc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012632:	68db      	ldr	r3, [r3, #12]
 8012634:	685b      	ldr	r3, [r3, #4]
 8012636:	b29a      	uxth	r2, r3
 8012638:	4b81      	ldr	r3, [pc, #516]	; (8012840 <tcp_receive+0xb08>)
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	b29b      	uxth	r3, r3
 801263e:	1ad3      	subs	r3, r2, r3
 8012640:	b29a      	uxth	r2, r3
 8012642:	4b80      	ldr	r3, [pc, #512]	; (8012844 <tcp_receive+0xb0c>)
 8012644:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012646:	4b7f      	ldr	r3, [pc, #508]	; (8012844 <tcp_receive+0xb0c>)
 8012648:	68db      	ldr	r3, [r3, #12]
 801264a:	899b      	ldrh	r3, [r3, #12]
 801264c:	b29b      	uxth	r3, r3
 801264e:	4618      	mov	r0, r3
 8012650:	f7fa fb58 	bl	800cd04 <lwip_htons>
 8012654:	4603      	mov	r3, r0
 8012656:	b2db      	uxtb	r3, r3
 8012658:	f003 0302 	and.w	r3, r3, #2
 801265c:	2b00      	cmp	r3, #0
 801265e:	d005      	beq.n	801266c <tcp_receive+0x934>
                inseg.len -= 1;
 8012660:	4b78      	ldr	r3, [pc, #480]	; (8012844 <tcp_receive+0xb0c>)
 8012662:	891b      	ldrh	r3, [r3, #8]
 8012664:	3b01      	subs	r3, #1
 8012666:	b29a      	uxth	r2, r3
 8012668:	4b76      	ldr	r3, [pc, #472]	; (8012844 <tcp_receive+0xb0c>)
 801266a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801266c:	4b75      	ldr	r3, [pc, #468]	; (8012844 <tcp_receive+0xb0c>)
 801266e:	685b      	ldr	r3, [r3, #4]
 8012670:	4a74      	ldr	r2, [pc, #464]	; (8012844 <tcp_receive+0xb0c>)
 8012672:	8912      	ldrh	r2, [r2, #8]
 8012674:	4611      	mov	r1, r2
 8012676:	4618      	mov	r0, r3
 8012678:	f7fb fe48 	bl	800e30c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801267c:	4b71      	ldr	r3, [pc, #452]	; (8012844 <tcp_receive+0xb0c>)
 801267e:	891c      	ldrh	r4, [r3, #8]
 8012680:	4b70      	ldr	r3, [pc, #448]	; (8012844 <tcp_receive+0xb0c>)
 8012682:	68db      	ldr	r3, [r3, #12]
 8012684:	899b      	ldrh	r3, [r3, #12]
 8012686:	b29b      	uxth	r3, r3
 8012688:	4618      	mov	r0, r3
 801268a:	f7fa fb3b 	bl	800cd04 <lwip_htons>
 801268e:	4603      	mov	r3, r0
 8012690:	b2db      	uxtb	r3, r3
 8012692:	f003 0303 	and.w	r3, r3, #3
 8012696:	2b00      	cmp	r3, #0
 8012698:	d001      	beq.n	801269e <tcp_receive+0x966>
 801269a:	2301      	movs	r3, #1
 801269c:	e000      	b.n	80126a0 <tcp_receive+0x968>
 801269e:	2300      	movs	r3, #0
 80126a0:	4423      	add	r3, r4
 80126a2:	b29a      	uxth	r2, r3
 80126a4:	4b65      	ldr	r3, [pc, #404]	; (801283c <tcp_receive+0xb04>)
 80126a6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80126a8:	4b64      	ldr	r3, [pc, #400]	; (801283c <tcp_receive+0xb04>)
 80126aa:	881b      	ldrh	r3, [r3, #0]
 80126ac:	461a      	mov	r2, r3
 80126ae:	4b64      	ldr	r3, [pc, #400]	; (8012840 <tcp_receive+0xb08>)
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	441a      	add	r2, r3
 80126b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126b6:	68db      	ldr	r3, [r3, #12]
 80126b8:	685b      	ldr	r3, [r3, #4]
 80126ba:	429a      	cmp	r2, r3
 80126bc:	d006      	beq.n	80126cc <tcp_receive+0x994>
 80126be:	4b62      	ldr	r3, [pc, #392]	; (8012848 <tcp_receive+0xb10>)
 80126c0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80126c4:	4961      	ldr	r1, [pc, #388]	; (801284c <tcp_receive+0xb14>)
 80126c6:	4862      	ldr	r0, [pc, #392]	; (8012850 <tcp_receive+0xb18>)
 80126c8:	f005 fbba 	bl	8017e40 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80126d0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80126d2:	4b5a      	ldr	r3, [pc, #360]	; (801283c <tcp_receive+0xb04>)
 80126d4:	881b      	ldrh	r3, [r3, #0]
 80126d6:	461a      	mov	r2, r3
 80126d8:	4b59      	ldr	r3, [pc, #356]	; (8012840 <tcp_receive+0xb08>)
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	441a      	add	r2, r3
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80126e6:	4b55      	ldr	r3, [pc, #340]	; (801283c <tcp_receive+0xb04>)
 80126e8:	881b      	ldrh	r3, [r3, #0]
 80126ea:	429a      	cmp	r2, r3
 80126ec:	d206      	bcs.n	80126fc <tcp_receive+0x9c4>
 80126ee:	4b56      	ldr	r3, [pc, #344]	; (8012848 <tcp_receive+0xb10>)
 80126f0:	f240 6207 	movw	r2, #1543	; 0x607
 80126f4:	4957      	ldr	r1, [pc, #348]	; (8012854 <tcp_receive+0xb1c>)
 80126f6:	4856      	ldr	r0, [pc, #344]	; (8012850 <tcp_receive+0xb18>)
 80126f8:	f005 fba2 	bl	8017e40 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012700:	4b4e      	ldr	r3, [pc, #312]	; (801283c <tcp_receive+0xb04>)
 8012702:	881b      	ldrh	r3, [r3, #0]
 8012704:	1ad3      	subs	r3, r2, r3
 8012706:	b29a      	uxth	r2, r3
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801270c:	6878      	ldr	r0, [r7, #4]
 801270e:	f7fc fe97 	bl	800f440 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012712:	4b4c      	ldr	r3, [pc, #304]	; (8012844 <tcp_receive+0xb0c>)
 8012714:	685b      	ldr	r3, [r3, #4]
 8012716:	891b      	ldrh	r3, [r3, #8]
 8012718:	2b00      	cmp	r3, #0
 801271a:	d006      	beq.n	801272a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801271c:	4b49      	ldr	r3, [pc, #292]	; (8012844 <tcp_receive+0xb0c>)
 801271e:	685b      	ldr	r3, [r3, #4]
 8012720:	4a4d      	ldr	r2, [pc, #308]	; (8012858 <tcp_receive+0xb20>)
 8012722:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012724:	4b47      	ldr	r3, [pc, #284]	; (8012844 <tcp_receive+0xb0c>)
 8012726:	2200      	movs	r2, #0
 8012728:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801272a:	4b46      	ldr	r3, [pc, #280]	; (8012844 <tcp_receive+0xb0c>)
 801272c:	68db      	ldr	r3, [r3, #12]
 801272e:	899b      	ldrh	r3, [r3, #12]
 8012730:	b29b      	uxth	r3, r3
 8012732:	4618      	mov	r0, r3
 8012734:	f7fa fae6 	bl	800cd04 <lwip_htons>
 8012738:	4603      	mov	r3, r0
 801273a:	b2db      	uxtb	r3, r3
 801273c:	f003 0301 	and.w	r3, r3, #1
 8012740:	2b00      	cmp	r3, #0
 8012742:	f000 80b8 	beq.w	80128b6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012746:	4b45      	ldr	r3, [pc, #276]	; (801285c <tcp_receive+0xb24>)
 8012748:	781b      	ldrb	r3, [r3, #0]
 801274a:	f043 0320 	orr.w	r3, r3, #32
 801274e:	b2da      	uxtb	r2, r3
 8012750:	4b42      	ldr	r3, [pc, #264]	; (801285c <tcp_receive+0xb24>)
 8012752:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012754:	e0af      	b.n	80128b6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801275a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012760:	68db      	ldr	r3, [r3, #12]
 8012762:	685b      	ldr	r3, [r3, #4]
 8012764:	4a36      	ldr	r2, [pc, #216]	; (8012840 <tcp_receive+0xb08>)
 8012766:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012768:	68bb      	ldr	r3, [r7, #8]
 801276a:	891b      	ldrh	r3, [r3, #8]
 801276c:	461c      	mov	r4, r3
 801276e:	68bb      	ldr	r3, [r7, #8]
 8012770:	68db      	ldr	r3, [r3, #12]
 8012772:	899b      	ldrh	r3, [r3, #12]
 8012774:	b29b      	uxth	r3, r3
 8012776:	4618      	mov	r0, r3
 8012778:	f7fa fac4 	bl	800cd04 <lwip_htons>
 801277c:	4603      	mov	r3, r0
 801277e:	b2db      	uxtb	r3, r3
 8012780:	f003 0303 	and.w	r3, r3, #3
 8012784:	2b00      	cmp	r3, #0
 8012786:	d001      	beq.n	801278c <tcp_receive+0xa54>
 8012788:	2301      	movs	r3, #1
 801278a:	e000      	b.n	801278e <tcp_receive+0xa56>
 801278c:	2300      	movs	r3, #0
 801278e:	191a      	adds	r2, r3, r4
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012794:	441a      	add	r2, r3
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801279e:	461c      	mov	r4, r3
 80127a0:	68bb      	ldr	r3, [r7, #8]
 80127a2:	891b      	ldrh	r3, [r3, #8]
 80127a4:	461d      	mov	r5, r3
 80127a6:	68bb      	ldr	r3, [r7, #8]
 80127a8:	68db      	ldr	r3, [r3, #12]
 80127aa:	899b      	ldrh	r3, [r3, #12]
 80127ac:	b29b      	uxth	r3, r3
 80127ae:	4618      	mov	r0, r3
 80127b0:	f7fa faa8 	bl	800cd04 <lwip_htons>
 80127b4:	4603      	mov	r3, r0
 80127b6:	b2db      	uxtb	r3, r3
 80127b8:	f003 0303 	and.w	r3, r3, #3
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d001      	beq.n	80127c4 <tcp_receive+0xa8c>
 80127c0:	2301      	movs	r3, #1
 80127c2:	e000      	b.n	80127c6 <tcp_receive+0xa8e>
 80127c4:	2300      	movs	r3, #0
 80127c6:	442b      	add	r3, r5
 80127c8:	429c      	cmp	r4, r3
 80127ca:	d206      	bcs.n	80127da <tcp_receive+0xaa2>
 80127cc:	4b1e      	ldr	r3, [pc, #120]	; (8012848 <tcp_receive+0xb10>)
 80127ce:	f240 622b 	movw	r2, #1579	; 0x62b
 80127d2:	4923      	ldr	r1, [pc, #140]	; (8012860 <tcp_receive+0xb28>)
 80127d4:	481e      	ldr	r0, [pc, #120]	; (8012850 <tcp_receive+0xb18>)
 80127d6:	f005 fb33 	bl	8017e40 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80127da:	68bb      	ldr	r3, [r7, #8]
 80127dc:	891b      	ldrh	r3, [r3, #8]
 80127de:	461c      	mov	r4, r3
 80127e0:	68bb      	ldr	r3, [r7, #8]
 80127e2:	68db      	ldr	r3, [r3, #12]
 80127e4:	899b      	ldrh	r3, [r3, #12]
 80127e6:	b29b      	uxth	r3, r3
 80127e8:	4618      	mov	r0, r3
 80127ea:	f7fa fa8b 	bl	800cd04 <lwip_htons>
 80127ee:	4603      	mov	r3, r0
 80127f0:	b2db      	uxtb	r3, r3
 80127f2:	f003 0303 	and.w	r3, r3, #3
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d001      	beq.n	80127fe <tcp_receive+0xac6>
 80127fa:	2301      	movs	r3, #1
 80127fc:	e000      	b.n	8012800 <tcp_receive+0xac8>
 80127fe:	2300      	movs	r3, #0
 8012800:	1919      	adds	r1, r3, r4
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012806:	b28b      	uxth	r3, r1
 8012808:	1ad3      	subs	r3, r2, r3
 801280a:	b29a      	uxth	r2, r3
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012810:	6878      	ldr	r0, [r7, #4]
 8012812:	f7fc fe15 	bl	800f440 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012816:	68bb      	ldr	r3, [r7, #8]
 8012818:	685b      	ldr	r3, [r3, #4]
 801281a:	891b      	ldrh	r3, [r3, #8]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d028      	beq.n	8012872 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012820:	4b0d      	ldr	r3, [pc, #52]	; (8012858 <tcp_receive+0xb20>)
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d01d      	beq.n	8012864 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8012828:	4b0b      	ldr	r3, [pc, #44]	; (8012858 <tcp_receive+0xb20>)
 801282a:	681a      	ldr	r2, [r3, #0]
 801282c:	68bb      	ldr	r3, [r7, #8]
 801282e:	685b      	ldr	r3, [r3, #4]
 8012830:	4619      	mov	r1, r3
 8012832:	4610      	mov	r0, r2
 8012834:	f7fb ffbe 	bl	800e7b4 <pbuf_cat>
 8012838:	e018      	b.n	801286c <tcp_receive+0xb34>
 801283a:	bf00      	nop
 801283c:	200052b6 	.word	0x200052b6
 8012840:	200052ac 	.word	0x200052ac
 8012844:	2000528c 	.word	0x2000528c
 8012848:	0801b9e8 	.word	0x0801b9e8
 801284c:	0801bdc8 	.word	0x0801bdc8
 8012850:	0801ba34 	.word	0x0801ba34
 8012854:	0801be04 	.word	0x0801be04
 8012858:	200052bc 	.word	0x200052bc
 801285c:	200052b9 	.word	0x200052b9
 8012860:	0801be24 	.word	0x0801be24
            } else {
              recv_data = cseg->p;
 8012864:	68bb      	ldr	r3, [r7, #8]
 8012866:	685b      	ldr	r3, [r3, #4]
 8012868:	4a70      	ldr	r2, [pc, #448]	; (8012a2c <tcp_receive+0xcf4>)
 801286a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801286c:	68bb      	ldr	r3, [r7, #8]
 801286e:	2200      	movs	r2, #0
 8012870:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012872:	68bb      	ldr	r3, [r7, #8]
 8012874:	68db      	ldr	r3, [r3, #12]
 8012876:	899b      	ldrh	r3, [r3, #12]
 8012878:	b29b      	uxth	r3, r3
 801287a:	4618      	mov	r0, r3
 801287c:	f7fa fa42 	bl	800cd04 <lwip_htons>
 8012880:	4603      	mov	r3, r0
 8012882:	b2db      	uxtb	r3, r3
 8012884:	f003 0301 	and.w	r3, r3, #1
 8012888:	2b00      	cmp	r3, #0
 801288a:	d00d      	beq.n	80128a8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801288c:	4b68      	ldr	r3, [pc, #416]	; (8012a30 <tcp_receive+0xcf8>)
 801288e:	781b      	ldrb	r3, [r3, #0]
 8012890:	f043 0320 	orr.w	r3, r3, #32
 8012894:	b2da      	uxtb	r2, r3
 8012896:	4b66      	ldr	r3, [pc, #408]	; (8012a30 <tcp_receive+0xcf8>)
 8012898:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	7d1b      	ldrb	r3, [r3, #20]
 801289e:	2b04      	cmp	r3, #4
 80128a0:	d102      	bne.n	80128a8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	2207      	movs	r2, #7
 80128a6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80128a8:	68bb      	ldr	r3, [r7, #8]
 80128aa:	681a      	ldr	r2, [r3, #0]
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80128b0:	68b8      	ldr	r0, [r7, #8]
 80128b2:	f7fd faea 	bl	800fe8a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d008      	beq.n	80128d0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80128c2:	68db      	ldr	r3, [r3, #12]
 80128c4:	685a      	ldr	r2, [r3, #4]
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80128ca:	429a      	cmp	r2, r3
 80128cc:	f43f af43 	beq.w	8012756 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	8b5b      	ldrh	r3, [r3, #26]
 80128d4:	f003 0301 	and.w	r3, r3, #1
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d00e      	beq.n	80128fa <tcp_receive+0xbc2>
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	8b5b      	ldrh	r3, [r3, #26]
 80128e0:	f023 0301 	bic.w	r3, r3, #1
 80128e4:	b29a      	uxth	r2, r3
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	835a      	strh	r2, [r3, #26]
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	8b5b      	ldrh	r3, [r3, #26]
 80128ee:	f043 0302 	orr.w	r3, r3, #2
 80128f2:	b29a      	uxth	r2, r3
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80128f8:	e188      	b.n	8012c0c <tcp_receive+0xed4>
        tcp_ack(pcb);
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	8b5b      	ldrh	r3, [r3, #26]
 80128fe:	f043 0301 	orr.w	r3, r3, #1
 8012902:	b29a      	uxth	r2, r3
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012908:	e180      	b.n	8012c0c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801290e:	2b00      	cmp	r3, #0
 8012910:	d106      	bne.n	8012920 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012912:	4848      	ldr	r0, [pc, #288]	; (8012a34 <tcp_receive+0xcfc>)
 8012914:	f7fd faf0 	bl	800fef8 <tcp_seg_copy>
 8012918:	4602      	mov	r2, r0
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	675a      	str	r2, [r3, #116]	; 0x74
 801291e:	e16d      	b.n	8012bfc <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012920:	2300      	movs	r3, #0
 8012922:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012928:	63bb      	str	r3, [r7, #56]	; 0x38
 801292a:	e157      	b.n	8012bdc <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801292c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801292e:	68db      	ldr	r3, [r3, #12]
 8012930:	685a      	ldr	r2, [r3, #4]
 8012932:	4b41      	ldr	r3, [pc, #260]	; (8012a38 <tcp_receive+0xd00>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	429a      	cmp	r2, r3
 8012938:	d11d      	bne.n	8012976 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801293a:	4b3e      	ldr	r3, [pc, #248]	; (8012a34 <tcp_receive+0xcfc>)
 801293c:	891a      	ldrh	r2, [r3, #8]
 801293e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012940:	891b      	ldrh	r3, [r3, #8]
 8012942:	429a      	cmp	r2, r3
 8012944:	f240 814f 	bls.w	8012be6 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012948:	483a      	ldr	r0, [pc, #232]	; (8012a34 <tcp_receive+0xcfc>)
 801294a:	f7fd fad5 	bl	800fef8 <tcp_seg_copy>
 801294e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012950:	697b      	ldr	r3, [r7, #20]
 8012952:	2b00      	cmp	r3, #0
 8012954:	f000 8149 	beq.w	8012bea <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8012958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801295a:	2b00      	cmp	r3, #0
 801295c:	d003      	beq.n	8012966 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801295e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012960:	697a      	ldr	r2, [r7, #20]
 8012962:	601a      	str	r2, [r3, #0]
 8012964:	e002      	b.n	801296c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	697a      	ldr	r2, [r7, #20]
 801296a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801296c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801296e:	6978      	ldr	r0, [r7, #20]
 8012970:	f7ff f8de 	bl	8011b30 <tcp_oos_insert_segment>
                }
                break;
 8012974:	e139      	b.n	8012bea <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012978:	2b00      	cmp	r3, #0
 801297a:	d117      	bne.n	80129ac <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801297c:	4b2e      	ldr	r3, [pc, #184]	; (8012a38 <tcp_receive+0xd00>)
 801297e:	681a      	ldr	r2, [r3, #0]
 8012980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012982:	68db      	ldr	r3, [r3, #12]
 8012984:	685b      	ldr	r3, [r3, #4]
 8012986:	1ad3      	subs	r3, r2, r3
 8012988:	2b00      	cmp	r3, #0
 801298a:	da57      	bge.n	8012a3c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801298c:	4829      	ldr	r0, [pc, #164]	; (8012a34 <tcp_receive+0xcfc>)
 801298e:	f7fd fab3 	bl	800fef8 <tcp_seg_copy>
 8012992:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012994:	69bb      	ldr	r3, [r7, #24]
 8012996:	2b00      	cmp	r3, #0
 8012998:	f000 8129 	beq.w	8012bee <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	69ba      	ldr	r2, [r7, #24]
 80129a0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80129a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80129a4:	69b8      	ldr	r0, [r7, #24]
 80129a6:	f7ff f8c3 	bl	8011b30 <tcp_oos_insert_segment>
                  }
                  break;
 80129aa:	e120      	b.n	8012bee <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80129ac:	4b22      	ldr	r3, [pc, #136]	; (8012a38 <tcp_receive+0xd00>)
 80129ae:	681a      	ldr	r2, [r3, #0]
 80129b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129b2:	68db      	ldr	r3, [r3, #12]
 80129b4:	685b      	ldr	r3, [r3, #4]
 80129b6:	1ad3      	subs	r3, r2, r3
 80129b8:	3b01      	subs	r3, #1
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	db3e      	blt.n	8012a3c <tcp_receive+0xd04>
 80129be:	4b1e      	ldr	r3, [pc, #120]	; (8012a38 <tcp_receive+0xd00>)
 80129c0:	681a      	ldr	r2, [r3, #0]
 80129c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129c4:	68db      	ldr	r3, [r3, #12]
 80129c6:	685b      	ldr	r3, [r3, #4]
 80129c8:	1ad3      	subs	r3, r2, r3
 80129ca:	3301      	adds	r3, #1
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	dc35      	bgt.n	8012a3c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80129d0:	4818      	ldr	r0, [pc, #96]	; (8012a34 <tcp_receive+0xcfc>)
 80129d2:	f7fd fa91 	bl	800fef8 <tcp_seg_copy>
 80129d6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80129d8:	69fb      	ldr	r3, [r7, #28]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	f000 8109 	beq.w	8012bf2 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80129e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129e2:	68db      	ldr	r3, [r3, #12]
 80129e4:	685b      	ldr	r3, [r3, #4]
 80129e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80129e8:	8912      	ldrh	r2, [r2, #8]
 80129ea:	441a      	add	r2, r3
 80129ec:	4b12      	ldr	r3, [pc, #72]	; (8012a38 <tcp_receive+0xd00>)
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	1ad3      	subs	r3, r2, r3
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	dd12      	ble.n	8012a1c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80129f6:	4b10      	ldr	r3, [pc, #64]	; (8012a38 <tcp_receive+0xd00>)
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	b29a      	uxth	r2, r3
 80129fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129fe:	68db      	ldr	r3, [r3, #12]
 8012a00:	685b      	ldr	r3, [r3, #4]
 8012a02:	b29b      	uxth	r3, r3
 8012a04:	1ad3      	subs	r3, r2, r3
 8012a06:	b29a      	uxth	r2, r3
 8012a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a0a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a0e:	685a      	ldr	r2, [r3, #4]
 8012a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a12:	891b      	ldrh	r3, [r3, #8]
 8012a14:	4619      	mov	r1, r3
 8012a16:	4610      	mov	r0, r2
 8012a18:	f7fb fc78 	bl	800e30c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a1e:	69fa      	ldr	r2, [r7, #28]
 8012a20:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012a22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012a24:	69f8      	ldr	r0, [r7, #28]
 8012a26:	f7ff f883 	bl	8011b30 <tcp_oos_insert_segment>
                  }
                  break;
 8012a2a:	e0e2      	b.n	8012bf2 <tcp_receive+0xeba>
 8012a2c:	200052bc 	.word	0x200052bc
 8012a30:	200052b9 	.word	0x200052b9
 8012a34:	2000528c 	.word	0x2000528c
 8012a38:	200052ac 	.word	0x200052ac
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a3e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	f040 80c6 	bne.w	8012bd6 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012a4a:	4b80      	ldr	r3, [pc, #512]	; (8012c4c <tcp_receive+0xf14>)
 8012a4c:	681a      	ldr	r2, [r3, #0]
 8012a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a50:	68db      	ldr	r3, [r3, #12]
 8012a52:	685b      	ldr	r3, [r3, #4]
 8012a54:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	f340 80bd 	ble.w	8012bd6 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a5e:	68db      	ldr	r3, [r3, #12]
 8012a60:	899b      	ldrh	r3, [r3, #12]
 8012a62:	b29b      	uxth	r3, r3
 8012a64:	4618      	mov	r0, r3
 8012a66:	f7fa f94d 	bl	800cd04 <lwip_htons>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	b2db      	uxtb	r3, r3
 8012a6e:	f003 0301 	and.w	r3, r3, #1
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	f040 80bf 	bne.w	8012bf6 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012a78:	4875      	ldr	r0, [pc, #468]	; (8012c50 <tcp_receive+0xf18>)
 8012a7a:	f7fd fa3d 	bl	800fef8 <tcp_seg_copy>
 8012a7e:	4602      	mov	r2, r0
 8012a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a82:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	f000 80b6 	beq.w	8012bfa <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a90:	68db      	ldr	r3, [r3, #12]
 8012a92:	685b      	ldr	r3, [r3, #4]
 8012a94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a96:	8912      	ldrh	r2, [r2, #8]
 8012a98:	441a      	add	r2, r3
 8012a9a:	4b6c      	ldr	r3, [pc, #432]	; (8012c4c <tcp_receive+0xf14>)
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	1ad3      	subs	r3, r2, r3
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	dd12      	ble.n	8012aca <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012aa4:	4b69      	ldr	r3, [pc, #420]	; (8012c4c <tcp_receive+0xf14>)
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	b29a      	uxth	r2, r3
 8012aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aac:	68db      	ldr	r3, [r3, #12]
 8012aae:	685b      	ldr	r3, [r3, #4]
 8012ab0:	b29b      	uxth	r3, r3
 8012ab2:	1ad3      	subs	r3, r2, r3
 8012ab4:	b29a      	uxth	r2, r3
 8012ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ab8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012abc:	685a      	ldr	r2, [r3, #4]
 8012abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ac0:	891b      	ldrh	r3, [r3, #8]
 8012ac2:	4619      	mov	r1, r3
 8012ac4:	4610      	mov	r0, r2
 8012ac6:	f7fb fc21 	bl	800e30c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012aca:	4b62      	ldr	r3, [pc, #392]	; (8012c54 <tcp_receive+0xf1c>)
 8012acc:	881b      	ldrh	r3, [r3, #0]
 8012ace:	461a      	mov	r2, r3
 8012ad0:	4b5e      	ldr	r3, [pc, #376]	; (8012c4c <tcp_receive+0xf14>)
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	441a      	add	r2, r3
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ada:	6879      	ldr	r1, [r7, #4]
 8012adc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012ade:	440b      	add	r3, r1
 8012ae0:	1ad3      	subs	r3, r2, r3
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	f340 8089 	ble.w	8012bfa <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	68db      	ldr	r3, [r3, #12]
 8012aee:	899b      	ldrh	r3, [r3, #12]
 8012af0:	b29b      	uxth	r3, r3
 8012af2:	4618      	mov	r0, r3
 8012af4:	f7fa f906 	bl	800cd04 <lwip_htons>
 8012af8:	4603      	mov	r3, r0
 8012afa:	b2db      	uxtb	r3, r3
 8012afc:	f003 0301 	and.w	r3, r3, #1
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d022      	beq.n	8012b4a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	68db      	ldr	r3, [r3, #12]
 8012b0a:	899b      	ldrh	r3, [r3, #12]
 8012b0c:	b29b      	uxth	r3, r3
 8012b0e:	b21b      	sxth	r3, r3
 8012b10:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012b14:	b21c      	sxth	r4, r3
 8012b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	68db      	ldr	r3, [r3, #12]
 8012b1c:	899b      	ldrh	r3, [r3, #12]
 8012b1e:	b29b      	uxth	r3, r3
 8012b20:	4618      	mov	r0, r3
 8012b22:	f7fa f8ef 	bl	800cd04 <lwip_htons>
 8012b26:	4603      	mov	r3, r0
 8012b28:	b2db      	uxtb	r3, r3
 8012b2a:	b29b      	uxth	r3, r3
 8012b2c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012b30:	b29b      	uxth	r3, r3
 8012b32:	4618      	mov	r0, r3
 8012b34:	f7fa f8e6 	bl	800cd04 <lwip_htons>
 8012b38:	4603      	mov	r3, r0
 8012b3a:	b21b      	sxth	r3, r3
 8012b3c:	4323      	orrs	r3, r4
 8012b3e:	b21a      	sxth	r2, r3
 8012b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	68db      	ldr	r3, [r3, #12]
 8012b46:	b292      	uxth	r2, r2
 8012b48:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b4e:	b29a      	uxth	r2, r3
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012b54:	4413      	add	r3, r2
 8012b56:	b299      	uxth	r1, r3
 8012b58:	4b3c      	ldr	r3, [pc, #240]	; (8012c4c <tcp_receive+0xf14>)
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	b29a      	uxth	r2, r3
 8012b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	1a8a      	subs	r2, r1, r2
 8012b64:	b292      	uxth	r2, r2
 8012b66:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	685a      	ldr	r2, [r3, #4]
 8012b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	891b      	ldrh	r3, [r3, #8]
 8012b74:	4619      	mov	r1, r3
 8012b76:	4610      	mov	r0, r2
 8012b78:	f7fb fbc8 	bl	800e30c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	891c      	ldrh	r4, [r3, #8]
 8012b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	68db      	ldr	r3, [r3, #12]
 8012b88:	899b      	ldrh	r3, [r3, #12]
 8012b8a:	b29b      	uxth	r3, r3
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	f7fa f8b9 	bl	800cd04 <lwip_htons>
 8012b92:	4603      	mov	r3, r0
 8012b94:	b2db      	uxtb	r3, r3
 8012b96:	f003 0303 	and.w	r3, r3, #3
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d001      	beq.n	8012ba2 <tcp_receive+0xe6a>
 8012b9e:	2301      	movs	r3, #1
 8012ba0:	e000      	b.n	8012ba4 <tcp_receive+0xe6c>
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	4423      	add	r3, r4
 8012ba6:	b29a      	uxth	r2, r3
 8012ba8:	4b2a      	ldr	r3, [pc, #168]	; (8012c54 <tcp_receive+0xf1c>)
 8012baa:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012bac:	4b29      	ldr	r3, [pc, #164]	; (8012c54 <tcp_receive+0xf1c>)
 8012bae:	881b      	ldrh	r3, [r3, #0]
 8012bb0:	461a      	mov	r2, r3
 8012bb2:	4b26      	ldr	r3, [pc, #152]	; (8012c4c <tcp_receive+0xf14>)
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	441a      	add	r2, r3
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bbc:	6879      	ldr	r1, [r7, #4]
 8012bbe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012bc0:	440b      	add	r3, r1
 8012bc2:	429a      	cmp	r2, r3
 8012bc4:	d019      	beq.n	8012bfa <tcp_receive+0xec2>
 8012bc6:	4b24      	ldr	r3, [pc, #144]	; (8012c58 <tcp_receive+0xf20>)
 8012bc8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012bcc:	4923      	ldr	r1, [pc, #140]	; (8012c5c <tcp_receive+0xf24>)
 8012bce:	4824      	ldr	r0, [pc, #144]	; (8012c60 <tcp_receive+0xf28>)
 8012bd0:	f005 f936 	bl	8017e40 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012bd4:	e011      	b.n	8012bfa <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	63bb      	str	r3, [r7, #56]	; 0x38
 8012bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	f47f aea4 	bne.w	801292c <tcp_receive+0xbf4>
 8012be4:	e00a      	b.n	8012bfc <tcp_receive+0xec4>
                break;
 8012be6:	bf00      	nop
 8012be8:	e008      	b.n	8012bfc <tcp_receive+0xec4>
                break;
 8012bea:	bf00      	nop
 8012bec:	e006      	b.n	8012bfc <tcp_receive+0xec4>
                  break;
 8012bee:	bf00      	nop
 8012bf0:	e004      	b.n	8012bfc <tcp_receive+0xec4>
                  break;
 8012bf2:	bf00      	nop
 8012bf4:	e002      	b.n	8012bfc <tcp_receive+0xec4>
                  break;
 8012bf6:	bf00      	nop
 8012bf8:	e000      	b.n	8012bfc <tcp_receive+0xec4>
                break;
 8012bfa:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012bfc:	6878      	ldr	r0, [r7, #4]
 8012bfe:	f001 fe8b 	bl	8014918 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012c02:	e003      	b.n	8012c0c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012c04:	6878      	ldr	r0, [r7, #4]
 8012c06:	f001 fe87 	bl	8014918 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012c0a:	e01a      	b.n	8012c42 <tcp_receive+0xf0a>
 8012c0c:	e019      	b.n	8012c42 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012c0e:	4b0f      	ldr	r3, [pc, #60]	; (8012c4c <tcp_receive+0xf14>)
 8012c10:	681a      	ldr	r2, [r3, #0]
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c16:	1ad3      	subs	r3, r2, r3
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	db0a      	blt.n	8012c32 <tcp_receive+0xefa>
 8012c1c:	4b0b      	ldr	r3, [pc, #44]	; (8012c4c <tcp_receive+0xf14>)
 8012c1e:	681a      	ldr	r2, [r3, #0]
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c24:	6879      	ldr	r1, [r7, #4]
 8012c26:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012c28:	440b      	add	r3, r1
 8012c2a:	1ad3      	subs	r3, r2, r3
 8012c2c:	3301      	adds	r3, #1
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	dd07      	ble.n	8012c42 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	8b5b      	ldrh	r3, [r3, #26]
 8012c36:	f043 0302 	orr.w	r3, r3, #2
 8012c3a:	b29a      	uxth	r2, r3
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012c40:	e7ff      	b.n	8012c42 <tcp_receive+0xf0a>
 8012c42:	bf00      	nop
 8012c44:	3750      	adds	r7, #80	; 0x50
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bdb0      	pop	{r4, r5, r7, pc}
 8012c4a:	bf00      	nop
 8012c4c:	200052ac 	.word	0x200052ac
 8012c50:	2000528c 	.word	0x2000528c
 8012c54:	200052b6 	.word	0x200052b6
 8012c58:	0801b9e8 	.word	0x0801b9e8
 8012c5c:	0801bd90 	.word	0x0801bd90
 8012c60:	0801ba34 	.word	0x0801ba34

08012c64 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012c64:	b480      	push	{r7}
 8012c66:	b083      	sub	sp, #12
 8012c68:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012c6a:	4b15      	ldr	r3, [pc, #84]	; (8012cc0 <tcp_get_next_optbyte+0x5c>)
 8012c6c:	881b      	ldrh	r3, [r3, #0]
 8012c6e:	1c5a      	adds	r2, r3, #1
 8012c70:	b291      	uxth	r1, r2
 8012c72:	4a13      	ldr	r2, [pc, #76]	; (8012cc0 <tcp_get_next_optbyte+0x5c>)
 8012c74:	8011      	strh	r1, [r2, #0]
 8012c76:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012c78:	4b12      	ldr	r3, [pc, #72]	; (8012cc4 <tcp_get_next_optbyte+0x60>)
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d004      	beq.n	8012c8a <tcp_get_next_optbyte+0x26>
 8012c80:	4b11      	ldr	r3, [pc, #68]	; (8012cc8 <tcp_get_next_optbyte+0x64>)
 8012c82:	881b      	ldrh	r3, [r3, #0]
 8012c84:	88fa      	ldrh	r2, [r7, #6]
 8012c86:	429a      	cmp	r2, r3
 8012c88:	d208      	bcs.n	8012c9c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012c8a:	4b10      	ldr	r3, [pc, #64]	; (8012ccc <tcp_get_next_optbyte+0x68>)
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	3314      	adds	r3, #20
 8012c90:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012c92:	88fb      	ldrh	r3, [r7, #6]
 8012c94:	683a      	ldr	r2, [r7, #0]
 8012c96:	4413      	add	r3, r2
 8012c98:	781b      	ldrb	r3, [r3, #0]
 8012c9a:	e00b      	b.n	8012cb4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012c9c:	88fb      	ldrh	r3, [r7, #6]
 8012c9e:	b2da      	uxtb	r2, r3
 8012ca0:	4b09      	ldr	r3, [pc, #36]	; (8012cc8 <tcp_get_next_optbyte+0x64>)
 8012ca2:	881b      	ldrh	r3, [r3, #0]
 8012ca4:	b2db      	uxtb	r3, r3
 8012ca6:	1ad3      	subs	r3, r2, r3
 8012ca8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012caa:	4b06      	ldr	r3, [pc, #24]	; (8012cc4 <tcp_get_next_optbyte+0x60>)
 8012cac:	681a      	ldr	r2, [r3, #0]
 8012cae:	797b      	ldrb	r3, [r7, #5]
 8012cb0:	4413      	add	r3, r2
 8012cb2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012cb4:	4618      	mov	r0, r3
 8012cb6:	370c      	adds	r7, #12
 8012cb8:	46bd      	mov	sp, r7
 8012cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbe:	4770      	bx	lr
 8012cc0:	200052a8 	.word	0x200052a8
 8012cc4:	200052a4 	.word	0x200052a4
 8012cc8:	200052a2 	.word	0x200052a2
 8012ccc:	2000529c 	.word	0x2000529c

08012cd0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	b084      	sub	sp, #16
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d106      	bne.n	8012cec <tcp_parseopt+0x1c>
 8012cde:	4b32      	ldr	r3, [pc, #200]	; (8012da8 <tcp_parseopt+0xd8>)
 8012ce0:	f240 727d 	movw	r2, #1917	; 0x77d
 8012ce4:	4931      	ldr	r1, [pc, #196]	; (8012dac <tcp_parseopt+0xdc>)
 8012ce6:	4832      	ldr	r0, [pc, #200]	; (8012db0 <tcp_parseopt+0xe0>)
 8012ce8:	f005 f8aa 	bl	8017e40 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012cec:	4b31      	ldr	r3, [pc, #196]	; (8012db4 <tcp_parseopt+0xe4>)
 8012cee:	881b      	ldrh	r3, [r3, #0]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d055      	beq.n	8012da0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012cf4:	4b30      	ldr	r3, [pc, #192]	; (8012db8 <tcp_parseopt+0xe8>)
 8012cf6:	2200      	movs	r2, #0
 8012cf8:	801a      	strh	r2, [r3, #0]
 8012cfa:	e045      	b.n	8012d88 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8012cfc:	f7ff ffb2 	bl	8012c64 <tcp_get_next_optbyte>
 8012d00:	4603      	mov	r3, r0
 8012d02:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012d04:	7bfb      	ldrb	r3, [r7, #15]
 8012d06:	2b02      	cmp	r3, #2
 8012d08:	d006      	beq.n	8012d18 <tcp_parseopt+0x48>
 8012d0a:	2b02      	cmp	r3, #2
 8012d0c:	dc2b      	bgt.n	8012d66 <tcp_parseopt+0x96>
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d041      	beq.n	8012d96 <tcp_parseopt+0xc6>
 8012d12:	2b01      	cmp	r3, #1
 8012d14:	d127      	bne.n	8012d66 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8012d16:	e037      	b.n	8012d88 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012d18:	f7ff ffa4 	bl	8012c64 <tcp_get_next_optbyte>
 8012d1c:	4603      	mov	r3, r0
 8012d1e:	2b04      	cmp	r3, #4
 8012d20:	d13b      	bne.n	8012d9a <tcp_parseopt+0xca>
 8012d22:	4b25      	ldr	r3, [pc, #148]	; (8012db8 <tcp_parseopt+0xe8>)
 8012d24:	881b      	ldrh	r3, [r3, #0]
 8012d26:	3301      	adds	r3, #1
 8012d28:	4a22      	ldr	r2, [pc, #136]	; (8012db4 <tcp_parseopt+0xe4>)
 8012d2a:	8812      	ldrh	r2, [r2, #0]
 8012d2c:	4293      	cmp	r3, r2
 8012d2e:	da34      	bge.n	8012d9a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012d30:	f7ff ff98 	bl	8012c64 <tcp_get_next_optbyte>
 8012d34:	4603      	mov	r3, r0
 8012d36:	b29b      	uxth	r3, r3
 8012d38:	021b      	lsls	r3, r3, #8
 8012d3a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012d3c:	f7ff ff92 	bl	8012c64 <tcp_get_next_optbyte>
 8012d40:	4603      	mov	r3, r0
 8012d42:	b29a      	uxth	r2, r3
 8012d44:	89bb      	ldrh	r3, [r7, #12]
 8012d46:	4313      	orrs	r3, r2
 8012d48:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012d4a:	89bb      	ldrh	r3, [r7, #12]
 8012d4c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012d50:	d804      	bhi.n	8012d5c <tcp_parseopt+0x8c>
 8012d52:	89bb      	ldrh	r3, [r7, #12]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d001      	beq.n	8012d5c <tcp_parseopt+0x8c>
 8012d58:	89ba      	ldrh	r2, [r7, #12]
 8012d5a:	e001      	b.n	8012d60 <tcp_parseopt+0x90>
 8012d5c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012d64:	e010      	b.n	8012d88 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012d66:	f7ff ff7d 	bl	8012c64 <tcp_get_next_optbyte>
 8012d6a:	4603      	mov	r3, r0
 8012d6c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012d6e:	7afb      	ldrb	r3, [r7, #11]
 8012d70:	2b01      	cmp	r3, #1
 8012d72:	d914      	bls.n	8012d9e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012d74:	7afb      	ldrb	r3, [r7, #11]
 8012d76:	b29a      	uxth	r2, r3
 8012d78:	4b0f      	ldr	r3, [pc, #60]	; (8012db8 <tcp_parseopt+0xe8>)
 8012d7a:	881b      	ldrh	r3, [r3, #0]
 8012d7c:	4413      	add	r3, r2
 8012d7e:	b29b      	uxth	r3, r3
 8012d80:	3b02      	subs	r3, #2
 8012d82:	b29a      	uxth	r2, r3
 8012d84:	4b0c      	ldr	r3, [pc, #48]	; (8012db8 <tcp_parseopt+0xe8>)
 8012d86:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012d88:	4b0b      	ldr	r3, [pc, #44]	; (8012db8 <tcp_parseopt+0xe8>)
 8012d8a:	881a      	ldrh	r2, [r3, #0]
 8012d8c:	4b09      	ldr	r3, [pc, #36]	; (8012db4 <tcp_parseopt+0xe4>)
 8012d8e:	881b      	ldrh	r3, [r3, #0]
 8012d90:	429a      	cmp	r2, r3
 8012d92:	d3b3      	bcc.n	8012cfc <tcp_parseopt+0x2c>
 8012d94:	e004      	b.n	8012da0 <tcp_parseopt+0xd0>
          return;
 8012d96:	bf00      	nop
 8012d98:	e002      	b.n	8012da0 <tcp_parseopt+0xd0>
            return;
 8012d9a:	bf00      	nop
 8012d9c:	e000      	b.n	8012da0 <tcp_parseopt+0xd0>
            return;
 8012d9e:	bf00      	nop
      }
    }
  }
}
 8012da0:	3710      	adds	r7, #16
 8012da2:	46bd      	mov	sp, r7
 8012da4:	bd80      	pop	{r7, pc}
 8012da6:	bf00      	nop
 8012da8:	0801b9e8 	.word	0x0801b9e8
 8012dac:	0801be4c 	.word	0x0801be4c
 8012db0:	0801ba34 	.word	0x0801ba34
 8012db4:	200052a0 	.word	0x200052a0
 8012db8:	200052a8 	.word	0x200052a8

08012dbc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012dbc:	b480      	push	{r7}
 8012dbe:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012dc0:	4b05      	ldr	r3, [pc, #20]	; (8012dd8 <tcp_trigger_input_pcb_close+0x1c>)
 8012dc2:	781b      	ldrb	r3, [r3, #0]
 8012dc4:	f043 0310 	orr.w	r3, r3, #16
 8012dc8:	b2da      	uxtb	r2, r3
 8012dca:	4b03      	ldr	r3, [pc, #12]	; (8012dd8 <tcp_trigger_input_pcb_close+0x1c>)
 8012dcc:	701a      	strb	r2, [r3, #0]
}
 8012dce:	bf00      	nop
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd6:	4770      	bx	lr
 8012dd8:	200052b9 	.word	0x200052b9

08012ddc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012ddc:	b580      	push	{r7, lr}
 8012dde:	b084      	sub	sp, #16
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	60f8      	str	r0, [r7, #12]
 8012de4:	60b9      	str	r1, [r7, #8]
 8012de6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d00a      	beq.n	8012e04 <tcp_route+0x28>
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	7a1b      	ldrb	r3, [r3, #8]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d006      	beq.n	8012e04 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	7a1b      	ldrb	r3, [r3, #8]
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	f7fb f87e 	bl	800defc <netif_get_by_index>
 8012e00:	4603      	mov	r3, r0
 8012e02:	e003      	b.n	8012e0c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012e04:	6878      	ldr	r0, [r7, #4]
 8012e06:	f003 fb05 	bl	8016414 <ip4_route>
 8012e0a:	4603      	mov	r3, r0
  }
}
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	3710      	adds	r7, #16
 8012e10:	46bd      	mov	sp, r7
 8012e12:	bd80      	pop	{r7, pc}

08012e14 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012e14:	b590      	push	{r4, r7, lr}
 8012e16:	b087      	sub	sp, #28
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	60f8      	str	r0, [r7, #12]
 8012e1c:	60b9      	str	r1, [r7, #8]
 8012e1e:	603b      	str	r3, [r7, #0]
 8012e20:	4613      	mov	r3, r2
 8012e22:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d105      	bne.n	8012e36 <tcp_create_segment+0x22>
 8012e2a:	4b44      	ldr	r3, [pc, #272]	; (8012f3c <tcp_create_segment+0x128>)
 8012e2c:	22a3      	movs	r2, #163	; 0xa3
 8012e2e:	4944      	ldr	r1, [pc, #272]	; (8012f40 <tcp_create_segment+0x12c>)
 8012e30:	4844      	ldr	r0, [pc, #272]	; (8012f44 <tcp_create_segment+0x130>)
 8012e32:	f005 f805 	bl	8017e40 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012e36:	68bb      	ldr	r3, [r7, #8]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d105      	bne.n	8012e48 <tcp_create_segment+0x34>
 8012e3c:	4b3f      	ldr	r3, [pc, #252]	; (8012f3c <tcp_create_segment+0x128>)
 8012e3e:	22a4      	movs	r2, #164	; 0xa4
 8012e40:	4941      	ldr	r1, [pc, #260]	; (8012f48 <tcp_create_segment+0x134>)
 8012e42:	4840      	ldr	r0, [pc, #256]	; (8012f44 <tcp_create_segment+0x130>)
 8012e44:	f004 fffc 	bl	8017e40 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012e48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012e4c:	009b      	lsls	r3, r3, #2
 8012e4e:	b2db      	uxtb	r3, r3
 8012e50:	f003 0304 	and.w	r3, r3, #4
 8012e54:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012e56:	2003      	movs	r0, #3
 8012e58:	f7fa fce8 	bl	800d82c <memp_malloc>
 8012e5c:	6138      	str	r0, [r7, #16]
 8012e5e:	693b      	ldr	r3, [r7, #16]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d104      	bne.n	8012e6e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012e64:	68b8      	ldr	r0, [r7, #8]
 8012e66:	f7fb fbd7 	bl	800e618 <pbuf_free>
    return NULL;
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	e061      	b.n	8012f32 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8012e6e:	693b      	ldr	r3, [r7, #16]
 8012e70:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012e74:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8012e76:	693b      	ldr	r3, [r7, #16]
 8012e78:	2200      	movs	r2, #0
 8012e7a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012e7c:	693b      	ldr	r3, [r7, #16]
 8012e7e:	68ba      	ldr	r2, [r7, #8]
 8012e80:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012e82:	68bb      	ldr	r3, [r7, #8]
 8012e84:	891a      	ldrh	r2, [r3, #8]
 8012e86:	7dfb      	ldrb	r3, [r7, #23]
 8012e88:	b29b      	uxth	r3, r3
 8012e8a:	429a      	cmp	r2, r3
 8012e8c:	d205      	bcs.n	8012e9a <tcp_create_segment+0x86>
 8012e8e:	4b2b      	ldr	r3, [pc, #172]	; (8012f3c <tcp_create_segment+0x128>)
 8012e90:	22b0      	movs	r2, #176	; 0xb0
 8012e92:	492e      	ldr	r1, [pc, #184]	; (8012f4c <tcp_create_segment+0x138>)
 8012e94:	482b      	ldr	r0, [pc, #172]	; (8012f44 <tcp_create_segment+0x130>)
 8012e96:	f004 ffd3 	bl	8017e40 <iprintf>
  seg->len = p->tot_len - optlen;
 8012e9a:	68bb      	ldr	r3, [r7, #8]
 8012e9c:	891a      	ldrh	r2, [r3, #8]
 8012e9e:	7dfb      	ldrb	r3, [r7, #23]
 8012ea0:	b29b      	uxth	r3, r3
 8012ea2:	1ad3      	subs	r3, r2, r3
 8012ea4:	b29a      	uxth	r2, r3
 8012ea6:	693b      	ldr	r3, [r7, #16]
 8012ea8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8012eaa:	2114      	movs	r1, #20
 8012eac:	68b8      	ldr	r0, [r7, #8]
 8012eae:	f7fb fb1d 	bl	800e4ec <pbuf_add_header>
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d004      	beq.n	8012ec2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012eb8:	6938      	ldr	r0, [r7, #16]
 8012eba:	f7fc ffe6 	bl	800fe8a <tcp_seg_free>
    return NULL;
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	e037      	b.n	8012f32 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012ec2:	693b      	ldr	r3, [r7, #16]
 8012ec4:	685b      	ldr	r3, [r3, #4]
 8012ec6:	685a      	ldr	r2, [r3, #4]
 8012ec8:	693b      	ldr	r3, [r7, #16]
 8012eca:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	8ada      	ldrh	r2, [r3, #22]
 8012ed0:	693b      	ldr	r3, [r7, #16]
 8012ed2:	68dc      	ldr	r4, [r3, #12]
 8012ed4:	4610      	mov	r0, r2
 8012ed6:	f7f9 ff15 	bl	800cd04 <lwip_htons>
 8012eda:	4603      	mov	r3, r0
 8012edc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	8b1a      	ldrh	r2, [r3, #24]
 8012ee2:	693b      	ldr	r3, [r7, #16]
 8012ee4:	68dc      	ldr	r4, [r3, #12]
 8012ee6:	4610      	mov	r0, r2
 8012ee8:	f7f9 ff0c 	bl	800cd04 <lwip_htons>
 8012eec:	4603      	mov	r3, r0
 8012eee:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012ef0:	693b      	ldr	r3, [r7, #16]
 8012ef2:	68dc      	ldr	r4, [r3, #12]
 8012ef4:	6838      	ldr	r0, [r7, #0]
 8012ef6:	f7f9 ff1a 	bl	800cd2e <lwip_htonl>
 8012efa:	4603      	mov	r3, r0
 8012efc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012efe:	7dfb      	ldrb	r3, [r7, #23]
 8012f00:	089b      	lsrs	r3, r3, #2
 8012f02:	b2db      	uxtb	r3, r3
 8012f04:	b29b      	uxth	r3, r3
 8012f06:	3305      	adds	r3, #5
 8012f08:	b29b      	uxth	r3, r3
 8012f0a:	031b      	lsls	r3, r3, #12
 8012f0c:	b29a      	uxth	r2, r3
 8012f0e:	79fb      	ldrb	r3, [r7, #7]
 8012f10:	b29b      	uxth	r3, r3
 8012f12:	4313      	orrs	r3, r2
 8012f14:	b29a      	uxth	r2, r3
 8012f16:	693b      	ldr	r3, [r7, #16]
 8012f18:	68dc      	ldr	r4, [r3, #12]
 8012f1a:	4610      	mov	r0, r2
 8012f1c:	f7f9 fef2 	bl	800cd04 <lwip_htons>
 8012f20:	4603      	mov	r3, r0
 8012f22:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8012f24:	693b      	ldr	r3, [r7, #16]
 8012f26:	68db      	ldr	r3, [r3, #12]
 8012f28:	2200      	movs	r2, #0
 8012f2a:	749a      	strb	r2, [r3, #18]
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	74da      	strb	r2, [r3, #19]
  return seg;
 8012f30:	693b      	ldr	r3, [r7, #16]
}
 8012f32:	4618      	mov	r0, r3
 8012f34:	371c      	adds	r7, #28
 8012f36:	46bd      	mov	sp, r7
 8012f38:	bd90      	pop	{r4, r7, pc}
 8012f3a:	bf00      	nop
 8012f3c:	0801be68 	.word	0x0801be68
 8012f40:	0801be9c 	.word	0x0801be9c
 8012f44:	0801bebc 	.word	0x0801bebc
 8012f48:	0801bee4 	.word	0x0801bee4
 8012f4c:	0801bf08 	.word	0x0801bf08

08012f50 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b086      	sub	sp, #24
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	607b      	str	r3, [r7, #4]
 8012f58:	4603      	mov	r3, r0
 8012f5a:	73fb      	strb	r3, [r7, #15]
 8012f5c:	460b      	mov	r3, r1
 8012f5e:	81bb      	strh	r3, [r7, #12]
 8012f60:	4613      	mov	r3, r2
 8012f62:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012f64:	89bb      	ldrh	r3, [r7, #12]
 8012f66:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d105      	bne.n	8012f7a <tcp_pbuf_prealloc+0x2a>
 8012f6e:	4b30      	ldr	r3, [pc, #192]	; (8013030 <tcp_pbuf_prealloc+0xe0>)
 8012f70:	22e8      	movs	r2, #232	; 0xe8
 8012f72:	4930      	ldr	r1, [pc, #192]	; (8013034 <tcp_pbuf_prealloc+0xe4>)
 8012f74:	4830      	ldr	r0, [pc, #192]	; (8013038 <tcp_pbuf_prealloc+0xe8>)
 8012f76:	f004 ff63 	bl	8017e40 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8012f7a:	6a3b      	ldr	r3, [r7, #32]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d105      	bne.n	8012f8c <tcp_pbuf_prealloc+0x3c>
 8012f80:	4b2b      	ldr	r3, [pc, #172]	; (8013030 <tcp_pbuf_prealloc+0xe0>)
 8012f82:	22e9      	movs	r2, #233	; 0xe9
 8012f84:	492d      	ldr	r1, [pc, #180]	; (801303c <tcp_pbuf_prealloc+0xec>)
 8012f86:	482c      	ldr	r0, [pc, #176]	; (8013038 <tcp_pbuf_prealloc+0xe8>)
 8012f88:	f004 ff5a 	bl	8017e40 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8012f8c:	89ba      	ldrh	r2, [r7, #12]
 8012f8e:	897b      	ldrh	r3, [r7, #10]
 8012f90:	429a      	cmp	r2, r3
 8012f92:	d221      	bcs.n	8012fd8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012f94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012f98:	f003 0302 	and.w	r3, r3, #2
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d111      	bne.n	8012fc4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8012fa0:	6a3b      	ldr	r3, [r7, #32]
 8012fa2:	8b5b      	ldrh	r3, [r3, #26]
 8012fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d115      	bne.n	8012fd8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8012fac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d007      	beq.n	8012fc4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8012fb4:	6a3b      	ldr	r3, [r7, #32]
 8012fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d103      	bne.n	8012fc4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8012fbc:	6a3b      	ldr	r3, [r7, #32]
 8012fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d009      	beq.n	8012fd8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8012fc4:	89bb      	ldrh	r3, [r7, #12]
 8012fc6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8012fca:	f023 0203 	bic.w	r2, r3, #3
 8012fce:	897b      	ldrh	r3, [r7, #10]
 8012fd0:	4293      	cmp	r3, r2
 8012fd2:	bf28      	it	cs
 8012fd4:	4613      	movcs	r3, r2
 8012fd6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8012fd8:	8af9      	ldrh	r1, [r7, #22]
 8012fda:	7bfb      	ldrb	r3, [r7, #15]
 8012fdc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	f7fb f835 	bl	800e050 <pbuf_alloc>
 8012fe6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012fe8:	693b      	ldr	r3, [r7, #16]
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d101      	bne.n	8012ff2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8012fee:	2300      	movs	r3, #0
 8012ff0:	e019      	b.n	8013026 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8012ff2:	693b      	ldr	r3, [r7, #16]
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d006      	beq.n	8013008 <tcp_pbuf_prealloc+0xb8>
 8012ffa:	4b0d      	ldr	r3, [pc, #52]	; (8013030 <tcp_pbuf_prealloc+0xe0>)
 8012ffc:	f240 120b 	movw	r2, #267	; 0x10b
 8013000:	490f      	ldr	r1, [pc, #60]	; (8013040 <tcp_pbuf_prealloc+0xf0>)
 8013002:	480d      	ldr	r0, [pc, #52]	; (8013038 <tcp_pbuf_prealloc+0xe8>)
 8013004:	f004 ff1c 	bl	8017e40 <iprintf>
  *oversize = p->len - length;
 8013008:	693b      	ldr	r3, [r7, #16]
 801300a:	895a      	ldrh	r2, [r3, #10]
 801300c:	89bb      	ldrh	r3, [r7, #12]
 801300e:	1ad3      	subs	r3, r2, r3
 8013010:	b29a      	uxth	r2, r3
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8013016:	693b      	ldr	r3, [r7, #16]
 8013018:	89ba      	ldrh	r2, [r7, #12]
 801301a:	811a      	strh	r2, [r3, #8]
 801301c:	693b      	ldr	r3, [r7, #16]
 801301e:	891a      	ldrh	r2, [r3, #8]
 8013020:	693b      	ldr	r3, [r7, #16]
 8013022:	815a      	strh	r2, [r3, #10]
  return p;
 8013024:	693b      	ldr	r3, [r7, #16]
}
 8013026:	4618      	mov	r0, r3
 8013028:	3718      	adds	r7, #24
 801302a:	46bd      	mov	sp, r7
 801302c:	bd80      	pop	{r7, pc}
 801302e:	bf00      	nop
 8013030:	0801be68 	.word	0x0801be68
 8013034:	0801bf20 	.word	0x0801bf20
 8013038:	0801bebc 	.word	0x0801bebc
 801303c:	0801bf44 	.word	0x0801bf44
 8013040:	0801bf64 	.word	0x0801bf64

08013044 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8013044:	b580      	push	{r7, lr}
 8013046:	b082      	sub	sp, #8
 8013048:	af00      	add	r7, sp, #0
 801304a:	6078      	str	r0, [r7, #4]
 801304c:	460b      	mov	r3, r1
 801304e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d106      	bne.n	8013064 <tcp_write_checks+0x20>
 8013056:	4b33      	ldr	r3, [pc, #204]	; (8013124 <tcp_write_checks+0xe0>)
 8013058:	f240 1233 	movw	r2, #307	; 0x133
 801305c:	4932      	ldr	r1, [pc, #200]	; (8013128 <tcp_write_checks+0xe4>)
 801305e:	4833      	ldr	r0, [pc, #204]	; (801312c <tcp_write_checks+0xe8>)
 8013060:	f004 feee 	bl	8017e40 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	7d1b      	ldrb	r3, [r3, #20]
 8013068:	2b04      	cmp	r3, #4
 801306a:	d00e      	beq.n	801308a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8013070:	2b07      	cmp	r3, #7
 8013072:	d00a      	beq.n	801308a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013078:	2b02      	cmp	r3, #2
 801307a:	d006      	beq.n	801308a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8013080:	2b03      	cmp	r3, #3
 8013082:	d002      	beq.n	801308a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013084:	f06f 030a 	mvn.w	r3, #10
 8013088:	e048      	b.n	801311c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801308a:	887b      	ldrh	r3, [r7, #2]
 801308c:	2b00      	cmp	r3, #0
 801308e:	d101      	bne.n	8013094 <tcp_write_checks+0x50>
    return ERR_OK;
 8013090:	2300      	movs	r3, #0
 8013092:	e043      	b.n	801311c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801309a:	887a      	ldrh	r2, [r7, #2]
 801309c:	429a      	cmp	r2, r3
 801309e:	d909      	bls.n	80130b4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	8b5b      	ldrh	r3, [r3, #26]
 80130a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130a8:	b29a      	uxth	r2, r3
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80130ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80130b2:	e033      	b.n	801311c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80130ba:	2b08      	cmp	r3, #8
 80130bc:	d909      	bls.n	80130d2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	8b5b      	ldrh	r3, [r3, #26]
 80130c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130c6:	b29a      	uxth	r2, r3
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80130cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80130d0:	e024      	b.n	801311c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d00f      	beq.n	80130fc <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d11a      	bne.n	801311a <tcp_write_checks+0xd6>
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d116      	bne.n	801311a <tcp_write_checks+0xd6>
 80130ec:	4b0d      	ldr	r3, [pc, #52]	; (8013124 <tcp_write_checks+0xe0>)
 80130ee:	f240 1255 	movw	r2, #341	; 0x155
 80130f2:	490f      	ldr	r1, [pc, #60]	; (8013130 <tcp_write_checks+0xec>)
 80130f4:	480d      	ldr	r0, [pc, #52]	; (801312c <tcp_write_checks+0xe8>)
 80130f6:	f004 fea3 	bl	8017e40 <iprintf>
 80130fa:	e00e      	b.n	801311a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013100:	2b00      	cmp	r3, #0
 8013102:	d103      	bne.n	801310c <tcp_write_checks+0xc8>
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013108:	2b00      	cmp	r3, #0
 801310a:	d006      	beq.n	801311a <tcp_write_checks+0xd6>
 801310c:	4b05      	ldr	r3, [pc, #20]	; (8013124 <tcp_write_checks+0xe0>)
 801310e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8013112:	4908      	ldr	r1, [pc, #32]	; (8013134 <tcp_write_checks+0xf0>)
 8013114:	4805      	ldr	r0, [pc, #20]	; (801312c <tcp_write_checks+0xe8>)
 8013116:	f004 fe93 	bl	8017e40 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801311a:	2300      	movs	r3, #0
}
 801311c:	4618      	mov	r0, r3
 801311e:	3708      	adds	r7, #8
 8013120:	46bd      	mov	sp, r7
 8013122:	bd80      	pop	{r7, pc}
 8013124:	0801be68 	.word	0x0801be68
 8013128:	0801bf78 	.word	0x0801bf78
 801312c:	0801bebc 	.word	0x0801bebc
 8013130:	0801bf98 	.word	0x0801bf98
 8013134:	0801bfd4 	.word	0x0801bfd4

08013138 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8013138:	b590      	push	{r4, r7, lr}
 801313a:	b09b      	sub	sp, #108	; 0x6c
 801313c:	af04      	add	r7, sp, #16
 801313e:	60f8      	str	r0, [r7, #12]
 8013140:	60b9      	str	r1, [r7, #8]
 8013142:	4611      	mov	r1, r2
 8013144:	461a      	mov	r2, r3
 8013146:	460b      	mov	r3, r1
 8013148:	80fb      	strh	r3, [r7, #6]
 801314a:	4613      	mov	r3, r2
 801314c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801314e:	2300      	movs	r3, #0
 8013150:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8013152:	2300      	movs	r3, #0
 8013154:	653b      	str	r3, [r7, #80]	; 0x50
 8013156:	2300      	movs	r3, #0
 8013158:	64fb      	str	r3, [r7, #76]	; 0x4c
 801315a:	2300      	movs	r3, #0
 801315c:	64bb      	str	r3, [r7, #72]	; 0x48
 801315e:	2300      	movs	r3, #0
 8013160:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8013162:	2300      	movs	r3, #0
 8013164:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8013168:	2300      	movs	r3, #0
 801316a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801316e:	2300      	movs	r3, #0
 8013170:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8013172:	2300      	movs	r3, #0
 8013174:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8013176:	2300      	movs	r3, #0
 8013178:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d109      	bne.n	8013194 <tcp_write+0x5c>
 8013180:	4ba4      	ldr	r3, [pc, #656]	; (8013414 <tcp_write+0x2dc>)
 8013182:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8013186:	49a4      	ldr	r1, [pc, #656]	; (8013418 <tcp_write+0x2e0>)
 8013188:	48a4      	ldr	r0, [pc, #656]	; (801341c <tcp_write+0x2e4>)
 801318a:	f004 fe59 	bl	8017e40 <iprintf>
 801318e:	f06f 030f 	mvn.w	r3, #15
 8013192:	e32a      	b.n	80137ea <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801319a:	085b      	lsrs	r3, r3, #1
 801319c:	b29a      	uxth	r2, r3
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80131a2:	4293      	cmp	r3, r2
 80131a4:	bf28      	it	cs
 80131a6:	4613      	movcs	r3, r2
 80131a8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80131aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d102      	bne.n	80131b6 <tcp_write+0x7e>
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80131b4:	e000      	b.n	80131b8 <tcp_write+0x80>
 80131b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80131b8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80131ba:	68bb      	ldr	r3, [r7, #8]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d109      	bne.n	80131d4 <tcp_write+0x9c>
 80131c0:	4b94      	ldr	r3, [pc, #592]	; (8013414 <tcp_write+0x2dc>)
 80131c2:	f240 12ad 	movw	r2, #429	; 0x1ad
 80131c6:	4996      	ldr	r1, [pc, #600]	; (8013420 <tcp_write+0x2e8>)
 80131c8:	4894      	ldr	r0, [pc, #592]	; (801341c <tcp_write+0x2e4>)
 80131ca:	f004 fe39 	bl	8017e40 <iprintf>
 80131ce:	f06f 030f 	mvn.w	r3, #15
 80131d2:	e30a      	b.n	80137ea <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80131d4:	88fb      	ldrh	r3, [r7, #6]
 80131d6:	4619      	mov	r1, r3
 80131d8:	68f8      	ldr	r0, [r7, #12]
 80131da:	f7ff ff33 	bl	8013044 <tcp_write_checks>
 80131de:	4603      	mov	r3, r0
 80131e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80131e4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d002      	beq.n	80131f2 <tcp_write+0xba>
    return err;
 80131ec:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80131f0:	e2fb      	b.n	80137ea <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80131f8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80131fc:	2300      	movs	r3, #0
 80131fe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013206:	2b00      	cmp	r3, #0
 8013208:	f000 80f6 	beq.w	80133f8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013210:	653b      	str	r3, [r7, #80]	; 0x50
 8013212:	e002      	b.n	801321a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8013214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801321a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	2b00      	cmp	r3, #0
 8013220:	d1f8      	bne.n	8013214 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8013222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013224:	7a9b      	ldrb	r3, [r3, #10]
 8013226:	009b      	lsls	r3, r3, #2
 8013228:	b29b      	uxth	r3, r3
 801322a:	f003 0304 	and.w	r3, r3, #4
 801322e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8013230:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013234:	891b      	ldrh	r3, [r3, #8]
 8013236:	4619      	mov	r1, r3
 8013238:	8c3b      	ldrh	r3, [r7, #32]
 801323a:	440b      	add	r3, r1
 801323c:	429a      	cmp	r2, r3
 801323e:	da06      	bge.n	801324e <tcp_write+0x116>
 8013240:	4b74      	ldr	r3, [pc, #464]	; (8013414 <tcp_write+0x2dc>)
 8013242:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013246:	4977      	ldr	r1, [pc, #476]	; (8013424 <tcp_write+0x2ec>)
 8013248:	4874      	ldr	r0, [pc, #464]	; (801341c <tcp_write+0x2e4>)
 801324a:	f004 fdf9 	bl	8017e40 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801324e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013250:	891a      	ldrh	r2, [r3, #8]
 8013252:	8c3b      	ldrh	r3, [r7, #32]
 8013254:	4413      	add	r3, r2
 8013256:	b29b      	uxth	r3, r3
 8013258:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801325a:	1ad3      	subs	r3, r2, r3
 801325c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801325e:	68fb      	ldr	r3, [r7, #12]
 8013260:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013264:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8013266:	8a7b      	ldrh	r3, [r7, #18]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d026      	beq.n	80132ba <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801326c:	8a7b      	ldrh	r3, [r7, #18]
 801326e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013270:	429a      	cmp	r2, r3
 8013272:	d206      	bcs.n	8013282 <tcp_write+0x14a>
 8013274:	4b67      	ldr	r3, [pc, #412]	; (8013414 <tcp_write+0x2dc>)
 8013276:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801327a:	496b      	ldr	r1, [pc, #428]	; (8013428 <tcp_write+0x2f0>)
 801327c:	4867      	ldr	r0, [pc, #412]	; (801341c <tcp_write+0x2e4>)
 801327e:	f004 fddf 	bl	8017e40 <iprintf>
      seg = last_unsent;
 8013282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013284:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013286:	8a7b      	ldrh	r3, [r7, #18]
 8013288:	88fa      	ldrh	r2, [r7, #6]
 801328a:	4293      	cmp	r3, r2
 801328c:	bf28      	it	cs
 801328e:	4613      	movcs	r3, r2
 8013290:	b29b      	uxth	r3, r3
 8013292:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013294:	4293      	cmp	r3, r2
 8013296:	bf28      	it	cs
 8013298:	4613      	movcs	r3, r2
 801329a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801329c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80132a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80132a2:	4413      	add	r3, r2
 80132a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80132a8:	8a7a      	ldrh	r2, [r7, #18]
 80132aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80132ac:	1ad3      	subs	r3, r2, r3
 80132ae:	b29b      	uxth	r3, r3
 80132b0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80132b2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80132b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80132b6:	1ad3      	subs	r3, r2, r3
 80132b8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80132ba:	8a7b      	ldrh	r3, [r7, #18]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d00b      	beq.n	80132d8 <tcp_write+0x1a0>
 80132c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80132c4:	88fb      	ldrh	r3, [r7, #6]
 80132c6:	429a      	cmp	r2, r3
 80132c8:	d006      	beq.n	80132d8 <tcp_write+0x1a0>
 80132ca:	4b52      	ldr	r3, [pc, #328]	; (8013414 <tcp_write+0x2dc>)
 80132cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80132d0:	4956      	ldr	r1, [pc, #344]	; (801342c <tcp_write+0x2f4>)
 80132d2:	4852      	ldr	r0, [pc, #328]	; (801341c <tcp_write+0x2e4>)
 80132d4:	f004 fdb4 	bl	8017e40 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80132d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80132dc:	88fb      	ldrh	r3, [r7, #6]
 80132de:	429a      	cmp	r2, r3
 80132e0:	f080 8167 	bcs.w	80135b2 <tcp_write+0x47a>
 80132e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	f000 8163 	beq.w	80135b2 <tcp_write+0x47a>
 80132ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132ee:	891b      	ldrh	r3, [r3, #8]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	f000 815e 	beq.w	80135b2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80132f6:	88fa      	ldrh	r2, [r7, #6]
 80132f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80132fc:	1ad2      	subs	r2, r2, r3
 80132fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013300:	4293      	cmp	r3, r2
 8013302:	bfa8      	it	ge
 8013304:	4613      	movge	r3, r2
 8013306:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8013308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801330a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801330c:	797b      	ldrb	r3, [r7, #5]
 801330e:	f003 0301 	and.w	r3, r3, #1
 8013312:	2b00      	cmp	r3, #0
 8013314:	d027      	beq.n	8013366 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8013316:	f107 0012 	add.w	r0, r7, #18
 801331a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801331c:	8bf9      	ldrh	r1, [r7, #30]
 801331e:	2301      	movs	r3, #1
 8013320:	9302      	str	r3, [sp, #8]
 8013322:	797b      	ldrb	r3, [r7, #5]
 8013324:	9301      	str	r3, [sp, #4]
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	9300      	str	r3, [sp, #0]
 801332a:	4603      	mov	r3, r0
 801332c:	2000      	movs	r0, #0
 801332e:	f7ff fe0f 	bl	8012f50 <tcp_pbuf_prealloc>
 8013332:	6578      	str	r0, [r7, #84]	; 0x54
 8013334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013336:	2b00      	cmp	r3, #0
 8013338:	f000 8225 	beq.w	8013786 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801333c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801333e:	6858      	ldr	r0, [r3, #4]
 8013340:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013344:	68ba      	ldr	r2, [r7, #8]
 8013346:	4413      	add	r3, r2
 8013348:	8bfa      	ldrh	r2, [r7, #30]
 801334a:	4619      	mov	r1, r3
 801334c:	f004 fc9e 	bl	8017c8c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8013350:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013352:	f7fb f9ef 	bl	800e734 <pbuf_clen>
 8013356:	4603      	mov	r3, r0
 8013358:	461a      	mov	r2, r3
 801335a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801335e:	4413      	add	r3, r2
 8013360:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8013364:	e041      	b.n	80133ea <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8013366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013368:	685b      	ldr	r3, [r3, #4]
 801336a:	637b      	str	r3, [r7, #52]	; 0x34
 801336c:	e002      	b.n	8013374 <tcp_write+0x23c>
 801336e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	637b      	str	r3, [r7, #52]	; 0x34
 8013374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d1f8      	bne.n	801336e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801337c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801337e:	7b1b      	ldrb	r3, [r3, #12]
 8013380:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013384:	2b00      	cmp	r3, #0
 8013386:	d115      	bne.n	80133b4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801338a:	685b      	ldr	r3, [r3, #4]
 801338c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801338e:	8952      	ldrh	r2, [r2, #10]
 8013390:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013392:	68ba      	ldr	r2, [r7, #8]
 8013394:	429a      	cmp	r2, r3
 8013396:	d10d      	bne.n	80133b4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8013398:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801339c:	2b00      	cmp	r3, #0
 801339e:	d006      	beq.n	80133ae <tcp_write+0x276>
 80133a0:	4b1c      	ldr	r3, [pc, #112]	; (8013414 <tcp_write+0x2dc>)
 80133a2:	f240 2231 	movw	r2, #561	; 0x231
 80133a6:	4922      	ldr	r1, [pc, #136]	; (8013430 <tcp_write+0x2f8>)
 80133a8:	481c      	ldr	r0, [pc, #112]	; (801341c <tcp_write+0x2e4>)
 80133aa:	f004 fd49 	bl	8017e40 <iprintf>
          extendlen = seglen;
 80133ae:	8bfb      	ldrh	r3, [r7, #30]
 80133b0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80133b2:	e01a      	b.n	80133ea <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80133b4:	8bfb      	ldrh	r3, [r7, #30]
 80133b6:	2201      	movs	r2, #1
 80133b8:	4619      	mov	r1, r3
 80133ba:	2000      	movs	r0, #0
 80133bc:	f7fa fe48 	bl	800e050 <pbuf_alloc>
 80133c0:	6578      	str	r0, [r7, #84]	; 0x54
 80133c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	f000 81e0 	beq.w	801378a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80133ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80133ce:	68ba      	ldr	r2, [r7, #8]
 80133d0:	441a      	add	r2, r3
 80133d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80133d4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80133d6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80133d8:	f7fb f9ac 	bl	800e734 <pbuf_clen>
 80133dc:	4603      	mov	r3, r0
 80133de:	461a      	mov	r2, r3
 80133e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80133e4:	4413      	add	r3, r2
 80133e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80133ea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80133ee:	8bfb      	ldrh	r3, [r7, #30]
 80133f0:	4413      	add	r3, r2
 80133f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80133f6:	e0dc      	b.n	80135b2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80133fe:	2b00      	cmp	r3, #0
 8013400:	f000 80d7 	beq.w	80135b2 <tcp_write+0x47a>
 8013404:	4b03      	ldr	r3, [pc, #12]	; (8013414 <tcp_write+0x2dc>)
 8013406:	f240 224a 	movw	r2, #586	; 0x24a
 801340a:	490a      	ldr	r1, [pc, #40]	; (8013434 <tcp_write+0x2fc>)
 801340c:	4803      	ldr	r0, [pc, #12]	; (801341c <tcp_write+0x2e4>)
 801340e:	f004 fd17 	bl	8017e40 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8013412:	e0ce      	b.n	80135b2 <tcp_write+0x47a>
 8013414:	0801be68 	.word	0x0801be68
 8013418:	0801c008 	.word	0x0801c008
 801341c:	0801bebc 	.word	0x0801bebc
 8013420:	0801c020 	.word	0x0801c020
 8013424:	0801c054 	.word	0x0801c054
 8013428:	0801c06c 	.word	0x0801c06c
 801342c:	0801c08c 	.word	0x0801c08c
 8013430:	0801c0ac 	.word	0x0801c0ac
 8013434:	0801c0d8 	.word	0x0801c0d8
    struct pbuf *p;
    u16_t left = len - pos;
 8013438:	88fa      	ldrh	r2, [r7, #6]
 801343a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801343e:	1ad3      	subs	r3, r2, r3
 8013440:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8013442:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013446:	b29b      	uxth	r3, r3
 8013448:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801344a:	1ad3      	subs	r3, r2, r3
 801344c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801344e:	8b7a      	ldrh	r2, [r7, #26]
 8013450:	8bbb      	ldrh	r3, [r7, #28]
 8013452:	4293      	cmp	r3, r2
 8013454:	bf28      	it	cs
 8013456:	4613      	movcs	r3, r2
 8013458:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801345a:	797b      	ldrb	r3, [r7, #5]
 801345c:	f003 0301 	and.w	r3, r3, #1
 8013460:	2b00      	cmp	r3, #0
 8013462:	d036      	beq.n	80134d2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8013464:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013468:	b29a      	uxth	r2, r3
 801346a:	8b3b      	ldrh	r3, [r7, #24]
 801346c:	4413      	add	r3, r2
 801346e:	b299      	uxth	r1, r3
 8013470:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013472:	2b00      	cmp	r3, #0
 8013474:	bf0c      	ite	eq
 8013476:	2301      	moveq	r3, #1
 8013478:	2300      	movne	r3, #0
 801347a:	b2db      	uxtb	r3, r3
 801347c:	f107 0012 	add.w	r0, r7, #18
 8013480:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013482:	9302      	str	r3, [sp, #8]
 8013484:	797b      	ldrb	r3, [r7, #5]
 8013486:	9301      	str	r3, [sp, #4]
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	9300      	str	r3, [sp, #0]
 801348c:	4603      	mov	r3, r0
 801348e:	2036      	movs	r0, #54	; 0x36
 8013490:	f7ff fd5e 	bl	8012f50 <tcp_pbuf_prealloc>
 8013494:	6338      	str	r0, [r7, #48]	; 0x30
 8013496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013498:	2b00      	cmp	r3, #0
 801349a:	f000 8178 	beq.w	801378e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801349e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134a0:	895b      	ldrh	r3, [r3, #10]
 80134a2:	8b3a      	ldrh	r2, [r7, #24]
 80134a4:	429a      	cmp	r2, r3
 80134a6:	d906      	bls.n	80134b6 <tcp_write+0x37e>
 80134a8:	4b8c      	ldr	r3, [pc, #560]	; (80136dc <tcp_write+0x5a4>)
 80134aa:	f240 2266 	movw	r2, #614	; 0x266
 80134ae:	498c      	ldr	r1, [pc, #560]	; (80136e0 <tcp_write+0x5a8>)
 80134b0:	488c      	ldr	r0, [pc, #560]	; (80136e4 <tcp_write+0x5ac>)
 80134b2:	f004 fcc5 	bl	8017e40 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80134b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134b8:	685a      	ldr	r2, [r3, #4]
 80134ba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80134be:	18d0      	adds	r0, r2, r3
 80134c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80134c4:	68ba      	ldr	r2, [r7, #8]
 80134c6:	4413      	add	r3, r2
 80134c8:	8b3a      	ldrh	r2, [r7, #24]
 80134ca:	4619      	mov	r1, r3
 80134cc:	f004 fbde 	bl	8017c8c <memcpy>
 80134d0:	e02f      	b.n	8013532 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80134d2:	8a7b      	ldrh	r3, [r7, #18]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d006      	beq.n	80134e6 <tcp_write+0x3ae>
 80134d8:	4b80      	ldr	r3, [pc, #512]	; (80136dc <tcp_write+0x5a4>)
 80134da:	f240 2271 	movw	r2, #625	; 0x271
 80134de:	4982      	ldr	r1, [pc, #520]	; (80136e8 <tcp_write+0x5b0>)
 80134e0:	4880      	ldr	r0, [pc, #512]	; (80136e4 <tcp_write+0x5ac>)
 80134e2:	f004 fcad 	bl	8017e40 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80134e6:	8b3b      	ldrh	r3, [r7, #24]
 80134e8:	2201      	movs	r2, #1
 80134ea:	4619      	mov	r1, r3
 80134ec:	2036      	movs	r0, #54	; 0x36
 80134ee:	f7fa fdaf 	bl	800e050 <pbuf_alloc>
 80134f2:	6178      	str	r0, [r7, #20]
 80134f4:	697b      	ldr	r3, [r7, #20]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	f000 814b 	beq.w	8013792 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80134fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013500:	68ba      	ldr	r2, [r7, #8]
 8013502:	441a      	add	r2, r3
 8013504:	697b      	ldr	r3, [r7, #20]
 8013506:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013508:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801350c:	b29b      	uxth	r3, r3
 801350e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013512:	4619      	mov	r1, r3
 8013514:	2036      	movs	r0, #54	; 0x36
 8013516:	f7fa fd9b 	bl	800e050 <pbuf_alloc>
 801351a:	6338      	str	r0, [r7, #48]	; 0x30
 801351c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801351e:	2b00      	cmp	r3, #0
 8013520:	d103      	bne.n	801352a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8013522:	6978      	ldr	r0, [r7, #20]
 8013524:	f7fb f878 	bl	800e618 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8013528:	e136      	b.n	8013798 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801352a:	6979      	ldr	r1, [r7, #20]
 801352c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801352e:	f7fb f941 	bl	800e7b4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8013532:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013534:	f7fb f8fe 	bl	800e734 <pbuf_clen>
 8013538:	4603      	mov	r3, r0
 801353a:	461a      	mov	r2, r3
 801353c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013540:	4413      	add	r3, r2
 8013542:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8013546:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801354a:	2b09      	cmp	r3, #9
 801354c:	d903      	bls.n	8013556 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801354e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013550:	f7fb f862 	bl	800e618 <pbuf_free>
      goto memerr;
 8013554:	e120      	b.n	8013798 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801355a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801355e:	441a      	add	r2, r3
 8013560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013564:	9300      	str	r3, [sp, #0]
 8013566:	4613      	mov	r3, r2
 8013568:	2200      	movs	r2, #0
 801356a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801356c:	68f8      	ldr	r0, [r7, #12]
 801356e:	f7ff fc51 	bl	8012e14 <tcp_create_segment>
 8013572:	64f8      	str	r0, [r7, #76]	; 0x4c
 8013574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013576:	2b00      	cmp	r3, #0
 8013578:	f000 810d 	beq.w	8013796 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801357c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801357e:	2b00      	cmp	r3, #0
 8013580:	d102      	bne.n	8013588 <tcp_write+0x450>
      queue = seg;
 8013582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013584:	647b      	str	r3, [r7, #68]	; 0x44
 8013586:	e00c      	b.n	80135a2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8013588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801358a:	2b00      	cmp	r3, #0
 801358c:	d106      	bne.n	801359c <tcp_write+0x464>
 801358e:	4b53      	ldr	r3, [pc, #332]	; (80136dc <tcp_write+0x5a4>)
 8013590:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013594:	4955      	ldr	r1, [pc, #340]	; (80136ec <tcp_write+0x5b4>)
 8013596:	4853      	ldr	r0, [pc, #332]	; (80136e4 <tcp_write+0x5ac>)
 8013598:	f004 fc52 	bl	8017e40 <iprintf>
      prev_seg->next = seg;
 801359c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801359e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80135a0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80135a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135a4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80135a6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80135aa:	8b3b      	ldrh	r3, [r7, #24]
 80135ac:	4413      	add	r3, r2
 80135ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80135b2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80135b6:	88fb      	ldrh	r3, [r7, #6]
 80135b8:	429a      	cmp	r2, r3
 80135ba:	f4ff af3d 	bcc.w	8013438 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80135be:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d02c      	beq.n	801361e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80135c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135c6:	685b      	ldr	r3, [r3, #4]
 80135c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80135ca:	e01e      	b.n	801360a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80135cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ce:	891a      	ldrh	r2, [r3, #8]
 80135d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80135d2:	4413      	add	r3, r2
 80135d4:	b29a      	uxth	r2, r3
 80135d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135d8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80135da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d110      	bne.n	8013604 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80135e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135e4:	685b      	ldr	r3, [r3, #4]
 80135e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80135e8:	8952      	ldrh	r2, [r2, #10]
 80135ea:	4413      	add	r3, r2
 80135ec:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80135ee:	68b9      	ldr	r1, [r7, #8]
 80135f0:	4618      	mov	r0, r3
 80135f2:	f004 fb4b 	bl	8017c8c <memcpy>
        p->len += oversize_used;
 80135f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135f8:	895a      	ldrh	r2, [r3, #10]
 80135fa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80135fc:	4413      	add	r3, r2
 80135fe:	b29a      	uxth	r2, r3
 8013600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013602:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8013604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	62fb      	str	r3, [r7, #44]	; 0x2c
 801360a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801360c:	2b00      	cmp	r3, #0
 801360e:	d1dd      	bne.n	80135cc <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8013610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013612:	891a      	ldrh	r2, [r3, #8]
 8013614:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013616:	4413      	add	r3, r2
 8013618:	b29a      	uxth	r2, r3
 801361a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801361c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801361e:	8a7a      	ldrh	r2, [r7, #18]
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8013626:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013628:	2b00      	cmp	r3, #0
 801362a:	d018      	beq.n	801365e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801362c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801362e:	2b00      	cmp	r3, #0
 8013630:	d106      	bne.n	8013640 <tcp_write+0x508>
 8013632:	4b2a      	ldr	r3, [pc, #168]	; (80136dc <tcp_write+0x5a4>)
 8013634:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8013638:	492d      	ldr	r1, [pc, #180]	; (80136f0 <tcp_write+0x5b8>)
 801363a:	482a      	ldr	r0, [pc, #168]	; (80136e4 <tcp_write+0x5ac>)
 801363c:	f004 fc00 	bl	8017e40 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8013640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013642:	685b      	ldr	r3, [r3, #4]
 8013644:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013646:	4618      	mov	r0, r3
 8013648:	f7fb f8b4 	bl	800e7b4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801364c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801364e:	891a      	ldrh	r2, [r3, #8]
 8013650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013652:	891b      	ldrh	r3, [r3, #8]
 8013654:	4413      	add	r3, r2
 8013656:	b29a      	uxth	r2, r3
 8013658:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801365a:	811a      	strh	r2, [r3, #8]
 801365c:	e037      	b.n	80136ce <tcp_write+0x596>
  } else if (extendlen > 0) {
 801365e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013660:	2b00      	cmp	r3, #0
 8013662:	d034      	beq.n	80136ce <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8013664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013666:	2b00      	cmp	r3, #0
 8013668:	d003      	beq.n	8013672 <tcp_write+0x53a>
 801366a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801366c:	685b      	ldr	r3, [r3, #4]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d106      	bne.n	8013680 <tcp_write+0x548>
 8013672:	4b1a      	ldr	r3, [pc, #104]	; (80136dc <tcp_write+0x5a4>)
 8013674:	f240 22e6 	movw	r2, #742	; 0x2e6
 8013678:	491e      	ldr	r1, [pc, #120]	; (80136f4 <tcp_write+0x5bc>)
 801367a:	481a      	ldr	r0, [pc, #104]	; (80136e4 <tcp_write+0x5ac>)
 801367c:	f004 fbe0 	bl	8017e40 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013680:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013682:	685b      	ldr	r3, [r3, #4]
 8013684:	62bb      	str	r3, [r7, #40]	; 0x28
 8013686:	e009      	b.n	801369c <tcp_write+0x564>
      p->tot_len += extendlen;
 8013688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801368a:	891a      	ldrh	r2, [r3, #8]
 801368c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801368e:	4413      	add	r3, r2
 8013690:	b29a      	uxth	r2, r3
 8013692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013694:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	62bb      	str	r3, [r7, #40]	; 0x28
 801369c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d1f1      	bne.n	8013688 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80136a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136a6:	891a      	ldrh	r2, [r3, #8]
 80136a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80136aa:	4413      	add	r3, r2
 80136ac:	b29a      	uxth	r2, r3
 80136ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136b0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80136b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136b4:	895a      	ldrh	r2, [r3, #10]
 80136b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80136b8:	4413      	add	r3, r2
 80136ba:	b29a      	uxth	r2, r3
 80136bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136be:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80136c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136c2:	891a      	ldrh	r2, [r3, #8]
 80136c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80136c6:	4413      	add	r3, r2
 80136c8:	b29a      	uxth	r2, r3
 80136ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136cc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80136ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d111      	bne.n	80136f8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80136d8:	66da      	str	r2, [r3, #108]	; 0x6c
 80136da:	e010      	b.n	80136fe <tcp_write+0x5c6>
 80136dc:	0801be68 	.word	0x0801be68
 80136e0:	0801c108 	.word	0x0801c108
 80136e4:	0801bebc 	.word	0x0801bebc
 80136e8:	0801c148 	.word	0x0801c148
 80136ec:	0801c158 	.word	0x0801c158
 80136f0:	0801c16c 	.word	0x0801c16c
 80136f4:	0801c1a4 	.word	0x0801c1a4
  } else {
    last_unsent->next = queue;
 80136f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80136fc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013702:	88fb      	ldrh	r3, [r7, #6]
 8013704:	441a      	add	r2, r3
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013710:	88fb      	ldrh	r3, [r7, #6]
 8013712:	1ad3      	subs	r3, r2, r3
 8013714:	b29a      	uxth	r2, r3
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013722:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801372c:	2b00      	cmp	r3, #0
 801372e:	d00e      	beq.n	801374e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013734:	2b00      	cmp	r3, #0
 8013736:	d10a      	bne.n	801374e <tcp_write+0x616>
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801373c:	2b00      	cmp	r3, #0
 801373e:	d106      	bne.n	801374e <tcp_write+0x616>
 8013740:	4b2c      	ldr	r3, [pc, #176]	; (80137f4 <tcp_write+0x6bc>)
 8013742:	f240 3212 	movw	r2, #786	; 0x312
 8013746:	492c      	ldr	r1, [pc, #176]	; (80137f8 <tcp_write+0x6c0>)
 8013748:	482c      	ldr	r0, [pc, #176]	; (80137fc <tcp_write+0x6c4>)
 801374a:	f004 fb79 	bl	8017e40 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801374e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013750:	2b00      	cmp	r3, #0
 8013752:	d016      	beq.n	8013782 <tcp_write+0x64a>
 8013754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013756:	68db      	ldr	r3, [r3, #12]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d012      	beq.n	8013782 <tcp_write+0x64a>
 801375c:	797b      	ldrb	r3, [r7, #5]
 801375e:	f003 0302 	and.w	r3, r3, #2
 8013762:	2b00      	cmp	r3, #0
 8013764:	d10d      	bne.n	8013782 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8013766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013768:	68db      	ldr	r3, [r3, #12]
 801376a:	899b      	ldrh	r3, [r3, #12]
 801376c:	b29c      	uxth	r4, r3
 801376e:	2008      	movs	r0, #8
 8013770:	f7f9 fac8 	bl	800cd04 <lwip_htons>
 8013774:	4603      	mov	r3, r0
 8013776:	461a      	mov	r2, r3
 8013778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801377a:	68db      	ldr	r3, [r3, #12]
 801377c:	4322      	orrs	r2, r4
 801377e:	b292      	uxth	r2, r2
 8013780:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8013782:	2300      	movs	r3, #0
 8013784:	e031      	b.n	80137ea <tcp_write+0x6b2>
          goto memerr;
 8013786:	bf00      	nop
 8013788:	e006      	b.n	8013798 <tcp_write+0x660>
            goto memerr;
 801378a:	bf00      	nop
 801378c:	e004      	b.n	8013798 <tcp_write+0x660>
        goto memerr;
 801378e:	bf00      	nop
 8013790:	e002      	b.n	8013798 <tcp_write+0x660>
        goto memerr;
 8013792:	bf00      	nop
 8013794:	e000      	b.n	8013798 <tcp_write+0x660>
      goto memerr;
 8013796:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	8b5b      	ldrh	r3, [r3, #26]
 801379c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80137a0:	b29a      	uxth	r2, r3
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80137a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d002      	beq.n	80137b2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80137ac:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80137ae:	f7fa ff33 	bl	800e618 <pbuf_free>
  }
  if (queue != NULL) {
 80137b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d002      	beq.n	80137be <tcp_write+0x686>
    tcp_segs_free(queue);
 80137b8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80137ba:	f7fc fb51 	bl	800fe60 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d00e      	beq.n	80137e6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d10a      	bne.n	80137e6 <tcp_write+0x6ae>
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d106      	bne.n	80137e6 <tcp_write+0x6ae>
 80137d8:	4b06      	ldr	r3, [pc, #24]	; (80137f4 <tcp_write+0x6bc>)
 80137da:	f240 3227 	movw	r2, #807	; 0x327
 80137de:	4906      	ldr	r1, [pc, #24]	; (80137f8 <tcp_write+0x6c0>)
 80137e0:	4806      	ldr	r0, [pc, #24]	; (80137fc <tcp_write+0x6c4>)
 80137e2:	f004 fb2d 	bl	8017e40 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80137e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80137ea:	4618      	mov	r0, r3
 80137ec:	375c      	adds	r7, #92	; 0x5c
 80137ee:	46bd      	mov	sp, r7
 80137f0:	bd90      	pop	{r4, r7, pc}
 80137f2:	bf00      	nop
 80137f4:	0801be68 	.word	0x0801be68
 80137f8:	0801c1dc 	.word	0x0801c1dc
 80137fc:	0801bebc 	.word	0x0801bebc

08013800 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013800:	b590      	push	{r4, r7, lr}
 8013802:	b08b      	sub	sp, #44	; 0x2c
 8013804:	af02      	add	r7, sp, #8
 8013806:	6078      	str	r0, [r7, #4]
 8013808:	460b      	mov	r3, r1
 801380a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801380c:	2300      	movs	r3, #0
 801380e:	61fb      	str	r3, [r7, #28]
 8013810:	2300      	movs	r3, #0
 8013812:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013814:	2300      	movs	r3, #0
 8013816:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d106      	bne.n	801382c <tcp_split_unsent_seg+0x2c>
 801381e:	4b95      	ldr	r3, [pc, #596]	; (8013a74 <tcp_split_unsent_seg+0x274>)
 8013820:	f240 324b 	movw	r2, #843	; 0x34b
 8013824:	4994      	ldr	r1, [pc, #592]	; (8013a78 <tcp_split_unsent_seg+0x278>)
 8013826:	4895      	ldr	r0, [pc, #596]	; (8013a7c <tcp_split_unsent_seg+0x27c>)
 8013828:	f004 fb0a 	bl	8017e40 <iprintf>

  useg = pcb->unsent;
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013830:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013832:	697b      	ldr	r3, [r7, #20]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d102      	bne.n	801383e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013838:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801383c:	e116      	b.n	8013a6c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801383e:	887b      	ldrh	r3, [r7, #2]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d109      	bne.n	8013858 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013844:	4b8b      	ldr	r3, [pc, #556]	; (8013a74 <tcp_split_unsent_seg+0x274>)
 8013846:	f240 3253 	movw	r2, #851	; 0x353
 801384a:	498d      	ldr	r1, [pc, #564]	; (8013a80 <tcp_split_unsent_seg+0x280>)
 801384c:	488b      	ldr	r0, [pc, #556]	; (8013a7c <tcp_split_unsent_seg+0x27c>)
 801384e:	f004 faf7 	bl	8017e40 <iprintf>
    return ERR_VAL;
 8013852:	f06f 0305 	mvn.w	r3, #5
 8013856:	e109      	b.n	8013a6c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013858:	697b      	ldr	r3, [r7, #20]
 801385a:	891b      	ldrh	r3, [r3, #8]
 801385c:	887a      	ldrh	r2, [r7, #2]
 801385e:	429a      	cmp	r2, r3
 8013860:	d301      	bcc.n	8013866 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013862:	2300      	movs	r3, #0
 8013864:	e102      	b.n	8013a6c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801386a:	887a      	ldrh	r2, [r7, #2]
 801386c:	429a      	cmp	r2, r3
 801386e:	d906      	bls.n	801387e <tcp_split_unsent_seg+0x7e>
 8013870:	4b80      	ldr	r3, [pc, #512]	; (8013a74 <tcp_split_unsent_seg+0x274>)
 8013872:	f240 325b 	movw	r2, #859	; 0x35b
 8013876:	4983      	ldr	r1, [pc, #524]	; (8013a84 <tcp_split_unsent_seg+0x284>)
 8013878:	4880      	ldr	r0, [pc, #512]	; (8013a7c <tcp_split_unsent_seg+0x27c>)
 801387a:	f004 fae1 	bl	8017e40 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801387e:	697b      	ldr	r3, [r7, #20]
 8013880:	891b      	ldrh	r3, [r3, #8]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d106      	bne.n	8013894 <tcp_split_unsent_seg+0x94>
 8013886:	4b7b      	ldr	r3, [pc, #492]	; (8013a74 <tcp_split_unsent_seg+0x274>)
 8013888:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801388c:	497e      	ldr	r1, [pc, #504]	; (8013a88 <tcp_split_unsent_seg+0x288>)
 801388e:	487b      	ldr	r0, [pc, #492]	; (8013a7c <tcp_split_unsent_seg+0x27c>)
 8013890:	f004 fad6 	bl	8017e40 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013894:	697b      	ldr	r3, [r7, #20]
 8013896:	7a9b      	ldrb	r3, [r3, #10]
 8013898:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801389a:	7bfb      	ldrb	r3, [r7, #15]
 801389c:	009b      	lsls	r3, r3, #2
 801389e:	b2db      	uxtb	r3, r3
 80138a0:	f003 0304 	and.w	r3, r3, #4
 80138a4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80138a6:	697b      	ldr	r3, [r7, #20]
 80138a8:	891a      	ldrh	r2, [r3, #8]
 80138aa:	887b      	ldrh	r3, [r7, #2]
 80138ac:	1ad3      	subs	r3, r2, r3
 80138ae:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80138b0:	7bbb      	ldrb	r3, [r7, #14]
 80138b2:	b29a      	uxth	r2, r3
 80138b4:	89bb      	ldrh	r3, [r7, #12]
 80138b6:	4413      	add	r3, r2
 80138b8:	b29b      	uxth	r3, r3
 80138ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 80138be:	4619      	mov	r1, r3
 80138c0:	2036      	movs	r0, #54	; 0x36
 80138c2:	f7fa fbc5 	bl	800e050 <pbuf_alloc>
 80138c6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80138c8:	693b      	ldr	r3, [r7, #16]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	f000 80b7 	beq.w	8013a3e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80138d0:	697b      	ldr	r3, [r7, #20]
 80138d2:	685b      	ldr	r3, [r3, #4]
 80138d4:	891a      	ldrh	r2, [r3, #8]
 80138d6:	697b      	ldr	r3, [r7, #20]
 80138d8:	891b      	ldrh	r3, [r3, #8]
 80138da:	1ad3      	subs	r3, r2, r3
 80138dc:	b29a      	uxth	r2, r3
 80138de:	887b      	ldrh	r3, [r7, #2]
 80138e0:	4413      	add	r3, r2
 80138e2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80138e4:	697b      	ldr	r3, [r7, #20]
 80138e6:	6858      	ldr	r0, [r3, #4]
 80138e8:	693b      	ldr	r3, [r7, #16]
 80138ea:	685a      	ldr	r2, [r3, #4]
 80138ec:	7bbb      	ldrb	r3, [r7, #14]
 80138ee:	18d1      	adds	r1, r2, r3
 80138f0:	897b      	ldrh	r3, [r7, #10]
 80138f2:	89ba      	ldrh	r2, [r7, #12]
 80138f4:	f7fb f886 	bl	800ea04 <pbuf_copy_partial>
 80138f8:	4603      	mov	r3, r0
 80138fa:	461a      	mov	r2, r3
 80138fc:	89bb      	ldrh	r3, [r7, #12]
 80138fe:	4293      	cmp	r3, r2
 8013900:	f040 809f 	bne.w	8013a42 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013904:	697b      	ldr	r3, [r7, #20]
 8013906:	68db      	ldr	r3, [r3, #12]
 8013908:	899b      	ldrh	r3, [r3, #12]
 801390a:	b29b      	uxth	r3, r3
 801390c:	4618      	mov	r0, r3
 801390e:	f7f9 f9f9 	bl	800cd04 <lwip_htons>
 8013912:	4603      	mov	r3, r0
 8013914:	b2db      	uxtb	r3, r3
 8013916:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801391a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801391c:	2300      	movs	r3, #0
 801391e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013920:	7efb      	ldrb	r3, [r7, #27]
 8013922:	f003 0308 	and.w	r3, r3, #8
 8013926:	2b00      	cmp	r3, #0
 8013928:	d007      	beq.n	801393a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801392a:	7efb      	ldrb	r3, [r7, #27]
 801392c:	f023 0308 	bic.w	r3, r3, #8
 8013930:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013932:	7ebb      	ldrb	r3, [r7, #26]
 8013934:	f043 0308 	orr.w	r3, r3, #8
 8013938:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801393a:	7efb      	ldrb	r3, [r7, #27]
 801393c:	f003 0301 	and.w	r3, r3, #1
 8013940:	2b00      	cmp	r3, #0
 8013942:	d007      	beq.n	8013954 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013944:	7efb      	ldrb	r3, [r7, #27]
 8013946:	f023 0301 	bic.w	r3, r3, #1
 801394a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801394c:	7ebb      	ldrb	r3, [r7, #26]
 801394e:	f043 0301 	orr.w	r3, r3, #1
 8013952:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013954:	697b      	ldr	r3, [r7, #20]
 8013956:	68db      	ldr	r3, [r3, #12]
 8013958:	685b      	ldr	r3, [r3, #4]
 801395a:	4618      	mov	r0, r3
 801395c:	f7f9 f9e7 	bl	800cd2e <lwip_htonl>
 8013960:	4602      	mov	r2, r0
 8013962:	887b      	ldrh	r3, [r7, #2]
 8013964:	18d1      	adds	r1, r2, r3
 8013966:	7eba      	ldrb	r2, [r7, #26]
 8013968:	7bfb      	ldrb	r3, [r7, #15]
 801396a:	9300      	str	r3, [sp, #0]
 801396c:	460b      	mov	r3, r1
 801396e:	6939      	ldr	r1, [r7, #16]
 8013970:	6878      	ldr	r0, [r7, #4]
 8013972:	f7ff fa4f 	bl	8012e14 <tcp_create_segment>
 8013976:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013978:	69fb      	ldr	r3, [r7, #28]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d063      	beq.n	8013a46 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801397e:	697b      	ldr	r3, [r7, #20]
 8013980:	685b      	ldr	r3, [r3, #4]
 8013982:	4618      	mov	r0, r3
 8013984:	f7fa fed6 	bl	800e734 <pbuf_clen>
 8013988:	4603      	mov	r3, r0
 801398a:	461a      	mov	r2, r3
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013992:	1a9b      	subs	r3, r3, r2
 8013994:	b29a      	uxth	r2, r3
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801399c:	697b      	ldr	r3, [r7, #20]
 801399e:	6858      	ldr	r0, [r3, #4]
 80139a0:	697b      	ldr	r3, [r7, #20]
 80139a2:	685b      	ldr	r3, [r3, #4]
 80139a4:	891a      	ldrh	r2, [r3, #8]
 80139a6:	89bb      	ldrh	r3, [r7, #12]
 80139a8:	1ad3      	subs	r3, r2, r3
 80139aa:	b29b      	uxth	r3, r3
 80139ac:	4619      	mov	r1, r3
 80139ae:	f7fa fcad 	bl	800e30c <pbuf_realloc>
  useg->len -= remainder;
 80139b2:	697b      	ldr	r3, [r7, #20]
 80139b4:	891a      	ldrh	r2, [r3, #8]
 80139b6:	89bb      	ldrh	r3, [r7, #12]
 80139b8:	1ad3      	subs	r3, r2, r3
 80139ba:	b29a      	uxth	r2, r3
 80139bc:	697b      	ldr	r3, [r7, #20]
 80139be:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80139c0:	697b      	ldr	r3, [r7, #20]
 80139c2:	68db      	ldr	r3, [r3, #12]
 80139c4:	899b      	ldrh	r3, [r3, #12]
 80139c6:	b29c      	uxth	r4, r3
 80139c8:	7efb      	ldrb	r3, [r7, #27]
 80139ca:	b29b      	uxth	r3, r3
 80139cc:	4618      	mov	r0, r3
 80139ce:	f7f9 f999 	bl	800cd04 <lwip_htons>
 80139d2:	4603      	mov	r3, r0
 80139d4:	461a      	mov	r2, r3
 80139d6:	697b      	ldr	r3, [r7, #20]
 80139d8:	68db      	ldr	r3, [r3, #12]
 80139da:	4322      	orrs	r2, r4
 80139dc:	b292      	uxth	r2, r2
 80139de:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80139e0:	697b      	ldr	r3, [r7, #20]
 80139e2:	685b      	ldr	r3, [r3, #4]
 80139e4:	4618      	mov	r0, r3
 80139e6:	f7fa fea5 	bl	800e734 <pbuf_clen>
 80139ea:	4603      	mov	r3, r0
 80139ec:	461a      	mov	r2, r3
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80139f4:	4413      	add	r3, r2
 80139f6:	b29a      	uxth	r2, r3
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80139fe:	69fb      	ldr	r3, [r7, #28]
 8013a00:	685b      	ldr	r3, [r3, #4]
 8013a02:	4618      	mov	r0, r3
 8013a04:	f7fa fe96 	bl	800e734 <pbuf_clen>
 8013a08:	4603      	mov	r3, r0
 8013a0a:	461a      	mov	r2, r3
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013a12:	4413      	add	r3, r2
 8013a14:	b29a      	uxth	r2, r3
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013a1c:	697b      	ldr	r3, [r7, #20]
 8013a1e:	681a      	ldr	r2, [r3, #0]
 8013a20:	69fb      	ldr	r3, [r7, #28]
 8013a22:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013a24:	697b      	ldr	r3, [r7, #20]
 8013a26:	69fa      	ldr	r2, [r7, #28]
 8013a28:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013a2a:	69fb      	ldr	r3, [r7, #28]
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d103      	bne.n	8013a3a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	2200      	movs	r2, #0
 8013a36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	e016      	b.n	8013a6c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013a3e:	bf00      	nop
 8013a40:	e002      	b.n	8013a48 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013a42:	bf00      	nop
 8013a44:	e000      	b.n	8013a48 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013a46:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013a48:	69fb      	ldr	r3, [r7, #28]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d006      	beq.n	8013a5c <tcp_split_unsent_seg+0x25c>
 8013a4e:	4b09      	ldr	r3, [pc, #36]	; (8013a74 <tcp_split_unsent_seg+0x274>)
 8013a50:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013a54:	490d      	ldr	r1, [pc, #52]	; (8013a8c <tcp_split_unsent_seg+0x28c>)
 8013a56:	4809      	ldr	r0, [pc, #36]	; (8013a7c <tcp_split_unsent_seg+0x27c>)
 8013a58:	f004 f9f2 	bl	8017e40 <iprintf>
  if (p != NULL) {
 8013a5c:	693b      	ldr	r3, [r7, #16]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d002      	beq.n	8013a68 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013a62:	6938      	ldr	r0, [r7, #16]
 8013a64:	f7fa fdd8 	bl	800e618 <pbuf_free>
  }

  return ERR_MEM;
 8013a68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	3724      	adds	r7, #36	; 0x24
 8013a70:	46bd      	mov	sp, r7
 8013a72:	bd90      	pop	{r4, r7, pc}
 8013a74:	0801be68 	.word	0x0801be68
 8013a78:	0801c1fc 	.word	0x0801c1fc
 8013a7c:	0801bebc 	.word	0x0801bebc
 8013a80:	0801c220 	.word	0x0801c220
 8013a84:	0801c244 	.word	0x0801c244
 8013a88:	0801c254 	.word	0x0801c254
 8013a8c:	0801c264 	.word	0x0801c264

08013a90 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013a90:	b590      	push	{r4, r7, lr}
 8013a92:	b085      	sub	sp, #20
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d106      	bne.n	8013aac <tcp_send_fin+0x1c>
 8013a9e:	4b21      	ldr	r3, [pc, #132]	; (8013b24 <tcp_send_fin+0x94>)
 8013aa0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013aa4:	4920      	ldr	r1, [pc, #128]	; (8013b28 <tcp_send_fin+0x98>)
 8013aa6:	4821      	ldr	r0, [pc, #132]	; (8013b2c <tcp_send_fin+0x9c>)
 8013aa8:	f004 f9ca 	bl	8017e40 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d02e      	beq.n	8013b12 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ab8:	60fb      	str	r3, [r7, #12]
 8013aba:	e002      	b.n	8013ac2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	681b      	ldr	r3, [r3, #0]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d1f8      	bne.n	8013abc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	68db      	ldr	r3, [r3, #12]
 8013ace:	899b      	ldrh	r3, [r3, #12]
 8013ad0:	b29b      	uxth	r3, r3
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	f7f9 f916 	bl	800cd04 <lwip_htons>
 8013ad8:	4603      	mov	r3, r0
 8013ada:	b2db      	uxtb	r3, r3
 8013adc:	f003 0307 	and.w	r3, r3, #7
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d116      	bne.n	8013b12 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	68db      	ldr	r3, [r3, #12]
 8013ae8:	899b      	ldrh	r3, [r3, #12]
 8013aea:	b29c      	uxth	r4, r3
 8013aec:	2001      	movs	r0, #1
 8013aee:	f7f9 f909 	bl	800cd04 <lwip_htons>
 8013af2:	4603      	mov	r3, r0
 8013af4:	461a      	mov	r2, r3
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	68db      	ldr	r3, [r3, #12]
 8013afa:	4322      	orrs	r2, r4
 8013afc:	b292      	uxth	r2, r2
 8013afe:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	8b5b      	ldrh	r3, [r3, #26]
 8013b04:	f043 0320 	orr.w	r3, r3, #32
 8013b08:	b29a      	uxth	r2, r3
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013b0e:	2300      	movs	r3, #0
 8013b10:	e004      	b.n	8013b1c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013b12:	2101      	movs	r1, #1
 8013b14:	6878      	ldr	r0, [r7, #4]
 8013b16:	f000 f80b 	bl	8013b30 <tcp_enqueue_flags>
 8013b1a:	4603      	mov	r3, r0
}
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	3714      	adds	r7, #20
 8013b20:	46bd      	mov	sp, r7
 8013b22:	bd90      	pop	{r4, r7, pc}
 8013b24:	0801be68 	.word	0x0801be68
 8013b28:	0801c270 	.word	0x0801c270
 8013b2c:	0801bebc 	.word	0x0801bebc

08013b30 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013b30:	b580      	push	{r7, lr}
 8013b32:	b08a      	sub	sp, #40	; 0x28
 8013b34:	af02      	add	r7, sp, #8
 8013b36:	6078      	str	r0, [r7, #4]
 8013b38:	460b      	mov	r3, r1
 8013b3a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013b40:	2300      	movs	r3, #0
 8013b42:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013b44:	78fb      	ldrb	r3, [r7, #3]
 8013b46:	f003 0303 	and.w	r3, r3, #3
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d106      	bne.n	8013b5c <tcp_enqueue_flags+0x2c>
 8013b4e:	4b67      	ldr	r3, [pc, #412]	; (8013cec <tcp_enqueue_flags+0x1bc>)
 8013b50:	f240 4211 	movw	r2, #1041	; 0x411
 8013b54:	4966      	ldr	r1, [pc, #408]	; (8013cf0 <tcp_enqueue_flags+0x1c0>)
 8013b56:	4867      	ldr	r0, [pc, #412]	; (8013cf4 <tcp_enqueue_flags+0x1c4>)
 8013b58:	f004 f972 	bl	8017e40 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d106      	bne.n	8013b70 <tcp_enqueue_flags+0x40>
 8013b62:	4b62      	ldr	r3, [pc, #392]	; (8013cec <tcp_enqueue_flags+0x1bc>)
 8013b64:	f240 4213 	movw	r2, #1043	; 0x413
 8013b68:	4963      	ldr	r1, [pc, #396]	; (8013cf8 <tcp_enqueue_flags+0x1c8>)
 8013b6a:	4862      	ldr	r0, [pc, #392]	; (8013cf4 <tcp_enqueue_flags+0x1c4>)
 8013b6c:	f004 f968 	bl	8017e40 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013b70:	78fb      	ldrb	r3, [r7, #3]
 8013b72:	f003 0302 	and.w	r3, r3, #2
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d001      	beq.n	8013b7e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013b7a:	2301      	movs	r3, #1
 8013b7c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013b7e:	7ffb      	ldrb	r3, [r7, #31]
 8013b80:	009b      	lsls	r3, r3, #2
 8013b82:	b2db      	uxtb	r3, r3
 8013b84:	f003 0304 	and.w	r3, r3, #4
 8013b88:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013b8a:	7dfb      	ldrb	r3, [r7, #23]
 8013b8c:	b29b      	uxth	r3, r3
 8013b8e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013b92:	4619      	mov	r1, r3
 8013b94:	2036      	movs	r0, #54	; 0x36
 8013b96:	f7fa fa5b 	bl	800e050 <pbuf_alloc>
 8013b9a:	6138      	str	r0, [r7, #16]
 8013b9c:	693b      	ldr	r3, [r7, #16]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d109      	bne.n	8013bb6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	8b5b      	ldrh	r3, [r3, #26]
 8013ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013baa:	b29a      	uxth	r2, r3
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013bb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013bb4:	e095      	b.n	8013ce2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013bb6:	693b      	ldr	r3, [r7, #16]
 8013bb8:	895a      	ldrh	r2, [r3, #10]
 8013bba:	7dfb      	ldrb	r3, [r7, #23]
 8013bbc:	b29b      	uxth	r3, r3
 8013bbe:	429a      	cmp	r2, r3
 8013bc0:	d206      	bcs.n	8013bd0 <tcp_enqueue_flags+0xa0>
 8013bc2:	4b4a      	ldr	r3, [pc, #296]	; (8013cec <tcp_enqueue_flags+0x1bc>)
 8013bc4:	f240 4239 	movw	r2, #1081	; 0x439
 8013bc8:	494c      	ldr	r1, [pc, #304]	; (8013cfc <tcp_enqueue_flags+0x1cc>)
 8013bca:	484a      	ldr	r0, [pc, #296]	; (8013cf4 <tcp_enqueue_flags+0x1c4>)
 8013bcc:	f004 f938 	bl	8017e40 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013bd4:	78fa      	ldrb	r2, [r7, #3]
 8013bd6:	7ffb      	ldrb	r3, [r7, #31]
 8013bd8:	9300      	str	r3, [sp, #0]
 8013bda:	460b      	mov	r3, r1
 8013bdc:	6939      	ldr	r1, [r7, #16]
 8013bde:	6878      	ldr	r0, [r7, #4]
 8013be0:	f7ff f918 	bl	8012e14 <tcp_create_segment>
 8013be4:	60f8      	str	r0, [r7, #12]
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d109      	bne.n	8013c00 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	8b5b      	ldrh	r3, [r3, #26]
 8013bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013bf4:	b29a      	uxth	r2, r3
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013bfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013bfe:	e070      	b.n	8013ce2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	68db      	ldr	r3, [r3, #12]
 8013c04:	f003 0303 	and.w	r3, r3, #3
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d006      	beq.n	8013c1a <tcp_enqueue_flags+0xea>
 8013c0c:	4b37      	ldr	r3, [pc, #220]	; (8013cec <tcp_enqueue_flags+0x1bc>)
 8013c0e:	f240 4242 	movw	r2, #1090	; 0x442
 8013c12:	493b      	ldr	r1, [pc, #236]	; (8013d00 <tcp_enqueue_flags+0x1d0>)
 8013c14:	4837      	ldr	r0, [pc, #220]	; (8013cf4 <tcp_enqueue_flags+0x1c4>)
 8013c16:	f004 f913 	bl	8017e40 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	891b      	ldrh	r3, [r3, #8]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d006      	beq.n	8013c30 <tcp_enqueue_flags+0x100>
 8013c22:	4b32      	ldr	r3, [pc, #200]	; (8013cec <tcp_enqueue_flags+0x1bc>)
 8013c24:	f240 4243 	movw	r2, #1091	; 0x443
 8013c28:	4936      	ldr	r1, [pc, #216]	; (8013d04 <tcp_enqueue_flags+0x1d4>)
 8013c2a:	4832      	ldr	r0, [pc, #200]	; (8013cf4 <tcp_enqueue_flags+0x1c4>)
 8013c2c:	f004 f908 	bl	8017e40 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d103      	bne.n	8013c40 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	68fa      	ldr	r2, [r7, #12]
 8013c3c:	66da      	str	r2, [r3, #108]	; 0x6c
 8013c3e:	e00d      	b.n	8013c5c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c44:	61bb      	str	r3, [r7, #24]
 8013c46:	e002      	b.n	8013c4e <tcp_enqueue_flags+0x11e>
 8013c48:	69bb      	ldr	r3, [r7, #24]
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	61bb      	str	r3, [r7, #24]
 8013c4e:	69bb      	ldr	r3, [r7, #24]
 8013c50:	681b      	ldr	r3, [r3, #0]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d1f8      	bne.n	8013c48 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013c56:	69bb      	ldr	r3, [r7, #24]
 8013c58:	68fa      	ldr	r2, [r7, #12]
 8013c5a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	2200      	movs	r2, #0
 8013c60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013c64:	78fb      	ldrb	r3, [r7, #3]
 8013c66:	f003 0302 	and.w	r3, r3, #2
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d104      	bne.n	8013c78 <tcp_enqueue_flags+0x148>
 8013c6e:	78fb      	ldrb	r3, [r7, #3]
 8013c70:	f003 0301 	and.w	r3, r3, #1
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d004      	beq.n	8013c82 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013c7c:	1c5a      	adds	r2, r3, #1
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013c82:	78fb      	ldrb	r3, [r7, #3]
 8013c84:	f003 0301 	and.w	r3, r3, #1
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d006      	beq.n	8013c9a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	8b5b      	ldrh	r3, [r3, #26]
 8013c90:	f043 0320 	orr.w	r3, r3, #32
 8013c94:	b29a      	uxth	r2, r3
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	685b      	ldr	r3, [r3, #4]
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	f7fa fd48 	bl	800e734 <pbuf_clen>
 8013ca4:	4603      	mov	r3, r0
 8013ca6:	461a      	mov	r2, r3
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013cae:	4413      	add	r3, r2
 8013cb0:	b29a      	uxth	r2, r3
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d00e      	beq.n	8013ce0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d10a      	bne.n	8013ce0 <tcp_enqueue_flags+0x1b0>
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d106      	bne.n	8013ce0 <tcp_enqueue_flags+0x1b0>
 8013cd2:	4b06      	ldr	r3, [pc, #24]	; (8013cec <tcp_enqueue_flags+0x1bc>)
 8013cd4:	f240 4265 	movw	r2, #1125	; 0x465
 8013cd8:	490b      	ldr	r1, [pc, #44]	; (8013d08 <tcp_enqueue_flags+0x1d8>)
 8013cda:	4806      	ldr	r0, [pc, #24]	; (8013cf4 <tcp_enqueue_flags+0x1c4>)
 8013cdc:	f004 f8b0 	bl	8017e40 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013ce0:	2300      	movs	r3, #0
}
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	3720      	adds	r7, #32
 8013ce6:	46bd      	mov	sp, r7
 8013ce8:	bd80      	pop	{r7, pc}
 8013cea:	bf00      	nop
 8013cec:	0801be68 	.word	0x0801be68
 8013cf0:	0801c28c 	.word	0x0801c28c
 8013cf4:	0801bebc 	.word	0x0801bebc
 8013cf8:	0801c2e4 	.word	0x0801c2e4
 8013cfc:	0801c304 	.word	0x0801c304
 8013d00:	0801c340 	.word	0x0801c340
 8013d04:	0801c358 	.word	0x0801c358
 8013d08:	0801c384 	.word	0x0801c384

08013d0c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013d0c:	b5b0      	push	{r4, r5, r7, lr}
 8013d0e:	b08a      	sub	sp, #40	; 0x28
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d106      	bne.n	8013d28 <tcp_output+0x1c>
 8013d1a:	4b9e      	ldr	r3, [pc, #632]	; (8013f94 <tcp_output+0x288>)
 8013d1c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013d20:	499d      	ldr	r1, [pc, #628]	; (8013f98 <tcp_output+0x28c>)
 8013d22:	489e      	ldr	r0, [pc, #632]	; (8013f9c <tcp_output+0x290>)
 8013d24:	f004 f88c 	bl	8017e40 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	7d1b      	ldrb	r3, [r3, #20]
 8013d2c:	2b01      	cmp	r3, #1
 8013d2e:	d106      	bne.n	8013d3e <tcp_output+0x32>
 8013d30:	4b98      	ldr	r3, [pc, #608]	; (8013f94 <tcp_output+0x288>)
 8013d32:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8013d36:	499a      	ldr	r1, [pc, #616]	; (8013fa0 <tcp_output+0x294>)
 8013d38:	4898      	ldr	r0, [pc, #608]	; (8013f9c <tcp_output+0x290>)
 8013d3a:	f004 f881 	bl	8017e40 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013d3e:	4b99      	ldr	r3, [pc, #612]	; (8013fa4 <tcp_output+0x298>)
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	687a      	ldr	r2, [r7, #4]
 8013d44:	429a      	cmp	r2, r3
 8013d46:	d101      	bne.n	8013d4c <tcp_output+0x40>
    return ERR_OK;
 8013d48:	2300      	movs	r3, #0
 8013d4a:	e1ce      	b.n	80140ea <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013d58:	4293      	cmp	r3, r2
 8013d5a:	bf28      	it	cs
 8013d5c:	4613      	movcs	r3, r2
 8013d5e:	b29b      	uxth	r3, r3
 8013d60:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d66:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d10b      	bne.n	8013d86 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	8b5b      	ldrh	r3, [r3, #26]
 8013d72:	f003 0302 	and.w	r3, r3, #2
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	f000 81aa 	beq.w	80140d0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8013d7c:	6878      	ldr	r0, [r7, #4]
 8013d7e:	f000 fdcb 	bl	8014918 <tcp_send_empty_ack>
 8013d82:	4603      	mov	r3, r0
 8013d84:	e1b1      	b.n	80140ea <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013d86:	6879      	ldr	r1, [r7, #4]
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	3304      	adds	r3, #4
 8013d8c:	461a      	mov	r2, r3
 8013d8e:	6878      	ldr	r0, [r7, #4]
 8013d90:	f7ff f824 	bl	8012ddc <tcp_route>
 8013d94:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013d96:	697b      	ldr	r3, [r7, #20]
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d102      	bne.n	8013da2 <tcp_output+0x96>
    return ERR_RTE;
 8013d9c:	f06f 0303 	mvn.w	r3, #3
 8013da0:	e1a3      	b.n	80140ea <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d003      	beq.n	8013db0 <tcp_output+0xa4>
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d111      	bne.n	8013dd4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013db0:	697b      	ldr	r3, [r7, #20]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d002      	beq.n	8013dbc <tcp_output+0xb0>
 8013db6:	697b      	ldr	r3, [r7, #20]
 8013db8:	3304      	adds	r3, #4
 8013dba:	e000      	b.n	8013dbe <tcp_output+0xb2>
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013dc0:	693b      	ldr	r3, [r7, #16]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d102      	bne.n	8013dcc <tcp_output+0xc0>
      return ERR_RTE;
 8013dc6:	f06f 0303 	mvn.w	r3, #3
 8013dca:	e18e      	b.n	80140ea <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013dcc:	693b      	ldr	r3, [r7, #16]
 8013dce:	681a      	ldr	r2, [r3, #0]
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dd6:	68db      	ldr	r3, [r3, #12]
 8013dd8:	685b      	ldr	r3, [r3, #4]
 8013dda:	4618      	mov	r0, r3
 8013ddc:	f7f8 ffa7 	bl	800cd2e <lwip_htonl>
 8013de0:	4602      	mov	r2, r0
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013de6:	1ad3      	subs	r3, r2, r3
 8013de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013dea:	8912      	ldrh	r2, [r2, #8]
 8013dec:	4413      	add	r3, r2
 8013dee:	69ba      	ldr	r2, [r7, #24]
 8013df0:	429a      	cmp	r2, r3
 8013df2:	d227      	bcs.n	8013e44 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013dfa:	461a      	mov	r2, r3
 8013dfc:	69bb      	ldr	r3, [r7, #24]
 8013dfe:	4293      	cmp	r3, r2
 8013e00:	d114      	bne.n	8013e2c <tcp_output+0x120>
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d110      	bne.n	8013e2c <tcp_output+0x120>
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d10b      	bne.n	8013e2c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	2200      	movs	r2, #0
 8013e18:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	2201      	movs	r2, #1
 8013e20:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	2200      	movs	r2, #0
 8013e28:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	8b5b      	ldrh	r3, [r3, #26]
 8013e30:	f003 0302 	and.w	r3, r3, #2
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	f000 814d 	beq.w	80140d4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8013e3a:	6878      	ldr	r0, [r7, #4]
 8013e3c:	f000 fd6c 	bl	8014918 <tcp_send_empty_ack>
 8013e40:	4603      	mov	r3, r0
 8013e42:	e152      	b.n	80140ea <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	2200      	movs	r2, #0
 8013e48:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e50:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013e52:	6a3b      	ldr	r3, [r7, #32]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	f000 811c 	beq.w	8014092 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8013e5a:	e002      	b.n	8013e62 <tcp_output+0x156>
 8013e5c:	6a3b      	ldr	r3, [r7, #32]
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	623b      	str	r3, [r7, #32]
 8013e62:	6a3b      	ldr	r3, [r7, #32]
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d1f8      	bne.n	8013e5c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013e6a:	e112      	b.n	8014092 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e6e:	68db      	ldr	r3, [r3, #12]
 8013e70:	899b      	ldrh	r3, [r3, #12]
 8013e72:	b29b      	uxth	r3, r3
 8013e74:	4618      	mov	r0, r3
 8013e76:	f7f8 ff45 	bl	800cd04 <lwip_htons>
 8013e7a:	4603      	mov	r3, r0
 8013e7c:	b2db      	uxtb	r3, r3
 8013e7e:	f003 0304 	and.w	r3, r3, #4
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d006      	beq.n	8013e94 <tcp_output+0x188>
 8013e86:	4b43      	ldr	r3, [pc, #268]	; (8013f94 <tcp_output+0x288>)
 8013e88:	f240 5236 	movw	r2, #1334	; 0x536
 8013e8c:	4946      	ldr	r1, [pc, #280]	; (8013fa8 <tcp_output+0x29c>)
 8013e8e:	4843      	ldr	r0, [pc, #268]	; (8013f9c <tcp_output+0x290>)
 8013e90:	f003 ffd6 	bl	8017e40 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d01f      	beq.n	8013edc <tcp_output+0x1d0>
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	8b5b      	ldrh	r3, [r3, #26]
 8013ea0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d119      	bne.n	8013edc <tcp_output+0x1d0>
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d00b      	beq.n	8013ec8 <tcp_output+0x1bc>
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d110      	bne.n	8013edc <tcp_output+0x1d0>
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ebe:	891a      	ldrh	r2, [r3, #8]
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013ec4:	429a      	cmp	r2, r3
 8013ec6:	d209      	bcs.n	8013edc <tcp_output+0x1d0>
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d004      	beq.n	8013edc <tcp_output+0x1d0>
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013ed8:	2b08      	cmp	r3, #8
 8013eda:	d901      	bls.n	8013ee0 <tcp_output+0x1d4>
 8013edc:	2301      	movs	r3, #1
 8013ede:	e000      	b.n	8013ee2 <tcp_output+0x1d6>
 8013ee0:	2300      	movs	r3, #0
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d106      	bne.n	8013ef4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	8b5b      	ldrh	r3, [r3, #26]
 8013eea:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	f000 80e4 	beq.w	80140bc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	7d1b      	ldrb	r3, [r3, #20]
 8013ef8:	2b02      	cmp	r3, #2
 8013efa:	d00d      	beq.n	8013f18 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013efe:	68db      	ldr	r3, [r3, #12]
 8013f00:	899b      	ldrh	r3, [r3, #12]
 8013f02:	b29c      	uxth	r4, r3
 8013f04:	2010      	movs	r0, #16
 8013f06:	f7f8 fefd 	bl	800cd04 <lwip_htons>
 8013f0a:	4603      	mov	r3, r0
 8013f0c:	461a      	mov	r2, r3
 8013f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f10:	68db      	ldr	r3, [r3, #12]
 8013f12:	4322      	orrs	r2, r4
 8013f14:	b292      	uxth	r2, r2
 8013f16:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013f18:	697a      	ldr	r2, [r7, #20]
 8013f1a:	6879      	ldr	r1, [r7, #4]
 8013f1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013f1e:	f000 f909 	bl	8014134 <tcp_output_segment>
 8013f22:	4603      	mov	r3, r0
 8013f24:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8013f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d009      	beq.n	8013f42 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	8b5b      	ldrh	r3, [r3, #26]
 8013f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f36:	b29a      	uxth	r2, r3
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	835a      	strh	r2, [r3, #26]
      return err;
 8013f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f40:	e0d3      	b.n	80140ea <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8013f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f44:	681a      	ldr	r2, [r3, #0]
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	7d1b      	ldrb	r3, [r3, #20]
 8013f4e:	2b02      	cmp	r3, #2
 8013f50:	d006      	beq.n	8013f60 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	8b5b      	ldrh	r3, [r3, #26]
 8013f56:	f023 0303 	bic.w	r3, r3, #3
 8013f5a:	b29a      	uxth	r2, r3
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f62:	68db      	ldr	r3, [r3, #12]
 8013f64:	685b      	ldr	r3, [r3, #4]
 8013f66:	4618      	mov	r0, r3
 8013f68:	f7f8 fee1 	bl	800cd2e <lwip_htonl>
 8013f6c:	4604      	mov	r4, r0
 8013f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f70:	891b      	ldrh	r3, [r3, #8]
 8013f72:	461d      	mov	r5, r3
 8013f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f76:	68db      	ldr	r3, [r3, #12]
 8013f78:	899b      	ldrh	r3, [r3, #12]
 8013f7a:	b29b      	uxth	r3, r3
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	f7f8 fec1 	bl	800cd04 <lwip_htons>
 8013f82:	4603      	mov	r3, r0
 8013f84:	b2db      	uxtb	r3, r3
 8013f86:	f003 0303 	and.w	r3, r3, #3
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d00e      	beq.n	8013fac <tcp_output+0x2a0>
 8013f8e:	2301      	movs	r3, #1
 8013f90:	e00d      	b.n	8013fae <tcp_output+0x2a2>
 8013f92:	bf00      	nop
 8013f94:	0801be68 	.word	0x0801be68
 8013f98:	0801c3ac 	.word	0x0801c3ac
 8013f9c:	0801bebc 	.word	0x0801bebc
 8013fa0:	0801c3c4 	.word	0x0801c3c4
 8013fa4:	20018bb8 	.word	0x20018bb8
 8013fa8:	0801c3ec 	.word	0x0801c3ec
 8013fac:	2300      	movs	r3, #0
 8013fae:	442b      	add	r3, r5
 8013fb0:	4423      	add	r3, r4
 8013fb2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013fb8:	68bb      	ldr	r3, [r7, #8]
 8013fba:	1ad3      	subs	r3, r2, r3
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	da02      	bge.n	8013fc6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	68ba      	ldr	r2, [r7, #8]
 8013fc4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fc8:	891b      	ldrh	r3, [r3, #8]
 8013fca:	461c      	mov	r4, r3
 8013fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fce:	68db      	ldr	r3, [r3, #12]
 8013fd0:	899b      	ldrh	r3, [r3, #12]
 8013fd2:	b29b      	uxth	r3, r3
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	f7f8 fe95 	bl	800cd04 <lwip_htons>
 8013fda:	4603      	mov	r3, r0
 8013fdc:	b2db      	uxtb	r3, r3
 8013fde:	f003 0303 	and.w	r3, r3, #3
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d001      	beq.n	8013fea <tcp_output+0x2de>
 8013fe6:	2301      	movs	r3, #1
 8013fe8:	e000      	b.n	8013fec <tcp_output+0x2e0>
 8013fea:	2300      	movs	r3, #0
 8013fec:	4423      	add	r3, r4
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d049      	beq.n	8014086 <tcp_output+0x37a>
      seg->next = NULL;
 8013ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ff4:	2200      	movs	r2, #0
 8013ff6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d105      	bne.n	801400c <tcp_output+0x300>
        pcb->unacked = seg;
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014004:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014008:	623b      	str	r3, [r7, #32]
 801400a:	e03f      	b.n	801408c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801400e:	68db      	ldr	r3, [r3, #12]
 8014010:	685b      	ldr	r3, [r3, #4]
 8014012:	4618      	mov	r0, r3
 8014014:	f7f8 fe8b 	bl	800cd2e <lwip_htonl>
 8014018:	4604      	mov	r4, r0
 801401a:	6a3b      	ldr	r3, [r7, #32]
 801401c:	68db      	ldr	r3, [r3, #12]
 801401e:	685b      	ldr	r3, [r3, #4]
 8014020:	4618      	mov	r0, r3
 8014022:	f7f8 fe84 	bl	800cd2e <lwip_htonl>
 8014026:	4603      	mov	r3, r0
 8014028:	1ae3      	subs	r3, r4, r3
 801402a:	2b00      	cmp	r3, #0
 801402c:	da24      	bge.n	8014078 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	3370      	adds	r3, #112	; 0x70
 8014032:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014034:	e002      	b.n	801403c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014036:	69fb      	ldr	r3, [r7, #28]
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801403c:	69fb      	ldr	r3, [r7, #28]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d011      	beq.n	8014068 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014044:	69fb      	ldr	r3, [r7, #28]
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	68db      	ldr	r3, [r3, #12]
 801404a:	685b      	ldr	r3, [r3, #4]
 801404c:	4618      	mov	r0, r3
 801404e:	f7f8 fe6e 	bl	800cd2e <lwip_htonl>
 8014052:	4604      	mov	r4, r0
 8014054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014056:	68db      	ldr	r3, [r3, #12]
 8014058:	685b      	ldr	r3, [r3, #4]
 801405a:	4618      	mov	r0, r3
 801405c:	f7f8 fe67 	bl	800cd2e <lwip_htonl>
 8014060:	4603      	mov	r3, r0
 8014062:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014064:	2b00      	cmp	r3, #0
 8014066:	dbe6      	blt.n	8014036 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014068:	69fb      	ldr	r3, [r7, #28]
 801406a:	681a      	ldr	r2, [r3, #0]
 801406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801406e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014070:	69fb      	ldr	r3, [r7, #28]
 8014072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014074:	601a      	str	r2, [r3, #0]
 8014076:	e009      	b.n	801408c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014078:	6a3b      	ldr	r3, [r7, #32]
 801407a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801407c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801407e:	6a3b      	ldr	r3, [r7, #32]
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	623b      	str	r3, [r7, #32]
 8014084:	e002      	b.n	801408c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014086:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014088:	f7fb feff 	bl	800fe8a <tcp_seg_free>
    }
    seg = pcb->unsent;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014090:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014094:	2b00      	cmp	r3, #0
 8014096:	d012      	beq.n	80140be <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801409a:	68db      	ldr	r3, [r3, #12]
 801409c:	685b      	ldr	r3, [r3, #4]
 801409e:	4618      	mov	r0, r3
 80140a0:	f7f8 fe45 	bl	800cd2e <lwip_htonl>
 80140a4:	4602      	mov	r2, r0
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80140aa:	1ad3      	subs	r3, r2, r3
 80140ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80140ae:	8912      	ldrh	r2, [r2, #8]
 80140b0:	4413      	add	r3, r2
  while (seg != NULL &&
 80140b2:	69ba      	ldr	r2, [r7, #24]
 80140b4:	429a      	cmp	r2, r3
 80140b6:	f4bf aed9 	bcs.w	8013e6c <tcp_output+0x160>
 80140ba:	e000      	b.n	80140be <tcp_output+0x3b2>
      break;
 80140bc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d108      	bne.n	80140d8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	2200      	movs	r2, #0
 80140ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80140ce:	e004      	b.n	80140da <tcp_output+0x3ce>
    goto output_done;
 80140d0:	bf00      	nop
 80140d2:	e002      	b.n	80140da <tcp_output+0x3ce>
    goto output_done;
 80140d4:	bf00      	nop
 80140d6:	e000      	b.n	80140da <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80140d8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	8b5b      	ldrh	r3, [r3, #26]
 80140de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80140e2:	b29a      	uxth	r2, r3
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80140e8:	2300      	movs	r3, #0
}
 80140ea:	4618      	mov	r0, r3
 80140ec:	3728      	adds	r7, #40	; 0x28
 80140ee:	46bd      	mov	sp, r7
 80140f0:	bdb0      	pop	{r4, r5, r7, pc}
 80140f2:	bf00      	nop

080140f4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b082      	sub	sp, #8
 80140f8:	af00      	add	r7, sp, #0
 80140fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d106      	bne.n	8014110 <tcp_output_segment_busy+0x1c>
 8014102:	4b09      	ldr	r3, [pc, #36]	; (8014128 <tcp_output_segment_busy+0x34>)
 8014104:	f240 529a 	movw	r2, #1434	; 0x59a
 8014108:	4908      	ldr	r1, [pc, #32]	; (801412c <tcp_output_segment_busy+0x38>)
 801410a:	4809      	ldr	r0, [pc, #36]	; (8014130 <tcp_output_segment_busy+0x3c>)
 801410c:	f003 fe98 	bl	8017e40 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	685b      	ldr	r3, [r3, #4]
 8014114:	7b9b      	ldrb	r3, [r3, #14]
 8014116:	2b01      	cmp	r3, #1
 8014118:	d001      	beq.n	801411e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801411a:	2301      	movs	r3, #1
 801411c:	e000      	b.n	8014120 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801411e:	2300      	movs	r3, #0
}
 8014120:	4618      	mov	r0, r3
 8014122:	3708      	adds	r7, #8
 8014124:	46bd      	mov	sp, r7
 8014126:	bd80      	pop	{r7, pc}
 8014128:	0801be68 	.word	0x0801be68
 801412c:	0801c404 	.word	0x0801c404
 8014130:	0801bebc 	.word	0x0801bebc

08014134 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014134:	b5b0      	push	{r4, r5, r7, lr}
 8014136:	b08c      	sub	sp, #48	; 0x30
 8014138:	af04      	add	r7, sp, #16
 801413a:	60f8      	str	r0, [r7, #12]
 801413c:	60b9      	str	r1, [r7, #8]
 801413e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	2b00      	cmp	r3, #0
 8014144:	d106      	bne.n	8014154 <tcp_output_segment+0x20>
 8014146:	4b63      	ldr	r3, [pc, #396]	; (80142d4 <tcp_output_segment+0x1a0>)
 8014148:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801414c:	4962      	ldr	r1, [pc, #392]	; (80142d8 <tcp_output_segment+0x1a4>)
 801414e:	4863      	ldr	r0, [pc, #396]	; (80142dc <tcp_output_segment+0x1a8>)
 8014150:	f003 fe76 	bl	8017e40 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014154:	68bb      	ldr	r3, [r7, #8]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d106      	bne.n	8014168 <tcp_output_segment+0x34>
 801415a:	4b5e      	ldr	r3, [pc, #376]	; (80142d4 <tcp_output_segment+0x1a0>)
 801415c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014160:	495f      	ldr	r1, [pc, #380]	; (80142e0 <tcp_output_segment+0x1ac>)
 8014162:	485e      	ldr	r0, [pc, #376]	; (80142dc <tcp_output_segment+0x1a8>)
 8014164:	f003 fe6c 	bl	8017e40 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d106      	bne.n	801417c <tcp_output_segment+0x48>
 801416e:	4b59      	ldr	r3, [pc, #356]	; (80142d4 <tcp_output_segment+0x1a0>)
 8014170:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014174:	495b      	ldr	r1, [pc, #364]	; (80142e4 <tcp_output_segment+0x1b0>)
 8014176:	4859      	ldr	r0, [pc, #356]	; (80142dc <tcp_output_segment+0x1a8>)
 8014178:	f003 fe62 	bl	8017e40 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801417c:	68f8      	ldr	r0, [r7, #12]
 801417e:	f7ff ffb9 	bl	80140f4 <tcp_output_segment_busy>
 8014182:	4603      	mov	r3, r0
 8014184:	2b00      	cmp	r3, #0
 8014186:	d001      	beq.n	801418c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014188:	2300      	movs	r3, #0
 801418a:	e09f      	b.n	80142cc <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801418c:	68bb      	ldr	r3, [r7, #8]
 801418e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	68dc      	ldr	r4, [r3, #12]
 8014194:	4610      	mov	r0, r2
 8014196:	f7f8 fdca 	bl	800cd2e <lwip_htonl>
 801419a:	4603      	mov	r3, r0
 801419c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801419e:	68bb      	ldr	r3, [r7, #8]
 80141a0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	68dc      	ldr	r4, [r3, #12]
 80141a6:	4610      	mov	r0, r2
 80141a8:	f7f8 fdac 	bl	800cd04 <lwip_htons>
 80141ac:	4603      	mov	r3, r0
 80141ae:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80141b0:	68bb      	ldr	r3, [r7, #8]
 80141b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141b4:	68ba      	ldr	r2, [r7, #8]
 80141b6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80141b8:	441a      	add	r2, r3
 80141ba:	68bb      	ldr	r3, [r7, #8]
 80141bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	68db      	ldr	r3, [r3, #12]
 80141c2:	3314      	adds	r3, #20
 80141c4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	7a9b      	ldrb	r3, [r3, #10]
 80141ca:	f003 0301 	and.w	r3, r3, #1
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d015      	beq.n	80141fe <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80141d2:	68bb      	ldr	r3, [r7, #8]
 80141d4:	3304      	adds	r3, #4
 80141d6:	461a      	mov	r2, r3
 80141d8:	6879      	ldr	r1, [r7, #4]
 80141da:	f44f 7006 	mov.w	r0, #536	; 0x218
 80141de:	f7fc fa37 	bl	8010650 <tcp_eff_send_mss_netif>
 80141e2:	4603      	mov	r3, r0
 80141e4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80141e6:	8b7b      	ldrh	r3, [r7, #26]
 80141e8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80141ec:	4618      	mov	r0, r3
 80141ee:	f7f8 fd9e 	bl	800cd2e <lwip_htonl>
 80141f2:	4602      	mov	r2, r0
 80141f4:	69fb      	ldr	r3, [r7, #28]
 80141f6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80141f8:	69fb      	ldr	r3, [r7, #28]
 80141fa:	3304      	adds	r3, #4
 80141fc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80141fe:	68bb      	ldr	r3, [r7, #8]
 8014200:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014204:	2b00      	cmp	r3, #0
 8014206:	da02      	bge.n	801420e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014208:	68bb      	ldr	r3, [r7, #8]
 801420a:	2200      	movs	r2, #0
 801420c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801420e:	68bb      	ldr	r3, [r7, #8]
 8014210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014212:	2b00      	cmp	r3, #0
 8014214:	d10c      	bne.n	8014230 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8014216:	4b34      	ldr	r3, [pc, #208]	; (80142e8 <tcp_output_segment+0x1b4>)
 8014218:	681a      	ldr	r2, [r3, #0]
 801421a:	68bb      	ldr	r3, [r7, #8]
 801421c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	68db      	ldr	r3, [r3, #12]
 8014222:	685b      	ldr	r3, [r3, #4]
 8014224:	4618      	mov	r0, r3
 8014226:	f7f8 fd82 	bl	800cd2e <lwip_htonl>
 801422a:	4602      	mov	r2, r0
 801422c:	68bb      	ldr	r3, [r7, #8]
 801422e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	68da      	ldr	r2, [r3, #12]
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	685b      	ldr	r3, [r3, #4]
 8014238:	685b      	ldr	r3, [r3, #4]
 801423a:	1ad3      	subs	r3, r2, r3
 801423c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801423e:	68fb      	ldr	r3, [r7, #12]
 8014240:	685b      	ldr	r3, [r3, #4]
 8014242:	8959      	ldrh	r1, [r3, #10]
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	685b      	ldr	r3, [r3, #4]
 8014248:	8b3a      	ldrh	r2, [r7, #24]
 801424a:	1a8a      	subs	r2, r1, r2
 801424c:	b292      	uxth	r2, r2
 801424e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	685b      	ldr	r3, [r3, #4]
 8014254:	8919      	ldrh	r1, [r3, #8]
 8014256:	68fb      	ldr	r3, [r7, #12]
 8014258:	685b      	ldr	r3, [r3, #4]
 801425a:	8b3a      	ldrh	r2, [r7, #24]
 801425c:	1a8a      	subs	r2, r1, r2
 801425e:	b292      	uxth	r2, r2
 8014260:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	685b      	ldr	r3, [r3, #4]
 8014266:	68fa      	ldr	r2, [r7, #12]
 8014268:	68d2      	ldr	r2, [r2, #12]
 801426a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	68db      	ldr	r3, [r3, #12]
 8014270:	2200      	movs	r2, #0
 8014272:	741a      	strb	r2, [r3, #16]
 8014274:	2200      	movs	r2, #0
 8014276:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	68db      	ldr	r3, [r3, #12]
 801427c:	f103 0214 	add.w	r2, r3, #20
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	7a9b      	ldrb	r3, [r3, #10]
 8014284:	009b      	lsls	r3, r3, #2
 8014286:	f003 0304 	and.w	r3, r3, #4
 801428a:	4413      	add	r3, r2
 801428c:	69fa      	ldr	r2, [r7, #28]
 801428e:	429a      	cmp	r2, r3
 8014290:	d006      	beq.n	80142a0 <tcp_output_segment+0x16c>
 8014292:	4b10      	ldr	r3, [pc, #64]	; (80142d4 <tcp_output_segment+0x1a0>)
 8014294:	f240 621c 	movw	r2, #1564	; 0x61c
 8014298:	4914      	ldr	r1, [pc, #80]	; (80142ec <tcp_output_segment+0x1b8>)
 801429a:	4810      	ldr	r0, [pc, #64]	; (80142dc <tcp_output_segment+0x1a8>)
 801429c:	f003 fdd0 	bl	8017e40 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80142a0:	68fb      	ldr	r3, [r7, #12]
 80142a2:	6858      	ldr	r0, [r3, #4]
 80142a4:	68b9      	ldr	r1, [r7, #8]
 80142a6:	68bb      	ldr	r3, [r7, #8]
 80142a8:	1d1c      	adds	r4, r3, #4
 80142aa:	68bb      	ldr	r3, [r7, #8]
 80142ac:	7add      	ldrb	r5, [r3, #11]
 80142ae:	68bb      	ldr	r3, [r7, #8]
 80142b0:	7a9b      	ldrb	r3, [r3, #10]
 80142b2:	687a      	ldr	r2, [r7, #4]
 80142b4:	9202      	str	r2, [sp, #8]
 80142b6:	2206      	movs	r2, #6
 80142b8:	9201      	str	r2, [sp, #4]
 80142ba:	9300      	str	r3, [sp, #0]
 80142bc:	462b      	mov	r3, r5
 80142be:	4622      	mov	r2, r4
 80142c0:	f002 fa66 	bl	8016790 <ip4_output_if>
 80142c4:	4603      	mov	r3, r0
 80142c6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80142c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80142cc:	4618      	mov	r0, r3
 80142ce:	3720      	adds	r7, #32
 80142d0:	46bd      	mov	sp, r7
 80142d2:	bdb0      	pop	{r4, r5, r7, pc}
 80142d4:	0801be68 	.word	0x0801be68
 80142d8:	0801c42c 	.word	0x0801c42c
 80142dc:	0801bebc 	.word	0x0801bebc
 80142e0:	0801c44c 	.word	0x0801c44c
 80142e4:	0801c46c 	.word	0x0801c46c
 80142e8:	20018ba8 	.word	0x20018ba8
 80142ec:	0801c490 	.word	0x0801c490

080142f0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80142f0:	b5b0      	push	{r4, r5, r7, lr}
 80142f2:	b084      	sub	sp, #16
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	d106      	bne.n	801430c <tcp_rexmit_rto_prepare+0x1c>
 80142fe:	4b31      	ldr	r3, [pc, #196]	; (80143c4 <tcp_rexmit_rto_prepare+0xd4>)
 8014300:	f240 6263 	movw	r2, #1635	; 0x663
 8014304:	4930      	ldr	r1, [pc, #192]	; (80143c8 <tcp_rexmit_rto_prepare+0xd8>)
 8014306:	4831      	ldr	r0, [pc, #196]	; (80143cc <tcp_rexmit_rto_prepare+0xdc>)
 8014308:	f003 fd9a 	bl	8017e40 <iprintf>

  if (pcb->unacked == NULL) {
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014310:	2b00      	cmp	r3, #0
 8014312:	d102      	bne.n	801431a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014314:	f06f 0305 	mvn.w	r3, #5
 8014318:	e050      	b.n	80143bc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801431e:	60fb      	str	r3, [r7, #12]
 8014320:	e00b      	b.n	801433a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8014322:	68f8      	ldr	r0, [r7, #12]
 8014324:	f7ff fee6 	bl	80140f4 <tcp_output_segment_busy>
 8014328:	4603      	mov	r3, r0
 801432a:	2b00      	cmp	r3, #0
 801432c:	d002      	beq.n	8014334 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801432e:	f06f 0305 	mvn.w	r3, #5
 8014332:	e043      	b.n	80143bc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	60fb      	str	r3, [r7, #12]
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	2b00      	cmp	r3, #0
 8014340:	d1ef      	bne.n	8014322 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8014342:	68f8      	ldr	r0, [r7, #12]
 8014344:	f7ff fed6 	bl	80140f4 <tcp_output_segment_busy>
 8014348:	4603      	mov	r3, r0
 801434a:	2b00      	cmp	r3, #0
 801434c:	d002      	beq.n	8014354 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801434e:	f06f 0305 	mvn.w	r3, #5
 8014352:	e033      	b.n	80143bc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	2200      	movs	r2, #0
 8014368:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	8b5b      	ldrh	r3, [r3, #26]
 801436e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014372:	b29a      	uxth	r2, r3
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	68db      	ldr	r3, [r3, #12]
 801437c:	685b      	ldr	r3, [r3, #4]
 801437e:	4618      	mov	r0, r3
 8014380:	f7f8 fcd5 	bl	800cd2e <lwip_htonl>
 8014384:	4604      	mov	r4, r0
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	891b      	ldrh	r3, [r3, #8]
 801438a:	461d      	mov	r5, r3
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	68db      	ldr	r3, [r3, #12]
 8014390:	899b      	ldrh	r3, [r3, #12]
 8014392:	b29b      	uxth	r3, r3
 8014394:	4618      	mov	r0, r3
 8014396:	f7f8 fcb5 	bl	800cd04 <lwip_htons>
 801439a:	4603      	mov	r3, r0
 801439c:	b2db      	uxtb	r3, r3
 801439e:	f003 0303 	and.w	r3, r3, #3
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d001      	beq.n	80143aa <tcp_rexmit_rto_prepare+0xba>
 80143a6:	2301      	movs	r3, #1
 80143a8:	e000      	b.n	80143ac <tcp_rexmit_rto_prepare+0xbc>
 80143aa:	2300      	movs	r3, #0
 80143ac:	442b      	add	r3, r5
 80143ae:	18e2      	adds	r2, r4, r3
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	2200      	movs	r2, #0
 80143b8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80143ba:	2300      	movs	r3, #0
}
 80143bc:	4618      	mov	r0, r3
 80143be:	3710      	adds	r7, #16
 80143c0:	46bd      	mov	sp, r7
 80143c2:	bdb0      	pop	{r4, r5, r7, pc}
 80143c4:	0801be68 	.word	0x0801be68
 80143c8:	0801c4a4 	.word	0x0801c4a4
 80143cc:	0801bebc 	.word	0x0801bebc

080143d0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80143d0:	b580      	push	{r7, lr}
 80143d2:	b082      	sub	sp, #8
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d106      	bne.n	80143ec <tcp_rexmit_rto_commit+0x1c>
 80143de:	4b0d      	ldr	r3, [pc, #52]	; (8014414 <tcp_rexmit_rto_commit+0x44>)
 80143e0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80143e4:	490c      	ldr	r1, [pc, #48]	; (8014418 <tcp_rexmit_rto_commit+0x48>)
 80143e6:	480d      	ldr	r0, [pc, #52]	; (801441c <tcp_rexmit_rto_commit+0x4c>)
 80143e8:	f003 fd2a 	bl	8017e40 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80143f2:	2bff      	cmp	r3, #255	; 0xff
 80143f4:	d007      	beq.n	8014406 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80143fc:	3301      	adds	r3, #1
 80143fe:	b2da      	uxtb	r2, r3
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8014406:	6878      	ldr	r0, [r7, #4]
 8014408:	f7ff fc80 	bl	8013d0c <tcp_output>
}
 801440c:	bf00      	nop
 801440e:	3708      	adds	r7, #8
 8014410:	46bd      	mov	sp, r7
 8014412:	bd80      	pop	{r7, pc}
 8014414:	0801be68 	.word	0x0801be68
 8014418:	0801c4c8 	.word	0x0801c4c8
 801441c:	0801bebc 	.word	0x0801bebc

08014420 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b082      	sub	sp, #8
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	2b00      	cmp	r3, #0
 801442c:	d106      	bne.n	801443c <tcp_rexmit_rto+0x1c>
 801442e:	4b0a      	ldr	r3, [pc, #40]	; (8014458 <tcp_rexmit_rto+0x38>)
 8014430:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8014434:	4909      	ldr	r1, [pc, #36]	; (801445c <tcp_rexmit_rto+0x3c>)
 8014436:	480a      	ldr	r0, [pc, #40]	; (8014460 <tcp_rexmit_rto+0x40>)
 8014438:	f003 fd02 	bl	8017e40 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801443c:	6878      	ldr	r0, [r7, #4]
 801443e:	f7ff ff57 	bl	80142f0 <tcp_rexmit_rto_prepare>
 8014442:	4603      	mov	r3, r0
 8014444:	2b00      	cmp	r3, #0
 8014446:	d102      	bne.n	801444e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8014448:	6878      	ldr	r0, [r7, #4]
 801444a:	f7ff ffc1 	bl	80143d0 <tcp_rexmit_rto_commit>
  }
}
 801444e:	bf00      	nop
 8014450:	3708      	adds	r7, #8
 8014452:	46bd      	mov	sp, r7
 8014454:	bd80      	pop	{r7, pc}
 8014456:	bf00      	nop
 8014458:	0801be68 	.word	0x0801be68
 801445c:	0801c4ec 	.word	0x0801c4ec
 8014460:	0801bebc 	.word	0x0801bebc

08014464 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014464:	b590      	push	{r4, r7, lr}
 8014466:	b085      	sub	sp, #20
 8014468:	af00      	add	r7, sp, #0
 801446a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d106      	bne.n	8014480 <tcp_rexmit+0x1c>
 8014472:	4b2f      	ldr	r3, [pc, #188]	; (8014530 <tcp_rexmit+0xcc>)
 8014474:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8014478:	492e      	ldr	r1, [pc, #184]	; (8014534 <tcp_rexmit+0xd0>)
 801447a:	482f      	ldr	r0, [pc, #188]	; (8014538 <tcp_rexmit+0xd4>)
 801447c:	f003 fce0 	bl	8017e40 <iprintf>

  if (pcb->unacked == NULL) {
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014484:	2b00      	cmp	r3, #0
 8014486:	d102      	bne.n	801448e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014488:	f06f 0305 	mvn.w	r3, #5
 801448c:	e04c      	b.n	8014528 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014492:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014494:	68b8      	ldr	r0, [r7, #8]
 8014496:	f7ff fe2d 	bl	80140f4 <tcp_output_segment_busy>
 801449a:	4603      	mov	r3, r0
 801449c:	2b00      	cmp	r3, #0
 801449e:	d002      	beq.n	80144a6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80144a0:	f06f 0305 	mvn.w	r3, #5
 80144a4:	e040      	b.n	8014528 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80144a6:	68bb      	ldr	r3, [r7, #8]
 80144a8:	681a      	ldr	r2, [r3, #0]
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	336c      	adds	r3, #108	; 0x6c
 80144b2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80144b4:	e002      	b.n	80144bc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d011      	beq.n	80144e8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	681b      	ldr	r3, [r3, #0]
 80144c8:	68db      	ldr	r3, [r3, #12]
 80144ca:	685b      	ldr	r3, [r3, #4]
 80144cc:	4618      	mov	r0, r3
 80144ce:	f7f8 fc2e 	bl	800cd2e <lwip_htonl>
 80144d2:	4604      	mov	r4, r0
 80144d4:	68bb      	ldr	r3, [r7, #8]
 80144d6:	68db      	ldr	r3, [r3, #12]
 80144d8:	685b      	ldr	r3, [r3, #4]
 80144da:	4618      	mov	r0, r3
 80144dc:	f7f8 fc27 	bl	800cd2e <lwip_htonl>
 80144e0:	4603      	mov	r3, r0
 80144e2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	dbe6      	blt.n	80144b6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	681a      	ldr	r2, [r3, #0]
 80144ec:	68bb      	ldr	r3, [r7, #8]
 80144ee:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	68ba      	ldr	r2, [r7, #8]
 80144f4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80144f6:	68bb      	ldr	r3, [r7, #8]
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d103      	bne.n	8014506 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	2200      	movs	r2, #0
 8014502:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801450c:	2bff      	cmp	r3, #255	; 0xff
 801450e:	d007      	beq.n	8014520 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014516:	3301      	adds	r3, #1
 8014518:	b2da      	uxtb	r2, r3
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	2200      	movs	r2, #0
 8014524:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8014526:	2300      	movs	r3, #0
}
 8014528:	4618      	mov	r0, r3
 801452a:	3714      	adds	r7, #20
 801452c:	46bd      	mov	sp, r7
 801452e:	bd90      	pop	{r4, r7, pc}
 8014530:	0801be68 	.word	0x0801be68
 8014534:	0801c508 	.word	0x0801c508
 8014538:	0801bebc 	.word	0x0801bebc

0801453c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801453c:	b580      	push	{r7, lr}
 801453e:	b082      	sub	sp, #8
 8014540:	af00      	add	r7, sp, #0
 8014542:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d106      	bne.n	8014558 <tcp_rexmit_fast+0x1c>
 801454a:	4b2a      	ldr	r3, [pc, #168]	; (80145f4 <tcp_rexmit_fast+0xb8>)
 801454c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8014550:	4929      	ldr	r1, [pc, #164]	; (80145f8 <tcp_rexmit_fast+0xbc>)
 8014552:	482a      	ldr	r0, [pc, #168]	; (80145fc <tcp_rexmit_fast+0xc0>)
 8014554:	f003 fc74 	bl	8017e40 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801455c:	2b00      	cmp	r3, #0
 801455e:	d045      	beq.n	80145ec <tcp_rexmit_fast+0xb0>
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	8b5b      	ldrh	r3, [r3, #26]
 8014564:	f003 0304 	and.w	r3, r3, #4
 8014568:	2b00      	cmp	r3, #0
 801456a:	d13f      	bne.n	80145ec <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801456c:	6878      	ldr	r0, [r7, #4]
 801456e:	f7ff ff79 	bl	8014464 <tcp_rexmit>
 8014572:	4603      	mov	r3, r0
 8014574:	2b00      	cmp	r3, #0
 8014576:	d139      	bne.n	80145ec <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014584:	4293      	cmp	r3, r2
 8014586:	bf28      	it	cs
 8014588:	4613      	movcs	r3, r2
 801458a:	b29b      	uxth	r3, r3
 801458c:	2b00      	cmp	r3, #0
 801458e:	da00      	bge.n	8014592 <tcp_rexmit_fast+0x56>
 8014590:	3301      	adds	r3, #1
 8014592:	105b      	asrs	r3, r3, #1
 8014594:	b29a      	uxth	r2, r3
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80145a2:	461a      	mov	r2, r3
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80145a8:	005b      	lsls	r3, r3, #1
 80145aa:	429a      	cmp	r2, r3
 80145ac:	d206      	bcs.n	80145bc <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80145b2:	005b      	lsls	r3, r3, #1
 80145b4:	b29a      	uxth	r2, r3
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80145c6:	4619      	mov	r1, r3
 80145c8:	0049      	lsls	r1, r1, #1
 80145ca:	440b      	add	r3, r1
 80145cc:	b29b      	uxth	r3, r3
 80145ce:	4413      	add	r3, r2
 80145d0:	b29a      	uxth	r2, r3
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	8b5b      	ldrh	r3, [r3, #26]
 80145dc:	f043 0304 	orr.w	r3, r3, #4
 80145e0:	b29a      	uxth	r2, r3
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	2200      	movs	r2, #0
 80145ea:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80145ec:	bf00      	nop
 80145ee:	3708      	adds	r7, #8
 80145f0:	46bd      	mov	sp, r7
 80145f2:	bd80      	pop	{r7, pc}
 80145f4:	0801be68 	.word	0x0801be68
 80145f8:	0801c520 	.word	0x0801c520
 80145fc:	0801bebc 	.word	0x0801bebc

08014600 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8014600:	b580      	push	{r7, lr}
 8014602:	b086      	sub	sp, #24
 8014604:	af00      	add	r7, sp, #0
 8014606:	60f8      	str	r0, [r7, #12]
 8014608:	607b      	str	r3, [r7, #4]
 801460a:	460b      	mov	r3, r1
 801460c:	817b      	strh	r3, [r7, #10]
 801460e:	4613      	mov	r3, r2
 8014610:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014612:	897a      	ldrh	r2, [r7, #10]
 8014614:	893b      	ldrh	r3, [r7, #8]
 8014616:	4413      	add	r3, r2
 8014618:	b29b      	uxth	r3, r3
 801461a:	3314      	adds	r3, #20
 801461c:	b29b      	uxth	r3, r3
 801461e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014622:	4619      	mov	r1, r3
 8014624:	2022      	movs	r0, #34	; 0x22
 8014626:	f7f9 fd13 	bl	800e050 <pbuf_alloc>
 801462a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801462c:	697b      	ldr	r3, [r7, #20]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d04d      	beq.n	80146ce <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014632:	897b      	ldrh	r3, [r7, #10]
 8014634:	3313      	adds	r3, #19
 8014636:	697a      	ldr	r2, [r7, #20]
 8014638:	8952      	ldrh	r2, [r2, #10]
 801463a:	4293      	cmp	r3, r2
 801463c:	db06      	blt.n	801464c <tcp_output_alloc_header_common+0x4c>
 801463e:	4b26      	ldr	r3, [pc, #152]	; (80146d8 <tcp_output_alloc_header_common+0xd8>)
 8014640:	f240 7223 	movw	r2, #1827	; 0x723
 8014644:	4925      	ldr	r1, [pc, #148]	; (80146dc <tcp_output_alloc_header_common+0xdc>)
 8014646:	4826      	ldr	r0, [pc, #152]	; (80146e0 <tcp_output_alloc_header_common+0xe0>)
 8014648:	f003 fbfa 	bl	8017e40 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801464c:	697b      	ldr	r3, [r7, #20]
 801464e:	685b      	ldr	r3, [r3, #4]
 8014650:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014652:	8c3b      	ldrh	r3, [r7, #32]
 8014654:	4618      	mov	r0, r3
 8014656:	f7f8 fb55 	bl	800cd04 <lwip_htons>
 801465a:	4603      	mov	r3, r0
 801465c:	461a      	mov	r2, r3
 801465e:	693b      	ldr	r3, [r7, #16]
 8014660:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014662:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014664:	4618      	mov	r0, r3
 8014666:	f7f8 fb4d 	bl	800cd04 <lwip_htons>
 801466a:	4603      	mov	r3, r0
 801466c:	461a      	mov	r2, r3
 801466e:	693b      	ldr	r3, [r7, #16]
 8014670:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014672:	693b      	ldr	r3, [r7, #16]
 8014674:	687a      	ldr	r2, [r7, #4]
 8014676:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014678:	68f8      	ldr	r0, [r7, #12]
 801467a:	f7f8 fb58 	bl	800cd2e <lwip_htonl>
 801467e:	4602      	mov	r2, r0
 8014680:	693b      	ldr	r3, [r7, #16]
 8014682:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014684:	897b      	ldrh	r3, [r7, #10]
 8014686:	089b      	lsrs	r3, r3, #2
 8014688:	b29b      	uxth	r3, r3
 801468a:	3305      	adds	r3, #5
 801468c:	b29b      	uxth	r3, r3
 801468e:	031b      	lsls	r3, r3, #12
 8014690:	b29a      	uxth	r2, r3
 8014692:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014696:	b29b      	uxth	r3, r3
 8014698:	4313      	orrs	r3, r2
 801469a:	b29b      	uxth	r3, r3
 801469c:	4618      	mov	r0, r3
 801469e:	f7f8 fb31 	bl	800cd04 <lwip_htons>
 80146a2:	4603      	mov	r3, r0
 80146a4:	461a      	mov	r2, r3
 80146a6:	693b      	ldr	r3, [r7, #16]
 80146a8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80146aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80146ac:	4618      	mov	r0, r3
 80146ae:	f7f8 fb29 	bl	800cd04 <lwip_htons>
 80146b2:	4603      	mov	r3, r0
 80146b4:	461a      	mov	r2, r3
 80146b6:	693b      	ldr	r3, [r7, #16]
 80146b8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80146ba:	693b      	ldr	r3, [r7, #16]
 80146bc:	2200      	movs	r2, #0
 80146be:	741a      	strb	r2, [r3, #16]
 80146c0:	2200      	movs	r2, #0
 80146c2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80146c4:	693b      	ldr	r3, [r7, #16]
 80146c6:	2200      	movs	r2, #0
 80146c8:	749a      	strb	r2, [r3, #18]
 80146ca:	2200      	movs	r2, #0
 80146cc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80146ce:	697b      	ldr	r3, [r7, #20]
}
 80146d0:	4618      	mov	r0, r3
 80146d2:	3718      	adds	r7, #24
 80146d4:	46bd      	mov	sp, r7
 80146d6:	bd80      	pop	{r7, pc}
 80146d8:	0801be68 	.word	0x0801be68
 80146dc:	0801c540 	.word	0x0801c540
 80146e0:	0801bebc 	.word	0x0801bebc

080146e4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80146e4:	b5b0      	push	{r4, r5, r7, lr}
 80146e6:	b08a      	sub	sp, #40	; 0x28
 80146e8:	af04      	add	r7, sp, #16
 80146ea:	60f8      	str	r0, [r7, #12]
 80146ec:	607b      	str	r3, [r7, #4]
 80146ee:	460b      	mov	r3, r1
 80146f0:	817b      	strh	r3, [r7, #10]
 80146f2:	4613      	mov	r3, r2
 80146f4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d106      	bne.n	801470a <tcp_output_alloc_header+0x26>
 80146fc:	4b15      	ldr	r3, [pc, #84]	; (8014754 <tcp_output_alloc_header+0x70>)
 80146fe:	f240 7242 	movw	r2, #1858	; 0x742
 8014702:	4915      	ldr	r1, [pc, #84]	; (8014758 <tcp_output_alloc_header+0x74>)
 8014704:	4815      	ldr	r0, [pc, #84]	; (801475c <tcp_output_alloc_header+0x78>)
 8014706:	f003 fb9b 	bl	8017e40 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	8adb      	ldrh	r3, [r3, #22]
 8014712:	68fa      	ldr	r2, [r7, #12]
 8014714:	8b12      	ldrh	r2, [r2, #24]
 8014716:	68f9      	ldr	r1, [r7, #12]
 8014718:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801471a:	893d      	ldrh	r5, [r7, #8]
 801471c:	897c      	ldrh	r4, [r7, #10]
 801471e:	9103      	str	r1, [sp, #12]
 8014720:	2110      	movs	r1, #16
 8014722:	9102      	str	r1, [sp, #8]
 8014724:	9201      	str	r2, [sp, #4]
 8014726:	9300      	str	r3, [sp, #0]
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	462a      	mov	r2, r5
 801472c:	4621      	mov	r1, r4
 801472e:	f7ff ff67 	bl	8014600 <tcp_output_alloc_header_common>
 8014732:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014734:	697b      	ldr	r3, [r7, #20]
 8014736:	2b00      	cmp	r3, #0
 8014738:	d006      	beq.n	8014748 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801473e:	68fa      	ldr	r2, [r7, #12]
 8014740:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014742:	441a      	add	r2, r3
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014748:	697b      	ldr	r3, [r7, #20]
}
 801474a:	4618      	mov	r0, r3
 801474c:	3718      	adds	r7, #24
 801474e:	46bd      	mov	sp, r7
 8014750:	bdb0      	pop	{r4, r5, r7, pc}
 8014752:	bf00      	nop
 8014754:	0801be68 	.word	0x0801be68
 8014758:	0801c570 	.word	0x0801c570
 801475c:	0801bebc 	.word	0x0801bebc

08014760 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014760:	b580      	push	{r7, lr}
 8014762:	b088      	sub	sp, #32
 8014764:	af00      	add	r7, sp, #0
 8014766:	60f8      	str	r0, [r7, #12]
 8014768:	60b9      	str	r1, [r7, #8]
 801476a:	4611      	mov	r1, r2
 801476c:	461a      	mov	r2, r3
 801476e:	460b      	mov	r3, r1
 8014770:	71fb      	strb	r3, [r7, #7]
 8014772:	4613      	mov	r3, r2
 8014774:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014776:	2300      	movs	r3, #0
 8014778:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801477a:	68bb      	ldr	r3, [r7, #8]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d106      	bne.n	801478e <tcp_output_fill_options+0x2e>
 8014780:	4b13      	ldr	r3, [pc, #76]	; (80147d0 <tcp_output_fill_options+0x70>)
 8014782:	f240 7256 	movw	r2, #1878	; 0x756
 8014786:	4913      	ldr	r1, [pc, #76]	; (80147d4 <tcp_output_fill_options+0x74>)
 8014788:	4813      	ldr	r0, [pc, #76]	; (80147d8 <tcp_output_fill_options+0x78>)
 801478a:	f003 fb59 	bl	8017e40 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801478e:	68bb      	ldr	r3, [r7, #8]
 8014790:	685b      	ldr	r3, [r3, #4]
 8014792:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014794:	69bb      	ldr	r3, [r7, #24]
 8014796:	3314      	adds	r3, #20
 8014798:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801479a:	69bb      	ldr	r3, [r7, #24]
 801479c:	f103 0214 	add.w	r2, r3, #20
 80147a0:	8bfb      	ldrh	r3, [r7, #30]
 80147a2:	009b      	lsls	r3, r3, #2
 80147a4:	4619      	mov	r1, r3
 80147a6:	79fb      	ldrb	r3, [r7, #7]
 80147a8:	009b      	lsls	r3, r3, #2
 80147aa:	f003 0304 	and.w	r3, r3, #4
 80147ae:	440b      	add	r3, r1
 80147b0:	4413      	add	r3, r2
 80147b2:	697a      	ldr	r2, [r7, #20]
 80147b4:	429a      	cmp	r2, r3
 80147b6:	d006      	beq.n	80147c6 <tcp_output_fill_options+0x66>
 80147b8:	4b05      	ldr	r3, [pc, #20]	; (80147d0 <tcp_output_fill_options+0x70>)
 80147ba:	f240 7275 	movw	r2, #1909	; 0x775
 80147be:	4907      	ldr	r1, [pc, #28]	; (80147dc <tcp_output_fill_options+0x7c>)
 80147c0:	4805      	ldr	r0, [pc, #20]	; (80147d8 <tcp_output_fill_options+0x78>)
 80147c2:	f003 fb3d 	bl	8017e40 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80147c6:	bf00      	nop
 80147c8:	3720      	adds	r7, #32
 80147ca:	46bd      	mov	sp, r7
 80147cc:	bd80      	pop	{r7, pc}
 80147ce:	bf00      	nop
 80147d0:	0801be68 	.word	0x0801be68
 80147d4:	0801c598 	.word	0x0801c598
 80147d8:	0801bebc 	.word	0x0801bebc
 80147dc:	0801c490 	.word	0x0801c490

080147e0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80147e0:	b580      	push	{r7, lr}
 80147e2:	b08a      	sub	sp, #40	; 0x28
 80147e4:	af04      	add	r7, sp, #16
 80147e6:	60f8      	str	r0, [r7, #12]
 80147e8:	60b9      	str	r1, [r7, #8]
 80147ea:	607a      	str	r2, [r7, #4]
 80147ec:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80147ee:	68bb      	ldr	r3, [r7, #8]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d106      	bne.n	8014802 <tcp_output_control_segment+0x22>
 80147f4:	4b1c      	ldr	r3, [pc, #112]	; (8014868 <tcp_output_control_segment+0x88>)
 80147f6:	f240 7287 	movw	r2, #1927	; 0x787
 80147fa:	491c      	ldr	r1, [pc, #112]	; (801486c <tcp_output_control_segment+0x8c>)
 80147fc:	481c      	ldr	r0, [pc, #112]	; (8014870 <tcp_output_control_segment+0x90>)
 80147fe:	f003 fb1f 	bl	8017e40 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014802:	683a      	ldr	r2, [r7, #0]
 8014804:	6879      	ldr	r1, [r7, #4]
 8014806:	68f8      	ldr	r0, [r7, #12]
 8014808:	f7fe fae8 	bl	8012ddc <tcp_route>
 801480c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801480e:	693b      	ldr	r3, [r7, #16]
 8014810:	2b00      	cmp	r3, #0
 8014812:	d102      	bne.n	801481a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014814:	23fc      	movs	r3, #252	; 0xfc
 8014816:	75fb      	strb	r3, [r7, #23]
 8014818:	e01c      	b.n	8014854 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d006      	beq.n	801482e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	7adb      	ldrb	r3, [r3, #11]
 8014824:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	7a9b      	ldrb	r3, [r3, #10]
 801482a:	757b      	strb	r3, [r7, #21]
 801482c:	e003      	b.n	8014836 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801482e:	23ff      	movs	r3, #255	; 0xff
 8014830:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014832:	2300      	movs	r3, #0
 8014834:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014836:	7dba      	ldrb	r2, [r7, #22]
 8014838:	693b      	ldr	r3, [r7, #16]
 801483a:	9302      	str	r3, [sp, #8]
 801483c:	2306      	movs	r3, #6
 801483e:	9301      	str	r3, [sp, #4]
 8014840:	7d7b      	ldrb	r3, [r7, #21]
 8014842:	9300      	str	r3, [sp, #0]
 8014844:	4613      	mov	r3, r2
 8014846:	683a      	ldr	r2, [r7, #0]
 8014848:	6879      	ldr	r1, [r7, #4]
 801484a:	68b8      	ldr	r0, [r7, #8]
 801484c:	f001 ffa0 	bl	8016790 <ip4_output_if>
 8014850:	4603      	mov	r3, r0
 8014852:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014854:	68b8      	ldr	r0, [r7, #8]
 8014856:	f7f9 fedf 	bl	800e618 <pbuf_free>
  return err;
 801485a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801485e:	4618      	mov	r0, r3
 8014860:	3718      	adds	r7, #24
 8014862:	46bd      	mov	sp, r7
 8014864:	bd80      	pop	{r7, pc}
 8014866:	bf00      	nop
 8014868:	0801be68 	.word	0x0801be68
 801486c:	0801c5c0 	.word	0x0801c5c0
 8014870:	0801bebc 	.word	0x0801bebc

08014874 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014874:	b590      	push	{r4, r7, lr}
 8014876:	b08b      	sub	sp, #44	; 0x2c
 8014878:	af04      	add	r7, sp, #16
 801487a:	60f8      	str	r0, [r7, #12]
 801487c:	60b9      	str	r1, [r7, #8]
 801487e:	607a      	str	r2, [r7, #4]
 8014880:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014882:	683b      	ldr	r3, [r7, #0]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d106      	bne.n	8014896 <tcp_rst+0x22>
 8014888:	4b1f      	ldr	r3, [pc, #124]	; (8014908 <tcp_rst+0x94>)
 801488a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801488e:	491f      	ldr	r1, [pc, #124]	; (801490c <tcp_rst+0x98>)
 8014890:	481f      	ldr	r0, [pc, #124]	; (8014910 <tcp_rst+0x9c>)
 8014892:	f003 fad5 	bl	8017e40 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014898:	2b00      	cmp	r3, #0
 801489a:	d106      	bne.n	80148aa <tcp_rst+0x36>
 801489c:	4b1a      	ldr	r3, [pc, #104]	; (8014908 <tcp_rst+0x94>)
 801489e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80148a2:	491c      	ldr	r1, [pc, #112]	; (8014914 <tcp_rst+0xa0>)
 80148a4:	481a      	ldr	r0, [pc, #104]	; (8014910 <tcp_rst+0x9c>)
 80148a6:	f003 facb 	bl	8017e40 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80148aa:	2300      	movs	r3, #0
 80148ac:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80148ae:	f246 0308 	movw	r3, #24584	; 0x6008
 80148b2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80148b4:	7dfb      	ldrb	r3, [r7, #23]
 80148b6:	b29c      	uxth	r4, r3
 80148b8:	68b8      	ldr	r0, [r7, #8]
 80148ba:	f7f8 fa38 	bl	800cd2e <lwip_htonl>
 80148be:	4602      	mov	r2, r0
 80148c0:	8abb      	ldrh	r3, [r7, #20]
 80148c2:	9303      	str	r3, [sp, #12]
 80148c4:	2314      	movs	r3, #20
 80148c6:	9302      	str	r3, [sp, #8]
 80148c8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80148ca:	9301      	str	r3, [sp, #4]
 80148cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80148ce:	9300      	str	r3, [sp, #0]
 80148d0:	4613      	mov	r3, r2
 80148d2:	2200      	movs	r2, #0
 80148d4:	4621      	mov	r1, r4
 80148d6:	6878      	ldr	r0, [r7, #4]
 80148d8:	f7ff fe92 	bl	8014600 <tcp_output_alloc_header_common>
 80148dc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80148de:	693b      	ldr	r3, [r7, #16]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d00c      	beq.n	80148fe <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80148e4:	7dfb      	ldrb	r3, [r7, #23]
 80148e6:	2200      	movs	r2, #0
 80148e8:	6939      	ldr	r1, [r7, #16]
 80148ea:	68f8      	ldr	r0, [r7, #12]
 80148ec:	f7ff ff38 	bl	8014760 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80148f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148f2:	683a      	ldr	r2, [r7, #0]
 80148f4:	6939      	ldr	r1, [r7, #16]
 80148f6:	68f8      	ldr	r0, [r7, #12]
 80148f8:	f7ff ff72 	bl	80147e0 <tcp_output_control_segment>
 80148fc:	e000      	b.n	8014900 <tcp_rst+0x8c>
    return;
 80148fe:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014900:	371c      	adds	r7, #28
 8014902:	46bd      	mov	sp, r7
 8014904:	bd90      	pop	{r4, r7, pc}
 8014906:	bf00      	nop
 8014908:	0801be68 	.word	0x0801be68
 801490c:	0801c5ec 	.word	0x0801c5ec
 8014910:	0801bebc 	.word	0x0801bebc
 8014914:	0801c608 	.word	0x0801c608

08014918 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014918:	b590      	push	{r4, r7, lr}
 801491a:	b087      	sub	sp, #28
 801491c:	af00      	add	r7, sp, #0
 801491e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014920:	2300      	movs	r3, #0
 8014922:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014924:	2300      	movs	r3, #0
 8014926:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d106      	bne.n	801493c <tcp_send_empty_ack+0x24>
 801492e:	4b28      	ldr	r3, [pc, #160]	; (80149d0 <tcp_send_empty_ack+0xb8>)
 8014930:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014934:	4927      	ldr	r1, [pc, #156]	; (80149d4 <tcp_send_empty_ack+0xbc>)
 8014936:	4828      	ldr	r0, [pc, #160]	; (80149d8 <tcp_send_empty_ack+0xc0>)
 8014938:	f003 fa82 	bl	8017e40 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801493c:	7dfb      	ldrb	r3, [r7, #23]
 801493e:	009b      	lsls	r3, r3, #2
 8014940:	b2db      	uxtb	r3, r3
 8014942:	f003 0304 	and.w	r3, r3, #4
 8014946:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014948:	7d7b      	ldrb	r3, [r7, #21]
 801494a:	b29c      	uxth	r4, r3
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014950:	4618      	mov	r0, r3
 8014952:	f7f8 f9ec 	bl	800cd2e <lwip_htonl>
 8014956:	4603      	mov	r3, r0
 8014958:	2200      	movs	r2, #0
 801495a:	4621      	mov	r1, r4
 801495c:	6878      	ldr	r0, [r7, #4]
 801495e:	f7ff fec1 	bl	80146e4 <tcp_output_alloc_header>
 8014962:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014964:	693b      	ldr	r3, [r7, #16]
 8014966:	2b00      	cmp	r3, #0
 8014968:	d109      	bne.n	801497e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	8b5b      	ldrh	r3, [r3, #26]
 801496e:	f043 0303 	orr.w	r3, r3, #3
 8014972:	b29a      	uxth	r2, r3
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014978:	f06f 0301 	mvn.w	r3, #1
 801497c:	e023      	b.n	80149c6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801497e:	7dbb      	ldrb	r3, [r7, #22]
 8014980:	7dfa      	ldrb	r2, [r7, #23]
 8014982:	6939      	ldr	r1, [r7, #16]
 8014984:	6878      	ldr	r0, [r7, #4]
 8014986:	f7ff feeb 	bl	8014760 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801498a:	687a      	ldr	r2, [r7, #4]
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	3304      	adds	r3, #4
 8014990:	6939      	ldr	r1, [r7, #16]
 8014992:	6878      	ldr	r0, [r7, #4]
 8014994:	f7ff ff24 	bl	80147e0 <tcp_output_control_segment>
 8014998:	4603      	mov	r3, r0
 801499a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801499c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d007      	beq.n	80149b4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	8b5b      	ldrh	r3, [r3, #26]
 80149a8:	f043 0303 	orr.w	r3, r3, #3
 80149ac:	b29a      	uxth	r2, r3
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	835a      	strh	r2, [r3, #26]
 80149b2:	e006      	b.n	80149c2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	8b5b      	ldrh	r3, [r3, #26]
 80149b8:	f023 0303 	bic.w	r3, r3, #3
 80149bc:	b29a      	uxth	r2, r3
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80149c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80149c6:	4618      	mov	r0, r3
 80149c8:	371c      	adds	r7, #28
 80149ca:	46bd      	mov	sp, r7
 80149cc:	bd90      	pop	{r4, r7, pc}
 80149ce:	bf00      	nop
 80149d0:	0801be68 	.word	0x0801be68
 80149d4:	0801c624 	.word	0x0801c624
 80149d8:	0801bebc 	.word	0x0801bebc

080149dc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80149dc:	b590      	push	{r4, r7, lr}
 80149de:	b087      	sub	sp, #28
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80149e4:	2300      	movs	r3, #0
 80149e6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d106      	bne.n	80149fc <tcp_keepalive+0x20>
 80149ee:	4b18      	ldr	r3, [pc, #96]	; (8014a50 <tcp_keepalive+0x74>)
 80149f0:	f640 0224 	movw	r2, #2084	; 0x824
 80149f4:	4917      	ldr	r1, [pc, #92]	; (8014a54 <tcp_keepalive+0x78>)
 80149f6:	4818      	ldr	r0, [pc, #96]	; (8014a58 <tcp_keepalive+0x7c>)
 80149f8:	f003 fa22 	bl	8017e40 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80149fc:	7dfb      	ldrb	r3, [r7, #23]
 80149fe:	b29c      	uxth	r4, r3
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014a04:	3b01      	subs	r3, #1
 8014a06:	4618      	mov	r0, r3
 8014a08:	f7f8 f991 	bl	800cd2e <lwip_htonl>
 8014a0c:	4603      	mov	r3, r0
 8014a0e:	2200      	movs	r2, #0
 8014a10:	4621      	mov	r1, r4
 8014a12:	6878      	ldr	r0, [r7, #4]
 8014a14:	f7ff fe66 	bl	80146e4 <tcp_output_alloc_header>
 8014a18:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014a1a:	693b      	ldr	r3, [r7, #16]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d102      	bne.n	8014a26 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014a20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014a24:	e010      	b.n	8014a48 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014a26:	7dfb      	ldrb	r3, [r7, #23]
 8014a28:	2200      	movs	r2, #0
 8014a2a:	6939      	ldr	r1, [r7, #16]
 8014a2c:	6878      	ldr	r0, [r7, #4]
 8014a2e:	f7ff fe97 	bl	8014760 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014a32:	687a      	ldr	r2, [r7, #4]
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	3304      	adds	r3, #4
 8014a38:	6939      	ldr	r1, [r7, #16]
 8014a3a:	6878      	ldr	r0, [r7, #4]
 8014a3c:	f7ff fed0 	bl	80147e0 <tcp_output_control_segment>
 8014a40:	4603      	mov	r3, r0
 8014a42:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014a44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014a48:	4618      	mov	r0, r3
 8014a4a:	371c      	adds	r7, #28
 8014a4c:	46bd      	mov	sp, r7
 8014a4e:	bd90      	pop	{r4, r7, pc}
 8014a50:	0801be68 	.word	0x0801be68
 8014a54:	0801c644 	.word	0x0801c644
 8014a58:	0801bebc 	.word	0x0801bebc

08014a5c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014a5c:	b590      	push	{r4, r7, lr}
 8014a5e:	b08b      	sub	sp, #44	; 0x2c
 8014a60:	af00      	add	r7, sp, #0
 8014a62:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014a64:	2300      	movs	r3, #0
 8014a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d106      	bne.n	8014a7e <tcp_zero_window_probe+0x22>
 8014a70:	4b4c      	ldr	r3, [pc, #304]	; (8014ba4 <tcp_zero_window_probe+0x148>)
 8014a72:	f640 024f 	movw	r2, #2127	; 0x84f
 8014a76:	494c      	ldr	r1, [pc, #304]	; (8014ba8 <tcp_zero_window_probe+0x14c>)
 8014a78:	484c      	ldr	r0, [pc, #304]	; (8014bac <tcp_zero_window_probe+0x150>)
 8014a7a:	f003 f9e1 	bl	8017e40 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a82:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014a84:	6a3b      	ldr	r3, [r7, #32]
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d101      	bne.n	8014a8e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014a8a:	2300      	movs	r3, #0
 8014a8c:	e086      	b.n	8014b9c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014a94:	2bff      	cmp	r3, #255	; 0xff
 8014a96:	d007      	beq.n	8014aa8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014a9e:	3301      	adds	r3, #1
 8014aa0:	b2da      	uxtb	r2, r3
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014aa8:	6a3b      	ldr	r3, [r7, #32]
 8014aaa:	68db      	ldr	r3, [r3, #12]
 8014aac:	899b      	ldrh	r3, [r3, #12]
 8014aae:	b29b      	uxth	r3, r3
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	f7f8 f927 	bl	800cd04 <lwip_htons>
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	b2db      	uxtb	r3, r3
 8014aba:	f003 0301 	and.w	r3, r3, #1
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d005      	beq.n	8014ace <tcp_zero_window_probe+0x72>
 8014ac2:	6a3b      	ldr	r3, [r7, #32]
 8014ac4:	891b      	ldrh	r3, [r3, #8]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d101      	bne.n	8014ace <tcp_zero_window_probe+0x72>
 8014aca:	2301      	movs	r3, #1
 8014acc:	e000      	b.n	8014ad0 <tcp_zero_window_probe+0x74>
 8014ace:	2300      	movs	r3, #0
 8014ad0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014ad2:	7ffb      	ldrb	r3, [r7, #31]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	bf0c      	ite	eq
 8014ad8:	2301      	moveq	r3, #1
 8014ada:	2300      	movne	r3, #0
 8014adc:	b2db      	uxtb	r3, r3
 8014ade:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ae4:	b299      	uxth	r1, r3
 8014ae6:	6a3b      	ldr	r3, [r7, #32]
 8014ae8:	68db      	ldr	r3, [r3, #12]
 8014aea:	685b      	ldr	r3, [r3, #4]
 8014aec:	8bba      	ldrh	r2, [r7, #28]
 8014aee:	6878      	ldr	r0, [r7, #4]
 8014af0:	f7ff fdf8 	bl	80146e4 <tcp_output_alloc_header>
 8014af4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014af6:	69bb      	ldr	r3, [r7, #24]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d102      	bne.n	8014b02 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014afc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014b00:	e04c      	b.n	8014b9c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014b02:	69bb      	ldr	r3, [r7, #24]
 8014b04:	685b      	ldr	r3, [r3, #4]
 8014b06:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014b08:	7ffb      	ldrb	r3, [r7, #31]
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d011      	beq.n	8014b32 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014b0e:	697b      	ldr	r3, [r7, #20]
 8014b10:	899b      	ldrh	r3, [r3, #12]
 8014b12:	b29b      	uxth	r3, r3
 8014b14:	b21b      	sxth	r3, r3
 8014b16:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014b1a:	b21c      	sxth	r4, r3
 8014b1c:	2011      	movs	r0, #17
 8014b1e:	f7f8 f8f1 	bl	800cd04 <lwip_htons>
 8014b22:	4603      	mov	r3, r0
 8014b24:	b21b      	sxth	r3, r3
 8014b26:	4323      	orrs	r3, r4
 8014b28:	b21b      	sxth	r3, r3
 8014b2a:	b29a      	uxth	r2, r3
 8014b2c:	697b      	ldr	r3, [r7, #20]
 8014b2e:	819a      	strh	r2, [r3, #12]
 8014b30:	e010      	b.n	8014b54 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014b32:	69bb      	ldr	r3, [r7, #24]
 8014b34:	685b      	ldr	r3, [r3, #4]
 8014b36:	3314      	adds	r3, #20
 8014b38:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014b3a:	6a3b      	ldr	r3, [r7, #32]
 8014b3c:	6858      	ldr	r0, [r3, #4]
 8014b3e:	6a3b      	ldr	r3, [r7, #32]
 8014b40:	685b      	ldr	r3, [r3, #4]
 8014b42:	891a      	ldrh	r2, [r3, #8]
 8014b44:	6a3b      	ldr	r3, [r7, #32]
 8014b46:	891b      	ldrh	r3, [r3, #8]
 8014b48:	1ad3      	subs	r3, r2, r3
 8014b4a:	b29b      	uxth	r3, r3
 8014b4c:	2201      	movs	r2, #1
 8014b4e:	6939      	ldr	r1, [r7, #16]
 8014b50:	f7f9 ff58 	bl	800ea04 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014b54:	6a3b      	ldr	r3, [r7, #32]
 8014b56:	68db      	ldr	r3, [r3, #12]
 8014b58:	685b      	ldr	r3, [r3, #4]
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	f7f8 f8e7 	bl	800cd2e <lwip_htonl>
 8014b60:	4603      	mov	r3, r0
 8014b62:	3301      	adds	r3, #1
 8014b64:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	1ad3      	subs	r3, r2, r3
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	da02      	bge.n	8014b78 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	68fa      	ldr	r2, [r7, #12]
 8014b76:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014b78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b7c:	2200      	movs	r2, #0
 8014b7e:	69b9      	ldr	r1, [r7, #24]
 8014b80:	6878      	ldr	r0, [r7, #4]
 8014b82:	f7ff fded 	bl	8014760 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014b86:	687a      	ldr	r2, [r7, #4]
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	3304      	adds	r3, #4
 8014b8c:	69b9      	ldr	r1, [r7, #24]
 8014b8e:	6878      	ldr	r0, [r7, #4]
 8014b90:	f7ff fe26 	bl	80147e0 <tcp_output_control_segment>
 8014b94:	4603      	mov	r3, r0
 8014b96:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014b98:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014b9c:	4618      	mov	r0, r3
 8014b9e:	372c      	adds	r7, #44	; 0x2c
 8014ba0:	46bd      	mov	sp, r7
 8014ba2:	bd90      	pop	{r4, r7, pc}
 8014ba4:	0801be68 	.word	0x0801be68
 8014ba8:	0801c660 	.word	0x0801c660
 8014bac:	0801bebc 	.word	0x0801bebc

08014bb0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014bb0:	b580      	push	{r7, lr}
 8014bb2:	b082      	sub	sp, #8
 8014bb4:	af00      	add	r7, sp, #0
 8014bb6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014bb8:	f7fa f812 	bl	800ebe0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014bbc:	4b0a      	ldr	r3, [pc, #40]	; (8014be8 <tcpip_tcp_timer+0x38>)
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d103      	bne.n	8014bcc <tcpip_tcp_timer+0x1c>
 8014bc4:	4b09      	ldr	r3, [pc, #36]	; (8014bec <tcpip_tcp_timer+0x3c>)
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d005      	beq.n	8014bd8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014bcc:	2200      	movs	r2, #0
 8014bce:	4908      	ldr	r1, [pc, #32]	; (8014bf0 <tcpip_tcp_timer+0x40>)
 8014bd0:	20fa      	movs	r0, #250	; 0xfa
 8014bd2:	f000 f8f3 	bl	8014dbc <sys_timeout>
 8014bd6:	e003      	b.n	8014be0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014bd8:	4b06      	ldr	r3, [pc, #24]	; (8014bf4 <tcpip_tcp_timer+0x44>)
 8014bda:	2200      	movs	r2, #0
 8014bdc:	601a      	str	r2, [r3, #0]
  }
}
 8014bde:	bf00      	nop
 8014be0:	bf00      	nop
 8014be2:	3708      	adds	r7, #8
 8014be4:	46bd      	mov	sp, r7
 8014be6:	bd80      	pop	{r7, pc}
 8014be8:	20018ba4 	.word	0x20018ba4
 8014bec:	20018bb4 	.word	0x20018bb4
 8014bf0:	08014bb1 	.word	0x08014bb1
 8014bf4:	200052c8 	.word	0x200052c8

08014bf8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014bfc:	4b0a      	ldr	r3, [pc, #40]	; (8014c28 <tcp_timer_needed+0x30>)
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d10f      	bne.n	8014c24 <tcp_timer_needed+0x2c>
 8014c04:	4b09      	ldr	r3, [pc, #36]	; (8014c2c <tcp_timer_needed+0x34>)
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d103      	bne.n	8014c14 <tcp_timer_needed+0x1c>
 8014c0c:	4b08      	ldr	r3, [pc, #32]	; (8014c30 <tcp_timer_needed+0x38>)
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d007      	beq.n	8014c24 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014c14:	4b04      	ldr	r3, [pc, #16]	; (8014c28 <tcp_timer_needed+0x30>)
 8014c16:	2201      	movs	r2, #1
 8014c18:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014c1a:	2200      	movs	r2, #0
 8014c1c:	4905      	ldr	r1, [pc, #20]	; (8014c34 <tcp_timer_needed+0x3c>)
 8014c1e:	20fa      	movs	r0, #250	; 0xfa
 8014c20:	f000 f8cc 	bl	8014dbc <sys_timeout>
  }
}
 8014c24:	bf00      	nop
 8014c26:	bd80      	pop	{r7, pc}
 8014c28:	200052c8 	.word	0x200052c8
 8014c2c:	20018ba4 	.word	0x20018ba4
 8014c30:	20018bb4 	.word	0x20018bb4
 8014c34:	08014bb1 	.word	0x08014bb1

08014c38 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014c38:	b580      	push	{r7, lr}
 8014c3a:	b086      	sub	sp, #24
 8014c3c:	af00      	add	r7, sp, #0
 8014c3e:	60f8      	str	r0, [r7, #12]
 8014c40:	60b9      	str	r1, [r7, #8]
 8014c42:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014c44:	200a      	movs	r0, #10
 8014c46:	f7f8 fdf1 	bl	800d82c <memp_malloc>
 8014c4a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014c4c:	693b      	ldr	r3, [r7, #16]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d109      	bne.n	8014c66 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014c52:	693b      	ldr	r3, [r7, #16]
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d151      	bne.n	8014cfc <sys_timeout_abs+0xc4>
 8014c58:	4b2a      	ldr	r3, [pc, #168]	; (8014d04 <sys_timeout_abs+0xcc>)
 8014c5a:	22be      	movs	r2, #190	; 0xbe
 8014c5c:	492a      	ldr	r1, [pc, #168]	; (8014d08 <sys_timeout_abs+0xd0>)
 8014c5e:	482b      	ldr	r0, [pc, #172]	; (8014d0c <sys_timeout_abs+0xd4>)
 8014c60:	f003 f8ee 	bl	8017e40 <iprintf>
    return;
 8014c64:	e04a      	b.n	8014cfc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014c66:	693b      	ldr	r3, [r7, #16]
 8014c68:	2200      	movs	r2, #0
 8014c6a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014c6c:	693b      	ldr	r3, [r7, #16]
 8014c6e:	68ba      	ldr	r2, [r7, #8]
 8014c70:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014c72:	693b      	ldr	r3, [r7, #16]
 8014c74:	687a      	ldr	r2, [r7, #4]
 8014c76:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014c78:	693b      	ldr	r3, [r7, #16]
 8014c7a:	68fa      	ldr	r2, [r7, #12]
 8014c7c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014c7e:	4b24      	ldr	r3, [pc, #144]	; (8014d10 <sys_timeout_abs+0xd8>)
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d103      	bne.n	8014c8e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014c86:	4a22      	ldr	r2, [pc, #136]	; (8014d10 <sys_timeout_abs+0xd8>)
 8014c88:	693b      	ldr	r3, [r7, #16]
 8014c8a:	6013      	str	r3, [r2, #0]
    return;
 8014c8c:	e037      	b.n	8014cfe <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014c8e:	693b      	ldr	r3, [r7, #16]
 8014c90:	685a      	ldr	r2, [r3, #4]
 8014c92:	4b1f      	ldr	r3, [pc, #124]	; (8014d10 <sys_timeout_abs+0xd8>)
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	685b      	ldr	r3, [r3, #4]
 8014c98:	1ad3      	subs	r3, r2, r3
 8014c9a:	0fdb      	lsrs	r3, r3, #31
 8014c9c:	f003 0301 	and.w	r3, r3, #1
 8014ca0:	b2db      	uxtb	r3, r3
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d007      	beq.n	8014cb6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014ca6:	4b1a      	ldr	r3, [pc, #104]	; (8014d10 <sys_timeout_abs+0xd8>)
 8014ca8:	681a      	ldr	r2, [r3, #0]
 8014caa:	693b      	ldr	r3, [r7, #16]
 8014cac:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014cae:	4a18      	ldr	r2, [pc, #96]	; (8014d10 <sys_timeout_abs+0xd8>)
 8014cb0:	693b      	ldr	r3, [r7, #16]
 8014cb2:	6013      	str	r3, [r2, #0]
 8014cb4:	e023      	b.n	8014cfe <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014cb6:	4b16      	ldr	r3, [pc, #88]	; (8014d10 <sys_timeout_abs+0xd8>)
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	617b      	str	r3, [r7, #20]
 8014cbc:	e01a      	b.n	8014cf4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014cbe:	697b      	ldr	r3, [r7, #20]
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d00b      	beq.n	8014cde <sys_timeout_abs+0xa6>
 8014cc6:	693b      	ldr	r3, [r7, #16]
 8014cc8:	685a      	ldr	r2, [r3, #4]
 8014cca:	697b      	ldr	r3, [r7, #20]
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	685b      	ldr	r3, [r3, #4]
 8014cd0:	1ad3      	subs	r3, r2, r3
 8014cd2:	0fdb      	lsrs	r3, r3, #31
 8014cd4:	f003 0301 	and.w	r3, r3, #1
 8014cd8:	b2db      	uxtb	r3, r3
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d007      	beq.n	8014cee <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014cde:	697b      	ldr	r3, [r7, #20]
 8014ce0:	681a      	ldr	r2, [r3, #0]
 8014ce2:	693b      	ldr	r3, [r7, #16]
 8014ce4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014ce6:	697b      	ldr	r3, [r7, #20]
 8014ce8:	693a      	ldr	r2, [r7, #16]
 8014cea:	601a      	str	r2, [r3, #0]
        break;
 8014cec:	e007      	b.n	8014cfe <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014cee:	697b      	ldr	r3, [r7, #20]
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	617b      	str	r3, [r7, #20]
 8014cf4:	697b      	ldr	r3, [r7, #20]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d1e1      	bne.n	8014cbe <sys_timeout_abs+0x86>
 8014cfa:	e000      	b.n	8014cfe <sys_timeout_abs+0xc6>
    return;
 8014cfc:	bf00      	nop
      }
    }
  }
}
 8014cfe:	3718      	adds	r7, #24
 8014d00:	46bd      	mov	sp, r7
 8014d02:	bd80      	pop	{r7, pc}
 8014d04:	0801c684 	.word	0x0801c684
 8014d08:	0801c6b8 	.word	0x0801c6b8
 8014d0c:	0801c6f8 	.word	0x0801c6f8
 8014d10:	200052c0 	.word	0x200052c0

08014d14 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014d14:	b580      	push	{r7, lr}
 8014d16:	b086      	sub	sp, #24
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014d20:	697b      	ldr	r3, [r7, #20]
 8014d22:	685b      	ldr	r3, [r3, #4]
 8014d24:	4798      	blx	r3

  now = sys_now();
 8014d26:	f7f2 fe25 	bl	8007974 <sys_now>
 8014d2a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014d2c:	697b      	ldr	r3, [r7, #20]
 8014d2e:	681a      	ldr	r2, [r3, #0]
 8014d30:	4b0f      	ldr	r3, [pc, #60]	; (8014d70 <lwip_cyclic_timer+0x5c>)
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	4413      	add	r3, r2
 8014d36:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014d38:	68fa      	ldr	r2, [r7, #12]
 8014d3a:	693b      	ldr	r3, [r7, #16]
 8014d3c:	1ad3      	subs	r3, r2, r3
 8014d3e:	0fdb      	lsrs	r3, r3, #31
 8014d40:	f003 0301 	and.w	r3, r3, #1
 8014d44:	b2db      	uxtb	r3, r3
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d009      	beq.n	8014d5e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014d4a:	697b      	ldr	r3, [r7, #20]
 8014d4c:	681a      	ldr	r2, [r3, #0]
 8014d4e:	693b      	ldr	r3, [r7, #16]
 8014d50:	4413      	add	r3, r2
 8014d52:	687a      	ldr	r2, [r7, #4]
 8014d54:	4907      	ldr	r1, [pc, #28]	; (8014d74 <lwip_cyclic_timer+0x60>)
 8014d56:	4618      	mov	r0, r3
 8014d58:	f7ff ff6e 	bl	8014c38 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014d5c:	e004      	b.n	8014d68 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014d5e:	687a      	ldr	r2, [r7, #4]
 8014d60:	4904      	ldr	r1, [pc, #16]	; (8014d74 <lwip_cyclic_timer+0x60>)
 8014d62:	68f8      	ldr	r0, [r7, #12]
 8014d64:	f7ff ff68 	bl	8014c38 <sys_timeout_abs>
}
 8014d68:	bf00      	nop
 8014d6a:	3718      	adds	r7, #24
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	bd80      	pop	{r7, pc}
 8014d70:	200052c4 	.word	0x200052c4
 8014d74:	08014d15 	.word	0x08014d15

08014d78 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014d78:	b580      	push	{r7, lr}
 8014d7a:	b082      	sub	sp, #8
 8014d7c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014d7e:	2301      	movs	r3, #1
 8014d80:	607b      	str	r3, [r7, #4]
 8014d82:	e00e      	b.n	8014da2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014d84:	4a0b      	ldr	r2, [pc, #44]	; (8014db4 <sys_timeouts_init+0x3c>)
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	00db      	lsls	r3, r3, #3
 8014d90:	4a08      	ldr	r2, [pc, #32]	; (8014db4 <sys_timeouts_init+0x3c>)
 8014d92:	4413      	add	r3, r2
 8014d94:	461a      	mov	r2, r3
 8014d96:	4908      	ldr	r1, [pc, #32]	; (8014db8 <sys_timeouts_init+0x40>)
 8014d98:	f000 f810 	bl	8014dbc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	3301      	adds	r3, #1
 8014da0:	607b      	str	r3, [r7, #4]
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	2b02      	cmp	r3, #2
 8014da6:	d9ed      	bls.n	8014d84 <sys_timeouts_init+0xc>
  }
}
 8014da8:	bf00      	nop
 8014daa:	bf00      	nop
 8014dac:	3708      	adds	r7, #8
 8014dae:	46bd      	mov	sp, r7
 8014db0:	bd80      	pop	{r7, pc}
 8014db2:	bf00      	nop
 8014db4:	0801e8d8 	.word	0x0801e8d8
 8014db8:	08014d15 	.word	0x08014d15

08014dbc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014dbc:	b580      	push	{r7, lr}
 8014dbe:	b086      	sub	sp, #24
 8014dc0:	af00      	add	r7, sp, #0
 8014dc2:	60f8      	str	r0, [r7, #12]
 8014dc4:	60b9      	str	r1, [r7, #8]
 8014dc6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014dce:	d306      	bcc.n	8014dde <sys_timeout+0x22>
 8014dd0:	4b0a      	ldr	r3, [pc, #40]	; (8014dfc <sys_timeout+0x40>)
 8014dd2:	f240 1229 	movw	r2, #297	; 0x129
 8014dd6:	490a      	ldr	r1, [pc, #40]	; (8014e00 <sys_timeout+0x44>)
 8014dd8:	480a      	ldr	r0, [pc, #40]	; (8014e04 <sys_timeout+0x48>)
 8014dda:	f003 f831 	bl	8017e40 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014dde:	f7f2 fdc9 	bl	8007974 <sys_now>
 8014de2:	4602      	mov	r2, r0
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	4413      	add	r3, r2
 8014de8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014dea:	687a      	ldr	r2, [r7, #4]
 8014dec:	68b9      	ldr	r1, [r7, #8]
 8014dee:	6978      	ldr	r0, [r7, #20]
 8014df0:	f7ff ff22 	bl	8014c38 <sys_timeout_abs>
#endif
}
 8014df4:	bf00      	nop
 8014df6:	3718      	adds	r7, #24
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	bd80      	pop	{r7, pc}
 8014dfc:	0801c684 	.word	0x0801c684
 8014e00:	0801c720 	.word	0x0801c720
 8014e04:	0801c6f8 	.word	0x0801c6f8

08014e08 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	b084      	sub	sp, #16
 8014e0c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014e0e:	f7f2 fdb1 	bl	8007974 <sys_now>
 8014e12:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014e14:	4b17      	ldr	r3, [pc, #92]	; (8014e74 <sys_check_timeouts+0x6c>)
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014e1a:	68bb      	ldr	r3, [r7, #8]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d022      	beq.n	8014e66 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014e20:	68bb      	ldr	r3, [r7, #8]
 8014e22:	685b      	ldr	r3, [r3, #4]
 8014e24:	68fa      	ldr	r2, [r7, #12]
 8014e26:	1ad3      	subs	r3, r2, r3
 8014e28:	0fdb      	lsrs	r3, r3, #31
 8014e2a:	f003 0301 	and.w	r3, r3, #1
 8014e2e:	b2db      	uxtb	r3, r3
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d11a      	bne.n	8014e6a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014e34:	68bb      	ldr	r3, [r7, #8]
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	4a0e      	ldr	r2, [pc, #56]	; (8014e74 <sys_check_timeouts+0x6c>)
 8014e3a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014e3c:	68bb      	ldr	r3, [r7, #8]
 8014e3e:	689b      	ldr	r3, [r3, #8]
 8014e40:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014e42:	68bb      	ldr	r3, [r7, #8]
 8014e44:	68db      	ldr	r3, [r3, #12]
 8014e46:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014e48:	68bb      	ldr	r3, [r7, #8]
 8014e4a:	685b      	ldr	r3, [r3, #4]
 8014e4c:	4a0a      	ldr	r2, [pc, #40]	; (8014e78 <sys_check_timeouts+0x70>)
 8014e4e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014e50:	68b9      	ldr	r1, [r7, #8]
 8014e52:	200a      	movs	r0, #10
 8014e54:	f7f8 fd3c 	bl	800d8d0 <memp_free>
    if (handler != NULL) {
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d0da      	beq.n	8014e14 <sys_check_timeouts+0xc>
      handler(arg);
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	6838      	ldr	r0, [r7, #0]
 8014e62:	4798      	blx	r3
  do {
 8014e64:	e7d6      	b.n	8014e14 <sys_check_timeouts+0xc>
      return;
 8014e66:	bf00      	nop
 8014e68:	e000      	b.n	8014e6c <sys_check_timeouts+0x64>
      return;
 8014e6a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014e6c:	3710      	adds	r7, #16
 8014e6e:	46bd      	mov	sp, r7
 8014e70:	bd80      	pop	{r7, pc}
 8014e72:	bf00      	nop
 8014e74:	200052c0 	.word	0x200052c0
 8014e78:	200052c4 	.word	0x200052c4

08014e7c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b082      	sub	sp, #8
 8014e80:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014e82:	4b16      	ldr	r3, [pc, #88]	; (8014edc <sys_timeouts_sleeptime+0x60>)
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d102      	bne.n	8014e90 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014e8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014e8e:	e020      	b.n	8014ed2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8014e90:	f7f2 fd70 	bl	8007974 <sys_now>
 8014e94:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014e96:	4b11      	ldr	r3, [pc, #68]	; (8014edc <sys_timeouts_sleeptime+0x60>)
 8014e98:	681b      	ldr	r3, [r3, #0]
 8014e9a:	685a      	ldr	r2, [r3, #4]
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	1ad3      	subs	r3, r2, r3
 8014ea0:	0fdb      	lsrs	r3, r3, #31
 8014ea2:	f003 0301 	and.w	r3, r3, #1
 8014ea6:	b2db      	uxtb	r3, r3
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d001      	beq.n	8014eb0 <sys_timeouts_sleeptime+0x34>
    return 0;
 8014eac:	2300      	movs	r3, #0
 8014eae:	e010      	b.n	8014ed2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014eb0:	4b0a      	ldr	r3, [pc, #40]	; (8014edc <sys_timeouts_sleeptime+0x60>)
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	685a      	ldr	r2, [r3, #4]
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	1ad3      	subs	r3, r2, r3
 8014eba:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014ebc:	683b      	ldr	r3, [r7, #0]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	da06      	bge.n	8014ed0 <sys_timeouts_sleeptime+0x54>
 8014ec2:	4b07      	ldr	r3, [pc, #28]	; (8014ee0 <sys_timeouts_sleeptime+0x64>)
 8014ec4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8014ec8:	4906      	ldr	r1, [pc, #24]	; (8014ee4 <sys_timeouts_sleeptime+0x68>)
 8014eca:	4807      	ldr	r0, [pc, #28]	; (8014ee8 <sys_timeouts_sleeptime+0x6c>)
 8014ecc:	f002 ffb8 	bl	8017e40 <iprintf>
    return ret;
 8014ed0:	683b      	ldr	r3, [r7, #0]
  }
}
 8014ed2:	4618      	mov	r0, r3
 8014ed4:	3708      	adds	r7, #8
 8014ed6:	46bd      	mov	sp, r7
 8014ed8:	bd80      	pop	{r7, pc}
 8014eda:	bf00      	nop
 8014edc:	200052c0 	.word	0x200052c0
 8014ee0:	0801c684 	.word	0x0801c684
 8014ee4:	0801c758 	.word	0x0801c758
 8014ee8:	0801c6f8 	.word	0x0801c6f8

08014eec <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014ef0:	f003 f834 	bl	8017f5c <rand>
 8014ef4:	4603      	mov	r3, r0
 8014ef6:	b29b      	uxth	r3, r3
 8014ef8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014efc:	b29b      	uxth	r3, r3
 8014efe:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8014f02:	b29a      	uxth	r2, r3
 8014f04:	4b01      	ldr	r3, [pc, #4]	; (8014f0c <udp_init+0x20>)
 8014f06:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014f08:	bf00      	nop
 8014f0a:	bd80      	pop	{r7, pc}
 8014f0c:	2000072c 	.word	0x2000072c

08014f10 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b084      	sub	sp, #16
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	60f8      	str	r0, [r7, #12]
 8014f18:	60b9      	str	r1, [r7, #8]
 8014f1a:	4613      	mov	r3, r2
 8014f1c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d105      	bne.n	8014f30 <udp_input_local_match+0x20>
 8014f24:	4b27      	ldr	r3, [pc, #156]	; (8014fc4 <udp_input_local_match+0xb4>)
 8014f26:	2287      	movs	r2, #135	; 0x87
 8014f28:	4927      	ldr	r1, [pc, #156]	; (8014fc8 <udp_input_local_match+0xb8>)
 8014f2a:	4828      	ldr	r0, [pc, #160]	; (8014fcc <udp_input_local_match+0xbc>)
 8014f2c:	f002 ff88 	bl	8017e40 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014f30:	68bb      	ldr	r3, [r7, #8]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d105      	bne.n	8014f42 <udp_input_local_match+0x32>
 8014f36:	4b23      	ldr	r3, [pc, #140]	; (8014fc4 <udp_input_local_match+0xb4>)
 8014f38:	2288      	movs	r2, #136	; 0x88
 8014f3a:	4925      	ldr	r1, [pc, #148]	; (8014fd0 <udp_input_local_match+0xc0>)
 8014f3c:	4823      	ldr	r0, [pc, #140]	; (8014fcc <udp_input_local_match+0xbc>)
 8014f3e:	f002 ff7f 	bl	8017e40 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	7a1b      	ldrb	r3, [r3, #8]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d00b      	beq.n	8014f62 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	7a1a      	ldrb	r2, [r3, #8]
 8014f4e:	4b21      	ldr	r3, [pc, #132]	; (8014fd4 <udp_input_local_match+0xc4>)
 8014f50:	685b      	ldr	r3, [r3, #4]
 8014f52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014f56:	3301      	adds	r3, #1
 8014f58:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014f5a:	429a      	cmp	r2, r3
 8014f5c:	d001      	beq.n	8014f62 <udp_input_local_match+0x52>
    return 0;
 8014f5e:	2300      	movs	r3, #0
 8014f60:	e02b      	b.n	8014fba <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014f62:	79fb      	ldrb	r3, [r7, #7]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d018      	beq.n	8014f9a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d013      	beq.n	8014f96 <udp_input_local_match+0x86>
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d00f      	beq.n	8014f96 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014f76:	4b17      	ldr	r3, [pc, #92]	; (8014fd4 <udp_input_local_match+0xc4>)
 8014f78:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014f7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014f7e:	d00a      	beq.n	8014f96 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	681a      	ldr	r2, [r3, #0]
 8014f84:	4b13      	ldr	r3, [pc, #76]	; (8014fd4 <udp_input_local_match+0xc4>)
 8014f86:	695b      	ldr	r3, [r3, #20]
 8014f88:	405a      	eors	r2, r3
 8014f8a:	68bb      	ldr	r3, [r7, #8]
 8014f8c:	3308      	adds	r3, #8
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d110      	bne.n	8014fb8 <udp_input_local_match+0xa8>
          return 1;
 8014f96:	2301      	movs	r3, #1
 8014f98:	e00f      	b.n	8014fba <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d009      	beq.n	8014fb4 <udp_input_local_match+0xa4>
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d005      	beq.n	8014fb4 <udp_input_local_match+0xa4>
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	681a      	ldr	r2, [r3, #0]
 8014fac:	4b09      	ldr	r3, [pc, #36]	; (8014fd4 <udp_input_local_match+0xc4>)
 8014fae:	695b      	ldr	r3, [r3, #20]
 8014fb0:	429a      	cmp	r2, r3
 8014fb2:	d101      	bne.n	8014fb8 <udp_input_local_match+0xa8>
        return 1;
 8014fb4:	2301      	movs	r3, #1
 8014fb6:	e000      	b.n	8014fba <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014fb8:	2300      	movs	r3, #0
}
 8014fba:	4618      	mov	r0, r3
 8014fbc:	3710      	adds	r7, #16
 8014fbe:	46bd      	mov	sp, r7
 8014fc0:	bd80      	pop	{r7, pc}
 8014fc2:	bf00      	nop
 8014fc4:	0801c76c 	.word	0x0801c76c
 8014fc8:	0801c79c 	.word	0x0801c79c
 8014fcc:	0801c7c0 	.word	0x0801c7c0
 8014fd0:	0801c7e8 	.word	0x0801c7e8
 8014fd4:	2000e2d0 	.word	0x2000e2d0

08014fd8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014fd8:	b590      	push	{r4, r7, lr}
 8014fda:	b08d      	sub	sp, #52	; 0x34
 8014fdc:	af02      	add	r7, sp, #8
 8014fde:	6078      	str	r0, [r7, #4]
 8014fe0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014fe2:	2300      	movs	r3, #0
 8014fe4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d105      	bne.n	8014ff8 <udp_input+0x20>
 8014fec:	4b7c      	ldr	r3, [pc, #496]	; (80151e0 <udp_input+0x208>)
 8014fee:	22cf      	movs	r2, #207	; 0xcf
 8014ff0:	497c      	ldr	r1, [pc, #496]	; (80151e4 <udp_input+0x20c>)
 8014ff2:	487d      	ldr	r0, [pc, #500]	; (80151e8 <udp_input+0x210>)
 8014ff4:	f002 ff24 	bl	8017e40 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014ff8:	683b      	ldr	r3, [r7, #0]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d105      	bne.n	801500a <udp_input+0x32>
 8014ffe:	4b78      	ldr	r3, [pc, #480]	; (80151e0 <udp_input+0x208>)
 8015000:	22d0      	movs	r2, #208	; 0xd0
 8015002:	497a      	ldr	r1, [pc, #488]	; (80151ec <udp_input+0x214>)
 8015004:	4878      	ldr	r0, [pc, #480]	; (80151e8 <udp_input+0x210>)
 8015006:	f002 ff1b 	bl	8017e40 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	895b      	ldrh	r3, [r3, #10]
 801500e:	2b07      	cmp	r3, #7
 8015010:	d803      	bhi.n	801501a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015012:	6878      	ldr	r0, [r7, #4]
 8015014:	f7f9 fb00 	bl	800e618 <pbuf_free>
    goto end;
 8015018:	e0de      	b.n	80151d8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	685b      	ldr	r3, [r3, #4]
 801501e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015020:	4b73      	ldr	r3, [pc, #460]	; (80151f0 <udp_input+0x218>)
 8015022:	695b      	ldr	r3, [r3, #20]
 8015024:	4a72      	ldr	r2, [pc, #456]	; (80151f0 <udp_input+0x218>)
 8015026:	6812      	ldr	r2, [r2, #0]
 8015028:	4611      	mov	r1, r2
 801502a:	4618      	mov	r0, r3
 801502c:	f001 fc88 	bl	8016940 <ip4_addr_isbroadcast_u32>
 8015030:	4603      	mov	r3, r0
 8015032:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015034:	697b      	ldr	r3, [r7, #20]
 8015036:	881b      	ldrh	r3, [r3, #0]
 8015038:	b29b      	uxth	r3, r3
 801503a:	4618      	mov	r0, r3
 801503c:	f7f7 fe62 	bl	800cd04 <lwip_htons>
 8015040:	4603      	mov	r3, r0
 8015042:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015044:	697b      	ldr	r3, [r7, #20]
 8015046:	885b      	ldrh	r3, [r3, #2]
 8015048:	b29b      	uxth	r3, r3
 801504a:	4618      	mov	r0, r3
 801504c:	f7f7 fe5a 	bl	800cd04 <lwip_htons>
 8015050:	4603      	mov	r3, r0
 8015052:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015054:	2300      	movs	r3, #0
 8015056:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8015058:	2300      	movs	r3, #0
 801505a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801505c:	2300      	movs	r3, #0
 801505e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015060:	4b64      	ldr	r3, [pc, #400]	; (80151f4 <udp_input+0x21c>)
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	627b      	str	r3, [r7, #36]	; 0x24
 8015066:	e054      	b.n	8015112 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801506a:	8a5b      	ldrh	r3, [r3, #18]
 801506c:	89fa      	ldrh	r2, [r7, #14]
 801506e:	429a      	cmp	r2, r3
 8015070:	d14a      	bne.n	8015108 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8015072:	7cfb      	ldrb	r3, [r7, #19]
 8015074:	461a      	mov	r2, r3
 8015076:	6839      	ldr	r1, [r7, #0]
 8015078:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801507a:	f7ff ff49 	bl	8014f10 <udp_input_local_match>
 801507e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015080:	2b00      	cmp	r3, #0
 8015082:	d041      	beq.n	8015108 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015086:	7c1b      	ldrb	r3, [r3, #16]
 8015088:	f003 0304 	and.w	r3, r3, #4
 801508c:	2b00      	cmp	r3, #0
 801508e:	d11d      	bne.n	80150cc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015090:	69fb      	ldr	r3, [r7, #28]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d102      	bne.n	801509c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015098:	61fb      	str	r3, [r7, #28]
 801509a:	e017      	b.n	80150cc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801509c:	7cfb      	ldrb	r3, [r7, #19]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d014      	beq.n	80150cc <udp_input+0xf4>
 80150a2:	4b53      	ldr	r3, [pc, #332]	; (80151f0 <udp_input+0x218>)
 80150a4:	695b      	ldr	r3, [r3, #20]
 80150a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80150aa:	d10f      	bne.n	80150cc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80150ac:	69fb      	ldr	r3, [r7, #28]
 80150ae:	681a      	ldr	r2, [r3, #0]
 80150b0:	683b      	ldr	r3, [r7, #0]
 80150b2:	3304      	adds	r3, #4
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	429a      	cmp	r2, r3
 80150b8:	d008      	beq.n	80150cc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80150ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150bc:	681a      	ldr	r2, [r3, #0]
 80150be:	683b      	ldr	r3, [r7, #0]
 80150c0:	3304      	adds	r3, #4
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	429a      	cmp	r2, r3
 80150c6:	d101      	bne.n	80150cc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80150c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150ca:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80150cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150ce:	8a9b      	ldrh	r3, [r3, #20]
 80150d0:	8a3a      	ldrh	r2, [r7, #16]
 80150d2:	429a      	cmp	r2, r3
 80150d4:	d118      	bne.n	8015108 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80150d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150d8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d005      	beq.n	80150ea <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80150de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150e0:	685a      	ldr	r2, [r3, #4]
 80150e2:	4b43      	ldr	r3, [pc, #268]	; (80151f0 <udp_input+0x218>)
 80150e4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80150e6:	429a      	cmp	r2, r3
 80150e8:	d10e      	bne.n	8015108 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80150ea:	6a3b      	ldr	r3, [r7, #32]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d014      	beq.n	801511a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80150f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150f2:	68da      	ldr	r2, [r3, #12]
 80150f4:	6a3b      	ldr	r3, [r7, #32]
 80150f6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80150f8:	4b3e      	ldr	r3, [pc, #248]	; (80151f4 <udp_input+0x21c>)
 80150fa:	681a      	ldr	r2, [r3, #0]
 80150fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150fe:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015100:	4a3c      	ldr	r2, [pc, #240]	; (80151f4 <udp_input+0x21c>)
 8015102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015104:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015106:	e008      	b.n	801511a <udp_input+0x142>
      }
    }

    prev = pcb;
 8015108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801510a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801510e:	68db      	ldr	r3, [r3, #12]
 8015110:	627b      	str	r3, [r7, #36]	; 0x24
 8015112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015114:	2b00      	cmp	r3, #0
 8015116:	d1a7      	bne.n	8015068 <udp_input+0x90>
 8015118:	e000      	b.n	801511c <udp_input+0x144>
        break;
 801511a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801511e:	2b00      	cmp	r3, #0
 8015120:	d101      	bne.n	8015126 <udp_input+0x14e>
    pcb = uncon_pcb;
 8015122:	69fb      	ldr	r3, [r7, #28]
 8015124:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015128:	2b00      	cmp	r3, #0
 801512a:	d002      	beq.n	8015132 <udp_input+0x15a>
    for_us = 1;
 801512c:	2301      	movs	r3, #1
 801512e:	76fb      	strb	r3, [r7, #27]
 8015130:	e00a      	b.n	8015148 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015132:	683b      	ldr	r3, [r7, #0]
 8015134:	3304      	adds	r3, #4
 8015136:	681a      	ldr	r2, [r3, #0]
 8015138:	4b2d      	ldr	r3, [pc, #180]	; (80151f0 <udp_input+0x218>)
 801513a:	695b      	ldr	r3, [r3, #20]
 801513c:	429a      	cmp	r2, r3
 801513e:	bf0c      	ite	eq
 8015140:	2301      	moveq	r3, #1
 8015142:	2300      	movne	r3, #0
 8015144:	b2db      	uxtb	r3, r3
 8015146:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015148:	7efb      	ldrb	r3, [r7, #27]
 801514a:	2b00      	cmp	r3, #0
 801514c:	d041      	beq.n	80151d2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801514e:	2108      	movs	r1, #8
 8015150:	6878      	ldr	r0, [r7, #4]
 8015152:	f7f9 f9db 	bl	800e50c <pbuf_remove_header>
 8015156:	4603      	mov	r3, r0
 8015158:	2b00      	cmp	r3, #0
 801515a:	d00a      	beq.n	8015172 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801515c:	4b20      	ldr	r3, [pc, #128]	; (80151e0 <udp_input+0x208>)
 801515e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8015162:	4925      	ldr	r1, [pc, #148]	; (80151f8 <udp_input+0x220>)
 8015164:	4820      	ldr	r0, [pc, #128]	; (80151e8 <udp_input+0x210>)
 8015166:	f002 fe6b 	bl	8017e40 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801516a:	6878      	ldr	r0, [r7, #4]
 801516c:	f7f9 fa54 	bl	800e618 <pbuf_free>
      goto end;
 8015170:	e032      	b.n	80151d8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8015172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015174:	2b00      	cmp	r3, #0
 8015176:	d012      	beq.n	801519e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801517a:	699b      	ldr	r3, [r3, #24]
 801517c:	2b00      	cmp	r3, #0
 801517e:	d00a      	beq.n	8015196 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015182:	699c      	ldr	r4, [r3, #24]
 8015184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015186:	69d8      	ldr	r0, [r3, #28]
 8015188:	8a3b      	ldrh	r3, [r7, #16]
 801518a:	9300      	str	r3, [sp, #0]
 801518c:	4b1b      	ldr	r3, [pc, #108]	; (80151fc <udp_input+0x224>)
 801518e:	687a      	ldr	r2, [r7, #4]
 8015190:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015192:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015194:	e021      	b.n	80151da <udp_input+0x202>
        pbuf_free(p);
 8015196:	6878      	ldr	r0, [r7, #4]
 8015198:	f7f9 fa3e 	bl	800e618 <pbuf_free>
        goto end;
 801519c:	e01c      	b.n	80151d8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801519e:	7cfb      	ldrb	r3, [r7, #19]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d112      	bne.n	80151ca <udp_input+0x1f2>
 80151a4:	4b12      	ldr	r3, [pc, #72]	; (80151f0 <udp_input+0x218>)
 80151a6:	695b      	ldr	r3, [r3, #20]
 80151a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80151ac:	2be0      	cmp	r3, #224	; 0xe0
 80151ae:	d00c      	beq.n	80151ca <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80151b0:	4b0f      	ldr	r3, [pc, #60]	; (80151f0 <udp_input+0x218>)
 80151b2:	899b      	ldrh	r3, [r3, #12]
 80151b4:	3308      	adds	r3, #8
 80151b6:	b29b      	uxth	r3, r3
 80151b8:	b21b      	sxth	r3, r3
 80151ba:	4619      	mov	r1, r3
 80151bc:	6878      	ldr	r0, [r7, #4]
 80151be:	f7f9 fa18 	bl	800e5f2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80151c2:	2103      	movs	r1, #3
 80151c4:	6878      	ldr	r0, [r7, #4]
 80151c6:	f001 f89b 	bl	8016300 <icmp_dest_unreach>
      pbuf_free(p);
 80151ca:	6878      	ldr	r0, [r7, #4]
 80151cc:	f7f9 fa24 	bl	800e618 <pbuf_free>
  return;
 80151d0:	e003      	b.n	80151da <udp_input+0x202>
    pbuf_free(p);
 80151d2:	6878      	ldr	r0, [r7, #4]
 80151d4:	f7f9 fa20 	bl	800e618 <pbuf_free>
  return;
 80151d8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80151da:	372c      	adds	r7, #44	; 0x2c
 80151dc:	46bd      	mov	sp, r7
 80151de:	bd90      	pop	{r4, r7, pc}
 80151e0:	0801c76c 	.word	0x0801c76c
 80151e4:	0801c810 	.word	0x0801c810
 80151e8:	0801c7c0 	.word	0x0801c7c0
 80151ec:	0801c828 	.word	0x0801c828
 80151f0:	2000e2d0 	.word	0x2000e2d0
 80151f4:	20018bbc 	.word	0x20018bbc
 80151f8:	0801c844 	.word	0x0801c844
 80151fc:	2000e2e0 	.word	0x2000e2e0

08015200 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015200:	b480      	push	{r7}
 8015202:	b085      	sub	sp, #20
 8015204:	af00      	add	r7, sp, #0
 8015206:	6078      	str	r0, [r7, #4]
 8015208:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	2b00      	cmp	r3, #0
 801520e:	d01e      	beq.n	801524e <udp_netif_ip_addr_changed+0x4e>
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	681b      	ldr	r3, [r3, #0]
 8015214:	2b00      	cmp	r3, #0
 8015216:	d01a      	beq.n	801524e <udp_netif_ip_addr_changed+0x4e>
 8015218:	683b      	ldr	r3, [r7, #0]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d017      	beq.n	801524e <udp_netif_ip_addr_changed+0x4e>
 801521e:	683b      	ldr	r3, [r7, #0]
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	2b00      	cmp	r3, #0
 8015224:	d013      	beq.n	801524e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015226:	4b0d      	ldr	r3, [pc, #52]	; (801525c <udp_netif_ip_addr_changed+0x5c>)
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	60fb      	str	r3, [r7, #12]
 801522c:	e00c      	b.n	8015248 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801522e:	68fb      	ldr	r3, [r7, #12]
 8015230:	681a      	ldr	r2, [r3, #0]
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	429a      	cmp	r2, r3
 8015238:	d103      	bne.n	8015242 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801523a:	683b      	ldr	r3, [r7, #0]
 801523c:	681a      	ldr	r2, [r3, #0]
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	68db      	ldr	r3, [r3, #12]
 8015246:	60fb      	str	r3, [r7, #12]
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	2b00      	cmp	r3, #0
 801524c:	d1ef      	bne.n	801522e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801524e:	bf00      	nop
 8015250:	3714      	adds	r7, #20
 8015252:	46bd      	mov	sp, r7
 8015254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015258:	4770      	bx	lr
 801525a:	bf00      	nop
 801525c:	20018bbc 	.word	0x20018bbc

08015260 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015260:	b580      	push	{r7, lr}
 8015262:	b082      	sub	sp, #8
 8015264:	af00      	add	r7, sp, #0
 8015266:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015268:	4915      	ldr	r1, [pc, #84]	; (80152c0 <etharp_free_entry+0x60>)
 801526a:	687a      	ldr	r2, [r7, #4]
 801526c:	4613      	mov	r3, r2
 801526e:	005b      	lsls	r3, r3, #1
 8015270:	4413      	add	r3, r2
 8015272:	00db      	lsls	r3, r3, #3
 8015274:	440b      	add	r3, r1
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	2b00      	cmp	r3, #0
 801527a:	d013      	beq.n	80152a4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801527c:	4910      	ldr	r1, [pc, #64]	; (80152c0 <etharp_free_entry+0x60>)
 801527e:	687a      	ldr	r2, [r7, #4]
 8015280:	4613      	mov	r3, r2
 8015282:	005b      	lsls	r3, r3, #1
 8015284:	4413      	add	r3, r2
 8015286:	00db      	lsls	r3, r3, #3
 8015288:	440b      	add	r3, r1
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	4618      	mov	r0, r3
 801528e:	f7f9 f9c3 	bl	800e618 <pbuf_free>
    arp_table[i].q = NULL;
 8015292:	490b      	ldr	r1, [pc, #44]	; (80152c0 <etharp_free_entry+0x60>)
 8015294:	687a      	ldr	r2, [r7, #4]
 8015296:	4613      	mov	r3, r2
 8015298:	005b      	lsls	r3, r3, #1
 801529a:	4413      	add	r3, r2
 801529c:	00db      	lsls	r3, r3, #3
 801529e:	440b      	add	r3, r1
 80152a0:	2200      	movs	r2, #0
 80152a2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80152a4:	4906      	ldr	r1, [pc, #24]	; (80152c0 <etharp_free_entry+0x60>)
 80152a6:	687a      	ldr	r2, [r7, #4]
 80152a8:	4613      	mov	r3, r2
 80152aa:	005b      	lsls	r3, r3, #1
 80152ac:	4413      	add	r3, r2
 80152ae:	00db      	lsls	r3, r3, #3
 80152b0:	440b      	add	r3, r1
 80152b2:	3314      	adds	r3, #20
 80152b4:	2200      	movs	r2, #0
 80152b6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80152b8:	bf00      	nop
 80152ba:	3708      	adds	r7, #8
 80152bc:	46bd      	mov	sp, r7
 80152be:	bd80      	pop	{r7, pc}
 80152c0:	200052cc 	.word	0x200052cc

080152c4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80152c4:	b580      	push	{r7, lr}
 80152c6:	b082      	sub	sp, #8
 80152c8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80152ca:	2300      	movs	r3, #0
 80152cc:	607b      	str	r3, [r7, #4]
 80152ce:	e096      	b.n	80153fe <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80152d0:	494f      	ldr	r1, [pc, #316]	; (8015410 <etharp_tmr+0x14c>)
 80152d2:	687a      	ldr	r2, [r7, #4]
 80152d4:	4613      	mov	r3, r2
 80152d6:	005b      	lsls	r3, r3, #1
 80152d8:	4413      	add	r3, r2
 80152da:	00db      	lsls	r3, r3, #3
 80152dc:	440b      	add	r3, r1
 80152de:	3314      	adds	r3, #20
 80152e0:	781b      	ldrb	r3, [r3, #0]
 80152e2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80152e4:	78fb      	ldrb	r3, [r7, #3]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	f000 8086 	beq.w	80153f8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80152ec:	4948      	ldr	r1, [pc, #288]	; (8015410 <etharp_tmr+0x14c>)
 80152ee:	687a      	ldr	r2, [r7, #4]
 80152f0:	4613      	mov	r3, r2
 80152f2:	005b      	lsls	r3, r3, #1
 80152f4:	4413      	add	r3, r2
 80152f6:	00db      	lsls	r3, r3, #3
 80152f8:	440b      	add	r3, r1
 80152fa:	3312      	adds	r3, #18
 80152fc:	881b      	ldrh	r3, [r3, #0]
 80152fe:	3301      	adds	r3, #1
 8015300:	b298      	uxth	r0, r3
 8015302:	4943      	ldr	r1, [pc, #268]	; (8015410 <etharp_tmr+0x14c>)
 8015304:	687a      	ldr	r2, [r7, #4]
 8015306:	4613      	mov	r3, r2
 8015308:	005b      	lsls	r3, r3, #1
 801530a:	4413      	add	r3, r2
 801530c:	00db      	lsls	r3, r3, #3
 801530e:	440b      	add	r3, r1
 8015310:	3312      	adds	r3, #18
 8015312:	4602      	mov	r2, r0
 8015314:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015316:	493e      	ldr	r1, [pc, #248]	; (8015410 <etharp_tmr+0x14c>)
 8015318:	687a      	ldr	r2, [r7, #4]
 801531a:	4613      	mov	r3, r2
 801531c:	005b      	lsls	r3, r3, #1
 801531e:	4413      	add	r3, r2
 8015320:	00db      	lsls	r3, r3, #3
 8015322:	440b      	add	r3, r1
 8015324:	3312      	adds	r3, #18
 8015326:	881b      	ldrh	r3, [r3, #0]
 8015328:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801532c:	d215      	bcs.n	801535a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801532e:	4938      	ldr	r1, [pc, #224]	; (8015410 <etharp_tmr+0x14c>)
 8015330:	687a      	ldr	r2, [r7, #4]
 8015332:	4613      	mov	r3, r2
 8015334:	005b      	lsls	r3, r3, #1
 8015336:	4413      	add	r3, r2
 8015338:	00db      	lsls	r3, r3, #3
 801533a:	440b      	add	r3, r1
 801533c:	3314      	adds	r3, #20
 801533e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015340:	2b01      	cmp	r3, #1
 8015342:	d10e      	bne.n	8015362 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015344:	4932      	ldr	r1, [pc, #200]	; (8015410 <etharp_tmr+0x14c>)
 8015346:	687a      	ldr	r2, [r7, #4]
 8015348:	4613      	mov	r3, r2
 801534a:	005b      	lsls	r3, r3, #1
 801534c:	4413      	add	r3, r2
 801534e:	00db      	lsls	r3, r3, #3
 8015350:	440b      	add	r3, r1
 8015352:	3312      	adds	r3, #18
 8015354:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015356:	2b04      	cmp	r3, #4
 8015358:	d903      	bls.n	8015362 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801535a:	6878      	ldr	r0, [r7, #4]
 801535c:	f7ff ff80 	bl	8015260 <etharp_free_entry>
 8015360:	e04a      	b.n	80153f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015362:	492b      	ldr	r1, [pc, #172]	; (8015410 <etharp_tmr+0x14c>)
 8015364:	687a      	ldr	r2, [r7, #4]
 8015366:	4613      	mov	r3, r2
 8015368:	005b      	lsls	r3, r3, #1
 801536a:	4413      	add	r3, r2
 801536c:	00db      	lsls	r3, r3, #3
 801536e:	440b      	add	r3, r1
 8015370:	3314      	adds	r3, #20
 8015372:	781b      	ldrb	r3, [r3, #0]
 8015374:	2b03      	cmp	r3, #3
 8015376:	d10a      	bne.n	801538e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015378:	4925      	ldr	r1, [pc, #148]	; (8015410 <etharp_tmr+0x14c>)
 801537a:	687a      	ldr	r2, [r7, #4]
 801537c:	4613      	mov	r3, r2
 801537e:	005b      	lsls	r3, r3, #1
 8015380:	4413      	add	r3, r2
 8015382:	00db      	lsls	r3, r3, #3
 8015384:	440b      	add	r3, r1
 8015386:	3314      	adds	r3, #20
 8015388:	2204      	movs	r2, #4
 801538a:	701a      	strb	r2, [r3, #0]
 801538c:	e034      	b.n	80153f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801538e:	4920      	ldr	r1, [pc, #128]	; (8015410 <etharp_tmr+0x14c>)
 8015390:	687a      	ldr	r2, [r7, #4]
 8015392:	4613      	mov	r3, r2
 8015394:	005b      	lsls	r3, r3, #1
 8015396:	4413      	add	r3, r2
 8015398:	00db      	lsls	r3, r3, #3
 801539a:	440b      	add	r3, r1
 801539c:	3314      	adds	r3, #20
 801539e:	781b      	ldrb	r3, [r3, #0]
 80153a0:	2b04      	cmp	r3, #4
 80153a2:	d10a      	bne.n	80153ba <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80153a4:	491a      	ldr	r1, [pc, #104]	; (8015410 <etharp_tmr+0x14c>)
 80153a6:	687a      	ldr	r2, [r7, #4]
 80153a8:	4613      	mov	r3, r2
 80153aa:	005b      	lsls	r3, r3, #1
 80153ac:	4413      	add	r3, r2
 80153ae:	00db      	lsls	r3, r3, #3
 80153b0:	440b      	add	r3, r1
 80153b2:	3314      	adds	r3, #20
 80153b4:	2202      	movs	r2, #2
 80153b6:	701a      	strb	r2, [r3, #0]
 80153b8:	e01e      	b.n	80153f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80153ba:	4915      	ldr	r1, [pc, #84]	; (8015410 <etharp_tmr+0x14c>)
 80153bc:	687a      	ldr	r2, [r7, #4]
 80153be:	4613      	mov	r3, r2
 80153c0:	005b      	lsls	r3, r3, #1
 80153c2:	4413      	add	r3, r2
 80153c4:	00db      	lsls	r3, r3, #3
 80153c6:	440b      	add	r3, r1
 80153c8:	3314      	adds	r3, #20
 80153ca:	781b      	ldrb	r3, [r3, #0]
 80153cc:	2b01      	cmp	r3, #1
 80153ce:	d113      	bne.n	80153f8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80153d0:	490f      	ldr	r1, [pc, #60]	; (8015410 <etharp_tmr+0x14c>)
 80153d2:	687a      	ldr	r2, [r7, #4]
 80153d4:	4613      	mov	r3, r2
 80153d6:	005b      	lsls	r3, r3, #1
 80153d8:	4413      	add	r3, r2
 80153da:	00db      	lsls	r3, r3, #3
 80153dc:	440b      	add	r3, r1
 80153de:	3308      	adds	r3, #8
 80153e0:	6818      	ldr	r0, [r3, #0]
 80153e2:	687a      	ldr	r2, [r7, #4]
 80153e4:	4613      	mov	r3, r2
 80153e6:	005b      	lsls	r3, r3, #1
 80153e8:	4413      	add	r3, r2
 80153ea:	00db      	lsls	r3, r3, #3
 80153ec:	4a08      	ldr	r2, [pc, #32]	; (8015410 <etharp_tmr+0x14c>)
 80153ee:	4413      	add	r3, r2
 80153f0:	3304      	adds	r3, #4
 80153f2:	4619      	mov	r1, r3
 80153f4:	f000 fe6e 	bl	80160d4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	3301      	adds	r3, #1
 80153fc:	607b      	str	r3, [r7, #4]
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	2b09      	cmp	r3, #9
 8015402:	f77f af65 	ble.w	80152d0 <etharp_tmr+0xc>
      }
    }
  }
}
 8015406:	bf00      	nop
 8015408:	bf00      	nop
 801540a:	3708      	adds	r7, #8
 801540c:	46bd      	mov	sp, r7
 801540e:	bd80      	pop	{r7, pc}
 8015410:	200052cc 	.word	0x200052cc

08015414 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015414:	b580      	push	{r7, lr}
 8015416:	b08a      	sub	sp, #40	; 0x28
 8015418:	af00      	add	r7, sp, #0
 801541a:	60f8      	str	r0, [r7, #12]
 801541c:	460b      	mov	r3, r1
 801541e:	607a      	str	r2, [r7, #4]
 8015420:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015422:	230a      	movs	r3, #10
 8015424:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015426:	230a      	movs	r3, #10
 8015428:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801542a:	230a      	movs	r3, #10
 801542c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801542e:	2300      	movs	r3, #0
 8015430:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015432:	230a      	movs	r3, #10
 8015434:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015436:	2300      	movs	r3, #0
 8015438:	83bb      	strh	r3, [r7, #28]
 801543a:	2300      	movs	r3, #0
 801543c:	837b      	strh	r3, [r7, #26]
 801543e:	2300      	movs	r3, #0
 8015440:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015442:	2300      	movs	r3, #0
 8015444:	843b      	strh	r3, [r7, #32]
 8015446:	e0ae      	b.n	80155a6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015448:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801544c:	49a6      	ldr	r1, [pc, #664]	; (80156e8 <etharp_find_entry+0x2d4>)
 801544e:	4613      	mov	r3, r2
 8015450:	005b      	lsls	r3, r3, #1
 8015452:	4413      	add	r3, r2
 8015454:	00db      	lsls	r3, r3, #3
 8015456:	440b      	add	r3, r1
 8015458:	3314      	adds	r3, #20
 801545a:	781b      	ldrb	r3, [r3, #0]
 801545c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801545e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015462:	2b0a      	cmp	r3, #10
 8015464:	d105      	bne.n	8015472 <etharp_find_entry+0x5e>
 8015466:	7dfb      	ldrb	r3, [r7, #23]
 8015468:	2b00      	cmp	r3, #0
 801546a:	d102      	bne.n	8015472 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801546c:	8c3b      	ldrh	r3, [r7, #32]
 801546e:	847b      	strh	r3, [r7, #34]	; 0x22
 8015470:	e095      	b.n	801559e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015472:	7dfb      	ldrb	r3, [r7, #23]
 8015474:	2b00      	cmp	r3, #0
 8015476:	f000 8092 	beq.w	801559e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801547a:	7dfb      	ldrb	r3, [r7, #23]
 801547c:	2b01      	cmp	r3, #1
 801547e:	d009      	beq.n	8015494 <etharp_find_entry+0x80>
 8015480:	7dfb      	ldrb	r3, [r7, #23]
 8015482:	2b01      	cmp	r3, #1
 8015484:	d806      	bhi.n	8015494 <etharp_find_entry+0x80>
 8015486:	4b99      	ldr	r3, [pc, #612]	; (80156ec <etharp_find_entry+0x2d8>)
 8015488:	f240 1223 	movw	r2, #291	; 0x123
 801548c:	4998      	ldr	r1, [pc, #608]	; (80156f0 <etharp_find_entry+0x2dc>)
 801548e:	4899      	ldr	r0, [pc, #612]	; (80156f4 <etharp_find_entry+0x2e0>)
 8015490:	f002 fcd6 	bl	8017e40 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d020      	beq.n	80154dc <etharp_find_entry+0xc8>
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	6819      	ldr	r1, [r3, #0]
 801549e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154a2:	4891      	ldr	r0, [pc, #580]	; (80156e8 <etharp_find_entry+0x2d4>)
 80154a4:	4613      	mov	r3, r2
 80154a6:	005b      	lsls	r3, r3, #1
 80154a8:	4413      	add	r3, r2
 80154aa:	00db      	lsls	r3, r3, #3
 80154ac:	4403      	add	r3, r0
 80154ae:	3304      	adds	r3, #4
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	4299      	cmp	r1, r3
 80154b4:	d112      	bne.n	80154dc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d00c      	beq.n	80154d6 <etharp_find_entry+0xc2>
 80154bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154c0:	4989      	ldr	r1, [pc, #548]	; (80156e8 <etharp_find_entry+0x2d4>)
 80154c2:	4613      	mov	r3, r2
 80154c4:	005b      	lsls	r3, r3, #1
 80154c6:	4413      	add	r3, r2
 80154c8:	00db      	lsls	r3, r3, #3
 80154ca:	440b      	add	r3, r1
 80154cc:	3308      	adds	r3, #8
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	687a      	ldr	r2, [r7, #4]
 80154d2:	429a      	cmp	r2, r3
 80154d4:	d102      	bne.n	80154dc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80154d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80154da:	e100      	b.n	80156de <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80154dc:	7dfb      	ldrb	r3, [r7, #23]
 80154de:	2b01      	cmp	r3, #1
 80154e0:	d140      	bne.n	8015564 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80154e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154e6:	4980      	ldr	r1, [pc, #512]	; (80156e8 <etharp_find_entry+0x2d4>)
 80154e8:	4613      	mov	r3, r2
 80154ea:	005b      	lsls	r3, r3, #1
 80154ec:	4413      	add	r3, r2
 80154ee:	00db      	lsls	r3, r3, #3
 80154f0:	440b      	add	r3, r1
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d01a      	beq.n	801552e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80154f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154fc:	497a      	ldr	r1, [pc, #488]	; (80156e8 <etharp_find_entry+0x2d4>)
 80154fe:	4613      	mov	r3, r2
 8015500:	005b      	lsls	r3, r3, #1
 8015502:	4413      	add	r3, r2
 8015504:	00db      	lsls	r3, r3, #3
 8015506:	440b      	add	r3, r1
 8015508:	3312      	adds	r3, #18
 801550a:	881b      	ldrh	r3, [r3, #0]
 801550c:	8bba      	ldrh	r2, [r7, #28]
 801550e:	429a      	cmp	r2, r3
 8015510:	d845      	bhi.n	801559e <etharp_find_entry+0x18a>
            old_queue = i;
 8015512:	8c3b      	ldrh	r3, [r7, #32]
 8015514:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015516:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801551a:	4973      	ldr	r1, [pc, #460]	; (80156e8 <etharp_find_entry+0x2d4>)
 801551c:	4613      	mov	r3, r2
 801551e:	005b      	lsls	r3, r3, #1
 8015520:	4413      	add	r3, r2
 8015522:	00db      	lsls	r3, r3, #3
 8015524:	440b      	add	r3, r1
 8015526:	3312      	adds	r3, #18
 8015528:	881b      	ldrh	r3, [r3, #0]
 801552a:	83bb      	strh	r3, [r7, #28]
 801552c:	e037      	b.n	801559e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801552e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015532:	496d      	ldr	r1, [pc, #436]	; (80156e8 <etharp_find_entry+0x2d4>)
 8015534:	4613      	mov	r3, r2
 8015536:	005b      	lsls	r3, r3, #1
 8015538:	4413      	add	r3, r2
 801553a:	00db      	lsls	r3, r3, #3
 801553c:	440b      	add	r3, r1
 801553e:	3312      	adds	r3, #18
 8015540:	881b      	ldrh	r3, [r3, #0]
 8015542:	8b7a      	ldrh	r2, [r7, #26]
 8015544:	429a      	cmp	r2, r3
 8015546:	d82a      	bhi.n	801559e <etharp_find_entry+0x18a>
            old_pending = i;
 8015548:	8c3b      	ldrh	r3, [r7, #32]
 801554a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801554c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015550:	4965      	ldr	r1, [pc, #404]	; (80156e8 <etharp_find_entry+0x2d4>)
 8015552:	4613      	mov	r3, r2
 8015554:	005b      	lsls	r3, r3, #1
 8015556:	4413      	add	r3, r2
 8015558:	00db      	lsls	r3, r3, #3
 801555a:	440b      	add	r3, r1
 801555c:	3312      	adds	r3, #18
 801555e:	881b      	ldrh	r3, [r3, #0]
 8015560:	837b      	strh	r3, [r7, #26]
 8015562:	e01c      	b.n	801559e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015564:	7dfb      	ldrb	r3, [r7, #23]
 8015566:	2b01      	cmp	r3, #1
 8015568:	d919      	bls.n	801559e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801556a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801556e:	495e      	ldr	r1, [pc, #376]	; (80156e8 <etharp_find_entry+0x2d4>)
 8015570:	4613      	mov	r3, r2
 8015572:	005b      	lsls	r3, r3, #1
 8015574:	4413      	add	r3, r2
 8015576:	00db      	lsls	r3, r3, #3
 8015578:	440b      	add	r3, r1
 801557a:	3312      	adds	r3, #18
 801557c:	881b      	ldrh	r3, [r3, #0]
 801557e:	8b3a      	ldrh	r2, [r7, #24]
 8015580:	429a      	cmp	r2, r3
 8015582:	d80c      	bhi.n	801559e <etharp_find_entry+0x18a>
            old_stable = i;
 8015584:	8c3b      	ldrh	r3, [r7, #32]
 8015586:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015588:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801558c:	4956      	ldr	r1, [pc, #344]	; (80156e8 <etharp_find_entry+0x2d4>)
 801558e:	4613      	mov	r3, r2
 8015590:	005b      	lsls	r3, r3, #1
 8015592:	4413      	add	r3, r2
 8015594:	00db      	lsls	r3, r3, #3
 8015596:	440b      	add	r3, r1
 8015598:	3312      	adds	r3, #18
 801559a:	881b      	ldrh	r3, [r3, #0]
 801559c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801559e:	8c3b      	ldrh	r3, [r7, #32]
 80155a0:	3301      	adds	r3, #1
 80155a2:	b29b      	uxth	r3, r3
 80155a4:	843b      	strh	r3, [r7, #32]
 80155a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80155aa:	2b09      	cmp	r3, #9
 80155ac:	f77f af4c 	ble.w	8015448 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80155b0:	7afb      	ldrb	r3, [r7, #11]
 80155b2:	f003 0302 	and.w	r3, r3, #2
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d108      	bne.n	80155cc <etharp_find_entry+0x1b8>
 80155ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80155be:	2b0a      	cmp	r3, #10
 80155c0:	d107      	bne.n	80155d2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80155c2:	7afb      	ldrb	r3, [r7, #11]
 80155c4:	f003 0301 	and.w	r3, r3, #1
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	d102      	bne.n	80155d2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80155cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80155d0:	e085      	b.n	80156de <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80155d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80155d6:	2b09      	cmp	r3, #9
 80155d8:	dc02      	bgt.n	80155e0 <etharp_find_entry+0x1cc>
    i = empty;
 80155da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80155dc:	843b      	strh	r3, [r7, #32]
 80155de:	e039      	b.n	8015654 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80155e0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80155e4:	2b09      	cmp	r3, #9
 80155e6:	dc14      	bgt.n	8015612 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80155e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80155ea:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80155ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80155f0:	493d      	ldr	r1, [pc, #244]	; (80156e8 <etharp_find_entry+0x2d4>)
 80155f2:	4613      	mov	r3, r2
 80155f4:	005b      	lsls	r3, r3, #1
 80155f6:	4413      	add	r3, r2
 80155f8:	00db      	lsls	r3, r3, #3
 80155fa:	440b      	add	r3, r1
 80155fc:	681b      	ldr	r3, [r3, #0]
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d018      	beq.n	8015634 <etharp_find_entry+0x220>
 8015602:	4b3a      	ldr	r3, [pc, #232]	; (80156ec <etharp_find_entry+0x2d8>)
 8015604:	f240 126d 	movw	r2, #365	; 0x16d
 8015608:	493b      	ldr	r1, [pc, #236]	; (80156f8 <etharp_find_entry+0x2e4>)
 801560a:	483a      	ldr	r0, [pc, #232]	; (80156f4 <etharp_find_entry+0x2e0>)
 801560c:	f002 fc18 	bl	8017e40 <iprintf>
 8015610:	e010      	b.n	8015634 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015612:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015616:	2b09      	cmp	r3, #9
 8015618:	dc02      	bgt.n	8015620 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801561a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801561c:	843b      	strh	r3, [r7, #32]
 801561e:	e009      	b.n	8015634 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015620:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015624:	2b09      	cmp	r3, #9
 8015626:	dc02      	bgt.n	801562e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015628:	8bfb      	ldrh	r3, [r7, #30]
 801562a:	843b      	strh	r3, [r7, #32]
 801562c:	e002      	b.n	8015634 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801562e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015632:	e054      	b.n	80156de <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015634:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015638:	2b09      	cmp	r3, #9
 801563a:	dd06      	ble.n	801564a <etharp_find_entry+0x236>
 801563c:	4b2b      	ldr	r3, [pc, #172]	; (80156ec <etharp_find_entry+0x2d8>)
 801563e:	f240 127f 	movw	r2, #383	; 0x17f
 8015642:	492e      	ldr	r1, [pc, #184]	; (80156fc <etharp_find_entry+0x2e8>)
 8015644:	482b      	ldr	r0, [pc, #172]	; (80156f4 <etharp_find_entry+0x2e0>)
 8015646:	f002 fbfb 	bl	8017e40 <iprintf>
    etharp_free_entry(i);
 801564a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801564e:	4618      	mov	r0, r3
 8015650:	f7ff fe06 	bl	8015260 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015654:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015658:	2b09      	cmp	r3, #9
 801565a:	dd06      	ble.n	801566a <etharp_find_entry+0x256>
 801565c:	4b23      	ldr	r3, [pc, #140]	; (80156ec <etharp_find_entry+0x2d8>)
 801565e:	f240 1283 	movw	r2, #387	; 0x183
 8015662:	4926      	ldr	r1, [pc, #152]	; (80156fc <etharp_find_entry+0x2e8>)
 8015664:	4823      	ldr	r0, [pc, #140]	; (80156f4 <etharp_find_entry+0x2e0>)
 8015666:	f002 fbeb 	bl	8017e40 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801566a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801566e:	491e      	ldr	r1, [pc, #120]	; (80156e8 <etharp_find_entry+0x2d4>)
 8015670:	4613      	mov	r3, r2
 8015672:	005b      	lsls	r3, r3, #1
 8015674:	4413      	add	r3, r2
 8015676:	00db      	lsls	r3, r3, #3
 8015678:	440b      	add	r3, r1
 801567a:	3314      	adds	r3, #20
 801567c:	781b      	ldrb	r3, [r3, #0]
 801567e:	2b00      	cmp	r3, #0
 8015680:	d006      	beq.n	8015690 <etharp_find_entry+0x27c>
 8015682:	4b1a      	ldr	r3, [pc, #104]	; (80156ec <etharp_find_entry+0x2d8>)
 8015684:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015688:	491d      	ldr	r1, [pc, #116]	; (8015700 <etharp_find_entry+0x2ec>)
 801568a:	481a      	ldr	r0, [pc, #104]	; (80156f4 <etharp_find_entry+0x2e0>)
 801568c:	f002 fbd8 	bl	8017e40 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	2b00      	cmp	r3, #0
 8015694:	d00b      	beq.n	80156ae <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015696:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	6819      	ldr	r1, [r3, #0]
 801569e:	4812      	ldr	r0, [pc, #72]	; (80156e8 <etharp_find_entry+0x2d4>)
 80156a0:	4613      	mov	r3, r2
 80156a2:	005b      	lsls	r3, r3, #1
 80156a4:	4413      	add	r3, r2
 80156a6:	00db      	lsls	r3, r3, #3
 80156a8:	4403      	add	r3, r0
 80156aa:	3304      	adds	r3, #4
 80156ac:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80156ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80156b2:	490d      	ldr	r1, [pc, #52]	; (80156e8 <etharp_find_entry+0x2d4>)
 80156b4:	4613      	mov	r3, r2
 80156b6:	005b      	lsls	r3, r3, #1
 80156b8:	4413      	add	r3, r2
 80156ba:	00db      	lsls	r3, r3, #3
 80156bc:	440b      	add	r3, r1
 80156be:	3312      	adds	r3, #18
 80156c0:	2200      	movs	r2, #0
 80156c2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80156c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80156c8:	4907      	ldr	r1, [pc, #28]	; (80156e8 <etharp_find_entry+0x2d4>)
 80156ca:	4613      	mov	r3, r2
 80156cc:	005b      	lsls	r3, r3, #1
 80156ce:	4413      	add	r3, r2
 80156d0:	00db      	lsls	r3, r3, #3
 80156d2:	440b      	add	r3, r1
 80156d4:	3308      	adds	r3, #8
 80156d6:	687a      	ldr	r2, [r7, #4]
 80156d8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80156da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80156de:	4618      	mov	r0, r3
 80156e0:	3728      	adds	r7, #40	; 0x28
 80156e2:	46bd      	mov	sp, r7
 80156e4:	bd80      	pop	{r7, pc}
 80156e6:	bf00      	nop
 80156e8:	200052cc 	.word	0x200052cc
 80156ec:	0801cad0 	.word	0x0801cad0
 80156f0:	0801cb08 	.word	0x0801cb08
 80156f4:	0801cb48 	.word	0x0801cb48
 80156f8:	0801cb70 	.word	0x0801cb70
 80156fc:	0801cb88 	.word	0x0801cb88
 8015700:	0801cb9c 	.word	0x0801cb9c

08015704 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015704:	b580      	push	{r7, lr}
 8015706:	b088      	sub	sp, #32
 8015708:	af02      	add	r7, sp, #8
 801570a:	60f8      	str	r0, [r7, #12]
 801570c:	60b9      	str	r1, [r7, #8]
 801570e:	607a      	str	r2, [r7, #4]
 8015710:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015718:	2b06      	cmp	r3, #6
 801571a:	d006      	beq.n	801572a <etharp_update_arp_entry+0x26>
 801571c:	4b48      	ldr	r3, [pc, #288]	; (8015840 <etharp_update_arp_entry+0x13c>)
 801571e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015722:	4948      	ldr	r1, [pc, #288]	; (8015844 <etharp_update_arp_entry+0x140>)
 8015724:	4848      	ldr	r0, [pc, #288]	; (8015848 <etharp_update_arp_entry+0x144>)
 8015726:	f002 fb8b 	bl	8017e40 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801572a:	68bb      	ldr	r3, [r7, #8]
 801572c:	2b00      	cmp	r3, #0
 801572e:	d012      	beq.n	8015756 <etharp_update_arp_entry+0x52>
 8015730:	68bb      	ldr	r3, [r7, #8]
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	2b00      	cmp	r3, #0
 8015736:	d00e      	beq.n	8015756 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015738:	68bb      	ldr	r3, [r7, #8]
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	68f9      	ldr	r1, [r7, #12]
 801573e:	4618      	mov	r0, r3
 8015740:	f001 f8fe 	bl	8016940 <ip4_addr_isbroadcast_u32>
 8015744:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015746:	2b00      	cmp	r3, #0
 8015748:	d105      	bne.n	8015756 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801574a:	68bb      	ldr	r3, [r7, #8]
 801574c:	681b      	ldr	r3, [r3, #0]
 801574e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015752:	2be0      	cmp	r3, #224	; 0xe0
 8015754:	d102      	bne.n	801575c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015756:	f06f 030f 	mvn.w	r3, #15
 801575a:	e06c      	b.n	8015836 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801575c:	78fb      	ldrb	r3, [r7, #3]
 801575e:	68fa      	ldr	r2, [r7, #12]
 8015760:	4619      	mov	r1, r3
 8015762:	68b8      	ldr	r0, [r7, #8]
 8015764:	f7ff fe56 	bl	8015414 <etharp_find_entry>
 8015768:	4603      	mov	r3, r0
 801576a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801576c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015770:	2b00      	cmp	r3, #0
 8015772:	da02      	bge.n	801577a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015774:	8afb      	ldrh	r3, [r7, #22]
 8015776:	b25b      	sxtb	r3, r3
 8015778:	e05d      	b.n	8015836 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801577a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801577e:	4933      	ldr	r1, [pc, #204]	; (801584c <etharp_update_arp_entry+0x148>)
 8015780:	4613      	mov	r3, r2
 8015782:	005b      	lsls	r3, r3, #1
 8015784:	4413      	add	r3, r2
 8015786:	00db      	lsls	r3, r3, #3
 8015788:	440b      	add	r3, r1
 801578a:	3314      	adds	r3, #20
 801578c:	2202      	movs	r2, #2
 801578e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015790:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015794:	492d      	ldr	r1, [pc, #180]	; (801584c <etharp_update_arp_entry+0x148>)
 8015796:	4613      	mov	r3, r2
 8015798:	005b      	lsls	r3, r3, #1
 801579a:	4413      	add	r3, r2
 801579c:	00db      	lsls	r3, r3, #3
 801579e:	440b      	add	r3, r1
 80157a0:	3308      	adds	r3, #8
 80157a2:	68fa      	ldr	r2, [r7, #12]
 80157a4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80157a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80157aa:	4613      	mov	r3, r2
 80157ac:	005b      	lsls	r3, r3, #1
 80157ae:	4413      	add	r3, r2
 80157b0:	00db      	lsls	r3, r3, #3
 80157b2:	3308      	adds	r3, #8
 80157b4:	4a25      	ldr	r2, [pc, #148]	; (801584c <etharp_update_arp_entry+0x148>)
 80157b6:	4413      	add	r3, r2
 80157b8:	3304      	adds	r3, #4
 80157ba:	2206      	movs	r2, #6
 80157bc:	6879      	ldr	r1, [r7, #4]
 80157be:	4618      	mov	r0, r3
 80157c0:	f002 fa64 	bl	8017c8c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80157c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80157c8:	4920      	ldr	r1, [pc, #128]	; (801584c <etharp_update_arp_entry+0x148>)
 80157ca:	4613      	mov	r3, r2
 80157cc:	005b      	lsls	r3, r3, #1
 80157ce:	4413      	add	r3, r2
 80157d0:	00db      	lsls	r3, r3, #3
 80157d2:	440b      	add	r3, r1
 80157d4:	3312      	adds	r3, #18
 80157d6:	2200      	movs	r2, #0
 80157d8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80157da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80157de:	491b      	ldr	r1, [pc, #108]	; (801584c <etharp_update_arp_entry+0x148>)
 80157e0:	4613      	mov	r3, r2
 80157e2:	005b      	lsls	r3, r3, #1
 80157e4:	4413      	add	r3, r2
 80157e6:	00db      	lsls	r3, r3, #3
 80157e8:	440b      	add	r3, r1
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d021      	beq.n	8015834 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80157f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80157f4:	4915      	ldr	r1, [pc, #84]	; (801584c <etharp_update_arp_entry+0x148>)
 80157f6:	4613      	mov	r3, r2
 80157f8:	005b      	lsls	r3, r3, #1
 80157fa:	4413      	add	r3, r2
 80157fc:	00db      	lsls	r3, r3, #3
 80157fe:	440b      	add	r3, r1
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015804:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015808:	4910      	ldr	r1, [pc, #64]	; (801584c <etharp_update_arp_entry+0x148>)
 801580a:	4613      	mov	r3, r2
 801580c:	005b      	lsls	r3, r3, #1
 801580e:	4413      	add	r3, r2
 8015810:	00db      	lsls	r3, r3, #3
 8015812:	440b      	add	r3, r1
 8015814:	2200      	movs	r2, #0
 8015816:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801581e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015822:	9300      	str	r3, [sp, #0]
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	6939      	ldr	r1, [r7, #16]
 8015828:	68f8      	ldr	r0, [r7, #12]
 801582a:	f001 ff91 	bl	8017750 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801582e:	6938      	ldr	r0, [r7, #16]
 8015830:	f7f8 fef2 	bl	800e618 <pbuf_free>
  }
  return ERR_OK;
 8015834:	2300      	movs	r3, #0
}
 8015836:	4618      	mov	r0, r3
 8015838:	3718      	adds	r7, #24
 801583a:	46bd      	mov	sp, r7
 801583c:	bd80      	pop	{r7, pc}
 801583e:	bf00      	nop
 8015840:	0801cad0 	.word	0x0801cad0
 8015844:	0801cbc8 	.word	0x0801cbc8
 8015848:	0801cb48 	.word	0x0801cb48
 801584c:	200052cc 	.word	0x200052cc

08015850 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015850:	b580      	push	{r7, lr}
 8015852:	b084      	sub	sp, #16
 8015854:	af00      	add	r7, sp, #0
 8015856:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015858:	2300      	movs	r3, #0
 801585a:	60fb      	str	r3, [r7, #12]
 801585c:	e01e      	b.n	801589c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801585e:	4913      	ldr	r1, [pc, #76]	; (80158ac <etharp_cleanup_netif+0x5c>)
 8015860:	68fa      	ldr	r2, [r7, #12]
 8015862:	4613      	mov	r3, r2
 8015864:	005b      	lsls	r3, r3, #1
 8015866:	4413      	add	r3, r2
 8015868:	00db      	lsls	r3, r3, #3
 801586a:	440b      	add	r3, r1
 801586c:	3314      	adds	r3, #20
 801586e:	781b      	ldrb	r3, [r3, #0]
 8015870:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015872:	7afb      	ldrb	r3, [r7, #11]
 8015874:	2b00      	cmp	r3, #0
 8015876:	d00e      	beq.n	8015896 <etharp_cleanup_netif+0x46>
 8015878:	490c      	ldr	r1, [pc, #48]	; (80158ac <etharp_cleanup_netif+0x5c>)
 801587a:	68fa      	ldr	r2, [r7, #12]
 801587c:	4613      	mov	r3, r2
 801587e:	005b      	lsls	r3, r3, #1
 8015880:	4413      	add	r3, r2
 8015882:	00db      	lsls	r3, r3, #3
 8015884:	440b      	add	r3, r1
 8015886:	3308      	adds	r3, #8
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	687a      	ldr	r2, [r7, #4]
 801588c:	429a      	cmp	r2, r3
 801588e:	d102      	bne.n	8015896 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015890:	68f8      	ldr	r0, [r7, #12]
 8015892:	f7ff fce5 	bl	8015260 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	3301      	adds	r3, #1
 801589a:	60fb      	str	r3, [r7, #12]
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	2b09      	cmp	r3, #9
 80158a0:	dddd      	ble.n	801585e <etharp_cleanup_netif+0xe>
    }
  }
}
 80158a2:	bf00      	nop
 80158a4:	bf00      	nop
 80158a6:	3710      	adds	r7, #16
 80158a8:	46bd      	mov	sp, r7
 80158aa:	bd80      	pop	{r7, pc}
 80158ac:	200052cc 	.word	0x200052cc

080158b0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80158b0:	b5b0      	push	{r4, r5, r7, lr}
 80158b2:	b08a      	sub	sp, #40	; 0x28
 80158b4:	af04      	add	r7, sp, #16
 80158b6:	6078      	str	r0, [r7, #4]
 80158b8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80158ba:	683b      	ldr	r3, [r7, #0]
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d107      	bne.n	80158d0 <etharp_input+0x20>
 80158c0:	4b3d      	ldr	r3, [pc, #244]	; (80159b8 <etharp_input+0x108>)
 80158c2:	f240 228a 	movw	r2, #650	; 0x28a
 80158c6:	493d      	ldr	r1, [pc, #244]	; (80159bc <etharp_input+0x10c>)
 80158c8:	483d      	ldr	r0, [pc, #244]	; (80159c0 <etharp_input+0x110>)
 80158ca:	f002 fab9 	bl	8017e40 <iprintf>
 80158ce:	e06f      	b.n	80159b0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	685b      	ldr	r3, [r3, #4]
 80158d4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80158d6:	693b      	ldr	r3, [r7, #16]
 80158d8:	881b      	ldrh	r3, [r3, #0]
 80158da:	b29b      	uxth	r3, r3
 80158dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80158e0:	d10c      	bne.n	80158fc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80158e2:	693b      	ldr	r3, [r7, #16]
 80158e4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80158e6:	2b06      	cmp	r3, #6
 80158e8:	d108      	bne.n	80158fc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80158ea:	693b      	ldr	r3, [r7, #16]
 80158ec:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80158ee:	2b04      	cmp	r3, #4
 80158f0:	d104      	bne.n	80158fc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80158f2:	693b      	ldr	r3, [r7, #16]
 80158f4:	885b      	ldrh	r3, [r3, #2]
 80158f6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80158f8:	2b08      	cmp	r3, #8
 80158fa:	d003      	beq.n	8015904 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80158fc:	6878      	ldr	r0, [r7, #4]
 80158fe:	f7f8 fe8b 	bl	800e618 <pbuf_free>
    return;
 8015902:	e055      	b.n	80159b0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015904:	693b      	ldr	r3, [r7, #16]
 8015906:	330e      	adds	r3, #14
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801590c:	693b      	ldr	r3, [r7, #16]
 801590e:	3318      	adds	r3, #24
 8015910:	681b      	ldr	r3, [r3, #0]
 8015912:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015914:	683b      	ldr	r3, [r7, #0]
 8015916:	3304      	adds	r3, #4
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	2b00      	cmp	r3, #0
 801591c:	d102      	bne.n	8015924 <etharp_input+0x74>
    for_us = 0;
 801591e:	2300      	movs	r3, #0
 8015920:	75fb      	strb	r3, [r7, #23]
 8015922:	e009      	b.n	8015938 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015924:	68ba      	ldr	r2, [r7, #8]
 8015926:	683b      	ldr	r3, [r7, #0]
 8015928:	3304      	adds	r3, #4
 801592a:	681b      	ldr	r3, [r3, #0]
 801592c:	429a      	cmp	r2, r3
 801592e:	bf0c      	ite	eq
 8015930:	2301      	moveq	r3, #1
 8015932:	2300      	movne	r3, #0
 8015934:	b2db      	uxtb	r3, r3
 8015936:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015938:	693b      	ldr	r3, [r7, #16]
 801593a:	f103 0208 	add.w	r2, r3, #8
 801593e:	7dfb      	ldrb	r3, [r7, #23]
 8015940:	2b00      	cmp	r3, #0
 8015942:	d001      	beq.n	8015948 <etharp_input+0x98>
 8015944:	2301      	movs	r3, #1
 8015946:	e000      	b.n	801594a <etharp_input+0x9a>
 8015948:	2302      	movs	r3, #2
 801594a:	f107 010c 	add.w	r1, r7, #12
 801594e:	6838      	ldr	r0, [r7, #0]
 8015950:	f7ff fed8 	bl	8015704 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015954:	693b      	ldr	r3, [r7, #16]
 8015956:	88db      	ldrh	r3, [r3, #6]
 8015958:	b29b      	uxth	r3, r3
 801595a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801595e:	d003      	beq.n	8015968 <etharp_input+0xb8>
 8015960:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015964:	d01e      	beq.n	80159a4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015966:	e020      	b.n	80159aa <etharp_input+0xfa>
      if (for_us) {
 8015968:	7dfb      	ldrb	r3, [r7, #23]
 801596a:	2b00      	cmp	r3, #0
 801596c:	d01c      	beq.n	80159a8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801596e:	683b      	ldr	r3, [r7, #0]
 8015970:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015974:	693b      	ldr	r3, [r7, #16]
 8015976:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801597a:	683b      	ldr	r3, [r7, #0]
 801597c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8015980:	683b      	ldr	r3, [r7, #0]
 8015982:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015984:	693a      	ldr	r2, [r7, #16]
 8015986:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015988:	2102      	movs	r1, #2
 801598a:	9103      	str	r1, [sp, #12]
 801598c:	f107 010c 	add.w	r1, r7, #12
 8015990:	9102      	str	r1, [sp, #8]
 8015992:	9201      	str	r2, [sp, #4]
 8015994:	9300      	str	r3, [sp, #0]
 8015996:	462b      	mov	r3, r5
 8015998:	4622      	mov	r2, r4
 801599a:	4601      	mov	r1, r0
 801599c:	6838      	ldr	r0, [r7, #0]
 801599e:	f000 faeb 	bl	8015f78 <etharp_raw>
      break;
 80159a2:	e001      	b.n	80159a8 <etharp_input+0xf8>
      break;
 80159a4:	bf00      	nop
 80159a6:	e000      	b.n	80159aa <etharp_input+0xfa>
      break;
 80159a8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80159aa:	6878      	ldr	r0, [r7, #4]
 80159ac:	f7f8 fe34 	bl	800e618 <pbuf_free>
}
 80159b0:	3718      	adds	r7, #24
 80159b2:	46bd      	mov	sp, r7
 80159b4:	bdb0      	pop	{r4, r5, r7, pc}
 80159b6:	bf00      	nop
 80159b8:	0801cad0 	.word	0x0801cad0
 80159bc:	0801cc20 	.word	0x0801cc20
 80159c0:	0801cb48 	.word	0x0801cb48

080159c4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80159c4:	b580      	push	{r7, lr}
 80159c6:	b086      	sub	sp, #24
 80159c8:	af02      	add	r7, sp, #8
 80159ca:	60f8      	str	r0, [r7, #12]
 80159cc:	60b9      	str	r1, [r7, #8]
 80159ce:	4613      	mov	r3, r2
 80159d0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80159d2:	79fa      	ldrb	r2, [r7, #7]
 80159d4:	4944      	ldr	r1, [pc, #272]	; (8015ae8 <etharp_output_to_arp_index+0x124>)
 80159d6:	4613      	mov	r3, r2
 80159d8:	005b      	lsls	r3, r3, #1
 80159da:	4413      	add	r3, r2
 80159dc:	00db      	lsls	r3, r3, #3
 80159de:	440b      	add	r3, r1
 80159e0:	3314      	adds	r3, #20
 80159e2:	781b      	ldrb	r3, [r3, #0]
 80159e4:	2b01      	cmp	r3, #1
 80159e6:	d806      	bhi.n	80159f6 <etharp_output_to_arp_index+0x32>
 80159e8:	4b40      	ldr	r3, [pc, #256]	; (8015aec <etharp_output_to_arp_index+0x128>)
 80159ea:	f240 22ee 	movw	r2, #750	; 0x2ee
 80159ee:	4940      	ldr	r1, [pc, #256]	; (8015af0 <etharp_output_to_arp_index+0x12c>)
 80159f0:	4840      	ldr	r0, [pc, #256]	; (8015af4 <etharp_output_to_arp_index+0x130>)
 80159f2:	f002 fa25 	bl	8017e40 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80159f6:	79fa      	ldrb	r2, [r7, #7]
 80159f8:	493b      	ldr	r1, [pc, #236]	; (8015ae8 <etharp_output_to_arp_index+0x124>)
 80159fa:	4613      	mov	r3, r2
 80159fc:	005b      	lsls	r3, r3, #1
 80159fe:	4413      	add	r3, r2
 8015a00:	00db      	lsls	r3, r3, #3
 8015a02:	440b      	add	r3, r1
 8015a04:	3314      	adds	r3, #20
 8015a06:	781b      	ldrb	r3, [r3, #0]
 8015a08:	2b02      	cmp	r3, #2
 8015a0a:	d153      	bne.n	8015ab4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015a0c:	79fa      	ldrb	r2, [r7, #7]
 8015a0e:	4936      	ldr	r1, [pc, #216]	; (8015ae8 <etharp_output_to_arp_index+0x124>)
 8015a10:	4613      	mov	r3, r2
 8015a12:	005b      	lsls	r3, r3, #1
 8015a14:	4413      	add	r3, r2
 8015a16:	00db      	lsls	r3, r3, #3
 8015a18:	440b      	add	r3, r1
 8015a1a:	3312      	adds	r3, #18
 8015a1c:	881b      	ldrh	r3, [r3, #0]
 8015a1e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8015a22:	d919      	bls.n	8015a58 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015a24:	79fa      	ldrb	r2, [r7, #7]
 8015a26:	4613      	mov	r3, r2
 8015a28:	005b      	lsls	r3, r3, #1
 8015a2a:	4413      	add	r3, r2
 8015a2c:	00db      	lsls	r3, r3, #3
 8015a2e:	4a2e      	ldr	r2, [pc, #184]	; (8015ae8 <etharp_output_to_arp_index+0x124>)
 8015a30:	4413      	add	r3, r2
 8015a32:	3304      	adds	r3, #4
 8015a34:	4619      	mov	r1, r3
 8015a36:	68f8      	ldr	r0, [r7, #12]
 8015a38:	f000 fb4c 	bl	80160d4 <etharp_request>
 8015a3c:	4603      	mov	r3, r0
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d138      	bne.n	8015ab4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015a42:	79fa      	ldrb	r2, [r7, #7]
 8015a44:	4928      	ldr	r1, [pc, #160]	; (8015ae8 <etharp_output_to_arp_index+0x124>)
 8015a46:	4613      	mov	r3, r2
 8015a48:	005b      	lsls	r3, r3, #1
 8015a4a:	4413      	add	r3, r2
 8015a4c:	00db      	lsls	r3, r3, #3
 8015a4e:	440b      	add	r3, r1
 8015a50:	3314      	adds	r3, #20
 8015a52:	2203      	movs	r2, #3
 8015a54:	701a      	strb	r2, [r3, #0]
 8015a56:	e02d      	b.n	8015ab4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015a58:	79fa      	ldrb	r2, [r7, #7]
 8015a5a:	4923      	ldr	r1, [pc, #140]	; (8015ae8 <etharp_output_to_arp_index+0x124>)
 8015a5c:	4613      	mov	r3, r2
 8015a5e:	005b      	lsls	r3, r3, #1
 8015a60:	4413      	add	r3, r2
 8015a62:	00db      	lsls	r3, r3, #3
 8015a64:	440b      	add	r3, r1
 8015a66:	3312      	adds	r3, #18
 8015a68:	881b      	ldrh	r3, [r3, #0]
 8015a6a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015a6e:	d321      	bcc.n	8015ab4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015a70:	79fa      	ldrb	r2, [r7, #7]
 8015a72:	4613      	mov	r3, r2
 8015a74:	005b      	lsls	r3, r3, #1
 8015a76:	4413      	add	r3, r2
 8015a78:	00db      	lsls	r3, r3, #3
 8015a7a:	4a1b      	ldr	r2, [pc, #108]	; (8015ae8 <etharp_output_to_arp_index+0x124>)
 8015a7c:	4413      	add	r3, r2
 8015a7e:	1d19      	adds	r1, r3, #4
 8015a80:	79fa      	ldrb	r2, [r7, #7]
 8015a82:	4613      	mov	r3, r2
 8015a84:	005b      	lsls	r3, r3, #1
 8015a86:	4413      	add	r3, r2
 8015a88:	00db      	lsls	r3, r3, #3
 8015a8a:	3308      	adds	r3, #8
 8015a8c:	4a16      	ldr	r2, [pc, #88]	; (8015ae8 <etharp_output_to_arp_index+0x124>)
 8015a8e:	4413      	add	r3, r2
 8015a90:	3304      	adds	r3, #4
 8015a92:	461a      	mov	r2, r3
 8015a94:	68f8      	ldr	r0, [r7, #12]
 8015a96:	f000 fafb 	bl	8016090 <etharp_request_dst>
 8015a9a:	4603      	mov	r3, r0
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d109      	bne.n	8015ab4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015aa0:	79fa      	ldrb	r2, [r7, #7]
 8015aa2:	4911      	ldr	r1, [pc, #68]	; (8015ae8 <etharp_output_to_arp_index+0x124>)
 8015aa4:	4613      	mov	r3, r2
 8015aa6:	005b      	lsls	r3, r3, #1
 8015aa8:	4413      	add	r3, r2
 8015aaa:	00db      	lsls	r3, r3, #3
 8015aac:	440b      	add	r3, r1
 8015aae:	3314      	adds	r3, #20
 8015ab0:	2203      	movs	r2, #3
 8015ab2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8015aba:	79fa      	ldrb	r2, [r7, #7]
 8015abc:	4613      	mov	r3, r2
 8015abe:	005b      	lsls	r3, r3, #1
 8015ac0:	4413      	add	r3, r2
 8015ac2:	00db      	lsls	r3, r3, #3
 8015ac4:	3308      	adds	r3, #8
 8015ac6:	4a08      	ldr	r2, [pc, #32]	; (8015ae8 <etharp_output_to_arp_index+0x124>)
 8015ac8:	4413      	add	r3, r2
 8015aca:	3304      	adds	r3, #4
 8015acc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015ad0:	9200      	str	r2, [sp, #0]
 8015ad2:	460a      	mov	r2, r1
 8015ad4:	68b9      	ldr	r1, [r7, #8]
 8015ad6:	68f8      	ldr	r0, [r7, #12]
 8015ad8:	f001 fe3a 	bl	8017750 <ethernet_output>
 8015adc:	4603      	mov	r3, r0
}
 8015ade:	4618      	mov	r0, r3
 8015ae0:	3710      	adds	r7, #16
 8015ae2:	46bd      	mov	sp, r7
 8015ae4:	bd80      	pop	{r7, pc}
 8015ae6:	bf00      	nop
 8015ae8:	200052cc 	.word	0x200052cc
 8015aec:	0801cad0 	.word	0x0801cad0
 8015af0:	0801cc40 	.word	0x0801cc40
 8015af4:	0801cb48 	.word	0x0801cb48

08015af8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015af8:	b580      	push	{r7, lr}
 8015afa:	b08a      	sub	sp, #40	; 0x28
 8015afc:	af02      	add	r7, sp, #8
 8015afe:	60f8      	str	r0, [r7, #12]
 8015b00:	60b9      	str	r1, [r7, #8]
 8015b02:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d106      	bne.n	8015b1c <etharp_output+0x24>
 8015b0e:	4b73      	ldr	r3, [pc, #460]	; (8015cdc <etharp_output+0x1e4>)
 8015b10:	f240 321e 	movw	r2, #798	; 0x31e
 8015b14:	4972      	ldr	r1, [pc, #456]	; (8015ce0 <etharp_output+0x1e8>)
 8015b16:	4873      	ldr	r0, [pc, #460]	; (8015ce4 <etharp_output+0x1ec>)
 8015b18:	f002 f992 	bl	8017e40 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015b1c:	68bb      	ldr	r3, [r7, #8]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d106      	bne.n	8015b30 <etharp_output+0x38>
 8015b22:	4b6e      	ldr	r3, [pc, #440]	; (8015cdc <etharp_output+0x1e4>)
 8015b24:	f240 321f 	movw	r2, #799	; 0x31f
 8015b28:	496f      	ldr	r1, [pc, #444]	; (8015ce8 <etharp_output+0x1f0>)
 8015b2a:	486e      	ldr	r0, [pc, #440]	; (8015ce4 <etharp_output+0x1ec>)
 8015b2c:	f002 f988 	bl	8017e40 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d106      	bne.n	8015b44 <etharp_output+0x4c>
 8015b36:	4b69      	ldr	r3, [pc, #420]	; (8015cdc <etharp_output+0x1e4>)
 8015b38:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015b3c:	496b      	ldr	r1, [pc, #428]	; (8015cec <etharp_output+0x1f4>)
 8015b3e:	4869      	ldr	r0, [pc, #420]	; (8015ce4 <etharp_output+0x1ec>)
 8015b40:	f002 f97e 	bl	8017e40 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	68f9      	ldr	r1, [r7, #12]
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	f000 fef8 	bl	8016940 <ip4_addr_isbroadcast_u32>
 8015b50:	4603      	mov	r3, r0
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d002      	beq.n	8015b5c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015b56:	4b66      	ldr	r3, [pc, #408]	; (8015cf0 <etharp_output+0x1f8>)
 8015b58:	61fb      	str	r3, [r7, #28]
 8015b5a:	e0af      	b.n	8015cbc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015b64:	2be0      	cmp	r3, #224	; 0xe0
 8015b66:	d118      	bne.n	8015b9a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015b68:	2301      	movs	r3, #1
 8015b6a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015b6c:	2300      	movs	r3, #0
 8015b6e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015b70:	235e      	movs	r3, #94	; 0x5e
 8015b72:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	3301      	adds	r3, #1
 8015b78:	781b      	ldrb	r3, [r3, #0]
 8015b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015b7e:	b2db      	uxtb	r3, r3
 8015b80:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	3302      	adds	r3, #2
 8015b86:	781b      	ldrb	r3, [r3, #0]
 8015b88:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	3303      	adds	r3, #3
 8015b8e:	781b      	ldrb	r3, [r3, #0]
 8015b90:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015b92:	f107 0310 	add.w	r3, r7, #16
 8015b96:	61fb      	str	r3, [r7, #28]
 8015b98:	e090      	b.n	8015cbc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	681a      	ldr	r2, [r3, #0]
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	3304      	adds	r3, #4
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	405a      	eors	r2, r3
 8015ba6:	68fb      	ldr	r3, [r7, #12]
 8015ba8:	3308      	adds	r3, #8
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	4013      	ands	r3, r2
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d012      	beq.n	8015bd8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015bb2:	687b      	ldr	r3, [r7, #4]
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015bb8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015bbc:	4293      	cmp	r3, r2
 8015bbe:	d00b      	beq.n	8015bd8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	330c      	adds	r3, #12
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d003      	beq.n	8015bd2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	330c      	adds	r3, #12
 8015bce:	61bb      	str	r3, [r7, #24]
 8015bd0:	e002      	b.n	8015bd8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015bd2:	f06f 0303 	mvn.w	r3, #3
 8015bd6:	e07d      	b.n	8015cd4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015bd8:	4b46      	ldr	r3, [pc, #280]	; (8015cf4 <etharp_output+0x1fc>)
 8015bda:	781b      	ldrb	r3, [r3, #0]
 8015bdc:	4619      	mov	r1, r3
 8015bde:	4a46      	ldr	r2, [pc, #280]	; (8015cf8 <etharp_output+0x200>)
 8015be0:	460b      	mov	r3, r1
 8015be2:	005b      	lsls	r3, r3, #1
 8015be4:	440b      	add	r3, r1
 8015be6:	00db      	lsls	r3, r3, #3
 8015be8:	4413      	add	r3, r2
 8015bea:	3314      	adds	r3, #20
 8015bec:	781b      	ldrb	r3, [r3, #0]
 8015bee:	2b01      	cmp	r3, #1
 8015bf0:	d925      	bls.n	8015c3e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015bf2:	4b40      	ldr	r3, [pc, #256]	; (8015cf4 <etharp_output+0x1fc>)
 8015bf4:	781b      	ldrb	r3, [r3, #0]
 8015bf6:	4619      	mov	r1, r3
 8015bf8:	4a3f      	ldr	r2, [pc, #252]	; (8015cf8 <etharp_output+0x200>)
 8015bfa:	460b      	mov	r3, r1
 8015bfc:	005b      	lsls	r3, r3, #1
 8015bfe:	440b      	add	r3, r1
 8015c00:	00db      	lsls	r3, r3, #3
 8015c02:	4413      	add	r3, r2
 8015c04:	3308      	adds	r3, #8
 8015c06:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015c08:	68fa      	ldr	r2, [r7, #12]
 8015c0a:	429a      	cmp	r2, r3
 8015c0c:	d117      	bne.n	8015c3e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015c0e:	69bb      	ldr	r3, [r7, #24]
 8015c10:	681a      	ldr	r2, [r3, #0]
 8015c12:	4b38      	ldr	r3, [pc, #224]	; (8015cf4 <etharp_output+0x1fc>)
 8015c14:	781b      	ldrb	r3, [r3, #0]
 8015c16:	4618      	mov	r0, r3
 8015c18:	4937      	ldr	r1, [pc, #220]	; (8015cf8 <etharp_output+0x200>)
 8015c1a:	4603      	mov	r3, r0
 8015c1c:	005b      	lsls	r3, r3, #1
 8015c1e:	4403      	add	r3, r0
 8015c20:	00db      	lsls	r3, r3, #3
 8015c22:	440b      	add	r3, r1
 8015c24:	3304      	adds	r3, #4
 8015c26:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015c28:	429a      	cmp	r2, r3
 8015c2a:	d108      	bne.n	8015c3e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015c2c:	4b31      	ldr	r3, [pc, #196]	; (8015cf4 <etharp_output+0x1fc>)
 8015c2e:	781b      	ldrb	r3, [r3, #0]
 8015c30:	461a      	mov	r2, r3
 8015c32:	68b9      	ldr	r1, [r7, #8]
 8015c34:	68f8      	ldr	r0, [r7, #12]
 8015c36:	f7ff fec5 	bl	80159c4 <etharp_output_to_arp_index>
 8015c3a:	4603      	mov	r3, r0
 8015c3c:	e04a      	b.n	8015cd4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015c3e:	2300      	movs	r3, #0
 8015c40:	75fb      	strb	r3, [r7, #23]
 8015c42:	e031      	b.n	8015ca8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015c44:	7dfa      	ldrb	r2, [r7, #23]
 8015c46:	492c      	ldr	r1, [pc, #176]	; (8015cf8 <etharp_output+0x200>)
 8015c48:	4613      	mov	r3, r2
 8015c4a:	005b      	lsls	r3, r3, #1
 8015c4c:	4413      	add	r3, r2
 8015c4e:	00db      	lsls	r3, r3, #3
 8015c50:	440b      	add	r3, r1
 8015c52:	3314      	adds	r3, #20
 8015c54:	781b      	ldrb	r3, [r3, #0]
 8015c56:	2b01      	cmp	r3, #1
 8015c58:	d923      	bls.n	8015ca2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015c5a:	7dfa      	ldrb	r2, [r7, #23]
 8015c5c:	4926      	ldr	r1, [pc, #152]	; (8015cf8 <etharp_output+0x200>)
 8015c5e:	4613      	mov	r3, r2
 8015c60:	005b      	lsls	r3, r3, #1
 8015c62:	4413      	add	r3, r2
 8015c64:	00db      	lsls	r3, r3, #3
 8015c66:	440b      	add	r3, r1
 8015c68:	3308      	adds	r3, #8
 8015c6a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015c6c:	68fa      	ldr	r2, [r7, #12]
 8015c6e:	429a      	cmp	r2, r3
 8015c70:	d117      	bne.n	8015ca2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015c72:	69bb      	ldr	r3, [r7, #24]
 8015c74:	6819      	ldr	r1, [r3, #0]
 8015c76:	7dfa      	ldrb	r2, [r7, #23]
 8015c78:	481f      	ldr	r0, [pc, #124]	; (8015cf8 <etharp_output+0x200>)
 8015c7a:	4613      	mov	r3, r2
 8015c7c:	005b      	lsls	r3, r3, #1
 8015c7e:	4413      	add	r3, r2
 8015c80:	00db      	lsls	r3, r3, #3
 8015c82:	4403      	add	r3, r0
 8015c84:	3304      	adds	r3, #4
 8015c86:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015c88:	4299      	cmp	r1, r3
 8015c8a:	d10a      	bne.n	8015ca2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015c8c:	4a19      	ldr	r2, [pc, #100]	; (8015cf4 <etharp_output+0x1fc>)
 8015c8e:	7dfb      	ldrb	r3, [r7, #23]
 8015c90:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015c92:	7dfb      	ldrb	r3, [r7, #23]
 8015c94:	461a      	mov	r2, r3
 8015c96:	68b9      	ldr	r1, [r7, #8]
 8015c98:	68f8      	ldr	r0, [r7, #12]
 8015c9a:	f7ff fe93 	bl	80159c4 <etharp_output_to_arp_index>
 8015c9e:	4603      	mov	r3, r0
 8015ca0:	e018      	b.n	8015cd4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015ca2:	7dfb      	ldrb	r3, [r7, #23]
 8015ca4:	3301      	adds	r3, #1
 8015ca6:	75fb      	strb	r3, [r7, #23]
 8015ca8:	7dfb      	ldrb	r3, [r7, #23]
 8015caa:	2b09      	cmp	r3, #9
 8015cac:	d9ca      	bls.n	8015c44 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015cae:	68ba      	ldr	r2, [r7, #8]
 8015cb0:	69b9      	ldr	r1, [r7, #24]
 8015cb2:	68f8      	ldr	r0, [r7, #12]
 8015cb4:	f000 f822 	bl	8015cfc <etharp_query>
 8015cb8:	4603      	mov	r3, r0
 8015cba:	e00b      	b.n	8015cd4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015cc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015cc6:	9300      	str	r3, [sp, #0]
 8015cc8:	69fb      	ldr	r3, [r7, #28]
 8015cca:	68b9      	ldr	r1, [r7, #8]
 8015ccc:	68f8      	ldr	r0, [r7, #12]
 8015cce:	f001 fd3f 	bl	8017750 <ethernet_output>
 8015cd2:	4603      	mov	r3, r0
}
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	3720      	adds	r7, #32
 8015cd8:	46bd      	mov	sp, r7
 8015cda:	bd80      	pop	{r7, pc}
 8015cdc:	0801cad0 	.word	0x0801cad0
 8015ce0:	0801cc20 	.word	0x0801cc20
 8015ce4:	0801cb48 	.word	0x0801cb48
 8015ce8:	0801cc70 	.word	0x0801cc70
 8015cec:	0801cc10 	.word	0x0801cc10
 8015cf0:	0801e8f4 	.word	0x0801e8f4
 8015cf4:	200053bc 	.word	0x200053bc
 8015cf8:	200052cc 	.word	0x200052cc

08015cfc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015cfc:	b580      	push	{r7, lr}
 8015cfe:	b08c      	sub	sp, #48	; 0x30
 8015d00:	af02      	add	r7, sp, #8
 8015d02:	60f8      	str	r0, [r7, #12]
 8015d04:	60b9      	str	r1, [r7, #8]
 8015d06:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	3326      	adds	r3, #38	; 0x26
 8015d0c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015d0e:	23ff      	movs	r3, #255	; 0xff
 8015d10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8015d14:	2300      	movs	r3, #0
 8015d16:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015d18:	68bb      	ldr	r3, [r7, #8]
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	68f9      	ldr	r1, [r7, #12]
 8015d1e:	4618      	mov	r0, r3
 8015d20:	f000 fe0e 	bl	8016940 <ip4_addr_isbroadcast_u32>
 8015d24:	4603      	mov	r3, r0
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d10c      	bne.n	8015d44 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015d2a:	68bb      	ldr	r3, [r7, #8]
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015d32:	2be0      	cmp	r3, #224	; 0xe0
 8015d34:	d006      	beq.n	8015d44 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015d36:	68bb      	ldr	r3, [r7, #8]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d003      	beq.n	8015d44 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015d3c:	68bb      	ldr	r3, [r7, #8]
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d102      	bne.n	8015d4a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015d44:	f06f 030f 	mvn.w	r3, #15
 8015d48:	e101      	b.n	8015f4e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015d4a:	68fa      	ldr	r2, [r7, #12]
 8015d4c:	2101      	movs	r1, #1
 8015d4e:	68b8      	ldr	r0, [r7, #8]
 8015d50:	f7ff fb60 	bl	8015414 <etharp_find_entry>
 8015d54:	4603      	mov	r3, r0
 8015d56:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015d58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	da02      	bge.n	8015d66 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015d60:	8a7b      	ldrh	r3, [r7, #18]
 8015d62:	b25b      	sxtb	r3, r3
 8015d64:	e0f3      	b.n	8015f4e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015d66:	8a7b      	ldrh	r3, [r7, #18]
 8015d68:	2b7e      	cmp	r3, #126	; 0x7e
 8015d6a:	d906      	bls.n	8015d7a <etharp_query+0x7e>
 8015d6c:	4b7a      	ldr	r3, [pc, #488]	; (8015f58 <etharp_query+0x25c>)
 8015d6e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8015d72:	497a      	ldr	r1, [pc, #488]	; (8015f5c <etharp_query+0x260>)
 8015d74:	487a      	ldr	r0, [pc, #488]	; (8015f60 <etharp_query+0x264>)
 8015d76:	f002 f863 	bl	8017e40 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015d7a:	8a7b      	ldrh	r3, [r7, #18]
 8015d7c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015d7e:	7c7a      	ldrb	r2, [r7, #17]
 8015d80:	4978      	ldr	r1, [pc, #480]	; (8015f64 <etharp_query+0x268>)
 8015d82:	4613      	mov	r3, r2
 8015d84:	005b      	lsls	r3, r3, #1
 8015d86:	4413      	add	r3, r2
 8015d88:	00db      	lsls	r3, r3, #3
 8015d8a:	440b      	add	r3, r1
 8015d8c:	3314      	adds	r3, #20
 8015d8e:	781b      	ldrb	r3, [r3, #0]
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d115      	bne.n	8015dc0 <etharp_query+0xc4>
    is_new_entry = 1;
 8015d94:	2301      	movs	r3, #1
 8015d96:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015d98:	7c7a      	ldrb	r2, [r7, #17]
 8015d9a:	4972      	ldr	r1, [pc, #456]	; (8015f64 <etharp_query+0x268>)
 8015d9c:	4613      	mov	r3, r2
 8015d9e:	005b      	lsls	r3, r3, #1
 8015da0:	4413      	add	r3, r2
 8015da2:	00db      	lsls	r3, r3, #3
 8015da4:	440b      	add	r3, r1
 8015da6:	3314      	adds	r3, #20
 8015da8:	2201      	movs	r2, #1
 8015daa:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015dac:	7c7a      	ldrb	r2, [r7, #17]
 8015dae:	496d      	ldr	r1, [pc, #436]	; (8015f64 <etharp_query+0x268>)
 8015db0:	4613      	mov	r3, r2
 8015db2:	005b      	lsls	r3, r3, #1
 8015db4:	4413      	add	r3, r2
 8015db6:	00db      	lsls	r3, r3, #3
 8015db8:	440b      	add	r3, r1
 8015dba:	3308      	adds	r3, #8
 8015dbc:	68fa      	ldr	r2, [r7, #12]
 8015dbe:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015dc0:	7c7a      	ldrb	r2, [r7, #17]
 8015dc2:	4968      	ldr	r1, [pc, #416]	; (8015f64 <etharp_query+0x268>)
 8015dc4:	4613      	mov	r3, r2
 8015dc6:	005b      	lsls	r3, r3, #1
 8015dc8:	4413      	add	r3, r2
 8015dca:	00db      	lsls	r3, r3, #3
 8015dcc:	440b      	add	r3, r1
 8015dce:	3314      	adds	r3, #20
 8015dd0:	781b      	ldrb	r3, [r3, #0]
 8015dd2:	2b01      	cmp	r3, #1
 8015dd4:	d011      	beq.n	8015dfa <etharp_query+0xfe>
 8015dd6:	7c7a      	ldrb	r2, [r7, #17]
 8015dd8:	4962      	ldr	r1, [pc, #392]	; (8015f64 <etharp_query+0x268>)
 8015dda:	4613      	mov	r3, r2
 8015ddc:	005b      	lsls	r3, r3, #1
 8015dde:	4413      	add	r3, r2
 8015de0:	00db      	lsls	r3, r3, #3
 8015de2:	440b      	add	r3, r1
 8015de4:	3314      	adds	r3, #20
 8015de6:	781b      	ldrb	r3, [r3, #0]
 8015de8:	2b01      	cmp	r3, #1
 8015dea:	d806      	bhi.n	8015dfa <etharp_query+0xfe>
 8015dec:	4b5a      	ldr	r3, [pc, #360]	; (8015f58 <etharp_query+0x25c>)
 8015dee:	f240 32cd 	movw	r2, #973	; 0x3cd
 8015df2:	495d      	ldr	r1, [pc, #372]	; (8015f68 <etharp_query+0x26c>)
 8015df4:	485a      	ldr	r0, [pc, #360]	; (8015f60 <etharp_query+0x264>)
 8015df6:	f002 f823 	bl	8017e40 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015dfa:	6a3b      	ldr	r3, [r7, #32]
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d102      	bne.n	8015e06 <etharp_query+0x10a>
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d10c      	bne.n	8015e20 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015e06:	68b9      	ldr	r1, [r7, #8]
 8015e08:	68f8      	ldr	r0, [r7, #12]
 8015e0a:	f000 f963 	bl	80160d4 <etharp_request>
 8015e0e:	4603      	mov	r3, r0
 8015e10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d102      	bne.n	8015e20 <etharp_query+0x124>
      return result;
 8015e1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015e1e:	e096      	b.n	8015f4e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d106      	bne.n	8015e34 <etharp_query+0x138>
 8015e26:	4b4c      	ldr	r3, [pc, #304]	; (8015f58 <etharp_query+0x25c>)
 8015e28:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015e2c:	494f      	ldr	r1, [pc, #316]	; (8015f6c <etharp_query+0x270>)
 8015e2e:	484c      	ldr	r0, [pc, #304]	; (8015f60 <etharp_query+0x264>)
 8015e30:	f002 f806 	bl	8017e40 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015e34:	7c7a      	ldrb	r2, [r7, #17]
 8015e36:	494b      	ldr	r1, [pc, #300]	; (8015f64 <etharp_query+0x268>)
 8015e38:	4613      	mov	r3, r2
 8015e3a:	005b      	lsls	r3, r3, #1
 8015e3c:	4413      	add	r3, r2
 8015e3e:	00db      	lsls	r3, r3, #3
 8015e40:	440b      	add	r3, r1
 8015e42:	3314      	adds	r3, #20
 8015e44:	781b      	ldrb	r3, [r3, #0]
 8015e46:	2b01      	cmp	r3, #1
 8015e48:	d917      	bls.n	8015e7a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015e4a:	4a49      	ldr	r2, [pc, #292]	; (8015f70 <etharp_query+0x274>)
 8015e4c:	7c7b      	ldrb	r3, [r7, #17]
 8015e4e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015e50:	7c7a      	ldrb	r2, [r7, #17]
 8015e52:	4613      	mov	r3, r2
 8015e54:	005b      	lsls	r3, r3, #1
 8015e56:	4413      	add	r3, r2
 8015e58:	00db      	lsls	r3, r3, #3
 8015e5a:	3308      	adds	r3, #8
 8015e5c:	4a41      	ldr	r2, [pc, #260]	; (8015f64 <etharp_query+0x268>)
 8015e5e:	4413      	add	r3, r2
 8015e60:	3304      	adds	r3, #4
 8015e62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015e66:	9200      	str	r2, [sp, #0]
 8015e68:	697a      	ldr	r2, [r7, #20]
 8015e6a:	6879      	ldr	r1, [r7, #4]
 8015e6c:	68f8      	ldr	r0, [r7, #12]
 8015e6e:	f001 fc6f 	bl	8017750 <ethernet_output>
 8015e72:	4603      	mov	r3, r0
 8015e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015e78:	e067      	b.n	8015f4a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015e7a:	7c7a      	ldrb	r2, [r7, #17]
 8015e7c:	4939      	ldr	r1, [pc, #228]	; (8015f64 <etharp_query+0x268>)
 8015e7e:	4613      	mov	r3, r2
 8015e80:	005b      	lsls	r3, r3, #1
 8015e82:	4413      	add	r3, r2
 8015e84:	00db      	lsls	r3, r3, #3
 8015e86:	440b      	add	r3, r1
 8015e88:	3314      	adds	r3, #20
 8015e8a:	781b      	ldrb	r3, [r3, #0]
 8015e8c:	2b01      	cmp	r3, #1
 8015e8e:	d15c      	bne.n	8015f4a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015e90:	2300      	movs	r3, #0
 8015e92:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015e98:	e01c      	b.n	8015ed4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015e9a:	69fb      	ldr	r3, [r7, #28]
 8015e9c:	895a      	ldrh	r2, [r3, #10]
 8015e9e:	69fb      	ldr	r3, [r7, #28]
 8015ea0:	891b      	ldrh	r3, [r3, #8]
 8015ea2:	429a      	cmp	r2, r3
 8015ea4:	d10a      	bne.n	8015ebc <etharp_query+0x1c0>
 8015ea6:	69fb      	ldr	r3, [r7, #28]
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d006      	beq.n	8015ebc <etharp_query+0x1c0>
 8015eae:	4b2a      	ldr	r3, [pc, #168]	; (8015f58 <etharp_query+0x25c>)
 8015eb0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015eb4:	492f      	ldr	r1, [pc, #188]	; (8015f74 <etharp_query+0x278>)
 8015eb6:	482a      	ldr	r0, [pc, #168]	; (8015f60 <etharp_query+0x264>)
 8015eb8:	f001 ffc2 	bl	8017e40 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015ebc:	69fb      	ldr	r3, [r7, #28]
 8015ebe:	7b1b      	ldrb	r3, [r3, #12]
 8015ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d002      	beq.n	8015ece <etharp_query+0x1d2>
        copy_needed = 1;
 8015ec8:	2301      	movs	r3, #1
 8015eca:	61bb      	str	r3, [r7, #24]
        break;
 8015ecc:	e005      	b.n	8015eda <etharp_query+0x1de>
      }
      p = p->next;
 8015ece:	69fb      	ldr	r3, [r7, #28]
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015ed4:	69fb      	ldr	r3, [r7, #28]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d1df      	bne.n	8015e9a <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015eda:	69bb      	ldr	r3, [r7, #24]
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d007      	beq.n	8015ef0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015ee0:	687a      	ldr	r2, [r7, #4]
 8015ee2:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015ee6:	200e      	movs	r0, #14
 8015ee8:	f7f8 fdfe 	bl	800eae8 <pbuf_clone>
 8015eec:	61f8      	str	r0, [r7, #28]
 8015eee:	e004      	b.n	8015efa <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015ef4:	69f8      	ldr	r0, [r7, #28]
 8015ef6:	f7f8 fc35 	bl	800e764 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015efa:	69fb      	ldr	r3, [r7, #28]
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d021      	beq.n	8015f44 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015f00:	7c7a      	ldrb	r2, [r7, #17]
 8015f02:	4918      	ldr	r1, [pc, #96]	; (8015f64 <etharp_query+0x268>)
 8015f04:	4613      	mov	r3, r2
 8015f06:	005b      	lsls	r3, r3, #1
 8015f08:	4413      	add	r3, r2
 8015f0a:	00db      	lsls	r3, r3, #3
 8015f0c:	440b      	add	r3, r1
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d00a      	beq.n	8015f2a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015f14:	7c7a      	ldrb	r2, [r7, #17]
 8015f16:	4913      	ldr	r1, [pc, #76]	; (8015f64 <etharp_query+0x268>)
 8015f18:	4613      	mov	r3, r2
 8015f1a:	005b      	lsls	r3, r3, #1
 8015f1c:	4413      	add	r3, r2
 8015f1e:	00db      	lsls	r3, r3, #3
 8015f20:	440b      	add	r3, r1
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	4618      	mov	r0, r3
 8015f26:	f7f8 fb77 	bl	800e618 <pbuf_free>
      }
      arp_table[i].q = p;
 8015f2a:	7c7a      	ldrb	r2, [r7, #17]
 8015f2c:	490d      	ldr	r1, [pc, #52]	; (8015f64 <etharp_query+0x268>)
 8015f2e:	4613      	mov	r3, r2
 8015f30:	005b      	lsls	r3, r3, #1
 8015f32:	4413      	add	r3, r2
 8015f34:	00db      	lsls	r3, r3, #3
 8015f36:	440b      	add	r3, r1
 8015f38:	69fa      	ldr	r2, [r7, #28]
 8015f3a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015f3c:	2300      	movs	r3, #0
 8015f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015f42:	e002      	b.n	8015f4a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015f44:	23ff      	movs	r3, #255	; 0xff
 8015f46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015f4a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015f4e:	4618      	mov	r0, r3
 8015f50:	3728      	adds	r7, #40	; 0x28
 8015f52:	46bd      	mov	sp, r7
 8015f54:	bd80      	pop	{r7, pc}
 8015f56:	bf00      	nop
 8015f58:	0801cad0 	.word	0x0801cad0
 8015f5c:	0801cc7c 	.word	0x0801cc7c
 8015f60:	0801cb48 	.word	0x0801cb48
 8015f64:	200052cc 	.word	0x200052cc
 8015f68:	0801cc8c 	.word	0x0801cc8c
 8015f6c:	0801cc70 	.word	0x0801cc70
 8015f70:	200053bc 	.word	0x200053bc
 8015f74:	0801ccb4 	.word	0x0801ccb4

08015f78 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015f78:	b580      	push	{r7, lr}
 8015f7a:	b08a      	sub	sp, #40	; 0x28
 8015f7c:	af02      	add	r7, sp, #8
 8015f7e:	60f8      	str	r0, [r7, #12]
 8015f80:	60b9      	str	r1, [r7, #8]
 8015f82:	607a      	str	r2, [r7, #4]
 8015f84:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015f86:	2300      	movs	r3, #0
 8015f88:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d106      	bne.n	8015f9e <etharp_raw+0x26>
 8015f90:	4b3a      	ldr	r3, [pc, #232]	; (801607c <etharp_raw+0x104>)
 8015f92:	f240 4257 	movw	r2, #1111	; 0x457
 8015f96:	493a      	ldr	r1, [pc, #232]	; (8016080 <etharp_raw+0x108>)
 8015f98:	483a      	ldr	r0, [pc, #232]	; (8016084 <etharp_raw+0x10c>)
 8015f9a:	f001 ff51 	bl	8017e40 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015f9e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015fa2:	211c      	movs	r1, #28
 8015fa4:	200e      	movs	r0, #14
 8015fa6:	f7f8 f853 	bl	800e050 <pbuf_alloc>
 8015faa:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015fac:	69bb      	ldr	r3, [r7, #24]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d102      	bne.n	8015fb8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8015fb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015fb6:	e05d      	b.n	8016074 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015fb8:	69bb      	ldr	r3, [r7, #24]
 8015fba:	895b      	ldrh	r3, [r3, #10]
 8015fbc:	2b1b      	cmp	r3, #27
 8015fbe:	d806      	bhi.n	8015fce <etharp_raw+0x56>
 8015fc0:	4b2e      	ldr	r3, [pc, #184]	; (801607c <etharp_raw+0x104>)
 8015fc2:	f240 4262 	movw	r2, #1122	; 0x462
 8015fc6:	4930      	ldr	r1, [pc, #192]	; (8016088 <etharp_raw+0x110>)
 8015fc8:	482e      	ldr	r0, [pc, #184]	; (8016084 <etharp_raw+0x10c>)
 8015fca:	f001 ff39 	bl	8017e40 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015fce:	69bb      	ldr	r3, [r7, #24]
 8015fd0:	685b      	ldr	r3, [r3, #4]
 8015fd2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015fd4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015fd6:	4618      	mov	r0, r3
 8015fd8:	f7f6 fe94 	bl	800cd04 <lwip_htons>
 8015fdc:	4603      	mov	r3, r0
 8015fde:	461a      	mov	r2, r3
 8015fe0:	697b      	ldr	r3, [r7, #20]
 8015fe2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015fea:	2b06      	cmp	r3, #6
 8015fec:	d006      	beq.n	8015ffc <etharp_raw+0x84>
 8015fee:	4b23      	ldr	r3, [pc, #140]	; (801607c <etharp_raw+0x104>)
 8015ff0:	f240 4269 	movw	r2, #1129	; 0x469
 8015ff4:	4925      	ldr	r1, [pc, #148]	; (801608c <etharp_raw+0x114>)
 8015ff6:	4823      	ldr	r0, [pc, #140]	; (8016084 <etharp_raw+0x10c>)
 8015ff8:	f001 ff22 	bl	8017e40 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015ffc:	697b      	ldr	r3, [r7, #20]
 8015ffe:	3308      	adds	r3, #8
 8016000:	2206      	movs	r2, #6
 8016002:	6839      	ldr	r1, [r7, #0]
 8016004:	4618      	mov	r0, r3
 8016006:	f001 fe41 	bl	8017c8c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801600a:	697b      	ldr	r3, [r7, #20]
 801600c:	3312      	adds	r3, #18
 801600e:	2206      	movs	r2, #6
 8016010:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016012:	4618      	mov	r0, r3
 8016014:	f001 fe3a 	bl	8017c8c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016018:	697b      	ldr	r3, [r7, #20]
 801601a:	330e      	adds	r3, #14
 801601c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801601e:	6812      	ldr	r2, [r2, #0]
 8016020:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016022:	697b      	ldr	r3, [r7, #20]
 8016024:	3318      	adds	r3, #24
 8016026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016028:	6812      	ldr	r2, [r2, #0]
 801602a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801602c:	697b      	ldr	r3, [r7, #20]
 801602e:	2200      	movs	r2, #0
 8016030:	701a      	strb	r2, [r3, #0]
 8016032:	2200      	movs	r2, #0
 8016034:	f042 0201 	orr.w	r2, r2, #1
 8016038:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801603a:	697b      	ldr	r3, [r7, #20]
 801603c:	2200      	movs	r2, #0
 801603e:	f042 0208 	orr.w	r2, r2, #8
 8016042:	709a      	strb	r2, [r3, #2]
 8016044:	2200      	movs	r2, #0
 8016046:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016048:	697b      	ldr	r3, [r7, #20]
 801604a:	2206      	movs	r2, #6
 801604c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801604e:	697b      	ldr	r3, [r7, #20]
 8016050:	2204      	movs	r2, #4
 8016052:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016054:	f640 0306 	movw	r3, #2054	; 0x806
 8016058:	9300      	str	r3, [sp, #0]
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	68ba      	ldr	r2, [r7, #8]
 801605e:	69b9      	ldr	r1, [r7, #24]
 8016060:	68f8      	ldr	r0, [r7, #12]
 8016062:	f001 fb75 	bl	8017750 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016066:	69b8      	ldr	r0, [r7, #24]
 8016068:	f7f8 fad6 	bl	800e618 <pbuf_free>
  p = NULL;
 801606c:	2300      	movs	r3, #0
 801606e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016070:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016074:	4618      	mov	r0, r3
 8016076:	3720      	adds	r7, #32
 8016078:	46bd      	mov	sp, r7
 801607a:	bd80      	pop	{r7, pc}
 801607c:	0801cad0 	.word	0x0801cad0
 8016080:	0801cc20 	.word	0x0801cc20
 8016084:	0801cb48 	.word	0x0801cb48
 8016088:	0801ccd0 	.word	0x0801ccd0
 801608c:	0801cd04 	.word	0x0801cd04

08016090 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016090:	b580      	push	{r7, lr}
 8016092:	b088      	sub	sp, #32
 8016094:	af04      	add	r7, sp, #16
 8016096:	60f8      	str	r0, [r7, #12]
 8016098:	60b9      	str	r1, [r7, #8]
 801609a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80160ac:	2201      	movs	r2, #1
 80160ae:	9203      	str	r2, [sp, #12]
 80160b0:	68ba      	ldr	r2, [r7, #8]
 80160b2:	9202      	str	r2, [sp, #8]
 80160b4:	4a06      	ldr	r2, [pc, #24]	; (80160d0 <etharp_request_dst+0x40>)
 80160b6:	9201      	str	r2, [sp, #4]
 80160b8:	9300      	str	r3, [sp, #0]
 80160ba:	4603      	mov	r3, r0
 80160bc:	687a      	ldr	r2, [r7, #4]
 80160be:	68f8      	ldr	r0, [r7, #12]
 80160c0:	f7ff ff5a 	bl	8015f78 <etharp_raw>
 80160c4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80160c6:	4618      	mov	r0, r3
 80160c8:	3710      	adds	r7, #16
 80160ca:	46bd      	mov	sp, r7
 80160cc:	bd80      	pop	{r7, pc}
 80160ce:	bf00      	nop
 80160d0:	0801e8fc 	.word	0x0801e8fc

080160d4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80160d4:	b580      	push	{r7, lr}
 80160d6:	b082      	sub	sp, #8
 80160d8:	af00      	add	r7, sp, #0
 80160da:	6078      	str	r0, [r7, #4]
 80160dc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80160de:	4a05      	ldr	r2, [pc, #20]	; (80160f4 <etharp_request+0x20>)
 80160e0:	6839      	ldr	r1, [r7, #0]
 80160e2:	6878      	ldr	r0, [r7, #4]
 80160e4:	f7ff ffd4 	bl	8016090 <etharp_request_dst>
 80160e8:	4603      	mov	r3, r0
}
 80160ea:	4618      	mov	r0, r3
 80160ec:	3708      	adds	r7, #8
 80160ee:	46bd      	mov	sp, r7
 80160f0:	bd80      	pop	{r7, pc}
 80160f2:	bf00      	nop
 80160f4:	0801e8f4 	.word	0x0801e8f4

080160f8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80160f8:	b580      	push	{r7, lr}
 80160fa:	b08e      	sub	sp, #56	; 0x38
 80160fc:	af04      	add	r7, sp, #16
 80160fe:	6078      	str	r0, [r7, #4]
 8016100:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8016102:	4b79      	ldr	r3, [pc, #484]	; (80162e8 <icmp_input+0x1f0>)
 8016104:	689b      	ldr	r3, [r3, #8]
 8016106:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801610a:	781b      	ldrb	r3, [r3, #0]
 801610c:	f003 030f 	and.w	r3, r3, #15
 8016110:	b2db      	uxtb	r3, r3
 8016112:	009b      	lsls	r3, r3, #2
 8016114:	b2db      	uxtb	r3, r3
 8016116:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016118:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801611a:	2b13      	cmp	r3, #19
 801611c:	f240 80cd 	bls.w	80162ba <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	895b      	ldrh	r3, [r3, #10]
 8016124:	2b03      	cmp	r3, #3
 8016126:	f240 80ca 	bls.w	80162be <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	685b      	ldr	r3, [r3, #4]
 801612e:	781b      	ldrb	r3, [r3, #0]
 8016130:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016134:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016138:	2b00      	cmp	r3, #0
 801613a:	f000 80b7 	beq.w	80162ac <icmp_input+0x1b4>
 801613e:	2b08      	cmp	r3, #8
 8016140:	f040 80b7 	bne.w	80162b2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8016144:	4b69      	ldr	r3, [pc, #420]	; (80162ec <icmp_input+0x1f4>)
 8016146:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016148:	4b67      	ldr	r3, [pc, #412]	; (80162e8 <icmp_input+0x1f0>)
 801614a:	695b      	ldr	r3, [r3, #20]
 801614c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016150:	2be0      	cmp	r3, #224	; 0xe0
 8016152:	f000 80bb 	beq.w	80162cc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016156:	4b64      	ldr	r3, [pc, #400]	; (80162e8 <icmp_input+0x1f0>)
 8016158:	695b      	ldr	r3, [r3, #20]
 801615a:	4a63      	ldr	r2, [pc, #396]	; (80162e8 <icmp_input+0x1f0>)
 801615c:	6812      	ldr	r2, [r2, #0]
 801615e:	4611      	mov	r1, r2
 8016160:	4618      	mov	r0, r3
 8016162:	f000 fbed 	bl	8016940 <ip4_addr_isbroadcast_u32>
 8016166:	4603      	mov	r3, r0
 8016168:	2b00      	cmp	r3, #0
 801616a:	f040 80b1 	bne.w	80162d0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	891b      	ldrh	r3, [r3, #8]
 8016172:	2b07      	cmp	r3, #7
 8016174:	f240 80a5 	bls.w	80162c2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016178:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801617a:	330e      	adds	r3, #14
 801617c:	4619      	mov	r1, r3
 801617e:	6878      	ldr	r0, [r7, #4]
 8016180:	f7f8 f9b4 	bl	800e4ec <pbuf_add_header>
 8016184:	4603      	mov	r3, r0
 8016186:	2b00      	cmp	r3, #0
 8016188:	d04b      	beq.n	8016222 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	891a      	ldrh	r2, [r3, #8]
 801618e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016190:	4413      	add	r3, r2
 8016192:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	891b      	ldrh	r3, [r3, #8]
 8016198:	8b7a      	ldrh	r2, [r7, #26]
 801619a:	429a      	cmp	r2, r3
 801619c:	f0c0 809a 	bcc.w	80162d4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80161a0:	8b7b      	ldrh	r3, [r7, #26]
 80161a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80161a6:	4619      	mov	r1, r3
 80161a8:	200e      	movs	r0, #14
 80161aa:	f7f7 ff51 	bl	800e050 <pbuf_alloc>
 80161ae:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80161b0:	697b      	ldr	r3, [r7, #20]
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	f000 8090 	beq.w	80162d8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80161b8:	697b      	ldr	r3, [r7, #20]
 80161ba:	895b      	ldrh	r3, [r3, #10]
 80161bc:	461a      	mov	r2, r3
 80161be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80161c0:	3308      	adds	r3, #8
 80161c2:	429a      	cmp	r2, r3
 80161c4:	d203      	bcs.n	80161ce <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80161c6:	6978      	ldr	r0, [r7, #20]
 80161c8:	f7f8 fa26 	bl	800e618 <pbuf_free>
          goto icmperr;
 80161cc:	e085      	b.n	80162da <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80161ce:	697b      	ldr	r3, [r7, #20]
 80161d0:	685b      	ldr	r3, [r3, #4]
 80161d2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80161d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80161d6:	4618      	mov	r0, r3
 80161d8:	f001 fd58 	bl	8017c8c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80161dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80161de:	4619      	mov	r1, r3
 80161e0:	6978      	ldr	r0, [r7, #20]
 80161e2:	f7f8 f993 	bl	800e50c <pbuf_remove_header>
 80161e6:	4603      	mov	r3, r0
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d009      	beq.n	8016200 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80161ec:	4b40      	ldr	r3, [pc, #256]	; (80162f0 <icmp_input+0x1f8>)
 80161ee:	22b6      	movs	r2, #182	; 0xb6
 80161f0:	4940      	ldr	r1, [pc, #256]	; (80162f4 <icmp_input+0x1fc>)
 80161f2:	4841      	ldr	r0, [pc, #260]	; (80162f8 <icmp_input+0x200>)
 80161f4:	f001 fe24 	bl	8017e40 <iprintf>
          pbuf_free(r);
 80161f8:	6978      	ldr	r0, [r7, #20]
 80161fa:	f7f8 fa0d 	bl	800e618 <pbuf_free>
          goto icmperr;
 80161fe:	e06c      	b.n	80162da <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016200:	6879      	ldr	r1, [r7, #4]
 8016202:	6978      	ldr	r0, [r7, #20]
 8016204:	f7f8 fb2c 	bl	800e860 <pbuf_copy>
 8016208:	4603      	mov	r3, r0
 801620a:	2b00      	cmp	r3, #0
 801620c:	d003      	beq.n	8016216 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801620e:	6978      	ldr	r0, [r7, #20]
 8016210:	f7f8 fa02 	bl	800e618 <pbuf_free>
          goto icmperr;
 8016214:	e061      	b.n	80162da <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8016216:	6878      	ldr	r0, [r7, #4]
 8016218:	f7f8 f9fe 	bl	800e618 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801621c:	697b      	ldr	r3, [r7, #20]
 801621e:	607b      	str	r3, [r7, #4]
 8016220:	e00f      	b.n	8016242 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016222:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016224:	330e      	adds	r3, #14
 8016226:	4619      	mov	r1, r3
 8016228:	6878      	ldr	r0, [r7, #4]
 801622a:	f7f8 f96f 	bl	800e50c <pbuf_remove_header>
 801622e:	4603      	mov	r3, r0
 8016230:	2b00      	cmp	r3, #0
 8016232:	d006      	beq.n	8016242 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016234:	4b2e      	ldr	r3, [pc, #184]	; (80162f0 <icmp_input+0x1f8>)
 8016236:	22c7      	movs	r2, #199	; 0xc7
 8016238:	4930      	ldr	r1, [pc, #192]	; (80162fc <icmp_input+0x204>)
 801623a:	482f      	ldr	r0, [pc, #188]	; (80162f8 <icmp_input+0x200>)
 801623c:	f001 fe00 	bl	8017e40 <iprintf>
          goto icmperr;
 8016240:	e04b      	b.n	80162da <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	685b      	ldr	r3, [r3, #4]
 8016246:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016248:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801624a:	4619      	mov	r1, r3
 801624c:	6878      	ldr	r0, [r7, #4]
 801624e:	f7f8 f94d 	bl	800e4ec <pbuf_add_header>
 8016252:	4603      	mov	r3, r0
 8016254:	2b00      	cmp	r3, #0
 8016256:	d12b      	bne.n	80162b0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	685b      	ldr	r3, [r3, #4]
 801625c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801625e:	69fb      	ldr	r3, [r7, #28]
 8016260:	681a      	ldr	r2, [r3, #0]
 8016262:	68fb      	ldr	r3, [r7, #12]
 8016264:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016266:	4b20      	ldr	r3, [pc, #128]	; (80162e8 <icmp_input+0x1f0>)
 8016268:	691a      	ldr	r2, [r3, #16]
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801626e:	693b      	ldr	r3, [r7, #16]
 8016270:	2200      	movs	r2, #0
 8016272:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8016274:	693b      	ldr	r3, [r7, #16]
 8016276:	2200      	movs	r2, #0
 8016278:	709a      	strb	r2, [r3, #2]
 801627a:	2200      	movs	r2, #0
 801627c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	22ff      	movs	r2, #255	; 0xff
 8016282:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016284:	68fb      	ldr	r3, [r7, #12]
 8016286:	2200      	movs	r2, #0
 8016288:	729a      	strb	r2, [r3, #10]
 801628a:	2200      	movs	r2, #0
 801628c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801628e:	683b      	ldr	r3, [r7, #0]
 8016290:	9302      	str	r3, [sp, #8]
 8016292:	2301      	movs	r3, #1
 8016294:	9301      	str	r3, [sp, #4]
 8016296:	2300      	movs	r3, #0
 8016298:	9300      	str	r3, [sp, #0]
 801629a:	23ff      	movs	r3, #255	; 0xff
 801629c:	2200      	movs	r2, #0
 801629e:	69f9      	ldr	r1, [r7, #28]
 80162a0:	6878      	ldr	r0, [r7, #4]
 80162a2:	f000 fa75 	bl	8016790 <ip4_output_if>
 80162a6:	4603      	mov	r3, r0
 80162a8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80162aa:	e001      	b.n	80162b0 <icmp_input+0x1b8>
      break;
 80162ac:	bf00      	nop
 80162ae:	e000      	b.n	80162b2 <icmp_input+0x1ba>
      break;
 80162b0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80162b2:	6878      	ldr	r0, [r7, #4]
 80162b4:	f7f8 f9b0 	bl	800e618 <pbuf_free>
  return;
 80162b8:	e013      	b.n	80162e2 <icmp_input+0x1ea>
    goto lenerr;
 80162ba:	bf00      	nop
 80162bc:	e002      	b.n	80162c4 <icmp_input+0x1cc>
    goto lenerr;
 80162be:	bf00      	nop
 80162c0:	e000      	b.n	80162c4 <icmp_input+0x1cc>
        goto lenerr;
 80162c2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80162c4:	6878      	ldr	r0, [r7, #4]
 80162c6:	f7f8 f9a7 	bl	800e618 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80162ca:	e00a      	b.n	80162e2 <icmp_input+0x1ea>
        goto icmperr;
 80162cc:	bf00      	nop
 80162ce:	e004      	b.n	80162da <icmp_input+0x1e2>
        goto icmperr;
 80162d0:	bf00      	nop
 80162d2:	e002      	b.n	80162da <icmp_input+0x1e2>
          goto icmperr;
 80162d4:	bf00      	nop
 80162d6:	e000      	b.n	80162da <icmp_input+0x1e2>
          goto icmperr;
 80162d8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80162da:	6878      	ldr	r0, [r7, #4]
 80162dc:	f7f8 f99c 	bl	800e618 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80162e0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80162e2:	3728      	adds	r7, #40	; 0x28
 80162e4:	46bd      	mov	sp, r7
 80162e6:	bd80      	pop	{r7, pc}
 80162e8:	2000e2d0 	.word	0x2000e2d0
 80162ec:	2000e2e4 	.word	0x2000e2e4
 80162f0:	0801cd48 	.word	0x0801cd48
 80162f4:	0801cd80 	.word	0x0801cd80
 80162f8:	0801cdb8 	.word	0x0801cdb8
 80162fc:	0801cde0 	.word	0x0801cde0

08016300 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016300:	b580      	push	{r7, lr}
 8016302:	b082      	sub	sp, #8
 8016304:	af00      	add	r7, sp, #0
 8016306:	6078      	str	r0, [r7, #4]
 8016308:	460b      	mov	r3, r1
 801630a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801630c:	78fb      	ldrb	r3, [r7, #3]
 801630e:	461a      	mov	r2, r3
 8016310:	2103      	movs	r1, #3
 8016312:	6878      	ldr	r0, [r7, #4]
 8016314:	f000 f814 	bl	8016340 <icmp_send_response>
}
 8016318:	bf00      	nop
 801631a:	3708      	adds	r7, #8
 801631c:	46bd      	mov	sp, r7
 801631e:	bd80      	pop	{r7, pc}

08016320 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016320:	b580      	push	{r7, lr}
 8016322:	b082      	sub	sp, #8
 8016324:	af00      	add	r7, sp, #0
 8016326:	6078      	str	r0, [r7, #4]
 8016328:	460b      	mov	r3, r1
 801632a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801632c:	78fb      	ldrb	r3, [r7, #3]
 801632e:	461a      	mov	r2, r3
 8016330:	210b      	movs	r1, #11
 8016332:	6878      	ldr	r0, [r7, #4]
 8016334:	f000 f804 	bl	8016340 <icmp_send_response>
}
 8016338:	bf00      	nop
 801633a:	3708      	adds	r7, #8
 801633c:	46bd      	mov	sp, r7
 801633e:	bd80      	pop	{r7, pc}

08016340 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016340:	b580      	push	{r7, lr}
 8016342:	b08c      	sub	sp, #48	; 0x30
 8016344:	af04      	add	r7, sp, #16
 8016346:	6078      	str	r0, [r7, #4]
 8016348:	460b      	mov	r3, r1
 801634a:	70fb      	strb	r3, [r7, #3]
 801634c:	4613      	mov	r3, r2
 801634e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016350:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016354:	2124      	movs	r1, #36	; 0x24
 8016356:	2022      	movs	r0, #34	; 0x22
 8016358:	f7f7 fe7a 	bl	800e050 <pbuf_alloc>
 801635c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801635e:	69fb      	ldr	r3, [r7, #28]
 8016360:	2b00      	cmp	r3, #0
 8016362:	d04c      	beq.n	80163fe <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016364:	69fb      	ldr	r3, [r7, #28]
 8016366:	895b      	ldrh	r3, [r3, #10]
 8016368:	2b23      	cmp	r3, #35	; 0x23
 801636a:	d806      	bhi.n	801637a <icmp_send_response+0x3a>
 801636c:	4b26      	ldr	r3, [pc, #152]	; (8016408 <icmp_send_response+0xc8>)
 801636e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016372:	4926      	ldr	r1, [pc, #152]	; (801640c <icmp_send_response+0xcc>)
 8016374:	4826      	ldr	r0, [pc, #152]	; (8016410 <icmp_send_response+0xd0>)
 8016376:	f001 fd63 	bl	8017e40 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	685b      	ldr	r3, [r3, #4]
 801637e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016380:	69fb      	ldr	r3, [r7, #28]
 8016382:	685b      	ldr	r3, [r3, #4]
 8016384:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016386:	697b      	ldr	r3, [r7, #20]
 8016388:	78fa      	ldrb	r2, [r7, #3]
 801638a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801638c:	697b      	ldr	r3, [r7, #20]
 801638e:	78ba      	ldrb	r2, [r7, #2]
 8016390:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016392:	697b      	ldr	r3, [r7, #20]
 8016394:	2200      	movs	r2, #0
 8016396:	711a      	strb	r2, [r3, #4]
 8016398:	2200      	movs	r2, #0
 801639a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801639c:	697b      	ldr	r3, [r7, #20]
 801639e:	2200      	movs	r2, #0
 80163a0:	719a      	strb	r2, [r3, #6]
 80163a2:	2200      	movs	r2, #0
 80163a4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80163a6:	69fb      	ldr	r3, [r7, #28]
 80163a8:	685b      	ldr	r3, [r3, #4]
 80163aa:	f103 0008 	add.w	r0, r3, #8
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	685b      	ldr	r3, [r3, #4]
 80163b2:	221c      	movs	r2, #28
 80163b4:	4619      	mov	r1, r3
 80163b6:	f001 fc69 	bl	8017c8c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80163ba:	69bb      	ldr	r3, [r7, #24]
 80163bc:	68db      	ldr	r3, [r3, #12]
 80163be:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80163c0:	f107 030c 	add.w	r3, r7, #12
 80163c4:	4618      	mov	r0, r3
 80163c6:	f000 f825 	bl	8016414 <ip4_route>
 80163ca:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80163cc:	693b      	ldr	r3, [r7, #16]
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d011      	beq.n	80163f6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80163d2:	697b      	ldr	r3, [r7, #20]
 80163d4:	2200      	movs	r2, #0
 80163d6:	709a      	strb	r2, [r3, #2]
 80163d8:	2200      	movs	r2, #0
 80163da:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80163dc:	f107 020c 	add.w	r2, r7, #12
 80163e0:	693b      	ldr	r3, [r7, #16]
 80163e2:	9302      	str	r3, [sp, #8]
 80163e4:	2301      	movs	r3, #1
 80163e6:	9301      	str	r3, [sp, #4]
 80163e8:	2300      	movs	r3, #0
 80163ea:	9300      	str	r3, [sp, #0]
 80163ec:	23ff      	movs	r3, #255	; 0xff
 80163ee:	2100      	movs	r1, #0
 80163f0:	69f8      	ldr	r0, [r7, #28]
 80163f2:	f000 f9cd 	bl	8016790 <ip4_output_if>
  }
  pbuf_free(q);
 80163f6:	69f8      	ldr	r0, [r7, #28]
 80163f8:	f7f8 f90e 	bl	800e618 <pbuf_free>
 80163fc:	e000      	b.n	8016400 <icmp_send_response+0xc0>
    return;
 80163fe:	bf00      	nop
}
 8016400:	3720      	adds	r7, #32
 8016402:	46bd      	mov	sp, r7
 8016404:	bd80      	pop	{r7, pc}
 8016406:	bf00      	nop
 8016408:	0801cd48 	.word	0x0801cd48
 801640c:	0801ce14 	.word	0x0801ce14
 8016410:	0801cdb8 	.word	0x0801cdb8

08016414 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016414:	b480      	push	{r7}
 8016416:	b085      	sub	sp, #20
 8016418:	af00      	add	r7, sp, #0
 801641a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801641c:	4b33      	ldr	r3, [pc, #204]	; (80164ec <ip4_route+0xd8>)
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	60fb      	str	r3, [r7, #12]
 8016422:	e036      	b.n	8016492 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801642a:	f003 0301 	and.w	r3, r3, #1
 801642e:	b2db      	uxtb	r3, r3
 8016430:	2b00      	cmp	r3, #0
 8016432:	d02b      	beq.n	801648c <ip4_route+0x78>
 8016434:	68fb      	ldr	r3, [r7, #12]
 8016436:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801643a:	089b      	lsrs	r3, r3, #2
 801643c:	f003 0301 	and.w	r3, r3, #1
 8016440:	b2db      	uxtb	r3, r3
 8016442:	2b00      	cmp	r3, #0
 8016444:	d022      	beq.n	801648c <ip4_route+0x78>
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	3304      	adds	r3, #4
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	2b00      	cmp	r3, #0
 801644e:	d01d      	beq.n	801648c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	681a      	ldr	r2, [r3, #0]
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	3304      	adds	r3, #4
 8016458:	681b      	ldr	r3, [r3, #0]
 801645a:	405a      	eors	r2, r3
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	3308      	adds	r3, #8
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	4013      	ands	r3, r2
 8016464:	2b00      	cmp	r3, #0
 8016466:	d101      	bne.n	801646c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	e038      	b.n	80164de <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801646c:	68fb      	ldr	r3, [r7, #12]
 801646e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016472:	f003 0302 	and.w	r3, r3, #2
 8016476:	2b00      	cmp	r3, #0
 8016478:	d108      	bne.n	801648c <ip4_route+0x78>
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	681a      	ldr	r2, [r3, #0]
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	330c      	adds	r3, #12
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	429a      	cmp	r2, r3
 8016486:	d101      	bne.n	801648c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	e028      	b.n	80164de <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	60fb      	str	r3, [r7, #12]
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	2b00      	cmp	r3, #0
 8016496:	d1c5      	bne.n	8016424 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016498:	4b15      	ldr	r3, [pc, #84]	; (80164f0 <ip4_route+0xdc>)
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	2b00      	cmp	r3, #0
 801649e:	d01a      	beq.n	80164d6 <ip4_route+0xc2>
 80164a0:	4b13      	ldr	r3, [pc, #76]	; (80164f0 <ip4_route+0xdc>)
 80164a2:	681b      	ldr	r3, [r3, #0]
 80164a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80164a8:	f003 0301 	and.w	r3, r3, #1
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d012      	beq.n	80164d6 <ip4_route+0xc2>
 80164b0:	4b0f      	ldr	r3, [pc, #60]	; (80164f0 <ip4_route+0xdc>)
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80164b8:	f003 0304 	and.w	r3, r3, #4
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d00a      	beq.n	80164d6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80164c0:	4b0b      	ldr	r3, [pc, #44]	; (80164f0 <ip4_route+0xdc>)
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	3304      	adds	r3, #4
 80164c6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d004      	beq.n	80164d6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	b2db      	uxtb	r3, r3
 80164d2:	2b7f      	cmp	r3, #127	; 0x7f
 80164d4:	d101      	bne.n	80164da <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80164d6:	2300      	movs	r3, #0
 80164d8:	e001      	b.n	80164de <ip4_route+0xca>
  }

  return netif_default;
 80164da:	4b05      	ldr	r3, [pc, #20]	; (80164f0 <ip4_route+0xdc>)
 80164dc:	681b      	ldr	r3, [r3, #0]
}
 80164de:	4618      	mov	r0, r3
 80164e0:	3714      	adds	r7, #20
 80164e2:	46bd      	mov	sp, r7
 80164e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e8:	4770      	bx	lr
 80164ea:	bf00      	nop
 80164ec:	20018b94 	.word	0x20018b94
 80164f0:	20018b98 	.word	0x20018b98

080164f4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80164f4:	b580      	push	{r7, lr}
 80164f6:	b082      	sub	sp, #8
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016502:	f003 0301 	and.w	r3, r3, #1
 8016506:	b2db      	uxtb	r3, r3
 8016508:	2b00      	cmp	r3, #0
 801650a:	d016      	beq.n	801653a <ip4_input_accept+0x46>
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	3304      	adds	r3, #4
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	2b00      	cmp	r3, #0
 8016514:	d011      	beq.n	801653a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016516:	4b0b      	ldr	r3, [pc, #44]	; (8016544 <ip4_input_accept+0x50>)
 8016518:	695a      	ldr	r2, [r3, #20]
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	3304      	adds	r3, #4
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	429a      	cmp	r2, r3
 8016522:	d008      	beq.n	8016536 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016524:	4b07      	ldr	r3, [pc, #28]	; (8016544 <ip4_input_accept+0x50>)
 8016526:	695b      	ldr	r3, [r3, #20]
 8016528:	6879      	ldr	r1, [r7, #4]
 801652a:	4618      	mov	r0, r3
 801652c:	f000 fa08 	bl	8016940 <ip4_addr_isbroadcast_u32>
 8016530:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016532:	2b00      	cmp	r3, #0
 8016534:	d001      	beq.n	801653a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016536:	2301      	movs	r3, #1
 8016538:	e000      	b.n	801653c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801653a:	2300      	movs	r3, #0
}
 801653c:	4618      	mov	r0, r3
 801653e:	3708      	adds	r7, #8
 8016540:	46bd      	mov	sp, r7
 8016542:	bd80      	pop	{r7, pc}
 8016544:	2000e2d0 	.word	0x2000e2d0

08016548 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016548:	b580      	push	{r7, lr}
 801654a:	b086      	sub	sp, #24
 801654c:	af00      	add	r7, sp, #0
 801654e:	6078      	str	r0, [r7, #4]
 8016550:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	685b      	ldr	r3, [r3, #4]
 8016556:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8016558:	697b      	ldr	r3, [r7, #20]
 801655a:	781b      	ldrb	r3, [r3, #0]
 801655c:	091b      	lsrs	r3, r3, #4
 801655e:	b2db      	uxtb	r3, r3
 8016560:	2b04      	cmp	r3, #4
 8016562:	d004      	beq.n	801656e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016564:	6878      	ldr	r0, [r7, #4]
 8016566:	f7f8 f857 	bl	800e618 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801656a:	2300      	movs	r3, #0
 801656c:	e107      	b.n	801677e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801656e:	697b      	ldr	r3, [r7, #20]
 8016570:	781b      	ldrb	r3, [r3, #0]
 8016572:	f003 030f 	and.w	r3, r3, #15
 8016576:	b2db      	uxtb	r3, r3
 8016578:	009b      	lsls	r3, r3, #2
 801657a:	b2db      	uxtb	r3, r3
 801657c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801657e:	697b      	ldr	r3, [r7, #20]
 8016580:	885b      	ldrh	r3, [r3, #2]
 8016582:	b29b      	uxth	r3, r3
 8016584:	4618      	mov	r0, r3
 8016586:	f7f6 fbbd 	bl	800cd04 <lwip_htons>
 801658a:	4603      	mov	r3, r0
 801658c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	891b      	ldrh	r3, [r3, #8]
 8016592:	89ba      	ldrh	r2, [r7, #12]
 8016594:	429a      	cmp	r2, r3
 8016596:	d204      	bcs.n	80165a2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8016598:	89bb      	ldrh	r3, [r7, #12]
 801659a:	4619      	mov	r1, r3
 801659c:	6878      	ldr	r0, [r7, #4]
 801659e:	f7f7 feb5 	bl	800e30c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	895b      	ldrh	r3, [r3, #10]
 80165a6:	89fa      	ldrh	r2, [r7, #14]
 80165a8:	429a      	cmp	r2, r3
 80165aa:	d807      	bhi.n	80165bc <ip4_input+0x74>
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	891b      	ldrh	r3, [r3, #8]
 80165b0:	89ba      	ldrh	r2, [r7, #12]
 80165b2:	429a      	cmp	r2, r3
 80165b4:	d802      	bhi.n	80165bc <ip4_input+0x74>
 80165b6:	89fb      	ldrh	r3, [r7, #14]
 80165b8:	2b13      	cmp	r3, #19
 80165ba:	d804      	bhi.n	80165c6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80165bc:	6878      	ldr	r0, [r7, #4]
 80165be:	f7f8 f82b 	bl	800e618 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80165c2:	2300      	movs	r3, #0
 80165c4:	e0db      	b.n	801677e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80165c6:	697b      	ldr	r3, [r7, #20]
 80165c8:	691b      	ldr	r3, [r3, #16]
 80165ca:	4a6f      	ldr	r2, [pc, #444]	; (8016788 <ip4_input+0x240>)
 80165cc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80165ce:	697b      	ldr	r3, [r7, #20]
 80165d0:	68db      	ldr	r3, [r3, #12]
 80165d2:	4a6d      	ldr	r2, [pc, #436]	; (8016788 <ip4_input+0x240>)
 80165d4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80165d6:	4b6c      	ldr	r3, [pc, #432]	; (8016788 <ip4_input+0x240>)
 80165d8:	695b      	ldr	r3, [r3, #20]
 80165da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80165de:	2be0      	cmp	r3, #224	; 0xe0
 80165e0:	d112      	bne.n	8016608 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80165e2:	683b      	ldr	r3, [r7, #0]
 80165e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80165e8:	f003 0301 	and.w	r3, r3, #1
 80165ec:	b2db      	uxtb	r3, r3
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d007      	beq.n	8016602 <ip4_input+0xba>
 80165f2:	683b      	ldr	r3, [r7, #0]
 80165f4:	3304      	adds	r3, #4
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d002      	beq.n	8016602 <ip4_input+0xba>
      netif = inp;
 80165fc:	683b      	ldr	r3, [r7, #0]
 80165fe:	613b      	str	r3, [r7, #16]
 8016600:	e02a      	b.n	8016658 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016602:	2300      	movs	r3, #0
 8016604:	613b      	str	r3, [r7, #16]
 8016606:	e027      	b.n	8016658 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016608:	6838      	ldr	r0, [r7, #0]
 801660a:	f7ff ff73 	bl	80164f4 <ip4_input_accept>
 801660e:	4603      	mov	r3, r0
 8016610:	2b00      	cmp	r3, #0
 8016612:	d002      	beq.n	801661a <ip4_input+0xd2>
      netif = inp;
 8016614:	683b      	ldr	r3, [r7, #0]
 8016616:	613b      	str	r3, [r7, #16]
 8016618:	e01e      	b.n	8016658 <ip4_input+0x110>
    } else {
      netif = NULL;
 801661a:	2300      	movs	r3, #0
 801661c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801661e:	4b5a      	ldr	r3, [pc, #360]	; (8016788 <ip4_input+0x240>)
 8016620:	695b      	ldr	r3, [r3, #20]
 8016622:	b2db      	uxtb	r3, r3
 8016624:	2b7f      	cmp	r3, #127	; 0x7f
 8016626:	d017      	beq.n	8016658 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016628:	4b58      	ldr	r3, [pc, #352]	; (801678c <ip4_input+0x244>)
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	613b      	str	r3, [r7, #16]
 801662e:	e00e      	b.n	801664e <ip4_input+0x106>
          if (netif == inp) {
 8016630:	693a      	ldr	r2, [r7, #16]
 8016632:	683b      	ldr	r3, [r7, #0]
 8016634:	429a      	cmp	r2, r3
 8016636:	d006      	beq.n	8016646 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016638:	6938      	ldr	r0, [r7, #16]
 801663a:	f7ff ff5b 	bl	80164f4 <ip4_input_accept>
 801663e:	4603      	mov	r3, r0
 8016640:	2b00      	cmp	r3, #0
 8016642:	d108      	bne.n	8016656 <ip4_input+0x10e>
 8016644:	e000      	b.n	8016648 <ip4_input+0x100>
            continue;
 8016646:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016648:	693b      	ldr	r3, [r7, #16]
 801664a:	681b      	ldr	r3, [r3, #0]
 801664c:	613b      	str	r3, [r7, #16]
 801664e:	693b      	ldr	r3, [r7, #16]
 8016650:	2b00      	cmp	r3, #0
 8016652:	d1ed      	bne.n	8016630 <ip4_input+0xe8>
 8016654:	e000      	b.n	8016658 <ip4_input+0x110>
            break;
 8016656:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016658:	4b4b      	ldr	r3, [pc, #300]	; (8016788 <ip4_input+0x240>)
 801665a:	691b      	ldr	r3, [r3, #16]
 801665c:	6839      	ldr	r1, [r7, #0]
 801665e:	4618      	mov	r0, r3
 8016660:	f000 f96e 	bl	8016940 <ip4_addr_isbroadcast_u32>
 8016664:	4603      	mov	r3, r0
 8016666:	2b00      	cmp	r3, #0
 8016668:	d105      	bne.n	8016676 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801666a:	4b47      	ldr	r3, [pc, #284]	; (8016788 <ip4_input+0x240>)
 801666c:	691b      	ldr	r3, [r3, #16]
 801666e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016672:	2be0      	cmp	r3, #224	; 0xe0
 8016674:	d104      	bne.n	8016680 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016676:	6878      	ldr	r0, [r7, #4]
 8016678:	f7f7 ffce 	bl	800e618 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801667c:	2300      	movs	r3, #0
 801667e:	e07e      	b.n	801677e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016680:	693b      	ldr	r3, [r7, #16]
 8016682:	2b00      	cmp	r3, #0
 8016684:	d104      	bne.n	8016690 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016686:	6878      	ldr	r0, [r7, #4]
 8016688:	f7f7 ffc6 	bl	800e618 <pbuf_free>
    return ERR_OK;
 801668c:	2300      	movs	r3, #0
 801668e:	e076      	b.n	801677e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016690:	697b      	ldr	r3, [r7, #20]
 8016692:	88db      	ldrh	r3, [r3, #6]
 8016694:	b29b      	uxth	r3, r3
 8016696:	461a      	mov	r2, r3
 8016698:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801669c:	4013      	ands	r3, r2
 801669e:	2b00      	cmp	r3, #0
 80166a0:	d00b      	beq.n	80166ba <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80166a2:	6878      	ldr	r0, [r7, #4]
 80166a4:	f000 fc92 	bl	8016fcc <ip4_reass>
 80166a8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d101      	bne.n	80166b4 <ip4_input+0x16c>
      return ERR_OK;
 80166b0:	2300      	movs	r3, #0
 80166b2:	e064      	b.n	801677e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	685b      	ldr	r3, [r3, #4]
 80166b8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80166ba:	4a33      	ldr	r2, [pc, #204]	; (8016788 <ip4_input+0x240>)
 80166bc:	693b      	ldr	r3, [r7, #16]
 80166be:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80166c0:	4a31      	ldr	r2, [pc, #196]	; (8016788 <ip4_input+0x240>)
 80166c2:	683b      	ldr	r3, [r7, #0]
 80166c4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80166c6:	4a30      	ldr	r2, [pc, #192]	; (8016788 <ip4_input+0x240>)
 80166c8:	697b      	ldr	r3, [r7, #20]
 80166ca:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80166cc:	697b      	ldr	r3, [r7, #20]
 80166ce:	781b      	ldrb	r3, [r3, #0]
 80166d0:	f003 030f 	and.w	r3, r3, #15
 80166d4:	b2db      	uxtb	r3, r3
 80166d6:	009b      	lsls	r3, r3, #2
 80166d8:	b2db      	uxtb	r3, r3
 80166da:	b29a      	uxth	r2, r3
 80166dc:	4b2a      	ldr	r3, [pc, #168]	; (8016788 <ip4_input+0x240>)
 80166de:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80166e0:	89fb      	ldrh	r3, [r7, #14]
 80166e2:	4619      	mov	r1, r3
 80166e4:	6878      	ldr	r0, [r7, #4]
 80166e6:	f7f7 ff11 	bl	800e50c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80166ea:	697b      	ldr	r3, [r7, #20]
 80166ec:	7a5b      	ldrb	r3, [r3, #9]
 80166ee:	2b11      	cmp	r3, #17
 80166f0:	d006      	beq.n	8016700 <ip4_input+0x1b8>
 80166f2:	2b11      	cmp	r3, #17
 80166f4:	dc13      	bgt.n	801671e <ip4_input+0x1d6>
 80166f6:	2b01      	cmp	r3, #1
 80166f8:	d00c      	beq.n	8016714 <ip4_input+0x1cc>
 80166fa:	2b06      	cmp	r3, #6
 80166fc:	d005      	beq.n	801670a <ip4_input+0x1c2>
 80166fe:	e00e      	b.n	801671e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016700:	6839      	ldr	r1, [r7, #0]
 8016702:	6878      	ldr	r0, [r7, #4]
 8016704:	f7fe fc68 	bl	8014fd8 <udp_input>
        break;
 8016708:	e026      	b.n	8016758 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801670a:	6839      	ldr	r1, [r7, #0]
 801670c:	6878      	ldr	r0, [r7, #4]
 801670e:	f7fa f85d 	bl	80107cc <tcp_input>
        break;
 8016712:	e021      	b.n	8016758 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016714:	6839      	ldr	r1, [r7, #0]
 8016716:	6878      	ldr	r0, [r7, #4]
 8016718:	f7ff fcee 	bl	80160f8 <icmp_input>
        break;
 801671c:	e01c      	b.n	8016758 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801671e:	4b1a      	ldr	r3, [pc, #104]	; (8016788 <ip4_input+0x240>)
 8016720:	695b      	ldr	r3, [r3, #20]
 8016722:	6939      	ldr	r1, [r7, #16]
 8016724:	4618      	mov	r0, r3
 8016726:	f000 f90b 	bl	8016940 <ip4_addr_isbroadcast_u32>
 801672a:	4603      	mov	r3, r0
 801672c:	2b00      	cmp	r3, #0
 801672e:	d10f      	bne.n	8016750 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016730:	4b15      	ldr	r3, [pc, #84]	; (8016788 <ip4_input+0x240>)
 8016732:	695b      	ldr	r3, [r3, #20]
 8016734:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016738:	2be0      	cmp	r3, #224	; 0xe0
 801673a:	d009      	beq.n	8016750 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801673c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016740:	4619      	mov	r1, r3
 8016742:	6878      	ldr	r0, [r7, #4]
 8016744:	f7f7 ff55 	bl	800e5f2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016748:	2102      	movs	r1, #2
 801674a:	6878      	ldr	r0, [r7, #4]
 801674c:	f7ff fdd8 	bl	8016300 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016750:	6878      	ldr	r0, [r7, #4]
 8016752:	f7f7 ff61 	bl	800e618 <pbuf_free>
        break;
 8016756:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016758:	4b0b      	ldr	r3, [pc, #44]	; (8016788 <ip4_input+0x240>)
 801675a:	2200      	movs	r2, #0
 801675c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801675e:	4b0a      	ldr	r3, [pc, #40]	; (8016788 <ip4_input+0x240>)
 8016760:	2200      	movs	r2, #0
 8016762:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016764:	4b08      	ldr	r3, [pc, #32]	; (8016788 <ip4_input+0x240>)
 8016766:	2200      	movs	r2, #0
 8016768:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801676a:	4b07      	ldr	r3, [pc, #28]	; (8016788 <ip4_input+0x240>)
 801676c:	2200      	movs	r2, #0
 801676e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016770:	4b05      	ldr	r3, [pc, #20]	; (8016788 <ip4_input+0x240>)
 8016772:	2200      	movs	r2, #0
 8016774:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016776:	4b04      	ldr	r3, [pc, #16]	; (8016788 <ip4_input+0x240>)
 8016778:	2200      	movs	r2, #0
 801677a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801677c:	2300      	movs	r3, #0
}
 801677e:	4618      	mov	r0, r3
 8016780:	3718      	adds	r7, #24
 8016782:	46bd      	mov	sp, r7
 8016784:	bd80      	pop	{r7, pc}
 8016786:	bf00      	nop
 8016788:	2000e2d0 	.word	0x2000e2d0
 801678c:	20018b94 	.word	0x20018b94

08016790 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016790:	b580      	push	{r7, lr}
 8016792:	b08a      	sub	sp, #40	; 0x28
 8016794:	af04      	add	r7, sp, #16
 8016796:	60f8      	str	r0, [r7, #12]
 8016798:	60b9      	str	r1, [r7, #8]
 801679a:	607a      	str	r2, [r7, #4]
 801679c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801679e:	68bb      	ldr	r3, [r7, #8]
 80167a0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d009      	beq.n	80167bc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80167a8:	68bb      	ldr	r3, [r7, #8]
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	d003      	beq.n	80167b6 <ip4_output_if+0x26>
 80167ae:	68bb      	ldr	r3, [r7, #8]
 80167b0:	681b      	ldr	r3, [r3, #0]
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	d102      	bne.n	80167bc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80167b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167b8:	3304      	adds	r3, #4
 80167ba:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80167bc:	78fa      	ldrb	r2, [r7, #3]
 80167be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167c0:	9302      	str	r3, [sp, #8]
 80167c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80167c6:	9301      	str	r3, [sp, #4]
 80167c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80167cc:	9300      	str	r3, [sp, #0]
 80167ce:	4613      	mov	r3, r2
 80167d0:	687a      	ldr	r2, [r7, #4]
 80167d2:	6979      	ldr	r1, [r7, #20]
 80167d4:	68f8      	ldr	r0, [r7, #12]
 80167d6:	f000 f805 	bl	80167e4 <ip4_output_if_src>
 80167da:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80167dc:	4618      	mov	r0, r3
 80167de:	3718      	adds	r7, #24
 80167e0:	46bd      	mov	sp, r7
 80167e2:	bd80      	pop	{r7, pc}

080167e4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80167e4:	b580      	push	{r7, lr}
 80167e6:	b088      	sub	sp, #32
 80167e8:	af00      	add	r7, sp, #0
 80167ea:	60f8      	str	r0, [r7, #12]
 80167ec:	60b9      	str	r1, [r7, #8]
 80167ee:	607a      	str	r2, [r7, #4]
 80167f0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	7b9b      	ldrb	r3, [r3, #14]
 80167f6:	2b01      	cmp	r3, #1
 80167f8:	d006      	beq.n	8016808 <ip4_output_if_src+0x24>
 80167fa:	4b4b      	ldr	r3, [pc, #300]	; (8016928 <ip4_output_if_src+0x144>)
 80167fc:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016800:	494a      	ldr	r1, [pc, #296]	; (801692c <ip4_output_if_src+0x148>)
 8016802:	484b      	ldr	r0, [pc, #300]	; (8016930 <ip4_output_if_src+0x14c>)
 8016804:	f001 fb1c 	bl	8017e40 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d060      	beq.n	80168d0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801680e:	2314      	movs	r3, #20
 8016810:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016812:	2114      	movs	r1, #20
 8016814:	68f8      	ldr	r0, [r7, #12]
 8016816:	f7f7 fe69 	bl	800e4ec <pbuf_add_header>
 801681a:	4603      	mov	r3, r0
 801681c:	2b00      	cmp	r3, #0
 801681e:	d002      	beq.n	8016826 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016820:	f06f 0301 	mvn.w	r3, #1
 8016824:	e07c      	b.n	8016920 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016826:	68fb      	ldr	r3, [r7, #12]
 8016828:	685b      	ldr	r3, [r3, #4]
 801682a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	895b      	ldrh	r3, [r3, #10]
 8016830:	2b13      	cmp	r3, #19
 8016832:	d806      	bhi.n	8016842 <ip4_output_if_src+0x5e>
 8016834:	4b3c      	ldr	r3, [pc, #240]	; (8016928 <ip4_output_if_src+0x144>)
 8016836:	f44f 7262 	mov.w	r2, #904	; 0x388
 801683a:	493e      	ldr	r1, [pc, #248]	; (8016934 <ip4_output_if_src+0x150>)
 801683c:	483c      	ldr	r0, [pc, #240]	; (8016930 <ip4_output_if_src+0x14c>)
 801683e:	f001 faff 	bl	8017e40 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016842:	69fb      	ldr	r3, [r7, #28]
 8016844:	78fa      	ldrb	r2, [r7, #3]
 8016846:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016848:	69fb      	ldr	r3, [r7, #28]
 801684a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801684e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	681a      	ldr	r2, [r3, #0]
 8016854:	69fb      	ldr	r3, [r7, #28]
 8016856:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016858:	8b7b      	ldrh	r3, [r7, #26]
 801685a:	089b      	lsrs	r3, r3, #2
 801685c:	b29b      	uxth	r3, r3
 801685e:	b2db      	uxtb	r3, r3
 8016860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016864:	b2da      	uxtb	r2, r3
 8016866:	69fb      	ldr	r3, [r7, #28]
 8016868:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801686a:	69fb      	ldr	r3, [r7, #28]
 801686c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016870:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	891b      	ldrh	r3, [r3, #8]
 8016876:	4618      	mov	r0, r3
 8016878:	f7f6 fa44 	bl	800cd04 <lwip_htons>
 801687c:	4603      	mov	r3, r0
 801687e:	461a      	mov	r2, r3
 8016880:	69fb      	ldr	r3, [r7, #28]
 8016882:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016884:	69fb      	ldr	r3, [r7, #28]
 8016886:	2200      	movs	r2, #0
 8016888:	719a      	strb	r2, [r3, #6]
 801688a:	2200      	movs	r2, #0
 801688c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801688e:	4b2a      	ldr	r3, [pc, #168]	; (8016938 <ip4_output_if_src+0x154>)
 8016890:	881b      	ldrh	r3, [r3, #0]
 8016892:	4618      	mov	r0, r3
 8016894:	f7f6 fa36 	bl	800cd04 <lwip_htons>
 8016898:	4603      	mov	r3, r0
 801689a:	461a      	mov	r2, r3
 801689c:	69fb      	ldr	r3, [r7, #28]
 801689e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80168a0:	4b25      	ldr	r3, [pc, #148]	; (8016938 <ip4_output_if_src+0x154>)
 80168a2:	881b      	ldrh	r3, [r3, #0]
 80168a4:	3301      	adds	r3, #1
 80168a6:	b29a      	uxth	r2, r3
 80168a8:	4b23      	ldr	r3, [pc, #140]	; (8016938 <ip4_output_if_src+0x154>)
 80168aa:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80168ac:	68bb      	ldr	r3, [r7, #8]
 80168ae:	2b00      	cmp	r3, #0
 80168b0:	d104      	bne.n	80168bc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80168b2:	4b22      	ldr	r3, [pc, #136]	; (801693c <ip4_output_if_src+0x158>)
 80168b4:	681a      	ldr	r2, [r3, #0]
 80168b6:	69fb      	ldr	r3, [r7, #28]
 80168b8:	60da      	str	r2, [r3, #12]
 80168ba:	e003      	b.n	80168c4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80168bc:	68bb      	ldr	r3, [r7, #8]
 80168be:	681a      	ldr	r2, [r3, #0]
 80168c0:	69fb      	ldr	r3, [r7, #28]
 80168c2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80168c4:	69fb      	ldr	r3, [r7, #28]
 80168c6:	2200      	movs	r2, #0
 80168c8:	729a      	strb	r2, [r3, #10]
 80168ca:	2200      	movs	r2, #0
 80168cc:	72da      	strb	r2, [r3, #11]
 80168ce:	e00f      	b.n	80168f0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	895b      	ldrh	r3, [r3, #10]
 80168d4:	2b13      	cmp	r3, #19
 80168d6:	d802      	bhi.n	80168de <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80168d8:	f06f 0301 	mvn.w	r3, #1
 80168dc:	e020      	b.n	8016920 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	685b      	ldr	r3, [r3, #4]
 80168e2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80168e4:	69fb      	ldr	r3, [r7, #28]
 80168e6:	691b      	ldr	r3, [r3, #16]
 80168e8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80168ea:	f107 0314 	add.w	r3, r7, #20
 80168ee:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80168f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d00c      	beq.n	8016912 <ip4_output_if_src+0x12e>
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	891a      	ldrh	r2, [r3, #8]
 80168fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016900:	429a      	cmp	r2, r3
 8016902:	d906      	bls.n	8016912 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016904:	687a      	ldr	r2, [r7, #4]
 8016906:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016908:	68f8      	ldr	r0, [r7, #12]
 801690a:	f000 fd4d 	bl	80173a8 <ip4_frag>
 801690e:	4603      	mov	r3, r0
 8016910:	e006      	b.n	8016920 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016914:	695b      	ldr	r3, [r3, #20]
 8016916:	687a      	ldr	r2, [r7, #4]
 8016918:	68f9      	ldr	r1, [r7, #12]
 801691a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801691c:	4798      	blx	r3
 801691e:	4603      	mov	r3, r0
}
 8016920:	4618      	mov	r0, r3
 8016922:	3720      	adds	r7, #32
 8016924:	46bd      	mov	sp, r7
 8016926:	bd80      	pop	{r7, pc}
 8016928:	0801ce40 	.word	0x0801ce40
 801692c:	0801ce74 	.word	0x0801ce74
 8016930:	0801ce80 	.word	0x0801ce80
 8016934:	0801cea8 	.word	0x0801cea8
 8016938:	200053be 	.word	0x200053be
 801693c:	0801e8f0 	.word	0x0801e8f0

08016940 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016940:	b480      	push	{r7}
 8016942:	b085      	sub	sp, #20
 8016944:	af00      	add	r7, sp, #0
 8016946:	6078      	str	r0, [r7, #4]
 8016948:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016954:	d002      	beq.n	801695c <ip4_addr_isbroadcast_u32+0x1c>
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	2b00      	cmp	r3, #0
 801695a:	d101      	bne.n	8016960 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801695c:	2301      	movs	r3, #1
 801695e:	e02a      	b.n	80169b6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016960:	683b      	ldr	r3, [r7, #0]
 8016962:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016966:	f003 0302 	and.w	r3, r3, #2
 801696a:	2b00      	cmp	r3, #0
 801696c:	d101      	bne.n	8016972 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801696e:	2300      	movs	r3, #0
 8016970:	e021      	b.n	80169b6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016972:	683b      	ldr	r3, [r7, #0]
 8016974:	3304      	adds	r3, #4
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	687a      	ldr	r2, [r7, #4]
 801697a:	429a      	cmp	r2, r3
 801697c:	d101      	bne.n	8016982 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801697e:	2300      	movs	r3, #0
 8016980:	e019      	b.n	80169b6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016982:	68fa      	ldr	r2, [r7, #12]
 8016984:	683b      	ldr	r3, [r7, #0]
 8016986:	3304      	adds	r3, #4
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	405a      	eors	r2, r3
 801698c:	683b      	ldr	r3, [r7, #0]
 801698e:	3308      	adds	r3, #8
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	4013      	ands	r3, r2
 8016994:	2b00      	cmp	r3, #0
 8016996:	d10d      	bne.n	80169b4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016998:	683b      	ldr	r3, [r7, #0]
 801699a:	3308      	adds	r3, #8
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	43da      	mvns	r2, r3
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80169a4:	683b      	ldr	r3, [r7, #0]
 80169a6:	3308      	adds	r3, #8
 80169a8:	681b      	ldr	r3, [r3, #0]
 80169aa:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80169ac:	429a      	cmp	r2, r3
 80169ae:	d101      	bne.n	80169b4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80169b0:	2301      	movs	r3, #1
 80169b2:	e000      	b.n	80169b6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80169b4:	2300      	movs	r3, #0
  }
}
 80169b6:	4618      	mov	r0, r3
 80169b8:	3714      	adds	r7, #20
 80169ba:	46bd      	mov	sp, r7
 80169bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c0:	4770      	bx	lr
	...

080169c4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80169c4:	b580      	push	{r7, lr}
 80169c6:	b084      	sub	sp, #16
 80169c8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80169ca:	2300      	movs	r3, #0
 80169cc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80169ce:	4b12      	ldr	r3, [pc, #72]	; (8016a18 <ip_reass_tmr+0x54>)
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80169d4:	e018      	b.n	8016a08 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	7fdb      	ldrb	r3, [r3, #31]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d00b      	beq.n	80169f6 <ip_reass_tmr+0x32>
      r->timer--;
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	7fdb      	ldrb	r3, [r3, #31]
 80169e2:	3b01      	subs	r3, #1
 80169e4:	b2da      	uxtb	r2, r3
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	60fb      	str	r3, [r7, #12]
 80169f4:	e008      	b.n	8016a08 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80169fa:	68fb      	ldr	r3, [r7, #12]
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016a00:	68b9      	ldr	r1, [r7, #8]
 8016a02:	6878      	ldr	r0, [r7, #4]
 8016a04:	f000 f80a 	bl	8016a1c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d1e3      	bne.n	80169d6 <ip_reass_tmr+0x12>
    }
  }
}
 8016a0e:	bf00      	nop
 8016a10:	bf00      	nop
 8016a12:	3710      	adds	r7, #16
 8016a14:	46bd      	mov	sp, r7
 8016a16:	bd80      	pop	{r7, pc}
 8016a18:	200053c0 	.word	0x200053c0

08016a1c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016a1c:	b580      	push	{r7, lr}
 8016a1e:	b088      	sub	sp, #32
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	6078      	str	r0, [r7, #4]
 8016a24:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016a26:	2300      	movs	r3, #0
 8016a28:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016a2a:	683a      	ldr	r2, [r7, #0]
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	429a      	cmp	r2, r3
 8016a30:	d105      	bne.n	8016a3e <ip_reass_free_complete_datagram+0x22>
 8016a32:	4b45      	ldr	r3, [pc, #276]	; (8016b48 <ip_reass_free_complete_datagram+0x12c>)
 8016a34:	22ab      	movs	r2, #171	; 0xab
 8016a36:	4945      	ldr	r1, [pc, #276]	; (8016b4c <ip_reass_free_complete_datagram+0x130>)
 8016a38:	4845      	ldr	r0, [pc, #276]	; (8016b50 <ip_reass_free_complete_datagram+0x134>)
 8016a3a:	f001 fa01 	bl	8017e40 <iprintf>
  if (prev != NULL) {
 8016a3e:	683b      	ldr	r3, [r7, #0]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d00a      	beq.n	8016a5a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016a44:	683b      	ldr	r3, [r7, #0]
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	687a      	ldr	r2, [r7, #4]
 8016a4a:	429a      	cmp	r2, r3
 8016a4c:	d005      	beq.n	8016a5a <ip_reass_free_complete_datagram+0x3e>
 8016a4e:	4b3e      	ldr	r3, [pc, #248]	; (8016b48 <ip_reass_free_complete_datagram+0x12c>)
 8016a50:	22ad      	movs	r2, #173	; 0xad
 8016a52:	4940      	ldr	r1, [pc, #256]	; (8016b54 <ip_reass_free_complete_datagram+0x138>)
 8016a54:	483e      	ldr	r0, [pc, #248]	; (8016b50 <ip_reass_free_complete_datagram+0x134>)
 8016a56:	f001 f9f3 	bl	8017e40 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	685b      	ldr	r3, [r3, #4]
 8016a5e:	685b      	ldr	r3, [r3, #4]
 8016a60:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016a62:	697b      	ldr	r3, [r7, #20]
 8016a64:	889b      	ldrh	r3, [r3, #4]
 8016a66:	b29b      	uxth	r3, r3
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d12a      	bne.n	8016ac2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	685b      	ldr	r3, [r3, #4]
 8016a70:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016a72:	697b      	ldr	r3, [r7, #20]
 8016a74:	681a      	ldr	r2, [r3, #0]
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016a7a:	69bb      	ldr	r3, [r7, #24]
 8016a7c:	6858      	ldr	r0, [r3, #4]
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	3308      	adds	r3, #8
 8016a82:	2214      	movs	r2, #20
 8016a84:	4619      	mov	r1, r3
 8016a86:	f001 f901 	bl	8017c8c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016a8a:	2101      	movs	r1, #1
 8016a8c:	69b8      	ldr	r0, [r7, #24]
 8016a8e:	f7ff fc47 	bl	8016320 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016a92:	69b8      	ldr	r0, [r7, #24]
 8016a94:	f7f7 fe4e 	bl	800e734 <pbuf_clen>
 8016a98:	4603      	mov	r3, r0
 8016a9a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016a9c:	8bfa      	ldrh	r2, [r7, #30]
 8016a9e:	8a7b      	ldrh	r3, [r7, #18]
 8016aa0:	4413      	add	r3, r2
 8016aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016aa6:	db05      	blt.n	8016ab4 <ip_reass_free_complete_datagram+0x98>
 8016aa8:	4b27      	ldr	r3, [pc, #156]	; (8016b48 <ip_reass_free_complete_datagram+0x12c>)
 8016aaa:	22bc      	movs	r2, #188	; 0xbc
 8016aac:	492a      	ldr	r1, [pc, #168]	; (8016b58 <ip_reass_free_complete_datagram+0x13c>)
 8016aae:	4828      	ldr	r0, [pc, #160]	; (8016b50 <ip_reass_free_complete_datagram+0x134>)
 8016ab0:	f001 f9c6 	bl	8017e40 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016ab4:	8bfa      	ldrh	r2, [r7, #30]
 8016ab6:	8a7b      	ldrh	r3, [r7, #18]
 8016ab8:	4413      	add	r3, r2
 8016aba:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016abc:	69b8      	ldr	r0, [r7, #24]
 8016abe:	f7f7 fdab 	bl	800e618 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	685b      	ldr	r3, [r3, #4]
 8016ac6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016ac8:	e01f      	b.n	8016b0a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016aca:	69bb      	ldr	r3, [r7, #24]
 8016acc:	685b      	ldr	r3, [r3, #4]
 8016ace:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016ad0:	69bb      	ldr	r3, [r7, #24]
 8016ad2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016ad4:	697b      	ldr	r3, [r7, #20]
 8016ad6:	681b      	ldr	r3, [r3, #0]
 8016ad8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016ada:	68f8      	ldr	r0, [r7, #12]
 8016adc:	f7f7 fe2a 	bl	800e734 <pbuf_clen>
 8016ae0:	4603      	mov	r3, r0
 8016ae2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016ae4:	8bfa      	ldrh	r2, [r7, #30]
 8016ae6:	8a7b      	ldrh	r3, [r7, #18]
 8016ae8:	4413      	add	r3, r2
 8016aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016aee:	db05      	blt.n	8016afc <ip_reass_free_complete_datagram+0xe0>
 8016af0:	4b15      	ldr	r3, [pc, #84]	; (8016b48 <ip_reass_free_complete_datagram+0x12c>)
 8016af2:	22cc      	movs	r2, #204	; 0xcc
 8016af4:	4918      	ldr	r1, [pc, #96]	; (8016b58 <ip_reass_free_complete_datagram+0x13c>)
 8016af6:	4816      	ldr	r0, [pc, #88]	; (8016b50 <ip_reass_free_complete_datagram+0x134>)
 8016af8:	f001 f9a2 	bl	8017e40 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016afc:	8bfa      	ldrh	r2, [r7, #30]
 8016afe:	8a7b      	ldrh	r3, [r7, #18]
 8016b00:	4413      	add	r3, r2
 8016b02:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016b04:	68f8      	ldr	r0, [r7, #12]
 8016b06:	f7f7 fd87 	bl	800e618 <pbuf_free>
  while (p != NULL) {
 8016b0a:	69bb      	ldr	r3, [r7, #24]
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d1dc      	bne.n	8016aca <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016b10:	6839      	ldr	r1, [r7, #0]
 8016b12:	6878      	ldr	r0, [r7, #4]
 8016b14:	f000 f8c2 	bl	8016c9c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016b18:	4b10      	ldr	r3, [pc, #64]	; (8016b5c <ip_reass_free_complete_datagram+0x140>)
 8016b1a:	881b      	ldrh	r3, [r3, #0]
 8016b1c:	8bfa      	ldrh	r2, [r7, #30]
 8016b1e:	429a      	cmp	r2, r3
 8016b20:	d905      	bls.n	8016b2e <ip_reass_free_complete_datagram+0x112>
 8016b22:	4b09      	ldr	r3, [pc, #36]	; (8016b48 <ip_reass_free_complete_datagram+0x12c>)
 8016b24:	22d2      	movs	r2, #210	; 0xd2
 8016b26:	490e      	ldr	r1, [pc, #56]	; (8016b60 <ip_reass_free_complete_datagram+0x144>)
 8016b28:	4809      	ldr	r0, [pc, #36]	; (8016b50 <ip_reass_free_complete_datagram+0x134>)
 8016b2a:	f001 f989 	bl	8017e40 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016b2e:	4b0b      	ldr	r3, [pc, #44]	; (8016b5c <ip_reass_free_complete_datagram+0x140>)
 8016b30:	881a      	ldrh	r2, [r3, #0]
 8016b32:	8bfb      	ldrh	r3, [r7, #30]
 8016b34:	1ad3      	subs	r3, r2, r3
 8016b36:	b29a      	uxth	r2, r3
 8016b38:	4b08      	ldr	r3, [pc, #32]	; (8016b5c <ip_reass_free_complete_datagram+0x140>)
 8016b3a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016b3c:	8bfb      	ldrh	r3, [r7, #30]
}
 8016b3e:	4618      	mov	r0, r3
 8016b40:	3720      	adds	r7, #32
 8016b42:	46bd      	mov	sp, r7
 8016b44:	bd80      	pop	{r7, pc}
 8016b46:	bf00      	nop
 8016b48:	0801ced8 	.word	0x0801ced8
 8016b4c:	0801cf14 	.word	0x0801cf14
 8016b50:	0801cf20 	.word	0x0801cf20
 8016b54:	0801cf48 	.word	0x0801cf48
 8016b58:	0801cf5c 	.word	0x0801cf5c
 8016b5c:	200053c4 	.word	0x200053c4
 8016b60:	0801cf7c 	.word	0x0801cf7c

08016b64 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016b64:	b580      	push	{r7, lr}
 8016b66:	b08a      	sub	sp, #40	; 0x28
 8016b68:	af00      	add	r7, sp, #0
 8016b6a:	6078      	str	r0, [r7, #4]
 8016b6c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016b6e:	2300      	movs	r3, #0
 8016b70:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016b72:	2300      	movs	r3, #0
 8016b74:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016b76:	2300      	movs	r3, #0
 8016b78:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016b7a:	2300      	movs	r3, #0
 8016b7c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016b7e:	2300      	movs	r3, #0
 8016b80:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016b82:	4b28      	ldr	r3, [pc, #160]	; (8016c24 <ip_reass_remove_oldest_datagram+0xc0>)
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016b88:	e030      	b.n	8016bec <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b8c:	695a      	ldr	r2, [r3, #20]
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	68db      	ldr	r3, [r3, #12]
 8016b92:	429a      	cmp	r2, r3
 8016b94:	d10c      	bne.n	8016bb0 <ip_reass_remove_oldest_datagram+0x4c>
 8016b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b98:	699a      	ldr	r2, [r3, #24]
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	691b      	ldr	r3, [r3, #16]
 8016b9e:	429a      	cmp	r2, r3
 8016ba0:	d106      	bne.n	8016bb0 <ip_reass_remove_oldest_datagram+0x4c>
 8016ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ba4:	899a      	ldrh	r2, [r3, #12]
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	889b      	ldrh	r3, [r3, #4]
 8016baa:	b29b      	uxth	r3, r3
 8016bac:	429a      	cmp	r2, r3
 8016bae:	d014      	beq.n	8016bda <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016bb0:	693b      	ldr	r3, [r7, #16]
 8016bb2:	3301      	adds	r3, #1
 8016bb4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016bb6:	6a3b      	ldr	r3, [r7, #32]
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d104      	bne.n	8016bc6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bbe:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016bc0:	69fb      	ldr	r3, [r7, #28]
 8016bc2:	61bb      	str	r3, [r7, #24]
 8016bc4:	e009      	b.n	8016bda <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bc8:	7fda      	ldrb	r2, [r3, #31]
 8016bca:	6a3b      	ldr	r3, [r7, #32]
 8016bcc:	7fdb      	ldrb	r3, [r3, #31]
 8016bce:	429a      	cmp	r2, r3
 8016bd0:	d803      	bhi.n	8016bda <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bd4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016bd6:	69fb      	ldr	r3, [r7, #28]
 8016bd8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d001      	beq.n	8016be6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016be4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d1cb      	bne.n	8016b8a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016bf2:	6a3b      	ldr	r3, [r7, #32]
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d008      	beq.n	8016c0a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016bf8:	69b9      	ldr	r1, [r7, #24]
 8016bfa:	6a38      	ldr	r0, [r7, #32]
 8016bfc:	f7ff ff0e 	bl	8016a1c <ip_reass_free_complete_datagram>
 8016c00:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016c02:	697a      	ldr	r2, [r7, #20]
 8016c04:	68fb      	ldr	r3, [r7, #12]
 8016c06:	4413      	add	r3, r2
 8016c08:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016c0a:	697a      	ldr	r2, [r7, #20]
 8016c0c:	683b      	ldr	r3, [r7, #0]
 8016c0e:	429a      	cmp	r2, r3
 8016c10:	da02      	bge.n	8016c18 <ip_reass_remove_oldest_datagram+0xb4>
 8016c12:	693b      	ldr	r3, [r7, #16]
 8016c14:	2b01      	cmp	r3, #1
 8016c16:	dcac      	bgt.n	8016b72 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016c18:	697b      	ldr	r3, [r7, #20]
}
 8016c1a:	4618      	mov	r0, r3
 8016c1c:	3728      	adds	r7, #40	; 0x28
 8016c1e:	46bd      	mov	sp, r7
 8016c20:	bd80      	pop	{r7, pc}
 8016c22:	bf00      	nop
 8016c24:	200053c0 	.word	0x200053c0

08016c28 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016c28:	b580      	push	{r7, lr}
 8016c2a:	b084      	sub	sp, #16
 8016c2c:	af00      	add	r7, sp, #0
 8016c2e:	6078      	str	r0, [r7, #4]
 8016c30:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016c32:	2004      	movs	r0, #4
 8016c34:	f7f6 fdfa 	bl	800d82c <memp_malloc>
 8016c38:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d110      	bne.n	8016c62 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016c40:	6839      	ldr	r1, [r7, #0]
 8016c42:	6878      	ldr	r0, [r7, #4]
 8016c44:	f7ff ff8e 	bl	8016b64 <ip_reass_remove_oldest_datagram>
 8016c48:	4602      	mov	r2, r0
 8016c4a:	683b      	ldr	r3, [r7, #0]
 8016c4c:	4293      	cmp	r3, r2
 8016c4e:	dc03      	bgt.n	8016c58 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016c50:	2004      	movs	r0, #4
 8016c52:	f7f6 fdeb 	bl	800d82c <memp_malloc>
 8016c56:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d101      	bne.n	8016c62 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016c5e:	2300      	movs	r3, #0
 8016c60:	e016      	b.n	8016c90 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016c62:	2220      	movs	r2, #32
 8016c64:	2100      	movs	r1, #0
 8016c66:	68f8      	ldr	r0, [r7, #12]
 8016c68:	f001 f838 	bl	8017cdc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016c6c:	68fb      	ldr	r3, [r7, #12]
 8016c6e:	220f      	movs	r2, #15
 8016c70:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016c72:	4b09      	ldr	r3, [pc, #36]	; (8016c98 <ip_reass_enqueue_new_datagram+0x70>)
 8016c74:	681a      	ldr	r2, [r3, #0]
 8016c76:	68fb      	ldr	r3, [r7, #12]
 8016c78:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016c7a:	4a07      	ldr	r2, [pc, #28]	; (8016c98 <ip_reass_enqueue_new_datagram+0x70>)
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016c80:	68fb      	ldr	r3, [r7, #12]
 8016c82:	3308      	adds	r3, #8
 8016c84:	2214      	movs	r2, #20
 8016c86:	6879      	ldr	r1, [r7, #4]
 8016c88:	4618      	mov	r0, r3
 8016c8a:	f000 ffff 	bl	8017c8c <memcpy>
  return ipr;
 8016c8e:	68fb      	ldr	r3, [r7, #12]
}
 8016c90:	4618      	mov	r0, r3
 8016c92:	3710      	adds	r7, #16
 8016c94:	46bd      	mov	sp, r7
 8016c96:	bd80      	pop	{r7, pc}
 8016c98:	200053c0 	.word	0x200053c0

08016c9c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016c9c:	b580      	push	{r7, lr}
 8016c9e:	b082      	sub	sp, #8
 8016ca0:	af00      	add	r7, sp, #0
 8016ca2:	6078      	str	r0, [r7, #4]
 8016ca4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016ca6:	4b10      	ldr	r3, [pc, #64]	; (8016ce8 <ip_reass_dequeue_datagram+0x4c>)
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	687a      	ldr	r2, [r7, #4]
 8016cac:	429a      	cmp	r2, r3
 8016cae:	d104      	bne.n	8016cba <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	681b      	ldr	r3, [r3, #0]
 8016cb4:	4a0c      	ldr	r2, [pc, #48]	; (8016ce8 <ip_reass_dequeue_datagram+0x4c>)
 8016cb6:	6013      	str	r3, [r2, #0]
 8016cb8:	e00d      	b.n	8016cd6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016cba:	683b      	ldr	r3, [r7, #0]
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d106      	bne.n	8016cce <ip_reass_dequeue_datagram+0x32>
 8016cc0:	4b0a      	ldr	r3, [pc, #40]	; (8016cec <ip_reass_dequeue_datagram+0x50>)
 8016cc2:	f240 1245 	movw	r2, #325	; 0x145
 8016cc6:	490a      	ldr	r1, [pc, #40]	; (8016cf0 <ip_reass_dequeue_datagram+0x54>)
 8016cc8:	480a      	ldr	r0, [pc, #40]	; (8016cf4 <ip_reass_dequeue_datagram+0x58>)
 8016cca:	f001 f8b9 	bl	8017e40 <iprintf>
    prev->next = ipr->next;
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	681a      	ldr	r2, [r3, #0]
 8016cd2:	683b      	ldr	r3, [r7, #0]
 8016cd4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016cd6:	6879      	ldr	r1, [r7, #4]
 8016cd8:	2004      	movs	r0, #4
 8016cda:	f7f6 fdf9 	bl	800d8d0 <memp_free>
}
 8016cde:	bf00      	nop
 8016ce0:	3708      	adds	r7, #8
 8016ce2:	46bd      	mov	sp, r7
 8016ce4:	bd80      	pop	{r7, pc}
 8016ce6:	bf00      	nop
 8016ce8:	200053c0 	.word	0x200053c0
 8016cec:	0801ced8 	.word	0x0801ced8
 8016cf0:	0801cfa0 	.word	0x0801cfa0
 8016cf4:	0801cf20 	.word	0x0801cf20

08016cf8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016cf8:	b580      	push	{r7, lr}
 8016cfa:	b08c      	sub	sp, #48	; 0x30
 8016cfc:	af00      	add	r7, sp, #0
 8016cfe:	60f8      	str	r0, [r7, #12]
 8016d00:	60b9      	str	r1, [r7, #8]
 8016d02:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016d04:	2300      	movs	r3, #0
 8016d06:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016d08:	2301      	movs	r3, #1
 8016d0a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016d0c:	68bb      	ldr	r3, [r7, #8]
 8016d0e:	685b      	ldr	r3, [r3, #4]
 8016d10:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016d12:	69fb      	ldr	r3, [r7, #28]
 8016d14:	885b      	ldrh	r3, [r3, #2]
 8016d16:	b29b      	uxth	r3, r3
 8016d18:	4618      	mov	r0, r3
 8016d1a:	f7f5 fff3 	bl	800cd04 <lwip_htons>
 8016d1e:	4603      	mov	r3, r0
 8016d20:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016d22:	69fb      	ldr	r3, [r7, #28]
 8016d24:	781b      	ldrb	r3, [r3, #0]
 8016d26:	f003 030f 	and.w	r3, r3, #15
 8016d2a:	b2db      	uxtb	r3, r3
 8016d2c:	009b      	lsls	r3, r3, #2
 8016d2e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016d30:	7e7b      	ldrb	r3, [r7, #25]
 8016d32:	b29b      	uxth	r3, r3
 8016d34:	8b7a      	ldrh	r2, [r7, #26]
 8016d36:	429a      	cmp	r2, r3
 8016d38:	d202      	bcs.n	8016d40 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d3e:	e135      	b.n	8016fac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016d40:	7e7b      	ldrb	r3, [r7, #25]
 8016d42:	b29b      	uxth	r3, r3
 8016d44:	8b7a      	ldrh	r2, [r7, #26]
 8016d46:	1ad3      	subs	r3, r2, r3
 8016d48:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016d4a:	69fb      	ldr	r3, [r7, #28]
 8016d4c:	88db      	ldrh	r3, [r3, #6]
 8016d4e:	b29b      	uxth	r3, r3
 8016d50:	4618      	mov	r0, r3
 8016d52:	f7f5 ffd7 	bl	800cd04 <lwip_htons>
 8016d56:	4603      	mov	r3, r0
 8016d58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016d5c:	b29b      	uxth	r3, r3
 8016d5e:	00db      	lsls	r3, r3, #3
 8016d60:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016d62:	68bb      	ldr	r3, [r7, #8]
 8016d64:	685b      	ldr	r3, [r3, #4]
 8016d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d6a:	2200      	movs	r2, #0
 8016d6c:	701a      	strb	r2, [r3, #0]
 8016d6e:	2200      	movs	r2, #0
 8016d70:	705a      	strb	r2, [r3, #1]
 8016d72:	2200      	movs	r2, #0
 8016d74:	709a      	strb	r2, [r3, #2]
 8016d76:	2200      	movs	r2, #0
 8016d78:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d7c:	8afa      	ldrh	r2, [r7, #22]
 8016d7e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016d80:	8afa      	ldrh	r2, [r7, #22]
 8016d82:	8b7b      	ldrh	r3, [r7, #26]
 8016d84:	4413      	add	r3, r2
 8016d86:	b29a      	uxth	r2, r3
 8016d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d8a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d8e:	88db      	ldrh	r3, [r3, #6]
 8016d90:	b29b      	uxth	r3, r3
 8016d92:	8afa      	ldrh	r2, [r7, #22]
 8016d94:	429a      	cmp	r2, r3
 8016d96:	d902      	bls.n	8016d9e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016d9c:	e106      	b.n	8016fac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	685b      	ldr	r3, [r3, #4]
 8016da2:	627b      	str	r3, [r7, #36]	; 0x24
 8016da4:	e068      	b.n	8016e78 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016da8:	685b      	ldr	r3, [r3, #4]
 8016daa:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dae:	889b      	ldrh	r3, [r3, #4]
 8016db0:	b29a      	uxth	r2, r3
 8016db2:	693b      	ldr	r3, [r7, #16]
 8016db4:	889b      	ldrh	r3, [r3, #4]
 8016db6:	b29b      	uxth	r3, r3
 8016db8:	429a      	cmp	r2, r3
 8016dba:	d235      	bcs.n	8016e28 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016dc0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d020      	beq.n	8016e0a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dca:	889b      	ldrh	r3, [r3, #4]
 8016dcc:	b29a      	uxth	r2, r3
 8016dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dd0:	88db      	ldrh	r3, [r3, #6]
 8016dd2:	b29b      	uxth	r3, r3
 8016dd4:	429a      	cmp	r2, r3
 8016dd6:	d307      	bcc.n	8016de8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dda:	88db      	ldrh	r3, [r3, #6]
 8016ddc:	b29a      	uxth	r2, r3
 8016dde:	693b      	ldr	r3, [r7, #16]
 8016de0:	889b      	ldrh	r3, [r3, #4]
 8016de2:	b29b      	uxth	r3, r3
 8016de4:	429a      	cmp	r2, r3
 8016de6:	d902      	bls.n	8016dee <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016de8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016dec:	e0de      	b.n	8016fac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016df0:	68ba      	ldr	r2, [r7, #8]
 8016df2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016df6:	88db      	ldrh	r3, [r3, #6]
 8016df8:	b29a      	uxth	r2, r3
 8016dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016dfc:	889b      	ldrh	r3, [r3, #4]
 8016dfe:	b29b      	uxth	r3, r3
 8016e00:	429a      	cmp	r2, r3
 8016e02:	d03d      	beq.n	8016e80 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016e04:	2300      	movs	r3, #0
 8016e06:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016e08:	e03a      	b.n	8016e80 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e0c:	88db      	ldrh	r3, [r3, #6]
 8016e0e:	b29a      	uxth	r2, r3
 8016e10:	693b      	ldr	r3, [r7, #16]
 8016e12:	889b      	ldrh	r3, [r3, #4]
 8016e14:	b29b      	uxth	r3, r3
 8016e16:	429a      	cmp	r2, r3
 8016e18:	d902      	bls.n	8016e20 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016e1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016e1e:	e0c5      	b.n	8016fac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016e20:	68fb      	ldr	r3, [r7, #12]
 8016e22:	68ba      	ldr	r2, [r7, #8]
 8016e24:	605a      	str	r2, [r3, #4]
      break;
 8016e26:	e02b      	b.n	8016e80 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e2a:	889b      	ldrh	r3, [r3, #4]
 8016e2c:	b29a      	uxth	r2, r3
 8016e2e:	693b      	ldr	r3, [r7, #16]
 8016e30:	889b      	ldrh	r3, [r3, #4]
 8016e32:	b29b      	uxth	r3, r3
 8016e34:	429a      	cmp	r2, r3
 8016e36:	d102      	bne.n	8016e3e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016e38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016e3c:	e0b6      	b.n	8016fac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e40:	889b      	ldrh	r3, [r3, #4]
 8016e42:	b29a      	uxth	r2, r3
 8016e44:	693b      	ldr	r3, [r7, #16]
 8016e46:	88db      	ldrh	r3, [r3, #6]
 8016e48:	b29b      	uxth	r3, r3
 8016e4a:	429a      	cmp	r2, r3
 8016e4c:	d202      	bcs.n	8016e54 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016e4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016e52:	e0ab      	b.n	8016fac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d009      	beq.n	8016e6e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e5c:	88db      	ldrh	r3, [r3, #6]
 8016e5e:	b29a      	uxth	r2, r3
 8016e60:	693b      	ldr	r3, [r7, #16]
 8016e62:	889b      	ldrh	r3, [r3, #4]
 8016e64:	b29b      	uxth	r3, r3
 8016e66:	429a      	cmp	r2, r3
 8016e68:	d001      	beq.n	8016e6e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016e6a:	2300      	movs	r3, #0
 8016e6c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016e6e:	693b      	ldr	r3, [r7, #16]
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016e74:	693b      	ldr	r3, [r7, #16]
 8016e76:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d193      	bne.n	8016da6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016e7e:	e000      	b.n	8016e82 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016e80:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d12d      	bne.n	8016ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d01c      	beq.n	8016ec8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e90:	88db      	ldrh	r3, [r3, #6]
 8016e92:	b29a      	uxth	r2, r3
 8016e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e96:	889b      	ldrh	r3, [r3, #4]
 8016e98:	b29b      	uxth	r3, r3
 8016e9a:	429a      	cmp	r2, r3
 8016e9c:	d906      	bls.n	8016eac <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016e9e:	4b45      	ldr	r3, [pc, #276]	; (8016fb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016ea0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8016ea4:	4944      	ldr	r1, [pc, #272]	; (8016fb8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016ea6:	4845      	ldr	r0, [pc, #276]	; (8016fbc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016ea8:	f000 ffca 	bl	8017e40 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016eae:	68ba      	ldr	r2, [r7, #8]
 8016eb0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016eb4:	88db      	ldrh	r3, [r3, #6]
 8016eb6:	b29a      	uxth	r2, r3
 8016eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eba:	889b      	ldrh	r3, [r3, #4]
 8016ebc:	b29b      	uxth	r3, r3
 8016ebe:	429a      	cmp	r2, r3
 8016ec0:	d010      	beq.n	8016ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016ec2:	2300      	movs	r3, #0
 8016ec4:	623b      	str	r3, [r7, #32]
 8016ec6:	e00d      	b.n	8016ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	685b      	ldr	r3, [r3, #4]
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d006      	beq.n	8016ede <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016ed0:	4b38      	ldr	r3, [pc, #224]	; (8016fb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016ed2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8016ed6:	493a      	ldr	r1, [pc, #232]	; (8016fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016ed8:	4838      	ldr	r0, [pc, #224]	; (8016fbc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016eda:	f000 ffb1 	bl	8017e40 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	68ba      	ldr	r2, [r7, #8]
 8016ee2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d105      	bne.n	8016ef6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	7f9b      	ldrb	r3, [r3, #30]
 8016eee:	f003 0301 	and.w	r3, r3, #1
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d059      	beq.n	8016faa <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016ef6:	6a3b      	ldr	r3, [r7, #32]
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d04f      	beq.n	8016f9c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016efc:	68fb      	ldr	r3, [r7, #12]
 8016efe:	685b      	ldr	r3, [r3, #4]
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d006      	beq.n	8016f12 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	685b      	ldr	r3, [r3, #4]
 8016f08:	685b      	ldr	r3, [r3, #4]
 8016f0a:	889b      	ldrh	r3, [r3, #4]
 8016f0c:	b29b      	uxth	r3, r3
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d002      	beq.n	8016f18 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016f12:	2300      	movs	r3, #0
 8016f14:	623b      	str	r3, [r7, #32]
 8016f16:	e041      	b.n	8016f9c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f1a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f1e:	681b      	ldr	r3, [r3, #0]
 8016f20:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016f22:	e012      	b.n	8016f4a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f26:	685b      	ldr	r3, [r3, #4]
 8016f28:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f2c:	88db      	ldrh	r3, [r3, #6]
 8016f2e:	b29a      	uxth	r2, r3
 8016f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f32:	889b      	ldrh	r3, [r3, #4]
 8016f34:	b29b      	uxth	r3, r3
 8016f36:	429a      	cmp	r2, r3
 8016f38:	d002      	beq.n	8016f40 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	623b      	str	r3, [r7, #32]
            break;
 8016f3e:	e007      	b.n	8016f50 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f42:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d1e9      	bne.n	8016f24 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016f50:	6a3b      	ldr	r3, [r7, #32]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d022      	beq.n	8016f9c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016f56:	68fb      	ldr	r3, [r7, #12]
 8016f58:	685b      	ldr	r3, [r3, #4]
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d106      	bne.n	8016f6c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016f5e:	4b15      	ldr	r3, [pc, #84]	; (8016fb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016f60:	f240 12df 	movw	r2, #479	; 0x1df
 8016f64:	4917      	ldr	r1, [pc, #92]	; (8016fc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016f66:	4815      	ldr	r0, [pc, #84]	; (8016fbc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016f68:	f000 ff6a 	bl	8017e40 <iprintf>
          LWIP_ASSERT("sanity check",
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	685b      	ldr	r3, [r3, #4]
 8016f70:	685b      	ldr	r3, [r3, #4]
 8016f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016f74:	429a      	cmp	r2, r3
 8016f76:	d106      	bne.n	8016f86 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016f78:	4b0e      	ldr	r3, [pc, #56]	; (8016fb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016f7a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016f7e:	4911      	ldr	r1, [pc, #68]	; (8016fc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016f80:	480e      	ldr	r0, [pc, #56]	; (8016fbc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016f82:	f000 ff5d 	bl	8017e40 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f88:	681b      	ldr	r3, [r3, #0]
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d006      	beq.n	8016f9c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016f8e:	4b09      	ldr	r3, [pc, #36]	; (8016fb4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016f90:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8016f94:	490c      	ldr	r1, [pc, #48]	; (8016fc8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016f96:	4809      	ldr	r0, [pc, #36]	; (8016fbc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016f98:	f000 ff52 	bl	8017e40 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016f9c:	6a3b      	ldr	r3, [r7, #32]
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	bf14      	ite	ne
 8016fa2:	2301      	movne	r3, #1
 8016fa4:	2300      	moveq	r3, #0
 8016fa6:	b2db      	uxtb	r3, r3
 8016fa8:	e000      	b.n	8016fac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016faa:	2300      	movs	r3, #0
}
 8016fac:	4618      	mov	r0, r3
 8016fae:	3730      	adds	r7, #48	; 0x30
 8016fb0:	46bd      	mov	sp, r7
 8016fb2:	bd80      	pop	{r7, pc}
 8016fb4:	0801ced8 	.word	0x0801ced8
 8016fb8:	0801cfbc 	.word	0x0801cfbc
 8016fbc:	0801cf20 	.word	0x0801cf20
 8016fc0:	0801cfdc 	.word	0x0801cfdc
 8016fc4:	0801d014 	.word	0x0801d014
 8016fc8:	0801d024 	.word	0x0801d024

08016fcc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016fcc:	b580      	push	{r7, lr}
 8016fce:	b08e      	sub	sp, #56	; 0x38
 8016fd0:	af00      	add	r7, sp, #0
 8016fd2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	685b      	ldr	r3, [r3, #4]
 8016fd8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fdc:	781b      	ldrb	r3, [r3, #0]
 8016fde:	f003 030f 	and.w	r3, r3, #15
 8016fe2:	b2db      	uxtb	r3, r3
 8016fe4:	009b      	lsls	r3, r3, #2
 8016fe6:	b2db      	uxtb	r3, r3
 8016fe8:	2b14      	cmp	r3, #20
 8016fea:	f040 8167 	bne.w	80172bc <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8016fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ff0:	88db      	ldrh	r3, [r3, #6]
 8016ff2:	b29b      	uxth	r3, r3
 8016ff4:	4618      	mov	r0, r3
 8016ff6:	f7f5 fe85 	bl	800cd04 <lwip_htons>
 8016ffa:	4603      	mov	r3, r0
 8016ffc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017000:	b29b      	uxth	r3, r3
 8017002:	00db      	lsls	r3, r3, #3
 8017004:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017008:	885b      	ldrh	r3, [r3, #2]
 801700a:	b29b      	uxth	r3, r3
 801700c:	4618      	mov	r0, r3
 801700e:	f7f5 fe79 	bl	800cd04 <lwip_htons>
 8017012:	4603      	mov	r3, r0
 8017014:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017018:	781b      	ldrb	r3, [r3, #0]
 801701a:	f003 030f 	and.w	r3, r3, #15
 801701e:	b2db      	uxtb	r3, r3
 8017020:	009b      	lsls	r3, r3, #2
 8017022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8017026:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801702a:	b29b      	uxth	r3, r3
 801702c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801702e:	429a      	cmp	r2, r3
 8017030:	f0c0 8146 	bcc.w	80172c0 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017034:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017038:	b29b      	uxth	r3, r3
 801703a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801703c:	1ad3      	subs	r3, r2, r3
 801703e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017040:	6878      	ldr	r0, [r7, #4]
 8017042:	f7f7 fb77 	bl	800e734 <pbuf_clen>
 8017046:	4603      	mov	r3, r0
 8017048:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801704a:	4b9f      	ldr	r3, [pc, #636]	; (80172c8 <ip4_reass+0x2fc>)
 801704c:	881b      	ldrh	r3, [r3, #0]
 801704e:	461a      	mov	r2, r3
 8017050:	8c3b      	ldrh	r3, [r7, #32]
 8017052:	4413      	add	r3, r2
 8017054:	2b0a      	cmp	r3, #10
 8017056:	dd10      	ble.n	801707a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017058:	8c3b      	ldrh	r3, [r7, #32]
 801705a:	4619      	mov	r1, r3
 801705c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801705e:	f7ff fd81 	bl	8016b64 <ip_reass_remove_oldest_datagram>
 8017062:	4603      	mov	r3, r0
 8017064:	2b00      	cmp	r3, #0
 8017066:	f000 812d 	beq.w	80172c4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801706a:	4b97      	ldr	r3, [pc, #604]	; (80172c8 <ip4_reass+0x2fc>)
 801706c:	881b      	ldrh	r3, [r3, #0]
 801706e:	461a      	mov	r2, r3
 8017070:	8c3b      	ldrh	r3, [r7, #32]
 8017072:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017074:	2b0a      	cmp	r3, #10
 8017076:	f300 8125 	bgt.w	80172c4 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801707a:	4b94      	ldr	r3, [pc, #592]	; (80172cc <ip4_reass+0x300>)
 801707c:	681b      	ldr	r3, [r3, #0]
 801707e:	633b      	str	r3, [r7, #48]	; 0x30
 8017080:	e015      	b.n	80170ae <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017084:	695a      	ldr	r2, [r3, #20]
 8017086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017088:	68db      	ldr	r3, [r3, #12]
 801708a:	429a      	cmp	r2, r3
 801708c:	d10c      	bne.n	80170a8 <ip4_reass+0xdc>
 801708e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017090:	699a      	ldr	r2, [r3, #24]
 8017092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017094:	691b      	ldr	r3, [r3, #16]
 8017096:	429a      	cmp	r2, r3
 8017098:	d106      	bne.n	80170a8 <ip4_reass+0xdc>
 801709a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801709c:	899a      	ldrh	r2, [r3, #12]
 801709e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170a0:	889b      	ldrh	r3, [r3, #4]
 80170a2:	b29b      	uxth	r3, r3
 80170a4:	429a      	cmp	r2, r3
 80170a6:	d006      	beq.n	80170b6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80170a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170aa:	681b      	ldr	r3, [r3, #0]
 80170ac:	633b      	str	r3, [r7, #48]	; 0x30
 80170ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d1e6      	bne.n	8017082 <ip4_reass+0xb6>
 80170b4:	e000      	b.n	80170b8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80170b6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80170b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d109      	bne.n	80170d2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80170be:	8c3b      	ldrh	r3, [r7, #32]
 80170c0:	4619      	mov	r1, r3
 80170c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80170c4:	f7ff fdb0 	bl	8016c28 <ip_reass_enqueue_new_datagram>
 80170c8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80170ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	d11c      	bne.n	801710a <ip4_reass+0x13e>
      goto nullreturn;
 80170d0:	e109      	b.n	80172e6 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80170d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170d4:	88db      	ldrh	r3, [r3, #6]
 80170d6:	b29b      	uxth	r3, r3
 80170d8:	4618      	mov	r0, r3
 80170da:	f7f5 fe13 	bl	800cd04 <lwip_htons>
 80170de:	4603      	mov	r3, r0
 80170e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d110      	bne.n	801710a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80170e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170ea:	89db      	ldrh	r3, [r3, #14]
 80170ec:	4618      	mov	r0, r3
 80170ee:	f7f5 fe09 	bl	800cd04 <lwip_htons>
 80170f2:	4603      	mov	r3, r0
 80170f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d006      	beq.n	801710a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80170fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170fe:	3308      	adds	r3, #8
 8017100:	2214      	movs	r2, #20
 8017102:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017104:	4618      	mov	r0, r3
 8017106:	f000 fdc1 	bl	8017c8c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801710a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801710c:	88db      	ldrh	r3, [r3, #6]
 801710e:	b29b      	uxth	r3, r3
 8017110:	f003 0320 	and.w	r3, r3, #32
 8017114:	2b00      	cmp	r3, #0
 8017116:	bf0c      	ite	eq
 8017118:	2301      	moveq	r3, #1
 801711a:	2300      	movne	r3, #0
 801711c:	b2db      	uxtb	r3, r3
 801711e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017120:	69fb      	ldr	r3, [r7, #28]
 8017122:	2b00      	cmp	r3, #0
 8017124:	d00e      	beq.n	8017144 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017126:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017128:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801712a:	4413      	add	r3, r2
 801712c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801712e:	8b7a      	ldrh	r2, [r7, #26]
 8017130:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017132:	429a      	cmp	r2, r3
 8017134:	f0c0 80a0 	bcc.w	8017278 <ip4_reass+0x2ac>
 8017138:	8b7b      	ldrh	r3, [r7, #26]
 801713a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801713e:	4293      	cmp	r3, r2
 8017140:	f200 809a 	bhi.w	8017278 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017144:	69fa      	ldr	r2, [r7, #28]
 8017146:	6879      	ldr	r1, [r7, #4]
 8017148:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801714a:	f7ff fdd5 	bl	8016cf8 <ip_reass_chain_frag_into_datagram_and_validate>
 801714e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017150:	697b      	ldr	r3, [r7, #20]
 8017152:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017156:	f000 8091 	beq.w	801727c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801715a:	4b5b      	ldr	r3, [pc, #364]	; (80172c8 <ip4_reass+0x2fc>)
 801715c:	881a      	ldrh	r2, [r3, #0]
 801715e:	8c3b      	ldrh	r3, [r7, #32]
 8017160:	4413      	add	r3, r2
 8017162:	b29a      	uxth	r2, r3
 8017164:	4b58      	ldr	r3, [pc, #352]	; (80172c8 <ip4_reass+0x2fc>)
 8017166:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017168:	69fb      	ldr	r3, [r7, #28]
 801716a:	2b00      	cmp	r3, #0
 801716c:	d00d      	beq.n	801718a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801716e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017170:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017172:	4413      	add	r3, r2
 8017174:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017178:	8a7a      	ldrh	r2, [r7, #18]
 801717a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801717c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801717e:	7f9b      	ldrb	r3, [r3, #30]
 8017180:	f043 0301 	orr.w	r3, r3, #1
 8017184:	b2da      	uxtb	r2, r3
 8017186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017188:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801718a:	697b      	ldr	r3, [r7, #20]
 801718c:	2b01      	cmp	r3, #1
 801718e:	d171      	bne.n	8017274 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017192:	8b9b      	ldrh	r3, [r3, #28]
 8017194:	3314      	adds	r3, #20
 8017196:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801719a:	685b      	ldr	r3, [r3, #4]
 801719c:	685b      	ldr	r3, [r3, #4]
 801719e:	681b      	ldr	r3, [r3, #0]
 80171a0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80171a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171a4:	685b      	ldr	r3, [r3, #4]
 80171a6:	685b      	ldr	r3, [r3, #4]
 80171a8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80171aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171ac:	3308      	adds	r3, #8
 80171ae:	2214      	movs	r2, #20
 80171b0:	4619      	mov	r1, r3
 80171b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80171b4:	f000 fd6a 	bl	8017c8c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80171b8:	8a3b      	ldrh	r3, [r7, #16]
 80171ba:	4618      	mov	r0, r3
 80171bc:	f7f5 fda2 	bl	800cd04 <lwip_htons>
 80171c0:	4603      	mov	r3, r0
 80171c2:	461a      	mov	r2, r3
 80171c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171c6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80171c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171ca:	2200      	movs	r2, #0
 80171cc:	719a      	strb	r2, [r3, #6]
 80171ce:	2200      	movs	r2, #0
 80171d0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80171d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171d4:	2200      	movs	r2, #0
 80171d6:	729a      	strb	r2, [r3, #10]
 80171d8:	2200      	movs	r2, #0
 80171da:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80171dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171de:	685b      	ldr	r3, [r3, #4]
 80171e0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80171e2:	e00d      	b.n	8017200 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80171e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80171e6:	685b      	ldr	r3, [r3, #4]
 80171e8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80171ea:	2114      	movs	r1, #20
 80171ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80171ee:	f7f7 f98d 	bl	800e50c <pbuf_remove_header>
      pbuf_cat(p, r);
 80171f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80171f4:	6878      	ldr	r0, [r7, #4]
 80171f6:	f7f7 fadd 	bl	800e7b4 <pbuf_cat>
      r = iprh->next_pbuf;
 80171fa:	68fb      	ldr	r3, [r7, #12]
 80171fc:	681b      	ldr	r3, [r3, #0]
 80171fe:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017202:	2b00      	cmp	r3, #0
 8017204:	d1ee      	bne.n	80171e4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017206:	4b31      	ldr	r3, [pc, #196]	; (80172cc <ip4_reass+0x300>)
 8017208:	681b      	ldr	r3, [r3, #0]
 801720a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801720c:	429a      	cmp	r2, r3
 801720e:	d102      	bne.n	8017216 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017210:	2300      	movs	r3, #0
 8017212:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017214:	e010      	b.n	8017238 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017216:	4b2d      	ldr	r3, [pc, #180]	; (80172cc <ip4_reass+0x300>)
 8017218:	681b      	ldr	r3, [r3, #0]
 801721a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801721c:	e007      	b.n	801722e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801721e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017220:	681b      	ldr	r3, [r3, #0]
 8017222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017224:	429a      	cmp	r2, r3
 8017226:	d006      	beq.n	8017236 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801722a:	681b      	ldr	r3, [r3, #0]
 801722c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801722e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017230:	2b00      	cmp	r3, #0
 8017232:	d1f4      	bne.n	801721e <ip4_reass+0x252>
 8017234:	e000      	b.n	8017238 <ip4_reass+0x26c>
          break;
 8017236:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017238:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801723a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801723c:	f7ff fd2e 	bl	8016c9c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017240:	6878      	ldr	r0, [r7, #4]
 8017242:	f7f7 fa77 	bl	800e734 <pbuf_clen>
 8017246:	4603      	mov	r3, r0
 8017248:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801724a:	4b1f      	ldr	r3, [pc, #124]	; (80172c8 <ip4_reass+0x2fc>)
 801724c:	881b      	ldrh	r3, [r3, #0]
 801724e:	8c3a      	ldrh	r2, [r7, #32]
 8017250:	429a      	cmp	r2, r3
 8017252:	d906      	bls.n	8017262 <ip4_reass+0x296>
 8017254:	4b1e      	ldr	r3, [pc, #120]	; (80172d0 <ip4_reass+0x304>)
 8017256:	f240 229b 	movw	r2, #667	; 0x29b
 801725a:	491e      	ldr	r1, [pc, #120]	; (80172d4 <ip4_reass+0x308>)
 801725c:	481e      	ldr	r0, [pc, #120]	; (80172d8 <ip4_reass+0x30c>)
 801725e:	f000 fdef 	bl	8017e40 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017262:	4b19      	ldr	r3, [pc, #100]	; (80172c8 <ip4_reass+0x2fc>)
 8017264:	881a      	ldrh	r2, [r3, #0]
 8017266:	8c3b      	ldrh	r3, [r7, #32]
 8017268:	1ad3      	subs	r3, r2, r3
 801726a:	b29a      	uxth	r2, r3
 801726c:	4b16      	ldr	r3, [pc, #88]	; (80172c8 <ip4_reass+0x2fc>)
 801726e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	e03c      	b.n	80172ee <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017274:	2300      	movs	r3, #0
 8017276:	e03a      	b.n	80172ee <ip4_reass+0x322>
      goto nullreturn_ipr;
 8017278:	bf00      	nop
 801727a:	e000      	b.n	801727e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801727c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801727e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017280:	2b00      	cmp	r3, #0
 8017282:	d106      	bne.n	8017292 <ip4_reass+0x2c6>
 8017284:	4b12      	ldr	r3, [pc, #72]	; (80172d0 <ip4_reass+0x304>)
 8017286:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801728a:	4914      	ldr	r1, [pc, #80]	; (80172dc <ip4_reass+0x310>)
 801728c:	4812      	ldr	r0, [pc, #72]	; (80172d8 <ip4_reass+0x30c>)
 801728e:	f000 fdd7 	bl	8017e40 <iprintf>
  if (ipr->p == NULL) {
 8017292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017294:	685b      	ldr	r3, [r3, #4]
 8017296:	2b00      	cmp	r3, #0
 8017298:	d124      	bne.n	80172e4 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801729a:	4b0c      	ldr	r3, [pc, #48]	; (80172cc <ip4_reass+0x300>)
 801729c:	681b      	ldr	r3, [r3, #0]
 801729e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80172a0:	429a      	cmp	r2, r3
 80172a2:	d006      	beq.n	80172b2 <ip4_reass+0x2e6>
 80172a4:	4b0a      	ldr	r3, [pc, #40]	; (80172d0 <ip4_reass+0x304>)
 80172a6:	f240 22ab 	movw	r2, #683	; 0x2ab
 80172aa:	490d      	ldr	r1, [pc, #52]	; (80172e0 <ip4_reass+0x314>)
 80172ac:	480a      	ldr	r0, [pc, #40]	; (80172d8 <ip4_reass+0x30c>)
 80172ae:	f000 fdc7 	bl	8017e40 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80172b2:	2100      	movs	r1, #0
 80172b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80172b6:	f7ff fcf1 	bl	8016c9c <ip_reass_dequeue_datagram>
 80172ba:	e014      	b.n	80172e6 <ip4_reass+0x31a>
    goto nullreturn;
 80172bc:	bf00      	nop
 80172be:	e012      	b.n	80172e6 <ip4_reass+0x31a>
    goto nullreturn;
 80172c0:	bf00      	nop
 80172c2:	e010      	b.n	80172e6 <ip4_reass+0x31a>
      goto nullreturn;
 80172c4:	bf00      	nop
 80172c6:	e00e      	b.n	80172e6 <ip4_reass+0x31a>
 80172c8:	200053c4 	.word	0x200053c4
 80172cc:	200053c0 	.word	0x200053c0
 80172d0:	0801ced8 	.word	0x0801ced8
 80172d4:	0801d048 	.word	0x0801d048
 80172d8:	0801cf20 	.word	0x0801cf20
 80172dc:	0801d064 	.word	0x0801d064
 80172e0:	0801d070 	.word	0x0801d070
  }

nullreturn:
 80172e4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80172e6:	6878      	ldr	r0, [r7, #4]
 80172e8:	f7f7 f996 	bl	800e618 <pbuf_free>
  return NULL;
 80172ec:	2300      	movs	r3, #0
}
 80172ee:	4618      	mov	r0, r3
 80172f0:	3738      	adds	r7, #56	; 0x38
 80172f2:	46bd      	mov	sp, r7
 80172f4:	bd80      	pop	{r7, pc}
 80172f6:	bf00      	nop

080172f8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80172f8:	b580      	push	{r7, lr}
 80172fa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80172fc:	2005      	movs	r0, #5
 80172fe:	f7f6 fa95 	bl	800d82c <memp_malloc>
 8017302:	4603      	mov	r3, r0
}
 8017304:	4618      	mov	r0, r3
 8017306:	bd80      	pop	{r7, pc}

08017308 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017308:	b580      	push	{r7, lr}
 801730a:	b082      	sub	sp, #8
 801730c:	af00      	add	r7, sp, #0
 801730e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	2b00      	cmp	r3, #0
 8017314:	d106      	bne.n	8017324 <ip_frag_free_pbuf_custom_ref+0x1c>
 8017316:	4b07      	ldr	r3, [pc, #28]	; (8017334 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017318:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801731c:	4906      	ldr	r1, [pc, #24]	; (8017338 <ip_frag_free_pbuf_custom_ref+0x30>)
 801731e:	4807      	ldr	r0, [pc, #28]	; (801733c <ip_frag_free_pbuf_custom_ref+0x34>)
 8017320:	f000 fd8e 	bl	8017e40 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017324:	6879      	ldr	r1, [r7, #4]
 8017326:	2005      	movs	r0, #5
 8017328:	f7f6 fad2 	bl	800d8d0 <memp_free>
}
 801732c:	bf00      	nop
 801732e:	3708      	adds	r7, #8
 8017330:	46bd      	mov	sp, r7
 8017332:	bd80      	pop	{r7, pc}
 8017334:	0801ced8 	.word	0x0801ced8
 8017338:	0801d090 	.word	0x0801d090
 801733c:	0801cf20 	.word	0x0801cf20

08017340 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017340:	b580      	push	{r7, lr}
 8017342:	b084      	sub	sp, #16
 8017344:	af00      	add	r7, sp, #0
 8017346:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	2b00      	cmp	r3, #0
 8017350:	d106      	bne.n	8017360 <ipfrag_free_pbuf_custom+0x20>
 8017352:	4b11      	ldr	r3, [pc, #68]	; (8017398 <ipfrag_free_pbuf_custom+0x58>)
 8017354:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017358:	4910      	ldr	r1, [pc, #64]	; (801739c <ipfrag_free_pbuf_custom+0x5c>)
 801735a:	4811      	ldr	r0, [pc, #68]	; (80173a0 <ipfrag_free_pbuf_custom+0x60>)
 801735c:	f000 fd70 	bl	8017e40 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017360:	68fa      	ldr	r2, [r7, #12]
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	429a      	cmp	r2, r3
 8017366:	d006      	beq.n	8017376 <ipfrag_free_pbuf_custom+0x36>
 8017368:	4b0b      	ldr	r3, [pc, #44]	; (8017398 <ipfrag_free_pbuf_custom+0x58>)
 801736a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801736e:	490d      	ldr	r1, [pc, #52]	; (80173a4 <ipfrag_free_pbuf_custom+0x64>)
 8017370:	480b      	ldr	r0, [pc, #44]	; (80173a0 <ipfrag_free_pbuf_custom+0x60>)
 8017372:	f000 fd65 	bl	8017e40 <iprintf>
  if (pcr->original != NULL) {
 8017376:	68fb      	ldr	r3, [r7, #12]
 8017378:	695b      	ldr	r3, [r3, #20]
 801737a:	2b00      	cmp	r3, #0
 801737c:	d004      	beq.n	8017388 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801737e:	68fb      	ldr	r3, [r7, #12]
 8017380:	695b      	ldr	r3, [r3, #20]
 8017382:	4618      	mov	r0, r3
 8017384:	f7f7 f948 	bl	800e618 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017388:	68f8      	ldr	r0, [r7, #12]
 801738a:	f7ff ffbd 	bl	8017308 <ip_frag_free_pbuf_custom_ref>
}
 801738e:	bf00      	nop
 8017390:	3710      	adds	r7, #16
 8017392:	46bd      	mov	sp, r7
 8017394:	bd80      	pop	{r7, pc}
 8017396:	bf00      	nop
 8017398:	0801ced8 	.word	0x0801ced8
 801739c:	0801d09c 	.word	0x0801d09c
 80173a0:	0801cf20 	.word	0x0801cf20
 80173a4:	0801d0a8 	.word	0x0801d0a8

080173a8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80173a8:	b580      	push	{r7, lr}
 80173aa:	b094      	sub	sp, #80	; 0x50
 80173ac:	af02      	add	r7, sp, #8
 80173ae:	60f8      	str	r0, [r7, #12]
 80173b0:	60b9      	str	r1, [r7, #8]
 80173b2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80173b4:	2300      	movs	r3, #0
 80173b6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80173ba:	68bb      	ldr	r3, [r7, #8]
 80173bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80173be:	3b14      	subs	r3, #20
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	da00      	bge.n	80173c6 <ip4_frag+0x1e>
 80173c4:	3307      	adds	r3, #7
 80173c6:	10db      	asrs	r3, r3, #3
 80173c8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80173ca:	2314      	movs	r3, #20
 80173cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80173ce:	68fb      	ldr	r3, [r7, #12]
 80173d0:	685b      	ldr	r3, [r3, #4]
 80173d2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80173d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173d6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80173d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173da:	781b      	ldrb	r3, [r3, #0]
 80173dc:	f003 030f 	and.w	r3, r3, #15
 80173e0:	b2db      	uxtb	r3, r3
 80173e2:	009b      	lsls	r3, r3, #2
 80173e4:	b2db      	uxtb	r3, r3
 80173e6:	2b14      	cmp	r3, #20
 80173e8:	d002      	beq.n	80173f0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80173ea:	f06f 0305 	mvn.w	r3, #5
 80173ee:	e110      	b.n	8017612 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	895b      	ldrh	r3, [r3, #10]
 80173f4:	2b13      	cmp	r3, #19
 80173f6:	d809      	bhi.n	801740c <ip4_frag+0x64>
 80173f8:	4b88      	ldr	r3, [pc, #544]	; (801761c <ip4_frag+0x274>)
 80173fa:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80173fe:	4988      	ldr	r1, [pc, #544]	; (8017620 <ip4_frag+0x278>)
 8017400:	4888      	ldr	r0, [pc, #544]	; (8017624 <ip4_frag+0x27c>)
 8017402:	f000 fd1d 	bl	8017e40 <iprintf>
 8017406:	f06f 0305 	mvn.w	r3, #5
 801740a:	e102      	b.n	8017612 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801740c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801740e:	88db      	ldrh	r3, [r3, #6]
 8017410:	b29b      	uxth	r3, r3
 8017412:	4618      	mov	r0, r3
 8017414:	f7f5 fc76 	bl	800cd04 <lwip_htons>
 8017418:	4603      	mov	r3, r0
 801741a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801741c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801741e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017422:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017426:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017428:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801742c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801742e:	68fb      	ldr	r3, [r7, #12]
 8017430:	891b      	ldrh	r3, [r3, #8]
 8017432:	3b14      	subs	r3, #20
 8017434:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017438:	e0e1      	b.n	80175fe <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801743a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801743c:	00db      	lsls	r3, r3, #3
 801743e:	b29b      	uxth	r3, r3
 8017440:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017444:	4293      	cmp	r3, r2
 8017446:	bf28      	it	cs
 8017448:	4613      	movcs	r3, r2
 801744a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801744c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017450:	2114      	movs	r1, #20
 8017452:	200e      	movs	r0, #14
 8017454:	f7f6 fdfc 	bl	800e050 <pbuf_alloc>
 8017458:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801745c:	2b00      	cmp	r3, #0
 801745e:	f000 80d5 	beq.w	801760c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017464:	895b      	ldrh	r3, [r3, #10]
 8017466:	2b13      	cmp	r3, #19
 8017468:	d806      	bhi.n	8017478 <ip4_frag+0xd0>
 801746a:	4b6c      	ldr	r3, [pc, #432]	; (801761c <ip4_frag+0x274>)
 801746c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8017470:	496d      	ldr	r1, [pc, #436]	; (8017628 <ip4_frag+0x280>)
 8017472:	486c      	ldr	r0, [pc, #432]	; (8017624 <ip4_frag+0x27c>)
 8017474:	f000 fce4 	bl	8017e40 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801747a:	685b      	ldr	r3, [r3, #4]
 801747c:	2214      	movs	r2, #20
 801747e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017480:	4618      	mov	r0, r3
 8017482:	f000 fc03 	bl	8017c8c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017488:	685b      	ldr	r3, [r3, #4]
 801748a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801748c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801748e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017492:	e064      	b.n	801755e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017494:	68fb      	ldr	r3, [r7, #12]
 8017496:	895a      	ldrh	r2, [r3, #10]
 8017498:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801749a:	1ad3      	subs	r3, r2, r3
 801749c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801749e:	68fb      	ldr	r3, [r7, #12]
 80174a0:	895b      	ldrh	r3, [r3, #10]
 80174a2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80174a4:	429a      	cmp	r2, r3
 80174a6:	d906      	bls.n	80174b6 <ip4_frag+0x10e>
 80174a8:	4b5c      	ldr	r3, [pc, #368]	; (801761c <ip4_frag+0x274>)
 80174aa:	f240 322d 	movw	r2, #813	; 0x32d
 80174ae:	495f      	ldr	r1, [pc, #380]	; (801762c <ip4_frag+0x284>)
 80174b0:	485c      	ldr	r0, [pc, #368]	; (8017624 <ip4_frag+0x27c>)
 80174b2:	f000 fcc5 	bl	8017e40 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80174b6:	8bfa      	ldrh	r2, [r7, #30]
 80174b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80174bc:	4293      	cmp	r3, r2
 80174be:	bf28      	it	cs
 80174c0:	4613      	movcs	r3, r2
 80174c2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80174c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d105      	bne.n	80174da <ip4_frag+0x132>
        poff = 0;
 80174ce:	2300      	movs	r3, #0
 80174d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	681b      	ldr	r3, [r3, #0]
 80174d6:	60fb      	str	r3, [r7, #12]
        continue;
 80174d8:	e041      	b.n	801755e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80174da:	f7ff ff0d 	bl	80172f8 <ip_frag_alloc_pbuf_custom_ref>
 80174de:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80174e0:	69bb      	ldr	r3, [r7, #24]
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	d103      	bne.n	80174ee <ip4_frag+0x146>
        pbuf_free(rambuf);
 80174e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80174e8:	f7f7 f896 	bl	800e618 <pbuf_free>
        goto memerr;
 80174ec:	e08f      	b.n	801760e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80174ee:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80174f0:	68fb      	ldr	r3, [r7, #12]
 80174f2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80174f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80174f6:	4413      	add	r3, r2
 80174f8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80174fc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017500:	9201      	str	r2, [sp, #4]
 8017502:	9300      	str	r3, [sp, #0]
 8017504:	4603      	mov	r3, r0
 8017506:	2241      	movs	r2, #65	; 0x41
 8017508:	2000      	movs	r0, #0
 801750a:	f7f6 fecb 	bl	800e2a4 <pbuf_alloced_custom>
 801750e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017510:	697b      	ldr	r3, [r7, #20]
 8017512:	2b00      	cmp	r3, #0
 8017514:	d106      	bne.n	8017524 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017516:	69b8      	ldr	r0, [r7, #24]
 8017518:	f7ff fef6 	bl	8017308 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801751c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801751e:	f7f7 f87b 	bl	800e618 <pbuf_free>
        goto memerr;
 8017522:	e074      	b.n	801760e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017524:	68f8      	ldr	r0, [r7, #12]
 8017526:	f7f7 f91d 	bl	800e764 <pbuf_ref>
      pcr->original = p;
 801752a:	69bb      	ldr	r3, [r7, #24]
 801752c:	68fa      	ldr	r2, [r7, #12]
 801752e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017530:	69bb      	ldr	r3, [r7, #24]
 8017532:	4a3f      	ldr	r2, [pc, #252]	; (8017630 <ip4_frag+0x288>)
 8017534:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017536:	6979      	ldr	r1, [r7, #20]
 8017538:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801753a:	f7f7 f93b 	bl	800e7b4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801753e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8017542:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017546:	1ad3      	subs	r3, r2, r3
 8017548:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801754c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017550:	2b00      	cmp	r3, #0
 8017552:	d004      	beq.n	801755e <ip4_frag+0x1b6>
        poff = 0;
 8017554:	2300      	movs	r3, #0
 8017556:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	681b      	ldr	r3, [r3, #0]
 801755c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801755e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017562:	2b00      	cmp	r3, #0
 8017564:	d196      	bne.n	8017494 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017566:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017568:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801756c:	4413      	add	r3, r2
 801756e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017570:	68bb      	ldr	r3, [r7, #8]
 8017572:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017574:	f1a3 0213 	sub.w	r2, r3, #19
 8017578:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801757c:	429a      	cmp	r2, r3
 801757e:	bfcc      	ite	gt
 8017580:	2301      	movgt	r3, #1
 8017582:	2300      	movle	r3, #0
 8017584:	b2db      	uxtb	r3, r3
 8017586:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017588:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801758c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017590:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017592:	6a3b      	ldr	r3, [r7, #32]
 8017594:	2b00      	cmp	r3, #0
 8017596:	d002      	beq.n	801759e <ip4_frag+0x1f6>
 8017598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801759a:	2b00      	cmp	r3, #0
 801759c:	d003      	beq.n	80175a6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801759e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80175a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80175a4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80175a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80175a8:	4618      	mov	r0, r3
 80175aa:	f7f5 fbab 	bl	800cd04 <lwip_htons>
 80175ae:	4603      	mov	r3, r0
 80175b0:	461a      	mov	r2, r3
 80175b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175b4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80175b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80175b8:	3314      	adds	r3, #20
 80175ba:	b29b      	uxth	r3, r3
 80175bc:	4618      	mov	r0, r3
 80175be:	f7f5 fba1 	bl	800cd04 <lwip_htons>
 80175c2:	4603      	mov	r3, r0
 80175c4:	461a      	mov	r2, r3
 80175c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175c8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80175ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175cc:	2200      	movs	r2, #0
 80175ce:	729a      	strb	r2, [r3, #10]
 80175d0:	2200      	movs	r2, #0
 80175d2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80175d4:	68bb      	ldr	r3, [r7, #8]
 80175d6:	695b      	ldr	r3, [r3, #20]
 80175d8:	687a      	ldr	r2, [r7, #4]
 80175da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80175dc:	68b8      	ldr	r0, [r7, #8]
 80175de:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80175e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80175e2:	f7f7 f819 	bl	800e618 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80175e6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80175ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80175ec:	1ad3      	subs	r3, r2, r3
 80175ee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80175f2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80175f6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80175f8:	4413      	add	r3, r2
 80175fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80175fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017602:	2b00      	cmp	r3, #0
 8017604:	f47f af19 	bne.w	801743a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017608:	2300      	movs	r3, #0
 801760a:	e002      	b.n	8017612 <ip4_frag+0x26a>
      goto memerr;
 801760c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801760e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8017612:	4618      	mov	r0, r3
 8017614:	3748      	adds	r7, #72	; 0x48
 8017616:	46bd      	mov	sp, r7
 8017618:	bd80      	pop	{r7, pc}
 801761a:	bf00      	nop
 801761c:	0801ced8 	.word	0x0801ced8
 8017620:	0801d0b4 	.word	0x0801d0b4
 8017624:	0801cf20 	.word	0x0801cf20
 8017628:	0801d0d0 	.word	0x0801d0d0
 801762c:	0801d0f0 	.word	0x0801d0f0
 8017630:	08017341 	.word	0x08017341

08017634 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017634:	b580      	push	{r7, lr}
 8017636:	b086      	sub	sp, #24
 8017638:	af00      	add	r7, sp, #0
 801763a:	6078      	str	r0, [r7, #4]
 801763c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801763e:	230e      	movs	r3, #14
 8017640:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	895b      	ldrh	r3, [r3, #10]
 8017646:	2b0e      	cmp	r3, #14
 8017648:	d96e      	bls.n	8017728 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	7bdb      	ldrb	r3, [r3, #15]
 801764e:	2b00      	cmp	r3, #0
 8017650:	d106      	bne.n	8017660 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017652:	683b      	ldr	r3, [r7, #0]
 8017654:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017658:	3301      	adds	r3, #1
 801765a:	b2da      	uxtb	r2, r3
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	685b      	ldr	r3, [r3, #4]
 8017664:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017666:	693b      	ldr	r3, [r7, #16]
 8017668:	7b1a      	ldrb	r2, [r3, #12]
 801766a:	7b5b      	ldrb	r3, [r3, #13]
 801766c:	021b      	lsls	r3, r3, #8
 801766e:	4313      	orrs	r3, r2
 8017670:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017672:	693b      	ldr	r3, [r7, #16]
 8017674:	781b      	ldrb	r3, [r3, #0]
 8017676:	f003 0301 	and.w	r3, r3, #1
 801767a:	2b00      	cmp	r3, #0
 801767c:	d023      	beq.n	80176c6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801767e:	693b      	ldr	r3, [r7, #16]
 8017680:	781b      	ldrb	r3, [r3, #0]
 8017682:	2b01      	cmp	r3, #1
 8017684:	d10f      	bne.n	80176a6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017686:	693b      	ldr	r3, [r7, #16]
 8017688:	785b      	ldrb	r3, [r3, #1]
 801768a:	2b00      	cmp	r3, #0
 801768c:	d11b      	bne.n	80176c6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801768e:	693b      	ldr	r3, [r7, #16]
 8017690:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017692:	2b5e      	cmp	r3, #94	; 0x5e
 8017694:	d117      	bne.n	80176c6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	7b5b      	ldrb	r3, [r3, #13]
 801769a:	f043 0310 	orr.w	r3, r3, #16
 801769e:	b2da      	uxtb	r2, r3
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	735a      	strb	r2, [r3, #13]
 80176a4:	e00f      	b.n	80176c6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80176a6:	693b      	ldr	r3, [r7, #16]
 80176a8:	2206      	movs	r2, #6
 80176aa:	4928      	ldr	r1, [pc, #160]	; (801774c <ethernet_input+0x118>)
 80176ac:	4618      	mov	r0, r3
 80176ae:	f000 fadf 	bl	8017c70 <memcmp>
 80176b2:	4603      	mov	r3, r0
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d106      	bne.n	80176c6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	7b5b      	ldrb	r3, [r3, #13]
 80176bc:	f043 0308 	orr.w	r3, r3, #8
 80176c0:	b2da      	uxtb	r2, r3
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80176c6:	89fb      	ldrh	r3, [r7, #14]
 80176c8:	2b08      	cmp	r3, #8
 80176ca:	d003      	beq.n	80176d4 <ethernet_input+0xa0>
 80176cc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80176d0:	d014      	beq.n	80176fc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80176d2:	e032      	b.n	801773a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80176d4:	683b      	ldr	r3, [r7, #0]
 80176d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80176da:	f003 0308 	and.w	r3, r3, #8
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d024      	beq.n	801772c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80176e2:	8afb      	ldrh	r3, [r7, #22]
 80176e4:	4619      	mov	r1, r3
 80176e6:	6878      	ldr	r0, [r7, #4]
 80176e8:	f7f6 ff10 	bl	800e50c <pbuf_remove_header>
 80176ec:	4603      	mov	r3, r0
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d11e      	bne.n	8017730 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80176f2:	6839      	ldr	r1, [r7, #0]
 80176f4:	6878      	ldr	r0, [r7, #4]
 80176f6:	f7fe ff27 	bl	8016548 <ip4_input>
      break;
 80176fa:	e013      	b.n	8017724 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80176fc:	683b      	ldr	r3, [r7, #0]
 80176fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017702:	f003 0308 	and.w	r3, r3, #8
 8017706:	2b00      	cmp	r3, #0
 8017708:	d014      	beq.n	8017734 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801770a:	8afb      	ldrh	r3, [r7, #22]
 801770c:	4619      	mov	r1, r3
 801770e:	6878      	ldr	r0, [r7, #4]
 8017710:	f7f6 fefc 	bl	800e50c <pbuf_remove_header>
 8017714:	4603      	mov	r3, r0
 8017716:	2b00      	cmp	r3, #0
 8017718:	d10e      	bne.n	8017738 <ethernet_input+0x104>
        etharp_input(p, netif);
 801771a:	6839      	ldr	r1, [r7, #0]
 801771c:	6878      	ldr	r0, [r7, #4]
 801771e:	f7fe f8c7 	bl	80158b0 <etharp_input>
      break;
 8017722:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017724:	2300      	movs	r3, #0
 8017726:	e00c      	b.n	8017742 <ethernet_input+0x10e>
    goto free_and_return;
 8017728:	bf00      	nop
 801772a:	e006      	b.n	801773a <ethernet_input+0x106>
        goto free_and_return;
 801772c:	bf00      	nop
 801772e:	e004      	b.n	801773a <ethernet_input+0x106>
        goto free_and_return;
 8017730:	bf00      	nop
 8017732:	e002      	b.n	801773a <ethernet_input+0x106>
        goto free_and_return;
 8017734:	bf00      	nop
 8017736:	e000      	b.n	801773a <ethernet_input+0x106>
        goto free_and_return;
 8017738:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801773a:	6878      	ldr	r0, [r7, #4]
 801773c:	f7f6 ff6c 	bl	800e618 <pbuf_free>
  return ERR_OK;
 8017740:	2300      	movs	r3, #0
}
 8017742:	4618      	mov	r0, r3
 8017744:	3718      	adds	r7, #24
 8017746:	46bd      	mov	sp, r7
 8017748:	bd80      	pop	{r7, pc}
 801774a:	bf00      	nop
 801774c:	0801e8f4 	.word	0x0801e8f4

08017750 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017750:	b580      	push	{r7, lr}
 8017752:	b086      	sub	sp, #24
 8017754:	af00      	add	r7, sp, #0
 8017756:	60f8      	str	r0, [r7, #12]
 8017758:	60b9      	str	r1, [r7, #8]
 801775a:	607a      	str	r2, [r7, #4]
 801775c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801775e:	8c3b      	ldrh	r3, [r7, #32]
 8017760:	4618      	mov	r0, r3
 8017762:	f7f5 facf 	bl	800cd04 <lwip_htons>
 8017766:	4603      	mov	r3, r0
 8017768:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801776a:	210e      	movs	r1, #14
 801776c:	68b8      	ldr	r0, [r7, #8]
 801776e:	f7f6 febd 	bl	800e4ec <pbuf_add_header>
 8017772:	4603      	mov	r3, r0
 8017774:	2b00      	cmp	r3, #0
 8017776:	d125      	bne.n	80177c4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017778:	68bb      	ldr	r3, [r7, #8]
 801777a:	685b      	ldr	r3, [r3, #4]
 801777c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801777e:	693b      	ldr	r3, [r7, #16]
 8017780:	8afa      	ldrh	r2, [r7, #22]
 8017782:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017784:	693b      	ldr	r3, [r7, #16]
 8017786:	2206      	movs	r2, #6
 8017788:	6839      	ldr	r1, [r7, #0]
 801778a:	4618      	mov	r0, r3
 801778c:	f000 fa7e 	bl	8017c8c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017790:	693b      	ldr	r3, [r7, #16]
 8017792:	3306      	adds	r3, #6
 8017794:	2206      	movs	r2, #6
 8017796:	6879      	ldr	r1, [r7, #4]
 8017798:	4618      	mov	r0, r3
 801779a:	f000 fa77 	bl	8017c8c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801779e:	68fb      	ldr	r3, [r7, #12]
 80177a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80177a4:	2b06      	cmp	r3, #6
 80177a6:	d006      	beq.n	80177b6 <ethernet_output+0x66>
 80177a8:	4b0a      	ldr	r3, [pc, #40]	; (80177d4 <ethernet_output+0x84>)
 80177aa:	f44f 7299 	mov.w	r2, #306	; 0x132
 80177ae:	490a      	ldr	r1, [pc, #40]	; (80177d8 <ethernet_output+0x88>)
 80177b0:	480a      	ldr	r0, [pc, #40]	; (80177dc <ethernet_output+0x8c>)
 80177b2:	f000 fb45 	bl	8017e40 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80177b6:	68fb      	ldr	r3, [r7, #12]
 80177b8:	699b      	ldr	r3, [r3, #24]
 80177ba:	68b9      	ldr	r1, [r7, #8]
 80177bc:	68f8      	ldr	r0, [r7, #12]
 80177be:	4798      	blx	r3
 80177c0:	4603      	mov	r3, r0
 80177c2:	e002      	b.n	80177ca <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80177c4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80177c6:	f06f 0301 	mvn.w	r3, #1
}
 80177ca:	4618      	mov	r0, r3
 80177cc:	3718      	adds	r7, #24
 80177ce:	46bd      	mov	sp, r7
 80177d0:	bd80      	pop	{r7, pc}
 80177d2:	bf00      	nop
 80177d4:	0801d100 	.word	0x0801d100
 80177d8:	0801d138 	.word	0x0801d138
 80177dc:	0801d16c 	.word	0x0801d16c

080177e0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80177e0:	b580      	push	{r7, lr}
 80177e2:	b086      	sub	sp, #24
 80177e4:	af00      	add	r7, sp, #0
 80177e6:	6078      	str	r0, [r7, #4]
 80177e8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80177ea:	683b      	ldr	r3, [r7, #0]
 80177ec:	60bb      	str	r3, [r7, #8]
 80177ee:	2304      	movs	r3, #4
 80177f0:	60fb      	str	r3, [r7, #12]
 80177f2:	2300      	movs	r3, #0
 80177f4:	613b      	str	r3, [r7, #16]
 80177f6:	2300      	movs	r3, #0
 80177f8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80177fa:	f107 0308 	add.w	r3, r7, #8
 80177fe:	2100      	movs	r1, #0
 8017800:	4618      	mov	r0, r3
 8017802:	f7f0 fb75 	bl	8007ef0 <osMessageCreate>
 8017806:	4602      	mov	r2, r0
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	681b      	ldr	r3, [r3, #0]
 8017810:	2b00      	cmp	r3, #0
 8017812:	d102      	bne.n	801781a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8017814:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017818:	e000      	b.n	801781c <sys_mbox_new+0x3c>

  return ERR_OK;
 801781a:	2300      	movs	r3, #0
}
 801781c:	4618      	mov	r0, r3
 801781e:	3718      	adds	r7, #24
 8017820:	46bd      	mov	sp, r7
 8017822:	bd80      	pop	{r7, pc}

08017824 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017824:	b580      	push	{r7, lr}
 8017826:	b084      	sub	sp, #16
 8017828:	af00      	add	r7, sp, #0
 801782a:	6078      	str	r0, [r7, #4]
 801782c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	681b      	ldr	r3, [r3, #0]
 8017832:	6839      	ldr	r1, [r7, #0]
 8017834:	2200      	movs	r2, #0
 8017836:	4618      	mov	r0, r3
 8017838:	f7f0 fb82 	bl	8007f40 <osMessagePut>
 801783c:	4603      	mov	r3, r0
 801783e:	2b00      	cmp	r3, #0
 8017840:	d102      	bne.n	8017848 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8017842:	2300      	movs	r3, #0
 8017844:	73fb      	strb	r3, [r7, #15]
 8017846:	e001      	b.n	801784c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017848:	23ff      	movs	r3, #255	; 0xff
 801784a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801784c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017850:	4618      	mov	r0, r3
 8017852:	3710      	adds	r7, #16
 8017854:	46bd      	mov	sp, r7
 8017856:	bd80      	pop	{r7, pc}

08017858 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017858:	b580      	push	{r7, lr}
 801785a:	b08c      	sub	sp, #48	; 0x30
 801785c:	af00      	add	r7, sp, #0
 801785e:	61f8      	str	r0, [r7, #28]
 8017860:	61b9      	str	r1, [r7, #24]
 8017862:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8017864:	f7f0 f981 	bl	8007b6a <osKernelSysTick>
 8017868:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801786a:	697b      	ldr	r3, [r7, #20]
 801786c:	2b00      	cmp	r3, #0
 801786e:	d017      	beq.n	80178a0 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8017870:	69fb      	ldr	r3, [r7, #28]
 8017872:	6819      	ldr	r1, [r3, #0]
 8017874:	f107 0320 	add.w	r3, r7, #32
 8017878:	697a      	ldr	r2, [r7, #20]
 801787a:	4618      	mov	r0, r3
 801787c:	f7f0 fba0 	bl	8007fc0 <osMessageGet>

    if(event.status == osEventMessage)
 8017880:	6a3b      	ldr	r3, [r7, #32]
 8017882:	2b10      	cmp	r3, #16
 8017884:	d109      	bne.n	801789a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8017886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017888:	461a      	mov	r2, r3
 801788a:	69bb      	ldr	r3, [r7, #24]
 801788c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801788e:	f7f0 f96c 	bl	8007b6a <osKernelSysTick>
 8017892:	4602      	mov	r2, r0
 8017894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017896:	1ad3      	subs	r3, r2, r3
 8017898:	e019      	b.n	80178ce <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801789a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801789e:	e016      	b.n	80178ce <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80178a0:	69fb      	ldr	r3, [r7, #28]
 80178a2:	6819      	ldr	r1, [r3, #0]
 80178a4:	463b      	mov	r3, r7
 80178a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80178aa:	4618      	mov	r0, r3
 80178ac:	f7f0 fb88 	bl	8007fc0 <osMessageGet>
 80178b0:	f107 0320 	add.w	r3, r7, #32
 80178b4:	463a      	mov	r2, r7
 80178b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80178b8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80178bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178be:	461a      	mov	r2, r3
 80178c0:	69bb      	ldr	r3, [r7, #24]
 80178c2:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80178c4:	f7f0 f951 	bl	8007b6a <osKernelSysTick>
 80178c8:	4602      	mov	r2, r0
 80178ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178cc:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80178ce:	4618      	mov	r0, r3
 80178d0:	3730      	adds	r7, #48	; 0x30
 80178d2:	46bd      	mov	sp, r7
 80178d4:	bd80      	pop	{r7, pc}

080178d6 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80178d6:	b480      	push	{r7}
 80178d8:	b083      	sub	sp, #12
 80178da:	af00      	add	r7, sp, #0
 80178dc:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	681b      	ldr	r3, [r3, #0]
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d101      	bne.n	80178ea <sys_mbox_valid+0x14>
    return 0;
 80178e6:	2300      	movs	r3, #0
 80178e8:	e000      	b.n	80178ec <sys_mbox_valid+0x16>
  else
    return 1;
 80178ea:	2301      	movs	r3, #1
}
 80178ec:	4618      	mov	r0, r3
 80178ee:	370c      	adds	r7, #12
 80178f0:	46bd      	mov	sp, r7
 80178f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178f6:	4770      	bx	lr

080178f8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80178f8:	b580      	push	{r7, lr}
 80178fa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80178fc:	4803      	ldr	r0, [pc, #12]	; (801790c <sys_init+0x14>)
 80178fe:	f7f0 f9a4 	bl	8007c4a <osMutexCreate>
 8017902:	4603      	mov	r3, r0
 8017904:	4a02      	ldr	r2, [pc, #8]	; (8017910 <sys_init+0x18>)
 8017906:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8017908:	bf00      	nop
 801790a:	bd80      	pop	{r7, pc}
 801790c:	0801e904 	.word	0x0801e904
 8017910:	20018bc4 	.word	0x20018bc4

08017914 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017914:	b580      	push	{r7, lr}
 8017916:	b084      	sub	sp, #16
 8017918:	af00      	add	r7, sp, #0
 801791a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801791c:	2300      	movs	r3, #0
 801791e:	60bb      	str	r3, [r7, #8]
 8017920:	2300      	movs	r3, #0
 8017922:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8017924:	f107 0308 	add.w	r3, r7, #8
 8017928:	4618      	mov	r0, r3
 801792a:	f7f0 f98e 	bl	8007c4a <osMutexCreate>
 801792e:	4602      	mov	r2, r0
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	681b      	ldr	r3, [r3, #0]
 8017938:	2b00      	cmp	r3, #0
 801793a:	d102      	bne.n	8017942 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801793c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017940:	e000      	b.n	8017944 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8017942:	2300      	movs	r3, #0
}
 8017944:	4618      	mov	r0, r3
 8017946:	3710      	adds	r7, #16
 8017948:	46bd      	mov	sp, r7
 801794a:	bd80      	pop	{r7, pc}

0801794c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801794c:	b580      	push	{r7, lr}
 801794e:	b082      	sub	sp, #8
 8017950:	af00      	add	r7, sp, #0
 8017952:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	681b      	ldr	r3, [r3, #0]
 8017958:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801795c:	4618      	mov	r0, r3
 801795e:	f7f0 f98d 	bl	8007c7c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8017962:	bf00      	nop
 8017964:	3708      	adds	r7, #8
 8017966:	46bd      	mov	sp, r7
 8017968:	bd80      	pop	{r7, pc}

0801796a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801796a:	b580      	push	{r7, lr}
 801796c:	b082      	sub	sp, #8
 801796e:	af00      	add	r7, sp, #0
 8017970:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	681b      	ldr	r3, [r3, #0]
 8017976:	4618      	mov	r0, r3
 8017978:	f7f0 f9ce 	bl	8007d18 <osMutexRelease>
}
 801797c:	bf00      	nop
 801797e:	3708      	adds	r7, #8
 8017980:	46bd      	mov	sp, r7
 8017982:	bd80      	pop	{r7, pc}

08017984 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017984:	b580      	push	{r7, lr}
 8017986:	b08c      	sub	sp, #48	; 0x30
 8017988:	af00      	add	r7, sp, #0
 801798a:	60f8      	str	r0, [r7, #12]
 801798c:	60b9      	str	r1, [r7, #8]
 801798e:	607a      	str	r2, [r7, #4]
 8017990:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8017992:	f107 0314 	add.w	r3, r7, #20
 8017996:	2200      	movs	r2, #0
 8017998:	601a      	str	r2, [r3, #0]
 801799a:	605a      	str	r2, [r3, #4]
 801799c:	609a      	str	r2, [r3, #8]
 801799e:	60da      	str	r2, [r3, #12]
 80179a0:	611a      	str	r2, [r3, #16]
 80179a2:	615a      	str	r2, [r3, #20]
 80179a4:	619a      	str	r2, [r3, #24]
 80179a6:	68fb      	ldr	r3, [r7, #12]
 80179a8:	617b      	str	r3, [r7, #20]
 80179aa:	68bb      	ldr	r3, [r7, #8]
 80179ac:	61bb      	str	r3, [r7, #24]
 80179ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179b0:	b21b      	sxth	r3, r3
 80179b2:	83bb      	strh	r3, [r7, #28]
 80179b4:	683b      	ldr	r3, [r7, #0]
 80179b6:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80179b8:	f107 0314 	add.w	r3, r7, #20
 80179bc:	6879      	ldr	r1, [r7, #4]
 80179be:	4618      	mov	r0, r3
 80179c0:	f7f0 f8e3 	bl	8007b8a <osThreadCreate>
 80179c4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80179c6:	4618      	mov	r0, r3
 80179c8:	3730      	adds	r7, #48	; 0x30
 80179ca:	46bd      	mov	sp, r7
 80179cc:	bd80      	pop	{r7, pc}
	...

080179d0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80179d0:	b580      	push	{r7, lr}
 80179d2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80179d4:	4b04      	ldr	r3, [pc, #16]	; (80179e8 <sys_arch_protect+0x18>)
 80179d6:	681b      	ldr	r3, [r3, #0]
 80179d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80179dc:	4618      	mov	r0, r3
 80179de:	f7f0 f94d 	bl	8007c7c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80179e2:	2301      	movs	r3, #1
}
 80179e4:	4618      	mov	r0, r3
 80179e6:	bd80      	pop	{r7, pc}
 80179e8:	20018bc4 	.word	0x20018bc4

080179ec <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80179ec:	b580      	push	{r7, lr}
 80179ee:	b082      	sub	sp, #8
 80179f0:	af00      	add	r7, sp, #0
 80179f2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80179f4:	4b04      	ldr	r3, [pc, #16]	; (8017a08 <sys_arch_unprotect+0x1c>)
 80179f6:	681b      	ldr	r3, [r3, #0]
 80179f8:	4618      	mov	r0, r3
 80179fa:	f7f0 f98d 	bl	8007d18 <osMutexRelease>
}
 80179fe:	bf00      	nop
 8017a00:	3708      	adds	r7, #8
 8017a02:	46bd      	mov	sp, r7
 8017a04:	bd80      	pop	{r7, pc}
 8017a06:	bf00      	nop
 8017a08:	20018bc4 	.word	0x20018bc4

08017a0c <atoi>:
 8017a0c:	220a      	movs	r2, #10
 8017a0e:	2100      	movs	r1, #0
 8017a10:	f000 bd12 	b.w	8018438 <strtol>

08017a14 <std>:
 8017a14:	2300      	movs	r3, #0
 8017a16:	b510      	push	{r4, lr}
 8017a18:	4604      	mov	r4, r0
 8017a1a:	e9c0 3300 	strd	r3, r3, [r0]
 8017a1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017a22:	6083      	str	r3, [r0, #8]
 8017a24:	8181      	strh	r1, [r0, #12]
 8017a26:	6643      	str	r3, [r0, #100]	; 0x64
 8017a28:	81c2      	strh	r2, [r0, #14]
 8017a2a:	6183      	str	r3, [r0, #24]
 8017a2c:	4619      	mov	r1, r3
 8017a2e:	2208      	movs	r2, #8
 8017a30:	305c      	adds	r0, #92	; 0x5c
 8017a32:	f000 f953 	bl	8017cdc <memset>
 8017a36:	4b05      	ldr	r3, [pc, #20]	; (8017a4c <std+0x38>)
 8017a38:	6263      	str	r3, [r4, #36]	; 0x24
 8017a3a:	4b05      	ldr	r3, [pc, #20]	; (8017a50 <std+0x3c>)
 8017a3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8017a3e:	4b05      	ldr	r3, [pc, #20]	; (8017a54 <std+0x40>)
 8017a40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017a42:	4b05      	ldr	r3, [pc, #20]	; (8017a58 <std+0x44>)
 8017a44:	6224      	str	r4, [r4, #32]
 8017a46:	6323      	str	r3, [r4, #48]	; 0x30
 8017a48:	bd10      	pop	{r4, pc}
 8017a4a:	bf00      	nop
 8017a4c:	080181e1 	.word	0x080181e1
 8017a50:	08018207 	.word	0x08018207
 8017a54:	0801823f 	.word	0x0801823f
 8017a58:	08018263 	.word	0x08018263

08017a5c <_cleanup_r>:
 8017a5c:	4901      	ldr	r1, [pc, #4]	; (8017a64 <_cleanup_r+0x8>)
 8017a5e:	f000 b8af 	b.w	8017bc0 <_fwalk_reent>
 8017a62:	bf00      	nop
 8017a64:	08018765 	.word	0x08018765

08017a68 <__sfmoreglue>:
 8017a68:	b570      	push	{r4, r5, r6, lr}
 8017a6a:	1e4a      	subs	r2, r1, #1
 8017a6c:	2568      	movs	r5, #104	; 0x68
 8017a6e:	4355      	muls	r5, r2
 8017a70:	460e      	mov	r6, r1
 8017a72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017a76:	f000 f989 	bl	8017d8c <_malloc_r>
 8017a7a:	4604      	mov	r4, r0
 8017a7c:	b140      	cbz	r0, 8017a90 <__sfmoreglue+0x28>
 8017a7e:	2100      	movs	r1, #0
 8017a80:	e9c0 1600 	strd	r1, r6, [r0]
 8017a84:	300c      	adds	r0, #12
 8017a86:	60a0      	str	r0, [r4, #8]
 8017a88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017a8c:	f000 f926 	bl	8017cdc <memset>
 8017a90:	4620      	mov	r0, r4
 8017a92:	bd70      	pop	{r4, r5, r6, pc}

08017a94 <__sfp_lock_acquire>:
 8017a94:	4801      	ldr	r0, [pc, #4]	; (8017a9c <__sfp_lock_acquire+0x8>)
 8017a96:	f000 b8d8 	b.w	8017c4a <__retarget_lock_acquire_recursive>
 8017a9a:	bf00      	nop
 8017a9c:	20018bd0 	.word	0x20018bd0

08017aa0 <__sfp_lock_release>:
 8017aa0:	4801      	ldr	r0, [pc, #4]	; (8017aa8 <__sfp_lock_release+0x8>)
 8017aa2:	f000 b8d3 	b.w	8017c4c <__retarget_lock_release_recursive>
 8017aa6:	bf00      	nop
 8017aa8:	20018bd0 	.word	0x20018bd0

08017aac <__sinit_lock_acquire>:
 8017aac:	4801      	ldr	r0, [pc, #4]	; (8017ab4 <__sinit_lock_acquire+0x8>)
 8017aae:	f000 b8cc 	b.w	8017c4a <__retarget_lock_acquire_recursive>
 8017ab2:	bf00      	nop
 8017ab4:	20018bcb 	.word	0x20018bcb

08017ab8 <__sinit_lock_release>:
 8017ab8:	4801      	ldr	r0, [pc, #4]	; (8017ac0 <__sinit_lock_release+0x8>)
 8017aba:	f000 b8c7 	b.w	8017c4c <__retarget_lock_release_recursive>
 8017abe:	bf00      	nop
 8017ac0:	20018bcb 	.word	0x20018bcb

08017ac4 <__sinit>:
 8017ac4:	b510      	push	{r4, lr}
 8017ac6:	4604      	mov	r4, r0
 8017ac8:	f7ff fff0 	bl	8017aac <__sinit_lock_acquire>
 8017acc:	69a3      	ldr	r3, [r4, #24]
 8017ace:	b11b      	cbz	r3, 8017ad8 <__sinit+0x14>
 8017ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ad4:	f7ff bff0 	b.w	8017ab8 <__sinit_lock_release>
 8017ad8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017adc:	6523      	str	r3, [r4, #80]	; 0x50
 8017ade:	4b13      	ldr	r3, [pc, #76]	; (8017b2c <__sinit+0x68>)
 8017ae0:	4a13      	ldr	r2, [pc, #76]	; (8017b30 <__sinit+0x6c>)
 8017ae2:	681b      	ldr	r3, [r3, #0]
 8017ae4:	62a2      	str	r2, [r4, #40]	; 0x28
 8017ae6:	42a3      	cmp	r3, r4
 8017ae8:	bf04      	itt	eq
 8017aea:	2301      	moveq	r3, #1
 8017aec:	61a3      	streq	r3, [r4, #24]
 8017aee:	4620      	mov	r0, r4
 8017af0:	f000 f820 	bl	8017b34 <__sfp>
 8017af4:	6060      	str	r0, [r4, #4]
 8017af6:	4620      	mov	r0, r4
 8017af8:	f000 f81c 	bl	8017b34 <__sfp>
 8017afc:	60a0      	str	r0, [r4, #8]
 8017afe:	4620      	mov	r0, r4
 8017b00:	f000 f818 	bl	8017b34 <__sfp>
 8017b04:	2200      	movs	r2, #0
 8017b06:	60e0      	str	r0, [r4, #12]
 8017b08:	2104      	movs	r1, #4
 8017b0a:	6860      	ldr	r0, [r4, #4]
 8017b0c:	f7ff ff82 	bl	8017a14 <std>
 8017b10:	68a0      	ldr	r0, [r4, #8]
 8017b12:	2201      	movs	r2, #1
 8017b14:	2109      	movs	r1, #9
 8017b16:	f7ff ff7d 	bl	8017a14 <std>
 8017b1a:	68e0      	ldr	r0, [r4, #12]
 8017b1c:	2202      	movs	r2, #2
 8017b1e:	2112      	movs	r1, #18
 8017b20:	f7ff ff78 	bl	8017a14 <std>
 8017b24:	2301      	movs	r3, #1
 8017b26:	61a3      	str	r3, [r4, #24]
 8017b28:	e7d2      	b.n	8017ad0 <__sinit+0xc>
 8017b2a:	bf00      	nop
 8017b2c:	0801ea70 	.word	0x0801ea70
 8017b30:	08017a5d 	.word	0x08017a5d

08017b34 <__sfp>:
 8017b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b36:	4607      	mov	r7, r0
 8017b38:	f7ff ffac 	bl	8017a94 <__sfp_lock_acquire>
 8017b3c:	4b1e      	ldr	r3, [pc, #120]	; (8017bb8 <__sfp+0x84>)
 8017b3e:	681e      	ldr	r6, [r3, #0]
 8017b40:	69b3      	ldr	r3, [r6, #24]
 8017b42:	b913      	cbnz	r3, 8017b4a <__sfp+0x16>
 8017b44:	4630      	mov	r0, r6
 8017b46:	f7ff ffbd 	bl	8017ac4 <__sinit>
 8017b4a:	3648      	adds	r6, #72	; 0x48
 8017b4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017b50:	3b01      	subs	r3, #1
 8017b52:	d503      	bpl.n	8017b5c <__sfp+0x28>
 8017b54:	6833      	ldr	r3, [r6, #0]
 8017b56:	b30b      	cbz	r3, 8017b9c <__sfp+0x68>
 8017b58:	6836      	ldr	r6, [r6, #0]
 8017b5a:	e7f7      	b.n	8017b4c <__sfp+0x18>
 8017b5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017b60:	b9d5      	cbnz	r5, 8017b98 <__sfp+0x64>
 8017b62:	4b16      	ldr	r3, [pc, #88]	; (8017bbc <__sfp+0x88>)
 8017b64:	60e3      	str	r3, [r4, #12]
 8017b66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017b6a:	6665      	str	r5, [r4, #100]	; 0x64
 8017b6c:	f000 f86c 	bl	8017c48 <__retarget_lock_init_recursive>
 8017b70:	f7ff ff96 	bl	8017aa0 <__sfp_lock_release>
 8017b74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017b78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017b7c:	6025      	str	r5, [r4, #0]
 8017b7e:	61a5      	str	r5, [r4, #24]
 8017b80:	2208      	movs	r2, #8
 8017b82:	4629      	mov	r1, r5
 8017b84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017b88:	f000 f8a8 	bl	8017cdc <memset>
 8017b8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017b90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017b94:	4620      	mov	r0, r4
 8017b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b98:	3468      	adds	r4, #104	; 0x68
 8017b9a:	e7d9      	b.n	8017b50 <__sfp+0x1c>
 8017b9c:	2104      	movs	r1, #4
 8017b9e:	4638      	mov	r0, r7
 8017ba0:	f7ff ff62 	bl	8017a68 <__sfmoreglue>
 8017ba4:	4604      	mov	r4, r0
 8017ba6:	6030      	str	r0, [r6, #0]
 8017ba8:	2800      	cmp	r0, #0
 8017baa:	d1d5      	bne.n	8017b58 <__sfp+0x24>
 8017bac:	f7ff ff78 	bl	8017aa0 <__sfp_lock_release>
 8017bb0:	230c      	movs	r3, #12
 8017bb2:	603b      	str	r3, [r7, #0]
 8017bb4:	e7ee      	b.n	8017b94 <__sfp+0x60>
 8017bb6:	bf00      	nop
 8017bb8:	0801ea70 	.word	0x0801ea70
 8017bbc:	ffff0001 	.word	0xffff0001

08017bc0 <_fwalk_reent>:
 8017bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017bc4:	4606      	mov	r6, r0
 8017bc6:	4688      	mov	r8, r1
 8017bc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017bcc:	2700      	movs	r7, #0
 8017bce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017bd2:	f1b9 0901 	subs.w	r9, r9, #1
 8017bd6:	d505      	bpl.n	8017be4 <_fwalk_reent+0x24>
 8017bd8:	6824      	ldr	r4, [r4, #0]
 8017bda:	2c00      	cmp	r4, #0
 8017bdc:	d1f7      	bne.n	8017bce <_fwalk_reent+0xe>
 8017bde:	4638      	mov	r0, r7
 8017be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017be4:	89ab      	ldrh	r3, [r5, #12]
 8017be6:	2b01      	cmp	r3, #1
 8017be8:	d907      	bls.n	8017bfa <_fwalk_reent+0x3a>
 8017bea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017bee:	3301      	adds	r3, #1
 8017bf0:	d003      	beq.n	8017bfa <_fwalk_reent+0x3a>
 8017bf2:	4629      	mov	r1, r5
 8017bf4:	4630      	mov	r0, r6
 8017bf6:	47c0      	blx	r8
 8017bf8:	4307      	orrs	r7, r0
 8017bfa:	3568      	adds	r5, #104	; 0x68
 8017bfc:	e7e9      	b.n	8017bd2 <_fwalk_reent+0x12>
	...

08017c00 <__libc_init_array>:
 8017c00:	b570      	push	{r4, r5, r6, lr}
 8017c02:	4d0d      	ldr	r5, [pc, #52]	; (8017c38 <__libc_init_array+0x38>)
 8017c04:	4c0d      	ldr	r4, [pc, #52]	; (8017c3c <__libc_init_array+0x3c>)
 8017c06:	1b64      	subs	r4, r4, r5
 8017c08:	10a4      	asrs	r4, r4, #2
 8017c0a:	2600      	movs	r6, #0
 8017c0c:	42a6      	cmp	r6, r4
 8017c0e:	d109      	bne.n	8017c24 <__libc_init_array+0x24>
 8017c10:	4d0b      	ldr	r5, [pc, #44]	; (8017c40 <__libc_init_array+0x40>)
 8017c12:	4c0c      	ldr	r4, [pc, #48]	; (8017c44 <__libc_init_array+0x44>)
 8017c14:	f001 ff7e 	bl	8019b14 <_init>
 8017c18:	1b64      	subs	r4, r4, r5
 8017c1a:	10a4      	asrs	r4, r4, #2
 8017c1c:	2600      	movs	r6, #0
 8017c1e:	42a6      	cmp	r6, r4
 8017c20:	d105      	bne.n	8017c2e <__libc_init_array+0x2e>
 8017c22:	bd70      	pop	{r4, r5, r6, pc}
 8017c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8017c28:	4798      	blx	r3
 8017c2a:	3601      	adds	r6, #1
 8017c2c:	e7ee      	b.n	8017c0c <__libc_init_array+0xc>
 8017c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8017c32:	4798      	blx	r3
 8017c34:	3601      	adds	r6, #1
 8017c36:	e7f2      	b.n	8017c1e <__libc_init_array+0x1e>
 8017c38:	0801eb7c 	.word	0x0801eb7c
 8017c3c:	0801eb7c 	.word	0x0801eb7c
 8017c40:	0801eb7c 	.word	0x0801eb7c
 8017c44:	0801eb80 	.word	0x0801eb80

08017c48 <__retarget_lock_init_recursive>:
 8017c48:	4770      	bx	lr

08017c4a <__retarget_lock_acquire_recursive>:
 8017c4a:	4770      	bx	lr

08017c4c <__retarget_lock_release_recursive>:
 8017c4c:	4770      	bx	lr
	...

08017c50 <malloc>:
 8017c50:	4b02      	ldr	r3, [pc, #8]	; (8017c5c <malloc+0xc>)
 8017c52:	4601      	mov	r1, r0
 8017c54:	6818      	ldr	r0, [r3, #0]
 8017c56:	f000 b899 	b.w	8017d8c <_malloc_r>
 8017c5a:	bf00      	nop
 8017c5c:	20000730 	.word	0x20000730

08017c60 <free>:
 8017c60:	4b02      	ldr	r3, [pc, #8]	; (8017c6c <free+0xc>)
 8017c62:	4601      	mov	r1, r0
 8017c64:	6818      	ldr	r0, [r3, #0]
 8017c66:	f000 b841 	b.w	8017cec <_free_r>
 8017c6a:	bf00      	nop
 8017c6c:	20000730 	.word	0x20000730

08017c70 <memcmp>:
 8017c70:	b530      	push	{r4, r5, lr}
 8017c72:	3901      	subs	r1, #1
 8017c74:	2400      	movs	r4, #0
 8017c76:	42a2      	cmp	r2, r4
 8017c78:	d101      	bne.n	8017c7e <memcmp+0xe>
 8017c7a:	2000      	movs	r0, #0
 8017c7c:	e005      	b.n	8017c8a <memcmp+0x1a>
 8017c7e:	5d03      	ldrb	r3, [r0, r4]
 8017c80:	3401      	adds	r4, #1
 8017c82:	5d0d      	ldrb	r5, [r1, r4]
 8017c84:	42ab      	cmp	r3, r5
 8017c86:	d0f6      	beq.n	8017c76 <memcmp+0x6>
 8017c88:	1b58      	subs	r0, r3, r5
 8017c8a:	bd30      	pop	{r4, r5, pc}

08017c8c <memcpy>:
 8017c8c:	440a      	add	r2, r1
 8017c8e:	4291      	cmp	r1, r2
 8017c90:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8017c94:	d100      	bne.n	8017c98 <memcpy+0xc>
 8017c96:	4770      	bx	lr
 8017c98:	b510      	push	{r4, lr}
 8017c9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017c9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017ca2:	4291      	cmp	r1, r2
 8017ca4:	d1f9      	bne.n	8017c9a <memcpy+0xe>
 8017ca6:	bd10      	pop	{r4, pc}

08017ca8 <memmove>:
 8017ca8:	4288      	cmp	r0, r1
 8017caa:	b510      	push	{r4, lr}
 8017cac:	eb01 0402 	add.w	r4, r1, r2
 8017cb0:	d902      	bls.n	8017cb8 <memmove+0x10>
 8017cb2:	4284      	cmp	r4, r0
 8017cb4:	4623      	mov	r3, r4
 8017cb6:	d807      	bhi.n	8017cc8 <memmove+0x20>
 8017cb8:	1e43      	subs	r3, r0, #1
 8017cba:	42a1      	cmp	r1, r4
 8017cbc:	d008      	beq.n	8017cd0 <memmove+0x28>
 8017cbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017cc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017cc6:	e7f8      	b.n	8017cba <memmove+0x12>
 8017cc8:	4402      	add	r2, r0
 8017cca:	4601      	mov	r1, r0
 8017ccc:	428a      	cmp	r2, r1
 8017cce:	d100      	bne.n	8017cd2 <memmove+0x2a>
 8017cd0:	bd10      	pop	{r4, pc}
 8017cd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017cd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017cda:	e7f7      	b.n	8017ccc <memmove+0x24>

08017cdc <memset>:
 8017cdc:	4402      	add	r2, r0
 8017cde:	4603      	mov	r3, r0
 8017ce0:	4293      	cmp	r3, r2
 8017ce2:	d100      	bne.n	8017ce6 <memset+0xa>
 8017ce4:	4770      	bx	lr
 8017ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8017cea:	e7f9      	b.n	8017ce0 <memset+0x4>

08017cec <_free_r>:
 8017cec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017cee:	2900      	cmp	r1, #0
 8017cf0:	d048      	beq.n	8017d84 <_free_r+0x98>
 8017cf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017cf6:	9001      	str	r0, [sp, #4]
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	f1a1 0404 	sub.w	r4, r1, #4
 8017cfe:	bfb8      	it	lt
 8017d00:	18e4      	addlt	r4, r4, r3
 8017d02:	f000 fdf3 	bl	80188ec <__malloc_lock>
 8017d06:	4a20      	ldr	r2, [pc, #128]	; (8017d88 <_free_r+0x9c>)
 8017d08:	9801      	ldr	r0, [sp, #4]
 8017d0a:	6813      	ldr	r3, [r2, #0]
 8017d0c:	4615      	mov	r5, r2
 8017d0e:	b933      	cbnz	r3, 8017d1e <_free_r+0x32>
 8017d10:	6063      	str	r3, [r4, #4]
 8017d12:	6014      	str	r4, [r2, #0]
 8017d14:	b003      	add	sp, #12
 8017d16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017d1a:	f000 bded 	b.w	80188f8 <__malloc_unlock>
 8017d1e:	42a3      	cmp	r3, r4
 8017d20:	d90b      	bls.n	8017d3a <_free_r+0x4e>
 8017d22:	6821      	ldr	r1, [r4, #0]
 8017d24:	1862      	adds	r2, r4, r1
 8017d26:	4293      	cmp	r3, r2
 8017d28:	bf04      	itt	eq
 8017d2a:	681a      	ldreq	r2, [r3, #0]
 8017d2c:	685b      	ldreq	r3, [r3, #4]
 8017d2e:	6063      	str	r3, [r4, #4]
 8017d30:	bf04      	itt	eq
 8017d32:	1852      	addeq	r2, r2, r1
 8017d34:	6022      	streq	r2, [r4, #0]
 8017d36:	602c      	str	r4, [r5, #0]
 8017d38:	e7ec      	b.n	8017d14 <_free_r+0x28>
 8017d3a:	461a      	mov	r2, r3
 8017d3c:	685b      	ldr	r3, [r3, #4]
 8017d3e:	b10b      	cbz	r3, 8017d44 <_free_r+0x58>
 8017d40:	42a3      	cmp	r3, r4
 8017d42:	d9fa      	bls.n	8017d3a <_free_r+0x4e>
 8017d44:	6811      	ldr	r1, [r2, #0]
 8017d46:	1855      	adds	r5, r2, r1
 8017d48:	42a5      	cmp	r5, r4
 8017d4a:	d10b      	bne.n	8017d64 <_free_r+0x78>
 8017d4c:	6824      	ldr	r4, [r4, #0]
 8017d4e:	4421      	add	r1, r4
 8017d50:	1854      	adds	r4, r2, r1
 8017d52:	42a3      	cmp	r3, r4
 8017d54:	6011      	str	r1, [r2, #0]
 8017d56:	d1dd      	bne.n	8017d14 <_free_r+0x28>
 8017d58:	681c      	ldr	r4, [r3, #0]
 8017d5a:	685b      	ldr	r3, [r3, #4]
 8017d5c:	6053      	str	r3, [r2, #4]
 8017d5e:	4421      	add	r1, r4
 8017d60:	6011      	str	r1, [r2, #0]
 8017d62:	e7d7      	b.n	8017d14 <_free_r+0x28>
 8017d64:	d902      	bls.n	8017d6c <_free_r+0x80>
 8017d66:	230c      	movs	r3, #12
 8017d68:	6003      	str	r3, [r0, #0]
 8017d6a:	e7d3      	b.n	8017d14 <_free_r+0x28>
 8017d6c:	6825      	ldr	r5, [r4, #0]
 8017d6e:	1961      	adds	r1, r4, r5
 8017d70:	428b      	cmp	r3, r1
 8017d72:	bf04      	itt	eq
 8017d74:	6819      	ldreq	r1, [r3, #0]
 8017d76:	685b      	ldreq	r3, [r3, #4]
 8017d78:	6063      	str	r3, [r4, #4]
 8017d7a:	bf04      	itt	eq
 8017d7c:	1949      	addeq	r1, r1, r5
 8017d7e:	6021      	streq	r1, [r4, #0]
 8017d80:	6054      	str	r4, [r2, #4]
 8017d82:	e7c7      	b.n	8017d14 <_free_r+0x28>
 8017d84:	b003      	add	sp, #12
 8017d86:	bd30      	pop	{r4, r5, pc}
 8017d88:	200053c8 	.word	0x200053c8

08017d8c <_malloc_r>:
 8017d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d8e:	1ccd      	adds	r5, r1, #3
 8017d90:	f025 0503 	bic.w	r5, r5, #3
 8017d94:	3508      	adds	r5, #8
 8017d96:	2d0c      	cmp	r5, #12
 8017d98:	bf38      	it	cc
 8017d9a:	250c      	movcc	r5, #12
 8017d9c:	2d00      	cmp	r5, #0
 8017d9e:	4606      	mov	r6, r0
 8017da0:	db01      	blt.n	8017da6 <_malloc_r+0x1a>
 8017da2:	42a9      	cmp	r1, r5
 8017da4:	d903      	bls.n	8017dae <_malloc_r+0x22>
 8017da6:	230c      	movs	r3, #12
 8017da8:	6033      	str	r3, [r6, #0]
 8017daa:	2000      	movs	r0, #0
 8017dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017dae:	f000 fd9d 	bl	80188ec <__malloc_lock>
 8017db2:	4921      	ldr	r1, [pc, #132]	; (8017e38 <_malloc_r+0xac>)
 8017db4:	680a      	ldr	r2, [r1, #0]
 8017db6:	4614      	mov	r4, r2
 8017db8:	b99c      	cbnz	r4, 8017de2 <_malloc_r+0x56>
 8017dba:	4f20      	ldr	r7, [pc, #128]	; (8017e3c <_malloc_r+0xb0>)
 8017dbc:	683b      	ldr	r3, [r7, #0]
 8017dbe:	b923      	cbnz	r3, 8017dca <_malloc_r+0x3e>
 8017dc0:	4621      	mov	r1, r4
 8017dc2:	4630      	mov	r0, r6
 8017dc4:	f000 f97c 	bl	80180c0 <_sbrk_r>
 8017dc8:	6038      	str	r0, [r7, #0]
 8017dca:	4629      	mov	r1, r5
 8017dcc:	4630      	mov	r0, r6
 8017dce:	f000 f977 	bl	80180c0 <_sbrk_r>
 8017dd2:	1c43      	adds	r3, r0, #1
 8017dd4:	d123      	bne.n	8017e1e <_malloc_r+0x92>
 8017dd6:	230c      	movs	r3, #12
 8017dd8:	6033      	str	r3, [r6, #0]
 8017dda:	4630      	mov	r0, r6
 8017ddc:	f000 fd8c 	bl	80188f8 <__malloc_unlock>
 8017de0:	e7e3      	b.n	8017daa <_malloc_r+0x1e>
 8017de2:	6823      	ldr	r3, [r4, #0]
 8017de4:	1b5b      	subs	r3, r3, r5
 8017de6:	d417      	bmi.n	8017e18 <_malloc_r+0x8c>
 8017de8:	2b0b      	cmp	r3, #11
 8017dea:	d903      	bls.n	8017df4 <_malloc_r+0x68>
 8017dec:	6023      	str	r3, [r4, #0]
 8017dee:	441c      	add	r4, r3
 8017df0:	6025      	str	r5, [r4, #0]
 8017df2:	e004      	b.n	8017dfe <_malloc_r+0x72>
 8017df4:	6863      	ldr	r3, [r4, #4]
 8017df6:	42a2      	cmp	r2, r4
 8017df8:	bf0c      	ite	eq
 8017dfa:	600b      	streq	r3, [r1, #0]
 8017dfc:	6053      	strne	r3, [r2, #4]
 8017dfe:	4630      	mov	r0, r6
 8017e00:	f000 fd7a 	bl	80188f8 <__malloc_unlock>
 8017e04:	f104 000b 	add.w	r0, r4, #11
 8017e08:	1d23      	adds	r3, r4, #4
 8017e0a:	f020 0007 	bic.w	r0, r0, #7
 8017e0e:	1ac2      	subs	r2, r0, r3
 8017e10:	d0cc      	beq.n	8017dac <_malloc_r+0x20>
 8017e12:	1a1b      	subs	r3, r3, r0
 8017e14:	50a3      	str	r3, [r4, r2]
 8017e16:	e7c9      	b.n	8017dac <_malloc_r+0x20>
 8017e18:	4622      	mov	r2, r4
 8017e1a:	6864      	ldr	r4, [r4, #4]
 8017e1c:	e7cc      	b.n	8017db8 <_malloc_r+0x2c>
 8017e1e:	1cc4      	adds	r4, r0, #3
 8017e20:	f024 0403 	bic.w	r4, r4, #3
 8017e24:	42a0      	cmp	r0, r4
 8017e26:	d0e3      	beq.n	8017df0 <_malloc_r+0x64>
 8017e28:	1a21      	subs	r1, r4, r0
 8017e2a:	4630      	mov	r0, r6
 8017e2c:	f000 f948 	bl	80180c0 <_sbrk_r>
 8017e30:	3001      	adds	r0, #1
 8017e32:	d1dd      	bne.n	8017df0 <_malloc_r+0x64>
 8017e34:	e7cf      	b.n	8017dd6 <_malloc_r+0x4a>
 8017e36:	bf00      	nop
 8017e38:	200053c8 	.word	0x200053c8
 8017e3c:	200053cc 	.word	0x200053cc

08017e40 <iprintf>:
 8017e40:	b40f      	push	{r0, r1, r2, r3}
 8017e42:	4b0a      	ldr	r3, [pc, #40]	; (8017e6c <iprintf+0x2c>)
 8017e44:	b513      	push	{r0, r1, r4, lr}
 8017e46:	681c      	ldr	r4, [r3, #0]
 8017e48:	b124      	cbz	r4, 8017e54 <iprintf+0x14>
 8017e4a:	69a3      	ldr	r3, [r4, #24]
 8017e4c:	b913      	cbnz	r3, 8017e54 <iprintf+0x14>
 8017e4e:	4620      	mov	r0, r4
 8017e50:	f7ff fe38 	bl	8017ac4 <__sinit>
 8017e54:	ab05      	add	r3, sp, #20
 8017e56:	9a04      	ldr	r2, [sp, #16]
 8017e58:	68a1      	ldr	r1, [r4, #8]
 8017e5a:	9301      	str	r3, [sp, #4]
 8017e5c:	4620      	mov	r0, r4
 8017e5e:	f001 f8cf 	bl	8019000 <_vfiprintf_r>
 8017e62:	b002      	add	sp, #8
 8017e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017e68:	b004      	add	sp, #16
 8017e6a:	4770      	bx	lr
 8017e6c:	20000730 	.word	0x20000730

08017e70 <_puts_r>:
 8017e70:	b570      	push	{r4, r5, r6, lr}
 8017e72:	460e      	mov	r6, r1
 8017e74:	4605      	mov	r5, r0
 8017e76:	b118      	cbz	r0, 8017e80 <_puts_r+0x10>
 8017e78:	6983      	ldr	r3, [r0, #24]
 8017e7a:	b90b      	cbnz	r3, 8017e80 <_puts_r+0x10>
 8017e7c:	f7ff fe22 	bl	8017ac4 <__sinit>
 8017e80:	69ab      	ldr	r3, [r5, #24]
 8017e82:	68ac      	ldr	r4, [r5, #8]
 8017e84:	b913      	cbnz	r3, 8017e8c <_puts_r+0x1c>
 8017e86:	4628      	mov	r0, r5
 8017e88:	f7ff fe1c 	bl	8017ac4 <__sinit>
 8017e8c:	4b2c      	ldr	r3, [pc, #176]	; (8017f40 <_puts_r+0xd0>)
 8017e8e:	429c      	cmp	r4, r3
 8017e90:	d120      	bne.n	8017ed4 <_puts_r+0x64>
 8017e92:	686c      	ldr	r4, [r5, #4]
 8017e94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017e96:	07db      	lsls	r3, r3, #31
 8017e98:	d405      	bmi.n	8017ea6 <_puts_r+0x36>
 8017e9a:	89a3      	ldrh	r3, [r4, #12]
 8017e9c:	0598      	lsls	r0, r3, #22
 8017e9e:	d402      	bmi.n	8017ea6 <_puts_r+0x36>
 8017ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017ea2:	f7ff fed2 	bl	8017c4a <__retarget_lock_acquire_recursive>
 8017ea6:	89a3      	ldrh	r3, [r4, #12]
 8017ea8:	0719      	lsls	r1, r3, #28
 8017eaa:	d51d      	bpl.n	8017ee8 <_puts_r+0x78>
 8017eac:	6923      	ldr	r3, [r4, #16]
 8017eae:	b1db      	cbz	r3, 8017ee8 <_puts_r+0x78>
 8017eb0:	3e01      	subs	r6, #1
 8017eb2:	68a3      	ldr	r3, [r4, #8]
 8017eb4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017eb8:	3b01      	subs	r3, #1
 8017eba:	60a3      	str	r3, [r4, #8]
 8017ebc:	bb39      	cbnz	r1, 8017f0e <_puts_r+0x9e>
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	da38      	bge.n	8017f34 <_puts_r+0xc4>
 8017ec2:	4622      	mov	r2, r4
 8017ec4:	210a      	movs	r1, #10
 8017ec6:	4628      	mov	r0, r5
 8017ec8:	f000 fac0 	bl	801844c <__swbuf_r>
 8017ecc:	3001      	adds	r0, #1
 8017ece:	d011      	beq.n	8017ef4 <_puts_r+0x84>
 8017ed0:	250a      	movs	r5, #10
 8017ed2:	e011      	b.n	8017ef8 <_puts_r+0x88>
 8017ed4:	4b1b      	ldr	r3, [pc, #108]	; (8017f44 <_puts_r+0xd4>)
 8017ed6:	429c      	cmp	r4, r3
 8017ed8:	d101      	bne.n	8017ede <_puts_r+0x6e>
 8017eda:	68ac      	ldr	r4, [r5, #8]
 8017edc:	e7da      	b.n	8017e94 <_puts_r+0x24>
 8017ede:	4b1a      	ldr	r3, [pc, #104]	; (8017f48 <_puts_r+0xd8>)
 8017ee0:	429c      	cmp	r4, r3
 8017ee2:	bf08      	it	eq
 8017ee4:	68ec      	ldreq	r4, [r5, #12]
 8017ee6:	e7d5      	b.n	8017e94 <_puts_r+0x24>
 8017ee8:	4621      	mov	r1, r4
 8017eea:	4628      	mov	r0, r5
 8017eec:	f000 fb12 	bl	8018514 <__swsetup_r>
 8017ef0:	2800      	cmp	r0, #0
 8017ef2:	d0dd      	beq.n	8017eb0 <_puts_r+0x40>
 8017ef4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8017ef8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017efa:	07da      	lsls	r2, r3, #31
 8017efc:	d405      	bmi.n	8017f0a <_puts_r+0x9a>
 8017efe:	89a3      	ldrh	r3, [r4, #12]
 8017f00:	059b      	lsls	r3, r3, #22
 8017f02:	d402      	bmi.n	8017f0a <_puts_r+0x9a>
 8017f04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017f06:	f7ff fea1 	bl	8017c4c <__retarget_lock_release_recursive>
 8017f0a:	4628      	mov	r0, r5
 8017f0c:	bd70      	pop	{r4, r5, r6, pc}
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	da04      	bge.n	8017f1c <_puts_r+0xac>
 8017f12:	69a2      	ldr	r2, [r4, #24]
 8017f14:	429a      	cmp	r2, r3
 8017f16:	dc06      	bgt.n	8017f26 <_puts_r+0xb6>
 8017f18:	290a      	cmp	r1, #10
 8017f1a:	d004      	beq.n	8017f26 <_puts_r+0xb6>
 8017f1c:	6823      	ldr	r3, [r4, #0]
 8017f1e:	1c5a      	adds	r2, r3, #1
 8017f20:	6022      	str	r2, [r4, #0]
 8017f22:	7019      	strb	r1, [r3, #0]
 8017f24:	e7c5      	b.n	8017eb2 <_puts_r+0x42>
 8017f26:	4622      	mov	r2, r4
 8017f28:	4628      	mov	r0, r5
 8017f2a:	f000 fa8f 	bl	801844c <__swbuf_r>
 8017f2e:	3001      	adds	r0, #1
 8017f30:	d1bf      	bne.n	8017eb2 <_puts_r+0x42>
 8017f32:	e7df      	b.n	8017ef4 <_puts_r+0x84>
 8017f34:	6823      	ldr	r3, [r4, #0]
 8017f36:	250a      	movs	r5, #10
 8017f38:	1c5a      	adds	r2, r3, #1
 8017f3a:	6022      	str	r2, [r4, #0]
 8017f3c:	701d      	strb	r5, [r3, #0]
 8017f3e:	e7db      	b.n	8017ef8 <_puts_r+0x88>
 8017f40:	0801ea30 	.word	0x0801ea30
 8017f44:	0801ea50 	.word	0x0801ea50
 8017f48:	0801ea10 	.word	0x0801ea10

08017f4c <puts>:
 8017f4c:	4b02      	ldr	r3, [pc, #8]	; (8017f58 <puts+0xc>)
 8017f4e:	4601      	mov	r1, r0
 8017f50:	6818      	ldr	r0, [r3, #0]
 8017f52:	f7ff bf8d 	b.w	8017e70 <_puts_r>
 8017f56:	bf00      	nop
 8017f58:	20000730 	.word	0x20000730

08017f5c <rand>:
 8017f5c:	4b17      	ldr	r3, [pc, #92]	; (8017fbc <rand+0x60>)
 8017f5e:	b510      	push	{r4, lr}
 8017f60:	681c      	ldr	r4, [r3, #0]
 8017f62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017f64:	b9b3      	cbnz	r3, 8017f94 <rand+0x38>
 8017f66:	2018      	movs	r0, #24
 8017f68:	f7ff fe72 	bl	8017c50 <malloc>
 8017f6c:	63a0      	str	r0, [r4, #56]	; 0x38
 8017f6e:	b928      	cbnz	r0, 8017f7c <rand+0x20>
 8017f70:	4602      	mov	r2, r0
 8017f72:	4b13      	ldr	r3, [pc, #76]	; (8017fc0 <rand+0x64>)
 8017f74:	4813      	ldr	r0, [pc, #76]	; (8017fc4 <rand+0x68>)
 8017f76:	214e      	movs	r1, #78	; 0x4e
 8017f78:	f000 fb3a 	bl	80185f0 <__assert_func>
 8017f7c:	4a12      	ldr	r2, [pc, #72]	; (8017fc8 <rand+0x6c>)
 8017f7e:	4b13      	ldr	r3, [pc, #76]	; (8017fcc <rand+0x70>)
 8017f80:	e9c0 2300 	strd	r2, r3, [r0]
 8017f84:	4b12      	ldr	r3, [pc, #72]	; (8017fd0 <rand+0x74>)
 8017f86:	6083      	str	r3, [r0, #8]
 8017f88:	230b      	movs	r3, #11
 8017f8a:	8183      	strh	r3, [r0, #12]
 8017f8c:	2201      	movs	r2, #1
 8017f8e:	2300      	movs	r3, #0
 8017f90:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017f94:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017f96:	480f      	ldr	r0, [pc, #60]	; (8017fd4 <rand+0x78>)
 8017f98:	690a      	ldr	r2, [r1, #16]
 8017f9a:	694b      	ldr	r3, [r1, #20]
 8017f9c:	4c0e      	ldr	r4, [pc, #56]	; (8017fd8 <rand+0x7c>)
 8017f9e:	4350      	muls	r0, r2
 8017fa0:	fb04 0003 	mla	r0, r4, r3, r0
 8017fa4:	fba2 3404 	umull	r3, r4, r2, r4
 8017fa8:	1c5a      	adds	r2, r3, #1
 8017faa:	4404      	add	r4, r0
 8017fac:	f144 0000 	adc.w	r0, r4, #0
 8017fb0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8017fb4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017fb8:	bd10      	pop	{r4, pc}
 8017fba:	bf00      	nop
 8017fbc:	20000730 	.word	0x20000730
 8017fc0:	0801ea74 	.word	0x0801ea74
 8017fc4:	0801ea8b 	.word	0x0801ea8b
 8017fc8:	abcd330e 	.word	0xabcd330e
 8017fcc:	e66d1234 	.word	0xe66d1234
 8017fd0:	0005deec 	.word	0x0005deec
 8017fd4:	5851f42d 	.word	0x5851f42d
 8017fd8:	4c957f2d 	.word	0x4c957f2d

08017fdc <realloc>:
 8017fdc:	4b02      	ldr	r3, [pc, #8]	; (8017fe8 <realloc+0xc>)
 8017fde:	460a      	mov	r2, r1
 8017fe0:	4601      	mov	r1, r0
 8017fe2:	6818      	ldr	r0, [r3, #0]
 8017fe4:	f000 bc8e 	b.w	8018904 <_realloc_r>
 8017fe8:	20000730 	.word	0x20000730

08017fec <cleanup_glue>:
 8017fec:	b538      	push	{r3, r4, r5, lr}
 8017fee:	460c      	mov	r4, r1
 8017ff0:	6809      	ldr	r1, [r1, #0]
 8017ff2:	4605      	mov	r5, r0
 8017ff4:	b109      	cbz	r1, 8017ffa <cleanup_glue+0xe>
 8017ff6:	f7ff fff9 	bl	8017fec <cleanup_glue>
 8017ffa:	4621      	mov	r1, r4
 8017ffc:	4628      	mov	r0, r5
 8017ffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018002:	f7ff be73 	b.w	8017cec <_free_r>
	...

08018008 <_reclaim_reent>:
 8018008:	4b2c      	ldr	r3, [pc, #176]	; (80180bc <_reclaim_reent+0xb4>)
 801800a:	681b      	ldr	r3, [r3, #0]
 801800c:	4283      	cmp	r3, r0
 801800e:	b570      	push	{r4, r5, r6, lr}
 8018010:	4604      	mov	r4, r0
 8018012:	d051      	beq.n	80180b8 <_reclaim_reent+0xb0>
 8018014:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8018016:	b143      	cbz	r3, 801802a <_reclaim_reent+0x22>
 8018018:	68db      	ldr	r3, [r3, #12]
 801801a:	2b00      	cmp	r3, #0
 801801c:	d14a      	bne.n	80180b4 <_reclaim_reent+0xac>
 801801e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018020:	6819      	ldr	r1, [r3, #0]
 8018022:	b111      	cbz	r1, 801802a <_reclaim_reent+0x22>
 8018024:	4620      	mov	r0, r4
 8018026:	f7ff fe61 	bl	8017cec <_free_r>
 801802a:	6961      	ldr	r1, [r4, #20]
 801802c:	b111      	cbz	r1, 8018034 <_reclaim_reent+0x2c>
 801802e:	4620      	mov	r0, r4
 8018030:	f7ff fe5c 	bl	8017cec <_free_r>
 8018034:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018036:	b111      	cbz	r1, 801803e <_reclaim_reent+0x36>
 8018038:	4620      	mov	r0, r4
 801803a:	f7ff fe57 	bl	8017cec <_free_r>
 801803e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018040:	b111      	cbz	r1, 8018048 <_reclaim_reent+0x40>
 8018042:	4620      	mov	r0, r4
 8018044:	f7ff fe52 	bl	8017cec <_free_r>
 8018048:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801804a:	b111      	cbz	r1, 8018052 <_reclaim_reent+0x4a>
 801804c:	4620      	mov	r0, r4
 801804e:	f7ff fe4d 	bl	8017cec <_free_r>
 8018052:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8018054:	b111      	cbz	r1, 801805c <_reclaim_reent+0x54>
 8018056:	4620      	mov	r0, r4
 8018058:	f7ff fe48 	bl	8017cec <_free_r>
 801805c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801805e:	b111      	cbz	r1, 8018066 <_reclaim_reent+0x5e>
 8018060:	4620      	mov	r0, r4
 8018062:	f7ff fe43 	bl	8017cec <_free_r>
 8018066:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8018068:	b111      	cbz	r1, 8018070 <_reclaim_reent+0x68>
 801806a:	4620      	mov	r0, r4
 801806c:	f7ff fe3e 	bl	8017cec <_free_r>
 8018070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018072:	b111      	cbz	r1, 801807a <_reclaim_reent+0x72>
 8018074:	4620      	mov	r0, r4
 8018076:	f7ff fe39 	bl	8017cec <_free_r>
 801807a:	69a3      	ldr	r3, [r4, #24]
 801807c:	b1e3      	cbz	r3, 80180b8 <_reclaim_reent+0xb0>
 801807e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018080:	4620      	mov	r0, r4
 8018082:	4798      	blx	r3
 8018084:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8018086:	b1b9      	cbz	r1, 80180b8 <_reclaim_reent+0xb0>
 8018088:	4620      	mov	r0, r4
 801808a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801808e:	f7ff bfad 	b.w	8017fec <cleanup_glue>
 8018092:	5949      	ldr	r1, [r1, r5]
 8018094:	b941      	cbnz	r1, 80180a8 <_reclaim_reent+0xa0>
 8018096:	3504      	adds	r5, #4
 8018098:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801809a:	2d80      	cmp	r5, #128	; 0x80
 801809c:	68d9      	ldr	r1, [r3, #12]
 801809e:	d1f8      	bne.n	8018092 <_reclaim_reent+0x8a>
 80180a0:	4620      	mov	r0, r4
 80180a2:	f7ff fe23 	bl	8017cec <_free_r>
 80180a6:	e7ba      	b.n	801801e <_reclaim_reent+0x16>
 80180a8:	680e      	ldr	r6, [r1, #0]
 80180aa:	4620      	mov	r0, r4
 80180ac:	f7ff fe1e 	bl	8017cec <_free_r>
 80180b0:	4631      	mov	r1, r6
 80180b2:	e7ef      	b.n	8018094 <_reclaim_reent+0x8c>
 80180b4:	2500      	movs	r5, #0
 80180b6:	e7ef      	b.n	8018098 <_reclaim_reent+0x90>
 80180b8:	bd70      	pop	{r4, r5, r6, pc}
 80180ba:	bf00      	nop
 80180bc:	20000730 	.word	0x20000730

080180c0 <_sbrk_r>:
 80180c0:	b538      	push	{r3, r4, r5, lr}
 80180c2:	4d06      	ldr	r5, [pc, #24]	; (80180dc <_sbrk_r+0x1c>)
 80180c4:	2300      	movs	r3, #0
 80180c6:	4604      	mov	r4, r0
 80180c8:	4608      	mov	r0, r1
 80180ca:	602b      	str	r3, [r5, #0]
 80180cc:	f7e9 ff34 	bl	8001f38 <_sbrk>
 80180d0:	1c43      	adds	r3, r0, #1
 80180d2:	d102      	bne.n	80180da <_sbrk_r+0x1a>
 80180d4:	682b      	ldr	r3, [r5, #0]
 80180d6:	b103      	cbz	r3, 80180da <_sbrk_r+0x1a>
 80180d8:	6023      	str	r3, [r4, #0]
 80180da:	bd38      	pop	{r3, r4, r5, pc}
 80180dc:	20018bc0 	.word	0x20018bc0

080180e0 <sniprintf>:
 80180e0:	b40c      	push	{r2, r3}
 80180e2:	b530      	push	{r4, r5, lr}
 80180e4:	4b17      	ldr	r3, [pc, #92]	; (8018144 <sniprintf+0x64>)
 80180e6:	1e0c      	subs	r4, r1, #0
 80180e8:	681d      	ldr	r5, [r3, #0]
 80180ea:	b09d      	sub	sp, #116	; 0x74
 80180ec:	da08      	bge.n	8018100 <sniprintf+0x20>
 80180ee:	238b      	movs	r3, #139	; 0x8b
 80180f0:	602b      	str	r3, [r5, #0]
 80180f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80180f6:	b01d      	add	sp, #116	; 0x74
 80180f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80180fc:	b002      	add	sp, #8
 80180fe:	4770      	bx	lr
 8018100:	f44f 7302 	mov.w	r3, #520	; 0x208
 8018104:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018108:	bf14      	ite	ne
 801810a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801810e:	4623      	moveq	r3, r4
 8018110:	9304      	str	r3, [sp, #16]
 8018112:	9307      	str	r3, [sp, #28]
 8018114:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018118:	9002      	str	r0, [sp, #8]
 801811a:	9006      	str	r0, [sp, #24]
 801811c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018120:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018122:	ab21      	add	r3, sp, #132	; 0x84
 8018124:	a902      	add	r1, sp, #8
 8018126:	4628      	mov	r0, r5
 8018128:	9301      	str	r3, [sp, #4]
 801812a:	f000 fc6d 	bl	8018a08 <_svfiprintf_r>
 801812e:	1c43      	adds	r3, r0, #1
 8018130:	bfbc      	itt	lt
 8018132:	238b      	movlt	r3, #139	; 0x8b
 8018134:	602b      	strlt	r3, [r5, #0]
 8018136:	2c00      	cmp	r4, #0
 8018138:	d0dd      	beq.n	80180f6 <sniprintf+0x16>
 801813a:	9b02      	ldr	r3, [sp, #8]
 801813c:	2200      	movs	r2, #0
 801813e:	701a      	strb	r2, [r3, #0]
 8018140:	e7d9      	b.n	80180f6 <sniprintf+0x16>
 8018142:	bf00      	nop
 8018144:	20000730 	.word	0x20000730

08018148 <siprintf>:
 8018148:	b40e      	push	{r1, r2, r3}
 801814a:	b500      	push	{lr}
 801814c:	b09c      	sub	sp, #112	; 0x70
 801814e:	ab1d      	add	r3, sp, #116	; 0x74
 8018150:	9002      	str	r0, [sp, #8]
 8018152:	9006      	str	r0, [sp, #24]
 8018154:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018158:	4809      	ldr	r0, [pc, #36]	; (8018180 <siprintf+0x38>)
 801815a:	9107      	str	r1, [sp, #28]
 801815c:	9104      	str	r1, [sp, #16]
 801815e:	4909      	ldr	r1, [pc, #36]	; (8018184 <siprintf+0x3c>)
 8018160:	f853 2b04 	ldr.w	r2, [r3], #4
 8018164:	9105      	str	r1, [sp, #20]
 8018166:	6800      	ldr	r0, [r0, #0]
 8018168:	9301      	str	r3, [sp, #4]
 801816a:	a902      	add	r1, sp, #8
 801816c:	f000 fc4c 	bl	8018a08 <_svfiprintf_r>
 8018170:	9b02      	ldr	r3, [sp, #8]
 8018172:	2200      	movs	r2, #0
 8018174:	701a      	strb	r2, [r3, #0]
 8018176:	b01c      	add	sp, #112	; 0x70
 8018178:	f85d eb04 	ldr.w	lr, [sp], #4
 801817c:	b003      	add	sp, #12
 801817e:	4770      	bx	lr
 8018180:	20000730 	.word	0x20000730
 8018184:	ffff0208 	.word	0xffff0208

08018188 <siscanf>:
 8018188:	b40e      	push	{r1, r2, r3}
 801818a:	b510      	push	{r4, lr}
 801818c:	b09f      	sub	sp, #124	; 0x7c
 801818e:	ac21      	add	r4, sp, #132	; 0x84
 8018190:	f44f 7101 	mov.w	r1, #516	; 0x204
 8018194:	f854 2b04 	ldr.w	r2, [r4], #4
 8018198:	9201      	str	r2, [sp, #4]
 801819a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801819e:	9004      	str	r0, [sp, #16]
 80181a0:	9008      	str	r0, [sp, #32]
 80181a2:	f7e8 f857 	bl	8000254 <strlen>
 80181a6:	4b0c      	ldr	r3, [pc, #48]	; (80181d8 <siscanf+0x50>)
 80181a8:	9005      	str	r0, [sp, #20]
 80181aa:	9009      	str	r0, [sp, #36]	; 0x24
 80181ac:	930d      	str	r3, [sp, #52]	; 0x34
 80181ae:	480b      	ldr	r0, [pc, #44]	; (80181dc <siscanf+0x54>)
 80181b0:	9a01      	ldr	r2, [sp, #4]
 80181b2:	6800      	ldr	r0, [r0, #0]
 80181b4:	9403      	str	r4, [sp, #12]
 80181b6:	2300      	movs	r3, #0
 80181b8:	9311      	str	r3, [sp, #68]	; 0x44
 80181ba:	9316      	str	r3, [sp, #88]	; 0x58
 80181bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80181c0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80181c4:	a904      	add	r1, sp, #16
 80181c6:	4623      	mov	r3, r4
 80181c8:	f000 fd78 	bl	8018cbc <__ssvfiscanf_r>
 80181cc:	b01f      	add	sp, #124	; 0x7c
 80181ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80181d2:	b003      	add	sp, #12
 80181d4:	4770      	bx	lr
 80181d6:	bf00      	nop
 80181d8:	08018203 	.word	0x08018203
 80181dc:	20000730 	.word	0x20000730

080181e0 <__sread>:
 80181e0:	b510      	push	{r4, lr}
 80181e2:	460c      	mov	r4, r1
 80181e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181e8:	f001 fb1a 	bl	8019820 <_read_r>
 80181ec:	2800      	cmp	r0, #0
 80181ee:	bfab      	itete	ge
 80181f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80181f2:	89a3      	ldrhlt	r3, [r4, #12]
 80181f4:	181b      	addge	r3, r3, r0
 80181f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80181fa:	bfac      	ite	ge
 80181fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80181fe:	81a3      	strhlt	r3, [r4, #12]
 8018200:	bd10      	pop	{r4, pc}

08018202 <__seofread>:
 8018202:	2000      	movs	r0, #0
 8018204:	4770      	bx	lr

08018206 <__swrite>:
 8018206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801820a:	461f      	mov	r7, r3
 801820c:	898b      	ldrh	r3, [r1, #12]
 801820e:	05db      	lsls	r3, r3, #23
 8018210:	4605      	mov	r5, r0
 8018212:	460c      	mov	r4, r1
 8018214:	4616      	mov	r6, r2
 8018216:	d505      	bpl.n	8018224 <__swrite+0x1e>
 8018218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801821c:	2302      	movs	r3, #2
 801821e:	2200      	movs	r2, #0
 8018220:	f000 faee 	bl	8018800 <_lseek_r>
 8018224:	89a3      	ldrh	r3, [r4, #12]
 8018226:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801822a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801822e:	81a3      	strh	r3, [r4, #12]
 8018230:	4632      	mov	r2, r6
 8018232:	463b      	mov	r3, r7
 8018234:	4628      	mov	r0, r5
 8018236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801823a:	f000 b959 	b.w	80184f0 <_write_r>

0801823e <__sseek>:
 801823e:	b510      	push	{r4, lr}
 8018240:	460c      	mov	r4, r1
 8018242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018246:	f000 fadb 	bl	8018800 <_lseek_r>
 801824a:	1c43      	adds	r3, r0, #1
 801824c:	89a3      	ldrh	r3, [r4, #12]
 801824e:	bf15      	itete	ne
 8018250:	6560      	strne	r0, [r4, #84]	; 0x54
 8018252:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018256:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801825a:	81a3      	strheq	r3, [r4, #12]
 801825c:	bf18      	it	ne
 801825e:	81a3      	strhne	r3, [r4, #12]
 8018260:	bd10      	pop	{r4, pc}

08018262 <__sclose>:
 8018262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018266:	f000 b9e1 	b.w	801862c <_close_r>

0801826a <strcat>:
 801826a:	b510      	push	{r4, lr}
 801826c:	4602      	mov	r2, r0
 801826e:	7814      	ldrb	r4, [r2, #0]
 8018270:	4613      	mov	r3, r2
 8018272:	3201      	adds	r2, #1
 8018274:	2c00      	cmp	r4, #0
 8018276:	d1fa      	bne.n	801826e <strcat+0x4>
 8018278:	3b01      	subs	r3, #1
 801827a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801827e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018282:	2a00      	cmp	r2, #0
 8018284:	d1f9      	bne.n	801827a <strcat+0x10>
 8018286:	bd10      	pop	{r4, pc}

08018288 <strchr>:
 8018288:	b2c9      	uxtb	r1, r1
 801828a:	4603      	mov	r3, r0
 801828c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018290:	b11a      	cbz	r2, 801829a <strchr+0x12>
 8018292:	428a      	cmp	r2, r1
 8018294:	d1f9      	bne.n	801828a <strchr+0x2>
 8018296:	4618      	mov	r0, r3
 8018298:	4770      	bx	lr
 801829a:	2900      	cmp	r1, #0
 801829c:	bf18      	it	ne
 801829e:	2300      	movne	r3, #0
 80182a0:	e7f9      	b.n	8018296 <strchr+0xe>

080182a2 <strcpy>:
 80182a2:	4603      	mov	r3, r0
 80182a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80182a8:	f803 2b01 	strb.w	r2, [r3], #1
 80182ac:	2a00      	cmp	r2, #0
 80182ae:	d1f9      	bne.n	80182a4 <strcpy+0x2>
 80182b0:	4770      	bx	lr

080182b2 <strncmp>:
 80182b2:	b510      	push	{r4, lr}
 80182b4:	b16a      	cbz	r2, 80182d2 <strncmp+0x20>
 80182b6:	3901      	subs	r1, #1
 80182b8:	1884      	adds	r4, r0, r2
 80182ba:	f810 3b01 	ldrb.w	r3, [r0], #1
 80182be:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80182c2:	4293      	cmp	r3, r2
 80182c4:	d103      	bne.n	80182ce <strncmp+0x1c>
 80182c6:	42a0      	cmp	r0, r4
 80182c8:	d001      	beq.n	80182ce <strncmp+0x1c>
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	d1f5      	bne.n	80182ba <strncmp+0x8>
 80182ce:	1a98      	subs	r0, r3, r2
 80182d0:	bd10      	pop	{r4, pc}
 80182d2:	4610      	mov	r0, r2
 80182d4:	e7fc      	b.n	80182d0 <strncmp+0x1e>

080182d6 <strncpy>:
 80182d6:	b510      	push	{r4, lr}
 80182d8:	3901      	subs	r1, #1
 80182da:	4603      	mov	r3, r0
 80182dc:	b132      	cbz	r2, 80182ec <strncpy+0x16>
 80182de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80182e2:	f803 4b01 	strb.w	r4, [r3], #1
 80182e6:	3a01      	subs	r2, #1
 80182e8:	2c00      	cmp	r4, #0
 80182ea:	d1f7      	bne.n	80182dc <strncpy+0x6>
 80182ec:	441a      	add	r2, r3
 80182ee:	2100      	movs	r1, #0
 80182f0:	4293      	cmp	r3, r2
 80182f2:	d100      	bne.n	80182f6 <strncpy+0x20>
 80182f4:	bd10      	pop	{r4, pc}
 80182f6:	f803 1b01 	strb.w	r1, [r3], #1
 80182fa:	e7f9      	b.n	80182f0 <strncpy+0x1a>

080182fc <strstr>:
 80182fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80182fe:	780c      	ldrb	r4, [r1, #0]
 8018300:	b164      	cbz	r4, 801831c <strstr+0x20>
 8018302:	4603      	mov	r3, r0
 8018304:	781a      	ldrb	r2, [r3, #0]
 8018306:	4618      	mov	r0, r3
 8018308:	1c5e      	adds	r6, r3, #1
 801830a:	b90a      	cbnz	r2, 8018310 <strstr+0x14>
 801830c:	4610      	mov	r0, r2
 801830e:	e005      	b.n	801831c <strstr+0x20>
 8018310:	4294      	cmp	r4, r2
 8018312:	d108      	bne.n	8018326 <strstr+0x2a>
 8018314:	460d      	mov	r5, r1
 8018316:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801831a:	b902      	cbnz	r2, 801831e <strstr+0x22>
 801831c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801831e:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8018322:	4297      	cmp	r7, r2
 8018324:	d0f7      	beq.n	8018316 <strstr+0x1a>
 8018326:	4633      	mov	r3, r6
 8018328:	e7ec      	b.n	8018304 <strstr+0x8>
	...

0801832c <_strtol_l.isra.0>:
 801832c:	2b01      	cmp	r3, #1
 801832e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018332:	d001      	beq.n	8018338 <_strtol_l.isra.0+0xc>
 8018334:	2b24      	cmp	r3, #36	; 0x24
 8018336:	d906      	bls.n	8018346 <_strtol_l.isra.0+0x1a>
 8018338:	f000 f988 	bl	801864c <__errno>
 801833c:	2316      	movs	r3, #22
 801833e:	6003      	str	r3, [r0, #0]
 8018340:	2000      	movs	r0, #0
 8018342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018346:	4f3a      	ldr	r7, [pc, #232]	; (8018430 <_strtol_l.isra.0+0x104>)
 8018348:	468e      	mov	lr, r1
 801834a:	4676      	mov	r6, lr
 801834c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8018350:	5de5      	ldrb	r5, [r4, r7]
 8018352:	f015 0508 	ands.w	r5, r5, #8
 8018356:	d1f8      	bne.n	801834a <_strtol_l.isra.0+0x1e>
 8018358:	2c2d      	cmp	r4, #45	; 0x2d
 801835a:	d134      	bne.n	80183c6 <_strtol_l.isra.0+0x9a>
 801835c:	f89e 4000 	ldrb.w	r4, [lr]
 8018360:	f04f 0801 	mov.w	r8, #1
 8018364:	f106 0e02 	add.w	lr, r6, #2
 8018368:	2b00      	cmp	r3, #0
 801836a:	d05c      	beq.n	8018426 <_strtol_l.isra.0+0xfa>
 801836c:	2b10      	cmp	r3, #16
 801836e:	d10c      	bne.n	801838a <_strtol_l.isra.0+0x5e>
 8018370:	2c30      	cmp	r4, #48	; 0x30
 8018372:	d10a      	bne.n	801838a <_strtol_l.isra.0+0x5e>
 8018374:	f89e 4000 	ldrb.w	r4, [lr]
 8018378:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801837c:	2c58      	cmp	r4, #88	; 0x58
 801837e:	d14d      	bne.n	801841c <_strtol_l.isra.0+0xf0>
 8018380:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8018384:	2310      	movs	r3, #16
 8018386:	f10e 0e02 	add.w	lr, lr, #2
 801838a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801838e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8018392:	2600      	movs	r6, #0
 8018394:	fbbc f9f3 	udiv	r9, ip, r3
 8018398:	4635      	mov	r5, r6
 801839a:	fb03 ca19 	mls	sl, r3, r9, ip
 801839e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80183a2:	2f09      	cmp	r7, #9
 80183a4:	d818      	bhi.n	80183d8 <_strtol_l.isra.0+0xac>
 80183a6:	463c      	mov	r4, r7
 80183a8:	42a3      	cmp	r3, r4
 80183aa:	dd24      	ble.n	80183f6 <_strtol_l.isra.0+0xca>
 80183ac:	2e00      	cmp	r6, #0
 80183ae:	db1f      	blt.n	80183f0 <_strtol_l.isra.0+0xc4>
 80183b0:	45a9      	cmp	r9, r5
 80183b2:	d31d      	bcc.n	80183f0 <_strtol_l.isra.0+0xc4>
 80183b4:	d101      	bne.n	80183ba <_strtol_l.isra.0+0x8e>
 80183b6:	45a2      	cmp	sl, r4
 80183b8:	db1a      	blt.n	80183f0 <_strtol_l.isra.0+0xc4>
 80183ba:	fb05 4503 	mla	r5, r5, r3, r4
 80183be:	2601      	movs	r6, #1
 80183c0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80183c4:	e7eb      	b.n	801839e <_strtol_l.isra.0+0x72>
 80183c6:	2c2b      	cmp	r4, #43	; 0x2b
 80183c8:	bf08      	it	eq
 80183ca:	f89e 4000 	ldrbeq.w	r4, [lr]
 80183ce:	46a8      	mov	r8, r5
 80183d0:	bf08      	it	eq
 80183d2:	f106 0e02 	addeq.w	lr, r6, #2
 80183d6:	e7c7      	b.n	8018368 <_strtol_l.isra.0+0x3c>
 80183d8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80183dc:	2f19      	cmp	r7, #25
 80183de:	d801      	bhi.n	80183e4 <_strtol_l.isra.0+0xb8>
 80183e0:	3c37      	subs	r4, #55	; 0x37
 80183e2:	e7e1      	b.n	80183a8 <_strtol_l.isra.0+0x7c>
 80183e4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80183e8:	2f19      	cmp	r7, #25
 80183ea:	d804      	bhi.n	80183f6 <_strtol_l.isra.0+0xca>
 80183ec:	3c57      	subs	r4, #87	; 0x57
 80183ee:	e7db      	b.n	80183a8 <_strtol_l.isra.0+0x7c>
 80183f0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80183f4:	e7e4      	b.n	80183c0 <_strtol_l.isra.0+0x94>
 80183f6:	2e00      	cmp	r6, #0
 80183f8:	da05      	bge.n	8018406 <_strtol_l.isra.0+0xda>
 80183fa:	2322      	movs	r3, #34	; 0x22
 80183fc:	6003      	str	r3, [r0, #0]
 80183fe:	4665      	mov	r5, ip
 8018400:	b942      	cbnz	r2, 8018414 <_strtol_l.isra.0+0xe8>
 8018402:	4628      	mov	r0, r5
 8018404:	e79d      	b.n	8018342 <_strtol_l.isra.0+0x16>
 8018406:	f1b8 0f00 	cmp.w	r8, #0
 801840a:	d000      	beq.n	801840e <_strtol_l.isra.0+0xe2>
 801840c:	426d      	negs	r5, r5
 801840e:	2a00      	cmp	r2, #0
 8018410:	d0f7      	beq.n	8018402 <_strtol_l.isra.0+0xd6>
 8018412:	b10e      	cbz	r6, 8018418 <_strtol_l.isra.0+0xec>
 8018414:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8018418:	6011      	str	r1, [r2, #0]
 801841a:	e7f2      	b.n	8018402 <_strtol_l.isra.0+0xd6>
 801841c:	2430      	movs	r4, #48	; 0x30
 801841e:	2b00      	cmp	r3, #0
 8018420:	d1b3      	bne.n	801838a <_strtol_l.isra.0+0x5e>
 8018422:	2308      	movs	r3, #8
 8018424:	e7b1      	b.n	801838a <_strtol_l.isra.0+0x5e>
 8018426:	2c30      	cmp	r4, #48	; 0x30
 8018428:	d0a4      	beq.n	8018374 <_strtol_l.isra.0+0x48>
 801842a:	230a      	movs	r3, #10
 801842c:	e7ad      	b.n	801838a <_strtol_l.isra.0+0x5e>
 801842e:	bf00      	nop
 8018430:	0801e90d 	.word	0x0801e90d

08018434 <_strtol_r>:
 8018434:	f7ff bf7a 	b.w	801832c <_strtol_l.isra.0>

08018438 <strtol>:
 8018438:	4613      	mov	r3, r2
 801843a:	460a      	mov	r2, r1
 801843c:	4601      	mov	r1, r0
 801843e:	4802      	ldr	r0, [pc, #8]	; (8018448 <strtol+0x10>)
 8018440:	6800      	ldr	r0, [r0, #0]
 8018442:	f7ff bf73 	b.w	801832c <_strtol_l.isra.0>
 8018446:	bf00      	nop
 8018448:	20000730 	.word	0x20000730

0801844c <__swbuf_r>:
 801844c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801844e:	460e      	mov	r6, r1
 8018450:	4614      	mov	r4, r2
 8018452:	4605      	mov	r5, r0
 8018454:	b118      	cbz	r0, 801845e <__swbuf_r+0x12>
 8018456:	6983      	ldr	r3, [r0, #24]
 8018458:	b90b      	cbnz	r3, 801845e <__swbuf_r+0x12>
 801845a:	f7ff fb33 	bl	8017ac4 <__sinit>
 801845e:	4b21      	ldr	r3, [pc, #132]	; (80184e4 <__swbuf_r+0x98>)
 8018460:	429c      	cmp	r4, r3
 8018462:	d12b      	bne.n	80184bc <__swbuf_r+0x70>
 8018464:	686c      	ldr	r4, [r5, #4]
 8018466:	69a3      	ldr	r3, [r4, #24]
 8018468:	60a3      	str	r3, [r4, #8]
 801846a:	89a3      	ldrh	r3, [r4, #12]
 801846c:	071a      	lsls	r2, r3, #28
 801846e:	d52f      	bpl.n	80184d0 <__swbuf_r+0x84>
 8018470:	6923      	ldr	r3, [r4, #16]
 8018472:	b36b      	cbz	r3, 80184d0 <__swbuf_r+0x84>
 8018474:	6923      	ldr	r3, [r4, #16]
 8018476:	6820      	ldr	r0, [r4, #0]
 8018478:	1ac0      	subs	r0, r0, r3
 801847a:	6963      	ldr	r3, [r4, #20]
 801847c:	b2f6      	uxtb	r6, r6
 801847e:	4283      	cmp	r3, r0
 8018480:	4637      	mov	r7, r6
 8018482:	dc04      	bgt.n	801848e <__swbuf_r+0x42>
 8018484:	4621      	mov	r1, r4
 8018486:	4628      	mov	r0, r5
 8018488:	f000 f96c 	bl	8018764 <_fflush_r>
 801848c:	bb30      	cbnz	r0, 80184dc <__swbuf_r+0x90>
 801848e:	68a3      	ldr	r3, [r4, #8]
 8018490:	3b01      	subs	r3, #1
 8018492:	60a3      	str	r3, [r4, #8]
 8018494:	6823      	ldr	r3, [r4, #0]
 8018496:	1c5a      	adds	r2, r3, #1
 8018498:	6022      	str	r2, [r4, #0]
 801849a:	701e      	strb	r6, [r3, #0]
 801849c:	6963      	ldr	r3, [r4, #20]
 801849e:	3001      	adds	r0, #1
 80184a0:	4283      	cmp	r3, r0
 80184a2:	d004      	beq.n	80184ae <__swbuf_r+0x62>
 80184a4:	89a3      	ldrh	r3, [r4, #12]
 80184a6:	07db      	lsls	r3, r3, #31
 80184a8:	d506      	bpl.n	80184b8 <__swbuf_r+0x6c>
 80184aa:	2e0a      	cmp	r6, #10
 80184ac:	d104      	bne.n	80184b8 <__swbuf_r+0x6c>
 80184ae:	4621      	mov	r1, r4
 80184b0:	4628      	mov	r0, r5
 80184b2:	f000 f957 	bl	8018764 <_fflush_r>
 80184b6:	b988      	cbnz	r0, 80184dc <__swbuf_r+0x90>
 80184b8:	4638      	mov	r0, r7
 80184ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80184bc:	4b0a      	ldr	r3, [pc, #40]	; (80184e8 <__swbuf_r+0x9c>)
 80184be:	429c      	cmp	r4, r3
 80184c0:	d101      	bne.n	80184c6 <__swbuf_r+0x7a>
 80184c2:	68ac      	ldr	r4, [r5, #8]
 80184c4:	e7cf      	b.n	8018466 <__swbuf_r+0x1a>
 80184c6:	4b09      	ldr	r3, [pc, #36]	; (80184ec <__swbuf_r+0xa0>)
 80184c8:	429c      	cmp	r4, r3
 80184ca:	bf08      	it	eq
 80184cc:	68ec      	ldreq	r4, [r5, #12]
 80184ce:	e7ca      	b.n	8018466 <__swbuf_r+0x1a>
 80184d0:	4621      	mov	r1, r4
 80184d2:	4628      	mov	r0, r5
 80184d4:	f000 f81e 	bl	8018514 <__swsetup_r>
 80184d8:	2800      	cmp	r0, #0
 80184da:	d0cb      	beq.n	8018474 <__swbuf_r+0x28>
 80184dc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80184e0:	e7ea      	b.n	80184b8 <__swbuf_r+0x6c>
 80184e2:	bf00      	nop
 80184e4:	0801ea30 	.word	0x0801ea30
 80184e8:	0801ea50 	.word	0x0801ea50
 80184ec:	0801ea10 	.word	0x0801ea10

080184f0 <_write_r>:
 80184f0:	b538      	push	{r3, r4, r5, lr}
 80184f2:	4d07      	ldr	r5, [pc, #28]	; (8018510 <_write_r+0x20>)
 80184f4:	4604      	mov	r4, r0
 80184f6:	4608      	mov	r0, r1
 80184f8:	4611      	mov	r1, r2
 80184fa:	2200      	movs	r2, #0
 80184fc:	602a      	str	r2, [r5, #0]
 80184fe:	461a      	mov	r2, r3
 8018500:	f7e9 fcc9 	bl	8001e96 <_write>
 8018504:	1c43      	adds	r3, r0, #1
 8018506:	d102      	bne.n	801850e <_write_r+0x1e>
 8018508:	682b      	ldr	r3, [r5, #0]
 801850a:	b103      	cbz	r3, 801850e <_write_r+0x1e>
 801850c:	6023      	str	r3, [r4, #0]
 801850e:	bd38      	pop	{r3, r4, r5, pc}
 8018510:	20018bc0 	.word	0x20018bc0

08018514 <__swsetup_r>:
 8018514:	4b32      	ldr	r3, [pc, #200]	; (80185e0 <__swsetup_r+0xcc>)
 8018516:	b570      	push	{r4, r5, r6, lr}
 8018518:	681d      	ldr	r5, [r3, #0]
 801851a:	4606      	mov	r6, r0
 801851c:	460c      	mov	r4, r1
 801851e:	b125      	cbz	r5, 801852a <__swsetup_r+0x16>
 8018520:	69ab      	ldr	r3, [r5, #24]
 8018522:	b913      	cbnz	r3, 801852a <__swsetup_r+0x16>
 8018524:	4628      	mov	r0, r5
 8018526:	f7ff facd 	bl	8017ac4 <__sinit>
 801852a:	4b2e      	ldr	r3, [pc, #184]	; (80185e4 <__swsetup_r+0xd0>)
 801852c:	429c      	cmp	r4, r3
 801852e:	d10f      	bne.n	8018550 <__swsetup_r+0x3c>
 8018530:	686c      	ldr	r4, [r5, #4]
 8018532:	89a3      	ldrh	r3, [r4, #12]
 8018534:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018538:	0719      	lsls	r1, r3, #28
 801853a:	d42c      	bmi.n	8018596 <__swsetup_r+0x82>
 801853c:	06dd      	lsls	r5, r3, #27
 801853e:	d411      	bmi.n	8018564 <__swsetup_r+0x50>
 8018540:	2309      	movs	r3, #9
 8018542:	6033      	str	r3, [r6, #0]
 8018544:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018548:	81a3      	strh	r3, [r4, #12]
 801854a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801854e:	e03e      	b.n	80185ce <__swsetup_r+0xba>
 8018550:	4b25      	ldr	r3, [pc, #148]	; (80185e8 <__swsetup_r+0xd4>)
 8018552:	429c      	cmp	r4, r3
 8018554:	d101      	bne.n	801855a <__swsetup_r+0x46>
 8018556:	68ac      	ldr	r4, [r5, #8]
 8018558:	e7eb      	b.n	8018532 <__swsetup_r+0x1e>
 801855a:	4b24      	ldr	r3, [pc, #144]	; (80185ec <__swsetup_r+0xd8>)
 801855c:	429c      	cmp	r4, r3
 801855e:	bf08      	it	eq
 8018560:	68ec      	ldreq	r4, [r5, #12]
 8018562:	e7e6      	b.n	8018532 <__swsetup_r+0x1e>
 8018564:	0758      	lsls	r0, r3, #29
 8018566:	d512      	bpl.n	801858e <__swsetup_r+0x7a>
 8018568:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801856a:	b141      	cbz	r1, 801857e <__swsetup_r+0x6a>
 801856c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018570:	4299      	cmp	r1, r3
 8018572:	d002      	beq.n	801857a <__swsetup_r+0x66>
 8018574:	4630      	mov	r0, r6
 8018576:	f7ff fbb9 	bl	8017cec <_free_r>
 801857a:	2300      	movs	r3, #0
 801857c:	6363      	str	r3, [r4, #52]	; 0x34
 801857e:	89a3      	ldrh	r3, [r4, #12]
 8018580:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018584:	81a3      	strh	r3, [r4, #12]
 8018586:	2300      	movs	r3, #0
 8018588:	6063      	str	r3, [r4, #4]
 801858a:	6923      	ldr	r3, [r4, #16]
 801858c:	6023      	str	r3, [r4, #0]
 801858e:	89a3      	ldrh	r3, [r4, #12]
 8018590:	f043 0308 	orr.w	r3, r3, #8
 8018594:	81a3      	strh	r3, [r4, #12]
 8018596:	6923      	ldr	r3, [r4, #16]
 8018598:	b94b      	cbnz	r3, 80185ae <__swsetup_r+0x9a>
 801859a:	89a3      	ldrh	r3, [r4, #12]
 801859c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80185a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80185a4:	d003      	beq.n	80185ae <__swsetup_r+0x9a>
 80185a6:	4621      	mov	r1, r4
 80185a8:	4630      	mov	r0, r6
 80185aa:	f000 f95f 	bl	801886c <__smakebuf_r>
 80185ae:	89a0      	ldrh	r0, [r4, #12]
 80185b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80185b4:	f010 0301 	ands.w	r3, r0, #1
 80185b8:	d00a      	beq.n	80185d0 <__swsetup_r+0xbc>
 80185ba:	2300      	movs	r3, #0
 80185bc:	60a3      	str	r3, [r4, #8]
 80185be:	6963      	ldr	r3, [r4, #20]
 80185c0:	425b      	negs	r3, r3
 80185c2:	61a3      	str	r3, [r4, #24]
 80185c4:	6923      	ldr	r3, [r4, #16]
 80185c6:	b943      	cbnz	r3, 80185da <__swsetup_r+0xc6>
 80185c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80185cc:	d1ba      	bne.n	8018544 <__swsetup_r+0x30>
 80185ce:	bd70      	pop	{r4, r5, r6, pc}
 80185d0:	0781      	lsls	r1, r0, #30
 80185d2:	bf58      	it	pl
 80185d4:	6963      	ldrpl	r3, [r4, #20]
 80185d6:	60a3      	str	r3, [r4, #8]
 80185d8:	e7f4      	b.n	80185c4 <__swsetup_r+0xb0>
 80185da:	2000      	movs	r0, #0
 80185dc:	e7f7      	b.n	80185ce <__swsetup_r+0xba>
 80185de:	bf00      	nop
 80185e0:	20000730 	.word	0x20000730
 80185e4:	0801ea30 	.word	0x0801ea30
 80185e8:	0801ea50 	.word	0x0801ea50
 80185ec:	0801ea10 	.word	0x0801ea10

080185f0 <__assert_func>:
 80185f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80185f2:	4614      	mov	r4, r2
 80185f4:	461a      	mov	r2, r3
 80185f6:	4b09      	ldr	r3, [pc, #36]	; (801861c <__assert_func+0x2c>)
 80185f8:	681b      	ldr	r3, [r3, #0]
 80185fa:	4605      	mov	r5, r0
 80185fc:	68d8      	ldr	r0, [r3, #12]
 80185fe:	b14c      	cbz	r4, 8018614 <__assert_func+0x24>
 8018600:	4b07      	ldr	r3, [pc, #28]	; (8018620 <__assert_func+0x30>)
 8018602:	9100      	str	r1, [sp, #0]
 8018604:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018608:	4906      	ldr	r1, [pc, #24]	; (8018624 <__assert_func+0x34>)
 801860a:	462b      	mov	r3, r5
 801860c:	f000 f8e6 	bl	80187dc <fiprintf>
 8018610:	f001 fa0a 	bl	8019a28 <abort>
 8018614:	4b04      	ldr	r3, [pc, #16]	; (8018628 <__assert_func+0x38>)
 8018616:	461c      	mov	r4, r3
 8018618:	e7f3      	b.n	8018602 <__assert_func+0x12>
 801861a:	bf00      	nop
 801861c:	20000730 	.word	0x20000730
 8018620:	0801eaea 	.word	0x0801eaea
 8018624:	0801eaf7 	.word	0x0801eaf7
 8018628:	0801eb25 	.word	0x0801eb25

0801862c <_close_r>:
 801862c:	b538      	push	{r3, r4, r5, lr}
 801862e:	4d06      	ldr	r5, [pc, #24]	; (8018648 <_close_r+0x1c>)
 8018630:	2300      	movs	r3, #0
 8018632:	4604      	mov	r4, r0
 8018634:	4608      	mov	r0, r1
 8018636:	602b      	str	r3, [r5, #0]
 8018638:	f7e9 fc49 	bl	8001ece <_close>
 801863c:	1c43      	adds	r3, r0, #1
 801863e:	d102      	bne.n	8018646 <_close_r+0x1a>
 8018640:	682b      	ldr	r3, [r5, #0]
 8018642:	b103      	cbz	r3, 8018646 <_close_r+0x1a>
 8018644:	6023      	str	r3, [r4, #0]
 8018646:	bd38      	pop	{r3, r4, r5, pc}
 8018648:	20018bc0 	.word	0x20018bc0

0801864c <__errno>:
 801864c:	4b01      	ldr	r3, [pc, #4]	; (8018654 <__errno+0x8>)
 801864e:	6818      	ldr	r0, [r3, #0]
 8018650:	4770      	bx	lr
 8018652:	bf00      	nop
 8018654:	20000730 	.word	0x20000730

08018658 <__sflush_r>:
 8018658:	898a      	ldrh	r2, [r1, #12]
 801865a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801865e:	4605      	mov	r5, r0
 8018660:	0710      	lsls	r0, r2, #28
 8018662:	460c      	mov	r4, r1
 8018664:	d458      	bmi.n	8018718 <__sflush_r+0xc0>
 8018666:	684b      	ldr	r3, [r1, #4]
 8018668:	2b00      	cmp	r3, #0
 801866a:	dc05      	bgt.n	8018678 <__sflush_r+0x20>
 801866c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801866e:	2b00      	cmp	r3, #0
 8018670:	dc02      	bgt.n	8018678 <__sflush_r+0x20>
 8018672:	2000      	movs	r0, #0
 8018674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018678:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801867a:	2e00      	cmp	r6, #0
 801867c:	d0f9      	beq.n	8018672 <__sflush_r+0x1a>
 801867e:	2300      	movs	r3, #0
 8018680:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018684:	682f      	ldr	r7, [r5, #0]
 8018686:	602b      	str	r3, [r5, #0]
 8018688:	d032      	beq.n	80186f0 <__sflush_r+0x98>
 801868a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801868c:	89a3      	ldrh	r3, [r4, #12]
 801868e:	075a      	lsls	r2, r3, #29
 8018690:	d505      	bpl.n	801869e <__sflush_r+0x46>
 8018692:	6863      	ldr	r3, [r4, #4]
 8018694:	1ac0      	subs	r0, r0, r3
 8018696:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018698:	b10b      	cbz	r3, 801869e <__sflush_r+0x46>
 801869a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801869c:	1ac0      	subs	r0, r0, r3
 801869e:	2300      	movs	r3, #0
 80186a0:	4602      	mov	r2, r0
 80186a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80186a4:	6a21      	ldr	r1, [r4, #32]
 80186a6:	4628      	mov	r0, r5
 80186a8:	47b0      	blx	r6
 80186aa:	1c43      	adds	r3, r0, #1
 80186ac:	89a3      	ldrh	r3, [r4, #12]
 80186ae:	d106      	bne.n	80186be <__sflush_r+0x66>
 80186b0:	6829      	ldr	r1, [r5, #0]
 80186b2:	291d      	cmp	r1, #29
 80186b4:	d82c      	bhi.n	8018710 <__sflush_r+0xb8>
 80186b6:	4a2a      	ldr	r2, [pc, #168]	; (8018760 <__sflush_r+0x108>)
 80186b8:	40ca      	lsrs	r2, r1
 80186ba:	07d6      	lsls	r6, r2, #31
 80186bc:	d528      	bpl.n	8018710 <__sflush_r+0xb8>
 80186be:	2200      	movs	r2, #0
 80186c0:	6062      	str	r2, [r4, #4]
 80186c2:	04d9      	lsls	r1, r3, #19
 80186c4:	6922      	ldr	r2, [r4, #16]
 80186c6:	6022      	str	r2, [r4, #0]
 80186c8:	d504      	bpl.n	80186d4 <__sflush_r+0x7c>
 80186ca:	1c42      	adds	r2, r0, #1
 80186cc:	d101      	bne.n	80186d2 <__sflush_r+0x7a>
 80186ce:	682b      	ldr	r3, [r5, #0]
 80186d0:	b903      	cbnz	r3, 80186d4 <__sflush_r+0x7c>
 80186d2:	6560      	str	r0, [r4, #84]	; 0x54
 80186d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80186d6:	602f      	str	r7, [r5, #0]
 80186d8:	2900      	cmp	r1, #0
 80186da:	d0ca      	beq.n	8018672 <__sflush_r+0x1a>
 80186dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80186e0:	4299      	cmp	r1, r3
 80186e2:	d002      	beq.n	80186ea <__sflush_r+0x92>
 80186e4:	4628      	mov	r0, r5
 80186e6:	f7ff fb01 	bl	8017cec <_free_r>
 80186ea:	2000      	movs	r0, #0
 80186ec:	6360      	str	r0, [r4, #52]	; 0x34
 80186ee:	e7c1      	b.n	8018674 <__sflush_r+0x1c>
 80186f0:	6a21      	ldr	r1, [r4, #32]
 80186f2:	2301      	movs	r3, #1
 80186f4:	4628      	mov	r0, r5
 80186f6:	47b0      	blx	r6
 80186f8:	1c41      	adds	r1, r0, #1
 80186fa:	d1c7      	bne.n	801868c <__sflush_r+0x34>
 80186fc:	682b      	ldr	r3, [r5, #0]
 80186fe:	2b00      	cmp	r3, #0
 8018700:	d0c4      	beq.n	801868c <__sflush_r+0x34>
 8018702:	2b1d      	cmp	r3, #29
 8018704:	d001      	beq.n	801870a <__sflush_r+0xb2>
 8018706:	2b16      	cmp	r3, #22
 8018708:	d101      	bne.n	801870e <__sflush_r+0xb6>
 801870a:	602f      	str	r7, [r5, #0]
 801870c:	e7b1      	b.n	8018672 <__sflush_r+0x1a>
 801870e:	89a3      	ldrh	r3, [r4, #12]
 8018710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018714:	81a3      	strh	r3, [r4, #12]
 8018716:	e7ad      	b.n	8018674 <__sflush_r+0x1c>
 8018718:	690f      	ldr	r7, [r1, #16]
 801871a:	2f00      	cmp	r7, #0
 801871c:	d0a9      	beq.n	8018672 <__sflush_r+0x1a>
 801871e:	0793      	lsls	r3, r2, #30
 8018720:	680e      	ldr	r6, [r1, #0]
 8018722:	bf08      	it	eq
 8018724:	694b      	ldreq	r3, [r1, #20]
 8018726:	600f      	str	r7, [r1, #0]
 8018728:	bf18      	it	ne
 801872a:	2300      	movne	r3, #0
 801872c:	eba6 0807 	sub.w	r8, r6, r7
 8018730:	608b      	str	r3, [r1, #8]
 8018732:	f1b8 0f00 	cmp.w	r8, #0
 8018736:	dd9c      	ble.n	8018672 <__sflush_r+0x1a>
 8018738:	6a21      	ldr	r1, [r4, #32]
 801873a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801873c:	4643      	mov	r3, r8
 801873e:	463a      	mov	r2, r7
 8018740:	4628      	mov	r0, r5
 8018742:	47b0      	blx	r6
 8018744:	2800      	cmp	r0, #0
 8018746:	dc06      	bgt.n	8018756 <__sflush_r+0xfe>
 8018748:	89a3      	ldrh	r3, [r4, #12]
 801874a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801874e:	81a3      	strh	r3, [r4, #12]
 8018750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018754:	e78e      	b.n	8018674 <__sflush_r+0x1c>
 8018756:	4407      	add	r7, r0
 8018758:	eba8 0800 	sub.w	r8, r8, r0
 801875c:	e7e9      	b.n	8018732 <__sflush_r+0xda>
 801875e:	bf00      	nop
 8018760:	20400001 	.word	0x20400001

08018764 <_fflush_r>:
 8018764:	b538      	push	{r3, r4, r5, lr}
 8018766:	690b      	ldr	r3, [r1, #16]
 8018768:	4605      	mov	r5, r0
 801876a:	460c      	mov	r4, r1
 801876c:	b913      	cbnz	r3, 8018774 <_fflush_r+0x10>
 801876e:	2500      	movs	r5, #0
 8018770:	4628      	mov	r0, r5
 8018772:	bd38      	pop	{r3, r4, r5, pc}
 8018774:	b118      	cbz	r0, 801877e <_fflush_r+0x1a>
 8018776:	6983      	ldr	r3, [r0, #24]
 8018778:	b90b      	cbnz	r3, 801877e <_fflush_r+0x1a>
 801877a:	f7ff f9a3 	bl	8017ac4 <__sinit>
 801877e:	4b14      	ldr	r3, [pc, #80]	; (80187d0 <_fflush_r+0x6c>)
 8018780:	429c      	cmp	r4, r3
 8018782:	d11b      	bne.n	80187bc <_fflush_r+0x58>
 8018784:	686c      	ldr	r4, [r5, #4]
 8018786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801878a:	2b00      	cmp	r3, #0
 801878c:	d0ef      	beq.n	801876e <_fflush_r+0xa>
 801878e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018790:	07d0      	lsls	r0, r2, #31
 8018792:	d404      	bmi.n	801879e <_fflush_r+0x3a>
 8018794:	0599      	lsls	r1, r3, #22
 8018796:	d402      	bmi.n	801879e <_fflush_r+0x3a>
 8018798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801879a:	f7ff fa56 	bl	8017c4a <__retarget_lock_acquire_recursive>
 801879e:	4628      	mov	r0, r5
 80187a0:	4621      	mov	r1, r4
 80187a2:	f7ff ff59 	bl	8018658 <__sflush_r>
 80187a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80187a8:	07da      	lsls	r2, r3, #31
 80187aa:	4605      	mov	r5, r0
 80187ac:	d4e0      	bmi.n	8018770 <_fflush_r+0xc>
 80187ae:	89a3      	ldrh	r3, [r4, #12]
 80187b0:	059b      	lsls	r3, r3, #22
 80187b2:	d4dd      	bmi.n	8018770 <_fflush_r+0xc>
 80187b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80187b6:	f7ff fa49 	bl	8017c4c <__retarget_lock_release_recursive>
 80187ba:	e7d9      	b.n	8018770 <_fflush_r+0xc>
 80187bc:	4b05      	ldr	r3, [pc, #20]	; (80187d4 <_fflush_r+0x70>)
 80187be:	429c      	cmp	r4, r3
 80187c0:	d101      	bne.n	80187c6 <_fflush_r+0x62>
 80187c2:	68ac      	ldr	r4, [r5, #8]
 80187c4:	e7df      	b.n	8018786 <_fflush_r+0x22>
 80187c6:	4b04      	ldr	r3, [pc, #16]	; (80187d8 <_fflush_r+0x74>)
 80187c8:	429c      	cmp	r4, r3
 80187ca:	bf08      	it	eq
 80187cc:	68ec      	ldreq	r4, [r5, #12]
 80187ce:	e7da      	b.n	8018786 <_fflush_r+0x22>
 80187d0:	0801ea30 	.word	0x0801ea30
 80187d4:	0801ea50 	.word	0x0801ea50
 80187d8:	0801ea10 	.word	0x0801ea10

080187dc <fiprintf>:
 80187dc:	b40e      	push	{r1, r2, r3}
 80187de:	b503      	push	{r0, r1, lr}
 80187e0:	4601      	mov	r1, r0
 80187e2:	ab03      	add	r3, sp, #12
 80187e4:	4805      	ldr	r0, [pc, #20]	; (80187fc <fiprintf+0x20>)
 80187e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80187ea:	6800      	ldr	r0, [r0, #0]
 80187ec:	9301      	str	r3, [sp, #4]
 80187ee:	f000 fc07 	bl	8019000 <_vfiprintf_r>
 80187f2:	b002      	add	sp, #8
 80187f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80187f8:	b003      	add	sp, #12
 80187fa:	4770      	bx	lr
 80187fc:	20000730 	.word	0x20000730

08018800 <_lseek_r>:
 8018800:	b538      	push	{r3, r4, r5, lr}
 8018802:	4d07      	ldr	r5, [pc, #28]	; (8018820 <_lseek_r+0x20>)
 8018804:	4604      	mov	r4, r0
 8018806:	4608      	mov	r0, r1
 8018808:	4611      	mov	r1, r2
 801880a:	2200      	movs	r2, #0
 801880c:	602a      	str	r2, [r5, #0]
 801880e:	461a      	mov	r2, r3
 8018810:	f7e9 fb84 	bl	8001f1c <_lseek>
 8018814:	1c43      	adds	r3, r0, #1
 8018816:	d102      	bne.n	801881e <_lseek_r+0x1e>
 8018818:	682b      	ldr	r3, [r5, #0]
 801881a:	b103      	cbz	r3, 801881e <_lseek_r+0x1e>
 801881c:	6023      	str	r3, [r4, #0]
 801881e:	bd38      	pop	{r3, r4, r5, pc}
 8018820:	20018bc0 	.word	0x20018bc0

08018824 <__swhatbuf_r>:
 8018824:	b570      	push	{r4, r5, r6, lr}
 8018826:	460e      	mov	r6, r1
 8018828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801882c:	2900      	cmp	r1, #0
 801882e:	b096      	sub	sp, #88	; 0x58
 8018830:	4614      	mov	r4, r2
 8018832:	461d      	mov	r5, r3
 8018834:	da07      	bge.n	8018846 <__swhatbuf_r+0x22>
 8018836:	2300      	movs	r3, #0
 8018838:	602b      	str	r3, [r5, #0]
 801883a:	89b3      	ldrh	r3, [r6, #12]
 801883c:	061a      	lsls	r2, r3, #24
 801883e:	d410      	bmi.n	8018862 <__swhatbuf_r+0x3e>
 8018840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018844:	e00e      	b.n	8018864 <__swhatbuf_r+0x40>
 8018846:	466a      	mov	r2, sp
 8018848:	f001 f8f6 	bl	8019a38 <_fstat_r>
 801884c:	2800      	cmp	r0, #0
 801884e:	dbf2      	blt.n	8018836 <__swhatbuf_r+0x12>
 8018850:	9a01      	ldr	r2, [sp, #4]
 8018852:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018856:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801885a:	425a      	negs	r2, r3
 801885c:	415a      	adcs	r2, r3
 801885e:	602a      	str	r2, [r5, #0]
 8018860:	e7ee      	b.n	8018840 <__swhatbuf_r+0x1c>
 8018862:	2340      	movs	r3, #64	; 0x40
 8018864:	2000      	movs	r0, #0
 8018866:	6023      	str	r3, [r4, #0]
 8018868:	b016      	add	sp, #88	; 0x58
 801886a:	bd70      	pop	{r4, r5, r6, pc}

0801886c <__smakebuf_r>:
 801886c:	898b      	ldrh	r3, [r1, #12]
 801886e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018870:	079d      	lsls	r5, r3, #30
 8018872:	4606      	mov	r6, r0
 8018874:	460c      	mov	r4, r1
 8018876:	d507      	bpl.n	8018888 <__smakebuf_r+0x1c>
 8018878:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801887c:	6023      	str	r3, [r4, #0]
 801887e:	6123      	str	r3, [r4, #16]
 8018880:	2301      	movs	r3, #1
 8018882:	6163      	str	r3, [r4, #20]
 8018884:	b002      	add	sp, #8
 8018886:	bd70      	pop	{r4, r5, r6, pc}
 8018888:	ab01      	add	r3, sp, #4
 801888a:	466a      	mov	r2, sp
 801888c:	f7ff ffca 	bl	8018824 <__swhatbuf_r>
 8018890:	9900      	ldr	r1, [sp, #0]
 8018892:	4605      	mov	r5, r0
 8018894:	4630      	mov	r0, r6
 8018896:	f7ff fa79 	bl	8017d8c <_malloc_r>
 801889a:	b948      	cbnz	r0, 80188b0 <__smakebuf_r+0x44>
 801889c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80188a0:	059a      	lsls	r2, r3, #22
 80188a2:	d4ef      	bmi.n	8018884 <__smakebuf_r+0x18>
 80188a4:	f023 0303 	bic.w	r3, r3, #3
 80188a8:	f043 0302 	orr.w	r3, r3, #2
 80188ac:	81a3      	strh	r3, [r4, #12]
 80188ae:	e7e3      	b.n	8018878 <__smakebuf_r+0xc>
 80188b0:	4b0d      	ldr	r3, [pc, #52]	; (80188e8 <__smakebuf_r+0x7c>)
 80188b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80188b4:	89a3      	ldrh	r3, [r4, #12]
 80188b6:	6020      	str	r0, [r4, #0]
 80188b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80188bc:	81a3      	strh	r3, [r4, #12]
 80188be:	9b00      	ldr	r3, [sp, #0]
 80188c0:	6163      	str	r3, [r4, #20]
 80188c2:	9b01      	ldr	r3, [sp, #4]
 80188c4:	6120      	str	r0, [r4, #16]
 80188c6:	b15b      	cbz	r3, 80188e0 <__smakebuf_r+0x74>
 80188c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80188cc:	4630      	mov	r0, r6
 80188ce:	f001 f8c5 	bl	8019a5c <_isatty_r>
 80188d2:	b128      	cbz	r0, 80188e0 <__smakebuf_r+0x74>
 80188d4:	89a3      	ldrh	r3, [r4, #12]
 80188d6:	f023 0303 	bic.w	r3, r3, #3
 80188da:	f043 0301 	orr.w	r3, r3, #1
 80188de:	81a3      	strh	r3, [r4, #12]
 80188e0:	89a0      	ldrh	r0, [r4, #12]
 80188e2:	4305      	orrs	r5, r0
 80188e4:	81a5      	strh	r5, [r4, #12]
 80188e6:	e7cd      	b.n	8018884 <__smakebuf_r+0x18>
 80188e8:	08017a5d 	.word	0x08017a5d

080188ec <__malloc_lock>:
 80188ec:	4801      	ldr	r0, [pc, #4]	; (80188f4 <__malloc_lock+0x8>)
 80188ee:	f7ff b9ac 	b.w	8017c4a <__retarget_lock_acquire_recursive>
 80188f2:	bf00      	nop
 80188f4:	20018bcc 	.word	0x20018bcc

080188f8 <__malloc_unlock>:
 80188f8:	4801      	ldr	r0, [pc, #4]	; (8018900 <__malloc_unlock+0x8>)
 80188fa:	f7ff b9a7 	b.w	8017c4c <__retarget_lock_release_recursive>
 80188fe:	bf00      	nop
 8018900:	20018bcc 	.word	0x20018bcc

08018904 <_realloc_r>:
 8018904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018906:	4607      	mov	r7, r0
 8018908:	4614      	mov	r4, r2
 801890a:	460e      	mov	r6, r1
 801890c:	b921      	cbnz	r1, 8018918 <_realloc_r+0x14>
 801890e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018912:	4611      	mov	r1, r2
 8018914:	f7ff ba3a 	b.w	8017d8c <_malloc_r>
 8018918:	b922      	cbnz	r2, 8018924 <_realloc_r+0x20>
 801891a:	f7ff f9e7 	bl	8017cec <_free_r>
 801891e:	4625      	mov	r5, r4
 8018920:	4628      	mov	r0, r5
 8018922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018924:	f001 f8aa 	bl	8019a7c <_malloc_usable_size_r>
 8018928:	42a0      	cmp	r0, r4
 801892a:	d20f      	bcs.n	801894c <_realloc_r+0x48>
 801892c:	4621      	mov	r1, r4
 801892e:	4638      	mov	r0, r7
 8018930:	f7ff fa2c 	bl	8017d8c <_malloc_r>
 8018934:	4605      	mov	r5, r0
 8018936:	2800      	cmp	r0, #0
 8018938:	d0f2      	beq.n	8018920 <_realloc_r+0x1c>
 801893a:	4631      	mov	r1, r6
 801893c:	4622      	mov	r2, r4
 801893e:	f7ff f9a5 	bl	8017c8c <memcpy>
 8018942:	4631      	mov	r1, r6
 8018944:	4638      	mov	r0, r7
 8018946:	f7ff f9d1 	bl	8017cec <_free_r>
 801894a:	e7e9      	b.n	8018920 <_realloc_r+0x1c>
 801894c:	4635      	mov	r5, r6
 801894e:	e7e7      	b.n	8018920 <_realloc_r+0x1c>

08018950 <__ssputs_r>:
 8018950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018954:	688e      	ldr	r6, [r1, #8]
 8018956:	429e      	cmp	r6, r3
 8018958:	4682      	mov	sl, r0
 801895a:	460c      	mov	r4, r1
 801895c:	4690      	mov	r8, r2
 801895e:	461f      	mov	r7, r3
 8018960:	d838      	bhi.n	80189d4 <__ssputs_r+0x84>
 8018962:	898a      	ldrh	r2, [r1, #12]
 8018964:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018968:	d032      	beq.n	80189d0 <__ssputs_r+0x80>
 801896a:	6825      	ldr	r5, [r4, #0]
 801896c:	6909      	ldr	r1, [r1, #16]
 801896e:	eba5 0901 	sub.w	r9, r5, r1
 8018972:	6965      	ldr	r5, [r4, #20]
 8018974:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018978:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801897c:	3301      	adds	r3, #1
 801897e:	444b      	add	r3, r9
 8018980:	106d      	asrs	r5, r5, #1
 8018982:	429d      	cmp	r5, r3
 8018984:	bf38      	it	cc
 8018986:	461d      	movcc	r5, r3
 8018988:	0553      	lsls	r3, r2, #21
 801898a:	d531      	bpl.n	80189f0 <__ssputs_r+0xa0>
 801898c:	4629      	mov	r1, r5
 801898e:	f7ff f9fd 	bl	8017d8c <_malloc_r>
 8018992:	4606      	mov	r6, r0
 8018994:	b950      	cbnz	r0, 80189ac <__ssputs_r+0x5c>
 8018996:	230c      	movs	r3, #12
 8018998:	f8ca 3000 	str.w	r3, [sl]
 801899c:	89a3      	ldrh	r3, [r4, #12]
 801899e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80189a2:	81a3      	strh	r3, [r4, #12]
 80189a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80189a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80189ac:	6921      	ldr	r1, [r4, #16]
 80189ae:	464a      	mov	r2, r9
 80189b0:	f7ff f96c 	bl	8017c8c <memcpy>
 80189b4:	89a3      	ldrh	r3, [r4, #12]
 80189b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80189ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80189be:	81a3      	strh	r3, [r4, #12]
 80189c0:	6126      	str	r6, [r4, #16]
 80189c2:	6165      	str	r5, [r4, #20]
 80189c4:	444e      	add	r6, r9
 80189c6:	eba5 0509 	sub.w	r5, r5, r9
 80189ca:	6026      	str	r6, [r4, #0]
 80189cc:	60a5      	str	r5, [r4, #8]
 80189ce:	463e      	mov	r6, r7
 80189d0:	42be      	cmp	r6, r7
 80189d2:	d900      	bls.n	80189d6 <__ssputs_r+0x86>
 80189d4:	463e      	mov	r6, r7
 80189d6:	4632      	mov	r2, r6
 80189d8:	6820      	ldr	r0, [r4, #0]
 80189da:	4641      	mov	r1, r8
 80189dc:	f7ff f964 	bl	8017ca8 <memmove>
 80189e0:	68a3      	ldr	r3, [r4, #8]
 80189e2:	6822      	ldr	r2, [r4, #0]
 80189e4:	1b9b      	subs	r3, r3, r6
 80189e6:	4432      	add	r2, r6
 80189e8:	60a3      	str	r3, [r4, #8]
 80189ea:	6022      	str	r2, [r4, #0]
 80189ec:	2000      	movs	r0, #0
 80189ee:	e7db      	b.n	80189a8 <__ssputs_r+0x58>
 80189f0:	462a      	mov	r2, r5
 80189f2:	f7ff ff87 	bl	8018904 <_realloc_r>
 80189f6:	4606      	mov	r6, r0
 80189f8:	2800      	cmp	r0, #0
 80189fa:	d1e1      	bne.n	80189c0 <__ssputs_r+0x70>
 80189fc:	6921      	ldr	r1, [r4, #16]
 80189fe:	4650      	mov	r0, sl
 8018a00:	f7ff f974 	bl	8017cec <_free_r>
 8018a04:	e7c7      	b.n	8018996 <__ssputs_r+0x46>
	...

08018a08 <_svfiprintf_r>:
 8018a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a0c:	4698      	mov	r8, r3
 8018a0e:	898b      	ldrh	r3, [r1, #12]
 8018a10:	061b      	lsls	r3, r3, #24
 8018a12:	b09d      	sub	sp, #116	; 0x74
 8018a14:	4607      	mov	r7, r0
 8018a16:	460d      	mov	r5, r1
 8018a18:	4614      	mov	r4, r2
 8018a1a:	d50e      	bpl.n	8018a3a <_svfiprintf_r+0x32>
 8018a1c:	690b      	ldr	r3, [r1, #16]
 8018a1e:	b963      	cbnz	r3, 8018a3a <_svfiprintf_r+0x32>
 8018a20:	2140      	movs	r1, #64	; 0x40
 8018a22:	f7ff f9b3 	bl	8017d8c <_malloc_r>
 8018a26:	6028      	str	r0, [r5, #0]
 8018a28:	6128      	str	r0, [r5, #16]
 8018a2a:	b920      	cbnz	r0, 8018a36 <_svfiprintf_r+0x2e>
 8018a2c:	230c      	movs	r3, #12
 8018a2e:	603b      	str	r3, [r7, #0]
 8018a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018a34:	e0d1      	b.n	8018bda <_svfiprintf_r+0x1d2>
 8018a36:	2340      	movs	r3, #64	; 0x40
 8018a38:	616b      	str	r3, [r5, #20]
 8018a3a:	2300      	movs	r3, #0
 8018a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8018a3e:	2320      	movs	r3, #32
 8018a40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018a44:	f8cd 800c 	str.w	r8, [sp, #12]
 8018a48:	2330      	movs	r3, #48	; 0x30
 8018a4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018bf4 <_svfiprintf_r+0x1ec>
 8018a4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018a52:	f04f 0901 	mov.w	r9, #1
 8018a56:	4623      	mov	r3, r4
 8018a58:	469a      	mov	sl, r3
 8018a5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018a5e:	b10a      	cbz	r2, 8018a64 <_svfiprintf_r+0x5c>
 8018a60:	2a25      	cmp	r2, #37	; 0x25
 8018a62:	d1f9      	bne.n	8018a58 <_svfiprintf_r+0x50>
 8018a64:	ebba 0b04 	subs.w	fp, sl, r4
 8018a68:	d00b      	beq.n	8018a82 <_svfiprintf_r+0x7a>
 8018a6a:	465b      	mov	r3, fp
 8018a6c:	4622      	mov	r2, r4
 8018a6e:	4629      	mov	r1, r5
 8018a70:	4638      	mov	r0, r7
 8018a72:	f7ff ff6d 	bl	8018950 <__ssputs_r>
 8018a76:	3001      	adds	r0, #1
 8018a78:	f000 80aa 	beq.w	8018bd0 <_svfiprintf_r+0x1c8>
 8018a7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018a7e:	445a      	add	r2, fp
 8018a80:	9209      	str	r2, [sp, #36]	; 0x24
 8018a82:	f89a 3000 	ldrb.w	r3, [sl]
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	f000 80a2 	beq.w	8018bd0 <_svfiprintf_r+0x1c8>
 8018a8c:	2300      	movs	r3, #0
 8018a8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018a92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018a96:	f10a 0a01 	add.w	sl, sl, #1
 8018a9a:	9304      	str	r3, [sp, #16]
 8018a9c:	9307      	str	r3, [sp, #28]
 8018a9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018aa2:	931a      	str	r3, [sp, #104]	; 0x68
 8018aa4:	4654      	mov	r4, sl
 8018aa6:	2205      	movs	r2, #5
 8018aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018aac:	4851      	ldr	r0, [pc, #324]	; (8018bf4 <_svfiprintf_r+0x1ec>)
 8018aae:	f7e7 fbdf 	bl	8000270 <memchr>
 8018ab2:	9a04      	ldr	r2, [sp, #16]
 8018ab4:	b9d8      	cbnz	r0, 8018aee <_svfiprintf_r+0xe6>
 8018ab6:	06d0      	lsls	r0, r2, #27
 8018ab8:	bf44      	itt	mi
 8018aba:	2320      	movmi	r3, #32
 8018abc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018ac0:	0711      	lsls	r1, r2, #28
 8018ac2:	bf44      	itt	mi
 8018ac4:	232b      	movmi	r3, #43	; 0x2b
 8018ac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018aca:	f89a 3000 	ldrb.w	r3, [sl]
 8018ace:	2b2a      	cmp	r3, #42	; 0x2a
 8018ad0:	d015      	beq.n	8018afe <_svfiprintf_r+0xf6>
 8018ad2:	9a07      	ldr	r2, [sp, #28]
 8018ad4:	4654      	mov	r4, sl
 8018ad6:	2000      	movs	r0, #0
 8018ad8:	f04f 0c0a 	mov.w	ip, #10
 8018adc:	4621      	mov	r1, r4
 8018ade:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018ae2:	3b30      	subs	r3, #48	; 0x30
 8018ae4:	2b09      	cmp	r3, #9
 8018ae6:	d94e      	bls.n	8018b86 <_svfiprintf_r+0x17e>
 8018ae8:	b1b0      	cbz	r0, 8018b18 <_svfiprintf_r+0x110>
 8018aea:	9207      	str	r2, [sp, #28]
 8018aec:	e014      	b.n	8018b18 <_svfiprintf_r+0x110>
 8018aee:	eba0 0308 	sub.w	r3, r0, r8
 8018af2:	fa09 f303 	lsl.w	r3, r9, r3
 8018af6:	4313      	orrs	r3, r2
 8018af8:	9304      	str	r3, [sp, #16]
 8018afa:	46a2      	mov	sl, r4
 8018afc:	e7d2      	b.n	8018aa4 <_svfiprintf_r+0x9c>
 8018afe:	9b03      	ldr	r3, [sp, #12]
 8018b00:	1d19      	adds	r1, r3, #4
 8018b02:	681b      	ldr	r3, [r3, #0]
 8018b04:	9103      	str	r1, [sp, #12]
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	bfbb      	ittet	lt
 8018b0a:	425b      	neglt	r3, r3
 8018b0c:	f042 0202 	orrlt.w	r2, r2, #2
 8018b10:	9307      	strge	r3, [sp, #28]
 8018b12:	9307      	strlt	r3, [sp, #28]
 8018b14:	bfb8      	it	lt
 8018b16:	9204      	strlt	r2, [sp, #16]
 8018b18:	7823      	ldrb	r3, [r4, #0]
 8018b1a:	2b2e      	cmp	r3, #46	; 0x2e
 8018b1c:	d10c      	bne.n	8018b38 <_svfiprintf_r+0x130>
 8018b1e:	7863      	ldrb	r3, [r4, #1]
 8018b20:	2b2a      	cmp	r3, #42	; 0x2a
 8018b22:	d135      	bne.n	8018b90 <_svfiprintf_r+0x188>
 8018b24:	9b03      	ldr	r3, [sp, #12]
 8018b26:	1d1a      	adds	r2, r3, #4
 8018b28:	681b      	ldr	r3, [r3, #0]
 8018b2a:	9203      	str	r2, [sp, #12]
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	bfb8      	it	lt
 8018b30:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018b34:	3402      	adds	r4, #2
 8018b36:	9305      	str	r3, [sp, #20]
 8018b38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018c04 <_svfiprintf_r+0x1fc>
 8018b3c:	7821      	ldrb	r1, [r4, #0]
 8018b3e:	2203      	movs	r2, #3
 8018b40:	4650      	mov	r0, sl
 8018b42:	f7e7 fb95 	bl	8000270 <memchr>
 8018b46:	b140      	cbz	r0, 8018b5a <_svfiprintf_r+0x152>
 8018b48:	2340      	movs	r3, #64	; 0x40
 8018b4a:	eba0 000a 	sub.w	r0, r0, sl
 8018b4e:	fa03 f000 	lsl.w	r0, r3, r0
 8018b52:	9b04      	ldr	r3, [sp, #16]
 8018b54:	4303      	orrs	r3, r0
 8018b56:	3401      	adds	r4, #1
 8018b58:	9304      	str	r3, [sp, #16]
 8018b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b5e:	4826      	ldr	r0, [pc, #152]	; (8018bf8 <_svfiprintf_r+0x1f0>)
 8018b60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018b64:	2206      	movs	r2, #6
 8018b66:	f7e7 fb83 	bl	8000270 <memchr>
 8018b6a:	2800      	cmp	r0, #0
 8018b6c:	d038      	beq.n	8018be0 <_svfiprintf_r+0x1d8>
 8018b6e:	4b23      	ldr	r3, [pc, #140]	; (8018bfc <_svfiprintf_r+0x1f4>)
 8018b70:	bb1b      	cbnz	r3, 8018bba <_svfiprintf_r+0x1b2>
 8018b72:	9b03      	ldr	r3, [sp, #12]
 8018b74:	3307      	adds	r3, #7
 8018b76:	f023 0307 	bic.w	r3, r3, #7
 8018b7a:	3308      	adds	r3, #8
 8018b7c:	9303      	str	r3, [sp, #12]
 8018b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b80:	4433      	add	r3, r6
 8018b82:	9309      	str	r3, [sp, #36]	; 0x24
 8018b84:	e767      	b.n	8018a56 <_svfiprintf_r+0x4e>
 8018b86:	fb0c 3202 	mla	r2, ip, r2, r3
 8018b8a:	460c      	mov	r4, r1
 8018b8c:	2001      	movs	r0, #1
 8018b8e:	e7a5      	b.n	8018adc <_svfiprintf_r+0xd4>
 8018b90:	2300      	movs	r3, #0
 8018b92:	3401      	adds	r4, #1
 8018b94:	9305      	str	r3, [sp, #20]
 8018b96:	4619      	mov	r1, r3
 8018b98:	f04f 0c0a 	mov.w	ip, #10
 8018b9c:	4620      	mov	r0, r4
 8018b9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018ba2:	3a30      	subs	r2, #48	; 0x30
 8018ba4:	2a09      	cmp	r2, #9
 8018ba6:	d903      	bls.n	8018bb0 <_svfiprintf_r+0x1a8>
 8018ba8:	2b00      	cmp	r3, #0
 8018baa:	d0c5      	beq.n	8018b38 <_svfiprintf_r+0x130>
 8018bac:	9105      	str	r1, [sp, #20]
 8018bae:	e7c3      	b.n	8018b38 <_svfiprintf_r+0x130>
 8018bb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8018bb4:	4604      	mov	r4, r0
 8018bb6:	2301      	movs	r3, #1
 8018bb8:	e7f0      	b.n	8018b9c <_svfiprintf_r+0x194>
 8018bba:	ab03      	add	r3, sp, #12
 8018bbc:	9300      	str	r3, [sp, #0]
 8018bbe:	462a      	mov	r2, r5
 8018bc0:	4b0f      	ldr	r3, [pc, #60]	; (8018c00 <_svfiprintf_r+0x1f8>)
 8018bc2:	a904      	add	r1, sp, #16
 8018bc4:	4638      	mov	r0, r7
 8018bc6:	f3af 8000 	nop.w
 8018bca:	1c42      	adds	r2, r0, #1
 8018bcc:	4606      	mov	r6, r0
 8018bce:	d1d6      	bne.n	8018b7e <_svfiprintf_r+0x176>
 8018bd0:	89ab      	ldrh	r3, [r5, #12]
 8018bd2:	065b      	lsls	r3, r3, #25
 8018bd4:	f53f af2c 	bmi.w	8018a30 <_svfiprintf_r+0x28>
 8018bd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018bda:	b01d      	add	sp, #116	; 0x74
 8018bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018be0:	ab03      	add	r3, sp, #12
 8018be2:	9300      	str	r3, [sp, #0]
 8018be4:	462a      	mov	r2, r5
 8018be6:	4b06      	ldr	r3, [pc, #24]	; (8018c00 <_svfiprintf_r+0x1f8>)
 8018be8:	a904      	add	r1, sp, #16
 8018bea:	4638      	mov	r0, r7
 8018bec:	f000 fba6 	bl	801933c <_printf_i>
 8018bf0:	e7eb      	b.n	8018bca <_svfiprintf_r+0x1c2>
 8018bf2:	bf00      	nop
 8018bf4:	0801eb26 	.word	0x0801eb26
 8018bf8:	0801eb30 	.word	0x0801eb30
 8018bfc:	00000000 	.word	0x00000000
 8018c00:	08018951 	.word	0x08018951
 8018c04:	0801eb2c 	.word	0x0801eb2c

08018c08 <_sungetc_r>:
 8018c08:	b538      	push	{r3, r4, r5, lr}
 8018c0a:	1c4b      	adds	r3, r1, #1
 8018c0c:	4614      	mov	r4, r2
 8018c0e:	d103      	bne.n	8018c18 <_sungetc_r+0x10>
 8018c10:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8018c14:	4628      	mov	r0, r5
 8018c16:	bd38      	pop	{r3, r4, r5, pc}
 8018c18:	8993      	ldrh	r3, [r2, #12]
 8018c1a:	f023 0320 	bic.w	r3, r3, #32
 8018c1e:	8193      	strh	r3, [r2, #12]
 8018c20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018c22:	6852      	ldr	r2, [r2, #4]
 8018c24:	b2cd      	uxtb	r5, r1
 8018c26:	b18b      	cbz	r3, 8018c4c <_sungetc_r+0x44>
 8018c28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018c2a:	4293      	cmp	r3, r2
 8018c2c:	dd08      	ble.n	8018c40 <_sungetc_r+0x38>
 8018c2e:	6823      	ldr	r3, [r4, #0]
 8018c30:	1e5a      	subs	r2, r3, #1
 8018c32:	6022      	str	r2, [r4, #0]
 8018c34:	f803 5c01 	strb.w	r5, [r3, #-1]
 8018c38:	6863      	ldr	r3, [r4, #4]
 8018c3a:	3301      	adds	r3, #1
 8018c3c:	6063      	str	r3, [r4, #4]
 8018c3e:	e7e9      	b.n	8018c14 <_sungetc_r+0xc>
 8018c40:	4621      	mov	r1, r4
 8018c42:	f000 feb7 	bl	80199b4 <__submore>
 8018c46:	2800      	cmp	r0, #0
 8018c48:	d0f1      	beq.n	8018c2e <_sungetc_r+0x26>
 8018c4a:	e7e1      	b.n	8018c10 <_sungetc_r+0x8>
 8018c4c:	6921      	ldr	r1, [r4, #16]
 8018c4e:	6823      	ldr	r3, [r4, #0]
 8018c50:	b151      	cbz	r1, 8018c68 <_sungetc_r+0x60>
 8018c52:	4299      	cmp	r1, r3
 8018c54:	d208      	bcs.n	8018c68 <_sungetc_r+0x60>
 8018c56:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8018c5a:	42a9      	cmp	r1, r5
 8018c5c:	d104      	bne.n	8018c68 <_sungetc_r+0x60>
 8018c5e:	3b01      	subs	r3, #1
 8018c60:	3201      	adds	r2, #1
 8018c62:	6023      	str	r3, [r4, #0]
 8018c64:	6062      	str	r2, [r4, #4]
 8018c66:	e7d5      	b.n	8018c14 <_sungetc_r+0xc>
 8018c68:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8018c6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018c70:	6363      	str	r3, [r4, #52]	; 0x34
 8018c72:	2303      	movs	r3, #3
 8018c74:	63a3      	str	r3, [r4, #56]	; 0x38
 8018c76:	4623      	mov	r3, r4
 8018c78:	f803 5f46 	strb.w	r5, [r3, #70]!
 8018c7c:	6023      	str	r3, [r4, #0]
 8018c7e:	2301      	movs	r3, #1
 8018c80:	e7dc      	b.n	8018c3c <_sungetc_r+0x34>

08018c82 <__ssrefill_r>:
 8018c82:	b510      	push	{r4, lr}
 8018c84:	460c      	mov	r4, r1
 8018c86:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018c88:	b169      	cbz	r1, 8018ca6 <__ssrefill_r+0x24>
 8018c8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018c8e:	4299      	cmp	r1, r3
 8018c90:	d001      	beq.n	8018c96 <__ssrefill_r+0x14>
 8018c92:	f7ff f82b 	bl	8017cec <_free_r>
 8018c96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018c98:	6063      	str	r3, [r4, #4]
 8018c9a:	2000      	movs	r0, #0
 8018c9c:	6360      	str	r0, [r4, #52]	; 0x34
 8018c9e:	b113      	cbz	r3, 8018ca6 <__ssrefill_r+0x24>
 8018ca0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018ca2:	6023      	str	r3, [r4, #0]
 8018ca4:	bd10      	pop	{r4, pc}
 8018ca6:	6923      	ldr	r3, [r4, #16]
 8018ca8:	6023      	str	r3, [r4, #0]
 8018caa:	2300      	movs	r3, #0
 8018cac:	6063      	str	r3, [r4, #4]
 8018cae:	89a3      	ldrh	r3, [r4, #12]
 8018cb0:	f043 0320 	orr.w	r3, r3, #32
 8018cb4:	81a3      	strh	r3, [r4, #12]
 8018cb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018cba:	e7f3      	b.n	8018ca4 <__ssrefill_r+0x22>

08018cbc <__ssvfiscanf_r>:
 8018cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cc0:	460c      	mov	r4, r1
 8018cc2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8018cc6:	2100      	movs	r1, #0
 8018cc8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8018ccc:	49b2      	ldr	r1, [pc, #712]	; (8018f98 <__ssvfiscanf_r+0x2dc>)
 8018cce:	91a0      	str	r1, [sp, #640]	; 0x280
 8018cd0:	f10d 0804 	add.w	r8, sp, #4
 8018cd4:	49b1      	ldr	r1, [pc, #708]	; (8018f9c <__ssvfiscanf_r+0x2e0>)
 8018cd6:	4fb2      	ldr	r7, [pc, #712]	; (8018fa0 <__ssvfiscanf_r+0x2e4>)
 8018cd8:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8018fa4 <__ssvfiscanf_r+0x2e8>
 8018cdc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8018ce0:	4606      	mov	r6, r0
 8018ce2:	91a1      	str	r1, [sp, #644]	; 0x284
 8018ce4:	9300      	str	r3, [sp, #0]
 8018ce6:	f892 a000 	ldrb.w	sl, [r2]
 8018cea:	f1ba 0f00 	cmp.w	sl, #0
 8018cee:	f000 8151 	beq.w	8018f94 <__ssvfiscanf_r+0x2d8>
 8018cf2:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8018cf6:	f013 0308 	ands.w	r3, r3, #8
 8018cfa:	f102 0501 	add.w	r5, r2, #1
 8018cfe:	d019      	beq.n	8018d34 <__ssvfiscanf_r+0x78>
 8018d00:	6863      	ldr	r3, [r4, #4]
 8018d02:	2b00      	cmp	r3, #0
 8018d04:	dd0f      	ble.n	8018d26 <__ssvfiscanf_r+0x6a>
 8018d06:	6823      	ldr	r3, [r4, #0]
 8018d08:	781a      	ldrb	r2, [r3, #0]
 8018d0a:	5cba      	ldrb	r2, [r7, r2]
 8018d0c:	0712      	lsls	r2, r2, #28
 8018d0e:	d401      	bmi.n	8018d14 <__ssvfiscanf_r+0x58>
 8018d10:	462a      	mov	r2, r5
 8018d12:	e7e8      	b.n	8018ce6 <__ssvfiscanf_r+0x2a>
 8018d14:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018d16:	3201      	adds	r2, #1
 8018d18:	9245      	str	r2, [sp, #276]	; 0x114
 8018d1a:	6862      	ldr	r2, [r4, #4]
 8018d1c:	3301      	adds	r3, #1
 8018d1e:	3a01      	subs	r2, #1
 8018d20:	6062      	str	r2, [r4, #4]
 8018d22:	6023      	str	r3, [r4, #0]
 8018d24:	e7ec      	b.n	8018d00 <__ssvfiscanf_r+0x44>
 8018d26:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018d28:	4621      	mov	r1, r4
 8018d2a:	4630      	mov	r0, r6
 8018d2c:	4798      	blx	r3
 8018d2e:	2800      	cmp	r0, #0
 8018d30:	d0e9      	beq.n	8018d06 <__ssvfiscanf_r+0x4a>
 8018d32:	e7ed      	b.n	8018d10 <__ssvfiscanf_r+0x54>
 8018d34:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8018d38:	f040 8083 	bne.w	8018e42 <__ssvfiscanf_r+0x186>
 8018d3c:	9341      	str	r3, [sp, #260]	; 0x104
 8018d3e:	9343      	str	r3, [sp, #268]	; 0x10c
 8018d40:	7853      	ldrb	r3, [r2, #1]
 8018d42:	2b2a      	cmp	r3, #42	; 0x2a
 8018d44:	bf02      	ittt	eq
 8018d46:	2310      	moveq	r3, #16
 8018d48:	1c95      	addeq	r5, r2, #2
 8018d4a:	9341      	streq	r3, [sp, #260]	; 0x104
 8018d4c:	220a      	movs	r2, #10
 8018d4e:	46ab      	mov	fp, r5
 8018d50:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8018d54:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8018d58:	2b09      	cmp	r3, #9
 8018d5a:	d91d      	bls.n	8018d98 <__ssvfiscanf_r+0xdc>
 8018d5c:	4891      	ldr	r0, [pc, #580]	; (8018fa4 <__ssvfiscanf_r+0x2e8>)
 8018d5e:	2203      	movs	r2, #3
 8018d60:	f7e7 fa86 	bl	8000270 <memchr>
 8018d64:	b140      	cbz	r0, 8018d78 <__ssvfiscanf_r+0xbc>
 8018d66:	2301      	movs	r3, #1
 8018d68:	eba0 0009 	sub.w	r0, r0, r9
 8018d6c:	fa03 f000 	lsl.w	r0, r3, r0
 8018d70:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018d72:	4318      	orrs	r0, r3
 8018d74:	9041      	str	r0, [sp, #260]	; 0x104
 8018d76:	465d      	mov	r5, fp
 8018d78:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018d7c:	2b78      	cmp	r3, #120	; 0x78
 8018d7e:	d806      	bhi.n	8018d8e <__ssvfiscanf_r+0xd2>
 8018d80:	2b57      	cmp	r3, #87	; 0x57
 8018d82:	d810      	bhi.n	8018da6 <__ssvfiscanf_r+0xea>
 8018d84:	2b25      	cmp	r3, #37	; 0x25
 8018d86:	d05c      	beq.n	8018e42 <__ssvfiscanf_r+0x186>
 8018d88:	d856      	bhi.n	8018e38 <__ssvfiscanf_r+0x17c>
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	d074      	beq.n	8018e78 <__ssvfiscanf_r+0x1bc>
 8018d8e:	2303      	movs	r3, #3
 8018d90:	9347      	str	r3, [sp, #284]	; 0x11c
 8018d92:	230a      	movs	r3, #10
 8018d94:	9342      	str	r3, [sp, #264]	; 0x108
 8018d96:	e081      	b.n	8018e9c <__ssvfiscanf_r+0x1e0>
 8018d98:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018d9a:	fb02 1303 	mla	r3, r2, r3, r1
 8018d9e:	3b30      	subs	r3, #48	; 0x30
 8018da0:	9343      	str	r3, [sp, #268]	; 0x10c
 8018da2:	465d      	mov	r5, fp
 8018da4:	e7d3      	b.n	8018d4e <__ssvfiscanf_r+0x92>
 8018da6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8018daa:	2a20      	cmp	r2, #32
 8018dac:	d8ef      	bhi.n	8018d8e <__ssvfiscanf_r+0xd2>
 8018dae:	a101      	add	r1, pc, #4	; (adr r1, 8018db4 <__ssvfiscanf_r+0xf8>)
 8018db0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8018db4:	08018e87 	.word	0x08018e87
 8018db8:	08018d8f 	.word	0x08018d8f
 8018dbc:	08018d8f 	.word	0x08018d8f
 8018dc0:	08018ee5 	.word	0x08018ee5
 8018dc4:	08018d8f 	.word	0x08018d8f
 8018dc8:	08018d8f 	.word	0x08018d8f
 8018dcc:	08018d8f 	.word	0x08018d8f
 8018dd0:	08018d8f 	.word	0x08018d8f
 8018dd4:	08018d8f 	.word	0x08018d8f
 8018dd8:	08018d8f 	.word	0x08018d8f
 8018ddc:	08018d8f 	.word	0x08018d8f
 8018de0:	08018efb 	.word	0x08018efb
 8018de4:	08018ed1 	.word	0x08018ed1
 8018de8:	08018e3f 	.word	0x08018e3f
 8018dec:	08018e3f 	.word	0x08018e3f
 8018df0:	08018e3f 	.word	0x08018e3f
 8018df4:	08018d8f 	.word	0x08018d8f
 8018df8:	08018ed5 	.word	0x08018ed5
 8018dfc:	08018d8f 	.word	0x08018d8f
 8018e00:	08018d8f 	.word	0x08018d8f
 8018e04:	08018d8f 	.word	0x08018d8f
 8018e08:	08018d8f 	.word	0x08018d8f
 8018e0c:	08018f0b 	.word	0x08018f0b
 8018e10:	08018edd 	.word	0x08018edd
 8018e14:	08018e7f 	.word	0x08018e7f
 8018e18:	08018d8f 	.word	0x08018d8f
 8018e1c:	08018d8f 	.word	0x08018d8f
 8018e20:	08018f07 	.word	0x08018f07
 8018e24:	08018d8f 	.word	0x08018d8f
 8018e28:	08018ed1 	.word	0x08018ed1
 8018e2c:	08018d8f 	.word	0x08018d8f
 8018e30:	08018d8f 	.word	0x08018d8f
 8018e34:	08018e87 	.word	0x08018e87
 8018e38:	3b45      	subs	r3, #69	; 0x45
 8018e3a:	2b02      	cmp	r3, #2
 8018e3c:	d8a7      	bhi.n	8018d8e <__ssvfiscanf_r+0xd2>
 8018e3e:	2305      	movs	r3, #5
 8018e40:	e02b      	b.n	8018e9a <__ssvfiscanf_r+0x1de>
 8018e42:	6863      	ldr	r3, [r4, #4]
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	dd0d      	ble.n	8018e64 <__ssvfiscanf_r+0x1a8>
 8018e48:	6823      	ldr	r3, [r4, #0]
 8018e4a:	781a      	ldrb	r2, [r3, #0]
 8018e4c:	4552      	cmp	r2, sl
 8018e4e:	f040 80a1 	bne.w	8018f94 <__ssvfiscanf_r+0x2d8>
 8018e52:	3301      	adds	r3, #1
 8018e54:	6862      	ldr	r2, [r4, #4]
 8018e56:	6023      	str	r3, [r4, #0]
 8018e58:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8018e5a:	3a01      	subs	r2, #1
 8018e5c:	3301      	adds	r3, #1
 8018e5e:	6062      	str	r2, [r4, #4]
 8018e60:	9345      	str	r3, [sp, #276]	; 0x114
 8018e62:	e755      	b.n	8018d10 <__ssvfiscanf_r+0x54>
 8018e64:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018e66:	4621      	mov	r1, r4
 8018e68:	4630      	mov	r0, r6
 8018e6a:	4798      	blx	r3
 8018e6c:	2800      	cmp	r0, #0
 8018e6e:	d0eb      	beq.n	8018e48 <__ssvfiscanf_r+0x18c>
 8018e70:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018e72:	2800      	cmp	r0, #0
 8018e74:	f040 8084 	bne.w	8018f80 <__ssvfiscanf_r+0x2c4>
 8018e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018e7c:	e086      	b.n	8018f8c <__ssvfiscanf_r+0x2d0>
 8018e7e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018e80:	f042 0220 	orr.w	r2, r2, #32
 8018e84:	9241      	str	r2, [sp, #260]	; 0x104
 8018e86:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018e88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018e8c:	9241      	str	r2, [sp, #260]	; 0x104
 8018e8e:	2210      	movs	r2, #16
 8018e90:	2b6f      	cmp	r3, #111	; 0x6f
 8018e92:	9242      	str	r2, [sp, #264]	; 0x108
 8018e94:	bf34      	ite	cc
 8018e96:	2303      	movcc	r3, #3
 8018e98:	2304      	movcs	r3, #4
 8018e9a:	9347      	str	r3, [sp, #284]	; 0x11c
 8018e9c:	6863      	ldr	r3, [r4, #4]
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	dd41      	ble.n	8018f26 <__ssvfiscanf_r+0x26a>
 8018ea2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018ea4:	0659      	lsls	r1, r3, #25
 8018ea6:	d404      	bmi.n	8018eb2 <__ssvfiscanf_r+0x1f6>
 8018ea8:	6823      	ldr	r3, [r4, #0]
 8018eaa:	781a      	ldrb	r2, [r3, #0]
 8018eac:	5cba      	ldrb	r2, [r7, r2]
 8018eae:	0712      	lsls	r2, r2, #28
 8018eb0:	d440      	bmi.n	8018f34 <__ssvfiscanf_r+0x278>
 8018eb2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8018eb4:	2b02      	cmp	r3, #2
 8018eb6:	dc4f      	bgt.n	8018f58 <__ssvfiscanf_r+0x29c>
 8018eb8:	466b      	mov	r3, sp
 8018eba:	4622      	mov	r2, r4
 8018ebc:	a941      	add	r1, sp, #260	; 0x104
 8018ebe:	4630      	mov	r0, r6
 8018ec0:	f000 fb62 	bl	8019588 <_scanf_chars>
 8018ec4:	2801      	cmp	r0, #1
 8018ec6:	d065      	beq.n	8018f94 <__ssvfiscanf_r+0x2d8>
 8018ec8:	2802      	cmp	r0, #2
 8018eca:	f47f af21 	bne.w	8018d10 <__ssvfiscanf_r+0x54>
 8018ece:	e7cf      	b.n	8018e70 <__ssvfiscanf_r+0x1b4>
 8018ed0:	220a      	movs	r2, #10
 8018ed2:	e7dd      	b.n	8018e90 <__ssvfiscanf_r+0x1d4>
 8018ed4:	2300      	movs	r3, #0
 8018ed6:	9342      	str	r3, [sp, #264]	; 0x108
 8018ed8:	2303      	movs	r3, #3
 8018eda:	e7de      	b.n	8018e9a <__ssvfiscanf_r+0x1de>
 8018edc:	2308      	movs	r3, #8
 8018ede:	9342      	str	r3, [sp, #264]	; 0x108
 8018ee0:	2304      	movs	r3, #4
 8018ee2:	e7da      	b.n	8018e9a <__ssvfiscanf_r+0x1de>
 8018ee4:	4629      	mov	r1, r5
 8018ee6:	4640      	mov	r0, r8
 8018ee8:	f000 fcac 	bl	8019844 <__sccl>
 8018eec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018ef2:	9341      	str	r3, [sp, #260]	; 0x104
 8018ef4:	4605      	mov	r5, r0
 8018ef6:	2301      	movs	r3, #1
 8018ef8:	e7cf      	b.n	8018e9a <__ssvfiscanf_r+0x1de>
 8018efa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018efc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018f00:	9341      	str	r3, [sp, #260]	; 0x104
 8018f02:	2300      	movs	r3, #0
 8018f04:	e7c9      	b.n	8018e9a <__ssvfiscanf_r+0x1de>
 8018f06:	2302      	movs	r3, #2
 8018f08:	e7c7      	b.n	8018e9a <__ssvfiscanf_r+0x1de>
 8018f0a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8018f0c:	06c3      	lsls	r3, r0, #27
 8018f0e:	f53f aeff 	bmi.w	8018d10 <__ssvfiscanf_r+0x54>
 8018f12:	9b00      	ldr	r3, [sp, #0]
 8018f14:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018f16:	1d19      	adds	r1, r3, #4
 8018f18:	9100      	str	r1, [sp, #0]
 8018f1a:	681b      	ldr	r3, [r3, #0]
 8018f1c:	07c0      	lsls	r0, r0, #31
 8018f1e:	bf4c      	ite	mi
 8018f20:	801a      	strhmi	r2, [r3, #0]
 8018f22:	601a      	strpl	r2, [r3, #0]
 8018f24:	e6f4      	b.n	8018d10 <__ssvfiscanf_r+0x54>
 8018f26:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018f28:	4621      	mov	r1, r4
 8018f2a:	4630      	mov	r0, r6
 8018f2c:	4798      	blx	r3
 8018f2e:	2800      	cmp	r0, #0
 8018f30:	d0b7      	beq.n	8018ea2 <__ssvfiscanf_r+0x1e6>
 8018f32:	e79d      	b.n	8018e70 <__ssvfiscanf_r+0x1b4>
 8018f34:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018f36:	3201      	adds	r2, #1
 8018f38:	9245      	str	r2, [sp, #276]	; 0x114
 8018f3a:	6862      	ldr	r2, [r4, #4]
 8018f3c:	3a01      	subs	r2, #1
 8018f3e:	2a00      	cmp	r2, #0
 8018f40:	6062      	str	r2, [r4, #4]
 8018f42:	dd02      	ble.n	8018f4a <__ssvfiscanf_r+0x28e>
 8018f44:	3301      	adds	r3, #1
 8018f46:	6023      	str	r3, [r4, #0]
 8018f48:	e7ae      	b.n	8018ea8 <__ssvfiscanf_r+0x1ec>
 8018f4a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018f4c:	4621      	mov	r1, r4
 8018f4e:	4630      	mov	r0, r6
 8018f50:	4798      	blx	r3
 8018f52:	2800      	cmp	r0, #0
 8018f54:	d0a8      	beq.n	8018ea8 <__ssvfiscanf_r+0x1ec>
 8018f56:	e78b      	b.n	8018e70 <__ssvfiscanf_r+0x1b4>
 8018f58:	2b04      	cmp	r3, #4
 8018f5a:	dc06      	bgt.n	8018f6a <__ssvfiscanf_r+0x2ae>
 8018f5c:	466b      	mov	r3, sp
 8018f5e:	4622      	mov	r2, r4
 8018f60:	a941      	add	r1, sp, #260	; 0x104
 8018f62:	4630      	mov	r0, r6
 8018f64:	f000 fb68 	bl	8019638 <_scanf_i>
 8018f68:	e7ac      	b.n	8018ec4 <__ssvfiscanf_r+0x208>
 8018f6a:	4b0f      	ldr	r3, [pc, #60]	; (8018fa8 <__ssvfiscanf_r+0x2ec>)
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	f43f aecf 	beq.w	8018d10 <__ssvfiscanf_r+0x54>
 8018f72:	466b      	mov	r3, sp
 8018f74:	4622      	mov	r2, r4
 8018f76:	a941      	add	r1, sp, #260	; 0x104
 8018f78:	4630      	mov	r0, r6
 8018f7a:	f3af 8000 	nop.w
 8018f7e:	e7a1      	b.n	8018ec4 <__ssvfiscanf_r+0x208>
 8018f80:	89a3      	ldrh	r3, [r4, #12]
 8018f82:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018f86:	bf18      	it	ne
 8018f88:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8018f8c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8018f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f94:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018f96:	e7f9      	b.n	8018f8c <__ssvfiscanf_r+0x2d0>
 8018f98:	08018c09 	.word	0x08018c09
 8018f9c:	08018c83 	.word	0x08018c83
 8018fa0:	0801e90d 	.word	0x0801e90d
 8018fa4:	0801eb2c 	.word	0x0801eb2c
 8018fa8:	00000000 	.word	0x00000000

08018fac <__sfputc_r>:
 8018fac:	6893      	ldr	r3, [r2, #8]
 8018fae:	3b01      	subs	r3, #1
 8018fb0:	2b00      	cmp	r3, #0
 8018fb2:	b410      	push	{r4}
 8018fb4:	6093      	str	r3, [r2, #8]
 8018fb6:	da08      	bge.n	8018fca <__sfputc_r+0x1e>
 8018fb8:	6994      	ldr	r4, [r2, #24]
 8018fba:	42a3      	cmp	r3, r4
 8018fbc:	db01      	blt.n	8018fc2 <__sfputc_r+0x16>
 8018fbe:	290a      	cmp	r1, #10
 8018fc0:	d103      	bne.n	8018fca <__sfputc_r+0x1e>
 8018fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018fc6:	f7ff ba41 	b.w	801844c <__swbuf_r>
 8018fca:	6813      	ldr	r3, [r2, #0]
 8018fcc:	1c58      	adds	r0, r3, #1
 8018fce:	6010      	str	r0, [r2, #0]
 8018fd0:	7019      	strb	r1, [r3, #0]
 8018fd2:	4608      	mov	r0, r1
 8018fd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018fd8:	4770      	bx	lr

08018fda <__sfputs_r>:
 8018fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018fdc:	4606      	mov	r6, r0
 8018fde:	460f      	mov	r7, r1
 8018fe0:	4614      	mov	r4, r2
 8018fe2:	18d5      	adds	r5, r2, r3
 8018fe4:	42ac      	cmp	r4, r5
 8018fe6:	d101      	bne.n	8018fec <__sfputs_r+0x12>
 8018fe8:	2000      	movs	r0, #0
 8018fea:	e007      	b.n	8018ffc <__sfputs_r+0x22>
 8018fec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018ff0:	463a      	mov	r2, r7
 8018ff2:	4630      	mov	r0, r6
 8018ff4:	f7ff ffda 	bl	8018fac <__sfputc_r>
 8018ff8:	1c43      	adds	r3, r0, #1
 8018ffa:	d1f3      	bne.n	8018fe4 <__sfputs_r+0xa>
 8018ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019000 <_vfiprintf_r>:
 8019000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019004:	460d      	mov	r5, r1
 8019006:	b09d      	sub	sp, #116	; 0x74
 8019008:	4614      	mov	r4, r2
 801900a:	4698      	mov	r8, r3
 801900c:	4606      	mov	r6, r0
 801900e:	b118      	cbz	r0, 8019018 <_vfiprintf_r+0x18>
 8019010:	6983      	ldr	r3, [r0, #24]
 8019012:	b90b      	cbnz	r3, 8019018 <_vfiprintf_r+0x18>
 8019014:	f7fe fd56 	bl	8017ac4 <__sinit>
 8019018:	4b89      	ldr	r3, [pc, #548]	; (8019240 <_vfiprintf_r+0x240>)
 801901a:	429d      	cmp	r5, r3
 801901c:	d11b      	bne.n	8019056 <_vfiprintf_r+0x56>
 801901e:	6875      	ldr	r5, [r6, #4]
 8019020:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019022:	07d9      	lsls	r1, r3, #31
 8019024:	d405      	bmi.n	8019032 <_vfiprintf_r+0x32>
 8019026:	89ab      	ldrh	r3, [r5, #12]
 8019028:	059a      	lsls	r2, r3, #22
 801902a:	d402      	bmi.n	8019032 <_vfiprintf_r+0x32>
 801902c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801902e:	f7fe fe0c 	bl	8017c4a <__retarget_lock_acquire_recursive>
 8019032:	89ab      	ldrh	r3, [r5, #12]
 8019034:	071b      	lsls	r3, r3, #28
 8019036:	d501      	bpl.n	801903c <_vfiprintf_r+0x3c>
 8019038:	692b      	ldr	r3, [r5, #16]
 801903a:	b9eb      	cbnz	r3, 8019078 <_vfiprintf_r+0x78>
 801903c:	4629      	mov	r1, r5
 801903e:	4630      	mov	r0, r6
 8019040:	f7ff fa68 	bl	8018514 <__swsetup_r>
 8019044:	b1c0      	cbz	r0, 8019078 <_vfiprintf_r+0x78>
 8019046:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019048:	07dc      	lsls	r4, r3, #31
 801904a:	d50e      	bpl.n	801906a <_vfiprintf_r+0x6a>
 801904c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019050:	b01d      	add	sp, #116	; 0x74
 8019052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019056:	4b7b      	ldr	r3, [pc, #492]	; (8019244 <_vfiprintf_r+0x244>)
 8019058:	429d      	cmp	r5, r3
 801905a:	d101      	bne.n	8019060 <_vfiprintf_r+0x60>
 801905c:	68b5      	ldr	r5, [r6, #8]
 801905e:	e7df      	b.n	8019020 <_vfiprintf_r+0x20>
 8019060:	4b79      	ldr	r3, [pc, #484]	; (8019248 <_vfiprintf_r+0x248>)
 8019062:	429d      	cmp	r5, r3
 8019064:	bf08      	it	eq
 8019066:	68f5      	ldreq	r5, [r6, #12]
 8019068:	e7da      	b.n	8019020 <_vfiprintf_r+0x20>
 801906a:	89ab      	ldrh	r3, [r5, #12]
 801906c:	0598      	lsls	r0, r3, #22
 801906e:	d4ed      	bmi.n	801904c <_vfiprintf_r+0x4c>
 8019070:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019072:	f7fe fdeb 	bl	8017c4c <__retarget_lock_release_recursive>
 8019076:	e7e9      	b.n	801904c <_vfiprintf_r+0x4c>
 8019078:	2300      	movs	r3, #0
 801907a:	9309      	str	r3, [sp, #36]	; 0x24
 801907c:	2320      	movs	r3, #32
 801907e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019082:	f8cd 800c 	str.w	r8, [sp, #12]
 8019086:	2330      	movs	r3, #48	; 0x30
 8019088:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801924c <_vfiprintf_r+0x24c>
 801908c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019090:	f04f 0901 	mov.w	r9, #1
 8019094:	4623      	mov	r3, r4
 8019096:	469a      	mov	sl, r3
 8019098:	f813 2b01 	ldrb.w	r2, [r3], #1
 801909c:	b10a      	cbz	r2, 80190a2 <_vfiprintf_r+0xa2>
 801909e:	2a25      	cmp	r2, #37	; 0x25
 80190a0:	d1f9      	bne.n	8019096 <_vfiprintf_r+0x96>
 80190a2:	ebba 0b04 	subs.w	fp, sl, r4
 80190a6:	d00b      	beq.n	80190c0 <_vfiprintf_r+0xc0>
 80190a8:	465b      	mov	r3, fp
 80190aa:	4622      	mov	r2, r4
 80190ac:	4629      	mov	r1, r5
 80190ae:	4630      	mov	r0, r6
 80190b0:	f7ff ff93 	bl	8018fda <__sfputs_r>
 80190b4:	3001      	adds	r0, #1
 80190b6:	f000 80aa 	beq.w	801920e <_vfiprintf_r+0x20e>
 80190ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80190bc:	445a      	add	r2, fp
 80190be:	9209      	str	r2, [sp, #36]	; 0x24
 80190c0:	f89a 3000 	ldrb.w	r3, [sl]
 80190c4:	2b00      	cmp	r3, #0
 80190c6:	f000 80a2 	beq.w	801920e <_vfiprintf_r+0x20e>
 80190ca:	2300      	movs	r3, #0
 80190cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80190d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80190d4:	f10a 0a01 	add.w	sl, sl, #1
 80190d8:	9304      	str	r3, [sp, #16]
 80190da:	9307      	str	r3, [sp, #28]
 80190dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80190e0:	931a      	str	r3, [sp, #104]	; 0x68
 80190e2:	4654      	mov	r4, sl
 80190e4:	2205      	movs	r2, #5
 80190e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80190ea:	4858      	ldr	r0, [pc, #352]	; (801924c <_vfiprintf_r+0x24c>)
 80190ec:	f7e7 f8c0 	bl	8000270 <memchr>
 80190f0:	9a04      	ldr	r2, [sp, #16]
 80190f2:	b9d8      	cbnz	r0, 801912c <_vfiprintf_r+0x12c>
 80190f4:	06d1      	lsls	r1, r2, #27
 80190f6:	bf44      	itt	mi
 80190f8:	2320      	movmi	r3, #32
 80190fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80190fe:	0713      	lsls	r3, r2, #28
 8019100:	bf44      	itt	mi
 8019102:	232b      	movmi	r3, #43	; 0x2b
 8019104:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019108:	f89a 3000 	ldrb.w	r3, [sl]
 801910c:	2b2a      	cmp	r3, #42	; 0x2a
 801910e:	d015      	beq.n	801913c <_vfiprintf_r+0x13c>
 8019110:	9a07      	ldr	r2, [sp, #28]
 8019112:	4654      	mov	r4, sl
 8019114:	2000      	movs	r0, #0
 8019116:	f04f 0c0a 	mov.w	ip, #10
 801911a:	4621      	mov	r1, r4
 801911c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019120:	3b30      	subs	r3, #48	; 0x30
 8019122:	2b09      	cmp	r3, #9
 8019124:	d94e      	bls.n	80191c4 <_vfiprintf_r+0x1c4>
 8019126:	b1b0      	cbz	r0, 8019156 <_vfiprintf_r+0x156>
 8019128:	9207      	str	r2, [sp, #28]
 801912a:	e014      	b.n	8019156 <_vfiprintf_r+0x156>
 801912c:	eba0 0308 	sub.w	r3, r0, r8
 8019130:	fa09 f303 	lsl.w	r3, r9, r3
 8019134:	4313      	orrs	r3, r2
 8019136:	9304      	str	r3, [sp, #16]
 8019138:	46a2      	mov	sl, r4
 801913a:	e7d2      	b.n	80190e2 <_vfiprintf_r+0xe2>
 801913c:	9b03      	ldr	r3, [sp, #12]
 801913e:	1d19      	adds	r1, r3, #4
 8019140:	681b      	ldr	r3, [r3, #0]
 8019142:	9103      	str	r1, [sp, #12]
 8019144:	2b00      	cmp	r3, #0
 8019146:	bfbb      	ittet	lt
 8019148:	425b      	neglt	r3, r3
 801914a:	f042 0202 	orrlt.w	r2, r2, #2
 801914e:	9307      	strge	r3, [sp, #28]
 8019150:	9307      	strlt	r3, [sp, #28]
 8019152:	bfb8      	it	lt
 8019154:	9204      	strlt	r2, [sp, #16]
 8019156:	7823      	ldrb	r3, [r4, #0]
 8019158:	2b2e      	cmp	r3, #46	; 0x2e
 801915a:	d10c      	bne.n	8019176 <_vfiprintf_r+0x176>
 801915c:	7863      	ldrb	r3, [r4, #1]
 801915e:	2b2a      	cmp	r3, #42	; 0x2a
 8019160:	d135      	bne.n	80191ce <_vfiprintf_r+0x1ce>
 8019162:	9b03      	ldr	r3, [sp, #12]
 8019164:	1d1a      	adds	r2, r3, #4
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	9203      	str	r2, [sp, #12]
 801916a:	2b00      	cmp	r3, #0
 801916c:	bfb8      	it	lt
 801916e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8019172:	3402      	adds	r4, #2
 8019174:	9305      	str	r3, [sp, #20]
 8019176:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801925c <_vfiprintf_r+0x25c>
 801917a:	7821      	ldrb	r1, [r4, #0]
 801917c:	2203      	movs	r2, #3
 801917e:	4650      	mov	r0, sl
 8019180:	f7e7 f876 	bl	8000270 <memchr>
 8019184:	b140      	cbz	r0, 8019198 <_vfiprintf_r+0x198>
 8019186:	2340      	movs	r3, #64	; 0x40
 8019188:	eba0 000a 	sub.w	r0, r0, sl
 801918c:	fa03 f000 	lsl.w	r0, r3, r0
 8019190:	9b04      	ldr	r3, [sp, #16]
 8019192:	4303      	orrs	r3, r0
 8019194:	3401      	adds	r4, #1
 8019196:	9304      	str	r3, [sp, #16]
 8019198:	f814 1b01 	ldrb.w	r1, [r4], #1
 801919c:	482c      	ldr	r0, [pc, #176]	; (8019250 <_vfiprintf_r+0x250>)
 801919e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80191a2:	2206      	movs	r2, #6
 80191a4:	f7e7 f864 	bl	8000270 <memchr>
 80191a8:	2800      	cmp	r0, #0
 80191aa:	d03f      	beq.n	801922c <_vfiprintf_r+0x22c>
 80191ac:	4b29      	ldr	r3, [pc, #164]	; (8019254 <_vfiprintf_r+0x254>)
 80191ae:	bb1b      	cbnz	r3, 80191f8 <_vfiprintf_r+0x1f8>
 80191b0:	9b03      	ldr	r3, [sp, #12]
 80191b2:	3307      	adds	r3, #7
 80191b4:	f023 0307 	bic.w	r3, r3, #7
 80191b8:	3308      	adds	r3, #8
 80191ba:	9303      	str	r3, [sp, #12]
 80191bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191be:	443b      	add	r3, r7
 80191c0:	9309      	str	r3, [sp, #36]	; 0x24
 80191c2:	e767      	b.n	8019094 <_vfiprintf_r+0x94>
 80191c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80191c8:	460c      	mov	r4, r1
 80191ca:	2001      	movs	r0, #1
 80191cc:	e7a5      	b.n	801911a <_vfiprintf_r+0x11a>
 80191ce:	2300      	movs	r3, #0
 80191d0:	3401      	adds	r4, #1
 80191d2:	9305      	str	r3, [sp, #20]
 80191d4:	4619      	mov	r1, r3
 80191d6:	f04f 0c0a 	mov.w	ip, #10
 80191da:	4620      	mov	r0, r4
 80191dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80191e0:	3a30      	subs	r2, #48	; 0x30
 80191e2:	2a09      	cmp	r2, #9
 80191e4:	d903      	bls.n	80191ee <_vfiprintf_r+0x1ee>
 80191e6:	2b00      	cmp	r3, #0
 80191e8:	d0c5      	beq.n	8019176 <_vfiprintf_r+0x176>
 80191ea:	9105      	str	r1, [sp, #20]
 80191ec:	e7c3      	b.n	8019176 <_vfiprintf_r+0x176>
 80191ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80191f2:	4604      	mov	r4, r0
 80191f4:	2301      	movs	r3, #1
 80191f6:	e7f0      	b.n	80191da <_vfiprintf_r+0x1da>
 80191f8:	ab03      	add	r3, sp, #12
 80191fa:	9300      	str	r3, [sp, #0]
 80191fc:	462a      	mov	r2, r5
 80191fe:	4b16      	ldr	r3, [pc, #88]	; (8019258 <_vfiprintf_r+0x258>)
 8019200:	a904      	add	r1, sp, #16
 8019202:	4630      	mov	r0, r6
 8019204:	f3af 8000 	nop.w
 8019208:	4607      	mov	r7, r0
 801920a:	1c78      	adds	r0, r7, #1
 801920c:	d1d6      	bne.n	80191bc <_vfiprintf_r+0x1bc>
 801920e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019210:	07d9      	lsls	r1, r3, #31
 8019212:	d405      	bmi.n	8019220 <_vfiprintf_r+0x220>
 8019214:	89ab      	ldrh	r3, [r5, #12]
 8019216:	059a      	lsls	r2, r3, #22
 8019218:	d402      	bmi.n	8019220 <_vfiprintf_r+0x220>
 801921a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801921c:	f7fe fd16 	bl	8017c4c <__retarget_lock_release_recursive>
 8019220:	89ab      	ldrh	r3, [r5, #12]
 8019222:	065b      	lsls	r3, r3, #25
 8019224:	f53f af12 	bmi.w	801904c <_vfiprintf_r+0x4c>
 8019228:	9809      	ldr	r0, [sp, #36]	; 0x24
 801922a:	e711      	b.n	8019050 <_vfiprintf_r+0x50>
 801922c:	ab03      	add	r3, sp, #12
 801922e:	9300      	str	r3, [sp, #0]
 8019230:	462a      	mov	r2, r5
 8019232:	4b09      	ldr	r3, [pc, #36]	; (8019258 <_vfiprintf_r+0x258>)
 8019234:	a904      	add	r1, sp, #16
 8019236:	4630      	mov	r0, r6
 8019238:	f000 f880 	bl	801933c <_printf_i>
 801923c:	e7e4      	b.n	8019208 <_vfiprintf_r+0x208>
 801923e:	bf00      	nop
 8019240:	0801ea30 	.word	0x0801ea30
 8019244:	0801ea50 	.word	0x0801ea50
 8019248:	0801ea10 	.word	0x0801ea10
 801924c:	0801eb26 	.word	0x0801eb26
 8019250:	0801eb30 	.word	0x0801eb30
 8019254:	00000000 	.word	0x00000000
 8019258:	08018fdb 	.word	0x08018fdb
 801925c:	0801eb2c 	.word	0x0801eb2c

08019260 <_printf_common>:
 8019260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019264:	4616      	mov	r6, r2
 8019266:	4699      	mov	r9, r3
 8019268:	688a      	ldr	r2, [r1, #8]
 801926a:	690b      	ldr	r3, [r1, #16]
 801926c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019270:	4293      	cmp	r3, r2
 8019272:	bfb8      	it	lt
 8019274:	4613      	movlt	r3, r2
 8019276:	6033      	str	r3, [r6, #0]
 8019278:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801927c:	4607      	mov	r7, r0
 801927e:	460c      	mov	r4, r1
 8019280:	b10a      	cbz	r2, 8019286 <_printf_common+0x26>
 8019282:	3301      	adds	r3, #1
 8019284:	6033      	str	r3, [r6, #0]
 8019286:	6823      	ldr	r3, [r4, #0]
 8019288:	0699      	lsls	r1, r3, #26
 801928a:	bf42      	ittt	mi
 801928c:	6833      	ldrmi	r3, [r6, #0]
 801928e:	3302      	addmi	r3, #2
 8019290:	6033      	strmi	r3, [r6, #0]
 8019292:	6825      	ldr	r5, [r4, #0]
 8019294:	f015 0506 	ands.w	r5, r5, #6
 8019298:	d106      	bne.n	80192a8 <_printf_common+0x48>
 801929a:	f104 0a19 	add.w	sl, r4, #25
 801929e:	68e3      	ldr	r3, [r4, #12]
 80192a0:	6832      	ldr	r2, [r6, #0]
 80192a2:	1a9b      	subs	r3, r3, r2
 80192a4:	42ab      	cmp	r3, r5
 80192a6:	dc26      	bgt.n	80192f6 <_printf_common+0x96>
 80192a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80192ac:	1e13      	subs	r3, r2, #0
 80192ae:	6822      	ldr	r2, [r4, #0]
 80192b0:	bf18      	it	ne
 80192b2:	2301      	movne	r3, #1
 80192b4:	0692      	lsls	r2, r2, #26
 80192b6:	d42b      	bmi.n	8019310 <_printf_common+0xb0>
 80192b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80192bc:	4649      	mov	r1, r9
 80192be:	4638      	mov	r0, r7
 80192c0:	47c0      	blx	r8
 80192c2:	3001      	adds	r0, #1
 80192c4:	d01e      	beq.n	8019304 <_printf_common+0xa4>
 80192c6:	6823      	ldr	r3, [r4, #0]
 80192c8:	68e5      	ldr	r5, [r4, #12]
 80192ca:	6832      	ldr	r2, [r6, #0]
 80192cc:	f003 0306 	and.w	r3, r3, #6
 80192d0:	2b04      	cmp	r3, #4
 80192d2:	bf08      	it	eq
 80192d4:	1aad      	subeq	r5, r5, r2
 80192d6:	68a3      	ldr	r3, [r4, #8]
 80192d8:	6922      	ldr	r2, [r4, #16]
 80192da:	bf0c      	ite	eq
 80192dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80192e0:	2500      	movne	r5, #0
 80192e2:	4293      	cmp	r3, r2
 80192e4:	bfc4      	itt	gt
 80192e6:	1a9b      	subgt	r3, r3, r2
 80192e8:	18ed      	addgt	r5, r5, r3
 80192ea:	2600      	movs	r6, #0
 80192ec:	341a      	adds	r4, #26
 80192ee:	42b5      	cmp	r5, r6
 80192f0:	d11a      	bne.n	8019328 <_printf_common+0xc8>
 80192f2:	2000      	movs	r0, #0
 80192f4:	e008      	b.n	8019308 <_printf_common+0xa8>
 80192f6:	2301      	movs	r3, #1
 80192f8:	4652      	mov	r2, sl
 80192fa:	4649      	mov	r1, r9
 80192fc:	4638      	mov	r0, r7
 80192fe:	47c0      	blx	r8
 8019300:	3001      	adds	r0, #1
 8019302:	d103      	bne.n	801930c <_printf_common+0xac>
 8019304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801930c:	3501      	adds	r5, #1
 801930e:	e7c6      	b.n	801929e <_printf_common+0x3e>
 8019310:	18e1      	adds	r1, r4, r3
 8019312:	1c5a      	adds	r2, r3, #1
 8019314:	2030      	movs	r0, #48	; 0x30
 8019316:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801931a:	4422      	add	r2, r4
 801931c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019320:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019324:	3302      	adds	r3, #2
 8019326:	e7c7      	b.n	80192b8 <_printf_common+0x58>
 8019328:	2301      	movs	r3, #1
 801932a:	4622      	mov	r2, r4
 801932c:	4649      	mov	r1, r9
 801932e:	4638      	mov	r0, r7
 8019330:	47c0      	blx	r8
 8019332:	3001      	adds	r0, #1
 8019334:	d0e6      	beq.n	8019304 <_printf_common+0xa4>
 8019336:	3601      	adds	r6, #1
 8019338:	e7d9      	b.n	80192ee <_printf_common+0x8e>
	...

0801933c <_printf_i>:
 801933c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019340:	460c      	mov	r4, r1
 8019342:	4691      	mov	r9, r2
 8019344:	7e27      	ldrb	r7, [r4, #24]
 8019346:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019348:	2f78      	cmp	r7, #120	; 0x78
 801934a:	4680      	mov	r8, r0
 801934c:	469a      	mov	sl, r3
 801934e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019352:	d807      	bhi.n	8019364 <_printf_i+0x28>
 8019354:	2f62      	cmp	r7, #98	; 0x62
 8019356:	d80a      	bhi.n	801936e <_printf_i+0x32>
 8019358:	2f00      	cmp	r7, #0
 801935a:	f000 80d8 	beq.w	801950e <_printf_i+0x1d2>
 801935e:	2f58      	cmp	r7, #88	; 0x58
 8019360:	f000 80a3 	beq.w	80194aa <_printf_i+0x16e>
 8019364:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019368:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801936c:	e03a      	b.n	80193e4 <_printf_i+0xa8>
 801936e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019372:	2b15      	cmp	r3, #21
 8019374:	d8f6      	bhi.n	8019364 <_printf_i+0x28>
 8019376:	a001      	add	r0, pc, #4	; (adr r0, 801937c <_printf_i+0x40>)
 8019378:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801937c:	080193d5 	.word	0x080193d5
 8019380:	080193e9 	.word	0x080193e9
 8019384:	08019365 	.word	0x08019365
 8019388:	08019365 	.word	0x08019365
 801938c:	08019365 	.word	0x08019365
 8019390:	08019365 	.word	0x08019365
 8019394:	080193e9 	.word	0x080193e9
 8019398:	08019365 	.word	0x08019365
 801939c:	08019365 	.word	0x08019365
 80193a0:	08019365 	.word	0x08019365
 80193a4:	08019365 	.word	0x08019365
 80193a8:	080194f5 	.word	0x080194f5
 80193ac:	08019419 	.word	0x08019419
 80193b0:	080194d7 	.word	0x080194d7
 80193b4:	08019365 	.word	0x08019365
 80193b8:	08019365 	.word	0x08019365
 80193bc:	08019517 	.word	0x08019517
 80193c0:	08019365 	.word	0x08019365
 80193c4:	08019419 	.word	0x08019419
 80193c8:	08019365 	.word	0x08019365
 80193cc:	08019365 	.word	0x08019365
 80193d0:	080194df 	.word	0x080194df
 80193d4:	680b      	ldr	r3, [r1, #0]
 80193d6:	1d1a      	adds	r2, r3, #4
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	600a      	str	r2, [r1, #0]
 80193dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80193e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80193e4:	2301      	movs	r3, #1
 80193e6:	e0a3      	b.n	8019530 <_printf_i+0x1f4>
 80193e8:	6825      	ldr	r5, [r4, #0]
 80193ea:	6808      	ldr	r0, [r1, #0]
 80193ec:	062e      	lsls	r6, r5, #24
 80193ee:	f100 0304 	add.w	r3, r0, #4
 80193f2:	d50a      	bpl.n	801940a <_printf_i+0xce>
 80193f4:	6805      	ldr	r5, [r0, #0]
 80193f6:	600b      	str	r3, [r1, #0]
 80193f8:	2d00      	cmp	r5, #0
 80193fa:	da03      	bge.n	8019404 <_printf_i+0xc8>
 80193fc:	232d      	movs	r3, #45	; 0x2d
 80193fe:	426d      	negs	r5, r5
 8019400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019404:	485e      	ldr	r0, [pc, #376]	; (8019580 <_printf_i+0x244>)
 8019406:	230a      	movs	r3, #10
 8019408:	e019      	b.n	801943e <_printf_i+0x102>
 801940a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801940e:	6805      	ldr	r5, [r0, #0]
 8019410:	600b      	str	r3, [r1, #0]
 8019412:	bf18      	it	ne
 8019414:	b22d      	sxthne	r5, r5
 8019416:	e7ef      	b.n	80193f8 <_printf_i+0xbc>
 8019418:	680b      	ldr	r3, [r1, #0]
 801941a:	6825      	ldr	r5, [r4, #0]
 801941c:	1d18      	adds	r0, r3, #4
 801941e:	6008      	str	r0, [r1, #0]
 8019420:	0628      	lsls	r0, r5, #24
 8019422:	d501      	bpl.n	8019428 <_printf_i+0xec>
 8019424:	681d      	ldr	r5, [r3, #0]
 8019426:	e002      	b.n	801942e <_printf_i+0xf2>
 8019428:	0669      	lsls	r1, r5, #25
 801942a:	d5fb      	bpl.n	8019424 <_printf_i+0xe8>
 801942c:	881d      	ldrh	r5, [r3, #0]
 801942e:	4854      	ldr	r0, [pc, #336]	; (8019580 <_printf_i+0x244>)
 8019430:	2f6f      	cmp	r7, #111	; 0x6f
 8019432:	bf0c      	ite	eq
 8019434:	2308      	moveq	r3, #8
 8019436:	230a      	movne	r3, #10
 8019438:	2100      	movs	r1, #0
 801943a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801943e:	6866      	ldr	r6, [r4, #4]
 8019440:	60a6      	str	r6, [r4, #8]
 8019442:	2e00      	cmp	r6, #0
 8019444:	bfa2      	ittt	ge
 8019446:	6821      	ldrge	r1, [r4, #0]
 8019448:	f021 0104 	bicge.w	r1, r1, #4
 801944c:	6021      	strge	r1, [r4, #0]
 801944e:	b90d      	cbnz	r5, 8019454 <_printf_i+0x118>
 8019450:	2e00      	cmp	r6, #0
 8019452:	d04d      	beq.n	80194f0 <_printf_i+0x1b4>
 8019454:	4616      	mov	r6, r2
 8019456:	fbb5 f1f3 	udiv	r1, r5, r3
 801945a:	fb03 5711 	mls	r7, r3, r1, r5
 801945e:	5dc7      	ldrb	r7, [r0, r7]
 8019460:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019464:	462f      	mov	r7, r5
 8019466:	42bb      	cmp	r3, r7
 8019468:	460d      	mov	r5, r1
 801946a:	d9f4      	bls.n	8019456 <_printf_i+0x11a>
 801946c:	2b08      	cmp	r3, #8
 801946e:	d10b      	bne.n	8019488 <_printf_i+0x14c>
 8019470:	6823      	ldr	r3, [r4, #0]
 8019472:	07df      	lsls	r7, r3, #31
 8019474:	d508      	bpl.n	8019488 <_printf_i+0x14c>
 8019476:	6923      	ldr	r3, [r4, #16]
 8019478:	6861      	ldr	r1, [r4, #4]
 801947a:	4299      	cmp	r1, r3
 801947c:	bfde      	ittt	le
 801947e:	2330      	movle	r3, #48	; 0x30
 8019480:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019484:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8019488:	1b92      	subs	r2, r2, r6
 801948a:	6122      	str	r2, [r4, #16]
 801948c:	f8cd a000 	str.w	sl, [sp]
 8019490:	464b      	mov	r3, r9
 8019492:	aa03      	add	r2, sp, #12
 8019494:	4621      	mov	r1, r4
 8019496:	4640      	mov	r0, r8
 8019498:	f7ff fee2 	bl	8019260 <_printf_common>
 801949c:	3001      	adds	r0, #1
 801949e:	d14c      	bne.n	801953a <_printf_i+0x1fe>
 80194a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80194a4:	b004      	add	sp, #16
 80194a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80194aa:	4835      	ldr	r0, [pc, #212]	; (8019580 <_printf_i+0x244>)
 80194ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80194b0:	6823      	ldr	r3, [r4, #0]
 80194b2:	680e      	ldr	r6, [r1, #0]
 80194b4:	061f      	lsls	r7, r3, #24
 80194b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80194ba:	600e      	str	r6, [r1, #0]
 80194bc:	d514      	bpl.n	80194e8 <_printf_i+0x1ac>
 80194be:	07d9      	lsls	r1, r3, #31
 80194c0:	bf44      	itt	mi
 80194c2:	f043 0320 	orrmi.w	r3, r3, #32
 80194c6:	6023      	strmi	r3, [r4, #0]
 80194c8:	b91d      	cbnz	r5, 80194d2 <_printf_i+0x196>
 80194ca:	6823      	ldr	r3, [r4, #0]
 80194cc:	f023 0320 	bic.w	r3, r3, #32
 80194d0:	6023      	str	r3, [r4, #0]
 80194d2:	2310      	movs	r3, #16
 80194d4:	e7b0      	b.n	8019438 <_printf_i+0xfc>
 80194d6:	6823      	ldr	r3, [r4, #0]
 80194d8:	f043 0320 	orr.w	r3, r3, #32
 80194dc:	6023      	str	r3, [r4, #0]
 80194de:	2378      	movs	r3, #120	; 0x78
 80194e0:	4828      	ldr	r0, [pc, #160]	; (8019584 <_printf_i+0x248>)
 80194e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80194e6:	e7e3      	b.n	80194b0 <_printf_i+0x174>
 80194e8:	065e      	lsls	r6, r3, #25
 80194ea:	bf48      	it	mi
 80194ec:	b2ad      	uxthmi	r5, r5
 80194ee:	e7e6      	b.n	80194be <_printf_i+0x182>
 80194f0:	4616      	mov	r6, r2
 80194f2:	e7bb      	b.n	801946c <_printf_i+0x130>
 80194f4:	680b      	ldr	r3, [r1, #0]
 80194f6:	6826      	ldr	r6, [r4, #0]
 80194f8:	6960      	ldr	r0, [r4, #20]
 80194fa:	1d1d      	adds	r5, r3, #4
 80194fc:	600d      	str	r5, [r1, #0]
 80194fe:	0635      	lsls	r5, r6, #24
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	d501      	bpl.n	8019508 <_printf_i+0x1cc>
 8019504:	6018      	str	r0, [r3, #0]
 8019506:	e002      	b.n	801950e <_printf_i+0x1d2>
 8019508:	0671      	lsls	r1, r6, #25
 801950a:	d5fb      	bpl.n	8019504 <_printf_i+0x1c8>
 801950c:	8018      	strh	r0, [r3, #0]
 801950e:	2300      	movs	r3, #0
 8019510:	6123      	str	r3, [r4, #16]
 8019512:	4616      	mov	r6, r2
 8019514:	e7ba      	b.n	801948c <_printf_i+0x150>
 8019516:	680b      	ldr	r3, [r1, #0]
 8019518:	1d1a      	adds	r2, r3, #4
 801951a:	600a      	str	r2, [r1, #0]
 801951c:	681e      	ldr	r6, [r3, #0]
 801951e:	6862      	ldr	r2, [r4, #4]
 8019520:	2100      	movs	r1, #0
 8019522:	4630      	mov	r0, r6
 8019524:	f7e6 fea4 	bl	8000270 <memchr>
 8019528:	b108      	cbz	r0, 801952e <_printf_i+0x1f2>
 801952a:	1b80      	subs	r0, r0, r6
 801952c:	6060      	str	r0, [r4, #4]
 801952e:	6863      	ldr	r3, [r4, #4]
 8019530:	6123      	str	r3, [r4, #16]
 8019532:	2300      	movs	r3, #0
 8019534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019538:	e7a8      	b.n	801948c <_printf_i+0x150>
 801953a:	6923      	ldr	r3, [r4, #16]
 801953c:	4632      	mov	r2, r6
 801953e:	4649      	mov	r1, r9
 8019540:	4640      	mov	r0, r8
 8019542:	47d0      	blx	sl
 8019544:	3001      	adds	r0, #1
 8019546:	d0ab      	beq.n	80194a0 <_printf_i+0x164>
 8019548:	6823      	ldr	r3, [r4, #0]
 801954a:	079b      	lsls	r3, r3, #30
 801954c:	d413      	bmi.n	8019576 <_printf_i+0x23a>
 801954e:	68e0      	ldr	r0, [r4, #12]
 8019550:	9b03      	ldr	r3, [sp, #12]
 8019552:	4298      	cmp	r0, r3
 8019554:	bfb8      	it	lt
 8019556:	4618      	movlt	r0, r3
 8019558:	e7a4      	b.n	80194a4 <_printf_i+0x168>
 801955a:	2301      	movs	r3, #1
 801955c:	4632      	mov	r2, r6
 801955e:	4649      	mov	r1, r9
 8019560:	4640      	mov	r0, r8
 8019562:	47d0      	blx	sl
 8019564:	3001      	adds	r0, #1
 8019566:	d09b      	beq.n	80194a0 <_printf_i+0x164>
 8019568:	3501      	adds	r5, #1
 801956a:	68e3      	ldr	r3, [r4, #12]
 801956c:	9903      	ldr	r1, [sp, #12]
 801956e:	1a5b      	subs	r3, r3, r1
 8019570:	42ab      	cmp	r3, r5
 8019572:	dcf2      	bgt.n	801955a <_printf_i+0x21e>
 8019574:	e7eb      	b.n	801954e <_printf_i+0x212>
 8019576:	2500      	movs	r5, #0
 8019578:	f104 0619 	add.w	r6, r4, #25
 801957c:	e7f5      	b.n	801956a <_printf_i+0x22e>
 801957e:	bf00      	nop
 8019580:	0801eb37 	.word	0x0801eb37
 8019584:	0801eb48 	.word	0x0801eb48

08019588 <_scanf_chars>:
 8019588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801958c:	4615      	mov	r5, r2
 801958e:	688a      	ldr	r2, [r1, #8]
 8019590:	4680      	mov	r8, r0
 8019592:	460c      	mov	r4, r1
 8019594:	b932      	cbnz	r2, 80195a4 <_scanf_chars+0x1c>
 8019596:	698a      	ldr	r2, [r1, #24]
 8019598:	2a00      	cmp	r2, #0
 801959a:	bf0c      	ite	eq
 801959c:	2201      	moveq	r2, #1
 801959e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 80195a2:	608a      	str	r2, [r1, #8]
 80195a4:	6822      	ldr	r2, [r4, #0]
 80195a6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8019634 <_scanf_chars+0xac>
 80195aa:	06d1      	lsls	r1, r2, #27
 80195ac:	bf5f      	itttt	pl
 80195ae:	681a      	ldrpl	r2, [r3, #0]
 80195b0:	1d11      	addpl	r1, r2, #4
 80195b2:	6019      	strpl	r1, [r3, #0]
 80195b4:	6816      	ldrpl	r6, [r2, #0]
 80195b6:	2700      	movs	r7, #0
 80195b8:	69a0      	ldr	r0, [r4, #24]
 80195ba:	b188      	cbz	r0, 80195e0 <_scanf_chars+0x58>
 80195bc:	2801      	cmp	r0, #1
 80195be:	d107      	bne.n	80195d0 <_scanf_chars+0x48>
 80195c0:	682b      	ldr	r3, [r5, #0]
 80195c2:	781a      	ldrb	r2, [r3, #0]
 80195c4:	6963      	ldr	r3, [r4, #20]
 80195c6:	5c9b      	ldrb	r3, [r3, r2]
 80195c8:	b953      	cbnz	r3, 80195e0 <_scanf_chars+0x58>
 80195ca:	bb27      	cbnz	r7, 8019616 <_scanf_chars+0x8e>
 80195cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80195d0:	2802      	cmp	r0, #2
 80195d2:	d120      	bne.n	8019616 <_scanf_chars+0x8e>
 80195d4:	682b      	ldr	r3, [r5, #0]
 80195d6:	781b      	ldrb	r3, [r3, #0]
 80195d8:	f813 3009 	ldrb.w	r3, [r3, r9]
 80195dc:	071b      	lsls	r3, r3, #28
 80195de:	d41a      	bmi.n	8019616 <_scanf_chars+0x8e>
 80195e0:	6823      	ldr	r3, [r4, #0]
 80195e2:	06da      	lsls	r2, r3, #27
 80195e4:	bf5e      	ittt	pl
 80195e6:	682b      	ldrpl	r3, [r5, #0]
 80195e8:	781b      	ldrbpl	r3, [r3, #0]
 80195ea:	f806 3b01 	strbpl.w	r3, [r6], #1
 80195ee:	682a      	ldr	r2, [r5, #0]
 80195f0:	686b      	ldr	r3, [r5, #4]
 80195f2:	3201      	adds	r2, #1
 80195f4:	602a      	str	r2, [r5, #0]
 80195f6:	68a2      	ldr	r2, [r4, #8]
 80195f8:	3b01      	subs	r3, #1
 80195fa:	3a01      	subs	r2, #1
 80195fc:	606b      	str	r3, [r5, #4]
 80195fe:	3701      	adds	r7, #1
 8019600:	60a2      	str	r2, [r4, #8]
 8019602:	b142      	cbz	r2, 8019616 <_scanf_chars+0x8e>
 8019604:	2b00      	cmp	r3, #0
 8019606:	dcd7      	bgt.n	80195b8 <_scanf_chars+0x30>
 8019608:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801960c:	4629      	mov	r1, r5
 801960e:	4640      	mov	r0, r8
 8019610:	4798      	blx	r3
 8019612:	2800      	cmp	r0, #0
 8019614:	d0d0      	beq.n	80195b8 <_scanf_chars+0x30>
 8019616:	6823      	ldr	r3, [r4, #0]
 8019618:	f013 0310 	ands.w	r3, r3, #16
 801961c:	d105      	bne.n	801962a <_scanf_chars+0xa2>
 801961e:	68e2      	ldr	r2, [r4, #12]
 8019620:	3201      	adds	r2, #1
 8019622:	60e2      	str	r2, [r4, #12]
 8019624:	69a2      	ldr	r2, [r4, #24]
 8019626:	b102      	cbz	r2, 801962a <_scanf_chars+0xa2>
 8019628:	7033      	strb	r3, [r6, #0]
 801962a:	6923      	ldr	r3, [r4, #16]
 801962c:	441f      	add	r7, r3
 801962e:	6127      	str	r7, [r4, #16]
 8019630:	2000      	movs	r0, #0
 8019632:	e7cb      	b.n	80195cc <_scanf_chars+0x44>
 8019634:	0801e90d 	.word	0x0801e90d

08019638 <_scanf_i>:
 8019638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801963c:	4698      	mov	r8, r3
 801963e:	4b74      	ldr	r3, [pc, #464]	; (8019810 <_scanf_i+0x1d8>)
 8019640:	460c      	mov	r4, r1
 8019642:	4682      	mov	sl, r0
 8019644:	4616      	mov	r6, r2
 8019646:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801964a:	b087      	sub	sp, #28
 801964c:	ab03      	add	r3, sp, #12
 801964e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019652:	4b70      	ldr	r3, [pc, #448]	; (8019814 <_scanf_i+0x1dc>)
 8019654:	69a1      	ldr	r1, [r4, #24]
 8019656:	4a70      	ldr	r2, [pc, #448]	; (8019818 <_scanf_i+0x1e0>)
 8019658:	2903      	cmp	r1, #3
 801965a:	bf18      	it	ne
 801965c:	461a      	movne	r2, r3
 801965e:	68a3      	ldr	r3, [r4, #8]
 8019660:	9201      	str	r2, [sp, #4]
 8019662:	1e5a      	subs	r2, r3, #1
 8019664:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8019668:	bf88      	it	hi
 801966a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801966e:	4627      	mov	r7, r4
 8019670:	bf82      	ittt	hi
 8019672:	eb03 0905 	addhi.w	r9, r3, r5
 8019676:	f240 135d 	movwhi	r3, #349	; 0x15d
 801967a:	60a3      	strhi	r3, [r4, #8]
 801967c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8019680:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8019684:	bf98      	it	ls
 8019686:	f04f 0900 	movls.w	r9, #0
 801968a:	6023      	str	r3, [r4, #0]
 801968c:	463d      	mov	r5, r7
 801968e:	f04f 0b00 	mov.w	fp, #0
 8019692:	6831      	ldr	r1, [r6, #0]
 8019694:	ab03      	add	r3, sp, #12
 8019696:	7809      	ldrb	r1, [r1, #0]
 8019698:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801969c:	2202      	movs	r2, #2
 801969e:	f7e6 fde7 	bl	8000270 <memchr>
 80196a2:	b328      	cbz	r0, 80196f0 <_scanf_i+0xb8>
 80196a4:	f1bb 0f01 	cmp.w	fp, #1
 80196a8:	d159      	bne.n	801975e <_scanf_i+0x126>
 80196aa:	6862      	ldr	r2, [r4, #4]
 80196ac:	b92a      	cbnz	r2, 80196ba <_scanf_i+0x82>
 80196ae:	6822      	ldr	r2, [r4, #0]
 80196b0:	2308      	movs	r3, #8
 80196b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80196b6:	6063      	str	r3, [r4, #4]
 80196b8:	6022      	str	r2, [r4, #0]
 80196ba:	6822      	ldr	r2, [r4, #0]
 80196bc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80196c0:	6022      	str	r2, [r4, #0]
 80196c2:	68a2      	ldr	r2, [r4, #8]
 80196c4:	1e51      	subs	r1, r2, #1
 80196c6:	60a1      	str	r1, [r4, #8]
 80196c8:	b192      	cbz	r2, 80196f0 <_scanf_i+0xb8>
 80196ca:	6832      	ldr	r2, [r6, #0]
 80196cc:	1c51      	adds	r1, r2, #1
 80196ce:	6031      	str	r1, [r6, #0]
 80196d0:	7812      	ldrb	r2, [r2, #0]
 80196d2:	f805 2b01 	strb.w	r2, [r5], #1
 80196d6:	6872      	ldr	r2, [r6, #4]
 80196d8:	3a01      	subs	r2, #1
 80196da:	2a00      	cmp	r2, #0
 80196dc:	6072      	str	r2, [r6, #4]
 80196de:	dc07      	bgt.n	80196f0 <_scanf_i+0xb8>
 80196e0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80196e4:	4631      	mov	r1, r6
 80196e6:	4650      	mov	r0, sl
 80196e8:	4790      	blx	r2
 80196ea:	2800      	cmp	r0, #0
 80196ec:	f040 8085 	bne.w	80197fa <_scanf_i+0x1c2>
 80196f0:	f10b 0b01 	add.w	fp, fp, #1
 80196f4:	f1bb 0f03 	cmp.w	fp, #3
 80196f8:	d1cb      	bne.n	8019692 <_scanf_i+0x5a>
 80196fa:	6863      	ldr	r3, [r4, #4]
 80196fc:	b90b      	cbnz	r3, 8019702 <_scanf_i+0xca>
 80196fe:	230a      	movs	r3, #10
 8019700:	6063      	str	r3, [r4, #4]
 8019702:	6863      	ldr	r3, [r4, #4]
 8019704:	4945      	ldr	r1, [pc, #276]	; (801981c <_scanf_i+0x1e4>)
 8019706:	6960      	ldr	r0, [r4, #20]
 8019708:	1ac9      	subs	r1, r1, r3
 801970a:	f000 f89b 	bl	8019844 <__sccl>
 801970e:	f04f 0b00 	mov.w	fp, #0
 8019712:	68a3      	ldr	r3, [r4, #8]
 8019714:	6822      	ldr	r2, [r4, #0]
 8019716:	2b00      	cmp	r3, #0
 8019718:	d03d      	beq.n	8019796 <_scanf_i+0x15e>
 801971a:	6831      	ldr	r1, [r6, #0]
 801971c:	6960      	ldr	r0, [r4, #20]
 801971e:	f891 c000 	ldrb.w	ip, [r1]
 8019722:	f810 000c 	ldrb.w	r0, [r0, ip]
 8019726:	2800      	cmp	r0, #0
 8019728:	d035      	beq.n	8019796 <_scanf_i+0x15e>
 801972a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801972e:	d124      	bne.n	801977a <_scanf_i+0x142>
 8019730:	0510      	lsls	r0, r2, #20
 8019732:	d522      	bpl.n	801977a <_scanf_i+0x142>
 8019734:	f10b 0b01 	add.w	fp, fp, #1
 8019738:	f1b9 0f00 	cmp.w	r9, #0
 801973c:	d003      	beq.n	8019746 <_scanf_i+0x10e>
 801973e:	3301      	adds	r3, #1
 8019740:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8019744:	60a3      	str	r3, [r4, #8]
 8019746:	6873      	ldr	r3, [r6, #4]
 8019748:	3b01      	subs	r3, #1
 801974a:	2b00      	cmp	r3, #0
 801974c:	6073      	str	r3, [r6, #4]
 801974e:	dd1b      	ble.n	8019788 <_scanf_i+0x150>
 8019750:	6833      	ldr	r3, [r6, #0]
 8019752:	3301      	adds	r3, #1
 8019754:	6033      	str	r3, [r6, #0]
 8019756:	68a3      	ldr	r3, [r4, #8]
 8019758:	3b01      	subs	r3, #1
 801975a:	60a3      	str	r3, [r4, #8]
 801975c:	e7d9      	b.n	8019712 <_scanf_i+0xda>
 801975e:	f1bb 0f02 	cmp.w	fp, #2
 8019762:	d1ae      	bne.n	80196c2 <_scanf_i+0x8a>
 8019764:	6822      	ldr	r2, [r4, #0]
 8019766:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801976a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801976e:	d1bf      	bne.n	80196f0 <_scanf_i+0xb8>
 8019770:	2310      	movs	r3, #16
 8019772:	6063      	str	r3, [r4, #4]
 8019774:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019778:	e7a2      	b.n	80196c0 <_scanf_i+0x88>
 801977a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801977e:	6022      	str	r2, [r4, #0]
 8019780:	780b      	ldrb	r3, [r1, #0]
 8019782:	f805 3b01 	strb.w	r3, [r5], #1
 8019786:	e7de      	b.n	8019746 <_scanf_i+0x10e>
 8019788:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801978c:	4631      	mov	r1, r6
 801978e:	4650      	mov	r0, sl
 8019790:	4798      	blx	r3
 8019792:	2800      	cmp	r0, #0
 8019794:	d0df      	beq.n	8019756 <_scanf_i+0x11e>
 8019796:	6823      	ldr	r3, [r4, #0]
 8019798:	05d9      	lsls	r1, r3, #23
 801979a:	d50d      	bpl.n	80197b8 <_scanf_i+0x180>
 801979c:	42bd      	cmp	r5, r7
 801979e:	d909      	bls.n	80197b4 <_scanf_i+0x17c>
 80197a0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80197a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80197a8:	4632      	mov	r2, r6
 80197aa:	4650      	mov	r0, sl
 80197ac:	4798      	blx	r3
 80197ae:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80197b2:	464d      	mov	r5, r9
 80197b4:	42bd      	cmp	r5, r7
 80197b6:	d028      	beq.n	801980a <_scanf_i+0x1d2>
 80197b8:	6822      	ldr	r2, [r4, #0]
 80197ba:	f012 0210 	ands.w	r2, r2, #16
 80197be:	d113      	bne.n	80197e8 <_scanf_i+0x1b0>
 80197c0:	702a      	strb	r2, [r5, #0]
 80197c2:	6863      	ldr	r3, [r4, #4]
 80197c4:	9e01      	ldr	r6, [sp, #4]
 80197c6:	4639      	mov	r1, r7
 80197c8:	4650      	mov	r0, sl
 80197ca:	47b0      	blx	r6
 80197cc:	f8d8 3000 	ldr.w	r3, [r8]
 80197d0:	6821      	ldr	r1, [r4, #0]
 80197d2:	1d1a      	adds	r2, r3, #4
 80197d4:	f8c8 2000 	str.w	r2, [r8]
 80197d8:	f011 0f20 	tst.w	r1, #32
 80197dc:	681b      	ldr	r3, [r3, #0]
 80197de:	d00f      	beq.n	8019800 <_scanf_i+0x1c8>
 80197e0:	6018      	str	r0, [r3, #0]
 80197e2:	68e3      	ldr	r3, [r4, #12]
 80197e4:	3301      	adds	r3, #1
 80197e6:	60e3      	str	r3, [r4, #12]
 80197e8:	1bed      	subs	r5, r5, r7
 80197ea:	44ab      	add	fp, r5
 80197ec:	6925      	ldr	r5, [r4, #16]
 80197ee:	445d      	add	r5, fp
 80197f0:	6125      	str	r5, [r4, #16]
 80197f2:	2000      	movs	r0, #0
 80197f4:	b007      	add	sp, #28
 80197f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197fa:	f04f 0b00 	mov.w	fp, #0
 80197fe:	e7ca      	b.n	8019796 <_scanf_i+0x15e>
 8019800:	07ca      	lsls	r2, r1, #31
 8019802:	bf4c      	ite	mi
 8019804:	8018      	strhmi	r0, [r3, #0]
 8019806:	6018      	strpl	r0, [r3, #0]
 8019808:	e7eb      	b.n	80197e2 <_scanf_i+0x1aa>
 801980a:	2001      	movs	r0, #1
 801980c:	e7f2      	b.n	80197f4 <_scanf_i+0x1bc>
 801980e:	bf00      	nop
 8019810:	0801d194 	.word	0x0801d194
 8019814:	080199b1 	.word	0x080199b1
 8019818:	08018435 	.word	0x08018435
 801981c:	0801eb72 	.word	0x0801eb72

08019820 <_read_r>:
 8019820:	b538      	push	{r3, r4, r5, lr}
 8019822:	4d07      	ldr	r5, [pc, #28]	; (8019840 <_read_r+0x20>)
 8019824:	4604      	mov	r4, r0
 8019826:	4608      	mov	r0, r1
 8019828:	4611      	mov	r1, r2
 801982a:	2200      	movs	r2, #0
 801982c:	602a      	str	r2, [r5, #0]
 801982e:	461a      	mov	r2, r3
 8019830:	f7e8 fb14 	bl	8001e5c <_read>
 8019834:	1c43      	adds	r3, r0, #1
 8019836:	d102      	bne.n	801983e <_read_r+0x1e>
 8019838:	682b      	ldr	r3, [r5, #0]
 801983a:	b103      	cbz	r3, 801983e <_read_r+0x1e>
 801983c:	6023      	str	r3, [r4, #0]
 801983e:	bd38      	pop	{r3, r4, r5, pc}
 8019840:	20018bc0 	.word	0x20018bc0

08019844 <__sccl>:
 8019844:	b570      	push	{r4, r5, r6, lr}
 8019846:	780b      	ldrb	r3, [r1, #0]
 8019848:	4604      	mov	r4, r0
 801984a:	2b5e      	cmp	r3, #94	; 0x5e
 801984c:	bf0b      	itete	eq
 801984e:	784b      	ldrbeq	r3, [r1, #1]
 8019850:	1c48      	addne	r0, r1, #1
 8019852:	1c88      	addeq	r0, r1, #2
 8019854:	2200      	movne	r2, #0
 8019856:	bf08      	it	eq
 8019858:	2201      	moveq	r2, #1
 801985a:	1e61      	subs	r1, r4, #1
 801985c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8019860:	f801 2f01 	strb.w	r2, [r1, #1]!
 8019864:	42a9      	cmp	r1, r5
 8019866:	d1fb      	bne.n	8019860 <__sccl+0x1c>
 8019868:	b90b      	cbnz	r3, 801986e <__sccl+0x2a>
 801986a:	3801      	subs	r0, #1
 801986c:	bd70      	pop	{r4, r5, r6, pc}
 801986e:	f082 0101 	eor.w	r1, r2, #1
 8019872:	54e1      	strb	r1, [r4, r3]
 8019874:	1c42      	adds	r2, r0, #1
 8019876:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801987a:	2d2d      	cmp	r5, #45	; 0x2d
 801987c:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 8019880:	4610      	mov	r0, r2
 8019882:	d006      	beq.n	8019892 <__sccl+0x4e>
 8019884:	2d5d      	cmp	r5, #93	; 0x5d
 8019886:	d0f1      	beq.n	801986c <__sccl+0x28>
 8019888:	b90d      	cbnz	r5, 801988e <__sccl+0x4a>
 801988a:	4630      	mov	r0, r6
 801988c:	e7ee      	b.n	801986c <__sccl+0x28>
 801988e:	462b      	mov	r3, r5
 8019890:	e7ef      	b.n	8019872 <__sccl+0x2e>
 8019892:	7816      	ldrb	r6, [r2, #0]
 8019894:	2e5d      	cmp	r6, #93	; 0x5d
 8019896:	d0fa      	beq.n	801988e <__sccl+0x4a>
 8019898:	42b3      	cmp	r3, r6
 801989a:	dcf8      	bgt.n	801988e <__sccl+0x4a>
 801989c:	4618      	mov	r0, r3
 801989e:	3001      	adds	r0, #1
 80198a0:	4286      	cmp	r6, r0
 80198a2:	5421      	strb	r1, [r4, r0]
 80198a4:	dcfb      	bgt.n	801989e <__sccl+0x5a>
 80198a6:	43d8      	mvns	r0, r3
 80198a8:	4430      	add	r0, r6
 80198aa:	1c5d      	adds	r5, r3, #1
 80198ac:	42b3      	cmp	r3, r6
 80198ae:	bfa8      	it	ge
 80198b0:	2000      	movge	r0, #0
 80198b2:	182b      	adds	r3, r5, r0
 80198b4:	3202      	adds	r2, #2
 80198b6:	e7de      	b.n	8019876 <__sccl+0x32>

080198b8 <_strtoul_l.isra.0>:
 80198b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80198bc:	4e3b      	ldr	r6, [pc, #236]	; (80199ac <_strtoul_l.isra.0+0xf4>)
 80198be:	4686      	mov	lr, r0
 80198c0:	468c      	mov	ip, r1
 80198c2:	4660      	mov	r0, ip
 80198c4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80198c8:	5da5      	ldrb	r5, [r4, r6]
 80198ca:	f015 0508 	ands.w	r5, r5, #8
 80198ce:	d1f8      	bne.n	80198c2 <_strtoul_l.isra.0+0xa>
 80198d0:	2c2d      	cmp	r4, #45	; 0x2d
 80198d2:	d134      	bne.n	801993e <_strtoul_l.isra.0+0x86>
 80198d4:	f89c 4000 	ldrb.w	r4, [ip]
 80198d8:	f04f 0801 	mov.w	r8, #1
 80198dc:	f100 0c02 	add.w	ip, r0, #2
 80198e0:	2b00      	cmp	r3, #0
 80198e2:	d05e      	beq.n	80199a2 <_strtoul_l.isra.0+0xea>
 80198e4:	2b10      	cmp	r3, #16
 80198e6:	d10c      	bne.n	8019902 <_strtoul_l.isra.0+0x4a>
 80198e8:	2c30      	cmp	r4, #48	; 0x30
 80198ea:	d10a      	bne.n	8019902 <_strtoul_l.isra.0+0x4a>
 80198ec:	f89c 0000 	ldrb.w	r0, [ip]
 80198f0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80198f4:	2858      	cmp	r0, #88	; 0x58
 80198f6:	d14f      	bne.n	8019998 <_strtoul_l.isra.0+0xe0>
 80198f8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80198fc:	2310      	movs	r3, #16
 80198fe:	f10c 0c02 	add.w	ip, ip, #2
 8019902:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8019906:	2500      	movs	r5, #0
 8019908:	fbb7 f7f3 	udiv	r7, r7, r3
 801990c:	fb03 f907 	mul.w	r9, r3, r7
 8019910:	ea6f 0909 	mvn.w	r9, r9
 8019914:	4628      	mov	r0, r5
 8019916:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 801991a:	2e09      	cmp	r6, #9
 801991c:	d818      	bhi.n	8019950 <_strtoul_l.isra.0+0x98>
 801991e:	4634      	mov	r4, r6
 8019920:	42a3      	cmp	r3, r4
 8019922:	dd24      	ble.n	801996e <_strtoul_l.isra.0+0xb6>
 8019924:	2d00      	cmp	r5, #0
 8019926:	db1f      	blt.n	8019968 <_strtoul_l.isra.0+0xb0>
 8019928:	4287      	cmp	r7, r0
 801992a:	d31d      	bcc.n	8019968 <_strtoul_l.isra.0+0xb0>
 801992c:	d101      	bne.n	8019932 <_strtoul_l.isra.0+0x7a>
 801992e:	45a1      	cmp	r9, r4
 8019930:	db1a      	blt.n	8019968 <_strtoul_l.isra.0+0xb0>
 8019932:	fb00 4003 	mla	r0, r0, r3, r4
 8019936:	2501      	movs	r5, #1
 8019938:	f81c 4b01 	ldrb.w	r4, [ip], #1
 801993c:	e7eb      	b.n	8019916 <_strtoul_l.isra.0+0x5e>
 801993e:	2c2b      	cmp	r4, #43	; 0x2b
 8019940:	bf08      	it	eq
 8019942:	f89c 4000 	ldrbeq.w	r4, [ip]
 8019946:	46a8      	mov	r8, r5
 8019948:	bf08      	it	eq
 801994a:	f100 0c02 	addeq.w	ip, r0, #2
 801994e:	e7c7      	b.n	80198e0 <_strtoul_l.isra.0+0x28>
 8019950:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8019954:	2e19      	cmp	r6, #25
 8019956:	d801      	bhi.n	801995c <_strtoul_l.isra.0+0xa4>
 8019958:	3c37      	subs	r4, #55	; 0x37
 801995a:	e7e1      	b.n	8019920 <_strtoul_l.isra.0+0x68>
 801995c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8019960:	2e19      	cmp	r6, #25
 8019962:	d804      	bhi.n	801996e <_strtoul_l.isra.0+0xb6>
 8019964:	3c57      	subs	r4, #87	; 0x57
 8019966:	e7db      	b.n	8019920 <_strtoul_l.isra.0+0x68>
 8019968:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801996c:	e7e4      	b.n	8019938 <_strtoul_l.isra.0+0x80>
 801996e:	2d00      	cmp	r5, #0
 8019970:	da07      	bge.n	8019982 <_strtoul_l.isra.0+0xca>
 8019972:	2322      	movs	r3, #34	; 0x22
 8019974:	f8ce 3000 	str.w	r3, [lr]
 8019978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801997c:	b942      	cbnz	r2, 8019990 <_strtoul_l.isra.0+0xd8>
 801997e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019982:	f1b8 0f00 	cmp.w	r8, #0
 8019986:	d000      	beq.n	801998a <_strtoul_l.isra.0+0xd2>
 8019988:	4240      	negs	r0, r0
 801998a:	2a00      	cmp	r2, #0
 801998c:	d0f7      	beq.n	801997e <_strtoul_l.isra.0+0xc6>
 801998e:	b10d      	cbz	r5, 8019994 <_strtoul_l.isra.0+0xdc>
 8019990:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8019994:	6011      	str	r1, [r2, #0]
 8019996:	e7f2      	b.n	801997e <_strtoul_l.isra.0+0xc6>
 8019998:	2430      	movs	r4, #48	; 0x30
 801999a:	2b00      	cmp	r3, #0
 801999c:	d1b1      	bne.n	8019902 <_strtoul_l.isra.0+0x4a>
 801999e:	2308      	movs	r3, #8
 80199a0:	e7af      	b.n	8019902 <_strtoul_l.isra.0+0x4a>
 80199a2:	2c30      	cmp	r4, #48	; 0x30
 80199a4:	d0a2      	beq.n	80198ec <_strtoul_l.isra.0+0x34>
 80199a6:	230a      	movs	r3, #10
 80199a8:	e7ab      	b.n	8019902 <_strtoul_l.isra.0+0x4a>
 80199aa:	bf00      	nop
 80199ac:	0801e90d 	.word	0x0801e90d

080199b0 <_strtoul_r>:
 80199b0:	f7ff bf82 	b.w	80198b8 <_strtoul_l.isra.0>

080199b4 <__submore>:
 80199b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199b8:	460c      	mov	r4, r1
 80199ba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80199bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80199c0:	4299      	cmp	r1, r3
 80199c2:	d11d      	bne.n	8019a00 <__submore+0x4c>
 80199c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80199c8:	f7fe f9e0 	bl	8017d8c <_malloc_r>
 80199cc:	b918      	cbnz	r0, 80199d6 <__submore+0x22>
 80199ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80199d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80199d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80199da:	63a3      	str	r3, [r4, #56]	; 0x38
 80199dc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80199e0:	6360      	str	r0, [r4, #52]	; 0x34
 80199e2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80199e6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80199ea:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80199ee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80199f2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80199f6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80199fa:	6020      	str	r0, [r4, #0]
 80199fc:	2000      	movs	r0, #0
 80199fe:	e7e8      	b.n	80199d2 <__submore+0x1e>
 8019a00:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8019a02:	0077      	lsls	r7, r6, #1
 8019a04:	463a      	mov	r2, r7
 8019a06:	f7fe ff7d 	bl	8018904 <_realloc_r>
 8019a0a:	4605      	mov	r5, r0
 8019a0c:	2800      	cmp	r0, #0
 8019a0e:	d0de      	beq.n	80199ce <__submore+0x1a>
 8019a10:	eb00 0806 	add.w	r8, r0, r6
 8019a14:	4601      	mov	r1, r0
 8019a16:	4632      	mov	r2, r6
 8019a18:	4640      	mov	r0, r8
 8019a1a:	f7fe f937 	bl	8017c8c <memcpy>
 8019a1e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019a22:	f8c4 8000 	str.w	r8, [r4]
 8019a26:	e7e9      	b.n	80199fc <__submore+0x48>

08019a28 <abort>:
 8019a28:	b508      	push	{r3, lr}
 8019a2a:	2006      	movs	r0, #6
 8019a2c:	f000 f856 	bl	8019adc <raise>
 8019a30:	2001      	movs	r0, #1
 8019a32:	f7e8 fa09 	bl	8001e48 <_exit>
	...

08019a38 <_fstat_r>:
 8019a38:	b538      	push	{r3, r4, r5, lr}
 8019a3a:	4d07      	ldr	r5, [pc, #28]	; (8019a58 <_fstat_r+0x20>)
 8019a3c:	2300      	movs	r3, #0
 8019a3e:	4604      	mov	r4, r0
 8019a40:	4608      	mov	r0, r1
 8019a42:	4611      	mov	r1, r2
 8019a44:	602b      	str	r3, [r5, #0]
 8019a46:	f7e8 fa4e 	bl	8001ee6 <_fstat>
 8019a4a:	1c43      	adds	r3, r0, #1
 8019a4c:	d102      	bne.n	8019a54 <_fstat_r+0x1c>
 8019a4e:	682b      	ldr	r3, [r5, #0]
 8019a50:	b103      	cbz	r3, 8019a54 <_fstat_r+0x1c>
 8019a52:	6023      	str	r3, [r4, #0]
 8019a54:	bd38      	pop	{r3, r4, r5, pc}
 8019a56:	bf00      	nop
 8019a58:	20018bc0 	.word	0x20018bc0

08019a5c <_isatty_r>:
 8019a5c:	b538      	push	{r3, r4, r5, lr}
 8019a5e:	4d06      	ldr	r5, [pc, #24]	; (8019a78 <_isatty_r+0x1c>)
 8019a60:	2300      	movs	r3, #0
 8019a62:	4604      	mov	r4, r0
 8019a64:	4608      	mov	r0, r1
 8019a66:	602b      	str	r3, [r5, #0]
 8019a68:	f7e8 fa4d 	bl	8001f06 <_isatty>
 8019a6c:	1c43      	adds	r3, r0, #1
 8019a6e:	d102      	bne.n	8019a76 <_isatty_r+0x1a>
 8019a70:	682b      	ldr	r3, [r5, #0]
 8019a72:	b103      	cbz	r3, 8019a76 <_isatty_r+0x1a>
 8019a74:	6023      	str	r3, [r4, #0]
 8019a76:	bd38      	pop	{r3, r4, r5, pc}
 8019a78:	20018bc0 	.word	0x20018bc0

08019a7c <_malloc_usable_size_r>:
 8019a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019a80:	1f18      	subs	r0, r3, #4
 8019a82:	2b00      	cmp	r3, #0
 8019a84:	bfbc      	itt	lt
 8019a86:	580b      	ldrlt	r3, [r1, r0]
 8019a88:	18c0      	addlt	r0, r0, r3
 8019a8a:	4770      	bx	lr

08019a8c <_raise_r>:
 8019a8c:	291f      	cmp	r1, #31
 8019a8e:	b538      	push	{r3, r4, r5, lr}
 8019a90:	4604      	mov	r4, r0
 8019a92:	460d      	mov	r5, r1
 8019a94:	d904      	bls.n	8019aa0 <_raise_r+0x14>
 8019a96:	2316      	movs	r3, #22
 8019a98:	6003      	str	r3, [r0, #0]
 8019a9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019a9e:	bd38      	pop	{r3, r4, r5, pc}
 8019aa0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019aa2:	b112      	cbz	r2, 8019aaa <_raise_r+0x1e>
 8019aa4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019aa8:	b94b      	cbnz	r3, 8019abe <_raise_r+0x32>
 8019aaa:	4620      	mov	r0, r4
 8019aac:	f000 f830 	bl	8019b10 <_getpid_r>
 8019ab0:	462a      	mov	r2, r5
 8019ab2:	4601      	mov	r1, r0
 8019ab4:	4620      	mov	r0, r4
 8019ab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019aba:	f000 b817 	b.w	8019aec <_kill_r>
 8019abe:	2b01      	cmp	r3, #1
 8019ac0:	d00a      	beq.n	8019ad8 <_raise_r+0x4c>
 8019ac2:	1c59      	adds	r1, r3, #1
 8019ac4:	d103      	bne.n	8019ace <_raise_r+0x42>
 8019ac6:	2316      	movs	r3, #22
 8019ac8:	6003      	str	r3, [r0, #0]
 8019aca:	2001      	movs	r0, #1
 8019acc:	e7e7      	b.n	8019a9e <_raise_r+0x12>
 8019ace:	2400      	movs	r4, #0
 8019ad0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019ad4:	4628      	mov	r0, r5
 8019ad6:	4798      	blx	r3
 8019ad8:	2000      	movs	r0, #0
 8019ada:	e7e0      	b.n	8019a9e <_raise_r+0x12>

08019adc <raise>:
 8019adc:	4b02      	ldr	r3, [pc, #8]	; (8019ae8 <raise+0xc>)
 8019ade:	4601      	mov	r1, r0
 8019ae0:	6818      	ldr	r0, [r3, #0]
 8019ae2:	f7ff bfd3 	b.w	8019a8c <_raise_r>
 8019ae6:	bf00      	nop
 8019ae8:	20000730 	.word	0x20000730

08019aec <_kill_r>:
 8019aec:	b538      	push	{r3, r4, r5, lr}
 8019aee:	4d07      	ldr	r5, [pc, #28]	; (8019b0c <_kill_r+0x20>)
 8019af0:	2300      	movs	r3, #0
 8019af2:	4604      	mov	r4, r0
 8019af4:	4608      	mov	r0, r1
 8019af6:	4611      	mov	r1, r2
 8019af8:	602b      	str	r3, [r5, #0]
 8019afa:	f7e8 f993 	bl	8001e24 <_kill>
 8019afe:	1c43      	adds	r3, r0, #1
 8019b00:	d102      	bne.n	8019b08 <_kill_r+0x1c>
 8019b02:	682b      	ldr	r3, [r5, #0]
 8019b04:	b103      	cbz	r3, 8019b08 <_kill_r+0x1c>
 8019b06:	6023      	str	r3, [r4, #0]
 8019b08:	bd38      	pop	{r3, r4, r5, pc}
 8019b0a:	bf00      	nop
 8019b0c:	20018bc0 	.word	0x20018bc0

08019b10 <_getpid_r>:
 8019b10:	f7e8 b980 	b.w	8001e14 <_getpid>

08019b14 <_init>:
 8019b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b16:	bf00      	nop
 8019b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019b1a:	bc08      	pop	{r3}
 8019b1c:	469e      	mov	lr, r3
 8019b1e:	4770      	bx	lr

08019b20 <_fini>:
 8019b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b22:	bf00      	nop
 8019b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019b26:	bc08      	pop	{r3}
 8019b28:	469e      	mov	lr, r3
 8019b2a:	4770      	bx	lr
