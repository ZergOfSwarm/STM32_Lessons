
F767_webserver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019cdc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000078c8  08019edc  08019edc  00029edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080217a4  080217a4  00040794  2**0
                  CONTENTS
  4 .ARM          00000008  080217a4  080217a4  000317a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080217ac  080217ac  00040794  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080217ac  080217ac  000317ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080217b0  080217b0  000317b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000794  20000000  080217b4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00018440  20000794  08021f48  00040794  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20018bd4  08021f48  00048bd4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040794  2**0
                  CONTENTS, READONLY
 12 .debug_info   000505dd  00000000  00000000  000407c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000092fd  00000000  00000000  00090d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002950  00000000  00000000  0009a0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002838  00000000  00000000  0009c9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003acee  00000000  00000000  0009f228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003e8b4  00000000  00000000  000d9f16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001279fb  00000000  00000000  001187ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002401c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bad8  00000000  00000000  00240218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000794 	.word	0x20000794
 800021c:	00000000 	.word	0x00000000
 8000220:	08019ec4 	.word	0x08019ec4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000798 	.word	0x20000798
 800023c:	08019ec4 	.word	0x08019ec4

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <cJSON_strdup>:
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d101      	bne.n	8000624 <cJSON_strdup+0x1c>
 8000620:	2300      	movs	r3, #0
 8000622:	e015      	b.n	8000650 <cJSON_strdup+0x48>
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f7ff fe15 	bl	8000254 <strlen>
 800062a:	4603      	mov	r3, r0
 800062c:	3301      	adds	r3, #1
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	68f8      	ldr	r0, [r7, #12]
 8000636:	4798      	blx	r3
 8000638:	60b8      	str	r0, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d101      	bne.n	8000644 <cJSON_strdup+0x3c>
 8000640:	2300      	movs	r3, #0
 8000642:	e005      	b.n	8000650 <cJSON_strdup+0x48>
 8000644:	68fa      	ldr	r2, [r7, #12]
 8000646:	6879      	ldr	r1, [r7, #4]
 8000648:	68b8      	ldr	r0, [r7, #8]
 800064a:	f017 fcf7 	bl	801803c <memcpy>
 800064e:	68bb      	ldr	r3, [r7, #8]
 8000650:	4618      	mov	r0, r3
 8000652:	3710      	adds	r7, #16
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <cJSON_New_Item>:
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2028      	movs	r0, #40	; 0x28
 8000666:	4798      	blx	r3
 8000668:	60f8      	str	r0, [r7, #12]
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d004      	beq.n	800067a <cJSON_New_Item+0x22>
 8000670:	2228      	movs	r2, #40	; 0x28
 8000672:	2100      	movs	r1, #0
 8000674:	68f8      	ldr	r0, [r7, #12]
 8000676:	f017 fd09 	bl	801808c <memset>
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	4618      	mov	r0, r3
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <cJSON_Delete>:
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	e037      	b.n	8000702 <cJSON_Delete+0x7e>
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d108      	bne.n	80006b6 <cJSON_Delete+0x32>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d004      	beq.n	80006b6 <cJSON_Delete+0x32>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ffe7 	bl	8000684 <cJSON_Delete>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	68db      	ldr	r3, [r3, #12]
 80006ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d109      	bne.n	80006d6 <cJSON_Delete+0x52>
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	691b      	ldr	r3, [r3, #16]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d005      	beq.n	80006d6 <cJSON_Delete+0x52>
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <cJSON_Delete+0x90>)
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	6912      	ldr	r2, [r2, #16]
 80006d2:	4610      	mov	r0, r2
 80006d4:	4798      	blx	r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	68db      	ldr	r3, [r3, #12]
 80006da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d109      	bne.n	80006f6 <cJSON_Delete+0x72>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6a1b      	ldr	r3, [r3, #32]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d005      	beq.n	80006f6 <cJSON_Delete+0x72>
 80006ea:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <cJSON_Delete+0x90>)
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	6a12      	ldr	r2, [r2, #32]
 80006f2:	4610      	mov	r0, r2
 80006f4:	4798      	blx	r3
 80006f6:	4b07      	ldr	r3, [pc, #28]	; (8000714 <cJSON_Delete+0x90>)
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	4798      	blx	r3
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d1c4      	bne.n	8000692 <cJSON_Delete+0xe>
 8000708:	bf00      	nop
 800070a:	bf00      	nop
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000000 	.word	0x20000000

08000718 <get_decimal_point>:
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
 800071c:	232e      	movs	r3, #46	; 0x2e
 800071e:	4618      	mov	r0, r3
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <ensure>:
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	2300      	movs	r3, #0
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d003      	beq.n	8000748 <ensure+0x20>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d101      	bne.n	800074c <ensure+0x24>
 8000748:	2300      	movs	r3, #0
 800074a:	e083      	b.n	8000854 <ensure+0x12c>
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d007      	beq.n	8000764 <ensure+0x3c>
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	689a      	ldr	r2, [r3, #8]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	429a      	cmp	r2, r3
 800075e:	d301      	bcc.n	8000764 <ensure+0x3c>
 8000760:	2300      	movs	r3, #0
 8000762:	e077      	b.n	8000854 <ensure+0x12c>
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	da01      	bge.n	800076e <ensure+0x46>
 800076a:	2300      	movs	r3, #0
 800076c:	e072      	b.n	8000854 <ensure+0x12c>
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	689a      	ldr	r2, [r3, #8]
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	4413      	add	r3, r2
 8000776:	3301      	adds	r3, #1
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	683a      	ldr	r2, [r7, #0]
 8000780:	429a      	cmp	r2, r3
 8000782:	d805      	bhi.n	8000790 <ensure+0x68>
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	689b      	ldr	r3, [r3, #8]
 800078c:	4413      	add	r3, r2
 800078e:	e061      	b.n	8000854 <ensure+0x12c>
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	691b      	ldr	r3, [r3, #16]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <ensure+0x74>
 8000798:	2300      	movs	r3, #0
 800079a:	e05b      	b.n	8000854 <ensure+0x12c>
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007a2:	d308      	bcc.n	80007b6 <ensure+0x8e>
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	db03      	blt.n	80007b2 <ensure+0x8a>
 80007aa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	e004      	b.n	80007bc <ensure+0x94>
 80007b2:	2300      	movs	r3, #0
 80007b4:	e04e      	b.n	8000854 <ensure+0x12c>
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6a1b      	ldr	r3, [r3, #32]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d018      	beq.n	80007f6 <ensure+0xce>
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	6a1b      	ldr	r3, [r3, #32]
 80007c8:	687a      	ldr	r2, [r7, #4]
 80007ca:	6812      	ldr	r2, [r2, #0]
 80007cc:	68b9      	ldr	r1, [r7, #8]
 80007ce:	4610      	mov	r0, r2
 80007d0:	4798      	blx	r3
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d132      	bne.n	8000840 <ensure+0x118>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	6812      	ldr	r2, [r2, #0]
 80007e2:	4610      	mov	r0, r2
 80007e4:	4798      	blx	r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2200      	movs	r2, #0
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	2300      	movs	r3, #0
 80007f4:	e02e      	b.n	8000854 <ensure+0x12c>
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	68b8      	ldr	r0, [r7, #8]
 80007fc:	4798      	blx	r3
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d10d      	bne.n	8000822 <ensure+0xfa>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	69db      	ldr	r3, [r3, #28]
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	6812      	ldr	r2, [r2, #0]
 800080e:	4610      	mov	r0, r2
 8000810:	4798      	blx	r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2200      	movs	r2, #0
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	2300      	movs	r3, #0
 8000820:	e018      	b.n	8000854 <ensure+0x12c>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6819      	ldr	r1, [r3, #0]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	3301      	adds	r3, #1
 800082c:	461a      	mov	r2, r3
 800082e:	68f8      	ldr	r0, [r7, #12]
 8000830:	f017 fc04 	bl	801803c <memcpy>
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	69db      	ldr	r3, [r3, #28]
 8000838:	687a      	ldr	r2, [r7, #4]
 800083a:	6812      	ldr	r2, [r2, #0]
 800083c:	4610      	mov	r0, r2
 800083e:	4798      	blx	r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	68ba      	ldr	r2, [r7, #8]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	68fa      	ldr	r2, [r7, #12]
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	68fa      	ldr	r2, [r7, #12]
 8000852:	4413      	add	r3, r2
 8000854:	4618      	mov	r0, r3
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <update_offset>:
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b085      	sub	sp, #20
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d013      	beq.n	8000896 <update_offset+0x3a>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d00f      	beq.n	8000896 <update_offset+0x3a>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	4413      	add	r3, r2
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	689c      	ldr	r4, [r3, #8]
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	f7ff fce4 	bl	8000254 <strlen>
 800088c:	4603      	mov	r3, r0
 800088e:	18e2      	adds	r2, r4, r3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	e000      	b.n	8000898 <update_offset+0x3c>
 8000896:	bf00      	nop
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	bd90      	pop	{r4, r7, pc}
	...

080008a0 <compare_double>:
 80008a0:	b480      	push	{r7}
 80008a2:	b087      	sub	sp, #28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	ed87 0b02 	vstr	d0, [r7, #8]
 80008aa:	ed87 1b00 	vstr	d1, [r7]
 80008ae:	ed97 7b02 	vldr	d7, [r7, #8]
 80008b2:	eeb0 6bc7 	vabs.f64	d6, d7
 80008b6:	ed97 7b00 	vldr	d7, [r7]
 80008ba:	eeb0 7bc7 	vabs.f64	d7, d7
 80008be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80008c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008c6:	dd04      	ble.n	80008d2 <compare_double+0x32>
 80008c8:	ed97 7b02 	vldr	d7, [r7, #8]
 80008cc:	eeb0 7bc7 	vabs.f64	d7, d7
 80008d0:	e003      	b.n	80008da <compare_double+0x3a>
 80008d2:	ed97 7b00 	vldr	d7, [r7]
 80008d6:	eeb0 7bc7 	vabs.f64	d7, d7
 80008da:	ed87 7b04 	vstr	d7, [r7, #16]
 80008de:	ed97 6b02 	vldr	d6, [r7, #8]
 80008e2:	ed97 7b00 	vldr	d7, [r7]
 80008e6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80008ea:	eeb0 6bc7 	vabs.f64	d6, d7
 80008ee:	ed97 7b04 	vldr	d7, [r7, #16]
 80008f2:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000918 <compare_double+0x78>
 80008f6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80008fa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80008fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000902:	bf94      	ite	ls
 8000904:	2301      	movls	r3, #1
 8000906:	2300      	movhi	r3, #0
 8000908:	b2db      	uxtb	r3, r3
 800090a:	4618      	mov	r0, r3
 800090c:	371c      	adds	r7, #28
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	00000000 	.word	0x00000000
 800091c:	3cb00000 	.word	0x3cb00000

08000920 <print_number>:
 8000920:	b580      	push	{r7, lr}
 8000922:	b092      	sub	sp, #72	; 0x48
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
 800092a:	2300      	movs	r3, #0
 800092c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000934:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8000938:	2300      	movs	r3, #0
 800093a:	647b      	str	r3, [r7, #68]	; 0x44
 800093c:	2300      	movs	r3, #0
 800093e:	643b      	str	r3, [r7, #64]	; 0x40
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	f107 0318 	add.w	r3, r7, #24
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
 8000954:	829a      	strh	r2, [r3, #20]
 8000956:	f7ff fedf 	bl	8000718 <get_decimal_point>
 800095a:	4603      	mov	r3, r0
 800095c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000960:	f04f 0200 	mov.w	r2, #0
 8000964:	f04f 0300 	mov.w	r3, #0
 8000968:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d101      	bne.n	8000976 <print_number+0x56>
 8000972:	2300      	movs	r3, #0
 8000974:	e0a2      	b.n	8000abc <print_number+0x19c>
 8000976:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 800097a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800097e:	eeb4 6b47 	vcmp.f64	d6, d7
 8000982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000986:	d612      	bvs.n	80009ae <print_number+0x8e>
 8000988:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800098c:	eeb0 7bc7 	vabs.f64	d7, d7
 8000990:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8000ac8 <print_number+0x1a8>
 8000994:	eeb4 7b46 	vcmp.f64	d7, d6
 8000998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800099c:	bfd4      	ite	le
 800099e:	2301      	movle	r3, #1
 80009a0:	2300      	movgt	r3, #0
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	f083 0301 	eor.w	r3, r3, #1
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d007      	beq.n	80009be <print_number+0x9e>
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4947      	ldr	r1, [pc, #284]	; (8000ad0 <print_number+0x1b0>)
 80009b4:	4618      	mov	r0, r3
 80009b6:	f017 fd9f 	bl	80184f8 <siprintf>
 80009ba:	6478      	str	r0, [r7, #68]	; 0x44
 80009bc:	e03c      	b.n	8000a38 <print_number+0x118>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	ee07 3a90 	vmov	s15, r3
 80009c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009ca:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 80009ce:	eeb4 6b47 	vcmp.f64	d6, d7
 80009d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009d6:	d109      	bne.n	80009ec <print_number+0xcc>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	695a      	ldr	r2, [r3, #20]
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	493c      	ldr	r1, [pc, #240]	; (8000ad4 <print_number+0x1b4>)
 80009e2:	4618      	mov	r0, r3
 80009e4:	f017 fd88 	bl	80184f8 <siprintf>
 80009e8:	6478      	str	r0, [r7, #68]	; 0x44
 80009ea:	e025      	b.n	8000a38 <print_number+0x118>
 80009ec:	f107 0014 	add.w	r0, r7, #20
 80009f0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80009f4:	4938      	ldr	r1, [pc, #224]	; (8000ad8 <print_number+0x1b8>)
 80009f6:	f017 fd7f 	bl	80184f8 <siprintf>
 80009fa:	6478      	str	r0, [r7, #68]	; 0x44
 80009fc:	f107 0208 	add.w	r2, r7, #8
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4935      	ldr	r1, [pc, #212]	; (8000adc <print_number+0x1bc>)
 8000a06:	4618      	mov	r0, r3
 8000a08:	f017 fd96 	bl	8018538 <siscanf>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d10a      	bne.n	8000a28 <print_number+0x108>
 8000a12:	ed97 7b02 	vldr	d7, [r7, #8]
 8000a16:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8000a1a:	eeb0 0b47 	vmov.f64	d0, d7
 8000a1e:	f7ff ff3f 	bl	80008a0 <compare_double>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d107      	bne.n	8000a38 <print_number+0x118>
 8000a28:	f107 0014 	add.w	r0, r7, #20
 8000a2c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000a30:	492b      	ldr	r1, [pc, #172]	; (8000ae0 <print_number+0x1c0>)
 8000a32:	f017 fd61 	bl	80184f8 <siprintf>
 8000a36:	6478      	str	r0, [r7, #68]	; 0x44
 8000a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	db02      	blt.n	8000a44 <print_number+0x124>
 8000a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a40:	2b19      	cmp	r3, #25
 8000a42:	dd01      	ble.n	8000a48 <print_number+0x128>
 8000a44:	2300      	movs	r3, #0
 8000a46:	e039      	b.n	8000abc <print_number+0x19c>
 8000a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	6838      	ldr	r0, [r7, #0]
 8000a50:	f7ff fe6a 	bl	8000728 <ensure>
 8000a54:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d101      	bne.n	8000a60 <print_number+0x140>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	e02d      	b.n	8000abc <print_number+0x19c>
 8000a60:	2300      	movs	r3, #0
 8000a62:	643b      	str	r3, [r7, #64]	; 0x40
 8000a64:	e01a      	b.n	8000a9c <print_number+0x17c>
 8000a66:	f107 0214 	add.w	r2, r7, #20
 8000a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a6c:	4413      	add	r3, r2
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d105      	bne.n	8000a84 <print_number+0x164>
 8000a78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000a7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a7c:	4413      	add	r3, r2
 8000a7e:	222e      	movs	r2, #46	; 0x2e
 8000a80:	701a      	strb	r2, [r3, #0]
 8000a82:	e008      	b.n	8000a96 <print_number+0x176>
 8000a84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a88:	4413      	add	r3, r2
 8000a8a:	f107 0114 	add.w	r1, r7, #20
 8000a8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000a90:	440a      	add	r2, r1
 8000a92:	7812      	ldrb	r2, [r2, #0]
 8000a94:	701a      	strb	r2, [r3, #0]
 8000a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000a98:	3301      	adds	r3, #1
 8000a9a:	643b      	str	r3, [r7, #64]	; 0x40
 8000a9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d3e0      	bcc.n	8000a66 <print_number+0x146>
 8000aa4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000aa8:	4413      	add	r3, r2
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	689a      	ldr	r2, [r3, #8]
 8000ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ab4:	441a      	add	r2, r3
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	2301      	movs	r3, #1
 8000abc:	4618      	mov	r0, r3
 8000abe:	3748      	adds	r7, #72	; 0x48
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	f3af 8000 	nop.w
 8000ac8:	ffffffff 	.word	0xffffffff
 8000acc:	7fefffff 	.word	0x7fefffff
 8000ad0:	08019ee8 	.word	0x08019ee8
 8000ad4:	08019ef0 	.word	0x08019ef0
 8000ad8:	08019ef4 	.word	0x08019ef4
 8000adc:	08019efc 	.word	0x08019efc
 8000ae0:	08019f00 	.word	0x08019f00

08000ae4 <print_string_ptr>:
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	2300      	movs	r3, #0
 8000af8:	61bb      	str	r3, [r7, #24]
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d101      	bne.n	8000b0c <print_string_ptr+0x28>
 8000b08:	2300      	movs	r3, #0
 8000b0a:	e110      	b.n	8000d2e <print_string_ptr+0x24a>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d111      	bne.n	8000b36 <print_string_ptr+0x52>
 8000b12:	2103      	movs	r1, #3
 8000b14:	6838      	ldr	r0, [r7, #0]
 8000b16:	f7ff fe07 	bl	8000728 <ensure>
 8000b1a:	6138      	str	r0, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d101      	bne.n	8000b26 <print_string_ptr+0x42>
 8000b22:	2300      	movs	r3, #0
 8000b24:	e103      	b.n	8000d2e <print_string_ptr+0x24a>
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	4a83      	ldr	r2, [pc, #524]	; (8000d38 <print_string_ptr+0x254>)
 8000b2a:	8811      	ldrh	r1, [r2, #0]
 8000b2c:	7892      	ldrb	r2, [r2, #2]
 8000b2e:	8019      	strh	r1, [r3, #0]
 8000b30:	709a      	strb	r2, [r3, #2]
 8000b32:	2301      	movs	r3, #1
 8000b34:	e0fb      	b.n	8000d2e <print_string_ptr+0x24a>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	61fb      	str	r3, [r7, #28]
 8000b3a:	e023      	b.n	8000b84 <print_string_ptr+0xa0>
 8000b3c:	69fb      	ldr	r3, [r7, #28]
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b22      	cmp	r3, #34	; 0x22
 8000b42:	dc0e      	bgt.n	8000b62 <print_string_ptr+0x7e>
 8000b44:	2b08      	cmp	r3, #8
 8000b46:	db12      	blt.n	8000b6e <print_string_ptr+0x8a>
 8000b48:	3b08      	subs	r3, #8
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	409a      	lsls	r2, r3
 8000b4e:	4b7b      	ldr	r3, [pc, #492]	; (8000d3c <print_string_ptr+0x258>)
 8000b50:	4013      	ands	r3, r2
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	bf14      	ite	ne
 8000b56:	2301      	movne	r3, #1
 8000b58:	2300      	moveq	r3, #0
 8000b5a:	b2db      	uxtb	r3, r3
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d102      	bne.n	8000b66 <print_string_ptr+0x82>
 8000b60:	e005      	b.n	8000b6e <print_string_ptr+0x8a>
 8000b62:	2b5c      	cmp	r3, #92	; 0x5c
 8000b64:	d103      	bne.n	8000b6e <print_string_ptr+0x8a>
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	e007      	b.n	8000b7e <print_string_ptr+0x9a>
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b1f      	cmp	r3, #31
 8000b74:	d802      	bhi.n	8000b7c <print_string_ptr+0x98>
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	3305      	adds	r3, #5
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	bf00      	nop
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3301      	adds	r3, #1
 8000b82:	61fb      	str	r3, [r7, #28]
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d1d7      	bne.n	8000b3c <print_string_ptr+0x58>
 8000b8c:	69fa      	ldr	r2, [r7, #28]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	461a      	mov	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	4413      	add	r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	3303      	adds	r3, #3
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	6838      	ldr	r0, [r7, #0]
 8000ba2:	f7ff fdc1 	bl	8000728 <ensure>
 8000ba6:	6138      	str	r0, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d101      	bne.n	8000bb2 <print_string_ptr+0xce>
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e0bd      	b.n	8000d2e <print_string_ptr+0x24a>
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d117      	bne.n	8000be8 <print_string_ptr+0x104>
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	2222      	movs	r2, #34	; 0x22
 8000bbc:	701a      	strb	r2, [r3, #0]
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f017 fa38 	bl	801803c <memcpy>
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	2222      	movs	r2, #34	; 0x22
 8000bd6:	701a      	strb	r2, [r3, #0]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	3302      	adds	r3, #2
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	4413      	add	r3, r2
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
 8000be4:	2301      	movs	r3, #1
 8000be6:	e0a2      	b.n	8000d2e <print_string_ptr+0x24a>
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	2222      	movs	r2, #34	; 0x22
 8000bec:	701a      	strb	r2, [r3, #0]
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	61bb      	str	r3, [r7, #24]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	61fb      	str	r3, [r7, #28]
 8000bf8:	e087      	b.n	8000d0a <print_string_ptr+0x226>
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	2b1f      	cmp	r3, #31
 8000c00:	d90c      	bls.n	8000c1c <print_string_ptr+0x138>
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b22      	cmp	r3, #34	; 0x22
 8000c08:	d008      	beq.n	8000c1c <print_string_ptr+0x138>
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b5c      	cmp	r3, #92	; 0x5c
 8000c10:	d004      	beq.n	8000c1c <print_string_ptr+0x138>
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	781a      	ldrb	r2, [r3, #0]
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	701a      	strb	r2, [r3, #0]
 8000c1a:	e070      	b.n	8000cfe <print_string_ptr+0x21a>
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	1c5a      	adds	r2, r3, #1
 8000c20:	61ba      	str	r2, [r7, #24]
 8000c22:	225c      	movs	r2, #92	; 0x5c
 8000c24:	701a      	strb	r2, [r3, #0]
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b22      	cmp	r3, #34	; 0x22
 8000c2c:	dc3e      	bgt.n	8000cac <print_string_ptr+0x1c8>
 8000c2e:	2b08      	cmp	r3, #8
 8000c30:	db5a      	blt.n	8000ce8 <print_string_ptr+0x204>
 8000c32:	3b08      	subs	r3, #8
 8000c34:	2b1a      	cmp	r3, #26
 8000c36:	d857      	bhi.n	8000ce8 <print_string_ptr+0x204>
 8000c38:	a201      	add	r2, pc, #4	; (adr r2, 8000c40 <print_string_ptr+0x15c>)
 8000c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3e:	bf00      	nop
 8000c40:	08000cc1 	.word	0x08000cc1
 8000c44:	08000ce1 	.word	0x08000ce1
 8000c48:	08000cd1 	.word	0x08000cd1
 8000c4c:	08000ce9 	.word	0x08000ce9
 8000c50:	08000cc9 	.word	0x08000cc9
 8000c54:	08000cd9 	.word	0x08000cd9
 8000c58:	08000ce9 	.word	0x08000ce9
 8000c5c:	08000ce9 	.word	0x08000ce9
 8000c60:	08000ce9 	.word	0x08000ce9
 8000c64:	08000ce9 	.word	0x08000ce9
 8000c68:	08000ce9 	.word	0x08000ce9
 8000c6c:	08000ce9 	.word	0x08000ce9
 8000c70:	08000ce9 	.word	0x08000ce9
 8000c74:	08000ce9 	.word	0x08000ce9
 8000c78:	08000ce9 	.word	0x08000ce9
 8000c7c:	08000ce9 	.word	0x08000ce9
 8000c80:	08000ce9 	.word	0x08000ce9
 8000c84:	08000ce9 	.word	0x08000ce9
 8000c88:	08000ce9 	.word	0x08000ce9
 8000c8c:	08000ce9 	.word	0x08000ce9
 8000c90:	08000ce9 	.word	0x08000ce9
 8000c94:	08000ce9 	.word	0x08000ce9
 8000c98:	08000ce9 	.word	0x08000ce9
 8000c9c:	08000ce9 	.word	0x08000ce9
 8000ca0:	08000ce9 	.word	0x08000ce9
 8000ca4:	08000ce9 	.word	0x08000ce9
 8000ca8:	08000cb9 	.word	0x08000cb9
 8000cac:	2b5c      	cmp	r3, #92	; 0x5c
 8000cae:	d11b      	bne.n	8000ce8 <print_string_ptr+0x204>
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	225c      	movs	r2, #92	; 0x5c
 8000cb4:	701a      	strb	r2, [r3, #0]
 8000cb6:	e022      	b.n	8000cfe <print_string_ptr+0x21a>
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	2222      	movs	r2, #34	; 0x22
 8000cbc:	701a      	strb	r2, [r3, #0]
 8000cbe:	e01e      	b.n	8000cfe <print_string_ptr+0x21a>
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	2262      	movs	r2, #98	; 0x62
 8000cc4:	701a      	strb	r2, [r3, #0]
 8000cc6:	e01a      	b.n	8000cfe <print_string_ptr+0x21a>
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	2266      	movs	r2, #102	; 0x66
 8000ccc:	701a      	strb	r2, [r3, #0]
 8000cce:	e016      	b.n	8000cfe <print_string_ptr+0x21a>
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	226e      	movs	r2, #110	; 0x6e
 8000cd4:	701a      	strb	r2, [r3, #0]
 8000cd6:	e012      	b.n	8000cfe <print_string_ptr+0x21a>
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	2272      	movs	r2, #114	; 0x72
 8000cdc:	701a      	strb	r2, [r3, #0]
 8000cde:	e00e      	b.n	8000cfe <print_string_ptr+0x21a>
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	2274      	movs	r2, #116	; 0x74
 8000ce4:	701a      	strb	r2, [r3, #0]
 8000ce6:	e00a      	b.n	8000cfe <print_string_ptr+0x21a>
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4914      	ldr	r1, [pc, #80]	; (8000d40 <print_string_ptr+0x25c>)
 8000cf0:	69b8      	ldr	r0, [r7, #24]
 8000cf2:	f017 fc01 	bl	80184f8 <siprintf>
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	61bb      	str	r3, [r7, #24]
 8000cfc:	bf00      	nop
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3301      	adds	r3, #1
 8000d02:	61fb      	str	r3, [r7, #28]
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	3301      	adds	r3, #1
 8000d08:	61bb      	str	r3, [r7, #24]
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f47f af73 	bne.w	8000bfa <print_string_ptr+0x116>
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	3301      	adds	r3, #1
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	2222      	movs	r2, #34	; 0x22
 8000d1e:	701a      	strb	r2, [r3, #0]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	3302      	adds	r3, #2
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	4413      	add	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	701a      	strb	r2, [r3, #0]
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3720      	adds	r7, #32
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	08019f08 	.word	0x08019f08
 8000d3c:	04000037 	.word	0x04000037
 8000d40:	08019f0c 	.word	0x08019f0c

08000d44 <print_string>:
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	691b      	ldr	r3, [r3, #16]
 8000d52:	6839      	ldr	r1, [r7, #0]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fec5 	bl	8000ae4 <print_string_ptr>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <print>:
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08e      	sub	sp, #56	; 0x38
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	2300      	movs	r3, #0
 8000d72:	637b      	str	r3, [r7, #52]	; 0x34
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	2224      	movs	r2, #36	; 0x24
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f017 f985 	bl	801808c <memset>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a38      	ldr	r2, [pc, #224]	; (8000e68 <print+0x104>)
 8000d88:	6812      	ldr	r2, [r2, #0]
 8000d8a:	4610      	mov	r0, r2
 8000d8c:	4798      	blx	r3
 8000d8e:	4603      	mov	r3, r0
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	4b35      	ldr	r3, [pc, #212]	; (8000e68 <print+0x104>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000da2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000da4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d040      	beq.n	8000e30 <print+0xcc>
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	4619      	mov	r1, r3
 8000db4:	68f8      	ldr	r0, [r7, #12]
 8000db6:	f000 f869 	bl	8000e8c <print_value>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d039      	beq.n	8000e34 <print+0xd0>
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fd49 	bl	800085c <update_offset>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d00d      	beq.n	8000dee <print+0x8a>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	6938      	ldr	r0, [r7, #16]
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	3201      	adds	r2, #1
 8000ddc:	4611      	mov	r1, r2
 8000dde:	4798      	blx	r3
 8000de0:	6378      	str	r0, [r7, #52]	; 0x34
 8000de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d027      	beq.n	8000e38 <print+0xd4>
 8000de8:	2300      	movs	r3, #0
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	e01e      	b.n	8000e2c <print+0xc8>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	3201      	adds	r2, #1
 8000df6:	4610      	mov	r0, r2
 8000df8:	4798      	blx	r3
 8000dfa:	6378      	str	r0, [r7, #52]	; 0x34
 8000dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d01c      	beq.n	8000e3c <print+0xd8>
 8000e02:	6939      	ldr	r1, [r7, #16]
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	1c5a      	adds	r2, r3, #1
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	bf28      	it	cs
 8000e0e:	4613      	movcs	r3, r2
 8000e10:	461a      	mov	r2, r3
 8000e12:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000e14:	f017 f912 	bl	801803c <memcpy>
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e1c:	4413      	add	r3, r2
 8000e1e:	2200      	movs	r2, #0
 8000e20:	701a      	strb	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4610      	mov	r0, r2
 8000e2a:	4798      	blx	r3
 8000e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e2e:	e016      	b.n	8000e5e <print+0xfa>
 8000e30:	bf00      	nop
 8000e32:	e004      	b.n	8000e3e <print+0xda>
 8000e34:	bf00      	nop
 8000e36:	e002      	b.n	8000e3e <print+0xda>
 8000e38:	bf00      	nop
 8000e3a:	e000      	b.n	8000e3e <print+0xda>
 8000e3c:	bf00      	nop
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d004      	beq.n	8000e4e <print+0xea>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4610      	mov	r0, r2
 8000e4c:	4798      	blx	r3
 8000e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <print+0xf8>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000e5a:	4798      	blx	r3
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3738      	adds	r7, #56	; 0x38
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	0801d658 	.word	0x0801d658

08000e6c <cJSON_Print>:
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <cJSON_Print+0x1c>)
 8000e76:	2101      	movs	r1, #1
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f7ff ff73 	bl	8000d64 <print>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000000 	.word	0x20000000

08000e8c <print_value>:
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d002      	beq.n	8000ea6 <print_value+0x1a>
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d101      	bne.n	8000eaa <print_value+0x1e>
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e0c9      	b.n	800103e <print_value+0x1b2>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b80      	cmp	r3, #128	; 0x80
 8000eb2:	f000 808e 	beq.w	8000fd2 <print_value+0x146>
 8000eb6:	2b80      	cmp	r3, #128	; 0x80
 8000eb8:	f300 80c0 	bgt.w	800103c <print_value+0x1b0>
 8000ebc:	2b20      	cmp	r3, #32
 8000ebe:	dc49      	bgt.n	8000f54 <print_value+0xc8>
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f340 80bb 	ble.w	800103c <print_value+0x1b0>
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	2b1f      	cmp	r3, #31
 8000eca:	f200 80b7 	bhi.w	800103c <print_value+0x1b0>
 8000ece:	a201      	add	r2, pc, #4	; (adr r2, 8000ed4 <print_value+0x48>)
 8000ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed4:	08000f7f 	.word	0x08000f7f
 8000ed8:	08000fa3 	.word	0x08000fa3
 8000edc:	0800103d 	.word	0x0800103d
 8000ee0:	08000f5b 	.word	0x08000f5b
 8000ee4:	0800103d 	.word	0x0800103d
 8000ee8:	0800103d 	.word	0x0800103d
 8000eec:	0800103d 	.word	0x0800103d
 8000ef0:	08000fc7 	.word	0x08000fc7
 8000ef4:	0800103d 	.word	0x0800103d
 8000ef8:	0800103d 	.word	0x0800103d
 8000efc:	0800103d 	.word	0x0800103d
 8000f00:	0800103d 	.word	0x0800103d
 8000f04:	0800103d 	.word	0x0800103d
 8000f08:	0800103d 	.word	0x0800103d
 8000f0c:	0800103d 	.word	0x0800103d
 8000f10:	08001019 	.word	0x08001019
 8000f14:	0800103d 	.word	0x0800103d
 8000f18:	0800103d 	.word	0x0800103d
 8000f1c:	0800103d 	.word	0x0800103d
 8000f20:	0800103d 	.word	0x0800103d
 8000f24:	0800103d 	.word	0x0800103d
 8000f28:	0800103d 	.word	0x0800103d
 8000f2c:	0800103d 	.word	0x0800103d
 8000f30:	0800103d 	.word	0x0800103d
 8000f34:	0800103d 	.word	0x0800103d
 8000f38:	0800103d 	.word	0x0800103d
 8000f3c:	0800103d 	.word	0x0800103d
 8000f40:	0800103d 	.word	0x0800103d
 8000f44:	0800103d 	.word	0x0800103d
 8000f48:	0800103d 	.word	0x0800103d
 8000f4c:	0800103d 	.word	0x0800103d
 8000f50:	08001025 	.word	0x08001025
 8000f54:	2b40      	cmp	r3, #64	; 0x40
 8000f56:	d06b      	beq.n	8001030 <print_value+0x1a4>
 8000f58:	e070      	b.n	800103c <print_value+0x1b0>
 8000f5a:	2105      	movs	r1, #5
 8000f5c:	6838      	ldr	r0, [r7, #0]
 8000f5e:	f7ff fbe3 	bl	8000728 <ensure>
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <print_value+0xe2>
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e067      	b.n	800103e <print_value+0x1b2>
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4a35      	ldr	r2, [pc, #212]	; (8001048 <print_value+0x1bc>)
 8000f72:	6810      	ldr	r0, [r2, #0]
 8000f74:	6018      	str	r0, [r3, #0]
 8000f76:	7912      	ldrb	r2, [r2, #4]
 8000f78:	711a      	strb	r2, [r3, #4]
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e05f      	b.n	800103e <print_value+0x1b2>
 8000f7e:	2106      	movs	r1, #6
 8000f80:	6838      	ldr	r0, [r7, #0]
 8000f82:	f7ff fbd1 	bl	8000728 <ensure>
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <print_value+0x106>
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e055      	b.n	800103e <print_value+0x1b2>
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	4a2d      	ldr	r2, [pc, #180]	; (800104c <print_value+0x1c0>)
 8000f96:	6810      	ldr	r0, [r2, #0]
 8000f98:	6018      	str	r0, [r3, #0]
 8000f9a:	8892      	ldrh	r2, [r2, #4]
 8000f9c:	809a      	strh	r2, [r3, #4]
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e04d      	b.n	800103e <print_value+0x1b2>
 8000fa2:	2105      	movs	r1, #5
 8000fa4:	6838      	ldr	r0, [r7, #0]
 8000fa6:	f7ff fbbf 	bl	8000728 <ensure>
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <print_value+0x12a>
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e043      	b.n	800103e <print_value+0x1b2>
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	4a25      	ldr	r2, [pc, #148]	; (8001050 <print_value+0x1c4>)
 8000fba:	6810      	ldr	r0, [r2, #0]
 8000fbc:	6018      	str	r0, [r3, #0]
 8000fbe:	7912      	ldrb	r2, [r2, #4]
 8000fc0:	711a      	strb	r2, [r3, #4]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e03b      	b.n	800103e <print_value+0x1b2>
 8000fc6:	6839      	ldr	r1, [r7, #0]
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff fca9 	bl	8000920 <print_number>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e035      	b.n	800103e <print_value+0x1b2>
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <print_value+0x156>
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e02d      	b.n	800103e <print_value+0x1b2>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff f934 	bl	8000254 <strlen>
 8000fec:	4603      	mov	r3, r0
 8000fee:	3301      	adds	r3, #1
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68b9      	ldr	r1, [r7, #8]
 8000ff4:	6838      	ldr	r0, [r7, #0]
 8000ff6:	f7ff fb97 	bl	8000728 <ensure>
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d101      	bne.n	8001006 <print_value+0x17a>
 8001002:	2300      	movs	r3, #0
 8001004:	e01b      	b.n	800103e <print_value+0x1b2>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	691b      	ldr	r3, [r3, #16]
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	4619      	mov	r1, r3
 800100e:	68f8      	ldr	r0, [r7, #12]
 8001010:	f017 f814 	bl	801803c <memcpy>
 8001014:	2301      	movs	r3, #1
 8001016:	e012      	b.n	800103e <print_value+0x1b2>
 8001018:	6839      	ldr	r1, [r7, #0]
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff fe92 	bl	8000d44 <print_string>
 8001020:	4603      	mov	r3, r0
 8001022:	e00c      	b.n	800103e <print_value+0x1b2>
 8001024:	6839      	ldr	r1, [r7, #0]
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 f814 	bl	8001054 <print_array>
 800102c:	4603      	mov	r3, r0
 800102e:	e006      	b.n	800103e <print_value+0x1b2>
 8001030:	6839      	ldr	r1, [r7, #0]
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f000 f894 	bl	8001160 <print_object>
 8001038:	4603      	mov	r3, r0
 800103a:	e000      	b.n	800103e <print_value+0x1b2>
 800103c:	2300      	movs	r3, #0
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	08019ee8 	.word	0x08019ee8
 800104c:	08019f18 	.word	0x08019f18
 8001050:	08019f20 	.word	0x08019f20

08001054 <print_array>:
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d101      	bne.n	8001076 <print_array+0x22>
 8001072:	2300      	movs	r3, #0
 8001074:	e070      	b.n	8001158 <print_array+0x104>
 8001076:	2101      	movs	r1, #1
 8001078:	6838      	ldr	r0, [r7, #0]
 800107a:	f7ff fb55 	bl	8000728 <ensure>
 800107e:	6178      	str	r0, [r7, #20]
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <print_array+0x36>
 8001086:	2300      	movs	r3, #0
 8001088:	e066      	b.n	8001158 <print_array+0x104>
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	225b      	movs	r2, #91	; 0x5b
 800108e:	701a      	strb	r2, [r3, #0]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	1c5a      	adds	r2, r3, #1
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	e03d      	b.n	8001122 <print_array+0xce>
 80010a6:	6839      	ldr	r1, [r7, #0]
 80010a8:	6938      	ldr	r0, [r7, #16]
 80010aa:	f7ff feef 	bl	8000e8c <print_value>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d101      	bne.n	80010b8 <print_array+0x64>
 80010b4:	2300      	movs	r3, #0
 80010b6:	e04f      	b.n	8001158 <print_array+0x104>
 80010b8:	6838      	ldr	r0, [r7, #0]
 80010ba:	f7ff fbcf 	bl	800085c <update_offset>
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d02a      	beq.n	800111c <print_array+0xc8>
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <print_array+0x7e>
 80010ce:	2302      	movs	r3, #2
 80010d0:	e000      	b.n	80010d4 <print_array+0x80>
 80010d2:	2301      	movs	r3, #1
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	3301      	adds	r3, #1
 80010da:	4619      	mov	r1, r3
 80010dc:	6838      	ldr	r0, [r7, #0]
 80010de:	f7ff fb23 	bl	8000728 <ensure>
 80010e2:	6178      	str	r0, [r7, #20]
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <print_array+0x9a>
 80010ea:	2300      	movs	r3, #0
 80010ec:	e034      	b.n	8001158 <print_array+0x104>
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	1c5a      	adds	r2, r3, #1
 80010f2:	617a      	str	r2, [r7, #20]
 80010f4:	222c      	movs	r2, #44	; 0x2c
 80010f6:	701a      	strb	r2, [r3, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	695b      	ldr	r3, [r3, #20]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d004      	beq.n	800110a <print_array+0xb6>
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	617a      	str	r2, [r7, #20]
 8001106:	2220      	movs	r2, #32
 8001108:	701a      	strb	r2, [r3, #0]
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	689a      	ldr	r2, [r3, #8]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	441a      	add	r2, r3
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1be      	bne.n	80010a6 <print_array+0x52>
 8001128:	2102      	movs	r1, #2
 800112a:	6838      	ldr	r0, [r7, #0]
 800112c:	f7ff fafc 	bl	8000728 <ensure>
 8001130:	6178      	str	r0, [r7, #20]
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d101      	bne.n	800113c <print_array+0xe8>
 8001138:	2300      	movs	r3, #0
 800113a:	e00d      	b.n	8001158 <print_array+0x104>
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	1c5a      	adds	r2, r3, #1
 8001140:	617a      	str	r2, [r7, #20]
 8001142:	225d      	movs	r2, #93	; 0x5d
 8001144:	701a      	strb	r2, [r3, #0]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	1e5a      	subs	r2, r3, #1
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	2301      	movs	r3, #1
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <print_object>:
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	61bb      	str	r3, [r7, #24]
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <print_object+0x22>
 800117e:	2300      	movs	r3, #0
 8001180:	e108      	b.n	8001394 <print_object+0x234>
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <print_object+0x2e>
 800118a:	2302      	movs	r3, #2
 800118c:	e000      	b.n	8001190 <print_object+0x30>
 800118e:	2301      	movs	r3, #1
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	3301      	adds	r3, #1
 8001196:	4619      	mov	r1, r3
 8001198:	6838      	ldr	r0, [r7, #0]
 800119a:	f7ff fac5 	bl	8000728 <ensure>
 800119e:	61f8      	str	r0, [r7, #28]
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d101      	bne.n	80011aa <print_object+0x4a>
 80011a6:	2300      	movs	r3, #0
 80011a8:	e0f4      	b.n	8001394 <print_object+0x234>
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	1c5a      	adds	r2, r3, #1
 80011ae:	61fa      	str	r2, [r7, #28]
 80011b0:	227b      	movs	r2, #123	; 0x7b
 80011b2:	701a      	strb	r2, [r3, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	1c5a      	adds	r2, r3, #1
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	695b      	ldr	r3, [r3, #20]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d004      	beq.n	80011d0 <print_object+0x70>
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	1c5a      	adds	r2, r3, #1
 80011ca:	61fa      	str	r2, [r7, #28]
 80011cc:	220a      	movs	r2, #10
 80011ce:	701a      	strb	r2, [r3, #0]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	441a      	add	r2, r3
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	e0a0      	b.n	8001320 <print_object+0x1c0>
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d022      	beq.n	800122c <print_object+0xcc>
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	4619      	mov	r1, r3
 80011ec:	6838      	ldr	r0, [r7, #0]
 80011ee:	f7ff fa9b 	bl	8000728 <ensure>
 80011f2:	61f8      	str	r0, [r7, #28]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <print_object+0x9e>
 80011fa:	2300      	movs	r3, #0
 80011fc:	e0ca      	b.n	8001394 <print_object+0x234>
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	e007      	b.n	8001214 <print_object+0xb4>
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	1c5a      	adds	r2, r3, #1
 8001208:	61fa      	str	r2, [r7, #28]
 800120a:	2209      	movs	r2, #9
 800120c:	701a      	strb	r2, [r3, #0]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	3301      	adds	r3, #1
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	429a      	cmp	r2, r3
 800121c:	d3f2      	bcc.n	8001204 <print_object+0xa4>
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	68db      	ldr	r3, [r3, #12]
 8001226:	441a      	add	r2, r3
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	6839      	ldr	r1, [r7, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff fc56 	bl	8000ae4 <print_string_ptr>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <print_object+0xe2>
 800123e:	2300      	movs	r3, #0
 8001240:	e0a8      	b.n	8001394 <print_object+0x234>
 8001242:	6838      	ldr	r0, [r7, #0]
 8001244:	f7ff fb0a 	bl	800085c <update_offset>
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <print_object+0xf4>
 8001250:	2302      	movs	r3, #2
 8001252:	e000      	b.n	8001256 <print_object+0xf6>
 8001254:	2301      	movs	r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68f9      	ldr	r1, [r7, #12]
 800125a:	6838      	ldr	r0, [r7, #0]
 800125c:	f7ff fa64 	bl	8000728 <ensure>
 8001260:	61f8      	str	r0, [r7, #28]
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <print_object+0x10c>
 8001268:	2300      	movs	r3, #0
 800126a:	e093      	b.n	8001394 <print_object+0x234>
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	61fa      	str	r2, [r7, #28]
 8001272:	223a      	movs	r2, #58	; 0x3a
 8001274:	701a      	strb	r2, [r3, #0]
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d004      	beq.n	8001288 <print_object+0x128>
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	1c5a      	adds	r2, r3, #1
 8001282:	61fa      	str	r2, [r7, #28]
 8001284:	2209      	movs	r2, #9
 8001286:	701a      	strb	r2, [r3, #0]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	441a      	add	r2, r3
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	6839      	ldr	r1, [r7, #0]
 8001296:	69b8      	ldr	r0, [r7, #24]
 8001298:	f7ff fdf8 	bl	8000e8c <print_value>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <print_object+0x146>
 80012a2:	2300      	movs	r3, #0
 80012a4:	e076      	b.n	8001394 <print_object+0x234>
 80012a6:	6838      	ldr	r0, [r7, #0]
 80012a8:	f7ff fad8 	bl	800085c <update_offset>
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	695b      	ldr	r3, [r3, #20]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <print_object+0x158>
 80012b4:	2201      	movs	r2, #1
 80012b6:	e000      	b.n	80012ba <print_object+0x15a>
 80012b8:	2200      	movs	r2, #0
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <print_object+0x166>
 80012c2:	2301      	movs	r3, #1
 80012c4:	e000      	b.n	80012c8 <print_object+0x168>
 80012c6:	2300      	movs	r3, #0
 80012c8:	4413      	add	r3, r2
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	3301      	adds	r3, #1
 80012d0:	4619      	mov	r1, r3
 80012d2:	6838      	ldr	r0, [r7, #0]
 80012d4:	f7ff fa28 	bl	8000728 <ensure>
 80012d8:	61f8      	str	r0, [r7, #28]
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d101      	bne.n	80012e4 <print_object+0x184>
 80012e0:	2300      	movs	r3, #0
 80012e2:	e057      	b.n	8001394 <print_object+0x234>
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d004      	beq.n	80012f6 <print_object+0x196>
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	1c5a      	adds	r2, r3, #1
 80012f0:	61fa      	str	r2, [r7, #28]
 80012f2:	222c      	movs	r2, #44	; 0x2c
 80012f4:	701a      	strb	r2, [r3, #0]
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d004      	beq.n	8001308 <print_object+0x1a8>
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	1c5a      	adds	r2, r3, #1
 8001302:	61fa      	str	r2, [r7, #28]
 8001304:	220a      	movs	r2, #10
 8001306:	701a      	strb	r2, [r3, #0]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	441a      	add	r2, r3
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	61bb      	str	r3, [r7, #24]
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	2b00      	cmp	r3, #0
 8001324:	f47f af5b 	bne.w	80011de <print_object+0x7e>
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <print_object+0x1d8>
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	3301      	adds	r3, #1
 8001336:	e000      	b.n	800133a <print_object+0x1da>
 8001338:	2302      	movs	r3, #2
 800133a:	4619      	mov	r1, r3
 800133c:	6838      	ldr	r0, [r7, #0]
 800133e:	f7ff f9f3 	bl	8000728 <ensure>
 8001342:	61f8      	str	r0, [r7, #28]
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <print_object+0x1ee>
 800134a:	2300      	movs	r3, #0
 800134c:	e022      	b.n	8001394 <print_object+0x234>
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d010      	beq.n	8001378 <print_object+0x218>
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	e007      	b.n	800136c <print_object+0x20c>
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	1c5a      	adds	r2, r3, #1
 8001360:	61fa      	str	r2, [r7, #28]
 8001362:	2209      	movs	r2, #9
 8001364:	701a      	strb	r2, [r3, #0]
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	3301      	adds	r3, #1
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	3b01      	subs	r3, #1
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	429a      	cmp	r2, r3
 8001376:	d3f1      	bcc.n	800135c <print_object+0x1fc>
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	61fa      	str	r2, [r7, #28]
 800137e:	227d      	movs	r2, #125	; 0x7d
 8001380:	701a      	strb	r2, [r3, #0]
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	1e5a      	subs	r2, r3, #1
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	2301      	movs	r3, #1
 8001394:	4618      	mov	r0, r3
 8001396:	3720      	adds	r7, #32
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <suffix_object>:
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	683a      	ldr	r2, [r7, #0]
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <add_item_to_array>:
 80013be:	b580      	push	{r7, lr}
 80013c0:	b084      	sub	sp, #16
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	6039      	str	r1, [r7, #0]
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d006      	beq.n	80013e0 <add_item_to_array+0x22>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <add_item_to_array+0x22>
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d101      	bne.n	80013e4 <add_item_to_array+0x26>
 80013e0:	2300      	movs	r3, #0
 80013e2:	e01e      	b.n	8001422 <add_item_to_array+0x64>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d109      	bne.n	8001404 <add_item_to_array+0x46>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	683a      	ldr	r2, [r7, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	e00d      	b.n	8001420 <add_item_to_array+0x62>
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d009      	beq.n	8001420 <add_item_to_array+0x62>
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	6839      	ldr	r1, [r7, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ffc2 	bl	800139c <suffix_object>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	2301      	movs	r3, #1
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <cJSON_AddItemToArray>:
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
 8001432:	6039      	str	r1, [r7, #0]
 8001434:	6839      	ldr	r1, [r7, #0]
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ffc1 	bl	80013be <add_item_to_array>
 800143c:	4603      	mov	r3, r0
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <cast_away_const>:
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <add_item_to_object>:
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
 8001468:	603b      	str	r3, [r7, #0]
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d009      	beq.n	800148c <add_item_to_object+0x30>
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d006      	beq.n	800148c <add_item_to_object+0x30>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <add_item_to_object+0x30>
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	429a      	cmp	r2, r3
 800148a:	d101      	bne.n	8001490 <add_item_to_object+0x34>
 800148c:	2300      	movs	r3, #0
 800148e:	e036      	b.n	80014fe <add_item_to_object+0xa2>
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d009      	beq.n	80014aa <add_item_to_object+0x4e>
 8001496:	68b8      	ldr	r0, [r7, #8]
 8001498:	f7ff ffd5 	bl	8001446 <cast_away_const>
 800149c:	6178      	str	r0, [r7, #20]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	e00e      	b.n	80014c8 <add_item_to_object+0x6c>
 80014aa:	6839      	ldr	r1, [r7, #0]
 80014ac:	68b8      	ldr	r0, [r7, #8]
 80014ae:	f7ff f8ab 	bl	8000608 <cJSON_strdup>
 80014b2:	6178      	str	r0, [r7, #20]
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <add_item_to_object+0x62>
 80014ba:	2300      	movs	r3, #0
 80014bc:	e01f      	b.n	80014fe <add_item_to_object+0xa2>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d109      	bne.n	80014e8 <add_item_to_object+0x8c>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d005      	beq.n	80014e8 <add_item_to_object+0x8c>
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	6a12      	ldr	r2, [r2, #32]
 80014e4:	4610      	mov	r0, r2
 80014e6:	4798      	blx	r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	697a      	ldr	r2, [r7, #20]
 80014ec:	621a      	str	r2, [r3, #32]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f7ff ff61 	bl	80013be <add_item_to_array>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4618      	mov	r0, r3
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <cJSON_AddNumberToObject>:
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af02      	add	r7, sp, #8
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	ed87 0b00 	vstr	d0, [r7]
 8001516:	ed97 0b00 	vldr	d0, [r7]
 800151a:	f000 f83d 	bl	8001598 <cJSON_CreateNumber>
 800151e:	6178      	str	r0, [r7, #20]
 8001520:	2300      	movs	r3, #0
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <cJSON_AddNumberToObject+0x44>)
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	68b9      	ldr	r1, [r7, #8]
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f7ff ff96 	bl	800145c <add_item_to_object>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <cJSON_AddNumberToObject+0x32>
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	e003      	b.n	8001542 <cJSON_AddNumberToObject+0x3a>
 800153a:	6978      	ldr	r0, [r7, #20]
 800153c:	f7ff f8a2 	bl	8000684 <cJSON_Delete>
 8001540:	2300      	movs	r3, #0
 8001542:	4618      	mov	r0, r3
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000000 	.word	0x20000000

08001550 <cJSON_AddStringToObject>:
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af02      	add	r7, sp, #8
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f000 f865 	bl	800162c <cJSON_CreateString>
 8001562:	6178      	str	r0, [r7, #20]
 8001564:	2300      	movs	r3, #0
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	4b09      	ldr	r3, [pc, #36]	; (8001590 <cJSON_AddStringToObject+0x40>)
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	68b9      	ldr	r1, [r7, #8]
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	f7ff ff74 	bl	800145c <add_item_to_object>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <cJSON_AddStringToObject+0x2e>
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	e003      	b.n	8001586 <cJSON_AddStringToObject+0x36>
 800157e:	6978      	ldr	r0, [r7, #20]
 8001580:	f7ff f880 	bl	8000684 <cJSON_Delete>
 8001584:	2300      	movs	r3, #0
 8001586:	4618      	mov	r0, r3
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000000 	.word	0x20000000
 8001594:	00000000 	.word	0x00000000

08001598 <cJSON_CreateNumber>:
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	ed87 0b00 	vstr	d0, [r7]
 80015a2:	4821      	ldr	r0, [pc, #132]	; (8001628 <cJSON_CreateNumber+0x90>)
 80015a4:	f7ff f858 	bl	8000658 <cJSON_New_Item>
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d02b      	beq.n	8001608 <cJSON_CreateNumber+0x70>
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2208      	movs	r2, #8
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	68f9      	ldr	r1, [r7, #12]
 80015b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015bc:	e9c1 2306 	strd	r2, r3, [r1, #24]
 80015c0:	ed97 7b00 	vldr	d7, [r7]
 80015c4:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8001618 <cJSON_CreateNumber+0x80>
 80015c8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80015cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d0:	db04      	blt.n	80015dc <cJSON_CreateNumber+0x44>
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80015d8:	615a      	str	r2, [r3, #20]
 80015da:	e015      	b.n	8001608 <cJSON_CreateNumber+0x70>
 80015dc:	ed97 7b00 	vldr	d7, [r7]
 80015e0:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8001620 <cJSON_CreateNumber+0x88>
 80015e4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80015e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ec:	d804      	bhi.n	80015f8 <cJSON_CreateNumber+0x60>
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80015f4:	615a      	str	r2, [r3, #20]
 80015f6:	e007      	b.n	8001608 <cJSON_CreateNumber+0x70>
 80015f8:	ed97 7b00 	vldr	d7, [r7]
 80015fc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001600:	ee17 2a90 	vmov	r2, s15
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	615a      	str	r2, [r3, #20]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	f3af 8000 	nop.w
 8001618:	ffc00000 	.word	0xffc00000
 800161c:	41dfffff 	.word	0x41dfffff
 8001620:	00000000 	.word	0x00000000
 8001624:	c1e00000 	.word	0xc1e00000
 8001628:	20000000 	.word	0x20000000

0800162c <cJSON_CreateString>:
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	480f      	ldr	r0, [pc, #60]	; (8001674 <cJSON_CreateString+0x48>)
 8001636:	f7ff f80f 	bl	8000658 <cJSON_New_Item>
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d012      	beq.n	8001668 <cJSON_CreateString+0x3c>
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2210      	movs	r2, #16
 8001646:	60da      	str	r2, [r3, #12]
 8001648:	490a      	ldr	r1, [pc, #40]	; (8001674 <cJSON_CreateString+0x48>)
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7fe ffdc 	bl	8000608 <cJSON_strdup>
 8001650:	4602      	mov	r2, r0
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	611a      	str	r2, [r3, #16]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d104      	bne.n	8001668 <cJSON_CreateString+0x3c>
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f7ff f810 	bl	8000684 <cJSON_Delete>
 8001664:	2300      	movs	r3, #0
 8001666:	e000      	b.n	800166a <cJSON_CreateString+0x3e>
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	20000000 	.word	0x20000000

08001678 <cJSON_CreateArray>:
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	4807      	ldr	r0, [pc, #28]	; (800169c <cJSON_CreateArray+0x24>)
 8001680:	f7fe ffea 	bl	8000658 <cJSON_New_Item>
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <cJSON_CreateArray+0x1a>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2220      	movs	r2, #32
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000000 	.word	0x20000000

080016a0 <cJSON_CreateObject>:
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4807      	ldr	r0, [pc, #28]	; (80016c4 <cJSON_CreateObject+0x24>)
 80016a8:	f7fe ffd6 	bl	8000658 <cJSON_New_Item>
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d002      	beq.n	80016ba <cJSON_CreateObject+0x1a>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2240      	movs	r2, #64	; 0x40
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	20000000 	.word	0x20000000

080016c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4a07      	ldr	r2, [pc, #28]	; (80016f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80016d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	4a06      	ldr	r2, [pc, #24]	; (80016f8 <vApplicationGetIdleTaskMemory+0x30>)
 80016de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2280      	movs	r2, #128	; 0x80
 80016e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	200007b0 	.word	0x200007b0
 80016f8:	20000864 	.word	0x20000864

080016fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016fc:	b5b0      	push	{r4, r5, r7, lr}
 80016fe:	b08e      	sub	sp, #56	; 0x38
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001702:	f001 fc6e 	bl	8002fe2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001706:	f000 f835 	bl	8001774 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800170a:	f000 f901 	bl	8001910 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800170e:	f000 f8a1 	bl	8001854 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001712:	f000 f8cf 	bl	80018b4 <MX_USB_OTG_FS_PCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of WebServerTask */
  osThreadStaticDef(WebServerTask, StartWebServerTask, osPriorityNormal, 0, 2048, WebServerTaskBuffer, &WebServerTaskControlBlock);
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <main+0x68>)
 8001718:	f107 041c 	add.w	r4, r7, #28
 800171c:	461d      	mov	r5, r3
 800171e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001722:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001726:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  WebServerTaskHandle = osThreadCreate(osThread(WebServerTask), NULL);
 800172a:	f107 031c 	add.w	r3, r7, #28
 800172e:	2100      	movs	r1, #0
 8001730:	4618      	mov	r0, r3
 8001732:	f006 fc08 	bl	8007f46 <osThreadCreate>
 8001736:	4603      	mov	r3, r0
 8001738:	4a0b      	ldr	r2, [pc, #44]	; (8001768 <main+0x6c>)
 800173a:	6013      	str	r3, [r2, #0]

  /* definition and creation of SSIDTask */
  osThreadStaticDef(SSIDTask, StartSSIDTask, osPriorityNormal, 0, 256, SSIDTaskBuffer, &SSIDTaskControlBlock);
 800173c:	4b0b      	ldr	r3, [pc, #44]	; (800176c <main+0x70>)
 800173e:	463c      	mov	r4, r7
 8001740:	461d      	mov	r5, r3
 8001742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001744:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001746:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800174a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SSIDTaskHandle = osThreadCreate(osThread(SSIDTask), NULL);
 800174e:	463b      	mov	r3, r7
 8001750:	2100      	movs	r1, #0
 8001752:	4618      	mov	r0, r3
 8001754:	f006 fbf7 	bl	8007f46 <osThreadCreate>
 8001758:	4603      	mov	r3, r0
 800175a:	4a05      	ldr	r2, [pc, #20]	; (8001770 <main+0x74>)
 800175c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800175e:	f006 fbdb 	bl	8007f18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001762:	e7fe      	b.n	8001762 <main+0x66>
 8001764:	08019f44 	.word	0x08019f44
 8001768:	2000b13c 	.word	0x2000b13c
 800176c:	08019f60 	.word	0x08019f60
 8001770:	20008c80 	.word	0x20008c80

08001774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b094      	sub	sp, #80	; 0x50
 8001778:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800177a:	f107 031c 	add.w	r3, r7, #28
 800177e:	2234      	movs	r2, #52	; 0x34
 8001780:	2100      	movs	r1, #0
 8001782:	4618      	mov	r0, r3
 8001784:	f016 fc82 	bl	801808c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001788:	f107 0308 	add.w	r3, r7, #8
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001798:	f003 f9e8 	bl	8004b6c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800179c:	4b2b      	ldr	r3, [pc, #172]	; (800184c <SystemClock_Config+0xd8>)
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	4a2a      	ldr	r2, [pc, #168]	; (800184c <SystemClock_Config+0xd8>)
 80017a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a6:	6413      	str	r3, [r2, #64]	; 0x40
 80017a8:	4b28      	ldr	r3, [pc, #160]	; (800184c <SystemClock_Config+0xd8>)
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b0:	607b      	str	r3, [r7, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017b4:	4b26      	ldr	r3, [pc, #152]	; (8001850 <SystemClock_Config+0xdc>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a25      	ldr	r2, [pc, #148]	; (8001850 <SystemClock_Config+0xdc>)
 80017ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	4b23      	ldr	r3, [pc, #140]	; (8001850 <SystemClock_Config+0xdc>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017c8:	603b      	str	r3, [r7, #0]
 80017ca:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017cc:	2301      	movs	r3, #1
 80017ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80017d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80017d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017d6:	2302      	movs	r3, #2
 80017d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017e0:	2304      	movs	r3, #4
 80017e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80017e4:	23d8      	movs	r3, #216	; 0xd8
 80017e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017e8:	2302      	movs	r3, #2
 80017ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80017ec:	2309      	movs	r3, #9
 80017ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017f0:	2302      	movs	r3, #2
 80017f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017f4:	f107 031c 	add.w	r3, r7, #28
 80017f8:	4618      	mov	r0, r3
 80017fa:	f003 fa17 	bl	8004c2c <HAL_RCC_OscConfig>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001804:	f000 f97c 	bl	8001b00 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001808:	f003 f9c0 	bl	8004b8c <HAL_PWREx_EnableOverDrive>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001812:	f000 f975 	bl	8001b00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001816:	230f      	movs	r3, #15
 8001818:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800181a:	2302      	movs	r3, #2
 800181c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001822:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001826:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800182c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800182e:	f107 0308 	add.w	r3, r7, #8
 8001832:	2107      	movs	r1, #7
 8001834:	4618      	mov	r0, r3
 8001836:	f003 fca7 	bl	8005188 <HAL_RCC_ClockConfig>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001840:	f000 f95e 	bl	8001b00 <Error_Handler>
  }
}
 8001844:	bf00      	nop
 8001846:	3750      	adds	r7, #80	; 0x50
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40023800 	.word	0x40023800
 8001850:	40007000 	.word	0x40007000

08001854 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001858:	4b14      	ldr	r3, [pc, #80]	; (80018ac <MX_USART3_UART_Init+0x58>)
 800185a:	4a15      	ldr	r2, [pc, #84]	; (80018b0 <MX_USART3_UART_Init+0x5c>)
 800185c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800185e:	4b13      	ldr	r3, [pc, #76]	; (80018ac <MX_USART3_UART_Init+0x58>)
 8001860:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001864:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <MX_USART3_UART_Init+0x58>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <MX_USART3_UART_Init+0x58>)
 800186e:	2200      	movs	r2, #0
 8001870:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <MX_USART3_UART_Init+0x58>)
 8001874:	2200      	movs	r2, #0
 8001876:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001878:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <MX_USART3_UART_Init+0x58>)
 800187a:	220c      	movs	r2, #12
 800187c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <MX_USART3_UART_Init+0x58>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <MX_USART3_UART_Init+0x58>)
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800188a:	4b08      	ldr	r3, [pc, #32]	; (80018ac <MX_USART3_UART_Init+0x58>)
 800188c:	2200      	movs	r2, #0
 800188e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <MX_USART3_UART_Init+0x58>)
 8001892:	2200      	movs	r2, #0
 8001894:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001896:	4805      	ldr	r0, [pc, #20]	; (80018ac <MX_USART3_UART_Init+0x58>)
 8001898:	f004 fdb2 	bl	8006400 <HAL_UART_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80018a2:	f000 f92d 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20008744 	.word	0x20008744
 80018b0:	40004800 	.word	0x40004800

080018b4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80018b8:	4b14      	ldr	r3, [pc, #80]	; (800190c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80018be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80018c0:	4b12      	ldr	r3, [pc, #72]	; (800190c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018c2:	2206      	movs	r2, #6
 80018c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80018c6:	4b11      	ldr	r3, [pc, #68]	; (800190c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018c8:	2202      	movs	r2, #2
 80018ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80018cc:	4b0f      	ldr	r3, [pc, #60]	; (800190c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018d4:	2202      	movs	r2, #2
 80018d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018da:	2201      	movs	r2, #1
 80018dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80018f6:	4805      	ldr	r0, [pc, #20]	; (800190c <MX_USB_OTG_FS_PCD_Init+0x58>)
 80018f8:	f002 ffef 	bl	80048da <HAL_PCD_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001902:	f000 f8fd 	bl	8001b00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	2000887c 	.word	0x2000887c

08001910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08c      	sub	sp, #48	; 0x30
 8001914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001916:	f107 031c 	add.w	r3, r7, #28
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]
 8001924:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001926:	4b47      	ldr	r3, [pc, #284]	; (8001a44 <MX_GPIO_Init+0x134>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a46      	ldr	r2, [pc, #280]	; (8001a44 <MX_GPIO_Init+0x134>)
 800192c:	f043 0304 	orr.w	r3, r3, #4
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b44      	ldr	r3, [pc, #272]	; (8001a44 <MX_GPIO_Init+0x134>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	61bb      	str	r3, [r7, #24]
 800193c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800193e:	4b41      	ldr	r3, [pc, #260]	; (8001a44 <MX_GPIO_Init+0x134>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a40      	ldr	r2, [pc, #256]	; (8001a44 <MX_GPIO_Init+0x134>)
 8001944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b3e      	ldr	r3, [pc, #248]	; (8001a44 <MX_GPIO_Init+0x134>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	4b3b      	ldr	r3, [pc, #236]	; (8001a44 <MX_GPIO_Init+0x134>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a3a      	ldr	r2, [pc, #232]	; (8001a44 <MX_GPIO_Init+0x134>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b38      	ldr	r3, [pc, #224]	; (8001a44 <MX_GPIO_Init+0x134>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800196e:	4b35      	ldr	r3, [pc, #212]	; (8001a44 <MX_GPIO_Init+0x134>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	4a34      	ldr	r2, [pc, #208]	; (8001a44 <MX_GPIO_Init+0x134>)
 8001974:	f043 0302 	orr.w	r3, r3, #2
 8001978:	6313      	str	r3, [r2, #48]	; 0x30
 800197a:	4b32      	ldr	r3, [pc, #200]	; (8001a44 <MX_GPIO_Init+0x134>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001986:	4b2f      	ldr	r3, [pc, #188]	; (8001a44 <MX_GPIO_Init+0x134>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a2e      	ldr	r2, [pc, #184]	; (8001a44 <MX_GPIO_Init+0x134>)
 800198c:	f043 0308 	orr.w	r3, r3, #8
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b2c      	ldr	r3, [pc, #176]	; (8001a44 <MX_GPIO_Init+0x134>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800199e:	4b29      	ldr	r3, [pc, #164]	; (8001a44 <MX_GPIO_Init+0x134>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a28      	ldr	r2, [pc, #160]	; (8001a44 <MX_GPIO_Init+0x134>)
 80019a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <MX_GPIO_Init+0x134>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80019b6:	2200      	movs	r2, #0
 80019b8:	f244 0181 	movw	r1, #16513	; 0x4081
 80019bc:	4822      	ldr	r0, [pc, #136]	; (8001a48 <MX_GPIO_Init+0x138>)
 80019be:	f002 ff73 	bl	80048a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2140      	movs	r1, #64	; 0x40
 80019c6:	4821      	ldr	r0, [pc, #132]	; (8001a4c <MX_GPIO_Init+0x13c>)
 80019c8:	f002 ff6e 	bl	80048a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80019cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80019dc:	f107 031c 	add.w	r3, r7, #28
 80019e0:	4619      	mov	r1, r3
 80019e2:	481b      	ldr	r0, [pc, #108]	; (8001a50 <MX_GPIO_Init+0x140>)
 80019e4:	f002 fdb4 	bl	8004550 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80019e8:	f244 0381 	movw	r3, #16513	; 0x4081
 80019ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ee:	2301      	movs	r3, #1
 80019f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2300      	movs	r3, #0
 80019f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fa:	f107 031c 	add.w	r3, r7, #28
 80019fe:	4619      	mov	r1, r3
 8001a00:	4811      	ldr	r0, [pc, #68]	; (8001a48 <MX_GPIO_Init+0x138>)
 8001a02:	f002 fda5 	bl	8004550 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001a06:	2340      	movs	r3, #64	; 0x40
 8001a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001a16:	f107 031c 	add.w	r3, r7, #28
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	480b      	ldr	r0, [pc, #44]	; (8001a4c <MX_GPIO_Init+0x13c>)
 8001a1e:	f002 fd97 	bl	8004550 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001a22:	2380      	movs	r3, #128	; 0x80
 8001a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a26:	2300      	movs	r3, #0
 8001a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	4619      	mov	r1, r3
 8001a34:	4805      	ldr	r0, [pc, #20]	; (8001a4c <MX_GPIO_Init+0x13c>)
 8001a36:	f002 fd8b 	bl	8004550 <HAL_GPIO_Init>

}
 8001a3a:	bf00      	nop
 8001a3c:	3730      	adds	r7, #48	; 0x30
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	40021800 	.word	0x40021800
 8001a50:	40020800 	.word	0x40020800

08001a54 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */

  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001a5c:	1d39      	adds	r1, r7, #4
 8001a5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a62:	2201      	movs	r2, #1
 8001a64:	4803      	ldr	r0, [pc, #12]	; (8001a74 <__io_putchar+0x20>)
 8001a66:	f004 fd19 	bl	800649c <HAL_UART_Transmit>

  return ch;
 8001a6a:	687b      	ldr	r3, [r7, #4]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20008744 	.word	0x20008744

08001a78 <StartWebServerTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartWebServerTask */
void StartWebServerTask(void const * argument)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001a80:	f005 fca0 	bl	80073c4 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  http_server_init();
 8001a84:	f001 fa6c 	bl	8002f60 <http_server_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a88:	2001      	movs	r0, #1
 8001a8a:	f006 faa8 	bl	8007fde <osDelay>
 8001a8e:	e7fb      	b.n	8001a88 <StartWebServerTask+0x10>

08001a90 <StartSSIDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSSIDTask */
void StartSSIDTask(void const * argument)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSSIDTask */
  /* Infinite loop */
  for(;;)
  {
	   if (strlen(randomSSID) != 0) {
 8001a98:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <StartSSIDTask+0x40>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d012      	beq.n	8001ac6 <StartSSIDTask+0x36>
			  if (HAL_GetTick() - Ti >= 500000){
 8001aa0:	f001 fac0 	bl	8003024 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <StartSSIDTask+0x44>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <StartSSIDTask+0x48>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d909      	bls.n	8001ac6 <StartSSIDTask+0x36>
				  Ti = HAL_GetTick();
 8001ab2:	f001 fab7 	bl	8003024 <HAL_GetTick>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4a06      	ldr	r2, [pc, #24]	; (8001ad4 <StartSSIDTask+0x44>)
 8001aba:	6013      	str	r3, [r2, #0]
				  memset(&randomSSID, '\0', sizeof(randomSSID));
 8001abc:	221b      	movs	r2, #27
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4803      	ldr	r0, [pc, #12]	; (8001ad0 <StartSSIDTask+0x40>)
 8001ac2:	f016 fae3 	bl	801808c <memset>
				   //printf("StartTaskToken1 \n");
			  }
	   }
    osDelay(1);
 8001ac6:	2001      	movs	r0, #1
 8001ac8:	f006 fa89 	bl	8007fde <osDelay>
	   if (strlen(randomSSID) != 0) {
 8001acc:	e7e4      	b.n	8001a98 <StartSSIDTask+0x8>
 8001ace:	bf00      	nop
 8001ad0:	20000a74 	.word	0x20000a74
 8001ad4:	2000ad38 	.word	0x2000ad38
 8001ad8:	0007a11f 	.word	0x0007a11f

08001adc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a04      	ldr	r2, [pc, #16]	; (8001afc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d101      	bne.n	8001af2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001aee:	f001 fa85 	bl	8002ffc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40001000 	.word	0x40001000

08001b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b04:	b672      	cpsid	i
}
 8001b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <Error_Handler+0x8>
	...

08001b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <HAL_MspInit+0x4c>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	4a10      	ldr	r2, [pc, #64]	; (8001b58 <HAL_MspInit+0x4c>)
 8001b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <HAL_MspInit+0x4c>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <HAL_MspInit+0x4c>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <HAL_MspInit+0x4c>)
 8001b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b34:	6453      	str	r3, [r2, #68]	; 0x44
 8001b36:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <HAL_MspInit+0x4c>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	210f      	movs	r1, #15
 8001b46:	f06f 0001 	mvn.w	r0, #1
 8001b4a:	f001 fb53 	bl	80031f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023800 	.word	0x40023800

08001b5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b0ae      	sub	sp, #184	; 0xb8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	2290      	movs	r2, #144	; 0x90
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f016 fa85 	bl	801808c <memset>
  if(huart->Instance==USART3)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a22      	ldr	r2, [pc, #136]	; (8001c10 <HAL_UART_MspInit+0xb4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d13c      	bne.n	8001c06 <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001b8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b90:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001b92:	2300      	movs	r3, #0
 8001b94:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f003 fd28 	bl	80055f0 <HAL_RCCEx_PeriphCLKConfig>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ba6:	f7ff ffab 	bl	8001b00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001baa:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <HAL_UART_MspInit+0xb8>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	4a19      	ldr	r2, [pc, #100]	; (8001c14 <HAL_UART_MspInit+0xb8>)
 8001bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb6:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <HAL_UART_MspInit+0xb8>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bc2:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <HAL_UART_MspInit+0xb8>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a13      	ldr	r2, [pc, #76]	; (8001c14 <HAL_UART_MspInit+0xb8>)
 8001bc8:	f043 0308 	orr.w	r3, r3, #8
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <HAL_UART_MspInit+0xb8>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001bda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bf4:	2307      	movs	r3, #7
 8001bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bfa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4805      	ldr	r0, [pc, #20]	; (8001c18 <HAL_UART_MspInit+0xbc>)
 8001c02:	f002 fca5 	bl	8004550 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c06:	bf00      	nop
 8001c08:	37b8      	adds	r7, #184	; 0xb8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40004800 	.word	0x40004800
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40020c00 	.word	0x40020c00

08001c1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b0ae      	sub	sp, #184	; 0xb8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	2290      	movs	r2, #144	; 0x90
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f016 fa25 	bl	801808c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c4a:	d159      	bne.n	8001d00 <HAL_PCD_MspInit+0xe4>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001c4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c50:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f003 fcc7 	bl	80055f0 <HAL_RCCEx_PeriphCLKConfig>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001c68:	f7ff ff4a 	bl	8001b00 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6c:	4b26      	ldr	r3, [pc, #152]	; (8001d08 <HAL_PCD_MspInit+0xec>)
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c70:	4a25      	ldr	r2, [pc, #148]	; (8001d08 <HAL_PCD_MspInit+0xec>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6313      	str	r3, [r2, #48]	; 0x30
 8001c78:	4b23      	ldr	r3, [pc, #140]	; (8001d08 <HAL_PCD_MspInit+0xec>)
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c84:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001c88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c9e:	230a      	movs	r3, #10
 8001ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4818      	ldr	r0, [pc, #96]	; (8001d0c <HAL_PCD_MspInit+0xf0>)
 8001cac:	f002 fc50 	bl	8004550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001cc4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4810      	ldr	r0, [pc, #64]	; (8001d0c <HAL_PCD_MspInit+0xf0>)
 8001ccc:	f002 fc40 	bl	8004550 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001cd0:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <HAL_PCD_MspInit+0xec>)
 8001cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd4:	4a0c      	ldr	r2, [pc, #48]	; (8001d08 <HAL_PCD_MspInit+0xec>)
 8001cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cda:	6353      	str	r3, [r2, #52]	; 0x34
 8001cdc:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <HAL_PCD_MspInit+0xec>)
 8001cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <HAL_PCD_MspInit+0xec>)
 8001cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cec:	4a06      	ldr	r2, [pc, #24]	; (8001d08 <HAL_PCD_MspInit+0xec>)
 8001cee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf2:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf4:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <HAL_PCD_MspInit+0xec>)
 8001cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001d00:	bf00      	nop
 8001d02:	37b8      	adds	r7, #184	; 0xb8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40020000 	.word	0x40020000

08001d10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08c      	sub	sp, #48	; 0x30
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001d20:	2200      	movs	r2, #0
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	2036      	movs	r0, #54	; 0x36
 8001d26:	f001 fa65 	bl	80031f4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d2a:	2036      	movs	r0, #54	; 0x36
 8001d2c:	f001 fa7e 	bl	800322c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d30:	4b1f      	ldr	r3, [pc, #124]	; (8001db0 <HAL_InitTick+0xa0>)
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	4a1e      	ldr	r2, [pc, #120]	; (8001db0 <HAL_InitTick+0xa0>)
 8001d36:	f043 0310 	orr.w	r3, r3, #16
 8001d3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3c:	4b1c      	ldr	r3, [pc, #112]	; (8001db0 <HAL_InitTick+0xa0>)
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	f003 0310 	and.w	r3, r3, #16
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d48:	f107 0210 	add.w	r2, r7, #16
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	4611      	mov	r1, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f003 fc1a 	bl	800558c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001d58:	f003 fbf0 	bl	800553c <HAL_RCC_GetPCLK1Freq>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d64:	4a13      	ldr	r2, [pc, #76]	; (8001db4 <HAL_InitTick+0xa4>)
 8001d66:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6a:	0c9b      	lsrs	r3, r3, #18
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d70:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <HAL_InitTick+0xa8>)
 8001d72:	4a12      	ldr	r2, [pc, #72]	; (8001dbc <HAL_InitTick+0xac>)
 8001d74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d76:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <HAL_InitTick+0xa8>)
 8001d78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d7c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d7e:	4a0e      	ldr	r2, [pc, #56]	; (8001db8 <HAL_InitTick+0xa8>)
 8001d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d82:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <HAL_InitTick+0xa8>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <HAL_InitTick+0xa8>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001d90:	4809      	ldr	r0, [pc, #36]	; (8001db8 <HAL_InitTick+0xa8>)
 8001d92:	f004 f855 	bl	8005e40 <HAL_TIM_Base_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d104      	bne.n	8001da6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001d9c:	4806      	ldr	r0, [pc, #24]	; (8001db8 <HAL_InitTick+0xa8>)
 8001d9e:	f004 f8b1 	bl	8005f04 <HAL_TIM_Base_Start_IT>
 8001da2:	4603      	mov	r3, r0
 8001da4:	e000      	b.n	8001da8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3730      	adds	r7, #48	; 0x30
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40023800 	.word	0x40023800
 8001db4:	431bde83 	.word	0x431bde83
 8001db8:	2000b140 	.word	0x2000b140
 8001dbc:	40001000 	.word	0x40001000

08001dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <NMI_Handler+0x4>

08001dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dca:	e7fe      	b.n	8001dca <HardFault_Handler+0x4>

08001dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <MemManage_Handler+0x4>

08001dd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dd6:	e7fe      	b.n	8001dd6 <BusFault_Handler+0x4>

08001dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <UsageFault_Handler+0x4>

08001dde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001df0:	4802      	ldr	r0, [pc, #8]	; (8001dfc <TIM6_DAC_IRQHandler+0x10>)
 8001df2:	f004 f8ff 	bl	8005ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	2000b140 	.word	0x2000b140

08001e00 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001e04:	4802      	ldr	r0, [pc, #8]	; (8001e10 <ETH_IRQHandler+0x10>)
 8001e06:	f001 fe01 	bl	8003a0c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	2000cab4 	.word	0x2000cab4

08001e14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
	return 1;
 8001e18:	2301      	movs	r3, #1
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <_kill>:

int _kill(int pid, int sig)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e2e:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <_kill+0x20>)
 8001e30:	2216      	movs	r2, #22
 8001e32:	601a      	str	r2, [r3, #0]
	return -1;
 8001e34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	20018bc0 	.word	0x20018bc0

08001e48 <_exit>:

void _exit (int status)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff ffe5 	bl	8001e24 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e5a:	e7fe      	b.n	8001e5a <_exit+0x12>

08001e5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	e00a      	b.n	8001e84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e6e:	f3af 8000 	nop.w
 8001e72:	4601      	mov	r1, r0
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	60ba      	str	r2, [r7, #8]
 8001e7a:	b2ca      	uxtb	r2, r1
 8001e7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	3301      	adds	r3, #1
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	dbf0      	blt.n	8001e6e <_read+0x12>
	}

return len;
 8001e8c:	687b      	ldr	r3, [r7, #4]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	e009      	b.n	8001ebc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	60ba      	str	r2, [r7, #8]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff fdcf 	bl	8001a54 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	dbf1      	blt.n	8001ea8 <_write+0x12>
	}
	return len;
 8001ec4:	687b      	ldr	r3, [r7, #4]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <_close>:

int _close(int file)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ef6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <_isatty>:

int _isatty(int file)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
	return 1;
 8001f0e:	2301      	movs	r3, #1
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
	return 0;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
	...

08001f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b087      	sub	sp, #28
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f40:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <_sbrk+0x5c>)
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <_sbrk+0x60>)
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f4c:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <_sbrk+0x64>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d102      	bne.n	8001f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <_sbrk+0x64>)
 8001f56:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <_sbrk+0x68>)
 8001f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f5a:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <_sbrk+0x64>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d205      	bcs.n	8001f74 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001f68:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <_sbrk+0x6c>)
 8001f6a:	220c      	movs	r2, #12
 8001f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f72:	e009      	b.n	8001f88 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f74:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <_sbrk+0x64>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f7a:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <_sbrk+0x64>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4413      	add	r3, r2
 8001f82:	4a06      	ldr	r2, [pc, #24]	; (8001f9c <_sbrk+0x64>)
 8001f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f86:	68fb      	ldr	r3, [r7, #12]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	371c      	adds	r7, #28
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	20080000 	.word	0x20080000
 8001f98:	00000400 	.word	0x00000400
 8001f9c:	20000a64 	.word	0x20000a64
 8001fa0:	20018bd8 	.word	0x20018bd8
 8001fa4:	20018bc0 	.word	0x20018bc0

08001fa8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fac:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <SystemInit+0x20>)
 8001fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb2:	4a05      	ldr	r2, [pc, #20]	; (8001fc8 <SystemInit+0x20>)
 8001fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <randomSSIDGeneration>:

//////////////////////////

// Generation SSID
char *randomSSIDGeneration(char *rSSID, int num)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
    // Initialize counter
    int i = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]

    // Array of symbols
    static const char symbols[] = "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789";

    //  the random SSID
    for (i = 0; i < num; i++) {
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	e017      	b.n	8002010 <randomSSIDGeneration+0x44>
      rSSID[i] = symbols[rand() % 61];
 8001fe0:	f016 f994 	bl	801830c <rand>
 8001fe4:	4601      	mov	r1, r0
 8001fe6:	4b11      	ldr	r3, [pc, #68]	; (800202c <randomSSIDGeneration+0x60>)
 8001fe8:	fb83 2301 	smull	r2, r3, r3, r1
 8001fec:	111a      	asrs	r2, r3, #4
 8001fee:	17cb      	asrs	r3, r1, #31
 8001ff0:	1ad2      	subs	r2, r2, r3
 8001ff2:	4613      	mov	r3, r2
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	1a9b      	subs	r3, r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	1aca      	subs	r2, r1, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	440b      	add	r3, r1
 8002004:	490a      	ldr	r1, [pc, #40]	; (8002030 <randomSSIDGeneration+0x64>)
 8002006:	5c8a      	ldrb	r2, [r1, r2]
 8002008:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num; i++) {
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	3301      	adds	r3, #1
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	dbe3      	blt.n	8001fe0 <randomSSIDGeneration+0x14>
    }
    rSSID[num]='\0';
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]

    return rSSID;
 8002022:	687b      	ldr	r3, [r7, #4]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	4325c53f 	.word	0x4325c53f
 8002030:	0801d6c4 	.word	0x0801d6c4

08002034 <restartSSID>:


// Restart SSID
void restartSSID(void){
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
		Ti = HAL_GetTick();
 8002038:	f000 fff4 	bl	8003024 <HAL_GetTick>
 800203c:	4603      	mov	r3, r0
 800203e:	4a02      	ldr	r2, [pc, #8]	; (8002048 <restartSSID+0x14>)
 8002040:	6013      	str	r3, [r2, #0]
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	2000ad38 	.word	0x2000ad38

0800204c <MultiPartTabCount>:
//////////////////////////////  SSI MULTIPART Function  ///////////////////////


// Counting the number of lines JSON
int MultiPartTabCount(int num, int pinnum)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
	int count = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i <= pinnum; i++){
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	e022      	b.n	80020a6 <MultiPartTabCount+0x5a>
		if(num == PinsConf[i].topin && num == 1){
 8002060:	4a16      	ldr	r2, [pc, #88]	; (80020bc <MultiPartTabCount+0x70>)
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2194      	movs	r1, #148	; 0x94
 8002066:	fb01 f303 	mul.w	r3, r1, r3
 800206a:	4413      	add	r3, r2
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	429a      	cmp	r2, r3
 8002072:	d105      	bne.n	8002080 <MultiPartTabCount+0x34>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d102      	bne.n	8002080 <MultiPartTabCount+0x34>
			count++;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	3301      	adds	r3, #1
 800207e:	60fb      	str	r3, [r7, #12]
		}
		if(num == PinsConf[i].topin && num == 2){
 8002080:	4a0e      	ldr	r2, [pc, #56]	; (80020bc <MultiPartTabCount+0x70>)
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2194      	movs	r1, #148	; 0x94
 8002086:	fb01 f303 	mul.w	r3, r1, r3
 800208a:	4413      	add	r3, r2
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	429a      	cmp	r2, r3
 8002092:	d105      	bne.n	80020a0 <MultiPartTabCount+0x54>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2b02      	cmp	r3, #2
 8002098:	d102      	bne.n	80020a0 <MultiPartTabCount+0x54>
			count++;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	3301      	adds	r3, #1
 800209e:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i <= pinnum; i++){
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	3301      	adds	r3, #1
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	ddd8      	ble.n	8002060 <MultiPartTabCount+0x14>
		}
	}
	return count;
 80020ae:	68fb      	ldr	r3, [r7, #12]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	200053d0 	.word	0x200053d0

080020c0 <ssi_handler>:


const uint8_t SSI_TAG_NUM = (sizeof(TAGCHAR) / sizeof(TAGCHAR[0]));

static u16_t ssi_handler(int iIndex, char *pcInsert, int iInsertLen,
		u16_t current_tag_part, u16_t *next_tag_part) {
 80020c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020c2:	b09b      	sub	sp, #108	; 0x6c
 80020c4:	af0c      	add	r7, sp, #48	; 0x30
 80020c6:	6278      	str	r0, [r7, #36]	; 0x24
 80020c8:	6239      	str	r1, [r7, #32]
 80020ca:	61fa      	str	r2, [r7, #28]
 80020cc:	837b      	strh	r3, [r7, #26]

	char* str = NULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	637b      	str	r3, [r7, #52]	; 0x34
	cJSON *root = NULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	633b      	str	r3, [r7, #48]	; 0x30
	cJSON *fld = NULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	2b03      	cmp	r3, #3
 80020de:	f200 820d 	bhi.w	80024fc <ssi_handler+0x43c>
 80020e2:	a201      	add	r2, pc, #4	; (adr r2, 80020e8 <ssi_handler+0x28>)
 80020e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e8:	080020f9 	.word	0x080020f9
 80020ec:	08002431 	.word	0x08002431
 80020f0:	08002447 	.word	0x08002447
 80020f4:	080024d5 	.word	0x080024d5

	switch (iIndex) {
	// ssi tag <!--#tabjson-->
	case 0:
	#if LWIP_HTTPD_SSI_MULTIPART
		if (variable == NUMPIN) {
 80020f8:	4b65      	ldr	r3, [pc, #404]	; (8002290 <ssi_handler+0x1d0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b59      	cmp	r3, #89	; 0x59
 80020fe:	d106      	bne.n	800210e <ssi_handler+0x4e>
			variable = 0;
 8002100:	4b63      	ldr	r3, [pc, #396]	; (8002290 <ssi_handler+0x1d0>)
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
			countJson = 0;
 8002106:	4b63      	ldr	r3, [pc, #396]	; (8002294 <ssi_handler+0x1d4>)
 8002108:	2200      	movs	r2, #0
 800210a:	701a      	strb	r2, [r3, #0]
			break;
 800210c:	e1f7      	b.n	80024fe <ssi_handler+0x43e>
		} else {
			///////
			if(tab == 1){
 800210e:	4b62      	ldr	r3, [pc, #392]	; (8002298 <ssi_handler+0x1d8>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d125      	bne.n	8002162 <ssi_handler+0xa2>
				sprintf(pcInsert,"{\"id\":%d,\"pins\":\"%s\",\"topin\":%d},",
 8002116:	4b5e      	ldr	r3, [pc, #376]	; (8002290 <ssi_handler+0x1d0>)
 8002118:	6819      	ldr	r1, [r3, #0]
						variable, PinsInfo[variable].pins, PinsConf[variable].topin);
 800211a:	4b5d      	ldr	r3, [pc, #372]	; (8002290 <ssi_handler+0x1d0>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4a5d      	ldr	r2, [pc, #372]	; (800229c <ssi_handler+0x1dc>)
 8002128:	441a      	add	r2, r3
				sprintf(pcInsert,"{\"id\":%d,\"pins\":\"%s\",\"topin\":%d},",
 800212a:	4b59      	ldr	r3, [pc, #356]	; (8002290 <ssi_handler+0x1d0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	485c      	ldr	r0, [pc, #368]	; (80022a0 <ssi_handler+0x1e0>)
 8002130:	2494      	movs	r4, #148	; 0x94
 8002132:	fb04 f303 	mul.w	r3, r4, r3
 8002136:	4403      	add	r3, r0
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	4613      	mov	r3, r2
 800213e:	460a      	mov	r2, r1
 8002140:	4958      	ldr	r1, [pc, #352]	; (80022a4 <ssi_handler+0x1e4>)
 8002142:	6a38      	ldr	r0, [r7, #32]
 8002144:	f016 f9d8 	bl	80184f8 <siprintf>

				if(variable == (NUMPIN-1)){
 8002148:	4b51      	ldr	r3, [pc, #324]	; (8002290 <ssi_handler+0x1d0>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2b58      	cmp	r3, #88	; 0x58
 800214e:	d108      	bne.n	8002162 <ssi_handler+0xa2>
					pcInsert[strlen(pcInsert) - 1] = '\0'; // Удаляем "," из JSON
 8002150:	6a38      	ldr	r0, [r7, #32]
 8002152:	f7fe f87f 	bl	8000254 <strlen>
 8002156:	4603      	mov	r3, r0
 8002158:	3b01      	subs	r3, #1
 800215a:	6a3a      	ldr	r2, [r7, #32]
 800215c:	4413      	add	r3, r2
 800215e:	2200      	movs	r2, #0
 8002160:	701a      	strb	r2, [r3, #0]
				}
			}
			if(tab == 2){
 8002162:	4b4d      	ldr	r3, [pc, #308]	; (8002298 <ssi_handler+0x1d8>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b02      	cmp	r3, #2
 8002168:	f040 80b3 	bne.w	80022d2 <ssi_handler+0x212>
				if(PinsConf[variable].topin == 1){
 800216c:	4b48      	ldr	r3, [pc, #288]	; (8002290 <ssi_handler+0x1d0>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a4b      	ldr	r2, [pc, #300]	; (80022a0 <ssi_handler+0x1e0>)
 8002172:	2194      	movs	r1, #148	; 0x94
 8002174:	fb01 f303 	mul.w	r3, r1, r3
 8002178:	4413      	add	r3, r2
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b01      	cmp	r3, #1
 800217e:	f040 8097 	bne.w	80022b0 <ssi_handler+0x1f0>
					// buttoms json
					sprintf(pcInsert,
 8002182:	4b43      	ldr	r3, [pc, #268]	; (8002290 <ssi_handler+0x1d0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a46      	ldr	r2, [pc, #280]	; (80022a0 <ssi_handler+0x1e0>)
 8002188:	2194      	movs	r1, #148	; 0x94
 800218a:	fb01 f303 	mul.w	r3, r1, r3
 800218e:	4413      	add	r3, r2
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	4b3e      	ldr	r3, [pc, #248]	; (8002290 <ssi_handler+0x1d0>)
 8002196:	6819      	ldr	r1, [r3, #0]
 8002198:	6139      	str	r1, [r7, #16]
							"{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"binter\":%d,\"hinter\":%d,\"repeat\":%d,\"rinter\":%d,\"dcinter\":%d,\"pclick\":%d,\"pinact\":%s,\"info\":\"%s\",\"onoff\":%d},",
							PinsConf[variable].topin, variable, PinsInfo[variable].pins,
 800219a:	4b3d      	ldr	r3, [pc, #244]	; (8002290 <ssi_handler+0x1d0>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4a3d      	ldr	r2, [pc, #244]	; (800229c <ssi_handler+0x1dc>)
 80021a8:	1899      	adds	r1, r3, r2
 80021aa:	60f9      	str	r1, [r7, #12]
							PinsConf[variable].ptype, PinsConf[variable].binter,
 80021ac:	4b38      	ldr	r3, [pc, #224]	; (8002290 <ssi_handler+0x1d0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2294      	movs	r2, #148	; 0x94
 80021b2:	fb02 f303 	mul.w	r3, r2, r3
 80021b6:	3318      	adds	r3, #24
 80021b8:	4a39      	ldr	r2, [pc, #228]	; (80022a0 <ssi_handler+0x1e0>)
 80021ba:	189c      	adds	r4, r3, r2
					sprintf(pcInsert,
 80021bc:	4b34      	ldr	r3, [pc, #208]	; (8002290 <ssi_handler+0x1d0>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a37      	ldr	r2, [pc, #220]	; (80022a0 <ssi_handler+0x1e0>)
 80021c2:	2194      	movs	r1, #148	; 0x94
 80021c4:	fb01 f303 	mul.w	r3, r1, r3
 80021c8:	4413      	add	r3, r2
 80021ca:	332c      	adds	r3, #44	; 0x2c
 80021cc:	681d      	ldr	r5, [r3, #0]
 80021ce:	4b30      	ldr	r3, [pc, #192]	; (8002290 <ssi_handler+0x1d0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a33      	ldr	r2, [pc, #204]	; (80022a0 <ssi_handler+0x1e0>)
 80021d4:	2194      	movs	r1, #148	; 0x94
 80021d6:	fb01 f303 	mul.w	r3, r1, r3
 80021da:	4413      	add	r3, r2
 80021dc:	3330      	adds	r3, #48	; 0x30
 80021de:	681e      	ldr	r6, [r3, #0]
 80021e0:	4b2b      	ldr	r3, [pc, #172]	; (8002290 <ssi_handler+0x1d0>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a2e      	ldr	r2, [pc, #184]	; (80022a0 <ssi_handler+0x1e0>)
 80021e6:	2194      	movs	r1, #148	; 0x94
 80021e8:	fb01 f303 	mul.w	r3, r1, r3
 80021ec:	4413      	add	r3, r2
 80021ee:	3334      	adds	r3, #52	; 0x34
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	60ba      	str	r2, [r7, #8]
 80021f4:	4b26      	ldr	r3, [pc, #152]	; (8002290 <ssi_handler+0x1d0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a29      	ldr	r2, [pc, #164]	; (80022a0 <ssi_handler+0x1e0>)
 80021fa:	2194      	movs	r1, #148	; 0x94
 80021fc:	fb01 f303 	mul.w	r3, r1, r3
 8002200:	4413      	add	r3, r2
 8002202:	3338      	adds	r3, #56	; 0x38
 8002204:	6819      	ldr	r1, [r3, #0]
 8002206:	6079      	str	r1, [r7, #4]
 8002208:	4b21      	ldr	r3, [pc, #132]	; (8002290 <ssi_handler+0x1d0>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a24      	ldr	r2, [pc, #144]	; (80022a0 <ssi_handler+0x1e0>)
 800220e:	2194      	movs	r1, #148	; 0x94
 8002210:	fb01 f303 	mul.w	r3, r1, r3
 8002214:	4413      	add	r3, r2
 8002216:	333c      	adds	r3, #60	; 0x3c
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	603b      	str	r3, [r7, #0]
 800221c:	4b1c      	ldr	r3, [pc, #112]	; (8002290 <ssi_handler+0x1d0>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a1f      	ldr	r2, [pc, #124]	; (80022a0 <ssi_handler+0x1e0>)
 8002222:	2194      	movs	r1, #148	; 0x94
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	4413      	add	r3, r2
 800222a:	3340      	adds	r3, #64	; 0x40
 800222c:	6819      	ldr	r1, [r3, #0]
							PinsConf[variable].hinter, PinsConf[variable].repeat,
							PinsConf[variable].rinter, PinsConf[variable].dcinter,
							PinsConf[variable].pclick, "test", PinsConf[variable].info,
 800222e:	4b18      	ldr	r3, [pc, #96]	; (8002290 <ssi_handler+0x1d0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2294      	movs	r2, #148	; 0x94
 8002234:	fb02 f303 	mul.w	r3, r2, r3
 8002238:	3340      	adds	r3, #64	; 0x40
 800223a:	4a19      	ldr	r2, [pc, #100]	; (80022a0 <ssi_handler+0x1e0>)
 800223c:	4413      	add	r3, r2
 800223e:	1d1a      	adds	r2, r3, #4
					sprintf(pcInsert,
 8002240:	4b13      	ldr	r3, [pc, #76]	; (8002290 <ssi_handler+0x1d0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4816      	ldr	r0, [pc, #88]	; (80022a0 <ssi_handler+0x1e0>)
 8002246:	f04f 0c94 	mov.w	ip, #148	; 0x94
 800224a:	fb0c f303 	mul.w	r3, ip, r3
 800224e:	4403      	add	r3, r0
 8002250:	3364      	adds	r3, #100	; 0x64
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	930a      	str	r3, [sp, #40]	; 0x28
 8002256:	9209      	str	r2, [sp, #36]	; 0x24
 8002258:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <ssi_handler+0x1e8>)
 800225a:	9308      	str	r3, [sp, #32]
 800225c:	9107      	str	r1, [sp, #28]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	9306      	str	r3, [sp, #24]
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	9105      	str	r1, [sp, #20]
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	9204      	str	r2, [sp, #16]
 800226a:	9603      	str	r6, [sp, #12]
 800226c:	9502      	str	r5, [sp, #8]
 800226e:	9401      	str	r4, [sp, #4]
 8002270:	68f9      	ldr	r1, [r7, #12]
 8002272:	9100      	str	r1, [sp, #0]
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	490c      	ldr	r1, [pc, #48]	; (80022ac <ssi_handler+0x1ec>)
 800227a:	6a38      	ldr	r0, [r7, #32]
 800227c:	f016 f93c 	bl	80184f8 <siprintf>
							PinsConf[variable].onoff);
					countJson++;
 8002280:	4b04      	ldr	r3, [pc, #16]	; (8002294 <ssi_handler+0x1d4>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	3301      	adds	r3, #1
 8002286:	b2da      	uxtb	r2, r3
 8002288:	4b02      	ldr	r3, [pc, #8]	; (8002294 <ssi_handler+0x1d4>)
 800228a:	701a      	strb	r2, [r3, #0]
 800228c:	e012      	b.n	80022b4 <ssi_handler+0x1f4>
 800228e:	bf00      	nop
 8002290:	20000a6c 	.word	0x20000a6c
 8002294:	20000a73 	.word	0x20000a73
 8002298:	20000a71 	.word	0x20000a71
 800229c:	2000000c 	.word	0x2000000c
 80022a0:	200053d0 	.word	0x200053d0
 80022a4:	08019f9c 	.word	0x08019f9c
 80022a8:	0801a05c 	.word	0x0801a05c
 80022ac:	08019fc0 	.word	0x08019fc0
					////////////////
				} else {
					pcInsert = "";
 80022b0:	4b97      	ldr	r3, [pc, #604]	; (8002510 <ssi_handler+0x450>)
 80022b2:	623b      	str	r3, [r7, #32]
				}

				if(countJson == numTabLine){
 80022b4:	4b97      	ldr	r3, [pc, #604]	; (8002514 <ssi_handler+0x454>)
 80022b6:	781a      	ldrb	r2, [r3, #0]
 80022b8:	4b97      	ldr	r3, [pc, #604]	; (8002518 <ssi_handler+0x458>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d108      	bne.n	80022d2 <ssi_handler+0x212>
					pcInsert[strlen(pcInsert) - 1] = '\0'; // Удаляем "," из JSON
 80022c0:	6a38      	ldr	r0, [r7, #32]
 80022c2:	f7fd ffc7 	bl	8000254 <strlen>
 80022c6:	4603      	mov	r3, r0
 80022c8:	3b01      	subs	r3, #1
 80022ca:	6a3a      	ldr	r2, [r7, #32]
 80022cc:	4413      	add	r3, r2
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]
				}
			}
			if(tab == 3){
 80022d2:	4b92      	ldr	r3, [pc, #584]	; (800251c <ssi_handler+0x45c>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	f040 809a 	bne.w	8002410 <ssi_handler+0x350>
				if(PinsConf[variable].topin == 2){
 80022dc:	4b90      	ldr	r3, [pc, #576]	; (8002520 <ssi_handler+0x460>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a90      	ldr	r2, [pc, #576]	; (8002524 <ssi_handler+0x464>)
 80022e2:	2194      	movs	r1, #148	; 0x94
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	4413      	add	r3, r2
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d17e      	bne.n	80023ee <ssi_handler+0x32e>
					// relay json
					sprintf(pcInsert,
 80022f0:	4b8b      	ldr	r3, [pc, #556]	; (8002520 <ssi_handler+0x460>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a8b      	ldr	r2, [pc, #556]	; (8002524 <ssi_handler+0x464>)
 80022f6:	2194      	movs	r1, #148	; 0x94
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	4b87      	ldr	r3, [pc, #540]	; (8002520 <ssi_handler+0x460>)
 8002304:	6819      	ldr	r1, [r3, #0]
 8002306:	6139      	str	r1, [r7, #16]
							"{\"topin\":%d,\"id\":%d,\"pins\":\"%s\",\"ptype\":\"%s\",\"pwm\":%d,\"on\":%d,\"istate\":%d,\"dvalue\":%d,\"ponr\":%d,\"info\":\"%s\",\"onoff\":%d},",
							PinsConf[variable].topin, variable, PinsInfo[variable].pins,
 8002308:	4b85      	ldr	r3, [pc, #532]	; (8002520 <ssi_handler+0x460>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4a84      	ldr	r2, [pc, #528]	; (8002528 <ssi_handler+0x468>)
 8002316:	4413      	add	r3, r2
							PinsConf[variable].ptype, PinsConf[variable].pwm, PinsConf[variable].on,
 8002318:	4a81      	ldr	r2, [pc, #516]	; (8002520 <ssi_handler+0x460>)
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	2194      	movs	r1, #148	; 0x94
 800231e:	fb01 f202 	mul.w	r2, r1, r2
 8002322:	3218      	adds	r2, #24
 8002324:	497f      	ldr	r1, [pc, #508]	; (8002524 <ssi_handler+0x464>)
 8002326:	440a      	add	r2, r1
					sprintf(pcInsert,
 8002328:	497d      	ldr	r1, [pc, #500]	; (8002520 <ssi_handler+0x460>)
 800232a:	6809      	ldr	r1, [r1, #0]
 800232c:	487d      	ldr	r0, [pc, #500]	; (8002524 <ssi_handler+0x464>)
 800232e:	2494      	movs	r4, #148	; 0x94
 8002330:	fb04 f101 	mul.w	r1, r4, r1
 8002334:	4401      	add	r1, r0
 8002336:	3104      	adds	r1, #4
 8002338:	6809      	ldr	r1, [r1, #0]
 800233a:	4879      	ldr	r0, [pc, #484]	; (8002520 <ssi_handler+0x460>)
 800233c:	6800      	ldr	r0, [r0, #0]
 800233e:	4c79      	ldr	r4, [pc, #484]	; (8002524 <ssi_handler+0x464>)
 8002340:	2594      	movs	r5, #148	; 0x94
 8002342:	fb05 f000 	mul.w	r0, r5, r0
 8002346:	4420      	add	r0, r4
 8002348:	3008      	adds	r0, #8
 800234a:	6800      	ldr	r0, [r0, #0]
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	4c74      	ldr	r4, [pc, #464]	; (8002520 <ssi_handler+0x460>)
 8002350:	6824      	ldr	r4, [r4, #0]
 8002352:	4d74      	ldr	r5, [pc, #464]	; (8002524 <ssi_handler+0x464>)
 8002354:	2694      	movs	r6, #148	; 0x94
 8002356:	fb06 f404 	mul.w	r4, r6, r4
 800235a:	442c      	add	r4, r5
 800235c:	340c      	adds	r4, #12
 800235e:	6820      	ldr	r0, [r4, #0]
 8002360:	60b8      	str	r0, [r7, #8]
 8002362:	4d6f      	ldr	r5, [pc, #444]	; (8002520 <ssi_handler+0x460>)
 8002364:	682d      	ldr	r5, [r5, #0]
 8002366:	4e6f      	ldr	r6, [pc, #444]	; (8002524 <ssi_handler+0x464>)
 8002368:	f04f 0c94 	mov.w	ip, #148	; 0x94
 800236c:	fb0c f505 	mul.w	r5, ip, r5
 8002370:	4435      	add	r5, r6
 8002372:	3510      	adds	r5, #16
 8002374:	682d      	ldr	r5, [r5, #0]
 8002376:	4e6a      	ldr	r6, [pc, #424]	; (8002520 <ssi_handler+0x460>)
 8002378:	6836      	ldr	r6, [r6, #0]
 800237a:	486a      	ldr	r0, [pc, #424]	; (8002524 <ssi_handler+0x464>)
 800237c:	f04f 0c94 	mov.w	ip, #148	; 0x94
 8002380:	fb0c f606 	mul.w	r6, ip, r6
 8002384:	4406      	add	r6, r0
 8002386:	3614      	adds	r6, #20
 8002388:	6836      	ldr	r6, [r6, #0]
							PinsConf[variable].istate, PinsConf[variable].dvalue,
							PinsConf[variable].ponr, PinsConf[variable].info,
 800238a:	4865      	ldr	r0, [pc, #404]	; (8002520 <ssi_handler+0x460>)
 800238c:	6800      	ldr	r0, [r0, #0]
 800238e:	f04f 0c94 	mov.w	ip, #148	; 0x94
 8002392:	fb0c fc00 	mul.w	ip, ip, r0
 8002396:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800239a:	4862      	ldr	r0, [pc, #392]	; (8002524 <ssi_handler+0x464>)
 800239c:	4484      	add	ip, r0
 800239e:	f10c 0004 	add.w	r0, ip, #4
 80023a2:	6078      	str	r0, [r7, #4]
					sprintf(pcInsert,
 80023a4:	485e      	ldr	r0, [pc, #376]	; (8002520 <ssi_handler+0x460>)
 80023a6:	6800      	ldr	r0, [r0, #0]
 80023a8:	4c5e      	ldr	r4, [pc, #376]	; (8002524 <ssi_handler+0x464>)
 80023aa:	f04f 0c94 	mov.w	ip, #148	; 0x94
 80023ae:	fb0c fc00 	mul.w	ip, ip, r0
 80023b2:	44a4      	add	ip, r4
 80023b4:	f10c 0c64 	add.w	ip, ip, #100	; 0x64
 80023b8:	f8dc 0000 	ldr.w	r0, [ip]
 80023bc:	9008      	str	r0, [sp, #32]
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	9007      	str	r0, [sp, #28]
 80023c2:	9606      	str	r6, [sp, #24]
 80023c4:	9505      	str	r5, [sp, #20]
 80023c6:	68b8      	ldr	r0, [r7, #8]
 80023c8:	9004      	str	r0, [sp, #16]
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	9003      	str	r0, [sp, #12]
 80023ce:	9102      	str	r1, [sp, #8]
 80023d0:	9201      	str	r2, [sp, #4]
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	4954      	ldr	r1, [pc, #336]	; (800252c <ssi_handler+0x46c>)
 80023da:	6a38      	ldr	r0, [r7, #32]
 80023dc:	f016 f88c 	bl	80184f8 <siprintf>
							PinsConf[variable].onoff);
					////////////////
					countJson++;
 80023e0:	4b4c      	ldr	r3, [pc, #304]	; (8002514 <ssi_handler+0x454>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	3301      	adds	r3, #1
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	4b4a      	ldr	r3, [pc, #296]	; (8002514 <ssi_handler+0x454>)
 80023ea:	701a      	strb	r2, [r3, #0]
 80023ec:	e001      	b.n	80023f2 <ssi_handler+0x332>
				} else {
					pcInsert = "";
 80023ee:	4b48      	ldr	r3, [pc, #288]	; (8002510 <ssi_handler+0x450>)
 80023f0:	623b      	str	r3, [r7, #32]
				}

				if(countJson == numTabLine){
 80023f2:	4b48      	ldr	r3, [pc, #288]	; (8002514 <ssi_handler+0x454>)
 80023f4:	781a      	ldrb	r2, [r3, #0]
 80023f6:	4b48      	ldr	r3, [pc, #288]	; (8002518 <ssi_handler+0x458>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d108      	bne.n	8002410 <ssi_handler+0x350>
					pcInsert[strlen(pcInsert) - 1] = '\0'; // Удаляем "," из JSON
 80023fe:	6a38      	ldr	r0, [r7, #32]
 8002400:	f7fd ff28 	bl	8000254 <strlen>
 8002404:	4603      	mov	r3, r0
 8002406:	3b01      	subs	r3, #1
 8002408:	6a3a      	ldr	r2, [r7, #32]
 800240a:	4413      	add	r3, r2
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
				}
			}
			*next_tag_part = variable;
 8002410:	4b43      	ldr	r3, [pc, #268]	; (8002520 <ssi_handler+0x460>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	b29a      	uxth	r2, r3
 8002416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002418:	801a      	strh	r2, [r3, #0]
			variable++;
 800241a:	4b41      	ldr	r3, [pc, #260]	; (8002520 <ssi_handler+0x460>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	3301      	adds	r3, #1
 8002420:	4a3f      	ldr	r2, [pc, #252]	; (8002520 <ssi_handler+0x460>)
 8002422:	6013      	str	r3, [r2, #0]
			return strlen(pcInsert);
 8002424:	6a38      	ldr	r0, [r7, #32]
 8002426:	f7fd ff15 	bl	8000254 <strlen>
 800242a:	4603      	mov	r3, r0
 800242c:	b29b      	uxth	r3, r3
 800242e:	e067      	b.n	8002500 <ssi_handler+0x440>
		printf("LWIP_HTTPD_SSI_MULTIPART disabled /n");
	#endif
		break;
		// ssi tag  <!--#ssid-->
		case 1:
			sprintf(pcInsert, "%s", randomSSID);
 8002430:	4a3f      	ldr	r2, [pc, #252]	; (8002530 <ssi_handler+0x470>)
 8002432:	4940      	ldr	r1, [pc, #256]	; (8002534 <ssi_handler+0x474>)
 8002434:	6a38      	ldr	r0, [r7, #32]
 8002436:	f016 f85f 	bl	80184f8 <siprintf>
			return strlen(pcInsert);
 800243a:	6a38      	ldr	r0, [r7, #32]
 800243c:	f7fd ff0a 	bl	8000254 <strlen>
 8002440:	4603      	mov	r3, r0
 8002442:	b29b      	uxth	r3, r3
 8002444:	e05c      	b.n	8002500 <ssi_handler+0x440>
			break;

		// ssi tag <!--#check-->
		case 2:
			root = cJSON_CreateArray();
 8002446:	f7ff f917 	bl	8001678 <cJSON_CreateArray>
 800244a:	6338      	str	r0, [r7, #48]	; 0x30
			fld = cJSON_CreateObject();
 800244c:	f7ff f928 	bl	80016a0 <cJSON_CreateObject>
 8002450:	62f8      	str	r0, [r7, #44]	; 0x2c
			cJSON_AddItemToArray(root, fld = cJSON_CreateObject());
 8002452:	f7ff f925 	bl	80016a0 <cJSON_CreateObject>
 8002456:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002458:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800245a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800245c:	f7fe ffe5 	bl	800142a <cJSON_AddItemToArray>

			if(verifyNum == 2){
 8002460:	4b35      	ldr	r3, [pc, #212]	; (8002538 <ssi_handler+0x478>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d115      	bne.n	8002494 <ssi_handler+0x3d4>
				memset(randomSSID, '\0', sizeof(randomSSID));
 8002468:	221b      	movs	r2, #27
 800246a:	2100      	movs	r1, #0
 800246c:	4830      	ldr	r0, [pc, #192]	; (8002530 <ssi_handler+0x470>)
 800246e:	f015 fe0d 	bl	801808c <memset>
				cJSON_AddNumberToObject(fld, "login", 1);
 8002472:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8002476:	4931      	ldr	r1, [pc, #196]	; (800253c <ssi_handler+0x47c>)
 8002478:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800247a:	f7ff f845 	bl	8001508 <cJSON_AddNumberToObject>
				cJSON_AddStringToObject(fld, "ssid", randomSSIDGeneration(randomSSID, 27));
 800247e:	211b      	movs	r1, #27
 8002480:	482b      	ldr	r0, [pc, #172]	; (8002530 <ssi_handler+0x470>)
 8002482:	f7ff fda3 	bl	8001fcc <randomSSIDGeneration>
 8002486:	4603      	mov	r3, r0
 8002488:	461a      	mov	r2, r3
 800248a:	492d      	ldr	r1, [pc, #180]	; (8002540 <ssi_handler+0x480>)
 800248c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800248e:	f7ff f85f 	bl	8001550 <cJSON_AddStringToObject>
 8002492:	e00a      	b.n	80024aa <ssi_handler+0x3ea>
			} else {
				cJSON_AddNumberToObject(fld, "login", 0);
 8002494:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8002508 <ssi_handler+0x448>
 8002498:	4928      	ldr	r1, [pc, #160]	; (800253c <ssi_handler+0x47c>)
 800249a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800249c:	f7ff f834 	bl	8001508 <cJSON_AddNumberToObject>
				cJSON_AddStringToObject(fld, "ssid", "");
 80024a0:	4a1b      	ldr	r2, [pc, #108]	; (8002510 <ssi_handler+0x450>)
 80024a2:	4927      	ldr	r1, [pc, #156]	; (8002540 <ssi_handler+0x480>)
 80024a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024a6:	f7ff f853 	bl	8001550 <cJSON_AddStringToObject>
			}

			str = cJSON_Print(root);
 80024aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024ac:	f7fe fcde 	bl	8000e6c <cJSON_Print>
 80024b0:	6378      	str	r0, [r7, #52]	; 0x34
			cJSON_Delete(root);
 80024b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024b4:	f7fe f8e6 	bl	8000684 <cJSON_Delete>
			sprintf(pcInsert, "%s", str);
 80024b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024ba:	491e      	ldr	r1, [pc, #120]	; (8002534 <ssi_handler+0x474>)
 80024bc:	6a38      	ldr	r0, [r7, #32]
 80024be:	f016 f81b 	bl	80184f8 <siprintf>
			verifyNum = 0;
 80024c2:	4b1d      	ldr	r3, [pc, #116]	; (8002538 <ssi_handler+0x478>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]

			return strlen(pcInsert);
 80024c8:	6a38      	ldr	r0, [r7, #32]
 80024ca:	f7fd fec3 	bl	8000254 <strlen>
 80024ce:	4603      	mov	r3, r0
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	e015      	b.n	8002500 <ssi_handler+0x440>
			break;

		// ssi tag <!--#menu-->
		case 3:
			sprintf(pcInsert,"<a href=\"index.shtml?ssid=%s\">Home</a> | <a href=\"select.shtml?ssid=%s\">Select pin</a> | <a href=\"tabbuttom.shtml?ssid=%s\">Buttom pin</a> | <a href=\"tabrelay.shtml?ssid=%s\">Relay pin</a> | <a href=\"timers.shtml?ssid=%s\">Timers</a> | <a href=\"settings.shtml?ssid=%s\">Settings</a> | <a href=\"logout.shtml\">Logout</a> ", randomSSID,randomSSID,randomSSID,randomSSID,randomSSID,randomSSID);
 80024d4:	4b16      	ldr	r3, [pc, #88]	; (8002530 <ssi_handler+0x470>)
 80024d6:	9303      	str	r3, [sp, #12]
 80024d8:	4b15      	ldr	r3, [pc, #84]	; (8002530 <ssi_handler+0x470>)
 80024da:	9302      	str	r3, [sp, #8]
 80024dc:	4b14      	ldr	r3, [pc, #80]	; (8002530 <ssi_handler+0x470>)
 80024de:	9301      	str	r3, [sp, #4]
 80024e0:	4b13      	ldr	r3, [pc, #76]	; (8002530 <ssi_handler+0x470>)
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	4b12      	ldr	r3, [pc, #72]	; (8002530 <ssi_handler+0x470>)
 80024e6:	4a12      	ldr	r2, [pc, #72]	; (8002530 <ssi_handler+0x470>)
 80024e8:	4916      	ldr	r1, [pc, #88]	; (8002544 <ssi_handler+0x484>)
 80024ea:	6a38      	ldr	r0, [r7, #32]
 80024ec:	f016 f804 	bl	80184f8 <siprintf>
			return strlen(pcInsert);
 80024f0:	6a38      	ldr	r0, [r7, #32]
 80024f2:	f7fd feaf 	bl	8000254 <strlen>
 80024f6:	4603      	mov	r3, r0
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	e001      	b.n	8002500 <ssi_handler+0x440>
			break;



		default:
			break;
 80024fc:	bf00      	nop
	}
	return 0;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	373c      	adds	r7, #60	; 0x3c
 8002504:	46bd      	mov	sp, r7
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...
 8002510:	0801a064 	.word	0x0801a064
 8002514:	20000a73 	.word	0x20000a73
 8002518:	20000a72 	.word	0x20000a72
 800251c:	20000a71 	.word	0x20000a71
 8002520:	20000a6c 	.word	0x20000a6c
 8002524:	200053d0 	.word	0x200053d0
 8002528:	2000000c 	.word	0x2000000c
 800252c:	0801a068 	.word	0x0801a068
 8002530:	20000a74 	.word	0x20000a74
 8002534:	0801a0e4 	.word	0x0801a0e4
 8002538:	20000a70 	.word	0x20000a70
 800253c:	0801a0e8 	.word	0x0801a0e8
 8002540:	08019f84 	.word	0x08019f84
 8002544:	0801a0f0 	.word	0x0801a0f0

08002548 <FormCGI_Handler>:
const uint8_t CGI_URL_NUM = (sizeof(URL_TABLES) / sizeof(tCGI));


// index.shtml Handler (Index 0)
const char* FormCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8002548:	b580      	push	{r7, lr}
 800254a:	b08c      	sub	sp, #48	; 0x30
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	603b      	str	r3, [r7, #0]

	char ssid[27] = {0};
 8002556:	2300      	movs	r3, #0
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	f107 0314 	add.w	r3, r7, #20
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	609a      	str	r2, [r3, #8]
 8002566:	60da      	str	r2, [r3, #12]
 8002568:	611a      	str	r2, [r3, #16]
 800256a:	f8c3 2013 	str.w	r2, [r3, #19]

	if (iIndex == 0) {
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d120      	bne.n	80025b6 <FormCGI_Handler+0x6e>
		for (int i = 0; i < iNumParams; i++) {
 8002574:	2300      	movs	r3, #0
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002578:	e019      	b.n	80025ae <FormCGI_Handler+0x66>
			if (strcmp(pcParam[i], "ssid") == 0)
 800257a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	4413      	add	r3, r2
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4920      	ldr	r1, [pc, #128]	; (8002608 <FormCGI_Handler+0xc0>)
 8002586:	4618      	mov	r0, r3
 8002588:	f7fd fe5a 	bl	8000240 <strcmp>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10a      	bne.n	80025a8 <FormCGI_Handler+0x60>
			{
				strcpy(ssid, pcValue[i]);
 8002592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	4413      	add	r3, r2
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	f107 0310 	add.w	r3, r7, #16
 80025a0:	4611      	mov	r1, r2
 80025a2:	4618      	mov	r0, r3
 80025a4:	f016 f855 	bl	8018652 <strcpy>
		for (int i = 0; i < iNumParams; i++) {
 80025a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025aa:	3301      	adds	r3, #1
 80025ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	dbe1      	blt.n	800257a <FormCGI_Handler+0x32>
			}
		}
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 80025b6:	f107 0310 	add.w	r3, r7, #16
 80025ba:	4914      	ldr	r1, [pc, #80]	; (800260c <FormCGI_Handler+0xc4>)
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fd fe3f 	bl	8000240 <strcmp>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d111      	bne.n	80025ec <FormCGI_Handler+0xa4>
 80025c8:	4b10      	ldr	r3, [pc, #64]	; (800260c <FormCGI_Handler+0xc4>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00d      	beq.n	80025ec <FormCGI_Handler+0xa4>
		printf("SSID OK \n");
 80025d0:	480f      	ldr	r0, [pc, #60]	; (8002610 <FormCGI_Handler+0xc8>)
 80025d2:	f015 fe93 	bl	80182fc <puts>
		restartSSID();
 80025d6:	f7ff fd2d 	bl	8002034 <restartSSID>
		memset(ssid, '\0', sizeof(ssid));
 80025da:	f107 0310 	add.w	r3, r7, #16
 80025de:	221b      	movs	r2, #27
 80025e0:	2100      	movs	r1, #0
 80025e2:	4618      	mov	r0, r3
 80025e4:	f015 fd52 	bl	801808c <memset>
		return "/index.shtml"; //
 80025e8:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <FormCGI_Handler+0xcc>)
 80025ea:	e008      	b.n	80025fe <FormCGI_Handler+0xb6>
	} else {
		printf("SSID Failed \n");
 80025ec:	480a      	ldr	r0, [pc, #40]	; (8002618 <FormCGI_Handler+0xd0>)
 80025ee:	f015 fe85 	bl	80182fc <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 80025f2:	221b      	movs	r2, #27
 80025f4:	2100      	movs	r1, #0
 80025f6:	4805      	ldr	r0, [pc, #20]	; (800260c <FormCGI_Handler+0xc4>)
 80025f8:	f015 fd48 	bl	801808c <memset>
		return "/login.shtml";
 80025fc:	4b07      	ldr	r3, [pc, #28]	; (800261c <FormCGI_Handler+0xd4>)
	}

}
 80025fe:	4618      	mov	r0, r3
 8002600:	3730      	adds	r7, #48	; 0x30
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	08019f84 	.word	0x08019f84
 800260c:	20000a74 	.word	0x20000a74
 8002610:	0801a2d4 	.word	0x0801a2d4
 8002614:	0801a22c 	.word	0x0801a22c
 8002618:	0801a2e0 	.word	0x0801a2e0
 800261c:	0801a2f0 	.word	0x0801a2f0

08002620 <LoginCGI_Handler>:


// Login Handler (Index 1)
const char* LoginCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
 800262c:	603b      	str	r3, [r7, #0]

	if (iIndex == 1) {
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d14c      	bne.n	80026ce <LoginCGI_Handler+0xae>
		for (int i = 0; i < iNumParams; i++) {
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	e045      	b.n	80026c6 <LoginCGI_Handler+0xa6>
			if(strcmp(pcParam[i], "username") == 0){
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	4413      	add	r3, r2
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4924      	ldr	r1, [pc, #144]	; (80026d8 <LoginCGI_Handler+0xb8>)
 8002646:	4618      	mov	r0, r3
 8002648:	f7fd fdfa 	bl	8000240 <strcmp>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d115      	bne.n	800267e <LoginCGI_Handler+0x5e>
				printf("OK Get 1 \n");
 8002652:	4822      	ldr	r0, [pc, #136]	; (80026dc <LoginCGI_Handler+0xbc>)
 8002654:	f015 fe52 	bl	80182fc <puts>
				if(strcmp(pcValue[i], "admin") == 0){
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	4413      	add	r3, r2
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	491f      	ldr	r1, [pc, #124]	; (80026e0 <LoginCGI_Handler+0xc0>)
 8002664:	4618      	mov	r0, r3
 8002666:	f7fd fdeb 	bl	8000240 <strcmp>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d127      	bne.n	80026c0 <LoginCGI_Handler+0xa0>
					verifyNum++;
 8002670:	4b1c      	ldr	r3, [pc, #112]	; (80026e4 <LoginCGI_Handler+0xc4>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	3301      	adds	r3, #1
 8002676:	b2da      	uxtb	r2, r3
 8002678:	4b1a      	ldr	r3, [pc, #104]	; (80026e4 <LoginCGI_Handler+0xc4>)
 800267a:	701a      	strb	r2, [r3, #0]
 800267c:	e020      	b.n	80026c0 <LoginCGI_Handler+0xa0>
				}

			} else if(strcmp(pcParam[i], "password") == 0) {
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	4413      	add	r3, r2
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4917      	ldr	r1, [pc, #92]	; (80026e8 <LoginCGI_Handler+0xc8>)
 800268a:	4618      	mov	r0, r3
 800268c:	f7fd fdd8 	bl	8000240 <strcmp>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d114      	bne.n	80026c0 <LoginCGI_Handler+0xa0>
				printf("OK Get 2 \n");
 8002696:	4815      	ldr	r0, [pc, #84]	; (80026ec <LoginCGI_Handler+0xcc>)
 8002698:	f015 fe30 	bl	80182fc <puts>
				if(strcmp(pcValue[i], "12345678") == 0){
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	4413      	add	r3, r2
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4912      	ldr	r1, [pc, #72]	; (80026f0 <LoginCGI_Handler+0xd0>)
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fd fdc9 	bl	8000240 <strcmp>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d105      	bne.n	80026c0 <LoginCGI_Handler+0xa0>
					verifyNum++;
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <LoginCGI_Handler+0xc4>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	3301      	adds	r3, #1
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <LoginCGI_Handler+0xc4>)
 80026be:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < iNumParams; i++) {
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	3301      	adds	r3, #1
 80026c4:	617b      	str	r3, [r7, #20]
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	dbb5      	blt.n	800263a <LoginCGI_Handler+0x1a>
				}
			}
		}
	}

	return "/logon.shtml";
 80026ce:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <LoginCGI_Handler+0xd4>)
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	0801a300 	.word	0x0801a300
 80026dc:	0801a30c 	.word	0x0801a30c
 80026e0:	0801a318 	.word	0x0801a318
 80026e4:	20000a70 	.word	0x20000a70
 80026e8:	0801a320 	.word	0x0801a320
 80026ec:	0801a32c 	.word	0x0801a32c
 80026f0:	0801a338 	.word	0x0801a338
 80026f4:	0801a23c 	.word	0x0801a23c

080026f8 <SelectCGI_Handler>:


// select.shtml Handler (Index 2)
const char* SelectCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b08c      	sub	sp, #48	; 0x30
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	603b      	str	r3, [r7, #0]

	char ssid[27] = {0};
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	f107 0314 	add.w	r3, r7, #20
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	605a      	str	r2, [r3, #4]
 8002714:	609a      	str	r2, [r3, #8]
 8002716:	60da      	str	r2, [r3, #12]
 8002718:	611a      	str	r2, [r3, #16]
 800271a:	f8c3 2013 	str.w	r2, [r3, #19]

	if (iIndex == 2) {
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2b02      	cmp	r3, #2
 8002722:	d120      	bne.n	8002766 <SelectCGI_Handler+0x6e>
		for (int i = 0; i < iNumParams; i++) {
 8002724:	2300      	movs	r3, #0
 8002726:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002728:	e019      	b.n	800275e <SelectCGI_Handler+0x66>
			if (strcmp(pcParam[i], "ssid") == 0)
 800272a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	4413      	add	r3, r2
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4920      	ldr	r1, [pc, #128]	; (80027b8 <SelectCGI_Handler+0xc0>)
 8002736:	4618      	mov	r0, r3
 8002738:	f7fd fd82 	bl	8000240 <strcmp>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10a      	bne.n	8002758 <SelectCGI_Handler+0x60>
			{
				strcpy(ssid, pcValue[i]);
 8002742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	4413      	add	r3, r2
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	f107 0310 	add.w	r3, r7, #16
 8002750:	4611      	mov	r1, r2
 8002752:	4618      	mov	r0, r3
 8002754:	f015 ff7d 	bl	8018652 <strcpy>
		for (int i = 0; i < iNumParams; i++) {
 8002758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275a:	3301      	adds	r3, #1
 800275c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800275e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	429a      	cmp	r2, r3
 8002764:	dbe1      	blt.n	800272a <SelectCGI_Handler+0x32>
			}
		}
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 8002766:	f107 0310 	add.w	r3, r7, #16
 800276a:	4914      	ldr	r1, [pc, #80]	; (80027bc <SelectCGI_Handler+0xc4>)
 800276c:	4618      	mov	r0, r3
 800276e:	f7fd fd67 	bl	8000240 <strcmp>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d111      	bne.n	800279c <SelectCGI_Handler+0xa4>
 8002778:	4b10      	ldr	r3, [pc, #64]	; (80027bc <SelectCGI_Handler+0xc4>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00d      	beq.n	800279c <SelectCGI_Handler+0xa4>
		printf("SSID OK \n");
 8002780:	480f      	ldr	r0, [pc, #60]	; (80027c0 <SelectCGI_Handler+0xc8>)
 8002782:	f015 fdbb 	bl	80182fc <puts>
		restartSSID();
 8002786:	f7ff fc55 	bl	8002034 <restartSSID>
		memset(ssid, '\0', sizeof(ssid));
 800278a:	f107 0310 	add.w	r3, r7, #16
 800278e:	221b      	movs	r2, #27
 8002790:	2100      	movs	r1, #0
 8002792:	4618      	mov	r0, r3
 8002794:	f015 fc7a 	bl	801808c <memset>
		return "/select.shtml"; //
 8002798:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <SelectCGI_Handler+0xcc>)
 800279a:	e008      	b.n	80027ae <SelectCGI_Handler+0xb6>
	} else {
		printf("SSID Failed \n");
 800279c:	480a      	ldr	r0, [pc, #40]	; (80027c8 <SelectCGI_Handler+0xd0>)
 800279e:	f015 fdad 	bl	80182fc <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 80027a2:	221b      	movs	r2, #27
 80027a4:	2100      	movs	r1, #0
 80027a6:	4805      	ldr	r0, [pc, #20]	; (80027bc <SelectCGI_Handler+0xc4>)
 80027a8:	f015 fc70 	bl	801808c <memset>
		return "/login.shtml";
 80027ac:	4b07      	ldr	r3, [pc, #28]	; (80027cc <SelectCGI_Handler+0xd4>)
	}

}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3730      	adds	r7, #48	; 0x30
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	08019f84 	.word	0x08019f84
 80027bc:	20000a74 	.word	0x20000a74
 80027c0:	0801a2d4 	.word	0x0801a2d4
 80027c4:	0801a24c 	.word	0x0801a24c
 80027c8:	0801a2e0 	.word	0x0801a2e0
 80027cc:	0801a2f0 	.word	0x0801a2f0

080027d0 <RelayCGI_Handler>:


// tabrelay.shtml Handler (Index 3)
const char* RelayCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08c      	sub	sp, #48	; 0x30
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
 80027dc:	603b      	str	r3, [r7, #0]

	char ssid[27] = {0};
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	f107 0314 	add.w	r3, r7, #20
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	605a      	str	r2, [r3, #4]
 80027ec:	609a      	str	r2, [r3, #8]
 80027ee:	60da      	str	r2, [r3, #12]
 80027f0:	611a      	str	r2, [r3, #16]
 80027f2:	f8c3 2013 	str.w	r2, [r3, #19]

	if (iIndex == 3) {
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2b03      	cmp	r3, #3
 80027fa:	d120      	bne.n	800283e <RelayCGI_Handler+0x6e>
		for (int i = 0; i < iNumParams; i++) {
 80027fc:	2300      	movs	r3, #0
 80027fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002800:	e019      	b.n	8002836 <RelayCGI_Handler+0x66>
			if (strcmp(pcParam[i], "ssid") == 0)
 8002802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	4413      	add	r3, r2
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4920      	ldr	r1, [pc, #128]	; (8002890 <RelayCGI_Handler+0xc0>)
 800280e:	4618      	mov	r0, r3
 8002810:	f7fd fd16 	bl	8000240 <strcmp>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10a      	bne.n	8002830 <RelayCGI_Handler+0x60>
			{
				strcpy(ssid, pcValue[i]);
 800281a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	4413      	add	r3, r2
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	f107 0310 	add.w	r3, r7, #16
 8002828:	4611      	mov	r1, r2
 800282a:	4618      	mov	r0, r3
 800282c:	f015 ff11 	bl	8018652 <strcpy>
		for (int i = 0; i < iNumParams; i++) {
 8002830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002832:	3301      	adds	r3, #1
 8002834:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	429a      	cmp	r2, r3
 800283c:	dbe1      	blt.n	8002802 <RelayCGI_Handler+0x32>
			}
		}
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 800283e:	f107 0310 	add.w	r3, r7, #16
 8002842:	4914      	ldr	r1, [pc, #80]	; (8002894 <RelayCGI_Handler+0xc4>)
 8002844:	4618      	mov	r0, r3
 8002846:	f7fd fcfb 	bl	8000240 <strcmp>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d111      	bne.n	8002874 <RelayCGI_Handler+0xa4>
 8002850:	4b10      	ldr	r3, [pc, #64]	; (8002894 <RelayCGI_Handler+0xc4>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00d      	beq.n	8002874 <RelayCGI_Handler+0xa4>
		printf("SSID OK \n");
 8002858:	480f      	ldr	r0, [pc, #60]	; (8002898 <RelayCGI_Handler+0xc8>)
 800285a:	f015 fd4f 	bl	80182fc <puts>
		restartSSID();
 800285e:	f7ff fbe9 	bl	8002034 <restartSSID>
		memset(ssid, '\0', sizeof(ssid));
 8002862:	f107 0310 	add.w	r3, r7, #16
 8002866:	221b      	movs	r2, #27
 8002868:	2100      	movs	r1, #0
 800286a:	4618      	mov	r0, r3
 800286c:	f015 fc0e 	bl	801808c <memset>
		return "/tabrelay.shtml"; //
 8002870:	4b0a      	ldr	r3, [pc, #40]	; (800289c <RelayCGI_Handler+0xcc>)
 8002872:	e008      	b.n	8002886 <RelayCGI_Handler+0xb6>
	} else {
		printf("SSID Failed \n");
 8002874:	480a      	ldr	r0, [pc, #40]	; (80028a0 <RelayCGI_Handler+0xd0>)
 8002876:	f015 fd41 	bl	80182fc <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 800287a:	221b      	movs	r2, #27
 800287c:	2100      	movs	r1, #0
 800287e:	4805      	ldr	r0, [pc, #20]	; (8002894 <RelayCGI_Handler+0xc4>)
 8002880:	f015 fc04 	bl	801808c <memset>
		return "/login.shtml";
 8002884:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <RelayCGI_Handler+0xd4>)
	}

}
 8002886:	4618      	mov	r0, r3
 8002888:	3730      	adds	r7, #48	; 0x30
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	08019f84 	.word	0x08019f84
 8002894:	20000a74 	.word	0x20000a74
 8002898:	0801a2d4 	.word	0x0801a2d4
 800289c:	0801a25c 	.word	0x0801a25c
 80028a0:	0801a2e0 	.word	0x0801a2e0
 80028a4:	0801a2f0 	.word	0x0801a2f0

080028a8 <ButtonCGI_Handler>:

// tabbuttom.shtml Handler (Index 4)
const char* ButtonCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08c      	sub	sp, #48	; 0x30
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
 80028b4:	603b      	str	r3, [r7, #0]

	char ssid[27] = {0};
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
 80028ba:	f107 0314 	add.w	r3, r7, #20
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	605a      	str	r2, [r3, #4]
 80028c4:	609a      	str	r2, [r3, #8]
 80028c6:	60da      	str	r2, [r3, #12]
 80028c8:	611a      	str	r2, [r3, #16]
 80028ca:	f8c3 2013 	str.w	r2, [r3, #19]

	if (iIndex == 4) {
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d120      	bne.n	8002916 <ButtonCGI_Handler+0x6e>
		for (int i = 0; i < iNumParams; i++) {
 80028d4:	2300      	movs	r3, #0
 80028d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028d8:	e019      	b.n	800290e <ButtonCGI_Handler+0x66>
			if (strcmp(pcParam[i], "ssid") == 0)
 80028da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	4413      	add	r3, r2
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4920      	ldr	r1, [pc, #128]	; (8002968 <ButtonCGI_Handler+0xc0>)
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fd fcaa 	bl	8000240 <strcmp>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10a      	bne.n	8002908 <ButtonCGI_Handler+0x60>
			{
				strcpy(ssid, pcValue[i]);
 80028f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	4413      	add	r3, r2
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	f107 0310 	add.w	r3, r7, #16
 8002900:	4611      	mov	r1, r2
 8002902:	4618      	mov	r0, r3
 8002904:	f015 fea5 	bl	8018652 <strcpy>
		for (int i = 0; i < iNumParams; i++) {
 8002908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290a:	3301      	adds	r3, #1
 800290c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800290e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	429a      	cmp	r2, r3
 8002914:	dbe1      	blt.n	80028da <ButtonCGI_Handler+0x32>
			}
		}
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 8002916:	f107 0310 	add.w	r3, r7, #16
 800291a:	4914      	ldr	r1, [pc, #80]	; (800296c <ButtonCGI_Handler+0xc4>)
 800291c:	4618      	mov	r0, r3
 800291e:	f7fd fc8f 	bl	8000240 <strcmp>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d111      	bne.n	800294c <ButtonCGI_Handler+0xa4>
 8002928:	4b10      	ldr	r3, [pc, #64]	; (800296c <ButtonCGI_Handler+0xc4>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00d      	beq.n	800294c <ButtonCGI_Handler+0xa4>
		printf("SSID OK \n");
 8002930:	480f      	ldr	r0, [pc, #60]	; (8002970 <ButtonCGI_Handler+0xc8>)
 8002932:	f015 fce3 	bl	80182fc <puts>
		restartSSID();
 8002936:	f7ff fb7d 	bl	8002034 <restartSSID>
		memset(ssid, '\0', sizeof(ssid));
 800293a:	f107 0310 	add.w	r3, r7, #16
 800293e:	221b      	movs	r2, #27
 8002940:	2100      	movs	r1, #0
 8002942:	4618      	mov	r0, r3
 8002944:	f015 fba2 	bl	801808c <memset>
		return "/tabbuttom.shtml"; //
 8002948:	4b0a      	ldr	r3, [pc, #40]	; (8002974 <ButtonCGI_Handler+0xcc>)
 800294a:	e008      	b.n	800295e <ButtonCGI_Handler+0xb6>
	} else {
		printf("SSID Failed \n");
 800294c:	480a      	ldr	r0, [pc, #40]	; (8002978 <ButtonCGI_Handler+0xd0>)
 800294e:	f015 fcd5 	bl	80182fc <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 8002952:	221b      	movs	r2, #27
 8002954:	2100      	movs	r1, #0
 8002956:	4805      	ldr	r0, [pc, #20]	; (800296c <ButtonCGI_Handler+0xc4>)
 8002958:	f015 fb98 	bl	801808c <memset>
		return "/login.shtml";
 800295c:	4b07      	ldr	r3, [pc, #28]	; (800297c <ButtonCGI_Handler+0xd4>)
	}

}
 800295e:	4618      	mov	r0, r3
 8002960:	3730      	adds	r7, #48	; 0x30
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	08019f84 	.word	0x08019f84
 800296c:	20000a74 	.word	0x20000a74
 8002970:	0801a2d4 	.word	0x0801a2d4
 8002974:	0801a26c 	.word	0x0801a26c
 8002978:	0801a2e0 	.word	0x0801a2e0
 800297c:	0801a2f0 	.word	0x0801a2f0

08002980 <SettingCGI_Handler>:

// tabbuttom.shtml Handler (Index 5)
const char* SettingCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8002980:	b580      	push	{r7, lr}
 8002982:	b08c      	sub	sp, #48	; 0x30
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	603b      	str	r3, [r7, #0]

	char ssid[27] = {0};
 800298e:	2300      	movs	r3, #0
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	f107 0314 	add.w	r3, r7, #20
 8002996:	2200      	movs	r2, #0
 8002998:	601a      	str	r2, [r3, #0]
 800299a:	605a      	str	r2, [r3, #4]
 800299c:	609a      	str	r2, [r3, #8]
 800299e:	60da      	str	r2, [r3, #12]
 80029a0:	611a      	str	r2, [r3, #16]
 80029a2:	f8c3 2013 	str.w	r2, [r3, #19]

	if (iIndex == 5) {
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2b05      	cmp	r3, #5
 80029aa:	d120      	bne.n	80029ee <SettingCGI_Handler+0x6e>
		for (int i = 0; i < iNumParams; i++) {
 80029ac:	2300      	movs	r3, #0
 80029ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029b0:	e019      	b.n	80029e6 <SettingCGI_Handler+0x66>
			if (strcmp(pcParam[i], "ssid") == 0)
 80029b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	4413      	add	r3, r2
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4920      	ldr	r1, [pc, #128]	; (8002a40 <SettingCGI_Handler+0xc0>)
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fd fc3e 	bl	8000240 <strcmp>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10a      	bne.n	80029e0 <SettingCGI_Handler+0x60>
			{
				strcpy(ssid, pcValue[i]);
 80029ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	4413      	add	r3, r2
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	f107 0310 	add.w	r3, r7, #16
 80029d8:	4611      	mov	r1, r2
 80029da:	4618      	mov	r0, r3
 80029dc:	f015 fe39 	bl	8018652 <strcpy>
		for (int i = 0; i < iNumParams; i++) {
 80029e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e2:	3301      	adds	r3, #1
 80029e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	dbe1      	blt.n	80029b2 <SettingCGI_Handler+0x32>
			}
		}
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 80029ee:	f107 0310 	add.w	r3, r7, #16
 80029f2:	4914      	ldr	r1, [pc, #80]	; (8002a44 <SettingCGI_Handler+0xc4>)
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fd fc23 	bl	8000240 <strcmp>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d111      	bne.n	8002a24 <SettingCGI_Handler+0xa4>
 8002a00:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <SettingCGI_Handler+0xc4>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00d      	beq.n	8002a24 <SettingCGI_Handler+0xa4>
		printf("SSID OK \n");
 8002a08:	480f      	ldr	r0, [pc, #60]	; (8002a48 <SettingCGI_Handler+0xc8>)
 8002a0a:	f015 fc77 	bl	80182fc <puts>
		restartSSID();
 8002a0e:	f7ff fb11 	bl	8002034 <restartSSID>
		memset(ssid, '\0', sizeof(ssid));
 8002a12:	f107 0310 	add.w	r3, r7, #16
 8002a16:	221b      	movs	r2, #27
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f015 fb36 	bl	801808c <memset>
		return "/settings.shtml"; //
 8002a20:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <SettingCGI_Handler+0xcc>)
 8002a22:	e008      	b.n	8002a36 <SettingCGI_Handler+0xb6>
	} else {
		printf("SSID Failed \n");
 8002a24:	480a      	ldr	r0, [pc, #40]	; (8002a50 <SettingCGI_Handler+0xd0>)
 8002a26:	f015 fc69 	bl	80182fc <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 8002a2a:	221b      	movs	r2, #27
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	4805      	ldr	r0, [pc, #20]	; (8002a44 <SettingCGI_Handler+0xc4>)
 8002a30:	f015 fb2c 	bl	801808c <memset>
		return "/login.shtml";
 8002a34:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <SettingCGI_Handler+0xd4>)
	}

}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3730      	adds	r7, #48	; 0x30
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	08019f84 	.word	0x08019f84
 8002a44:	20000a74 	.word	0x20000a74
 8002a48:	0801a2d4 	.word	0x0801a2d4
 8002a4c:	0801a280 	.word	0x0801a280
 8002a50:	0801a2e0 	.word	0x0801a2e0
 8002a54:	0801a2f0 	.word	0x0801a2f0

08002a58 <TimerCGI_Handler>:

// tabbuttom.shtml Handler (Index 6)
const char* TimerCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08c      	sub	sp, #48	; 0x30
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
 8002a64:	603b      	str	r3, [r7, #0]

	char ssid[27] = {0};
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
 8002a6a:	f107 0314 	add.w	r3, r7, #20
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	609a      	str	r2, [r3, #8]
 8002a76:	60da      	str	r2, [r3, #12]
 8002a78:	611a      	str	r2, [r3, #16]
 8002a7a:	f8c3 2013 	str.w	r2, [r3, #19]

	if (iIndex == 6) {
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2b06      	cmp	r3, #6
 8002a82:	d120      	bne.n	8002ac6 <TimerCGI_Handler+0x6e>
		for (int i = 0; i < iNumParams; i++) {
 8002a84:	2300      	movs	r3, #0
 8002a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a88:	e019      	b.n	8002abe <TimerCGI_Handler+0x66>
			if (strcmp(pcParam[i], "ssid") == 0)
 8002a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	4413      	add	r3, r2
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4920      	ldr	r1, [pc, #128]	; (8002b18 <TimerCGI_Handler+0xc0>)
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fd fbd2 	bl	8000240 <strcmp>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10a      	bne.n	8002ab8 <TimerCGI_Handler+0x60>
			{
				strcpy(ssid, pcValue[i]);
 8002aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	f107 0310 	add.w	r3, r7, #16
 8002ab0:	4611      	mov	r1, r2
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f015 fdcd 	bl	8018652 <strcpy>
		for (int i = 0; i < iNumParams; i++) {
 8002ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aba:	3301      	adds	r3, #1
 8002abc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	dbe1      	blt.n	8002a8a <TimerCGI_Handler+0x32>
			}
		}
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 8002ac6:	f107 0310 	add.w	r3, r7, #16
 8002aca:	4914      	ldr	r1, [pc, #80]	; (8002b1c <TimerCGI_Handler+0xc4>)
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fd fbb7 	bl	8000240 <strcmp>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d111      	bne.n	8002afc <TimerCGI_Handler+0xa4>
 8002ad8:	4b10      	ldr	r3, [pc, #64]	; (8002b1c <TimerCGI_Handler+0xc4>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00d      	beq.n	8002afc <TimerCGI_Handler+0xa4>
		printf("SSID OK \n");
 8002ae0:	480f      	ldr	r0, [pc, #60]	; (8002b20 <TimerCGI_Handler+0xc8>)
 8002ae2:	f015 fc0b 	bl	80182fc <puts>
		restartSSID();
 8002ae6:	f7ff faa5 	bl	8002034 <restartSSID>
		memset(ssid, '\0', sizeof(ssid));
 8002aea:	f107 0310 	add.w	r3, r7, #16
 8002aee:	221b      	movs	r2, #27
 8002af0:	2100      	movs	r1, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	f015 faca 	bl	801808c <memset>
		return "/timers.shtml"; //
 8002af8:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <TimerCGI_Handler+0xcc>)
 8002afa:	e008      	b.n	8002b0e <TimerCGI_Handler+0xb6>
	} else {
		printf("SSID Failed \n");
 8002afc:	480a      	ldr	r0, [pc, #40]	; (8002b28 <TimerCGI_Handler+0xd0>)
 8002afe:	f015 fbfd 	bl	80182fc <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 8002b02:	221b      	movs	r2, #27
 8002b04:	2100      	movs	r1, #0
 8002b06:	4805      	ldr	r0, [pc, #20]	; (8002b1c <TimerCGI_Handler+0xc4>)
 8002b08:	f015 fac0 	bl	801808c <memset>
		return "/login.shtml";
 8002b0c:	4b07      	ldr	r3, [pc, #28]	; (8002b2c <TimerCGI_Handler+0xd4>)
	}
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3730      	adds	r7, #48	; 0x30
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	08019f84 	.word	0x08019f84
 8002b1c:	20000a74 	.word	0x20000a74
 8002b20:	0801a2d4 	.word	0x0801a2d4
 8002b24:	0801a290 	.word	0x0801a290
 8002b28:	0801a2e0 	.word	0x0801a2e0
 8002b2c:	0801a2f0 	.word	0x0801a2f0

08002b30 <LogoutCGI_Handler>:

// logout.shtml Handler logout (Index 7)
const char* LogoutCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
 8002b3c:	603b      	str	r3, [r7, #0]

	if (iIndex == 7) {
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b07      	cmp	r3, #7
 8002b42:	d104      	bne.n	8002b4e <LogoutCGI_Handler+0x1e>
		memset(randomSSID, '\0', sizeof(randomSSID));
 8002b44:	221b      	movs	r2, #27
 8002b46:	2100      	movs	r1, #0
 8002b48:	4803      	ldr	r0, [pc, #12]	; (8002b58 <LogoutCGI_Handler+0x28>)
 8002b4a:	f015 fa9f 	bl	801808c <memset>
	}

	return "/login.shtml";
 8002b4e:	4b03      	ldr	r3, [pc, #12]	; (8002b5c <LogoutCGI_Handler+0x2c>)
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	20000a74 	.word	0x20000a74
 8002b5c:	0801a2f0 	.word	0x0801a2f0

08002b60 <TabjsonCGI_Handler>:


// tabjson.shtml Handler table json (Index 8)
const char* TabjsonCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08c      	sub	sp, #48	; 0x30
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
 8002b6c:	603b      	str	r3, [r7, #0]

	char ssid[27] = {0};
 8002b6e:	2300      	movs	r3, #0
 8002b70:	613b      	str	r3, [r7, #16]
 8002b72:	f107 0314 	add.w	r3, r7, #20
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	605a      	str	r2, [r3, #4]
 8002b7c:	609a      	str	r2, [r3, #8]
 8002b7e:	60da      	str	r2, [r3, #12]
 8002b80:	611a      	str	r2, [r3, #16]
 8002b82:	f8c3 2013 	str.w	r2, [r3, #19]

	if (iIndex == 8) {
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d15c      	bne.n	8002c46 <TabjsonCGI_Handler+0xe6>
		for (int i = 0; i < iNumParams; i++) {
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b90:	e055      	b.n	8002c3e <TabjsonCGI_Handler+0xde>
			if (strcmp(pcParam[i], "ssid") == 0)
 8002b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	4413      	add	r3, r2
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	493e      	ldr	r1, [pc, #248]	; (8002c98 <TabjsonCGI_Handler+0x138>)
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fd fb4e 	bl	8000240 <strcmp>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10a      	bne.n	8002bc0 <TabjsonCGI_Handler+0x60>
			{
				strcpy(ssid, pcValue[i]);
 8002baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	f107 0310 	add.w	r3, r7, #16
 8002bb8:	4611      	mov	r1, r2
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f015 fd49 	bl	8018652 <strcpy>
			}
			if (strcmp(pcParam[i], "tab") == 0)
 8002bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4934      	ldr	r1, [pc, #208]	; (8002c9c <TabjsonCGI_Handler+0x13c>)
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fd fb37 	bl	8000240 <strcmp>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d12f      	bne.n	8002c38 <TabjsonCGI_Handler+0xd8>
			{
				tab = atoi(pcValue[i]);
 8002bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	4413      	add	r3, r2
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f015 f8ea 	bl	8017dbc <atoi>
 8002be8:	4603      	mov	r3, r0
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	4b2c      	ldr	r3, [pc, #176]	; (8002ca0 <TabjsonCGI_Handler+0x140>)
 8002bee:	701a      	strb	r2, [r3, #0]
				if(tab == 2)
 8002bf0:	4b2b      	ldr	r3, [pc, #172]	; (8002ca0 <TabjsonCGI_Handler+0x140>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d10d      	bne.n	8002c14 <TabjsonCGI_Handler+0xb4>
				{
					numTabLine = MultiPartTabCount(1,NUMPIN);
 8002bf8:	2159      	movs	r1, #89	; 0x59
 8002bfa:	2001      	movs	r0, #1
 8002bfc:	f7ff fa26 	bl	800204c <MultiPartTabCount>
 8002c00:	4603      	mov	r3, r0
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	4b27      	ldr	r3, [pc, #156]	; (8002ca4 <TabjsonCGI_Handler+0x144>)
 8002c06:	701a      	strb	r2, [r3, #0]
					printf("count  %d \n", numTabLine);
 8002c08:	4b26      	ldr	r3, [pc, #152]	; (8002ca4 <TabjsonCGI_Handler+0x144>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4826      	ldr	r0, [pc, #152]	; (8002ca8 <TabjsonCGI_Handler+0x148>)
 8002c10:	f015 faee 	bl	80181f0 <iprintf>
				}
				if(tab == 3)
 8002c14:	4b22      	ldr	r3, [pc, #136]	; (8002ca0 <TabjsonCGI_Handler+0x140>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d10d      	bne.n	8002c38 <TabjsonCGI_Handler+0xd8>
				{
					numTabLine = MultiPartTabCount(2,NUMPIN);
 8002c1c:	2159      	movs	r1, #89	; 0x59
 8002c1e:	2002      	movs	r0, #2
 8002c20:	f7ff fa14 	bl	800204c <MultiPartTabCount>
 8002c24:	4603      	mov	r3, r0
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	4b1e      	ldr	r3, [pc, #120]	; (8002ca4 <TabjsonCGI_Handler+0x144>)
 8002c2a:	701a      	strb	r2, [r3, #0]
					printf("count  %d \n", numTabLine);
 8002c2c:	4b1d      	ldr	r3, [pc, #116]	; (8002ca4 <TabjsonCGI_Handler+0x144>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	4619      	mov	r1, r3
 8002c32:	481d      	ldr	r0, [pc, #116]	; (8002ca8 <TabjsonCGI_Handler+0x148>)
 8002c34:	f015 fadc 	bl	80181f0 <iprintf>
		for (int i = 0; i < iNumParams; i++) {
 8002c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	dba5      	blt.n	8002b92 <TabjsonCGI_Handler+0x32>
			}
		}
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 8002c46:	f107 0310 	add.w	r3, r7, #16
 8002c4a:	4918      	ldr	r1, [pc, #96]	; (8002cac <TabjsonCGI_Handler+0x14c>)
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fd faf7 	bl	8000240 <strcmp>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d111      	bne.n	8002c7c <TabjsonCGI_Handler+0x11c>
 8002c58:	4b14      	ldr	r3, [pc, #80]	; (8002cac <TabjsonCGI_Handler+0x14c>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00d      	beq.n	8002c7c <TabjsonCGI_Handler+0x11c>
		printf("SSID OK \n");
 8002c60:	4813      	ldr	r0, [pc, #76]	; (8002cb0 <TabjsonCGI_Handler+0x150>)
 8002c62:	f015 fb4b 	bl	80182fc <puts>
		restartSSID();
 8002c66:	f7ff f9e5 	bl	8002034 <restartSSID>
		memset(ssid, '\0', sizeof(ssid));
 8002c6a:	f107 0310 	add.w	r3, r7, #16
 8002c6e:	221b      	movs	r2, #27
 8002c70:	2100      	movs	r1, #0
 8002c72:	4618      	mov	r0, r3
 8002c74:	f015 fa0a 	bl	801808c <memset>
		return "/tabjson.shtml"; //
 8002c78:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <TabjsonCGI_Handler+0x154>)
 8002c7a:	e008      	b.n	8002c8e <TabjsonCGI_Handler+0x12e>
	} else {
		printf("SSID Failed \n");
 8002c7c:	480e      	ldr	r0, [pc, #56]	; (8002cb8 <TabjsonCGI_Handler+0x158>)
 8002c7e:	f015 fb3d 	bl	80182fc <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 8002c82:	221b      	movs	r2, #27
 8002c84:	2100      	movs	r1, #0
 8002c86:	4809      	ldr	r0, [pc, #36]	; (8002cac <TabjsonCGI_Handler+0x14c>)
 8002c88:	f015 fa00 	bl	801808c <memset>
		return "/login.shtml";
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <TabjsonCGI_Handler+0x15c>)
	}
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3730      	adds	r7, #48	; 0x30
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	08019f84 	.word	0x08019f84
 8002c9c:	0801a344 	.word	0x0801a344
 8002ca0:	20000a71 	.word	0x20000a71
 8002ca4:	20000a72 	.word	0x20000a72
 8002ca8:	0801a348 	.word	0x0801a348
 8002cac:	20000a74 	.word	0x20000a74
 8002cb0:	0801a2d4 	.word	0x0801a2d4
 8002cb4:	0801a2b0 	.word	0x0801a2b0
 8002cb8:	0801a2e0 	.word	0x0801a2e0
 8002cbc:	0801a2f0 	.word	0x0801a2f0

08002cc0 <SelectSetCGI_Handler>:


// @todo проверить на пустое значение id и val перед записью
// selectset.shtml Handler (Index 9)
const char* SelectSetCGI_Handler(int iIndex, int iNumParams, char *pcParam[],
		char *pcValue[]) {
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08e      	sub	sp, #56	; 0x38
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	603b      	str	r3, [r7, #0]

	char ssid[27] = {0};
 8002cce:	2300      	movs	r3, #0
 8002cd0:	613b      	str	r3, [r7, #16]
 8002cd2:	f107 0314 	add.w	r3, r7, #20
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	605a      	str	r2, [r3, #4]
 8002cdc:	609a      	str	r2, [r3, #8]
 8002cde:	60da      	str	r2, [r3, #12]
 8002ce0:	611a      	str	r2, [r3, #16]
 8002ce2:	f8c3 2013 	str.w	r2, [r3, #19]
	int id;
	int val;

	if (iIndex == 9) {
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2b09      	cmp	r3, #9
 8002cea:	d152      	bne.n	8002d92 <SelectSetCGI_Handler+0xd2>
		for (int i = 0; i < iNumParams; i++) {
 8002cec:	2300      	movs	r3, #0
 8002cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cf0:	e043      	b.n	8002d7a <SelectSetCGI_Handler+0xba>
			if (strcmp(pcParam[i], "ssid") == 0)
 8002cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4939      	ldr	r1, [pc, #228]	; (8002de4 <SelectSetCGI_Handler+0x124>)
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fd fa9e 	bl	8000240 <strcmp>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10a      	bne.n	8002d20 <SelectSetCGI_Handler+0x60>
			{
				strcpy(ssid, pcValue[i]);
 8002d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	4413      	add	r3, r2
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	f107 0310 	add.w	r3, r7, #16
 8002d18:	4611      	mov	r1, r2
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f015 fc99 	bl	8018652 <strcpy>
			}
			if (strcmp(pcParam[i], "id") == 0)
 8002d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	4413      	add	r3, r2
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	492f      	ldr	r1, [pc, #188]	; (8002de8 <SelectSetCGI_Handler+0x128>)
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fd fa87 	bl	8000240 <strcmp>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d108      	bne.n	8002d4a <SelectSetCGI_Handler+0x8a>
			{
				id = atoi(pcValue[i]);
 8002d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	4413      	add	r3, r2
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f015 f83a 	bl	8017dbc <atoi>
 8002d48:	6378      	str	r0, [r7, #52]	; 0x34
			}
			if (strcmp(pcParam[i], "val") == 0)
 8002d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	4413      	add	r3, r2
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4925      	ldr	r1, [pc, #148]	; (8002dec <SelectSetCGI_Handler+0x12c>)
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fd fa72 	bl	8000240 <strcmp>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d108      	bne.n	8002d74 <SelectSetCGI_Handler+0xb4>
			{
				val = atoi(pcValue[i]);
 8002d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	4413      	add	r3, r2
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f015 f825 	bl	8017dbc <atoi>
 8002d72:	6338      	str	r0, [r7, #48]	; 0x30
		for (int i = 0; i < iNumParams; i++) {
 8002d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d76:	3301      	adds	r3, #1
 8002d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	dbb7      	blt.n	8002cf2 <SelectSetCGI_Handler+0x32>
			}
		}
		PinsConf[id].topin = val;
 8002d82:	4a1b      	ldr	r2, [pc, #108]	; (8002df0 <SelectSetCGI_Handler+0x130>)
 8002d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d86:	2194      	movs	r1, #148	; 0x94
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d90:	601a      	str	r2, [r3, #0]
	}

	/* login succeeded */
	if (strcmp (ssid, randomSSID) == 0 && strlen(randomSSID) != 0){
 8002d92:	f107 0310 	add.w	r3, r7, #16
 8002d96:	4917      	ldr	r1, [pc, #92]	; (8002df4 <SelectSetCGI_Handler+0x134>)
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7fd fa51 	bl	8000240 <strcmp>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d111      	bne.n	8002dc8 <SelectSetCGI_Handler+0x108>
 8002da4:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <SelectSetCGI_Handler+0x134>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00d      	beq.n	8002dc8 <SelectSetCGI_Handler+0x108>
		printf("SSID OK \n");
 8002dac:	4812      	ldr	r0, [pc, #72]	; (8002df8 <SelectSetCGI_Handler+0x138>)
 8002dae:	f015 faa5 	bl	80182fc <puts>
		restartSSID();
 8002db2:	f7ff f93f 	bl	8002034 <restartSSID>
		memset(ssid, '\0', sizeof(ssid));
 8002db6:	f107 0310 	add.w	r3, r7, #16
 8002dba:	221b      	movs	r2, #27
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f015 f964 	bl	801808c <memset>
		return "/selectset.shtml"; //
 8002dc4:	4b0d      	ldr	r3, [pc, #52]	; (8002dfc <SelectSetCGI_Handler+0x13c>)
 8002dc6:	e008      	b.n	8002dda <SelectSetCGI_Handler+0x11a>
	} else {
		printf("SSID Failed \n");
 8002dc8:	480d      	ldr	r0, [pc, #52]	; (8002e00 <SelectSetCGI_Handler+0x140>)
 8002dca:	f015 fa97 	bl	80182fc <puts>
		memset(randomSSID, '\0', sizeof(randomSSID));
 8002dce:	221b      	movs	r2, #27
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	4808      	ldr	r0, [pc, #32]	; (8002df4 <SelectSetCGI_Handler+0x134>)
 8002dd4:	f015 f95a 	bl	801808c <memset>
		return "/login.shtml";
 8002dd8:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <SelectSetCGI_Handler+0x144>)
	}

}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3738      	adds	r7, #56	; 0x38
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	08019f84 	.word	0x08019f84
 8002de8:	0801a354 	.word	0x0801a354
 8002dec:	0801a358 	.word	0x0801a358
 8002df0:	200053d0 	.word	0x200053d0
 8002df4:	20000a74 	.word	0x20000a74
 8002df8:	0801a2d4 	.word	0x0801a2d4
 8002dfc:	0801a2c0 	.word	0x0801a2c0
 8002e00:	0801a2e0 	.word	0x0801a2e0
 8002e04:	0801a2f0 	.word	0x0801a2f0

08002e08 <httpd_post_begin>:
int http_post_content_len;


err_t httpd_post_begin(void *connection, const char *uri,
		const char *http_request, uint16_t http_request_len, int content_len,
		char *response_uri, uint16_t response_uri_len, uint8_t *post_auto_wnd) {
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
 8002e14:	807b      	strh	r3, [r7, #2]
	  LWIP_UNUSED_ARG(http_request);
	  LWIP_UNUSED_ARG(http_request_len);
	  LWIP_UNUSED_ARG(content_len);
	  LWIP_UNUSED_ARG(post_auto_wnd);

	  strncpy(url, uri, 15);
 8002e16:	220f      	movs	r2, #15
 8002e18:	68b9      	ldr	r1, [r7, #8]
 8002e1a:	4815      	ldr	r0, [pc, #84]	; (8002e70 <httpd_post_begin+0x68>)
 8002e1c:	f015 fc33 	bl	8018686 <strncpy>

	  memset(bufervar, '\0', sizeof(bufervar));
 8002e20:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002e24:	2100      	movs	r1, #0
 8002e26:	4813      	ldr	r0, [pc, #76]	; (8002e74 <httpd_post_begin+0x6c>)
 8002e28:	f015 f930 	bl	801808c <memset>

	  if (!memcmp(uri, "/login.shtml", 13)) {
 8002e2c:	220d      	movs	r2, #13
 8002e2e:	4912      	ldr	r1, [pc, #72]	; (8002e78 <httpd_post_begin+0x70>)
 8002e30:	68b8      	ldr	r0, [r7, #8]
 8002e32:	f015 f8f5 	bl	8018020 <memcmp>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d112      	bne.n	8002e62 <httpd_post_begin+0x5a>
	    if (current_connection != connection) {
 8002e3c:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <httpd_post_begin+0x74>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d00d      	beq.n	8002e62 <httpd_post_begin+0x5a>
	      current_connection = connection;
 8002e46:	4a0d      	ldr	r2, [pc, #52]	; (8002e7c <httpd_post_begin+0x74>)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6013      	str	r3, [r2, #0]

	      snprintf(response_uri, response_uri_len, "/loginfail.shtml");
 8002e4c:	8c3b      	ldrh	r3, [r7, #32]
 8002e4e:	4a0c      	ldr	r2, [pc, #48]	; (8002e80 <httpd_post_begin+0x78>)
 8002e50:	4619      	mov	r1, r3
 8002e52:	69f8      	ldr	r0, [r7, #28]
 8002e54:	f015 fb1c 	bl	8018490 <sniprintf>


	      *post_auto_wnd = 1;
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	701a      	strb	r2, [r3, #0]
	      return ERR_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	e001      	b.n	8002e66 <httpd_post_begin+0x5e>
	    }
	  }
	  return ERR_VAL;
 8002e62:	f06f 0305 	mvn.w	r3, #5

}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20000a90 	.word	0x20000a90
 8002e74:	20000ab0 	.word	0x20000ab0
 8002e78:	0801a2f0 	.word	0x0801a2f0
 8002e7c:	20000a68 	.word	0x20000a68
 8002e80:	0801a35c 	.word	0x0801a35c

08002e84 <httpd_post_receive_data>:




err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 8002e84:	b580      	push	{r7, lr}
 8002e86:	f5ad 7d7c 	sub.w	sp, sp, #1008	; 0x3f0
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	1d3b      	adds	r3, r7, #4
 8002e8e:	6018      	str	r0, [r3, #0]
 8002e90:	463b      	mov	r3, r7
 8002e92:	6019      	str	r1, [r3, #0]

	char poststr[1000];

	if (current_connection == connection && p != NULL) {
 8002e94:	4b1a      	ldr	r3, [pc, #104]	; (8002f00 <httpd_post_receive_data+0x7c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	1d3a      	adds	r2, r7, #4
 8002e9a:	6812      	ldr	r2, [r2, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d11f      	bne.n	8002ee0 <httpd_post_receive_data+0x5c>
 8002ea0:	463b      	mov	r3, r7
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d01b      	beq.n	8002ee0 <httpd_post_receive_data+0x5c>




			   memcpy(poststr, p->payload, p->len);
 8002ea8:	463b      	mov	r3, r7
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	6859      	ldr	r1, [r3, #4]
 8002eae:	463b      	mov	r3, r7
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	895b      	ldrh	r3, [r3, #10]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	f107 0308 	add.w	r3, r7, #8
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f015 f8be 	bl	801803c <memcpy>
			   strcat(bufervar, poststr);
 8002ec0:	f107 0308 	add.w	r3, r7, #8
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	480f      	ldr	r0, [pc, #60]	; (8002f04 <httpd_post_receive_data+0x80>)
 8002ec8:	f015 fba7 	bl	801861a <strcat>
			   pbuf_free(p);
 8002ecc:	463b      	mov	r3, r7
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	f00b fd7a 	bl	800e9c8 <pbuf_free>



		pbuf_free(p);
 8002ed4:	463b      	mov	r3, r7
 8002ed6:	6818      	ldr	r0, [r3, #0]
 8002ed8:	f00b fd76 	bl	800e9c8 <pbuf_free>
		return ERR_OK;
 8002edc:	2300      	movs	r3, #0
 8002ede:	e009      	b.n	8002ef4 <httpd_post_receive_data+0x70>
	}


	if (p != NULL) {
 8002ee0:	463b      	mov	r3, r7
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <httpd_post_receive_data+0x6c>
		pbuf_free(p);
 8002ee8:	463b      	mov	r3, r7
 8002eea:	6818      	ldr	r0, [r3, #0]
 8002eec:	f00b fd6c 	bl	800e9c8 <pbuf_free>
	}
	return ERR_VAL;
 8002ef0:	f06f 0305 	mvn.w	r3, #5
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f507 777c 	add.w	r7, r7, #1008	; 0x3f0
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	20000a68 	.word	0x20000a68
 8002f04:	20000ab0 	.word	0x20000ab0

08002f08 <httpd_post_finished>:

void httpd_post_finished(void *connection, char *response_uri, u16_t response_uri_len) {
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	4613      	mov	r3, r2
 8002f14:	80fb      	strh	r3, [r7, #6]

	  /* default page is "login failed" */
	  snprintf(response_uri, response_uri_len, "/loginfail.shtml");
 8002f16:	88fb      	ldrh	r3, [r7, #6]
 8002f18:	4a0d      	ldr	r2, [pc, #52]	; (8002f50 <httpd_post_finished+0x48>)
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	68b8      	ldr	r0, [r7, #8]
 8002f1e:	f015 fab7 	bl	8018490 <sniprintf>


	  if (current_connection == connection) {
 8002f22:	4b0c      	ldr	r3, [pc, #48]	; (8002f54 <httpd_post_finished+0x4c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68fa      	ldr	r2, [r7, #12]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d10c      	bne.n	8002f46 <httpd_post_finished+0x3e>

	    /* login succeeded */
		if (strlen(randomSSID) != 0){
 8002f2c:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <httpd_post_finished+0x50>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <httpd_post_finished+0x38>
			snprintf(response_uri, response_uri_len, "/session.shtml");
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	4a09      	ldr	r2, [pc, #36]	; (8002f5c <httpd_post_finished+0x54>)
 8002f38:	4619      	mov	r1, r3
 8002f3a:	68b8      	ldr	r0, [r7, #8]
 8002f3c:	f015 faa8 	bl	8018490 <sniprintf>
		}

	    current_connection = NULL;
 8002f40:	4b04      	ldr	r3, [pc, #16]	; (8002f54 <httpd_post_finished+0x4c>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]

	  }
}
 8002f46:	bf00      	nop
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	0801a35c 	.word	0x0801a35c
 8002f54:	20000a68 	.word	0x20000a68
 8002f58:	20000a74 	.word	0x20000a74
 8002f5c:	0801a370 	.word	0x0801a370

08002f60 <http_server_init>:

//////////////////// POST  END ////////////////////////



void http_server_init(void) {
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
	httpd_init();
 8002f64:	f00a f814 	bl	800cf90 <httpd_init>
	http_set_ssi_handler((tSSIHandler) ssi_handler, (char const**) TAGS, SSI_TAG_NUM); //
 8002f68:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <http_server_init+0x24>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	4619      	mov	r1, r3
 8002f70:	4805      	ldr	r0, [pc, #20]	; (8002f88 <http_server_init+0x28>)
 8002f72:	f00a f82d 	bl	800cfd0 <http_set_ssi_handler>

	http_set_cgi_handlers(URL_TABLES, CGI_URL_NUM); //
 8002f76:	230a      	movs	r3, #10
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4804      	ldr	r0, [pc, #16]	; (8002f8c <http_server_init+0x2c>)
 8002f7c:	f00a f86a 	bl	800d054 <http_set_cgi_handlers>
}
 8002f80:	bf00      	nop
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20000714 	.word	0x20000714
 8002f88:	080020c1 	.word	0x080020c1
 8002f8c:	0801d674 	.word	0x0801d674

08002f90 <Reset_Handler>:
 8002f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fc8 <LoopFillZerobss+0x12>
 8002f94:	480d      	ldr	r0, [pc, #52]	; (8002fcc <LoopFillZerobss+0x16>)
 8002f96:	490e      	ldr	r1, [pc, #56]	; (8002fd0 <LoopFillZerobss+0x1a>)
 8002f98:	4a0e      	ldr	r2, [pc, #56]	; (8002fd4 <LoopFillZerobss+0x1e>)
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	e002      	b.n	8002fa4 <LoopCopyDataInit>

08002f9e <CopyDataInit>:
 8002f9e:	58d4      	ldr	r4, [r2, r3]
 8002fa0:	50c4      	str	r4, [r0, r3]
 8002fa2:	3304      	adds	r3, #4

08002fa4 <LoopCopyDataInit>:
 8002fa4:	18c4      	adds	r4, r0, r3
 8002fa6:	428c      	cmp	r4, r1
 8002fa8:	d3f9      	bcc.n	8002f9e <CopyDataInit>
 8002faa:	4a0b      	ldr	r2, [pc, #44]	; (8002fd8 <LoopFillZerobss+0x22>)
 8002fac:	4c0b      	ldr	r4, [pc, #44]	; (8002fdc <LoopFillZerobss+0x26>)
 8002fae:	2300      	movs	r3, #0
 8002fb0:	e001      	b.n	8002fb6 <LoopFillZerobss>

08002fb2 <FillZerobss>:
 8002fb2:	6013      	str	r3, [r2, #0]
 8002fb4:	3204      	adds	r2, #4

08002fb6 <LoopFillZerobss>:
 8002fb6:	42a2      	cmp	r2, r4
 8002fb8:	d3fb      	bcc.n	8002fb2 <FillZerobss>
 8002fba:	f7fe fff5 	bl	8001fa8 <SystemInit>
 8002fbe:	f014 fff7 	bl	8017fb0 <__libc_init_array>
 8002fc2:	f7fe fb9b 	bl	80016fc <main>
 8002fc6:	4770      	bx	lr
 8002fc8:	20080000 	.word	0x20080000
 8002fcc:	20000000 	.word	0x20000000
 8002fd0:	20000794 	.word	0x20000794
 8002fd4:	080217b4 	.word	0x080217b4
 8002fd8:	20000794 	.word	0x20000794
 8002fdc:	20018bd4 	.word	0x20018bd4

08002fe0 <ADC_IRQHandler>:
 8002fe0:	e7fe      	b.n	8002fe0 <ADC_IRQHandler>

08002fe2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fe6:	2003      	movs	r0, #3
 8002fe8:	f000 f8f9 	bl	80031de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fec:	200f      	movs	r0, #15
 8002fee:	f7fe fe8f 	bl	8001d10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ff2:	f7fe fd8b 	bl	8001b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003000:	4b06      	ldr	r3, [pc, #24]	; (800301c <HAL_IncTick+0x20>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	461a      	mov	r2, r3
 8003006:	4b06      	ldr	r3, [pc, #24]	; (8003020 <HAL_IncTick+0x24>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4413      	add	r3, r2
 800300c:	4a04      	ldr	r2, [pc, #16]	; (8003020 <HAL_IncTick+0x24>)
 800300e:	6013      	str	r3, [r2, #0]
}
 8003010:	bf00      	nop
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	2000071c 	.word	0x2000071c
 8003020:	2000b18c 	.word	0x2000b18c

08003024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  return uwTick;
 8003028:	4b03      	ldr	r3, [pc, #12]	; (8003038 <HAL_GetTick+0x14>)
 800302a:	681b      	ldr	r3, [r3, #0]
}
 800302c:	4618      	mov	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	2000b18c 	.word	0x2000b18c

0800303c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003044:	f7ff ffee 	bl	8003024 <HAL_GetTick>
 8003048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003054:	d005      	beq.n	8003062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003056:	4b0a      	ldr	r3, [pc, #40]	; (8003080 <HAL_Delay+0x44>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	461a      	mov	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4413      	add	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003062:	bf00      	nop
 8003064:	f7ff ffde 	bl	8003024 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	429a      	cmp	r2, r3
 8003072:	d8f7      	bhi.n	8003064 <HAL_Delay+0x28>
  {
  }
}
 8003074:	bf00      	nop
 8003076:	bf00      	nop
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	2000071c 	.word	0x2000071c

08003084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003094:	4b0b      	ldr	r3, [pc, #44]	; (80030c4 <__NVIC_SetPriorityGrouping+0x40>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030a0:	4013      	ands	r3, r2
 80030a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80030ac:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <__NVIC_SetPriorityGrouping+0x44>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030b2:	4a04      	ldr	r2, [pc, #16]	; (80030c4 <__NVIC_SetPriorityGrouping+0x40>)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	60d3      	str	r3, [r2, #12]
}
 80030b8:	bf00      	nop
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	e000ed00 	.word	0xe000ed00
 80030c8:	05fa0000 	.word	0x05fa0000

080030cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030d0:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <__NVIC_GetPriorityGrouping+0x18>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	0a1b      	lsrs	r3, r3, #8
 80030d6:	f003 0307 	and.w	r3, r3, #7
}
 80030da:	4618      	mov	r0, r3
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	e000ed00 	.word	0xe000ed00

080030e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	db0b      	blt.n	8003112 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	f003 021f 	and.w	r2, r3, #31
 8003100:	4907      	ldr	r1, [pc, #28]	; (8003120 <__NVIC_EnableIRQ+0x38>)
 8003102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003106:	095b      	lsrs	r3, r3, #5
 8003108:	2001      	movs	r0, #1
 800310a:	fa00 f202 	lsl.w	r2, r0, r2
 800310e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	e000e100 	.word	0xe000e100

08003124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	6039      	str	r1, [r7, #0]
 800312e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003134:	2b00      	cmp	r3, #0
 8003136:	db0a      	blt.n	800314e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	b2da      	uxtb	r2, r3
 800313c:	490c      	ldr	r1, [pc, #48]	; (8003170 <__NVIC_SetPriority+0x4c>)
 800313e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003142:	0112      	lsls	r2, r2, #4
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	440b      	add	r3, r1
 8003148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800314c:	e00a      	b.n	8003164 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	b2da      	uxtb	r2, r3
 8003152:	4908      	ldr	r1, [pc, #32]	; (8003174 <__NVIC_SetPriority+0x50>)
 8003154:	79fb      	ldrb	r3, [r7, #7]
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	3b04      	subs	r3, #4
 800315c:	0112      	lsls	r2, r2, #4
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	440b      	add	r3, r1
 8003162:	761a      	strb	r2, [r3, #24]
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	e000e100 	.word	0xe000e100
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003178:	b480      	push	{r7}
 800317a:	b089      	sub	sp, #36	; 0x24
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f1c3 0307 	rsb	r3, r3, #7
 8003192:	2b04      	cmp	r3, #4
 8003194:	bf28      	it	cs
 8003196:	2304      	movcs	r3, #4
 8003198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3304      	adds	r3, #4
 800319e:	2b06      	cmp	r3, #6
 80031a0:	d902      	bls.n	80031a8 <NVIC_EncodePriority+0x30>
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	3b03      	subs	r3, #3
 80031a6:	e000      	b.n	80031aa <NVIC_EncodePriority+0x32>
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43da      	mvns	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	401a      	ands	r2, r3
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ca:	43d9      	mvns	r1, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d0:	4313      	orrs	r3, r2
         );
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3724      	adds	r7, #36	; 0x24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7ff ff4c 	bl	8003084 <__NVIC_SetPriorityGrouping>
}
 80031ec:	bf00      	nop
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4603      	mov	r3, r0
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003206:	f7ff ff61 	bl	80030cc <__NVIC_GetPriorityGrouping>
 800320a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	68b9      	ldr	r1, [r7, #8]
 8003210:	6978      	ldr	r0, [r7, #20]
 8003212:	f7ff ffb1 	bl	8003178 <NVIC_EncodePriority>
 8003216:	4602      	mov	r2, r0
 8003218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800321c:	4611      	mov	r1, r2
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff ff80 	bl	8003124 <__NVIC_SetPriority>
}
 8003224:	bf00      	nop
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff ff54 	bl	80030e8 <__NVIC_EnableIRQ>
}
 8003240:	bf00      	nop
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8003250:	2300      	movs	r3, #0
 8003252:	61fb      	str	r3, [r7, #28]
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8003258:	4ba9      	ldr	r3, [pc, #676]	; (8003500 <HAL_ETH_Init+0x2b8>)
 800325a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 800325c:	2300      	movs	r3, #0
 800325e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8003260:	2300      	movs	r3, #0
 8003262:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e181      	b.n	8003572 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d106      	bne.n	8003288 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f004 f9fc 	bl	8007680 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003288:	4b9e      	ldr	r3, [pc, #632]	; (8003504 <HAL_ETH_Init+0x2bc>)
 800328a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328c:	4a9d      	ldr	r2, [pc, #628]	; (8003504 <HAL_ETH_Init+0x2bc>)
 800328e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003292:	6453      	str	r3, [r2, #68]	; 0x44
 8003294:	4b9b      	ldr	r3, [pc, #620]	; (8003504 <HAL_ETH_Init+0x2bc>)
 8003296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80032a0:	4b99      	ldr	r3, [pc, #612]	; (8003508 <HAL_ETH_Init+0x2c0>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	4a98      	ldr	r2, [pc, #608]	; (8003508 <HAL_ETH_Init+0x2c0>)
 80032a6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80032aa:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80032ac:	4b96      	ldr	r3, [pc, #600]	; (8003508 <HAL_ETH_Init+0x2c0>)
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	4994      	ldr	r1, [pc, #592]	; (8003508 <HAL_ETH_Init+0x2c0>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f042 0201 	orr.w	r2, r2, #1
 80032cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032d0:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80032d2:	f7ff fea7 	bl	8003024 <HAL_GetTick>
 80032d6:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80032d8:	e011      	b.n	80032fe <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80032da:	f7ff fea3 	bl	8003024 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80032e8:	d909      	bls.n	80032fe <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2203      	movs	r2, #3
 80032ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e139      	b.n	8003572 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1e4      	bne.n	80032da <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f023 031c 	bic.w	r3, r3, #28
 800331e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003320:	f002 f900 	bl	8005524 <HAL_RCC_GetHCLKFreq>
 8003324:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	4a78      	ldr	r2, [pc, #480]	; (800350c <HAL_ETH_Init+0x2c4>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d908      	bls.n	8003340 <HAL_ETH_Init+0xf8>
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	4a77      	ldr	r2, [pc, #476]	; (8003510 <HAL_ETH_Init+0x2c8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d804      	bhi.n	8003340 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	f043 0308 	orr.w	r3, r3, #8
 800333c:	61fb      	str	r3, [r7, #28]
 800333e:	e027      	b.n	8003390 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	4a73      	ldr	r2, [pc, #460]	; (8003510 <HAL_ETH_Init+0x2c8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d908      	bls.n	800335a <HAL_ETH_Init+0x112>
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	4a6d      	ldr	r2, [pc, #436]	; (8003500 <HAL_ETH_Init+0x2b8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d204      	bcs.n	800335a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f043 030c 	orr.w	r3, r3, #12
 8003356:	61fb      	str	r3, [r7, #28]
 8003358:	e01a      	b.n	8003390 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	4a68      	ldr	r2, [pc, #416]	; (8003500 <HAL_ETH_Init+0x2b8>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d303      	bcc.n	800336a <HAL_ETH_Init+0x122>
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	4a6b      	ldr	r2, [pc, #428]	; (8003514 <HAL_ETH_Init+0x2cc>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d911      	bls.n	800338e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	4a69      	ldr	r2, [pc, #420]	; (8003514 <HAL_ETH_Init+0x2cc>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d908      	bls.n	8003384 <HAL_ETH_Init+0x13c>
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	4a68      	ldr	r2, [pc, #416]	; (8003518 <HAL_ETH_Init+0x2d0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d804      	bhi.n	8003384 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	f043 0304 	orr.w	r3, r3, #4
 8003380:	61fb      	str	r3, [r7, #28]
 8003382:	e005      	b.n	8003390 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	f043 0310 	orr.w	r3, r3, #16
 800338a:	61fb      	str	r3, [r7, #28]
 800338c:	e000      	b.n	8003390 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800338e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	69fa      	ldr	r2, [r7, #28]
 8003396:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003398:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800339c:	2100      	movs	r1, #0
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 fc17 	bl	8003bd2 <HAL_ETH_WritePHYRegister>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00b      	beq.n	80033c2 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80033ae:	6939      	ldr	r1, [r7, #16]
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 fdcd 	bl	8003f50 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e0d7      	b.n	8003572 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80033c2:	20ff      	movs	r0, #255	; 0xff
 80033c4:	f7ff fe3a 	bl	800303c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f000 80a5 	beq.w	800351c <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80033d2:	f7ff fe27 	bl	8003024 <HAL_GetTick>
 80033d6:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80033d8:	f107 030c 	add.w	r3, r7, #12
 80033dc:	461a      	mov	r2, r3
 80033de:	2101      	movs	r1, #1
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 fb8e 	bl	8003b02 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80033e6:	f7ff fe1d 	bl	8003024 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d90f      	bls.n	8003418 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80033fc:	6939      	ldr	r1, [r7, #16]
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 fda6 	bl	8003f50 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e0ac      	b.n	8003572 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f003 0304 	and.w	r3, r3, #4
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0da      	beq.n	80033d8 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003422:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003426:	2100      	movs	r1, #0
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 fbd2 	bl	8003bd2 <HAL_ETH_WritePHYRegister>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00b      	beq.n	800344c <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003438:	6939      	ldr	r1, [r7, #16]
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fd88 	bl	8003f50 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003448:	2301      	movs	r3, #1
 800344a:	e092      	b.n	8003572 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800344c:	f7ff fdea 	bl	8003024 <HAL_GetTick>
 8003450:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003452:	f107 030c 	add.w	r3, r7, #12
 8003456:	461a      	mov	r2, r3
 8003458:	2101      	movs	r1, #1
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 fb51 	bl	8003b02 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003460:	f7ff fde0 	bl	8003024 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	f241 3288 	movw	r2, #5000	; 0x1388
 800346e:	4293      	cmp	r3, r2
 8003470:	d90f      	bls.n	8003492 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003476:	6939      	ldr	r1, [r7, #16]
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f000 fd69 	bl	8003f50 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e06f      	b.n	8003572 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f003 0320 	and.w	r3, r3, #32
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0da      	beq.n	8003452 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800349c:	f107 030c 	add.w	r3, r7, #12
 80034a0:	461a      	mov	r2, r3
 80034a2:	2110      	movs	r1, #16
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 fb2c 	bl	8003b02 <HAL_ETH_ReadPHYRegister>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00b      	beq.n	80034c8 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80034b4:	6939      	ldr	r1, [r7, #16]
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 fd4a 	bl	8003f50 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80034c4:	2301      	movs	r3, #1
 80034c6:	e054      	b.n	8003572 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f003 0304 	and.w	r3, r3, #4
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d004      	beq.n	80034dc <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034d8:	60da      	str	r2, [r3, #12]
 80034da:	e002      	b.n	80034e2 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	609a      	str	r2, [r3, #8]
 80034f2:	e035      	b.n	8003560 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034fa:	609a      	str	r2, [r3, #8]
 80034fc:	e030      	b.n	8003560 <HAL_ETH_Init+0x318>
 80034fe:	bf00      	nop
 8003500:	03938700 	.word	0x03938700
 8003504:	40023800 	.word	0x40023800
 8003508:	40013800 	.word	0x40013800
 800350c:	01312cff 	.word	0x01312cff
 8003510:	02160ebf 	.word	0x02160ebf
 8003514:	05f5e0ff 	.word	0x05f5e0ff
 8003518:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	08db      	lsrs	r3, r3, #3
 8003522:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	085b      	lsrs	r3, r3, #1
 800352a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800352c:	4313      	orrs	r3, r2
 800352e:	b29b      	uxth	r3, r3
 8003530:	461a      	mov	r2, r3
 8003532:	2100      	movs	r1, #0
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 fb4c 	bl	8003bd2 <HAL_ETH_WritePHYRegister>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00b      	beq.n	8003558 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003544:	6939      	ldr	r1, [r7, #16]
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 fd02 	bl	8003f50 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e00c      	b.n	8003572 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8003558:	f640 70ff 	movw	r0, #4095	; 0xfff
 800355c:	f7ff fd6e 	bl	800303c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003560:	6939      	ldr	r1, [r7, #16]
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 fcf4 	bl	8003f50 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3720      	adds	r7, #32
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop

0800357c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
 8003588:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003594:	2b01      	cmp	r3, #1
 8003596:	d101      	bne.n	800359c <HAL_ETH_DMATxDescListInit+0x20>
 8003598:	2302      	movs	r3, #2
 800359a:	e052      	b.n	8003642 <HAL_ETH_DMATxDescListInit+0xc6>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80035b2:	2300      	movs	r3, #0
 80035b4:	617b      	str	r3, [r7, #20]
 80035b6:	e030      	b.n	800361a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	015b      	lsls	r3, r3, #5
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	4413      	add	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80035c8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80035d0:	fb02 f303 	mul.w	r3, r2, r3
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	4413      	add	r3, r2
 80035d8:	461a      	mov	r2, r3
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d105      	bne.n	80035f2 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	3b01      	subs	r3, #1
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d208      	bcs.n	800360e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	3301      	adds	r3, #1
 8003600:	015b      	lsls	r3, r3, #5
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	4413      	add	r3, r2
 8003606:	461a      	mov	r2, r3
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	60da      	str	r2, [r3, #12]
 800360c:	e002      	b.n	8003614 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	3301      	adds	r3, #1
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	429a      	cmp	r2, r3
 8003620:	d3ca      	bcc.n	80035b8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6819      	ldr	r1, [r3, #0]
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	f241 0310 	movw	r3, #4112	; 0x1010
 800362c:	440b      	add	r3, r1
 800362e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	371c      	adds	r7, #28
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800364e:	b480      	push	{r7}
 8003650:	b087      	sub	sp, #28
 8003652:	af00      	add	r7, sp, #0
 8003654:	60f8      	str	r0, [r7, #12]
 8003656:	60b9      	str	r1, [r7, #8]
 8003658:	607a      	str	r2, [r7, #4]
 800365a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800365c:	2300      	movs	r3, #0
 800365e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003666:	2b01      	cmp	r3, #1
 8003668:	d101      	bne.n	800366e <HAL_ETH_DMARxDescListInit+0x20>
 800366a:	2302      	movs	r3, #2
 800366c:	e056      	b.n	800371c <HAL_ETH_DMARxDescListInit+0xce>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2202      	movs	r2, #2
 800367a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	68ba      	ldr	r2, [r7, #8]
 8003682:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	e034      	b.n	80036f4 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	015b      	lsls	r3, r3, #5
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	4413      	add	r3, r2
 8003692:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800369a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80036a2:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80036aa:	fb02 f303 	mul.w	r3, r2, r3
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	4413      	add	r3, r2
 80036b2:	461a      	mov	r2, r3
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d105      	bne.n	80036cc <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d208      	bcs.n	80036e8 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	3301      	adds	r3, #1
 80036da:	015b      	lsls	r3, r3, #5
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	4413      	add	r3, r2
 80036e0:	461a      	mov	r2, r3
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	60da      	str	r2, [r3, #12]
 80036e6:	e002      	b.n	80036ee <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	3301      	adds	r3, #1
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d3c6      	bcc.n	800368a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6819      	ldr	r1, [r3, #0]
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	f241 030c 	movw	r3, #4108	; 0x100c
 8003706:	440b      	add	r3, r1
 8003708:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	371c      	adds	r7, #28
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8003732:	2300      	movs	r3, #0
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	2300      	movs	r3, #0
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	2300      	movs	r3, #0
 800373c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003744:	2b01      	cmp	r3, #1
 8003746:	d101      	bne.n	800374c <HAL_ETH_TransmitFrame+0x24>
 8003748:	2302      	movs	r3, #2
 800374a:	e0cd      	b.n	80038e8 <HAL_ETH_TransmitFrame+0x1c0>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d109      	bne.n	8003776 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8003772:	2301      	movs	r3, #1
 8003774:	e0b8      	b.n	80038e8 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	da09      	bge.n	8003794 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2212      	movs	r2, #18
 8003784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e0a9      	b.n	80038e8 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800379a:	4293      	cmp	r3, r2
 800379c:	d915      	bls.n	80037ca <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	4a54      	ldr	r2, [pc, #336]	; (80038f4 <HAL_ETH_TransmitFrame+0x1cc>)
 80037a2:	fba2 2303 	umull	r2, r3, r2, r3
 80037a6:	0a9b      	lsrs	r3, r3, #10
 80037a8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	4b51      	ldr	r3, [pc, #324]	; (80038f4 <HAL_ETH_TransmitFrame+0x1cc>)
 80037ae:	fba3 1302 	umull	r1, r3, r3, r2
 80037b2:	0a9b      	lsrs	r3, r3, #10
 80037b4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80037b8:	fb01 f303 	mul.w	r3, r1, r3
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	3301      	adds	r3, #1
 80037c6:	617b      	str	r3, [r7, #20]
 80037c8:	e001      	b.n	80037ce <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80037ca:	2301      	movs	r3, #1
 80037cc:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d11c      	bne.n	800380e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037de:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80037e2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80037ee:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80037fe:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	461a      	mov	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	62da      	str	r2, [r3, #44]	; 0x2c
 800380c:	e04b      	b.n	80038a6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800380e:	2300      	movs	r3, #0
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	e044      	b.n	800389e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003822:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d107      	bne.n	800383a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003834:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003838:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003842:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	3b01      	subs	r3, #1
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	429a      	cmp	r2, r3
 800384c:	d116      	bne.n	800387c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003858:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800385c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	4a25      	ldr	r2, [pc, #148]	; (80038f8 <HAL_ETH_TransmitFrame+0x1d0>)
 8003862:	fb02 f203 	mul.w	r2, r2, r3
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	4413      	add	r3, r2
 800386a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800386e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800387a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003886:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800388a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	461a      	mov	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	3301      	adds	r3, #1
 800389c:	613b      	str	r3, [r7, #16]
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d3b6      	bcc.n	8003814 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	f241 0314 	movw	r3, #4116	; 0x1014
 80038ae:	4413      	add	r3, r2
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00d      	beq.n	80038d6 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	f241 0314 	movw	r3, #4116	; 0x1014
 80038c2:	4413      	add	r3, r2
 80038c4:	2204      	movs	r2, #4
 80038c6:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	f241 0304 	movw	r3, #4100	; 0x1004
 80038d0:	4413      	add	r3, r2
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	371c      	adds	r7, #28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	ac02b00b 	.word	0xac02b00b
 80038f8:	fffffa0c 	.word	0xfffffa0c

080038fc <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8003904:	2300      	movs	r3, #0
 8003906:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8003912:	2302      	movs	r3, #2
 8003914:	e074      	b.n	8003a00 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2202      	movs	r2, #2
 8003922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003926:	e05a      	b.n	80039de <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	3301      	adds	r3, #1
 800392c:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800393c:	d10d      	bne.n	800395a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	461a      	mov	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	629a      	str	r2, [r3, #40]	; 0x28
 8003958:	e041      	b.n	80039de <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10b      	bne.n	8003980 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	461a      	mov	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	629a      	str	r2, [r3, #40]	; 0x28
 800397e:	e02e      	b.n	80039de <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003996:	2b01      	cmp	r3, #1
 8003998:	d103      	bne.n	80039a2 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	0c1b      	lsrs	r3, r3, #16
 80039aa:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80039ae:	1f1a      	subs	r2, r3, #4
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	461a      	mov	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80039da:	2300      	movs	r3, #0
 80039dc:	e010      	b.n	8003a00 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	db02      	blt.n	80039ee <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2b03      	cmp	r3, #3
 80039ec:	d99c      	bls.n	8003928 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3714      	adds	r7, #20
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	f241 0314 	movw	r3, #4116	; 0x1014
 8003a1c:	4413      	add	r3, r2
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a24:	2b40      	cmp	r3, #64	; 0x40
 8003a26:	d112      	bne.n	8003a4e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f003 fee9 	bl	8007800 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	f241 0314 	movw	r3, #4116	; 0x1014
 8003a36:	4413      	add	r3, r2
 8003a38:	2240      	movs	r2, #64	; 0x40
 8003a3a:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a4c:	e01b      	b.n	8003a86 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	f241 0314 	movw	r3, #4116	; 0x1014
 8003a56:	4413      	add	r3, r2
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d111      	bne.n	8003a86 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f839 	bl	8003ada <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	f241 0314 	movw	r3, #4116	; 0x1014
 8003a70:	4413      	add	r3, r2
 8003a72:	2201      	movs	r2, #1
 8003a74:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	f241 0314 	movw	r3, #4116	; 0x1014
 8003a8e:	4413      	add	r3, r2
 8003a90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a94:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	f241 0314 	movw	r3, #4116	; 0x1014
 8003a9e:	4413      	add	r3, r2
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aaa:	d112      	bne.n	8003ad2 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f81e 	bl	8003aee <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	f241 0314 	movw	r3, #4116	; 0x1014
 8003aba:	4413      	add	r3, r2
 8003abc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003ac0:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b086      	sub	sp, #24
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	607a      	str	r2, [r7, #4]
 8003b0e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8003b10:	2300      	movs	r3, #0
 8003b12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003b14:	2300      	movs	r3, #0
 8003b16:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b82      	cmp	r3, #130	; 0x82
 8003b22:	d101      	bne.n	8003b28 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003b24:	2302      	movs	r3, #2
 8003b26:	e050      	b.n	8003bca <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2282      	movs	r2, #130	; 0x82
 8003b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f003 031c 	and.w	r3, r3, #28
 8003b3e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8a1b      	ldrh	r3, [r3, #16]
 8003b44:	02db      	lsls	r3, r3, #11
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003b4e:	897b      	ldrh	r3, [r7, #10]
 8003b50:	019b      	lsls	r3, r3, #6
 8003b52:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f023 0302 	bic.w	r3, r3, #2
 8003b62:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f043 0301 	orr.w	r3, r3, #1
 8003b6a:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003b74:	f7ff fa56 	bl	8003024 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003b7a:	e015      	b.n	8003ba8 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8003b7c:	f7ff fa52 	bl	8003024 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b8a:	d309      	bcc.n	8003ba0 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e014      	b.n	8003bca <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1e4      	bne.n	8003b7c <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	461a      	mov	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b086      	sub	sp, #24
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	460b      	mov	r3, r1
 8003bdc:	607a      	str	r2, [r7, #4]
 8003bde:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003be4:	2300      	movs	r3, #0
 8003be6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b42      	cmp	r3, #66	; 0x42
 8003bf2:	d101      	bne.n	8003bf8 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e04e      	b.n	8003c96 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2242      	movs	r2, #66	; 0x42
 8003bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f003 031c 	and.w	r3, r3, #28
 8003c0e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8a1b      	ldrh	r3, [r3, #16]
 8003c14:	02db      	lsls	r3, r3, #11
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003c1e:	897b      	ldrh	r3, [r7, #10]
 8003c20:	019b      	lsls	r3, r3, #6
 8003c22:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	f043 0302 	orr.w	r3, r3, #2
 8003c32:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f043 0301 	orr.w	r3, r3, #1
 8003c3a:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003c4e:	f7ff f9e9 	bl	8003024 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003c54:	e015      	b.n	8003c82 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8003c56:	f7ff f9e5 	bl	8003024 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c64:	d309      	bcc.n	8003c7a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e00d      	b.n	8003c96 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1e4      	bne.n	8003c56 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b082      	sub	sp, #8
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d101      	bne.n	8003cb4 <HAL_ETH_Start+0x16>
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	e01f      	b.n	8003cf4 <HAL_ETH_Start+0x56>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2202      	movs	r2, #2
 8003cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fb45 	bl	8004354 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fb7c 	bl	80043c8 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 fc13 	bl	80044fc <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 fbb0 	bl	800443c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 fbdd 	bl	800449c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d101      	bne.n	8003d12 <HAL_ETH_Stop+0x16>
 8003d0e:	2302      	movs	r3, #2
 8003d10:	e01f      	b.n	8003d52 <HAL_ETH_Stop+0x56>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 fba2 	bl	800446c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 fbcf 	bl	80044cc <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 fb67 	bl	8004402 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 fbe1 	bl	80044fc <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 fb27 	bl	800438e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
	...

08003d5c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <HAL_ETH_ConfigMAC+0x1c>
 8003d74:	2302      	movs	r3, #2
 8003d76:	e0e4      	b.n	8003f42 <HAL_ETH_ConfigMAC+0x1e6>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 80b1 	beq.w	8003ef2 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4b6c      	ldr	r3, [pc, #432]	; (8003f4c <HAL_ETH_ConfigMAC+0x1f0>)
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8003da8:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8003dae:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8003db4:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8003dba:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8003dc0:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8003dc6:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8003dcc:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8003dd2:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8003dd8:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8003dde:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8003de4:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8003dea:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e02:	2001      	movs	r0, #1
 8003e04:	f7ff f91a 	bl	800303c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003e18:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8003e1e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8003e24:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8003e2a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8003e30:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8003e36:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8003e42:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003e44:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e4e:	2001      	movs	r0, #1
 8003e50:	f7ff f8f4 	bl	800303c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003e64:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e6e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003e7e:	4013      	ands	r3, r2
 8003e80:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e86:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8003e8c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8003e92:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8003e98:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8003e9e:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8003ea4:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ebc:	2001      	movs	r0, #1
 8003ebe:	f7ff f8bd 	bl	800303c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ee2:	2001      	movs	r0, #1
 8003ee4:	f7ff f8aa 	bl	800303c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	61da      	str	r2, [r3, #28]
 8003ef0:	e01e      	b.n	8003f30 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003f00:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689a      	ldr	r2, [r3, #8]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f22:	2001      	movs	r0, #1
 8003f24:	f7ff f88a 	bl	800303c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	ff20810f 	.word	0xff20810f

08003f50 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b0b0      	sub	sp, #192	; 0xc0
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d007      	beq.n	8003f76 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f6c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f74:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003f76:	2300      	movs	r3, #0
 8003f78:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003f82:	2300      	movs	r3, #0
 8003f84:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003f86:	2300      	movs	r3, #0
 8003f88:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d103      	bne.n	8003f9e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003f96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f9a:	663b      	str	r3, [r7, #96]	; 0x60
 8003f9c:	e001      	b.n	8003fa2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8003fa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fa6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003fac:	2300      	movs	r3, #0
 8003fae:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003fbc:	2340      	movs	r3, #64	; 0x40
 8003fbe:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8003fea:	2300      	movs	r3, #0
 8003fec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003ff0:	2380      	movs	r3, #128	; 0x80
 8003ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8004002:	2300      	movs	r3, #0
 8004004:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004008:	2300      	movs	r3, #0
 800400a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800400e:	2300      	movs	r3, #0
 8004010:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8004014:	2300      	movs	r3, #0
 8004016:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8004024:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004028:	4bab      	ldr	r3, [pc, #684]	; (80042d8 <ETH_MACDMAConfig+0x388>)
 800402a:	4013      	ands	r3, r2
 800402c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004030:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8004032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004034:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8004036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8004038:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800403a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800403c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8004042:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8004044:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8004046:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8004048:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800404a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8004050:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8004052:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8004054:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8004056:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8004058:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800405a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800405c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800405e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8004060:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8004062:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8004064:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004066:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004078:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004084:	2001      	movs	r0, #1
 8004086:	f7fe ffd9 	bl	800303c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004092:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004094:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8004096:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004098:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800409a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800409c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800409e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80040a2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80040a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80040a8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80040aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80040ae:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80040b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80040b4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80040b8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80040c0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80040c2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80040ce:	2001      	movs	r0, #1
 80040d0:	f7fe ffb4 	bl	800303c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80040dc:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80040e6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80040f0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80040fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004100:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004104:	4013      	ands	r3, r2
 8004106:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800410a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800410e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004110:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004114:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8004116:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800411a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800411c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004120:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8004122:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8004126:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8004128:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800412c:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800412e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004132:	4313      	orrs	r3, r2
 8004134:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004140:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	699b      	ldr	r3, [r3, #24]
 8004148:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800414c:	2001      	movs	r0, #1
 800414e:	f7fe ff75 	bl	800303c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800415a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800415c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8004160:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	430a      	orrs	r2, r1
 800416a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004176:	2001      	movs	r0, #1
 8004178:	f7fe ff60 	bl	800303c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004184:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8004186:	2300      	movs	r3, #0
 8004188:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800418a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800418e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004190:	2300      	movs	r3, #0
 8004192:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8004194:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004198:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800419a:	2300      	movs	r3, #0
 800419c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800419e:	2300      	movs	r3, #0
 80041a0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80041a2:	2300      	movs	r3, #0
 80041a4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80041a6:	2300      	movs	r3, #0
 80041a8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80041aa:	2304      	movs	r3, #4
 80041ac:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80041ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80041b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041b8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80041ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80041be:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80041c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041c4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80041c6:	2380      	movs	r3, #128	; 0x80
 80041c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80041ca:	2300      	movs	r3, #0
 80041cc:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80041ce:	2300      	movs	r3, #0
 80041d0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	f241 0318 	movw	r3, #4120	; 0x1018
 80041da:	4413      	add	r3, r2
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80041e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80041e6:	4b3d      	ldr	r3, [pc, #244]	; (80042dc <ETH_MACDMAConfig+0x38c>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80041ee:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80041f0:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80041f2:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80041f4:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80041f6:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80041f8:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80041fa:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80041fc:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80041fe:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8004200:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8004202:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8004204:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8004206:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800420a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800420c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800420e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004210:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004214:	4313      	orrs	r3, r2
 8004216:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	f241 0318 	movw	r3, #4120	; 0x1018
 8004222:	4413      	add	r3, r2
 8004224:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004228:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	f241 0318 	movw	r3, #4120	; 0x1018
 8004232:	4413      	add	r3, r2
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800423a:	2001      	movs	r0, #1
 800423c:	f7fe fefe 	bl	800303c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	f241 0318 	movw	r3, #4120	; 0x1018
 8004248:	4413      	add	r3, r2
 800424a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800424e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8004252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004254:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8004258:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800425a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800425c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800425e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8004260:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8004262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004264:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8004266:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8004268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800426a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004278:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004288:	2001      	movs	r0, #1
 800428a:	f7fe fed7 	bl	800303c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004296:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800429a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d10d      	bne.n	80042c0 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	f241 031c 	movw	r3, #4124	; 0x101c
 80042ac:	4413      	add	r3, r2
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6811      	ldr	r1, [r2, #0]
 80042b4:	4a0a      	ldr	r2, [pc, #40]	; (80042e0 <ETH_MACDMAConfig+0x390>)
 80042b6:	431a      	orrs	r2, r3
 80042b8:	f241 031c 	movw	r3, #4124	; 0x101c
 80042bc:	440b      	add	r3, r1
 80042be:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	461a      	mov	r2, r3
 80042c6:	2100      	movs	r1, #0
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 f80b 	bl	80042e4 <ETH_MACAddressConfig>
}
 80042ce:	bf00      	nop
 80042d0:	37c0      	adds	r7, #192	; 0xc0
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	ff20810f 	.word	0xff20810f
 80042dc:	f8de3f23 	.word	0xf8de3f23
 80042e0:	00010040 	.word	0x00010040

080042e4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3305      	adds	r3, #5
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	021b      	lsls	r3, r3, #8
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	3204      	adds	r2, #4
 80042fc:	7812      	ldrb	r2, [r2, #0]
 80042fe:	4313      	orrs	r3, r2
 8004300:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	4b11      	ldr	r3, [pc, #68]	; (800434c <ETH_MACAddressConfig+0x68>)
 8004306:	4413      	add	r3, r2
 8004308:	461a      	mov	r2, r3
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3303      	adds	r3, #3
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	061a      	lsls	r2, r3, #24
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	3302      	adds	r3, #2
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	041b      	lsls	r3, r3, #16
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3301      	adds	r3, #1
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	021b      	lsls	r3, r3, #8
 8004328:	4313      	orrs	r3, r2
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	7812      	ldrb	r2, [r2, #0]
 800432e:	4313      	orrs	r3, r2
 8004330:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	4b06      	ldr	r3, [pc, #24]	; (8004350 <ETH_MACAddressConfig+0x6c>)
 8004336:	4413      	add	r3, r2
 8004338:	461a      	mov	r2, r3
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	6013      	str	r3, [r2, #0]
}
 800433e:	bf00      	nop
 8004340:	371c      	adds	r7, #28
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	40028040 	.word	0x40028040
 8004350:	40028044 	.word	0x40028044

08004354 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800435c:	2300      	movs	r3, #0
 800435e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0208 	orr.w	r2, r2, #8
 800436e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004378:	2001      	movs	r0, #1
 800437a:	f7fe fe5f 	bl	800303c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	601a      	str	r2, [r3, #0]
}
 8004386:	bf00      	nop
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800438e:	b580      	push	{r7, lr}
 8004390:	b084      	sub	sp, #16
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004396:	2300      	movs	r3, #0
 8004398:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f022 0208 	bic.w	r2, r2, #8
 80043a8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80043b2:	2001      	movs	r0, #1
 80043b4:	f7fe fe42 	bl	800303c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	601a      	str	r2, [r3, #0]
}
 80043c0:	bf00      	nop
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80043d0:	2300      	movs	r3, #0
 80043d2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0204 	orr.w	r2, r2, #4
 80043e2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80043ec:	2001      	movs	r0, #1
 80043ee:	f7fe fe25 	bl	800303c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	601a      	str	r2, [r3, #0]
}
 80043fa:	bf00      	nop
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8004402:	b580      	push	{r7, lr}
 8004404:	b084      	sub	sp, #16
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800440a:	2300      	movs	r3, #0
 800440c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f022 0204 	bic.w	r2, r2, #4
 800441c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004426:	2001      	movs	r0, #1
 8004428:	f7fe fe08 	bl	800303c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	601a      	str	r2, [r3, #0]
}
 8004434:	bf00      	nop
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	f241 0318 	movw	r3, #4120	; 0x1018
 800444c:	4413      	add	r3, r2
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6811      	ldr	r1, [r2, #0]
 8004454:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004458:	f241 0318 	movw	r3, #4120	; 0x1018
 800445c:	440b      	add	r3, r1
 800445e:	601a      	str	r2, [r3, #0]
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	f241 0318 	movw	r3, #4120	; 0x1018
 800447c:	4413      	add	r3, r2
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6811      	ldr	r1, [r2, #0]
 8004484:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004488:	f241 0318 	movw	r3, #4120	; 0x1018
 800448c:	440b      	add	r3, r1
 800448e:	601a      	str	r2, [r3, #0]
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	f241 0318 	movw	r3, #4120	; 0x1018
 80044ac:	4413      	add	r3, r2
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6811      	ldr	r1, [r2, #0]
 80044b4:	f043 0202 	orr.w	r2, r3, #2
 80044b8:	f241 0318 	movw	r3, #4120	; 0x1018
 80044bc:	440b      	add	r3, r1
 80044be:	601a      	str	r2, [r3, #0]
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	f241 0318 	movw	r3, #4120	; 0x1018
 80044dc:	4413      	add	r3, r2
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6811      	ldr	r1, [r2, #0]
 80044e4:	f023 0202 	bic.w	r2, r3, #2
 80044e8:	f241 0318 	movw	r3, #4120	; 0x1018
 80044ec:	440b      	add	r3, r1
 80044ee:	601a      	str	r2, [r3, #0]
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004504:	2300      	movs	r3, #0
 8004506:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	f241 0318 	movw	r3, #4120	; 0x1018
 8004510:	4413      	add	r3, r2
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6811      	ldr	r1, [r2, #0]
 8004518:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800451c:	f241 0318 	movw	r3, #4120	; 0x1018
 8004520:	440b      	add	r3, r1
 8004522:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	f241 0318 	movw	r3, #4120	; 0x1018
 800452c:	4413      	add	r3, r2
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004532:	2001      	movs	r0, #1
 8004534:	f7fe fd82 	bl	800303c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6819      	ldr	r1, [r3, #0]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	f241 0318 	movw	r3, #4120	; 0x1018
 8004542:	440b      	add	r3, r1
 8004544:	601a      	str	r2, [r3, #0]
}
 8004546:	bf00      	nop
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
	...

08004550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004550:	b480      	push	{r7}
 8004552:	b089      	sub	sp, #36	; 0x24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800455a:	2300      	movs	r3, #0
 800455c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800455e:	2300      	movs	r3, #0
 8004560:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004562:	2300      	movs	r3, #0
 8004564:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004566:	2300      	movs	r3, #0
 8004568:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800456a:	2300      	movs	r3, #0
 800456c:	61fb      	str	r3, [r7, #28]
 800456e:	e175      	b.n	800485c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004570:	2201      	movs	r2, #1
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	fa02 f303 	lsl.w	r3, r2, r3
 8004578:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	4013      	ands	r3, r2
 8004582:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	429a      	cmp	r2, r3
 800458a:	f040 8164 	bne.w	8004856 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f003 0303 	and.w	r3, r3, #3
 8004596:	2b01      	cmp	r3, #1
 8004598:	d005      	beq.n	80045a6 <HAL_GPIO_Init+0x56>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d130      	bne.n	8004608 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	2203      	movs	r2, #3
 80045b2:	fa02 f303 	lsl.w	r3, r2, r3
 80045b6:	43db      	mvns	r3, r3
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	4013      	ands	r3, r2
 80045bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	005b      	lsls	r3, r3, #1
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045dc:	2201      	movs	r2, #1
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	43db      	mvns	r3, r3
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	4013      	ands	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	091b      	lsrs	r3, r3, #4
 80045f2:	f003 0201 	and.w	r2, r3, #1
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	fa02 f303 	lsl.w	r3, r2, r3
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	4313      	orrs	r3, r2
 8004600:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f003 0303 	and.w	r3, r3, #3
 8004610:	2b03      	cmp	r3, #3
 8004612:	d017      	beq.n	8004644 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	005b      	lsls	r3, r3, #1
 800461e:	2203      	movs	r2, #3
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	43db      	mvns	r3, r3
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	4013      	ands	r3, r2
 800462a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	fa02 f303 	lsl.w	r3, r2, r3
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	4313      	orrs	r3, r2
 800463c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f003 0303 	and.w	r3, r3, #3
 800464c:	2b02      	cmp	r3, #2
 800464e:	d123      	bne.n	8004698 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	08da      	lsrs	r2, r3, #3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3208      	adds	r2, #8
 8004658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800465c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	220f      	movs	r2, #15
 8004668:	fa02 f303 	lsl.w	r3, r2, r3
 800466c:	43db      	mvns	r3, r3
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	4013      	ands	r3, r2
 8004672:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	fa02 f303 	lsl.w	r3, r2, r3
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	4313      	orrs	r3, r2
 8004688:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	08da      	lsrs	r2, r3, #3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	3208      	adds	r2, #8
 8004692:	69b9      	ldr	r1, [r7, #24]
 8004694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	2203      	movs	r2, #3
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	43db      	mvns	r3, r3
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	4013      	ands	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f003 0203 	and.w	r2, r3, #3
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	69ba      	ldr	r2, [r7, #24]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 80be 	beq.w	8004856 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046da:	4b66      	ldr	r3, [pc, #408]	; (8004874 <HAL_GPIO_Init+0x324>)
 80046dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046de:	4a65      	ldr	r2, [pc, #404]	; (8004874 <HAL_GPIO_Init+0x324>)
 80046e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046e4:	6453      	str	r3, [r2, #68]	; 0x44
 80046e6:	4b63      	ldr	r3, [pc, #396]	; (8004874 <HAL_GPIO_Init+0x324>)
 80046e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80046f2:	4a61      	ldr	r2, [pc, #388]	; (8004878 <HAL_GPIO_Init+0x328>)
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	089b      	lsrs	r3, r3, #2
 80046f8:	3302      	adds	r3, #2
 80046fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	220f      	movs	r2, #15
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43db      	mvns	r3, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4013      	ands	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a58      	ldr	r2, [pc, #352]	; (800487c <HAL_GPIO_Init+0x32c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d037      	beq.n	800478e <HAL_GPIO_Init+0x23e>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a57      	ldr	r2, [pc, #348]	; (8004880 <HAL_GPIO_Init+0x330>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d031      	beq.n	800478a <HAL_GPIO_Init+0x23a>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a56      	ldr	r2, [pc, #344]	; (8004884 <HAL_GPIO_Init+0x334>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d02b      	beq.n	8004786 <HAL_GPIO_Init+0x236>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a55      	ldr	r2, [pc, #340]	; (8004888 <HAL_GPIO_Init+0x338>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d025      	beq.n	8004782 <HAL_GPIO_Init+0x232>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a54      	ldr	r2, [pc, #336]	; (800488c <HAL_GPIO_Init+0x33c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d01f      	beq.n	800477e <HAL_GPIO_Init+0x22e>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a53      	ldr	r2, [pc, #332]	; (8004890 <HAL_GPIO_Init+0x340>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d019      	beq.n	800477a <HAL_GPIO_Init+0x22a>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a52      	ldr	r2, [pc, #328]	; (8004894 <HAL_GPIO_Init+0x344>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d013      	beq.n	8004776 <HAL_GPIO_Init+0x226>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a51      	ldr	r2, [pc, #324]	; (8004898 <HAL_GPIO_Init+0x348>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00d      	beq.n	8004772 <HAL_GPIO_Init+0x222>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a50      	ldr	r2, [pc, #320]	; (800489c <HAL_GPIO_Init+0x34c>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d007      	beq.n	800476e <HAL_GPIO_Init+0x21e>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a4f      	ldr	r2, [pc, #316]	; (80048a0 <HAL_GPIO_Init+0x350>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d101      	bne.n	800476a <HAL_GPIO_Init+0x21a>
 8004766:	2309      	movs	r3, #9
 8004768:	e012      	b.n	8004790 <HAL_GPIO_Init+0x240>
 800476a:	230a      	movs	r3, #10
 800476c:	e010      	b.n	8004790 <HAL_GPIO_Init+0x240>
 800476e:	2308      	movs	r3, #8
 8004770:	e00e      	b.n	8004790 <HAL_GPIO_Init+0x240>
 8004772:	2307      	movs	r3, #7
 8004774:	e00c      	b.n	8004790 <HAL_GPIO_Init+0x240>
 8004776:	2306      	movs	r3, #6
 8004778:	e00a      	b.n	8004790 <HAL_GPIO_Init+0x240>
 800477a:	2305      	movs	r3, #5
 800477c:	e008      	b.n	8004790 <HAL_GPIO_Init+0x240>
 800477e:	2304      	movs	r3, #4
 8004780:	e006      	b.n	8004790 <HAL_GPIO_Init+0x240>
 8004782:	2303      	movs	r3, #3
 8004784:	e004      	b.n	8004790 <HAL_GPIO_Init+0x240>
 8004786:	2302      	movs	r3, #2
 8004788:	e002      	b.n	8004790 <HAL_GPIO_Init+0x240>
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <HAL_GPIO_Init+0x240>
 800478e:	2300      	movs	r3, #0
 8004790:	69fa      	ldr	r2, [r7, #28]
 8004792:	f002 0203 	and.w	r2, r2, #3
 8004796:	0092      	lsls	r2, r2, #2
 8004798:	4093      	lsls	r3, r2
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	4313      	orrs	r3, r2
 800479e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80047a0:	4935      	ldr	r1, [pc, #212]	; (8004878 <HAL_GPIO_Init+0x328>)
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	089b      	lsrs	r3, r3, #2
 80047a6:	3302      	adds	r3, #2
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047ae:	4b3d      	ldr	r3, [pc, #244]	; (80048a4 <HAL_GPIO_Init+0x354>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	43db      	mvns	r3, r3
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	4013      	ands	r3, r2
 80047bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047d2:	4a34      	ldr	r2, [pc, #208]	; (80048a4 <HAL_GPIO_Init+0x354>)
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047d8:	4b32      	ldr	r3, [pc, #200]	; (80048a4 <HAL_GPIO_Init+0x354>)
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	43db      	mvns	r3, r3
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	4013      	ands	r3, r2
 80047e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047fc:	4a29      	ldr	r2, [pc, #164]	; (80048a4 <HAL_GPIO_Init+0x354>)
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004802:	4b28      	ldr	r3, [pc, #160]	; (80048a4 <HAL_GPIO_Init+0x354>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	43db      	mvns	r3, r3
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	4013      	ands	r3, r2
 8004810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	4313      	orrs	r3, r2
 8004824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004826:	4a1f      	ldr	r2, [pc, #124]	; (80048a4 <HAL_GPIO_Init+0x354>)
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800482c:	4b1d      	ldr	r3, [pc, #116]	; (80048a4 <HAL_GPIO_Init+0x354>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	43db      	mvns	r3, r3
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	4013      	ands	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	4313      	orrs	r3, r2
 800484e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004850:	4a14      	ldr	r2, [pc, #80]	; (80048a4 <HAL_GPIO_Init+0x354>)
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	3301      	adds	r3, #1
 800485a:	61fb      	str	r3, [r7, #28]
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	2b0f      	cmp	r3, #15
 8004860:	f67f ae86 	bls.w	8004570 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004864:	bf00      	nop
 8004866:	bf00      	nop
 8004868:	3724      	adds	r7, #36	; 0x24
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	40023800 	.word	0x40023800
 8004878:	40013800 	.word	0x40013800
 800487c:	40020000 	.word	0x40020000
 8004880:	40020400 	.word	0x40020400
 8004884:	40020800 	.word	0x40020800
 8004888:	40020c00 	.word	0x40020c00
 800488c:	40021000 	.word	0x40021000
 8004890:	40021400 	.word	0x40021400
 8004894:	40021800 	.word	0x40021800
 8004898:	40021c00 	.word	0x40021c00
 800489c:	40022000 	.word	0x40022000
 80048a0:	40022400 	.word	0x40022400
 80048a4:	40013c00 	.word	0x40013c00

080048a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	460b      	mov	r3, r1
 80048b2:	807b      	strh	r3, [r7, #2]
 80048b4:	4613      	mov	r3, r2
 80048b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048b8:	787b      	ldrb	r3, [r7, #1]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048be:	887a      	ldrh	r2, [r7, #2]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80048c4:	e003      	b.n	80048ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80048c6:	887b      	ldrh	r3, [r7, #2]
 80048c8:	041a      	lsls	r2, r3, #16
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	619a      	str	r2, [r3, #24]
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80048da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048dc:	b08f      	sub	sp, #60	; 0x3c
 80048de:	af0a      	add	r7, sp, #40	; 0x28
 80048e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e116      	b.n	8004b1a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d106      	bne.n	800490c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7fd f988 	bl	8001c1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2203      	movs	r2, #3
 8004910:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491c:	2b00      	cmp	r3, #0
 800491e:	d102      	bne.n	8004926 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4618      	mov	r0, r3
 800492c:	f002 fab4 	bl	8006e98 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	603b      	str	r3, [r7, #0]
 8004936:	687e      	ldr	r6, [r7, #4]
 8004938:	466d      	mov	r5, sp
 800493a:	f106 0410 	add.w	r4, r6, #16
 800493e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004942:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004944:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004946:	e894 0003 	ldmia.w	r4, {r0, r1}
 800494a:	e885 0003 	stmia.w	r5, {r0, r1}
 800494e:	1d33      	adds	r3, r6, #4
 8004950:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004952:	6838      	ldr	r0, [r7, #0]
 8004954:	f002 fa48 	bl	8006de8 <USB_CoreInit>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d005      	beq.n	800496a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2202      	movs	r2, #2
 8004962:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e0d7      	b.n	8004b1a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2100      	movs	r1, #0
 8004970:	4618      	mov	r0, r3
 8004972:	f002 faa2 	bl	8006eba <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004976:	2300      	movs	r3, #0
 8004978:	73fb      	strb	r3, [r7, #15]
 800497a:	e04a      	b.n	8004a12 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800497c:	7bfa      	ldrb	r2, [r7, #15]
 800497e:	6879      	ldr	r1, [r7, #4]
 8004980:	4613      	mov	r3, r2
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	1a9b      	subs	r3, r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	440b      	add	r3, r1
 800498a:	333d      	adds	r3, #61	; 0x3d
 800498c:	2201      	movs	r2, #1
 800498e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004990:	7bfa      	ldrb	r2, [r7, #15]
 8004992:	6879      	ldr	r1, [r7, #4]
 8004994:	4613      	mov	r3, r2
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	1a9b      	subs	r3, r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	440b      	add	r3, r1
 800499e:	333c      	adds	r3, #60	; 0x3c
 80049a0:	7bfa      	ldrb	r2, [r7, #15]
 80049a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80049a4:	7bfa      	ldrb	r2, [r7, #15]
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
 80049a8:	b298      	uxth	r0, r3
 80049aa:	6879      	ldr	r1, [r7, #4]
 80049ac:	4613      	mov	r3, r2
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	1a9b      	subs	r3, r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	440b      	add	r3, r1
 80049b6:	3342      	adds	r3, #66	; 0x42
 80049b8:	4602      	mov	r2, r0
 80049ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80049bc:	7bfa      	ldrb	r2, [r7, #15]
 80049be:	6879      	ldr	r1, [r7, #4]
 80049c0:	4613      	mov	r3, r2
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	1a9b      	subs	r3, r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	440b      	add	r3, r1
 80049ca:	333f      	adds	r3, #63	; 0x3f
 80049cc:	2200      	movs	r2, #0
 80049ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80049d0:	7bfa      	ldrb	r2, [r7, #15]
 80049d2:	6879      	ldr	r1, [r7, #4]
 80049d4:	4613      	mov	r3, r2
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	1a9b      	subs	r3, r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	440b      	add	r3, r1
 80049de:	3344      	adds	r3, #68	; 0x44
 80049e0:	2200      	movs	r2, #0
 80049e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80049e4:	7bfa      	ldrb	r2, [r7, #15]
 80049e6:	6879      	ldr	r1, [r7, #4]
 80049e8:	4613      	mov	r3, r2
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	1a9b      	subs	r3, r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	440b      	add	r3, r1
 80049f2:	3348      	adds	r3, #72	; 0x48
 80049f4:	2200      	movs	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80049f8:	7bfa      	ldrb	r2, [r7, #15]
 80049fa:	6879      	ldr	r1, [r7, #4]
 80049fc:	4613      	mov	r3, r2
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	1a9b      	subs	r3, r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	440b      	add	r3, r1
 8004a06:	3350      	adds	r3, #80	; 0x50
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	73fb      	strb	r3, [r7, #15]
 8004a12:	7bfa      	ldrb	r2, [r7, #15]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d3af      	bcc.n	800497c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	73fb      	strb	r3, [r7, #15]
 8004a20:	e044      	b.n	8004aac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a22:	7bfa      	ldrb	r2, [r7, #15]
 8004a24:	6879      	ldr	r1, [r7, #4]
 8004a26:	4613      	mov	r3, r2
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	1a9b      	subs	r3, r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	440b      	add	r3, r1
 8004a30:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004a34:	2200      	movs	r2, #0
 8004a36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a38:	7bfa      	ldrb	r2, [r7, #15]
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	1a9b      	subs	r3, r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	440b      	add	r3, r1
 8004a46:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004a4a:	7bfa      	ldrb	r2, [r7, #15]
 8004a4c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a4e:	7bfa      	ldrb	r2, [r7, #15]
 8004a50:	6879      	ldr	r1, [r7, #4]
 8004a52:	4613      	mov	r3, r2
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	1a9b      	subs	r3, r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	440b      	add	r3, r1
 8004a5c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004a60:	2200      	movs	r2, #0
 8004a62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a64:	7bfa      	ldrb	r2, [r7, #15]
 8004a66:	6879      	ldr	r1, [r7, #4]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	1a9b      	subs	r3, r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	440b      	add	r3, r1
 8004a72:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004a76:	2200      	movs	r2, #0
 8004a78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a7a:	7bfa      	ldrb	r2, [r7, #15]
 8004a7c:	6879      	ldr	r1, [r7, #4]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	00db      	lsls	r3, r3, #3
 8004a82:	1a9b      	subs	r3, r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	440b      	add	r3, r1
 8004a88:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a90:	7bfa      	ldrb	r2, [r7, #15]
 8004a92:	6879      	ldr	r1, [r7, #4]
 8004a94:	4613      	mov	r3, r2
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	1a9b      	subs	r3, r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	440b      	add	r3, r1
 8004a9e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004aa6:	7bfb      	ldrb	r3, [r7, #15]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	73fb      	strb	r3, [r7, #15]
 8004aac:	7bfa      	ldrb	r2, [r7, #15]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d3b5      	bcc.n	8004a22 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	603b      	str	r3, [r7, #0]
 8004abc:	687e      	ldr	r6, [r7, #4]
 8004abe:	466d      	mov	r5, sp
 8004ac0:	f106 0410 	add.w	r4, r6, #16
 8004ac4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ac6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004aca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004acc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ad0:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ad4:	1d33      	adds	r3, r6, #4
 8004ad6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ad8:	6838      	ldr	r0, [r7, #0]
 8004ada:	f002 fa3b 	bl	8006f54 <USB_DevInit>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d005      	beq.n	8004af0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e014      	b.n	8004b1a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d102      	bne.n	8004b0e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f80b 	bl	8004b24 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f002 fbf5 	bl	8007302 <USB_DevDisconnect>

  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004b24 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b52:	4b05      	ldr	r3, [pc, #20]	; (8004b68 <HAL_PCDEx_ActivateLPM+0x44>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr
 8004b68:	10000003 	.word	0x10000003

08004b6c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b70:	4b05      	ldr	r3, [pc, #20]	; (8004b88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a04      	ldr	r2, [pc, #16]	; (8004b88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b7a:	6013      	str	r3, [r2, #0]
}
 8004b7c:	bf00      	nop
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	40007000 	.word	0x40007000

08004b8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004b92:	2300      	movs	r3, #0
 8004b94:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004b96:	4b23      	ldr	r3, [pc, #140]	; (8004c24 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	4a22      	ldr	r2, [pc, #136]	; (8004c24 <HAL_PWREx_EnableOverDrive+0x98>)
 8004b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ba2:	4b20      	ldr	r3, [pc, #128]	; (8004c24 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004baa:	603b      	str	r3, [r7, #0]
 8004bac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004bae:	4b1e      	ldr	r3, [pc, #120]	; (8004c28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a1d      	ldr	r2, [pc, #116]	; (8004c28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bba:	f7fe fa33 	bl	8003024 <HAL_GetTick>
 8004bbe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bc0:	e009      	b.n	8004bd6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004bc2:	f7fe fa2f 	bl	8003024 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bd0:	d901      	bls.n	8004bd6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e022      	b.n	8004c1c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bd6:	4b14      	ldr	r3, [pc, #80]	; (8004c28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be2:	d1ee      	bne.n	8004bc2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004be4:	4b10      	ldr	r3, [pc, #64]	; (8004c28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a0f      	ldr	r2, [pc, #60]	; (8004c28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bf0:	f7fe fa18 	bl	8003024 <HAL_GetTick>
 8004bf4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004bf6:	e009      	b.n	8004c0c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004bf8:	f7fe fa14 	bl	8003024 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c06:	d901      	bls.n	8004c0c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e007      	b.n	8004c1c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004c0c:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c18:	d1ee      	bne.n	8004bf8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	40023800 	.word	0x40023800
 8004c28:	40007000 	.word	0x40007000

08004c2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004c34:	2300      	movs	r3, #0
 8004c36:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e29b      	b.n	800517a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 8087 	beq.w	8004d5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c50:	4b96      	ldr	r3, [pc, #600]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 030c 	and.w	r3, r3, #12
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	d00c      	beq.n	8004c76 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c5c:	4b93      	ldr	r3, [pc, #588]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f003 030c 	and.w	r3, r3, #12
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	d112      	bne.n	8004c8e <HAL_RCC_OscConfig+0x62>
 8004c68:	4b90      	ldr	r3, [pc, #576]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c74:	d10b      	bne.n	8004c8e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c76:	4b8d      	ldr	r3, [pc, #564]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d06c      	beq.n	8004d5c <HAL_RCC_OscConfig+0x130>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d168      	bne.n	8004d5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e275      	b.n	800517a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c96:	d106      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x7a>
 8004c98:	4b84      	ldr	r3, [pc, #528]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a83      	ldr	r2, [pc, #524]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca2:	6013      	str	r3, [r2, #0]
 8004ca4:	e02e      	b.n	8004d04 <HAL_RCC_OscConfig+0xd8>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10c      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x9c>
 8004cae:	4b7f      	ldr	r3, [pc, #508]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a7e      	ldr	r2, [pc, #504]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cb8:	6013      	str	r3, [r2, #0]
 8004cba:	4b7c      	ldr	r3, [pc, #496]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a7b      	ldr	r2, [pc, #492]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004cc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	e01d      	b.n	8004d04 <HAL_RCC_OscConfig+0xd8>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cd0:	d10c      	bne.n	8004cec <HAL_RCC_OscConfig+0xc0>
 8004cd2:	4b76      	ldr	r3, [pc, #472]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a75      	ldr	r2, [pc, #468]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cdc:	6013      	str	r3, [r2, #0]
 8004cde:	4b73      	ldr	r3, [pc, #460]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a72      	ldr	r2, [pc, #456]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	e00b      	b.n	8004d04 <HAL_RCC_OscConfig+0xd8>
 8004cec:	4b6f      	ldr	r3, [pc, #444]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a6e      	ldr	r2, [pc, #440]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cf6:	6013      	str	r3, [r2, #0]
 8004cf8:	4b6c      	ldr	r3, [pc, #432]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a6b      	ldr	r2, [pc, #428]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d013      	beq.n	8004d34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0c:	f7fe f98a 	bl	8003024 <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d14:	f7fe f986 	bl	8003024 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b64      	cmp	r3, #100	; 0x64
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e229      	b.n	800517a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d26:	4b61      	ldr	r3, [pc, #388]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d0f0      	beq.n	8004d14 <HAL_RCC_OscConfig+0xe8>
 8004d32:	e014      	b.n	8004d5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d34:	f7fe f976 	bl	8003024 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d3c:	f7fe f972 	bl	8003024 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b64      	cmp	r3, #100	; 0x64
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e215      	b.n	800517a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d4e:	4b57      	ldr	r3, [pc, #348]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1f0      	bne.n	8004d3c <HAL_RCC_OscConfig+0x110>
 8004d5a:	e000      	b.n	8004d5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d069      	beq.n	8004e3e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d6a:	4b50      	ldr	r3, [pc, #320]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f003 030c 	and.w	r3, r3, #12
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00b      	beq.n	8004d8e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d76:	4b4d      	ldr	r3, [pc, #308]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 030c 	and.w	r3, r3, #12
 8004d7e:	2b08      	cmp	r3, #8
 8004d80:	d11c      	bne.n	8004dbc <HAL_RCC_OscConfig+0x190>
 8004d82:	4b4a      	ldr	r3, [pc, #296]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d116      	bne.n	8004dbc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d8e:	4b47      	ldr	r3, [pc, #284]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d005      	beq.n	8004da6 <HAL_RCC_OscConfig+0x17a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d001      	beq.n	8004da6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e1e9      	b.n	800517a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da6:	4b41      	ldr	r3, [pc, #260]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	493d      	ldr	r1, [pc, #244]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dba:	e040      	b.n	8004e3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d023      	beq.n	8004e0c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dc4:	4b39      	ldr	r3, [pc, #228]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a38      	ldr	r2, [pc, #224]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004dca:	f043 0301 	orr.w	r3, r3, #1
 8004dce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd0:	f7fe f928 	bl	8003024 <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dd8:	f7fe f924 	bl	8003024 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e1c7      	b.n	800517a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dea:	4b30      	ldr	r3, [pc, #192]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d0f0      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df6:	4b2d      	ldr	r3, [pc, #180]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	4929      	ldr	r1, [pc, #164]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	600b      	str	r3, [r1, #0]
 8004e0a:	e018      	b.n	8004e3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e0c:	4b27      	ldr	r3, [pc, #156]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a26      	ldr	r2, [pc, #152]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004e12:	f023 0301 	bic.w	r3, r3, #1
 8004e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e18:	f7fe f904 	bl	8003024 <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e20:	f7fe f900 	bl	8003024 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e1a3      	b.n	800517a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e32:	4b1e      	ldr	r3, [pc, #120]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1f0      	bne.n	8004e20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d038      	beq.n	8004ebc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d019      	beq.n	8004e86 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e52:	4b16      	ldr	r3, [pc, #88]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e56:	4a15      	ldr	r2, [pc, #84]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004e58:	f043 0301 	orr.w	r3, r3, #1
 8004e5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e5e:	f7fe f8e1 	bl	8003024 <HAL_GetTick>
 8004e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e64:	e008      	b.n	8004e78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e66:	f7fe f8dd 	bl	8003024 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d901      	bls.n	8004e78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e180      	b.n	800517a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e78:	4b0c      	ldr	r3, [pc, #48]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0f0      	beq.n	8004e66 <HAL_RCC_OscConfig+0x23a>
 8004e84:	e01a      	b.n	8004ebc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e86:	4b09      	ldr	r3, [pc, #36]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e8a:	4a08      	ldr	r2, [pc, #32]	; (8004eac <HAL_RCC_OscConfig+0x280>)
 8004e8c:	f023 0301 	bic.w	r3, r3, #1
 8004e90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e92:	f7fe f8c7 	bl	8003024 <HAL_GetTick>
 8004e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e98:	e00a      	b.n	8004eb0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e9a:	f7fe f8c3 	bl	8003024 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d903      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e166      	b.n	800517a <HAL_RCC_OscConfig+0x54e>
 8004eac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb0:	4b92      	ldr	r3, [pc, #584]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004eb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1ee      	bne.n	8004e9a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0304 	and.w	r3, r3, #4
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 80a4 	beq.w	8005012 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eca:	4b8c      	ldr	r3, [pc, #560]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10d      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ed6:	4b89      	ldr	r3, [pc, #548]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	4a88      	ldr	r2, [pc, #544]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ee2:	4b86      	ldr	r3, [pc, #536]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eea:	60bb      	str	r3, [r7, #8]
 8004eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ef2:	4b83      	ldr	r3, [pc, #524]	; (8005100 <HAL_RCC_OscConfig+0x4d4>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d118      	bne.n	8004f30 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004efe:	4b80      	ldr	r3, [pc, #512]	; (8005100 <HAL_RCC_OscConfig+0x4d4>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a7f      	ldr	r2, [pc, #508]	; (8005100 <HAL_RCC_OscConfig+0x4d4>)
 8004f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f0a:	f7fe f88b 	bl	8003024 <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f10:	e008      	b.n	8004f24 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f12:	f7fe f887 	bl	8003024 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b64      	cmp	r3, #100	; 0x64
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e12a      	b.n	800517a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f24:	4b76      	ldr	r3, [pc, #472]	; (8005100 <HAL_RCC_OscConfig+0x4d4>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0f0      	beq.n	8004f12 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d106      	bne.n	8004f46 <HAL_RCC_OscConfig+0x31a>
 8004f38:	4b70      	ldr	r3, [pc, #448]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3c:	4a6f      	ldr	r2, [pc, #444]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004f3e:	f043 0301 	orr.w	r3, r3, #1
 8004f42:	6713      	str	r3, [r2, #112]	; 0x70
 8004f44:	e02d      	b.n	8004fa2 <HAL_RCC_OscConfig+0x376>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10c      	bne.n	8004f68 <HAL_RCC_OscConfig+0x33c>
 8004f4e:	4b6b      	ldr	r3, [pc, #428]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f52:	4a6a      	ldr	r2, [pc, #424]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004f54:	f023 0301 	bic.w	r3, r3, #1
 8004f58:	6713      	str	r3, [r2, #112]	; 0x70
 8004f5a:	4b68      	ldr	r3, [pc, #416]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5e:	4a67      	ldr	r2, [pc, #412]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004f60:	f023 0304 	bic.w	r3, r3, #4
 8004f64:	6713      	str	r3, [r2, #112]	; 0x70
 8004f66:	e01c      	b.n	8004fa2 <HAL_RCC_OscConfig+0x376>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	2b05      	cmp	r3, #5
 8004f6e:	d10c      	bne.n	8004f8a <HAL_RCC_OscConfig+0x35e>
 8004f70:	4b62      	ldr	r3, [pc, #392]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f74:	4a61      	ldr	r2, [pc, #388]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004f76:	f043 0304 	orr.w	r3, r3, #4
 8004f7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f7c:	4b5f      	ldr	r3, [pc, #380]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f80:	4a5e      	ldr	r2, [pc, #376]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004f82:	f043 0301 	orr.w	r3, r3, #1
 8004f86:	6713      	str	r3, [r2, #112]	; 0x70
 8004f88:	e00b      	b.n	8004fa2 <HAL_RCC_OscConfig+0x376>
 8004f8a:	4b5c      	ldr	r3, [pc, #368]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8e:	4a5b      	ldr	r2, [pc, #364]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004f90:	f023 0301 	bic.w	r3, r3, #1
 8004f94:	6713      	str	r3, [r2, #112]	; 0x70
 8004f96:	4b59      	ldr	r3, [pc, #356]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f9a:	4a58      	ldr	r2, [pc, #352]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004f9c:	f023 0304 	bic.w	r3, r3, #4
 8004fa0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d015      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004faa:	f7fe f83b 	bl	8003024 <HAL_GetTick>
 8004fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb0:	e00a      	b.n	8004fc8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fb2:	f7fe f837 	bl	8003024 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e0d8      	b.n	800517a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fc8:	4b4c      	ldr	r3, [pc, #304]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d0ee      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x386>
 8004fd4:	e014      	b.n	8005000 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd6:	f7fe f825 	bl	8003024 <HAL_GetTick>
 8004fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fdc:	e00a      	b.n	8004ff4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fde:	f7fe f821 	bl	8003024 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e0c2      	b.n	800517a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ff4:	4b41      	ldr	r3, [pc, #260]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8004ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1ee      	bne.n	8004fde <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005000:	7dfb      	ldrb	r3, [r7, #23]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d105      	bne.n	8005012 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005006:	4b3d      	ldr	r3, [pc, #244]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	4a3c      	ldr	r2, [pc, #240]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 800500c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005010:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	2b00      	cmp	r3, #0
 8005018:	f000 80ae 	beq.w	8005178 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800501c:	4b37      	ldr	r3, [pc, #220]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 030c 	and.w	r3, r3, #12
 8005024:	2b08      	cmp	r3, #8
 8005026:	d06d      	beq.n	8005104 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	699b      	ldr	r3, [r3, #24]
 800502c:	2b02      	cmp	r3, #2
 800502e:	d14b      	bne.n	80050c8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005030:	4b32      	ldr	r3, [pc, #200]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a31      	ldr	r2, [pc, #196]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8005036:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800503a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503c:	f7fd fff2 	bl	8003024 <HAL_GetTick>
 8005040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005042:	e008      	b.n	8005056 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005044:	f7fd ffee 	bl	8003024 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e091      	b.n	800517a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005056:	4b29      	ldr	r3, [pc, #164]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1f0      	bne.n	8005044 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	69da      	ldr	r2, [r3, #28]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	019b      	lsls	r3, r3, #6
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005078:	085b      	lsrs	r3, r3, #1
 800507a:	3b01      	subs	r3, #1
 800507c:	041b      	lsls	r3, r3, #16
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005084:	061b      	lsls	r3, r3, #24
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508c:	071b      	lsls	r3, r3, #28
 800508e:	491b      	ldr	r1, [pc, #108]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8005090:	4313      	orrs	r3, r2
 8005092:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005094:	4b19      	ldr	r3, [pc, #100]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a18      	ldr	r2, [pc, #96]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 800509a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800509e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a0:	f7fd ffc0 	bl	8003024 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a8:	f7fd ffbc 	bl	8003024 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e05f      	b.n	800517a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ba:	4b10      	ldr	r3, [pc, #64]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0x47c>
 80050c6:	e057      	b.n	8005178 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c8:	4b0c      	ldr	r3, [pc, #48]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a0b      	ldr	r2, [pc, #44]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 80050ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d4:	f7fd ffa6 	bl	8003024 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050dc:	f7fd ffa2 	bl	8003024 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e045      	b.n	800517a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ee:	4b03      	ldr	r3, [pc, #12]	; (80050fc <HAL_RCC_OscConfig+0x4d0>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1f0      	bne.n	80050dc <HAL_RCC_OscConfig+0x4b0>
 80050fa:	e03d      	b.n	8005178 <HAL_RCC_OscConfig+0x54c>
 80050fc:	40023800 	.word	0x40023800
 8005100:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005104:	4b1f      	ldr	r3, [pc, #124]	; (8005184 <HAL_RCC_OscConfig+0x558>)
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	699b      	ldr	r3, [r3, #24]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d030      	beq.n	8005174 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800511c:	429a      	cmp	r2, r3
 800511e:	d129      	bne.n	8005174 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800512a:	429a      	cmp	r2, r3
 800512c:	d122      	bne.n	8005174 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005134:	4013      	ands	r3, r2
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800513a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800513c:	4293      	cmp	r3, r2
 800513e:	d119      	bne.n	8005174 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514a:	085b      	lsrs	r3, r3, #1
 800514c:	3b01      	subs	r3, #1
 800514e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005150:	429a      	cmp	r2, r3
 8005152:	d10f      	bne.n	8005174 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800515e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005160:	429a      	cmp	r2, r3
 8005162:	d107      	bne.n	8005174 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005170:	429a      	cmp	r2, r3
 8005172:	d001      	beq.n	8005178 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e000      	b.n	800517a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3718      	adds	r7, #24
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	40023800 	.word	0x40023800

08005188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005192:	2300      	movs	r3, #0
 8005194:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d101      	bne.n	80051a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e0d0      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051a0:	4b6a      	ldr	r3, [pc, #424]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 030f 	and.w	r3, r3, #15
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d910      	bls.n	80051d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ae:	4b67      	ldr	r3, [pc, #412]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f023 020f 	bic.w	r2, r3, #15
 80051b6:	4965      	ldr	r1, [pc, #404]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051be:	4b63      	ldr	r3, [pc, #396]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 030f 	and.w	r3, r3, #15
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d001      	beq.n	80051d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e0b8      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d020      	beq.n	800521e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051e8:	4b59      	ldr	r3, [pc, #356]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	4a58      	ldr	r2, [pc, #352]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 80051ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0308 	and.w	r3, r3, #8
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d005      	beq.n	800520c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005200:	4b53      	ldr	r3, [pc, #332]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	4a52      	ldr	r2, [pc, #328]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005206:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800520a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800520c:	4b50      	ldr	r3, [pc, #320]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	494d      	ldr	r1, [pc, #308]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 800521a:	4313      	orrs	r3, r2
 800521c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d040      	beq.n	80052ac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d107      	bne.n	8005242 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005232:	4b47      	ldr	r3, [pc, #284]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d115      	bne.n	800526a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e07f      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2b02      	cmp	r3, #2
 8005248:	d107      	bne.n	800525a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800524a:	4b41      	ldr	r3, [pc, #260]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d109      	bne.n	800526a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e073      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800525a:	4b3d      	ldr	r3, [pc, #244]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e06b      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800526a:	4b39      	ldr	r3, [pc, #228]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f023 0203 	bic.w	r2, r3, #3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	4936      	ldr	r1, [pc, #216]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005278:	4313      	orrs	r3, r2
 800527a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800527c:	f7fd fed2 	bl	8003024 <HAL_GetTick>
 8005280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005282:	e00a      	b.n	800529a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005284:	f7fd fece 	bl	8003024 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005292:	4293      	cmp	r3, r2
 8005294:	d901      	bls.n	800529a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e053      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800529a:	4b2d      	ldr	r3, [pc, #180]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 020c 	and.w	r2, r3, #12
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d1eb      	bne.n	8005284 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052ac:	4b27      	ldr	r3, [pc, #156]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 030f 	and.w	r3, r3, #15
 80052b4:	683a      	ldr	r2, [r7, #0]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d210      	bcs.n	80052dc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ba:	4b24      	ldr	r3, [pc, #144]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f023 020f 	bic.w	r2, r3, #15
 80052c2:	4922      	ldr	r1, [pc, #136]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ca:	4b20      	ldr	r3, [pc, #128]	; (800534c <HAL_RCC_ClockConfig+0x1c4>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	683a      	ldr	r2, [r7, #0]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d001      	beq.n	80052dc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e032      	b.n	8005342 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d008      	beq.n	80052fa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052e8:	4b19      	ldr	r3, [pc, #100]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	4916      	ldr	r1, [pc, #88]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 80052f6:	4313      	orrs	r3, r2
 80052f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0308 	and.w	r3, r3, #8
 8005302:	2b00      	cmp	r3, #0
 8005304:	d009      	beq.n	800531a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005306:	4b12      	ldr	r3, [pc, #72]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	490e      	ldr	r1, [pc, #56]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005316:	4313      	orrs	r3, r2
 8005318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800531a:	f000 f821 	bl	8005360 <HAL_RCC_GetSysClockFreq>
 800531e:	4602      	mov	r2, r0
 8005320:	4b0b      	ldr	r3, [pc, #44]	; (8005350 <HAL_RCC_ClockConfig+0x1c8>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	091b      	lsrs	r3, r3, #4
 8005326:	f003 030f 	and.w	r3, r3, #15
 800532a:	490a      	ldr	r1, [pc, #40]	; (8005354 <HAL_RCC_ClockConfig+0x1cc>)
 800532c:	5ccb      	ldrb	r3, [r1, r3]
 800532e:	fa22 f303 	lsr.w	r3, r2, r3
 8005332:	4a09      	ldr	r2, [pc, #36]	; (8005358 <HAL_RCC_ClockConfig+0x1d0>)
 8005334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005336:	4b09      	ldr	r3, [pc, #36]	; (800535c <HAL_RCC_ClockConfig+0x1d4>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4618      	mov	r0, r3
 800533c:	f7fc fce8 	bl	8001d10 <HAL_InitTick>

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	40023c00 	.word	0x40023c00
 8005350:	40023800 	.word	0x40023800
 8005354:	0801d65c 	.word	0x0801d65c
 8005358:	20000700 	.word	0x20000700
 800535c:	20000718 	.word	0x20000718

08005360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005360:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005364:	b084      	sub	sp, #16
 8005366:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005368:	2300      	movs	r3, #0
 800536a:	607b      	str	r3, [r7, #4]
 800536c:	2300      	movs	r3, #0
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	2300      	movs	r3, #0
 8005372:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005374:	2300      	movs	r3, #0
 8005376:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005378:	4b67      	ldr	r3, [pc, #412]	; (8005518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f003 030c 	and.w	r3, r3, #12
 8005380:	2b08      	cmp	r3, #8
 8005382:	d00d      	beq.n	80053a0 <HAL_RCC_GetSysClockFreq+0x40>
 8005384:	2b08      	cmp	r3, #8
 8005386:	f200 80bd 	bhi.w	8005504 <HAL_RCC_GetSysClockFreq+0x1a4>
 800538a:	2b00      	cmp	r3, #0
 800538c:	d002      	beq.n	8005394 <HAL_RCC_GetSysClockFreq+0x34>
 800538e:	2b04      	cmp	r3, #4
 8005390:	d003      	beq.n	800539a <HAL_RCC_GetSysClockFreq+0x3a>
 8005392:	e0b7      	b.n	8005504 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005394:	4b61      	ldr	r3, [pc, #388]	; (800551c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005396:	60bb      	str	r3, [r7, #8]
      break;
 8005398:	e0b7      	b.n	800550a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800539a:	4b61      	ldr	r3, [pc, #388]	; (8005520 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800539c:	60bb      	str	r3, [r7, #8]
      break;
 800539e:	e0b4      	b.n	800550a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053a0:	4b5d      	ldr	r3, [pc, #372]	; (8005518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053a8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80053aa:	4b5b      	ldr	r3, [pc, #364]	; (8005518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d04d      	beq.n	8005452 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053b6:	4b58      	ldr	r3, [pc, #352]	; (8005518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	099b      	lsrs	r3, r3, #6
 80053bc:	461a      	mov	r2, r3
 80053be:	f04f 0300 	mov.w	r3, #0
 80053c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80053c6:	f04f 0100 	mov.w	r1, #0
 80053ca:	ea02 0800 	and.w	r8, r2, r0
 80053ce:	ea03 0901 	and.w	r9, r3, r1
 80053d2:	4640      	mov	r0, r8
 80053d4:	4649      	mov	r1, r9
 80053d6:	f04f 0200 	mov.w	r2, #0
 80053da:	f04f 0300 	mov.w	r3, #0
 80053de:	014b      	lsls	r3, r1, #5
 80053e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80053e4:	0142      	lsls	r2, r0, #5
 80053e6:	4610      	mov	r0, r2
 80053e8:	4619      	mov	r1, r3
 80053ea:	ebb0 0008 	subs.w	r0, r0, r8
 80053ee:	eb61 0109 	sbc.w	r1, r1, r9
 80053f2:	f04f 0200 	mov.w	r2, #0
 80053f6:	f04f 0300 	mov.w	r3, #0
 80053fa:	018b      	lsls	r3, r1, #6
 80053fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005400:	0182      	lsls	r2, r0, #6
 8005402:	1a12      	subs	r2, r2, r0
 8005404:	eb63 0301 	sbc.w	r3, r3, r1
 8005408:	f04f 0000 	mov.w	r0, #0
 800540c:	f04f 0100 	mov.w	r1, #0
 8005410:	00d9      	lsls	r1, r3, #3
 8005412:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005416:	00d0      	lsls	r0, r2, #3
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	eb12 0208 	adds.w	r2, r2, r8
 8005420:	eb43 0309 	adc.w	r3, r3, r9
 8005424:	f04f 0000 	mov.w	r0, #0
 8005428:	f04f 0100 	mov.w	r1, #0
 800542c:	0259      	lsls	r1, r3, #9
 800542e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005432:	0250      	lsls	r0, r2, #9
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4610      	mov	r0, r2
 800543a:	4619      	mov	r1, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	461a      	mov	r2, r3
 8005440:	f04f 0300 	mov.w	r3, #0
 8005444:	f7fa ff64 	bl	8000310 <__aeabi_uldivmod>
 8005448:	4602      	mov	r2, r0
 800544a:	460b      	mov	r3, r1
 800544c:	4613      	mov	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]
 8005450:	e04a      	b.n	80054e8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005452:	4b31      	ldr	r3, [pc, #196]	; (8005518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	099b      	lsrs	r3, r3, #6
 8005458:	461a      	mov	r2, r3
 800545a:	f04f 0300 	mov.w	r3, #0
 800545e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005462:	f04f 0100 	mov.w	r1, #0
 8005466:	ea02 0400 	and.w	r4, r2, r0
 800546a:	ea03 0501 	and.w	r5, r3, r1
 800546e:	4620      	mov	r0, r4
 8005470:	4629      	mov	r1, r5
 8005472:	f04f 0200 	mov.w	r2, #0
 8005476:	f04f 0300 	mov.w	r3, #0
 800547a:	014b      	lsls	r3, r1, #5
 800547c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005480:	0142      	lsls	r2, r0, #5
 8005482:	4610      	mov	r0, r2
 8005484:	4619      	mov	r1, r3
 8005486:	1b00      	subs	r0, r0, r4
 8005488:	eb61 0105 	sbc.w	r1, r1, r5
 800548c:	f04f 0200 	mov.w	r2, #0
 8005490:	f04f 0300 	mov.w	r3, #0
 8005494:	018b      	lsls	r3, r1, #6
 8005496:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800549a:	0182      	lsls	r2, r0, #6
 800549c:	1a12      	subs	r2, r2, r0
 800549e:	eb63 0301 	sbc.w	r3, r3, r1
 80054a2:	f04f 0000 	mov.w	r0, #0
 80054a6:	f04f 0100 	mov.w	r1, #0
 80054aa:	00d9      	lsls	r1, r3, #3
 80054ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054b0:	00d0      	lsls	r0, r2, #3
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	1912      	adds	r2, r2, r4
 80054b8:	eb45 0303 	adc.w	r3, r5, r3
 80054bc:	f04f 0000 	mov.w	r0, #0
 80054c0:	f04f 0100 	mov.w	r1, #0
 80054c4:	0299      	lsls	r1, r3, #10
 80054c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80054ca:	0290      	lsls	r0, r2, #10
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	4610      	mov	r0, r2
 80054d2:	4619      	mov	r1, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	461a      	mov	r2, r3
 80054d8:	f04f 0300 	mov.w	r3, #0
 80054dc:	f7fa ff18 	bl	8000310 <__aeabi_uldivmod>
 80054e0:	4602      	mov	r2, r0
 80054e2:	460b      	mov	r3, r1
 80054e4:	4613      	mov	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80054e8:	4b0b      	ldr	r3, [pc, #44]	; (8005518 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	0c1b      	lsrs	r3, r3, #16
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	3301      	adds	r3, #1
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005500:	60bb      	str	r3, [r7, #8]
      break;
 8005502:	e002      	b.n	800550a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005504:	4b05      	ldr	r3, [pc, #20]	; (800551c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005506:	60bb      	str	r3, [r7, #8]
      break;
 8005508:	bf00      	nop
    }
  }
  return sysclockfreq;
 800550a:	68bb      	ldr	r3, [r7, #8]
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005516:	bf00      	nop
 8005518:	40023800 	.word	0x40023800
 800551c:	00f42400 	.word	0x00f42400
 8005520:	007a1200 	.word	0x007a1200

08005524 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005528:	4b03      	ldr	r3, [pc, #12]	; (8005538 <HAL_RCC_GetHCLKFreq+0x14>)
 800552a:	681b      	ldr	r3, [r3, #0]
}
 800552c:	4618      	mov	r0, r3
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	20000700 	.word	0x20000700

0800553c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005540:	f7ff fff0 	bl	8005524 <HAL_RCC_GetHCLKFreq>
 8005544:	4602      	mov	r2, r0
 8005546:	4b05      	ldr	r3, [pc, #20]	; (800555c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	0a9b      	lsrs	r3, r3, #10
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	4903      	ldr	r1, [pc, #12]	; (8005560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005552:	5ccb      	ldrb	r3, [r1, r3]
 8005554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005558:	4618      	mov	r0, r3
 800555a:	bd80      	pop	{r7, pc}
 800555c:	40023800 	.word	0x40023800
 8005560:	0801d66c 	.word	0x0801d66c

08005564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005568:	f7ff ffdc 	bl	8005524 <HAL_RCC_GetHCLKFreq>
 800556c:	4602      	mov	r2, r0
 800556e:	4b05      	ldr	r3, [pc, #20]	; (8005584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	0b5b      	lsrs	r3, r3, #13
 8005574:	f003 0307 	and.w	r3, r3, #7
 8005578:	4903      	ldr	r1, [pc, #12]	; (8005588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800557a:	5ccb      	ldrb	r3, [r1, r3]
 800557c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005580:	4618      	mov	r0, r3
 8005582:	bd80      	pop	{r7, pc}
 8005584:	40023800 	.word	0x40023800
 8005588:	0801d66c 	.word	0x0801d66c

0800558c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	220f      	movs	r2, #15
 800559a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800559c:	4b12      	ldr	r3, [pc, #72]	; (80055e8 <HAL_RCC_GetClockConfig+0x5c>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f003 0203 	and.w	r2, r3, #3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80055a8:	4b0f      	ldr	r3, [pc, #60]	; (80055e8 <HAL_RCC_GetClockConfig+0x5c>)
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80055b4:	4b0c      	ldr	r3, [pc, #48]	; (80055e8 <HAL_RCC_GetClockConfig+0x5c>)
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80055c0:	4b09      	ldr	r3, [pc, #36]	; (80055e8 <HAL_RCC_GetClockConfig+0x5c>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	08db      	lsrs	r3, r3, #3
 80055c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80055ce:	4b07      	ldr	r3, [pc, #28]	; (80055ec <HAL_RCC_GetClockConfig+0x60>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 020f 	and.w	r2, r3, #15
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	601a      	str	r2, [r3, #0]
}
 80055da:	bf00      	nop
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	40023800 	.word	0x40023800
 80055ec:	40023c00 	.word	0x40023c00

080055f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b088      	sub	sp, #32
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80055f8:	2300      	movs	r3, #0
 80055fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80055fc:	2300      	movs	r3, #0
 80055fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005600:	2300      	movs	r3, #0
 8005602:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005604:	2300      	movs	r3, #0
 8005606:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005608:	2300      	movs	r3, #0
 800560a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	2b00      	cmp	r3, #0
 8005616:	d012      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005618:	4b69      	ldr	r3, [pc, #420]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	4a68      	ldr	r2, [pc, #416]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800561e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005622:	6093      	str	r3, [r2, #8]
 8005624:	4b66      	ldr	r3, [pc, #408]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562c:	4964      	ldr	r1, [pc, #400]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800562e:	4313      	orrs	r3, r2
 8005630:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800563a:	2301      	movs	r3, #1
 800563c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d017      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800564a:	4b5d      	ldr	r3, [pc, #372]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800564c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005650:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005658:	4959      	ldr	r1, [pc, #356]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800565a:	4313      	orrs	r3, r2
 800565c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005664:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005668:	d101      	bne.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800566a:	2301      	movs	r3, #1
 800566c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005676:	2301      	movs	r3, #1
 8005678:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d017      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005686:	4b4e      	ldr	r3, [pc, #312]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800568c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005694:	494a      	ldr	r1, [pc, #296]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005696:	4313      	orrs	r3, r2
 8005698:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056a4:	d101      	bne.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80056a6:	2301      	movs	r3, #1
 80056a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80056b2:	2301      	movs	r3, #1
 80056b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80056c2:	2301      	movs	r3, #1
 80056c4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f003 0320 	and.w	r3, r3, #32
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f000 808b 	beq.w	80057ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056d4:	4b3a      	ldr	r3, [pc, #232]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d8:	4a39      	ldr	r2, [pc, #228]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056de:	6413      	str	r3, [r2, #64]	; 0x40
 80056e0:	4b37      	ldr	r3, [pc, #220]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056e8:	60bb      	str	r3, [r7, #8]
 80056ea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80056ec:	4b35      	ldr	r3, [pc, #212]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a34      	ldr	r2, [pc, #208]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80056f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056f8:	f7fd fc94 	bl	8003024 <HAL_GetTick>
 80056fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80056fe:	e008      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005700:	f7fd fc90 	bl	8003024 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b64      	cmp	r3, #100	; 0x64
 800570c:	d901      	bls.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e38f      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005712:	4b2c      	ldr	r3, [pc, #176]	; (80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0f0      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800571e:	4b28      	ldr	r3, [pc, #160]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005726:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d035      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	429a      	cmp	r2, r3
 800573a:	d02e      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800573c:	4b20      	ldr	r3, [pc, #128]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800573e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005740:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005744:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005746:	4b1e      	ldr	r3, [pc, #120]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574a:	4a1d      	ldr	r2, [pc, #116]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800574c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005750:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005752:	4b1b      	ldr	r3, [pc, #108]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005756:	4a1a      	ldr	r2, [pc, #104]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800575c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800575e:	4a18      	ldr	r2, [pc, #96]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005764:	4b16      	ldr	r3, [pc, #88]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b01      	cmp	r3, #1
 800576e:	d114      	bne.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005770:	f7fd fc58 	bl	8003024 <HAL_GetTick>
 8005774:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005776:	e00a      	b.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005778:	f7fd fc54 	bl	8003024 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	f241 3288 	movw	r2, #5000	; 0x1388
 8005786:	4293      	cmp	r3, r2
 8005788:	d901      	bls.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e351      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800578e:	4b0c      	ldr	r3, [pc, #48]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d0ee      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057a6:	d111      	bne.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80057a8:	4b05      	ldr	r3, [pc, #20]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80057b4:	4b04      	ldr	r3, [pc, #16]	; (80057c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80057b6:	400b      	ands	r3, r1
 80057b8:	4901      	ldr	r1, [pc, #4]	; (80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	608b      	str	r3, [r1, #8]
 80057be:	e00b      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80057c0:	40023800 	.word	0x40023800
 80057c4:	40007000 	.word	0x40007000
 80057c8:	0ffffcff 	.word	0x0ffffcff
 80057cc:	4bb3      	ldr	r3, [pc, #716]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	4ab2      	ldr	r2, [pc, #712]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80057d6:	6093      	str	r3, [r2, #8]
 80057d8:	4bb0      	ldr	r3, [pc, #704]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057e4:	49ad      	ldr	r1, [pc, #692]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057e6:	4313      	orrs	r3, r2
 80057e8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0310 	and.w	r3, r3, #16
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d010      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80057f6:	4ba9      	ldr	r3, [pc, #676]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057fc:	4aa7      	ldr	r2, [pc, #668]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005802:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005806:	4ba5      	ldr	r3, [pc, #660]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005808:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005810:	49a2      	ldr	r1, [pc, #648]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005812:	4313      	orrs	r3, r2
 8005814:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00a      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005824:	4b9d      	ldr	r3, [pc, #628]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005832:	499a      	ldr	r1, [pc, #616]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005834:	4313      	orrs	r3, r2
 8005836:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005846:	4b95      	ldr	r3, [pc, #596]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005854:	4991      	ldr	r1, [pc, #580]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005856:	4313      	orrs	r3, r2
 8005858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00a      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005868:	4b8c      	ldr	r3, [pc, #560]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800586a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005876:	4989      	ldr	r1, [pc, #548]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005878:	4313      	orrs	r3, r2
 800587a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800588a:	4b84      	ldr	r3, [pc, #528]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800588c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005890:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005898:	4980      	ldr	r1, [pc, #512]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00a      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058ac:	4b7b      	ldr	r3, [pc, #492]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b2:	f023 0203 	bic.w	r2, r3, #3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ba:	4978      	ldr	r1, [pc, #480]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00a      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058ce:	4b73      	ldr	r3, [pc, #460]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d4:	f023 020c 	bic.w	r2, r3, #12
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058dc:	496f      	ldr	r1, [pc, #444]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00a      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058f0:	4b6a      	ldr	r3, [pc, #424]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058fe:	4967      	ldr	r1, [pc, #412]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005900:	4313      	orrs	r3, r2
 8005902:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00a      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005912:	4b62      	ldr	r3, [pc, #392]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005918:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005920:	495e      	ldr	r1, [pc, #376]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005922:	4313      	orrs	r3, r2
 8005924:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00a      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005934:	4b59      	ldr	r3, [pc, #356]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005942:	4956      	ldr	r1, [pc, #344]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005944:	4313      	orrs	r3, r2
 8005946:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005952:	2b00      	cmp	r3, #0
 8005954:	d00a      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005956:	4b51      	ldr	r3, [pc, #324]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005964:	494d      	ldr	r1, [pc, #308]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005966:	4313      	orrs	r3, r2
 8005968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00a      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005978:	4b48      	ldr	r3, [pc, #288]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800597a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800597e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005986:	4945      	ldr	r1, [pc, #276]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005988:	4313      	orrs	r3, r2
 800598a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00a      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800599a:	4b40      	ldr	r3, [pc, #256]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800599c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a8:	493c      	ldr	r1, [pc, #240]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00a      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80059bc:	4b37      	ldr	r3, [pc, #220]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059ca:	4934      	ldr	r1, [pc, #208]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d011      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80059de:	4b2f      	ldr	r3, [pc, #188]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059ec:	492b      	ldr	r1, [pc, #172]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059fc:	d101      	bne.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80059fe:	2301      	movs	r3, #1
 8005a00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0308 	and.w	r3, r3, #8
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00a      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a1e:	4b1f      	ldr	r3, [pc, #124]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a24:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a2c:	491b      	ldr	r1, [pc, #108]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00b      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a40:	4b16      	ldr	r3, [pc, #88]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a46:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a50:	4912      	ldr	r1, [pc, #72]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00b      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005a64:	4b0d      	ldr	r3, [pc, #52]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a6a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a74:	4909      	ldr	r1, [pc, #36]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00f      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a88:	4b04      	ldr	r3, [pc, #16]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a8e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a98:	e002      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005a9a:	bf00      	nop
 8005a9c:	40023800 	.word	0x40023800
 8005aa0:	4986      	ldr	r1, [pc, #536]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00b      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005ab4:	4b81      	ldr	r3, [pc, #516]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ac4:	497d      	ldr	r1, [pc, #500]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d006      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f000 80d6 	beq.w	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005ae0:	4b76      	ldr	r3, [pc, #472]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a75      	ldr	r2, [pc, #468]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ae6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005aea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aec:	f7fd fa9a 	bl	8003024 <HAL_GetTick>
 8005af0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005af2:	e008      	b.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005af4:	f7fd fa96 	bl	8003024 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b64      	cmp	r3, #100	; 0x64
 8005b00:	d901      	bls.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	e195      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b06:	4b6d      	ldr	r3, [pc, #436]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1f0      	bne.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d021      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d11d      	bne.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005b26:	4b65      	ldr	r3, [pc, #404]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b2c:	0c1b      	lsrs	r3, r3, #16
 8005b2e:	f003 0303 	and.w	r3, r3, #3
 8005b32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b34:	4b61      	ldr	r3, [pc, #388]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b3a:	0e1b      	lsrs	r3, r3, #24
 8005b3c:	f003 030f 	and.w	r3, r3, #15
 8005b40:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	019a      	lsls	r2, r3, #6
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	041b      	lsls	r3, r3, #16
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	061b      	lsls	r3, r3, #24
 8005b52:	431a      	orrs	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	071b      	lsls	r3, r3, #28
 8005b5a:	4958      	ldr	r1, [pc, #352]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d004      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b76:	d00a      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d02e      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b8c:	d129      	bne.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005b8e:	4b4b      	ldr	r3, [pc, #300]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b94:	0c1b      	lsrs	r3, r3, #16
 8005b96:	f003 0303 	and.w	r3, r3, #3
 8005b9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b9c:	4b47      	ldr	r3, [pc, #284]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ba2:	0f1b      	lsrs	r3, r3, #28
 8005ba4:	f003 0307 	and.w	r3, r3, #7
 8005ba8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	019a      	lsls	r2, r3, #6
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	041b      	lsls	r3, r3, #16
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	061b      	lsls	r3, r3, #24
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	071b      	lsls	r3, r3, #28
 8005bc2:	493e      	ldr	r1, [pc, #248]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005bca:	4b3c      	ldr	r3, [pc, #240]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bd0:	f023 021f 	bic.w	r2, r3, #31
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	4938      	ldr	r1, [pc, #224]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d01d      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005bee:	4b33      	ldr	r3, [pc, #204]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bf4:	0e1b      	lsrs	r3, r3, #24
 8005bf6:	f003 030f 	and.w	r3, r3, #15
 8005bfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005bfc:	4b2f      	ldr	r3, [pc, #188]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c02:	0f1b      	lsrs	r3, r3, #28
 8005c04:	f003 0307 	and.w	r3, r3, #7
 8005c08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	019a      	lsls	r2, r3, #6
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	041b      	lsls	r3, r3, #16
 8005c16:	431a      	orrs	r2, r3
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	061b      	lsls	r3, r3, #24
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	071b      	lsls	r3, r3, #28
 8005c22:	4926      	ldr	r1, [pc, #152]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d011      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	019a      	lsls	r2, r3, #6
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	041b      	lsls	r3, r3, #16
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	061b      	lsls	r3, r3, #24
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	071b      	lsls	r3, r3, #28
 8005c52:	491a      	ldr	r1, [pc, #104]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c5a:	4b18      	ldr	r3, [pc, #96]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a17      	ldr	r2, [pc, #92]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c66:	f7fd f9dd 	bl	8003024 <HAL_GetTick>
 8005c6a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c6c:	e008      	b.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c6e:	f7fd f9d9 	bl	8003024 <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	2b64      	cmp	r3, #100	; 0x64
 8005c7a:	d901      	bls.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e0d8      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c80:	4b0e      	ldr	r3, [pc, #56]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d0f0      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	f040 80ce 	bne.w	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005c94:	4b09      	ldr	r3, [pc, #36]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a08      	ldr	r2, [pc, #32]	; (8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ca0:	f7fd f9c0 	bl	8003024 <HAL_GetTick>
 8005ca4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ca6:	e00b      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ca8:	f7fd f9bc 	bl	8003024 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b64      	cmp	r3, #100	; 0x64
 8005cb4:	d904      	bls.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e0bb      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005cba:	bf00      	nop
 8005cbc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005cc0:	4b5e      	ldr	r3, [pc, #376]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ccc:	d0ec      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d009      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d02e      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d12a      	bne.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005cf6:	4b51      	ldr	r3, [pc, #324]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cfc:	0c1b      	lsrs	r3, r3, #16
 8005cfe:	f003 0303 	and.w	r3, r3, #3
 8005d02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d04:	4b4d      	ldr	r3, [pc, #308]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d0a:	0f1b      	lsrs	r3, r3, #28
 8005d0c:	f003 0307 	and.w	r3, r3, #7
 8005d10:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	019a      	lsls	r2, r3, #6
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	041b      	lsls	r3, r3, #16
 8005d1c:	431a      	orrs	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	061b      	lsls	r3, r3, #24
 8005d24:	431a      	orrs	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	071b      	lsls	r3, r3, #28
 8005d2a:	4944      	ldr	r1, [pc, #272]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005d32:	4b42      	ldr	r3, [pc, #264]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d38:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d40:	3b01      	subs	r3, #1
 8005d42:	021b      	lsls	r3, r3, #8
 8005d44:	493d      	ldr	r1, [pc, #244]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d022      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d60:	d11d      	bne.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d62:	4b36      	ldr	r3, [pc, #216]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d68:	0e1b      	lsrs	r3, r3, #24
 8005d6a:	f003 030f 	and.w	r3, r3, #15
 8005d6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d70:	4b32      	ldr	r3, [pc, #200]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d76:	0f1b      	lsrs	r3, r3, #28
 8005d78:	f003 0307 	and.w	r3, r3, #7
 8005d7c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	019a      	lsls	r2, r3, #6
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	041b      	lsls	r3, r3, #16
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	061b      	lsls	r3, r3, #24
 8005d90:	431a      	orrs	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	071b      	lsls	r3, r3, #28
 8005d96:	4929      	ldr	r1, [pc, #164]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0308 	and.w	r3, r3, #8
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d028      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005daa:	4b24      	ldr	r3, [pc, #144]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005db0:	0e1b      	lsrs	r3, r3, #24
 8005db2:	f003 030f 	and.w	r3, r3, #15
 8005db6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005db8:	4b20      	ldr	r3, [pc, #128]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dbe:	0c1b      	lsrs	r3, r3, #16
 8005dc0:	f003 0303 	and.w	r3, r3, #3
 8005dc4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	019a      	lsls	r2, r3, #6
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	041b      	lsls	r3, r3, #16
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	061b      	lsls	r3, r3, #24
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	69db      	ldr	r3, [r3, #28]
 8005ddc:	071b      	lsls	r3, r3, #28
 8005dde:	4917      	ldr	r1, [pc, #92]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005de6:	4b15      	ldr	r3, [pc, #84]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df4:	4911      	ldr	r1, [pc, #68]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005dfc:	4b0f      	ldr	r3, [pc, #60]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a0e      	ldr	r2, [pc, #56]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e08:	f7fd f90c 	bl	8003024 <HAL_GetTick>
 8005e0c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e0e:	e008      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e10:	f7fd f908 	bl	8003024 <HAL_GetTick>
 8005e14:	4602      	mov	r2, r0
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	1ad3      	subs	r3, r2, r3
 8005e1a:	2b64      	cmp	r3, #100	; 0x64
 8005e1c:	d901      	bls.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e007      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e22:	4b06      	ldr	r3, [pc, #24]	; (8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e2e:	d1ef      	bne.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3720      	adds	r7, #32
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	40023800 	.word	0x40023800

08005e40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e049      	b.n	8005ee6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d106      	bne.n	8005e6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f841 	bl	8005eee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	3304      	adds	r3, #4
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	4610      	mov	r0, r2
 8005e80:	f000 fa00 	bl	8006284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
	...

08005f04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d001      	beq.n	8005f1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e054      	b.n	8005fc6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f042 0201 	orr.w	r2, r2, #1
 8005f32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a26      	ldr	r2, [pc, #152]	; (8005fd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d022      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x80>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f46:	d01d      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x80>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a22      	ldr	r2, [pc, #136]	; (8005fd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d018      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x80>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a21      	ldr	r2, [pc, #132]	; (8005fdc <HAL_TIM_Base_Start_IT+0xd8>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d013      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x80>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a1f      	ldr	r2, [pc, #124]	; (8005fe0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d00e      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x80>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a1e      	ldr	r2, [pc, #120]	; (8005fe4 <HAL_TIM_Base_Start_IT+0xe0>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d009      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x80>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a1c      	ldr	r2, [pc, #112]	; (8005fe8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d004      	beq.n	8005f84 <HAL_TIM_Base_Start_IT+0x80>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a1b      	ldr	r2, [pc, #108]	; (8005fec <HAL_TIM_Base_Start_IT+0xe8>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d115      	bne.n	8005fb0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689a      	ldr	r2, [r3, #8]
 8005f8a:	4b19      	ldr	r3, [pc, #100]	; (8005ff0 <HAL_TIM_Base_Start_IT+0xec>)
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2b06      	cmp	r3, #6
 8005f94:	d015      	beq.n	8005fc2 <HAL_TIM_Base_Start_IT+0xbe>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f9c:	d011      	beq.n	8005fc2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f042 0201 	orr.w	r2, r2, #1
 8005fac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fae:	e008      	b.n	8005fc2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0201 	orr.w	r2, r2, #1
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	e000      	b.n	8005fc4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	40010000 	.word	0x40010000
 8005fd8:	40000400 	.word	0x40000400
 8005fdc:	40000800 	.word	0x40000800
 8005fe0:	40000c00 	.word	0x40000c00
 8005fe4:	40010400 	.word	0x40010400
 8005fe8:	40014000 	.word	0x40014000
 8005fec:	40001800 	.word	0x40001800
 8005ff0:	00010007 	.word	0x00010007

08005ff4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b02      	cmp	r3, #2
 8006008:	d122      	bne.n	8006050 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	2b02      	cmp	r3, #2
 8006016:	d11b      	bne.n	8006050 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f06f 0202 	mvn.w	r2, #2
 8006020:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	f003 0303 	and.w	r3, r3, #3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f905 	bl	8006246 <HAL_TIM_IC_CaptureCallback>
 800603c:	e005      	b.n	800604a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f8f7 	bl	8006232 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 f908 	bl	800625a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	f003 0304 	and.w	r3, r3, #4
 800605a:	2b04      	cmp	r3, #4
 800605c:	d122      	bne.n	80060a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f003 0304 	and.w	r3, r3, #4
 8006068:	2b04      	cmp	r3, #4
 800606a:	d11b      	bne.n	80060a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f06f 0204 	mvn.w	r2, #4
 8006074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2202      	movs	r2, #2
 800607a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006086:	2b00      	cmp	r3, #0
 8006088:	d003      	beq.n	8006092 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f8db 	bl	8006246 <HAL_TIM_IC_CaptureCallback>
 8006090:	e005      	b.n	800609e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f8cd 	bl	8006232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f8de 	bl	800625a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	f003 0308 	and.w	r3, r3, #8
 80060ae:	2b08      	cmp	r3, #8
 80060b0:	d122      	bne.n	80060f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	f003 0308 	and.w	r3, r3, #8
 80060bc:	2b08      	cmp	r3, #8
 80060be:	d11b      	bne.n	80060f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f06f 0208 	mvn.w	r2, #8
 80060c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2204      	movs	r2, #4
 80060ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	f003 0303 	and.w	r3, r3, #3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f8b1 	bl	8006246 <HAL_TIM_IC_CaptureCallback>
 80060e4:	e005      	b.n	80060f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f8a3 	bl	8006232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f8b4 	bl	800625a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	f003 0310 	and.w	r3, r3, #16
 8006102:	2b10      	cmp	r3, #16
 8006104:	d122      	bne.n	800614c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	f003 0310 	and.w	r3, r3, #16
 8006110:	2b10      	cmp	r3, #16
 8006112:	d11b      	bne.n	800614c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f06f 0210 	mvn.w	r2, #16
 800611c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2208      	movs	r2, #8
 8006122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800612e:	2b00      	cmp	r3, #0
 8006130:	d003      	beq.n	800613a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f887 	bl	8006246 <HAL_TIM_IC_CaptureCallback>
 8006138:	e005      	b.n	8006146 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f879 	bl	8006232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 f88a 	bl	800625a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b01      	cmp	r3, #1
 8006158:	d10e      	bne.n	8006178 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b01      	cmp	r3, #1
 8006166:	d107      	bne.n	8006178 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f06f 0201 	mvn.w	r2, #1
 8006170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7fb fcb2 	bl	8001adc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006182:	2b80      	cmp	r3, #128	; 0x80
 8006184:	d10e      	bne.n	80061a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006190:	2b80      	cmp	r3, #128	; 0x80
 8006192:	d107      	bne.n	80061a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800619c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f91a 	bl	80063d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061b2:	d10e      	bne.n	80061d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061be:	2b80      	cmp	r3, #128	; 0x80
 80061c0:	d107      	bne.n	80061d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80061ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 f90d 	bl	80063ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061dc:	2b40      	cmp	r3, #64	; 0x40
 80061de:	d10e      	bne.n	80061fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ea:	2b40      	cmp	r3, #64	; 0x40
 80061ec:	d107      	bne.n	80061fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f838 	bl	800626e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	f003 0320 	and.w	r3, r3, #32
 8006208:	2b20      	cmp	r3, #32
 800620a:	d10e      	bne.n	800622a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f003 0320 	and.w	r3, r3, #32
 8006216:	2b20      	cmp	r3, #32
 8006218:	d107      	bne.n	800622a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f06f 0220 	mvn.w	r2, #32
 8006222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 f8cd 	bl	80063c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800622a:	bf00      	nop
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006232:	b480      	push	{r7}
 8006234:	b083      	sub	sp, #12
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800623a:	bf00      	nop
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800624e:	bf00      	nop
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800625a:	b480      	push	{r7}
 800625c:	b083      	sub	sp, #12
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006262:	bf00      	nop
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800626e:	b480      	push	{r7}
 8006270:	b083      	sub	sp, #12
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
	...

08006284 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a40      	ldr	r2, [pc, #256]	; (8006398 <TIM_Base_SetConfig+0x114>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d013      	beq.n	80062c4 <TIM_Base_SetConfig+0x40>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a2:	d00f      	beq.n	80062c4 <TIM_Base_SetConfig+0x40>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a3d      	ldr	r2, [pc, #244]	; (800639c <TIM_Base_SetConfig+0x118>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d00b      	beq.n	80062c4 <TIM_Base_SetConfig+0x40>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a3c      	ldr	r2, [pc, #240]	; (80063a0 <TIM_Base_SetConfig+0x11c>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d007      	beq.n	80062c4 <TIM_Base_SetConfig+0x40>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a3b      	ldr	r2, [pc, #236]	; (80063a4 <TIM_Base_SetConfig+0x120>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d003      	beq.n	80062c4 <TIM_Base_SetConfig+0x40>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a3a      	ldr	r2, [pc, #232]	; (80063a8 <TIM_Base_SetConfig+0x124>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d108      	bne.n	80062d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a2f      	ldr	r2, [pc, #188]	; (8006398 <TIM_Base_SetConfig+0x114>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d02b      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062e4:	d027      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a2c      	ldr	r2, [pc, #176]	; (800639c <TIM_Base_SetConfig+0x118>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d023      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a2b      	ldr	r2, [pc, #172]	; (80063a0 <TIM_Base_SetConfig+0x11c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d01f      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a2a      	ldr	r2, [pc, #168]	; (80063a4 <TIM_Base_SetConfig+0x120>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d01b      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a29      	ldr	r2, [pc, #164]	; (80063a8 <TIM_Base_SetConfig+0x124>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d017      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a28      	ldr	r2, [pc, #160]	; (80063ac <TIM_Base_SetConfig+0x128>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d013      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a27      	ldr	r2, [pc, #156]	; (80063b0 <TIM_Base_SetConfig+0x12c>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d00f      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a26      	ldr	r2, [pc, #152]	; (80063b4 <TIM_Base_SetConfig+0x130>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d00b      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a25      	ldr	r2, [pc, #148]	; (80063b8 <TIM_Base_SetConfig+0x134>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d007      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a24      	ldr	r2, [pc, #144]	; (80063bc <TIM_Base_SetConfig+0x138>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d003      	beq.n	8006336 <TIM_Base_SetConfig+0xb2>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a23      	ldr	r2, [pc, #140]	; (80063c0 <TIM_Base_SetConfig+0x13c>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d108      	bne.n	8006348 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800633c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	4313      	orrs	r3, r2
 8006346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	4313      	orrs	r3, r2
 8006354:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	689a      	ldr	r2, [r3, #8]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a0a      	ldr	r2, [pc, #40]	; (8006398 <TIM_Base_SetConfig+0x114>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d003      	beq.n	800637c <TIM_Base_SetConfig+0xf8>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a0c      	ldr	r2, [pc, #48]	; (80063a8 <TIM_Base_SetConfig+0x124>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d103      	bne.n	8006384 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	691a      	ldr	r2, [r3, #16]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	615a      	str	r2, [r3, #20]
}
 800638a:	bf00      	nop
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	40010000 	.word	0x40010000
 800639c:	40000400 	.word	0x40000400
 80063a0:	40000800 	.word	0x40000800
 80063a4:	40000c00 	.word	0x40000c00
 80063a8:	40010400 	.word	0x40010400
 80063ac:	40014000 	.word	0x40014000
 80063b0:	40014400 	.word	0x40014400
 80063b4:	40014800 	.word	0x40014800
 80063b8:	40001800 	.word	0x40001800
 80063bc:	40001c00 	.word	0x40001c00
 80063c0:	40002000 	.word	0x40002000

080063c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e040      	b.n	8006494 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006416:	2b00      	cmp	r3, #0
 8006418:	d106      	bne.n	8006428 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7fb fb9a 	bl	8001b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2224      	movs	r2, #36	; 0x24
 800642c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f022 0201 	bic.w	r2, r2, #1
 800643c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f8c0 	bl	80065c4 <UART_SetConfig>
 8006444:	4603      	mov	r3, r0
 8006446:	2b01      	cmp	r3, #1
 8006448:	d101      	bne.n	800644e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e022      	b.n	8006494 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006452:	2b00      	cmp	r3, #0
 8006454:	d002      	beq.n	800645c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fb16 	bl	8006a88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800646a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689a      	ldr	r2, [r3, #8]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800647a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f042 0201 	orr.w	r2, r2, #1
 800648a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 fb9d 	bl	8006bcc <UART_CheckIdleState>
 8006492:	4603      	mov	r3, r0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b08a      	sub	sp, #40	; 0x28
 80064a0:	af02      	add	r7, sp, #8
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	603b      	str	r3, [r7, #0]
 80064a8:	4613      	mov	r3, r2
 80064aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064b0:	2b20      	cmp	r3, #32
 80064b2:	f040 8081 	bne.w	80065b8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d002      	beq.n	80064c2 <HAL_UART_Transmit+0x26>
 80064bc:	88fb      	ldrh	r3, [r7, #6]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e079      	b.n	80065ba <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d101      	bne.n	80064d4 <HAL_UART_Transmit+0x38>
 80064d0:	2302      	movs	r3, #2
 80064d2:	e072      	b.n	80065ba <HAL_UART_Transmit+0x11e>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2201      	movs	r2, #1
 80064d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2221      	movs	r2, #33	; 0x21
 80064e8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064ea:	f7fc fd9b 	bl	8003024 <HAL_GetTick>
 80064ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	88fa      	ldrh	r2, [r7, #6]
 80064f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	88fa      	ldrh	r2, [r7, #6]
 80064fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006508:	d108      	bne.n	800651c <HAL_UART_Transmit+0x80>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d104      	bne.n	800651c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006512:	2300      	movs	r3, #0
 8006514:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	61bb      	str	r3, [r7, #24]
 800651a:	e003      	b.n	8006524 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006520:	2300      	movs	r3, #0
 8006522:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800652c:	e02c      	b.n	8006588 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	2200      	movs	r2, #0
 8006536:	2180      	movs	r1, #128	; 0x80
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 fb90 	bl	8006c5e <UART_WaitOnFlagUntilTimeout>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e038      	b.n	80065ba <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10b      	bne.n	8006566 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	881b      	ldrh	r3, [r3, #0]
 8006552:	461a      	mov	r2, r3
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800655c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	3302      	adds	r3, #2
 8006562:	61bb      	str	r3, [r7, #24]
 8006564:	e007      	b.n	8006576 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	781a      	ldrb	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	3301      	adds	r3, #1
 8006574:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800657c:	b29b      	uxth	r3, r3
 800657e:	3b01      	subs	r3, #1
 8006580:	b29a      	uxth	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800658e:	b29b      	uxth	r3, r3
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1cc      	bne.n	800652e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	2200      	movs	r2, #0
 800659c:	2140      	movs	r1, #64	; 0x40
 800659e:	68f8      	ldr	r0, [r7, #12]
 80065a0:	f000 fb5d 	bl	8006c5e <UART_WaitOnFlagUntilTimeout>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e005      	b.n	80065ba <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2220      	movs	r2, #32
 80065b2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80065b4:	2300      	movs	r3, #0
 80065b6:	e000      	b.n	80065ba <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80065b8:	2302      	movs	r3, #2
  }
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3720      	adds	r7, #32
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
	...

080065c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b088      	sub	sp, #32
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065cc:	2300      	movs	r3, #0
 80065ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	431a      	orrs	r2, r3
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	431a      	orrs	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	4ba7      	ldr	r3, [pc, #668]	; (800688c <UART_SetConfig+0x2c8>)
 80065f0:	4013      	ands	r3, r2
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	6812      	ldr	r2, [r2, #0]
 80065f6:	6979      	ldr	r1, [r7, #20]
 80065f8:	430b      	orrs	r3, r1
 80065fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68da      	ldr	r2, [r3, #12]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	430a      	orrs	r2, r1
 8006610:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	4313      	orrs	r3, r2
 8006620:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	430a      	orrs	r2, r1
 8006634:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a95      	ldr	r2, [pc, #596]	; (8006890 <UART_SetConfig+0x2cc>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d120      	bne.n	8006682 <UART_SetConfig+0xbe>
 8006640:	4b94      	ldr	r3, [pc, #592]	; (8006894 <UART_SetConfig+0x2d0>)
 8006642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006646:	f003 0303 	and.w	r3, r3, #3
 800664a:	2b03      	cmp	r3, #3
 800664c:	d816      	bhi.n	800667c <UART_SetConfig+0xb8>
 800664e:	a201      	add	r2, pc, #4	; (adr r2, 8006654 <UART_SetConfig+0x90>)
 8006650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006654:	08006665 	.word	0x08006665
 8006658:	08006671 	.word	0x08006671
 800665c:	0800666b 	.word	0x0800666b
 8006660:	08006677 	.word	0x08006677
 8006664:	2301      	movs	r3, #1
 8006666:	77fb      	strb	r3, [r7, #31]
 8006668:	e14f      	b.n	800690a <UART_SetConfig+0x346>
 800666a:	2302      	movs	r3, #2
 800666c:	77fb      	strb	r3, [r7, #31]
 800666e:	e14c      	b.n	800690a <UART_SetConfig+0x346>
 8006670:	2304      	movs	r3, #4
 8006672:	77fb      	strb	r3, [r7, #31]
 8006674:	e149      	b.n	800690a <UART_SetConfig+0x346>
 8006676:	2308      	movs	r3, #8
 8006678:	77fb      	strb	r3, [r7, #31]
 800667a:	e146      	b.n	800690a <UART_SetConfig+0x346>
 800667c:	2310      	movs	r3, #16
 800667e:	77fb      	strb	r3, [r7, #31]
 8006680:	e143      	b.n	800690a <UART_SetConfig+0x346>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a84      	ldr	r2, [pc, #528]	; (8006898 <UART_SetConfig+0x2d4>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d132      	bne.n	80066f2 <UART_SetConfig+0x12e>
 800668c:	4b81      	ldr	r3, [pc, #516]	; (8006894 <UART_SetConfig+0x2d0>)
 800668e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006692:	f003 030c 	and.w	r3, r3, #12
 8006696:	2b0c      	cmp	r3, #12
 8006698:	d828      	bhi.n	80066ec <UART_SetConfig+0x128>
 800669a:	a201      	add	r2, pc, #4	; (adr r2, 80066a0 <UART_SetConfig+0xdc>)
 800669c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a0:	080066d5 	.word	0x080066d5
 80066a4:	080066ed 	.word	0x080066ed
 80066a8:	080066ed 	.word	0x080066ed
 80066ac:	080066ed 	.word	0x080066ed
 80066b0:	080066e1 	.word	0x080066e1
 80066b4:	080066ed 	.word	0x080066ed
 80066b8:	080066ed 	.word	0x080066ed
 80066bc:	080066ed 	.word	0x080066ed
 80066c0:	080066db 	.word	0x080066db
 80066c4:	080066ed 	.word	0x080066ed
 80066c8:	080066ed 	.word	0x080066ed
 80066cc:	080066ed 	.word	0x080066ed
 80066d0:	080066e7 	.word	0x080066e7
 80066d4:	2300      	movs	r3, #0
 80066d6:	77fb      	strb	r3, [r7, #31]
 80066d8:	e117      	b.n	800690a <UART_SetConfig+0x346>
 80066da:	2302      	movs	r3, #2
 80066dc:	77fb      	strb	r3, [r7, #31]
 80066de:	e114      	b.n	800690a <UART_SetConfig+0x346>
 80066e0:	2304      	movs	r3, #4
 80066e2:	77fb      	strb	r3, [r7, #31]
 80066e4:	e111      	b.n	800690a <UART_SetConfig+0x346>
 80066e6:	2308      	movs	r3, #8
 80066e8:	77fb      	strb	r3, [r7, #31]
 80066ea:	e10e      	b.n	800690a <UART_SetConfig+0x346>
 80066ec:	2310      	movs	r3, #16
 80066ee:	77fb      	strb	r3, [r7, #31]
 80066f0:	e10b      	b.n	800690a <UART_SetConfig+0x346>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a69      	ldr	r2, [pc, #420]	; (800689c <UART_SetConfig+0x2d8>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d120      	bne.n	800673e <UART_SetConfig+0x17a>
 80066fc:	4b65      	ldr	r3, [pc, #404]	; (8006894 <UART_SetConfig+0x2d0>)
 80066fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006702:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006706:	2b30      	cmp	r3, #48	; 0x30
 8006708:	d013      	beq.n	8006732 <UART_SetConfig+0x16e>
 800670a:	2b30      	cmp	r3, #48	; 0x30
 800670c:	d814      	bhi.n	8006738 <UART_SetConfig+0x174>
 800670e:	2b20      	cmp	r3, #32
 8006710:	d009      	beq.n	8006726 <UART_SetConfig+0x162>
 8006712:	2b20      	cmp	r3, #32
 8006714:	d810      	bhi.n	8006738 <UART_SetConfig+0x174>
 8006716:	2b00      	cmp	r3, #0
 8006718:	d002      	beq.n	8006720 <UART_SetConfig+0x15c>
 800671a:	2b10      	cmp	r3, #16
 800671c:	d006      	beq.n	800672c <UART_SetConfig+0x168>
 800671e:	e00b      	b.n	8006738 <UART_SetConfig+0x174>
 8006720:	2300      	movs	r3, #0
 8006722:	77fb      	strb	r3, [r7, #31]
 8006724:	e0f1      	b.n	800690a <UART_SetConfig+0x346>
 8006726:	2302      	movs	r3, #2
 8006728:	77fb      	strb	r3, [r7, #31]
 800672a:	e0ee      	b.n	800690a <UART_SetConfig+0x346>
 800672c:	2304      	movs	r3, #4
 800672e:	77fb      	strb	r3, [r7, #31]
 8006730:	e0eb      	b.n	800690a <UART_SetConfig+0x346>
 8006732:	2308      	movs	r3, #8
 8006734:	77fb      	strb	r3, [r7, #31]
 8006736:	e0e8      	b.n	800690a <UART_SetConfig+0x346>
 8006738:	2310      	movs	r3, #16
 800673a:	77fb      	strb	r3, [r7, #31]
 800673c:	e0e5      	b.n	800690a <UART_SetConfig+0x346>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a57      	ldr	r2, [pc, #348]	; (80068a0 <UART_SetConfig+0x2dc>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d120      	bne.n	800678a <UART_SetConfig+0x1c6>
 8006748:	4b52      	ldr	r3, [pc, #328]	; (8006894 <UART_SetConfig+0x2d0>)
 800674a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800674e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006752:	2bc0      	cmp	r3, #192	; 0xc0
 8006754:	d013      	beq.n	800677e <UART_SetConfig+0x1ba>
 8006756:	2bc0      	cmp	r3, #192	; 0xc0
 8006758:	d814      	bhi.n	8006784 <UART_SetConfig+0x1c0>
 800675a:	2b80      	cmp	r3, #128	; 0x80
 800675c:	d009      	beq.n	8006772 <UART_SetConfig+0x1ae>
 800675e:	2b80      	cmp	r3, #128	; 0x80
 8006760:	d810      	bhi.n	8006784 <UART_SetConfig+0x1c0>
 8006762:	2b00      	cmp	r3, #0
 8006764:	d002      	beq.n	800676c <UART_SetConfig+0x1a8>
 8006766:	2b40      	cmp	r3, #64	; 0x40
 8006768:	d006      	beq.n	8006778 <UART_SetConfig+0x1b4>
 800676a:	e00b      	b.n	8006784 <UART_SetConfig+0x1c0>
 800676c:	2300      	movs	r3, #0
 800676e:	77fb      	strb	r3, [r7, #31]
 8006770:	e0cb      	b.n	800690a <UART_SetConfig+0x346>
 8006772:	2302      	movs	r3, #2
 8006774:	77fb      	strb	r3, [r7, #31]
 8006776:	e0c8      	b.n	800690a <UART_SetConfig+0x346>
 8006778:	2304      	movs	r3, #4
 800677a:	77fb      	strb	r3, [r7, #31]
 800677c:	e0c5      	b.n	800690a <UART_SetConfig+0x346>
 800677e:	2308      	movs	r3, #8
 8006780:	77fb      	strb	r3, [r7, #31]
 8006782:	e0c2      	b.n	800690a <UART_SetConfig+0x346>
 8006784:	2310      	movs	r3, #16
 8006786:	77fb      	strb	r3, [r7, #31]
 8006788:	e0bf      	b.n	800690a <UART_SetConfig+0x346>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a45      	ldr	r2, [pc, #276]	; (80068a4 <UART_SetConfig+0x2e0>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d125      	bne.n	80067e0 <UART_SetConfig+0x21c>
 8006794:	4b3f      	ldr	r3, [pc, #252]	; (8006894 <UART_SetConfig+0x2d0>)
 8006796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800679a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800679e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067a2:	d017      	beq.n	80067d4 <UART_SetConfig+0x210>
 80067a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067a8:	d817      	bhi.n	80067da <UART_SetConfig+0x216>
 80067aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067ae:	d00b      	beq.n	80067c8 <UART_SetConfig+0x204>
 80067b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067b4:	d811      	bhi.n	80067da <UART_SetConfig+0x216>
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <UART_SetConfig+0x1fe>
 80067ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067be:	d006      	beq.n	80067ce <UART_SetConfig+0x20a>
 80067c0:	e00b      	b.n	80067da <UART_SetConfig+0x216>
 80067c2:	2300      	movs	r3, #0
 80067c4:	77fb      	strb	r3, [r7, #31]
 80067c6:	e0a0      	b.n	800690a <UART_SetConfig+0x346>
 80067c8:	2302      	movs	r3, #2
 80067ca:	77fb      	strb	r3, [r7, #31]
 80067cc:	e09d      	b.n	800690a <UART_SetConfig+0x346>
 80067ce:	2304      	movs	r3, #4
 80067d0:	77fb      	strb	r3, [r7, #31]
 80067d2:	e09a      	b.n	800690a <UART_SetConfig+0x346>
 80067d4:	2308      	movs	r3, #8
 80067d6:	77fb      	strb	r3, [r7, #31]
 80067d8:	e097      	b.n	800690a <UART_SetConfig+0x346>
 80067da:	2310      	movs	r3, #16
 80067dc:	77fb      	strb	r3, [r7, #31]
 80067de:	e094      	b.n	800690a <UART_SetConfig+0x346>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a30      	ldr	r2, [pc, #192]	; (80068a8 <UART_SetConfig+0x2e4>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d125      	bne.n	8006836 <UART_SetConfig+0x272>
 80067ea:	4b2a      	ldr	r3, [pc, #168]	; (8006894 <UART_SetConfig+0x2d0>)
 80067ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80067f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067f8:	d017      	beq.n	800682a <UART_SetConfig+0x266>
 80067fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067fe:	d817      	bhi.n	8006830 <UART_SetConfig+0x26c>
 8006800:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006804:	d00b      	beq.n	800681e <UART_SetConfig+0x25a>
 8006806:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800680a:	d811      	bhi.n	8006830 <UART_SetConfig+0x26c>
 800680c:	2b00      	cmp	r3, #0
 800680e:	d003      	beq.n	8006818 <UART_SetConfig+0x254>
 8006810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006814:	d006      	beq.n	8006824 <UART_SetConfig+0x260>
 8006816:	e00b      	b.n	8006830 <UART_SetConfig+0x26c>
 8006818:	2301      	movs	r3, #1
 800681a:	77fb      	strb	r3, [r7, #31]
 800681c:	e075      	b.n	800690a <UART_SetConfig+0x346>
 800681e:	2302      	movs	r3, #2
 8006820:	77fb      	strb	r3, [r7, #31]
 8006822:	e072      	b.n	800690a <UART_SetConfig+0x346>
 8006824:	2304      	movs	r3, #4
 8006826:	77fb      	strb	r3, [r7, #31]
 8006828:	e06f      	b.n	800690a <UART_SetConfig+0x346>
 800682a:	2308      	movs	r3, #8
 800682c:	77fb      	strb	r3, [r7, #31]
 800682e:	e06c      	b.n	800690a <UART_SetConfig+0x346>
 8006830:	2310      	movs	r3, #16
 8006832:	77fb      	strb	r3, [r7, #31]
 8006834:	e069      	b.n	800690a <UART_SetConfig+0x346>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a1c      	ldr	r2, [pc, #112]	; (80068ac <UART_SetConfig+0x2e8>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d137      	bne.n	80068b0 <UART_SetConfig+0x2ec>
 8006840:	4b14      	ldr	r3, [pc, #80]	; (8006894 <UART_SetConfig+0x2d0>)
 8006842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006846:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800684a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800684e:	d017      	beq.n	8006880 <UART_SetConfig+0x2bc>
 8006850:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006854:	d817      	bhi.n	8006886 <UART_SetConfig+0x2c2>
 8006856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800685a:	d00b      	beq.n	8006874 <UART_SetConfig+0x2b0>
 800685c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006860:	d811      	bhi.n	8006886 <UART_SetConfig+0x2c2>
 8006862:	2b00      	cmp	r3, #0
 8006864:	d003      	beq.n	800686e <UART_SetConfig+0x2aa>
 8006866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800686a:	d006      	beq.n	800687a <UART_SetConfig+0x2b6>
 800686c:	e00b      	b.n	8006886 <UART_SetConfig+0x2c2>
 800686e:	2300      	movs	r3, #0
 8006870:	77fb      	strb	r3, [r7, #31]
 8006872:	e04a      	b.n	800690a <UART_SetConfig+0x346>
 8006874:	2302      	movs	r3, #2
 8006876:	77fb      	strb	r3, [r7, #31]
 8006878:	e047      	b.n	800690a <UART_SetConfig+0x346>
 800687a:	2304      	movs	r3, #4
 800687c:	77fb      	strb	r3, [r7, #31]
 800687e:	e044      	b.n	800690a <UART_SetConfig+0x346>
 8006880:	2308      	movs	r3, #8
 8006882:	77fb      	strb	r3, [r7, #31]
 8006884:	e041      	b.n	800690a <UART_SetConfig+0x346>
 8006886:	2310      	movs	r3, #16
 8006888:	77fb      	strb	r3, [r7, #31]
 800688a:	e03e      	b.n	800690a <UART_SetConfig+0x346>
 800688c:	efff69f3 	.word	0xefff69f3
 8006890:	40011000 	.word	0x40011000
 8006894:	40023800 	.word	0x40023800
 8006898:	40004400 	.word	0x40004400
 800689c:	40004800 	.word	0x40004800
 80068a0:	40004c00 	.word	0x40004c00
 80068a4:	40005000 	.word	0x40005000
 80068a8:	40011400 	.word	0x40011400
 80068ac:	40007800 	.word	0x40007800
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a71      	ldr	r2, [pc, #452]	; (8006a7c <UART_SetConfig+0x4b8>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d125      	bne.n	8006906 <UART_SetConfig+0x342>
 80068ba:	4b71      	ldr	r3, [pc, #452]	; (8006a80 <UART_SetConfig+0x4bc>)
 80068bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80068c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80068c8:	d017      	beq.n	80068fa <UART_SetConfig+0x336>
 80068ca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80068ce:	d817      	bhi.n	8006900 <UART_SetConfig+0x33c>
 80068d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068d4:	d00b      	beq.n	80068ee <UART_SetConfig+0x32a>
 80068d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068da:	d811      	bhi.n	8006900 <UART_SetConfig+0x33c>
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <UART_SetConfig+0x324>
 80068e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068e4:	d006      	beq.n	80068f4 <UART_SetConfig+0x330>
 80068e6:	e00b      	b.n	8006900 <UART_SetConfig+0x33c>
 80068e8:	2300      	movs	r3, #0
 80068ea:	77fb      	strb	r3, [r7, #31]
 80068ec:	e00d      	b.n	800690a <UART_SetConfig+0x346>
 80068ee:	2302      	movs	r3, #2
 80068f0:	77fb      	strb	r3, [r7, #31]
 80068f2:	e00a      	b.n	800690a <UART_SetConfig+0x346>
 80068f4:	2304      	movs	r3, #4
 80068f6:	77fb      	strb	r3, [r7, #31]
 80068f8:	e007      	b.n	800690a <UART_SetConfig+0x346>
 80068fa:	2308      	movs	r3, #8
 80068fc:	77fb      	strb	r3, [r7, #31]
 80068fe:	e004      	b.n	800690a <UART_SetConfig+0x346>
 8006900:	2310      	movs	r3, #16
 8006902:	77fb      	strb	r3, [r7, #31]
 8006904:	e001      	b.n	800690a <UART_SetConfig+0x346>
 8006906:	2310      	movs	r3, #16
 8006908:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006912:	d15a      	bne.n	80069ca <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006914:	7ffb      	ldrb	r3, [r7, #31]
 8006916:	2b08      	cmp	r3, #8
 8006918:	d827      	bhi.n	800696a <UART_SetConfig+0x3a6>
 800691a:	a201      	add	r2, pc, #4	; (adr r2, 8006920 <UART_SetConfig+0x35c>)
 800691c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006920:	08006945 	.word	0x08006945
 8006924:	0800694d 	.word	0x0800694d
 8006928:	08006955 	.word	0x08006955
 800692c:	0800696b 	.word	0x0800696b
 8006930:	0800695b 	.word	0x0800695b
 8006934:	0800696b 	.word	0x0800696b
 8006938:	0800696b 	.word	0x0800696b
 800693c:	0800696b 	.word	0x0800696b
 8006940:	08006963 	.word	0x08006963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006944:	f7fe fdfa 	bl	800553c <HAL_RCC_GetPCLK1Freq>
 8006948:	61b8      	str	r0, [r7, #24]
        break;
 800694a:	e013      	b.n	8006974 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800694c:	f7fe fe0a 	bl	8005564 <HAL_RCC_GetPCLK2Freq>
 8006950:	61b8      	str	r0, [r7, #24]
        break;
 8006952:	e00f      	b.n	8006974 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006954:	4b4b      	ldr	r3, [pc, #300]	; (8006a84 <UART_SetConfig+0x4c0>)
 8006956:	61bb      	str	r3, [r7, #24]
        break;
 8006958:	e00c      	b.n	8006974 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800695a:	f7fe fd01 	bl	8005360 <HAL_RCC_GetSysClockFreq>
 800695e:	61b8      	str	r0, [r7, #24]
        break;
 8006960:	e008      	b.n	8006974 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006966:	61bb      	str	r3, [r7, #24]
        break;
 8006968:	e004      	b.n	8006974 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800696a:	2300      	movs	r3, #0
 800696c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	77bb      	strb	r3, [r7, #30]
        break;
 8006972:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d074      	beq.n	8006a64 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	005a      	lsls	r2, r3, #1
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	085b      	lsrs	r3, r3, #1
 8006984:	441a      	add	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	fbb2 f3f3 	udiv	r3, r2, r3
 800698e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	2b0f      	cmp	r3, #15
 8006994:	d916      	bls.n	80069c4 <UART_SetConfig+0x400>
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800699c:	d212      	bcs.n	80069c4 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	f023 030f 	bic.w	r3, r3, #15
 80069a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	085b      	lsrs	r3, r3, #1
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	f003 0307 	and.w	r3, r3, #7
 80069b2:	b29a      	uxth	r2, r3
 80069b4:	89fb      	ldrh	r3, [r7, #14]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	89fa      	ldrh	r2, [r7, #14]
 80069c0:	60da      	str	r2, [r3, #12]
 80069c2:	e04f      	b.n	8006a64 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	77bb      	strb	r3, [r7, #30]
 80069c8:	e04c      	b.n	8006a64 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069ca:	7ffb      	ldrb	r3, [r7, #31]
 80069cc:	2b08      	cmp	r3, #8
 80069ce:	d828      	bhi.n	8006a22 <UART_SetConfig+0x45e>
 80069d0:	a201      	add	r2, pc, #4	; (adr r2, 80069d8 <UART_SetConfig+0x414>)
 80069d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d6:	bf00      	nop
 80069d8:	080069fd 	.word	0x080069fd
 80069dc:	08006a05 	.word	0x08006a05
 80069e0:	08006a0d 	.word	0x08006a0d
 80069e4:	08006a23 	.word	0x08006a23
 80069e8:	08006a13 	.word	0x08006a13
 80069ec:	08006a23 	.word	0x08006a23
 80069f0:	08006a23 	.word	0x08006a23
 80069f4:	08006a23 	.word	0x08006a23
 80069f8:	08006a1b 	.word	0x08006a1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069fc:	f7fe fd9e 	bl	800553c <HAL_RCC_GetPCLK1Freq>
 8006a00:	61b8      	str	r0, [r7, #24]
        break;
 8006a02:	e013      	b.n	8006a2c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a04:	f7fe fdae 	bl	8005564 <HAL_RCC_GetPCLK2Freq>
 8006a08:	61b8      	str	r0, [r7, #24]
        break;
 8006a0a:	e00f      	b.n	8006a2c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a0c:	4b1d      	ldr	r3, [pc, #116]	; (8006a84 <UART_SetConfig+0x4c0>)
 8006a0e:	61bb      	str	r3, [r7, #24]
        break;
 8006a10:	e00c      	b.n	8006a2c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a12:	f7fe fca5 	bl	8005360 <HAL_RCC_GetSysClockFreq>
 8006a16:	61b8      	str	r0, [r7, #24]
        break;
 8006a18:	e008      	b.n	8006a2c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a1e:	61bb      	str	r3, [r7, #24]
        break;
 8006a20:	e004      	b.n	8006a2c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006a22:	2300      	movs	r3, #0
 8006a24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	77bb      	strb	r3, [r7, #30]
        break;
 8006a2a:	bf00      	nop
    }

    if (pclk != 0U)
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d018      	beq.n	8006a64 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	085a      	lsrs	r2, r3, #1
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	441a      	add	r2, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	2b0f      	cmp	r3, #15
 8006a4a:	d909      	bls.n	8006a60 <UART_SetConfig+0x49c>
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a52:	d205      	bcs.n	8006a60 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	60da      	str	r2, [r3, #12]
 8006a5e:	e001      	b.n	8006a64 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006a70:	7fbb      	ldrb	r3, [r7, #30]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3720      	adds	r7, #32
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	40007c00 	.word	0x40007c00
 8006a80:	40023800 	.word	0x40023800
 8006a84:	00f42400 	.word	0x00f42400

08006a88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b083      	sub	sp, #12
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00a      	beq.n	8006ab2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab6:	f003 0302 	and.w	r3, r3, #2
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00a      	beq.n	8006ad4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad8:	f003 0304 	and.w	r3, r3, #4
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00a      	beq.n	8006af6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afa:	f003 0308 	and.w	r3, r3, #8
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00a      	beq.n	8006b18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	430a      	orrs	r2, r1
 8006b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1c:	f003 0310 	and.w	r3, r3, #16
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00a      	beq.n	8006b3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	430a      	orrs	r2, r1
 8006b38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3e:	f003 0320 	and.w	r3, r3, #32
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00a      	beq.n	8006b5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	430a      	orrs	r2, r1
 8006b5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d01a      	beq.n	8006b9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b86:	d10a      	bne.n	8006b9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00a      	beq.n	8006bc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	605a      	str	r2, [r3, #4]
  }
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af02      	add	r7, sp, #8
 8006bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006bdc:	f7fc fa22 	bl	8003024 <HAL_GetTick>
 8006be0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0308 	and.w	r3, r3, #8
 8006bec:	2b08      	cmp	r3, #8
 8006bee:	d10e      	bne.n	8006c0e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f82d 	bl	8006c5e <UART_WaitOnFlagUntilTimeout>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d001      	beq.n	8006c0e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e023      	b.n	8006c56 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0304 	and.w	r3, r3, #4
 8006c18:	2b04      	cmp	r3, #4
 8006c1a:	d10e      	bne.n	8006c3a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c20:	9300      	str	r3, [sp, #0]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f817 	bl	8006c5e <UART_WaitOnFlagUntilTimeout>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d001      	beq.n	8006c3a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e00d      	b.n	8006c56 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2220      	movs	r2, #32
 8006c3e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2220      	movs	r2, #32
 8006c44:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b09c      	sub	sp, #112	; 0x70
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	60f8      	str	r0, [r7, #12]
 8006c66:	60b9      	str	r1, [r7, #8]
 8006c68:	603b      	str	r3, [r7, #0]
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c6e:	e0a5      	b.n	8006dbc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c76:	f000 80a1 	beq.w	8006dbc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c7a:	f7fc f9d3 	bl	8003024 <HAL_GetTick>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d302      	bcc.n	8006c90 <UART_WaitOnFlagUntilTimeout+0x32>
 8006c8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d13e      	bne.n	8006d0e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c98:	e853 3f00 	ldrex	r3, [r3]
 8006c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ca0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ca4:	667b      	str	r3, [r7, #100]	; 0x64
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	461a      	mov	r2, r3
 8006cac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cb0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006cb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006cb6:	e841 2300 	strex	r3, r2, [r1]
 8006cba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1e6      	bne.n	8006c90 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	3308      	adds	r3, #8
 8006cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ccc:	e853 3f00 	ldrex	r3, [r3]
 8006cd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd4:	f023 0301 	bic.w	r3, r3, #1
 8006cd8:	663b      	str	r3, [r7, #96]	; 0x60
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	3308      	adds	r3, #8
 8006ce0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ce2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006ce4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ce8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cea:	e841 2300 	strex	r3, r2, [r1]
 8006cee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1e5      	bne.n	8006cc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2220      	movs	r2, #32
 8006cfa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	e067      	b.n	8006dde <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d04f      	beq.n	8006dbc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	69db      	ldr	r3, [r3, #28]
 8006d22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d2a:	d147      	bne.n	8006dbc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d34:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3e:	e853 3f00 	ldrex	r3, [r3]
 8006d42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	461a      	mov	r2, r3
 8006d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d54:	637b      	str	r3, [r7, #52]	; 0x34
 8006d56:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d5c:	e841 2300 	strex	r3, r2, [r1]
 8006d60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1e6      	bne.n	8006d36 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	3308      	adds	r3, #8
 8006d6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	e853 3f00 	ldrex	r3, [r3]
 8006d76:	613b      	str	r3, [r7, #16]
   return(result);
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	f023 0301 	bic.w	r3, r3, #1
 8006d7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	3308      	adds	r3, #8
 8006d86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d88:	623a      	str	r2, [r7, #32]
 8006d8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8c:	69f9      	ldr	r1, [r7, #28]
 8006d8e:	6a3a      	ldr	r2, [r7, #32]
 8006d90:	e841 2300 	strex	r3, r2, [r1]
 8006d94:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1e5      	bne.n	8006d68 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2220      	movs	r2, #32
 8006da6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2220      	movs	r2, #32
 8006dac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e010      	b.n	8006dde <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	69da      	ldr	r2, [r3, #28]
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	4013      	ands	r3, r2
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	bf0c      	ite	eq
 8006dcc:	2301      	moveq	r3, #1
 8006dce:	2300      	movne	r3, #0
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	79fb      	ldrb	r3, [r7, #7]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	f43f af4a 	beq.w	8006c70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3770      	adds	r7, #112	; 0x70
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd80      	pop	{r7, pc}
	...

08006de8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006de8:	b084      	sub	sp, #16
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b084      	sub	sp, #16
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
 8006df2:	f107 001c 	add.w	r0, r7, #28
 8006df6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d120      	bne.n	8006e42 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	68da      	ldr	r2, [r3, #12]
 8006e10:	4b20      	ldr	r3, [pc, #128]	; (8006e94 <USB_CoreInit+0xac>)
 8006e12:	4013      	ands	r3, r2
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d105      	bne.n	8006e36 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	68db      	ldr	r3, [r3, #12]
 8006e2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fa92 	bl	8007360 <USB_CoreReset>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	73fb      	strb	r3, [r7, #15]
 8006e40:	e010      	b.n	8006e64 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 fa86 	bl	8007360 <USB_CoreReset>
 8006e54:	4603      	mov	r3, r0
 8006e56:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d10b      	bne.n	8006e82 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f043 0206 	orr.w	r2, r3, #6
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	f043 0220 	orr.w	r2, r3, #32
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e8e:	b004      	add	sp, #16
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	ffbdffbf 	.word	0xffbdffbf

08006e98 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f023 0201 	bic.w	r2, r3, #1
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	370c      	adds	r7, #12
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b084      	sub	sp, #16
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ed6:	78fb      	ldrb	r3, [r7, #3]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d115      	bne.n	8006f08 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ee8:	2001      	movs	r0, #1
 8006eea:	f7fc f8a7 	bl	800303c <HAL_Delay>
      ms++;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fa25 	bl	8007344 <USB_GetMode>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d01e      	beq.n	8006f3e <USB_SetCurrentMode+0x84>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2b31      	cmp	r3, #49	; 0x31
 8006f04:	d9f0      	bls.n	8006ee8 <USB_SetCurrentMode+0x2e>
 8006f06:	e01a      	b.n	8006f3e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f08:	78fb      	ldrb	r3, [r7, #3]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d115      	bne.n	8006f3a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006f1a:	2001      	movs	r0, #1
 8006f1c:	f7fc f88e 	bl	800303c <HAL_Delay>
      ms++;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	3301      	adds	r3, #1
 8006f24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fa0c 	bl	8007344 <USB_GetMode>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d005      	beq.n	8006f3e <USB_SetCurrentMode+0x84>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2b31      	cmp	r3, #49	; 0x31
 8006f36:	d9f0      	bls.n	8006f1a <USB_SetCurrentMode+0x60>
 8006f38:	e001      	b.n	8006f3e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e005      	b.n	8006f4a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2b32      	cmp	r3, #50	; 0x32
 8006f42:	d101      	bne.n	8006f48 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e000      	b.n	8006f4a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
	...

08006f54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f54:	b084      	sub	sp, #16
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b086      	sub	sp, #24
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	6078      	str	r0, [r7, #4]
 8006f5e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006f62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006f66:	2300      	movs	r3, #0
 8006f68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006f6e:	2300      	movs	r3, #0
 8006f70:	613b      	str	r3, [r7, #16]
 8006f72:	e009      	b.n	8006f88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	3340      	adds	r3, #64	; 0x40
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	2200      	movs	r2, #0
 8006f80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	3301      	adds	r3, #1
 8006f86:	613b      	str	r3, [r7, #16]
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	2b0e      	cmp	r3, #14
 8006f8c:	d9f2      	bls.n	8006f74 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d11c      	bne.n	8006fce <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	68fa      	ldr	r2, [r7, #12]
 8006f9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fa2:	f043 0302 	orr.w	r3, r3, #2
 8006fa6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	601a      	str	r2, [r3, #0]
 8006fcc:	e005      	b.n	8006fda <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fec:	4619      	mov	r1, r3
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	680b      	ldr	r3, [r1, #0]
 8006ff8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d10c      	bne.n	800701a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007002:	2b00      	cmp	r3, #0
 8007004:	d104      	bne.n	8007010 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007006:	2100      	movs	r1, #0
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f961 	bl	80072d0 <USB_SetDevSpeed>
 800700e:	e008      	b.n	8007022 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007010:	2101      	movs	r1, #1
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f95c 	bl	80072d0 <USB_SetDevSpeed>
 8007018:	e003      	b.n	8007022 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800701a:	2103      	movs	r1, #3
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 f957 	bl	80072d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007022:	2110      	movs	r1, #16
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 f8f3 	bl	8007210 <USB_FlushTxFifo>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d001      	beq.n	8007034 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 f91d 	bl	8007274 <USB_FlushRxFifo>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d001      	beq.n	8007044 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704a:	461a      	mov	r2, r3
 800704c:	2300      	movs	r3, #0
 800704e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007056:	461a      	mov	r2, r3
 8007058:	2300      	movs	r3, #0
 800705a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007062:	461a      	mov	r2, r3
 8007064:	2300      	movs	r3, #0
 8007066:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007068:	2300      	movs	r3, #0
 800706a:	613b      	str	r3, [r7, #16]
 800706c:	e043      	b.n	80070f6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	015a      	lsls	r2, r3, #5
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	4413      	add	r3, r2
 8007076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007080:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007084:	d118      	bne.n	80070b8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d10a      	bne.n	80070a2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	015a      	lsls	r2, r3, #5
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	4413      	add	r3, r2
 8007094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007098:	461a      	mov	r2, r3
 800709a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800709e:	6013      	str	r3, [r2, #0]
 80070a0:	e013      	b.n	80070ca <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	015a      	lsls	r2, r3, #5
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	4413      	add	r3, r2
 80070aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ae:	461a      	mov	r2, r3
 80070b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80070b4:	6013      	str	r3, [r2, #0]
 80070b6:	e008      	b.n	80070ca <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c4:	461a      	mov	r2, r3
 80070c6:	2300      	movs	r3, #0
 80070c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	015a      	lsls	r2, r3, #5
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	4413      	add	r3, r2
 80070d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d6:	461a      	mov	r2, r3
 80070d8:	2300      	movs	r3, #0
 80070da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	015a      	lsls	r2, r3, #5
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	4413      	add	r3, r2
 80070e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e8:	461a      	mov	r2, r3
 80070ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	3301      	adds	r3, #1
 80070f4:	613b      	str	r3, [r7, #16]
 80070f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d3b7      	bcc.n	800706e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070fe:	2300      	movs	r3, #0
 8007100:	613b      	str	r3, [r7, #16]
 8007102:	e043      	b.n	800718c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	015a      	lsls	r2, r3, #5
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	4413      	add	r3, r2
 800710c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800711a:	d118      	bne.n	800714e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10a      	bne.n	8007138 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	015a      	lsls	r2, r3, #5
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	4413      	add	r3, r2
 800712a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800712e:	461a      	mov	r2, r3
 8007130:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007134:	6013      	str	r3, [r2, #0]
 8007136:	e013      	b.n	8007160 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	015a      	lsls	r2, r3, #5
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4413      	add	r3, r2
 8007140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007144:	461a      	mov	r2, r3
 8007146:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800714a:	6013      	str	r3, [r2, #0]
 800714c:	e008      	b.n	8007160 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	015a      	lsls	r2, r3, #5
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	4413      	add	r3, r2
 8007156:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800715a:	461a      	mov	r2, r3
 800715c:	2300      	movs	r3, #0
 800715e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	015a      	lsls	r2, r3, #5
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	4413      	add	r3, r2
 8007168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800716c:	461a      	mov	r2, r3
 800716e:	2300      	movs	r3, #0
 8007170:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	4413      	add	r3, r2
 800717a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800717e:	461a      	mov	r2, r3
 8007180:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007184:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	3301      	adds	r3, #1
 800718a:	613b      	str	r3, [r7, #16]
 800718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	429a      	cmp	r2, r3
 8007192:	d3b7      	bcc.n	8007104 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80071b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80071b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d105      	bne.n	80071c8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	f043 0210 	orr.w	r2, r3, #16
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	699a      	ldr	r2, [r3, #24]
 80071cc:	4b0e      	ldr	r3, [pc, #56]	; (8007208 <USB_DevInit+0x2b4>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80071d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d005      	beq.n	80071e6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	699b      	ldr	r3, [r3, #24]
 80071de:	f043 0208 	orr.w	r2, r3, #8
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80071e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d105      	bne.n	80071f8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	699a      	ldr	r2, [r3, #24]
 80071f0:	4b06      	ldr	r3, [pc, #24]	; (800720c <USB_DevInit+0x2b8>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80071f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3718      	adds	r7, #24
 80071fe:	46bd      	mov	sp, r7
 8007200:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007204:	b004      	add	sp, #16
 8007206:	4770      	bx	lr
 8007208:	803c3800 	.word	0x803c3800
 800720c:	40000004 	.word	0x40000004

08007210 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800721a:	2300      	movs	r3, #0
 800721c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	3301      	adds	r3, #1
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	4a12      	ldr	r2, [pc, #72]	; (8007270 <USB_FlushTxFifo+0x60>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d901      	bls.n	800722e <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e01a      	b.n	8007264 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	2b00      	cmp	r3, #0
 8007234:	daf3      	bge.n	800721e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007236:	2300      	movs	r3, #0
 8007238:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	019b      	lsls	r3, r3, #6
 800723e:	f043 0220 	orr.w	r2, r3, #32
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	3301      	adds	r3, #1
 800724a:	60fb      	str	r3, [r7, #12]
 800724c:	4a08      	ldr	r2, [pc, #32]	; (8007270 <USB_FlushTxFifo+0x60>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d901      	bls.n	8007256 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	e006      	b.n	8007264 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	f003 0320 	and.w	r3, r3, #32
 800725e:	2b20      	cmp	r3, #32
 8007260:	d0f1      	beq.n	8007246 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr
 8007270:	00030d40 	.word	0x00030d40

08007274 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800727c:	2300      	movs	r3, #0
 800727e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	3301      	adds	r3, #1
 8007284:	60fb      	str	r3, [r7, #12]
 8007286:	4a11      	ldr	r2, [pc, #68]	; (80072cc <USB_FlushRxFifo+0x58>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d901      	bls.n	8007290 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e017      	b.n	80072c0 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	2b00      	cmp	r3, #0
 8007296:	daf3      	bge.n	8007280 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007298:	2300      	movs	r3, #0
 800729a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2210      	movs	r2, #16
 80072a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	3301      	adds	r3, #1
 80072a6:	60fb      	str	r3, [r7, #12]
 80072a8:	4a08      	ldr	r2, [pc, #32]	; (80072cc <USB_FlushRxFifo+0x58>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d901      	bls.n	80072b2 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e006      	b.n	80072c0 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	f003 0310 	and.w	r3, r3, #16
 80072ba:	2b10      	cmp	r3, #16
 80072bc:	d0f1      	beq.n	80072a2 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3714      	adds	r7, #20
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	00030d40 	.word	0x00030d40

080072d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	460b      	mov	r3, r1
 80072da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	78fb      	ldrb	r3, [r7, #3]
 80072ea:	68f9      	ldr	r1, [r7, #12]
 80072ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072f0:	4313      	orrs	r3, r2
 80072f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3714      	adds	r7, #20
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007302:	b480      	push	{r7}
 8007304:	b085      	sub	sp, #20
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800731c:	f023 0303 	bic.w	r3, r3, #3
 8007320:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007330:	f043 0302 	orr.w	r3, r3, #2
 8007334:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	695b      	ldr	r3, [r3, #20]
 8007350:	f003 0301 	and.w	r3, r3, #1
}
 8007354:	4618      	mov	r0, r3
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007368:	2300      	movs	r3, #0
 800736a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	3301      	adds	r3, #1
 8007370:	60fb      	str	r3, [r7, #12]
 8007372:	4a13      	ldr	r2, [pc, #76]	; (80073c0 <USB_CoreReset+0x60>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d901      	bls.n	800737c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007378:	2303      	movs	r3, #3
 800737a:	e01a      	b.n	80073b2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	2b00      	cmp	r3, #0
 8007382:	daf3      	bge.n	800736c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007384:	2300      	movs	r3, #0
 8007386:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	f043 0201 	orr.w	r2, r3, #1
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	3301      	adds	r3, #1
 8007398:	60fb      	str	r3, [r7, #12]
 800739a:	4a09      	ldr	r2, [pc, #36]	; (80073c0 <USB_CoreReset+0x60>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d901      	bls.n	80073a4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e006      	b.n	80073b2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	691b      	ldr	r3, [r3, #16]
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d0f1      	beq.n	8007394 <USB_CoreReset+0x34>

  return HAL_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3714      	adds	r7, #20
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	00030d40 	.word	0x00030d40

080073c4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80073c4:	b5b0      	push	{r4, r5, r7, lr}
 80073c6:	b08e      	sub	sp, #56	; 0x38
 80073c8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80073ca:	4ba0      	ldr	r3, [pc, #640]	; (800764c <MX_LWIP_Init+0x288>)
 80073cc:	22c0      	movs	r2, #192	; 0xc0
 80073ce:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80073d0:	4b9e      	ldr	r3, [pc, #632]	; (800764c <MX_LWIP_Init+0x288>)
 80073d2:	22a8      	movs	r2, #168	; 0xa8
 80073d4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 18;
 80073d6:	4b9d      	ldr	r3, [pc, #628]	; (800764c <MX_LWIP_Init+0x288>)
 80073d8:	2212      	movs	r2, #18
 80073da:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 31;
 80073dc:	4b9b      	ldr	r3, [pc, #620]	; (800764c <MX_LWIP_Init+0x288>)
 80073de:	221f      	movs	r2, #31
 80073e0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80073e2:	4b9b      	ldr	r3, [pc, #620]	; (8007650 <MX_LWIP_Init+0x28c>)
 80073e4:	22ff      	movs	r2, #255	; 0xff
 80073e6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80073e8:	4b99      	ldr	r3, [pc, #612]	; (8007650 <MX_LWIP_Init+0x28c>)
 80073ea:	22ff      	movs	r2, #255	; 0xff
 80073ec:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80073ee:	4b98      	ldr	r3, [pc, #608]	; (8007650 <MX_LWIP_Init+0x28c>)
 80073f0:	22ff      	movs	r2, #255	; 0xff
 80073f2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80073f4:	4b96      	ldr	r3, [pc, #600]	; (8007650 <MX_LWIP_Init+0x28c>)
 80073f6:	2200      	movs	r2, #0
 80073f8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80073fa:	4b96      	ldr	r3, [pc, #600]	; (8007654 <MX_LWIP_Init+0x290>)
 80073fc:	22c0      	movs	r2, #192	; 0xc0
 80073fe:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8007400:	4b94      	ldr	r3, [pc, #592]	; (8007654 <MX_LWIP_Init+0x290>)
 8007402:	22a8      	movs	r2, #168	; 0xa8
 8007404:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 18;
 8007406:	4b93      	ldr	r3, [pc, #588]	; (8007654 <MX_LWIP_Init+0x290>)
 8007408:	2212      	movs	r2, #18
 800740a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800740c:	4b91      	ldr	r3, [pc, #580]	; (8007654 <MX_LWIP_Init+0x290>)
 800740e:	2201      	movs	r2, #1
 8007410:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8007412:	2100      	movs	r1, #0
 8007414:	2000      	movs	r0, #0
 8007416:	f003 fe39 	bl	800b08c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800741a:	4b8c      	ldr	r3, [pc, #560]	; (800764c <MX_LWIP_Init+0x288>)
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	061a      	lsls	r2, r3, #24
 8007420:	4b8a      	ldr	r3, [pc, #552]	; (800764c <MX_LWIP_Init+0x288>)
 8007422:	785b      	ldrb	r3, [r3, #1]
 8007424:	041b      	lsls	r3, r3, #16
 8007426:	431a      	orrs	r2, r3
 8007428:	4b88      	ldr	r3, [pc, #544]	; (800764c <MX_LWIP_Init+0x288>)
 800742a:	789b      	ldrb	r3, [r3, #2]
 800742c:	021b      	lsls	r3, r3, #8
 800742e:	4313      	orrs	r3, r2
 8007430:	4a86      	ldr	r2, [pc, #536]	; (800764c <MX_LWIP_Init+0x288>)
 8007432:	78d2      	ldrb	r2, [r2, #3]
 8007434:	4313      	orrs	r3, r2
 8007436:	061a      	lsls	r2, r3, #24
 8007438:	4b84      	ldr	r3, [pc, #528]	; (800764c <MX_LWIP_Init+0x288>)
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	0619      	lsls	r1, r3, #24
 800743e:	4b83      	ldr	r3, [pc, #524]	; (800764c <MX_LWIP_Init+0x288>)
 8007440:	785b      	ldrb	r3, [r3, #1]
 8007442:	041b      	lsls	r3, r3, #16
 8007444:	4319      	orrs	r1, r3
 8007446:	4b81      	ldr	r3, [pc, #516]	; (800764c <MX_LWIP_Init+0x288>)
 8007448:	789b      	ldrb	r3, [r3, #2]
 800744a:	021b      	lsls	r3, r3, #8
 800744c:	430b      	orrs	r3, r1
 800744e:	497f      	ldr	r1, [pc, #508]	; (800764c <MX_LWIP_Init+0x288>)
 8007450:	78c9      	ldrb	r1, [r1, #3]
 8007452:	430b      	orrs	r3, r1
 8007454:	021b      	lsls	r3, r3, #8
 8007456:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800745a:	431a      	orrs	r2, r3
 800745c:	4b7b      	ldr	r3, [pc, #492]	; (800764c <MX_LWIP_Init+0x288>)
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	0619      	lsls	r1, r3, #24
 8007462:	4b7a      	ldr	r3, [pc, #488]	; (800764c <MX_LWIP_Init+0x288>)
 8007464:	785b      	ldrb	r3, [r3, #1]
 8007466:	041b      	lsls	r3, r3, #16
 8007468:	4319      	orrs	r1, r3
 800746a:	4b78      	ldr	r3, [pc, #480]	; (800764c <MX_LWIP_Init+0x288>)
 800746c:	789b      	ldrb	r3, [r3, #2]
 800746e:	021b      	lsls	r3, r3, #8
 8007470:	430b      	orrs	r3, r1
 8007472:	4976      	ldr	r1, [pc, #472]	; (800764c <MX_LWIP_Init+0x288>)
 8007474:	78c9      	ldrb	r1, [r1, #3]
 8007476:	430b      	orrs	r3, r1
 8007478:	0a1b      	lsrs	r3, r3, #8
 800747a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800747e:	431a      	orrs	r2, r3
 8007480:	4b72      	ldr	r3, [pc, #456]	; (800764c <MX_LWIP_Init+0x288>)
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	0619      	lsls	r1, r3, #24
 8007486:	4b71      	ldr	r3, [pc, #452]	; (800764c <MX_LWIP_Init+0x288>)
 8007488:	785b      	ldrb	r3, [r3, #1]
 800748a:	041b      	lsls	r3, r3, #16
 800748c:	4319      	orrs	r1, r3
 800748e:	4b6f      	ldr	r3, [pc, #444]	; (800764c <MX_LWIP_Init+0x288>)
 8007490:	789b      	ldrb	r3, [r3, #2]
 8007492:	021b      	lsls	r3, r3, #8
 8007494:	430b      	orrs	r3, r1
 8007496:	496d      	ldr	r1, [pc, #436]	; (800764c <MX_LWIP_Init+0x288>)
 8007498:	78c9      	ldrb	r1, [r1, #3]
 800749a:	430b      	orrs	r3, r1
 800749c:	0e1b      	lsrs	r3, r3, #24
 800749e:	4313      	orrs	r3, r2
 80074a0:	4a6d      	ldr	r2, [pc, #436]	; (8007658 <MX_LWIP_Init+0x294>)
 80074a2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80074a4:	4b6a      	ldr	r3, [pc, #424]	; (8007650 <MX_LWIP_Init+0x28c>)
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	061a      	lsls	r2, r3, #24
 80074aa:	4b69      	ldr	r3, [pc, #420]	; (8007650 <MX_LWIP_Init+0x28c>)
 80074ac:	785b      	ldrb	r3, [r3, #1]
 80074ae:	041b      	lsls	r3, r3, #16
 80074b0:	431a      	orrs	r2, r3
 80074b2:	4b67      	ldr	r3, [pc, #412]	; (8007650 <MX_LWIP_Init+0x28c>)
 80074b4:	789b      	ldrb	r3, [r3, #2]
 80074b6:	021b      	lsls	r3, r3, #8
 80074b8:	4313      	orrs	r3, r2
 80074ba:	4a65      	ldr	r2, [pc, #404]	; (8007650 <MX_LWIP_Init+0x28c>)
 80074bc:	78d2      	ldrb	r2, [r2, #3]
 80074be:	4313      	orrs	r3, r2
 80074c0:	061a      	lsls	r2, r3, #24
 80074c2:	4b63      	ldr	r3, [pc, #396]	; (8007650 <MX_LWIP_Init+0x28c>)
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	0619      	lsls	r1, r3, #24
 80074c8:	4b61      	ldr	r3, [pc, #388]	; (8007650 <MX_LWIP_Init+0x28c>)
 80074ca:	785b      	ldrb	r3, [r3, #1]
 80074cc:	041b      	lsls	r3, r3, #16
 80074ce:	4319      	orrs	r1, r3
 80074d0:	4b5f      	ldr	r3, [pc, #380]	; (8007650 <MX_LWIP_Init+0x28c>)
 80074d2:	789b      	ldrb	r3, [r3, #2]
 80074d4:	021b      	lsls	r3, r3, #8
 80074d6:	430b      	orrs	r3, r1
 80074d8:	495d      	ldr	r1, [pc, #372]	; (8007650 <MX_LWIP_Init+0x28c>)
 80074da:	78c9      	ldrb	r1, [r1, #3]
 80074dc:	430b      	orrs	r3, r1
 80074de:	021b      	lsls	r3, r3, #8
 80074e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80074e4:	431a      	orrs	r2, r3
 80074e6:	4b5a      	ldr	r3, [pc, #360]	; (8007650 <MX_LWIP_Init+0x28c>)
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	0619      	lsls	r1, r3, #24
 80074ec:	4b58      	ldr	r3, [pc, #352]	; (8007650 <MX_LWIP_Init+0x28c>)
 80074ee:	785b      	ldrb	r3, [r3, #1]
 80074f0:	041b      	lsls	r3, r3, #16
 80074f2:	4319      	orrs	r1, r3
 80074f4:	4b56      	ldr	r3, [pc, #344]	; (8007650 <MX_LWIP_Init+0x28c>)
 80074f6:	789b      	ldrb	r3, [r3, #2]
 80074f8:	021b      	lsls	r3, r3, #8
 80074fa:	430b      	orrs	r3, r1
 80074fc:	4954      	ldr	r1, [pc, #336]	; (8007650 <MX_LWIP_Init+0x28c>)
 80074fe:	78c9      	ldrb	r1, [r1, #3]
 8007500:	430b      	orrs	r3, r1
 8007502:	0a1b      	lsrs	r3, r3, #8
 8007504:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007508:	431a      	orrs	r2, r3
 800750a:	4b51      	ldr	r3, [pc, #324]	; (8007650 <MX_LWIP_Init+0x28c>)
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	0619      	lsls	r1, r3, #24
 8007510:	4b4f      	ldr	r3, [pc, #316]	; (8007650 <MX_LWIP_Init+0x28c>)
 8007512:	785b      	ldrb	r3, [r3, #1]
 8007514:	041b      	lsls	r3, r3, #16
 8007516:	4319      	orrs	r1, r3
 8007518:	4b4d      	ldr	r3, [pc, #308]	; (8007650 <MX_LWIP_Init+0x28c>)
 800751a:	789b      	ldrb	r3, [r3, #2]
 800751c:	021b      	lsls	r3, r3, #8
 800751e:	430b      	orrs	r3, r1
 8007520:	494b      	ldr	r1, [pc, #300]	; (8007650 <MX_LWIP_Init+0x28c>)
 8007522:	78c9      	ldrb	r1, [r1, #3]
 8007524:	430b      	orrs	r3, r1
 8007526:	0e1b      	lsrs	r3, r3, #24
 8007528:	4313      	orrs	r3, r2
 800752a:	4a4c      	ldr	r2, [pc, #304]	; (800765c <MX_LWIP_Init+0x298>)
 800752c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800752e:	4b49      	ldr	r3, [pc, #292]	; (8007654 <MX_LWIP_Init+0x290>)
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	061a      	lsls	r2, r3, #24
 8007534:	4b47      	ldr	r3, [pc, #284]	; (8007654 <MX_LWIP_Init+0x290>)
 8007536:	785b      	ldrb	r3, [r3, #1]
 8007538:	041b      	lsls	r3, r3, #16
 800753a:	431a      	orrs	r2, r3
 800753c:	4b45      	ldr	r3, [pc, #276]	; (8007654 <MX_LWIP_Init+0x290>)
 800753e:	789b      	ldrb	r3, [r3, #2]
 8007540:	021b      	lsls	r3, r3, #8
 8007542:	4313      	orrs	r3, r2
 8007544:	4a43      	ldr	r2, [pc, #268]	; (8007654 <MX_LWIP_Init+0x290>)
 8007546:	78d2      	ldrb	r2, [r2, #3]
 8007548:	4313      	orrs	r3, r2
 800754a:	061a      	lsls	r2, r3, #24
 800754c:	4b41      	ldr	r3, [pc, #260]	; (8007654 <MX_LWIP_Init+0x290>)
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	0619      	lsls	r1, r3, #24
 8007552:	4b40      	ldr	r3, [pc, #256]	; (8007654 <MX_LWIP_Init+0x290>)
 8007554:	785b      	ldrb	r3, [r3, #1]
 8007556:	041b      	lsls	r3, r3, #16
 8007558:	4319      	orrs	r1, r3
 800755a:	4b3e      	ldr	r3, [pc, #248]	; (8007654 <MX_LWIP_Init+0x290>)
 800755c:	789b      	ldrb	r3, [r3, #2]
 800755e:	021b      	lsls	r3, r3, #8
 8007560:	430b      	orrs	r3, r1
 8007562:	493c      	ldr	r1, [pc, #240]	; (8007654 <MX_LWIP_Init+0x290>)
 8007564:	78c9      	ldrb	r1, [r1, #3]
 8007566:	430b      	orrs	r3, r1
 8007568:	021b      	lsls	r3, r3, #8
 800756a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800756e:	431a      	orrs	r2, r3
 8007570:	4b38      	ldr	r3, [pc, #224]	; (8007654 <MX_LWIP_Init+0x290>)
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	0619      	lsls	r1, r3, #24
 8007576:	4b37      	ldr	r3, [pc, #220]	; (8007654 <MX_LWIP_Init+0x290>)
 8007578:	785b      	ldrb	r3, [r3, #1]
 800757a:	041b      	lsls	r3, r3, #16
 800757c:	4319      	orrs	r1, r3
 800757e:	4b35      	ldr	r3, [pc, #212]	; (8007654 <MX_LWIP_Init+0x290>)
 8007580:	789b      	ldrb	r3, [r3, #2]
 8007582:	021b      	lsls	r3, r3, #8
 8007584:	430b      	orrs	r3, r1
 8007586:	4933      	ldr	r1, [pc, #204]	; (8007654 <MX_LWIP_Init+0x290>)
 8007588:	78c9      	ldrb	r1, [r1, #3]
 800758a:	430b      	orrs	r3, r1
 800758c:	0a1b      	lsrs	r3, r3, #8
 800758e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007592:	431a      	orrs	r2, r3
 8007594:	4b2f      	ldr	r3, [pc, #188]	; (8007654 <MX_LWIP_Init+0x290>)
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	0619      	lsls	r1, r3, #24
 800759a:	4b2e      	ldr	r3, [pc, #184]	; (8007654 <MX_LWIP_Init+0x290>)
 800759c:	785b      	ldrb	r3, [r3, #1]
 800759e:	041b      	lsls	r3, r3, #16
 80075a0:	4319      	orrs	r1, r3
 80075a2:	4b2c      	ldr	r3, [pc, #176]	; (8007654 <MX_LWIP_Init+0x290>)
 80075a4:	789b      	ldrb	r3, [r3, #2]
 80075a6:	021b      	lsls	r3, r3, #8
 80075a8:	430b      	orrs	r3, r1
 80075aa:	492a      	ldr	r1, [pc, #168]	; (8007654 <MX_LWIP_Init+0x290>)
 80075ac:	78c9      	ldrb	r1, [r1, #3]
 80075ae:	430b      	orrs	r3, r1
 80075b0:	0e1b      	lsrs	r3, r3, #24
 80075b2:	4313      	orrs	r3, r2
 80075b4:	4a2a      	ldr	r2, [pc, #168]	; (8007660 <MX_LWIP_Init+0x29c>)
 80075b6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80075b8:	4b2a      	ldr	r3, [pc, #168]	; (8007664 <MX_LWIP_Init+0x2a0>)
 80075ba:	9302      	str	r3, [sp, #8]
 80075bc:	4b2a      	ldr	r3, [pc, #168]	; (8007668 <MX_LWIP_Init+0x2a4>)
 80075be:	9301      	str	r3, [sp, #4]
 80075c0:	2300      	movs	r3, #0
 80075c2:	9300      	str	r3, [sp, #0]
 80075c4:	4b26      	ldr	r3, [pc, #152]	; (8007660 <MX_LWIP_Init+0x29c>)
 80075c6:	4a25      	ldr	r2, [pc, #148]	; (800765c <MX_LWIP_Init+0x298>)
 80075c8:	4923      	ldr	r1, [pc, #140]	; (8007658 <MX_LWIP_Init+0x294>)
 80075ca:	4828      	ldr	r0, [pc, #160]	; (800766c <MX_LWIP_Init+0x2a8>)
 80075cc:	f006 fb8a 	bl	800dce4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80075d0:	4826      	ldr	r0, [pc, #152]	; (800766c <MX_LWIP_Init+0x2a8>)
 80075d2:	f006 fd39 	bl	800e048 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80075d6:	4b25      	ldr	r3, [pc, #148]	; (800766c <MX_LWIP_Init+0x2a8>)
 80075d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80075dc:	089b      	lsrs	r3, r3, #2
 80075de:	f003 0301 	and.w	r3, r3, #1
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d003      	beq.n	80075f0 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80075e8:	4820      	ldr	r0, [pc, #128]	; (800766c <MX_LWIP_Init+0x2a8>)
 80075ea:	f006 fd3d 	bl	800e068 <netif_set_up>
 80075ee:	e002      	b.n	80075f6 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80075f0:	481e      	ldr	r0, [pc, #120]	; (800766c <MX_LWIP_Init+0x2a8>)
 80075f2:	f006 fda5 	bl	800e140 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80075f6:	491e      	ldr	r1, [pc, #120]	; (8007670 <MX_LWIP_Init+0x2ac>)
 80075f8:	481c      	ldr	r0, [pc, #112]	; (800766c <MX_LWIP_Init+0x2a8>)
 80075fa:	f006 fe37 	bl	800e26c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 80075fe:	2300      	movs	r3, #0
 8007600:	623b      	str	r3, [r7, #32]
 8007602:	2300      	movs	r3, #0
 8007604:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8007606:	f107 0320 	add.w	r3, r7, #32
 800760a:	2101      	movs	r1, #1
 800760c:	4618      	mov	r0, r3
 800760e:	f000 fd97 	bl	8008140 <osSemaphoreCreate>
 8007612:	4603      	mov	r3, r0
 8007614:	4a17      	ldr	r2, [pc, #92]	; (8007674 <MX_LWIP_Init+0x2b0>)
 8007616:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8007618:	4b17      	ldr	r3, [pc, #92]	; (8007678 <MX_LWIP_Init+0x2b4>)
 800761a:	4a14      	ldr	r2, [pc, #80]	; (800766c <MX_LWIP_Init+0x2a8>)
 800761c:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800761e:	4b15      	ldr	r3, [pc, #84]	; (8007674 <MX_LWIP_Init+0x2b0>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a15      	ldr	r2, [pc, #84]	; (8007678 <MX_LWIP_Init+0x2b4>)
 8007624:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8007626:	4b15      	ldr	r3, [pc, #84]	; (800767c <MX_LWIP_Init+0x2b8>)
 8007628:	1d3c      	adds	r4, r7, #4
 800762a:	461d      	mov	r5, r3
 800762c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800762e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007630:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007634:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8007638:	1d3b      	adds	r3, r7, #4
 800763a:	490f      	ldr	r1, [pc, #60]	; (8007678 <MX_LWIP_Init+0x2b4>)
 800763c:	4618      	mov	r0, r3
 800763e:	f000 fc82 	bl	8007f46 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007642:	bf00      	nop
 8007644:	3728      	adds	r7, #40	; 0x28
 8007646:	46bd      	mov	sp, r7
 8007648:	bdb0      	pop	{r4, r5, r7, pc}
 800764a:	bf00      	nop
 800764c:	2000b1d8 	.word	0x2000b1d8
 8007650:	2000b1d4 	.word	0x2000b1d4
 8007654:	2000b198 	.word	0x2000b198
 8007658:	2000b1d0 	.word	0x2000b1d0
 800765c:	2000b1dc 	.word	0x2000b1dc
 8007660:	2000b1e0 	.word	0x2000b1e0
 8007664:	0800afc9 	.word	0x0800afc9
 8007668:	08007cd5 	.word	0x08007cd5
 800766c:	2000b19c 	.word	0x2000b19c
 8007670:	08007db9 	.word	0x08007db9
 8007674:	2000108c 	.word	0x2000108c
 8007678:	2000b190 	.word	0x2000b190
 800767c:	0801a388 	.word	0x0801a388

08007680 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b08e      	sub	sp, #56	; 0x38
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800768c:	2200      	movs	r2, #0
 800768e:	601a      	str	r2, [r3, #0]
 8007690:	605a      	str	r2, [r3, #4]
 8007692:	609a      	str	r2, [r3, #8]
 8007694:	60da      	str	r2, [r3, #12]
 8007696:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a52      	ldr	r2, [pc, #328]	; (80077e8 <HAL_ETH_MspInit+0x168>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	f040 809e 	bne.w	80077e0 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80076a4:	4b51      	ldr	r3, [pc, #324]	; (80077ec <HAL_ETH_MspInit+0x16c>)
 80076a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a8:	4a50      	ldr	r2, [pc, #320]	; (80077ec <HAL_ETH_MspInit+0x16c>)
 80076aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80076ae:	6313      	str	r3, [r2, #48]	; 0x30
 80076b0:	4b4e      	ldr	r3, [pc, #312]	; (80077ec <HAL_ETH_MspInit+0x16c>)
 80076b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076b8:	623b      	str	r3, [r7, #32]
 80076ba:	6a3b      	ldr	r3, [r7, #32]
 80076bc:	4b4b      	ldr	r3, [pc, #300]	; (80077ec <HAL_ETH_MspInit+0x16c>)
 80076be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c0:	4a4a      	ldr	r2, [pc, #296]	; (80077ec <HAL_ETH_MspInit+0x16c>)
 80076c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80076c6:	6313      	str	r3, [r2, #48]	; 0x30
 80076c8:	4b48      	ldr	r3, [pc, #288]	; (80077ec <HAL_ETH_MspInit+0x16c>)
 80076ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80076d0:	61fb      	str	r3, [r7, #28]
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	4b45      	ldr	r3, [pc, #276]	; (80077ec <HAL_ETH_MspInit+0x16c>)
 80076d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d8:	4a44      	ldr	r2, [pc, #272]	; (80077ec <HAL_ETH_MspInit+0x16c>)
 80076da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80076de:	6313      	str	r3, [r2, #48]	; 0x30
 80076e0:	4b42      	ldr	r3, [pc, #264]	; (80077ec <HAL_ETH_MspInit+0x16c>)
 80076e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076e8:	61bb      	str	r3, [r7, #24]
 80076ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80076ec:	4b3f      	ldr	r3, [pc, #252]	; (80077ec <HAL_ETH_MspInit+0x16c>)
 80076ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f0:	4a3e      	ldr	r2, [pc, #248]	; (80077ec <HAL_ETH_MspInit+0x16c>)
 80076f2:	f043 0304 	orr.w	r3, r3, #4
 80076f6:	6313      	str	r3, [r2, #48]	; 0x30
 80076f8:	4b3c      	ldr	r3, [pc, #240]	; (80077ec <HAL_ETH_MspInit+0x16c>)
 80076fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fc:	f003 0304 	and.w	r3, r3, #4
 8007700:	617b      	str	r3, [r7, #20]
 8007702:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007704:	4b39      	ldr	r3, [pc, #228]	; (80077ec <HAL_ETH_MspInit+0x16c>)
 8007706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007708:	4a38      	ldr	r2, [pc, #224]	; (80077ec <HAL_ETH_MspInit+0x16c>)
 800770a:	f043 0301 	orr.w	r3, r3, #1
 800770e:	6313      	str	r3, [r2, #48]	; 0x30
 8007710:	4b36      	ldr	r3, [pc, #216]	; (80077ec <HAL_ETH_MspInit+0x16c>)
 8007712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007714:	f003 0301 	and.w	r3, r3, #1
 8007718:	613b      	str	r3, [r7, #16]
 800771a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800771c:	4b33      	ldr	r3, [pc, #204]	; (80077ec <HAL_ETH_MspInit+0x16c>)
 800771e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007720:	4a32      	ldr	r2, [pc, #200]	; (80077ec <HAL_ETH_MspInit+0x16c>)
 8007722:	f043 0302 	orr.w	r3, r3, #2
 8007726:	6313      	str	r3, [r2, #48]	; 0x30
 8007728:	4b30      	ldr	r3, [pc, #192]	; (80077ec <HAL_ETH_MspInit+0x16c>)
 800772a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772c:	f003 0302 	and.w	r3, r3, #2
 8007730:	60fb      	str	r3, [r7, #12]
 8007732:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007734:	4b2d      	ldr	r3, [pc, #180]	; (80077ec <HAL_ETH_MspInit+0x16c>)
 8007736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007738:	4a2c      	ldr	r2, [pc, #176]	; (80077ec <HAL_ETH_MspInit+0x16c>)
 800773a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800773e:	6313      	str	r3, [r2, #48]	; 0x30
 8007740:	4b2a      	ldr	r3, [pc, #168]	; (80077ec <HAL_ETH_MspInit+0x16c>)
 8007742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007748:	60bb      	str	r3, [r7, #8]
 800774a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800774c:	2332      	movs	r3, #50	; 0x32
 800774e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007750:	2302      	movs	r3, #2
 8007752:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007754:	2300      	movs	r3, #0
 8007756:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007758:	2303      	movs	r3, #3
 800775a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800775c:	230b      	movs	r3, #11
 800775e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007764:	4619      	mov	r1, r3
 8007766:	4822      	ldr	r0, [pc, #136]	; (80077f0 <HAL_ETH_MspInit+0x170>)
 8007768:	f7fc fef2 	bl	8004550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800776c:	2386      	movs	r3, #134	; 0x86
 800776e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007770:	2302      	movs	r3, #2
 8007772:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007774:	2300      	movs	r3, #0
 8007776:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007778:	2303      	movs	r3, #3
 800777a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800777c:	230b      	movs	r3, #11
 800777e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007784:	4619      	mov	r1, r3
 8007786:	481b      	ldr	r0, [pc, #108]	; (80077f4 <HAL_ETH_MspInit+0x174>)
 8007788:	f7fc fee2 	bl	8004550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800778c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007790:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007792:	2302      	movs	r3, #2
 8007794:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007796:	2300      	movs	r3, #0
 8007798:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800779a:	2303      	movs	r3, #3
 800779c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800779e:	230b      	movs	r3, #11
 80077a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80077a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077a6:	4619      	mov	r1, r3
 80077a8:	4813      	ldr	r0, [pc, #76]	; (80077f8 <HAL_ETH_MspInit+0x178>)
 80077aa:	f7fc fed1 	bl	8004550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80077ae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80077b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077b4:	2302      	movs	r3, #2
 80077b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077b8:	2300      	movs	r3, #0
 80077ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077bc:	2303      	movs	r3, #3
 80077be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80077c0:	230b      	movs	r3, #11
 80077c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80077c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077c8:	4619      	mov	r1, r3
 80077ca:	480c      	ldr	r0, [pc, #48]	; (80077fc <HAL_ETH_MspInit+0x17c>)
 80077cc:	f7fc fec0 	bl	8004550 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80077d0:	2200      	movs	r2, #0
 80077d2:	2105      	movs	r1, #5
 80077d4:	203d      	movs	r0, #61	; 0x3d
 80077d6:	f7fb fd0d 	bl	80031f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80077da:	203d      	movs	r0, #61	; 0x3d
 80077dc:	f7fb fd26 	bl	800322c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80077e0:	bf00      	nop
 80077e2:	3738      	adds	r7, #56	; 0x38
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	40028000 	.word	0x40028000
 80077ec:	40023800 	.word	0x40023800
 80077f0:	40020800 	.word	0x40020800
 80077f4:	40020000 	.word	0x40020000
 80077f8:	40020400 	.word	0x40020400
 80077fc:	40021800 	.word	0x40021800

08007800 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8007808:	4b04      	ldr	r3, [pc, #16]	; (800781c <HAL_ETH_RxCpltCallback+0x1c>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4618      	mov	r0, r3
 800780e:	f000 fd17 	bl	8008240 <osSemaphoreRelease>
}
 8007812:	bf00      	nop
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	20001090 	.word	0x20001090

08007820 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007820:	b5b0      	push	{r4, r5, r7, lr}
 8007822:	b090      	sub	sp, #64	; 0x40
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8007828:	2300      	movs	r3, #0
 800782a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800782c:	4b60      	ldr	r3, [pc, #384]	; (80079b0 <low_level_init+0x190>)
 800782e:	4a61      	ldr	r2, [pc, #388]	; (80079b4 <low_level_init+0x194>)
 8007830:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8007832:	4b5f      	ldr	r3, [pc, #380]	; (80079b0 <low_level_init+0x190>)
 8007834:	2201      	movs	r2, #1
 8007836:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8007838:	4b5d      	ldr	r3, [pc, #372]	; (80079b0 <low_level_init+0x190>)
 800783a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800783e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007840:	4b5b      	ldr	r3, [pc, #364]	; (80079b0 <low_level_init+0x190>)
 8007842:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007846:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8007848:	4b59      	ldr	r3, [pc, #356]	; (80079b0 <low_level_init+0x190>)
 800784a:	2200      	movs	r2, #0
 800784c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800784e:	2300      	movs	r3, #0
 8007850:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8007854:	2380      	movs	r3, #128	; 0x80
 8007856:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800785a:	23e1      	movs	r3, #225	; 0xe1
 800785c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8007860:	2300      	movs	r3, #0
 8007862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8007866:	2300      	movs	r3, #0
 8007868:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800786c:	2300      	movs	r3, #0
 800786e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8007872:	4a4f      	ldr	r2, [pc, #316]	; (80079b0 <low_level_init+0x190>)
 8007874:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007878:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800787a:	4b4d      	ldr	r3, [pc, #308]	; (80079b0 <low_level_init+0x190>)
 800787c:	2201      	movs	r2, #1
 800787e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8007880:	4b4b      	ldr	r3, [pc, #300]	; (80079b0 <low_level_init+0x190>)
 8007882:	2200      	movs	r2, #0
 8007884:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8007886:	4b4a      	ldr	r3, [pc, #296]	; (80079b0 <low_level_init+0x190>)
 8007888:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800788c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800788e:	4848      	ldr	r0, [pc, #288]	; (80079b0 <low_level_init+0x190>)
 8007890:	f7fb fcda 	bl	8003248 <HAL_ETH_Init>
 8007894:	4603      	mov	r3, r0
 8007896:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800789a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d108      	bne.n	80078b4 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80078a8:	f043 0304 	orr.w	r3, r3, #4
 80078ac:	b2da      	uxtb	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80078b4:	2304      	movs	r3, #4
 80078b6:	4a40      	ldr	r2, [pc, #256]	; (80079b8 <low_level_init+0x198>)
 80078b8:	4940      	ldr	r1, [pc, #256]	; (80079bc <low_level_init+0x19c>)
 80078ba:	483d      	ldr	r0, [pc, #244]	; (80079b0 <low_level_init+0x190>)
 80078bc:	f7fb fe5e 	bl	800357c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80078c0:	2304      	movs	r3, #4
 80078c2:	4a3f      	ldr	r2, [pc, #252]	; (80079c0 <low_level_init+0x1a0>)
 80078c4:	493f      	ldr	r1, [pc, #252]	; (80079c4 <low_level_init+0x1a4>)
 80078c6:	483a      	ldr	r0, [pc, #232]	; (80079b0 <low_level_init+0x190>)
 80078c8:	f7fb fec1 	bl	800364e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2206      	movs	r2, #6
 80078d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80078d4:	4b36      	ldr	r3, [pc, #216]	; (80079b0 <low_level_init+0x190>)
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	781a      	ldrb	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80078e0:	4b33      	ldr	r3, [pc, #204]	; (80079b0 <low_level_init+0x190>)
 80078e2:	695b      	ldr	r3, [r3, #20]
 80078e4:	785a      	ldrb	r2, [r3, #1]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80078ec:	4b30      	ldr	r3, [pc, #192]	; (80079b0 <low_level_init+0x190>)
 80078ee:	695b      	ldr	r3, [r3, #20]
 80078f0:	789a      	ldrb	r2, [r3, #2]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80078f8:	4b2d      	ldr	r3, [pc, #180]	; (80079b0 <low_level_init+0x190>)
 80078fa:	695b      	ldr	r3, [r3, #20]
 80078fc:	78da      	ldrb	r2, [r3, #3]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007904:	4b2a      	ldr	r3, [pc, #168]	; (80079b0 <low_level_init+0x190>)
 8007906:	695b      	ldr	r3, [r3, #20]
 8007908:	791a      	ldrb	r2, [r3, #4]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007910:	4b27      	ldr	r3, [pc, #156]	; (80079b0 <low_level_init+0x190>)
 8007912:	695b      	ldr	r3, [r3, #20]
 8007914:	795a      	ldrb	r2, [r3, #5]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007922:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800792a:	f043 030a 	orr.w	r3, r3, #10
 800792e:	b2da      	uxtb	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8007936:	2300      	movs	r3, #0
 8007938:	62bb      	str	r3, [r7, #40]	; 0x28
 800793a:	2300      	movs	r3, #0
 800793c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800793e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007942:	2101      	movs	r1, #1
 8007944:	4618      	mov	r0, r3
 8007946:	f000 fbfb 	bl	8008140 <osSemaphoreCreate>
 800794a:	4603      	mov	r3, r0
 800794c:	4a1e      	ldr	r2, [pc, #120]	; (80079c8 <low_level_init+0x1a8>)
 800794e:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8007950:	4b1e      	ldr	r3, [pc, #120]	; (80079cc <low_level_init+0x1ac>)
 8007952:	f107 040c 	add.w	r4, r7, #12
 8007956:	461d      	mov	r5, r3
 8007958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800795a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800795c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007960:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8007964:	f107 030c 	add.w	r3, r7, #12
 8007968:	6879      	ldr	r1, [r7, #4]
 800796a:	4618      	mov	r0, r3
 800796c:	f000 faeb 	bl	8007f46 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8007970:	480f      	ldr	r0, [pc, #60]	; (80079b0 <low_level_init+0x190>)
 8007972:	f7fc f994 	bl	8003c9e <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8007976:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800797a:	461a      	mov	r2, r3
 800797c:	211d      	movs	r1, #29
 800797e:	480c      	ldr	r0, [pc, #48]	; (80079b0 <low_level_init+0x190>)
 8007980:	f7fc f8bf 	bl	8003b02 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8007984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007986:	f043 030b 	orr.w	r3, r3, #11
 800798a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800798c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798e:	461a      	mov	r2, r3
 8007990:	211d      	movs	r1, #29
 8007992:	4807      	ldr	r0, [pc, #28]	; (80079b0 <low_level_init+0x190>)
 8007994:	f7fc f91d 	bl	8003bd2 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8007998:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800799c:	461a      	mov	r2, r3
 800799e:	211d      	movs	r1, #29
 80079a0:	4803      	ldr	r0, [pc, #12]	; (80079b0 <low_level_init+0x190>)
 80079a2:	f7fc f8ae 	bl	8003b02 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80079a6:	bf00      	nop
 80079a8:	3740      	adds	r7, #64	; 0x40
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bdb0      	pop	{r4, r5, r7, pc}
 80079ae:	bf00      	nop
 80079b0:	2000cab4 	.word	0x2000cab4
 80079b4:	40028000 	.word	0x40028000
 80079b8:	2000cafc 	.word	0x2000cafc
 80079bc:	2000b1e4 	.word	0x2000b1e4
 80079c0:	2000b264 	.word	0x2000b264
 80079c4:	2000ca34 	.word	0x2000ca34
 80079c8:	20001090 	.word	0x20001090
 80079cc:	0801a3ac 	.word	0x0801a3ac

080079d0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b08a      	sub	sp, #40	; 0x28
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80079da:	4b4b      	ldr	r3, [pc, #300]	; (8007b08 <low_level_output+0x138>)
 80079dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80079e2:	2300      	movs	r3, #0
 80079e4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80079e6:	2300      	movs	r3, #0
 80079e8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80079ea:	2300      	movs	r3, #0
 80079ec:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80079ee:	2300      	movs	r3, #0
 80079f0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80079f2:	4b45      	ldr	r3, [pc, #276]	; (8007b08 <low_level_output+0x138>)
 80079f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80079f8:	2300      	movs	r3, #0
 80079fa:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	623b      	str	r3, [r7, #32]
 8007a00:	e05a      	b.n	8007ab8 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007a02:	69bb      	ldr	r3, [r7, #24]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	da03      	bge.n	8007a12 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8007a0a:	23f8      	movs	r3, #248	; 0xf8
 8007a0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8007a10:	e05c      	b.n	8007acc <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8007a12:	6a3b      	ldr	r3, [r7, #32]
 8007a14:	895b      	ldrh	r3, [r3, #10]
 8007a16:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007a1c:	e02f      	b.n	8007a7e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8007a1e:	69fa      	ldr	r2, [r7, #28]
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	18d0      	adds	r0, r2, r3
 8007a24:	6a3b      	ldr	r3, [r7, #32]
 8007a26:	685a      	ldr	r2, [r3, #4]
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	18d1      	adds	r1, r2, r3
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8007a32:	1a9b      	subs	r3, r3, r2
 8007a34:	461a      	mov	r2, r3
 8007a36:	f010 fb01 	bl	801803c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	da03      	bge.n	8007a50 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8007a48:	23f8      	movs	r3, #248	; 0xf8
 8007a4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8007a4e:	e03d      	b.n	8007acc <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007a60:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8007a62:	68ba      	ldr	r2, [r7, #8]
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007a6c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007a78:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	4413      	add	r3, r2
 8007a84:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d8c8      	bhi.n	8007a1e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8007a8c:	69fa      	ldr	r2, [r7, #28]
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	18d0      	adds	r0, r2, r3
 8007a92:	6a3b      	ldr	r3, [r7, #32]
 8007a94:	685a      	ldr	r2, [r3, #4]
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	4413      	add	r3, r2
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	f010 facd 	bl	801803c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007aa2:	693a      	ldr	r2, [r7, #16]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	4413      	add	r3, r2
 8007ab0:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8007ab2:	6a3b      	ldr	r3, [r7, #32]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	623b      	str	r3, [r7, #32]
 8007ab8:	6a3b      	ldr	r3, [r7, #32]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1a1      	bne.n	8007a02 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8007abe:	6979      	ldr	r1, [r7, #20]
 8007ac0:	4811      	ldr	r0, [pc, #68]	; (8007b08 <low_level_output+0x138>)
 8007ac2:	f7fb fe31 	bl	8003728 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8007acc:	4b0e      	ldr	r3, [pc, #56]	; (8007b08 <low_level_output+0x138>)
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	f241 0314 	movw	r3, #4116	; 0x1014
 8007ad4:	4413      	add	r3, r2
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 0320 	and.w	r3, r3, #32
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00d      	beq.n	8007afc <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8007ae0:	4b09      	ldr	r3, [pc, #36]	; (8007b08 <low_level_output+0x138>)
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	f241 0314 	movw	r3, #4116	; 0x1014
 8007ae8:	4413      	add	r3, r2
 8007aea:	2220      	movs	r2, #32
 8007aec:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8007aee:	4b06      	ldr	r3, [pc, #24]	; (8007b08 <low_level_output+0x138>)
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	f241 0304 	movw	r3, #4100	; 0x1004
 8007af6:	4413      	add	r3, r2
 8007af8:	2200      	movs	r2, #0
 8007afa:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8007afc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3728      	adds	r7, #40	; 0x28
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	2000cab4 	.word	0x2000cab4

08007b0c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b08c      	sub	sp, #48	; 0x30
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007b14:	2300      	movs	r3, #0
 8007b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8007b20:	2300      	movs	r3, #0
 8007b22:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8007b24:	2300      	movs	r3, #0
 8007b26:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8007b30:	484f      	ldr	r0, [pc, #316]	; (8007c70 <low_level_input+0x164>)
 8007b32:	f7fb fee3 	bl	80038fc <HAL_ETH_GetReceivedFrame_IT>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d001      	beq.n	8007b40 <low_level_input+0x34>

    return NULL;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	e092      	b.n	8007c66 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8007b40:	4b4b      	ldr	r3, [pc, #300]	; (8007c70 <low_level_input+0x164>)
 8007b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b44:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8007b46:	4b4a      	ldr	r3, [pc, #296]	; (8007c70 <low_level_input+0x164>)
 8007b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8007b4c:	89fb      	ldrh	r3, [r7, #14]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d007      	beq.n	8007b62 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8007b52:	89fb      	ldrh	r3, [r7, #14]
 8007b54:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8007b58:	4619      	mov	r1, r3
 8007b5a:	2000      	movs	r0, #0
 8007b5c:	f006 fc50 	bl	800e400 <pbuf_alloc>
 8007b60:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8007b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d04b      	beq.n	8007c00 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007b68:	4b41      	ldr	r3, [pc, #260]	; (8007c70 <low_level_input+0x164>)
 8007b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b74:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b76:	e040      	b.n	8007bfa <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8007b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7a:	895b      	ldrh	r3, [r3, #10]
 8007b7c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007b82:	e021      	b.n	8007bc8 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8007b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	18d0      	adds	r0, r2, r3
 8007b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	18d1      	adds	r1, r2, r3
 8007b92:	69fa      	ldr	r2, [r7, #28]
 8007b94:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8007b98:	1a9b      	subs	r3, r3, r2
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	f010 fa4e 	bl	801803c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007ba0:	6a3b      	ldr	r3, [r7, #32]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8007ba6:	6a3b      	ldr	r3, [r7, #32]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8007bac:	69fa      	ldr	r2, [r7, #28]
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007bb6:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8007bb8:	69ba      	ldr	r2, [r7, #24]
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007bc2:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007bc8:	697a      	ldr	r2, [r7, #20]
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	4413      	add	r3, r2
 8007bce:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d8d6      	bhi.n	8007b84 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8007bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd8:	685a      	ldr	r2, [r3, #4]
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	18d0      	adds	r0, r2, r3
 8007bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	4413      	add	r3, r2
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	4619      	mov	r1, r3
 8007be8:	f010 fa28 	bl	801803c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8007bec:	69fa      	ldr	r2, [r7, #28]
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1bb      	bne.n	8007b78 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8007c00:	4b1b      	ldr	r3, [pc, #108]	; (8007c70 <low_level_input+0x164>)
 8007c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c04:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007c06:	2300      	movs	r3, #0
 8007c08:	613b      	str	r3, [r7, #16]
 8007c0a:	e00b      	b.n	8007c24 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8007c0c:	6a3b      	ldr	r3, [r7, #32]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007c14:	6a3b      	ldr	r3, [r7, #32]
 8007c16:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007c18:	6a3b      	ldr	r3, [r7, #32]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	3301      	adds	r3, #1
 8007c22:	613b      	str	r3, [r7, #16]
 8007c24:	4b12      	ldr	r3, [pc, #72]	; (8007c70 <low_level_input+0x164>)
 8007c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c28:	693a      	ldr	r2, [r7, #16]
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d3ee      	bcc.n	8007c0c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8007c2e:	4b10      	ldr	r3, [pc, #64]	; (8007c70 <low_level_input+0x164>)
 8007c30:	2200      	movs	r2, #0
 8007c32:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8007c34:	4b0e      	ldr	r3, [pc, #56]	; (8007c70 <low_level_input+0x164>)
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	f241 0314 	movw	r3, #4116	; 0x1014
 8007c3c:	4413      	add	r3, r2
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00d      	beq.n	8007c64 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8007c48:	4b09      	ldr	r3, [pc, #36]	; (8007c70 <low_level_input+0x164>)
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	f241 0314 	movw	r3, #4116	; 0x1014
 8007c50:	4413      	add	r3, r2
 8007c52:	2280      	movs	r2, #128	; 0x80
 8007c54:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8007c56:	4b06      	ldr	r3, [pc, #24]	; (8007c70 <low_level_input+0x164>)
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	f241 0308 	movw	r3, #4104	; 0x1008
 8007c5e:	4413      	add	r3, r2
 8007c60:	2200      	movs	r2, #0
 8007c62:	601a      	str	r2, [r3, #0]
  }
  return p;
 8007c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3730      	adds	r7, #48	; 0x30
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	2000cab4 	.word	0x2000cab4

08007c74 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007c80:	4b12      	ldr	r3, [pc, #72]	; (8007ccc <ethernetif_input+0x58>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f000 fa8b 	bl	80081a4 <osSemaphoreWait>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d1f5      	bne.n	8007c80 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8007c94:	480e      	ldr	r0, [pc, #56]	; (8007cd0 <ethernetif_input+0x5c>)
 8007c96:	f010 f831 	bl	8017cfc <sys_mutex_lock>
        p = low_level_input( netif );
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f7ff ff36 	bl	8007b0c <low_level_input>
 8007ca0:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00a      	beq.n	8007cbe <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	68f9      	ldr	r1, [r7, #12]
 8007cae:	68b8      	ldr	r0, [r7, #8]
 8007cb0:	4798      	blx	r3
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d002      	beq.n	8007cbe <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8007cb8:	68b8      	ldr	r0, [r7, #8]
 8007cba:	f006 fe85 	bl	800e9c8 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8007cbe:	4804      	ldr	r0, [pc, #16]	; (8007cd0 <ethernetif_input+0x5c>)
 8007cc0:	f010 f82b 	bl	8017d1a <sys_mutex_unlock>
      } while(p!=NULL);
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1e4      	bne.n	8007c94 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007cca:	e7d9      	b.n	8007c80 <ethernetif_input+0xc>
 8007ccc:	20001090 	.word	0x20001090
 8007cd0:	2000e2cc 	.word	0x2000e2cc

08007cd4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d106      	bne.n	8007cf0 <ethernetif_init+0x1c>
 8007ce2:	4b0e      	ldr	r3, [pc, #56]	; (8007d1c <ethernetif_init+0x48>)
 8007ce4:	f240 2236 	movw	r2, #566	; 0x236
 8007ce8:	490d      	ldr	r1, [pc, #52]	; (8007d20 <ethernetif_init+0x4c>)
 8007cea:	480e      	ldr	r0, [pc, #56]	; (8007d24 <ethernetif_init+0x50>)
 8007cec:	f010 fa80 	bl	80181f0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2273      	movs	r2, #115	; 0x73
 8007cf4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2274      	movs	r2, #116	; 0x74
 8007cfc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a09      	ldr	r2, [pc, #36]	; (8007d28 <ethernetif_init+0x54>)
 8007d04:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a08      	ldr	r2, [pc, #32]	; (8007d2c <ethernetif_init+0x58>)
 8007d0a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f7ff fd87 	bl	8007820 <low_level_init>

  return ERR_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	0801a3c8 	.word	0x0801a3c8
 8007d20:	0801a3e4 	.word	0x0801a3e4
 8007d24:	0801a3f4 	.word	0x0801a3f4
 8007d28:	08015ea9 	.word	0x08015ea9
 8007d2c:	080079d1 	.word	0x080079d1

08007d30 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007d34:	f7fb f976 	bl	8003024 <HAL_GetTick>
 8007d38:	4603      	mov	r3, r0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	bd80      	pop	{r7, pc}
	...

08007d40 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8007d50:	f107 0308 	add.w	r3, r7, #8
 8007d54:	461a      	mov	r2, r3
 8007d56:	2101      	movs	r1, #1
 8007d58:	4816      	ldr	r0, [pc, #88]	; (8007db4 <ethernetif_set_link+0x74>)
 8007d5a:	f7fb fed2 	bl	8003b02 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	f003 0304 	and.w	r3, r3, #4
 8007d64:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007d6e:	f003 0304 	and.w	r3, r3, #4
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d108      	bne.n	8007d88 <ethernetif_set_link+0x48>
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d005      	beq.n	8007d88 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4618      	mov	r0, r3
 8007d82:	f006 fa0f 	bl	800e1a4 <netif_set_link_up>
 8007d86:	e011      	b.n	8007dac <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007d90:	089b      	lsrs	r3, r3, #2
 8007d92:	f003 0301 	and.w	r3, r3, #1
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d007      	beq.n	8007dac <ethernetif_set_link+0x6c>
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d104      	bne.n	8007dac <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4618      	mov	r0, r3
 8007da8:	f006 fa30 	bl	800e20c <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8007dac:	20c8      	movs	r0, #200	; 0xc8
 8007dae:	f000 f916 	bl	8007fde <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8007db2:	e7cd      	b.n	8007d50 <ethernetif_set_link+0x10>
 8007db4:	2000cab4 	.word	0x2000cab4

08007db8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007dce:	089b      	lsrs	r3, r3, #2
 8007dd0:	f003 0301 	and.w	r3, r3, #1
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d05d      	beq.n	8007e96 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8007dda:	4b34      	ldr	r3, [pc, #208]	; (8007eac <ethernetif_update_config+0xf4>)
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d03f      	beq.n	8007e62 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8007de2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007de6:	2100      	movs	r1, #0
 8007de8:	4830      	ldr	r0, [pc, #192]	; (8007eac <ethernetif_update_config+0xf4>)
 8007dea:	f7fb fef2 	bl	8003bd2 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8007dee:	f7fb f919 	bl	8003024 <HAL_GetTick>
 8007df2:	4603      	mov	r3, r0
 8007df4:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8007df6:	f107 0308 	add.w	r3, r7, #8
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	2101      	movs	r1, #1
 8007dfe:	482b      	ldr	r0, [pc, #172]	; (8007eac <ethernetif_update_config+0xf4>)
 8007e00:	f7fb fe7f 	bl	8003b02 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8007e04:	f7fb f90e 	bl	8003024 <HAL_GetTick>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	1ad3      	subs	r3, r2, r3
 8007e0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e12:	d828      	bhi.n	8007e66 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	f003 0320 	and.w	r3, r3, #32
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d0eb      	beq.n	8007df6 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8007e1e:	f107 0308 	add.w	r3, r7, #8
 8007e22:	461a      	mov	r2, r3
 8007e24:	2110      	movs	r1, #16
 8007e26:	4821      	ldr	r0, [pc, #132]	; (8007eac <ethernetif_update_config+0xf4>)
 8007e28:	f7fb fe6b 	bl	8003b02 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	f003 0304 	and.w	r3, r3, #4
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d004      	beq.n	8007e40 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007e36:	4b1d      	ldr	r3, [pc, #116]	; (8007eac <ethernetif_update_config+0xf4>)
 8007e38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e3c:	60da      	str	r2, [r3, #12]
 8007e3e:	e002      	b.n	8007e46 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8007e40:	4b1a      	ldr	r3, [pc, #104]	; (8007eac <ethernetif_update_config+0xf4>)
 8007e42:	2200      	movs	r2, #0
 8007e44:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	f003 0302 	and.w	r3, r3, #2
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d003      	beq.n	8007e58 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8007e50:	4b16      	ldr	r3, [pc, #88]	; (8007eac <ethernetif_update_config+0xf4>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	609a      	str	r2, [r3, #8]
 8007e56:	e016      	b.n	8007e86 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8007e58:	4b14      	ldr	r3, [pc, #80]	; (8007eac <ethernetif_update_config+0xf4>)
 8007e5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007e5e:	609a      	str	r2, [r3, #8]
 8007e60:	e011      	b.n	8007e86 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8007e62:	bf00      	nop
 8007e64:	e000      	b.n	8007e68 <ethernetif_update_config+0xb0>
          goto error;
 8007e66:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007e68:	4b10      	ldr	r3, [pc, #64]	; (8007eac <ethernetif_update_config+0xf4>)
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	08db      	lsrs	r3, r3, #3
 8007e6e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8007e70:	4b0e      	ldr	r3, [pc, #56]	; (8007eac <ethernetif_update_config+0xf4>)
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	085b      	lsrs	r3, r3, #1
 8007e76:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	2100      	movs	r1, #0
 8007e80:	480a      	ldr	r0, [pc, #40]	; (8007eac <ethernetif_update_config+0xf4>)
 8007e82:	f7fb fea6 	bl	8003bd2 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8007e86:	2100      	movs	r1, #0
 8007e88:	4808      	ldr	r0, [pc, #32]	; (8007eac <ethernetif_update_config+0xf4>)
 8007e8a:	f7fb ff67 	bl	8003d5c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8007e8e:	4807      	ldr	r0, [pc, #28]	; (8007eac <ethernetif_update_config+0xf4>)
 8007e90:	f7fb ff05 	bl	8003c9e <HAL_ETH_Start>
 8007e94:	e002      	b.n	8007e9c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8007e96:	4805      	ldr	r0, [pc, #20]	; (8007eac <ethernetif_update_config+0xf4>)
 8007e98:	f7fb ff30 	bl	8003cfc <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f807 	bl	8007eb0 <ethernetif_notify_conn_changed>
}
 8007ea2:	bf00      	nop
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	2000cab4 	.word	0x2000cab4

08007eb0 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8007eb8:	bf00      	nop
 8007eba:	370c      	adds	r7, #12
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr

08007ec4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	4603      	mov	r3, r0
 8007ecc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007ed2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ed6:	2b84      	cmp	r3, #132	; 0x84
 8007ed8:	d005      	beq.n	8007ee6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007eda:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	3303      	adds	r3, #3
 8007ee4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3714      	adds	r7, #20
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b083      	sub	sp, #12
 8007ef8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007efa:	f3ef 8305 	mrs	r3, IPSR
 8007efe:	607b      	str	r3, [r7, #4]
  return(result);
 8007f00:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	bf14      	ite	ne
 8007f06:	2301      	movne	r3, #1
 8007f08:	2300      	moveq	r3, #0
 8007f0a:	b2db      	uxtb	r3, r3
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007f1c:	f001 fcbc 	bl	8009898 <vTaskStartScheduler>
  
  return osOK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8007f2a:	f7ff ffe3 	bl	8007ef4 <inHandlerMode>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d003      	beq.n	8007f3c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007f34:	f001 fdda 	bl	8009aec <xTaskGetTickCountFromISR>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	e002      	b.n	8007f42 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8007f3c:	f001 fdc6 	bl	8009acc <xTaskGetTickCount>
 8007f40:	4603      	mov	r3, r0
  }
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007f46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f48:	b089      	sub	sp, #36	; 0x24
 8007f4a:	af04      	add	r7, sp, #16
 8007f4c:	6078      	str	r0, [r7, #4]
 8007f4e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	695b      	ldr	r3, [r3, #20]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d020      	beq.n	8007f9a <osThreadCreate+0x54>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	699b      	ldr	r3, [r3, #24]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d01c      	beq.n	8007f9a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	685c      	ldr	r4, [r3, #4]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681d      	ldr	r5, [r3, #0]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	691e      	ldr	r6, [r3, #16]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7ff ffa6 	bl	8007ec4 <makeFreeRtosPriority>
 8007f78:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	695b      	ldr	r3, [r3, #20]
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f82:	9202      	str	r2, [sp, #8]
 8007f84:	9301      	str	r3, [sp, #4]
 8007f86:	9100      	str	r1, [sp, #0]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	4632      	mov	r2, r6
 8007f8c:	4629      	mov	r1, r5
 8007f8e:	4620      	mov	r0, r4
 8007f90:	f001 fa9a 	bl	80094c8 <xTaskCreateStatic>
 8007f94:	4603      	mov	r3, r0
 8007f96:	60fb      	str	r3, [r7, #12]
 8007f98:	e01c      	b.n	8007fd4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	685c      	ldr	r4, [r3, #4]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007fa6:	b29e      	uxth	r6, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7ff ff88 	bl	8007ec4 <makeFreeRtosPriority>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	f107 030c 	add.w	r3, r7, #12
 8007fba:	9301      	str	r3, [sp, #4]
 8007fbc:	9200      	str	r2, [sp, #0]
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	4632      	mov	r2, r6
 8007fc2:	4629      	mov	r1, r5
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	f001 fae2 	bl	800958e <xTaskCreate>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d001      	beq.n	8007fd4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	e000      	b.n	8007fd6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3714      	adds	r7, #20
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007fde <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b084      	sub	sp, #16
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d001      	beq.n	8007ff4 <osDelay+0x16>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	e000      	b.n	8007ff6 <osDelay+0x18>
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f001 fc18 	bl	800982c <vTaskDelay>
  
  return osOK;
 8007ffc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b082      	sub	sp, #8
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d007      	beq.n	8008026 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	4619      	mov	r1, r3
 800801c:	2001      	movs	r0, #1
 800801e:	f000 fc54 	bl	80088ca <xQueueCreateMutexStatic>
 8008022:	4603      	mov	r3, r0
 8008024:	e003      	b.n	800802e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8008026:	2001      	movs	r0, #1
 8008028:	f000 fc37 	bl	800889a <xQueueCreateMutex>
 800802c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800802e:	4618      	mov	r0, r3
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
	...

08008038 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008042:	2300      	movs	r3, #0
 8008044:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d101      	bne.n	8008050 <osMutexWait+0x18>
    return osErrorParameter;
 800804c:	2380      	movs	r3, #128	; 0x80
 800804e:	e03a      	b.n	80080c6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8008050:	2300      	movs	r3, #0
 8008052:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800805a:	d103      	bne.n	8008064 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800805c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008060:	60fb      	str	r3, [r7, #12]
 8008062:	e009      	b.n	8008078 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d006      	beq.n	8008078 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d101      	bne.n	8008078 <osMutexWait+0x40>
      ticks = 1;
 8008074:	2301      	movs	r3, #1
 8008076:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008078:	f7ff ff3c 	bl	8007ef4 <inHandlerMode>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d017      	beq.n	80080b2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008082:	f107 0308 	add.w	r3, r7, #8
 8008086:	461a      	mov	r2, r3
 8008088:	2100      	movs	r1, #0
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f001 f86e 	bl	800916c <xQueueReceiveFromISR>
 8008090:	4603      	mov	r3, r0
 8008092:	2b01      	cmp	r3, #1
 8008094:	d001      	beq.n	800809a <osMutexWait+0x62>
      return osErrorOS;
 8008096:	23ff      	movs	r3, #255	; 0xff
 8008098:	e015      	b.n	80080c6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d011      	beq.n	80080c4 <osMutexWait+0x8c>
 80080a0:	4b0b      	ldr	r3, [pc, #44]	; (80080d0 <osMutexWait+0x98>)
 80080a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080a6:	601a      	str	r2, [r3, #0]
 80080a8:	f3bf 8f4f 	dsb	sy
 80080ac:	f3bf 8f6f 	isb	sy
 80080b0:	e008      	b.n	80080c4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80080b2:	68f9      	ldr	r1, [r7, #12]
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 ff45 	bl	8008f44 <xQueueSemaphoreTake>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d001      	beq.n	80080c4 <osMutexWait+0x8c>
    return osErrorOS;
 80080c0:	23ff      	movs	r3, #255	; 0xff
 80080c2:	e000      	b.n	80080c6 <osMutexWait+0x8e>
  }
  
  return osOK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	e000ed04 	.word	0xe000ed04

080080d4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80080dc:	2300      	movs	r3, #0
 80080de:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80080e0:	2300      	movs	r3, #0
 80080e2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80080e4:	f7ff ff06 	bl	8007ef4 <inHandlerMode>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d016      	beq.n	800811c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80080ee:	f107 0308 	add.w	r3, r7, #8
 80080f2:	4619      	mov	r1, r3
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fda9 	bl	8008c4c <xQueueGiveFromISR>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d001      	beq.n	8008104 <osMutexRelease+0x30>
      return osErrorOS;
 8008100:	23ff      	movs	r3, #255	; 0xff
 8008102:	e017      	b.n	8008134 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d013      	beq.n	8008132 <osMutexRelease+0x5e>
 800810a:	4b0c      	ldr	r3, [pc, #48]	; (800813c <osMutexRelease+0x68>)
 800810c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008110:	601a      	str	r2, [r3, #0]
 8008112:	f3bf 8f4f 	dsb	sy
 8008116:	f3bf 8f6f 	isb	sy
 800811a:	e00a      	b.n	8008132 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800811c:	2300      	movs	r3, #0
 800811e:	2200      	movs	r2, #0
 8008120:	2100      	movs	r1, #0
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 fbec 	bl	8008900 <xQueueGenericSend>
 8008128:	4603      	mov	r3, r0
 800812a:	2b01      	cmp	r3, #1
 800812c:	d001      	beq.n	8008132 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800812e:	23ff      	movs	r3, #255	; 0xff
 8008130:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8008132:	68fb      	ldr	r3, [r7, #12]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	e000ed04 	.word	0xe000ed04

08008140 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af02      	add	r7, sp, #8
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00f      	beq.n	8008172 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d10a      	bne.n	800816e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	2203      	movs	r2, #3
 800815e:	9200      	str	r2, [sp, #0]
 8008160:	2200      	movs	r2, #0
 8008162:	2100      	movs	r1, #0
 8008164:	2001      	movs	r0, #1
 8008166:	f000 fa9b 	bl	80086a0 <xQueueGenericCreateStatic>
 800816a:	4603      	mov	r3, r0
 800816c:	e016      	b.n	800819c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800816e:	2300      	movs	r3, #0
 8008170:	e014      	b.n	800819c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	2b01      	cmp	r3, #1
 8008176:	d110      	bne.n	800819a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8008178:	2203      	movs	r2, #3
 800817a:	2100      	movs	r1, #0
 800817c:	2001      	movs	r0, #1
 800817e:	f000 fb11 	bl	80087a4 <xQueueGenericCreate>
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d005      	beq.n	8008196 <osSemaphoreCreate+0x56>
 800818a:	2300      	movs	r3, #0
 800818c:	2200      	movs	r2, #0
 800818e:	2100      	movs	r1, #0
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f000 fbb5 	bl	8008900 <xQueueGenericSend>
      return sema;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	e000      	b.n	800819c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800819a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800819c:	4618      	mov	r0, r3
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80081ae:	2300      	movs	r3, #0
 80081b0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d101      	bne.n	80081bc <osSemaphoreWait+0x18>
    return osErrorParameter;
 80081b8:	2380      	movs	r3, #128	; 0x80
 80081ba:	e03a      	b.n	8008232 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80081bc:	2300      	movs	r3, #0
 80081be:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081c6:	d103      	bne.n	80081d0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80081c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081cc:	60fb      	str	r3, [r7, #12]
 80081ce:	e009      	b.n	80081e4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d006      	beq.n	80081e4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d101      	bne.n	80081e4 <osSemaphoreWait+0x40>
      ticks = 1;
 80081e0:	2301      	movs	r3, #1
 80081e2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80081e4:	f7ff fe86 	bl	8007ef4 <inHandlerMode>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d017      	beq.n	800821e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80081ee:	f107 0308 	add.w	r3, r7, #8
 80081f2:	461a      	mov	r2, r3
 80081f4:	2100      	movs	r1, #0
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 ffb8 	bl	800916c <xQueueReceiveFromISR>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d001      	beq.n	8008206 <osSemaphoreWait+0x62>
      return osErrorOS;
 8008202:	23ff      	movs	r3, #255	; 0xff
 8008204:	e015      	b.n	8008232 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d011      	beq.n	8008230 <osSemaphoreWait+0x8c>
 800820c:	4b0b      	ldr	r3, [pc, #44]	; (800823c <osSemaphoreWait+0x98>)
 800820e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	f3bf 8f4f 	dsb	sy
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	e008      	b.n	8008230 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800821e:	68f9      	ldr	r1, [r7, #12]
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 fe8f 	bl	8008f44 <xQueueSemaphoreTake>
 8008226:	4603      	mov	r3, r0
 8008228:	2b01      	cmp	r3, #1
 800822a:	d001      	beq.n	8008230 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800822c:	23ff      	movs	r3, #255	; 0xff
 800822e:	e000      	b.n	8008232 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008230:	2300      	movs	r3, #0
}
 8008232:	4618      	mov	r0, r3
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	e000ed04 	.word	0xe000ed04

08008240 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008248:	2300      	movs	r3, #0
 800824a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800824c:	2300      	movs	r3, #0
 800824e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008250:	f7ff fe50 	bl	8007ef4 <inHandlerMode>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d016      	beq.n	8008288 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800825a:	f107 0308 	add.w	r3, r7, #8
 800825e:	4619      	mov	r1, r3
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 fcf3 	bl	8008c4c <xQueueGiveFromISR>
 8008266:	4603      	mov	r3, r0
 8008268:	2b01      	cmp	r3, #1
 800826a:	d001      	beq.n	8008270 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800826c:	23ff      	movs	r3, #255	; 0xff
 800826e:	e017      	b.n	80082a0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d013      	beq.n	800829e <osSemaphoreRelease+0x5e>
 8008276:	4b0c      	ldr	r3, [pc, #48]	; (80082a8 <osSemaphoreRelease+0x68>)
 8008278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800827c:	601a      	str	r2, [r3, #0]
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	f3bf 8f6f 	isb	sy
 8008286:	e00a      	b.n	800829e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008288:	2300      	movs	r3, #0
 800828a:	2200      	movs	r2, #0
 800828c:	2100      	movs	r1, #0
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fb36 	bl	8008900 <xQueueGenericSend>
 8008294:	4603      	mov	r3, r0
 8008296:	2b01      	cmp	r3, #1
 8008298:	d001      	beq.n	800829e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800829a:	23ff      	movs	r3, #255	; 0xff
 800829c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800829e:	68fb      	ldr	r3, [r7, #12]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3710      	adds	r7, #16
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	e000ed04 	.word	0xe000ed04

080082ac <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80082ac:	b590      	push	{r4, r7, lr}
 80082ae:	b085      	sub	sp, #20
 80082b0:	af02      	add	r7, sp, #8
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d011      	beq.n	80082e2 <osMessageCreate+0x36>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00d      	beq.n	80082e2 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6818      	ldr	r0, [r3, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6859      	ldr	r1, [r3, #4]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	689a      	ldr	r2, [r3, #8]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	2400      	movs	r4, #0
 80082d8:	9400      	str	r4, [sp, #0]
 80082da:	f000 f9e1 	bl	80086a0 <xQueueGenericCreateStatic>
 80082de:	4603      	mov	r3, r0
 80082e0:	e008      	b.n	80082f4 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6818      	ldr	r0, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	4619      	mov	r1, r3
 80082ee:	f000 fa59 	bl	80087a4 <xQueueGenericCreate>
 80082f2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd90      	pop	{r4, r7, pc}

080082fc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b086      	sub	sp, #24
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008308:	2300      	movs	r3, #0
 800830a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d101      	bne.n	800831a <osMessagePut+0x1e>
    ticks = 1;
 8008316:	2301      	movs	r3, #1
 8008318:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800831a:	f7ff fdeb 	bl	8007ef4 <inHandlerMode>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d018      	beq.n	8008356 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008324:	f107 0210 	add.w	r2, r7, #16
 8008328:	f107 0108 	add.w	r1, r7, #8
 800832c:	2300      	movs	r3, #0
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f000 fbec 	bl	8008b0c <xQueueGenericSendFromISR>
 8008334:	4603      	mov	r3, r0
 8008336:	2b01      	cmp	r3, #1
 8008338:	d001      	beq.n	800833e <osMessagePut+0x42>
      return osErrorOS;
 800833a:	23ff      	movs	r3, #255	; 0xff
 800833c:	e018      	b.n	8008370 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d014      	beq.n	800836e <osMessagePut+0x72>
 8008344:	4b0c      	ldr	r3, [pc, #48]	; (8008378 <osMessagePut+0x7c>)
 8008346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800834a:	601a      	str	r2, [r3, #0]
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	f3bf 8f6f 	isb	sy
 8008354:	e00b      	b.n	800836e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008356:	f107 0108 	add.w	r1, r7, #8
 800835a:	2300      	movs	r3, #0
 800835c:	697a      	ldr	r2, [r7, #20]
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f000 face 	bl	8008900 <xQueueGenericSend>
 8008364:	4603      	mov	r3, r0
 8008366:	2b01      	cmp	r3, #1
 8008368:	d001      	beq.n	800836e <osMessagePut+0x72>
      return osErrorOS;
 800836a:	23ff      	movs	r3, #255	; 0xff
 800836c:	e000      	b.n	8008370 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3718      	adds	r7, #24
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	e000ed04 	.word	0xe000ed04

0800837c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800837c:	b590      	push	{r4, r7, lr}
 800837e:	b08b      	sub	sp, #44	; 0x2c
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800838c:	2300      	movs	r3, #0
 800838e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d10a      	bne.n	80083ac <osMessageGet+0x30>
    event.status = osErrorParameter;
 8008396:	2380      	movs	r3, #128	; 0x80
 8008398:	617b      	str	r3, [r7, #20]
    return event;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	461c      	mov	r4, r3
 800839e:	f107 0314 	add.w	r3, r7, #20
 80083a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80083a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80083aa:	e054      	b.n	8008456 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80083ac:	2300      	movs	r3, #0
 80083ae:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80083b0:	2300      	movs	r3, #0
 80083b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083ba:	d103      	bne.n	80083c4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80083bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083c0:	627b      	str	r3, [r7, #36]	; 0x24
 80083c2:	e009      	b.n	80083d8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d006      	beq.n	80083d8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80083ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d101      	bne.n	80083d8 <osMessageGet+0x5c>
      ticks = 1;
 80083d4:	2301      	movs	r3, #1
 80083d6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80083d8:	f7ff fd8c 	bl	8007ef4 <inHandlerMode>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d01c      	beq.n	800841c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80083e2:	f107 0220 	add.w	r2, r7, #32
 80083e6:	f107 0314 	add.w	r3, r7, #20
 80083ea:	3304      	adds	r3, #4
 80083ec:	4619      	mov	r1, r3
 80083ee:	68b8      	ldr	r0, [r7, #8]
 80083f0:	f000 febc 	bl	800916c <xQueueReceiveFromISR>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d102      	bne.n	8008400 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80083fa:	2310      	movs	r3, #16
 80083fc:	617b      	str	r3, [r7, #20]
 80083fe:	e001      	b.n	8008404 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008400:	2300      	movs	r3, #0
 8008402:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008404:	6a3b      	ldr	r3, [r7, #32]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d01d      	beq.n	8008446 <osMessageGet+0xca>
 800840a:	4b15      	ldr	r3, [pc, #84]	; (8008460 <osMessageGet+0xe4>)
 800840c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008410:	601a      	str	r2, [r3, #0]
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	e014      	b.n	8008446 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800841c:	f107 0314 	add.w	r3, r7, #20
 8008420:	3304      	adds	r3, #4
 8008422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008424:	4619      	mov	r1, r3
 8008426:	68b8      	ldr	r0, [r7, #8]
 8008428:	f000 fca6 	bl	8008d78 <xQueueReceive>
 800842c:	4603      	mov	r3, r0
 800842e:	2b01      	cmp	r3, #1
 8008430:	d102      	bne.n	8008438 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8008432:	2310      	movs	r3, #16
 8008434:	617b      	str	r3, [r7, #20]
 8008436:	e006      	b.n	8008446 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843a:	2b00      	cmp	r3, #0
 800843c:	d101      	bne.n	8008442 <osMessageGet+0xc6>
 800843e:	2300      	movs	r3, #0
 8008440:	e000      	b.n	8008444 <osMessageGet+0xc8>
 8008442:	2340      	movs	r3, #64	; 0x40
 8008444:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	461c      	mov	r4, r3
 800844a:	f107 0314 	add.w	r3, r7, #20
 800844e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008452:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	372c      	adds	r7, #44	; 0x2c
 800845a:	46bd      	mov	sp, r7
 800845c:	bd90      	pop	{r4, r7, pc}
 800845e:	bf00      	nop
 8008460:	e000ed04 	.word	0xe000ed04

08008464 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008464:	b480      	push	{r7}
 8008466:	b083      	sub	sp, #12
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f103 0208 	add.w	r2, r3, #8
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800847c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f103 0208 	add.w	r2, r3, #8
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f103 0208 	add.w	r2, r3, #8
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80084b2:	bf00      	nop
 80084b4:	370c      	adds	r7, #12
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr

080084be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084be:	b480      	push	{r7}
 80084c0:	b085      	sub	sp, #20
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
 80084c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	689a      	ldr	r2, [r3, #8]
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	683a      	ldr	r2, [r7, #0]
 80084e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	683a      	ldr	r2, [r7, #0]
 80084e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	1c5a      	adds	r2, r3, #1
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	601a      	str	r2, [r3, #0]
}
 80084fa:	bf00      	nop
 80084fc:	3714      	adds	r7, #20
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr

08008506 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008506:	b480      	push	{r7}
 8008508:	b085      	sub	sp, #20
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
 800850e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800851c:	d103      	bne.n	8008526 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	60fb      	str	r3, [r7, #12]
 8008524:	e00c      	b.n	8008540 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	3308      	adds	r3, #8
 800852a:	60fb      	str	r3, [r7, #12]
 800852c:	e002      	b.n	8008534 <vListInsert+0x2e>
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	60fb      	str	r3, [r7, #12]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	429a      	cmp	r2, r3
 800853e:	d2f6      	bcs.n	800852e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	685a      	ldr	r2, [r3, #4]
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	683a      	ldr	r2, [r7, #0]
 800854e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	683a      	ldr	r2, [r7, #0]
 800855a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	1c5a      	adds	r2, r3, #1
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	601a      	str	r2, [r3, #0]
}
 800856c:	bf00      	nop
 800856e:	3714      	adds	r7, #20
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	6892      	ldr	r2, [r2, #8]
 800858e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	6852      	ldr	r2, [r2, #4]
 8008598:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d103      	bne.n	80085ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	689a      	ldr	r2, [r3, #8]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	1e5a      	subs	r2, r3, #1
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3714      	adds	r7, #20
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d10c      	bne.n	80085fa <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80085e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e4:	b672      	cpsid	i
 80085e6:	f383 8811 	msr	BASEPRI, r3
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	b662      	cpsie	i
 80085f4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80085f6:	bf00      	nop
 80085f8:	e7fe      	b.n	80085f8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80085fa:	f002 f8df 	bl	800a7bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008606:	68f9      	ldr	r1, [r7, #12]
 8008608:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800860a:	fb01 f303 	mul.w	r3, r1, r3
 800860e:	441a      	add	r2, r3
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2200      	movs	r2, #0
 8008618:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800862a:	3b01      	subs	r3, #1
 800862c:	68f9      	ldr	r1, [r7, #12]
 800862e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008630:	fb01 f303 	mul.w	r3, r1, r3
 8008634:	441a      	add	r2, r3
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	22ff      	movs	r2, #255	; 0xff
 800863e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	22ff      	movs	r2, #255	; 0xff
 8008646:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d114      	bne.n	800867a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d01a      	beq.n	800868e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	3310      	adds	r3, #16
 800865c:	4618      	mov	r0, r3
 800865e:	f001 fb9b 	bl	8009d98 <xTaskRemoveFromEventList>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d012      	beq.n	800868e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008668:	4b0c      	ldr	r3, [pc, #48]	; (800869c <xQueueGenericReset+0xd0>)
 800866a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800866e:	601a      	str	r2, [r3, #0]
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	f3bf 8f6f 	isb	sy
 8008678:	e009      	b.n	800868e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	3310      	adds	r3, #16
 800867e:	4618      	mov	r0, r3
 8008680:	f7ff fef0 	bl	8008464 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	3324      	adds	r3, #36	; 0x24
 8008688:	4618      	mov	r0, r3
 800868a:	f7ff feeb 	bl	8008464 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800868e:	f002 f8c9 	bl	800a824 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008692:	2301      	movs	r3, #1
}
 8008694:	4618      	mov	r0, r3
 8008696:	3710      	adds	r7, #16
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}
 800869c:	e000ed04 	.word	0xe000ed04

080086a0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b08e      	sub	sp, #56	; 0x38
 80086a4:	af02      	add	r7, sp, #8
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]
 80086ac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d10c      	bne.n	80086ce <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80086b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b8:	b672      	cpsid	i
 80086ba:	f383 8811 	msr	BASEPRI, r3
 80086be:	f3bf 8f6f 	isb	sy
 80086c2:	f3bf 8f4f 	dsb	sy
 80086c6:	b662      	cpsie	i
 80086c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80086ca:	bf00      	nop
 80086cc:	e7fe      	b.n	80086cc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d10c      	bne.n	80086ee <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80086d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d8:	b672      	cpsid	i
 80086da:	f383 8811 	msr	BASEPRI, r3
 80086de:	f3bf 8f6f 	isb	sy
 80086e2:	f3bf 8f4f 	dsb	sy
 80086e6:	b662      	cpsie	i
 80086e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80086ea:	bf00      	nop
 80086ec:	e7fe      	b.n	80086ec <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d002      	beq.n	80086fa <xQueueGenericCreateStatic+0x5a>
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d001      	beq.n	80086fe <xQueueGenericCreateStatic+0x5e>
 80086fa:	2301      	movs	r3, #1
 80086fc:	e000      	b.n	8008700 <xQueueGenericCreateStatic+0x60>
 80086fe:	2300      	movs	r3, #0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10c      	bne.n	800871e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8008704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008708:	b672      	cpsid	i
 800870a:	f383 8811 	msr	BASEPRI, r3
 800870e:	f3bf 8f6f 	isb	sy
 8008712:	f3bf 8f4f 	dsb	sy
 8008716:	b662      	cpsie	i
 8008718:	623b      	str	r3, [r7, #32]
}
 800871a:	bf00      	nop
 800871c:	e7fe      	b.n	800871c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d102      	bne.n	800872a <xQueueGenericCreateStatic+0x8a>
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d101      	bne.n	800872e <xQueueGenericCreateStatic+0x8e>
 800872a:	2301      	movs	r3, #1
 800872c:	e000      	b.n	8008730 <xQueueGenericCreateStatic+0x90>
 800872e:	2300      	movs	r3, #0
 8008730:	2b00      	cmp	r3, #0
 8008732:	d10c      	bne.n	800874e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8008734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008738:	b672      	cpsid	i
 800873a:	f383 8811 	msr	BASEPRI, r3
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	b662      	cpsie	i
 8008748:	61fb      	str	r3, [r7, #28]
}
 800874a:	bf00      	nop
 800874c:	e7fe      	b.n	800874c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800874e:	2348      	movs	r3, #72	; 0x48
 8008750:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	2b48      	cmp	r3, #72	; 0x48
 8008756:	d00c      	beq.n	8008772 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8008758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875c:	b672      	cpsid	i
 800875e:	f383 8811 	msr	BASEPRI, r3
 8008762:	f3bf 8f6f 	isb	sy
 8008766:	f3bf 8f4f 	dsb	sy
 800876a:	b662      	cpsie	i
 800876c:	61bb      	str	r3, [r7, #24]
}
 800876e:	bf00      	nop
 8008770:	e7fe      	b.n	8008770 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008772:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00d      	beq.n	800879a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800877e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008780:	2201      	movs	r2, #1
 8008782:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008786:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800878a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800878c:	9300      	str	r3, [sp, #0]
 800878e:	4613      	mov	r3, r2
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	68b9      	ldr	r1, [r7, #8]
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f000 f847 	bl	8008828 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800879a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800879c:	4618      	mov	r0, r3
 800879e:	3730      	adds	r7, #48	; 0x30
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b08a      	sub	sp, #40	; 0x28
 80087a8:	af02      	add	r7, sp, #8
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	4613      	mov	r3, r2
 80087b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d10c      	bne.n	80087d2 <xQueueGenericCreate+0x2e>
	__asm volatile
 80087b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087bc:	b672      	cpsid	i
 80087be:	f383 8811 	msr	BASEPRI, r3
 80087c2:	f3bf 8f6f 	isb	sy
 80087c6:	f3bf 8f4f 	dsb	sy
 80087ca:	b662      	cpsie	i
 80087cc:	613b      	str	r3, [r7, #16]
}
 80087ce:	bf00      	nop
 80087d0:	e7fe      	b.n	80087d0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d102      	bne.n	80087de <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80087d8:	2300      	movs	r3, #0
 80087da:	61fb      	str	r3, [r7, #28]
 80087dc:	e004      	b.n	80087e8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	68ba      	ldr	r2, [r7, #8]
 80087e2:	fb02 f303 	mul.w	r3, r2, r3
 80087e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	3348      	adds	r3, #72	; 0x48
 80087ec:	4618      	mov	r0, r3
 80087ee:	f002 f911 	bl	800aa14 <pvPortMalloc>
 80087f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d011      	beq.n	800881e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	3348      	adds	r3, #72	; 0x48
 8008802:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	2200      	movs	r2, #0
 8008808:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800880c:	79fa      	ldrb	r2, [r7, #7]
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	9300      	str	r3, [sp, #0]
 8008812:	4613      	mov	r3, r2
 8008814:	697a      	ldr	r2, [r7, #20]
 8008816:	68b9      	ldr	r1, [r7, #8]
 8008818:	68f8      	ldr	r0, [r7, #12]
 800881a:	f000 f805 	bl	8008828 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800881e:	69bb      	ldr	r3, [r7, #24]
	}
 8008820:	4618      	mov	r0, r3
 8008822:	3720      	adds	r7, #32
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
 8008834:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d103      	bne.n	8008844 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800883c:	69bb      	ldr	r3, [r7, #24]
 800883e:	69ba      	ldr	r2, [r7, #24]
 8008840:	601a      	str	r2, [r3, #0]
 8008842:	e002      	b.n	800884a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800884a:	69bb      	ldr	r3, [r7, #24]
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	68ba      	ldr	r2, [r7, #8]
 8008854:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008856:	2101      	movs	r1, #1
 8008858:	69b8      	ldr	r0, [r7, #24]
 800885a:	f7ff feb7 	bl	80085cc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800885e:	bf00      	nop
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}

08008866 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008866:	b580      	push	{r7, lr}
 8008868:	b082      	sub	sp, #8
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d00e      	beq.n	8008892 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008886:	2300      	movs	r3, #0
 8008888:	2200      	movs	r2, #0
 800888a:	2100      	movs	r1, #0
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f837 	bl	8008900 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008892:	bf00      	nop
 8008894:	3708      	adds	r7, #8
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800889a:	b580      	push	{r7, lr}
 800889c:	b086      	sub	sp, #24
 800889e:	af00      	add	r7, sp, #0
 80088a0:	4603      	mov	r3, r0
 80088a2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80088a4:	2301      	movs	r3, #1
 80088a6:	617b      	str	r3, [r7, #20]
 80088a8:	2300      	movs	r3, #0
 80088aa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80088ac:	79fb      	ldrb	r3, [r7, #7]
 80088ae:	461a      	mov	r2, r3
 80088b0:	6939      	ldr	r1, [r7, #16]
 80088b2:	6978      	ldr	r0, [r7, #20]
 80088b4:	f7ff ff76 	bl	80087a4 <xQueueGenericCreate>
 80088b8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f7ff ffd3 	bl	8008866 <prvInitialiseMutex>

		return xNewQueue;
 80088c0:	68fb      	ldr	r3, [r7, #12]
	}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3718      	adds	r7, #24
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b088      	sub	sp, #32
 80088ce:	af02      	add	r7, sp, #8
 80088d0:	4603      	mov	r3, r0
 80088d2:	6039      	str	r1, [r7, #0]
 80088d4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80088d6:	2301      	movs	r3, #1
 80088d8:	617b      	str	r3, [r7, #20]
 80088da:	2300      	movs	r3, #0
 80088dc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80088de:	79fb      	ldrb	r3, [r7, #7]
 80088e0:	9300      	str	r3, [sp, #0]
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	2200      	movs	r2, #0
 80088e6:	6939      	ldr	r1, [r7, #16]
 80088e8:	6978      	ldr	r0, [r7, #20]
 80088ea:	f7ff fed9 	bl	80086a0 <xQueueGenericCreateStatic>
 80088ee:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f7ff ffb8 	bl	8008866 <prvInitialiseMutex>

		return xNewQueue;
 80088f6:	68fb      	ldr	r3, [r7, #12]
	}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3718      	adds	r7, #24
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b08e      	sub	sp, #56	; 0x38
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	607a      	str	r2, [r7, #4]
 800890c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800890e:	2300      	movs	r3, #0
 8008910:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008918:	2b00      	cmp	r3, #0
 800891a:	d10c      	bne.n	8008936 <xQueueGenericSend+0x36>
	__asm volatile
 800891c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008920:	b672      	cpsid	i
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	b662      	cpsie	i
 8008930:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008932:	bf00      	nop
 8008934:	e7fe      	b.n	8008934 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d103      	bne.n	8008944 <xQueueGenericSend+0x44>
 800893c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008940:	2b00      	cmp	r3, #0
 8008942:	d101      	bne.n	8008948 <xQueueGenericSend+0x48>
 8008944:	2301      	movs	r3, #1
 8008946:	e000      	b.n	800894a <xQueueGenericSend+0x4a>
 8008948:	2300      	movs	r3, #0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d10c      	bne.n	8008968 <xQueueGenericSend+0x68>
	__asm volatile
 800894e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008952:	b672      	cpsid	i
 8008954:	f383 8811 	msr	BASEPRI, r3
 8008958:	f3bf 8f6f 	isb	sy
 800895c:	f3bf 8f4f 	dsb	sy
 8008960:	b662      	cpsie	i
 8008962:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008964:	bf00      	nop
 8008966:	e7fe      	b.n	8008966 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	2b02      	cmp	r3, #2
 800896c:	d103      	bne.n	8008976 <xQueueGenericSend+0x76>
 800896e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008972:	2b01      	cmp	r3, #1
 8008974:	d101      	bne.n	800897a <xQueueGenericSend+0x7a>
 8008976:	2301      	movs	r3, #1
 8008978:	e000      	b.n	800897c <xQueueGenericSend+0x7c>
 800897a:	2300      	movs	r3, #0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10c      	bne.n	800899a <xQueueGenericSend+0x9a>
	__asm volatile
 8008980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008984:	b672      	cpsid	i
 8008986:	f383 8811 	msr	BASEPRI, r3
 800898a:	f3bf 8f6f 	isb	sy
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	b662      	cpsie	i
 8008994:	623b      	str	r3, [r7, #32]
}
 8008996:	bf00      	nop
 8008998:	e7fe      	b.n	8008998 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800899a:	f001 fbc5 	bl	800a128 <xTaskGetSchedulerState>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d102      	bne.n	80089aa <xQueueGenericSend+0xaa>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d101      	bne.n	80089ae <xQueueGenericSend+0xae>
 80089aa:	2301      	movs	r3, #1
 80089ac:	e000      	b.n	80089b0 <xQueueGenericSend+0xb0>
 80089ae:	2300      	movs	r3, #0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d10c      	bne.n	80089ce <xQueueGenericSend+0xce>
	__asm volatile
 80089b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b8:	b672      	cpsid	i
 80089ba:	f383 8811 	msr	BASEPRI, r3
 80089be:	f3bf 8f6f 	isb	sy
 80089c2:	f3bf 8f4f 	dsb	sy
 80089c6:	b662      	cpsie	i
 80089c8:	61fb      	str	r3, [r7, #28]
}
 80089ca:	bf00      	nop
 80089cc:	e7fe      	b.n	80089cc <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089ce:	f001 fef5 	bl	800a7bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089da:	429a      	cmp	r2, r3
 80089dc:	d302      	bcc.n	80089e4 <xQueueGenericSend+0xe4>
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d129      	bne.n	8008a38 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089e4:	683a      	ldr	r2, [r7, #0]
 80089e6:	68b9      	ldr	r1, [r7, #8]
 80089e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80089ea:	f000 fc5d 	bl	80092a8 <prvCopyDataToQueue>
 80089ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d010      	beq.n	8008a1a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089fa:	3324      	adds	r3, #36	; 0x24
 80089fc:	4618      	mov	r0, r3
 80089fe:	f001 f9cb 	bl	8009d98 <xTaskRemoveFromEventList>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d013      	beq.n	8008a30 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008a08:	4b3f      	ldr	r3, [pc, #252]	; (8008b08 <xQueueGenericSend+0x208>)
 8008a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a0e:	601a      	str	r2, [r3, #0]
 8008a10:	f3bf 8f4f 	dsb	sy
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	e00a      	b.n	8008a30 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d007      	beq.n	8008a30 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008a20:	4b39      	ldr	r3, [pc, #228]	; (8008b08 <xQueueGenericSend+0x208>)
 8008a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a26:	601a      	str	r2, [r3, #0]
 8008a28:	f3bf 8f4f 	dsb	sy
 8008a2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008a30:	f001 fef8 	bl	800a824 <vPortExitCritical>
				return pdPASS;
 8008a34:	2301      	movs	r3, #1
 8008a36:	e063      	b.n	8008b00 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d103      	bne.n	8008a46 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a3e:	f001 fef1 	bl	800a824 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008a42:	2300      	movs	r3, #0
 8008a44:	e05c      	b.n	8008b00 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d106      	bne.n	8008a5a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a4c:	f107 0314 	add.w	r3, r7, #20
 8008a50:	4618      	mov	r0, r3
 8008a52:	f001 fa05 	bl	8009e60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a56:	2301      	movs	r3, #1
 8008a58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a5a:	f001 fee3 	bl	800a824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a5e:	f000 ff89 	bl	8009974 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a62:	f001 feab 	bl	800a7bc <vPortEnterCritical>
 8008a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a6c:	b25b      	sxtb	r3, r3
 8008a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a72:	d103      	bne.n	8008a7c <xQueueGenericSend+0x17c>
 8008a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a76:	2200      	movs	r2, #0
 8008a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a82:	b25b      	sxtb	r3, r3
 8008a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a88:	d103      	bne.n	8008a92 <xQueueGenericSend+0x192>
 8008a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a92:	f001 fec7 	bl	800a824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a96:	1d3a      	adds	r2, r7, #4
 8008a98:	f107 0314 	add.w	r3, r7, #20
 8008a9c:	4611      	mov	r1, r2
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f001 f9f4 	bl	8009e8c <xTaskCheckForTimeOut>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d124      	bne.n	8008af4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008aaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008aac:	f000 fcf4 	bl	8009498 <prvIsQueueFull>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d018      	beq.n	8008ae8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab8:	3310      	adds	r3, #16
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	4611      	mov	r1, r2
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f001 f944 	bl	8009d4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008ac4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ac6:	f000 fc7f 	bl	80093c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008aca:	f000 ff61 	bl	8009990 <xTaskResumeAll>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f47f af7c 	bne.w	80089ce <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8008ad6:	4b0c      	ldr	r3, [pc, #48]	; (8008b08 <xQueueGenericSend+0x208>)
 8008ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008adc:	601a      	str	r2, [r3, #0]
 8008ade:	f3bf 8f4f 	dsb	sy
 8008ae2:	f3bf 8f6f 	isb	sy
 8008ae6:	e772      	b.n	80089ce <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008ae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008aea:	f000 fc6d 	bl	80093c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008aee:	f000 ff4f 	bl	8009990 <xTaskResumeAll>
 8008af2:	e76c      	b.n	80089ce <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008af4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008af6:	f000 fc67 	bl	80093c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008afa:	f000 ff49 	bl	8009990 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008afe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3738      	adds	r7, #56	; 0x38
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	e000ed04 	.word	0xe000ed04

08008b0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b08e      	sub	sp, #56	; 0x38
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	607a      	str	r2, [r7, #4]
 8008b18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d10c      	bne.n	8008b3e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8008b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b28:	b672      	cpsid	i
 8008b2a:	f383 8811 	msr	BASEPRI, r3
 8008b2e:	f3bf 8f6f 	isb	sy
 8008b32:	f3bf 8f4f 	dsb	sy
 8008b36:	b662      	cpsie	i
 8008b38:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008b3a:	bf00      	nop
 8008b3c:	e7fe      	b.n	8008b3c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d103      	bne.n	8008b4c <xQueueGenericSendFromISR+0x40>
 8008b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d101      	bne.n	8008b50 <xQueueGenericSendFromISR+0x44>
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e000      	b.n	8008b52 <xQueueGenericSendFromISR+0x46>
 8008b50:	2300      	movs	r3, #0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d10c      	bne.n	8008b70 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8008b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5a:	b672      	cpsid	i
 8008b5c:	f383 8811 	msr	BASEPRI, r3
 8008b60:	f3bf 8f6f 	isb	sy
 8008b64:	f3bf 8f4f 	dsb	sy
 8008b68:	b662      	cpsie	i
 8008b6a:	623b      	str	r3, [r7, #32]
}
 8008b6c:	bf00      	nop
 8008b6e:	e7fe      	b.n	8008b6e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	d103      	bne.n	8008b7e <xQueueGenericSendFromISR+0x72>
 8008b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d101      	bne.n	8008b82 <xQueueGenericSendFromISR+0x76>
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e000      	b.n	8008b84 <xQueueGenericSendFromISR+0x78>
 8008b82:	2300      	movs	r3, #0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10c      	bne.n	8008ba2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8008b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8c:	b672      	cpsid	i
 8008b8e:	f383 8811 	msr	BASEPRI, r3
 8008b92:	f3bf 8f6f 	isb	sy
 8008b96:	f3bf 8f4f 	dsb	sy
 8008b9a:	b662      	cpsie	i
 8008b9c:	61fb      	str	r3, [r7, #28]
}
 8008b9e:	bf00      	nop
 8008ba0:	e7fe      	b.n	8008ba0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ba2:	f001 fef3 	bl	800a98c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008ba6:	f3ef 8211 	mrs	r2, BASEPRI
 8008baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bae:	b672      	cpsid	i
 8008bb0:	f383 8811 	msr	BASEPRI, r3
 8008bb4:	f3bf 8f6f 	isb	sy
 8008bb8:	f3bf 8f4f 	dsb	sy
 8008bbc:	b662      	cpsie	i
 8008bbe:	61ba      	str	r2, [r7, #24]
 8008bc0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008bc2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d302      	bcc.n	8008bd8 <xQueueGenericSendFromISR+0xcc>
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d12c      	bne.n	8008c32 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008be2:	683a      	ldr	r2, [r7, #0]
 8008be4:	68b9      	ldr	r1, [r7, #8]
 8008be6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008be8:	f000 fb5e 	bl	80092a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008bec:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008bf4:	d112      	bne.n	8008c1c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d016      	beq.n	8008c2c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c00:	3324      	adds	r3, #36	; 0x24
 8008c02:	4618      	mov	r0, r3
 8008c04:	f001 f8c8 	bl	8009d98 <xTaskRemoveFromEventList>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00e      	beq.n	8008c2c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d00b      	beq.n	8008c2c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	601a      	str	r2, [r3, #0]
 8008c1a:	e007      	b.n	8008c2c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008c1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c20:	3301      	adds	r3, #1
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	b25a      	sxtb	r2, r3
 8008c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008c30:	e001      	b.n	8008c36 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008c32:	2300      	movs	r3, #0
 8008c34:	637b      	str	r3, [r7, #52]	; 0x34
 8008c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c38:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008c40:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3738      	adds	r7, #56	; 0x38
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b08e      	sub	sp, #56	; 0x38
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d10c      	bne.n	8008c7a <xQueueGiveFromISR+0x2e>
	__asm volatile
 8008c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c64:	b672      	cpsid	i
 8008c66:	f383 8811 	msr	BASEPRI, r3
 8008c6a:	f3bf 8f6f 	isb	sy
 8008c6e:	f3bf 8f4f 	dsb	sy
 8008c72:	b662      	cpsie	i
 8008c74:	623b      	str	r3, [r7, #32]
}
 8008c76:	bf00      	nop
 8008c78:	e7fe      	b.n	8008c78 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00c      	beq.n	8008c9c <xQueueGiveFromISR+0x50>
	__asm volatile
 8008c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c86:	b672      	cpsid	i
 8008c88:	f383 8811 	msr	BASEPRI, r3
 8008c8c:	f3bf 8f6f 	isb	sy
 8008c90:	f3bf 8f4f 	dsb	sy
 8008c94:	b662      	cpsie	i
 8008c96:	61fb      	str	r3, [r7, #28]
}
 8008c98:	bf00      	nop
 8008c9a:	e7fe      	b.n	8008c9a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d103      	bne.n	8008cac <xQueueGiveFromISR+0x60>
 8008ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d101      	bne.n	8008cb0 <xQueueGiveFromISR+0x64>
 8008cac:	2301      	movs	r3, #1
 8008cae:	e000      	b.n	8008cb2 <xQueueGiveFromISR+0x66>
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d10c      	bne.n	8008cd0 <xQueueGiveFromISR+0x84>
	__asm volatile
 8008cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cba:	b672      	cpsid	i
 8008cbc:	f383 8811 	msr	BASEPRI, r3
 8008cc0:	f3bf 8f6f 	isb	sy
 8008cc4:	f3bf 8f4f 	dsb	sy
 8008cc8:	b662      	cpsie	i
 8008cca:	61bb      	str	r3, [r7, #24]
}
 8008ccc:	bf00      	nop
 8008cce:	e7fe      	b.n	8008cce <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008cd0:	f001 fe5c 	bl	800a98c <vPortValidateInterruptPriority>
	__asm volatile
 8008cd4:	f3ef 8211 	mrs	r2, BASEPRI
 8008cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cdc:	b672      	cpsid	i
 8008cde:	f383 8811 	msr	BASEPRI, r3
 8008ce2:	f3bf 8f6f 	isb	sy
 8008ce6:	f3bf 8f4f 	dsb	sy
 8008cea:	b662      	cpsie	i
 8008cec:	617a      	str	r2, [r7, #20]
 8008cee:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008cf0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d22b      	bcs.n	8008d5c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d10:	1c5a      	adds	r2, r3, #1
 8008d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d14:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008d16:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008d1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d1e:	d112      	bne.n	8008d46 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d016      	beq.n	8008d56 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2a:	3324      	adds	r3, #36	; 0x24
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f001 f833 	bl	8009d98 <xTaskRemoveFromEventList>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00e      	beq.n	8008d56 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00b      	beq.n	8008d56 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	2201      	movs	r2, #1
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	e007      	b.n	8008d56 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008d46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	b2db      	uxtb	r3, r3
 8008d4e:	b25a      	sxtb	r2, r3
 8008d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008d56:	2301      	movs	r3, #1
 8008d58:	637b      	str	r3, [r7, #52]	; 0x34
 8008d5a:	e001      	b.n	8008d60 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	637b      	str	r3, [r7, #52]	; 0x34
 8008d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d62:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f383 8811 	msr	BASEPRI, r3
}
 8008d6a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3738      	adds	r7, #56	; 0x38
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
	...

08008d78 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b08c      	sub	sp, #48	; 0x30
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008d84:	2300      	movs	r3, #0
 8008d86:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10c      	bne.n	8008dac <xQueueReceive+0x34>
	__asm volatile
 8008d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d96:	b672      	cpsid	i
 8008d98:	f383 8811 	msr	BASEPRI, r3
 8008d9c:	f3bf 8f6f 	isb	sy
 8008da0:	f3bf 8f4f 	dsb	sy
 8008da4:	b662      	cpsie	i
 8008da6:	623b      	str	r3, [r7, #32]
}
 8008da8:	bf00      	nop
 8008daa:	e7fe      	b.n	8008daa <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d103      	bne.n	8008dba <xQueueReceive+0x42>
 8008db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d101      	bne.n	8008dbe <xQueueReceive+0x46>
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e000      	b.n	8008dc0 <xQueueReceive+0x48>
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d10c      	bne.n	8008dde <xQueueReceive+0x66>
	__asm volatile
 8008dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc8:	b672      	cpsid	i
 8008dca:	f383 8811 	msr	BASEPRI, r3
 8008dce:	f3bf 8f6f 	isb	sy
 8008dd2:	f3bf 8f4f 	dsb	sy
 8008dd6:	b662      	cpsie	i
 8008dd8:	61fb      	str	r3, [r7, #28]
}
 8008dda:	bf00      	nop
 8008ddc:	e7fe      	b.n	8008ddc <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008dde:	f001 f9a3 	bl	800a128 <xTaskGetSchedulerState>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d102      	bne.n	8008dee <xQueueReceive+0x76>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <xQueueReceive+0x7a>
 8008dee:	2301      	movs	r3, #1
 8008df0:	e000      	b.n	8008df4 <xQueueReceive+0x7c>
 8008df2:	2300      	movs	r3, #0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d10c      	bne.n	8008e12 <xQueueReceive+0x9a>
	__asm volatile
 8008df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfc:	b672      	cpsid	i
 8008dfe:	f383 8811 	msr	BASEPRI, r3
 8008e02:	f3bf 8f6f 	isb	sy
 8008e06:	f3bf 8f4f 	dsb	sy
 8008e0a:	b662      	cpsie	i
 8008e0c:	61bb      	str	r3, [r7, #24]
}
 8008e0e:	bf00      	nop
 8008e10:	e7fe      	b.n	8008e10 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e12:	f001 fcd3 	bl	800a7bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d01f      	beq.n	8008e62 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e22:	68b9      	ldr	r1, [r7, #8]
 8008e24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e26:	f000 faa9 	bl	800937c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2c:	1e5a      	subs	r2, r3, #1
 8008e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e30:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e34:	691b      	ldr	r3, [r3, #16]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00f      	beq.n	8008e5a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e3c:	3310      	adds	r3, #16
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f000 ffaa 	bl	8009d98 <xTaskRemoveFromEventList>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d007      	beq.n	8008e5a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008e4a:	4b3d      	ldr	r3, [pc, #244]	; (8008f40 <xQueueReceive+0x1c8>)
 8008e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e50:	601a      	str	r2, [r3, #0]
 8008e52:	f3bf 8f4f 	dsb	sy
 8008e56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008e5a:	f001 fce3 	bl	800a824 <vPortExitCritical>
				return pdPASS;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e069      	b.n	8008f36 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d103      	bne.n	8008e70 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e68:	f001 fcdc 	bl	800a824 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	e062      	b.n	8008f36 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d106      	bne.n	8008e84 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e76:	f107 0310 	add.w	r3, r7, #16
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f000 fff0 	bl	8009e60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e80:	2301      	movs	r3, #1
 8008e82:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e84:	f001 fcce 	bl	800a824 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e88:	f000 fd74 	bl	8009974 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e8c:	f001 fc96 	bl	800a7bc <vPortEnterCritical>
 8008e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e96:	b25b      	sxtb	r3, r3
 8008e98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e9c:	d103      	bne.n	8008ea6 <xQueueReceive+0x12e>
 8008e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008eac:	b25b      	sxtb	r3, r3
 8008eae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008eb2:	d103      	bne.n	8008ebc <xQueueReceive+0x144>
 8008eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ebc:	f001 fcb2 	bl	800a824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ec0:	1d3a      	adds	r2, r7, #4
 8008ec2:	f107 0310 	add.w	r3, r7, #16
 8008ec6:	4611      	mov	r1, r2
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f000 ffdf 	bl	8009e8c <xTaskCheckForTimeOut>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d123      	bne.n	8008f1c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ed6:	f000 fac9 	bl	800946c <prvIsQueueEmpty>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d017      	beq.n	8008f10 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee2:	3324      	adds	r3, #36	; 0x24
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	4611      	mov	r1, r2
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f000 ff2f 	bl	8009d4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ef0:	f000 fa6a 	bl	80093c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ef4:	f000 fd4c 	bl	8009990 <xTaskResumeAll>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d189      	bne.n	8008e12 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8008efe:	4b10      	ldr	r3, [pc, #64]	; (8008f40 <xQueueReceive+0x1c8>)
 8008f00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f04:	601a      	str	r2, [r3, #0]
 8008f06:	f3bf 8f4f 	dsb	sy
 8008f0a:	f3bf 8f6f 	isb	sy
 8008f0e:	e780      	b.n	8008e12 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008f10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f12:	f000 fa59 	bl	80093c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f16:	f000 fd3b 	bl	8009990 <xTaskResumeAll>
 8008f1a:	e77a      	b.n	8008e12 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008f1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f1e:	f000 fa53 	bl	80093c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f22:	f000 fd35 	bl	8009990 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f28:	f000 faa0 	bl	800946c <prvIsQueueEmpty>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	f43f af6f 	beq.w	8008e12 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008f34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3730      	adds	r7, #48	; 0x30
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	e000ed04 	.word	0xe000ed04

08008f44 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b08e      	sub	sp, #56	; 0x38
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008f56:	2300      	movs	r3, #0
 8008f58:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d10c      	bne.n	8008f7a <xQueueSemaphoreTake+0x36>
	__asm volatile
 8008f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f64:	b672      	cpsid	i
 8008f66:	f383 8811 	msr	BASEPRI, r3
 8008f6a:	f3bf 8f6f 	isb	sy
 8008f6e:	f3bf 8f4f 	dsb	sy
 8008f72:	b662      	cpsie	i
 8008f74:	623b      	str	r3, [r7, #32]
}
 8008f76:	bf00      	nop
 8008f78:	e7fe      	b.n	8008f78 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00c      	beq.n	8008f9c <xQueueSemaphoreTake+0x58>
	__asm volatile
 8008f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f86:	b672      	cpsid	i
 8008f88:	f383 8811 	msr	BASEPRI, r3
 8008f8c:	f3bf 8f6f 	isb	sy
 8008f90:	f3bf 8f4f 	dsb	sy
 8008f94:	b662      	cpsie	i
 8008f96:	61fb      	str	r3, [r7, #28]
}
 8008f98:	bf00      	nop
 8008f9a:	e7fe      	b.n	8008f9a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f9c:	f001 f8c4 	bl	800a128 <xTaskGetSchedulerState>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d102      	bne.n	8008fac <xQueueSemaphoreTake+0x68>
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d101      	bne.n	8008fb0 <xQueueSemaphoreTake+0x6c>
 8008fac:	2301      	movs	r3, #1
 8008fae:	e000      	b.n	8008fb2 <xQueueSemaphoreTake+0x6e>
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d10c      	bne.n	8008fd0 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8008fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fba:	b672      	cpsid	i
 8008fbc:	f383 8811 	msr	BASEPRI, r3
 8008fc0:	f3bf 8f6f 	isb	sy
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	b662      	cpsie	i
 8008fca:	61bb      	str	r3, [r7, #24]
}
 8008fcc:	bf00      	nop
 8008fce:	e7fe      	b.n	8008fce <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008fd0:	f001 fbf4 	bl	800a7bc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d024      	beq.n	800902a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe2:	1e5a      	subs	r2, r3, #1
 8008fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fe6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d104      	bne.n	8008ffa <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008ff0:	f001 fa60 	bl	800a4b4 <pvTaskIncrementMutexHeldCount>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ff8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ffc:	691b      	ldr	r3, [r3, #16]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00f      	beq.n	8009022 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009004:	3310      	adds	r3, #16
 8009006:	4618      	mov	r0, r3
 8009008:	f000 fec6 	bl	8009d98 <xTaskRemoveFromEventList>
 800900c:	4603      	mov	r3, r0
 800900e:	2b00      	cmp	r3, #0
 8009010:	d007      	beq.n	8009022 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009012:	4b55      	ldr	r3, [pc, #340]	; (8009168 <xQueueSemaphoreTake+0x224>)
 8009014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009018:	601a      	str	r2, [r3, #0]
 800901a:	f3bf 8f4f 	dsb	sy
 800901e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009022:	f001 fbff 	bl	800a824 <vPortExitCritical>
				return pdPASS;
 8009026:	2301      	movs	r3, #1
 8009028:	e099      	b.n	800915e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d113      	bne.n	8009058 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00c      	beq.n	8009050 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8009036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903a:	b672      	cpsid	i
 800903c:	f383 8811 	msr	BASEPRI, r3
 8009040:	f3bf 8f6f 	isb	sy
 8009044:	f3bf 8f4f 	dsb	sy
 8009048:	b662      	cpsie	i
 800904a:	617b      	str	r3, [r7, #20]
}
 800904c:	bf00      	nop
 800904e:	e7fe      	b.n	800904e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009050:	f001 fbe8 	bl	800a824 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009054:	2300      	movs	r3, #0
 8009056:	e082      	b.n	800915e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800905a:	2b00      	cmp	r3, #0
 800905c:	d106      	bne.n	800906c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800905e:	f107 030c 	add.w	r3, r7, #12
 8009062:	4618      	mov	r0, r3
 8009064:	f000 fefc 	bl	8009e60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009068:	2301      	movs	r3, #1
 800906a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800906c:	f001 fbda 	bl	800a824 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009070:	f000 fc80 	bl	8009974 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009074:	f001 fba2 	bl	800a7bc <vPortEnterCritical>
 8009078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800907a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800907e:	b25b      	sxtb	r3, r3
 8009080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009084:	d103      	bne.n	800908e <xQueueSemaphoreTake+0x14a>
 8009086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009088:	2200      	movs	r2, #0
 800908a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800908e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009090:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009094:	b25b      	sxtb	r3, r3
 8009096:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800909a:	d103      	bne.n	80090a4 <xQueueSemaphoreTake+0x160>
 800909c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909e:	2200      	movs	r2, #0
 80090a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80090a4:	f001 fbbe 	bl	800a824 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80090a8:	463a      	mov	r2, r7
 80090aa:	f107 030c 	add.w	r3, r7, #12
 80090ae:	4611      	mov	r1, r2
 80090b0:	4618      	mov	r0, r3
 80090b2:	f000 feeb 	bl	8009e8c <xTaskCheckForTimeOut>
 80090b6:	4603      	mov	r3, r0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d132      	bne.n	8009122 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80090bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090be:	f000 f9d5 	bl	800946c <prvIsQueueEmpty>
 80090c2:	4603      	mov	r3, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d026      	beq.n	8009116 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80090c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d109      	bne.n	80090e4 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80090d0:	f001 fb74 	bl	800a7bc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80090d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	4618      	mov	r0, r3
 80090da:	f001 f843 	bl	800a164 <xTaskPriorityInherit>
 80090de:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80090e0:	f001 fba0 	bl	800a824 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80090e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e6:	3324      	adds	r3, #36	; 0x24
 80090e8:	683a      	ldr	r2, [r7, #0]
 80090ea:	4611      	mov	r1, r2
 80090ec:	4618      	mov	r0, r3
 80090ee:	f000 fe2d 	bl	8009d4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80090f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090f4:	f000 f968 	bl	80093c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80090f8:	f000 fc4a 	bl	8009990 <xTaskResumeAll>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	f47f af66 	bne.w	8008fd0 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8009104:	4b18      	ldr	r3, [pc, #96]	; (8009168 <xQueueSemaphoreTake+0x224>)
 8009106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800910a:	601a      	str	r2, [r3, #0]
 800910c:	f3bf 8f4f 	dsb	sy
 8009110:	f3bf 8f6f 	isb	sy
 8009114:	e75c      	b.n	8008fd0 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009116:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009118:	f000 f956 	bl	80093c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800911c:	f000 fc38 	bl	8009990 <xTaskResumeAll>
 8009120:	e756      	b.n	8008fd0 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009122:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009124:	f000 f950 	bl	80093c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009128:	f000 fc32 	bl	8009990 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800912c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800912e:	f000 f99d 	bl	800946c <prvIsQueueEmpty>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	f43f af4b 	beq.w	8008fd0 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800913a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00d      	beq.n	800915c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8009140:	f001 fb3c 	bl	800a7bc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009144:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009146:	f000 f897 	bl	8009278 <prvGetDisinheritPriorityAfterTimeout>
 800914a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800914c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009152:	4618      	mov	r0, r3
 8009154:	f001 f910 	bl	800a378 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009158:	f001 fb64 	bl	800a824 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800915c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800915e:	4618      	mov	r0, r3
 8009160:	3738      	adds	r7, #56	; 0x38
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	e000ed04 	.word	0xe000ed04

0800916c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b08e      	sub	sp, #56	; 0x38
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800917c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917e:	2b00      	cmp	r3, #0
 8009180:	d10c      	bne.n	800919c <xQueueReceiveFromISR+0x30>
	__asm volatile
 8009182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009186:	b672      	cpsid	i
 8009188:	f383 8811 	msr	BASEPRI, r3
 800918c:	f3bf 8f6f 	isb	sy
 8009190:	f3bf 8f4f 	dsb	sy
 8009194:	b662      	cpsie	i
 8009196:	623b      	str	r3, [r7, #32]
}
 8009198:	bf00      	nop
 800919a:	e7fe      	b.n	800919a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d103      	bne.n	80091aa <xQueueReceiveFromISR+0x3e>
 80091a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d101      	bne.n	80091ae <xQueueReceiveFromISR+0x42>
 80091aa:	2301      	movs	r3, #1
 80091ac:	e000      	b.n	80091b0 <xQueueReceiveFromISR+0x44>
 80091ae:	2300      	movs	r3, #0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d10c      	bne.n	80091ce <xQueueReceiveFromISR+0x62>
	__asm volatile
 80091b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b8:	b672      	cpsid	i
 80091ba:	f383 8811 	msr	BASEPRI, r3
 80091be:	f3bf 8f6f 	isb	sy
 80091c2:	f3bf 8f4f 	dsb	sy
 80091c6:	b662      	cpsie	i
 80091c8:	61fb      	str	r3, [r7, #28]
}
 80091ca:	bf00      	nop
 80091cc:	e7fe      	b.n	80091cc <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80091ce:	f001 fbdd 	bl	800a98c <vPortValidateInterruptPriority>
	__asm volatile
 80091d2:	f3ef 8211 	mrs	r2, BASEPRI
 80091d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091da:	b672      	cpsid	i
 80091dc:	f383 8811 	msr	BASEPRI, r3
 80091e0:	f3bf 8f6f 	isb	sy
 80091e4:	f3bf 8f4f 	dsb	sy
 80091e8:	b662      	cpsie	i
 80091ea:	61ba      	str	r2, [r7, #24]
 80091ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80091ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80091f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80091f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d02f      	beq.n	800925e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80091fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009200:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009204:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009208:	68b9      	ldr	r1, [r7, #8]
 800920a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800920c:	f000 f8b6 	bl	800937c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009212:	1e5a      	subs	r2, r3, #1
 8009214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009216:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009218:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800921c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009220:	d112      	bne.n	8009248 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009224:	691b      	ldr	r3, [r3, #16]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d016      	beq.n	8009258 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800922a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800922c:	3310      	adds	r3, #16
 800922e:	4618      	mov	r0, r3
 8009230:	f000 fdb2 	bl	8009d98 <xTaskRemoveFromEventList>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d00e      	beq.n	8009258 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00b      	beq.n	8009258 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2201      	movs	r2, #1
 8009244:	601a      	str	r2, [r3, #0]
 8009246:	e007      	b.n	8009258 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800924c:	3301      	adds	r3, #1
 800924e:	b2db      	uxtb	r3, r3
 8009250:	b25a      	sxtb	r2, r3
 8009252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009258:	2301      	movs	r3, #1
 800925a:	637b      	str	r3, [r7, #52]	; 0x34
 800925c:	e001      	b.n	8009262 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800925e:	2300      	movs	r3, #0
 8009260:	637b      	str	r3, [r7, #52]	; 0x34
 8009262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009264:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	f383 8811 	msr	BASEPRI, r3
}
 800926c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800926e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009270:	4618      	mov	r0, r3
 8009272:	3738      	adds	r7, #56	; 0x38
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009284:	2b00      	cmp	r3, #0
 8009286:	d006      	beq.n	8009296 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f1c3 0307 	rsb	r3, r3, #7
 8009292:	60fb      	str	r3, [r7, #12]
 8009294:	e001      	b.n	800929a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009296:	2300      	movs	r3, #0
 8009298:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800929a:	68fb      	ldr	r3, [r7, #12]
	}
 800929c:	4618      	mov	r0, r3
 800929e:	3714      	adds	r7, #20
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b086      	sub	sp, #24
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80092b4:	2300      	movs	r3, #0
 80092b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d10d      	bne.n	80092e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d14d      	bne.n	800936a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	4618      	mov	r0, r3
 80092d4:	f000 ffc6 	bl	800a264 <xTaskPriorityDisinherit>
 80092d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2200      	movs	r2, #0
 80092de:	609a      	str	r2, [r3, #8]
 80092e0:	e043      	b.n	800936a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d119      	bne.n	800931c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	6858      	ldr	r0, [r3, #4]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092f0:	461a      	mov	r2, r3
 80092f2:	68b9      	ldr	r1, [r7, #8]
 80092f4:	f00e fea2 	bl	801803c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	685a      	ldr	r2, [r3, #4]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009300:	441a      	add	r2, r3
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	685a      	ldr	r2, [r3, #4]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	429a      	cmp	r2, r3
 8009310:	d32b      	bcc.n	800936a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	605a      	str	r2, [r3, #4]
 800931a:	e026      	b.n	800936a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	68d8      	ldr	r0, [r3, #12]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009324:	461a      	mov	r2, r3
 8009326:	68b9      	ldr	r1, [r7, #8]
 8009328:	f00e fe88 	bl	801803c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	68da      	ldr	r2, [r3, #12]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009334:	425b      	negs	r3, r3
 8009336:	441a      	add	r2, r3
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	68da      	ldr	r2, [r3, #12]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	429a      	cmp	r2, r3
 8009346:	d207      	bcs.n	8009358 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	689a      	ldr	r2, [r3, #8]
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009350:	425b      	negs	r3, r3
 8009352:	441a      	add	r2, r3
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2b02      	cmp	r3, #2
 800935c:	d105      	bne.n	800936a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d002      	beq.n	800936a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	3b01      	subs	r3, #1
 8009368:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	1c5a      	adds	r2, r3, #1
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009372:	697b      	ldr	r3, [r7, #20]
}
 8009374:	4618      	mov	r0, r3
 8009376:	3718      	adds	r7, #24
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800938a:	2b00      	cmp	r3, #0
 800938c:	d018      	beq.n	80093c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	68da      	ldr	r2, [r3, #12]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009396:	441a      	add	r2, r3
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	68da      	ldr	r2, [r3, #12]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d303      	bcc.n	80093b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	68d9      	ldr	r1, [r3, #12]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b8:	461a      	mov	r2, r3
 80093ba:	6838      	ldr	r0, [r7, #0]
 80093bc:	f00e fe3e 	bl	801803c <memcpy>
	}
}
 80093c0:	bf00      	nop
 80093c2:	3708      	adds	r7, #8
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80093d0:	f001 f9f4 	bl	800a7bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093dc:	e011      	b.n	8009402 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d012      	beq.n	800940c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	3324      	adds	r3, #36	; 0x24
 80093ea:	4618      	mov	r0, r3
 80093ec:	f000 fcd4 	bl	8009d98 <xTaskRemoveFromEventList>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d001      	beq.n	80093fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80093f6:	f000 fdaf 	bl	8009f58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80093fa:	7bfb      	ldrb	r3, [r7, #15]
 80093fc:	3b01      	subs	r3, #1
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009406:	2b00      	cmp	r3, #0
 8009408:	dce9      	bgt.n	80093de <prvUnlockQueue+0x16>
 800940a:	e000      	b.n	800940e <prvUnlockQueue+0x46>
					break;
 800940c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	22ff      	movs	r2, #255	; 0xff
 8009412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009416:	f001 fa05 	bl	800a824 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800941a:	f001 f9cf 	bl	800a7bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009424:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009426:	e011      	b.n	800944c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d012      	beq.n	8009456 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	3310      	adds	r3, #16
 8009434:	4618      	mov	r0, r3
 8009436:	f000 fcaf 	bl	8009d98 <xTaskRemoveFromEventList>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d001      	beq.n	8009444 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009440:	f000 fd8a 	bl	8009f58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009444:	7bbb      	ldrb	r3, [r7, #14]
 8009446:	3b01      	subs	r3, #1
 8009448:	b2db      	uxtb	r3, r3
 800944a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800944c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009450:	2b00      	cmp	r3, #0
 8009452:	dce9      	bgt.n	8009428 <prvUnlockQueue+0x60>
 8009454:	e000      	b.n	8009458 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009456:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	22ff      	movs	r2, #255	; 0xff
 800945c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009460:	f001 f9e0 	bl	800a824 <vPortExitCritical>
}
 8009464:	bf00      	nop
 8009466:	3710      	adds	r7, #16
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009474:	f001 f9a2 	bl	800a7bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800947c:	2b00      	cmp	r3, #0
 800947e:	d102      	bne.n	8009486 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009480:	2301      	movs	r3, #1
 8009482:	60fb      	str	r3, [r7, #12]
 8009484:	e001      	b.n	800948a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009486:	2300      	movs	r3, #0
 8009488:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800948a:	f001 f9cb 	bl	800a824 <vPortExitCritical>

	return xReturn;
 800948e:	68fb      	ldr	r3, [r7, #12]
}
 8009490:	4618      	mov	r0, r3
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80094a0:	f001 f98c 	bl	800a7bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d102      	bne.n	80094b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80094b0:	2301      	movs	r3, #1
 80094b2:	60fb      	str	r3, [r7, #12]
 80094b4:	e001      	b.n	80094ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80094b6:	2300      	movs	r3, #0
 80094b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80094ba:	f001 f9b3 	bl	800a824 <vPortExitCritical>

	return xReturn;
 80094be:	68fb      	ldr	r3, [r7, #12]
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b08e      	sub	sp, #56	; 0x38
 80094cc:	af04      	add	r7, sp, #16
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
 80094d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80094d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d10c      	bne.n	80094f6 <xTaskCreateStatic+0x2e>
	__asm volatile
 80094dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e0:	b672      	cpsid	i
 80094e2:	f383 8811 	msr	BASEPRI, r3
 80094e6:	f3bf 8f6f 	isb	sy
 80094ea:	f3bf 8f4f 	dsb	sy
 80094ee:	b662      	cpsie	i
 80094f0:	623b      	str	r3, [r7, #32]
}
 80094f2:	bf00      	nop
 80094f4:	e7fe      	b.n	80094f4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80094f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d10c      	bne.n	8009516 <xTaskCreateStatic+0x4e>
	__asm volatile
 80094fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009500:	b672      	cpsid	i
 8009502:	f383 8811 	msr	BASEPRI, r3
 8009506:	f3bf 8f6f 	isb	sy
 800950a:	f3bf 8f4f 	dsb	sy
 800950e:	b662      	cpsie	i
 8009510:	61fb      	str	r3, [r7, #28]
}
 8009512:	bf00      	nop
 8009514:	e7fe      	b.n	8009514 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009516:	23b4      	movs	r3, #180	; 0xb4
 8009518:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	2bb4      	cmp	r3, #180	; 0xb4
 800951e:	d00c      	beq.n	800953a <xTaskCreateStatic+0x72>
	__asm volatile
 8009520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009524:	b672      	cpsid	i
 8009526:	f383 8811 	msr	BASEPRI, r3
 800952a:	f3bf 8f6f 	isb	sy
 800952e:	f3bf 8f4f 	dsb	sy
 8009532:	b662      	cpsie	i
 8009534:	61bb      	str	r3, [r7, #24]
}
 8009536:	bf00      	nop
 8009538:	e7fe      	b.n	8009538 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800953a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800953c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953e:	2b00      	cmp	r3, #0
 8009540:	d01e      	beq.n	8009580 <xTaskCreateStatic+0xb8>
 8009542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009544:	2b00      	cmp	r3, #0
 8009546:	d01b      	beq.n	8009580 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800954c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009550:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009554:	2202      	movs	r2, #2
 8009556:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800955a:	2300      	movs	r3, #0
 800955c:	9303      	str	r3, [sp, #12]
 800955e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009560:	9302      	str	r3, [sp, #8]
 8009562:	f107 0314 	add.w	r3, r7, #20
 8009566:	9301      	str	r3, [sp, #4]
 8009568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956a:	9300      	str	r3, [sp, #0]
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	68b9      	ldr	r1, [r7, #8]
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f000 f850 	bl	8009618 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009578:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800957a:	f000 f8ed 	bl	8009758 <prvAddNewTaskToReadyList>
 800957e:	e001      	b.n	8009584 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8009580:	2300      	movs	r3, #0
 8009582:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009584:	697b      	ldr	r3, [r7, #20]
	}
 8009586:	4618      	mov	r0, r3
 8009588:	3728      	adds	r7, #40	; 0x28
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800958e:	b580      	push	{r7, lr}
 8009590:	b08c      	sub	sp, #48	; 0x30
 8009592:	af04      	add	r7, sp, #16
 8009594:	60f8      	str	r0, [r7, #12]
 8009596:	60b9      	str	r1, [r7, #8]
 8009598:	603b      	str	r3, [r7, #0]
 800959a:	4613      	mov	r3, r2
 800959c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800959e:	88fb      	ldrh	r3, [r7, #6]
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	4618      	mov	r0, r3
 80095a4:	f001 fa36 	bl	800aa14 <pvPortMalloc>
 80095a8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d00e      	beq.n	80095ce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80095b0:	20b4      	movs	r0, #180	; 0xb4
 80095b2:	f001 fa2f 	bl	800aa14 <pvPortMalloc>
 80095b6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80095b8:	69fb      	ldr	r3, [r7, #28]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d003      	beq.n	80095c6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80095be:	69fb      	ldr	r3, [r7, #28]
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	631a      	str	r2, [r3, #48]	; 0x30
 80095c4:	e005      	b.n	80095d2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80095c6:	6978      	ldr	r0, [r7, #20]
 80095c8:	f001 faee 	bl	800aba8 <vPortFree>
 80095cc:	e001      	b.n	80095d2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80095ce:	2300      	movs	r3, #0
 80095d0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d017      	beq.n	8009608 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	2200      	movs	r2, #0
 80095dc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80095e0:	88fa      	ldrh	r2, [r7, #6]
 80095e2:	2300      	movs	r3, #0
 80095e4:	9303      	str	r3, [sp, #12]
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	9302      	str	r3, [sp, #8]
 80095ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ec:	9301      	str	r3, [sp, #4]
 80095ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f0:	9300      	str	r3, [sp, #0]
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	68b9      	ldr	r1, [r7, #8]
 80095f6:	68f8      	ldr	r0, [r7, #12]
 80095f8:	f000 f80e 	bl	8009618 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095fc:	69f8      	ldr	r0, [r7, #28]
 80095fe:	f000 f8ab 	bl	8009758 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009602:	2301      	movs	r3, #1
 8009604:	61bb      	str	r3, [r7, #24]
 8009606:	e002      	b.n	800960e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800960c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800960e:	69bb      	ldr	r3, [r7, #24]
	}
 8009610:	4618      	mov	r0, r3
 8009612:	3720      	adds	r7, #32
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b088      	sub	sp, #32
 800961c:	af00      	add	r7, sp, #0
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	60b9      	str	r1, [r7, #8]
 8009622:	607a      	str	r2, [r7, #4]
 8009624:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800962a:	6879      	ldr	r1, [r7, #4]
 800962c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009630:	440b      	add	r3, r1
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	4413      	add	r3, r2
 8009636:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009638:	69bb      	ldr	r3, [r7, #24]
 800963a:	f023 0307 	bic.w	r3, r3, #7
 800963e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	f003 0307 	and.w	r3, r3, #7
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00c      	beq.n	8009664 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800964a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964e:	b672      	cpsid	i
 8009650:	f383 8811 	msr	BASEPRI, r3
 8009654:	f3bf 8f6f 	isb	sy
 8009658:	f3bf 8f4f 	dsb	sy
 800965c:	b662      	cpsie	i
 800965e:	617b      	str	r3, [r7, #20]
}
 8009660:	bf00      	nop
 8009662:	e7fe      	b.n	8009662 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d01f      	beq.n	80096aa <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800966a:	2300      	movs	r3, #0
 800966c:	61fb      	str	r3, [r7, #28]
 800966e:	e012      	b.n	8009696 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009670:	68ba      	ldr	r2, [r7, #8]
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	4413      	add	r3, r2
 8009676:	7819      	ldrb	r1, [r3, #0]
 8009678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800967a:	69fb      	ldr	r3, [r7, #28]
 800967c:	4413      	add	r3, r2
 800967e:	3334      	adds	r3, #52	; 0x34
 8009680:	460a      	mov	r2, r1
 8009682:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009684:	68ba      	ldr	r2, [r7, #8]
 8009686:	69fb      	ldr	r3, [r7, #28]
 8009688:	4413      	add	r3, r2
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d006      	beq.n	800969e <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	3301      	adds	r3, #1
 8009694:	61fb      	str	r3, [r7, #28]
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	2b0f      	cmp	r3, #15
 800969a:	d9e9      	bls.n	8009670 <prvInitialiseNewTask+0x58>
 800969c:	e000      	b.n	80096a0 <prvInitialiseNewTask+0x88>
			{
				break;
 800969e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80096a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a2:	2200      	movs	r2, #0
 80096a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80096a8:	e003      	b.n	80096b2 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80096aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ac:	2200      	movs	r2, #0
 80096ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80096b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b4:	2b06      	cmp	r3, #6
 80096b6:	d901      	bls.n	80096bc <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80096b8:	2306      	movs	r3, #6
 80096ba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80096bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096c0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80096c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096c6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80096c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ca:	2200      	movs	r2, #0
 80096cc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80096ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d0:	3304      	adds	r3, #4
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7fe fee6 	bl	80084a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80096d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096da:	3318      	adds	r3, #24
 80096dc:	4618      	mov	r0, r3
 80096de:	f7fe fee1 	bl	80084a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80096e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ea:	f1c3 0207 	rsb	r2, r3, #7
 80096ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80096f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096f6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80096f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096fa:	2200      	movs	r2, #0
 80096fc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009702:	2200      	movs	r2, #0
 8009704:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800970a:	334c      	adds	r3, #76	; 0x4c
 800970c:	2260      	movs	r2, #96	; 0x60
 800970e:	2100      	movs	r1, #0
 8009710:	4618      	mov	r0, r3
 8009712:	f00e fcbb 	bl	801808c <memset>
 8009716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009718:	4a0c      	ldr	r2, [pc, #48]	; (800974c <prvInitialiseNewTask+0x134>)
 800971a:	651a      	str	r2, [r3, #80]	; 0x50
 800971c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971e:	4a0c      	ldr	r2, [pc, #48]	; (8009750 <prvInitialiseNewTask+0x138>)
 8009720:	655a      	str	r2, [r3, #84]	; 0x54
 8009722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009724:	4a0b      	ldr	r2, [pc, #44]	; (8009754 <prvInitialiseNewTask+0x13c>)
 8009726:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009728:	683a      	ldr	r2, [r7, #0]
 800972a:	68f9      	ldr	r1, [r7, #12]
 800972c:	69b8      	ldr	r0, [r7, #24]
 800972e:	f000 ff3b 	bl	800a5a8 <pxPortInitialiseStack>
 8009732:	4602      	mov	r2, r0
 8009734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009736:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973a:	2b00      	cmp	r3, #0
 800973c:	d002      	beq.n	8009744 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800973e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009742:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009744:	bf00      	nop
 8009746:	3720      	adds	r7, #32
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	08021660 	.word	0x08021660
 8009750:	08021680 	.word	0x08021680
 8009754:	08021640 	.word	0x08021640

08009758 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009760:	f001 f82c 	bl	800a7bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009764:	4b2a      	ldr	r3, [pc, #168]	; (8009810 <prvAddNewTaskToReadyList+0xb8>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	3301      	adds	r3, #1
 800976a:	4a29      	ldr	r2, [pc, #164]	; (8009810 <prvAddNewTaskToReadyList+0xb8>)
 800976c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800976e:	4b29      	ldr	r3, [pc, #164]	; (8009814 <prvAddNewTaskToReadyList+0xbc>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d109      	bne.n	800978a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009776:	4a27      	ldr	r2, [pc, #156]	; (8009814 <prvAddNewTaskToReadyList+0xbc>)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800977c:	4b24      	ldr	r3, [pc, #144]	; (8009810 <prvAddNewTaskToReadyList+0xb8>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2b01      	cmp	r3, #1
 8009782:	d110      	bne.n	80097a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009784:	f000 fc0c 	bl	8009fa0 <prvInitialiseTaskLists>
 8009788:	e00d      	b.n	80097a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800978a:	4b23      	ldr	r3, [pc, #140]	; (8009818 <prvAddNewTaskToReadyList+0xc0>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d109      	bne.n	80097a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009792:	4b20      	ldr	r3, [pc, #128]	; (8009814 <prvAddNewTaskToReadyList+0xbc>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979c:	429a      	cmp	r2, r3
 800979e:	d802      	bhi.n	80097a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80097a0:	4a1c      	ldr	r2, [pc, #112]	; (8009814 <prvAddNewTaskToReadyList+0xbc>)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80097a6:	4b1d      	ldr	r3, [pc, #116]	; (800981c <prvAddNewTaskToReadyList+0xc4>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	3301      	adds	r3, #1
 80097ac:	4a1b      	ldr	r2, [pc, #108]	; (800981c <prvAddNewTaskToReadyList+0xc4>)
 80097ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b4:	2201      	movs	r2, #1
 80097b6:	409a      	lsls	r2, r3
 80097b8:	4b19      	ldr	r3, [pc, #100]	; (8009820 <prvAddNewTaskToReadyList+0xc8>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4313      	orrs	r3, r2
 80097be:	4a18      	ldr	r2, [pc, #96]	; (8009820 <prvAddNewTaskToReadyList+0xc8>)
 80097c0:	6013      	str	r3, [r2, #0]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097c6:	4613      	mov	r3, r2
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	4413      	add	r3, r2
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	4a15      	ldr	r2, [pc, #84]	; (8009824 <prvAddNewTaskToReadyList+0xcc>)
 80097d0:	441a      	add	r2, r3
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	3304      	adds	r3, #4
 80097d6:	4619      	mov	r1, r3
 80097d8:	4610      	mov	r0, r2
 80097da:	f7fe fe70 	bl	80084be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80097de:	f001 f821 	bl	800a824 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80097e2:	4b0d      	ldr	r3, [pc, #52]	; (8009818 <prvAddNewTaskToReadyList+0xc0>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d00e      	beq.n	8009808 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80097ea:	4b0a      	ldr	r3, [pc, #40]	; (8009814 <prvAddNewTaskToReadyList+0xbc>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d207      	bcs.n	8009808 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80097f8:	4b0b      	ldr	r3, [pc, #44]	; (8009828 <prvAddNewTaskToReadyList+0xd0>)
 80097fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097fe:	601a      	str	r2, [r3, #0]
 8009800:	f3bf 8f4f 	dsb	sy
 8009804:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009808:	bf00      	nop
 800980a:	3708      	adds	r7, #8
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}
 8009810:	20001194 	.word	0x20001194
 8009814:	20001094 	.word	0x20001094
 8009818:	200011a0 	.word	0x200011a0
 800981c:	200011b0 	.word	0x200011b0
 8009820:	2000119c 	.word	0x2000119c
 8009824:	20001098 	.word	0x20001098
 8009828:	e000ed04 	.word	0xe000ed04

0800982c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009834:	2300      	movs	r3, #0
 8009836:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d019      	beq.n	8009872 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800983e:	4b14      	ldr	r3, [pc, #80]	; (8009890 <vTaskDelay+0x64>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d00c      	beq.n	8009860 <vTaskDelay+0x34>
	__asm volatile
 8009846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984a:	b672      	cpsid	i
 800984c:	f383 8811 	msr	BASEPRI, r3
 8009850:	f3bf 8f6f 	isb	sy
 8009854:	f3bf 8f4f 	dsb	sy
 8009858:	b662      	cpsie	i
 800985a:	60bb      	str	r3, [r7, #8]
}
 800985c:	bf00      	nop
 800985e:	e7fe      	b.n	800985e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8009860:	f000 f888 	bl	8009974 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009864:	2100      	movs	r1, #0
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 fe38 	bl	800a4dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800986c:	f000 f890 	bl	8009990 <xTaskResumeAll>
 8009870:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d107      	bne.n	8009888 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8009878:	4b06      	ldr	r3, [pc, #24]	; (8009894 <vTaskDelay+0x68>)
 800987a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800987e:	601a      	str	r2, [r3, #0]
 8009880:	f3bf 8f4f 	dsb	sy
 8009884:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009888:	bf00      	nop
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	200011bc 	.word	0x200011bc
 8009894:	e000ed04 	.word	0xe000ed04

08009898 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b08a      	sub	sp, #40	; 0x28
 800989c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800989e:	2300      	movs	r3, #0
 80098a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80098a2:	2300      	movs	r3, #0
 80098a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80098a6:	463a      	mov	r2, r7
 80098a8:	1d39      	adds	r1, r7, #4
 80098aa:	f107 0308 	add.w	r3, r7, #8
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7f7 ff0a 	bl	80016c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80098b4:	6839      	ldr	r1, [r7, #0]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	68ba      	ldr	r2, [r7, #8]
 80098ba:	9202      	str	r2, [sp, #8]
 80098bc:	9301      	str	r3, [sp, #4]
 80098be:	2300      	movs	r3, #0
 80098c0:	9300      	str	r3, [sp, #0]
 80098c2:	2300      	movs	r3, #0
 80098c4:	460a      	mov	r2, r1
 80098c6:	4923      	ldr	r1, [pc, #140]	; (8009954 <vTaskStartScheduler+0xbc>)
 80098c8:	4823      	ldr	r0, [pc, #140]	; (8009958 <vTaskStartScheduler+0xc0>)
 80098ca:	f7ff fdfd 	bl	80094c8 <xTaskCreateStatic>
 80098ce:	4603      	mov	r3, r0
 80098d0:	4a22      	ldr	r2, [pc, #136]	; (800995c <vTaskStartScheduler+0xc4>)
 80098d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80098d4:	4b21      	ldr	r3, [pc, #132]	; (800995c <vTaskStartScheduler+0xc4>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d002      	beq.n	80098e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80098dc:	2301      	movs	r3, #1
 80098de:	617b      	str	r3, [r7, #20]
 80098e0:	e001      	b.n	80098e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80098e2:	2300      	movs	r3, #0
 80098e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d11d      	bne.n	8009928 <vTaskStartScheduler+0x90>
	__asm volatile
 80098ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f0:	b672      	cpsid	i
 80098f2:	f383 8811 	msr	BASEPRI, r3
 80098f6:	f3bf 8f6f 	isb	sy
 80098fa:	f3bf 8f4f 	dsb	sy
 80098fe:	b662      	cpsie	i
 8009900:	613b      	str	r3, [r7, #16]
}
 8009902:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009904:	4b16      	ldr	r3, [pc, #88]	; (8009960 <vTaskStartScheduler+0xc8>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	334c      	adds	r3, #76	; 0x4c
 800990a:	4a16      	ldr	r2, [pc, #88]	; (8009964 <vTaskStartScheduler+0xcc>)
 800990c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800990e:	4b16      	ldr	r3, [pc, #88]	; (8009968 <vTaskStartScheduler+0xd0>)
 8009910:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009914:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009916:	4b15      	ldr	r3, [pc, #84]	; (800996c <vTaskStartScheduler+0xd4>)
 8009918:	2201      	movs	r2, #1
 800991a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800991c:	4b14      	ldr	r3, [pc, #80]	; (8009970 <vTaskStartScheduler+0xd8>)
 800991e:	2200      	movs	r2, #0
 8009920:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009922:	f000 fecd 	bl	800a6c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009926:	e010      	b.n	800994a <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800992e:	d10c      	bne.n	800994a <vTaskStartScheduler+0xb2>
	__asm volatile
 8009930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009934:	b672      	cpsid	i
 8009936:	f383 8811 	msr	BASEPRI, r3
 800993a:	f3bf 8f6f 	isb	sy
 800993e:	f3bf 8f4f 	dsb	sy
 8009942:	b662      	cpsie	i
 8009944:	60fb      	str	r3, [r7, #12]
}
 8009946:	bf00      	nop
 8009948:	e7fe      	b.n	8009948 <vTaskStartScheduler+0xb0>
}
 800994a:	bf00      	nop
 800994c:	3718      	adds	r7, #24
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	0801a41c 	.word	0x0801a41c
 8009958:	08009f71 	.word	0x08009f71
 800995c:	200011b8 	.word	0x200011b8
 8009960:	20001094 	.word	0x20001094
 8009964:	20000730 	.word	0x20000730
 8009968:	200011b4 	.word	0x200011b4
 800996c:	200011a0 	.word	0x200011a0
 8009970:	20001198 	.word	0x20001198

08009974 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009974:	b480      	push	{r7}
 8009976:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009978:	4b04      	ldr	r3, [pc, #16]	; (800998c <vTaskSuspendAll+0x18>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	3301      	adds	r3, #1
 800997e:	4a03      	ldr	r2, [pc, #12]	; (800998c <vTaskSuspendAll+0x18>)
 8009980:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8009982:	bf00      	nop
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr
 800998c:	200011bc 	.word	0x200011bc

08009990 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009996:	2300      	movs	r3, #0
 8009998:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800999a:	2300      	movs	r3, #0
 800999c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800999e:	4b42      	ldr	r3, [pc, #264]	; (8009aa8 <xTaskResumeAll+0x118>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d10c      	bne.n	80099c0 <xTaskResumeAll+0x30>
	__asm volatile
 80099a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099aa:	b672      	cpsid	i
 80099ac:	f383 8811 	msr	BASEPRI, r3
 80099b0:	f3bf 8f6f 	isb	sy
 80099b4:	f3bf 8f4f 	dsb	sy
 80099b8:	b662      	cpsie	i
 80099ba:	603b      	str	r3, [r7, #0]
}
 80099bc:	bf00      	nop
 80099be:	e7fe      	b.n	80099be <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80099c0:	f000 fefc 	bl	800a7bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80099c4:	4b38      	ldr	r3, [pc, #224]	; (8009aa8 <xTaskResumeAll+0x118>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	3b01      	subs	r3, #1
 80099ca:	4a37      	ldr	r2, [pc, #220]	; (8009aa8 <xTaskResumeAll+0x118>)
 80099cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80099ce:	4b36      	ldr	r3, [pc, #216]	; (8009aa8 <xTaskResumeAll+0x118>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d161      	bne.n	8009a9a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80099d6:	4b35      	ldr	r3, [pc, #212]	; (8009aac <xTaskResumeAll+0x11c>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d05d      	beq.n	8009a9a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80099de:	e02e      	b.n	8009a3e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099e0:	4b33      	ldr	r3, [pc, #204]	; (8009ab0 <xTaskResumeAll+0x120>)
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	68db      	ldr	r3, [r3, #12]
 80099e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	3318      	adds	r3, #24
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7fe fdc3 	bl	8008578 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	3304      	adds	r3, #4
 80099f6:	4618      	mov	r0, r3
 80099f8:	f7fe fdbe 	bl	8008578 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a00:	2201      	movs	r2, #1
 8009a02:	409a      	lsls	r2, r3
 8009a04:	4b2b      	ldr	r3, [pc, #172]	; (8009ab4 <xTaskResumeAll+0x124>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	4a2a      	ldr	r2, [pc, #168]	; (8009ab4 <xTaskResumeAll+0x124>)
 8009a0c:	6013      	str	r3, [r2, #0]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a12:	4613      	mov	r3, r2
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	4413      	add	r3, r2
 8009a18:	009b      	lsls	r3, r3, #2
 8009a1a:	4a27      	ldr	r2, [pc, #156]	; (8009ab8 <xTaskResumeAll+0x128>)
 8009a1c:	441a      	add	r2, r3
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	3304      	adds	r3, #4
 8009a22:	4619      	mov	r1, r3
 8009a24:	4610      	mov	r0, r2
 8009a26:	f7fe fd4a 	bl	80084be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a2e:	4b23      	ldr	r3, [pc, #140]	; (8009abc <xTaskResumeAll+0x12c>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d302      	bcc.n	8009a3e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009a38:	4b21      	ldr	r3, [pc, #132]	; (8009ac0 <xTaskResumeAll+0x130>)
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009a3e:	4b1c      	ldr	r3, [pc, #112]	; (8009ab0 <xTaskResumeAll+0x120>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d1cc      	bne.n	80099e0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d001      	beq.n	8009a50 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009a4c:	f000 fb4c 	bl	800a0e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009a50:	4b1c      	ldr	r3, [pc, #112]	; (8009ac4 <xTaskResumeAll+0x134>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d010      	beq.n	8009a7e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009a5c:	f000 f858 	bl	8009b10 <xTaskIncrementTick>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d002      	beq.n	8009a6c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009a66:	4b16      	ldr	r3, [pc, #88]	; (8009ac0 <xTaskResumeAll+0x130>)
 8009a68:	2201      	movs	r2, #1
 8009a6a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d1f1      	bne.n	8009a5c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8009a78:	4b12      	ldr	r3, [pc, #72]	; (8009ac4 <xTaskResumeAll+0x134>)
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009a7e:	4b10      	ldr	r3, [pc, #64]	; (8009ac0 <xTaskResumeAll+0x130>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d009      	beq.n	8009a9a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009a86:	2301      	movs	r3, #1
 8009a88:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009a8a:	4b0f      	ldr	r3, [pc, #60]	; (8009ac8 <xTaskResumeAll+0x138>)
 8009a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a90:	601a      	str	r2, [r3, #0]
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a9a:	f000 fec3 	bl	800a824 <vPortExitCritical>

	return xAlreadyYielded;
 8009a9e:	68bb      	ldr	r3, [r7, #8]
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3710      	adds	r7, #16
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	200011bc 	.word	0x200011bc
 8009aac:	20001194 	.word	0x20001194
 8009ab0:	20001154 	.word	0x20001154
 8009ab4:	2000119c 	.word	0x2000119c
 8009ab8:	20001098 	.word	0x20001098
 8009abc:	20001094 	.word	0x20001094
 8009ac0:	200011a8 	.word	0x200011a8
 8009ac4:	200011a4 	.word	0x200011a4
 8009ac8:	e000ed04 	.word	0xe000ed04

08009acc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009ad2:	4b05      	ldr	r3, [pc, #20]	; (8009ae8 <xTaskGetTickCount+0x1c>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009ad8:	687b      	ldr	r3, [r7, #4]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	370c      	adds	r7, #12
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr
 8009ae6:	bf00      	nop
 8009ae8:	20001198 	.word	0x20001198

08009aec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009af2:	f000 ff4b 	bl	800a98c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009af6:	2300      	movs	r3, #0
 8009af8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009afa:	4b04      	ldr	r3, [pc, #16]	; (8009b0c <xTaskGetTickCountFromISR+0x20>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b00:	683b      	ldr	r3, [r7, #0]
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3708      	adds	r7, #8
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
 8009b0a:	bf00      	nop
 8009b0c:	20001198 	.word	0x20001198

08009b10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b086      	sub	sp, #24
 8009b14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009b16:	2300      	movs	r3, #0
 8009b18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b1a:	4b4f      	ldr	r3, [pc, #316]	; (8009c58 <xTaskIncrementTick+0x148>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	f040 808a 	bne.w	8009c38 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009b24:	4b4d      	ldr	r3, [pc, #308]	; (8009c5c <xTaskIncrementTick+0x14c>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009b2c:	4a4b      	ldr	r2, [pc, #300]	; (8009c5c <xTaskIncrementTick+0x14c>)
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d122      	bne.n	8009b7e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8009b38:	4b49      	ldr	r3, [pc, #292]	; (8009c60 <xTaskIncrementTick+0x150>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00c      	beq.n	8009b5c <xTaskIncrementTick+0x4c>
	__asm volatile
 8009b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b46:	b672      	cpsid	i
 8009b48:	f383 8811 	msr	BASEPRI, r3
 8009b4c:	f3bf 8f6f 	isb	sy
 8009b50:	f3bf 8f4f 	dsb	sy
 8009b54:	b662      	cpsie	i
 8009b56:	603b      	str	r3, [r7, #0]
}
 8009b58:	bf00      	nop
 8009b5a:	e7fe      	b.n	8009b5a <xTaskIncrementTick+0x4a>
 8009b5c:	4b40      	ldr	r3, [pc, #256]	; (8009c60 <xTaskIncrementTick+0x150>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	60fb      	str	r3, [r7, #12]
 8009b62:	4b40      	ldr	r3, [pc, #256]	; (8009c64 <xTaskIncrementTick+0x154>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a3e      	ldr	r2, [pc, #248]	; (8009c60 <xTaskIncrementTick+0x150>)
 8009b68:	6013      	str	r3, [r2, #0]
 8009b6a:	4a3e      	ldr	r2, [pc, #248]	; (8009c64 <xTaskIncrementTick+0x154>)
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6013      	str	r3, [r2, #0]
 8009b70:	4b3d      	ldr	r3, [pc, #244]	; (8009c68 <xTaskIncrementTick+0x158>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	3301      	adds	r3, #1
 8009b76:	4a3c      	ldr	r2, [pc, #240]	; (8009c68 <xTaskIncrementTick+0x158>)
 8009b78:	6013      	str	r3, [r2, #0]
 8009b7a:	f000 fab5 	bl	800a0e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009b7e:	4b3b      	ldr	r3, [pc, #236]	; (8009c6c <xTaskIncrementTick+0x15c>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	693a      	ldr	r2, [r7, #16]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d348      	bcc.n	8009c1a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b88:	4b35      	ldr	r3, [pc, #212]	; (8009c60 <xTaskIncrementTick+0x150>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d104      	bne.n	8009b9c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b92:	4b36      	ldr	r3, [pc, #216]	; (8009c6c <xTaskIncrementTick+0x15c>)
 8009b94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b98:	601a      	str	r2, [r3, #0]
					break;
 8009b9a:	e03e      	b.n	8009c1a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b9c:	4b30      	ldr	r3, [pc, #192]	; (8009c60 <xTaskIncrementTick+0x150>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009bac:	693a      	ldr	r2, [r7, #16]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	d203      	bcs.n	8009bbc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009bb4:	4a2d      	ldr	r2, [pc, #180]	; (8009c6c <xTaskIncrementTick+0x15c>)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009bba:	e02e      	b.n	8009c1a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	3304      	adds	r3, #4
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f7fe fcd9 	bl	8008578 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d004      	beq.n	8009bd8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	3318      	adds	r3, #24
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7fe fcd0 	bl	8008578 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bdc:	2201      	movs	r2, #1
 8009bde:	409a      	lsls	r2, r3
 8009be0:	4b23      	ldr	r3, [pc, #140]	; (8009c70 <xTaskIncrementTick+0x160>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4313      	orrs	r3, r2
 8009be6:	4a22      	ldr	r2, [pc, #136]	; (8009c70 <xTaskIncrementTick+0x160>)
 8009be8:	6013      	str	r3, [r2, #0]
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bee:	4613      	mov	r3, r2
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	4413      	add	r3, r2
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	4a1f      	ldr	r2, [pc, #124]	; (8009c74 <xTaskIncrementTick+0x164>)
 8009bf8:	441a      	add	r2, r3
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	3304      	adds	r3, #4
 8009bfe:	4619      	mov	r1, r3
 8009c00:	4610      	mov	r0, r2
 8009c02:	f7fe fc5c 	bl	80084be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c0a:	4b1b      	ldr	r3, [pc, #108]	; (8009c78 <xTaskIncrementTick+0x168>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c10:	429a      	cmp	r2, r3
 8009c12:	d3b9      	bcc.n	8009b88 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8009c14:	2301      	movs	r3, #1
 8009c16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c18:	e7b6      	b.n	8009b88 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009c1a:	4b17      	ldr	r3, [pc, #92]	; (8009c78 <xTaskIncrementTick+0x168>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c20:	4914      	ldr	r1, [pc, #80]	; (8009c74 <xTaskIncrementTick+0x164>)
 8009c22:	4613      	mov	r3, r2
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	4413      	add	r3, r2
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	440b      	add	r3, r1
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d907      	bls.n	8009c42 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8009c32:	2301      	movs	r3, #1
 8009c34:	617b      	str	r3, [r7, #20]
 8009c36:	e004      	b.n	8009c42 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009c38:	4b10      	ldr	r3, [pc, #64]	; (8009c7c <xTaskIncrementTick+0x16c>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	4a0f      	ldr	r2, [pc, #60]	; (8009c7c <xTaskIncrementTick+0x16c>)
 8009c40:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009c42:	4b0f      	ldr	r3, [pc, #60]	; (8009c80 <xTaskIncrementTick+0x170>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d001      	beq.n	8009c4e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009c4e:	697b      	ldr	r3, [r7, #20]
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3718      	adds	r7, #24
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	200011bc 	.word	0x200011bc
 8009c5c:	20001198 	.word	0x20001198
 8009c60:	2000114c 	.word	0x2000114c
 8009c64:	20001150 	.word	0x20001150
 8009c68:	200011ac 	.word	0x200011ac
 8009c6c:	200011b4 	.word	0x200011b4
 8009c70:	2000119c 	.word	0x2000119c
 8009c74:	20001098 	.word	0x20001098
 8009c78:	20001094 	.word	0x20001094
 8009c7c:	200011a4 	.word	0x200011a4
 8009c80:	200011a8 	.word	0x200011a8

08009c84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009c84:	b480      	push	{r7}
 8009c86:	b087      	sub	sp, #28
 8009c88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009c8a:	4b2a      	ldr	r3, [pc, #168]	; (8009d34 <vTaskSwitchContext+0xb0>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d003      	beq.n	8009c9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009c92:	4b29      	ldr	r3, [pc, #164]	; (8009d38 <vTaskSwitchContext+0xb4>)
 8009c94:	2201      	movs	r2, #1
 8009c96:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009c98:	e046      	b.n	8009d28 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009c9a:	4b27      	ldr	r3, [pc, #156]	; (8009d38 <vTaskSwitchContext+0xb4>)
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ca0:	4b26      	ldr	r3, [pc, #152]	; (8009d3c <vTaskSwitchContext+0xb8>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	fab3 f383 	clz	r3, r3
 8009cac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009cae:	7afb      	ldrb	r3, [r7, #11]
 8009cb0:	f1c3 031f 	rsb	r3, r3, #31
 8009cb4:	617b      	str	r3, [r7, #20]
 8009cb6:	4922      	ldr	r1, [pc, #136]	; (8009d40 <vTaskSwitchContext+0xbc>)
 8009cb8:	697a      	ldr	r2, [r7, #20]
 8009cba:	4613      	mov	r3, r2
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	4413      	add	r3, r2
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	440b      	add	r3, r1
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d10c      	bne.n	8009ce4 <vTaskSwitchContext+0x60>
	__asm volatile
 8009cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cce:	b672      	cpsid	i
 8009cd0:	f383 8811 	msr	BASEPRI, r3
 8009cd4:	f3bf 8f6f 	isb	sy
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	b662      	cpsie	i
 8009cde:	607b      	str	r3, [r7, #4]
}
 8009ce0:	bf00      	nop
 8009ce2:	e7fe      	b.n	8009ce2 <vTaskSwitchContext+0x5e>
 8009ce4:	697a      	ldr	r2, [r7, #20]
 8009ce6:	4613      	mov	r3, r2
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	4413      	add	r3, r2
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	4a14      	ldr	r2, [pc, #80]	; (8009d40 <vTaskSwitchContext+0xbc>)
 8009cf0:	4413      	add	r3, r2
 8009cf2:	613b      	str	r3, [r7, #16]
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	685a      	ldr	r2, [r3, #4]
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	605a      	str	r2, [r3, #4]
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	685a      	ldr	r2, [r3, #4]
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	3308      	adds	r3, #8
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d104      	bne.n	8009d14 <vTaskSwitchContext+0x90>
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	685a      	ldr	r2, [r3, #4]
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	605a      	str	r2, [r3, #4]
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	4a0a      	ldr	r2, [pc, #40]	; (8009d44 <vTaskSwitchContext+0xc0>)
 8009d1c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009d1e:	4b09      	ldr	r3, [pc, #36]	; (8009d44 <vTaskSwitchContext+0xc0>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	334c      	adds	r3, #76	; 0x4c
 8009d24:	4a08      	ldr	r2, [pc, #32]	; (8009d48 <vTaskSwitchContext+0xc4>)
 8009d26:	6013      	str	r3, [r2, #0]
}
 8009d28:	bf00      	nop
 8009d2a:	371c      	adds	r7, #28
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr
 8009d34:	200011bc 	.word	0x200011bc
 8009d38:	200011a8 	.word	0x200011a8
 8009d3c:	2000119c 	.word	0x2000119c
 8009d40:	20001098 	.word	0x20001098
 8009d44:	20001094 	.word	0x20001094
 8009d48:	20000730 	.word	0x20000730

08009d4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d10c      	bne.n	8009d76 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8009d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d60:	b672      	cpsid	i
 8009d62:	f383 8811 	msr	BASEPRI, r3
 8009d66:	f3bf 8f6f 	isb	sy
 8009d6a:	f3bf 8f4f 	dsb	sy
 8009d6e:	b662      	cpsie	i
 8009d70:	60fb      	str	r3, [r7, #12]
}
 8009d72:	bf00      	nop
 8009d74:	e7fe      	b.n	8009d74 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009d76:	4b07      	ldr	r3, [pc, #28]	; (8009d94 <vTaskPlaceOnEventList+0x48>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	3318      	adds	r3, #24
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f7fe fbc1 	bl	8008506 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009d84:	2101      	movs	r1, #1
 8009d86:	6838      	ldr	r0, [r7, #0]
 8009d88:	f000 fba8 	bl	800a4dc <prvAddCurrentTaskToDelayedList>
}
 8009d8c:	bf00      	nop
 8009d8e:	3710      	adds	r7, #16
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	20001094 	.word	0x20001094

08009d98 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b086      	sub	sp, #24
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	68db      	ldr	r3, [r3, #12]
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d10c      	bne.n	8009dc8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db2:	b672      	cpsid	i
 8009db4:	f383 8811 	msr	BASEPRI, r3
 8009db8:	f3bf 8f6f 	isb	sy
 8009dbc:	f3bf 8f4f 	dsb	sy
 8009dc0:	b662      	cpsie	i
 8009dc2:	60fb      	str	r3, [r7, #12]
}
 8009dc4:	bf00      	nop
 8009dc6:	e7fe      	b.n	8009dc6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	3318      	adds	r3, #24
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7fe fbd3 	bl	8008578 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dd2:	4b1d      	ldr	r3, [pc, #116]	; (8009e48 <xTaskRemoveFromEventList+0xb0>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d11c      	bne.n	8009e14 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	3304      	adds	r3, #4
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7fe fbca 	bl	8008578 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009de4:	693b      	ldr	r3, [r7, #16]
 8009de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de8:	2201      	movs	r2, #1
 8009dea:	409a      	lsls	r2, r3
 8009dec:	4b17      	ldr	r3, [pc, #92]	; (8009e4c <xTaskRemoveFromEventList+0xb4>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4313      	orrs	r3, r2
 8009df2:	4a16      	ldr	r2, [pc, #88]	; (8009e4c <xTaskRemoveFromEventList+0xb4>)
 8009df4:	6013      	str	r3, [r2, #0]
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dfa:	4613      	mov	r3, r2
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	4413      	add	r3, r2
 8009e00:	009b      	lsls	r3, r3, #2
 8009e02:	4a13      	ldr	r2, [pc, #76]	; (8009e50 <xTaskRemoveFromEventList+0xb8>)
 8009e04:	441a      	add	r2, r3
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	3304      	adds	r3, #4
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	4610      	mov	r0, r2
 8009e0e:	f7fe fb56 	bl	80084be <vListInsertEnd>
 8009e12:	e005      	b.n	8009e20 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	3318      	adds	r3, #24
 8009e18:	4619      	mov	r1, r3
 8009e1a:	480e      	ldr	r0, [pc, #56]	; (8009e54 <xTaskRemoveFromEventList+0xbc>)
 8009e1c:	f7fe fb4f 	bl	80084be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e24:	4b0c      	ldr	r3, [pc, #48]	; (8009e58 <xTaskRemoveFromEventList+0xc0>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d905      	bls.n	8009e3a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009e32:	4b0a      	ldr	r3, [pc, #40]	; (8009e5c <xTaskRemoveFromEventList+0xc4>)
 8009e34:	2201      	movs	r2, #1
 8009e36:	601a      	str	r2, [r3, #0]
 8009e38:	e001      	b.n	8009e3e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009e3e:	697b      	ldr	r3, [r7, #20]
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3718      	adds	r7, #24
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	200011bc 	.word	0x200011bc
 8009e4c:	2000119c 	.word	0x2000119c
 8009e50:	20001098 	.word	0x20001098
 8009e54:	20001154 	.word	0x20001154
 8009e58:	20001094 	.word	0x20001094
 8009e5c:	200011a8 	.word	0x200011a8

08009e60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009e68:	4b06      	ldr	r3, [pc, #24]	; (8009e84 <vTaskInternalSetTimeOutState+0x24>)
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009e70:	4b05      	ldr	r3, [pc, #20]	; (8009e88 <vTaskInternalSetTimeOutState+0x28>)
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	605a      	str	r2, [r3, #4]
}
 8009e78:	bf00      	nop
 8009e7a:	370c      	adds	r7, #12
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr
 8009e84:	200011ac 	.word	0x200011ac
 8009e88:	20001198 	.word	0x20001198

08009e8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b088      	sub	sp, #32
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d10c      	bne.n	8009eb6 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8009e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea0:	b672      	cpsid	i
 8009ea2:	f383 8811 	msr	BASEPRI, r3
 8009ea6:	f3bf 8f6f 	isb	sy
 8009eaa:	f3bf 8f4f 	dsb	sy
 8009eae:	b662      	cpsie	i
 8009eb0:	613b      	str	r3, [r7, #16]
}
 8009eb2:	bf00      	nop
 8009eb4:	e7fe      	b.n	8009eb4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d10c      	bne.n	8009ed6 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8009ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec0:	b672      	cpsid	i
 8009ec2:	f383 8811 	msr	BASEPRI, r3
 8009ec6:	f3bf 8f6f 	isb	sy
 8009eca:	f3bf 8f4f 	dsb	sy
 8009ece:	b662      	cpsie	i
 8009ed0:	60fb      	str	r3, [r7, #12]
}
 8009ed2:	bf00      	nop
 8009ed4:	e7fe      	b.n	8009ed4 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8009ed6:	f000 fc71 	bl	800a7bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009eda:	4b1d      	ldr	r3, [pc, #116]	; (8009f50 <xTaskCheckForTimeOut+0xc4>)
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	69ba      	ldr	r2, [r7, #24]
 8009ee6:	1ad3      	subs	r3, r2, r3
 8009ee8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ef2:	d102      	bne.n	8009efa <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	61fb      	str	r3, [r7, #28]
 8009ef8:	e023      	b.n	8009f42 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	4b15      	ldr	r3, [pc, #84]	; (8009f54 <xTaskCheckForTimeOut+0xc8>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d007      	beq.n	8009f16 <xTaskCheckForTimeOut+0x8a>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	69ba      	ldr	r2, [r7, #24]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d302      	bcc.n	8009f16 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009f10:	2301      	movs	r3, #1
 8009f12:	61fb      	str	r3, [r7, #28]
 8009f14:	e015      	b.n	8009f42 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	697a      	ldr	r2, [r7, #20]
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d20b      	bcs.n	8009f38 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	1ad2      	subs	r2, r2, r3
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f7ff ff97 	bl	8009e60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009f32:	2300      	movs	r3, #0
 8009f34:	61fb      	str	r3, [r7, #28]
 8009f36:	e004      	b.n	8009f42 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009f42:	f000 fc6f 	bl	800a824 <vPortExitCritical>

	return xReturn;
 8009f46:	69fb      	ldr	r3, [r7, #28]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3720      	adds	r7, #32
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	20001198 	.word	0x20001198
 8009f54:	200011ac 	.word	0x200011ac

08009f58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009f58:	b480      	push	{r7}
 8009f5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009f5c:	4b03      	ldr	r3, [pc, #12]	; (8009f6c <vTaskMissedYield+0x14>)
 8009f5e:	2201      	movs	r2, #1
 8009f60:	601a      	str	r2, [r3, #0]
}
 8009f62:	bf00      	nop
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr
 8009f6c:	200011a8 	.word	0x200011a8

08009f70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b082      	sub	sp, #8
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009f78:	f000 f852 	bl	800a020 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009f7c:	4b06      	ldr	r3, [pc, #24]	; (8009f98 <prvIdleTask+0x28>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2b01      	cmp	r3, #1
 8009f82:	d9f9      	bls.n	8009f78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009f84:	4b05      	ldr	r3, [pc, #20]	; (8009f9c <prvIdleTask+0x2c>)
 8009f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f8a:	601a      	str	r2, [r3, #0]
 8009f8c:	f3bf 8f4f 	dsb	sy
 8009f90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009f94:	e7f0      	b.n	8009f78 <prvIdleTask+0x8>
 8009f96:	bf00      	nop
 8009f98:	20001098 	.word	0x20001098
 8009f9c:	e000ed04 	.word	0xe000ed04

08009fa0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b082      	sub	sp, #8
 8009fa4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	607b      	str	r3, [r7, #4]
 8009faa:	e00c      	b.n	8009fc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	4613      	mov	r3, r2
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	4413      	add	r3, r2
 8009fb4:	009b      	lsls	r3, r3, #2
 8009fb6:	4a12      	ldr	r2, [pc, #72]	; (800a000 <prvInitialiseTaskLists+0x60>)
 8009fb8:	4413      	add	r3, r2
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f7fe fa52 	bl	8008464 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	607b      	str	r3, [r7, #4]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2b06      	cmp	r3, #6
 8009fca:	d9ef      	bls.n	8009fac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009fcc:	480d      	ldr	r0, [pc, #52]	; (800a004 <prvInitialiseTaskLists+0x64>)
 8009fce:	f7fe fa49 	bl	8008464 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009fd2:	480d      	ldr	r0, [pc, #52]	; (800a008 <prvInitialiseTaskLists+0x68>)
 8009fd4:	f7fe fa46 	bl	8008464 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009fd8:	480c      	ldr	r0, [pc, #48]	; (800a00c <prvInitialiseTaskLists+0x6c>)
 8009fda:	f7fe fa43 	bl	8008464 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009fde:	480c      	ldr	r0, [pc, #48]	; (800a010 <prvInitialiseTaskLists+0x70>)
 8009fe0:	f7fe fa40 	bl	8008464 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009fe4:	480b      	ldr	r0, [pc, #44]	; (800a014 <prvInitialiseTaskLists+0x74>)
 8009fe6:	f7fe fa3d 	bl	8008464 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009fea:	4b0b      	ldr	r3, [pc, #44]	; (800a018 <prvInitialiseTaskLists+0x78>)
 8009fec:	4a05      	ldr	r2, [pc, #20]	; (800a004 <prvInitialiseTaskLists+0x64>)
 8009fee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009ff0:	4b0a      	ldr	r3, [pc, #40]	; (800a01c <prvInitialiseTaskLists+0x7c>)
 8009ff2:	4a05      	ldr	r2, [pc, #20]	; (800a008 <prvInitialiseTaskLists+0x68>)
 8009ff4:	601a      	str	r2, [r3, #0]
}
 8009ff6:	bf00      	nop
 8009ff8:	3708      	adds	r7, #8
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	20001098 	.word	0x20001098
 800a004:	20001124 	.word	0x20001124
 800a008:	20001138 	.word	0x20001138
 800a00c:	20001154 	.word	0x20001154
 800a010:	20001168 	.word	0x20001168
 800a014:	20001180 	.word	0x20001180
 800a018:	2000114c 	.word	0x2000114c
 800a01c:	20001150 	.word	0x20001150

0800a020 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a026:	e019      	b.n	800a05c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a028:	f000 fbc8 	bl	800a7bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a02c:	4b10      	ldr	r3, [pc, #64]	; (800a070 <prvCheckTasksWaitingTermination+0x50>)
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	3304      	adds	r3, #4
 800a038:	4618      	mov	r0, r3
 800a03a:	f7fe fa9d 	bl	8008578 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a03e:	4b0d      	ldr	r3, [pc, #52]	; (800a074 <prvCheckTasksWaitingTermination+0x54>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	3b01      	subs	r3, #1
 800a044:	4a0b      	ldr	r2, [pc, #44]	; (800a074 <prvCheckTasksWaitingTermination+0x54>)
 800a046:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a048:	4b0b      	ldr	r3, [pc, #44]	; (800a078 <prvCheckTasksWaitingTermination+0x58>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	3b01      	subs	r3, #1
 800a04e:	4a0a      	ldr	r2, [pc, #40]	; (800a078 <prvCheckTasksWaitingTermination+0x58>)
 800a050:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a052:	f000 fbe7 	bl	800a824 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 f810 	bl	800a07c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a05c:	4b06      	ldr	r3, [pc, #24]	; (800a078 <prvCheckTasksWaitingTermination+0x58>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d1e1      	bne.n	800a028 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a064:	bf00      	nop
 800a066:	bf00      	nop
 800a068:	3708      	adds	r7, #8
 800a06a:	46bd      	mov	sp, r7
 800a06c:	bd80      	pop	{r7, pc}
 800a06e:	bf00      	nop
 800a070:	20001168 	.word	0x20001168
 800a074:	20001194 	.word	0x20001194
 800a078:	2000117c 	.word	0x2000117c

0800a07c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	334c      	adds	r3, #76	; 0x4c
 800a088:	4618      	mov	r0, r3
 800a08a:	f00e f995 	bl	80183b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a094:	2b00      	cmp	r3, #0
 800a096:	d108      	bne.n	800a0aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a09c:	4618      	mov	r0, r3
 800a09e:	f000 fd83 	bl	800aba8 <vPortFree>
				vPortFree( pxTCB );
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fd80 	bl	800aba8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a0a8:	e01a      	b.n	800a0e0 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d103      	bne.n	800a0bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f000 fd77 	bl	800aba8 <vPortFree>
	}
 800a0ba:	e011      	b.n	800a0e0 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800a0c2:	2b02      	cmp	r3, #2
 800a0c4:	d00c      	beq.n	800a0e0 <prvDeleteTCB+0x64>
	__asm volatile
 800a0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ca:	b672      	cpsid	i
 800a0cc:	f383 8811 	msr	BASEPRI, r3
 800a0d0:	f3bf 8f6f 	isb	sy
 800a0d4:	f3bf 8f4f 	dsb	sy
 800a0d8:	b662      	cpsie	i
 800a0da:	60fb      	str	r3, [r7, #12]
}
 800a0dc:	bf00      	nop
 800a0de:	e7fe      	b.n	800a0de <prvDeleteTCB+0x62>
	}
 800a0e0:	bf00      	nop
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0ee:	4b0c      	ldr	r3, [pc, #48]	; (800a120 <prvResetNextTaskUnblockTime+0x38>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d104      	bne.n	800a102 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a0f8:	4b0a      	ldr	r3, [pc, #40]	; (800a124 <prvResetNextTaskUnblockTime+0x3c>)
 800a0fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a0fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a100:	e008      	b.n	800a114 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a102:	4b07      	ldr	r3, [pc, #28]	; (800a120 <prvResetNextTaskUnblockTime+0x38>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	4a04      	ldr	r2, [pc, #16]	; (800a124 <prvResetNextTaskUnblockTime+0x3c>)
 800a112:	6013      	str	r3, [r2, #0]
}
 800a114:	bf00      	nop
 800a116:	370c      	adds	r7, #12
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr
 800a120:	2000114c 	.word	0x2000114c
 800a124:	200011b4 	.word	0x200011b4

0800a128 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a12e:	4b0b      	ldr	r3, [pc, #44]	; (800a15c <xTaskGetSchedulerState+0x34>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d102      	bne.n	800a13c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a136:	2301      	movs	r3, #1
 800a138:	607b      	str	r3, [r7, #4]
 800a13a:	e008      	b.n	800a14e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a13c:	4b08      	ldr	r3, [pc, #32]	; (800a160 <xTaskGetSchedulerState+0x38>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d102      	bne.n	800a14a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a144:	2302      	movs	r3, #2
 800a146:	607b      	str	r3, [r7, #4]
 800a148:	e001      	b.n	800a14e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a14a:	2300      	movs	r3, #0
 800a14c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a14e:	687b      	ldr	r3, [r7, #4]
	}
 800a150:	4618      	mov	r0, r3
 800a152:	370c      	adds	r7, #12
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr
 800a15c:	200011a0 	.word	0x200011a0
 800a160:	200011bc 	.word	0x200011bc

0800a164 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a170:	2300      	movs	r3, #0
 800a172:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d069      	beq.n	800a24e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a17e:	4b36      	ldr	r3, [pc, #216]	; (800a258 <xTaskPriorityInherit+0xf4>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a184:	429a      	cmp	r2, r3
 800a186:	d259      	bcs.n	800a23c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	699b      	ldr	r3, [r3, #24]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	db06      	blt.n	800a19e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a190:	4b31      	ldr	r3, [pc, #196]	; (800a258 <xTaskPriorityInherit+0xf4>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a196:	f1c3 0207 	rsb	r2, r3, #7
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	6959      	ldr	r1, [r3, #20]
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1a6:	4613      	mov	r3, r2
 800a1a8:	009b      	lsls	r3, r3, #2
 800a1aa:	4413      	add	r3, r2
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	4a2b      	ldr	r2, [pc, #172]	; (800a25c <xTaskPriorityInherit+0xf8>)
 800a1b0:	4413      	add	r3, r2
 800a1b2:	4299      	cmp	r1, r3
 800a1b4:	d13a      	bne.n	800a22c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	3304      	adds	r3, #4
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7fe f9dc 	bl	8008578 <uxListRemove>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d115      	bne.n	800a1f2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ca:	4924      	ldr	r1, [pc, #144]	; (800a25c <xTaskPriorityInherit+0xf8>)
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	4413      	add	r3, r2
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	440b      	add	r3, r1
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d10a      	bne.n	800a1f2 <xTaskPriorityInherit+0x8e>
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a1e6:	43da      	mvns	r2, r3
 800a1e8:	4b1d      	ldr	r3, [pc, #116]	; (800a260 <xTaskPriorityInherit+0xfc>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4013      	ands	r3, r2
 800a1ee:	4a1c      	ldr	r2, [pc, #112]	; (800a260 <xTaskPriorityInherit+0xfc>)
 800a1f0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a1f2:	4b19      	ldr	r3, [pc, #100]	; (800a258 <xTaskPriorityInherit+0xf4>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a200:	2201      	movs	r2, #1
 800a202:	409a      	lsls	r2, r3
 800a204:	4b16      	ldr	r3, [pc, #88]	; (800a260 <xTaskPriorityInherit+0xfc>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4313      	orrs	r3, r2
 800a20a:	4a15      	ldr	r2, [pc, #84]	; (800a260 <xTaskPriorityInherit+0xfc>)
 800a20c:	6013      	str	r3, [r2, #0]
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a212:	4613      	mov	r3, r2
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	4413      	add	r3, r2
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	4a10      	ldr	r2, [pc, #64]	; (800a25c <xTaskPriorityInherit+0xf8>)
 800a21c:	441a      	add	r2, r3
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	3304      	adds	r3, #4
 800a222:	4619      	mov	r1, r3
 800a224:	4610      	mov	r0, r2
 800a226:	f7fe f94a 	bl	80084be <vListInsertEnd>
 800a22a:	e004      	b.n	800a236 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a22c:	4b0a      	ldr	r3, [pc, #40]	; (800a258 <xTaskPriorityInherit+0xf4>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a236:	2301      	movs	r3, #1
 800a238:	60fb      	str	r3, [r7, #12]
 800a23a:	e008      	b.n	800a24e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a240:	4b05      	ldr	r3, [pc, #20]	; (800a258 <xTaskPriorityInherit+0xf4>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a246:	429a      	cmp	r2, r3
 800a248:	d201      	bcs.n	800a24e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a24a:	2301      	movs	r3, #1
 800a24c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a24e:	68fb      	ldr	r3, [r7, #12]
	}
 800a250:	4618      	mov	r0, r3
 800a252:	3710      	adds	r7, #16
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	20001094 	.word	0x20001094
 800a25c:	20001098 	.word	0x20001098
 800a260:	2000119c 	.word	0x2000119c

0800a264 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a264:	b580      	push	{r7, lr}
 800a266:	b086      	sub	sp, #24
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a270:	2300      	movs	r3, #0
 800a272:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d072      	beq.n	800a360 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a27a:	4b3c      	ldr	r3, [pc, #240]	; (800a36c <xTaskPriorityDisinherit+0x108>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	693a      	ldr	r2, [r7, #16]
 800a280:	429a      	cmp	r2, r3
 800a282:	d00c      	beq.n	800a29e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800a284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a288:	b672      	cpsid	i
 800a28a:	f383 8811 	msr	BASEPRI, r3
 800a28e:	f3bf 8f6f 	isb	sy
 800a292:	f3bf 8f4f 	dsb	sy
 800a296:	b662      	cpsie	i
 800a298:	60fb      	str	r3, [r7, #12]
}
 800a29a:	bf00      	nop
 800a29c:	e7fe      	b.n	800a29c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d10c      	bne.n	800a2c0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800a2a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2aa:	b672      	cpsid	i
 800a2ac:	f383 8811 	msr	BASEPRI, r3
 800a2b0:	f3bf 8f6f 	isb	sy
 800a2b4:	f3bf 8f4f 	dsb	sy
 800a2b8:	b662      	cpsie	i
 800a2ba:	60bb      	str	r3, [r7, #8]
}
 800a2bc:	bf00      	nop
 800a2be:	e7fe      	b.n	800a2be <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2c4:	1e5a      	subs	r2, r3, #1
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d044      	beq.n	800a360 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d140      	bne.n	800a360 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	3304      	adds	r3, #4
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f7fe f948 	bl	8008578 <uxListRemove>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d115      	bne.n	800a31a <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2f2:	491f      	ldr	r1, [pc, #124]	; (800a370 <xTaskPriorityDisinherit+0x10c>)
 800a2f4:	4613      	mov	r3, r2
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	4413      	add	r3, r2
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	440b      	add	r3, r1
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d10a      	bne.n	800a31a <xTaskPriorityDisinherit+0xb6>
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a308:	2201      	movs	r2, #1
 800a30a:	fa02 f303 	lsl.w	r3, r2, r3
 800a30e:	43da      	mvns	r2, r3
 800a310:	4b18      	ldr	r3, [pc, #96]	; (800a374 <xTaskPriorityDisinherit+0x110>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4013      	ands	r3, r2
 800a316:	4a17      	ldr	r2, [pc, #92]	; (800a374 <xTaskPriorityDisinherit+0x110>)
 800a318:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a326:	f1c3 0207 	rsb	r2, r3, #7
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a332:	2201      	movs	r2, #1
 800a334:	409a      	lsls	r2, r3
 800a336:	4b0f      	ldr	r3, [pc, #60]	; (800a374 <xTaskPriorityDisinherit+0x110>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4313      	orrs	r3, r2
 800a33c:	4a0d      	ldr	r2, [pc, #52]	; (800a374 <xTaskPriorityDisinherit+0x110>)
 800a33e:	6013      	str	r3, [r2, #0]
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a344:	4613      	mov	r3, r2
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	4413      	add	r3, r2
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	4a08      	ldr	r2, [pc, #32]	; (800a370 <xTaskPriorityDisinherit+0x10c>)
 800a34e:	441a      	add	r2, r3
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	3304      	adds	r3, #4
 800a354:	4619      	mov	r1, r3
 800a356:	4610      	mov	r0, r2
 800a358:	f7fe f8b1 	bl	80084be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a35c:	2301      	movs	r3, #1
 800a35e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a360:	697b      	ldr	r3, [r7, #20]
	}
 800a362:	4618      	mov	r0, r3
 800a364:	3718      	adds	r7, #24
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	20001094 	.word	0x20001094
 800a370:	20001098 	.word	0x20001098
 800a374:	2000119c 	.word	0x2000119c

0800a378 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b088      	sub	sp, #32
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a386:	2301      	movs	r3, #1
 800a388:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	f000 8087 	beq.w	800a4a0 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a392:	69bb      	ldr	r3, [r7, #24]
 800a394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a396:	2b00      	cmp	r3, #0
 800a398:	d10c      	bne.n	800a3b4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800a39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a39e:	b672      	cpsid	i
 800a3a0:	f383 8811 	msr	BASEPRI, r3
 800a3a4:	f3bf 8f6f 	isb	sy
 800a3a8:	f3bf 8f4f 	dsb	sy
 800a3ac:	b662      	cpsie	i
 800a3ae:	60fb      	str	r3, [r7, #12]
}
 800a3b0:	bf00      	nop
 800a3b2:	e7fe      	b.n	800a3b2 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3b8:	683a      	ldr	r2, [r7, #0]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d902      	bls.n	800a3c4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	61fb      	str	r3, [r7, #28]
 800a3c2:	e002      	b.n	800a3ca <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3c8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a3ca:	69bb      	ldr	r3, [r7, #24]
 800a3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ce:	69fa      	ldr	r2, [r7, #28]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d065      	beq.n	800a4a0 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a3d4:	69bb      	ldr	r3, [r7, #24]
 800a3d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3d8:	697a      	ldr	r2, [r7, #20]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d160      	bne.n	800a4a0 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a3de:	4b32      	ldr	r3, [pc, #200]	; (800a4a8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	69ba      	ldr	r2, [r7, #24]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d10c      	bne.n	800a402 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800a3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ec:	b672      	cpsid	i
 800a3ee:	f383 8811 	msr	BASEPRI, r3
 800a3f2:	f3bf 8f6f 	isb	sy
 800a3f6:	f3bf 8f4f 	dsb	sy
 800a3fa:	b662      	cpsie	i
 800a3fc:	60bb      	str	r3, [r7, #8]
}
 800a3fe:	bf00      	nop
 800a400:	e7fe      	b.n	800a400 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a402:	69bb      	ldr	r3, [r7, #24]
 800a404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a406:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a408:	69bb      	ldr	r3, [r7, #24]
 800a40a:	69fa      	ldr	r2, [r7, #28]
 800a40c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	699b      	ldr	r3, [r3, #24]
 800a412:	2b00      	cmp	r3, #0
 800a414:	db04      	blt.n	800a420 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a416:	69fb      	ldr	r3, [r7, #28]
 800a418:	f1c3 0207 	rsb	r2, r3, #7
 800a41c:	69bb      	ldr	r3, [r7, #24]
 800a41e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a420:	69bb      	ldr	r3, [r7, #24]
 800a422:	6959      	ldr	r1, [r3, #20]
 800a424:	693a      	ldr	r2, [r7, #16]
 800a426:	4613      	mov	r3, r2
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	4413      	add	r3, r2
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	4a1f      	ldr	r2, [pc, #124]	; (800a4ac <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a430:	4413      	add	r3, r2
 800a432:	4299      	cmp	r1, r3
 800a434:	d134      	bne.n	800a4a0 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a436:	69bb      	ldr	r3, [r7, #24]
 800a438:	3304      	adds	r3, #4
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7fe f89c 	bl	8008578 <uxListRemove>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d115      	bne.n	800a472 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a446:	69bb      	ldr	r3, [r7, #24]
 800a448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a44a:	4918      	ldr	r1, [pc, #96]	; (800a4ac <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a44c:	4613      	mov	r3, r2
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	4413      	add	r3, r2
 800a452:	009b      	lsls	r3, r3, #2
 800a454:	440b      	add	r3, r1
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d10a      	bne.n	800a472 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800a45c:	69bb      	ldr	r3, [r7, #24]
 800a45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a460:	2201      	movs	r2, #1
 800a462:	fa02 f303 	lsl.w	r3, r2, r3
 800a466:	43da      	mvns	r2, r3
 800a468:	4b11      	ldr	r3, [pc, #68]	; (800a4b0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4013      	ands	r3, r2
 800a46e:	4a10      	ldr	r2, [pc, #64]	; (800a4b0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a470:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a472:	69bb      	ldr	r3, [r7, #24]
 800a474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a476:	2201      	movs	r2, #1
 800a478:	409a      	lsls	r2, r3
 800a47a:	4b0d      	ldr	r3, [pc, #52]	; (800a4b0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4313      	orrs	r3, r2
 800a480:	4a0b      	ldr	r2, [pc, #44]	; (800a4b0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a482:	6013      	str	r3, [r2, #0]
 800a484:	69bb      	ldr	r3, [r7, #24]
 800a486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a488:	4613      	mov	r3, r2
 800a48a:	009b      	lsls	r3, r3, #2
 800a48c:	4413      	add	r3, r2
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	4a06      	ldr	r2, [pc, #24]	; (800a4ac <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a492:	441a      	add	r2, r3
 800a494:	69bb      	ldr	r3, [r7, #24]
 800a496:	3304      	adds	r3, #4
 800a498:	4619      	mov	r1, r3
 800a49a:	4610      	mov	r0, r2
 800a49c:	f7fe f80f 	bl	80084be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a4a0:	bf00      	nop
 800a4a2:	3720      	adds	r7, #32
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	20001094 	.word	0x20001094
 800a4ac:	20001098 	.word	0x20001098
 800a4b0:	2000119c 	.word	0x2000119c

0800a4b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a4b4:	b480      	push	{r7}
 800a4b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a4b8:	4b07      	ldr	r3, [pc, #28]	; (800a4d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d004      	beq.n	800a4ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a4c0:	4b05      	ldr	r3, [pc, #20]	; (800a4d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4c6:	3201      	adds	r2, #1
 800a4c8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a4ca:	4b03      	ldr	r3, [pc, #12]	; (800a4d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
	}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr
 800a4d8:	20001094 	.word	0x20001094

0800a4dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a4e6:	4b29      	ldr	r3, [pc, #164]	; (800a58c <prvAddCurrentTaskToDelayedList+0xb0>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4ec:	4b28      	ldr	r3, [pc, #160]	; (800a590 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	3304      	adds	r3, #4
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7fe f840 	bl	8008578 <uxListRemove>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d10b      	bne.n	800a516 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a4fe:	4b24      	ldr	r3, [pc, #144]	; (800a590 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a504:	2201      	movs	r2, #1
 800a506:	fa02 f303 	lsl.w	r3, r2, r3
 800a50a:	43da      	mvns	r2, r3
 800a50c:	4b21      	ldr	r3, [pc, #132]	; (800a594 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4013      	ands	r3, r2
 800a512:	4a20      	ldr	r2, [pc, #128]	; (800a594 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a514:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a51c:	d10a      	bne.n	800a534 <prvAddCurrentTaskToDelayedList+0x58>
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d007      	beq.n	800a534 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a524:	4b1a      	ldr	r3, [pc, #104]	; (800a590 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	3304      	adds	r3, #4
 800a52a:	4619      	mov	r1, r3
 800a52c:	481a      	ldr	r0, [pc, #104]	; (800a598 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a52e:	f7fd ffc6 	bl	80084be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a532:	e026      	b.n	800a582 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4413      	add	r3, r2
 800a53a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a53c:	4b14      	ldr	r3, [pc, #80]	; (800a590 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	68ba      	ldr	r2, [r7, #8]
 800a542:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a544:	68ba      	ldr	r2, [r7, #8]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	429a      	cmp	r2, r3
 800a54a:	d209      	bcs.n	800a560 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a54c:	4b13      	ldr	r3, [pc, #76]	; (800a59c <prvAddCurrentTaskToDelayedList+0xc0>)
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	4b0f      	ldr	r3, [pc, #60]	; (800a590 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	3304      	adds	r3, #4
 800a556:	4619      	mov	r1, r3
 800a558:	4610      	mov	r0, r2
 800a55a:	f7fd ffd4 	bl	8008506 <vListInsert>
}
 800a55e:	e010      	b.n	800a582 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a560:	4b0f      	ldr	r3, [pc, #60]	; (800a5a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	4b0a      	ldr	r3, [pc, #40]	; (800a590 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	3304      	adds	r3, #4
 800a56a:	4619      	mov	r1, r3
 800a56c:	4610      	mov	r0, r2
 800a56e:	f7fd ffca 	bl	8008506 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a572:	4b0c      	ldr	r3, [pc, #48]	; (800a5a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	68ba      	ldr	r2, [r7, #8]
 800a578:	429a      	cmp	r2, r3
 800a57a:	d202      	bcs.n	800a582 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a57c:	4a09      	ldr	r2, [pc, #36]	; (800a5a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a57e:	68bb      	ldr	r3, [r7, #8]
 800a580:	6013      	str	r3, [r2, #0]
}
 800a582:	bf00      	nop
 800a584:	3710      	adds	r7, #16
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	20001198 	.word	0x20001198
 800a590:	20001094 	.word	0x20001094
 800a594:	2000119c 	.word	0x2000119c
 800a598:	20001180 	.word	0x20001180
 800a59c:	20001150 	.word	0x20001150
 800a5a0:	2000114c 	.word	0x2000114c
 800a5a4:	200011b4 	.word	0x200011b4

0800a5a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b085      	sub	sp, #20
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	3b04      	subs	r3, #4
 800a5b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a5c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	3b04      	subs	r3, #4
 800a5c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	f023 0201 	bic.w	r2, r3, #1
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	3b04      	subs	r3, #4
 800a5d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a5d8:	4a0c      	ldr	r2, [pc, #48]	; (800a60c <pxPortInitialiseStack+0x64>)
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	3b14      	subs	r3, #20
 800a5e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	3b04      	subs	r3, #4
 800a5ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f06f 0202 	mvn.w	r2, #2
 800a5f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	3b20      	subs	r3, #32
 800a5fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
}
 800a600:	4618      	mov	r0, r3
 800a602:	3714      	adds	r7, #20
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr
 800a60c:	0800a611 	.word	0x0800a611

0800a610 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a610:	b480      	push	{r7}
 800a612:	b085      	sub	sp, #20
 800a614:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a616:	2300      	movs	r3, #0
 800a618:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a61a:	4b14      	ldr	r3, [pc, #80]	; (800a66c <prvTaskExitError+0x5c>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a622:	d00c      	beq.n	800a63e <prvTaskExitError+0x2e>
	__asm volatile
 800a624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a628:	b672      	cpsid	i
 800a62a:	f383 8811 	msr	BASEPRI, r3
 800a62e:	f3bf 8f6f 	isb	sy
 800a632:	f3bf 8f4f 	dsb	sy
 800a636:	b662      	cpsie	i
 800a638:	60fb      	str	r3, [r7, #12]
}
 800a63a:	bf00      	nop
 800a63c:	e7fe      	b.n	800a63c <prvTaskExitError+0x2c>
	__asm volatile
 800a63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a642:	b672      	cpsid	i
 800a644:	f383 8811 	msr	BASEPRI, r3
 800a648:	f3bf 8f6f 	isb	sy
 800a64c:	f3bf 8f4f 	dsb	sy
 800a650:	b662      	cpsie	i
 800a652:	60bb      	str	r3, [r7, #8]
}
 800a654:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a656:	bf00      	nop
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d0fc      	beq.n	800a658 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a65e:	bf00      	nop
 800a660:	bf00      	nop
 800a662:	3714      	adds	r7, #20
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr
 800a66c:	20000720 	.word	0x20000720

0800a670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a670:	4b07      	ldr	r3, [pc, #28]	; (800a690 <pxCurrentTCBConst2>)
 800a672:	6819      	ldr	r1, [r3, #0]
 800a674:	6808      	ldr	r0, [r1, #0]
 800a676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a67a:	f380 8809 	msr	PSP, r0
 800a67e:	f3bf 8f6f 	isb	sy
 800a682:	f04f 0000 	mov.w	r0, #0
 800a686:	f380 8811 	msr	BASEPRI, r0
 800a68a:	4770      	bx	lr
 800a68c:	f3af 8000 	nop.w

0800a690 <pxCurrentTCBConst2>:
 800a690:	20001094 	.word	0x20001094
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a694:	bf00      	nop
 800a696:	bf00      	nop

0800a698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a698:	4808      	ldr	r0, [pc, #32]	; (800a6bc <prvPortStartFirstTask+0x24>)
 800a69a:	6800      	ldr	r0, [r0, #0]
 800a69c:	6800      	ldr	r0, [r0, #0]
 800a69e:	f380 8808 	msr	MSP, r0
 800a6a2:	f04f 0000 	mov.w	r0, #0
 800a6a6:	f380 8814 	msr	CONTROL, r0
 800a6aa:	b662      	cpsie	i
 800a6ac:	b661      	cpsie	f
 800a6ae:	f3bf 8f4f 	dsb	sy
 800a6b2:	f3bf 8f6f 	isb	sy
 800a6b6:	df00      	svc	0
 800a6b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a6ba:	bf00      	nop
 800a6bc:	e000ed08 	.word	0xe000ed08

0800a6c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a6c6:	4b37      	ldr	r3, [pc, #220]	; (800a7a4 <xPortStartScheduler+0xe4>)
 800a6c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	22ff      	movs	r2, #255	; 0xff
 800a6d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a6e0:	78fb      	ldrb	r3, [r7, #3]
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a6e8:	b2da      	uxtb	r2, r3
 800a6ea:	4b2f      	ldr	r3, [pc, #188]	; (800a7a8 <xPortStartScheduler+0xe8>)
 800a6ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a6ee:	4b2f      	ldr	r3, [pc, #188]	; (800a7ac <xPortStartScheduler+0xec>)
 800a6f0:	2207      	movs	r2, #7
 800a6f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6f4:	e009      	b.n	800a70a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a6f6:	4b2d      	ldr	r3, [pc, #180]	; (800a7ac <xPortStartScheduler+0xec>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	3b01      	subs	r3, #1
 800a6fc:	4a2b      	ldr	r2, [pc, #172]	; (800a7ac <xPortStartScheduler+0xec>)
 800a6fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a700:	78fb      	ldrb	r3, [r7, #3]
 800a702:	b2db      	uxtb	r3, r3
 800a704:	005b      	lsls	r3, r3, #1
 800a706:	b2db      	uxtb	r3, r3
 800a708:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a70a:	78fb      	ldrb	r3, [r7, #3]
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a712:	2b80      	cmp	r3, #128	; 0x80
 800a714:	d0ef      	beq.n	800a6f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a716:	4b25      	ldr	r3, [pc, #148]	; (800a7ac <xPortStartScheduler+0xec>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f1c3 0307 	rsb	r3, r3, #7
 800a71e:	2b04      	cmp	r3, #4
 800a720:	d00c      	beq.n	800a73c <xPortStartScheduler+0x7c>
	__asm volatile
 800a722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a726:	b672      	cpsid	i
 800a728:	f383 8811 	msr	BASEPRI, r3
 800a72c:	f3bf 8f6f 	isb	sy
 800a730:	f3bf 8f4f 	dsb	sy
 800a734:	b662      	cpsie	i
 800a736:	60bb      	str	r3, [r7, #8]
}
 800a738:	bf00      	nop
 800a73a:	e7fe      	b.n	800a73a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a73c:	4b1b      	ldr	r3, [pc, #108]	; (800a7ac <xPortStartScheduler+0xec>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	021b      	lsls	r3, r3, #8
 800a742:	4a1a      	ldr	r2, [pc, #104]	; (800a7ac <xPortStartScheduler+0xec>)
 800a744:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a746:	4b19      	ldr	r3, [pc, #100]	; (800a7ac <xPortStartScheduler+0xec>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a74e:	4a17      	ldr	r2, [pc, #92]	; (800a7ac <xPortStartScheduler+0xec>)
 800a750:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	b2da      	uxtb	r2, r3
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a75a:	4b15      	ldr	r3, [pc, #84]	; (800a7b0 <xPortStartScheduler+0xf0>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4a14      	ldr	r2, [pc, #80]	; (800a7b0 <xPortStartScheduler+0xf0>)
 800a760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a764:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a766:	4b12      	ldr	r3, [pc, #72]	; (800a7b0 <xPortStartScheduler+0xf0>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a11      	ldr	r2, [pc, #68]	; (800a7b0 <xPortStartScheduler+0xf0>)
 800a76c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a770:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a772:	f000 f8dd 	bl	800a930 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a776:	4b0f      	ldr	r3, [pc, #60]	; (800a7b4 <xPortStartScheduler+0xf4>)
 800a778:	2200      	movs	r2, #0
 800a77a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a77c:	f000 f8fc 	bl	800a978 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a780:	4b0d      	ldr	r3, [pc, #52]	; (800a7b8 <xPortStartScheduler+0xf8>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a0c      	ldr	r2, [pc, #48]	; (800a7b8 <xPortStartScheduler+0xf8>)
 800a786:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a78a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a78c:	f7ff ff84 	bl	800a698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a790:	f7ff fa78 	bl	8009c84 <vTaskSwitchContext>
	prvTaskExitError();
 800a794:	f7ff ff3c 	bl	800a610 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a798:	2300      	movs	r3, #0
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3710      	adds	r7, #16
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	e000e400 	.word	0xe000e400
 800a7a8:	200011c0 	.word	0x200011c0
 800a7ac:	200011c4 	.word	0x200011c4
 800a7b0:	e000ed20 	.word	0xe000ed20
 800a7b4:	20000720 	.word	0x20000720
 800a7b8:	e000ef34 	.word	0xe000ef34

0800a7bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
	__asm volatile
 800a7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c6:	b672      	cpsid	i
 800a7c8:	f383 8811 	msr	BASEPRI, r3
 800a7cc:	f3bf 8f6f 	isb	sy
 800a7d0:	f3bf 8f4f 	dsb	sy
 800a7d4:	b662      	cpsie	i
 800a7d6:	607b      	str	r3, [r7, #4]
}
 800a7d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a7da:	4b10      	ldr	r3, [pc, #64]	; (800a81c <vPortEnterCritical+0x60>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	3301      	adds	r3, #1
 800a7e0:	4a0e      	ldr	r2, [pc, #56]	; (800a81c <vPortEnterCritical+0x60>)
 800a7e2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a7e4:	4b0d      	ldr	r3, [pc, #52]	; (800a81c <vPortEnterCritical+0x60>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d111      	bne.n	800a810 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a7ec:	4b0c      	ldr	r3, [pc, #48]	; (800a820 <vPortEnterCritical+0x64>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d00c      	beq.n	800a810 <vPortEnterCritical+0x54>
	__asm volatile
 800a7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fa:	b672      	cpsid	i
 800a7fc:	f383 8811 	msr	BASEPRI, r3
 800a800:	f3bf 8f6f 	isb	sy
 800a804:	f3bf 8f4f 	dsb	sy
 800a808:	b662      	cpsie	i
 800a80a:	603b      	str	r3, [r7, #0]
}
 800a80c:	bf00      	nop
 800a80e:	e7fe      	b.n	800a80e <vPortEnterCritical+0x52>
	}
}
 800a810:	bf00      	nop
 800a812:	370c      	adds	r7, #12
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr
 800a81c:	20000720 	.word	0x20000720
 800a820:	e000ed04 	.word	0xe000ed04

0800a824 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a82a:	4b13      	ldr	r3, [pc, #76]	; (800a878 <vPortExitCritical+0x54>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d10c      	bne.n	800a84c <vPortExitCritical+0x28>
	__asm volatile
 800a832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a836:	b672      	cpsid	i
 800a838:	f383 8811 	msr	BASEPRI, r3
 800a83c:	f3bf 8f6f 	isb	sy
 800a840:	f3bf 8f4f 	dsb	sy
 800a844:	b662      	cpsie	i
 800a846:	607b      	str	r3, [r7, #4]
}
 800a848:	bf00      	nop
 800a84a:	e7fe      	b.n	800a84a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a84c:	4b0a      	ldr	r3, [pc, #40]	; (800a878 <vPortExitCritical+0x54>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	3b01      	subs	r3, #1
 800a852:	4a09      	ldr	r2, [pc, #36]	; (800a878 <vPortExitCritical+0x54>)
 800a854:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a856:	4b08      	ldr	r3, [pc, #32]	; (800a878 <vPortExitCritical+0x54>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d105      	bne.n	800a86a <vPortExitCritical+0x46>
 800a85e:	2300      	movs	r3, #0
 800a860:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	f383 8811 	msr	BASEPRI, r3
}
 800a868:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a86a:	bf00      	nop
 800a86c:	370c      	adds	r7, #12
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr
 800a876:	bf00      	nop
 800a878:	20000720 	.word	0x20000720
 800a87c:	00000000 	.word	0x00000000

0800a880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a880:	f3ef 8009 	mrs	r0, PSP
 800a884:	f3bf 8f6f 	isb	sy
 800a888:	4b15      	ldr	r3, [pc, #84]	; (800a8e0 <pxCurrentTCBConst>)
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	f01e 0f10 	tst.w	lr, #16
 800a890:	bf08      	it	eq
 800a892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a89a:	6010      	str	r0, [r2, #0]
 800a89c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a8a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a8a4:	b672      	cpsid	i
 800a8a6:	f380 8811 	msr	BASEPRI, r0
 800a8aa:	f3bf 8f4f 	dsb	sy
 800a8ae:	f3bf 8f6f 	isb	sy
 800a8b2:	b662      	cpsie	i
 800a8b4:	f7ff f9e6 	bl	8009c84 <vTaskSwitchContext>
 800a8b8:	f04f 0000 	mov.w	r0, #0
 800a8bc:	f380 8811 	msr	BASEPRI, r0
 800a8c0:	bc09      	pop	{r0, r3}
 800a8c2:	6819      	ldr	r1, [r3, #0]
 800a8c4:	6808      	ldr	r0, [r1, #0]
 800a8c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ca:	f01e 0f10 	tst.w	lr, #16
 800a8ce:	bf08      	it	eq
 800a8d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a8d4:	f380 8809 	msr	PSP, r0
 800a8d8:	f3bf 8f6f 	isb	sy
 800a8dc:	4770      	bx	lr
 800a8de:	bf00      	nop

0800a8e0 <pxCurrentTCBConst>:
 800a8e0:	20001094 	.word	0x20001094
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a8e4:	bf00      	nop
 800a8e6:	bf00      	nop

0800a8e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
	__asm volatile
 800a8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f2:	b672      	cpsid	i
 800a8f4:	f383 8811 	msr	BASEPRI, r3
 800a8f8:	f3bf 8f6f 	isb	sy
 800a8fc:	f3bf 8f4f 	dsb	sy
 800a900:	b662      	cpsie	i
 800a902:	607b      	str	r3, [r7, #4]
}
 800a904:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a906:	f7ff f903 	bl	8009b10 <xTaskIncrementTick>
 800a90a:	4603      	mov	r3, r0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d003      	beq.n	800a918 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a910:	4b06      	ldr	r3, [pc, #24]	; (800a92c <SysTick_Handler+0x44>)
 800a912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a916:	601a      	str	r2, [r3, #0]
 800a918:	2300      	movs	r3, #0
 800a91a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	f383 8811 	msr	BASEPRI, r3
}
 800a922:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a924:	bf00      	nop
 800a926:	3708      	adds	r7, #8
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}
 800a92c:	e000ed04 	.word	0xe000ed04

0800a930 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a930:	b480      	push	{r7}
 800a932:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a934:	4b0b      	ldr	r3, [pc, #44]	; (800a964 <vPortSetupTimerInterrupt+0x34>)
 800a936:	2200      	movs	r2, #0
 800a938:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a93a:	4b0b      	ldr	r3, [pc, #44]	; (800a968 <vPortSetupTimerInterrupt+0x38>)
 800a93c:	2200      	movs	r2, #0
 800a93e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a940:	4b0a      	ldr	r3, [pc, #40]	; (800a96c <vPortSetupTimerInterrupt+0x3c>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a0a      	ldr	r2, [pc, #40]	; (800a970 <vPortSetupTimerInterrupt+0x40>)
 800a946:	fba2 2303 	umull	r2, r3, r2, r3
 800a94a:	099b      	lsrs	r3, r3, #6
 800a94c:	4a09      	ldr	r2, [pc, #36]	; (800a974 <vPortSetupTimerInterrupt+0x44>)
 800a94e:	3b01      	subs	r3, #1
 800a950:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a952:	4b04      	ldr	r3, [pc, #16]	; (800a964 <vPortSetupTimerInterrupt+0x34>)
 800a954:	2207      	movs	r2, #7
 800a956:	601a      	str	r2, [r3, #0]
}
 800a958:	bf00      	nop
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr
 800a962:	bf00      	nop
 800a964:	e000e010 	.word	0xe000e010
 800a968:	e000e018 	.word	0xe000e018
 800a96c:	20000700 	.word	0x20000700
 800a970:	10624dd3 	.word	0x10624dd3
 800a974:	e000e014 	.word	0xe000e014

0800a978 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a978:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a988 <vPortEnableVFP+0x10>
 800a97c:	6801      	ldr	r1, [r0, #0]
 800a97e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a982:	6001      	str	r1, [r0, #0]
 800a984:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a986:	bf00      	nop
 800a988:	e000ed88 	.word	0xe000ed88

0800a98c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a992:	f3ef 8305 	mrs	r3, IPSR
 800a996:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2b0f      	cmp	r3, #15
 800a99c:	d916      	bls.n	800a9cc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a99e:	4a19      	ldr	r2, [pc, #100]	; (800aa04 <vPortValidateInterruptPriority+0x78>)
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	4413      	add	r3, r2
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a9a8:	4b17      	ldr	r3, [pc, #92]	; (800aa08 <vPortValidateInterruptPriority+0x7c>)
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	7afa      	ldrb	r2, [r7, #11]
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d20c      	bcs.n	800a9cc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800a9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b6:	b672      	cpsid	i
 800a9b8:	f383 8811 	msr	BASEPRI, r3
 800a9bc:	f3bf 8f6f 	isb	sy
 800a9c0:	f3bf 8f4f 	dsb	sy
 800a9c4:	b662      	cpsie	i
 800a9c6:	607b      	str	r3, [r7, #4]
}
 800a9c8:	bf00      	nop
 800a9ca:	e7fe      	b.n	800a9ca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a9cc:	4b0f      	ldr	r3, [pc, #60]	; (800aa0c <vPortValidateInterruptPriority+0x80>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a9d4:	4b0e      	ldr	r3, [pc, #56]	; (800aa10 <vPortValidateInterruptPriority+0x84>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d90c      	bls.n	800a9f6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800a9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e0:	b672      	cpsid	i
 800a9e2:	f383 8811 	msr	BASEPRI, r3
 800a9e6:	f3bf 8f6f 	isb	sy
 800a9ea:	f3bf 8f4f 	dsb	sy
 800a9ee:	b662      	cpsie	i
 800a9f0:	603b      	str	r3, [r7, #0]
}
 800a9f2:	bf00      	nop
 800a9f4:	e7fe      	b.n	800a9f4 <vPortValidateInterruptPriority+0x68>
	}
 800a9f6:	bf00      	nop
 800a9f8:	3714      	adds	r7, #20
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop
 800aa04:	e000e3f0 	.word	0xe000e3f0
 800aa08:	200011c0 	.word	0x200011c0
 800aa0c:	e000ed0c 	.word	0xe000ed0c
 800aa10:	200011c4 	.word	0x200011c4

0800aa14 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b08a      	sub	sp, #40	; 0x28
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800aa20:	f7fe ffa8 	bl	8009974 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800aa24:	4b5b      	ldr	r3, [pc, #364]	; (800ab94 <pvPortMalloc+0x180>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d101      	bne.n	800aa30 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800aa2c:	f000 f91a 	bl	800ac64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800aa30:	4b59      	ldr	r3, [pc, #356]	; (800ab98 <pvPortMalloc+0x184>)
 800aa32:	681a      	ldr	r2, [r3, #0]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	4013      	ands	r3, r2
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	f040 8092 	bne.w	800ab62 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d01f      	beq.n	800aa84 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800aa44:	2208      	movs	r2, #8
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4413      	add	r3, r2
 800aa4a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f003 0307 	and.w	r3, r3, #7
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d016      	beq.n	800aa84 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f023 0307 	bic.w	r3, r3, #7
 800aa5c:	3308      	adds	r3, #8
 800aa5e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f003 0307 	and.w	r3, r3, #7
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d00c      	beq.n	800aa84 <pvPortMalloc+0x70>
	__asm volatile
 800aa6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa6e:	b672      	cpsid	i
 800aa70:	f383 8811 	msr	BASEPRI, r3
 800aa74:	f3bf 8f6f 	isb	sy
 800aa78:	f3bf 8f4f 	dsb	sy
 800aa7c:	b662      	cpsie	i
 800aa7e:	617b      	str	r3, [r7, #20]
}
 800aa80:	bf00      	nop
 800aa82:	e7fe      	b.n	800aa82 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d06b      	beq.n	800ab62 <pvPortMalloc+0x14e>
 800aa8a:	4b44      	ldr	r3, [pc, #272]	; (800ab9c <pvPortMalloc+0x188>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d866      	bhi.n	800ab62 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aa94:	4b42      	ldr	r3, [pc, #264]	; (800aba0 <pvPortMalloc+0x18c>)
 800aa96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aa98:	4b41      	ldr	r3, [pc, #260]	; (800aba0 <pvPortMalloc+0x18c>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa9e:	e004      	b.n	800aaaa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800aaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aaa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	687a      	ldr	r2, [r7, #4]
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d903      	bls.n	800aabc <pvPortMalloc+0xa8>
 800aab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d1f1      	bne.n	800aaa0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aabc:	4b35      	ldr	r3, [pc, #212]	; (800ab94 <pvPortMalloc+0x180>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d04d      	beq.n	800ab62 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aac6:	6a3b      	ldr	r3, [r7, #32]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	2208      	movs	r2, #8
 800aacc:	4413      	add	r3, r2
 800aace:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	6a3b      	ldr	r3, [r7, #32]
 800aad6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aada:	685a      	ldr	r2, [r3, #4]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	1ad2      	subs	r2, r2, r3
 800aae0:	2308      	movs	r3, #8
 800aae2:	005b      	lsls	r3, r3, #1
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d921      	bls.n	800ab2c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	4413      	add	r3, r2
 800aaee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aaf0:	69bb      	ldr	r3, [r7, #24]
 800aaf2:	f003 0307 	and.w	r3, r3, #7
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d00c      	beq.n	800ab14 <pvPortMalloc+0x100>
	__asm volatile
 800aafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aafe:	b672      	cpsid	i
 800ab00:	f383 8811 	msr	BASEPRI, r3
 800ab04:	f3bf 8f6f 	isb	sy
 800ab08:	f3bf 8f4f 	dsb	sy
 800ab0c:	b662      	cpsie	i
 800ab0e:	613b      	str	r3, [r7, #16]
}
 800ab10:	bf00      	nop
 800ab12:	e7fe      	b.n	800ab12 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ab14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab16:	685a      	ldr	r2, [r3, #4]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	1ad2      	subs	r2, r2, r3
 800ab1c:	69bb      	ldr	r3, [r7, #24]
 800ab1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ab20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ab26:	69b8      	ldr	r0, [r7, #24]
 800ab28:	f000 f8fe 	bl	800ad28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ab2c:	4b1b      	ldr	r3, [pc, #108]	; (800ab9c <pvPortMalloc+0x188>)
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	1ad3      	subs	r3, r2, r3
 800ab36:	4a19      	ldr	r2, [pc, #100]	; (800ab9c <pvPortMalloc+0x188>)
 800ab38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ab3a:	4b18      	ldr	r3, [pc, #96]	; (800ab9c <pvPortMalloc+0x188>)
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	4b19      	ldr	r3, [pc, #100]	; (800aba4 <pvPortMalloc+0x190>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d203      	bcs.n	800ab4e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ab46:	4b15      	ldr	r3, [pc, #84]	; (800ab9c <pvPortMalloc+0x188>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4a16      	ldr	r2, [pc, #88]	; (800aba4 <pvPortMalloc+0x190>)
 800ab4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ab4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab50:	685a      	ldr	r2, [r3, #4]
 800ab52:	4b11      	ldr	r3, [pc, #68]	; (800ab98 <pvPortMalloc+0x184>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	431a      	orrs	r2, r3
 800ab58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ab5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5e:	2200      	movs	r2, #0
 800ab60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ab62:	f7fe ff15 	bl	8009990 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab66:	69fb      	ldr	r3, [r7, #28]
 800ab68:	f003 0307 	and.w	r3, r3, #7
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d00c      	beq.n	800ab8a <pvPortMalloc+0x176>
	__asm volatile
 800ab70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab74:	b672      	cpsid	i
 800ab76:	f383 8811 	msr	BASEPRI, r3
 800ab7a:	f3bf 8f6f 	isb	sy
 800ab7e:	f3bf 8f4f 	dsb	sy
 800ab82:	b662      	cpsie	i
 800ab84:	60fb      	str	r3, [r7, #12]
}
 800ab86:	bf00      	nop
 800ab88:	e7fe      	b.n	800ab88 <pvPortMalloc+0x174>
	return pvReturn;
 800ab8a:	69fb      	ldr	r3, [r7, #28]
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3728      	adds	r7, #40	; 0x28
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	20004dd0 	.word	0x20004dd0
 800ab98:	20004ddc 	.word	0x20004ddc
 800ab9c:	20004dd4 	.word	0x20004dd4
 800aba0:	20004dc8 	.word	0x20004dc8
 800aba4:	20004dd8 	.word	0x20004dd8

0800aba8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b086      	sub	sp, #24
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d04c      	beq.n	800ac54 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800abba:	2308      	movs	r3, #8
 800abbc:	425b      	negs	r3, r3
 800abbe:	697a      	ldr	r2, [r7, #20]
 800abc0:	4413      	add	r3, r2
 800abc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	685a      	ldr	r2, [r3, #4]
 800abcc:	4b23      	ldr	r3, [pc, #140]	; (800ac5c <vPortFree+0xb4>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4013      	ands	r3, r2
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d10c      	bne.n	800abf0 <vPortFree+0x48>
	__asm volatile
 800abd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abda:	b672      	cpsid	i
 800abdc:	f383 8811 	msr	BASEPRI, r3
 800abe0:	f3bf 8f6f 	isb	sy
 800abe4:	f3bf 8f4f 	dsb	sy
 800abe8:	b662      	cpsie	i
 800abea:	60fb      	str	r3, [r7, #12]
}
 800abec:	bf00      	nop
 800abee:	e7fe      	b.n	800abee <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d00c      	beq.n	800ac12 <vPortFree+0x6a>
	__asm volatile
 800abf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfc:	b672      	cpsid	i
 800abfe:	f383 8811 	msr	BASEPRI, r3
 800ac02:	f3bf 8f6f 	isb	sy
 800ac06:	f3bf 8f4f 	dsb	sy
 800ac0a:	b662      	cpsie	i
 800ac0c:	60bb      	str	r3, [r7, #8]
}
 800ac0e:	bf00      	nop
 800ac10:	e7fe      	b.n	800ac10 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	685a      	ldr	r2, [r3, #4]
 800ac16:	4b11      	ldr	r3, [pc, #68]	; (800ac5c <vPortFree+0xb4>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4013      	ands	r3, r2
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d019      	beq.n	800ac54 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d115      	bne.n	800ac54 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	685a      	ldr	r2, [r3, #4]
 800ac2c:	4b0b      	ldr	r3, [pc, #44]	; (800ac5c <vPortFree+0xb4>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	43db      	mvns	r3, r3
 800ac32:	401a      	ands	r2, r3
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ac38:	f7fe fe9c 	bl	8009974 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	685a      	ldr	r2, [r3, #4]
 800ac40:	4b07      	ldr	r3, [pc, #28]	; (800ac60 <vPortFree+0xb8>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4413      	add	r3, r2
 800ac46:	4a06      	ldr	r2, [pc, #24]	; (800ac60 <vPortFree+0xb8>)
 800ac48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ac4a:	6938      	ldr	r0, [r7, #16]
 800ac4c:	f000 f86c 	bl	800ad28 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ac50:	f7fe fe9e 	bl	8009990 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ac54:	bf00      	nop
 800ac56:	3718      	adds	r7, #24
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	20004ddc 	.word	0x20004ddc
 800ac60:	20004dd4 	.word	0x20004dd4

0800ac64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ac64:	b480      	push	{r7}
 800ac66:	b085      	sub	sp, #20
 800ac68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ac6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ac6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ac70:	4b27      	ldr	r3, [pc, #156]	; (800ad10 <prvHeapInit+0xac>)
 800ac72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f003 0307 	and.w	r3, r3, #7
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d00c      	beq.n	800ac98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	3307      	adds	r3, #7
 800ac82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f023 0307 	bic.w	r3, r3, #7
 800ac8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ac8c:	68ba      	ldr	r2, [r7, #8]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	1ad3      	subs	r3, r2, r3
 800ac92:	4a1f      	ldr	r2, [pc, #124]	; (800ad10 <prvHeapInit+0xac>)
 800ac94:	4413      	add	r3, r2
 800ac96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ac9c:	4a1d      	ldr	r2, [pc, #116]	; (800ad14 <prvHeapInit+0xb0>)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aca2:	4b1c      	ldr	r3, [pc, #112]	; (800ad14 <prvHeapInit+0xb0>)
 800aca4:	2200      	movs	r2, #0
 800aca6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	68ba      	ldr	r2, [r7, #8]
 800acac:	4413      	add	r3, r2
 800acae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800acb0:	2208      	movs	r2, #8
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	1a9b      	subs	r3, r3, r2
 800acb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f023 0307 	bic.w	r3, r3, #7
 800acbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	4a15      	ldr	r2, [pc, #84]	; (800ad18 <prvHeapInit+0xb4>)
 800acc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800acc6:	4b14      	ldr	r3, [pc, #80]	; (800ad18 <prvHeapInit+0xb4>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2200      	movs	r2, #0
 800accc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800acce:	4b12      	ldr	r3, [pc, #72]	; (800ad18 <prvHeapInit+0xb4>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	2200      	movs	r2, #0
 800acd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	68fa      	ldr	r2, [r7, #12]
 800acde:	1ad2      	subs	r2, r2, r3
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ace4:	4b0c      	ldr	r3, [pc, #48]	; (800ad18 <prvHeapInit+0xb4>)
 800ace6:	681a      	ldr	r2, [r3, #0]
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	4a0a      	ldr	r2, [pc, #40]	; (800ad1c <prvHeapInit+0xb8>)
 800acf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	4a09      	ldr	r2, [pc, #36]	; (800ad20 <prvHeapInit+0xbc>)
 800acfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800acfc:	4b09      	ldr	r3, [pc, #36]	; (800ad24 <prvHeapInit+0xc0>)
 800acfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ad02:	601a      	str	r2, [r3, #0]
}
 800ad04:	bf00      	nop
 800ad06:	3714      	adds	r7, #20
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr
 800ad10:	200011c8 	.word	0x200011c8
 800ad14:	20004dc8 	.word	0x20004dc8
 800ad18:	20004dd0 	.word	0x20004dd0
 800ad1c:	20004dd8 	.word	0x20004dd8
 800ad20:	20004dd4 	.word	0x20004dd4
 800ad24:	20004ddc 	.word	0x20004ddc

0800ad28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b085      	sub	sp, #20
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ad30:	4b28      	ldr	r3, [pc, #160]	; (800add4 <prvInsertBlockIntoFreeList+0xac>)
 800ad32:	60fb      	str	r3, [r7, #12]
 800ad34:	e002      	b.n	800ad3c <prvInsertBlockIntoFreeList+0x14>
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	60fb      	str	r3, [r7, #12]
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d8f7      	bhi.n	800ad36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	685b      	ldr	r3, [r3, #4]
 800ad4e:	68ba      	ldr	r2, [r7, #8]
 800ad50:	4413      	add	r3, r2
 800ad52:	687a      	ldr	r2, [r7, #4]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d108      	bne.n	800ad6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	685a      	ldr	r2, [r3, #4]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	441a      	add	r2, r3
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	68ba      	ldr	r2, [r7, #8]
 800ad74:	441a      	add	r2, r3
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	d118      	bne.n	800adb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	4b15      	ldr	r3, [pc, #84]	; (800add8 <prvInsertBlockIntoFreeList+0xb0>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d00d      	beq.n	800ada6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	685a      	ldr	r2, [r3, #4]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	441a      	add	r2, r3
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	681a      	ldr	r2, [r3, #0]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	601a      	str	r2, [r3, #0]
 800ada4:	e008      	b.n	800adb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ada6:	4b0c      	ldr	r3, [pc, #48]	; (800add8 <prvInsertBlockIntoFreeList+0xb0>)
 800ada8:	681a      	ldr	r2, [r3, #0]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	601a      	str	r2, [r3, #0]
 800adae:	e003      	b.n	800adb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	d002      	beq.n	800adc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800adc6:	bf00      	nop
 800adc8:	3714      	adds	r7, #20
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr
 800add2:	bf00      	nop
 800add4:	20004dc8 	.word	0x20004dc8
 800add8:	20004dd0 	.word	0x20004dd0

0800addc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800ade6:	f00a fa21 	bl	801522c <sys_timeouts_sleeptime>
 800adea:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adf2:	d10b      	bne.n	800ae0c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800adf4:	4813      	ldr	r0, [pc, #76]	; (800ae44 <tcpip_timeouts_mbox_fetch+0x68>)
 800adf6:	f00c ff90 	bl	8017d1a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800adfa:	2200      	movs	r2, #0
 800adfc:	6839      	ldr	r1, [r7, #0]
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f00c ff02 	bl	8017c08 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800ae04:	480f      	ldr	r0, [pc, #60]	; (800ae44 <tcpip_timeouts_mbox_fetch+0x68>)
 800ae06:	f00c ff79 	bl	8017cfc <sys_mutex_lock>
    return;
 800ae0a:	e018      	b.n	800ae3e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d102      	bne.n	800ae18 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800ae12:	f00a f9d1 	bl	80151b8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ae16:	e7e6      	b.n	800ade6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800ae18:	480a      	ldr	r0, [pc, #40]	; (800ae44 <tcpip_timeouts_mbox_fetch+0x68>)
 800ae1a:	f00c ff7e 	bl	8017d1a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800ae1e:	68fa      	ldr	r2, [r7, #12]
 800ae20:	6839      	ldr	r1, [r7, #0]
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f00c fef0 	bl	8017c08 <sys_arch_mbox_fetch>
 800ae28:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800ae2a:	4806      	ldr	r0, [pc, #24]	; (800ae44 <tcpip_timeouts_mbox_fetch+0x68>)
 800ae2c:	f00c ff66 	bl	8017cfc <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae36:	d102      	bne.n	800ae3e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800ae38:	f00a f9be 	bl	80151b8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ae3c:	e7d3      	b.n	800ade6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800ae3e:	3710      	adds	r7, #16
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	2000e2cc 	.word	0x2000e2cc

0800ae48 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b084      	sub	sp, #16
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800ae50:	4810      	ldr	r0, [pc, #64]	; (800ae94 <tcpip_thread+0x4c>)
 800ae52:	f00c ff53 	bl	8017cfc <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800ae56:	4b10      	ldr	r3, [pc, #64]	; (800ae98 <tcpip_thread+0x50>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d005      	beq.n	800ae6a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800ae5e:	4b0e      	ldr	r3, [pc, #56]	; (800ae98 <tcpip_thread+0x50>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	4a0e      	ldr	r2, [pc, #56]	; (800ae9c <tcpip_thread+0x54>)
 800ae64:	6812      	ldr	r2, [r2, #0]
 800ae66:	4610      	mov	r0, r2
 800ae68:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ae6a:	f107 030c 	add.w	r3, r7, #12
 800ae6e:	4619      	mov	r1, r3
 800ae70:	480b      	ldr	r0, [pc, #44]	; (800aea0 <tcpip_thread+0x58>)
 800ae72:	f7ff ffb3 	bl	800addc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d106      	bne.n	800ae8a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ae7c:	4b09      	ldr	r3, [pc, #36]	; (800aea4 <tcpip_thread+0x5c>)
 800ae7e:	2291      	movs	r2, #145	; 0x91
 800ae80:	4909      	ldr	r1, [pc, #36]	; (800aea8 <tcpip_thread+0x60>)
 800ae82:	480a      	ldr	r0, [pc, #40]	; (800aeac <tcpip_thread+0x64>)
 800ae84:	f00d f9b4 	bl	80181f0 <iprintf>
      continue;
 800ae88:	e003      	b.n	800ae92 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f000 f80f 	bl	800aeb0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ae92:	e7ea      	b.n	800ae6a <tcpip_thread+0x22>
 800ae94:	2000e2cc 	.word	0x2000e2cc
 800ae98:	20004de0 	.word	0x20004de0
 800ae9c:	20004de4 	.word	0x20004de4
 800aea0:	20004de8 	.word	0x20004de8
 800aea4:	0801a424 	.word	0x0801a424
 800aea8:	0801a454 	.word	0x0801a454
 800aeac:	0801a474 	.word	0x0801a474

0800aeb0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	2b02      	cmp	r3, #2
 800aebe:	d026      	beq.n	800af0e <tcpip_thread_handle_msg+0x5e>
 800aec0:	2b02      	cmp	r3, #2
 800aec2:	dc2b      	bgt.n	800af1c <tcpip_thread_handle_msg+0x6c>
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d002      	beq.n	800aece <tcpip_thread_handle_msg+0x1e>
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d015      	beq.n	800aef8 <tcpip_thread_handle_msg+0x48>
 800aecc:	e026      	b.n	800af1c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	68db      	ldr	r3, [r3, #12]
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	6850      	ldr	r0, [r2, #4]
 800aed6:	687a      	ldr	r2, [r7, #4]
 800aed8:	6892      	ldr	r2, [r2, #8]
 800aeda:	4611      	mov	r1, r2
 800aedc:	4798      	blx	r3
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d004      	beq.n	800aeee <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	4618      	mov	r0, r3
 800aeea:	f003 fd6d 	bl	800e9c8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800aeee:	6879      	ldr	r1, [r7, #4]
 800aef0:	2009      	movs	r0, #9
 800aef2:	f002 fec5 	bl	800dc80 <memp_free>
      break;
 800aef6:	e018      	b.n	800af2a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	6892      	ldr	r2, [r2, #8]
 800af00:	4610      	mov	r0, r2
 800af02:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800af04:	6879      	ldr	r1, [r7, #4]
 800af06:	2008      	movs	r0, #8
 800af08:	f002 feba 	bl	800dc80 <memp_free>
      break;
 800af0c:	e00d      	b.n	800af2a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	6892      	ldr	r2, [r2, #8]
 800af16:	4610      	mov	r0, r2
 800af18:	4798      	blx	r3
      break;
 800af1a:	e006      	b.n	800af2a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800af1c:	4b05      	ldr	r3, [pc, #20]	; (800af34 <tcpip_thread_handle_msg+0x84>)
 800af1e:	22cf      	movs	r2, #207	; 0xcf
 800af20:	4905      	ldr	r1, [pc, #20]	; (800af38 <tcpip_thread_handle_msg+0x88>)
 800af22:	4806      	ldr	r0, [pc, #24]	; (800af3c <tcpip_thread_handle_msg+0x8c>)
 800af24:	f00d f964 	bl	80181f0 <iprintf>
      break;
 800af28:	bf00      	nop
  }
}
 800af2a:	bf00      	nop
 800af2c:	3708      	adds	r7, #8
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	0801a424 	.word	0x0801a424
 800af38:	0801a454 	.word	0x0801a454
 800af3c:	0801a474 	.word	0x0801a474

0800af40 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b086      	sub	sp, #24
 800af44:	af00      	add	r7, sp, #0
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	60b9      	str	r1, [r7, #8]
 800af4a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800af4c:	481a      	ldr	r0, [pc, #104]	; (800afb8 <tcpip_inpkt+0x78>)
 800af4e:	f00c fe9a 	bl	8017c86 <sys_mbox_valid>
 800af52:	4603      	mov	r3, r0
 800af54:	2b00      	cmp	r3, #0
 800af56:	d105      	bne.n	800af64 <tcpip_inpkt+0x24>
 800af58:	4b18      	ldr	r3, [pc, #96]	; (800afbc <tcpip_inpkt+0x7c>)
 800af5a:	22fc      	movs	r2, #252	; 0xfc
 800af5c:	4918      	ldr	r1, [pc, #96]	; (800afc0 <tcpip_inpkt+0x80>)
 800af5e:	4819      	ldr	r0, [pc, #100]	; (800afc4 <tcpip_inpkt+0x84>)
 800af60:	f00d f946 	bl	80181f0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800af64:	2009      	movs	r0, #9
 800af66:	f002 fe39 	bl	800dbdc <memp_malloc>
 800af6a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800af6c:	697b      	ldr	r3, [r7, #20]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d102      	bne.n	800af78 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800af72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af76:	e01a      	b.n	800afae <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	2200      	movs	r2, #0
 800af7c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	68fa      	ldr	r2, [r7, #12]
 800af82:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	68ba      	ldr	r2, [r7, #8]
 800af88:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800af90:	6979      	ldr	r1, [r7, #20]
 800af92:	4809      	ldr	r0, [pc, #36]	; (800afb8 <tcpip_inpkt+0x78>)
 800af94:	f00c fe1e 	bl	8017bd4 <sys_mbox_trypost>
 800af98:	4603      	mov	r3, r0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d006      	beq.n	800afac <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800af9e:	6979      	ldr	r1, [r7, #20]
 800afa0:	2009      	movs	r0, #9
 800afa2:	f002 fe6d 	bl	800dc80 <memp_free>
    return ERR_MEM;
 800afa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afaa:	e000      	b.n	800afae <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800afac:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3718      	adds	r7, #24
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
 800afb6:	bf00      	nop
 800afb8:	20004de8 	.word	0x20004de8
 800afbc:	0801a424 	.word	0x0801a424
 800afc0:	0801a49c 	.word	0x0801a49c
 800afc4:	0801a474 	.word	0x0801a474

0800afc8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800afd8:	f003 0318 	and.w	r3, r3, #24
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d006      	beq.n	800afee <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800afe0:	4a08      	ldr	r2, [pc, #32]	; (800b004 <tcpip_input+0x3c>)
 800afe2:	6839      	ldr	r1, [r7, #0]
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f7ff ffab 	bl	800af40 <tcpip_inpkt>
 800afea:	4603      	mov	r3, r0
 800afec:	e005      	b.n	800affa <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800afee:	4a06      	ldr	r2, [pc, #24]	; (800b008 <tcpip_input+0x40>)
 800aff0:	6839      	ldr	r1, [r7, #0]
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f7ff ffa4 	bl	800af40 <tcpip_inpkt>
 800aff8:	4603      	mov	r3, r0
}
 800affa:	4618      	mov	r0, r3
 800affc:	3708      	adds	r7, #8
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}
 800b002:	bf00      	nop
 800b004:	080179e5 	.word	0x080179e5
 800b008:	080168f9 	.word	0x080168f9

0800b00c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b016:	4819      	ldr	r0, [pc, #100]	; (800b07c <tcpip_try_callback+0x70>)
 800b018:	f00c fe35 	bl	8017c86 <sys_mbox_valid>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d106      	bne.n	800b030 <tcpip_try_callback+0x24>
 800b022:	4b17      	ldr	r3, [pc, #92]	; (800b080 <tcpip_try_callback+0x74>)
 800b024:	f240 125d 	movw	r2, #349	; 0x15d
 800b028:	4916      	ldr	r1, [pc, #88]	; (800b084 <tcpip_try_callback+0x78>)
 800b02a:	4817      	ldr	r0, [pc, #92]	; (800b088 <tcpip_try_callback+0x7c>)
 800b02c:	f00d f8e0 	bl	80181f0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b030:	2008      	movs	r0, #8
 800b032:	f002 fdd3 	bl	800dbdc <memp_malloc>
 800b036:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d102      	bne.n	800b044 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800b03e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b042:	e017      	b.n	800b074 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2201      	movs	r2, #1
 800b048:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	683a      	ldr	r2, [r7, #0]
 800b054:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b056:	68f9      	ldr	r1, [r7, #12]
 800b058:	4808      	ldr	r0, [pc, #32]	; (800b07c <tcpip_try_callback+0x70>)
 800b05a:	f00c fdbb 	bl	8017bd4 <sys_mbox_trypost>
 800b05e:	4603      	mov	r3, r0
 800b060:	2b00      	cmp	r3, #0
 800b062:	d006      	beq.n	800b072 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b064:	68f9      	ldr	r1, [r7, #12]
 800b066:	2008      	movs	r0, #8
 800b068:	f002 fe0a 	bl	800dc80 <memp_free>
    return ERR_MEM;
 800b06c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b070:	e000      	b.n	800b074 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800b072:	2300      	movs	r3, #0
}
 800b074:	4618      	mov	r0, r3
 800b076:	3710      	adds	r7, #16
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}
 800b07c:	20004de8 	.word	0x20004de8
 800b080:	0801a424 	.word	0x0801a424
 800b084:	0801a49c 	.word	0x0801a49c
 800b088:	0801a474 	.word	0x0801a474

0800b08c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b084      	sub	sp, #16
 800b090:	af02      	add	r7, sp, #8
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b096:	f002 f919 	bl	800d2cc <lwip_init>

  tcpip_init_done = initfunc;
 800b09a:	4a17      	ldr	r2, [pc, #92]	; (800b0f8 <tcpip_init+0x6c>)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b0a0:	4a16      	ldr	r2, [pc, #88]	; (800b0fc <tcpip_init+0x70>)
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b0a6:	2106      	movs	r1, #6
 800b0a8:	4815      	ldr	r0, [pc, #84]	; (800b100 <tcpip_init+0x74>)
 800b0aa:	f00c fd71 	bl	8017b90 <sys_mbox_new>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d006      	beq.n	800b0c2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b0b4:	4b13      	ldr	r3, [pc, #76]	; (800b104 <tcpip_init+0x78>)
 800b0b6:	f240 2261 	movw	r2, #609	; 0x261
 800b0ba:	4913      	ldr	r1, [pc, #76]	; (800b108 <tcpip_init+0x7c>)
 800b0bc:	4813      	ldr	r0, [pc, #76]	; (800b10c <tcpip_init+0x80>)
 800b0be:	f00d f897 	bl	80181f0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b0c2:	4813      	ldr	r0, [pc, #76]	; (800b110 <tcpip_init+0x84>)
 800b0c4:	f00c fdfe 	bl	8017cc4 <sys_mutex_new>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d006      	beq.n	800b0dc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b0ce:	4b0d      	ldr	r3, [pc, #52]	; (800b104 <tcpip_init+0x78>)
 800b0d0:	f240 2265 	movw	r2, #613	; 0x265
 800b0d4:	490f      	ldr	r1, [pc, #60]	; (800b114 <tcpip_init+0x88>)
 800b0d6:	480d      	ldr	r0, [pc, #52]	; (800b10c <tcpip_init+0x80>)
 800b0d8:	f00d f88a 	bl	80181f0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b0dc:	2300      	movs	r3, #0
 800b0de:	9300      	str	r3, [sp, #0]
 800b0e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	490c      	ldr	r1, [pc, #48]	; (800b118 <tcpip_init+0x8c>)
 800b0e8:	480c      	ldr	r0, [pc, #48]	; (800b11c <tcpip_init+0x90>)
 800b0ea:	f00c fe23 	bl	8017d34 <sys_thread_new>
}
 800b0ee:	bf00      	nop
 800b0f0:	3708      	adds	r7, #8
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}
 800b0f6:	bf00      	nop
 800b0f8:	20004de0 	.word	0x20004de0
 800b0fc:	20004de4 	.word	0x20004de4
 800b100:	20004de8 	.word	0x20004de8
 800b104:	0801a424 	.word	0x0801a424
 800b108:	0801a4ac 	.word	0x0801a4ac
 800b10c:	0801a474 	.word	0x0801a474
 800b110:	2000e2cc 	.word	0x2000e2cc
 800b114:	0801a4d0 	.word	0x0801a4d0
 800b118:	0800ae49 	.word	0x0800ae49
 800b11c:	0801a4f4 	.word	0x0801a4f4

0800b120 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b084      	sub	sp, #16
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d002      	beq.n	800b136 <fs_open+0x16>
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d102      	bne.n	800b13c <fs_open+0x1c>
    return ERR_ARG;
 800b136:	f06f 030f 	mvn.w	r3, #15
 800b13a:	e028      	b.n	800b18e <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800b13c:	4b16      	ldr	r3, [pc, #88]	; (800b198 <fs_open+0x78>)
 800b13e:	60fb      	str	r3, [r7, #12]
 800b140:	e020      	b.n	800b184 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	4619      	mov	r1, r3
 800b148:	6838      	ldr	r0, [r7, #0]
 800b14a:	f7f5 f879 	bl	8000240 <strcmp>
 800b14e:	4603      	mov	r3, r0
 800b150:	2b00      	cmp	r3, #0
 800b152:	d114      	bne.n	800b17e <fs_open+0x5e>
      file->data = (const char *)f->data;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	689a      	ldr	r2, [r3, #8]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	68da      	ldr	r2, [r3, #12]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	68da      	ldr	r2, [r3, #12]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2200      	movs	r2, #0
 800b170:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	7c1a      	ldrb	r2, [r3, #16]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800b17a:	2300      	movs	r3, #0
 800b17c:	e007      	b.n	800b18e <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	60fb      	str	r3, [r7, #12]
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d1db      	bne.n	800b142 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800b18a:	f06f 0305 	mvn.w	r3, #5
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3710      	adds	r7, #16
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	08021310 	.word	0x08021310

0800b19c <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800b1a4:	bf00      	nop
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b083      	sub	sp, #12
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	685a      	ldr	r2, [r3, #4]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	689b      	ldr	r3, [r3, #8]
 800b1c0:	1ad3      	subs	r3, r2, r3
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	370c      	adds	r7, #12
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr

0800b1ce <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 800b1ce:	b580      	push	{r7, lr}
 800b1d0:	b082      	sub	sp, #8
 800b1d2:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 800b1d4:	f240 4024 	movw	r0, #1060	; 0x424
 800b1d8:	f002 fb7e 	bl	800d8d8 <mem_malloc>
 800b1dc:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d005      	beq.n	800b1f0 <http_ssi_state_alloc+0x22>
    memset(ret, 0, sizeof(struct http_ssi_state));
 800b1e4:	f240 4224 	movw	r2, #1060	; 0x424
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f00c ff4e 	bl	801808c <memset>
  }
  return ret;
 800b1f0:	687b      	ldr	r3, [r7, #4]
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3708      	adds	r7, #8
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}

0800b1fa <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b082      	sub	sp, #8
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d002      	beq.n	800b20e <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f002 f9cb 	bl	800d5a4 <mem_free>
  }
}
 800b20e:	bf00      	nop
 800b210:	3708      	adds	r7, #8
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}

0800b216 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800b216:	b580      	push	{r7, lr}
 800b218:	b082      	sub	sp, #8
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800b21e:	22d8      	movs	r2, #216	; 0xd8
 800b220:	2100      	movs	r1, #0
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f00c ff32 	bl	801808c <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2205      	movs	r2, #5
 800b22c:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800b230:	bf00      	nop
 800b232:	3708      	adds	r7, #8
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800b23e:	20d8      	movs	r0, #216	; 0xd8
 800b240:	f002 fb4a 	bl	800d8d8 <mem_malloc>
 800b244:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d002      	beq.n	800b252 <http_state_alloc+0x1a>
    http_state_init(ret);
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f7ff ffe2 	bl	800b216 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800b252:	687b      	ldr	r3, [r7, #4]
}
 800b254:	4618      	mov	r0, r3
 800b256:	3708      	adds	r7, #8
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	695b      	ldr	r3, [r3, #20]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d007      	beq.n	800b27c <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	695b      	ldr	r3, [r3, #20]
 800b270:	4618      	mov	r0, r3
 800b272:	f7ff ff93 	bl	800b19c <fs_close>
    hs->handle = NULL;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b280:	2b00      	cmp	r3, #0
 800b282:	d007      	beq.n	800b294 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b288:	4618      	mov	r0, r3
 800b28a:	f7ff ffb6 	bl	800b1fa <http_ssi_state_free>
    hs->ssi = NULL;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2200      	movs	r2, #0
 800b292:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6a1b      	ldr	r3, [r3, #32]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d007      	beq.n	800b2ac <http_state_eof+0x50>
    pbuf_free(hs->req);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6a1b      	ldr	r3, [r3, #32]
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f003 fb91 	bl	800e9c8 <pbuf_free>
    hs->req = NULL;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800b2ac:	bf00      	nop
 800b2ae:	3708      	adds	r7, #8
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}

0800b2b4 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d005      	beq.n	800b2ce <http_state_free+0x1a>
    http_state_eof(hs);
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f7ff ffca 	bl	800b25c <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f002 f96b 	bl	800d5a4 <mem_free>
  }
}
 800b2ce:	bf00      	nop
 800b2d0:	3708      	adds	r7, #8
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}
	...

0800b2d8 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b086      	sub	sp, #24
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	60f8      	str	r0, [r7, #12]
 800b2e0:	60b9      	str	r1, [r7, #8]
 800b2e2:	607a      	str	r2, [r7, #4]
 800b2e4:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d106      	bne.n	800b2fa <http_write+0x22>
 800b2ec:	4b2c      	ldr	r3, [pc, #176]	; (800b3a0 <http_write+0xc8>)
 800b2ee:	f240 2219 	movw	r2, #537	; 0x219
 800b2f2:	492c      	ldr	r1, [pc, #176]	; (800b3a4 <http_write+0xcc>)
 800b2f4:	482c      	ldr	r0, [pc, #176]	; (800b3a8 <http_write+0xd0>)
 800b2f6:	f00c ff7b 	bl	80181f0 <iprintf>
  len = *length;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	881b      	ldrh	r3, [r3, #0]
 800b2fe:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800b300:	8afb      	ldrh	r3, [r7, #22]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d101      	bne.n	800b30a <http_write+0x32>
    return ERR_OK;
 800b306:	2300      	movs	r3, #0
 800b308:	e045      	b.n	800b396 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b310:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800b312:	8aba      	ldrh	r2, [r7, #20]
 800b314:	8afb      	ldrh	r3, [r7, #22]
 800b316:	429a      	cmp	r2, r3
 800b318:	d201      	bcs.n	800b31e <http_write+0x46>
    len = max_len;
 800b31a:	8abb      	ldrh	r3, [r7, #20]
 800b31c:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b322:	005b      	lsls	r3, r3, #1
 800b324:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800b326:	8afa      	ldrh	r2, [r7, #22]
 800b328:	8abb      	ldrh	r3, [r7, #20]
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d901      	bls.n	800b332 <http_write+0x5a>
    len = max_len;
 800b32e:	8abb      	ldrh	r3, [r7, #20]
 800b330:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800b332:	78fb      	ldrb	r3, [r7, #3]
 800b334:	8afa      	ldrh	r2, [r7, #22]
 800b336:	68b9      	ldr	r1, [r7, #8]
 800b338:	68f8      	ldr	r0, [r7, #12]
 800b33a:	f008 f8d5 	bl	80134e8 <tcp_write>
 800b33e:	4603      	mov	r3, r0
 800b340:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800b342:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b34a:	d10f      	bne.n	800b36c <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b352:	2b00      	cmp	r3, #0
 800b354:	d004      	beq.n	800b360 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800b35c:	2b08      	cmp	r3, #8
 800b35e:	d902      	bls.n	800b366 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800b360:	2301      	movs	r3, #1
 800b362:	82fb      	strh	r3, [r7, #22]
 800b364:	e002      	b.n	800b36c <http_write+0x94>
      } else {
        len /= 2;
 800b366:	8afb      	ldrh	r3, [r7, #22]
 800b368:	085b      	lsrs	r3, r3, #1
 800b36a:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800b36c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b374:	d102      	bne.n	800b37c <http_write+0xa4>
 800b376:	8afb      	ldrh	r3, [r7, #22]
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d8da      	bhi.n	800b332 <http_write+0x5a>

  if (err == ERR_OK) {
 800b37c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d103      	bne.n	800b38c <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	8afa      	ldrh	r2, [r7, #22]
 800b388:	801a      	strh	r2, [r3, #0]
 800b38a:	e002      	b.n	800b392 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2200      	movs	r2, #0
 800b390:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800b392:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800b396:	4618      	mov	r0, r3
 800b398:	3718      	adds	r7, #24
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	0801a9d4 	.word	0x0801a9d4
 800b3a4:	0801aa0c 	.word	0x0801aa0c
 800b3a8:	0801aa1c 	.word	0x0801aa1c

0800b3ac <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b086      	sub	sp, #24
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	60f8      	str	r0, [r7, #12]
 800b3b4:	60b9      	str	r1, [r7, #8]
 800b3b6:	4613      	mov	r3, r2
 800b3b8:	71fb      	strb	r3, [r7, #7]
  err_t err;
  LWIP_DEBUGF(HTTPD_DEBUG, ("Closing connection %p\n", (void *)pcb));

#if LWIP_HTTPD_SUPPORT_POST
  if (hs != NULL) {
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00c      	beq.n	800b3da <http_close_or_abort_conn+0x2e>
    if ((hs->post_content_len_left != 0)
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d007      	beq.n	800b3da <http_close_or_abort_conn+0x2e>
#if LWIP_HTTPD_POST_MANUAL_WND
        || ((hs->no_auto_wnd != 0) && (hs->unrecved_bytes != 0))
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
       ) {
      /* make sure the post code knows that the connection is closed */
      http_uri_buf[0] = 0;
 800b3ca:	4b1f      	ldr	r3, [pc, #124]	; (800b448 <http_close_or_abort_conn+0x9c>)
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	701a      	strb	r2, [r3, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800b3d0:	223f      	movs	r2, #63	; 0x3f
 800b3d2:	491d      	ldr	r1, [pc, #116]	; (800b448 <http_close_or_abort_conn+0x9c>)
 800b3d4:	68b8      	ldr	r0, [r7, #8]
 800b3d6:	f7f7 fd97 	bl	8002f08 <httpd_post_finished>
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800b3da:	2100      	movs	r1, #0
 800b3dc:	68f8      	ldr	r0, [r7, #12]
 800b3de:	f005 f945 	bl	801066c <tcp_arg>
  altcp_recv(pcb, NULL);
 800b3e2:	2100      	movs	r1, #0
 800b3e4:	68f8      	ldr	r0, [r7, #12]
 800b3e6:	f005 f953 	bl	8010690 <tcp_recv>
  altcp_err(pcb, NULL);
 800b3ea:	2100      	movs	r1, #0
 800b3ec:	68f8      	ldr	r0, [r7, #12]
 800b3ee:	f005 f993 	bl	8010718 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	2100      	movs	r1, #0
 800b3f6:	68f8      	ldr	r0, [r7, #12]
 800b3f8:	f005 f9c8 	bl	801078c <tcp_poll>
  altcp_sent(pcb, NULL);
 800b3fc:	2100      	movs	r1, #0
 800b3fe:	68f8      	ldr	r0, [r7, #12]
 800b400:	f005 f968 	bl	80106d4 <tcp_sent>
  if (hs != NULL) {
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d002      	beq.n	800b410 <http_close_or_abort_conn+0x64>
    http_state_free(hs);
 800b40a:	68b8      	ldr	r0, [r7, #8]
 800b40c:	f7ff ff52 	bl	800b2b4 <http_state_free>
  }

  if (abort_conn) {
 800b410:	79fb      	ldrb	r3, [r7, #7]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d004      	beq.n	800b420 <http_close_or_abort_conn+0x74>
    altcp_abort(pcb);
 800b416:	68f8      	ldr	r0, [r7, #12]
 800b418:	f004 f86a 	bl	800f4f0 <tcp_abort>
    return ERR_OK;
 800b41c:	2300      	movs	r3, #0
 800b41e:	e00f      	b.n	800b440 <http_close_or_abort_conn+0x94>
  }
  err = altcp_close(pcb);
 800b420:	68f8      	ldr	r0, [r7, #12]
 800b422:	f003 ff7b 	bl	800f31c <tcp_close>
 800b426:	4603      	mov	r3, r0
 800b428:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800b42a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d004      	beq.n	800b43c <http_close_or_abort_conn+0x90>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800b432:	2204      	movs	r2, #4
 800b434:	4905      	ldr	r1, [pc, #20]	; (800b44c <http_close_or_abort_conn+0xa0>)
 800b436:	68f8      	ldr	r0, [r7, #12]
 800b438:	f005 f9a8 	bl	801078c <tcp_poll>
  }
  return err;
 800b43c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b440:	4618      	mov	r0, r3
 800b442:	3718      	adds	r7, #24
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}
 800b448:	200051ec 	.word	0x200051ec
 800b44c:	0800cccb 	.word	0x0800cccb

0800b450 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b082      	sub	sp, #8
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800b45a:	2200      	movs	r2, #0
 800b45c:	6839      	ldr	r1, [r7, #0]
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f7ff ffa4 	bl	800b3ac <http_close_or_abort_conn>
 800b464:	4603      	mov	r3, r0
}
 800b466:	4618      	mov	r0, r3
 800b468:	3708      	adds	r7, #8
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}

0800b46e <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b46e:	b580      	push	{r7, lr}
 800b470:	b082      	sub	sp, #8
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
 800b476:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800b478:	6839      	ldr	r1, [r7, #0]
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f7ff ffe8 	bl	800b450 <http_close_conn>
  }
}
 800b480:	bf00      	nop
 800b482:	3708      	adds	r7, #8
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}

0800b488 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b086      	sub	sp, #24
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d003      	beq.n	800b4a0 <extract_uri_parameters+0x18>
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d101      	bne.n	800b4a4 <extract_uri_parameters+0x1c>
    return (0);
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	e04b      	b.n	800b53c <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	613b      	str	r3, [r7, #16]
 800b4ac:	e03f      	b.n	800b52e <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	693a      	ldr	r2, [r7, #16]
 800b4b2:	320c      	adds	r2, #12
 800b4b4:	6979      	ldr	r1, [r7, #20]
 800b4b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 800b4be:	2126      	movs	r1, #38	; 0x26
 800b4c0:	6978      	ldr	r0, [r7, #20]
 800b4c2:	f00d f8b9 	bl	8018638 <strchr>
 800b4c6:	6178      	str	r0, [r7, #20]
    if (pair) {
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d006      	beq.n	800b4dc <extract_uri_parameters+0x54>
      *pair = '\0';
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	701a      	strb	r2, [r3, #0]
      pair++;
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	617b      	str	r3, [r7, #20]
 800b4da:	e00c      	b.n	800b4f6 <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 800b4dc:	2120      	movs	r1, #32
 800b4de:	68f8      	ldr	r0, [r7, #12]
 800b4e0:	f00d f8aa 	bl	8018638 <strchr>
 800b4e4:	6178      	str	r0, [r7, #20]
      if (pair) {
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d002      	beq.n	800b4f2 <extract_uri_parameters+0x6a>
        *pair = '\0';
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 800b4f6:	213d      	movs	r1, #61	; 0x3d
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	f00d f89d 	bl	8018638 <strchr>
 800b4fe:	60f8      	str	r0, [r7, #12]
    if (equals) {
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d00a      	beq.n	800b51c <extract_uri_parameters+0x94>
      *equals = '\0';
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2200      	movs	r2, #0
 800b50a:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	1c59      	adds	r1, r3, #1
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	693a      	ldr	r2, [r7, #16]
 800b514:	321c      	adds	r2, #28
 800b516:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b51a:	e005      	b.n	800b528 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	693a      	ldr	r2, [r7, #16]
 800b520:	321c      	adds	r2, #28
 800b522:	2100      	movs	r1, #0
 800b524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	3301      	adds	r3, #1
 800b52c:	613b      	str	r3, [r7, #16]
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	2b0f      	cmp	r3, #15
 800b532:	dc02      	bgt.n	800b53a <extract_uri_parameters+0xb2>
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d1b9      	bne.n	800b4ae <extract_uri_parameters+0x26>
    }
  }

  return loop;
 800b53a:	693b      	ldr	r3, [r7, #16]
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3718      	adds	r7, #24
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 800b544:	b590      	push	{r4, r7, lr}
 800b546:	b089      	sub	sp, #36	; 0x24
 800b548:	af02      	add	r7, sp, #8
 800b54a:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d106      	bne.n	800b560 <get_tag_insert+0x1c>
 800b552:	4b5b      	ldr	r3, [pc, #364]	; (800b6c0 <get_tag_insert+0x17c>)
 800b554:	f44f 7241 	mov.w	r2, #772	; 0x304
 800b558:	495a      	ldr	r1, [pc, #360]	; (800b6c4 <get_tag_insert+0x180>)
 800b55a:	485b      	ldr	r0, [pc, #364]	; (800b6c8 <get_tag_insert+0x184>)
 800b55c:	f00c fe48 	bl	80181f0 <iprintf>
  ssi = hs->ssi;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b564:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d106      	bne.n	800b57a <get_tag_insert+0x36>
 800b56c:	4b54      	ldr	r3, [pc, #336]	; (800b6c0 <get_tag_insert+0x17c>)
 800b56e:	f240 3206 	movw	r2, #774	; 0x306
 800b572:	4956      	ldr	r1, [pc, #344]	; (800b6cc <get_tag_insert+0x188>)
 800b574:	4854      	ldr	r0, [pc, #336]	; (800b6c8 <get_tag_insert+0x184>)
 800b576:	f00c fe3b 	bl	80181f0 <iprintf>
#if LWIP_HTTPD_SSI_MULTIPART
  current_tag_part = ssi->tag_part;
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	8a9b      	ldrh	r3, [r3, #20]
 800b57e:	81fb      	strh	r3, [r7, #14]
  ssi->tag_part = HTTPD_LAST_TAG_PART;
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b586:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
#endif

  if (httpd_ssi_handler
 800b588:	4b51      	ldr	r3, [pc, #324]	; (800b6d0 <get_tag_insert+0x18c>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d034      	beq.n	800b5fa <get_tag_insert+0xb6>
#if !LWIP_HTTPD_SSI_RAW
      && httpd_tags && httpd_num_tags
 800b590:	4b50      	ldr	r3, [pc, #320]	; (800b6d4 <get_tag_insert+0x190>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d030      	beq.n	800b5fa <get_tag_insert+0xb6>
 800b598:	4b4f      	ldr	r3, [pc, #316]	; (800b6d8 <get_tag_insert+0x194>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d02c      	beq.n	800b5fa <get_tag_insert+0xb6>

    /* Find this tag in the list we have been provided. */
#if LWIP_HTTPD_SSI_RAW
    {
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	617b      	str	r3, [r7, #20]
 800b5a4:	e024      	b.n	800b5f0 <get_tag_insert+0xac>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	f103 0018 	add.w	r0, r3, #24
 800b5ac:	4b49      	ldr	r3, [pc, #292]	; (800b6d4 <get_tag_insert+0x190>)
 800b5ae:	681a      	ldr	r2, [r3, #0]
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	009b      	lsls	r3, r3, #2
 800b5b4:	4413      	add	r3, r2
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	f7f4 fe41 	bl	8000240 <strcmp>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d112      	bne.n	800b5ea <get_tag_insert+0xa6>
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 800b5c4:	4b42      	ldr	r3, [pc, #264]	; (800b6d0 <get_tag_insert+0x18c>)
 800b5c6:	681c      	ldr	r4, [r3, #0]
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	f103 0121 	add.w	r1, r3, #33	; 0x21
 800b5ce:	693b      	ldr	r3, [r7, #16]
 800b5d0:	3314      	adds	r3, #20
 800b5d2:	89fa      	ldrh	r2, [r7, #14]
 800b5d4:	9300      	str	r3, [sp, #0]
 800b5d6:	4613      	mov	r3, r2
 800b5d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b5dc:	6978      	ldr	r0, [r7, #20]
 800b5de:	47a0      	blx	r4
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	825a      	strh	r2, [r3, #18]
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
#endif /* LWIP_HTTPD_SSI_RAW */
        {
          return;
 800b5e8:	e066      	b.n	800b6b8 <get_tag_insert+0x174>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	617b      	str	r3, [r7, #20]
 800b5f0:	4b39      	ldr	r3, [pc, #228]	; (800b6d8 <get_tag_insert+0x194>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	697a      	ldr	r2, [r7, #20]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	dbd5      	blt.n	800b5a6 <get_tag_insert+0x62>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	3318      	adds	r3, #24
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7f4 fe28 	bl	8000254 <strlen>
 800b604:	4603      	mov	r3, r0
 800b606:	f240 32e6 	movw	r2, #998	; 0x3e6
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d81b      	bhi.n	800b646 <get_tag_insert+0x102>
 800b60e:	693b      	ldr	r3, [r7, #16]
 800b610:	3318      	adds	r3, #24
 800b612:	4618      	mov	r0, r3
 800b614:	f7f4 fe1e 	bl	8000254 <strlen>
 800b618:	4603      	mov	r3, r0
 800b61a:	2b09      	cmp	r3, #9
 800b61c:	d813      	bhi.n	800b646 <get_tag_insert+0x102>
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	3318      	adds	r3, #24
 800b622:	4618      	mov	r0, r3
 800b624:	f7f4 fe16 	bl	8000254 <strlen>
 800b628:	4603      	mov	r3, r0
 800b62a:	f240 32e6 	movw	r2, #998	; 0x3e6
 800b62e:	4293      	cmp	r3, r2
 800b630:	d806      	bhi.n	800b640 <get_tag_insert+0xfc>
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	3318      	adds	r3, #24
 800b636:	4618      	mov	r0, r3
 800b638:	f7f4 fe0c 	bl	8000254 <strlen>
 800b63c:	4603      	mov	r3, r0
 800b63e:	e003      	b.n	800b648 <get_tag_insert+0x104>
 800b640:	f240 33e7 	movw	r3, #999	; 0x3e7
 800b644:	e000      	b.n	800b648 <get_tag_insert+0x104>
 800b646:	2309      	movs	r3, #9
 800b648:	60bb      	str	r3, [r7, #8]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	3321      	adds	r3, #33	; 0x21
 800b64e:	2212      	movs	r2, #18
 800b650:	4922      	ldr	r1, [pc, #136]	; (800b6dc <get_tag_insert+0x198>)
 800b652:	4618      	mov	r0, r3
 800b654:	f00c fcf2 	bl	801803c <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	f103 0033 	add.w	r0, r3, #51	; 0x33
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	3318      	adds	r3, #24
 800b662:	68ba      	ldr	r2, [r7, #8]
 800b664:	4619      	mov	r1, r3
 800b666:	f00c fce9 	bl	801803c <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	3312      	adds	r3, #18
 800b66e:	3320      	adds	r3, #32
 800b670:	693a      	ldr	r2, [r7, #16]
 800b672:	4413      	add	r3, r2
 800b674:	3301      	adds	r3, #1
 800b676:	2207      	movs	r2, #7
 800b678:	4919      	ldr	r1, [pc, #100]	; (800b6e0 <get_tag_insert+0x19c>)
 800b67a:	4618      	mov	r0, r3
 800b67c:	f00c fcde 	bl	801803c <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	3319      	adds	r3, #25
 800b684:	693a      	ldr	r2, [r7, #16]
 800b686:	4413      	add	r3, r2
 800b688:	2200      	movs	r2, #0
 800b68a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  len = strlen(ssi->tag_insert);
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	3321      	adds	r3, #33	; 0x21
 800b692:	4618      	mov	r0, r3
 800b694:	f7f4 fdde 	bl	8000254 <strlen>
 800b698:	60b8      	str	r0, [r7, #8]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6a0:	d306      	bcc.n	800b6b0 <get_tag_insert+0x16c>
 800b6a2:	4b07      	ldr	r3, [pc, #28]	; (800b6c0 <get_tag_insert+0x17c>)
 800b6a4:	f240 323f 	movw	r2, #831	; 0x33f
 800b6a8:	490e      	ldr	r1, [pc, #56]	; (800b6e4 <get_tag_insert+0x1a0>)
 800b6aa:	4807      	ldr	r0, [pc, #28]	; (800b6c8 <get_tag_insert+0x184>)
 800b6ac:	f00c fda0 	bl	80181f0 <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	b29a      	uxth	r2, r3
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	825a      	strh	r2, [r3, #18]
}
 800b6b8:	371c      	adds	r7, #28
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd90      	pop	{r4, r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	0801a9d4 	.word	0x0801a9d4
 800b6c4:	0801aa44 	.word	0x0801aa44
 800b6c8:	0801aa1c 	.word	0x0801aa1c
 800b6cc:	0801aa50 	.word	0x0801aa50
 800b6d0:	2000522c 	.word	0x2000522c
 800b6d4:	20005234 	.word	0x20005234
 800b6d8:	20005230 	.word	0x20005230
 800b6dc:	0801aa5c 	.word	0x0801aa5c
 800b6e0:	0801aa70 	.word	0x0801aa70
 800b6e4:	0801aa78 	.word	0x0801aa78

0800b6e8 <get_http_headers>:
 * Generate the relevant HTTP headers for the given filename and write
 * them into the supplied buffer.
 */
static void
get_http_headers(struct http_state *hs, const char *uri)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b086      	sub	sp, #24
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
  char *ext;
  char *vars;

  /* In all cases, the second header we send is the server identification
     so set it here. */
  hs->hdrs[HDR_STRINGS_IDX_SERVER_NAME] = g_psHTTPHeaderStrings[HTTP_HDR_SERVER];
 800b6f2:	4a55      	ldr	r2, [pc, #340]	; (800b848 <get_http_headers+0x160>)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = NULL;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = NULL;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2200      	movs	r2, #0
 800b706:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc

  /* Is this a normal file or the special case we use to send back the
     default "404: Page not found" response? */
  if (uri == NULL) {
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d110      	bne.n	800b732 <get_http_headers+0x4a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 800b710:	4a4e      	ldr	r2, [pc, #312]	; (800b84c <get_http_headers+0x164>)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if (hs->keepalive) {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML_PERSISTENT];
    } else
#endif
    {
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaderStrings[DEFAULT_404_HTML];
 800b718:	4a4d      	ldr	r2, [pc, #308]	; (800b850 <get_http_headers+0x168>)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    }

    /* Set up to send the first header string. */
    hs->hdr_index = 0;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2200      	movs	r2, #0
 800b724:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    hs->hdr_pos = 0;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2200      	movs	r2, #0
 800b72c:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    return;
 800b730:	e087      	b.n	800b842 <get_http_headers+0x15a>
  }
  /* We are dealing with a particular filename. Look for one other
      special case.  We assume that any filename with "404" in it must be
      indicative of a 404 server error whereas all other files require
      the 200 OK header. */
  if (strstr(uri, "404")) {
 800b732:	4948      	ldr	r1, [pc, #288]	; (800b854 <get_http_headers+0x16c>)
 800b734:	6838      	ldr	r0, [r7, #0]
 800b736:	f00c ffb9 	bl	80186ac <strstr>
 800b73a:	4603      	mov	r3, r0
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d004      	beq.n	800b74a <get_http_headers+0x62>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_FOUND];
 800b740:	4a42      	ldr	r2, [pc, #264]	; (800b84c <get_http_headers+0x164>)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800b748:	e01b      	b.n	800b782 <get_http_headers+0x9a>
  } else if (strstr(uri, "400")) {
 800b74a:	4943      	ldr	r1, [pc, #268]	; (800b858 <get_http_headers+0x170>)
 800b74c:	6838      	ldr	r0, [r7, #0]
 800b74e:	f00c ffad 	bl	80186ac <strstr>
 800b752:	4603      	mov	r3, r0
 800b754:	2b00      	cmp	r3, #0
 800b756:	d004      	beq.n	800b762 <get_http_headers+0x7a>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_BAD_REQUEST];
 800b758:	4a40      	ldr	r2, [pc, #256]	; (800b85c <get_http_headers+0x174>)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800b760:	e00f      	b.n	800b782 <get_http_headers+0x9a>
  } else if (strstr(uri, "501")) {
 800b762:	493f      	ldr	r1, [pc, #252]	; (800b860 <get_http_headers+0x178>)
 800b764:	6838      	ldr	r0, [r7, #0]
 800b766:	f00c ffa1 	bl	80186ac <strstr>
 800b76a:	4603      	mov	r3, r0
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d004      	beq.n	800b77a <get_http_headers+0x92>
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_NOT_IMPL];
 800b770:	4a3c      	ldr	r2, [pc, #240]	; (800b864 <get_http_headers+0x17c>)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800b778:	e003      	b.n	800b782 <get_http_headers+0x9a>
  } else {
    hs->hdrs[HDR_STRINGS_IDX_HTTP_STATUS] = g_psHTTPHeaderStrings[HTTP_HDR_OK];
 800b77a:	4a3b      	ldr	r2, [pc, #236]	; (800b868 <get_http_headers+0x180>)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  }

  /* Determine if the URI has any variables and, if so, temporarily remove
      them. */
  vars = strchr(uri, '?');
 800b782:	213f      	movs	r1, #63	; 0x3f
 800b784:	6838      	ldr	r0, [r7, #0]
 800b786:	f00c ff57 	bl	8018638 <strchr>
 800b78a:	60b8      	str	r0, [r7, #8]
  if (vars) {
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d002      	beq.n	800b798 <get_http_headers+0xb0>
    *vars = '\0';
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	2200      	movs	r2, #0
 800b796:	701a      	strb	r2, [r3, #0]
  }

  /* Get a pointer to the file extension.  We find this by looking for the
      last occurrence of "." in the filename passed. */
  ext = NULL;
 800b798:	2300      	movs	r3, #0
 800b79a:	60fb      	str	r3, [r7, #12]
  tmp = strchr(uri, '.');
 800b79c:	212e      	movs	r1, #46	; 0x2e
 800b79e:	6838      	ldr	r0, [r7, #0]
 800b7a0:	f00c ff4a 	bl	8018638 <strchr>
 800b7a4:	6138      	str	r0, [r7, #16]
  while (tmp) {
 800b7a6:	e007      	b.n	800b7b8 <get_http_headers+0xd0>
    ext = tmp + 1;
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	60fb      	str	r3, [r7, #12]
    tmp = strchr(ext, '.');
 800b7ae:	212e      	movs	r1, #46	; 0x2e
 800b7b0:	68f8      	ldr	r0, [r7, #12]
 800b7b2:	f00c ff41 	bl	8018638 <strchr>
 800b7b6:	6138      	str	r0, [r7, #16]
  while (tmp) {
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d1f4      	bne.n	800b7a8 <get_http_headers+0xc0>
  }
  if (ext != NULL) {
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d014      	beq.n	800b7ee <get_http_headers+0x106>
    /* Now determine the content type and add the relevant header for that. */
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	617b      	str	r3, [r7, #20]
 800b7c8:	e00d      	b.n	800b7e6 <get_http_headers+0xfe>
      /* Have we found a matching extension? */
      if (!lwip_stricmp(g_psHTTPHeaders[content_type].extension, ext)) {
 800b7ca:	4a28      	ldr	r2, [pc, #160]	; (800b86c <get_http_headers+0x184>)
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b7d2:	68f9      	ldr	r1, [r7, #12]
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f001 fcd1 	bl	800d17c <lwip_stricmp>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d009      	beq.n	800b7f4 <get_http_headers+0x10c>
    for (content_type = 0; content_type < NUM_HTTP_HEADERS; content_type++) {
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	3301      	adds	r3, #1
 800b7e4:	617b      	str	r3, [r7, #20]
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	2b13      	cmp	r3, #19
 800b7ea:	d9ee      	bls.n	800b7ca <get_http_headers+0xe2>
 800b7ec:	e003      	b.n	800b7f6 <get_http_headers+0x10e>
        break;
      }
    }
  } else {
    content_type = NUM_HTTP_HEADERS;
 800b7ee:	2314      	movs	r3, #20
 800b7f0:	617b      	str	r3, [r7, #20]
 800b7f2:	e000      	b.n	800b7f6 <get_http_headers+0x10e>
        break;
 800b7f4:	bf00      	nop
  }

  /* Reinstate the parameter marker if there was one in the original URI. */
  if (vars) {
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d002      	beq.n	800b802 <get_http_headers+0x11a>
    *vars = '?';
 800b7fc:	68bb      	ldr	r3, [r7, #8]
 800b7fe:	223f      	movs	r2, #63	; 0x3f
 800b800:	701a      	strb	r2, [r3, #0]
    hs->hdr_index = NUM_FILE_HDR_STRINGS;
    return;
  }
#endif /* LWIP_HTTPD_OMIT_HEADER_FOR_EXTENSIONLESS_URI */
  /* Did we find a matching extension? */
  if (content_type < NUM_HTTP_HEADERS) {
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	2b13      	cmp	r3, #19
 800b806:	d808      	bhi.n	800b81a <get_http_headers+0x132>
    /* yes, store it */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = g_psHTTPHeaders[content_type].content_type;
 800b808:	4a18      	ldr	r2, [pc, #96]	; (800b86c <get_http_headers+0x184>)
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	00db      	lsls	r3, r3, #3
 800b80e:	4413      	add	r3, r2
 800b810:	685a      	ldr	r2, [r3, #4]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800b818:	e00b      	b.n	800b832 <get_http_headers+0x14a>
  } else if (!ext) {
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d104      	bne.n	800b82a <get_http_headers+0x142>
    /* no, no extension found -> use binary transfer to prevent the browser adding '.txt' on save */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_APP;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	4a13      	ldr	r2, [pc, #76]	; (800b870 <get_http_headers+0x188>)
 800b824:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 800b828:	e003      	b.n	800b832 <get_http_headers+0x14a>
  } else {
    /* No - use the default, plain text file type. */
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_TYPE] = HTTP_HDR_DEFAULT_TYPE;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	4a11      	ldr	r2, [pc, #68]	; (800b874 <get_http_headers+0x18c>)
 800b82e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }
  /* Set up to send the first header string. */
  hs->hdr_index = 0;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2200      	movs	r2, #0
 800b836:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
  hs->hdr_pos = 0;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2200      	movs	r2, #0
 800b83e:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
}
 800b842:	3718      	adds	r7, #24
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	0801a654 	.word	0x0801a654
 800b84c:	0801a518 	.word	0x0801a518
 800b850:	0801a694 	.word	0x0801a694
 800b854:	0801aa88 	.word	0x0801aa88
 800b858:	0801aa8c 	.word	0x0801aa8c
 800b85c:	0801a538 	.word	0x0801a538
 800b860:	0801aa90 	.word	0x0801aa90
 800b864:	0801a554 	.word	0x0801a554
 800b868:	0801a504 	.word	0x0801a504
 800b86c:	08021324 	.word	0x08021324
 800b870:	0801a828 	.word	0x0801a828
 800b874:	0801aa94 	.word	0x0801aa94

0800b878 <get_http_content_length>:

/* Add content-length header? */
static void
get_http_content_length(struct http_state *hs)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b084      	sub	sp, #16
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  u8_t add_content_len = 0;
 800b880:	2300      	movs	r3, #0
 800b882:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("already been here?", hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d006      	beq.n	800b89c <get_http_content_length+0x24>
 800b88e:	4b27      	ldr	r3, [pc, #156]	; (800b92c <get_http_content_length+0xb4>)
 800b890:	f44f 726e 	mov.w	r2, #952	; 0x3b8
 800b894:	4926      	ldr	r1, [pc, #152]	; (800b930 <get_http_content_length+0xb8>)
 800b896:	4827      	ldr	r0, [pc, #156]	; (800b934 <get_http_content_length+0xbc>)
 800b898:	f00c fcaa 	bl	80181f0 <iprintf>

  add_content_len = 0;
 800b89c:	2300      	movs	r3, #0
 800b89e:	73fb      	strb	r3, [r7, #15]
#if LWIP_HTTPD_SSI
  if (hs->ssi == NULL) /* @todo: get maximum file length from SSI */
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d10c      	bne.n	800b8c2 <get_http_content_length+0x4a>
#endif /* LWIP_HTTPD_SSI */
  {
    if ((hs->handle != NULL) && (hs->handle->flags & FS_FILE_FLAGS_HEADER_PERSISTENT)) {
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	695b      	ldr	r3, [r3, #20]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d008      	beq.n	800b8c2 <get_http_content_length+0x4a>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	695b      	ldr	r3, [r3, #20]
 800b8b4:	7c1b      	ldrb	r3, [r3, #16]
 800b8b6:	f003 0302 	and.w	r3, r3, #2
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d001      	beq.n	800b8c2 <get_http_content_length+0x4a>
      add_content_len = 1;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	73fb      	strb	r3, [r7, #15]
    }
  }
  if (add_content_len) {
 800b8c2:	7bfb      	ldrb	r3, [r7, #15]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d025      	beq.n	800b914 <get_http_content_length+0x9c>
    size_t len;
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
              hs->handle->len);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	695b      	ldr	r3, [r3, #20]
    lwip_itoa(hs->hdr_content_len, (size_t)LWIP_HTTPD_MAX_CONTENT_LEN_SIZE,
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	210c      	movs	r1, #12
 800b8d8:	f001 fc84 	bl	800d1e4 <lwip_itoa>
    len = strlen(hs->hdr_content_len);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	33c4      	adds	r3, #196	; 0xc4
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7f4 fcb7 	bl	8000254 <strlen>
 800b8e6:	60b8      	str	r0, [r7, #8]
    if (len <= LWIP_HTTPD_MAX_CONTENT_LEN_SIZE - LWIP_HTTPD_MAX_CONTENT_LEN_OFFSET) {
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	2b09      	cmp	r3, #9
 800b8ec:	d810      	bhi.n	800b910 <get_http_content_length+0x98>
      SMEMCPY(&hs->hdr_content_len[len], CRLF, 3);
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	33c0      	adds	r3, #192	; 0xc0
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	4413      	add	r3, r2
 800b8f6:	3304      	adds	r3, #4
 800b8f8:	2203      	movs	r2, #3
 800b8fa:	490f      	ldr	r1, [pc, #60]	; (800b938 <get_http_content_length+0xc0>)
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f00c fb9d 	bl	801803c <memcpy>
      hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_NR] = hs->hdr_content_len;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 800b90e:	e001      	b.n	800b914 <get_http_content_length+0x9c>
    } else {
      add_content_len = 0;
 800b910:	2300      	movs	r3, #0
 800b912:	73fb      	strb	r3, [r7, #15]
  } else {
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONN_CLOSE];
    hs->keepalive = 0;
  }
#else /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  if (add_content_len) {
 800b914:	7bfb      	ldrb	r3, [r7, #15]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d003      	beq.n	800b922 <get_http_content_length+0xaa>
    hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] = g_psHTTPHeaderStrings[HTTP_HDR_CONTENT_LENGTH];
 800b91a:	4a08      	ldr	r2, [pc, #32]	; (800b93c <get_http_content_length+0xc4>)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
}
 800b922:	bf00      	nop
 800b924:	3710      	adds	r7, #16
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	0801a9d4 	.word	0x0801a9d4
 800b930:	0801aab4 	.word	0x0801aab4
 800b934:	0801aa1c 	.word	0x0801aa1c
 800b938:	0801aac8 	.word	0x0801aac8
 800b93c:	0801a5e4 	.word	0x0801a5e4

0800b940 <http_send_headers>:
 *                                      so don't send HTTP body yet
 *           - HTTP_DATA_TO_SEND_FREED: http_state and pcb are already freed
 */
static u8_t
http_send_headers(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b088      	sub	sp, #32
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800b94a:	2300      	movs	r3, #0
 800b94c:	777b      	strb	r3, [r7, #29]
  u16_t hdrlen, sendlen;

  if (hs->hdrs[HDR_STRINGS_IDX_CONTENT_LEN_KEEPALIVE] == NULL) {
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b954:	2b00      	cmp	r3, #0
 800b956:	d102      	bne.n	800b95e <http_send_headers+0x1e>
    /* set up "content-length" and "connection:" headers */
    get_http_content_length(hs);
 800b958:	6838      	ldr	r0, [r7, #0]
 800b95a:	f7ff ff8d 	bl	800b878 <get_http_content_length>
  }

  /* How much data can we send? */
  len = altcp_sndbuf(pcb);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b964:	83fb      	strh	r3, [r7, #30]
  sendlen = len;
 800b966:	8bfb      	ldrh	r3, [r7, #30]
 800b968:	81fb      	strh	r3, [r7, #14]

  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 800b96a:	e08b      	b.n	800ba84 <http_send_headers+0x144>
    const void *ptr;
    u16_t old_sendlen;
    u8_t apiflags;
    /* How much do we have to send from the current header? */
    hdrlen = (u16_t)strlen(hs->hdrs[hs->hdr_index]);
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b972:	461a      	mov	r2, r3
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	322c      	adds	r2, #44	; 0x2c
 800b978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b97c:	4618      	mov	r0, r3
 800b97e:	f7f4 fc69 	bl	8000254 <strlen>
 800b982:	4603      	mov	r3, r0
 800b984:	837b      	strh	r3, [r7, #26]

    /* How much of this can we send? */
    sendlen = (len < (hdrlen - hs->hdr_pos)) ? len : (hdrlen - hs->hdr_pos);
 800b986:	8b7b      	ldrh	r3, [r7, #26]
 800b988:	683a      	ldr	r2, [r7, #0]
 800b98a:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 800b98e:	1a9a      	subs	r2, r3, r2
 800b990:	8bfb      	ldrh	r3, [r7, #30]
 800b992:	4293      	cmp	r3, r2
 800b994:	bfa8      	it	ge
 800b996:	4613      	movge	r3, r2
 800b998:	b29b      	uxth	r3, r3
 800b99a:	81fb      	strh	r3, [r7, #14]

    /* Send this amount of data or as much as we can given memory
     * constraints. */
    ptr = (const void *)(hs->hdrs[hs->hdr_index] + hs->hdr_pos);
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	322c      	adds	r2, #44	; 0x2c
 800b9a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9ac:	683a      	ldr	r2, [r7, #0]
 800b9ae:	f8b2 20d0 	ldrh.w	r2, [r2, #208]	; 0xd0
 800b9b2:	4413      	add	r3, r2
 800b9b4:	617b      	str	r3, [r7, #20]
    old_sendlen = sendlen;
 800b9b6:	89fb      	ldrh	r3, [r7, #14]
 800b9b8:	827b      	strh	r3, [r7, #18]
    apiflags = HTTP_IS_HDR_VOLATILE(hs, ptr);
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	773b      	strb	r3, [r7, #28]
    if (hs->hdr_index == HDR_STRINGS_IDX_CONTENT_LEN_NR) {
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b9c4:	2b03      	cmp	r3, #3
 800b9c6:	d103      	bne.n	800b9d0 <http_send_headers+0x90>
      /* content-length is always volatile */
      apiflags |= TCP_WRITE_FLAG_COPY;
 800b9c8:	7f3b      	ldrb	r3, [r7, #28]
 800b9ca:	f043 0301 	orr.w	r3, r3, #1
 800b9ce:	773b      	strb	r3, [r7, #28]
    }
    if (hs->hdr_index < NUM_FILE_HDR_STRINGS - 1) {
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800b9d6:	2b03      	cmp	r3, #3
 800b9d8:	d803      	bhi.n	800b9e2 <http_send_headers+0xa2>
      apiflags |= TCP_WRITE_FLAG_MORE;
 800b9da:	7f3b      	ldrb	r3, [r7, #28]
 800b9dc:	f043 0302 	orr.w	r3, r3, #2
 800b9e0:	773b      	strb	r3, [r7, #28]
    }
    err = http_write(pcb, ptr, &sendlen, apiflags);
 800b9e2:	7f3b      	ldrb	r3, [r7, #28]
 800b9e4:	f107 020e 	add.w	r2, r7, #14
 800b9e8:	6979      	ldr	r1, [r7, #20]
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f7ff fc74 	bl	800b2d8 <http_write>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	747b      	strb	r3, [r7, #17]
    if ((err == ERR_OK) && (old_sendlen != sendlen)) {
 800b9f4:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d106      	bne.n	800ba0a <http_send_headers+0xca>
 800b9fc:	89fb      	ldrh	r3, [r7, #14]
 800b9fe:	8a7a      	ldrh	r2, [r7, #18]
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d002      	beq.n	800ba0a <http_send_headers+0xca>
      /* Remember that we added some more data to be transmitted. */
      data_to_send = HTTP_DATA_TO_SEND_CONTINUE;
 800ba04:	2301      	movs	r3, #1
 800ba06:	777b      	strb	r3, [r7, #29]
 800ba08:	e005      	b.n	800ba16 <http_send_headers+0xd6>
    } else if (err != ERR_OK) {
 800ba0a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d001      	beq.n	800ba16 <http_send_headers+0xd6>
      /* special case: http_write does not try to send 1 byte */
      sendlen = 0;
 800ba12:	2300      	movs	r3, #0
 800ba14:	81fb      	strh	r3, [r7, #14]
    }

    /* Fix up the header position for the next time round. */
    hs->hdr_pos += sendlen;
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 800ba1c:	89fb      	ldrh	r3, [r7, #14]
 800ba1e:	4413      	add	r3, r2
 800ba20:	b29a      	uxth	r2, r3
 800ba22:	683b      	ldr	r3, [r7, #0]
 800ba24:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    len -= sendlen;
 800ba28:	89fb      	ldrh	r3, [r7, #14]
 800ba2a:	8bfa      	ldrh	r2, [r7, #30]
 800ba2c:	1ad3      	subs	r3, r2, r3
 800ba2e:	83fb      	strh	r3, [r7, #30]

    /* Have we finished sending this string? */
    if (hs->hdr_pos == hdrlen) {
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800ba36:	8b7a      	ldrh	r2, [r7, #26]
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d123      	bne.n	800ba84 <http_send_headers+0x144>
      /* Yes - move on to the next one */
      hs->hdr_index++;
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800ba42:	3301      	adds	r3, #1
 800ba44:	b29a      	uxth	r2, r3
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      /* skip headers that are NULL (not all headers are required) */
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800ba4c:	e007      	b.n	800ba5e <http_send_headers+0x11e>
             (hs->hdrs[hs->hdr_index] == NULL)) {
        hs->hdr_index++;
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800ba54:	3301      	adds	r3, #1
 800ba56:	b29a      	uxth	r2, r3
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800ba64:	2b04      	cmp	r3, #4
 800ba66:	d809      	bhi.n	800ba7c <http_send_headers+0x13c>
             (hs->hdrs[hs->hdr_index] == NULL)) {
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800ba6e:	461a      	mov	r2, r3
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	322c      	adds	r2, #44	; 0x2c
 800ba74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
      while ((hs->hdr_index < NUM_FILE_HDR_STRINGS) &&
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d0e8      	beq.n	800ba4e <http_send_headers+0x10e>
      }
      hs->hdr_pos = 0;
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
  while (len && (hs->hdr_index < NUM_FILE_HDR_STRINGS) && sendlen) {
 800ba84:	8bfb      	ldrh	r3, [r7, #30]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d008      	beq.n	800ba9c <http_send_headers+0x15c>
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800ba90:	2b04      	cmp	r3, #4
 800ba92:	d803      	bhi.n	800ba9c <http_send_headers+0x15c>
 800ba94:	89fb      	ldrh	r3, [r7, #14]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	f47f af68 	bne.w	800b96c <http_send_headers+0x2c>
    }
  }

  if ((hs->hdr_index >= NUM_FILE_HDR_STRINGS) && (hs->file == NULL)) {
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800baa2:	2b04      	cmp	r3, #4
 800baa4:	d90f      	bls.n	800bac6 <http_send_headers+0x186>
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	699b      	ldr	r3, [r3, #24]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d10b      	bne.n	800bac6 <http_send_headers+0x186>
    /* When we are at the end of the headers, check for data to send
     * instead of waiting for ACK from remote side to continue
     * (which would happen when sending files from async read). */
    if (http_check_eof(pcb, hs)) {
 800baae:	6839      	ldr	r1, [r7, #0]
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f000 f819 	bl	800bae8 <http_check_eof>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d002      	beq.n	800bac2 <http_send_headers+0x182>
      data_to_send = HTTP_DATA_TO_SEND_BREAK;
 800babc:	2302      	movs	r3, #2
 800babe:	777b      	strb	r3, [r7, #29]
 800bac0:	e001      	b.n	800bac6 <http_send_headers+0x186>
    } else {
      /* At this point, for non-keepalive connections, hs is deallocated an
         pcb is closed. */
      return HTTP_DATA_TO_SEND_FREED;
 800bac2:	2303      	movs	r3, #3
 800bac4:	e00b      	b.n	800bade <http_send_headers+0x19e>
  }
  /* If we get here and there are still header bytes to send, we send
   * the header information we just wrote immediately. If there are no
   * more headers to send, but we do have file data to send, drop through
   * to try to send some file data too. */
  if ((hs->hdr_index < NUM_FILE_HDR_STRINGS) || !hs->file) {
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800bacc:	2b04      	cmp	r3, #4
 800bace:	d903      	bls.n	800bad8 <http_send_headers+0x198>
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	699b      	ldr	r3, [r3, #24]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d101      	bne.n	800badc <http_send_headers+0x19c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("tcp_output\n"));
    return HTTP_DATA_TO_SEND_BREAK;
 800bad8:	2302      	movs	r3, #2
 800bada:	e000      	b.n	800bade <http_send_headers+0x19e>
  }
  return data_to_send;
 800badc:	7f7b      	ldrb	r3, [r7, #29]
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3720      	adds	r7, #32
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
	...

0800bae8 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	695b      	ldr	r3, [r3, #20]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d105      	bne.n	800bb06 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800bafa:	6839      	ldr	r1, [r7, #0]
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f7ff fcb6 	bl	800b46e <http_eof>
    return 0;
 800bb02:	2300      	movs	r3, #0
 800bb04:	e016      	b.n	800bb34 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	695b      	ldr	r3, [r3, #20]
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7ff fb50 	bl	800b1b0 <fs_bytes_left>
 800bb10:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	dc05      	bgt.n	800bb24 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800bb18:	6839      	ldr	r1, [r7, #0]
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f7ff fca7 	bl	800b46e <http_eof>
    return 0;
 800bb20:	2300      	movs	r3, #0
 800bb22:	e007      	b.n	800bb34 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800bb24:	4b05      	ldr	r3, [pc, #20]	; (800bb3c <http_check_eof+0x54>)
 800bb26:	f240 429d 	movw	r2, #1181	; 0x49d
 800bb2a:	4905      	ldr	r1, [pc, #20]	; (800bb40 <http_check_eof+0x58>)
 800bb2c:	4805      	ldr	r0, [pc, #20]	; (800bb44 <http_check_eof+0x5c>)
 800bb2e:	f00c fb5f 	bl	80181f0 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800bb32:	2301      	movs	r3, #1
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3710      	adds	r7, #16
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}
 800bb3c:	0801a9d4 	.word	0x0801a9d4
 800bb40:	0801aacc 	.word	0x0801aacc
 800bb44:	0801aa1c 	.word	0x0801aa1c

0800bb48 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b084      	sub	sp, #16
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800bb52:	2300      	movs	r3, #0
 800bb54:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb5a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d803      	bhi.n	800bb6a <http_send_data_nonssi+0x22>
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb66:	b29b      	uxth	r3, r3
 800bb68:	e001      	b.n	800bb6e <http_send_data_nonssi+0x26>
 800bb6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bb6e:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	6999      	ldr	r1, [r3, #24]
 800bb74:	f107 020c 	add.w	r2, r7, #12
 800bb78:	2300      	movs	r3, #0
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f7ff fbac 	bl	800b2d8 <http_write>
 800bb80:	4603      	mov	r3, r0
 800bb82:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800bb84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d10d      	bne.n	800bba8 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	699b      	ldr	r3, [r3, #24]
 800bb94:	89ba      	ldrh	r2, [r7, #12]
 800bb96:	441a      	add	r2, r3
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba0:	89ba      	ldrh	r2, [r7, #12]
 800bba2:	1a9a      	subs	r2, r3, r2
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800bba8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3710      	adds	r7, #16
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
	...

0800bbb4 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b086      	sub	sp, #24
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbca:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d106      	bne.n	800bbe0 <http_send_data_ssi+0x2c>
 800bbd2:	4b89      	ldr	r3, [pc, #548]	; (800bdf8 <http_send_data_ssi+0x244>)
 800bbd4:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800bbd8:	4988      	ldr	r1, [pc, #544]	; (800bdfc <http_send_data_ssi+0x248>)
 800bbda:	4889      	ldr	r0, [pc, #548]	; (800be00 <http_send_data_ssi+0x24c>)
 800bbdc:	f00c fb08 	bl	80181f0 <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bbe6:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	681a      	ldr	r2, [r3, #0]
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	699b      	ldr	r3, [r3, #24]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	f240 82c5 	bls.w	800c180 <http_send_data_ssi+0x5cc>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800bbf6:	693b      	ldr	r3, [r7, #16]
 800bbf8:	681a      	ldr	r2, [r3, #0]
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	699b      	ldr	r3, [r3, #24]
 800bbfe:	1ad3      	subs	r3, r2, r3
 800bc00:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bc04:	4293      	cmp	r3, r2
 800bc06:	dc06      	bgt.n	800bc16 <http_send_data_ssi+0x62>
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	681a      	ldr	r2, [r3, #0]
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	699b      	ldr	r3, [r3, #24]
 800bc10:	1ad3      	subs	r3, r2, r3
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	e001      	b.n	800bc1a <http_send_data_ssi+0x66>
 800bc16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc1a:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	6999      	ldr	r1, [r3, #24]
 800bc20:	f107 020e 	add.w	r2, r7, #14
 800bc24:	2300      	movs	r3, #0
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f7ff fb56 	bl	800b2d8 <http_write>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800bc30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d10d      	bne.n	800bc54 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 800bc38:	2301      	movs	r3, #1
 800bc3a:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	699b      	ldr	r3, [r3, #24]
 800bc40:	89fa      	ldrh	r2, [r7, #14]
 800bc42:	441a      	add	r2, r3
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc4c:	89fa      	ldrh	r2, [r7, #14]
 800bc4e:	1a9a      	subs	r2, r3, r2
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	f040 8290 	bne.w	800c180 <http_send_data_ssi+0x5cc>
      return data_to_send;
 800bc60:	7dbb      	ldrb	r3, [r7, #22]
 800bc62:	e2d6      	b.n	800c212 <http_send_data_ssi+0x65e>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 800bc64:	89fb      	ldrh	r3, [r7, #14]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d101      	bne.n	800bc6e <http_send_data_ssi+0xba>
      return data_to_send;
 800bc6a:	7dbb      	ldrb	r3, [r7, #22]
 800bc6c:	e2d1      	b.n	800c212 <http_send_data_ssi+0x65e>
    }
    switch (ssi->tag_state) {
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	f893 3422 	ldrb.w	r3, [r3, #1058]	; 0x422
 800bc74:	2b04      	cmp	r3, #4
 800bc76:	f200 8282 	bhi.w	800c17e <http_send_data_ssi+0x5ca>
 800bc7a:	a201      	add	r2, pc, #4	; (adr r2, 800bc80 <http_send_data_ssi+0xcc>)
 800bc7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc80:	0800bc95 	.word	0x0800bc95
 800bc84:	0800bcef 	.word	0x0800bcef
 800bc88:	0800bd61 	.word	0x0800bd61
 800bc8c:	0800bea9 	.word	0x0800bea9
 800bc90:	0800c01f 	.word	0x0800c01f
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800bc94:	2300      	movs	r3, #0
 800bc96:	757b      	strb	r3, [r7, #21]
 800bc98:	e01b      	b.n	800bcd2 <http_send_data_ssi+0x11e>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	781a      	ldrb	r2, [r3, #0]
 800bca0:	7d7b      	ldrb	r3, [r7, #21]
 800bca2:	4958      	ldr	r1, [pc, #352]	; (800be04 <http_send_data_ssi+0x250>)
 800bca4:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800bca8:	781b      	ldrb	r3, [r3, #0]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d10e      	bne.n	800bccc <http_send_data_ssi+0x118>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	7d7a      	ldrb	r2, [r7, #21]
 800bcb2:	759a      	strb	r2, [r3, #22]
            ssi->tag_state = TAG_LEADIN;
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
            ssi->tag_index = 1;
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	821a      	strh	r2, [r3, #16]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	681a      	ldr	r2, [r3, #0]
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	605a      	str	r2, [r3, #4]
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 800bcca:	e005      	b.n	800bcd8 <http_send_data_ssi+0x124>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800bccc:	7d7b      	ldrb	r3, [r7, #21]
 800bcce:	3301      	adds	r3, #1
 800bcd0:	757b      	strb	r3, [r7, #21]
 800bcd2:	7d7b      	ldrb	r3, [r7, #21]
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	d9e0      	bls.n	800bc9a <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	68db      	ldr	r3, [r3, #12]
 800bcdc:	1e5a      	subs	r2, r3, #1
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	1c5a      	adds	r2, r3, #1
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	601a      	str	r2, [r3, #0]
        break;
 800bcec:	e248      	b.n	800c180 <http_send_data_ssi+0x5cc>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	7d9b      	ldrb	r3, [r3, #22]
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	4b43      	ldr	r3, [pc, #268]	; (800be04 <http_send_data_ssi+0x250>)
 800bcf6:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800bcfa:	693a      	ldr	r2, [r7, #16]
 800bcfc:	8a12      	ldrh	r2, [r2, #16]
 800bcfe:	4413      	add	r3, r2
 800bd00:	781b      	ldrb	r3, [r3, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d107      	bne.n	800bd16 <http_send_data_ssi+0x162>
          ssi->tag_index = 0;
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	821a      	strh	r2, [r3, #16]
          ssi->tag_state = TAG_FOUND;
 800bd0c:	693b      	ldr	r3, [r7, #16]
 800bd0e:	2202      	movs	r2, #2
 800bd10:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
 800bd14:	e234      	b.n	800c180 <http_send_data_ssi+0x5cc>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	781a      	ldrb	r2, [r3, #0]
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	7d9b      	ldrb	r3, [r3, #22]
 800bd20:	4619      	mov	r1, r3
 800bd22:	4b38      	ldr	r3, [pc, #224]	; (800be04 <http_send_data_ssi+0x250>)
 800bd24:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 800bd28:	6939      	ldr	r1, [r7, #16]
 800bd2a:	8a09      	ldrh	r1, [r1, #16]
 800bd2c:	440b      	add	r3, r1
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	429a      	cmp	r2, r3
 800bd32:	d106      	bne.n	800bd42 <http_send_data_ssi+0x18e>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	8a1b      	ldrh	r3, [r3, #16]
 800bd38:	3301      	adds	r3, #1
 800bd3a:	b29a      	uxth	r2, r3
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	821a      	strh	r2, [r3, #16]
 800bd40:	e003      	b.n	800bd4a <http_send_data_ssi+0x196>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	2200      	movs	r2, #0
 800bd46:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	68db      	ldr	r3, [r3, #12]
 800bd4e:	1e5a      	subs	r2, r3, #1
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	1c5a      	adds	r2, r3, #1
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	601a      	str	r2, [r3, #0]
        }
        break;
 800bd5e:	e20f      	b.n	800c180 <http_send_data_ssi+0x5cc>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	8a1b      	ldrh	r3, [r3, #16]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d11e      	bne.n	800bda6 <http_send_data_ssi+0x1f2>
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	781b      	ldrb	r3, [r3, #0]
 800bd6e:	2b20      	cmp	r3, #32
 800bd70:	d00e      	beq.n	800bd90 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800bd78:	2b09      	cmp	r3, #9
 800bd7a:	d009      	beq.n	800bd90 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	2b0a      	cmp	r3, #10
 800bd84:	d004      	beq.n	800bd90 <http_send_data_ssi+0x1dc>
                                      (*ssi->parsed == '\r'))) {
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800bd8c:	2b0d      	cmp	r3, #13
 800bd8e:	d10a      	bne.n	800bda6 <http_send_data_ssi+0x1f2>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800bd90:	693b      	ldr	r3, [r7, #16]
 800bd92:	68db      	ldr	r3, [r3, #12]
 800bd94:	1e5a      	subs	r2, r3, #1
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	1c5a      	adds	r2, r3, #1
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	601a      	str	r2, [r3, #0]
          break;
 800bda4:	e1ec      	b.n	800c180 <http_send_data_ssi+0x5cc>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	781a      	ldrb	r2, [r3, #0]
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	7d9b      	ldrb	r3, [r3, #22]
 800bdb0:	4914      	ldr	r1, [pc, #80]	; (800be04 <http_send_data_ssi+0x250>)
 800bdb2:	00db      	lsls	r3, r3, #3
 800bdb4:	440b      	add	r3, r1
 800bdb6:	685b      	ldr	r3, [r3, #4]
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d013      	beq.n	800bde6 <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800bdc4:	2b20      	cmp	r3, #32
 800bdc6:	d00e      	beq.n	800bde6 <http_send_data_ssi+0x232>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	2b09      	cmp	r3, #9
 800bdd0:	d009      	beq.n	800bde6 <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800bdd8:	2b0a      	cmp	r3, #10
 800bdda:	d004      	beq.n	800bde6 <http_send_data_ssi+0x232>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	2b0d      	cmp	r3, #13
 800bde4:	d13f      	bne.n	800be66 <http_send_data_ssi+0x2b2>

          if (ssi->tag_index == 0) {
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	8a1b      	ldrh	r3, [r3, #16]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d10c      	bne.n	800be08 <http_send_data_ssi+0x254>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
          if (ssi->tag_index == 0) {
 800bdf6:	e04c      	b.n	800be92 <http_send_data_ssi+0x2de>
 800bdf8:	0801a9d4 	.word	0x0801a9d4
 800bdfc:	0801aa50 	.word	0x0801aa50
 800be00:	0801aa1c 	.word	0x0801aa1c
 800be04:	08021400 	.word	0x08021400
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	2203      	movs	r2, #3
 800be0c:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	8a1b      	ldrh	r3, [r3, #16]
 800be14:	2bff      	cmp	r3, #255	; 0xff
 800be16:	d906      	bls.n	800be26 <http_send_data_ssi+0x272>
 800be18:	4b92      	ldr	r3, [pc, #584]	; (800c064 <http_send_data_ssi+0x4b0>)
 800be1a:	f240 523a 	movw	r2, #1338	; 0x53a
 800be1e:	4992      	ldr	r1, [pc, #584]	; (800c068 <http_send_data_ssi+0x4b4>)
 800be20:	4892      	ldr	r0, [pc, #584]	; (800c06c <http_send_data_ssi+0x4b8>)
 800be22:	f00c f9e5 	bl	80181f0 <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	8a1b      	ldrh	r3, [r3, #16]
 800be2a:	b2da      	uxtb	r2, r3
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	75da      	strb	r2, [r3, #23]
            ssi->tag_name[ssi->tag_index] = '\0';
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	8a1b      	ldrh	r3, [r3, #16]
 800be34:	461a      	mov	r2, r3
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	4413      	add	r3, r2
 800be3a:	2200      	movs	r2, #0
 800be3c:	761a      	strb	r2, [r3, #24]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	781a      	ldrb	r2, [r3, #0]
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	7d9b      	ldrb	r3, [r3, #22]
 800be48:	4989      	ldr	r1, [pc, #548]	; (800c070 <http_send_data_ssi+0x4bc>)
 800be4a:	00db      	lsls	r3, r3, #3
 800be4c:	440b      	add	r3, r1
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	429a      	cmp	r2, r3
 800be54:	d103      	bne.n	800be5e <http_send_data_ssi+0x2aa>
              ssi->tag_index = 1;
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	2201      	movs	r2, #1
 800be5a:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 800be5c:	e019      	b.n	800be92 <http_send_data_ssi+0x2de>
            } else {
              ssi->tag_index = 0;
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	2200      	movs	r2, #0
 800be62:	821a      	strh	r2, [r3, #16]
          if (ssi->tag_index == 0) {
 800be64:	e015      	b.n	800be92 <http_send_data_ssi+0x2de>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	8a1b      	ldrh	r3, [r3, #16]
 800be6a:	2b07      	cmp	r3, #7
 800be6c:	d80d      	bhi.n	800be8a <http_send_data_ssi+0x2d6>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	681a      	ldr	r2, [r3, #0]
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	8a1b      	ldrh	r3, [r3, #16]
 800be76:	1c59      	adds	r1, r3, #1
 800be78:	b288      	uxth	r0, r1
 800be7a:	6939      	ldr	r1, [r7, #16]
 800be7c:	8208      	strh	r0, [r1, #16]
 800be7e:	4619      	mov	r1, r3
 800be80:	7812      	ldrb	r2, [r2, #0]
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	440b      	add	r3, r1
 800be86:	761a      	strb	r2, [r3, #24]
 800be88:	e003      	b.n	800be92 <http_send_data_ssi+0x2de>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	2200      	movs	r2, #0
 800be8e:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	68db      	ldr	r3, [r3, #12]
 800be96:	1e5a      	subs	r2, r3, #1
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	60da      	str	r2, [r3, #12]
        ssi->parsed++;
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	1c5a      	adds	r2, r3, #1
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	601a      	str	r2, [r3, #0]

        break;
 800bea6:	e16b      	b.n	800c180 <http_send_data_ssi+0x5cc>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	8a1b      	ldrh	r3, [r3, #16]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d11e      	bne.n	800beee <http_send_data_ssi+0x33a>
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	781b      	ldrb	r3, [r3, #0]
 800beb6:	2b20      	cmp	r3, #32
 800beb8:	d00e      	beq.n	800bed8 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800beba:	693b      	ldr	r3, [r7, #16]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800bec0:	2b09      	cmp	r3, #9
 800bec2:	d009      	beq.n	800bed8 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	2b0a      	cmp	r3, #10
 800becc:	d004      	beq.n	800bed8 <http_send_data_ssi+0x324>
                                      (*ssi->parsed == '\r'))) {
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800bed4:	2b0d      	cmp	r3, #13
 800bed6:	d10a      	bne.n	800beee <http_send_data_ssi+0x33a>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	68db      	ldr	r3, [r3, #12]
 800bedc:	1e5a      	subs	r2, r3, #1
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	1c5a      	adds	r2, r3, #1
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	601a      	str	r2, [r3, #0]
          break;
 800beec:	e148      	b.n	800c180 <http_send_data_ssi+0x5cc>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	781a      	ldrb	r2, [r3, #0]
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	7d9b      	ldrb	r3, [r3, #22]
 800bef8:	495d      	ldr	r1, [pc, #372]	; (800c070 <http_send_data_ssi+0x4bc>)
 800befa:	00db      	lsls	r3, r3, #3
 800befc:	440b      	add	r3, r1
 800befe:	685b      	ldr	r3, [r3, #4]
 800bf00:	6939      	ldr	r1, [r7, #16]
 800bf02:	8a09      	ldrh	r1, [r1, #16]
 800bf04:	440b      	add	r3, r1
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d179      	bne.n	800c000 <http_send_data_ssi+0x44c>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	68db      	ldr	r3, [r3, #12]
 800bf10:	1e5a      	subs	r2, r3, #1
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800bf16:	693b      	ldr	r3, [r7, #16]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	1c5a      	adds	r2, r3, #1
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	8a1b      	ldrh	r3, [r3, #16]
 800bf24:	3301      	adds	r3, #1
 800bf26:	b29a      	uxth	r2, r3
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	821a      	strh	r2, [r3, #16]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	7d9b      	ldrb	r3, [r3, #22]
 800bf30:	4a4f      	ldr	r2, [pc, #316]	; (800c070 <http_send_data_ssi+0x4bc>)
 800bf32:	00db      	lsls	r3, r3, #3
 800bf34:	4413      	add	r3, r2
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	693a      	ldr	r2, [r7, #16]
 800bf3a:	8a12      	ldrh	r2, [r2, #16]
 800bf3c:	4413      	add	r3, r2
 800bf3e:	781b      	ldrb	r3, [r3, #0]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	f040 811d 	bne.w	800c180 <http_send_data_ssi+0x5cc>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	2200      	movs	r2, #0
 800bf4a:	829a      	strh	r2, [r3, #20]
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 800bf4c:	6838      	ldr	r0, [r7, #0]
 800bf4e:	f7ff faf9 	bl	800b544 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 800bf52:	693b      	ldr	r3, [r7, #16]
 800bf54:	2200      	movs	r2, #0
 800bf56:	821a      	strh	r2, [r3, #16]
            ssi->tag_state = TAG_SENDING;
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	2204      	movs	r2, #4
 800bf5c:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
            ssi->tag_end = ssi->parsed;
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	681a      	ldr	r2, [r3, #0]
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	609a      	str	r2, [r3, #8]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->parsed = ssi->tag_started;
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	685a      	ldr	r2, [r3, #4]
 800bf6c:	693b      	ldr	r3, [r7, #16]
 800bf6e:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	689a      	ldr	r2, [r3, #8]
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	699b      	ldr	r3, [r3, #24]
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	f240 8101 	bls.w	800c180 <http_send_data_ssi+0x5cc>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 800bf7e:	693b      	ldr	r3, [r7, #16]
 800bf80:	685a      	ldr	r2, [r3, #4]
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	699b      	ldr	r3, [r3, #24]
 800bf86:	1ad3      	subs	r3, r2, r3
 800bf88:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	dc06      	bgt.n	800bf9e <http_send_data_ssi+0x3ea>
 800bf90:	693b      	ldr	r3, [r7, #16]
 800bf92:	685a      	ldr	r2, [r3, #4]
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	699b      	ldr	r3, [r3, #24]
 800bf98:	1ad3      	subs	r3, r2, r3
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	e001      	b.n	800bfa2 <http_send_data_ssi+0x3ee>
 800bf9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bfa2:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	6999      	ldr	r1, [r3, #24]
 800bfa8:	f107 020e 	add.w	r2, r7, #14
 800bfac:	2300      	movs	r3, #0
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f7ff f992 	bl	800b2d8 <http_write>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 800bfb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	f040 80df 	bne.w	800c180 <http_send_data_ssi+0x5cc>
                data_to_send = 1;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
                if (ssi->tag_started <= hs->file) {
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	685a      	ldr	r2, [r3, #4]
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	699b      	ldr	r3, [r3, #24]
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d809      	bhi.n	800bfe6 <http_send_data_ssi+0x432>
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	689a      	ldr	r2, [r3, #8]
 800bfd6:	693b      	ldr	r3, [r7, #16]
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	1ad3      	subs	r3, r2, r3
 800bfdc:	b29a      	uxth	r2, r3
 800bfde:	89fb      	ldrh	r3, [r7, #14]
 800bfe0:	4413      	add	r3, r2
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	81fb      	strh	r3, [r7, #14]
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	699b      	ldr	r3, [r3, #24]
 800bfea:	89fa      	ldrh	r2, [r7, #14]
 800bfec:	441a      	add	r2, r3
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff6:	89fa      	ldrh	r2, [r7, #14]
 800bff8:	1a9a      	subs	r2, r3, r2
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	625a      	str	r2, [r3, #36]	; 0x24
 800bffe:	e0bf      	b.n	800c180 <http_send_data_ssi+0x5cc>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	68db      	ldr	r3, [r3, #12]
 800c004:	1e5a      	subs	r2, r3, #1
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	60da      	str	r2, [r3, #12]
          ssi->parsed++;
 800c00a:	693b      	ldr	r3, [r7, #16]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	1c5a      	adds	r2, r3, #1
 800c010:	693b      	ldr	r3, [r7, #16]
 800c012:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	2200      	movs	r2, #0
 800c018:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
        }
        break;
 800c01c:	e0b0      	b.n	800c180 <http_send_data_ssi+0x5cc>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	689a      	ldr	r2, [r3, #8]
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	699b      	ldr	r3, [r3, #24]
 800c026:	429a      	cmp	r2, r3
 800c028:	d95c      	bls.n	800c0e4 <http_send_data_ssi+0x530>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	685a      	ldr	r2, [r3, #4]
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	699b      	ldr	r3, [r3, #24]
 800c032:	429a      	cmp	r2, r3
 800c034:	d206      	bcs.n	800c044 <http_send_data_ssi+0x490>
 800c036:	4b0b      	ldr	r3, [pc, #44]	; (800c064 <http_send_data_ssi+0x4b0>)
 800c038:	f240 52ac 	movw	r2, #1452	; 0x5ac
 800c03c:	490d      	ldr	r1, [pc, #52]	; (800c074 <http_send_data_ssi+0x4c0>)
 800c03e:	480b      	ldr	r0, [pc, #44]	; (800c06c <http_send_data_ssi+0x4b8>)
 800c040:	f00c f8d6 	bl	80181f0 <iprintf>
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	685a      	ldr	r2, [r3, #4]
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	699b      	ldr	r3, [r3, #24]
 800c04c:	1ad3      	subs	r3, r2, r3
 800c04e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c052:	4293      	cmp	r3, r2
 800c054:	dc10      	bgt.n	800c078 <http_send_data_ssi+0x4c4>
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	685a      	ldr	r2, [r3, #4]
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	699b      	ldr	r3, [r3, #24]
 800c05e:	1ad3      	subs	r3, r2, r3
 800c060:	b29b      	uxth	r3, r3
 800c062:	e00b      	b.n	800c07c <http_send_data_ssi+0x4c8>
 800c064:	0801a9d4 	.word	0x0801a9d4
 800c068:	0801ab04 	.word	0x0801ab04
 800c06c:	0801aa1c 	.word	0x0801aa1c
 800c070:	08021400 	.word	0x08021400
 800c074:	0801ab1c 	.word	0x0801ab1c
 800c078:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c07c:	81fb      	strh	r3, [r7, #14]
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 800c07e:	89fb      	ldrh	r3, [r7, #14]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d00a      	beq.n	800c09a <http_send_data_ssi+0x4e6>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	6999      	ldr	r1, [r3, #24]
 800c088:	f107 020e 	add.w	r2, r7, #14
 800c08c:	2300      	movs	r3, #0
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f7ff f922 	bl	800b2d8 <http_write>
 800c094:	4603      	mov	r3, r0
 800c096:	75fb      	strb	r3, [r7, #23]
 800c098:	e001      	b.n	800c09e <http_send_data_ssi+0x4ea>
          } else {
            err = ERR_OK;
 800c09a:	2300      	movs	r3, #0
 800c09c:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 800c09e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d16c      	bne.n	800c180 <http_send_data_ssi+0x5cc>
            data_to_send = 1;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	75bb      	strb	r3, [r7, #22]
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
            if (ssi->tag_started <= hs->file) {
 800c0aa:	693b      	ldr	r3, [r7, #16]
 800c0ac:	685a      	ldr	r2, [r3, #4]
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	699b      	ldr	r3, [r3, #24]
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d809      	bhi.n	800c0ca <http_send_data_ssi+0x516>
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 800c0b6:	693b      	ldr	r3, [r7, #16]
 800c0b8:	689a      	ldr	r2, [r3, #8]
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	1ad3      	subs	r3, r2, r3
 800c0c0:	b29a      	uxth	r2, r3
 800c0c2:	89fb      	ldrh	r3, [r7, #14]
 800c0c4:	4413      	add	r3, r2
 800c0c6:	b29b      	uxth	r3, r3
 800c0c8:	81fb      	strh	r3, [r7, #14]
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	699b      	ldr	r3, [r3, #24]
 800c0ce:	89fa      	ldrh	r2, [r7, #14]
 800c0d0:	441a      	add	r2, r3
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0da:	89fa      	ldrh	r2, [r7, #14]
 800c0dc:	1a9a      	subs	r2, r3, r2
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	625a      	str	r2, [r3, #36]	; 0x24
 800c0e2:	e04d      	b.n	800c180 <http_send_data_ssi+0x5cc>
          }
        } else {
#if LWIP_HTTPD_SSI_MULTIPART
          if (ssi->tag_index >= ssi->tag_insert_len) {
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	8a1a      	ldrh	r2, [r3, #16]
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	8a5b      	ldrh	r3, [r3, #18]
 800c0ec:	429a      	cmp	r2, r3
 800c0ee:	d30b      	bcc.n	800c108 <http_send_data_ssi+0x554>
            /* Did the last SSIHandler have more to send? */
            if (ssi->tag_part != HTTPD_LAST_TAG_PART) {
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	8a9b      	ldrh	r3, [r3, #20]
 800c0f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d005      	beq.n	800c108 <http_send_data_ssi+0x554>
              /* If so, call it again */
              ssi->tag_index = 0;
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	2200      	movs	r2, #0
 800c100:	821a      	strh	r2, [r3, #16]
              get_tag_insert(hs);
 800c102:	6838      	ldr	r0, [r7, #0]
 800c104:	f7ff fa1e 	bl	800b544 <get_tag_insert>
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	8a1a      	ldrh	r2, [r3, #16]
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	8a5b      	ldrh	r3, [r3, #18]
 800c110:	429a      	cmp	r2, r3
 800c112:	d222      	bcs.n	800c15a <http_send_data_ssi+0x5a6>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	8a5a      	ldrh	r2, [r3, #18]
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	8a1b      	ldrh	r3, [r3, #16]
 800c11c:	1ad3      	subs	r3, r2, r3
 800c11e:	b29b      	uxth	r3, r3
 800c120:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	8a1b      	ldrh	r3, [r3, #16]
 800c126:	3320      	adds	r3, #32
 800c128:	693a      	ldr	r2, [r7, #16]
 800c12a:	4413      	add	r3, r2
 800c12c:	1c59      	adds	r1, r3, #1
 800c12e:	f107 020e 	add.w	r2, r7, #14
 800c132:	2301      	movs	r3, #1
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f7ff f8cf 	bl	800b2d8 <http_write>
 800c13a:	4603      	mov	r3, r0
 800c13c:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 800c13e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d11c      	bne.n	800c180 <http_send_data_ssi+0x5cc>
              data_to_send = 1;
 800c146:	2301      	movs	r3, #1
 800c148:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	8a1a      	ldrh	r2, [r3, #16]
 800c14e:	89fb      	ldrh	r3, [r7, #14]
 800c150:	4413      	add	r3, r2
 800c152:	b29a      	uxth	r2, r3
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	821a      	strh	r2, [r3, #16]
 800c158:	e012      	b.n	800c180 <http_send_data_ssi+0x5cc>
              /* Don't return here: keep on sending data */
            }
          } else {
#if LWIP_HTTPD_SSI_MULTIPART
            if (ssi->tag_part == HTTPD_LAST_TAG_PART)
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	8a9b      	ldrh	r3, [r3, #20]
 800c15e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c162:	4293      	cmp	r3, r2
 800c164:	d10c      	bne.n	800c180 <http_send_data_ssi+0x5cc>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	2200      	movs	r2, #0
 800c16a:	821a      	strh	r2, [r3, #16]
              ssi->tag_state = TAG_NONE;
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	2200      	movs	r2, #0
 800c170:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	689a      	ldr	r2, [r3, #8]
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	601a      	str	r2, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 800c17c:	e000      	b.n	800c180 <http_send_data_ssi+0x5cc>
        default:
          break;
 800c17e:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	f893 3422 	ldrb.w	r3, [r3, #1058]	; 0x422
 800c186:	2b04      	cmp	r3, #4
 800c188:	d003      	beq.n	800c192 <http_send_data_ssi+0x5de>
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	68db      	ldr	r3, [r3, #12]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d004      	beq.n	800c19c <http_send_data_ssi+0x5e8>
 800c192:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c196:	2b00      	cmp	r3, #0
 800c198:	f43f ad64 	beq.w	800bc64 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	f893 3422 	ldrb.w	r3, [r3, #1058]	; 0x422
 800c1a2:	2b04      	cmp	r3, #4
 800c1a4:	d034      	beq.n	800c210 <http_send_data_ssi+0x65c>
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	681a      	ldr	r2, [r3, #0]
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	699b      	ldr	r3, [r3, #24]
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d92e      	bls.n	800c210 <http_send_data_ssi+0x65c>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	681a      	ldr	r2, [r3, #0]
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	699b      	ldr	r3, [r3, #24]
 800c1ba:	1ad3      	subs	r3, r2, r3
 800c1bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	dc06      	bgt.n	800c1d2 <http_send_data_ssi+0x61e>
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	681a      	ldr	r2, [r3, #0]
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	699b      	ldr	r3, [r3, #24]
 800c1cc:	1ad3      	subs	r3, r2, r3
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	e001      	b.n	800c1d6 <http_send_data_ssi+0x622>
 800c1d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c1d6:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	6999      	ldr	r1, [r3, #24]
 800c1dc:	f107 020e 	add.w	r2, r7, #14
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f7ff f878 	bl	800b2d8 <http_write>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800c1ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d10d      	bne.n	800c210 <http_send_data_ssi+0x65c>
      data_to_send = 1;
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	699b      	ldr	r3, [r3, #24]
 800c1fc:	89fa      	ldrh	r2, [r7, #14]
 800c1fe:	441a      	add	r2, r3
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c208:	89fa      	ldrh	r2, [r7, #14]
 800c20a:	1a9a      	subs	r2, r3, r2
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 800c210:	7dbb      	ldrb	r3, [r7, #22]
}
 800c212:	4618      	mov	r0, r3
 800c214:	3718      	adds	r7, #24
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}
 800c21a:	bf00      	nop

0800c21c <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b084      	sub	sp, #16
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800c226:	2300      	movs	r3, #0
 800c228:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d101      	bne.n	800c234 <http_send+0x18>
    return 0;
 800c230:	2300      	movs	r3, #0
 800c232:	e048      	b.n	800c2c6 <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_FS_ASYNC_READ */

#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Do we have any more header data to send for this file? */
  if (hs->hdr_index < NUM_FILE_HDR_STRINGS) {
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800c23a:	2b04      	cmp	r3, #4
 800c23c:	d812      	bhi.n	800c264 <http_send+0x48>
    data_to_send = http_send_headers(pcb, hs);
 800c23e:	6839      	ldr	r1, [r7, #0]
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f7ff fb7d 	bl	800b940 <http_send_headers>
 800c246:	4603      	mov	r3, r0
 800c248:	73fb      	strb	r3, [r7, #15]
    if ((data_to_send == HTTP_DATA_TO_SEND_FREED) ||
 800c24a:	7bfb      	ldrb	r3, [r7, #15]
 800c24c:	2b03      	cmp	r3, #3
 800c24e:	d007      	beq.n	800c260 <http_send+0x44>
 800c250:	7bfb      	ldrb	r3, [r7, #15]
 800c252:	2b01      	cmp	r3, #1
 800c254:	d006      	beq.n	800c264 <http_send+0x48>
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
         (hs->hdr_index < NUM_FILE_HDR_STRINGS))) {
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
        ((data_to_send != HTTP_DATA_TO_SEND_CONTINUE) &&
 800c25c:	2b04      	cmp	r3, #4
 800c25e:	d801      	bhi.n	800c264 <http_send+0x48>
      return data_to_send;
 800c260:	7bfb      	ldrb	r3, [r7, #15]
 800c262:	e030      	b.n	800c2c6 <http_send+0xaa>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d108      	bne.n	800c27e <http_send+0x62>
    if (!http_check_eof(pcb, hs)) {
 800c26c:	6839      	ldr	r1, [r7, #0]
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f7ff fc3a 	bl	800bae8 <http_check_eof>
 800c274:	4603      	mov	r3, r0
 800c276:	2b00      	cmp	r3, #0
 800c278:	d101      	bne.n	800c27e <http_send+0x62>
      return 0;
 800c27a:	2300      	movs	r3, #0
 800c27c:	e023      	b.n	800c2c6 <http_send+0xaa>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c282:	2b00      	cmp	r3, #0
 800c284:	d006      	beq.n	800c294 <http_send+0x78>
    data_to_send = http_send_data_ssi(pcb, hs);
 800c286:	6839      	ldr	r1, [r7, #0]
 800c288:	6878      	ldr	r0, [r7, #4]
 800c28a:	f7ff fc93 	bl	800bbb4 <http_send_data_ssi>
 800c28e:	4603      	mov	r3, r0
 800c290:	73fb      	strb	r3, [r7, #15]
 800c292:	e005      	b.n	800c2a0 <http_send+0x84>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800c294:	6839      	ldr	r1, [r7, #0]
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f7ff fc56 	bl	800bb48 <http_send_data_nonssi>
 800c29c:	4603      	mov	r3, r0
 800c29e:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d10d      	bne.n	800c2c4 <http_send+0xa8>
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	695b      	ldr	r3, [r3, #20]
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7fe ff7f 	bl	800b1b0 <fs_bytes_left>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	dc05      	bgt.n	800c2c4 <http_send+0xa8>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800c2b8:	6839      	ldr	r1, [r7, #0]
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f7ff f8d7 	bl	800b46e <http_eof>
    return 0;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	e000      	b.n	800c2c6 <http_send+0xaa>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800c2c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3710      	adds	r7, #16
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
	...

0800c2d0 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b084      	sub	sp, #16
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	4a1c      	ldr	r2, [pc, #112]	; (800c350 <http_get_404_file+0x80>)
 800c2de:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	4610      	mov	r0, r2
 800c2ea:	f7fe ff19 	bl	800b120 <fs_open>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c2f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d024      	beq.n	800c344 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	4a15      	ldr	r2, [pc, #84]	; (800c354 <http_get_404_file+0x84>)
 800c2fe:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800c300:	687a      	ldr	r2, [r7, #4]
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	4619      	mov	r1, r3
 800c308:	4610      	mov	r0, r2
 800c30a:	f7fe ff09 	bl	800b120 <fs_open>
 800c30e:	4603      	mov	r3, r0
 800c310:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d014      	beq.n	800c344 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	4a0e      	ldr	r2, [pc, #56]	; (800c358 <http_get_404_file+0x88>)
 800c31e:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800c320:	687a      	ldr	r2, [r7, #4]
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	4619      	mov	r1, r3
 800c328:	4610      	mov	r0, r2
 800c32a:	f7fe fef9 	bl	800b120 <fs_open>
 800c32e:	4603      	mov	r3, r0
 800c330:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800c332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d004      	beq.n	800c344 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	2200      	movs	r2, #0
 800c33e:	601a      	str	r2, [r3, #0]
        return NULL;
 800c340:	2300      	movs	r3, #0
 800c342:	e000      	b.n	800c346 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800c344:	687b      	ldr	r3, [r7, #4]
}
 800c346:	4618      	mov	r0, r3
 800c348:	3710      	adds	r7, #16
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop
 800c350:	0801ab34 	.word	0x0801ab34
 800c354:	0801ab40 	.word	0x0801ab40
 800c358:	0801ab4c 	.word	0x0801ab4c

0800c35c <http_handle_post_finished>:

#if LWIP_HTTPD_SUPPORT_POST
static err_t
http_handle_post_finished(struct http_state *hs)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b082      	sub	sp, #8
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  }
  hs->post_finished = 1;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
  /* application error or POST finished */
  /* NULL-terminate the buffer */
  http_uri_buf[0] = 0;
 800c364:	4b08      	ldr	r3, [pc, #32]	; (800c388 <http_handle_post_finished+0x2c>)
 800c366:	2200      	movs	r2, #0
 800c368:	701a      	strb	r2, [r3, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 800c36a:	223f      	movs	r2, #63	; 0x3f
 800c36c:	4906      	ldr	r1, [pc, #24]	; (800c388 <http_handle_post_finished+0x2c>)
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f7f6 fdca 	bl	8002f08 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 800c374:	2200      	movs	r2, #0
 800c376:	4904      	ldr	r1, [pc, #16]	; (800c388 <http_handle_post_finished+0x2c>)
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f000 faab 	bl	800c8d4 <http_find_file>
 800c37e:	4603      	mov	r3, r0
}
 800c380:	4618      	mov	r0, r3
 800c382:	3708      	adds	r7, #8
 800c384:	46bd      	mov	sp, r7
 800c386:	bd80      	pop	{r7, pc}
 800c388:	200051ec 	.word	0x200051ec

0800c38c <http_post_rxpbuf>:
 * @return ERR_OK if passed successfully, another err_t if the response file
 *         hasn't been found (after POST finished)
 */
static err_t
http_post_rxpbuf(struct http_state *hs, struct pbuf *p)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b084      	sub	sp, #16
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	6039      	str	r1, [r7, #0]
  err_t err;

  if (p != NULL) {
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d014      	beq.n	800c3c6 <http_post_rxpbuf+0x3a>
    /* adjust remaining Content-Length */
    if (hs->post_content_len_left < p->tot_len) {
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c3a2:	683a      	ldr	r2, [r7, #0]
 800c3a4:	8912      	ldrh	r2, [r2, #8]
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d204      	bcs.n	800c3b4 <http_post_rxpbuf+0x28>
      hs->post_content_len_left = 0;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800c3b2:	e008      	b.n	800c3c6 <http_post_rxpbuf+0x3a>
    } else {
      hs->post_content_len_left -= p->tot_len;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c3ba:	683a      	ldr	r2, [r7, #0]
 800c3bc:	8912      	ldrh	r2, [r2, #8]
 800c3be:	1a9a      	subs	r2, r3, r2
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  /* prevent connection being closed if httpd_post_data_recved() is called nested */
  hs->unrecved_bytes++;
#endif
  if (p != NULL) {
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d006      	beq.n	800c3da <http_post_rxpbuf+0x4e>
    err = httpd_post_receive_data(hs, p);
 800c3cc:	6839      	ldr	r1, [r7, #0]
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f7f6 fd58 	bl	8002e84 <httpd_post_receive_data>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	73fb      	strb	r3, [r7, #15]
 800c3d8:	e001      	b.n	800c3de <http_post_rxpbuf+0x52>
  } else {
    err = ERR_OK;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	73fb      	strb	r3, [r7, #15]
  }
#if LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND
  hs->unrecved_bytes--;
#endif
  if (err != ERR_OK) {
 800c3de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d003      	beq.n	800c3ee <http_post_rxpbuf+0x62>
    /* Ignore remaining content in case of application error */
    hs->post_content_len_left = 0;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  }
  if (hs->post_content_len_left == 0) {
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d104      	bne.n	800c402 <http_post_rxpbuf+0x76>
    if (hs->unrecved_bytes != 0) {
      return ERR_OK;
    }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
    /* application error or POST finished */
    return http_handle_post_finished(hs);
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f7ff ffaf 	bl	800c35c <http_handle_post_finished>
 800c3fe:	4603      	mov	r3, r0
 800c400:	e000      	b.n	800c404 <http_post_rxpbuf+0x78>
  }

  return ERR_OK;
 800c402:	2300      	movs	r3, #0
}
 800c404:	4618      	mov	r0, r3
 800c406:	3710      	adds	r7, #16
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}

0800c40c <http_post_request>:
 *         another err_t: Error parsing POST or denied by the application
 */
static err_t
http_post_request(struct pbuf *inp, struct http_state *hs,
                  char *data, u16_t data_len, char *uri, char *uri_end)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b092      	sub	sp, #72	; 0x48
 800c410:	af04      	add	r7, sp, #16
 800c412:	60f8      	str	r0, [r7, #12]
 800c414:	60b9      	str	r1, [r7, #8]
 800c416:	607a      	str	r2, [r7, #4]
 800c418:	807b      	strh	r3, [r7, #2]
  err_t err;
  /* search for end-of-header (first double-CRLF) */
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 800c41a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c41c:	1c58      	adds	r0, r3, #1
 800c41e:	887a      	ldrh	r2, [r7, #2]
 800c420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c422:	1c59      	adds	r1, r3, #1
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	1acb      	subs	r3, r1, r3
 800c428:	1ad3      	subs	r3, r2, r3
 800c42a:	461a      	mov	r2, r3
 800c42c:	4965      	ldr	r1, [pc, #404]	; (800c5c4 <http_post_request+0x1b8>)
 800c42e:	f000 fe6f 	bl	800d110 <lwip_strnstr>
 800c432:	62b8      	str	r0, [r7, #40]	; 0x28

  if (crlfcrlf != NULL) {
 800c434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c436:	2b00      	cmp	r3, #0
 800c438:	f000 80be 	beq.w	800c5b8 <http_post_request+0x1ac>
    /* search for "Content-Length: " */
#define HTTP_HDR_CONTENT_LEN                "Content-Length: "
#define HTTP_HDR_CONTENT_LEN_LEN            16
#define HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN  10
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 800c43c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c43e:	1c58      	adds	r0, r3, #1
 800c440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c442:	3301      	adds	r3, #1
 800c444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c446:	1ad3      	subs	r3, r2, r3
 800c448:	461a      	mov	r2, r3
 800c44a:	495f      	ldr	r1, [pc, #380]	; (800c5c8 <http_post_request+0x1bc>)
 800c44c:	f000 fe60 	bl	800d110 <lwip_strnstr>
 800c450:	6278      	str	r0, [r7, #36]	; 0x24
    if (scontent_len != NULL) {
 800c452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c454:	2b00      	cmp	r3, #0
 800c456:	f000 80ac 	beq.w	800c5b2 <http_post_request+0x1a6>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 800c45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45c:	3310      	adds	r3, #16
 800c45e:	220a      	movs	r2, #10
 800c460:	495a      	ldr	r1, [pc, #360]	; (800c5cc <http_post_request+0x1c0>)
 800c462:	4618      	mov	r0, r3
 800c464:	f000 fe54 	bl	800d110 <lwip_strnstr>
 800c468:	6238      	str	r0, [r7, #32]
      if (scontent_len_end != NULL) {
 800c46a:	6a3b      	ldr	r3, [r7, #32]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	f000 80a0 	beq.w	800c5b2 <http_post_request+0x1a6>
        int content_len;
        char *content_len_num = scontent_len + HTTP_HDR_CONTENT_LEN_LEN;
 800c472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c474:	3310      	adds	r3, #16
 800c476:	61fb      	str	r3, [r7, #28]
        content_len = atoi(content_len_num);
 800c478:	69f8      	ldr	r0, [r7, #28]
 800c47a:	f00b fc9f 	bl	8017dbc <atoi>
 800c47e:	6378      	str	r0, [r7, #52]	; 0x34
        if (content_len == 0) {
 800c480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c482:	2b00      	cmp	r3, #0
 800c484:	d10b      	bne.n	800c49e <http_post_request+0x92>
          /* if atoi returns 0 on error, fix this */
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 800c486:	69fb      	ldr	r3, [r7, #28]
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	2b30      	cmp	r3, #48	; 0x30
 800c48c:	d104      	bne.n	800c498 <http_post_request+0x8c>
 800c48e:	69fb      	ldr	r3, [r7, #28]
 800c490:	3301      	adds	r3, #1
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	2b0d      	cmp	r3, #13
 800c496:	d002      	beq.n	800c49e <http_post_request+0x92>
            content_len = -1;
 800c498:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c49c:	637b      	str	r3, [r7, #52]	; 0x34
          }
        }
        if (content_len >= 0) {
 800c49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	f2c0 8083 	blt.w	800c5ac <http_post_request+0x1a0>
          /* adjust length of HTTP header passed to application */
          const char *hdr_start_after_uri = uri_end + 1;
 800c4a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4a8:	3301      	adds	r3, #1
 800c4aa:	61bb      	str	r3, [r7, #24]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 800c4ac:	887a      	ldrh	r2, [r7, #2]
 800c4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b0:	1d19      	adds	r1, r3, #4
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	1acb      	subs	r3, r1, r3
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	db05      	blt.n	800c4c6 <http_post_request+0xba>
 800c4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4bc:	1d1a      	adds	r2, r3, #4
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	1ad3      	subs	r3, r2, r3
 800c4c2:	b29b      	uxth	r3, r3
 800c4c4:	e000      	b.n	800c4c8 <http_post_request+0xbc>
 800c4c6:	887b      	ldrh	r3, [r7, #2]
 800c4c8:	82fb      	strh	r3, [r7, #22]
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 800c4ca:	887a      	ldrh	r2, [r7, #2]
 800c4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ce:	1d19      	adds	r1, r3, #4
 800c4d0:	69bb      	ldr	r3, [r7, #24]
 800c4d2:	1acb      	subs	r3, r1, r3
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	db05      	blt.n	800c4e4 <http_post_request+0xd8>
 800c4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4da:	1d1a      	adds	r2, r3, #4
 800c4dc:	69bb      	ldr	r3, [r7, #24]
 800c4de:	1ad3      	subs	r3, r2, r3
 800c4e0:	b29b      	uxth	r3, r3
 800c4e2:	e000      	b.n	800c4e6 <http_post_request+0xda>
 800c4e4:	887b      	ldrh	r3, [r7, #2]
 800c4e6:	82bb      	strh	r3, [r7, #20]
          u8_t post_auto_wnd = 1;
 800c4e8:	2301      	movs	r3, #1
 800c4ea:	74bb      	strb	r3, [r7, #18]
          http_uri_buf[0] = 0;
 800c4ec:	4b38      	ldr	r3, [pc, #224]	; (800c5d0 <http_post_request+0x1c4>)
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	701a      	strb	r2, [r3, #0]
          /* trim http header */
          *crlfcrlf = 0;
 800c4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	701a      	strb	r2, [r3, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 800c4f8:	8aba      	ldrh	r2, [r7, #20]
 800c4fa:	f107 0312 	add.w	r3, r7, #18
 800c4fe:	9303      	str	r3, [sp, #12]
 800c500:	233f      	movs	r3, #63	; 0x3f
 800c502:	9302      	str	r3, [sp, #8]
 800c504:	4b32      	ldr	r3, [pc, #200]	; (800c5d0 <http_post_request+0x1c4>)
 800c506:	9301      	str	r3, [sp, #4]
 800c508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c50a:	9300      	str	r3, [sp, #0]
 800c50c:	4613      	mov	r3, r2
 800c50e:	69ba      	ldr	r2, [r7, #24]
 800c510:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c512:	68b8      	ldr	r0, [r7, #8]
 800c514:	f7f6 fc78 	bl	8002e08 <httpd_post_begin>
 800c518:	4603      	mov	r3, r0
 800c51a:	74fb      	strb	r3, [r7, #19]
                                 http_uri_buf, LWIP_HTTPD_URI_BUF_LEN, &post_auto_wnd);
          if (err == ERR_OK) {
 800c51c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d13c      	bne.n	800c59e <http_post_request+0x192>
            /* try to pass in data of the first pbuf(s) */
            struct pbuf *q = inp;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	633b      	str	r3, [r7, #48]	; 0x30
            u16_t start_offset = hdr_len;
 800c528:	8afb      	ldrh	r3, [r7, #22]
 800c52a:	85fb      	strh	r3, [r7, #46]	; 0x2e
#if LWIP_HTTPD_POST_MANUAL_WND
            hs->no_auto_wnd = !post_auto_wnd;
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
            /* set the Content-Length to be received for this POST */
            hs->post_content_len_left = (u32_t)content_len;
 800c52c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

            /* get to the pbuf where the body starts */
            while ((q != NULL) && (q->len <= start_offset)) {
 800c534:	e007      	b.n	800c546 <http_post_request+0x13a>
              start_offset -= q->len;
 800c536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c538:	895b      	ldrh	r3, [r3, #10]
 800c53a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c53c:	1ad3      	subs	r3, r2, r3
 800c53e:	85fb      	strh	r3, [r7, #46]	; 0x2e
              q = q->next;
 800c540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	633b      	str	r3, [r7, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 800c546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d004      	beq.n	800c556 <http_post_request+0x14a>
 800c54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54e:	895b      	ldrh	r3, [r3, #10]
 800c550:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c552:	429a      	cmp	r2, r3
 800c554:	d2ef      	bcs.n	800c536 <http_post_request+0x12a>
            }
            if (q != NULL) {
 800c556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d00d      	beq.n	800c578 <http_post_request+0x16c>
              /* hide the remaining HTTP header */
              pbuf_remove_header(q, start_offset);
 800c55c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c55e:	4619      	mov	r1, r3
 800c560:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c562:	f002 f9ab 	bl	800e8bc <pbuf_remove_header>
              if (!post_auto_wnd) {
                /* already tcp_recved() this data... */
                hs->unrecved_bytes = q->tot_len;
              }
#endif /* LWIP_HTTPD_POST_MANUAL_WND */
              pbuf_ref(q);
 800c566:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c568:	f002 fad4 	bl	800eb14 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 800c56c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c56e:	68b8      	ldr	r0, [r7, #8]
 800c570:	f7ff ff0c 	bl	800c38c <http_post_rxpbuf>
 800c574:	4603      	mov	r3, r0
 800c576:	e021      	b.n	800c5bc <http_post_request+0x1b0>
            } else if (hs->post_content_len_left == 0) {
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d10b      	bne.n	800c59a <http_post_request+0x18e>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 800c582:	2241      	movs	r2, #65	; 0x41
 800c584:	2100      	movs	r1, #0
 800c586:	2000      	movs	r0, #0
 800c588:	f001 ff3a 	bl	800e400 <pbuf_alloc>
 800c58c:	6338      	str	r0, [r7, #48]	; 0x30
              return http_post_rxpbuf(hs, q);
 800c58e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c590:	68b8      	ldr	r0, [r7, #8]
 800c592:	f7ff fefb 	bl	800c38c <http_post_rxpbuf>
 800c596:	4603      	mov	r3, r0
 800c598:	e010      	b.n	800c5bc <http_post_request+0x1b0>
            } else {
              return ERR_OK;
 800c59a:	2300      	movs	r3, #0
 800c59c:	e00e      	b.n	800c5bc <http_post_request+0x1b0>
            }
          } else {
            /* return file passed from application */
            return http_find_file(hs, http_uri_buf, 0);
 800c59e:	2200      	movs	r2, #0
 800c5a0:	490b      	ldr	r1, [pc, #44]	; (800c5d0 <http_post_request+0x1c4>)
 800c5a2:	68b8      	ldr	r0, [r7, #8]
 800c5a4:	f000 f996 	bl	800c8d4 <http_find_file>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	e007      	b.n	800c5bc <http_post_request+0x1b0>
          }
        } else {
          LWIP_DEBUGF(HTTPD_DEBUG, ("POST received invalid Content-Length: %s\n",
                                    content_len_num));
          return ERR_ARG;
 800c5ac:	f06f 030f 	mvn.w	r3, #15
 800c5b0:	e004      	b.n	800c5bc <http_post_request+0x1b0>
    }
    /* If we come here, headers are fully received (double-crlf), but Content-Length
       was not included. Since this is currently the only supported method, we have
       to fail in this case! */
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error when parsing Content-Length\n"));
    return ERR_ARG;
 800c5b2:	f06f 030f 	mvn.w	r3, #15
 800c5b6:	e001      	b.n	800c5bc <http_post_request+0x1b0>
  }
  /* if we come here, the POST is incomplete */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  return ERR_INPROGRESS;
 800c5b8:	f06f 0304 	mvn.w	r3, #4
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  return ERR_ARG;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3738      	adds	r7, #56	; 0x38
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}
 800c5c4:	0801ab58 	.word	0x0801ab58
 800c5c8:	0801a5e4 	.word	0x0801a5e4
 800c5cc:	0801aac8 	.word	0x0801aac8
 800c5d0:	200051ec 	.word	0x200051ec

0800c5d4 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b092      	sub	sp, #72	; 0x48
 800c5d8:	af02      	add	r7, sp, #8
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	60b9      	str	r1, [r7, #8]
 800c5de:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800c5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d106      	bne.n	800c5f8 <http_parse_request+0x24>
 800c5ea:	4b87      	ldr	r3, [pc, #540]	; (800c808 <http_parse_request+0x234>)
 800c5ec:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800c5f0:	4986      	ldr	r1, [pc, #536]	; (800c80c <http_parse_request+0x238>)
 800c5f2:	4887      	ldr	r0, [pc, #540]	; (800c810 <http_parse_request+0x23c>)
 800c5f4:	f00b fdfc 	bl	80181f0 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d106      	bne.n	800c60c <http_parse_request+0x38>
 800c5fe:	4b82      	ldr	r3, [pc, #520]	; (800c808 <http_parse_request+0x234>)
 800c600:	f240 72af 	movw	r2, #1967	; 0x7af
 800c604:	4983      	ldr	r1, [pc, #524]	; (800c814 <http_parse_request+0x240>)
 800c606:	4882      	ldr	r0, [pc, #520]	; (800c810 <http_parse_request+0x23c>)
 800c608:	f00b fdf2 	bl	80181f0 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	695b      	ldr	r3, [r3, #20]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d103      	bne.n	800c61c <http_parse_request+0x48>
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	699b      	ldr	r3, [r3, #24]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d002      	beq.n	800c622 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800c61c:	f06f 0307 	mvn.w	r3, #7
 800c620:	e0ed      	b.n	800c7fe <http_parse_request+0x22a>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	6a1b      	ldr	r3, [r3, #32]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d103      	bne.n	800c632 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c62e:	621a      	str	r2, [r3, #32]
 800c630:	e005      	b.n	800c63e <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	6a1b      	ldr	r3, [r3, #32]
 800c636:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c638:	4618      	mov	r0, r3
 800c63a:	f002 fa93 	bl	800eb64 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800c63e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c640:	f002 fa68 	bl	800eb14 <pbuf_ref>

  if (hs->req->next != NULL) {
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	6a1b      	ldr	r3, [r3, #32]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d012      	beq.n	800c674 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	6a1b      	ldr	r3, [r3, #32]
 800c652:	891b      	ldrh	r3, [r3, #8]
 800c654:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800c658:	4293      	cmp	r3, r2
 800c65a:	bf28      	it	cs
 800c65c:	4613      	movcs	r3, r2
 800c65e:	877b      	strh	r3, [r7, #58]	; 0x3a
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	6a18      	ldr	r0, [r3, #32]
 800c664:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c666:	2300      	movs	r3, #0
 800c668:	496b      	ldr	r1, [pc, #428]	; (800c818 <http_parse_request+0x244>)
 800c66a:	f002 fba3 	bl	800edb4 <pbuf_copy_partial>
    data = httpd_req_buf;
 800c66e:	4b6a      	ldr	r3, [pc, #424]	; (800c818 <http_parse_request+0x244>)
 800c670:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c672:	e005      	b.n	800c680 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800c674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	63fb      	str	r3, [r7, #60]	; 0x3c
    data_len = p->len;
 800c67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67c:	895b      	ldrh	r3, [r3, #10]
 800c67e:	877b      	strh	r3, [r7, #58]	; 0x3a
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800c680:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c682:	2b06      	cmp	r3, #6
 800c684:	f240 80a1 	bls.w	800c7ca <http_parse_request+0x1f6>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800c688:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c68a:	461a      	mov	r2, r3
 800c68c:	4963      	ldr	r1, [pc, #396]	; (800c81c <http_parse_request+0x248>)
 800c68e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c690:	f000 fd3e 	bl	800d110 <lwip_strnstr>
 800c694:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800c696:	6a3b      	ldr	r3, [r7, #32]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	f000 8096 	beq.w	800c7ca <http_parse_request+0x1f6>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	633b      	str	r3, [r7, #48]	; 0x30
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800c6a6:	2204      	movs	r2, #4
 800c6a8:	495d      	ldr	r1, [pc, #372]	; (800c820 <http_parse_request+0x24c>)
 800c6aa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c6ac:	f00b ffd9 	bl	8018662 <strncmp>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d103      	bne.n	800c6be <http_parse_request+0xea>
        sp1 = data + 3;
 800c6b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6b8:	3303      	adds	r3, #3
 800c6ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6bc:	e014      	b.n	800c6e8 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received GET request\"\n"));
#if LWIP_HTTPD_SUPPORT_POST
      } else if (!strncmp(data, "POST ", 5)) {
 800c6be:	2205      	movs	r2, #5
 800c6c0:	4958      	ldr	r1, [pc, #352]	; (800c824 <http_parse_request+0x250>)
 800c6c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c6c4:	f00b ffcd 	bl	8018662 <strncmp>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d105      	bne.n	800c6da <http_parse_request+0x106>
        /* store request type */
        is_post = 1;
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	637b      	str	r3, [r7, #52]	; 0x34
        sp1 = data + 4;
 800c6d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6d4:	3304      	adds	r3, #4
 800c6d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6d8:	e006      	b.n	800c6e8 <http_parse_request+0x114>
        /* received GET request */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Received POST request\n"));
#endif /* LWIP_HTTPD_SUPPORT_POST */
      } else {
        /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
        data[4] = 0;
 800c6da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6dc:	3304      	adds	r3, #4
 800c6de:	2200      	movs	r2, #0
 800c6e0:	701a      	strb	r2, [r3, #0]
        /* unsupported method! */
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
 800c6e2:	f06f 030f 	mvn.w	r3, #15
 800c6e6:	e08a      	b.n	800c7fe <http_parse_request+0x22a>
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800c6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ea:	1c5a      	adds	r2, r3, #1
 800c6ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6ee:	1ad3      	subs	r3, r2, r3
 800c6f0:	b29b      	uxth	r3, r3
 800c6f2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c6f4:	1ad3      	subs	r3, r2, r3
 800c6f6:	83fb      	strh	r3, [r7, #30]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800c6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6fa:	3301      	adds	r3, #1
 800c6fc:	8bfa      	ldrh	r2, [r7, #30]
 800c6fe:	494a      	ldr	r1, [pc, #296]	; (800c828 <http_parse_request+0x254>)
 800c700:	4618      	mov	r0, r3
 800c702:	f000 fd05 	bl	800d110 <lwip_strnstr>
 800c706:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800c708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d10c      	bne.n	800c728 <http_parse_request+0x154>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800c70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c710:	3301      	adds	r3, #1
 800c712:	8bfa      	ldrh	r2, [r7, #30]
 800c714:	4941      	ldr	r1, [pc, #260]	; (800c81c <http_parse_request+0x248>)
 800c716:	4618      	mov	r0, r3
 800c718:	f000 fcfa 	bl	800d110 <lwip_strnstr>
 800c71c:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800c71e:	2301      	movs	r3, #1
 800c720:	633b      	str	r3, [r7, #48]	; 0x30
#if LWIP_HTTPD_SUPPORT_POST
        if (is_post) {
 800c722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c724:	2b00      	cmp	r3, #0
 800c726:	d163      	bne.n	800c7f0 <http_parse_request+0x21c>
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800c728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c72a:	3301      	adds	r3, #1
 800c72c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c72e:	1ad3      	subs	r3, r2, r3
 800c730:	83bb      	strh	r3, [r7, #28]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800c732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c734:	2b00      	cmp	r3, #0
 800c736:	d048      	beq.n	800c7ca <http_parse_request+0x1f6>
 800c738:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73c:	429a      	cmp	r2, r3
 800c73e:	d944      	bls.n	800c7ca <http_parse_request+0x1f6>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800c740:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c742:	461a      	mov	r2, r3
 800c744:	4939      	ldr	r1, [pc, #228]	; (800c82c <http_parse_request+0x258>)
 800c746:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c748:	f000 fce2 	bl	800d110 <lwip_strnstr>
 800c74c:	4603      	mov	r3, r0
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d03b      	beq.n	800c7ca <http_parse_request+0x1f6>
          char *uri = sp1 + 1;
 800c752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c754:	3301      	adds	r3, #1
 800c756:	61bb      	str	r3, [r7, #24]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800c758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c75a:	2200      	movs	r2, #0
 800c75c:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800c75e:	8bbb      	ldrh	r3, [r7, #28]
 800c760:	69ba      	ldr	r2, [r7, #24]
 800c762:	4413      	add	r3, r2
 800c764:	2200      	movs	r2, #0
 800c766:	701a      	strb	r2, [r3, #0]
          LWIP_DEBUGF(HTTPD_DEBUG, ("Received \"%s\" request for URI: \"%s\"\n",
                                    data, uri));
#if LWIP_HTTPD_SUPPORT_POST
          if (is_post) {
 800c768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d026      	beq.n	800c7bc <http_parse_request+0x1e8>
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
            struct pbuf *q = hs->req;
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	6a1b      	ldr	r3, [r3, #32]
 800c772:	617b      	str	r3, [r7, #20]
#else /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            struct pbuf *q = inp;
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
            err = http_post_request(q, hs, data, data_len, uri, sp2);
 800c774:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800c776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c778:	9301      	str	r3, [sp, #4]
 800c77a:	69bb      	ldr	r3, [r7, #24]
 800c77c:	9300      	str	r3, [sp, #0]
 800c77e:	4613      	mov	r3, r2
 800c780:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c782:	68b9      	ldr	r1, [r7, #8]
 800c784:	6978      	ldr	r0, [r7, #20]
 800c786:	f7ff fe41 	bl	800c40c <http_post_request>
 800c78a:	4603      	mov	r3, r0
 800c78c:	74fb      	strb	r3, [r7, #19]
            if (err != ERR_OK) {
 800c78e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d00a      	beq.n	800c7ac <http_parse_request+0x1d8>
              /* restore header for next try */
              *sp1 = ' ';
 800c796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c798:	2220      	movs	r2, #32
 800c79a:	701a      	strb	r2, [r3, #0]
              *sp2 = ' ';
 800c79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c79e:	2220      	movs	r2, #32
 800c7a0:	701a      	strb	r2, [r3, #0]
              uri[uri_len] = ' ';
 800c7a2:	8bbb      	ldrh	r3, [r7, #28]
 800c7a4:	69ba      	ldr	r2, [r7, #24]
 800c7a6:	4413      	add	r3, r2
 800c7a8:	2220      	movs	r2, #32
 800c7aa:	701a      	strb	r2, [r3, #0]
            }
            if (err == ERR_ARG) {
 800c7ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c7b0:	f113 0f10 	cmn.w	r3, #16
 800c7b4:	d01e      	beq.n	800c7f4 <http_parse_request+0x220>
              goto badrequest;
            }
            return err;
 800c7b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c7ba:	e020      	b.n	800c7fe <http_parse_request+0x22a>
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800c7bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7be:	69b9      	ldr	r1, [r7, #24]
 800c7c0:	68b8      	ldr	r0, [r7, #8]
 800c7c2:	f000 f887 	bl	800c8d4 <http_find_file>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	e019      	b.n	800c7fe <http_parse_request+0x22a>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	6a1b      	ldr	r3, [r3, #32]
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f002 f988 	bl	800eae4 <pbuf_clen>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	823b      	strh	r3, [r7, #16]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	6a1b      	ldr	r3, [r3, #32]
 800c7dc:	891b      	ldrh	r3, [r3, #8]
 800c7de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7e2:	d209      	bcs.n	800c7f8 <http_parse_request+0x224>
 800c7e4:	8a3b      	ldrh	r3, [r7, #16]
 800c7e6:	2b05      	cmp	r3, #5
 800c7e8:	d806      	bhi.n	800c7f8 <http_parse_request+0x224>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800c7ea:	f06f 0304 	mvn.w	r3, #4
 800c7ee:	e006      	b.n	800c7fe <http_parse_request+0x22a>
          goto badrequest;
 800c7f0:	bf00      	nop
 800c7f2:	e002      	b.n	800c7fa <http_parse_request+0x226>
              goto badrequest;
 800c7f4:	bf00      	nop
 800c7f6:	e000      	b.n	800c7fa <http_parse_request+0x226>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
 800c7f8:	bf00      	nop
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800c7fa:	f06f 030f 	mvn.w	r3, #15
  }
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	3740      	adds	r7, #64	; 0x40
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}
 800c806:	bf00      	nop
 800c808:	0801a9d4 	.word	0x0801a9d4
 800c80c:	0801ab60 	.word	0x0801ab60
 800c810:	0801aa1c 	.word	0x0801aa1c
 800c814:	0801aa44 	.word	0x0801aa44
 800c818:	20004dec 	.word	0x20004dec
 800c81c:	0801aac8 	.word	0x0801aac8
 800c820:	0801ab6c 	.word	0x0801ab6c
 800c824:	0801ab74 	.word	0x0801ab74
 800c828:	0801ab7c 	.word	0x0801ab7c
 800c82c:	0801ab58 	.word	0x0801ab58

0800c830 <http_uri_is_ssi>:
 *
 * @return 1 for SSI, 0 for standard files
 */
static u8_t
http_uri_is_ssi(struct fs_file *file, const char *uri)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b088      	sub	sp, #32
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	6039      	str	r1, [r7, #0]
  size_t loop;
  u8_t tag_check = 0;
 800c83a:	2300      	movs	r3, #0
 800c83c:	76fb      	strb	r3, [r7, #27]
  if (file != NULL) {
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d040      	beq.n	800c8c6 <http_uri_is_ssi+0x96>
    /* See if we have been asked for an shtml file and, if so,
        enable tag checking. */
    const char *ext = NULL, *sub;
 800c844:	2300      	movs	r3, #0
 800c846:	617b      	str	r3, [r7, #20]
    char *param = (char *)strstr(uri, "?");
 800c848:	213f      	movs	r1, #63	; 0x3f
 800c84a:	6838      	ldr	r0, [r7, #0]
 800c84c:	f00b fef4 	bl	8018638 <strchr>
 800c850:	60f8      	str	r0, [r7, #12]
    if (param != NULL) {
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d002      	beq.n	800c85e <http_uri_is_ssi+0x2e>
      /* separate uri from parameters for now, set back later */
      *param = 0;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	2200      	movs	r2, #0
 800c85c:	701a      	strb	r2, [r3, #0]
    }
    sub = uri;
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	613b      	str	r3, [r7, #16]
    ext = uri;
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	617b      	str	r3, [r7, #20]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800c866:	212e      	movs	r1, #46	; 0x2e
 800c868:	6938      	ldr	r0, [r7, #16]
 800c86a:	f00b fee5 	bl	8018638 <strchr>
 800c86e:	6138      	str	r0, [r7, #16]
 800c870:	e009      	b.n	800c886 <http_uri_is_ssi+0x56>
      ext = sub;
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	617b      	str	r3, [r7, #20]
      sub++;
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	3301      	adds	r3, #1
 800c87a:	613b      	str	r3, [r7, #16]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 800c87c:	212e      	movs	r1, #46	; 0x2e
 800c87e:	6938      	ldr	r0, [r7, #16]
 800c880:	f00b feda 	bl	8018638 <strchr>
 800c884:	6138      	str	r0, [r7, #16]
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d1f2      	bne.n	800c872 <http_uri_is_ssi+0x42>
    }
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800c88c:	2300      	movs	r3, #0
 800c88e:	61fb      	str	r3, [r7, #28]
 800c890:	e010      	b.n	800c8b4 <http_uri_is_ssi+0x84>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 800c892:	4a0f      	ldr	r2, [pc, #60]	; (800c8d0 <http_uri_is_ssi+0xa0>)
 800c894:	69fb      	ldr	r3, [r7, #28]
 800c896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c89a:	4619      	mov	r1, r3
 800c89c:	6978      	ldr	r0, [r7, #20]
 800c89e:	f000 fc6d 	bl	800d17c <lwip_stricmp>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d102      	bne.n	800c8ae <http_uri_is_ssi+0x7e>
        tag_check = 1;
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	76fb      	strb	r3, [r7, #27]
        break;
 800c8ac:	e005      	b.n	800c8ba <http_uri_is_ssi+0x8a>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 800c8ae:	69fb      	ldr	r3, [r7, #28]
 800c8b0:	3301      	adds	r3, #1
 800c8b2:	61fb      	str	r3, [r7, #28]
 800c8b4:	69fb      	ldr	r3, [r7, #28]
 800c8b6:	2b04      	cmp	r3, #4
 800c8b8:	d9eb      	bls.n	800c892 <http_uri_is_ssi+0x62>
      }
    }
    if (param != NULL) {
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d002      	beq.n	800c8c6 <http_uri_is_ssi+0x96>
      *param = '?';
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	223f      	movs	r2, #63	; 0x3f
 800c8c4:	701a      	strb	r2, [r3, #0]
    }
  }
  return tag_check;
 800c8c6:	7efb      	ldrb	r3, [r7, #27]
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3720      	adds	r7, #32
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}
 800c8d0:	080213c4 	.word	0x080213c4

0800c8d4 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800c8d4:	b590      	push	{r4, r7, lr}
 800c8d6:	b093      	sub	sp, #76	; 0x4c
 800c8d8:	af02      	add	r7, sp, #8
 800c8da:	60f8      	str	r0, [r7, #12]
 800c8dc:	60b9      	str	r1, [r7, #8]
 800c8de:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f7f3 fcaf 	bl	8000254 <strlen>
 800c8f6:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800c8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d072      	beq.n	800c9e4 <http_find_file+0x110>
 800c8fe:	68ba      	ldr	r2, [r7, #8]
 800c900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c902:	3b01      	subs	r3, #1
 800c904:	4413      	add	r3, r2
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	2b2f      	cmp	r3, #47	; 0x2f
 800c90a:	d16b      	bne.n	800c9e4 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800c90c:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800c90e:	4a80      	ldr	r2, [pc, #512]	; (800cb10 <http_find_file+0x23c>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d102      	bne.n	800c91a <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800c914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c916:	2b01      	cmp	r3, #1
 800c918:	d164      	bne.n	800c9e4 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800c91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91c:	3b01      	subs	r3, #1
 800c91e:	2b3f      	cmp	r3, #63	; 0x3f
 800c920:	bf28      	it	cs
 800c922:	233f      	movcs	r3, #63	; 0x3f
 800c924:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 800c926:	6a3b      	ldr	r3, [r7, #32]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d00a      	beq.n	800c942 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	6a3a      	ldr	r2, [r7, #32]
 800c930:	4619      	mov	r1, r3
 800c932:	4877      	ldr	r0, [pc, #476]	; (800cb10 <http_find_file+0x23c>)
 800c934:	f00b fb82 	bl	801803c <memcpy>
      http_uri_buf[copy_len] = 0;
 800c938:	4a75      	ldr	r2, [pc, #468]	; (800cb10 <http_find_file+0x23c>)
 800c93a:	6a3b      	ldr	r3, [r7, #32]
 800c93c:	4413      	add	r3, r2
 800c93e:	2200      	movs	r2, #0
 800c940:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800c942:	2300      	movs	r3, #0
 800c944:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c946:	e04a      	b.n	800c9de <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800c948:	6a3b      	ldr	r3, [r7, #32]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d028      	beq.n	800c9a0 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800c94e:	6a3b      	ldr	r3, [r7, #32]
 800c950:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800c954:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 800c956:	69fb      	ldr	r3, [r7, #28]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d01e      	beq.n	800c99a <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800c95c:	4a6d      	ldr	r2, [pc, #436]	; (800cb14 <http_find_file+0x240>)
 800c95e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c960:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c964:	4618      	mov	r0, r3
 800c966:	f7f3 fc75 	bl	8000254 <strlen>
 800c96a:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800c96c:	69ba      	ldr	r2, [r7, #24]
 800c96e:	69fb      	ldr	r3, [r7, #28]
 800c970:	4293      	cmp	r3, r2
 800c972:	bf28      	it	cs
 800c974:	4613      	movcs	r3, r2
 800c976:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800c978:	6a3b      	ldr	r3, [r7, #32]
 800c97a:	4a65      	ldr	r2, [pc, #404]	; (800cb10 <http_find_file+0x23c>)
 800c97c:	1898      	adds	r0, r3, r2
 800c97e:	4a65      	ldr	r2, [pc, #404]	; (800cb14 <http_find_file+0x240>)
 800c980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c982:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c986:	697a      	ldr	r2, [r7, #20]
 800c988:	4619      	mov	r1, r3
 800c98a:	f00b fb57 	bl	801803c <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800c98e:	6a3a      	ldr	r2, [r7, #32]
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	4413      	add	r3, r2
 800c994:	4a5e      	ldr	r2, [pc, #376]	; (800cb10 <http_find_file+0x23c>)
 800c996:	2100      	movs	r1, #0
 800c998:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800c99a:	4b5d      	ldr	r3, [pc, #372]	; (800cb10 <http_find_file+0x23c>)
 800c99c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c99e:	e004      	b.n	800c9aa <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800c9a0:	4a5c      	ldr	r2, [pc, #368]	; (800cb14 <http_find_file+0x240>)
 800c9a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c9a8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f7fe fbb6 	bl	800b120 <fs_open>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 800c9b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d10b      	bne.n	800c9d8 <http_find_file+0x104>
        uri = file_name;
 800c9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c2:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 800c9c8:	4a52      	ldr	r2, [pc, #328]	; (800cb14 <http_find_file+0x240>)
 800c9ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9cc:	00db      	lsls	r3, r3, #3
 800c9ce:	4413      	add	r3, r2
 800c9d0:	791b      	ldrb	r3, [r3, #4]
 800c9d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 800c9d6:	e005      	b.n	800c9e4 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800c9d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9da:	3301      	adds	r3, #1
 800c9dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9e0:	2b04      	cmp	r3, #4
 800c9e2:	d9b1      	bls.n	800c948 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800c9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d176      	bne.n	800cad8 <http_find_file+0x204>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	213f      	movs	r1, #63	; 0x3f
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f00b fe22 	bl	8018638 <strchr>
 800c9f4:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800c9f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d005      	beq.n	800ca08 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800c9fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9fe:	2200      	movs	r2, #0
 800ca00:	701a      	strb	r2, [r3, #0]
      params++;
 800ca02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca04:	3301      	adds	r3, #1
 800ca06:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 800ca08:	4b43      	ldr	r3, [pc, #268]	; (800cb18 <http_find_file+0x244>)
 800ca0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca0e:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 800ca10:	4b42      	ldr	r3, [pc, #264]	; (800cb1c <http_find_file+0x248>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d034      	beq.n	800ca82 <http_find_file+0x1ae>
 800ca18:	4b41      	ldr	r3, [pc, #260]	; (800cb20 <http_find_file+0x24c>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d030      	beq.n	800ca82 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800ca20:	2300      	movs	r3, #0
 800ca22:	633b      	str	r3, [r7, #48]	; 0x30
 800ca24:	e028      	b.n	800ca78 <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 800ca26:	68b8      	ldr	r0, [r7, #8]
 800ca28:	4b3d      	ldr	r3, [pc, #244]	; (800cb20 <http_find_file+0x24c>)
 800ca2a:	681a      	ldr	r2, [r3, #0]
 800ca2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca2e:	00db      	lsls	r3, r3, #3
 800ca30:	4413      	add	r3, r2
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4619      	mov	r1, r3
 800ca36:	f7f3 fc03 	bl	8000240 <strcmp>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d118      	bne.n	800ca72 <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 800ca40:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ca42:	68f8      	ldr	r0, [r7, #12]
 800ca44:	f7fe fd20 	bl	800b488 <extract_uri_parameters>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	4a33      	ldr	r2, [pc, #204]	; (800cb18 <http_find_file+0x244>)
 800ca4c:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800ca4e:	4b34      	ldr	r3, [pc, #208]	; (800cb20 <http_find_file+0x24c>)
 800ca50:	681a      	ldr	r2, [r3, #0]
 800ca52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca54:	00db      	lsls	r3, r3, #3
 800ca56:	4413      	add	r3, r2
 800ca58:	685c      	ldr	r4, [r3, #4]
 800ca5a:	4b2f      	ldr	r3, [pc, #188]	; (800cb18 <http_find_file+0x244>)
 800ca5c:	6819      	ldr	r1, [r3, #0]
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800ca68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca6a:	47a0      	blx	r4
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	60bb      	str	r3, [r7, #8]
          break;
 800ca70:	e007      	b.n	800ca82 <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800ca72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca74:	3301      	adds	r3, #1
 800ca76:	633b      	str	r3, [r7, #48]	; 0x30
 800ca78:	4b28      	ldr	r3, [pc, #160]	; (800cb1c <http_find_file+0x248>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	dbd1      	blt.n	800ca26 <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	68ba      	ldr	r2, [r7, #8]
 800ca86:	4611      	mov	r1, r2
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7fe fb49 	bl	800b120 <fs_open>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 800ca92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d102      	bne.n	800caa0 <http_find_file+0x1cc>
      file = &hs->file_handle;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca9e:	e006      	b.n	800caae <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 800caa0:	f107 0308 	add.w	r3, r7, #8
 800caa4:	4619      	mov	r1, r3
 800caa6:	68f8      	ldr	r0, [r7, #12]
 800caa8:	f7ff fc12 	bl	800c2d0 <http_get_404_file>
 800caac:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 800caae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d011      	beq.n	800cad8 <http_find_file+0x204>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 800cab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab6:	7c1b      	ldrb	r3, [r3, #16]
 800cab8:	f003 0308 	and.w	r3, r3, #8
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d003      	beq.n	800cac8 <http_find_file+0x1f4>
        tag_check = 1;
 800cac0:	2301      	movs	r3, #1
 800cac2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cac6:	e007      	b.n	800cad8 <http_find_file+0x204>
      } else {
#if LWIP_HTTPD_SSI_BY_FILE_EXTENSION
        tag_check = http_uri_is_ssi(file, uri);
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	4619      	mov	r1, r3
 800cacc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cace:	f7ff feaf 	bl	800c830 <http_uri_is_ssi>
 800cad2:	4603      	mov	r3, r0
 800cad4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800cad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d106      	bne.n	800caec <http_find_file+0x218>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800cade:	f107 0308 	add.w	r3, r7, #8
 800cae2:	4619      	mov	r1, r3
 800cae4:	68f8      	ldr	r0, [r7, #12]
 800cae6:	f7ff fbf3 	bl	800c2d0 <http_get_404_file>
 800caea:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800caec:	68ba      	ldr	r2, [r7, #8]
 800caee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caf0:	9301      	str	r3, [sp, #4]
 800caf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800caf6:	9300      	str	r3, [sp, #0]
 800caf8:	4613      	mov	r3, r2
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cafe:	68f8      	ldr	r0, [r7, #12]
 800cb00:	f000 f810 	bl	800cb24 <http_init_file>
 800cb04:	4603      	mov	r3, r0
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3744      	adds	r7, #68	; 0x44
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd90      	pop	{r4, r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	200051ec 	.word	0x200051ec
 800cb14:	080213d8 	.word	0x080213d8
 800cb18:	20005240 	.word	0x20005240
 800cb1c:	2000523c 	.word	0x2000523c
 800cb20:	20005238 	.word	0x20005238

0800cb24 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b088      	sub	sp, #32
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	60f8      	str	r0, [r7, #12]
 800cb2c:	60b9      	str	r1, [r7, #8]
 800cb2e:	607a      	str	r2, [r7, #4]
 800cb30:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d06f      	beq.n	800cc18 <http_init_file+0xf4>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d106      	bne.n	800cb4e <http_init_file+0x2a>
 800cb40:	4b46      	ldr	r3, [pc, #280]	; (800cc5c <http_init_file+0x138>)
 800cb42:	f640 120b 	movw	r2, #2315	; 0x90b
 800cb46:	4946      	ldr	r1, [pc, #280]	; (800cc60 <http_init_file+0x13c>)
 800cb48:	4846      	ldr	r0, [pc, #280]	; (800cc64 <http_init_file+0x140>)
 800cb4a:	f00b fb51 	bl	80181f0 <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 800cb4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d01c      	beq.n	800cb90 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 800cb56:	f7fe fb3a 	bl	800b1ce <http_ssi_state_alloc>
 800cb5a:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 800cb5c:	69fb      	ldr	r3, [r7, #28]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d016      	beq.n	800cb90 <http_init_file+0x6c>
        ssi->tag_index = 0;
 800cb62:	69fb      	ldr	r3, [r7, #28]
 800cb64:	2200      	movs	r2, #0
 800cb66:	821a      	strh	r2, [r3, #16]
        ssi->tag_state = TAG_NONE;
 800cb68:	69fb      	ldr	r3, [r7, #28]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
        ssi->parsed = file->data;
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	681a      	ldr	r2, [r3, #0]
 800cb74:	69fb      	ldr	r3, [r7, #28]
 800cb76:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 800cb78:	68bb      	ldr	r3, [r7, #8]
 800cb7a:	685b      	ldr	r3, [r3, #4]
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	69fb      	ldr	r3, [r7, #28]
 800cb80:	60da      	str	r2, [r3, #12]
        ssi->tag_end = file->data;
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	681a      	ldr	r2, [r3, #0]
 800cb86:	69fb      	ldr	r3, [r7, #28]
 800cb88:	609a      	str	r2, [r3, #8]
        hs->ssi = ssi;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	69fa      	ldr	r2, [r7, #28]
 800cb8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	68ba      	ldr	r2, [r7, #8]
 800cb94:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	685b      	ldr	r3, [r3, #4]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	da06      	bge.n	800cbb4 <http_init_file+0x90>
 800cba6:	4b2d      	ldr	r3, [pc, #180]	; (800cc5c <http_init_file+0x138>)
 800cba8:	f640 1234 	movw	r2, #2356	; 0x934
 800cbac:	492e      	ldr	r1, [pc, #184]	; (800cc68 <http_init_file+0x144>)
 800cbae:	482d      	ldr	r0, [pc, #180]	; (800cc64 <http_init_file+0x140>)
 800cbb0:	f00b fb1e 	bl	80181f0 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	685b      	ldr	r3, [r3, #4]
 800cbb8:	461a      	mov	r2, r3
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d032      	beq.n	800cc32 <http_init_file+0x10e>
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	695b      	ldr	r3, [r3, #20]
 800cbd0:	7c1b      	ldrb	r3, [r3, #16]
 800cbd2:	f003 0301 	and.w	r3, r3, #1
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d02b      	beq.n	800cc32 <http_init_file+0x10e>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	6998      	ldr	r0, [r3, #24]
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbe2:	461a      	mov	r2, r3
 800cbe4:	4921      	ldr	r1, [pc, #132]	; (800cc6c <http_init_file+0x148>)
 800cbe6:	f000 fa93 	bl	800d110 <lwip_strnstr>
 800cbea:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 800cbec:	69bb      	ldr	r3, [r7, #24]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d01f      	beq.n	800cc32 <http_init_file+0x10e>
        int diff = file_start + 4 - hs->file;
 800cbf2:	69bb      	ldr	r3, [r7, #24]
 800cbf4:	1d1a      	adds	r2, r3, #4
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	699b      	ldr	r3, [r3, #24]
 800cbfa:	1ad3      	subs	r3, r2, r3
 800cbfc:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	699a      	ldr	r2, [r3, #24]
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	441a      	add	r2, r3
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	1ad2      	subs	r2, r2, r3
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	625a      	str	r2, [r3, #36]	; 0x24
 800cc16:	e00c      	b.n	800cc32 <http_init_file+0x10e>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	2200      	movs	r2, #0
 800cc22:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	2200      	movs	r2, #0
 800cc28:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  }
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Determine the HTTP headers to send based on the file extension of
   * the requested URI. */
  if ((hs->handle == NULL) || ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) == 0)) {
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	695b      	ldr	r3, [r3, #20]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d006      	beq.n	800cc48 <http_init_file+0x124>
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	695b      	ldr	r3, [r3, #20]
 800cc3e:	7c1b      	ldrb	r3, [r3, #16]
 800cc40:	f003 0301 	and.w	r3, r3, #1
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d103      	bne.n	800cc50 <http_init_file+0x12c>
    get_http_headers(hs, uri);
 800cc48:	6839      	ldr	r1, [r7, #0]
 800cc4a:	68f8      	ldr	r0, [r7, #12]
 800cc4c:	f7fe fd4c 	bl	800b6e8 <get_http_headers>
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800cc50:	2300      	movs	r3, #0
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3720      	adds	r7, #32
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}
 800cc5a:	bf00      	nop
 800cc5c:	0801a9d4 	.word	0x0801a9d4
 800cc60:	0801ab80 	.word	0x0801ab80
 800cc64:	0801aa1c 	.word	0x0801aa1c
 800cc68:	0801ab94 	.word	0x0801ab94
 800cc6c:	0801ab58 	.word	0x0801ab58

0800cc70 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b084      	sub	sp, #16
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	460b      	mov	r3, r1
 800cc7a:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d002      	beq.n	800cc8c <http_err+0x1c>
    http_state_free(hs);
 800cc86:	68f8      	ldr	r0, [r7, #12]
 800cc88:	f7fe fb14 	bl	800b2b4 <http_state_free>
  }
}
 800cc8c:	bf00      	nop
 800cc8e:	3710      	adds	r7, #16
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b086      	sub	sp, #24
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	60b9      	str	r1, [r7, #8]
 800cc9e:	4613      	mov	r3, r2
 800cca0:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d101      	bne.n	800ccb0 <http_sent+0x1c>
    return ERR_OK;
 800ccac:	2300      	movs	r3, #0
 800ccae:	e008      	b.n	800ccc2 <http_sent+0x2e>
  }

  hs->retries = 0;
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800ccb8:	6979      	ldr	r1, [r7, #20]
 800ccba:	68b8      	ldr	r0, [r7, #8]
 800ccbc:	f7ff faae 	bl	800c21c <http_send>

  return ERR_OK;
 800ccc0:	2300      	movs	r3, #0
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3718      	adds	r7, #24
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}

0800ccca <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800ccca:	b580      	push	{r7, lr}
 800cccc:	b084      	sub	sp, #16
 800ccce:	af00      	add	r7, sp, #0
 800ccd0:	6078      	str	r0, [r7, #4]
 800ccd2:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d107      	bne.n	800ccee <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800ccde:	2100      	movs	r1, #0
 800cce0:	6838      	ldr	r0, [r7, #0]
 800cce2:	f7fe fbb5 	bl	800b450 <http_close_conn>
 800cce6:	4603      	mov	r3, r0
 800cce8:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800ccea:	2300      	movs	r3, #0
 800ccec:	e021      	b.n	800cd32 <http_poll+0x68>
  } else {
    hs->retries++;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	b2da      	uxtb	r2, r3
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd04:	2b04      	cmp	r3, #4
 800cd06:	d105      	bne.n	800cd14 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800cd08:	68f9      	ldr	r1, [r7, #12]
 800cd0a:	6838      	ldr	r0, [r7, #0]
 800cd0c:	f7fe fba0 	bl	800b450 <http_close_conn>
      return ERR_OK;
 800cd10:	2300      	movs	r3, #0
 800cd12:	e00e      	b.n	800cd32 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	695b      	ldr	r3, [r3, #20]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d009      	beq.n	800cd30 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800cd1c:	68f9      	ldr	r1, [r7, #12]
 800cd1e:	6838      	ldr	r0, [r7, #0]
 800cd20:	f7ff fa7c 	bl	800c21c <http_send>
 800cd24:	4603      	mov	r3, r0
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d002      	beq.n	800cd30 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800cd2a:	6838      	ldr	r0, [r7, #0]
 800cd2c:	f007 f9c6 	bl	80140bc <tcp_output>
      }
    }
  }

  return ERR_OK;
 800cd30:	2300      	movs	r3, #0
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3710      	adds	r7, #16
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
	...

0800cd3c <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b086      	sub	sp, #24
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	607a      	str	r2, [r7, #4]
 800cd48:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800cd4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d105      	bne.n	800cd62 <http_recv+0x26>
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d002      	beq.n	800cd62 <http_recv+0x26>
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d111      	bne.n	800cd86 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d008      	beq.n	800cd7a <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	891b      	ldrh	r3, [r3, #8]
 800cd6c:	4619      	mov	r1, r3
 800cd6e:	68b8      	ldr	r0, [r7, #8]
 800cd70:	f002 fd98 	bl	800f8a4 <tcp_recved>
      pbuf_free(p);
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f001 fe27 	bl	800e9c8 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800cd7a:	6979      	ldr	r1, [r7, #20]
 800cd7c:	68b8      	ldr	r0, [r7, #8]
 800cd7e:	f7fe fb67 	bl	800b450 <http_close_conn>
    return ERR_OK;
 800cd82:	2300      	movs	r3, #0
 800cd84:	e072      	b.n	800ce6c <http_recv+0x130>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	891b      	ldrh	r3, [r3, #8]
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	68b8      	ldr	r0, [r7, #8]
 800cd8e:	f002 fd89 	bl	800f8a4 <tcp_recved>
  }

#if LWIP_HTTPD_SUPPORT_POST
  if (hs->post_content_len_left > 0) {
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d012      	beq.n	800cdc2 <http_recv+0x86>
    /* reset idle counter when POST data is received */
    hs->retries = 0;
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    /* this is data for a POST, pass the complete pbuf to the application */
    http_post_rxpbuf(hs, p);
 800cda4:	6879      	ldr	r1, [r7, #4]
 800cda6:	6978      	ldr	r0, [r7, #20]
 800cda8:	f7ff faf0 	bl	800c38c <http_post_rxpbuf>
    /* pbuf is passed to the application, don't free it! */
    if (hs->post_content_len_left == 0) {
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d103      	bne.n	800cdbe <http_recv+0x82>
      /* all data received, send response or close connection */
      http_send(pcb, hs);
 800cdb6:	6979      	ldr	r1, [r7, #20]
 800cdb8:	68b8      	ldr	r0, [r7, #8]
 800cdba:	f7ff fa2f 	bl	800c21c <http_send>
    }
    return ERR_OK;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	e054      	b.n	800ce6c <http_recv+0x130>
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	695b      	ldr	r3, [r3, #20]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d14c      	bne.n	800ce64 <http_recv+0x128>
      err_t parsed = http_parse_request(p, hs, pcb);
 800cdca:	68ba      	ldr	r2, [r7, #8]
 800cdcc:	6979      	ldr	r1, [r7, #20]
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f7ff fc00 	bl	800c5d4 <http_parse_request>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800cdd8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d015      	beq.n	800ce0c <http_recv+0xd0>
 800cde0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cde4:	f113 0f05 	cmn.w	r3, #5
 800cde8:	d010      	beq.n	800ce0c <http_recv+0xd0>
 800cdea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cdee:	f113 0f10 	cmn.w	r3, #16
 800cdf2:	d00b      	beq.n	800ce0c <http_recv+0xd0>
 800cdf4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cdf8:	f113 0f08 	cmn.w	r3, #8
 800cdfc:	d006      	beq.n	800ce0c <http_recv+0xd0>
 800cdfe:	4b1d      	ldr	r3, [pc, #116]	; (800ce74 <http_recv+0x138>)
 800ce00:	f640 2204 	movw	r2, #2564	; 0xa04
 800ce04:	491c      	ldr	r1, [pc, #112]	; (800ce78 <http_recv+0x13c>)
 800ce06:	481d      	ldr	r0, [pc, #116]	; (800ce7c <http_recv+0x140>)
 800ce08:	f00b f9f2 	bl	80181f0 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800ce0c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ce10:	f113 0f05 	cmn.w	r3, #5
 800ce14:	d00b      	beq.n	800ce2e <http_recv+0xf2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	6a1b      	ldr	r3, [r3, #32]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d007      	beq.n	800ce2e <http_recv+0xf2>
          pbuf_free(hs->req);
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	6a1b      	ldr	r3, [r3, #32]
 800ce22:	4618      	mov	r0, r3
 800ce24:	f001 fdd0 	bl	800e9c8 <pbuf_free>
          hs->req = NULL;
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f001 fdca 	bl	800e9c8 <pbuf_free>
      if (parsed == ERR_OK) {
 800ce34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d109      	bne.n	800ce50 <http_recv+0x114>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d111      	bne.n	800ce6a <http_recv+0x12e>
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800ce46:	6979      	ldr	r1, [r7, #20]
 800ce48:	68b8      	ldr	r0, [r7, #8]
 800ce4a:	f7ff f9e7 	bl	800c21c <http_send>
 800ce4e:	e00c      	b.n	800ce6a <http_recv+0x12e>
        }
      } else if (parsed == ERR_ARG) {
 800ce50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ce54:	f113 0f10 	cmn.w	r3, #16
 800ce58:	d107      	bne.n	800ce6a <http_recv+0x12e>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800ce5a:	6979      	ldr	r1, [r7, #20]
 800ce5c:	68b8      	ldr	r0, [r7, #8]
 800ce5e:	f7fe faf7 	bl	800b450 <http_close_conn>
 800ce62:	e002      	b.n	800ce6a <http_recv+0x12e>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f001 fdaf 	bl	800e9c8 <pbuf_free>
    }
  }
  return ERR_OK;
 800ce6a:	2300      	movs	r3, #0
}
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	3718      	adds	r7, #24
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}
 800ce74:	0801a9d4 	.word	0x0801a9d4
 800ce78:	0801abb4 	.word	0x0801abb4
 800ce7c:	0801aa1c 	.word	0x0801aa1c

0800ce80 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b086      	sub	sp, #24
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	60b9      	str	r1, [r7, #8]
 800ce8a:	4613      	mov	r3, r2
 800ce8c:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800ce8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d102      	bne.n	800ce9c <http_accept+0x1c>
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d102      	bne.n	800cea2 <http_accept+0x22>
    return ERR_VAL;
 800ce9c:	f06f 0305 	mvn.w	r3, #5
 800cea0:	e025      	b.n	800ceee <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800cea2:	2101      	movs	r1, #1
 800cea4:	68b8      	ldr	r0, [r7, #8]
 800cea6:	f003 f9e1 	bl	801026c <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800ceaa:	f7fe f9c5 	bl	800b238 <http_state_alloc>
 800ceae:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d102      	bne.n	800cebc <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800ceb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ceba:	e018      	b.n	800ceee <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800cebc:	697b      	ldr	r3, [r7, #20]
 800cebe:	68ba      	ldr	r2, [r7, #8]
 800cec0:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800cec2:	6979      	ldr	r1, [r7, #20]
 800cec4:	68b8      	ldr	r0, [r7, #8]
 800cec6:	f003 fbd1 	bl	801066c <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800ceca:	490b      	ldr	r1, [pc, #44]	; (800cef8 <http_accept+0x78>)
 800cecc:	68b8      	ldr	r0, [r7, #8]
 800cece:	f003 fbdf 	bl	8010690 <tcp_recv>
  altcp_err(pcb, http_err);
 800ced2:	490a      	ldr	r1, [pc, #40]	; (800cefc <http_accept+0x7c>)
 800ced4:	68b8      	ldr	r0, [r7, #8]
 800ced6:	f003 fc1f 	bl	8010718 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800ceda:	2204      	movs	r2, #4
 800cedc:	4908      	ldr	r1, [pc, #32]	; (800cf00 <http_accept+0x80>)
 800cede:	68b8      	ldr	r0, [r7, #8]
 800cee0:	f003 fc54 	bl	801078c <tcp_poll>
  altcp_sent(pcb, http_sent);
 800cee4:	4907      	ldr	r1, [pc, #28]	; (800cf04 <http_accept+0x84>)
 800cee6:	68b8      	ldr	r0, [r7, #8]
 800cee8:	f003 fbf4 	bl	80106d4 <tcp_sent>

  return ERR_OK;
 800ceec:	2300      	movs	r3, #0
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3718      	adds	r7, #24
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
 800cef6:	bf00      	nop
 800cef8:	0800cd3d 	.word	0x0800cd3d
 800cefc:	0800cc71 	.word	0x0800cc71
 800cf00:	0800cccb 	.word	0x0800cccb
 800cf04:	0800cc95 	.word	0x0800cc95

0800cf08 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	460b      	mov	r3, r1
 800cf12:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d029      	beq.n	800cf6e <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800cf1a:	2101      	movs	r1, #1
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f003 f9a5 	bl	801026c <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800cf22:	887b      	ldrh	r3, [r7, #2]
 800cf24:	461a      	mov	r2, r3
 800cf26:	4914      	ldr	r1, [pc, #80]	; (800cf78 <httpd_init_pcb+0x70>)
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f002 faed 	bl	800f508 <tcp_bind>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800cf32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d006      	beq.n	800cf48 <httpd_init_pcb+0x40>
 800cf3a:	4b10      	ldr	r3, [pc, #64]	; (800cf7c <httpd_init_pcb+0x74>)
 800cf3c:	f640 2257 	movw	r2, #2647	; 0xa57
 800cf40:	490f      	ldr	r1, [pc, #60]	; (800cf80 <httpd_init_pcb+0x78>)
 800cf42:	4810      	ldr	r0, [pc, #64]	; (800cf84 <httpd_init_pcb+0x7c>)
 800cf44:	f00b f954 	bl	80181f0 <iprintf>
    pcb = altcp_listen(pcb);
 800cf48:	21ff      	movs	r1, #255	; 0xff
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f002 fb94 	bl	800f678 <tcp_listen_with_backlog>
 800cf50:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d106      	bne.n	800cf66 <httpd_init_pcb+0x5e>
 800cf58:	4b08      	ldr	r3, [pc, #32]	; (800cf7c <httpd_init_pcb+0x74>)
 800cf5a:	f640 2259 	movw	r2, #2649	; 0xa59
 800cf5e:	490a      	ldr	r1, [pc, #40]	; (800cf88 <httpd_init_pcb+0x80>)
 800cf60:	4808      	ldr	r0, [pc, #32]	; (800cf84 <httpd_init_pcb+0x7c>)
 800cf62:	f00b f945 	bl	80181f0 <iprintf>
    altcp_accept(pcb, http_accept);
 800cf66:	4909      	ldr	r1, [pc, #36]	; (800cf8c <httpd_init_pcb+0x84>)
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f003 fbf7 	bl	801075c <tcp_accept>
  }
}
 800cf6e:	bf00      	nop
 800cf70:	3710      	adds	r7, #16
 800cf72:	46bd      	mov	sp, r7
 800cf74:	bd80      	pop	{r7, pc}
 800cf76:	bf00      	nop
 800cf78:	08021520 	.word	0x08021520
 800cf7c:	0801a9d4 	.word	0x0801a9d4
 800cf80:	0801abe0 	.word	0x0801abe0
 800cf84:	0801aa1c 	.word	0x0801aa1c
 800cf88:	0801abfc 	.word	0x0801abfc
 800cf8c:	0800ce81 	.word	0x0800ce81

0800cf90 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b082      	sub	sp, #8
 800cf94:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800cf96:	202e      	movs	r0, #46	; 0x2e
 800cf98:	f003 fb5a 	bl	8010650 <tcp_new_ip_type>
 800cf9c:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d106      	bne.n	800cfb2 <httpd_init+0x22>
 800cfa4:	4b07      	ldr	r3, [pc, #28]	; (800cfc4 <httpd_init+0x34>)
 800cfa6:	f640 2272 	movw	r2, #2674	; 0xa72
 800cfaa:	4907      	ldr	r1, [pc, #28]	; (800cfc8 <httpd_init+0x38>)
 800cfac:	4807      	ldr	r0, [pc, #28]	; (800cfcc <httpd_init+0x3c>)
 800cfae:	f00b f91f 	bl	80181f0 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800cfb2:	2150      	movs	r1, #80	; 0x50
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f7ff ffa7 	bl	800cf08 <httpd_init_pcb>
}
 800cfba:	bf00      	nop
 800cfbc:	3708      	adds	r7, #8
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}
 800cfc2:	bf00      	nop
 800cfc4:	0801a9d4 	.word	0x0801a9d4
 800cfc8:	0801ac1c 	.word	0x0801ac1c
 800cfcc:	0801aa1c 	.word	0x0801aa1c

0800cfd0 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b084      	sub	sp, #16
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	60f8      	str	r0, [r7, #12]
 800cfd8:	60b9      	str	r1, [r7, #8]
 800cfda:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d106      	bne.n	800cff0 <http_set_ssi_handler+0x20>
 800cfe2:	4b14      	ldr	r3, [pc, #80]	; (800d034 <http_set_ssi_handler+0x64>)
 800cfe4:	f640 2297 	movw	r2, #2711	; 0xa97
 800cfe8:	4913      	ldr	r1, [pc, #76]	; (800d038 <http_set_ssi_handler+0x68>)
 800cfea:	4814      	ldr	r0, [pc, #80]	; (800d03c <http_set_ssi_handler+0x6c>)
 800cfec:	f00b f900 	bl	80181f0 <iprintf>
  httpd_ssi_handler = ssi_handler;
 800cff0:	4a13      	ldr	r2, [pc, #76]	; (800d040 <http_set_ssi_handler+0x70>)
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	6013      	str	r3, [r2, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d106      	bne.n	800d00a <http_set_ssi_handler+0x3a>
 800cffc:	4b0d      	ldr	r3, [pc, #52]	; (800d034 <http_set_ssi_handler+0x64>)
 800cffe:	f640 229e 	movw	r2, #2718	; 0xa9e
 800d002:	4910      	ldr	r1, [pc, #64]	; (800d044 <http_set_ssi_handler+0x74>)
 800d004:	480d      	ldr	r0, [pc, #52]	; (800d03c <http_set_ssi_handler+0x6c>)
 800d006:	f00b f8f3 	bl	80181f0 <iprintf>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	dc06      	bgt.n	800d01e <http_set_ssi_handler+0x4e>
 800d010:	4b08      	ldr	r3, [pc, #32]	; (800d034 <http_set_ssi_handler+0x64>)
 800d012:	f640 229f 	movw	r2, #2719	; 0xa9f
 800d016:	490c      	ldr	r1, [pc, #48]	; (800d048 <http_set_ssi_handler+0x78>)
 800d018:	4808      	ldr	r0, [pc, #32]	; (800d03c <http_set_ssi_handler+0x6c>)
 800d01a:	f00b f8e9 	bl	80181f0 <iprintf>

  httpd_tags = tags;
 800d01e:	4a0b      	ldr	r2, [pc, #44]	; (800d04c <http_set_ssi_handler+0x7c>)
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	6013      	str	r3, [r2, #0]
  httpd_num_tags = num_tags;
 800d024:	4a0a      	ldr	r2, [pc, #40]	; (800d050 <http_set_ssi_handler+0x80>)
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6013      	str	r3, [r2, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 800d02a:	bf00      	nop
 800d02c:	3710      	adds	r7, #16
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
 800d032:	bf00      	nop
 800d034:	0801a9d4 	.word	0x0801a9d4
 800d038:	0801ac38 	.word	0x0801ac38
 800d03c:	0801aa1c 	.word	0x0801aa1c
 800d040:	2000522c 	.word	0x2000522c
 800d044:	0801ac50 	.word	0x0801ac50
 800d048:	0801ac60 	.word	0x0801ac60
 800d04c:	20005234 	.word	0x20005234
 800d050:	20005230 	.word	0x20005230

0800d054 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b082      	sub	sp, #8
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
 800d05c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d106      	bne.n	800d072 <http_set_cgi_handlers+0x1e>
 800d064:	4b0d      	ldr	r3, [pc, #52]	; (800d09c <http_set_cgi_handlers+0x48>)
 800d066:	f640 22b2 	movw	r2, #2738	; 0xab2
 800d06a:	490d      	ldr	r1, [pc, #52]	; (800d0a0 <http_set_cgi_handlers+0x4c>)
 800d06c:	480d      	ldr	r0, [pc, #52]	; (800d0a4 <http_set_cgi_handlers+0x50>)
 800d06e:	f00b f8bf 	bl	80181f0 <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	2b00      	cmp	r3, #0
 800d076:	dc06      	bgt.n	800d086 <http_set_cgi_handlers+0x32>
 800d078:	4b08      	ldr	r3, [pc, #32]	; (800d09c <http_set_cgi_handlers+0x48>)
 800d07a:	f640 22b3 	movw	r2, #2739	; 0xab3
 800d07e:	490a      	ldr	r1, [pc, #40]	; (800d0a8 <http_set_cgi_handlers+0x54>)
 800d080:	4808      	ldr	r0, [pc, #32]	; (800d0a4 <http_set_cgi_handlers+0x50>)
 800d082:	f00b f8b5 	bl	80181f0 <iprintf>

  httpd_cgis = cgis;
 800d086:	4a09      	ldr	r2, [pc, #36]	; (800d0ac <http_set_cgi_handlers+0x58>)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 800d08c:	4a08      	ldr	r2, [pc, #32]	; (800d0b0 <http_set_cgi_handlers+0x5c>)
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	6013      	str	r3, [r2, #0]
}
 800d092:	bf00      	nop
 800d094:	3708      	adds	r7, #8
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}
 800d09a:	bf00      	nop
 800d09c:	0801a9d4 	.word	0x0801a9d4
 800d0a0:	0801ac78 	.word	0x0801ac78
 800d0a4:	0801aa1c 	.word	0x0801aa1c
 800d0a8:	0801ac88 	.word	0x0801ac88
 800d0ac:	20005238 	.word	0x20005238
 800d0b0:	2000523c 	.word	0x2000523c

0800d0b4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b083      	sub	sp, #12
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d0be:	88fb      	ldrh	r3, [r7, #6]
 800d0c0:	021b      	lsls	r3, r3, #8
 800d0c2:	b21a      	sxth	r2, r3
 800d0c4:	88fb      	ldrh	r3, [r7, #6]
 800d0c6:	0a1b      	lsrs	r3, r3, #8
 800d0c8:	b29b      	uxth	r3, r3
 800d0ca:	b21b      	sxth	r3, r3
 800d0cc:	4313      	orrs	r3, r2
 800d0ce:	b21b      	sxth	r3, r3
 800d0d0:	b29b      	uxth	r3, r3
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	370c      	adds	r7, #12
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0dc:	4770      	bx	lr

0800d0de <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d0de:	b480      	push	{r7}
 800d0e0:	b083      	sub	sp, #12
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	061a      	lsls	r2, r3, #24
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	021b      	lsls	r3, r3, #8
 800d0ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d0f2:	431a      	orrs	r2, r3
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	0a1b      	lsrs	r3, r3, #8
 800d0f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d0fc:	431a      	orrs	r2, r3
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	0e1b      	lsrs	r3, r3, #24
 800d102:	4313      	orrs	r3, r2
}
 800d104:	4618      	mov	r0, r3
 800d106:	370c      	adds	r7, #12
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr

0800d110 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b086      	sub	sp, #24
 800d114:	af00      	add	r7, sp, #0
 800d116:	60f8      	str	r0, [r7, #12]
 800d118:	60b9      	str	r1, [r7, #8]
 800d11a:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800d11c:	68b8      	ldr	r0, [r7, #8]
 800d11e:	f7f3 f899 	bl	8000254 <strlen>
 800d122:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800d124:	693b      	ldr	r3, [r7, #16]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d101      	bne.n	800d12e <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	e022      	b.n	800d174 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	617b      	str	r3, [r7, #20]
 800d132:	e012      	b.n	800d15a <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	781a      	ldrb	r2, [r3, #0]
 800d138:	68bb      	ldr	r3, [r7, #8]
 800d13a:	781b      	ldrb	r3, [r3, #0]
 800d13c:	429a      	cmp	r2, r3
 800d13e:	d109      	bne.n	800d154 <lwip_strnstr+0x44>
 800d140:	693a      	ldr	r2, [r7, #16]
 800d142:	68b9      	ldr	r1, [r7, #8]
 800d144:	6978      	ldr	r0, [r7, #20]
 800d146:	f00b fa8c 	bl	8018662 <strncmp>
 800d14a:	4603      	mov	r3, r0
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d101      	bne.n	800d154 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	e00f      	b.n	800d174 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	3301      	adds	r3, #1
 800d158:	617b      	str	r3, [r7, #20]
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	781b      	ldrb	r3, [r3, #0]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d007      	beq.n	800d172 <lwip_strnstr+0x62>
 800d162:	697a      	ldr	r2, [r7, #20]
 800d164:	693b      	ldr	r3, [r7, #16]
 800d166:	441a      	add	r2, r3
 800d168:	68f9      	ldr	r1, [r7, #12]
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	440b      	add	r3, r1
 800d16e:	429a      	cmp	r2, r3
 800d170:	d9e0      	bls.n	800d134 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800d172:	2300      	movs	r3, #0
}
 800d174:	4618      	mov	r0, r3
 800d176:	3718      	adds	r7, #24
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}

0800d17c <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b085      	sub	sp, #20
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	6039      	str	r1, [r7, #0]
  char c1, c2;

  do {
    c1 = *str1++;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	1c5a      	adds	r2, r3, #1
 800d18a:	607a      	str	r2, [r7, #4]
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	73fb      	strb	r3, [r7, #15]
    c2 = *str2++;
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	1c5a      	adds	r2, r3, #1
 800d194:	603a      	str	r2, [r7, #0]
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	73bb      	strb	r3, [r7, #14]
    if (c1 != c2) {
 800d19a:	7bfa      	ldrb	r2, [r7, #15]
 800d19c:	7bbb      	ldrb	r3, [r7, #14]
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	d016      	beq.n	800d1d0 <lwip_stricmp+0x54>
      char c1_upc = c1 | 0x20;
 800d1a2:	7bfb      	ldrb	r3, [r7, #15]
 800d1a4:	f043 0320 	orr.w	r3, r3, #32
 800d1a8:	737b      	strb	r3, [r7, #13]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800d1aa:	7b7b      	ldrb	r3, [r7, #13]
 800d1ac:	2b60      	cmp	r3, #96	; 0x60
 800d1ae:	d90c      	bls.n	800d1ca <lwip_stricmp+0x4e>
 800d1b0:	7b7b      	ldrb	r3, [r7, #13]
 800d1b2:	2b7a      	cmp	r3, #122	; 0x7a
 800d1b4:	d809      	bhi.n	800d1ca <lwip_stricmp+0x4e>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 800d1b6:	7bbb      	ldrb	r3, [r7, #14]
 800d1b8:	f043 0320 	orr.w	r3, r3, #32
 800d1bc:	733b      	strb	r3, [r7, #12]
        if (c1_upc != c2_upc) {
 800d1be:	7b7a      	ldrb	r2, [r7, #13]
 800d1c0:	7b3b      	ldrb	r3, [r7, #12]
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	d003      	beq.n	800d1ce <lwip_stricmp+0x52>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	e006      	b.n	800d1d8 <lwip_stricmp+0x5c>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	e004      	b.n	800d1d8 <lwip_stricmp+0x5c>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800d1ce:	bf00      	nop
      }
    }
  } while (c1 != 0);
 800d1d0:	7bfb      	ldrb	r3, [r7, #15]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d1d7      	bne.n	800d186 <lwip_stricmp+0xa>
  return 0;
 800d1d6:	2300      	movs	r3, #0
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	3714      	adds	r7, #20
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e2:	4770      	bx	lr

0800d1e4 <lwip_itoa>:
 * lwIP default implementation for itoa() non-standard function.
 * This can be \#defined to itoa() or snprintf(result, bufsize, "%d", number) depending on your platform port.
 */
void
lwip_itoa(char *result, size_t bufsize, int number)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b088      	sub	sp, #32
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	60f8      	str	r0, [r7, #12]
 800d1ec:	60b9      	str	r1, [r7, #8]
 800d1ee:	607a      	str	r2, [r7, #4]
  char *res = result;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	61fb      	str	r3, [r7, #28]
  char *tmp = result + bufsize - 1;
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	3b01      	subs	r3, #1
 800d1f8:	68fa      	ldr	r2, [r7, #12]
 800d1fa:	4413      	add	r3, r2
 800d1fc:	61bb      	str	r3, [r7, #24]
  int n = (number >= 0) ? number : -number;
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2b00      	cmp	r3, #0
 800d202:	bfb8      	it	lt
 800d204:	425b      	neglt	r3, r3
 800d206:	617b      	str	r3, [r7, #20]

  /* handle invalid bufsize */
  if (bufsize < 2) {
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	2b01      	cmp	r3, #1
 800d20c:	d806      	bhi.n	800d21c <lwip_itoa+0x38>
    if (bufsize == 1) {
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	2b01      	cmp	r3, #1
 800d212:	d154      	bne.n	800d2be <lwip_itoa+0xda>
      *result = 0;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2200      	movs	r2, #0
 800d218:	701a      	strb	r2, [r3, #0]
    }
    return;
 800d21a:	e050      	b.n	800d2be <lwip_itoa+0xda>
  }

  /* First, add sign */
  if (number < 0) {
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	da04      	bge.n	800d22c <lwip_itoa+0x48>
    *res++ = '-';
 800d222:	69fb      	ldr	r3, [r7, #28]
 800d224:	1c5a      	adds	r2, r3, #1
 800d226:	61fa      	str	r2, [r7, #28]
 800d228:	222d      	movs	r2, #45	; 0x2d
 800d22a:	701a      	strb	r2, [r3, #0]
  }
  /* Then create the string from the end and stop if buffer full,
     and ensure output string is zero terminated */
  *tmp = 0;
 800d22c:	69bb      	ldr	r3, [r7, #24]
 800d22e:	2200      	movs	r2, #0
 800d230:	701a      	strb	r2, [r3, #0]
  while ((n != 0) && (tmp > res)) {
 800d232:	e01c      	b.n	800d26e <lwip_itoa+0x8a>
    char val = (char)('0' + (n % 10));
 800d234:	697a      	ldr	r2, [r7, #20]
 800d236:	4b24      	ldr	r3, [pc, #144]	; (800d2c8 <lwip_itoa+0xe4>)
 800d238:	fb83 1302 	smull	r1, r3, r3, r2
 800d23c:	1099      	asrs	r1, r3, #2
 800d23e:	17d3      	asrs	r3, r2, #31
 800d240:	1ac9      	subs	r1, r1, r3
 800d242:	460b      	mov	r3, r1
 800d244:	009b      	lsls	r3, r3, #2
 800d246:	440b      	add	r3, r1
 800d248:	005b      	lsls	r3, r3, #1
 800d24a:	1ad1      	subs	r1, r2, r3
 800d24c:	b2cb      	uxtb	r3, r1
 800d24e:	3330      	adds	r3, #48	; 0x30
 800d250:	74fb      	strb	r3, [r7, #19]
    tmp--;
 800d252:	69bb      	ldr	r3, [r7, #24]
 800d254:	3b01      	subs	r3, #1
 800d256:	61bb      	str	r3, [r7, #24]
    *tmp = val;
 800d258:	69bb      	ldr	r3, [r7, #24]
 800d25a:	7cfa      	ldrb	r2, [r7, #19]
 800d25c:	701a      	strb	r2, [r3, #0]
    n = n / 10;
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	4a19      	ldr	r2, [pc, #100]	; (800d2c8 <lwip_itoa+0xe4>)
 800d262:	fb82 1203 	smull	r1, r2, r2, r3
 800d266:	1092      	asrs	r2, r2, #2
 800d268:	17db      	asrs	r3, r3, #31
 800d26a:	1ad3      	subs	r3, r2, r3
 800d26c:	617b      	str	r3, [r7, #20]
  while ((n != 0) && (tmp > res)) {
 800d26e:	697b      	ldr	r3, [r7, #20]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d003      	beq.n	800d27c <lwip_itoa+0x98>
 800d274:	69ba      	ldr	r2, [r7, #24]
 800d276:	69fb      	ldr	r3, [r7, #28]
 800d278:	429a      	cmp	r2, r3
 800d27a:	d8db      	bhi.n	800d234 <lwip_itoa+0x50>
  }
  if (n) {
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d003      	beq.n	800d28a <lwip_itoa+0xa6>
    /* buffer is too small */
    *result = 0;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2200      	movs	r2, #0
 800d286:	701a      	strb	r2, [r3, #0]
    return;
 800d288:	e01a      	b.n	800d2c0 <lwip_itoa+0xdc>
  }
  if (*tmp == 0) {
 800d28a:	69bb      	ldr	r3, [r7, #24]
 800d28c:	781b      	ldrb	r3, [r3, #0]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d10a      	bne.n	800d2a8 <lwip_itoa+0xc4>
    /* Nothing added? */
    *res++ = '0';
 800d292:	69fb      	ldr	r3, [r7, #28]
 800d294:	1c5a      	adds	r2, r3, #1
 800d296:	61fa      	str	r2, [r7, #28]
 800d298:	2230      	movs	r2, #48	; 0x30
 800d29a:	701a      	strb	r2, [r3, #0]
    *res++ = 0;
 800d29c:	69fb      	ldr	r3, [r7, #28]
 800d29e:	1c5a      	adds	r2, r3, #1
 800d2a0:	61fa      	str	r2, [r7, #28]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	701a      	strb	r2, [r3, #0]
    return;
 800d2a6:	e00b      	b.n	800d2c0 <lwip_itoa+0xdc>
  }
  /* move from temporary buffer to output buffer (sign is not moved) */
  memmove(res, tmp, (size_t)((result + bufsize) - tmp));
 800d2a8:	68fa      	ldr	r2, [r7, #12]
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	441a      	add	r2, r3
 800d2ae:	69bb      	ldr	r3, [r7, #24]
 800d2b0:	1ad3      	subs	r3, r2, r3
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	69b9      	ldr	r1, [r7, #24]
 800d2b6:	69f8      	ldr	r0, [r7, #28]
 800d2b8:	f00a fece 	bl	8018058 <memmove>
 800d2bc:	e000      	b.n	800d2c0 <lwip_itoa+0xdc>
    return;
 800d2be:	bf00      	nop
}
 800d2c0:	3720      	adds	r7, #32
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}
 800d2c6:	bf00      	nop
 800d2c8:	66666667 	.word	0x66666667

0800d2cc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b082      	sub	sp, #8
 800d2d0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d2d6:	f00a fce7 	bl	8017ca8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d2da:	f000 f8d5 	bl	800d488 <mem_init>
  memp_init();
 800d2de:	f000 fc31 	bl	800db44 <memp_init>
  pbuf_init();
  netif_init();
 800d2e2:	f000 fcf7 	bl	800dcd4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d2e6:	f007 ffd9 	bl	801529c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d2ea:	f001 fe07 	bl	800eefc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d2ee:	f007 ff1b 	bl	8015128 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d2f2:	bf00      	nop
 800d2f4:	3708      	adds	r7, #8
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
	...

0800d2fc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b083      	sub	sp, #12
 800d300:	af00      	add	r7, sp, #0
 800d302:	4603      	mov	r3, r0
 800d304:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d306:	4b05      	ldr	r3, [pc, #20]	; (800d31c <ptr_to_mem+0x20>)
 800d308:	681a      	ldr	r2, [r3, #0]
 800d30a:	88fb      	ldrh	r3, [r7, #6]
 800d30c:	4413      	add	r3, r2
}
 800d30e:	4618      	mov	r0, r3
 800d310:	370c      	adds	r7, #12
 800d312:	46bd      	mov	sp, r7
 800d314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d318:	4770      	bx	lr
 800d31a:	bf00      	nop
 800d31c:	20005244 	.word	0x20005244

0800d320 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d320:	b480      	push	{r7}
 800d322:	b083      	sub	sp, #12
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d328:	4b05      	ldr	r3, [pc, #20]	; (800d340 <mem_to_ptr+0x20>)
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	687a      	ldr	r2, [r7, #4]
 800d32e:	1ad3      	subs	r3, r2, r3
 800d330:	b29b      	uxth	r3, r3
}
 800d332:	4618      	mov	r0, r3
 800d334:	370c      	adds	r7, #12
 800d336:	46bd      	mov	sp, r7
 800d338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33c:	4770      	bx	lr
 800d33e:	bf00      	nop
 800d340:	20005244 	.word	0x20005244

0800d344 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d344:	b590      	push	{r4, r7, lr}
 800d346:	b085      	sub	sp, #20
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d34c:	4b45      	ldr	r3, [pc, #276]	; (800d464 <plug_holes+0x120>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	687a      	ldr	r2, [r7, #4]
 800d352:	429a      	cmp	r2, r3
 800d354:	d206      	bcs.n	800d364 <plug_holes+0x20>
 800d356:	4b44      	ldr	r3, [pc, #272]	; (800d468 <plug_holes+0x124>)
 800d358:	f240 12df 	movw	r2, #479	; 0x1df
 800d35c:	4943      	ldr	r1, [pc, #268]	; (800d46c <plug_holes+0x128>)
 800d35e:	4844      	ldr	r0, [pc, #272]	; (800d470 <plug_holes+0x12c>)
 800d360:	f00a ff46 	bl	80181f0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d364:	4b43      	ldr	r3, [pc, #268]	; (800d474 <plug_holes+0x130>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	687a      	ldr	r2, [r7, #4]
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d306      	bcc.n	800d37c <plug_holes+0x38>
 800d36e:	4b3e      	ldr	r3, [pc, #248]	; (800d468 <plug_holes+0x124>)
 800d370:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d374:	4940      	ldr	r1, [pc, #256]	; (800d478 <plug_holes+0x134>)
 800d376:	483e      	ldr	r0, [pc, #248]	; (800d470 <plug_holes+0x12c>)
 800d378:	f00a ff3a 	bl	80181f0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	791b      	ldrb	r3, [r3, #4]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d006      	beq.n	800d392 <plug_holes+0x4e>
 800d384:	4b38      	ldr	r3, [pc, #224]	; (800d468 <plug_holes+0x124>)
 800d386:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d38a:	493c      	ldr	r1, [pc, #240]	; (800d47c <plug_holes+0x138>)
 800d38c:	4838      	ldr	r0, [pc, #224]	; (800d470 <plug_holes+0x12c>)
 800d38e:	f00a ff2f 	bl	80181f0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	881b      	ldrh	r3, [r3, #0]
 800d396:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800d39a:	d906      	bls.n	800d3aa <plug_holes+0x66>
 800d39c:	4b32      	ldr	r3, [pc, #200]	; (800d468 <plug_holes+0x124>)
 800d39e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800d3a2:	4937      	ldr	r1, [pc, #220]	; (800d480 <plug_holes+0x13c>)
 800d3a4:	4832      	ldr	r0, [pc, #200]	; (800d470 <plug_holes+0x12c>)
 800d3a6:	f00a ff23 	bl	80181f0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	881b      	ldrh	r3, [r3, #0]
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f7ff ffa4 	bl	800d2fc <ptr_to_mem>
 800d3b4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d3b6:	687a      	ldr	r2, [r7, #4]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d024      	beq.n	800d408 <plug_holes+0xc4>
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	791b      	ldrb	r3, [r3, #4]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d120      	bne.n	800d408 <plug_holes+0xc4>
 800d3c6:	4b2b      	ldr	r3, [pc, #172]	; (800d474 <plug_holes+0x130>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	68fa      	ldr	r2, [r7, #12]
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	d01b      	beq.n	800d408 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d3d0:	4b2c      	ldr	r3, [pc, #176]	; (800d484 <plug_holes+0x140>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	68fa      	ldr	r2, [r7, #12]
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d102      	bne.n	800d3e0 <plug_holes+0x9c>
      lfree = mem;
 800d3da:	4a2a      	ldr	r2, [pc, #168]	; (800d484 <plug_holes+0x140>)
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	881a      	ldrh	r2, [r3, #0]
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	881b      	ldrh	r3, [r3, #0]
 800d3ec:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800d3f0:	d00a      	beq.n	800d408 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	881b      	ldrh	r3, [r3, #0]
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f7ff ff80 	bl	800d2fc <ptr_to_mem>
 800d3fc:	4604      	mov	r4, r0
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f7ff ff8e 	bl	800d320 <mem_to_ptr>
 800d404:	4603      	mov	r3, r0
 800d406:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	885b      	ldrh	r3, [r3, #2]
 800d40c:	4618      	mov	r0, r3
 800d40e:	f7ff ff75 	bl	800d2fc <ptr_to_mem>
 800d412:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d414:	68ba      	ldr	r2, [r7, #8]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	429a      	cmp	r2, r3
 800d41a:	d01f      	beq.n	800d45c <plug_holes+0x118>
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	791b      	ldrb	r3, [r3, #4]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d11b      	bne.n	800d45c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d424:	4b17      	ldr	r3, [pc, #92]	; (800d484 <plug_holes+0x140>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	687a      	ldr	r2, [r7, #4]
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d102      	bne.n	800d434 <plug_holes+0xf0>
      lfree = pmem;
 800d42e:	4a15      	ldr	r2, [pc, #84]	; (800d484 <plug_holes+0x140>)
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	881a      	ldrh	r2, [r3, #0]
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	881b      	ldrh	r3, [r3, #0]
 800d440:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800d444:	d00a      	beq.n	800d45c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	881b      	ldrh	r3, [r3, #0]
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7ff ff56 	bl	800d2fc <ptr_to_mem>
 800d450:	4604      	mov	r4, r0
 800d452:	68b8      	ldr	r0, [r7, #8]
 800d454:	f7ff ff64 	bl	800d320 <mem_to_ptr>
 800d458:	4603      	mov	r3, r0
 800d45a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d45c:	bf00      	nop
 800d45e:	3714      	adds	r7, #20
 800d460:	46bd      	mov	sp, r7
 800d462:	bd90      	pop	{r4, r7, pc}
 800d464:	20005244 	.word	0x20005244
 800d468:	0801aca4 	.word	0x0801aca4
 800d46c:	0801acd4 	.word	0x0801acd4
 800d470:	0801acec 	.word	0x0801acec
 800d474:	20005248 	.word	0x20005248
 800d478:	0801ad14 	.word	0x0801ad14
 800d47c:	0801ad30 	.word	0x0801ad30
 800d480:	0801ad4c 	.word	0x0801ad4c
 800d484:	20005250 	.word	0x20005250

0800d488 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b082      	sub	sp, #8
 800d48c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d48e:	4b1f      	ldr	r3, [pc, #124]	; (800d50c <mem_init+0x84>)
 800d490:	3303      	adds	r3, #3
 800d492:	f023 0303 	bic.w	r3, r3, #3
 800d496:	461a      	mov	r2, r3
 800d498:	4b1d      	ldr	r3, [pc, #116]	; (800d510 <mem_init+0x88>)
 800d49a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d49c:	4b1c      	ldr	r3, [pc, #112]	; (800d510 <mem_init+0x88>)
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 800d4a8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d4b6:	f44f 40f0 	mov.w	r0, #30720	; 0x7800
 800d4ba:	f7ff ff1f 	bl	800d2fc <ptr_to_mem>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	4a14      	ldr	r2, [pc, #80]	; (800d514 <mem_init+0x8c>)
 800d4c2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d4c4:	4b13      	ldr	r3, [pc, #76]	; (800d514 <mem_init+0x8c>)
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	2201      	movs	r2, #1
 800d4ca:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d4cc:	4b11      	ldr	r3, [pc, #68]	; (800d514 <mem_init+0x8c>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 800d4d4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d4d6:	4b0f      	ldr	r3, [pc, #60]	; (800d514 <mem_init+0x8c>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 800d4de:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d4e0:	4b0b      	ldr	r3, [pc, #44]	; (800d510 <mem_init+0x88>)
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	4a0c      	ldr	r2, [pc, #48]	; (800d518 <mem_init+0x90>)
 800d4e6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d4e8:	480c      	ldr	r0, [pc, #48]	; (800d51c <mem_init+0x94>)
 800d4ea:	f00a fbeb 	bl	8017cc4 <sys_mutex_new>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d006      	beq.n	800d502 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d4f4:	4b0a      	ldr	r3, [pc, #40]	; (800d520 <mem_init+0x98>)
 800d4f6:	f240 221f 	movw	r2, #543	; 0x21f
 800d4fa:	490a      	ldr	r1, [pc, #40]	; (800d524 <mem_init+0x9c>)
 800d4fc:	480a      	ldr	r0, [pc, #40]	; (800d528 <mem_init+0xa0>)
 800d4fe:	f00a fe77 	bl	80181f0 <iprintf>
  }
}
 800d502:	bf00      	nop
 800d504:	3708      	adds	r7, #8
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
 800d50a:	bf00      	nop
 800d50c:	2000e2e8 	.word	0x2000e2e8
 800d510:	20005244 	.word	0x20005244
 800d514:	20005248 	.word	0x20005248
 800d518:	20005250 	.word	0x20005250
 800d51c:	2000524c 	.word	0x2000524c
 800d520:	0801aca4 	.word	0x0801aca4
 800d524:	0801ad78 	.word	0x0801ad78
 800d528:	0801acec 	.word	0x0801acec

0800d52c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b086      	sub	sp, #24
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f7ff fef3 	bl	800d320 <mem_to_ptr>
 800d53a:	4603      	mov	r3, r0
 800d53c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	881b      	ldrh	r3, [r3, #0]
 800d542:	4618      	mov	r0, r3
 800d544:	f7ff feda 	bl	800d2fc <ptr_to_mem>
 800d548:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	885b      	ldrh	r3, [r3, #2]
 800d54e:	4618      	mov	r0, r3
 800d550:	f7ff fed4 	bl	800d2fc <ptr_to_mem>
 800d554:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	881b      	ldrh	r3, [r3, #0]
 800d55a:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800d55e:	d818      	bhi.n	800d592 <mem_link_valid+0x66>
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	885b      	ldrh	r3, [r3, #2]
 800d564:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800d568:	d813      	bhi.n	800d592 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d56e:	8afa      	ldrh	r2, [r7, #22]
 800d570:	429a      	cmp	r2, r3
 800d572:	d004      	beq.n	800d57e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	881b      	ldrh	r3, [r3, #0]
 800d578:	8afa      	ldrh	r2, [r7, #22]
 800d57a:	429a      	cmp	r2, r3
 800d57c:	d109      	bne.n	800d592 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d57e:	4b08      	ldr	r3, [pc, #32]	; (800d5a0 <mem_link_valid+0x74>)
 800d580:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d582:	693a      	ldr	r2, [r7, #16]
 800d584:	429a      	cmp	r2, r3
 800d586:	d006      	beq.n	800d596 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	885b      	ldrh	r3, [r3, #2]
 800d58c:	8afa      	ldrh	r2, [r7, #22]
 800d58e:	429a      	cmp	r2, r3
 800d590:	d001      	beq.n	800d596 <mem_link_valid+0x6a>
    return 0;
 800d592:	2300      	movs	r3, #0
 800d594:	e000      	b.n	800d598 <mem_link_valid+0x6c>
  }
  return 1;
 800d596:	2301      	movs	r3, #1
}
 800d598:	4618      	mov	r0, r3
 800d59a:	3718      	adds	r7, #24
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}
 800d5a0:	20005248 	.word	0x20005248

0800d5a4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b088      	sub	sp, #32
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d070      	beq.n	800d694 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f003 0303 	and.w	r3, r3, #3
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d00d      	beq.n	800d5d8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d5bc:	4b37      	ldr	r3, [pc, #220]	; (800d69c <mem_free+0xf8>)
 800d5be:	f240 2273 	movw	r2, #627	; 0x273
 800d5c2:	4937      	ldr	r1, [pc, #220]	; (800d6a0 <mem_free+0xfc>)
 800d5c4:	4837      	ldr	r0, [pc, #220]	; (800d6a4 <mem_free+0x100>)
 800d5c6:	f00a fe13 	bl	80181f0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d5ca:	f00a fbd9 	bl	8017d80 <sys_arch_protect>
 800d5ce:	60f8      	str	r0, [r7, #12]
 800d5d0:	68f8      	ldr	r0, [r7, #12]
 800d5d2:	f00a fbe3 	bl	8017d9c <sys_arch_unprotect>
    return;
 800d5d6:	e05e      	b.n	800d696 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	3b08      	subs	r3, #8
 800d5dc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d5de:	4b32      	ldr	r3, [pc, #200]	; (800d6a8 <mem_free+0x104>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	69fa      	ldr	r2, [r7, #28]
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	d306      	bcc.n	800d5f6 <mem_free+0x52>
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f103 020c 	add.w	r2, r3, #12
 800d5ee:	4b2f      	ldr	r3, [pc, #188]	; (800d6ac <mem_free+0x108>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d90d      	bls.n	800d612 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d5f6:	4b29      	ldr	r3, [pc, #164]	; (800d69c <mem_free+0xf8>)
 800d5f8:	f240 227f 	movw	r2, #639	; 0x27f
 800d5fc:	492c      	ldr	r1, [pc, #176]	; (800d6b0 <mem_free+0x10c>)
 800d5fe:	4829      	ldr	r0, [pc, #164]	; (800d6a4 <mem_free+0x100>)
 800d600:	f00a fdf6 	bl	80181f0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d604:	f00a fbbc 	bl	8017d80 <sys_arch_protect>
 800d608:	6138      	str	r0, [r7, #16]
 800d60a:	6938      	ldr	r0, [r7, #16]
 800d60c:	f00a fbc6 	bl	8017d9c <sys_arch_unprotect>
    return;
 800d610:	e041      	b.n	800d696 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d612:	4828      	ldr	r0, [pc, #160]	; (800d6b4 <mem_free+0x110>)
 800d614:	f00a fb72 	bl	8017cfc <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d618:	69fb      	ldr	r3, [r7, #28]
 800d61a:	791b      	ldrb	r3, [r3, #4]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d110      	bne.n	800d642 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d620:	4b1e      	ldr	r3, [pc, #120]	; (800d69c <mem_free+0xf8>)
 800d622:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d626:	4924      	ldr	r1, [pc, #144]	; (800d6b8 <mem_free+0x114>)
 800d628:	481e      	ldr	r0, [pc, #120]	; (800d6a4 <mem_free+0x100>)
 800d62a:	f00a fde1 	bl	80181f0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d62e:	4821      	ldr	r0, [pc, #132]	; (800d6b4 <mem_free+0x110>)
 800d630:	f00a fb73 	bl	8017d1a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d634:	f00a fba4 	bl	8017d80 <sys_arch_protect>
 800d638:	6178      	str	r0, [r7, #20]
 800d63a:	6978      	ldr	r0, [r7, #20]
 800d63c:	f00a fbae 	bl	8017d9c <sys_arch_unprotect>
    return;
 800d640:	e029      	b.n	800d696 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d642:	69f8      	ldr	r0, [r7, #28]
 800d644:	f7ff ff72 	bl	800d52c <mem_link_valid>
 800d648:	4603      	mov	r3, r0
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d110      	bne.n	800d670 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d64e:	4b13      	ldr	r3, [pc, #76]	; (800d69c <mem_free+0xf8>)
 800d650:	f240 2295 	movw	r2, #661	; 0x295
 800d654:	4919      	ldr	r1, [pc, #100]	; (800d6bc <mem_free+0x118>)
 800d656:	4813      	ldr	r0, [pc, #76]	; (800d6a4 <mem_free+0x100>)
 800d658:	f00a fdca 	bl	80181f0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d65c:	4815      	ldr	r0, [pc, #84]	; (800d6b4 <mem_free+0x110>)
 800d65e:	f00a fb5c 	bl	8017d1a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d662:	f00a fb8d 	bl	8017d80 <sys_arch_protect>
 800d666:	61b8      	str	r0, [r7, #24]
 800d668:	69b8      	ldr	r0, [r7, #24]
 800d66a:	f00a fb97 	bl	8017d9c <sys_arch_unprotect>
    return;
 800d66e:	e012      	b.n	800d696 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d670:	69fb      	ldr	r3, [r7, #28]
 800d672:	2200      	movs	r2, #0
 800d674:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d676:	4b12      	ldr	r3, [pc, #72]	; (800d6c0 <mem_free+0x11c>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	69fa      	ldr	r2, [r7, #28]
 800d67c:	429a      	cmp	r2, r3
 800d67e:	d202      	bcs.n	800d686 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d680:	4a0f      	ldr	r2, [pc, #60]	; (800d6c0 <mem_free+0x11c>)
 800d682:	69fb      	ldr	r3, [r7, #28]
 800d684:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d686:	69f8      	ldr	r0, [r7, #28]
 800d688:	f7ff fe5c 	bl	800d344 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d68c:	4809      	ldr	r0, [pc, #36]	; (800d6b4 <mem_free+0x110>)
 800d68e:	f00a fb44 	bl	8017d1a <sys_mutex_unlock>
 800d692:	e000      	b.n	800d696 <mem_free+0xf2>
    return;
 800d694:	bf00      	nop
}
 800d696:	3720      	adds	r7, #32
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}
 800d69c:	0801aca4 	.word	0x0801aca4
 800d6a0:	0801ad94 	.word	0x0801ad94
 800d6a4:	0801acec 	.word	0x0801acec
 800d6a8:	20005244 	.word	0x20005244
 800d6ac:	20005248 	.word	0x20005248
 800d6b0:	0801adb8 	.word	0x0801adb8
 800d6b4:	2000524c 	.word	0x2000524c
 800d6b8:	0801add4 	.word	0x0801add4
 800d6bc:	0801adfc 	.word	0x0801adfc
 800d6c0:	20005250 	.word	0x20005250

0800d6c4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b088      	sub	sp, #32
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
 800d6cc:	460b      	mov	r3, r1
 800d6ce:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d6d0:	887b      	ldrh	r3, [r7, #2]
 800d6d2:	3303      	adds	r3, #3
 800d6d4:	b29b      	uxth	r3, r3
 800d6d6:	f023 0303 	bic.w	r3, r3, #3
 800d6da:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d6dc:	8bfb      	ldrh	r3, [r7, #30]
 800d6de:	2b0b      	cmp	r3, #11
 800d6e0:	d801      	bhi.n	800d6e6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d6e2:	230c      	movs	r3, #12
 800d6e4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d6e6:	8bfb      	ldrh	r3, [r7, #30]
 800d6e8:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800d6ec:	d803      	bhi.n	800d6f6 <mem_trim+0x32>
 800d6ee:	8bfa      	ldrh	r2, [r7, #30]
 800d6f0:	887b      	ldrh	r3, [r7, #2]
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d201      	bcs.n	800d6fa <mem_trim+0x36>
    return NULL;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	e0d8      	b.n	800d8ac <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d6fa:	4b6e      	ldr	r3, [pc, #440]	; (800d8b4 <mem_trim+0x1f0>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	687a      	ldr	r2, [r7, #4]
 800d700:	429a      	cmp	r2, r3
 800d702:	d304      	bcc.n	800d70e <mem_trim+0x4a>
 800d704:	4b6c      	ldr	r3, [pc, #432]	; (800d8b8 <mem_trim+0x1f4>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	687a      	ldr	r2, [r7, #4]
 800d70a:	429a      	cmp	r2, r3
 800d70c:	d306      	bcc.n	800d71c <mem_trim+0x58>
 800d70e:	4b6b      	ldr	r3, [pc, #428]	; (800d8bc <mem_trim+0x1f8>)
 800d710:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d714:	496a      	ldr	r1, [pc, #424]	; (800d8c0 <mem_trim+0x1fc>)
 800d716:	486b      	ldr	r0, [pc, #428]	; (800d8c4 <mem_trim+0x200>)
 800d718:	f00a fd6a 	bl	80181f0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d71c:	4b65      	ldr	r3, [pc, #404]	; (800d8b4 <mem_trim+0x1f0>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	687a      	ldr	r2, [r7, #4]
 800d722:	429a      	cmp	r2, r3
 800d724:	d304      	bcc.n	800d730 <mem_trim+0x6c>
 800d726:	4b64      	ldr	r3, [pc, #400]	; (800d8b8 <mem_trim+0x1f4>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	687a      	ldr	r2, [r7, #4]
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d307      	bcc.n	800d740 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d730:	f00a fb26 	bl	8017d80 <sys_arch_protect>
 800d734:	60b8      	str	r0, [r7, #8]
 800d736:	68b8      	ldr	r0, [r7, #8]
 800d738:	f00a fb30 	bl	8017d9c <sys_arch_unprotect>
    return rmem;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	e0b5      	b.n	800d8ac <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	3b08      	subs	r3, #8
 800d744:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d746:	69b8      	ldr	r0, [r7, #24]
 800d748:	f7ff fdea 	bl	800d320 <mem_to_ptr>
 800d74c:	4603      	mov	r3, r0
 800d74e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d750:	69bb      	ldr	r3, [r7, #24]
 800d752:	881a      	ldrh	r2, [r3, #0]
 800d754:	8afb      	ldrh	r3, [r7, #22]
 800d756:	1ad3      	subs	r3, r2, r3
 800d758:	b29b      	uxth	r3, r3
 800d75a:	3b08      	subs	r3, #8
 800d75c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d75e:	8bfa      	ldrh	r2, [r7, #30]
 800d760:	8abb      	ldrh	r3, [r7, #20]
 800d762:	429a      	cmp	r2, r3
 800d764:	d906      	bls.n	800d774 <mem_trim+0xb0>
 800d766:	4b55      	ldr	r3, [pc, #340]	; (800d8bc <mem_trim+0x1f8>)
 800d768:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d76c:	4956      	ldr	r1, [pc, #344]	; (800d8c8 <mem_trim+0x204>)
 800d76e:	4855      	ldr	r0, [pc, #340]	; (800d8c4 <mem_trim+0x200>)
 800d770:	f00a fd3e 	bl	80181f0 <iprintf>
  if (newsize > size) {
 800d774:	8bfa      	ldrh	r2, [r7, #30]
 800d776:	8abb      	ldrh	r3, [r7, #20]
 800d778:	429a      	cmp	r2, r3
 800d77a:	d901      	bls.n	800d780 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800d77c:	2300      	movs	r3, #0
 800d77e:	e095      	b.n	800d8ac <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800d780:	8bfa      	ldrh	r2, [r7, #30]
 800d782:	8abb      	ldrh	r3, [r7, #20]
 800d784:	429a      	cmp	r2, r3
 800d786:	d101      	bne.n	800d78c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	e08f      	b.n	800d8ac <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d78c:	484f      	ldr	r0, [pc, #316]	; (800d8cc <mem_trim+0x208>)
 800d78e:	f00a fab5 	bl	8017cfc <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d792:	69bb      	ldr	r3, [r7, #24]
 800d794:	881b      	ldrh	r3, [r3, #0]
 800d796:	4618      	mov	r0, r3
 800d798:	f7ff fdb0 	bl	800d2fc <ptr_to_mem>
 800d79c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d79e:	693b      	ldr	r3, [r7, #16]
 800d7a0:	791b      	ldrb	r3, [r3, #4]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d13f      	bne.n	800d826 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d7a6:	69bb      	ldr	r3, [r7, #24]
 800d7a8:	881b      	ldrh	r3, [r3, #0]
 800d7aa:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800d7ae:	d106      	bne.n	800d7be <mem_trim+0xfa>
 800d7b0:	4b42      	ldr	r3, [pc, #264]	; (800d8bc <mem_trim+0x1f8>)
 800d7b2:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d7b6:	4946      	ldr	r1, [pc, #280]	; (800d8d0 <mem_trim+0x20c>)
 800d7b8:	4842      	ldr	r0, [pc, #264]	; (800d8c4 <mem_trim+0x200>)
 800d7ba:	f00a fd19 	bl	80181f0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	881b      	ldrh	r3, [r3, #0]
 800d7c2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d7c4:	8afa      	ldrh	r2, [r7, #22]
 800d7c6:	8bfb      	ldrh	r3, [r7, #30]
 800d7c8:	4413      	add	r3, r2
 800d7ca:	b29b      	uxth	r3, r3
 800d7cc:	3308      	adds	r3, #8
 800d7ce:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d7d0:	4b40      	ldr	r3, [pc, #256]	; (800d8d4 <mem_trim+0x210>)
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	693a      	ldr	r2, [r7, #16]
 800d7d6:	429a      	cmp	r2, r3
 800d7d8:	d106      	bne.n	800d7e8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800d7da:	89fb      	ldrh	r3, [r7, #14]
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f7ff fd8d 	bl	800d2fc <ptr_to_mem>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	4a3b      	ldr	r2, [pc, #236]	; (800d8d4 <mem_trim+0x210>)
 800d7e6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d7e8:	89fb      	ldrh	r3, [r7, #14]
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7ff fd86 	bl	800d2fc <ptr_to_mem>
 800d7f0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d7f2:	693b      	ldr	r3, [r7, #16]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	89ba      	ldrh	r2, [r7, #12]
 800d7fc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d7fe:	693b      	ldr	r3, [r7, #16]
 800d800:	8afa      	ldrh	r2, [r7, #22]
 800d802:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d804:	69bb      	ldr	r3, [r7, #24]
 800d806:	89fa      	ldrh	r2, [r7, #14]
 800d808:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d80a:	693b      	ldr	r3, [r7, #16]
 800d80c:	881b      	ldrh	r3, [r3, #0]
 800d80e:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800d812:	d047      	beq.n	800d8a4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	881b      	ldrh	r3, [r3, #0]
 800d818:	4618      	mov	r0, r3
 800d81a:	f7ff fd6f 	bl	800d2fc <ptr_to_mem>
 800d81e:	4602      	mov	r2, r0
 800d820:	89fb      	ldrh	r3, [r7, #14]
 800d822:	8053      	strh	r3, [r2, #2]
 800d824:	e03e      	b.n	800d8a4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d826:	8bfb      	ldrh	r3, [r7, #30]
 800d828:	f103 0214 	add.w	r2, r3, #20
 800d82c:	8abb      	ldrh	r3, [r7, #20]
 800d82e:	429a      	cmp	r2, r3
 800d830:	d838      	bhi.n	800d8a4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d832:	8afa      	ldrh	r2, [r7, #22]
 800d834:	8bfb      	ldrh	r3, [r7, #30]
 800d836:	4413      	add	r3, r2
 800d838:	b29b      	uxth	r3, r3
 800d83a:	3308      	adds	r3, #8
 800d83c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d83e:	69bb      	ldr	r3, [r7, #24]
 800d840:	881b      	ldrh	r3, [r3, #0]
 800d842:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800d846:	d106      	bne.n	800d856 <mem_trim+0x192>
 800d848:	4b1c      	ldr	r3, [pc, #112]	; (800d8bc <mem_trim+0x1f8>)
 800d84a:	f240 3216 	movw	r2, #790	; 0x316
 800d84e:	4920      	ldr	r1, [pc, #128]	; (800d8d0 <mem_trim+0x20c>)
 800d850:	481c      	ldr	r0, [pc, #112]	; (800d8c4 <mem_trim+0x200>)
 800d852:	f00a fccd 	bl	80181f0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d856:	89fb      	ldrh	r3, [r7, #14]
 800d858:	4618      	mov	r0, r3
 800d85a:	f7ff fd4f 	bl	800d2fc <ptr_to_mem>
 800d85e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d860:	4b1c      	ldr	r3, [pc, #112]	; (800d8d4 <mem_trim+0x210>)
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	693a      	ldr	r2, [r7, #16]
 800d866:	429a      	cmp	r2, r3
 800d868:	d202      	bcs.n	800d870 <mem_trim+0x1ac>
      lfree = mem2;
 800d86a:	4a1a      	ldr	r2, [pc, #104]	; (800d8d4 <mem_trim+0x210>)
 800d86c:	693b      	ldr	r3, [r7, #16]
 800d86e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d870:	693b      	ldr	r3, [r7, #16]
 800d872:	2200      	movs	r2, #0
 800d874:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d876:	69bb      	ldr	r3, [r7, #24]
 800d878:	881a      	ldrh	r2, [r3, #0]
 800d87a:	693b      	ldr	r3, [r7, #16]
 800d87c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d87e:	693b      	ldr	r3, [r7, #16]
 800d880:	8afa      	ldrh	r2, [r7, #22]
 800d882:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d884:	69bb      	ldr	r3, [r7, #24]
 800d886:	89fa      	ldrh	r2, [r7, #14]
 800d888:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d88a:	693b      	ldr	r3, [r7, #16]
 800d88c:	881b      	ldrh	r3, [r3, #0]
 800d88e:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800d892:	d007      	beq.n	800d8a4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d894:	693b      	ldr	r3, [r7, #16]
 800d896:	881b      	ldrh	r3, [r3, #0]
 800d898:	4618      	mov	r0, r3
 800d89a:	f7ff fd2f 	bl	800d2fc <ptr_to_mem>
 800d89e:	4602      	mov	r2, r0
 800d8a0:	89fb      	ldrh	r3, [r7, #14]
 800d8a2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d8a4:	4809      	ldr	r0, [pc, #36]	; (800d8cc <mem_trim+0x208>)
 800d8a6:	f00a fa38 	bl	8017d1a <sys_mutex_unlock>
  return rmem;
 800d8aa:	687b      	ldr	r3, [r7, #4]
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3720      	adds	r7, #32
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}
 800d8b4:	20005244 	.word	0x20005244
 800d8b8:	20005248 	.word	0x20005248
 800d8bc:	0801aca4 	.word	0x0801aca4
 800d8c0:	0801ae30 	.word	0x0801ae30
 800d8c4:	0801acec 	.word	0x0801acec
 800d8c8:	0801ae48 	.word	0x0801ae48
 800d8cc:	2000524c 	.word	0x2000524c
 800d8d0:	0801ae68 	.word	0x0801ae68
 800d8d4:	20005250 	.word	0x20005250

0800d8d8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b088      	sub	sp, #32
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	4603      	mov	r3, r0
 800d8e0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d8e2:	88fb      	ldrh	r3, [r7, #6]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d101      	bne.n	800d8ec <mem_malloc+0x14>
    return NULL;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	e0e2      	b.n	800dab2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d8ec:	88fb      	ldrh	r3, [r7, #6]
 800d8ee:	3303      	adds	r3, #3
 800d8f0:	b29b      	uxth	r3, r3
 800d8f2:	f023 0303 	bic.w	r3, r3, #3
 800d8f6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d8f8:	8bbb      	ldrh	r3, [r7, #28]
 800d8fa:	2b0b      	cmp	r3, #11
 800d8fc:	d801      	bhi.n	800d902 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d8fe:	230c      	movs	r3, #12
 800d900:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d902:	8bbb      	ldrh	r3, [r7, #28]
 800d904:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800d908:	d803      	bhi.n	800d912 <mem_malloc+0x3a>
 800d90a:	8bba      	ldrh	r2, [r7, #28]
 800d90c:	88fb      	ldrh	r3, [r7, #6]
 800d90e:	429a      	cmp	r2, r3
 800d910:	d201      	bcs.n	800d916 <mem_malloc+0x3e>
    return NULL;
 800d912:	2300      	movs	r3, #0
 800d914:	e0cd      	b.n	800dab2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d916:	4869      	ldr	r0, [pc, #420]	; (800dabc <mem_malloc+0x1e4>)
 800d918:	f00a f9f0 	bl	8017cfc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d91c:	4b68      	ldr	r3, [pc, #416]	; (800dac0 <mem_malloc+0x1e8>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	4618      	mov	r0, r3
 800d922:	f7ff fcfd 	bl	800d320 <mem_to_ptr>
 800d926:	4603      	mov	r3, r0
 800d928:	83fb      	strh	r3, [r7, #30]
 800d92a:	e0b7      	b.n	800da9c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d92c:	8bfb      	ldrh	r3, [r7, #30]
 800d92e:	4618      	mov	r0, r3
 800d930:	f7ff fce4 	bl	800d2fc <ptr_to_mem>
 800d934:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	791b      	ldrb	r3, [r3, #4]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	f040 80a7 	bne.w	800da8e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	881b      	ldrh	r3, [r3, #0]
 800d944:	461a      	mov	r2, r3
 800d946:	8bfb      	ldrh	r3, [r7, #30]
 800d948:	1ad3      	subs	r3, r2, r3
 800d94a:	f1a3 0208 	sub.w	r2, r3, #8
 800d94e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d950:	429a      	cmp	r2, r3
 800d952:	f0c0 809c 	bcc.w	800da8e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	881b      	ldrh	r3, [r3, #0]
 800d95a:	461a      	mov	r2, r3
 800d95c:	8bfb      	ldrh	r3, [r7, #30]
 800d95e:	1ad3      	subs	r3, r2, r3
 800d960:	f1a3 0208 	sub.w	r2, r3, #8
 800d964:	8bbb      	ldrh	r3, [r7, #28]
 800d966:	3314      	adds	r3, #20
 800d968:	429a      	cmp	r2, r3
 800d96a:	d333      	bcc.n	800d9d4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d96c:	8bfa      	ldrh	r2, [r7, #30]
 800d96e:	8bbb      	ldrh	r3, [r7, #28]
 800d970:	4413      	add	r3, r2
 800d972:	b29b      	uxth	r3, r3
 800d974:	3308      	adds	r3, #8
 800d976:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d978:	8a7b      	ldrh	r3, [r7, #18]
 800d97a:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800d97e:	d106      	bne.n	800d98e <mem_malloc+0xb6>
 800d980:	4b50      	ldr	r3, [pc, #320]	; (800dac4 <mem_malloc+0x1ec>)
 800d982:	f240 3287 	movw	r2, #903	; 0x387
 800d986:	4950      	ldr	r1, [pc, #320]	; (800dac8 <mem_malloc+0x1f0>)
 800d988:	4850      	ldr	r0, [pc, #320]	; (800dacc <mem_malloc+0x1f4>)
 800d98a:	f00a fc31 	bl	80181f0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d98e:	8a7b      	ldrh	r3, [r7, #18]
 800d990:	4618      	mov	r0, r3
 800d992:	f7ff fcb3 	bl	800d2fc <ptr_to_mem>
 800d996:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	2200      	movs	r2, #0
 800d99c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	881a      	ldrh	r2, [r3, #0]
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	8bfa      	ldrh	r2, [r7, #30]
 800d9aa:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	8a7a      	ldrh	r2, [r7, #18]
 800d9b0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d9b2:	697b      	ldr	r3, [r7, #20]
 800d9b4:	2201      	movs	r2, #1
 800d9b6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	881b      	ldrh	r3, [r3, #0]
 800d9bc:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 800d9c0:	d00b      	beq.n	800d9da <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	881b      	ldrh	r3, [r3, #0]
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f7ff fc98 	bl	800d2fc <ptr_to_mem>
 800d9cc:	4602      	mov	r2, r0
 800d9ce:	8a7b      	ldrh	r3, [r7, #18]
 800d9d0:	8053      	strh	r3, [r2, #2]
 800d9d2:	e002      	b.n	800d9da <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d9d4:	697b      	ldr	r3, [r7, #20]
 800d9d6:	2201      	movs	r2, #1
 800d9d8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d9da:	4b39      	ldr	r3, [pc, #228]	; (800dac0 <mem_malloc+0x1e8>)
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	697a      	ldr	r2, [r7, #20]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d127      	bne.n	800da34 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d9e4:	4b36      	ldr	r3, [pc, #216]	; (800dac0 <mem_malloc+0x1e8>)
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d9ea:	e005      	b.n	800d9f8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d9ec:	69bb      	ldr	r3, [r7, #24]
 800d9ee:	881b      	ldrh	r3, [r3, #0]
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f7ff fc83 	bl	800d2fc <ptr_to_mem>
 800d9f6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d9f8:	69bb      	ldr	r3, [r7, #24]
 800d9fa:	791b      	ldrb	r3, [r3, #4]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d004      	beq.n	800da0a <mem_malloc+0x132>
 800da00:	4b33      	ldr	r3, [pc, #204]	; (800dad0 <mem_malloc+0x1f8>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	69ba      	ldr	r2, [r7, #24]
 800da06:	429a      	cmp	r2, r3
 800da08:	d1f0      	bne.n	800d9ec <mem_malloc+0x114>
          }
          lfree = cur;
 800da0a:	4a2d      	ldr	r2, [pc, #180]	; (800dac0 <mem_malloc+0x1e8>)
 800da0c:	69bb      	ldr	r3, [r7, #24]
 800da0e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800da10:	4b2b      	ldr	r3, [pc, #172]	; (800dac0 <mem_malloc+0x1e8>)
 800da12:	681a      	ldr	r2, [r3, #0]
 800da14:	4b2e      	ldr	r3, [pc, #184]	; (800dad0 <mem_malloc+0x1f8>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	429a      	cmp	r2, r3
 800da1a:	d00b      	beq.n	800da34 <mem_malloc+0x15c>
 800da1c:	4b28      	ldr	r3, [pc, #160]	; (800dac0 <mem_malloc+0x1e8>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	791b      	ldrb	r3, [r3, #4]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d006      	beq.n	800da34 <mem_malloc+0x15c>
 800da26:	4b27      	ldr	r3, [pc, #156]	; (800dac4 <mem_malloc+0x1ec>)
 800da28:	f240 32b5 	movw	r2, #949	; 0x3b5
 800da2c:	4929      	ldr	r1, [pc, #164]	; (800dad4 <mem_malloc+0x1fc>)
 800da2e:	4827      	ldr	r0, [pc, #156]	; (800dacc <mem_malloc+0x1f4>)
 800da30:	f00a fbde 	bl	80181f0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800da34:	4821      	ldr	r0, [pc, #132]	; (800dabc <mem_malloc+0x1e4>)
 800da36:	f00a f970 	bl	8017d1a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800da3a:	8bba      	ldrh	r2, [r7, #28]
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	4413      	add	r3, r2
 800da40:	3308      	adds	r3, #8
 800da42:	4a23      	ldr	r2, [pc, #140]	; (800dad0 <mem_malloc+0x1f8>)
 800da44:	6812      	ldr	r2, [r2, #0]
 800da46:	4293      	cmp	r3, r2
 800da48:	d906      	bls.n	800da58 <mem_malloc+0x180>
 800da4a:	4b1e      	ldr	r3, [pc, #120]	; (800dac4 <mem_malloc+0x1ec>)
 800da4c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800da50:	4921      	ldr	r1, [pc, #132]	; (800dad8 <mem_malloc+0x200>)
 800da52:	481e      	ldr	r0, [pc, #120]	; (800dacc <mem_malloc+0x1f4>)
 800da54:	f00a fbcc 	bl	80181f0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800da58:	697b      	ldr	r3, [r7, #20]
 800da5a:	f003 0303 	and.w	r3, r3, #3
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d006      	beq.n	800da70 <mem_malloc+0x198>
 800da62:	4b18      	ldr	r3, [pc, #96]	; (800dac4 <mem_malloc+0x1ec>)
 800da64:	f240 32bb 	movw	r2, #955	; 0x3bb
 800da68:	491c      	ldr	r1, [pc, #112]	; (800dadc <mem_malloc+0x204>)
 800da6a:	4818      	ldr	r0, [pc, #96]	; (800dacc <mem_malloc+0x1f4>)
 800da6c:	f00a fbc0 	bl	80181f0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	f003 0303 	and.w	r3, r3, #3
 800da76:	2b00      	cmp	r3, #0
 800da78:	d006      	beq.n	800da88 <mem_malloc+0x1b0>
 800da7a:	4b12      	ldr	r3, [pc, #72]	; (800dac4 <mem_malloc+0x1ec>)
 800da7c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800da80:	4917      	ldr	r1, [pc, #92]	; (800dae0 <mem_malloc+0x208>)
 800da82:	4812      	ldr	r0, [pc, #72]	; (800dacc <mem_malloc+0x1f4>)
 800da84:	f00a fbb4 	bl	80181f0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	3308      	adds	r3, #8
 800da8c:	e011      	b.n	800dab2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800da8e:	8bfb      	ldrh	r3, [r7, #30]
 800da90:	4618      	mov	r0, r3
 800da92:	f7ff fc33 	bl	800d2fc <ptr_to_mem>
 800da96:	4603      	mov	r3, r0
 800da98:	881b      	ldrh	r3, [r3, #0]
 800da9a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800da9c:	8bfa      	ldrh	r2, [r7, #30]
 800da9e:	8bbb      	ldrh	r3, [r7, #28]
 800daa0:	f5c3 43f0 	rsb	r3, r3, #30720	; 0x7800
 800daa4:	429a      	cmp	r2, r3
 800daa6:	f4ff af41 	bcc.w	800d92c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800daaa:	4804      	ldr	r0, [pc, #16]	; (800dabc <mem_malloc+0x1e4>)
 800daac:	f00a f935 	bl	8017d1a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800dab0:	2300      	movs	r3, #0
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3720      	adds	r7, #32
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}
 800daba:	bf00      	nop
 800dabc:	2000524c 	.word	0x2000524c
 800dac0:	20005250 	.word	0x20005250
 800dac4:	0801aca4 	.word	0x0801aca4
 800dac8:	0801ae68 	.word	0x0801ae68
 800dacc:	0801acec 	.word	0x0801acec
 800dad0:	20005248 	.word	0x20005248
 800dad4:	0801ae7c 	.word	0x0801ae7c
 800dad8:	0801ae98 	.word	0x0801ae98
 800dadc:	0801aec8 	.word	0x0801aec8
 800dae0:	0801aef8 	.word	0x0801aef8

0800dae4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800dae4:	b480      	push	{r7}
 800dae6:	b085      	sub	sp, #20
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	689b      	ldr	r3, [r3, #8]
 800daf0:	2200      	movs	r2, #0
 800daf2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	685b      	ldr	r3, [r3, #4]
 800daf8:	3303      	adds	r3, #3
 800dafa:	f023 0303 	bic.w	r3, r3, #3
 800dafe:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800db00:	2300      	movs	r3, #0
 800db02:	60fb      	str	r3, [r7, #12]
 800db04:	e011      	b.n	800db2a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	689b      	ldr	r3, [r3, #8]
 800db0a:	681a      	ldr	r2, [r3, #0]
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	689b      	ldr	r3, [r3, #8]
 800db14:	68ba      	ldr	r2, [r7, #8]
 800db16:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	881b      	ldrh	r3, [r3, #0]
 800db1c:	461a      	mov	r2, r3
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	4413      	add	r3, r2
 800db22:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	3301      	adds	r3, #1
 800db28:	60fb      	str	r3, [r7, #12]
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	885b      	ldrh	r3, [r3, #2]
 800db2e:	461a      	mov	r2, r3
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	4293      	cmp	r3, r2
 800db34:	dbe7      	blt.n	800db06 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800db36:	bf00      	nop
 800db38:	bf00      	nop
 800db3a:	3714      	adds	r7, #20
 800db3c:	46bd      	mov	sp, r7
 800db3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db42:	4770      	bx	lr

0800db44 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b082      	sub	sp, #8
 800db48:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800db4a:	2300      	movs	r3, #0
 800db4c:	80fb      	strh	r3, [r7, #6]
 800db4e:	e009      	b.n	800db64 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800db50:	88fb      	ldrh	r3, [r7, #6]
 800db52:	4a08      	ldr	r2, [pc, #32]	; (800db74 <memp_init+0x30>)
 800db54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db58:	4618      	mov	r0, r3
 800db5a:	f7ff ffc3 	bl	800dae4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800db5e:	88fb      	ldrh	r3, [r7, #6]
 800db60:	3301      	adds	r3, #1
 800db62:	80fb      	strh	r3, [r7, #6]
 800db64:	88fb      	ldrh	r3, [r7, #6]
 800db66:	2b0c      	cmp	r3, #12
 800db68:	d9f2      	bls.n	800db50 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800db6a:	bf00      	nop
 800db6c:	bf00      	nop
 800db6e:	3708      	adds	r7, #8
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}
 800db74:	080214ac 	.word	0x080214ac

0800db78 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b084      	sub	sp, #16
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800db80:	f00a f8fe 	bl	8017d80 <sys_arch_protect>
 800db84:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	689b      	ldr	r3, [r3, #8]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d015      	beq.n	800dbc0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	689b      	ldr	r3, [r3, #8]
 800db98:	68ba      	ldr	r2, [r7, #8]
 800db9a:	6812      	ldr	r2, [r2, #0]
 800db9c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	f003 0303 	and.w	r3, r3, #3
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d006      	beq.n	800dbb6 <do_memp_malloc_pool+0x3e>
 800dba8:	4b09      	ldr	r3, [pc, #36]	; (800dbd0 <do_memp_malloc_pool+0x58>)
 800dbaa:	f44f 728c 	mov.w	r2, #280	; 0x118
 800dbae:	4909      	ldr	r1, [pc, #36]	; (800dbd4 <do_memp_malloc_pool+0x5c>)
 800dbb0:	4809      	ldr	r0, [pc, #36]	; (800dbd8 <do_memp_malloc_pool+0x60>)
 800dbb2:	f00a fb1d 	bl	80181f0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800dbb6:	68f8      	ldr	r0, [r7, #12]
 800dbb8:	f00a f8f0 	bl	8017d9c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	e003      	b.n	800dbc8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800dbc0:	68f8      	ldr	r0, [r7, #12]
 800dbc2:	f00a f8eb 	bl	8017d9c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800dbc6:	2300      	movs	r3, #0
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3710      	adds	r7, #16
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}
 800dbd0:	0801af1c 	.word	0x0801af1c
 800dbd4:	0801af4c 	.word	0x0801af4c
 800dbd8:	0801af70 	.word	0x0801af70

0800dbdc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800dbe6:	79fb      	ldrb	r3, [r7, #7]
 800dbe8:	2b0c      	cmp	r3, #12
 800dbea:	d908      	bls.n	800dbfe <memp_malloc+0x22>
 800dbec:	4b0a      	ldr	r3, [pc, #40]	; (800dc18 <memp_malloc+0x3c>)
 800dbee:	f240 1257 	movw	r2, #343	; 0x157
 800dbf2:	490a      	ldr	r1, [pc, #40]	; (800dc1c <memp_malloc+0x40>)
 800dbf4:	480a      	ldr	r0, [pc, #40]	; (800dc20 <memp_malloc+0x44>)
 800dbf6:	f00a fafb 	bl	80181f0 <iprintf>
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	e008      	b.n	800dc10 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800dbfe:	79fb      	ldrb	r3, [r7, #7]
 800dc00:	4a08      	ldr	r2, [pc, #32]	; (800dc24 <memp_malloc+0x48>)
 800dc02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc06:	4618      	mov	r0, r3
 800dc08:	f7ff ffb6 	bl	800db78 <do_memp_malloc_pool>
 800dc0c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
}
 800dc10:	4618      	mov	r0, r3
 800dc12:	3710      	adds	r7, #16
 800dc14:	46bd      	mov	sp, r7
 800dc16:	bd80      	pop	{r7, pc}
 800dc18:	0801af1c 	.word	0x0801af1c
 800dc1c:	0801afac 	.word	0x0801afac
 800dc20:	0801af70 	.word	0x0801af70
 800dc24:	080214ac 	.word	0x080214ac

0800dc28 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b084      	sub	sp, #16
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	f003 0303 	and.w	r3, r3, #3
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d006      	beq.n	800dc4a <do_memp_free_pool+0x22>
 800dc3c:	4b0d      	ldr	r3, [pc, #52]	; (800dc74 <do_memp_free_pool+0x4c>)
 800dc3e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800dc42:	490d      	ldr	r1, [pc, #52]	; (800dc78 <do_memp_free_pool+0x50>)
 800dc44:	480d      	ldr	r0, [pc, #52]	; (800dc7c <do_memp_free_pool+0x54>)
 800dc46:	f00a fad3 	bl	80181f0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800dc4e:	f00a f897 	bl	8017d80 <sys_arch_protect>
 800dc52:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	689b      	ldr	r3, [r3, #8]
 800dc58:	681a      	ldr	r2, [r3, #0]
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	689b      	ldr	r3, [r3, #8]
 800dc62:	68fa      	ldr	r2, [r7, #12]
 800dc64:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800dc66:	68b8      	ldr	r0, [r7, #8]
 800dc68:	f00a f898 	bl	8017d9c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800dc6c:	bf00      	nop
 800dc6e:	3710      	adds	r7, #16
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}
 800dc74:	0801af1c 	.word	0x0801af1c
 800dc78:	0801afcc 	.word	0x0801afcc
 800dc7c:	0801af70 	.word	0x0801af70

0800dc80 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b082      	sub	sp, #8
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	4603      	mov	r3, r0
 800dc88:	6039      	str	r1, [r7, #0]
 800dc8a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800dc8c:	79fb      	ldrb	r3, [r7, #7]
 800dc8e:	2b0c      	cmp	r3, #12
 800dc90:	d907      	bls.n	800dca2 <memp_free+0x22>
 800dc92:	4b0c      	ldr	r3, [pc, #48]	; (800dcc4 <memp_free+0x44>)
 800dc94:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800dc98:	490b      	ldr	r1, [pc, #44]	; (800dcc8 <memp_free+0x48>)
 800dc9a:	480c      	ldr	r0, [pc, #48]	; (800dccc <memp_free+0x4c>)
 800dc9c:	f00a faa8 	bl	80181f0 <iprintf>
 800dca0:	e00c      	b.n	800dcbc <memp_free+0x3c>

  if (mem == NULL) {
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d008      	beq.n	800dcba <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800dca8:	79fb      	ldrb	r3, [r7, #7]
 800dcaa:	4a09      	ldr	r2, [pc, #36]	; (800dcd0 <memp_free+0x50>)
 800dcac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcb0:	6839      	ldr	r1, [r7, #0]
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f7ff ffb8 	bl	800dc28 <do_memp_free_pool>
 800dcb8:	e000      	b.n	800dcbc <memp_free+0x3c>
    return;
 800dcba:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800dcbc:	3708      	adds	r7, #8
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}
 800dcc2:	bf00      	nop
 800dcc4:	0801af1c 	.word	0x0801af1c
 800dcc8:	0801afec 	.word	0x0801afec
 800dccc:	0801af70 	.word	0x0801af70
 800dcd0:	080214ac 	.word	0x080214ac

0800dcd4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800dcd8:	bf00      	nop
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce0:	4770      	bx	lr
	...

0800dce4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b086      	sub	sp, #24
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	60f8      	str	r0, [r7, #12]
 800dcec:	60b9      	str	r1, [r7, #8]
 800dcee:	607a      	str	r2, [r7, #4]
 800dcf0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d108      	bne.n	800dd0a <netif_add+0x26>
 800dcf8:	4b57      	ldr	r3, [pc, #348]	; (800de58 <netif_add+0x174>)
 800dcfa:	f240 1227 	movw	r2, #295	; 0x127
 800dcfe:	4957      	ldr	r1, [pc, #348]	; (800de5c <netif_add+0x178>)
 800dd00:	4857      	ldr	r0, [pc, #348]	; (800de60 <netif_add+0x17c>)
 800dd02:	f00a fa75 	bl	80181f0 <iprintf>
 800dd06:	2300      	movs	r3, #0
 800dd08:	e0a2      	b.n	800de50 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800dd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d108      	bne.n	800dd22 <netif_add+0x3e>
 800dd10:	4b51      	ldr	r3, [pc, #324]	; (800de58 <netif_add+0x174>)
 800dd12:	f44f 7294 	mov.w	r2, #296	; 0x128
 800dd16:	4953      	ldr	r1, [pc, #332]	; (800de64 <netif_add+0x180>)
 800dd18:	4851      	ldr	r0, [pc, #324]	; (800de60 <netif_add+0x17c>)
 800dd1a:	f00a fa69 	bl	80181f0 <iprintf>
 800dd1e:	2300      	movs	r3, #0
 800dd20:	e096      	b.n	800de50 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d101      	bne.n	800dd2c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800dd28:	4b4f      	ldr	r3, [pc, #316]	; (800de68 <netif_add+0x184>)
 800dd2a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d101      	bne.n	800dd36 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800dd32:	4b4d      	ldr	r3, [pc, #308]	; (800de68 <netif_add+0x184>)
 800dd34:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d101      	bne.n	800dd40 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800dd3c:	4b4a      	ldr	r3, [pc, #296]	; (800de68 <netif_add+0x184>)
 800dd3e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	2200      	movs	r2, #0
 800dd44:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	2200      	movs	r2, #0
 800dd4a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	4a45      	ldr	r2, [pc, #276]	; (800de6c <netif_add+0x188>)
 800dd56:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	2200      	movs	r2, #0
 800dd62:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	6a3a      	ldr	r2, [r7, #32]
 800dd70:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800dd72:	4b3f      	ldr	r3, [pc, #252]	; (800de70 <netif_add+0x18c>)
 800dd74:	781a      	ldrb	r2, [r3, #0]
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd80:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	687a      	ldr	r2, [r7, #4]
 800dd86:	68b9      	ldr	r1, [r7, #8]
 800dd88:	68f8      	ldr	r0, [r7, #12]
 800dd8a:	f000 f913 	bl	800dfb4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800dd8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd90:	68f8      	ldr	r0, [r7, #12]
 800dd92:	4798      	blx	r3
 800dd94:	4603      	mov	r3, r0
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d001      	beq.n	800dd9e <netif_add+0xba>
    return NULL;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	e058      	b.n	800de50 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dda4:	2bff      	cmp	r3, #255	; 0xff
 800dda6:	d103      	bne.n	800ddb0 <netif_add+0xcc>
        netif->num = 0;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ddb4:	4b2f      	ldr	r3, [pc, #188]	; (800de74 <netif_add+0x190>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	617b      	str	r3, [r7, #20]
 800ddba:	e02b      	b.n	800de14 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800ddbc:	697a      	ldr	r2, [r7, #20]
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	429a      	cmp	r2, r3
 800ddc2:	d106      	bne.n	800ddd2 <netif_add+0xee>
 800ddc4:	4b24      	ldr	r3, [pc, #144]	; (800de58 <netif_add+0x174>)
 800ddc6:	f240 128b 	movw	r2, #395	; 0x18b
 800ddca:	492b      	ldr	r1, [pc, #172]	; (800de78 <netif_add+0x194>)
 800ddcc:	4824      	ldr	r0, [pc, #144]	; (800de60 <netif_add+0x17c>)
 800ddce:	f00a fa0f 	bl	80181f0 <iprintf>
        num_netifs++;
 800ddd2:	693b      	ldr	r3, [r7, #16]
 800ddd4:	3301      	adds	r3, #1
 800ddd6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800ddd8:	693b      	ldr	r3, [r7, #16]
 800ddda:	2bff      	cmp	r3, #255	; 0xff
 800dddc:	dd06      	ble.n	800ddec <netif_add+0x108>
 800ddde:	4b1e      	ldr	r3, [pc, #120]	; (800de58 <netif_add+0x174>)
 800dde0:	f240 128d 	movw	r2, #397	; 0x18d
 800dde4:	4925      	ldr	r1, [pc, #148]	; (800de7c <netif_add+0x198>)
 800dde6:	481e      	ldr	r0, [pc, #120]	; (800de60 <netif_add+0x17c>)
 800dde8:	f00a fa02 	bl	80181f0 <iprintf>
        if (netif2->num == netif->num) {
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d108      	bne.n	800de0e <netif_add+0x12a>
          netif->num++;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de02:	3301      	adds	r3, #1
 800de04:	b2da      	uxtb	r2, r3
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800de0c:	e005      	b.n	800de1a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800de0e:	697b      	ldr	r3, [r7, #20]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	617b      	str	r3, [r7, #20]
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d1d0      	bne.n	800ddbc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d1be      	bne.n	800dd9e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de26:	2bfe      	cmp	r3, #254	; 0xfe
 800de28:	d103      	bne.n	800de32 <netif_add+0x14e>
    netif_num = 0;
 800de2a:	4b11      	ldr	r3, [pc, #68]	; (800de70 <netif_add+0x18c>)
 800de2c:	2200      	movs	r2, #0
 800de2e:	701a      	strb	r2, [r3, #0]
 800de30:	e006      	b.n	800de40 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de38:	3301      	adds	r3, #1
 800de3a:	b2da      	uxtb	r2, r3
 800de3c:	4b0c      	ldr	r3, [pc, #48]	; (800de70 <netif_add+0x18c>)
 800de3e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800de40:	4b0c      	ldr	r3, [pc, #48]	; (800de74 <netif_add+0x190>)
 800de42:	681a      	ldr	r2, [r3, #0]
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800de48:	4a0a      	ldr	r2, [pc, #40]	; (800de74 <netif_add+0x190>)
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800de4e:	68fb      	ldr	r3, [r7, #12]
}
 800de50:	4618      	mov	r0, r3
 800de52:	3718      	adds	r7, #24
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}
 800de58:	0801b008 	.word	0x0801b008
 800de5c:	0801b09c 	.word	0x0801b09c
 800de60:	0801b058 	.word	0x0801b058
 800de64:	0801b0b8 	.word	0x0801b0b8
 800de68:	08021520 	.word	0x08021520
 800de6c:	0800e28f 	.word	0x0800e28f
 800de70:	20005288 	.word	0x20005288
 800de74:	20018b94 	.word	0x20018b94
 800de78:	0801b0dc 	.word	0x0801b0dc
 800de7c:	0801b0f0 	.word	0x0801b0f0

0800de80 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b082      	sub	sp, #8
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
 800de88:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800de8a:	6839      	ldr	r1, [r7, #0]
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f002 fe23 	bl	8010ad8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800de92:	6839      	ldr	r1, [r7, #0]
 800de94:	6878      	ldr	r0, [r7, #4]
 800de96:	f007 fb8b 	bl	80155b0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800de9a:	bf00      	nop
 800de9c:	3708      	adds	r7, #8
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd80      	pop	{r7, pc}
	...

0800dea4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b086      	sub	sp, #24
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	60f8      	str	r0, [r7, #12]
 800deac:	60b9      	str	r1, [r7, #8]
 800deae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d106      	bne.n	800dec4 <netif_do_set_ipaddr+0x20>
 800deb6:	4b1d      	ldr	r3, [pc, #116]	; (800df2c <netif_do_set_ipaddr+0x88>)
 800deb8:	f240 12cb 	movw	r2, #459	; 0x1cb
 800debc:	491c      	ldr	r1, [pc, #112]	; (800df30 <netif_do_set_ipaddr+0x8c>)
 800debe:	481d      	ldr	r0, [pc, #116]	; (800df34 <netif_do_set_ipaddr+0x90>)
 800dec0:	f00a f996 	bl	80181f0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d106      	bne.n	800ded8 <netif_do_set_ipaddr+0x34>
 800deca:	4b18      	ldr	r3, [pc, #96]	; (800df2c <netif_do_set_ipaddr+0x88>)
 800decc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ded0:	4917      	ldr	r1, [pc, #92]	; (800df30 <netif_do_set_ipaddr+0x8c>)
 800ded2:	4818      	ldr	r0, [pc, #96]	; (800df34 <netif_do_set_ipaddr+0x90>)
 800ded4:	f00a f98c 	bl	80181f0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	681a      	ldr	r2, [r3, #0]
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	3304      	adds	r3, #4
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	429a      	cmp	r2, r3
 800dee4:	d01c      	beq.n	800df20 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800dee6:	68bb      	ldr	r3, [r7, #8]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	3304      	adds	r3, #4
 800def0:	681a      	ldr	r2, [r3, #0]
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800def6:	f107 0314 	add.w	r3, r7, #20
 800defa:	4619      	mov	r1, r3
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f7ff ffbf 	bl	800de80 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d002      	beq.n	800df0e <netif_do_set_ipaddr+0x6a>
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	e000      	b.n	800df10 <netif_do_set_ipaddr+0x6c>
 800df0e:	2300      	movs	r3, #0
 800df10:	68fa      	ldr	r2, [r7, #12]
 800df12:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800df14:	2101      	movs	r1, #1
 800df16:	68f8      	ldr	r0, [r7, #12]
 800df18:	f000 f8d2 	bl	800e0c0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800df1c:	2301      	movs	r3, #1
 800df1e:	e000      	b.n	800df22 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800df20:	2300      	movs	r3, #0
}
 800df22:	4618      	mov	r0, r3
 800df24:	3718      	adds	r7, #24
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}
 800df2a:	bf00      	nop
 800df2c:	0801b008 	.word	0x0801b008
 800df30:	0801b120 	.word	0x0801b120
 800df34:	0801b058 	.word	0x0801b058

0800df38 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800df38:	b480      	push	{r7}
 800df3a:	b085      	sub	sp, #20
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	60f8      	str	r0, [r7, #12]
 800df40:	60b9      	str	r1, [r7, #8]
 800df42:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800df44:	68bb      	ldr	r3, [r7, #8]
 800df46:	681a      	ldr	r2, [r3, #0]
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	3308      	adds	r3, #8
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	429a      	cmp	r2, r3
 800df50:	d00a      	beq.n	800df68 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d002      	beq.n	800df5e <netif_do_set_netmask+0x26>
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	e000      	b.n	800df60 <netif_do_set_netmask+0x28>
 800df5e:	2300      	movs	r3, #0
 800df60:	68fa      	ldr	r2, [r7, #12]
 800df62:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800df64:	2301      	movs	r3, #1
 800df66:	e000      	b.n	800df6a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800df68:	2300      	movs	r3, #0
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	3714      	adds	r7, #20
 800df6e:	46bd      	mov	sp, r7
 800df70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df74:	4770      	bx	lr

0800df76 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800df76:	b480      	push	{r7}
 800df78:	b085      	sub	sp, #20
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	60f8      	str	r0, [r7, #12]
 800df7e:	60b9      	str	r1, [r7, #8]
 800df80:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	681a      	ldr	r2, [r3, #0]
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	330c      	adds	r3, #12
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d00a      	beq.n	800dfa6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d002      	beq.n	800df9c <netif_do_set_gw+0x26>
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	e000      	b.n	800df9e <netif_do_set_gw+0x28>
 800df9c:	2300      	movs	r3, #0
 800df9e:	68fa      	ldr	r2, [r7, #12]
 800dfa0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	e000      	b.n	800dfa8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800dfa6:	2300      	movs	r3, #0
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	3714      	adds	r7, #20
 800dfac:	46bd      	mov	sp, r7
 800dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb2:	4770      	bx	lr

0800dfb4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b088      	sub	sp, #32
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	60f8      	str	r0, [r7, #12]
 800dfbc:	60b9      	str	r1, [r7, #8]
 800dfbe:	607a      	str	r2, [r7, #4]
 800dfc0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d101      	bne.n	800dfd4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800dfd0:	4b1c      	ldr	r3, [pc, #112]	; (800e044 <netif_set_addr+0x90>)
 800dfd2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d101      	bne.n	800dfde <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800dfda:	4b1a      	ldr	r3, [pc, #104]	; (800e044 <netif_set_addr+0x90>)
 800dfdc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d101      	bne.n	800dfe8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800dfe4:	4b17      	ldr	r3, [pc, #92]	; (800e044 <netif_set_addr+0x90>)
 800dfe6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d003      	beq.n	800dff6 <netif_set_addr+0x42>
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d101      	bne.n	800dffa <netif_set_addr+0x46>
 800dff6:	2301      	movs	r3, #1
 800dff8:	e000      	b.n	800dffc <netif_set_addr+0x48>
 800dffa:	2300      	movs	r3, #0
 800dffc:	617b      	str	r3, [r7, #20]
  if (remove) {
 800dffe:	697b      	ldr	r3, [r7, #20]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d006      	beq.n	800e012 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e004:	f107 0310 	add.w	r3, r7, #16
 800e008:	461a      	mov	r2, r3
 800e00a:	68b9      	ldr	r1, [r7, #8]
 800e00c:	68f8      	ldr	r0, [r7, #12]
 800e00e:	f7ff ff49 	bl	800dea4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800e012:	69fa      	ldr	r2, [r7, #28]
 800e014:	6879      	ldr	r1, [r7, #4]
 800e016:	68f8      	ldr	r0, [r7, #12]
 800e018:	f7ff ff8e 	bl	800df38 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800e01c:	69ba      	ldr	r2, [r7, #24]
 800e01e:	6839      	ldr	r1, [r7, #0]
 800e020:	68f8      	ldr	r0, [r7, #12]
 800e022:	f7ff ffa8 	bl	800df76 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d106      	bne.n	800e03a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e02c:	f107 0310 	add.w	r3, r7, #16
 800e030:	461a      	mov	r2, r3
 800e032:	68b9      	ldr	r1, [r7, #8]
 800e034:	68f8      	ldr	r0, [r7, #12]
 800e036:	f7ff ff35 	bl	800dea4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e03a:	bf00      	nop
 800e03c:	3720      	adds	r7, #32
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}
 800e042:	bf00      	nop
 800e044:	08021520 	.word	0x08021520

0800e048 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e048:	b480      	push	{r7}
 800e04a:	b083      	sub	sp, #12
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e050:	4a04      	ldr	r2, [pc, #16]	; (800e064 <netif_set_default+0x1c>)
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e056:	bf00      	nop
 800e058:	370c      	adds	r7, #12
 800e05a:	46bd      	mov	sp, r7
 800e05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e060:	4770      	bx	lr
 800e062:	bf00      	nop
 800e064:	20018b98 	.word	0x20018b98

0800e068 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b082      	sub	sp, #8
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d107      	bne.n	800e086 <netif_set_up+0x1e>
 800e076:	4b0f      	ldr	r3, [pc, #60]	; (800e0b4 <netif_set_up+0x4c>)
 800e078:	f44f 7254 	mov.w	r2, #848	; 0x350
 800e07c:	490e      	ldr	r1, [pc, #56]	; (800e0b8 <netif_set_up+0x50>)
 800e07e:	480f      	ldr	r0, [pc, #60]	; (800e0bc <netif_set_up+0x54>)
 800e080:	f00a f8b6 	bl	80181f0 <iprintf>
 800e084:	e013      	b.n	800e0ae <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e08c:	f003 0301 	and.w	r3, r3, #1
 800e090:	2b00      	cmp	r3, #0
 800e092:	d10c      	bne.n	800e0ae <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e09a:	f043 0301 	orr.w	r3, r3, #1
 800e09e:	b2da      	uxtb	r2, r3
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e0a6:	2103      	movs	r1, #3
 800e0a8:	6878      	ldr	r0, [r7, #4]
 800e0aa:	f000 f809 	bl	800e0c0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e0ae:	3708      	adds	r7, #8
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}
 800e0b4:	0801b008 	.word	0x0801b008
 800e0b8:	0801b190 	.word	0x0801b190
 800e0bc:	0801b058 	.word	0x0801b058

0800e0c0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b082      	sub	sp, #8
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
 800e0c8:	460b      	mov	r3, r1
 800e0ca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d106      	bne.n	800e0e0 <netif_issue_reports+0x20>
 800e0d2:	4b18      	ldr	r3, [pc, #96]	; (800e134 <netif_issue_reports+0x74>)
 800e0d4:	f240 326d 	movw	r2, #877	; 0x36d
 800e0d8:	4917      	ldr	r1, [pc, #92]	; (800e138 <netif_issue_reports+0x78>)
 800e0da:	4818      	ldr	r0, [pc, #96]	; (800e13c <netif_issue_reports+0x7c>)
 800e0dc:	f00a f888 	bl	80181f0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e0e6:	f003 0304 	and.w	r3, r3, #4
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d01e      	beq.n	800e12c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e0f4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d017      	beq.n	800e12c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e0fc:	78fb      	ldrb	r3, [r7, #3]
 800e0fe:	f003 0301 	and.w	r3, r3, #1
 800e102:	2b00      	cmp	r3, #0
 800e104:	d013      	beq.n	800e12e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	3304      	adds	r3, #4
 800e10a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d00e      	beq.n	800e12e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e116:	f003 0308 	and.w	r3, r3, #8
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d007      	beq.n	800e12e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	3304      	adds	r3, #4
 800e122:	4619      	mov	r1, r3
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	f008 f9ad 	bl	8016484 <etharp_request>
 800e12a:	e000      	b.n	800e12e <netif_issue_reports+0x6e>
    return;
 800e12c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e12e:	3708      	adds	r7, #8
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}
 800e134:	0801b008 	.word	0x0801b008
 800e138:	0801b1ac 	.word	0x0801b1ac
 800e13c:	0801b058 	.word	0x0801b058

0800e140 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b082      	sub	sp, #8
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d107      	bne.n	800e15e <netif_set_down+0x1e>
 800e14e:	4b12      	ldr	r3, [pc, #72]	; (800e198 <netif_set_down+0x58>)
 800e150:	f240 329b 	movw	r2, #923	; 0x39b
 800e154:	4911      	ldr	r1, [pc, #68]	; (800e19c <netif_set_down+0x5c>)
 800e156:	4812      	ldr	r0, [pc, #72]	; (800e1a0 <netif_set_down+0x60>)
 800e158:	f00a f84a 	bl	80181f0 <iprintf>
 800e15c:	e019      	b.n	800e192 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e164:	f003 0301 	and.w	r3, r3, #1
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d012      	beq.n	800e192 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e172:	f023 0301 	bic.w	r3, r3, #1
 800e176:	b2da      	uxtb	r2, r3
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e184:	f003 0308 	and.w	r3, r3, #8
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d002      	beq.n	800e192 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f007 fd37 	bl	8015c00 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e192:	3708      	adds	r7, #8
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}
 800e198:	0801b008 	.word	0x0801b008
 800e19c:	0801b1d0 	.word	0x0801b1d0
 800e1a0:	0801b058 	.word	0x0801b058

0800e1a4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b082      	sub	sp, #8
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d107      	bne.n	800e1c2 <netif_set_link_up+0x1e>
 800e1b2:	4b13      	ldr	r3, [pc, #76]	; (800e200 <netif_set_link_up+0x5c>)
 800e1b4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800e1b8:	4912      	ldr	r1, [pc, #72]	; (800e204 <netif_set_link_up+0x60>)
 800e1ba:	4813      	ldr	r0, [pc, #76]	; (800e208 <netif_set_link_up+0x64>)
 800e1bc:	f00a f818 	bl	80181f0 <iprintf>
 800e1c0:	e01b      	b.n	800e1fa <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e1c8:	f003 0304 	and.w	r3, r3, #4
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d114      	bne.n	800e1fa <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e1d6:	f043 0304 	orr.w	r3, r3, #4
 800e1da:	b2da      	uxtb	r2, r3
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e1e2:	2103      	movs	r1, #3
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f7ff ff6b 	bl	800e0c0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	69db      	ldr	r3, [r3, #28]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d003      	beq.n	800e1fa <netif_set_link_up+0x56>
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	69db      	ldr	r3, [r3, #28]
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e1fa:	3708      	adds	r7, #8
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}
 800e200:	0801b008 	.word	0x0801b008
 800e204:	0801b1f0 	.word	0x0801b1f0
 800e208:	0801b058 	.word	0x0801b058

0800e20c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b082      	sub	sp, #8
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d107      	bne.n	800e22a <netif_set_link_down+0x1e>
 800e21a:	4b11      	ldr	r3, [pc, #68]	; (800e260 <netif_set_link_down+0x54>)
 800e21c:	f240 4206 	movw	r2, #1030	; 0x406
 800e220:	4910      	ldr	r1, [pc, #64]	; (800e264 <netif_set_link_down+0x58>)
 800e222:	4811      	ldr	r0, [pc, #68]	; (800e268 <netif_set_link_down+0x5c>)
 800e224:	f009 ffe4 	bl	80181f0 <iprintf>
 800e228:	e017      	b.n	800e25a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e230:	f003 0304 	and.w	r3, r3, #4
 800e234:	2b00      	cmp	r3, #0
 800e236:	d010      	beq.n	800e25a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e23e:	f023 0304 	bic.w	r3, r3, #4
 800e242:	b2da      	uxtb	r2, r3
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	69db      	ldr	r3, [r3, #28]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d003      	beq.n	800e25a <netif_set_link_down+0x4e>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	69db      	ldr	r3, [r3, #28]
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e25a:	3708      	adds	r7, #8
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}
 800e260:	0801b008 	.word	0x0801b008
 800e264:	0801b214 	.word	0x0801b214
 800e268:	0801b058 	.word	0x0801b058

0800e26c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800e26c:	b480      	push	{r7}
 800e26e:	b083      	sub	sp, #12
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
 800e274:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d002      	beq.n	800e282 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	683a      	ldr	r2, [r7, #0]
 800e280:	61da      	str	r2, [r3, #28]
  }
}
 800e282:	bf00      	nop
 800e284:	370c      	adds	r7, #12
 800e286:	46bd      	mov	sp, r7
 800e288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28c:	4770      	bx	lr

0800e28e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e28e:	b480      	push	{r7}
 800e290:	b085      	sub	sp, #20
 800e292:	af00      	add	r7, sp, #0
 800e294:	60f8      	str	r0, [r7, #12]
 800e296:	60b9      	str	r1, [r7, #8]
 800e298:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e29a:	f06f 030b 	mvn.w	r3, #11
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	3714      	adds	r7, #20
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a8:	4770      	bx	lr
	...

0800e2ac <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b085      	sub	sp, #20
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e2b6:	79fb      	ldrb	r3, [r7, #7]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d013      	beq.n	800e2e4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e2bc:	4b0d      	ldr	r3, [pc, #52]	; (800e2f4 <netif_get_by_index+0x48>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	60fb      	str	r3, [r7, #12]
 800e2c2:	e00c      	b.n	800e2de <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e2ca:	3301      	adds	r3, #1
 800e2cc:	b2db      	uxtb	r3, r3
 800e2ce:	79fa      	ldrb	r2, [r7, #7]
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	d101      	bne.n	800e2d8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	e006      	b.n	800e2e6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	60fb      	str	r3, [r7, #12]
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d1ef      	bne.n	800e2c4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e2e4:	2300      	movs	r3, #0
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	3714      	adds	r7, #20
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f0:	4770      	bx	lr
 800e2f2:	bf00      	nop
 800e2f4:	20018b94 	.word	0x20018b94

0800e2f8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b082      	sub	sp, #8
 800e2fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e2fe:	f009 fd3f 	bl	8017d80 <sys_arch_protect>
 800e302:	6038      	str	r0, [r7, #0]
 800e304:	4b0d      	ldr	r3, [pc, #52]	; (800e33c <pbuf_free_ooseq+0x44>)
 800e306:	2200      	movs	r2, #0
 800e308:	701a      	strb	r2, [r3, #0]
 800e30a:	6838      	ldr	r0, [r7, #0]
 800e30c:	f009 fd46 	bl	8017d9c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e310:	4b0b      	ldr	r3, [pc, #44]	; (800e340 <pbuf_free_ooseq+0x48>)
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	607b      	str	r3, [r7, #4]
 800e316:	e00a      	b.n	800e32e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d003      	beq.n	800e328 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	f002 fc17 	bl	8010b54 <tcp_free_ooseq>
      return;
 800e326:	e005      	b.n	800e334 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	68db      	ldr	r3, [r3, #12]
 800e32c:	607b      	str	r3, [r7, #4]
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d1f1      	bne.n	800e318 <pbuf_free_ooseq+0x20>
    }
  }
}
 800e334:	3708      	adds	r7, #8
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}
 800e33a:	bf00      	nop
 800e33c:	20018b9c 	.word	0x20018b9c
 800e340:	20018ba4 	.word	0x20018ba4

0800e344 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b082      	sub	sp, #8
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800e34c:	f7ff ffd4 	bl	800e2f8 <pbuf_free_ooseq>
}
 800e350:	bf00      	nop
 800e352:	3708      	adds	r7, #8
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}

0800e358 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b082      	sub	sp, #8
 800e35c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800e35e:	f009 fd0f 	bl	8017d80 <sys_arch_protect>
 800e362:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800e364:	4b0f      	ldr	r3, [pc, #60]	; (800e3a4 <pbuf_pool_is_empty+0x4c>)
 800e366:	781b      	ldrb	r3, [r3, #0]
 800e368:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800e36a:	4b0e      	ldr	r3, [pc, #56]	; (800e3a4 <pbuf_pool_is_empty+0x4c>)
 800e36c:	2201      	movs	r2, #1
 800e36e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f009 fd13 	bl	8017d9c <sys_arch_unprotect>

  if (!queued) {
 800e376:	78fb      	ldrb	r3, [r7, #3]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d10f      	bne.n	800e39c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800e37c:	2100      	movs	r1, #0
 800e37e:	480a      	ldr	r0, [pc, #40]	; (800e3a8 <pbuf_pool_is_empty+0x50>)
 800e380:	f7fc fe44 	bl	800b00c <tcpip_try_callback>
 800e384:	4603      	mov	r3, r0
 800e386:	2b00      	cmp	r3, #0
 800e388:	d008      	beq.n	800e39c <pbuf_pool_is_empty+0x44>
 800e38a:	f009 fcf9 	bl	8017d80 <sys_arch_protect>
 800e38e:	6078      	str	r0, [r7, #4]
 800e390:	4b04      	ldr	r3, [pc, #16]	; (800e3a4 <pbuf_pool_is_empty+0x4c>)
 800e392:	2200      	movs	r2, #0
 800e394:	701a      	strb	r2, [r3, #0]
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f009 fd00 	bl	8017d9c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e39c:	bf00      	nop
 800e39e:	3708      	adds	r7, #8
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}
 800e3a4:	20018b9c 	.word	0x20018b9c
 800e3a8:	0800e345 	.word	0x0800e345

0800e3ac <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b085      	sub	sp, #20
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	60f8      	str	r0, [r7, #12]
 800e3b4:	60b9      	str	r1, [r7, #8]
 800e3b6:	4611      	mov	r1, r2
 800e3b8:	461a      	mov	r2, r3
 800e3ba:	460b      	mov	r3, r1
 800e3bc:	80fb      	strh	r3, [r7, #6]
 800e3be:	4613      	mov	r3, r2
 800e3c0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	68ba      	ldr	r2, [r7, #8]
 800e3cc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	88fa      	ldrh	r2, [r7, #6]
 800e3d2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	88ba      	ldrh	r2, [r7, #4]
 800e3d8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e3da:	8b3b      	ldrh	r3, [r7, #24]
 800e3dc:	b2da      	uxtb	r2, r3
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	7f3a      	ldrb	r2, [r7, #28]
 800e3e6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	73da      	strb	r2, [r3, #15]
}
 800e3f4:	bf00      	nop
 800e3f6:	3714      	adds	r7, #20
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fe:	4770      	bx	lr

0800e400 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b08c      	sub	sp, #48	; 0x30
 800e404:	af02      	add	r7, sp, #8
 800e406:	4603      	mov	r3, r0
 800e408:	71fb      	strb	r3, [r7, #7]
 800e40a:	460b      	mov	r3, r1
 800e40c:	80bb      	strh	r3, [r7, #4]
 800e40e:	4613      	mov	r3, r2
 800e410:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e412:	79fb      	ldrb	r3, [r7, #7]
 800e414:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e416:	887b      	ldrh	r3, [r7, #2]
 800e418:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e41c:	d07f      	beq.n	800e51e <pbuf_alloc+0x11e>
 800e41e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e422:	f300 80c8 	bgt.w	800e5b6 <pbuf_alloc+0x1b6>
 800e426:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e42a:	d010      	beq.n	800e44e <pbuf_alloc+0x4e>
 800e42c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e430:	f300 80c1 	bgt.w	800e5b6 <pbuf_alloc+0x1b6>
 800e434:	2b01      	cmp	r3, #1
 800e436:	d002      	beq.n	800e43e <pbuf_alloc+0x3e>
 800e438:	2b41      	cmp	r3, #65	; 0x41
 800e43a:	f040 80bc 	bne.w	800e5b6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e43e:	887a      	ldrh	r2, [r7, #2]
 800e440:	88bb      	ldrh	r3, [r7, #4]
 800e442:	4619      	mov	r1, r3
 800e444:	2000      	movs	r0, #0
 800e446:	f000 f8d1 	bl	800e5ec <pbuf_alloc_reference>
 800e44a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e44c:	e0bd      	b.n	800e5ca <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e44e:	2300      	movs	r3, #0
 800e450:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e452:	2300      	movs	r3, #0
 800e454:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e456:	88bb      	ldrh	r3, [r7, #4]
 800e458:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e45a:	200c      	movs	r0, #12
 800e45c:	f7ff fbbe 	bl	800dbdc <memp_malloc>
 800e460:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d109      	bne.n	800e47c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800e468:	f7ff ff76 	bl	800e358 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d002      	beq.n	800e478 <pbuf_alloc+0x78>
            pbuf_free(p);
 800e472:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e474:	f000 faa8 	bl	800e9c8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e478:	2300      	movs	r3, #0
 800e47a:	e0a7      	b.n	800e5cc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e47c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e47e:	3303      	adds	r3, #3
 800e480:	b29b      	uxth	r3, r3
 800e482:	f023 0303 	bic.w	r3, r3, #3
 800e486:	b29b      	uxth	r3, r3
 800e488:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e48c:	b29b      	uxth	r3, r3
 800e48e:	8b7a      	ldrh	r2, [r7, #26]
 800e490:	4293      	cmp	r3, r2
 800e492:	bf28      	it	cs
 800e494:	4613      	movcs	r3, r2
 800e496:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e498:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e49a:	3310      	adds	r3, #16
 800e49c:	693a      	ldr	r2, [r7, #16]
 800e49e:	4413      	add	r3, r2
 800e4a0:	3303      	adds	r3, #3
 800e4a2:	f023 0303 	bic.w	r3, r3, #3
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	89f9      	ldrh	r1, [r7, #14]
 800e4aa:	8b7a      	ldrh	r2, [r7, #26]
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	9301      	str	r3, [sp, #4]
 800e4b0:	887b      	ldrh	r3, [r7, #2]
 800e4b2:	9300      	str	r3, [sp, #0]
 800e4b4:	460b      	mov	r3, r1
 800e4b6:	4601      	mov	r1, r0
 800e4b8:	6938      	ldr	r0, [r7, #16]
 800e4ba:	f7ff ff77 	bl	800e3ac <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e4be:	693b      	ldr	r3, [r7, #16]
 800e4c0:	685b      	ldr	r3, [r3, #4]
 800e4c2:	f003 0303 	and.w	r3, r3, #3
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d006      	beq.n	800e4d8 <pbuf_alloc+0xd8>
 800e4ca:	4b42      	ldr	r3, [pc, #264]	; (800e5d4 <pbuf_alloc+0x1d4>)
 800e4cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e4d0:	4941      	ldr	r1, [pc, #260]	; (800e5d8 <pbuf_alloc+0x1d8>)
 800e4d2:	4842      	ldr	r0, [pc, #264]	; (800e5dc <pbuf_alloc+0x1dc>)
 800e4d4:	f009 fe8c 	bl	80181f0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e4d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e4da:	3303      	adds	r3, #3
 800e4dc:	f023 0303 	bic.w	r3, r3, #3
 800e4e0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e4e4:	d106      	bne.n	800e4f4 <pbuf_alloc+0xf4>
 800e4e6:	4b3b      	ldr	r3, [pc, #236]	; (800e5d4 <pbuf_alloc+0x1d4>)
 800e4e8:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e4ec:	493c      	ldr	r1, [pc, #240]	; (800e5e0 <pbuf_alloc+0x1e0>)
 800e4ee:	483b      	ldr	r0, [pc, #236]	; (800e5dc <pbuf_alloc+0x1dc>)
 800e4f0:	f009 fe7e 	bl	80181f0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d102      	bne.n	800e500 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	627b      	str	r3, [r7, #36]	; 0x24
 800e4fe:	e002      	b.n	800e506 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e500:	69fb      	ldr	r3, [r7, #28]
 800e502:	693a      	ldr	r2, [r7, #16]
 800e504:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e506:	693b      	ldr	r3, [r7, #16]
 800e508:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e50a:	8b7a      	ldrh	r2, [r7, #26]
 800e50c:	89fb      	ldrh	r3, [r7, #14]
 800e50e:	1ad3      	subs	r3, r2, r3
 800e510:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e512:	2300      	movs	r3, #0
 800e514:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e516:	8b7b      	ldrh	r3, [r7, #26]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d19e      	bne.n	800e45a <pbuf_alloc+0x5a>
      break;
 800e51c:	e055      	b.n	800e5ca <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e51e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e520:	3303      	adds	r3, #3
 800e522:	b29b      	uxth	r3, r3
 800e524:	f023 0303 	bic.w	r3, r3, #3
 800e528:	b29a      	uxth	r2, r3
 800e52a:	88bb      	ldrh	r3, [r7, #4]
 800e52c:	3303      	adds	r3, #3
 800e52e:	b29b      	uxth	r3, r3
 800e530:	f023 0303 	bic.w	r3, r3, #3
 800e534:	b29b      	uxth	r3, r3
 800e536:	4413      	add	r3, r2
 800e538:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e53a:	8b3b      	ldrh	r3, [r7, #24]
 800e53c:	3310      	adds	r3, #16
 800e53e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e540:	8b3a      	ldrh	r2, [r7, #24]
 800e542:	88bb      	ldrh	r3, [r7, #4]
 800e544:	3303      	adds	r3, #3
 800e546:	f023 0303 	bic.w	r3, r3, #3
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d306      	bcc.n	800e55c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e54e:	8afa      	ldrh	r2, [r7, #22]
 800e550:	88bb      	ldrh	r3, [r7, #4]
 800e552:	3303      	adds	r3, #3
 800e554:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e558:	429a      	cmp	r2, r3
 800e55a:	d201      	bcs.n	800e560 <pbuf_alloc+0x160>
        return NULL;
 800e55c:	2300      	movs	r3, #0
 800e55e:	e035      	b.n	800e5cc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e560:	8afb      	ldrh	r3, [r7, #22]
 800e562:	4618      	mov	r0, r3
 800e564:	f7ff f9b8 	bl	800d8d8 <mem_malloc>
 800e568:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d101      	bne.n	800e574 <pbuf_alloc+0x174>
        return NULL;
 800e570:	2300      	movs	r3, #0
 800e572:	e02b      	b.n	800e5cc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e574:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e576:	3310      	adds	r3, #16
 800e578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e57a:	4413      	add	r3, r2
 800e57c:	3303      	adds	r3, #3
 800e57e:	f023 0303 	bic.w	r3, r3, #3
 800e582:	4618      	mov	r0, r3
 800e584:	88b9      	ldrh	r1, [r7, #4]
 800e586:	88ba      	ldrh	r2, [r7, #4]
 800e588:	2300      	movs	r3, #0
 800e58a:	9301      	str	r3, [sp, #4]
 800e58c:	887b      	ldrh	r3, [r7, #2]
 800e58e:	9300      	str	r3, [sp, #0]
 800e590:	460b      	mov	r3, r1
 800e592:	4601      	mov	r1, r0
 800e594:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e596:	f7ff ff09 	bl	800e3ac <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e59c:	685b      	ldr	r3, [r3, #4]
 800e59e:	f003 0303 	and.w	r3, r3, #3
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d010      	beq.n	800e5c8 <pbuf_alloc+0x1c8>
 800e5a6:	4b0b      	ldr	r3, [pc, #44]	; (800e5d4 <pbuf_alloc+0x1d4>)
 800e5a8:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e5ac:	490d      	ldr	r1, [pc, #52]	; (800e5e4 <pbuf_alloc+0x1e4>)
 800e5ae:	480b      	ldr	r0, [pc, #44]	; (800e5dc <pbuf_alloc+0x1dc>)
 800e5b0:	f009 fe1e 	bl	80181f0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e5b4:	e008      	b.n	800e5c8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e5b6:	4b07      	ldr	r3, [pc, #28]	; (800e5d4 <pbuf_alloc+0x1d4>)
 800e5b8:	f240 1227 	movw	r2, #295	; 0x127
 800e5bc:	490a      	ldr	r1, [pc, #40]	; (800e5e8 <pbuf_alloc+0x1e8>)
 800e5be:	4807      	ldr	r0, [pc, #28]	; (800e5dc <pbuf_alloc+0x1dc>)
 800e5c0:	f009 fe16 	bl	80181f0 <iprintf>
      return NULL;
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	e001      	b.n	800e5cc <pbuf_alloc+0x1cc>
      break;
 800e5c8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	3728      	adds	r7, #40	; 0x28
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd80      	pop	{r7, pc}
 800e5d4:	0801b238 	.word	0x0801b238
 800e5d8:	0801b268 	.word	0x0801b268
 800e5dc:	0801b298 	.word	0x0801b298
 800e5e0:	0801b2c0 	.word	0x0801b2c0
 800e5e4:	0801b2f4 	.word	0x0801b2f4
 800e5e8:	0801b320 	.word	0x0801b320

0800e5ec <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b086      	sub	sp, #24
 800e5f0:	af02      	add	r7, sp, #8
 800e5f2:	6078      	str	r0, [r7, #4]
 800e5f4:	460b      	mov	r3, r1
 800e5f6:	807b      	strh	r3, [r7, #2]
 800e5f8:	4613      	mov	r3, r2
 800e5fa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e5fc:	883b      	ldrh	r3, [r7, #0]
 800e5fe:	2b41      	cmp	r3, #65	; 0x41
 800e600:	d009      	beq.n	800e616 <pbuf_alloc_reference+0x2a>
 800e602:	883b      	ldrh	r3, [r7, #0]
 800e604:	2b01      	cmp	r3, #1
 800e606:	d006      	beq.n	800e616 <pbuf_alloc_reference+0x2a>
 800e608:	4b0f      	ldr	r3, [pc, #60]	; (800e648 <pbuf_alloc_reference+0x5c>)
 800e60a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e60e:	490f      	ldr	r1, [pc, #60]	; (800e64c <pbuf_alloc_reference+0x60>)
 800e610:	480f      	ldr	r0, [pc, #60]	; (800e650 <pbuf_alloc_reference+0x64>)
 800e612:	f009 fded 	bl	80181f0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e616:	200b      	movs	r0, #11
 800e618:	f7ff fae0 	bl	800dbdc <memp_malloc>
 800e61c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d101      	bne.n	800e628 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e624:	2300      	movs	r3, #0
 800e626:	e00b      	b.n	800e640 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e628:	8879      	ldrh	r1, [r7, #2]
 800e62a:	887a      	ldrh	r2, [r7, #2]
 800e62c:	2300      	movs	r3, #0
 800e62e:	9301      	str	r3, [sp, #4]
 800e630:	883b      	ldrh	r3, [r7, #0]
 800e632:	9300      	str	r3, [sp, #0]
 800e634:	460b      	mov	r3, r1
 800e636:	6879      	ldr	r1, [r7, #4]
 800e638:	68f8      	ldr	r0, [r7, #12]
 800e63a:	f7ff feb7 	bl	800e3ac <pbuf_init_alloced_pbuf>
  return p;
 800e63e:	68fb      	ldr	r3, [r7, #12]
}
 800e640:	4618      	mov	r0, r3
 800e642:	3710      	adds	r7, #16
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}
 800e648:	0801b238 	.word	0x0801b238
 800e64c:	0801b33c 	.word	0x0801b33c
 800e650:	0801b298 	.word	0x0801b298

0800e654 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b088      	sub	sp, #32
 800e658:	af02      	add	r7, sp, #8
 800e65a:	607b      	str	r3, [r7, #4]
 800e65c:	4603      	mov	r3, r0
 800e65e:	73fb      	strb	r3, [r7, #15]
 800e660:	460b      	mov	r3, r1
 800e662:	81bb      	strh	r3, [r7, #12]
 800e664:	4613      	mov	r3, r2
 800e666:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e668:	7bfb      	ldrb	r3, [r7, #15]
 800e66a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e66c:	8a7b      	ldrh	r3, [r7, #18]
 800e66e:	3303      	adds	r3, #3
 800e670:	f023 0203 	bic.w	r2, r3, #3
 800e674:	89bb      	ldrh	r3, [r7, #12]
 800e676:	441a      	add	r2, r3
 800e678:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e67a:	429a      	cmp	r2, r3
 800e67c:	d901      	bls.n	800e682 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e67e:	2300      	movs	r3, #0
 800e680:	e018      	b.n	800e6b4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e682:	6a3b      	ldr	r3, [r7, #32]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d007      	beq.n	800e698 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e688:	8a7b      	ldrh	r3, [r7, #18]
 800e68a:	3303      	adds	r3, #3
 800e68c:	f023 0303 	bic.w	r3, r3, #3
 800e690:	6a3a      	ldr	r2, [r7, #32]
 800e692:	4413      	add	r3, r2
 800e694:	617b      	str	r3, [r7, #20]
 800e696:	e001      	b.n	800e69c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e698:	2300      	movs	r3, #0
 800e69a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	89b9      	ldrh	r1, [r7, #12]
 800e6a0:	89ba      	ldrh	r2, [r7, #12]
 800e6a2:	2302      	movs	r3, #2
 800e6a4:	9301      	str	r3, [sp, #4]
 800e6a6:	897b      	ldrh	r3, [r7, #10]
 800e6a8:	9300      	str	r3, [sp, #0]
 800e6aa:	460b      	mov	r3, r1
 800e6ac:	6979      	ldr	r1, [r7, #20]
 800e6ae:	f7ff fe7d 	bl	800e3ac <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e6b2:	687b      	ldr	r3, [r7, #4]
}
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	3718      	adds	r7, #24
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}

0800e6bc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b084      	sub	sp, #16
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
 800e6c4:	460b      	mov	r3, r1
 800e6c6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d106      	bne.n	800e6dc <pbuf_realloc+0x20>
 800e6ce:	4b3a      	ldr	r3, [pc, #232]	; (800e7b8 <pbuf_realloc+0xfc>)
 800e6d0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e6d4:	4939      	ldr	r1, [pc, #228]	; (800e7bc <pbuf_realloc+0x100>)
 800e6d6:	483a      	ldr	r0, [pc, #232]	; (800e7c0 <pbuf_realloc+0x104>)
 800e6d8:	f009 fd8a 	bl	80181f0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	891b      	ldrh	r3, [r3, #8]
 800e6e0:	887a      	ldrh	r2, [r7, #2]
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	d263      	bcs.n	800e7ae <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	891a      	ldrh	r2, [r3, #8]
 800e6ea:	887b      	ldrh	r3, [r7, #2]
 800e6ec:	1ad3      	subs	r3, r2, r3
 800e6ee:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e6f0:	887b      	ldrh	r3, [r7, #2]
 800e6f2:	817b      	strh	r3, [r7, #10]
  q = p;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e6f8:	e018      	b.n	800e72c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	895b      	ldrh	r3, [r3, #10]
 800e6fe:	897a      	ldrh	r2, [r7, #10]
 800e700:	1ad3      	subs	r3, r2, r3
 800e702:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	891a      	ldrh	r2, [r3, #8]
 800e708:	893b      	ldrh	r3, [r7, #8]
 800e70a:	1ad3      	subs	r3, r2, r3
 800e70c:	b29a      	uxth	r2, r3
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d106      	bne.n	800e72c <pbuf_realloc+0x70>
 800e71e:	4b26      	ldr	r3, [pc, #152]	; (800e7b8 <pbuf_realloc+0xfc>)
 800e720:	f240 12af 	movw	r2, #431	; 0x1af
 800e724:	4927      	ldr	r1, [pc, #156]	; (800e7c4 <pbuf_realloc+0x108>)
 800e726:	4826      	ldr	r0, [pc, #152]	; (800e7c0 <pbuf_realloc+0x104>)
 800e728:	f009 fd62 	bl	80181f0 <iprintf>
  while (rem_len > q->len) {
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	895b      	ldrh	r3, [r3, #10]
 800e730:	897a      	ldrh	r2, [r7, #10]
 800e732:	429a      	cmp	r2, r3
 800e734:	d8e1      	bhi.n	800e6fa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	7b1b      	ldrb	r3, [r3, #12]
 800e73a:	f003 030f 	and.w	r3, r3, #15
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d121      	bne.n	800e786 <pbuf_realloc+0xca>
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	895b      	ldrh	r3, [r3, #10]
 800e746:	897a      	ldrh	r2, [r7, #10]
 800e748:	429a      	cmp	r2, r3
 800e74a:	d01c      	beq.n	800e786 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	7b5b      	ldrb	r3, [r3, #13]
 800e750:	f003 0302 	and.w	r3, r3, #2
 800e754:	2b00      	cmp	r3, #0
 800e756:	d116      	bne.n	800e786 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	685a      	ldr	r2, [r3, #4]
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	1ad3      	subs	r3, r2, r3
 800e760:	b29a      	uxth	r2, r3
 800e762:	897b      	ldrh	r3, [r7, #10]
 800e764:	4413      	add	r3, r2
 800e766:	b29b      	uxth	r3, r3
 800e768:	4619      	mov	r1, r3
 800e76a:	68f8      	ldr	r0, [r7, #12]
 800e76c:	f7fe ffaa 	bl	800d6c4 <mem_trim>
 800e770:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d106      	bne.n	800e786 <pbuf_realloc+0xca>
 800e778:	4b0f      	ldr	r3, [pc, #60]	; (800e7b8 <pbuf_realloc+0xfc>)
 800e77a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e77e:	4912      	ldr	r1, [pc, #72]	; (800e7c8 <pbuf_realloc+0x10c>)
 800e780:	480f      	ldr	r0, [pc, #60]	; (800e7c0 <pbuf_realloc+0x104>)
 800e782:	f009 fd35 	bl	80181f0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	897a      	ldrh	r2, [r7, #10]
 800e78a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	895a      	ldrh	r2, [r3, #10]
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d004      	beq.n	800e7a6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f000 f911 	bl	800e9c8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	601a      	str	r2, [r3, #0]
 800e7ac:	e000      	b.n	800e7b0 <pbuf_realloc+0xf4>
    return;
 800e7ae:	bf00      	nop

}
 800e7b0:	3710      	adds	r7, #16
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}
 800e7b6:	bf00      	nop
 800e7b8:	0801b238 	.word	0x0801b238
 800e7bc:	0801b350 	.word	0x0801b350
 800e7c0:	0801b298 	.word	0x0801b298
 800e7c4:	0801b368 	.word	0x0801b368
 800e7c8:	0801b380 	.word	0x0801b380

0800e7cc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b086      	sub	sp, #24
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	60f8      	str	r0, [r7, #12]
 800e7d4:	60b9      	str	r1, [r7, #8]
 800e7d6:	4613      	mov	r3, r2
 800e7d8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d106      	bne.n	800e7ee <pbuf_add_header_impl+0x22>
 800e7e0:	4b2b      	ldr	r3, [pc, #172]	; (800e890 <pbuf_add_header_impl+0xc4>)
 800e7e2:	f240 12df 	movw	r2, #479	; 0x1df
 800e7e6:	492b      	ldr	r1, [pc, #172]	; (800e894 <pbuf_add_header_impl+0xc8>)
 800e7e8:	482b      	ldr	r0, [pc, #172]	; (800e898 <pbuf_add_header_impl+0xcc>)
 800e7ea:	f009 fd01 	bl	80181f0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d003      	beq.n	800e7fc <pbuf_add_header_impl+0x30>
 800e7f4:	68bb      	ldr	r3, [r7, #8]
 800e7f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e7fa:	d301      	bcc.n	800e800 <pbuf_add_header_impl+0x34>
    return 1;
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	e043      	b.n	800e888 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d101      	bne.n	800e80a <pbuf_add_header_impl+0x3e>
    return 0;
 800e806:	2300      	movs	r3, #0
 800e808:	e03e      	b.n	800e888 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	891a      	ldrh	r2, [r3, #8]
 800e812:	8a7b      	ldrh	r3, [r7, #18]
 800e814:	4413      	add	r3, r2
 800e816:	b29b      	uxth	r3, r3
 800e818:	8a7a      	ldrh	r2, [r7, #18]
 800e81a:	429a      	cmp	r2, r3
 800e81c:	d901      	bls.n	800e822 <pbuf_add_header_impl+0x56>
    return 1;
 800e81e:	2301      	movs	r3, #1
 800e820:	e032      	b.n	800e888 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	7b1b      	ldrb	r3, [r3, #12]
 800e826:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e828:	8a3b      	ldrh	r3, [r7, #16]
 800e82a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d00c      	beq.n	800e84c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	685a      	ldr	r2, [r3, #4]
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	425b      	negs	r3, r3
 800e83a:	4413      	add	r3, r2
 800e83c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	3310      	adds	r3, #16
 800e842:	697a      	ldr	r2, [r7, #20]
 800e844:	429a      	cmp	r2, r3
 800e846:	d20d      	bcs.n	800e864 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e848:	2301      	movs	r3, #1
 800e84a:	e01d      	b.n	800e888 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e84c:	79fb      	ldrb	r3, [r7, #7]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d006      	beq.n	800e860 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	685a      	ldr	r2, [r3, #4]
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	425b      	negs	r3, r3
 800e85a:	4413      	add	r3, r2
 800e85c:	617b      	str	r3, [r7, #20]
 800e85e:	e001      	b.n	800e864 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e860:	2301      	movs	r3, #1
 800e862:	e011      	b.n	800e888 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	697a      	ldr	r2, [r7, #20]
 800e868:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	895a      	ldrh	r2, [r3, #10]
 800e86e:	8a7b      	ldrh	r3, [r7, #18]
 800e870:	4413      	add	r3, r2
 800e872:	b29a      	uxth	r2, r3
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	891a      	ldrh	r2, [r3, #8]
 800e87c:	8a7b      	ldrh	r3, [r7, #18]
 800e87e:	4413      	add	r3, r2
 800e880:	b29a      	uxth	r2, r3
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	811a      	strh	r2, [r3, #8]


  return 0;
 800e886:	2300      	movs	r3, #0
}
 800e888:	4618      	mov	r0, r3
 800e88a:	3718      	adds	r7, #24
 800e88c:	46bd      	mov	sp, r7
 800e88e:	bd80      	pop	{r7, pc}
 800e890:	0801b238 	.word	0x0801b238
 800e894:	0801b39c 	.word	0x0801b39c
 800e898:	0801b298 	.word	0x0801b298

0800e89c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b082      	sub	sp, #8
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
 800e8a4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	6839      	ldr	r1, [r7, #0]
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f7ff ff8e 	bl	800e7cc <pbuf_add_header_impl>
 800e8b0:	4603      	mov	r3, r0
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	3708      	adds	r7, #8
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}
	...

0800e8bc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b084      	sub	sp, #16
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
 800e8c4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d106      	bne.n	800e8da <pbuf_remove_header+0x1e>
 800e8cc:	4b20      	ldr	r3, [pc, #128]	; (800e950 <pbuf_remove_header+0x94>)
 800e8ce:	f240 224b 	movw	r2, #587	; 0x24b
 800e8d2:	4920      	ldr	r1, [pc, #128]	; (800e954 <pbuf_remove_header+0x98>)
 800e8d4:	4820      	ldr	r0, [pc, #128]	; (800e958 <pbuf_remove_header+0x9c>)
 800e8d6:	f009 fc8b 	bl	80181f0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d003      	beq.n	800e8e8 <pbuf_remove_header+0x2c>
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e8e6:	d301      	bcc.n	800e8ec <pbuf_remove_header+0x30>
    return 1;
 800e8e8:	2301      	movs	r3, #1
 800e8ea:	e02c      	b.n	800e946 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d101      	bne.n	800e8f6 <pbuf_remove_header+0x3a>
    return 0;
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	e027      	b.n	800e946 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e8f6:	683b      	ldr	r3, [r7, #0]
 800e8f8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	895b      	ldrh	r3, [r3, #10]
 800e8fe:	89fa      	ldrh	r2, [r7, #14]
 800e900:	429a      	cmp	r2, r3
 800e902:	d908      	bls.n	800e916 <pbuf_remove_header+0x5a>
 800e904:	4b12      	ldr	r3, [pc, #72]	; (800e950 <pbuf_remove_header+0x94>)
 800e906:	f240 2255 	movw	r2, #597	; 0x255
 800e90a:	4914      	ldr	r1, [pc, #80]	; (800e95c <pbuf_remove_header+0xa0>)
 800e90c:	4812      	ldr	r0, [pc, #72]	; (800e958 <pbuf_remove_header+0x9c>)
 800e90e:	f009 fc6f 	bl	80181f0 <iprintf>
 800e912:	2301      	movs	r3, #1
 800e914:	e017      	b.n	800e946 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	685b      	ldr	r3, [r3, #4]
 800e91a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	685a      	ldr	r2, [r3, #4]
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	441a      	add	r2, r3
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	895a      	ldrh	r2, [r3, #10]
 800e92c:	89fb      	ldrh	r3, [r7, #14]
 800e92e:	1ad3      	subs	r3, r2, r3
 800e930:	b29a      	uxth	r2, r3
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	891a      	ldrh	r2, [r3, #8]
 800e93a:	89fb      	ldrh	r3, [r7, #14]
 800e93c:	1ad3      	subs	r3, r2, r3
 800e93e:	b29a      	uxth	r2, r3
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e944:	2300      	movs	r3, #0
}
 800e946:	4618      	mov	r0, r3
 800e948:	3710      	adds	r7, #16
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}
 800e94e:	bf00      	nop
 800e950:	0801b238 	.word	0x0801b238
 800e954:	0801b39c 	.word	0x0801b39c
 800e958:	0801b298 	.word	0x0801b298
 800e95c:	0801b3a8 	.word	0x0801b3a8

0800e960 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b082      	sub	sp, #8
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
 800e968:	460b      	mov	r3, r1
 800e96a:	807b      	strh	r3, [r7, #2]
 800e96c:	4613      	mov	r3, r2
 800e96e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e970:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e974:	2b00      	cmp	r3, #0
 800e976:	da08      	bge.n	800e98a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e978:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e97c:	425b      	negs	r3, r3
 800e97e:	4619      	mov	r1, r3
 800e980:	6878      	ldr	r0, [r7, #4]
 800e982:	f7ff ff9b 	bl	800e8bc <pbuf_remove_header>
 800e986:	4603      	mov	r3, r0
 800e988:	e007      	b.n	800e99a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e98a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e98e:	787a      	ldrb	r2, [r7, #1]
 800e990:	4619      	mov	r1, r3
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f7ff ff1a 	bl	800e7cc <pbuf_add_header_impl>
 800e998:	4603      	mov	r3, r0
  }
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3708      	adds	r7, #8
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}

0800e9a2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e9a2:	b580      	push	{r7, lr}
 800e9a4:	b082      	sub	sp, #8
 800e9a6:	af00      	add	r7, sp, #0
 800e9a8:	6078      	str	r0, [r7, #4]
 800e9aa:	460b      	mov	r3, r1
 800e9ac:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e9ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	4619      	mov	r1, r3
 800e9b6:	6878      	ldr	r0, [r7, #4]
 800e9b8:	f7ff ffd2 	bl	800e960 <pbuf_header_impl>
 800e9bc:	4603      	mov	r3, r0
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	3708      	adds	r7, #8
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}
	...

0800e9c8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b088      	sub	sp, #32
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d10b      	bne.n	800e9ee <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d106      	bne.n	800e9ea <pbuf_free+0x22>
 800e9dc:	4b3b      	ldr	r3, [pc, #236]	; (800eacc <pbuf_free+0x104>)
 800e9de:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e9e2:	493b      	ldr	r1, [pc, #236]	; (800ead0 <pbuf_free+0x108>)
 800e9e4:	483b      	ldr	r0, [pc, #236]	; (800ead4 <pbuf_free+0x10c>)
 800e9e6:	f009 fc03 	bl	80181f0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	e069      	b.n	800eac2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e9f2:	e062      	b.n	800eaba <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e9f4:	f009 f9c4 	bl	8017d80 <sys_arch_protect>
 800e9f8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	7b9b      	ldrb	r3, [r3, #14]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d106      	bne.n	800ea10 <pbuf_free+0x48>
 800ea02:	4b32      	ldr	r3, [pc, #200]	; (800eacc <pbuf_free+0x104>)
 800ea04:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ea08:	4933      	ldr	r1, [pc, #204]	; (800ead8 <pbuf_free+0x110>)
 800ea0a:	4832      	ldr	r0, [pc, #200]	; (800ead4 <pbuf_free+0x10c>)
 800ea0c:	f009 fbf0 	bl	80181f0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	7b9b      	ldrb	r3, [r3, #14]
 800ea14:	3b01      	subs	r3, #1
 800ea16:	b2da      	uxtb	r2, r3
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	739a      	strb	r2, [r3, #14]
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	7b9b      	ldrb	r3, [r3, #14]
 800ea20:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800ea22:	69b8      	ldr	r0, [r7, #24]
 800ea24:	f009 f9ba 	bl	8017d9c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ea28:	7dfb      	ldrb	r3, [r7, #23]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d143      	bne.n	800eab6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	7b1b      	ldrb	r3, [r3, #12]
 800ea38:	f003 030f 	and.w	r3, r3, #15
 800ea3c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	7b5b      	ldrb	r3, [r3, #13]
 800ea42:	f003 0302 	and.w	r3, r3, #2
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d011      	beq.n	800ea6e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	691b      	ldr	r3, [r3, #16]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d106      	bne.n	800ea64 <pbuf_free+0x9c>
 800ea56:	4b1d      	ldr	r3, [pc, #116]	; (800eacc <pbuf_free+0x104>)
 800ea58:	f240 22ff 	movw	r2, #767	; 0x2ff
 800ea5c:	491f      	ldr	r1, [pc, #124]	; (800eadc <pbuf_free+0x114>)
 800ea5e:	481d      	ldr	r0, [pc, #116]	; (800ead4 <pbuf_free+0x10c>)
 800ea60:	f009 fbc6 	bl	80181f0 <iprintf>
        pc->custom_free_function(p);
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	691b      	ldr	r3, [r3, #16]
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	4798      	blx	r3
 800ea6c:	e01d      	b.n	800eaaa <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ea6e:	7bfb      	ldrb	r3, [r7, #15]
 800ea70:	2b02      	cmp	r3, #2
 800ea72:	d104      	bne.n	800ea7e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800ea74:	6879      	ldr	r1, [r7, #4]
 800ea76:	200c      	movs	r0, #12
 800ea78:	f7ff f902 	bl	800dc80 <memp_free>
 800ea7c:	e015      	b.n	800eaaa <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ea7e:	7bfb      	ldrb	r3, [r7, #15]
 800ea80:	2b01      	cmp	r3, #1
 800ea82:	d104      	bne.n	800ea8e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800ea84:	6879      	ldr	r1, [r7, #4]
 800ea86:	200b      	movs	r0, #11
 800ea88:	f7ff f8fa 	bl	800dc80 <memp_free>
 800ea8c:	e00d      	b.n	800eaaa <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ea8e:	7bfb      	ldrb	r3, [r7, #15]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d103      	bne.n	800ea9c <pbuf_free+0xd4>
          mem_free(p);
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f7fe fd85 	bl	800d5a4 <mem_free>
 800ea9a:	e006      	b.n	800eaaa <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ea9c:	4b0b      	ldr	r3, [pc, #44]	; (800eacc <pbuf_free+0x104>)
 800ea9e:	f240 320f 	movw	r2, #783	; 0x30f
 800eaa2:	490f      	ldr	r1, [pc, #60]	; (800eae0 <pbuf_free+0x118>)
 800eaa4:	480b      	ldr	r0, [pc, #44]	; (800ead4 <pbuf_free+0x10c>)
 800eaa6:	f009 fba3 	bl	80181f0 <iprintf>
        }
      }
      count++;
 800eaaa:	7ffb      	ldrb	r3, [r7, #31]
 800eaac:	3301      	adds	r3, #1
 800eaae:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800eab0:	693b      	ldr	r3, [r7, #16]
 800eab2:	607b      	str	r3, [r7, #4]
 800eab4:	e001      	b.n	800eaba <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800eab6:	2300      	movs	r3, #0
 800eab8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d199      	bne.n	800e9f4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800eac0:	7ffb      	ldrb	r3, [r7, #31]
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3720      	adds	r7, #32
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}
 800eaca:	bf00      	nop
 800eacc:	0801b238 	.word	0x0801b238
 800ead0:	0801b39c 	.word	0x0801b39c
 800ead4:	0801b298 	.word	0x0801b298
 800ead8:	0801b3c8 	.word	0x0801b3c8
 800eadc:	0801b3e0 	.word	0x0801b3e0
 800eae0:	0801b404 	.word	0x0801b404

0800eae4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800eae4:	b480      	push	{r7}
 800eae6:	b085      	sub	sp, #20
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800eaec:	2300      	movs	r3, #0
 800eaee:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800eaf0:	e005      	b.n	800eafe <pbuf_clen+0x1a>
    ++len;
 800eaf2:	89fb      	ldrh	r3, [r7, #14]
 800eaf4:	3301      	adds	r3, #1
 800eaf6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d1f6      	bne.n	800eaf2 <pbuf_clen+0xe>
  }
  return len;
 800eb04:	89fb      	ldrh	r3, [r7, #14]
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3714      	adds	r7, #20
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb10:	4770      	bx	lr
	...

0800eb14 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b084      	sub	sp, #16
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d016      	beq.n	800eb50 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800eb22:	f009 f92d 	bl	8017d80 <sys_arch_protect>
 800eb26:	60f8      	str	r0, [r7, #12]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	7b9b      	ldrb	r3, [r3, #14]
 800eb2c:	3301      	adds	r3, #1
 800eb2e:	b2da      	uxtb	r2, r3
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	739a      	strb	r2, [r3, #14]
 800eb34:	68f8      	ldr	r0, [r7, #12]
 800eb36:	f009 f931 	bl	8017d9c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	7b9b      	ldrb	r3, [r3, #14]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d106      	bne.n	800eb50 <pbuf_ref+0x3c>
 800eb42:	4b05      	ldr	r3, [pc, #20]	; (800eb58 <pbuf_ref+0x44>)
 800eb44:	f240 3242 	movw	r2, #834	; 0x342
 800eb48:	4904      	ldr	r1, [pc, #16]	; (800eb5c <pbuf_ref+0x48>)
 800eb4a:	4805      	ldr	r0, [pc, #20]	; (800eb60 <pbuf_ref+0x4c>)
 800eb4c:	f009 fb50 	bl	80181f0 <iprintf>
  }
}
 800eb50:	bf00      	nop
 800eb52:	3710      	adds	r7, #16
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}
 800eb58:	0801b238 	.word	0x0801b238
 800eb5c:	0801b418 	.word	0x0801b418
 800eb60:	0801b298 	.word	0x0801b298

0800eb64 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800eb64:	b580      	push	{r7, lr}
 800eb66:	b084      	sub	sp, #16
 800eb68:	af00      	add	r7, sp, #0
 800eb6a:	6078      	str	r0, [r7, #4]
 800eb6c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d002      	beq.n	800eb7a <pbuf_cat+0x16>
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d107      	bne.n	800eb8a <pbuf_cat+0x26>
 800eb7a:	4b20      	ldr	r3, [pc, #128]	; (800ebfc <pbuf_cat+0x98>)
 800eb7c:	f240 3259 	movw	r2, #857	; 0x359
 800eb80:	491f      	ldr	r1, [pc, #124]	; (800ec00 <pbuf_cat+0x9c>)
 800eb82:	4820      	ldr	r0, [pc, #128]	; (800ec04 <pbuf_cat+0xa0>)
 800eb84:	f009 fb34 	bl	80181f0 <iprintf>
 800eb88:	e034      	b.n	800ebf4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	60fb      	str	r3, [r7, #12]
 800eb8e:	e00a      	b.n	800eba6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	891a      	ldrh	r2, [r3, #8]
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	891b      	ldrh	r3, [r3, #8]
 800eb98:	4413      	add	r3, r2
 800eb9a:	b29a      	uxth	r2, r3
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	60fb      	str	r3, [r7, #12]
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d1f0      	bne.n	800eb90 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	891a      	ldrh	r2, [r3, #8]
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	895b      	ldrh	r3, [r3, #10]
 800ebb6:	429a      	cmp	r2, r3
 800ebb8:	d006      	beq.n	800ebc8 <pbuf_cat+0x64>
 800ebba:	4b10      	ldr	r3, [pc, #64]	; (800ebfc <pbuf_cat+0x98>)
 800ebbc:	f240 3262 	movw	r2, #866	; 0x362
 800ebc0:	4911      	ldr	r1, [pc, #68]	; (800ec08 <pbuf_cat+0xa4>)
 800ebc2:	4810      	ldr	r0, [pc, #64]	; (800ec04 <pbuf_cat+0xa0>)
 800ebc4:	f009 fb14 	bl	80181f0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d006      	beq.n	800ebde <pbuf_cat+0x7a>
 800ebd0:	4b0a      	ldr	r3, [pc, #40]	; (800ebfc <pbuf_cat+0x98>)
 800ebd2:	f240 3263 	movw	r2, #867	; 0x363
 800ebd6:	490d      	ldr	r1, [pc, #52]	; (800ec0c <pbuf_cat+0xa8>)
 800ebd8:	480a      	ldr	r0, [pc, #40]	; (800ec04 <pbuf_cat+0xa0>)
 800ebda:	f009 fb09 	bl	80181f0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	891a      	ldrh	r2, [r3, #8]
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	891b      	ldrh	r3, [r3, #8]
 800ebe6:	4413      	add	r3, r2
 800ebe8:	b29a      	uxth	r2, r3
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	683a      	ldr	r2, [r7, #0]
 800ebf2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ebf4:	3710      	adds	r7, #16
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
 800ebfa:	bf00      	nop
 800ebfc:	0801b238 	.word	0x0801b238
 800ec00:	0801b42c 	.word	0x0801b42c
 800ec04:	0801b298 	.word	0x0801b298
 800ec08:	0801b464 	.word	0x0801b464
 800ec0c:	0801b494 	.word	0x0801b494

0800ec10 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b086      	sub	sp, #24
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
 800ec18:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	617b      	str	r3, [r7, #20]
 800ec1e:	2300      	movs	r3, #0
 800ec20:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d008      	beq.n	800ec3a <pbuf_copy+0x2a>
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d005      	beq.n	800ec3a <pbuf_copy+0x2a>
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	891a      	ldrh	r2, [r3, #8]
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	891b      	ldrh	r3, [r3, #8]
 800ec36:	429a      	cmp	r2, r3
 800ec38:	d209      	bcs.n	800ec4e <pbuf_copy+0x3e>
 800ec3a:	4b57      	ldr	r3, [pc, #348]	; (800ed98 <pbuf_copy+0x188>)
 800ec3c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800ec40:	4956      	ldr	r1, [pc, #344]	; (800ed9c <pbuf_copy+0x18c>)
 800ec42:	4857      	ldr	r0, [pc, #348]	; (800eda0 <pbuf_copy+0x190>)
 800ec44:	f009 fad4 	bl	80181f0 <iprintf>
 800ec48:	f06f 030f 	mvn.w	r3, #15
 800ec4c:	e09f      	b.n	800ed8e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	895b      	ldrh	r3, [r3, #10]
 800ec52:	461a      	mov	r2, r3
 800ec54:	697b      	ldr	r3, [r7, #20]
 800ec56:	1ad2      	subs	r2, r2, r3
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	895b      	ldrh	r3, [r3, #10]
 800ec5c:	4619      	mov	r1, r3
 800ec5e:	693b      	ldr	r3, [r7, #16]
 800ec60:	1acb      	subs	r3, r1, r3
 800ec62:	429a      	cmp	r2, r3
 800ec64:	d306      	bcc.n	800ec74 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	895b      	ldrh	r3, [r3, #10]
 800ec6a:	461a      	mov	r2, r3
 800ec6c:	693b      	ldr	r3, [r7, #16]
 800ec6e:	1ad3      	subs	r3, r2, r3
 800ec70:	60fb      	str	r3, [r7, #12]
 800ec72:	e005      	b.n	800ec80 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	895b      	ldrh	r3, [r3, #10]
 800ec78:	461a      	mov	r2, r3
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	1ad3      	subs	r3, r2, r3
 800ec7e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	685a      	ldr	r2, [r3, #4]
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	18d0      	adds	r0, r2, r3
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	685a      	ldr	r2, [r3, #4]
 800ec8c:	693b      	ldr	r3, [r7, #16]
 800ec8e:	4413      	add	r3, r2
 800ec90:	68fa      	ldr	r2, [r7, #12]
 800ec92:	4619      	mov	r1, r3
 800ec94:	f009 f9d2 	bl	801803c <memcpy>
    offset_to += len;
 800ec98:	697a      	ldr	r2, [r7, #20]
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	4413      	add	r3, r2
 800ec9e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800eca0:	693a      	ldr	r2, [r7, #16]
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	4413      	add	r3, r2
 800eca6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	895b      	ldrh	r3, [r3, #10]
 800ecac:	461a      	mov	r2, r3
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	4293      	cmp	r3, r2
 800ecb2:	d906      	bls.n	800ecc2 <pbuf_copy+0xb2>
 800ecb4:	4b38      	ldr	r3, [pc, #224]	; (800ed98 <pbuf_copy+0x188>)
 800ecb6:	f240 32d9 	movw	r2, #985	; 0x3d9
 800ecba:	493a      	ldr	r1, [pc, #232]	; (800eda4 <pbuf_copy+0x194>)
 800ecbc:	4838      	ldr	r0, [pc, #224]	; (800eda0 <pbuf_copy+0x190>)
 800ecbe:	f009 fa97 	bl	80181f0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	895b      	ldrh	r3, [r3, #10]
 800ecc6:	461a      	mov	r2, r3
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	4293      	cmp	r3, r2
 800eccc:	d906      	bls.n	800ecdc <pbuf_copy+0xcc>
 800ecce:	4b32      	ldr	r3, [pc, #200]	; (800ed98 <pbuf_copy+0x188>)
 800ecd0:	f240 32da 	movw	r2, #986	; 0x3da
 800ecd4:	4934      	ldr	r1, [pc, #208]	; (800eda8 <pbuf_copy+0x198>)
 800ecd6:	4832      	ldr	r0, [pc, #200]	; (800eda0 <pbuf_copy+0x190>)
 800ecd8:	f009 fa8a 	bl	80181f0 <iprintf>
    if (offset_from >= p_from->len) {
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	895b      	ldrh	r3, [r3, #10]
 800ece0:	461a      	mov	r2, r3
 800ece2:	693b      	ldr	r3, [r7, #16]
 800ece4:	4293      	cmp	r3, r2
 800ece6:	d304      	bcc.n	800ecf2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ece8:	2300      	movs	r3, #0
 800ecea:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	895b      	ldrh	r3, [r3, #10]
 800ecf6:	461a      	mov	r2, r3
 800ecf8:	697b      	ldr	r3, [r7, #20]
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	d114      	bne.n	800ed28 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d10c      	bne.n	800ed28 <pbuf_copy+0x118>
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d009      	beq.n	800ed28 <pbuf_copy+0x118>
 800ed14:	4b20      	ldr	r3, [pc, #128]	; (800ed98 <pbuf_copy+0x188>)
 800ed16:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800ed1a:	4924      	ldr	r1, [pc, #144]	; (800edac <pbuf_copy+0x19c>)
 800ed1c:	4820      	ldr	r0, [pc, #128]	; (800eda0 <pbuf_copy+0x190>)
 800ed1e:	f009 fa67 	bl	80181f0 <iprintf>
 800ed22:	f06f 030f 	mvn.w	r3, #15
 800ed26:	e032      	b.n	800ed8e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d013      	beq.n	800ed56 <pbuf_copy+0x146>
 800ed2e:	683b      	ldr	r3, [r7, #0]
 800ed30:	895a      	ldrh	r2, [r3, #10]
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	891b      	ldrh	r3, [r3, #8]
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d10d      	bne.n	800ed56 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d009      	beq.n	800ed56 <pbuf_copy+0x146>
 800ed42:	4b15      	ldr	r3, [pc, #84]	; (800ed98 <pbuf_copy+0x188>)
 800ed44:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800ed48:	4919      	ldr	r1, [pc, #100]	; (800edb0 <pbuf_copy+0x1a0>)
 800ed4a:	4815      	ldr	r0, [pc, #84]	; (800eda0 <pbuf_copy+0x190>)
 800ed4c:	f009 fa50 	bl	80181f0 <iprintf>
 800ed50:	f06f 0305 	mvn.w	r3, #5
 800ed54:	e01b      	b.n	800ed8e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d013      	beq.n	800ed84 <pbuf_copy+0x174>
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	895a      	ldrh	r2, [r3, #10]
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	891b      	ldrh	r3, [r3, #8]
 800ed64:	429a      	cmp	r2, r3
 800ed66:	d10d      	bne.n	800ed84 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d009      	beq.n	800ed84 <pbuf_copy+0x174>
 800ed70:	4b09      	ldr	r3, [pc, #36]	; (800ed98 <pbuf_copy+0x188>)
 800ed72:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800ed76:	490e      	ldr	r1, [pc, #56]	; (800edb0 <pbuf_copy+0x1a0>)
 800ed78:	4809      	ldr	r0, [pc, #36]	; (800eda0 <pbuf_copy+0x190>)
 800ed7a:	f009 fa39 	bl	80181f0 <iprintf>
 800ed7e:	f06f 0305 	mvn.w	r3, #5
 800ed82:	e004      	b.n	800ed8e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	f47f af61 	bne.w	800ec4e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800ed8c:	2300      	movs	r3, #0
}
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3718      	adds	r7, #24
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}
 800ed96:	bf00      	nop
 800ed98:	0801b238 	.word	0x0801b238
 800ed9c:	0801b4e0 	.word	0x0801b4e0
 800eda0:	0801b298 	.word	0x0801b298
 800eda4:	0801b510 	.word	0x0801b510
 800eda8:	0801b528 	.word	0x0801b528
 800edac:	0801b544 	.word	0x0801b544
 800edb0:	0801b554 	.word	0x0801b554

0800edb4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b088      	sub	sp, #32
 800edb8:	af00      	add	r7, sp, #0
 800edba:	60f8      	str	r0, [r7, #12]
 800edbc:	60b9      	str	r1, [r7, #8]
 800edbe:	4611      	mov	r1, r2
 800edc0:	461a      	mov	r2, r3
 800edc2:	460b      	mov	r3, r1
 800edc4:	80fb      	strh	r3, [r7, #6]
 800edc6:	4613      	mov	r3, r2
 800edc8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800edca:	2300      	movs	r3, #0
 800edcc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800edce:	2300      	movs	r3, #0
 800edd0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d108      	bne.n	800edea <pbuf_copy_partial+0x36>
 800edd8:	4b2b      	ldr	r3, [pc, #172]	; (800ee88 <pbuf_copy_partial+0xd4>)
 800edda:	f240 420a 	movw	r2, #1034	; 0x40a
 800edde:	492b      	ldr	r1, [pc, #172]	; (800ee8c <pbuf_copy_partial+0xd8>)
 800ede0:	482b      	ldr	r0, [pc, #172]	; (800ee90 <pbuf_copy_partial+0xdc>)
 800ede2:	f009 fa05 	bl	80181f0 <iprintf>
 800ede6:	2300      	movs	r3, #0
 800ede8:	e04a      	b.n	800ee80 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800edea:	68bb      	ldr	r3, [r7, #8]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d108      	bne.n	800ee02 <pbuf_copy_partial+0x4e>
 800edf0:	4b25      	ldr	r3, [pc, #148]	; (800ee88 <pbuf_copy_partial+0xd4>)
 800edf2:	f240 420b 	movw	r2, #1035	; 0x40b
 800edf6:	4927      	ldr	r1, [pc, #156]	; (800ee94 <pbuf_copy_partial+0xe0>)
 800edf8:	4825      	ldr	r0, [pc, #148]	; (800ee90 <pbuf_copy_partial+0xdc>)
 800edfa:	f009 f9f9 	bl	80181f0 <iprintf>
 800edfe:	2300      	movs	r3, #0
 800ee00:	e03e      	b.n	800ee80 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	61fb      	str	r3, [r7, #28]
 800ee06:	e034      	b.n	800ee72 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ee08:	88bb      	ldrh	r3, [r7, #4]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d00a      	beq.n	800ee24 <pbuf_copy_partial+0x70>
 800ee0e:	69fb      	ldr	r3, [r7, #28]
 800ee10:	895b      	ldrh	r3, [r3, #10]
 800ee12:	88ba      	ldrh	r2, [r7, #4]
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d305      	bcc.n	800ee24 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ee18:	69fb      	ldr	r3, [r7, #28]
 800ee1a:	895b      	ldrh	r3, [r3, #10]
 800ee1c:	88ba      	ldrh	r2, [r7, #4]
 800ee1e:	1ad3      	subs	r3, r2, r3
 800ee20:	80bb      	strh	r3, [r7, #4]
 800ee22:	e023      	b.n	800ee6c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ee24:	69fb      	ldr	r3, [r7, #28]
 800ee26:	895a      	ldrh	r2, [r3, #10]
 800ee28:	88bb      	ldrh	r3, [r7, #4]
 800ee2a:	1ad3      	subs	r3, r2, r3
 800ee2c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ee2e:	8b3a      	ldrh	r2, [r7, #24]
 800ee30:	88fb      	ldrh	r3, [r7, #6]
 800ee32:	429a      	cmp	r2, r3
 800ee34:	d901      	bls.n	800ee3a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ee36:	88fb      	ldrh	r3, [r7, #6]
 800ee38:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ee3a:	8b7b      	ldrh	r3, [r7, #26]
 800ee3c:	68ba      	ldr	r2, [r7, #8]
 800ee3e:	18d0      	adds	r0, r2, r3
 800ee40:	69fb      	ldr	r3, [r7, #28]
 800ee42:	685a      	ldr	r2, [r3, #4]
 800ee44:	88bb      	ldrh	r3, [r7, #4]
 800ee46:	4413      	add	r3, r2
 800ee48:	8b3a      	ldrh	r2, [r7, #24]
 800ee4a:	4619      	mov	r1, r3
 800ee4c:	f009 f8f6 	bl	801803c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ee50:	8afa      	ldrh	r2, [r7, #22]
 800ee52:	8b3b      	ldrh	r3, [r7, #24]
 800ee54:	4413      	add	r3, r2
 800ee56:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ee58:	8b7a      	ldrh	r2, [r7, #26]
 800ee5a:	8b3b      	ldrh	r3, [r7, #24]
 800ee5c:	4413      	add	r3, r2
 800ee5e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ee60:	88fa      	ldrh	r2, [r7, #6]
 800ee62:	8b3b      	ldrh	r3, [r7, #24]
 800ee64:	1ad3      	subs	r3, r2, r3
 800ee66:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ee68:	2300      	movs	r3, #0
 800ee6a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ee6c:	69fb      	ldr	r3, [r7, #28]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	61fb      	str	r3, [r7, #28]
 800ee72:	88fb      	ldrh	r3, [r7, #6]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d002      	beq.n	800ee7e <pbuf_copy_partial+0xca>
 800ee78:	69fb      	ldr	r3, [r7, #28]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d1c4      	bne.n	800ee08 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ee7e:	8afb      	ldrh	r3, [r7, #22]
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	3720      	adds	r7, #32
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}
 800ee88:	0801b238 	.word	0x0801b238
 800ee8c:	0801b580 	.word	0x0801b580
 800ee90:	0801b298 	.word	0x0801b298
 800ee94:	0801b5a0 	.word	0x0801b5a0

0800ee98 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b084      	sub	sp, #16
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	4603      	mov	r3, r0
 800eea0:	603a      	str	r2, [r7, #0]
 800eea2:	71fb      	strb	r3, [r7, #7]
 800eea4:	460b      	mov	r3, r1
 800eea6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	8919      	ldrh	r1, [r3, #8]
 800eeac:	88ba      	ldrh	r2, [r7, #4]
 800eeae:	79fb      	ldrb	r3, [r7, #7]
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	f7ff faa5 	bl	800e400 <pbuf_alloc>
 800eeb6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d101      	bne.n	800eec2 <pbuf_clone+0x2a>
    return NULL;
 800eebe:	2300      	movs	r3, #0
 800eec0:	e011      	b.n	800eee6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800eec2:	6839      	ldr	r1, [r7, #0]
 800eec4:	68f8      	ldr	r0, [r7, #12]
 800eec6:	f7ff fea3 	bl	800ec10 <pbuf_copy>
 800eeca:	4603      	mov	r3, r0
 800eecc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800eece:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d006      	beq.n	800eee4 <pbuf_clone+0x4c>
 800eed6:	4b06      	ldr	r3, [pc, #24]	; (800eef0 <pbuf_clone+0x58>)
 800eed8:	f240 5224 	movw	r2, #1316	; 0x524
 800eedc:	4905      	ldr	r1, [pc, #20]	; (800eef4 <pbuf_clone+0x5c>)
 800eede:	4806      	ldr	r0, [pc, #24]	; (800eef8 <pbuf_clone+0x60>)
 800eee0:	f009 f986 	bl	80181f0 <iprintf>
  return q;
 800eee4:	68fb      	ldr	r3, [r7, #12]
}
 800eee6:	4618      	mov	r0, r3
 800eee8:	3710      	adds	r7, #16
 800eeea:	46bd      	mov	sp, r7
 800eeec:	bd80      	pop	{r7, pc}
 800eeee:	bf00      	nop
 800eef0:	0801b238 	.word	0x0801b238
 800eef4:	0801b6ac 	.word	0x0801b6ac
 800eef8:	0801b298 	.word	0x0801b298

0800eefc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ef00:	f009 fa04 	bl	801830c <rand>
 800ef04:	4603      	mov	r3, r0
 800ef06:	b29b      	uxth	r3, r3
 800ef08:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ef0c:	b29b      	uxth	r3, r3
 800ef0e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ef12:	b29a      	uxth	r2, r3
 800ef14:	4b01      	ldr	r3, [pc, #4]	; (800ef1c <tcp_init+0x20>)
 800ef16:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ef18:	bf00      	nop
 800ef1a:	bd80      	pop	{r7, pc}
 800ef1c:	20000724 	.word	0x20000724

0800ef20 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b082      	sub	sp, #8
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	7d1b      	ldrb	r3, [r3, #20]
 800ef2c:	2b01      	cmp	r3, #1
 800ef2e:	d105      	bne.n	800ef3c <tcp_free+0x1c>
 800ef30:	4b06      	ldr	r3, [pc, #24]	; (800ef4c <tcp_free+0x2c>)
 800ef32:	22d4      	movs	r2, #212	; 0xd4
 800ef34:	4906      	ldr	r1, [pc, #24]	; (800ef50 <tcp_free+0x30>)
 800ef36:	4807      	ldr	r0, [pc, #28]	; (800ef54 <tcp_free+0x34>)
 800ef38:	f009 f95a 	bl	80181f0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ef3c:	6879      	ldr	r1, [r7, #4]
 800ef3e:	2001      	movs	r0, #1
 800ef40:	f7fe fe9e 	bl	800dc80 <memp_free>
}
 800ef44:	bf00      	nop
 800ef46:	3708      	adds	r7, #8
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}
 800ef4c:	0801b738 	.word	0x0801b738
 800ef50:	0801b768 	.word	0x0801b768
 800ef54:	0801b77c 	.word	0x0801b77c

0800ef58 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b082      	sub	sp, #8
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	7d1b      	ldrb	r3, [r3, #20]
 800ef64:	2b01      	cmp	r3, #1
 800ef66:	d105      	bne.n	800ef74 <tcp_free_listen+0x1c>
 800ef68:	4b06      	ldr	r3, [pc, #24]	; (800ef84 <tcp_free_listen+0x2c>)
 800ef6a:	22df      	movs	r2, #223	; 0xdf
 800ef6c:	4906      	ldr	r1, [pc, #24]	; (800ef88 <tcp_free_listen+0x30>)
 800ef6e:	4807      	ldr	r0, [pc, #28]	; (800ef8c <tcp_free_listen+0x34>)
 800ef70:	f009 f93e 	bl	80181f0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ef74:	6879      	ldr	r1, [r7, #4]
 800ef76:	2002      	movs	r0, #2
 800ef78:	f7fe fe82 	bl	800dc80 <memp_free>
}
 800ef7c:	bf00      	nop
 800ef7e:	3708      	adds	r7, #8
 800ef80:	46bd      	mov	sp, r7
 800ef82:	bd80      	pop	{r7, pc}
 800ef84:	0801b738 	.word	0x0801b738
 800ef88:	0801b7a4 	.word	0x0801b7a4
 800ef8c:	0801b77c 	.word	0x0801b77c

0800ef90 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ef94:	f001 f85c 	bl	8010050 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ef98:	4b07      	ldr	r3, [pc, #28]	; (800efb8 <tcp_tmr+0x28>)
 800ef9a:	781b      	ldrb	r3, [r3, #0]
 800ef9c:	3301      	adds	r3, #1
 800ef9e:	b2da      	uxtb	r2, r3
 800efa0:	4b05      	ldr	r3, [pc, #20]	; (800efb8 <tcp_tmr+0x28>)
 800efa2:	701a      	strb	r2, [r3, #0]
 800efa4:	4b04      	ldr	r3, [pc, #16]	; (800efb8 <tcp_tmr+0x28>)
 800efa6:	781b      	ldrb	r3, [r3, #0]
 800efa8:	f003 0301 	and.w	r3, r3, #1
 800efac:	2b00      	cmp	r3, #0
 800efae:	d001      	beq.n	800efb4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800efb0:	f000 fd0e 	bl	800f9d0 <tcp_slowtmr>
  }
}
 800efb4:	bf00      	nop
 800efb6:	bd80      	pop	{r7, pc}
 800efb8:	20005289 	.word	0x20005289

0800efbc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b084      	sub	sp, #16
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
 800efc4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d105      	bne.n	800efd8 <tcp_remove_listener+0x1c>
 800efcc:	4b0d      	ldr	r3, [pc, #52]	; (800f004 <tcp_remove_listener+0x48>)
 800efce:	22ff      	movs	r2, #255	; 0xff
 800efd0:	490d      	ldr	r1, [pc, #52]	; (800f008 <tcp_remove_listener+0x4c>)
 800efd2:	480e      	ldr	r0, [pc, #56]	; (800f00c <tcp_remove_listener+0x50>)
 800efd4:	f009 f90c 	bl	80181f0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	60fb      	str	r3, [r7, #12]
 800efdc:	e00a      	b.n	800eff4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efe2:	683a      	ldr	r2, [r7, #0]
 800efe4:	429a      	cmp	r2, r3
 800efe6:	d102      	bne.n	800efee <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	2200      	movs	r2, #0
 800efec:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	68db      	ldr	r3, [r3, #12]
 800eff2:	60fb      	str	r3, [r7, #12]
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d1f1      	bne.n	800efde <tcp_remove_listener+0x22>
    }
  }
}
 800effa:	bf00      	nop
 800effc:	bf00      	nop
 800effe:	3710      	adds	r7, #16
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}
 800f004:	0801b738 	.word	0x0801b738
 800f008:	0801b7c0 	.word	0x0801b7c0
 800f00c:	0801b77c 	.word	0x0801b77c

0800f010 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b084      	sub	sp, #16
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d106      	bne.n	800f02c <tcp_listen_closed+0x1c>
 800f01e:	4b14      	ldr	r3, [pc, #80]	; (800f070 <tcp_listen_closed+0x60>)
 800f020:	f240 1211 	movw	r2, #273	; 0x111
 800f024:	4913      	ldr	r1, [pc, #76]	; (800f074 <tcp_listen_closed+0x64>)
 800f026:	4814      	ldr	r0, [pc, #80]	; (800f078 <tcp_listen_closed+0x68>)
 800f028:	f009 f8e2 	bl	80181f0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	7d1b      	ldrb	r3, [r3, #20]
 800f030:	2b01      	cmp	r3, #1
 800f032:	d006      	beq.n	800f042 <tcp_listen_closed+0x32>
 800f034:	4b0e      	ldr	r3, [pc, #56]	; (800f070 <tcp_listen_closed+0x60>)
 800f036:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f03a:	4910      	ldr	r1, [pc, #64]	; (800f07c <tcp_listen_closed+0x6c>)
 800f03c:	480e      	ldr	r0, [pc, #56]	; (800f078 <tcp_listen_closed+0x68>)
 800f03e:	f009 f8d7 	bl	80181f0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f042:	2301      	movs	r3, #1
 800f044:	60fb      	str	r3, [r7, #12]
 800f046:	e00b      	b.n	800f060 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800f048:	4a0d      	ldr	r2, [pc, #52]	; (800f080 <tcp_listen_closed+0x70>)
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	6879      	ldr	r1, [r7, #4]
 800f054:	4618      	mov	r0, r3
 800f056:	f7ff ffb1 	bl	800efbc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	3301      	adds	r3, #1
 800f05e:	60fb      	str	r3, [r7, #12]
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	2b03      	cmp	r3, #3
 800f064:	d9f0      	bls.n	800f048 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800f066:	bf00      	nop
 800f068:	bf00      	nop
 800f06a:	3710      	adds	r7, #16
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}
 800f070:	0801b738 	.word	0x0801b738
 800f074:	0801b7e8 	.word	0x0801b7e8
 800f078:	0801b77c 	.word	0x0801b77c
 800f07c:	0801b7f4 	.word	0x0801b7f4
 800f080:	080214f8 	.word	0x080214f8

0800f084 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800f084:	b5b0      	push	{r4, r5, r7, lr}
 800f086:	b088      	sub	sp, #32
 800f088:	af04      	add	r7, sp, #16
 800f08a:	6078      	str	r0, [r7, #4]
 800f08c:	460b      	mov	r3, r1
 800f08e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d106      	bne.n	800f0a4 <tcp_close_shutdown+0x20>
 800f096:	4b63      	ldr	r3, [pc, #396]	; (800f224 <tcp_close_shutdown+0x1a0>)
 800f098:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800f09c:	4962      	ldr	r1, [pc, #392]	; (800f228 <tcp_close_shutdown+0x1a4>)
 800f09e:	4863      	ldr	r0, [pc, #396]	; (800f22c <tcp_close_shutdown+0x1a8>)
 800f0a0:	f009 f8a6 	bl	80181f0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800f0a4:	78fb      	ldrb	r3, [r7, #3]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d066      	beq.n	800f178 <tcp_close_shutdown+0xf4>
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	7d1b      	ldrb	r3, [r3, #20]
 800f0ae:	2b04      	cmp	r3, #4
 800f0b0:	d003      	beq.n	800f0ba <tcp_close_shutdown+0x36>
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	7d1b      	ldrb	r3, [r3, #20]
 800f0b6:	2b07      	cmp	r3, #7
 800f0b8:	d15e      	bne.n	800f178 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d104      	bne.n	800f0cc <tcp_close_shutdown+0x48>
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f0c6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f0ca:	d055      	beq.n	800f178 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	8b5b      	ldrh	r3, [r3, #26]
 800f0d0:	f003 0310 	and.w	r3, r3, #16
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d106      	bne.n	800f0e6 <tcp_close_shutdown+0x62>
 800f0d8:	4b52      	ldr	r3, [pc, #328]	; (800f224 <tcp_close_shutdown+0x1a0>)
 800f0da:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800f0de:	4954      	ldr	r1, [pc, #336]	; (800f230 <tcp_close_shutdown+0x1ac>)
 800f0e0:	4852      	ldr	r0, [pc, #328]	; (800f22c <tcp_close_shutdown+0x1a8>)
 800f0e2:	f009 f885 	bl	80181f0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f0ee:	687d      	ldr	r5, [r7, #4]
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	3304      	adds	r3, #4
 800f0f4:	687a      	ldr	r2, [r7, #4]
 800f0f6:	8ad2      	ldrh	r2, [r2, #22]
 800f0f8:	6879      	ldr	r1, [r7, #4]
 800f0fa:	8b09      	ldrh	r1, [r1, #24]
 800f0fc:	9102      	str	r1, [sp, #8]
 800f0fe:	9201      	str	r2, [sp, #4]
 800f100:	9300      	str	r3, [sp, #0]
 800f102:	462b      	mov	r3, r5
 800f104:	4622      	mov	r2, r4
 800f106:	4601      	mov	r1, r0
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	f005 fd8b 	bl	8014c24 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800f10e:	6878      	ldr	r0, [r7, #4]
 800f110:	f001 fb6c 	bl	80107ec <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f114:	4b47      	ldr	r3, [pc, #284]	; (800f234 <tcp_close_shutdown+0x1b0>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	687a      	ldr	r2, [r7, #4]
 800f11a:	429a      	cmp	r2, r3
 800f11c:	d105      	bne.n	800f12a <tcp_close_shutdown+0xa6>
 800f11e:	4b45      	ldr	r3, [pc, #276]	; (800f234 <tcp_close_shutdown+0x1b0>)
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	68db      	ldr	r3, [r3, #12]
 800f124:	4a43      	ldr	r2, [pc, #268]	; (800f234 <tcp_close_shutdown+0x1b0>)
 800f126:	6013      	str	r3, [r2, #0]
 800f128:	e013      	b.n	800f152 <tcp_close_shutdown+0xce>
 800f12a:	4b42      	ldr	r3, [pc, #264]	; (800f234 <tcp_close_shutdown+0x1b0>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	60fb      	str	r3, [r7, #12]
 800f130:	e00c      	b.n	800f14c <tcp_close_shutdown+0xc8>
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	68db      	ldr	r3, [r3, #12]
 800f136:	687a      	ldr	r2, [r7, #4]
 800f138:	429a      	cmp	r2, r3
 800f13a:	d104      	bne.n	800f146 <tcp_close_shutdown+0xc2>
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	68da      	ldr	r2, [r3, #12]
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	60da      	str	r2, [r3, #12]
 800f144:	e005      	b.n	800f152 <tcp_close_shutdown+0xce>
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	68db      	ldr	r3, [r3, #12]
 800f14a:	60fb      	str	r3, [r7, #12]
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d1ef      	bne.n	800f132 <tcp_close_shutdown+0xae>
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	2200      	movs	r2, #0
 800f156:	60da      	str	r2, [r3, #12]
 800f158:	4b37      	ldr	r3, [pc, #220]	; (800f238 <tcp_close_shutdown+0x1b4>)
 800f15a:	2201      	movs	r2, #1
 800f15c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800f15e:	4b37      	ldr	r3, [pc, #220]	; (800f23c <tcp_close_shutdown+0x1b8>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	687a      	ldr	r2, [r7, #4]
 800f164:	429a      	cmp	r2, r3
 800f166:	d102      	bne.n	800f16e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800f168:	f004 f800 	bl	801316c <tcp_trigger_input_pcb_close>
 800f16c:	e002      	b.n	800f174 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800f16e:	6878      	ldr	r0, [r7, #4]
 800f170:	f7ff fed6 	bl	800ef20 <tcp_free>
      }
      return ERR_OK;
 800f174:	2300      	movs	r3, #0
 800f176:	e050      	b.n	800f21a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	7d1b      	ldrb	r3, [r3, #20]
 800f17c:	2b02      	cmp	r3, #2
 800f17e:	d03b      	beq.n	800f1f8 <tcp_close_shutdown+0x174>
 800f180:	2b02      	cmp	r3, #2
 800f182:	dc44      	bgt.n	800f20e <tcp_close_shutdown+0x18a>
 800f184:	2b00      	cmp	r3, #0
 800f186:	d002      	beq.n	800f18e <tcp_close_shutdown+0x10a>
 800f188:	2b01      	cmp	r3, #1
 800f18a:	d02a      	beq.n	800f1e2 <tcp_close_shutdown+0x15e>
 800f18c:	e03f      	b.n	800f20e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	8adb      	ldrh	r3, [r3, #22]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d021      	beq.n	800f1da <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f196:	4b2a      	ldr	r3, [pc, #168]	; (800f240 <tcp_close_shutdown+0x1bc>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	687a      	ldr	r2, [r7, #4]
 800f19c:	429a      	cmp	r2, r3
 800f19e:	d105      	bne.n	800f1ac <tcp_close_shutdown+0x128>
 800f1a0:	4b27      	ldr	r3, [pc, #156]	; (800f240 <tcp_close_shutdown+0x1bc>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	68db      	ldr	r3, [r3, #12]
 800f1a6:	4a26      	ldr	r2, [pc, #152]	; (800f240 <tcp_close_shutdown+0x1bc>)
 800f1a8:	6013      	str	r3, [r2, #0]
 800f1aa:	e013      	b.n	800f1d4 <tcp_close_shutdown+0x150>
 800f1ac:	4b24      	ldr	r3, [pc, #144]	; (800f240 <tcp_close_shutdown+0x1bc>)
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	60bb      	str	r3, [r7, #8]
 800f1b2:	e00c      	b.n	800f1ce <tcp_close_shutdown+0x14a>
 800f1b4:	68bb      	ldr	r3, [r7, #8]
 800f1b6:	68db      	ldr	r3, [r3, #12]
 800f1b8:	687a      	ldr	r2, [r7, #4]
 800f1ba:	429a      	cmp	r2, r3
 800f1bc:	d104      	bne.n	800f1c8 <tcp_close_shutdown+0x144>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	68da      	ldr	r2, [r3, #12]
 800f1c2:	68bb      	ldr	r3, [r7, #8]
 800f1c4:	60da      	str	r2, [r3, #12]
 800f1c6:	e005      	b.n	800f1d4 <tcp_close_shutdown+0x150>
 800f1c8:	68bb      	ldr	r3, [r7, #8]
 800f1ca:	68db      	ldr	r3, [r3, #12]
 800f1cc:	60bb      	str	r3, [r7, #8]
 800f1ce:	68bb      	ldr	r3, [r7, #8]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d1ef      	bne.n	800f1b4 <tcp_close_shutdown+0x130>
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f7ff fea0 	bl	800ef20 <tcp_free>
      break;
 800f1e0:	e01a      	b.n	800f218 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f1e2:	6878      	ldr	r0, [r7, #4]
 800f1e4:	f7ff ff14 	bl	800f010 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f1e8:	6879      	ldr	r1, [r7, #4]
 800f1ea:	4816      	ldr	r0, [pc, #88]	; (800f244 <tcp_close_shutdown+0x1c0>)
 800f1ec:	f001 fb4e 	bl	801088c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f7ff feb1 	bl	800ef58 <tcp_free_listen>
      break;
 800f1f6:	e00f      	b.n	800f218 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f1f8:	6879      	ldr	r1, [r7, #4]
 800f1fa:	480e      	ldr	r0, [pc, #56]	; (800f234 <tcp_close_shutdown+0x1b0>)
 800f1fc:	f001 fb46 	bl	801088c <tcp_pcb_remove>
 800f200:	4b0d      	ldr	r3, [pc, #52]	; (800f238 <tcp_close_shutdown+0x1b4>)
 800f202:	2201      	movs	r2, #1
 800f204:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	f7ff fe8a 	bl	800ef20 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f20c:	e004      	b.n	800f218 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	f000 f81a 	bl	800f248 <tcp_close_shutdown_fin>
 800f214:	4603      	mov	r3, r0
 800f216:	e000      	b.n	800f21a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800f218:	2300      	movs	r3, #0
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3710      	adds	r7, #16
 800f21e:	46bd      	mov	sp, r7
 800f220:	bdb0      	pop	{r4, r5, r7, pc}
 800f222:	bf00      	nop
 800f224:	0801b738 	.word	0x0801b738
 800f228:	0801b80c 	.word	0x0801b80c
 800f22c:	0801b77c 	.word	0x0801b77c
 800f230:	0801b82c 	.word	0x0801b82c
 800f234:	20018ba4 	.word	0x20018ba4
 800f238:	20018ba0 	.word	0x20018ba0
 800f23c:	20018bb8 	.word	0x20018bb8
 800f240:	20018bb0 	.word	0x20018bb0
 800f244:	20018bac 	.word	0x20018bac

0800f248 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b084      	sub	sp, #16
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d106      	bne.n	800f264 <tcp_close_shutdown_fin+0x1c>
 800f256:	4b2e      	ldr	r3, [pc, #184]	; (800f310 <tcp_close_shutdown_fin+0xc8>)
 800f258:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800f25c:	492d      	ldr	r1, [pc, #180]	; (800f314 <tcp_close_shutdown_fin+0xcc>)
 800f25e:	482e      	ldr	r0, [pc, #184]	; (800f318 <tcp_close_shutdown_fin+0xd0>)
 800f260:	f008 ffc6 	bl	80181f0 <iprintf>

  switch (pcb->state) {
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	7d1b      	ldrb	r3, [r3, #20]
 800f268:	2b07      	cmp	r3, #7
 800f26a:	d020      	beq.n	800f2ae <tcp_close_shutdown_fin+0x66>
 800f26c:	2b07      	cmp	r3, #7
 800f26e:	dc2b      	bgt.n	800f2c8 <tcp_close_shutdown_fin+0x80>
 800f270:	2b03      	cmp	r3, #3
 800f272:	d002      	beq.n	800f27a <tcp_close_shutdown_fin+0x32>
 800f274:	2b04      	cmp	r3, #4
 800f276:	d00d      	beq.n	800f294 <tcp_close_shutdown_fin+0x4c>
 800f278:	e026      	b.n	800f2c8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f004 fde0 	bl	8013e40 <tcp_send_fin>
 800f280:	4603      	mov	r3, r0
 800f282:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f284:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d11f      	bne.n	800f2cc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2205      	movs	r2, #5
 800f290:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f292:	e01b      	b.n	800f2cc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f004 fdd3 	bl	8013e40 <tcp_send_fin>
 800f29a:	4603      	mov	r3, r0
 800f29c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f29e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d114      	bne.n	800f2d0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	2205      	movs	r2, #5
 800f2aa:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f2ac:	e010      	b.n	800f2d0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f2ae:	6878      	ldr	r0, [r7, #4]
 800f2b0:	f004 fdc6 	bl	8013e40 <tcp_send_fin>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f2b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d109      	bne.n	800f2d4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2209      	movs	r2, #9
 800f2c4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f2c6:	e005      	b.n	800f2d4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	e01c      	b.n	800f306 <tcp_close_shutdown_fin+0xbe>
      break;
 800f2cc:	bf00      	nop
 800f2ce:	e002      	b.n	800f2d6 <tcp_close_shutdown_fin+0x8e>
      break;
 800f2d0:	bf00      	nop
 800f2d2:	e000      	b.n	800f2d6 <tcp_close_shutdown_fin+0x8e>
      break;
 800f2d4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f2d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d103      	bne.n	800f2e6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f004 feec 	bl	80140bc <tcp_output>
 800f2e4:	e00d      	b.n	800f302 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800f2e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f2ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f2ee:	d108      	bne.n	800f302 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	8b5b      	ldrh	r3, [r3, #26]
 800f2f4:	f043 0308 	orr.w	r3, r3, #8
 800f2f8:	b29a      	uxth	r2, r3
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f2fe:	2300      	movs	r3, #0
 800f300:	e001      	b.n	800f306 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800f302:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f306:	4618      	mov	r0, r3
 800f308:	3710      	adds	r7, #16
 800f30a:	46bd      	mov	sp, r7
 800f30c:	bd80      	pop	{r7, pc}
 800f30e:	bf00      	nop
 800f310:	0801b738 	.word	0x0801b738
 800f314:	0801b7e8 	.word	0x0801b7e8
 800f318:	0801b77c 	.word	0x0801b77c

0800f31c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b082      	sub	sp, #8
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d109      	bne.n	800f33e <tcp_close+0x22>
 800f32a:	4b0f      	ldr	r3, [pc, #60]	; (800f368 <tcp_close+0x4c>)
 800f32c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f330:	490e      	ldr	r1, [pc, #56]	; (800f36c <tcp_close+0x50>)
 800f332:	480f      	ldr	r0, [pc, #60]	; (800f370 <tcp_close+0x54>)
 800f334:	f008 ff5c 	bl	80181f0 <iprintf>
 800f338:	f06f 030f 	mvn.w	r3, #15
 800f33c:	e00f      	b.n	800f35e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	7d1b      	ldrb	r3, [r3, #20]
 800f342:	2b01      	cmp	r3, #1
 800f344:	d006      	beq.n	800f354 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	8b5b      	ldrh	r3, [r3, #26]
 800f34a:	f043 0310 	orr.w	r3, r3, #16
 800f34e:	b29a      	uxth	r2, r3
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f354:	2101      	movs	r1, #1
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f7ff fe94 	bl	800f084 <tcp_close_shutdown>
 800f35c:	4603      	mov	r3, r0
}
 800f35e:	4618      	mov	r0, r3
 800f360:	3708      	adds	r7, #8
 800f362:	46bd      	mov	sp, r7
 800f364:	bd80      	pop	{r7, pc}
 800f366:	bf00      	nop
 800f368:	0801b738 	.word	0x0801b738
 800f36c:	0801b848 	.word	0x0801b848
 800f370:	0801b77c 	.word	0x0801b77c

0800f374 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b08e      	sub	sp, #56	; 0x38
 800f378:	af04      	add	r7, sp, #16
 800f37a:	6078      	str	r0, [r7, #4]
 800f37c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d107      	bne.n	800f394 <tcp_abandon+0x20>
 800f384:	4b52      	ldr	r3, [pc, #328]	; (800f4d0 <tcp_abandon+0x15c>)
 800f386:	f240 223d 	movw	r2, #573	; 0x23d
 800f38a:	4952      	ldr	r1, [pc, #328]	; (800f4d4 <tcp_abandon+0x160>)
 800f38c:	4852      	ldr	r0, [pc, #328]	; (800f4d8 <tcp_abandon+0x164>)
 800f38e:	f008 ff2f 	bl	80181f0 <iprintf>
 800f392:	e099      	b.n	800f4c8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	7d1b      	ldrb	r3, [r3, #20]
 800f398:	2b01      	cmp	r3, #1
 800f39a:	d106      	bne.n	800f3aa <tcp_abandon+0x36>
 800f39c:	4b4c      	ldr	r3, [pc, #304]	; (800f4d0 <tcp_abandon+0x15c>)
 800f39e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f3a2:	494e      	ldr	r1, [pc, #312]	; (800f4dc <tcp_abandon+0x168>)
 800f3a4:	484c      	ldr	r0, [pc, #304]	; (800f4d8 <tcp_abandon+0x164>)
 800f3a6:	f008 ff23 	bl	80181f0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	7d1b      	ldrb	r3, [r3, #20]
 800f3ae:	2b0a      	cmp	r3, #10
 800f3b0:	d107      	bne.n	800f3c2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f3b2:	6879      	ldr	r1, [r7, #4]
 800f3b4:	484a      	ldr	r0, [pc, #296]	; (800f4e0 <tcp_abandon+0x16c>)
 800f3b6:	f001 fa69 	bl	801088c <tcp_pcb_remove>
    tcp_free(pcb);
 800f3ba:	6878      	ldr	r0, [r7, #4]
 800f3bc:	f7ff fdb0 	bl	800ef20 <tcp_free>
 800f3c0:	e082      	b.n	800f4c8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3ce:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3d4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f3dc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	691b      	ldr	r3, [r3, #16]
 800f3e2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	7d1b      	ldrb	r3, [r3, #20]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d126      	bne.n	800f43a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	8adb      	ldrh	r3, [r3, #22]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d02e      	beq.n	800f452 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f3f4:	4b3b      	ldr	r3, [pc, #236]	; (800f4e4 <tcp_abandon+0x170>)
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	687a      	ldr	r2, [r7, #4]
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	d105      	bne.n	800f40a <tcp_abandon+0x96>
 800f3fe:	4b39      	ldr	r3, [pc, #228]	; (800f4e4 <tcp_abandon+0x170>)
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	68db      	ldr	r3, [r3, #12]
 800f404:	4a37      	ldr	r2, [pc, #220]	; (800f4e4 <tcp_abandon+0x170>)
 800f406:	6013      	str	r3, [r2, #0]
 800f408:	e013      	b.n	800f432 <tcp_abandon+0xbe>
 800f40a:	4b36      	ldr	r3, [pc, #216]	; (800f4e4 <tcp_abandon+0x170>)
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	61fb      	str	r3, [r7, #28]
 800f410:	e00c      	b.n	800f42c <tcp_abandon+0xb8>
 800f412:	69fb      	ldr	r3, [r7, #28]
 800f414:	68db      	ldr	r3, [r3, #12]
 800f416:	687a      	ldr	r2, [r7, #4]
 800f418:	429a      	cmp	r2, r3
 800f41a:	d104      	bne.n	800f426 <tcp_abandon+0xb2>
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	68da      	ldr	r2, [r3, #12]
 800f420:	69fb      	ldr	r3, [r7, #28]
 800f422:	60da      	str	r2, [r3, #12]
 800f424:	e005      	b.n	800f432 <tcp_abandon+0xbe>
 800f426:	69fb      	ldr	r3, [r7, #28]
 800f428:	68db      	ldr	r3, [r3, #12]
 800f42a:	61fb      	str	r3, [r7, #28]
 800f42c:	69fb      	ldr	r3, [r7, #28]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d1ef      	bne.n	800f412 <tcp_abandon+0x9e>
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2200      	movs	r2, #0
 800f436:	60da      	str	r2, [r3, #12]
 800f438:	e00b      	b.n	800f452 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	8adb      	ldrh	r3, [r3, #22]
 800f442:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f444:	6879      	ldr	r1, [r7, #4]
 800f446:	4828      	ldr	r0, [pc, #160]	; (800f4e8 <tcp_abandon+0x174>)
 800f448:	f001 fa20 	bl	801088c <tcp_pcb_remove>
 800f44c:	4b27      	ldr	r3, [pc, #156]	; (800f4ec <tcp_abandon+0x178>)
 800f44e:	2201      	movs	r2, #1
 800f450:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f456:	2b00      	cmp	r3, #0
 800f458:	d004      	beq.n	800f464 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f45e:	4618      	mov	r0, r3
 800f460:	f000 fed6 	bl	8010210 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d004      	beq.n	800f476 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f470:	4618      	mov	r0, r3
 800f472:	f000 fecd 	bl	8010210 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d004      	beq.n	800f488 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f482:	4618      	mov	r0, r3
 800f484:	f000 fec4 	bl	8010210 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d00e      	beq.n	800f4ac <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f48e:	6879      	ldr	r1, [r7, #4]
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	3304      	adds	r3, #4
 800f494:	687a      	ldr	r2, [r7, #4]
 800f496:	8b12      	ldrh	r2, [r2, #24]
 800f498:	9202      	str	r2, [sp, #8]
 800f49a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f49c:	9201      	str	r2, [sp, #4]
 800f49e:	9300      	str	r3, [sp, #0]
 800f4a0:	460b      	mov	r3, r1
 800f4a2:	697a      	ldr	r2, [r7, #20]
 800f4a4:	69b9      	ldr	r1, [r7, #24]
 800f4a6:	6878      	ldr	r0, [r7, #4]
 800f4a8:	f005 fbbc 	bl	8014c24 <tcp_rst>
    }
    last_state = pcb->state;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	7d1b      	ldrb	r3, [r3, #20]
 800f4b0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	f7ff fd34 	bl	800ef20 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f4b8:	693b      	ldr	r3, [r7, #16]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d004      	beq.n	800f4c8 <tcp_abandon+0x154>
 800f4be:	693b      	ldr	r3, [r7, #16]
 800f4c0:	f06f 010c 	mvn.w	r1, #12
 800f4c4:	68f8      	ldr	r0, [r7, #12]
 800f4c6:	4798      	blx	r3
  }
}
 800f4c8:	3728      	adds	r7, #40	; 0x28
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bd80      	pop	{r7, pc}
 800f4ce:	bf00      	nop
 800f4d0:	0801b738 	.word	0x0801b738
 800f4d4:	0801b87c 	.word	0x0801b87c
 800f4d8:	0801b77c 	.word	0x0801b77c
 800f4dc:	0801b898 	.word	0x0801b898
 800f4e0:	20018bb4 	.word	0x20018bb4
 800f4e4:	20018bb0 	.word	0x20018bb0
 800f4e8:	20018ba4 	.word	0x20018ba4
 800f4ec:	20018ba0 	.word	0x20018ba0

0800f4f0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b082      	sub	sp, #8
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f4f8:	2101      	movs	r1, #1
 800f4fa:	6878      	ldr	r0, [r7, #4]
 800f4fc:	f7ff ff3a 	bl	800f374 <tcp_abandon>
}
 800f500:	bf00      	nop
 800f502:	3708      	adds	r7, #8
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}

0800f508 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b088      	sub	sp, #32
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	60f8      	str	r0, [r7, #12]
 800f510:	60b9      	str	r1, [r7, #8]
 800f512:	4613      	mov	r3, r2
 800f514:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800f516:	2304      	movs	r3, #4
 800f518:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d101      	bne.n	800f524 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800f520:	4b3e      	ldr	r3, [pc, #248]	; (800f61c <tcp_bind+0x114>)
 800f522:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d109      	bne.n	800f53e <tcp_bind+0x36>
 800f52a:	4b3d      	ldr	r3, [pc, #244]	; (800f620 <tcp_bind+0x118>)
 800f52c:	f240 22a9 	movw	r2, #681	; 0x2a9
 800f530:	493c      	ldr	r1, [pc, #240]	; (800f624 <tcp_bind+0x11c>)
 800f532:	483d      	ldr	r0, [pc, #244]	; (800f628 <tcp_bind+0x120>)
 800f534:	f008 fe5c 	bl	80181f0 <iprintf>
 800f538:	f06f 030f 	mvn.w	r3, #15
 800f53c:	e06a      	b.n	800f614 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	7d1b      	ldrb	r3, [r3, #20]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d009      	beq.n	800f55a <tcp_bind+0x52>
 800f546:	4b36      	ldr	r3, [pc, #216]	; (800f620 <tcp_bind+0x118>)
 800f548:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f54c:	4937      	ldr	r1, [pc, #220]	; (800f62c <tcp_bind+0x124>)
 800f54e:	4836      	ldr	r0, [pc, #216]	; (800f628 <tcp_bind+0x120>)
 800f550:	f008 fe4e 	bl	80181f0 <iprintf>
 800f554:	f06f 0305 	mvn.w	r3, #5
 800f558:	e05c      	b.n	800f614 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800f55a:	88fb      	ldrh	r3, [r7, #6]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d109      	bne.n	800f574 <tcp_bind+0x6c>
    port = tcp_new_port();
 800f560:	f000 f9f0 	bl	800f944 <tcp_new_port>
 800f564:	4603      	mov	r3, r0
 800f566:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f568:	88fb      	ldrh	r3, [r7, #6]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d135      	bne.n	800f5da <tcp_bind+0xd2>
      return ERR_BUF;
 800f56e:	f06f 0301 	mvn.w	r3, #1
 800f572:	e04f      	b.n	800f614 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800f574:	2300      	movs	r3, #0
 800f576:	61fb      	str	r3, [r7, #28]
 800f578:	e02b      	b.n	800f5d2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f57a:	4a2d      	ldr	r2, [pc, #180]	; (800f630 <tcp_bind+0x128>)
 800f57c:	69fb      	ldr	r3, [r7, #28]
 800f57e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	61bb      	str	r3, [r7, #24]
 800f586:	e01e      	b.n	800f5c6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800f588:	69bb      	ldr	r3, [r7, #24]
 800f58a:	8adb      	ldrh	r3, [r3, #22]
 800f58c:	88fa      	ldrh	r2, [r7, #6]
 800f58e:	429a      	cmp	r2, r3
 800f590:	d116      	bne.n	800f5c0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800f592:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f594:	2b00      	cmp	r3, #0
 800f596:	d010      	beq.n	800f5ba <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800f598:	69bb      	ldr	r3, [r7, #24]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d00c      	beq.n	800f5ba <tcp_bind+0xb2>
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d009      	beq.n	800f5ba <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d005      	beq.n	800f5ba <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800f5ae:	69bb      	ldr	r3, [r7, #24]
 800f5b0:	681a      	ldr	r2, [r3, #0]
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d102      	bne.n	800f5c0 <tcp_bind+0xb8>
              return ERR_USE;
 800f5ba:	f06f 0307 	mvn.w	r3, #7
 800f5be:	e029      	b.n	800f614 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f5c0:	69bb      	ldr	r3, [r7, #24]
 800f5c2:	68db      	ldr	r3, [r3, #12]
 800f5c4:	61bb      	str	r3, [r7, #24]
 800f5c6:	69bb      	ldr	r3, [r7, #24]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d1dd      	bne.n	800f588 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800f5cc:	69fb      	ldr	r3, [r7, #28]
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	61fb      	str	r3, [r7, #28]
 800f5d2:	69fa      	ldr	r2, [r7, #28]
 800f5d4:	697b      	ldr	r3, [r7, #20]
 800f5d6:	429a      	cmp	r2, r3
 800f5d8:	dbcf      	blt.n	800f57a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d00c      	beq.n	800f5fa <tcp_bind+0xf2>
 800f5e0:	68bb      	ldr	r3, [r7, #8]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d008      	beq.n	800f5fa <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800f5e8:	68bb      	ldr	r3, [r7, #8]
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d002      	beq.n	800f5f4 <tcp_bind+0xec>
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	e000      	b.n	800f5f6 <tcp_bind+0xee>
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	68fa      	ldr	r2, [r7, #12]
 800f5f8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	88fa      	ldrh	r2, [r7, #6]
 800f5fe:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800f600:	4b0c      	ldr	r3, [pc, #48]	; (800f634 <tcp_bind+0x12c>)
 800f602:	681a      	ldr	r2, [r3, #0]
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	60da      	str	r2, [r3, #12]
 800f608:	4a0a      	ldr	r2, [pc, #40]	; (800f634 <tcp_bind+0x12c>)
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	6013      	str	r3, [r2, #0]
 800f60e:	f005 fccb 	bl	8014fa8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800f612:	2300      	movs	r3, #0
}
 800f614:	4618      	mov	r0, r3
 800f616:	3720      	adds	r7, #32
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}
 800f61c:	08021520 	.word	0x08021520
 800f620:	0801b738 	.word	0x0801b738
 800f624:	0801b8cc 	.word	0x0801b8cc
 800f628:	0801b77c 	.word	0x0801b77c
 800f62c:	0801b8e4 	.word	0x0801b8e4
 800f630:	080214f8 	.word	0x080214f8
 800f634:	20018bb0 	.word	0x20018bb0

0800f638 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b084      	sub	sp, #16
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	60f8      	str	r0, [r7, #12]
 800f640:	60b9      	str	r1, [r7, #8]
 800f642:	4613      	mov	r3, r2
 800f644:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800f646:	68bb      	ldr	r3, [r7, #8]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d106      	bne.n	800f65a <tcp_accept_null+0x22>
 800f64c:	4b07      	ldr	r3, [pc, #28]	; (800f66c <tcp_accept_null+0x34>)
 800f64e:	f240 320f 	movw	r2, #783	; 0x30f
 800f652:	4907      	ldr	r1, [pc, #28]	; (800f670 <tcp_accept_null+0x38>)
 800f654:	4807      	ldr	r0, [pc, #28]	; (800f674 <tcp_accept_null+0x3c>)
 800f656:	f008 fdcb 	bl	80181f0 <iprintf>

  tcp_abort(pcb);
 800f65a:	68b8      	ldr	r0, [r7, #8]
 800f65c:	f7ff ff48 	bl	800f4f0 <tcp_abort>

  return ERR_ABRT;
 800f660:	f06f 030c 	mvn.w	r3, #12
}
 800f664:	4618      	mov	r0, r3
 800f666:	3710      	adds	r7, #16
 800f668:	46bd      	mov	sp, r7
 800f66a:	bd80      	pop	{r7, pc}
 800f66c:	0801b738 	.word	0x0801b738
 800f670:	0801b90c 	.word	0x0801b90c
 800f674:	0801b77c 	.word	0x0801b77c

0800f678 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b082      	sub	sp, #8
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
 800f680:	460b      	mov	r3, r1
 800f682:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800f684:	78fb      	ldrb	r3, [r7, #3]
 800f686:	2200      	movs	r2, #0
 800f688:	4619      	mov	r1, r3
 800f68a:	6878      	ldr	r0, [r7, #4]
 800f68c:	f000 f806 	bl	800f69c <tcp_listen_with_backlog_and_err>
 800f690:	4603      	mov	r3, r0
}
 800f692:	4618      	mov	r0, r3
 800f694:	3708      	adds	r7, #8
 800f696:	46bd      	mov	sp, r7
 800f698:	bd80      	pop	{r7, pc}
	...

0800f69c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b088      	sub	sp, #32
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	60f8      	str	r0, [r7, #12]
 800f6a4:	460b      	mov	r3, r1
 800f6a6:	607a      	str	r2, [r7, #4]
 800f6a8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d109      	bne.n	800f6c8 <tcp_listen_with_backlog_and_err+0x2c>
 800f6b4:	4b47      	ldr	r3, [pc, #284]	; (800f7d4 <tcp_listen_with_backlog_and_err+0x138>)
 800f6b6:	f240 3259 	movw	r2, #857	; 0x359
 800f6ba:	4947      	ldr	r1, [pc, #284]	; (800f7d8 <tcp_listen_with_backlog_and_err+0x13c>)
 800f6bc:	4847      	ldr	r0, [pc, #284]	; (800f7dc <tcp_listen_with_backlog_and_err+0x140>)
 800f6be:	f008 fd97 	bl	80181f0 <iprintf>
 800f6c2:	23f0      	movs	r3, #240	; 0xf0
 800f6c4:	76fb      	strb	r3, [r7, #27]
 800f6c6:	e079      	b.n	800f7bc <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	7d1b      	ldrb	r3, [r3, #20]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d009      	beq.n	800f6e4 <tcp_listen_with_backlog_and_err+0x48>
 800f6d0:	4b40      	ldr	r3, [pc, #256]	; (800f7d4 <tcp_listen_with_backlog_and_err+0x138>)
 800f6d2:	f240 325a 	movw	r2, #858	; 0x35a
 800f6d6:	4942      	ldr	r1, [pc, #264]	; (800f7e0 <tcp_listen_with_backlog_and_err+0x144>)
 800f6d8:	4840      	ldr	r0, [pc, #256]	; (800f7dc <tcp_listen_with_backlog_and_err+0x140>)
 800f6da:	f008 fd89 	bl	80181f0 <iprintf>
 800f6de:	23f1      	movs	r3, #241	; 0xf1
 800f6e0:	76fb      	strb	r3, [r7, #27]
 800f6e2:	e06b      	b.n	800f7bc <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	7d1b      	ldrb	r3, [r3, #20]
 800f6e8:	2b01      	cmp	r3, #1
 800f6ea:	d104      	bne.n	800f6f6 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800f6f0:	23f7      	movs	r3, #247	; 0xf7
 800f6f2:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f6f4:	e062      	b.n	800f7bc <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800f6f6:	2002      	movs	r0, #2
 800f6f8:	f7fe fa70 	bl	800dbdc <memp_malloc>
 800f6fc:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800f6fe:	69fb      	ldr	r3, [r7, #28]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d102      	bne.n	800f70a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800f704:	23ff      	movs	r3, #255	; 0xff
 800f706:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f708:	e058      	b.n	800f7bc <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	691a      	ldr	r2, [r3, #16]
 800f70e:	69fb      	ldr	r3, [r7, #28]
 800f710:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	8ada      	ldrh	r2, [r3, #22]
 800f716:	69fb      	ldr	r3, [r7, #28]
 800f718:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800f71a:	69fb      	ldr	r3, [r7, #28]
 800f71c:	2201      	movs	r2, #1
 800f71e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	7d5a      	ldrb	r2, [r3, #21]
 800f724:	69fb      	ldr	r3, [r7, #28]
 800f726:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	7a5a      	ldrb	r2, [r3, #9]
 800f72c:	69fb      	ldr	r3, [r7, #28]
 800f72e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800f730:	69fb      	ldr	r3, [r7, #28]
 800f732:	2200      	movs	r2, #0
 800f734:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	7ada      	ldrb	r2, [r3, #11]
 800f73a:	69fb      	ldr	r3, [r7, #28]
 800f73c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	7a9a      	ldrb	r2, [r3, #10]
 800f742:	69fb      	ldr	r3, [r7, #28]
 800f744:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	681a      	ldr	r2, [r3, #0]
 800f74a:	69fb      	ldr	r3, [r7, #28]
 800f74c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	8adb      	ldrh	r3, [r3, #22]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d021      	beq.n	800f79a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800f756:	4b23      	ldr	r3, [pc, #140]	; (800f7e4 <tcp_listen_with_backlog_and_err+0x148>)
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	68fa      	ldr	r2, [r7, #12]
 800f75c:	429a      	cmp	r2, r3
 800f75e:	d105      	bne.n	800f76c <tcp_listen_with_backlog_and_err+0xd0>
 800f760:	4b20      	ldr	r3, [pc, #128]	; (800f7e4 <tcp_listen_with_backlog_and_err+0x148>)
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	68db      	ldr	r3, [r3, #12]
 800f766:	4a1f      	ldr	r2, [pc, #124]	; (800f7e4 <tcp_listen_with_backlog_and_err+0x148>)
 800f768:	6013      	str	r3, [r2, #0]
 800f76a:	e013      	b.n	800f794 <tcp_listen_with_backlog_and_err+0xf8>
 800f76c:	4b1d      	ldr	r3, [pc, #116]	; (800f7e4 <tcp_listen_with_backlog_and_err+0x148>)
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	617b      	str	r3, [r7, #20]
 800f772:	e00c      	b.n	800f78e <tcp_listen_with_backlog_and_err+0xf2>
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	68db      	ldr	r3, [r3, #12]
 800f778:	68fa      	ldr	r2, [r7, #12]
 800f77a:	429a      	cmp	r2, r3
 800f77c:	d104      	bne.n	800f788 <tcp_listen_with_backlog_and_err+0xec>
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	68da      	ldr	r2, [r3, #12]
 800f782:	697b      	ldr	r3, [r7, #20]
 800f784:	60da      	str	r2, [r3, #12]
 800f786:	e005      	b.n	800f794 <tcp_listen_with_backlog_and_err+0xf8>
 800f788:	697b      	ldr	r3, [r7, #20]
 800f78a:	68db      	ldr	r3, [r3, #12]
 800f78c:	617b      	str	r3, [r7, #20]
 800f78e:	697b      	ldr	r3, [r7, #20]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d1ef      	bne.n	800f774 <tcp_listen_with_backlog_and_err+0xd8>
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	2200      	movs	r2, #0
 800f798:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800f79a:	68f8      	ldr	r0, [r7, #12]
 800f79c:	f7ff fbc0 	bl	800ef20 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800f7a0:	69fb      	ldr	r3, [r7, #28]
 800f7a2:	4a11      	ldr	r2, [pc, #68]	; (800f7e8 <tcp_listen_with_backlog_and_err+0x14c>)
 800f7a4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800f7a6:	4b11      	ldr	r3, [pc, #68]	; (800f7ec <tcp_listen_with_backlog_and_err+0x150>)
 800f7a8:	681a      	ldr	r2, [r3, #0]
 800f7aa:	69fb      	ldr	r3, [r7, #28]
 800f7ac:	60da      	str	r2, [r3, #12]
 800f7ae:	4a0f      	ldr	r2, [pc, #60]	; (800f7ec <tcp_listen_with_backlog_and_err+0x150>)
 800f7b0:	69fb      	ldr	r3, [r7, #28]
 800f7b2:	6013      	str	r3, [r2, #0]
 800f7b4:	f005 fbf8 	bl	8014fa8 <tcp_timer_needed>
  res = ERR_OK;
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d002      	beq.n	800f7c8 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	7efa      	ldrb	r2, [r7, #27]
 800f7c6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800f7c8:	69fb      	ldr	r3, [r7, #28]
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3720      	adds	r7, #32
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}
 800f7d2:	bf00      	nop
 800f7d4:	0801b738 	.word	0x0801b738
 800f7d8:	0801b92c 	.word	0x0801b92c
 800f7dc:	0801b77c 	.word	0x0801b77c
 800f7e0:	0801b95c 	.word	0x0801b95c
 800f7e4:	20018bb0 	.word	0x20018bb0
 800f7e8:	0800f639 	.word	0x0800f639
 800f7ec:	20018bac 	.word	0x20018bac

0800f7f0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b084      	sub	sp, #16
 800f7f4:	af00      	add	r7, sp, #0
 800f7f6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d106      	bne.n	800f80c <tcp_update_rcv_ann_wnd+0x1c>
 800f7fe:	4b25      	ldr	r3, [pc, #148]	; (800f894 <tcp_update_rcv_ann_wnd+0xa4>)
 800f800:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f804:	4924      	ldr	r1, [pc, #144]	; (800f898 <tcp_update_rcv_ann_wnd+0xa8>)
 800f806:	4825      	ldr	r0, [pc, #148]	; (800f89c <tcp_update_rcv_ann_wnd+0xac>)
 800f808:	f008 fcf2 	bl	80181f0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f810:	687a      	ldr	r2, [r7, #4]
 800f812:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f814:	4413      	add	r3, r2
 800f816:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f81c:	687a      	ldr	r2, [r7, #4]
 800f81e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f820:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f824:	bf28      	it	cs
 800f826:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f82a:	b292      	uxth	r2, r2
 800f82c:	4413      	add	r3, r2
 800f82e:	68fa      	ldr	r2, [r7, #12]
 800f830:	1ad3      	subs	r3, r2, r3
 800f832:	2b00      	cmp	r3, #0
 800f834:	db08      	blt.n	800f848 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f842:	68fa      	ldr	r2, [r7, #12]
 800f844:	1ad3      	subs	r3, r2, r3
 800f846:	e020      	b.n	800f88a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f850:	1ad3      	subs	r3, r2, r3
 800f852:	2b00      	cmp	r3, #0
 800f854:	dd03      	ble.n	800f85e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	2200      	movs	r2, #0
 800f85a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f85c:	e014      	b.n	800f888 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f866:	1ad3      	subs	r3, r2, r3
 800f868:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f86a:	68bb      	ldr	r3, [r7, #8]
 800f86c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f870:	d306      	bcc.n	800f880 <tcp_update_rcv_ann_wnd+0x90>
 800f872:	4b08      	ldr	r3, [pc, #32]	; (800f894 <tcp_update_rcv_ann_wnd+0xa4>)
 800f874:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f878:	4909      	ldr	r1, [pc, #36]	; (800f8a0 <tcp_update_rcv_ann_wnd+0xb0>)
 800f87a:	4808      	ldr	r0, [pc, #32]	; (800f89c <tcp_update_rcv_ann_wnd+0xac>)
 800f87c:	f008 fcb8 	bl	80181f0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	b29a      	uxth	r2, r3
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f888:	2300      	movs	r3, #0
  }
}
 800f88a:	4618      	mov	r0, r3
 800f88c:	3710      	adds	r7, #16
 800f88e:	46bd      	mov	sp, r7
 800f890:	bd80      	pop	{r7, pc}
 800f892:	bf00      	nop
 800f894:	0801b738 	.word	0x0801b738
 800f898:	0801b994 	.word	0x0801b994
 800f89c:	0801b77c 	.word	0x0801b77c
 800f8a0:	0801b9b8 	.word	0x0801b9b8

0800f8a4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b084      	sub	sp, #16
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
 800f8ac:	460b      	mov	r3, r1
 800f8ae:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d107      	bne.n	800f8c6 <tcp_recved+0x22>
 800f8b6:	4b1f      	ldr	r3, [pc, #124]	; (800f934 <tcp_recved+0x90>)
 800f8b8:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f8bc:	491e      	ldr	r1, [pc, #120]	; (800f938 <tcp_recved+0x94>)
 800f8be:	481f      	ldr	r0, [pc, #124]	; (800f93c <tcp_recved+0x98>)
 800f8c0:	f008 fc96 	bl	80181f0 <iprintf>
 800f8c4:	e032      	b.n	800f92c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	7d1b      	ldrb	r3, [r3, #20]
 800f8ca:	2b01      	cmp	r3, #1
 800f8cc:	d106      	bne.n	800f8dc <tcp_recved+0x38>
 800f8ce:	4b19      	ldr	r3, [pc, #100]	; (800f934 <tcp_recved+0x90>)
 800f8d0:	f240 32d2 	movw	r2, #978	; 0x3d2
 800f8d4:	491a      	ldr	r1, [pc, #104]	; (800f940 <tcp_recved+0x9c>)
 800f8d6:	4819      	ldr	r0, [pc, #100]	; (800f93c <tcp_recved+0x98>)
 800f8d8:	f008 fc8a 	bl	80181f0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f8e0:	887b      	ldrh	r3, [r7, #2]
 800f8e2:	4413      	add	r3, r2
 800f8e4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f8e6:	89fb      	ldrh	r3, [r7, #14]
 800f8e8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f8ec:	d804      	bhi.n	800f8f8 <tcp_recved+0x54>
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f8f2:	89fa      	ldrh	r2, [r7, #14]
 800f8f4:	429a      	cmp	r2, r3
 800f8f6:	d204      	bcs.n	800f902 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f8fe:	851a      	strh	r2, [r3, #40]	; 0x28
 800f900:	e002      	b.n	800f908 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	89fa      	ldrh	r2, [r7, #14]
 800f906:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f908:	6878      	ldr	r0, [r7, #4]
 800f90a:	f7ff ff71 	bl	800f7f0 <tcp_update_rcv_ann_wnd>
 800f90e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f916:	d309      	bcc.n	800f92c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	8b5b      	ldrh	r3, [r3, #26]
 800f91c:	f043 0302 	orr.w	r3, r3, #2
 800f920:	b29a      	uxth	r2, r3
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f926:	6878      	ldr	r0, [r7, #4]
 800f928:	f004 fbc8 	bl	80140bc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f92c:	3710      	adds	r7, #16
 800f92e:	46bd      	mov	sp, r7
 800f930:	bd80      	pop	{r7, pc}
 800f932:	bf00      	nop
 800f934:	0801b738 	.word	0x0801b738
 800f938:	0801b9d4 	.word	0x0801b9d4
 800f93c:	0801b77c 	.word	0x0801b77c
 800f940:	0801b9ec 	.word	0x0801b9ec

0800f944 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800f944:	b480      	push	{r7}
 800f946:	b083      	sub	sp, #12
 800f948:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800f94a:	2300      	movs	r3, #0
 800f94c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800f94e:	4b1e      	ldr	r3, [pc, #120]	; (800f9c8 <tcp_new_port+0x84>)
 800f950:	881b      	ldrh	r3, [r3, #0]
 800f952:	3301      	adds	r3, #1
 800f954:	b29a      	uxth	r2, r3
 800f956:	4b1c      	ldr	r3, [pc, #112]	; (800f9c8 <tcp_new_port+0x84>)
 800f958:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800f95a:	4b1b      	ldr	r3, [pc, #108]	; (800f9c8 <tcp_new_port+0x84>)
 800f95c:	881b      	ldrh	r3, [r3, #0]
 800f95e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f962:	4293      	cmp	r3, r2
 800f964:	d103      	bne.n	800f96e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800f966:	4b18      	ldr	r3, [pc, #96]	; (800f9c8 <tcp_new_port+0x84>)
 800f968:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f96c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f96e:	2300      	movs	r3, #0
 800f970:	71fb      	strb	r3, [r7, #7]
 800f972:	e01e      	b.n	800f9b2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f974:	79fb      	ldrb	r3, [r7, #7]
 800f976:	4a15      	ldr	r2, [pc, #84]	; (800f9cc <tcp_new_port+0x88>)
 800f978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	603b      	str	r3, [r7, #0]
 800f980:	e011      	b.n	800f9a6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800f982:	683b      	ldr	r3, [r7, #0]
 800f984:	8ada      	ldrh	r2, [r3, #22]
 800f986:	4b10      	ldr	r3, [pc, #64]	; (800f9c8 <tcp_new_port+0x84>)
 800f988:	881b      	ldrh	r3, [r3, #0]
 800f98a:	429a      	cmp	r2, r3
 800f98c:	d108      	bne.n	800f9a0 <tcp_new_port+0x5c>
        n++;
 800f98e:	88bb      	ldrh	r3, [r7, #4]
 800f990:	3301      	adds	r3, #1
 800f992:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800f994:	88bb      	ldrh	r3, [r7, #4]
 800f996:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f99a:	d3d8      	bcc.n	800f94e <tcp_new_port+0xa>
          return 0;
 800f99c:	2300      	movs	r3, #0
 800f99e:	e00d      	b.n	800f9bc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f9a0:	683b      	ldr	r3, [r7, #0]
 800f9a2:	68db      	ldr	r3, [r3, #12]
 800f9a4:	603b      	str	r3, [r7, #0]
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d1ea      	bne.n	800f982 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f9ac:	79fb      	ldrb	r3, [r7, #7]
 800f9ae:	3301      	adds	r3, #1
 800f9b0:	71fb      	strb	r3, [r7, #7]
 800f9b2:	79fb      	ldrb	r3, [r7, #7]
 800f9b4:	2b03      	cmp	r3, #3
 800f9b6:	d9dd      	bls.n	800f974 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800f9b8:	4b03      	ldr	r3, [pc, #12]	; (800f9c8 <tcp_new_port+0x84>)
 800f9ba:	881b      	ldrh	r3, [r3, #0]
}
 800f9bc:	4618      	mov	r0, r3
 800f9be:	370c      	adds	r7, #12
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c6:	4770      	bx	lr
 800f9c8:	20000724 	.word	0x20000724
 800f9cc:	080214f8 	.word	0x080214f8

0800f9d0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f9d0:	b5b0      	push	{r4, r5, r7, lr}
 800f9d2:	b090      	sub	sp, #64	; 0x40
 800f9d4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f9dc:	4b94      	ldr	r3, [pc, #592]	; (800fc30 <tcp_slowtmr+0x260>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	3301      	adds	r3, #1
 800f9e2:	4a93      	ldr	r2, [pc, #588]	; (800fc30 <tcp_slowtmr+0x260>)
 800f9e4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f9e6:	4b93      	ldr	r3, [pc, #588]	; (800fc34 <tcp_slowtmr+0x264>)
 800f9e8:	781b      	ldrb	r3, [r3, #0]
 800f9ea:	3301      	adds	r3, #1
 800f9ec:	b2da      	uxtb	r2, r3
 800f9ee:	4b91      	ldr	r3, [pc, #580]	; (800fc34 <tcp_slowtmr+0x264>)
 800f9f0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f9f6:	4b90      	ldr	r3, [pc, #576]	; (800fc38 <tcp_slowtmr+0x268>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f9fc:	e29d      	b.n	800ff3a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa00:	7d1b      	ldrb	r3, [r3, #20]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d106      	bne.n	800fa14 <tcp_slowtmr+0x44>
 800fa06:	4b8d      	ldr	r3, [pc, #564]	; (800fc3c <tcp_slowtmr+0x26c>)
 800fa08:	f240 42be 	movw	r2, #1214	; 0x4be
 800fa0c:	498c      	ldr	r1, [pc, #560]	; (800fc40 <tcp_slowtmr+0x270>)
 800fa0e:	488d      	ldr	r0, [pc, #564]	; (800fc44 <tcp_slowtmr+0x274>)
 800fa10:	f008 fbee 	bl	80181f0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800fa14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa16:	7d1b      	ldrb	r3, [r3, #20]
 800fa18:	2b01      	cmp	r3, #1
 800fa1a:	d106      	bne.n	800fa2a <tcp_slowtmr+0x5a>
 800fa1c:	4b87      	ldr	r3, [pc, #540]	; (800fc3c <tcp_slowtmr+0x26c>)
 800fa1e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800fa22:	4989      	ldr	r1, [pc, #548]	; (800fc48 <tcp_slowtmr+0x278>)
 800fa24:	4887      	ldr	r0, [pc, #540]	; (800fc44 <tcp_slowtmr+0x274>)
 800fa26:	f008 fbe3 	bl	80181f0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800fa2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa2c:	7d1b      	ldrb	r3, [r3, #20]
 800fa2e:	2b0a      	cmp	r3, #10
 800fa30:	d106      	bne.n	800fa40 <tcp_slowtmr+0x70>
 800fa32:	4b82      	ldr	r3, [pc, #520]	; (800fc3c <tcp_slowtmr+0x26c>)
 800fa34:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800fa38:	4984      	ldr	r1, [pc, #528]	; (800fc4c <tcp_slowtmr+0x27c>)
 800fa3a:	4882      	ldr	r0, [pc, #520]	; (800fc44 <tcp_slowtmr+0x274>)
 800fa3c:	f008 fbd8 	bl	80181f0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800fa40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa42:	7f9a      	ldrb	r2, [r3, #30]
 800fa44:	4b7b      	ldr	r3, [pc, #492]	; (800fc34 <tcp_slowtmr+0x264>)
 800fa46:	781b      	ldrb	r3, [r3, #0]
 800fa48:	429a      	cmp	r2, r3
 800fa4a:	d105      	bne.n	800fa58 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800fa4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa4e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fa50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa52:	68db      	ldr	r3, [r3, #12]
 800fa54:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800fa56:	e270      	b.n	800ff3a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800fa58:	4b76      	ldr	r3, [pc, #472]	; (800fc34 <tcp_slowtmr+0x264>)
 800fa5a:	781a      	ldrb	r2, [r3, #0]
 800fa5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa5e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800fa60:	2300      	movs	r3, #0
 800fa62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800fa66:	2300      	movs	r3, #0
 800fa68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800fa6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa6e:	7d1b      	ldrb	r3, [r3, #20]
 800fa70:	2b02      	cmp	r3, #2
 800fa72:	d10a      	bne.n	800fa8a <tcp_slowtmr+0xba>
 800fa74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fa7a:	2b05      	cmp	r3, #5
 800fa7c:	d905      	bls.n	800fa8a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800fa7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa82:	3301      	adds	r3, #1
 800fa84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fa88:	e11e      	b.n	800fcc8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800fa8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fa90:	2b0b      	cmp	r3, #11
 800fa92:	d905      	bls.n	800faa0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800fa94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa98:	3301      	adds	r3, #1
 800fa9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fa9e:	e113      	b.n	800fcc8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800faa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d075      	beq.n	800fb96 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800faaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d006      	beq.n	800fac0 <tcp_slowtmr+0xf0>
 800fab2:	4b62      	ldr	r3, [pc, #392]	; (800fc3c <tcp_slowtmr+0x26c>)
 800fab4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800fab8:	4965      	ldr	r1, [pc, #404]	; (800fc50 <tcp_slowtmr+0x280>)
 800faba:	4862      	ldr	r0, [pc, #392]	; (800fc44 <tcp_slowtmr+0x274>)
 800fabc:	f008 fb98 	bl	80181f0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800fac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d106      	bne.n	800fad6 <tcp_slowtmr+0x106>
 800fac8:	4b5c      	ldr	r3, [pc, #368]	; (800fc3c <tcp_slowtmr+0x26c>)
 800faca:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800face:	4961      	ldr	r1, [pc, #388]	; (800fc54 <tcp_slowtmr+0x284>)
 800fad0:	485c      	ldr	r0, [pc, #368]	; (800fc44 <tcp_slowtmr+0x274>)
 800fad2:	f008 fb8d 	bl	80181f0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800fad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fad8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fadc:	2b0b      	cmp	r3, #11
 800fade:	d905      	bls.n	800faec <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800fae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fae4:	3301      	adds	r3, #1
 800fae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800faea:	e0ed      	b.n	800fcc8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800faec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800faf2:	3b01      	subs	r3, #1
 800faf4:	4a58      	ldr	r2, [pc, #352]	; (800fc58 <tcp_slowtmr+0x288>)
 800faf6:	5cd3      	ldrb	r3, [r2, r3]
 800faf8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800fafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fafc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fb00:	7c7a      	ldrb	r2, [r7, #17]
 800fb02:	429a      	cmp	r2, r3
 800fb04:	d907      	bls.n	800fb16 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800fb06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb08:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fb0c:	3301      	adds	r3, #1
 800fb0e:	b2da      	uxtb	r2, r3
 800fb10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb12:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800fb16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb18:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fb1c:	7c7a      	ldrb	r2, [r7, #17]
 800fb1e:	429a      	cmp	r2, r3
 800fb20:	f200 80d2 	bhi.w	800fcc8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800fb24:	2301      	movs	r3, #1
 800fb26:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800fb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d108      	bne.n	800fb44 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800fb32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb34:	f005 f96a 	bl	8014e0c <tcp_zero_window_probe>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d014      	beq.n	800fb68 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800fb3e:	2300      	movs	r3, #0
 800fb40:	623b      	str	r3, [r7, #32]
 800fb42:	e011      	b.n	800fb68 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800fb44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fb4a:	4619      	mov	r1, r3
 800fb4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb4e:	f004 f82f 	bl	8013bb0 <tcp_split_unsent_seg>
 800fb52:	4603      	mov	r3, r0
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d107      	bne.n	800fb68 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800fb58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb5a:	f004 faaf 	bl	80140bc <tcp_output>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d101      	bne.n	800fb68 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800fb64:	2300      	movs	r3, #0
 800fb66:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800fb68:	6a3b      	ldr	r3, [r7, #32]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	f000 80ac 	beq.w	800fcc8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800fb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb72:	2200      	movs	r2, #0
 800fb74:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800fb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb7a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fb7e:	2b06      	cmp	r3, #6
 800fb80:	f200 80a2 	bhi.w	800fcc8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800fb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb86:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fb8a:	3301      	adds	r3, #1
 800fb8c:	b2da      	uxtb	r2, r3
 800fb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb90:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800fb94:	e098      	b.n	800fcc8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800fb96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb98:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	db0f      	blt.n	800fbc0 <tcp_slowtmr+0x1f0>
 800fba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fba2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fba6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fbaa:	4293      	cmp	r3, r2
 800fbac:	d008      	beq.n	800fbc0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800fbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbb0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fbb4:	b29b      	uxth	r3, r3
 800fbb6:	3301      	adds	r3, #1
 800fbb8:	b29b      	uxth	r3, r3
 800fbba:	b21a      	sxth	r2, r3
 800fbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbbe:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800fbc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbc2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800fbc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbc8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fbcc:	429a      	cmp	r2, r3
 800fbce:	db7b      	blt.n	800fcc8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800fbd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fbd2:	f004 fd65 	bl	80146a0 <tcp_rexmit_rto_prepare>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d007      	beq.n	800fbec <tcp_slowtmr+0x21c>
 800fbdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d171      	bne.n	800fcc8 <tcp_slowtmr+0x2f8>
 800fbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d06d      	beq.n	800fcc8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800fbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbee:	7d1b      	ldrb	r3, [r3, #20]
 800fbf0:	2b02      	cmp	r3, #2
 800fbf2:	d03a      	beq.n	800fc6a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800fbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fbfa:	2b0c      	cmp	r3, #12
 800fbfc:	bf28      	it	cs
 800fbfe:	230c      	movcs	r3, #12
 800fc00:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800fc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc04:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fc08:	10db      	asrs	r3, r3, #3
 800fc0a:	b21b      	sxth	r3, r3
 800fc0c:	461a      	mov	r2, r3
 800fc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc10:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fc14:	4413      	add	r3, r2
 800fc16:	7efa      	ldrb	r2, [r7, #27]
 800fc18:	4910      	ldr	r1, [pc, #64]	; (800fc5c <tcp_slowtmr+0x28c>)
 800fc1a:	5c8a      	ldrb	r2, [r1, r2]
 800fc1c:	4093      	lsls	r3, r2
 800fc1e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800fc26:	4293      	cmp	r3, r2
 800fc28:	dc1a      	bgt.n	800fc60 <tcp_slowtmr+0x290>
 800fc2a:	697b      	ldr	r3, [r7, #20]
 800fc2c:	b21a      	sxth	r2, r3
 800fc2e:	e019      	b.n	800fc64 <tcp_slowtmr+0x294>
 800fc30:	20018ba8 	.word	0x20018ba8
 800fc34:	2000528a 	.word	0x2000528a
 800fc38:	20018ba4 	.word	0x20018ba4
 800fc3c:	0801b738 	.word	0x0801b738
 800fc40:	0801ba7c 	.word	0x0801ba7c
 800fc44:	0801b77c 	.word	0x0801b77c
 800fc48:	0801baa8 	.word	0x0801baa8
 800fc4c:	0801bad4 	.word	0x0801bad4
 800fc50:	0801bb04 	.word	0x0801bb04
 800fc54:	0801bb38 	.word	0x0801bb38
 800fc58:	080214f0 	.word	0x080214f0
 800fc5c:	080214e0 	.word	0x080214e0
 800fc60:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800fc6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800fc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc72:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc78:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fc7c:	4293      	cmp	r3, r2
 800fc7e:	bf28      	it	cs
 800fc80:	4613      	movcs	r3, r2
 800fc82:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800fc84:	8a7b      	ldrh	r3, [r7, #18]
 800fc86:	085b      	lsrs	r3, r3, #1
 800fc88:	b29a      	uxth	r2, r3
 800fc8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc8c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800fc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc92:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fc96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc9a:	005b      	lsls	r3, r3, #1
 800fc9c:	b29b      	uxth	r3, r3
 800fc9e:	429a      	cmp	r2, r3
 800fca0:	d206      	bcs.n	800fcb0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800fca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fca4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fca6:	005b      	lsls	r3, r3, #1
 800fca8:	b29a      	uxth	r2, r3
 800fcaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800fcb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800fcb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800fcba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800fcc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fcc4:	f004 fd5c 	bl	8014780 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800fcc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcca:	7d1b      	ldrb	r3, [r3, #20]
 800fccc:	2b06      	cmp	r3, #6
 800fcce:	d111      	bne.n	800fcf4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800fcd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd2:	8b5b      	ldrh	r3, [r3, #26]
 800fcd4:	f003 0310 	and.w	r3, r3, #16
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d00b      	beq.n	800fcf4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fcdc:	4b9c      	ldr	r3, [pc, #624]	; (800ff50 <tcp_slowtmr+0x580>)
 800fcde:	681a      	ldr	r2, [r3, #0]
 800fce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fce2:	6a1b      	ldr	r3, [r3, #32]
 800fce4:	1ad3      	subs	r3, r2, r3
 800fce6:	2b28      	cmp	r3, #40	; 0x28
 800fce8:	d904      	bls.n	800fcf4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800fcea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fcee:	3301      	adds	r3, #1
 800fcf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fcf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcf6:	7a5b      	ldrb	r3, [r3, #9]
 800fcf8:	f003 0308 	and.w	r3, r3, #8
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d04a      	beq.n	800fd96 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800fd00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd02:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fd04:	2b04      	cmp	r3, #4
 800fd06:	d003      	beq.n	800fd10 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800fd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd0a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800fd0c:	2b07      	cmp	r3, #7
 800fd0e:	d142      	bne.n	800fd96 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fd10:	4b8f      	ldr	r3, [pc, #572]	; (800ff50 <tcp_slowtmr+0x580>)
 800fd12:	681a      	ldr	r2, [r3, #0]
 800fd14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd16:	6a1b      	ldr	r3, [r3, #32]
 800fd18:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800fd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd1c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fd20:	4b8c      	ldr	r3, [pc, #560]	; (800ff54 <tcp_slowtmr+0x584>)
 800fd22:	440b      	add	r3, r1
 800fd24:	498c      	ldr	r1, [pc, #560]	; (800ff58 <tcp_slowtmr+0x588>)
 800fd26:	fba1 1303 	umull	r1, r3, r1, r3
 800fd2a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fd2c:	429a      	cmp	r2, r3
 800fd2e:	d90a      	bls.n	800fd46 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800fd30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd34:	3301      	adds	r3, #1
 800fd36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800fd3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fd3e:	3301      	adds	r3, #1
 800fd40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fd44:	e027      	b.n	800fd96 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fd46:	4b82      	ldr	r3, [pc, #520]	; (800ff50 <tcp_slowtmr+0x580>)
 800fd48:	681a      	ldr	r2, [r3, #0]
 800fd4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd4c:	6a1b      	ldr	r3, [r3, #32]
 800fd4e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800fd50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd52:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd58:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	4b7f      	ldr	r3, [pc, #508]	; (800ff5c <tcp_slowtmr+0x58c>)
 800fd60:	fb03 f300 	mul.w	r3, r3, r0
 800fd64:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800fd66:	497c      	ldr	r1, [pc, #496]	; (800ff58 <tcp_slowtmr+0x588>)
 800fd68:	fba1 1303 	umull	r1, r3, r1, r3
 800fd6c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fd6e:	429a      	cmp	r2, r3
 800fd70:	d911      	bls.n	800fd96 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800fd72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd74:	f005 f80a 	bl	8014d8c <tcp_keepalive>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800fd7e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d107      	bne.n	800fd96 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800fd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd88:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fd8c:	3301      	adds	r3, #1
 800fd8e:	b2da      	uxtb	r2, r3
 800fd90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd92:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800fd96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d011      	beq.n	800fdc2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800fd9e:	4b6c      	ldr	r3, [pc, #432]	; (800ff50 <tcp_slowtmr+0x580>)
 800fda0:	681a      	ldr	r2, [r3, #0]
 800fda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fda4:	6a1b      	ldr	r3, [r3, #32]
 800fda6:	1ad2      	subs	r2, r2, r3
 800fda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdaa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fdae:	4619      	mov	r1, r3
 800fdb0:	460b      	mov	r3, r1
 800fdb2:	005b      	lsls	r3, r3, #1
 800fdb4:	440b      	add	r3, r1
 800fdb6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800fdb8:	429a      	cmp	r2, r3
 800fdba:	d302      	bcc.n	800fdc2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800fdbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fdbe:	f000 fec9 	bl	8010b54 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800fdc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdc4:	7d1b      	ldrb	r3, [r3, #20]
 800fdc6:	2b03      	cmp	r3, #3
 800fdc8:	d10b      	bne.n	800fde2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fdca:	4b61      	ldr	r3, [pc, #388]	; (800ff50 <tcp_slowtmr+0x580>)
 800fdcc:	681a      	ldr	r2, [r3, #0]
 800fdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdd0:	6a1b      	ldr	r3, [r3, #32]
 800fdd2:	1ad3      	subs	r3, r2, r3
 800fdd4:	2b28      	cmp	r3, #40	; 0x28
 800fdd6:	d904      	bls.n	800fde2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800fdd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fddc:	3301      	adds	r3, #1
 800fdde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800fde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde4:	7d1b      	ldrb	r3, [r3, #20]
 800fde6:	2b09      	cmp	r3, #9
 800fde8:	d10b      	bne.n	800fe02 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fdea:	4b59      	ldr	r3, [pc, #356]	; (800ff50 <tcp_slowtmr+0x580>)
 800fdec:	681a      	ldr	r2, [r3, #0]
 800fdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf0:	6a1b      	ldr	r3, [r3, #32]
 800fdf2:	1ad3      	subs	r3, r2, r3
 800fdf4:	2bf0      	cmp	r3, #240	; 0xf0
 800fdf6:	d904      	bls.n	800fe02 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800fdf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fdfc:	3301      	adds	r3, #1
 800fdfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fe02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d060      	beq.n	800fecc <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800fe0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe10:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800fe12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe14:	f000 fcea 	bl	80107ec <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800fe18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d010      	beq.n	800fe40 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800fe1e:	4b50      	ldr	r3, [pc, #320]	; (800ff60 <tcp_slowtmr+0x590>)
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe24:	429a      	cmp	r2, r3
 800fe26:	d106      	bne.n	800fe36 <tcp_slowtmr+0x466>
 800fe28:	4b4e      	ldr	r3, [pc, #312]	; (800ff64 <tcp_slowtmr+0x594>)
 800fe2a:	f240 526d 	movw	r2, #1389	; 0x56d
 800fe2e:	494e      	ldr	r1, [pc, #312]	; (800ff68 <tcp_slowtmr+0x598>)
 800fe30:	484e      	ldr	r0, [pc, #312]	; (800ff6c <tcp_slowtmr+0x59c>)
 800fe32:	f008 f9dd 	bl	80181f0 <iprintf>
        prev->next = pcb->next;
 800fe36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe38:	68da      	ldr	r2, [r3, #12]
 800fe3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe3c:	60da      	str	r2, [r3, #12]
 800fe3e:	e00f      	b.n	800fe60 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800fe40:	4b47      	ldr	r3, [pc, #284]	; (800ff60 <tcp_slowtmr+0x590>)
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe46:	429a      	cmp	r2, r3
 800fe48:	d006      	beq.n	800fe58 <tcp_slowtmr+0x488>
 800fe4a:	4b46      	ldr	r3, [pc, #280]	; (800ff64 <tcp_slowtmr+0x594>)
 800fe4c:	f240 5271 	movw	r2, #1393	; 0x571
 800fe50:	4947      	ldr	r1, [pc, #284]	; (800ff70 <tcp_slowtmr+0x5a0>)
 800fe52:	4846      	ldr	r0, [pc, #280]	; (800ff6c <tcp_slowtmr+0x59c>)
 800fe54:	f008 f9cc 	bl	80181f0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800fe58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe5a:	68db      	ldr	r3, [r3, #12]
 800fe5c:	4a40      	ldr	r2, [pc, #256]	; (800ff60 <tcp_slowtmr+0x590>)
 800fe5e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800fe60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d013      	beq.n	800fe90 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fe68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe6a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fe6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe6e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fe70:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800fe72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe74:	3304      	adds	r3, #4
 800fe76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe78:	8ad2      	ldrh	r2, [r2, #22]
 800fe7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe7c:	8b09      	ldrh	r1, [r1, #24]
 800fe7e:	9102      	str	r1, [sp, #8]
 800fe80:	9201      	str	r2, [sp, #4]
 800fe82:	9300      	str	r3, [sp, #0]
 800fe84:	462b      	mov	r3, r5
 800fe86:	4622      	mov	r2, r4
 800fe88:	4601      	mov	r1, r0
 800fe8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe8c:	f004 feca 	bl	8014c24 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800fe90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe92:	691b      	ldr	r3, [r3, #16]
 800fe94:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800fe96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe98:	7d1b      	ldrb	r3, [r3, #20]
 800fe9a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800fe9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe9e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800fea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fea2:	68db      	ldr	r3, [r3, #12]
 800fea4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fea6:	6838      	ldr	r0, [r7, #0]
 800fea8:	f7ff f83a 	bl	800ef20 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800feac:	4b31      	ldr	r3, [pc, #196]	; (800ff74 <tcp_slowtmr+0x5a4>)
 800feae:	2200      	movs	r2, #0
 800feb0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d004      	beq.n	800fec2 <tcp_slowtmr+0x4f2>
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	f06f 010c 	mvn.w	r1, #12
 800febe:	68b8      	ldr	r0, [r7, #8]
 800fec0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800fec2:	4b2c      	ldr	r3, [pc, #176]	; (800ff74 <tcp_slowtmr+0x5a4>)
 800fec4:	781b      	ldrb	r3, [r3, #0]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d037      	beq.n	800ff3a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800feca:	e592      	b.n	800f9f2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800fecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fece:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fed2:	68db      	ldr	r3, [r3, #12]
 800fed4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800fed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fed8:	7f1b      	ldrb	r3, [r3, #28]
 800feda:	3301      	adds	r3, #1
 800fedc:	b2da      	uxtb	r2, r3
 800fede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fee0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800fee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fee4:	7f1a      	ldrb	r2, [r3, #28]
 800fee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fee8:	7f5b      	ldrb	r3, [r3, #29]
 800feea:	429a      	cmp	r2, r3
 800feec:	d325      	bcc.n	800ff3a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800feee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fef0:	2200      	movs	r2, #0
 800fef2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800fef4:	4b1f      	ldr	r3, [pc, #124]	; (800ff74 <tcp_slowtmr+0x5a4>)
 800fef6:	2200      	movs	r2, #0
 800fef8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800fefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fefc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d00b      	beq.n	800ff1c <tcp_slowtmr+0x54c>
 800ff04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ff0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff0c:	6912      	ldr	r2, [r2, #16]
 800ff0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ff10:	4610      	mov	r0, r2
 800ff12:	4798      	blx	r3
 800ff14:	4603      	mov	r3, r0
 800ff16:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ff1a:	e002      	b.n	800ff22 <tcp_slowtmr+0x552>
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ff22:	4b14      	ldr	r3, [pc, #80]	; (800ff74 <tcp_slowtmr+0x5a4>)
 800ff24:	781b      	ldrb	r3, [r3, #0]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d000      	beq.n	800ff2c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800ff2a:	e562      	b.n	800f9f2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ff2c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d102      	bne.n	800ff3a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800ff34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff36:	f004 f8c1 	bl	80140bc <tcp_output>
  while (pcb != NULL) {
 800ff3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	f47f ad5e 	bne.w	800f9fe <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ff42:	2300      	movs	r3, #0
 800ff44:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ff46:	4b0c      	ldr	r3, [pc, #48]	; (800ff78 <tcp_slowtmr+0x5a8>)
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ff4c:	e069      	b.n	8010022 <tcp_slowtmr+0x652>
 800ff4e:	bf00      	nop
 800ff50:	20018ba8 	.word	0x20018ba8
 800ff54:	000a4cb8 	.word	0x000a4cb8
 800ff58:	10624dd3 	.word	0x10624dd3
 800ff5c:	000124f8 	.word	0x000124f8
 800ff60:	20018ba4 	.word	0x20018ba4
 800ff64:	0801b738 	.word	0x0801b738
 800ff68:	0801bb70 	.word	0x0801bb70
 800ff6c:	0801b77c 	.word	0x0801b77c
 800ff70:	0801bb9c 	.word	0x0801bb9c
 800ff74:	20018ba0 	.word	0x20018ba0
 800ff78:	20018bb4 	.word	0x20018bb4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ff7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff7e:	7d1b      	ldrb	r3, [r3, #20]
 800ff80:	2b0a      	cmp	r3, #10
 800ff82:	d006      	beq.n	800ff92 <tcp_slowtmr+0x5c2>
 800ff84:	4b2b      	ldr	r3, [pc, #172]	; (8010034 <tcp_slowtmr+0x664>)
 800ff86:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ff8a:	492b      	ldr	r1, [pc, #172]	; (8010038 <tcp_slowtmr+0x668>)
 800ff8c:	482b      	ldr	r0, [pc, #172]	; (801003c <tcp_slowtmr+0x66c>)
 800ff8e:	f008 f92f 	bl	80181f0 <iprintf>
    pcb_remove = 0;
 800ff92:	2300      	movs	r3, #0
 800ff94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ff98:	4b29      	ldr	r3, [pc, #164]	; (8010040 <tcp_slowtmr+0x670>)
 800ff9a:	681a      	ldr	r2, [r3, #0]
 800ff9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff9e:	6a1b      	ldr	r3, [r3, #32]
 800ffa0:	1ad3      	subs	r3, r2, r3
 800ffa2:	2bf0      	cmp	r3, #240	; 0xf0
 800ffa4:	d904      	bls.n	800ffb0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800ffa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ffaa:	3301      	adds	r3, #1
 800ffac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ffb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d02f      	beq.n	8010018 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ffb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ffba:	f000 fc17 	bl	80107ec <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ffbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d010      	beq.n	800ffe6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ffc4:	4b1f      	ldr	r3, [pc, #124]	; (8010044 <tcp_slowtmr+0x674>)
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ffca:	429a      	cmp	r2, r3
 800ffcc:	d106      	bne.n	800ffdc <tcp_slowtmr+0x60c>
 800ffce:	4b19      	ldr	r3, [pc, #100]	; (8010034 <tcp_slowtmr+0x664>)
 800ffd0:	f240 52af 	movw	r2, #1455	; 0x5af
 800ffd4:	491c      	ldr	r1, [pc, #112]	; (8010048 <tcp_slowtmr+0x678>)
 800ffd6:	4819      	ldr	r0, [pc, #100]	; (801003c <tcp_slowtmr+0x66c>)
 800ffd8:	f008 f90a 	bl	80181f0 <iprintf>
        prev->next = pcb->next;
 800ffdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffde:	68da      	ldr	r2, [r3, #12]
 800ffe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffe2:	60da      	str	r2, [r3, #12]
 800ffe4:	e00f      	b.n	8010006 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ffe6:	4b17      	ldr	r3, [pc, #92]	; (8010044 <tcp_slowtmr+0x674>)
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ffec:	429a      	cmp	r2, r3
 800ffee:	d006      	beq.n	800fffe <tcp_slowtmr+0x62e>
 800fff0:	4b10      	ldr	r3, [pc, #64]	; (8010034 <tcp_slowtmr+0x664>)
 800fff2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800fff6:	4915      	ldr	r1, [pc, #84]	; (801004c <tcp_slowtmr+0x67c>)
 800fff8:	4810      	ldr	r0, [pc, #64]	; (801003c <tcp_slowtmr+0x66c>)
 800fffa:	f008 f8f9 	bl	80181f0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800fffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010000:	68db      	ldr	r3, [r3, #12]
 8010002:	4a10      	ldr	r2, [pc, #64]	; (8010044 <tcp_slowtmr+0x674>)
 8010004:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8010006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010008:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801000a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801000c:	68db      	ldr	r3, [r3, #12]
 801000e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8010010:	69f8      	ldr	r0, [r7, #28]
 8010012:	f7fe ff85 	bl	800ef20 <tcp_free>
 8010016:	e004      	b.n	8010022 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8010018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801001a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801001c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801001e:	68db      	ldr	r3, [r3, #12]
 8010020:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8010022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010024:	2b00      	cmp	r3, #0
 8010026:	d1a9      	bne.n	800ff7c <tcp_slowtmr+0x5ac>
    }
  }
}
 8010028:	bf00      	nop
 801002a:	bf00      	nop
 801002c:	3730      	adds	r7, #48	; 0x30
 801002e:	46bd      	mov	sp, r7
 8010030:	bdb0      	pop	{r4, r5, r7, pc}
 8010032:	bf00      	nop
 8010034:	0801b738 	.word	0x0801b738
 8010038:	0801bbc8 	.word	0x0801bbc8
 801003c:	0801b77c 	.word	0x0801b77c
 8010040:	20018ba8 	.word	0x20018ba8
 8010044:	20018bb4 	.word	0x20018bb4
 8010048:	0801bbf8 	.word	0x0801bbf8
 801004c:	0801bc20 	.word	0x0801bc20

08010050 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b082      	sub	sp, #8
 8010054:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8010056:	4b2d      	ldr	r3, [pc, #180]	; (801010c <tcp_fasttmr+0xbc>)
 8010058:	781b      	ldrb	r3, [r3, #0]
 801005a:	3301      	adds	r3, #1
 801005c:	b2da      	uxtb	r2, r3
 801005e:	4b2b      	ldr	r3, [pc, #172]	; (801010c <tcp_fasttmr+0xbc>)
 8010060:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8010062:	4b2b      	ldr	r3, [pc, #172]	; (8010110 <tcp_fasttmr+0xc0>)
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010068:	e048      	b.n	80100fc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	7f9a      	ldrb	r2, [r3, #30]
 801006e:	4b27      	ldr	r3, [pc, #156]	; (801010c <tcp_fasttmr+0xbc>)
 8010070:	781b      	ldrb	r3, [r3, #0]
 8010072:	429a      	cmp	r2, r3
 8010074:	d03f      	beq.n	80100f6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8010076:	4b25      	ldr	r3, [pc, #148]	; (801010c <tcp_fasttmr+0xbc>)
 8010078:	781a      	ldrb	r2, [r3, #0]
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	8b5b      	ldrh	r3, [r3, #26]
 8010082:	f003 0301 	and.w	r3, r3, #1
 8010086:	2b00      	cmp	r3, #0
 8010088:	d010      	beq.n	80100ac <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	8b5b      	ldrh	r3, [r3, #26]
 801008e:	f043 0302 	orr.w	r3, r3, #2
 8010092:	b29a      	uxth	r2, r3
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8010098:	6878      	ldr	r0, [r7, #4]
 801009a:	f004 f80f 	bl	80140bc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	8b5b      	ldrh	r3, [r3, #26]
 80100a2:	f023 0303 	bic.w	r3, r3, #3
 80100a6:	b29a      	uxth	r2, r3
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	8b5b      	ldrh	r3, [r3, #26]
 80100b0:	f003 0308 	and.w	r3, r3, #8
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d009      	beq.n	80100cc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	8b5b      	ldrh	r3, [r3, #26]
 80100bc:	f023 0308 	bic.w	r3, r3, #8
 80100c0:	b29a      	uxth	r2, r3
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80100c6:	6878      	ldr	r0, [r7, #4]
 80100c8:	f7ff f8be 	bl	800f248 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	68db      	ldr	r3, [r3, #12]
 80100d0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d00a      	beq.n	80100f0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80100da:	4b0e      	ldr	r3, [pc, #56]	; (8010114 <tcp_fasttmr+0xc4>)
 80100dc:	2200      	movs	r2, #0
 80100de:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f000 f819 	bl	8010118 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80100e6:	4b0b      	ldr	r3, [pc, #44]	; (8010114 <tcp_fasttmr+0xc4>)
 80100e8:	781b      	ldrb	r3, [r3, #0]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d000      	beq.n	80100f0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80100ee:	e7b8      	b.n	8010062 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	607b      	str	r3, [r7, #4]
 80100f4:	e002      	b.n	80100fc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	68db      	ldr	r3, [r3, #12]
 80100fa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d1b3      	bne.n	801006a <tcp_fasttmr+0x1a>
    }
  }
}
 8010102:	bf00      	nop
 8010104:	bf00      	nop
 8010106:	3708      	adds	r7, #8
 8010108:	46bd      	mov	sp, r7
 801010a:	bd80      	pop	{r7, pc}
 801010c:	2000528a 	.word	0x2000528a
 8010110:	20018ba4 	.word	0x20018ba4
 8010114:	20018ba0 	.word	0x20018ba0

08010118 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010118:	b590      	push	{r4, r7, lr}
 801011a:	b085      	sub	sp, #20
 801011c:	af00      	add	r7, sp, #0
 801011e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	2b00      	cmp	r3, #0
 8010124:	d109      	bne.n	801013a <tcp_process_refused_data+0x22>
 8010126:	4b37      	ldr	r3, [pc, #220]	; (8010204 <tcp_process_refused_data+0xec>)
 8010128:	f240 6209 	movw	r2, #1545	; 0x609
 801012c:	4936      	ldr	r1, [pc, #216]	; (8010208 <tcp_process_refused_data+0xf0>)
 801012e:	4837      	ldr	r0, [pc, #220]	; (801020c <tcp_process_refused_data+0xf4>)
 8010130:	f008 f85e 	bl	80181f0 <iprintf>
 8010134:	f06f 030f 	mvn.w	r3, #15
 8010138:	e060      	b.n	80101fc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801013e:	7b5b      	ldrb	r3, [r3, #13]
 8010140:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010146:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	2200      	movs	r2, #0
 801014c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010154:	2b00      	cmp	r3, #0
 8010156:	d00b      	beq.n	8010170 <tcp_process_refused_data+0x58>
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	6918      	ldr	r0, [r3, #16]
 8010162:	2300      	movs	r3, #0
 8010164:	68ba      	ldr	r2, [r7, #8]
 8010166:	6879      	ldr	r1, [r7, #4]
 8010168:	47a0      	blx	r4
 801016a:	4603      	mov	r3, r0
 801016c:	73fb      	strb	r3, [r7, #15]
 801016e:	e007      	b.n	8010180 <tcp_process_refused_data+0x68>
 8010170:	2300      	movs	r3, #0
 8010172:	68ba      	ldr	r2, [r7, #8]
 8010174:	6879      	ldr	r1, [r7, #4]
 8010176:	2000      	movs	r0, #0
 8010178:	f000 f8c2 	bl	8010300 <tcp_recv_null>
 801017c:	4603      	mov	r3, r0
 801017e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d12a      	bne.n	80101de <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010188:	7bbb      	ldrb	r3, [r7, #14]
 801018a:	f003 0320 	and.w	r3, r3, #32
 801018e:	2b00      	cmp	r3, #0
 8010190:	d033      	beq.n	80101fa <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010196:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801019a:	d005      	beq.n	80101a8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80101a0:	3301      	adds	r3, #1
 80101a2:	b29a      	uxth	r2, r3
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d00b      	beq.n	80101ca <tcp_process_refused_data+0xb2>
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	6918      	ldr	r0, [r3, #16]
 80101bc:	2300      	movs	r3, #0
 80101be:	2200      	movs	r2, #0
 80101c0:	6879      	ldr	r1, [r7, #4]
 80101c2:	47a0      	blx	r4
 80101c4:	4603      	mov	r3, r0
 80101c6:	73fb      	strb	r3, [r7, #15]
 80101c8:	e001      	b.n	80101ce <tcp_process_refused_data+0xb6>
 80101ca:	2300      	movs	r3, #0
 80101cc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80101ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80101d2:	f113 0f0d 	cmn.w	r3, #13
 80101d6:	d110      	bne.n	80101fa <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80101d8:	f06f 030c 	mvn.w	r3, #12
 80101dc:	e00e      	b.n	80101fc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80101de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80101e2:	f113 0f0d 	cmn.w	r3, #13
 80101e6:	d102      	bne.n	80101ee <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80101e8:	f06f 030c 	mvn.w	r3, #12
 80101ec:	e006      	b.n	80101fc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	68ba      	ldr	r2, [r7, #8]
 80101f2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80101f4:	f06f 0304 	mvn.w	r3, #4
 80101f8:	e000      	b.n	80101fc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80101fa:	2300      	movs	r3, #0
}
 80101fc:	4618      	mov	r0, r3
 80101fe:	3714      	adds	r7, #20
 8010200:	46bd      	mov	sp, r7
 8010202:	bd90      	pop	{r4, r7, pc}
 8010204:	0801b738 	.word	0x0801b738
 8010208:	0801bc48 	.word	0x0801bc48
 801020c:	0801b77c 	.word	0x0801b77c

08010210 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010210:	b580      	push	{r7, lr}
 8010212:	b084      	sub	sp, #16
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010218:	e007      	b.n	801022a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010220:	6878      	ldr	r0, [r7, #4]
 8010222:	f000 f80a 	bl	801023a <tcp_seg_free>
    seg = next;
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d1f4      	bne.n	801021a <tcp_segs_free+0xa>
  }
}
 8010230:	bf00      	nop
 8010232:	bf00      	nop
 8010234:	3710      	adds	r7, #16
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}

0801023a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801023a:	b580      	push	{r7, lr}
 801023c:	b082      	sub	sp, #8
 801023e:	af00      	add	r7, sp, #0
 8010240:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	2b00      	cmp	r3, #0
 8010246:	d00c      	beq.n	8010262 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	685b      	ldr	r3, [r3, #4]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d004      	beq.n	801025a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	685b      	ldr	r3, [r3, #4]
 8010254:	4618      	mov	r0, r3
 8010256:	f7fe fbb7 	bl	800e9c8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801025a:	6879      	ldr	r1, [r7, #4]
 801025c:	2003      	movs	r0, #3
 801025e:	f7fd fd0f 	bl	800dc80 <memp_free>
  }
}
 8010262:	bf00      	nop
 8010264:	3708      	adds	r7, #8
 8010266:	46bd      	mov	sp, r7
 8010268:	bd80      	pop	{r7, pc}
	...

0801026c <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b082      	sub	sp, #8
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
 8010274:	460b      	mov	r3, r1
 8010276:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d107      	bne.n	801028e <tcp_setprio+0x22>
 801027e:	4b07      	ldr	r3, [pc, #28]	; (801029c <tcp_setprio+0x30>)
 8010280:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8010284:	4906      	ldr	r1, [pc, #24]	; (80102a0 <tcp_setprio+0x34>)
 8010286:	4807      	ldr	r0, [pc, #28]	; (80102a4 <tcp_setprio+0x38>)
 8010288:	f007 ffb2 	bl	80181f0 <iprintf>
 801028c:	e002      	b.n	8010294 <tcp_setprio+0x28>

  pcb->prio = prio;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	78fa      	ldrb	r2, [r7, #3]
 8010292:	755a      	strb	r2, [r3, #21]
}
 8010294:	3708      	adds	r7, #8
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}
 801029a:	bf00      	nop
 801029c:	0801b738 	.word	0x0801b738
 80102a0:	0801bc70 	.word	0x0801bc70
 80102a4:	0801b77c 	.word	0x0801b77c

080102a8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b084      	sub	sp, #16
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d106      	bne.n	80102c4 <tcp_seg_copy+0x1c>
 80102b6:	4b0f      	ldr	r3, [pc, #60]	; (80102f4 <tcp_seg_copy+0x4c>)
 80102b8:	f240 6282 	movw	r2, #1666	; 0x682
 80102bc:	490e      	ldr	r1, [pc, #56]	; (80102f8 <tcp_seg_copy+0x50>)
 80102be:	480f      	ldr	r0, [pc, #60]	; (80102fc <tcp_seg_copy+0x54>)
 80102c0:	f007 ff96 	bl	80181f0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80102c4:	2003      	movs	r0, #3
 80102c6:	f7fd fc89 	bl	800dbdc <memp_malloc>
 80102ca:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d101      	bne.n	80102d6 <tcp_seg_copy+0x2e>
    return NULL;
 80102d2:	2300      	movs	r3, #0
 80102d4:	e00a      	b.n	80102ec <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80102d6:	2210      	movs	r2, #16
 80102d8:	6879      	ldr	r1, [r7, #4]
 80102da:	68f8      	ldr	r0, [r7, #12]
 80102dc:	f007 feae 	bl	801803c <memcpy>
  pbuf_ref(cseg->p);
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	685b      	ldr	r3, [r3, #4]
 80102e4:	4618      	mov	r0, r3
 80102e6:	f7fe fc15 	bl	800eb14 <pbuf_ref>
  return cseg;
 80102ea:	68fb      	ldr	r3, [r7, #12]
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	3710      	adds	r7, #16
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd80      	pop	{r7, pc}
 80102f4:	0801b738 	.word	0x0801b738
 80102f8:	0801bc8c 	.word	0x0801bc8c
 80102fc:	0801b77c 	.word	0x0801b77c

08010300 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b084      	sub	sp, #16
 8010304:	af00      	add	r7, sp, #0
 8010306:	60f8      	str	r0, [r7, #12]
 8010308:	60b9      	str	r1, [r7, #8]
 801030a:	607a      	str	r2, [r7, #4]
 801030c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d109      	bne.n	8010328 <tcp_recv_null+0x28>
 8010314:	4b12      	ldr	r3, [pc, #72]	; (8010360 <tcp_recv_null+0x60>)
 8010316:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801031a:	4912      	ldr	r1, [pc, #72]	; (8010364 <tcp_recv_null+0x64>)
 801031c:	4812      	ldr	r0, [pc, #72]	; (8010368 <tcp_recv_null+0x68>)
 801031e:	f007 ff67 	bl	80181f0 <iprintf>
 8010322:	f06f 030f 	mvn.w	r3, #15
 8010326:	e016      	b.n	8010356 <tcp_recv_null+0x56>

  if (p != NULL) {
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	2b00      	cmp	r3, #0
 801032c:	d009      	beq.n	8010342 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	891b      	ldrh	r3, [r3, #8]
 8010332:	4619      	mov	r1, r3
 8010334:	68b8      	ldr	r0, [r7, #8]
 8010336:	f7ff fab5 	bl	800f8a4 <tcp_recved>
    pbuf_free(p);
 801033a:	6878      	ldr	r0, [r7, #4]
 801033c:	f7fe fb44 	bl	800e9c8 <pbuf_free>
 8010340:	e008      	b.n	8010354 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8010342:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d104      	bne.n	8010354 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801034a:	68b8      	ldr	r0, [r7, #8]
 801034c:	f7fe ffe6 	bl	800f31c <tcp_close>
 8010350:	4603      	mov	r3, r0
 8010352:	e000      	b.n	8010356 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010354:	2300      	movs	r3, #0
}
 8010356:	4618      	mov	r0, r3
 8010358:	3710      	adds	r7, #16
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}
 801035e:	bf00      	nop
 8010360:	0801b738 	.word	0x0801b738
 8010364:	0801bca8 	.word	0x0801bca8
 8010368:	0801b77c 	.word	0x0801b77c

0801036c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b086      	sub	sp, #24
 8010370:	af00      	add	r7, sp, #0
 8010372:	4603      	mov	r3, r0
 8010374:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801037a:	2b00      	cmp	r3, #0
 801037c:	db01      	blt.n	8010382 <tcp_kill_prio+0x16>
 801037e:	79fb      	ldrb	r3, [r7, #7]
 8010380:	e000      	b.n	8010384 <tcp_kill_prio+0x18>
 8010382:	237f      	movs	r3, #127	; 0x7f
 8010384:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8010386:	7afb      	ldrb	r3, [r7, #11]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d034      	beq.n	80103f6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801038c:	7afb      	ldrb	r3, [r7, #11]
 801038e:	3b01      	subs	r3, #1
 8010390:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8010392:	2300      	movs	r3, #0
 8010394:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010396:	2300      	movs	r3, #0
 8010398:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801039a:	4b19      	ldr	r3, [pc, #100]	; (8010400 <tcp_kill_prio+0x94>)
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	617b      	str	r3, [r7, #20]
 80103a0:	e01f      	b.n	80103e2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80103a2:	697b      	ldr	r3, [r7, #20]
 80103a4:	7d5b      	ldrb	r3, [r3, #21]
 80103a6:	7afa      	ldrb	r2, [r7, #11]
 80103a8:	429a      	cmp	r2, r3
 80103aa:	d80c      	bhi.n	80103c6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80103ac:	697b      	ldr	r3, [r7, #20]
 80103ae:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80103b0:	7afa      	ldrb	r2, [r7, #11]
 80103b2:	429a      	cmp	r2, r3
 80103b4:	d112      	bne.n	80103dc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80103b6:	4b13      	ldr	r3, [pc, #76]	; (8010404 <tcp_kill_prio+0x98>)
 80103b8:	681a      	ldr	r2, [r3, #0]
 80103ba:	697b      	ldr	r3, [r7, #20]
 80103bc:	6a1b      	ldr	r3, [r3, #32]
 80103be:	1ad3      	subs	r3, r2, r3
 80103c0:	68fa      	ldr	r2, [r7, #12]
 80103c2:	429a      	cmp	r2, r3
 80103c4:	d80a      	bhi.n	80103dc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80103c6:	4b0f      	ldr	r3, [pc, #60]	; (8010404 <tcp_kill_prio+0x98>)
 80103c8:	681a      	ldr	r2, [r3, #0]
 80103ca:	697b      	ldr	r3, [r7, #20]
 80103cc:	6a1b      	ldr	r3, [r3, #32]
 80103ce:	1ad3      	subs	r3, r2, r3
 80103d0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80103d2:	697b      	ldr	r3, [r7, #20]
 80103d4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	7d5b      	ldrb	r3, [r3, #21]
 80103da:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80103dc:	697b      	ldr	r3, [r7, #20]
 80103de:	68db      	ldr	r3, [r3, #12]
 80103e0:	617b      	str	r3, [r7, #20]
 80103e2:	697b      	ldr	r3, [r7, #20]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d1dc      	bne.n	80103a2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80103e8:	693b      	ldr	r3, [r7, #16]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d004      	beq.n	80103f8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80103ee:	6938      	ldr	r0, [r7, #16]
 80103f0:	f7ff f87e 	bl	800f4f0 <tcp_abort>
 80103f4:	e000      	b.n	80103f8 <tcp_kill_prio+0x8c>
    return;
 80103f6:	bf00      	nop
  }
}
 80103f8:	3718      	adds	r7, #24
 80103fa:	46bd      	mov	sp, r7
 80103fc:	bd80      	pop	{r7, pc}
 80103fe:	bf00      	nop
 8010400:	20018ba4 	.word	0x20018ba4
 8010404:	20018ba8 	.word	0x20018ba8

08010408 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b086      	sub	sp, #24
 801040c:	af00      	add	r7, sp, #0
 801040e:	4603      	mov	r3, r0
 8010410:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010412:	79fb      	ldrb	r3, [r7, #7]
 8010414:	2b08      	cmp	r3, #8
 8010416:	d009      	beq.n	801042c <tcp_kill_state+0x24>
 8010418:	79fb      	ldrb	r3, [r7, #7]
 801041a:	2b09      	cmp	r3, #9
 801041c:	d006      	beq.n	801042c <tcp_kill_state+0x24>
 801041e:	4b1a      	ldr	r3, [pc, #104]	; (8010488 <tcp_kill_state+0x80>)
 8010420:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010424:	4919      	ldr	r1, [pc, #100]	; (801048c <tcp_kill_state+0x84>)
 8010426:	481a      	ldr	r0, [pc, #104]	; (8010490 <tcp_kill_state+0x88>)
 8010428:	f007 fee2 	bl	80181f0 <iprintf>

  inactivity = 0;
 801042c:	2300      	movs	r3, #0
 801042e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010430:	2300      	movs	r3, #0
 8010432:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010434:	4b17      	ldr	r3, [pc, #92]	; (8010494 <tcp_kill_state+0x8c>)
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	617b      	str	r3, [r7, #20]
 801043a:	e017      	b.n	801046c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801043c:	697b      	ldr	r3, [r7, #20]
 801043e:	7d1b      	ldrb	r3, [r3, #20]
 8010440:	79fa      	ldrb	r2, [r7, #7]
 8010442:	429a      	cmp	r2, r3
 8010444:	d10f      	bne.n	8010466 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010446:	4b14      	ldr	r3, [pc, #80]	; (8010498 <tcp_kill_state+0x90>)
 8010448:	681a      	ldr	r2, [r3, #0]
 801044a:	697b      	ldr	r3, [r7, #20]
 801044c:	6a1b      	ldr	r3, [r3, #32]
 801044e:	1ad3      	subs	r3, r2, r3
 8010450:	68fa      	ldr	r2, [r7, #12]
 8010452:	429a      	cmp	r2, r3
 8010454:	d807      	bhi.n	8010466 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010456:	4b10      	ldr	r3, [pc, #64]	; (8010498 <tcp_kill_state+0x90>)
 8010458:	681a      	ldr	r2, [r3, #0]
 801045a:	697b      	ldr	r3, [r7, #20]
 801045c:	6a1b      	ldr	r3, [r3, #32]
 801045e:	1ad3      	subs	r3, r2, r3
 8010460:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010462:	697b      	ldr	r3, [r7, #20]
 8010464:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010466:	697b      	ldr	r3, [r7, #20]
 8010468:	68db      	ldr	r3, [r3, #12]
 801046a:	617b      	str	r3, [r7, #20]
 801046c:	697b      	ldr	r3, [r7, #20]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d1e4      	bne.n	801043c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8010472:	693b      	ldr	r3, [r7, #16]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d003      	beq.n	8010480 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010478:	2100      	movs	r1, #0
 801047a:	6938      	ldr	r0, [r7, #16]
 801047c:	f7fe ff7a 	bl	800f374 <tcp_abandon>
  }
}
 8010480:	bf00      	nop
 8010482:	3718      	adds	r7, #24
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}
 8010488:	0801b738 	.word	0x0801b738
 801048c:	0801bcc4 	.word	0x0801bcc4
 8010490:	0801b77c 	.word	0x0801b77c
 8010494:	20018ba4 	.word	0x20018ba4
 8010498:	20018ba8 	.word	0x20018ba8

0801049c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801049c:	b580      	push	{r7, lr}
 801049e:	b084      	sub	sp, #16
 80104a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80104a2:	2300      	movs	r3, #0
 80104a4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80104a6:	2300      	movs	r3, #0
 80104a8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80104aa:	4b12      	ldr	r3, [pc, #72]	; (80104f4 <tcp_kill_timewait+0x58>)
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	60fb      	str	r3, [r7, #12]
 80104b0:	e012      	b.n	80104d8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80104b2:	4b11      	ldr	r3, [pc, #68]	; (80104f8 <tcp_kill_timewait+0x5c>)
 80104b4:	681a      	ldr	r2, [r3, #0]
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	6a1b      	ldr	r3, [r3, #32]
 80104ba:	1ad3      	subs	r3, r2, r3
 80104bc:	687a      	ldr	r2, [r7, #4]
 80104be:	429a      	cmp	r2, r3
 80104c0:	d807      	bhi.n	80104d2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80104c2:	4b0d      	ldr	r3, [pc, #52]	; (80104f8 <tcp_kill_timewait+0x5c>)
 80104c4:	681a      	ldr	r2, [r3, #0]
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	6a1b      	ldr	r3, [r3, #32]
 80104ca:	1ad3      	subs	r3, r2, r3
 80104cc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	68db      	ldr	r3, [r3, #12]
 80104d6:	60fb      	str	r3, [r7, #12]
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d1e9      	bne.n	80104b2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80104de:	68bb      	ldr	r3, [r7, #8]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d002      	beq.n	80104ea <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80104e4:	68b8      	ldr	r0, [r7, #8]
 80104e6:	f7ff f803 	bl	800f4f0 <tcp_abort>
  }
}
 80104ea:	bf00      	nop
 80104ec:	3710      	adds	r7, #16
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}
 80104f2:	bf00      	nop
 80104f4:	20018bb4 	.word	0x20018bb4
 80104f8:	20018ba8 	.word	0x20018ba8

080104fc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b082      	sub	sp, #8
 8010500:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010502:	4b10      	ldr	r3, [pc, #64]	; (8010544 <tcp_handle_closepend+0x48>)
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010508:	e014      	b.n	8010534 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	68db      	ldr	r3, [r3, #12]
 801050e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	8b5b      	ldrh	r3, [r3, #26]
 8010514:	f003 0308 	and.w	r3, r3, #8
 8010518:	2b00      	cmp	r3, #0
 801051a:	d009      	beq.n	8010530 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	8b5b      	ldrh	r3, [r3, #26]
 8010520:	f023 0308 	bic.w	r3, r3, #8
 8010524:	b29a      	uxth	r2, r3
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801052a:	6878      	ldr	r0, [r7, #4]
 801052c:	f7fe fe8c 	bl	800f248 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d1e7      	bne.n	801050a <tcp_handle_closepend+0xe>
  }
}
 801053a:	bf00      	nop
 801053c:	bf00      	nop
 801053e:	3708      	adds	r7, #8
 8010540:	46bd      	mov	sp, r7
 8010542:	bd80      	pop	{r7, pc}
 8010544:	20018ba4 	.word	0x20018ba4

08010548 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b084      	sub	sp, #16
 801054c:	af00      	add	r7, sp, #0
 801054e:	4603      	mov	r3, r0
 8010550:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010552:	2001      	movs	r0, #1
 8010554:	f7fd fb42 	bl	800dbdc <memp_malloc>
 8010558:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d126      	bne.n	80105ae <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010560:	f7ff ffcc 	bl	80104fc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010564:	f7ff ff9a 	bl	801049c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010568:	2001      	movs	r0, #1
 801056a:	f7fd fb37 	bl	800dbdc <memp_malloc>
 801056e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d11b      	bne.n	80105ae <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010576:	2009      	movs	r0, #9
 8010578:	f7ff ff46 	bl	8010408 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801057c:	2001      	movs	r0, #1
 801057e:	f7fd fb2d 	bl	800dbdc <memp_malloc>
 8010582:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d111      	bne.n	80105ae <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801058a:	2008      	movs	r0, #8
 801058c:	f7ff ff3c 	bl	8010408 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010590:	2001      	movs	r0, #1
 8010592:	f7fd fb23 	bl	800dbdc <memp_malloc>
 8010596:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d107      	bne.n	80105ae <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801059e:	79fb      	ldrb	r3, [r7, #7]
 80105a0:	4618      	mov	r0, r3
 80105a2:	f7ff fee3 	bl	801036c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80105a6:	2001      	movs	r0, #1
 80105a8:	f7fd fb18 	bl	800dbdc <memp_malloc>
 80105ac:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d03f      	beq.n	8010634 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80105b4:	229c      	movs	r2, #156	; 0x9c
 80105b6:	2100      	movs	r1, #0
 80105b8:	68f8      	ldr	r0, [r7, #12]
 80105ba:	f007 fd67 	bl	801808c <memset>
    pcb->prio = prio;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	79fa      	ldrb	r2, [r7, #7]
 80105c2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80105ca:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80105d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	22ff      	movs	r2, #255	; 0xff
 80105e2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80105ea:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	2206      	movs	r2, #6
 80105f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	2206      	movs	r2, #6
 80105f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010600:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	2201      	movs	r2, #1
 8010606:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801060a:	4b0d      	ldr	r3, [pc, #52]	; (8010640 <tcp_alloc+0xf8>)
 801060c:	681a      	ldr	r2, [r3, #0]
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010612:	4b0c      	ldr	r3, [pc, #48]	; (8010644 <tcp_alloc+0xfc>)
 8010614:	781a      	ldrb	r2, [r3, #0]
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010620:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	4a08      	ldr	r2, [pc, #32]	; (8010648 <tcp_alloc+0x100>)
 8010628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	4a07      	ldr	r2, [pc, #28]	; (801064c <tcp_alloc+0x104>)
 8010630:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010634:	68fb      	ldr	r3, [r7, #12]
}
 8010636:	4618      	mov	r0, r3
 8010638:	3710      	adds	r7, #16
 801063a:	46bd      	mov	sp, r7
 801063c:	bd80      	pop	{r7, pc}
 801063e:	bf00      	nop
 8010640:	20018ba8 	.word	0x20018ba8
 8010644:	2000528a 	.word	0x2000528a
 8010648:	08010301 	.word	0x08010301
 801064c:	006ddd00 	.word	0x006ddd00

08010650 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b084      	sub	sp, #16
 8010654:	af00      	add	r7, sp, #0
 8010656:	4603      	mov	r3, r0
 8010658:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801065a:	2040      	movs	r0, #64	; 0x40
 801065c:	f7ff ff74 	bl	8010548 <tcp_alloc>
 8010660:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8010662:	68fb      	ldr	r3, [r7, #12]
}
 8010664:	4618      	mov	r0, r3
 8010666:	3710      	adds	r7, #16
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}

0801066c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801066c:	b480      	push	{r7}
 801066e:	b083      	sub	sp, #12
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
 8010674:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d002      	beq.n	8010682 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	683a      	ldr	r2, [r7, #0]
 8010680:	611a      	str	r2, [r3, #16]
  }
}
 8010682:	bf00      	nop
 8010684:	370c      	adds	r7, #12
 8010686:	46bd      	mov	sp, r7
 8010688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068c:	4770      	bx	lr
	...

08010690 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8010690:	b580      	push	{r7, lr}
 8010692:	b082      	sub	sp, #8
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
 8010698:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d00e      	beq.n	80106be <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	7d1b      	ldrb	r3, [r3, #20]
 80106a4:	2b01      	cmp	r3, #1
 80106a6:	d106      	bne.n	80106b6 <tcp_recv+0x26>
 80106a8:	4b07      	ldr	r3, [pc, #28]	; (80106c8 <tcp_recv+0x38>)
 80106aa:	f240 72df 	movw	r2, #2015	; 0x7df
 80106ae:	4907      	ldr	r1, [pc, #28]	; (80106cc <tcp_recv+0x3c>)
 80106b0:	4807      	ldr	r0, [pc, #28]	; (80106d0 <tcp_recv+0x40>)
 80106b2:	f007 fd9d 	bl	80181f0 <iprintf>
    pcb->recv = recv;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	683a      	ldr	r2, [r7, #0]
 80106ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80106be:	bf00      	nop
 80106c0:	3708      	adds	r7, #8
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}
 80106c6:	bf00      	nop
 80106c8:	0801b738 	.word	0x0801b738
 80106cc:	0801bcd4 	.word	0x0801bcd4
 80106d0:	0801b77c 	.word	0x0801b77c

080106d4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b082      	sub	sp, #8
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
 80106dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d00e      	beq.n	8010702 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	7d1b      	ldrb	r3, [r3, #20]
 80106e8:	2b01      	cmp	r3, #1
 80106ea:	d106      	bne.n	80106fa <tcp_sent+0x26>
 80106ec:	4b07      	ldr	r3, [pc, #28]	; (801070c <tcp_sent+0x38>)
 80106ee:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80106f2:	4907      	ldr	r1, [pc, #28]	; (8010710 <tcp_sent+0x3c>)
 80106f4:	4807      	ldr	r0, [pc, #28]	; (8010714 <tcp_sent+0x40>)
 80106f6:	f007 fd7b 	bl	80181f0 <iprintf>
    pcb->sent = sent;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	683a      	ldr	r2, [r7, #0]
 80106fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8010702:	bf00      	nop
 8010704:	3708      	adds	r7, #8
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}
 801070a:	bf00      	nop
 801070c:	0801b738 	.word	0x0801b738
 8010710:	0801bcfc 	.word	0x0801bcfc
 8010714:	0801b77c 	.word	0x0801b77c

08010718 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b082      	sub	sp, #8
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
 8010720:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d00e      	beq.n	8010746 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	7d1b      	ldrb	r3, [r3, #20]
 801072c:	2b01      	cmp	r3, #1
 801072e:	d106      	bne.n	801073e <tcp_err+0x26>
 8010730:	4b07      	ldr	r3, [pc, #28]	; (8010750 <tcp_err+0x38>)
 8010732:	f640 020d 	movw	r2, #2061	; 0x80d
 8010736:	4907      	ldr	r1, [pc, #28]	; (8010754 <tcp_err+0x3c>)
 8010738:	4807      	ldr	r0, [pc, #28]	; (8010758 <tcp_err+0x40>)
 801073a:	f007 fd59 	bl	80181f0 <iprintf>
    pcb->errf = err;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	683a      	ldr	r2, [r7, #0]
 8010742:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8010746:	bf00      	nop
 8010748:	3708      	adds	r7, #8
 801074a:	46bd      	mov	sp, r7
 801074c:	bd80      	pop	{r7, pc}
 801074e:	bf00      	nop
 8010750:	0801b738 	.word	0x0801b738
 8010754:	0801bd24 	.word	0x0801bd24
 8010758:	0801b77c 	.word	0x0801b77c

0801075c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801075c:	b480      	push	{r7}
 801075e:	b085      	sub	sp, #20
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
 8010764:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d008      	beq.n	801077e <tcp_accept+0x22>
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	7d1b      	ldrb	r3, [r3, #20]
 8010770:	2b01      	cmp	r3, #1
 8010772:	d104      	bne.n	801077e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	683a      	ldr	r2, [r7, #0]
 801077c:	619a      	str	r2, [r3, #24]
  }
}
 801077e:	bf00      	nop
 8010780:	3714      	adds	r7, #20
 8010782:	46bd      	mov	sp, r7
 8010784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010788:	4770      	bx	lr
	...

0801078c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b084      	sub	sp, #16
 8010790:	af00      	add	r7, sp, #0
 8010792:	60f8      	str	r0, [r7, #12]
 8010794:	60b9      	str	r1, [r7, #8]
 8010796:	4613      	mov	r3, r2
 8010798:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d107      	bne.n	80107b0 <tcp_poll+0x24>
 80107a0:	4b0e      	ldr	r3, [pc, #56]	; (80107dc <tcp_poll+0x50>)
 80107a2:	f640 023d 	movw	r2, #2109	; 0x83d
 80107a6:	490e      	ldr	r1, [pc, #56]	; (80107e0 <tcp_poll+0x54>)
 80107a8:	480e      	ldr	r0, [pc, #56]	; (80107e4 <tcp_poll+0x58>)
 80107aa:	f007 fd21 	bl	80181f0 <iprintf>
 80107ae:	e011      	b.n	80107d4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	7d1b      	ldrb	r3, [r3, #20]
 80107b4:	2b01      	cmp	r3, #1
 80107b6:	d106      	bne.n	80107c6 <tcp_poll+0x3a>
 80107b8:	4b08      	ldr	r3, [pc, #32]	; (80107dc <tcp_poll+0x50>)
 80107ba:	f640 023e 	movw	r2, #2110	; 0x83e
 80107be:	490a      	ldr	r1, [pc, #40]	; (80107e8 <tcp_poll+0x5c>)
 80107c0:	4808      	ldr	r0, [pc, #32]	; (80107e4 <tcp_poll+0x58>)
 80107c2:	f007 fd15 	bl	80181f0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	68ba      	ldr	r2, [r7, #8]
 80107ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	79fa      	ldrb	r2, [r7, #7]
 80107d2:	775a      	strb	r2, [r3, #29]
}
 80107d4:	3710      	adds	r7, #16
 80107d6:	46bd      	mov	sp, r7
 80107d8:	bd80      	pop	{r7, pc}
 80107da:	bf00      	nop
 80107dc:	0801b738 	.word	0x0801b738
 80107e0:	0801bd4c 	.word	0x0801bd4c
 80107e4:	0801b77c 	.word	0x0801b77c
 80107e8:	0801bd64 	.word	0x0801bd64

080107ec <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b082      	sub	sp, #8
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d107      	bne.n	801080a <tcp_pcb_purge+0x1e>
 80107fa:	4b21      	ldr	r3, [pc, #132]	; (8010880 <tcp_pcb_purge+0x94>)
 80107fc:	f640 0251 	movw	r2, #2129	; 0x851
 8010800:	4920      	ldr	r1, [pc, #128]	; (8010884 <tcp_pcb_purge+0x98>)
 8010802:	4821      	ldr	r0, [pc, #132]	; (8010888 <tcp_pcb_purge+0x9c>)
 8010804:	f007 fcf4 	bl	80181f0 <iprintf>
 8010808:	e037      	b.n	801087a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	7d1b      	ldrb	r3, [r3, #20]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d033      	beq.n	801087a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010816:	2b0a      	cmp	r3, #10
 8010818:	d02f      	beq.n	801087a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801081e:	2b01      	cmp	r3, #1
 8010820:	d02b      	beq.n	801087a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010826:	2b00      	cmp	r3, #0
 8010828:	d007      	beq.n	801083a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801082e:	4618      	mov	r0, r3
 8010830:	f7fe f8ca 	bl	800e9c8 <pbuf_free>
      pcb->refused_data = NULL;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2200      	movs	r2, #0
 8010838:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801083e:	2b00      	cmp	r3, #0
 8010840:	d002      	beq.n	8010848 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010842:	6878      	ldr	r0, [r7, #4]
 8010844:	f000 f986 	bl	8010b54 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801084e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010854:	4618      	mov	r0, r3
 8010856:	f7ff fcdb 	bl	8010210 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801085e:	4618      	mov	r0, r3
 8010860:	f7ff fcd6 	bl	8010210 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	2200      	movs	r2, #0
 8010868:	66da      	str	r2, [r3, #108]	; 0x6c
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	2200      	movs	r2, #0
 8010876:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801087a:	3708      	adds	r7, #8
 801087c:	46bd      	mov	sp, r7
 801087e:	bd80      	pop	{r7, pc}
 8010880:	0801b738 	.word	0x0801b738
 8010884:	0801bd84 	.word	0x0801bd84
 8010888:	0801b77c 	.word	0x0801b77c

0801088c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b084      	sub	sp, #16
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
 8010894:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d106      	bne.n	80108aa <tcp_pcb_remove+0x1e>
 801089c:	4b3e      	ldr	r3, [pc, #248]	; (8010998 <tcp_pcb_remove+0x10c>)
 801089e:	f640 0283 	movw	r2, #2179	; 0x883
 80108a2:	493e      	ldr	r1, [pc, #248]	; (801099c <tcp_pcb_remove+0x110>)
 80108a4:	483e      	ldr	r0, [pc, #248]	; (80109a0 <tcp_pcb_remove+0x114>)
 80108a6:	f007 fca3 	bl	80181f0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d106      	bne.n	80108be <tcp_pcb_remove+0x32>
 80108b0:	4b39      	ldr	r3, [pc, #228]	; (8010998 <tcp_pcb_remove+0x10c>)
 80108b2:	f640 0284 	movw	r2, #2180	; 0x884
 80108b6:	493b      	ldr	r1, [pc, #236]	; (80109a4 <tcp_pcb_remove+0x118>)
 80108b8:	4839      	ldr	r0, [pc, #228]	; (80109a0 <tcp_pcb_remove+0x114>)
 80108ba:	f007 fc99 	bl	80181f0 <iprintf>

  TCP_RMV(pcblist, pcb);
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	683a      	ldr	r2, [r7, #0]
 80108c4:	429a      	cmp	r2, r3
 80108c6:	d105      	bne.n	80108d4 <tcp_pcb_remove+0x48>
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	68da      	ldr	r2, [r3, #12]
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	601a      	str	r2, [r3, #0]
 80108d2:	e013      	b.n	80108fc <tcp_pcb_remove+0x70>
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	60fb      	str	r3, [r7, #12]
 80108da:	e00c      	b.n	80108f6 <tcp_pcb_remove+0x6a>
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	68db      	ldr	r3, [r3, #12]
 80108e0:	683a      	ldr	r2, [r7, #0]
 80108e2:	429a      	cmp	r2, r3
 80108e4:	d104      	bne.n	80108f0 <tcp_pcb_remove+0x64>
 80108e6:	683b      	ldr	r3, [r7, #0]
 80108e8:	68da      	ldr	r2, [r3, #12]
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	60da      	str	r2, [r3, #12]
 80108ee:	e005      	b.n	80108fc <tcp_pcb_remove+0x70>
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	68db      	ldr	r3, [r3, #12]
 80108f4:	60fb      	str	r3, [r7, #12]
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d1ef      	bne.n	80108dc <tcp_pcb_remove+0x50>
 80108fc:	683b      	ldr	r3, [r7, #0]
 80108fe:	2200      	movs	r2, #0
 8010900:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8010902:	6838      	ldr	r0, [r7, #0]
 8010904:	f7ff ff72 	bl	80107ec <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010908:	683b      	ldr	r3, [r7, #0]
 801090a:	7d1b      	ldrb	r3, [r3, #20]
 801090c:	2b0a      	cmp	r3, #10
 801090e:	d013      	beq.n	8010938 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010914:	2b01      	cmp	r3, #1
 8010916:	d00f      	beq.n	8010938 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	8b5b      	ldrh	r3, [r3, #26]
 801091c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010920:	2b00      	cmp	r3, #0
 8010922:	d009      	beq.n	8010938 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010924:	683b      	ldr	r3, [r7, #0]
 8010926:	8b5b      	ldrh	r3, [r3, #26]
 8010928:	f043 0302 	orr.w	r3, r3, #2
 801092c:	b29a      	uxth	r2, r3
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010932:	6838      	ldr	r0, [r7, #0]
 8010934:	f003 fbc2 	bl	80140bc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010938:	683b      	ldr	r3, [r7, #0]
 801093a:	7d1b      	ldrb	r3, [r3, #20]
 801093c:	2b01      	cmp	r3, #1
 801093e:	d020      	beq.n	8010982 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010940:	683b      	ldr	r3, [r7, #0]
 8010942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010944:	2b00      	cmp	r3, #0
 8010946:	d006      	beq.n	8010956 <tcp_pcb_remove+0xca>
 8010948:	4b13      	ldr	r3, [pc, #76]	; (8010998 <tcp_pcb_remove+0x10c>)
 801094a:	f640 0293 	movw	r2, #2195	; 0x893
 801094e:	4916      	ldr	r1, [pc, #88]	; (80109a8 <tcp_pcb_remove+0x11c>)
 8010950:	4813      	ldr	r0, [pc, #76]	; (80109a0 <tcp_pcb_remove+0x114>)
 8010952:	f007 fc4d 	bl	80181f0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010956:	683b      	ldr	r3, [r7, #0]
 8010958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801095a:	2b00      	cmp	r3, #0
 801095c:	d006      	beq.n	801096c <tcp_pcb_remove+0xe0>
 801095e:	4b0e      	ldr	r3, [pc, #56]	; (8010998 <tcp_pcb_remove+0x10c>)
 8010960:	f640 0294 	movw	r2, #2196	; 0x894
 8010964:	4911      	ldr	r1, [pc, #68]	; (80109ac <tcp_pcb_remove+0x120>)
 8010966:	480e      	ldr	r0, [pc, #56]	; (80109a0 <tcp_pcb_remove+0x114>)
 8010968:	f007 fc42 	bl	80181f0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801096c:	683b      	ldr	r3, [r7, #0]
 801096e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010970:	2b00      	cmp	r3, #0
 8010972:	d006      	beq.n	8010982 <tcp_pcb_remove+0xf6>
 8010974:	4b08      	ldr	r3, [pc, #32]	; (8010998 <tcp_pcb_remove+0x10c>)
 8010976:	f640 0296 	movw	r2, #2198	; 0x896
 801097a:	490d      	ldr	r1, [pc, #52]	; (80109b0 <tcp_pcb_remove+0x124>)
 801097c:	4808      	ldr	r0, [pc, #32]	; (80109a0 <tcp_pcb_remove+0x114>)
 801097e:	f007 fc37 	bl	80181f0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8010982:	683b      	ldr	r3, [r7, #0]
 8010984:	2200      	movs	r2, #0
 8010986:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010988:	683b      	ldr	r3, [r7, #0]
 801098a:	2200      	movs	r2, #0
 801098c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801098e:	bf00      	nop
 8010990:	3710      	adds	r7, #16
 8010992:	46bd      	mov	sp, r7
 8010994:	bd80      	pop	{r7, pc}
 8010996:	bf00      	nop
 8010998:	0801b738 	.word	0x0801b738
 801099c:	0801bda0 	.word	0x0801bda0
 80109a0:	0801b77c 	.word	0x0801b77c
 80109a4:	0801bdbc 	.word	0x0801bdbc
 80109a8:	0801bddc 	.word	0x0801bddc
 80109ac:	0801bdf4 	.word	0x0801bdf4
 80109b0:	0801be10 	.word	0x0801be10

080109b4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b082      	sub	sp, #8
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d106      	bne.n	80109d0 <tcp_next_iss+0x1c>
 80109c2:	4b0a      	ldr	r3, [pc, #40]	; (80109ec <tcp_next_iss+0x38>)
 80109c4:	f640 02af 	movw	r2, #2223	; 0x8af
 80109c8:	4909      	ldr	r1, [pc, #36]	; (80109f0 <tcp_next_iss+0x3c>)
 80109ca:	480a      	ldr	r0, [pc, #40]	; (80109f4 <tcp_next_iss+0x40>)
 80109cc:	f007 fc10 	bl	80181f0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80109d0:	4b09      	ldr	r3, [pc, #36]	; (80109f8 <tcp_next_iss+0x44>)
 80109d2:	681a      	ldr	r2, [r3, #0]
 80109d4:	4b09      	ldr	r3, [pc, #36]	; (80109fc <tcp_next_iss+0x48>)
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	4413      	add	r3, r2
 80109da:	4a07      	ldr	r2, [pc, #28]	; (80109f8 <tcp_next_iss+0x44>)
 80109dc:	6013      	str	r3, [r2, #0]
  return iss;
 80109de:	4b06      	ldr	r3, [pc, #24]	; (80109f8 <tcp_next_iss+0x44>)
 80109e0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80109e2:	4618      	mov	r0, r3
 80109e4:	3708      	adds	r7, #8
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bd80      	pop	{r7, pc}
 80109ea:	bf00      	nop
 80109ec:	0801b738 	.word	0x0801b738
 80109f0:	0801be28 	.word	0x0801be28
 80109f4:	0801b77c 	.word	0x0801b77c
 80109f8:	20000728 	.word	0x20000728
 80109fc:	20018ba8 	.word	0x20018ba8

08010a00 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b086      	sub	sp, #24
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	4603      	mov	r3, r0
 8010a08:	60b9      	str	r1, [r7, #8]
 8010a0a:	607a      	str	r2, [r7, #4]
 8010a0c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d106      	bne.n	8010a22 <tcp_eff_send_mss_netif+0x22>
 8010a14:	4b14      	ldr	r3, [pc, #80]	; (8010a68 <tcp_eff_send_mss_netif+0x68>)
 8010a16:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8010a1a:	4914      	ldr	r1, [pc, #80]	; (8010a6c <tcp_eff_send_mss_netif+0x6c>)
 8010a1c:	4814      	ldr	r0, [pc, #80]	; (8010a70 <tcp_eff_send_mss_netif+0x70>)
 8010a1e:	f007 fbe7 	bl	80181f0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8010a22:	68bb      	ldr	r3, [r7, #8]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d101      	bne.n	8010a2c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010a28:	89fb      	ldrh	r3, [r7, #14]
 8010a2a:	e019      	b.n	8010a60 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010a2c:	68bb      	ldr	r3, [r7, #8]
 8010a2e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010a30:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8010a32:	8afb      	ldrh	r3, [r7, #22]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d012      	beq.n	8010a5e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010a38:	2328      	movs	r3, #40	; 0x28
 8010a3a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010a3c:	8afa      	ldrh	r2, [r7, #22]
 8010a3e:	8abb      	ldrh	r3, [r7, #20]
 8010a40:	429a      	cmp	r2, r3
 8010a42:	d904      	bls.n	8010a4e <tcp_eff_send_mss_netif+0x4e>
 8010a44:	8afa      	ldrh	r2, [r7, #22]
 8010a46:	8abb      	ldrh	r3, [r7, #20]
 8010a48:	1ad3      	subs	r3, r2, r3
 8010a4a:	b29b      	uxth	r3, r3
 8010a4c:	e000      	b.n	8010a50 <tcp_eff_send_mss_netif+0x50>
 8010a4e:	2300      	movs	r3, #0
 8010a50:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010a52:	8a7a      	ldrh	r2, [r7, #18]
 8010a54:	89fb      	ldrh	r3, [r7, #14]
 8010a56:	4293      	cmp	r3, r2
 8010a58:	bf28      	it	cs
 8010a5a:	4613      	movcs	r3, r2
 8010a5c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8010a5e:	89fb      	ldrh	r3, [r7, #14]
}
 8010a60:	4618      	mov	r0, r3
 8010a62:	3718      	adds	r7, #24
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd80      	pop	{r7, pc}
 8010a68:	0801b738 	.word	0x0801b738
 8010a6c:	0801be44 	.word	0x0801be44
 8010a70:	0801b77c 	.word	0x0801b77c

08010a74 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b084      	sub	sp, #16
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
 8010a7c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8010a7e:	683b      	ldr	r3, [r7, #0]
 8010a80:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d119      	bne.n	8010abc <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010a88:	4b10      	ldr	r3, [pc, #64]	; (8010acc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8010a8a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8010a8e:	4910      	ldr	r1, [pc, #64]	; (8010ad0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010a90:	4810      	ldr	r0, [pc, #64]	; (8010ad4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8010a92:	f007 fbad 	bl	80181f0 <iprintf>

  while (pcb != NULL) {
 8010a96:	e011      	b.n	8010abc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	681a      	ldr	r2, [r3, #0]
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	429a      	cmp	r2, r3
 8010aa2:	d108      	bne.n	8010ab6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	68db      	ldr	r3, [r3, #12]
 8010aa8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8010aaa:	68f8      	ldr	r0, [r7, #12]
 8010aac:	f7fe fd20 	bl	800f4f0 <tcp_abort>
      pcb = next;
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	60fb      	str	r3, [r7, #12]
 8010ab4:	e002      	b.n	8010abc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	68db      	ldr	r3, [r3, #12]
 8010aba:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d1ea      	bne.n	8010a98 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010ac2:	bf00      	nop
 8010ac4:	bf00      	nop
 8010ac6:	3710      	adds	r7, #16
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	bd80      	pop	{r7, pc}
 8010acc:	0801b738 	.word	0x0801b738
 8010ad0:	0801be6c 	.word	0x0801be6c
 8010ad4:	0801b77c 	.word	0x0801b77c

08010ad8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b084      	sub	sp, #16
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
 8010ae0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d02a      	beq.n	8010b3e <tcp_netif_ip_addr_changed+0x66>
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d026      	beq.n	8010b3e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010af0:	4b15      	ldr	r3, [pc, #84]	; (8010b48 <tcp_netif_ip_addr_changed+0x70>)
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	4619      	mov	r1, r3
 8010af6:	6878      	ldr	r0, [r7, #4]
 8010af8:	f7ff ffbc 	bl	8010a74 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010afc:	4b13      	ldr	r3, [pc, #76]	; (8010b4c <tcp_netif_ip_addr_changed+0x74>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	4619      	mov	r1, r3
 8010b02:	6878      	ldr	r0, [r7, #4]
 8010b04:	f7ff ffb6 	bl	8010a74 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010b08:	683b      	ldr	r3, [r7, #0]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d017      	beq.n	8010b3e <tcp_netif_ip_addr_changed+0x66>
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d013      	beq.n	8010b3e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010b16:	4b0e      	ldr	r3, [pc, #56]	; (8010b50 <tcp_netif_ip_addr_changed+0x78>)
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	60fb      	str	r3, [r7, #12]
 8010b1c:	e00c      	b.n	8010b38 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	681a      	ldr	r2, [r3, #0]
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	429a      	cmp	r2, r3
 8010b28:	d103      	bne.n	8010b32 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010b2a:	683b      	ldr	r3, [r7, #0]
 8010b2c:	681a      	ldr	r2, [r3, #0]
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	68db      	ldr	r3, [r3, #12]
 8010b36:	60fb      	str	r3, [r7, #12]
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d1ef      	bne.n	8010b1e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010b3e:	bf00      	nop
 8010b40:	3710      	adds	r7, #16
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}
 8010b46:	bf00      	nop
 8010b48:	20018ba4 	.word	0x20018ba4
 8010b4c:	20018bb0 	.word	0x20018bb0
 8010b50:	20018bac 	.word	0x20018bac

08010b54 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b082      	sub	sp, #8
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d007      	beq.n	8010b74 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f7ff fb51 	bl	8010210 <tcp_segs_free>
    pcb->ooseq = NULL;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	2200      	movs	r2, #0
 8010b72:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010b74:	bf00      	nop
 8010b76:	3708      	adds	r7, #8
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}

08010b7c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010b7c:	b590      	push	{r4, r7, lr}
 8010b7e:	b08d      	sub	sp, #52	; 0x34
 8010b80:	af04      	add	r7, sp, #16
 8010b82:	6078      	str	r0, [r7, #4]
 8010b84:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d105      	bne.n	8010b98 <tcp_input+0x1c>
 8010b8c:	4b9b      	ldr	r3, [pc, #620]	; (8010dfc <tcp_input+0x280>)
 8010b8e:	2283      	movs	r2, #131	; 0x83
 8010b90:	499b      	ldr	r1, [pc, #620]	; (8010e00 <tcp_input+0x284>)
 8010b92:	489c      	ldr	r0, [pc, #624]	; (8010e04 <tcp_input+0x288>)
 8010b94:	f007 fb2c 	bl	80181f0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	685b      	ldr	r3, [r3, #4]
 8010b9c:	4a9a      	ldr	r2, [pc, #616]	; (8010e08 <tcp_input+0x28c>)
 8010b9e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	895b      	ldrh	r3, [r3, #10]
 8010ba4:	2b13      	cmp	r3, #19
 8010ba6:	f240 83c4 	bls.w	8011332 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010baa:	4b98      	ldr	r3, [pc, #608]	; (8010e0c <tcp_input+0x290>)
 8010bac:	695b      	ldr	r3, [r3, #20]
 8010bae:	4a97      	ldr	r2, [pc, #604]	; (8010e0c <tcp_input+0x290>)
 8010bb0:	6812      	ldr	r2, [r2, #0]
 8010bb2:	4611      	mov	r1, r2
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f006 f89b 	bl	8016cf0 <ip4_addr_isbroadcast_u32>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	f040 83ba 	bne.w	8011336 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010bc2:	4b92      	ldr	r3, [pc, #584]	; (8010e0c <tcp_input+0x290>)
 8010bc4:	695b      	ldr	r3, [r3, #20]
 8010bc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010bca:	2be0      	cmp	r3, #224	; 0xe0
 8010bcc:	f000 83b3 	beq.w	8011336 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010bd0:	4b8d      	ldr	r3, [pc, #564]	; (8010e08 <tcp_input+0x28c>)
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	899b      	ldrh	r3, [r3, #12]
 8010bd6:	b29b      	uxth	r3, r3
 8010bd8:	4618      	mov	r0, r3
 8010bda:	f7fc fa6b 	bl	800d0b4 <lwip_htons>
 8010bde:	4603      	mov	r3, r0
 8010be0:	0b1b      	lsrs	r3, r3, #12
 8010be2:	b29b      	uxth	r3, r3
 8010be4:	b2db      	uxtb	r3, r3
 8010be6:	009b      	lsls	r3, r3, #2
 8010be8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010bea:	7cbb      	ldrb	r3, [r7, #18]
 8010bec:	2b13      	cmp	r3, #19
 8010bee:	f240 83a4 	bls.w	801133a <tcp_input+0x7be>
 8010bf2:	7cbb      	ldrb	r3, [r7, #18]
 8010bf4:	b29a      	uxth	r2, r3
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	891b      	ldrh	r3, [r3, #8]
 8010bfa:	429a      	cmp	r2, r3
 8010bfc:	f200 839d 	bhi.w	801133a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010c00:	7cbb      	ldrb	r3, [r7, #18]
 8010c02:	b29b      	uxth	r3, r3
 8010c04:	3b14      	subs	r3, #20
 8010c06:	b29a      	uxth	r2, r3
 8010c08:	4b81      	ldr	r3, [pc, #516]	; (8010e10 <tcp_input+0x294>)
 8010c0a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010c0c:	4b81      	ldr	r3, [pc, #516]	; (8010e14 <tcp_input+0x298>)
 8010c0e:	2200      	movs	r2, #0
 8010c10:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	895a      	ldrh	r2, [r3, #10]
 8010c16:	7cbb      	ldrb	r3, [r7, #18]
 8010c18:	b29b      	uxth	r3, r3
 8010c1a:	429a      	cmp	r2, r3
 8010c1c:	d309      	bcc.n	8010c32 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010c1e:	4b7c      	ldr	r3, [pc, #496]	; (8010e10 <tcp_input+0x294>)
 8010c20:	881a      	ldrh	r2, [r3, #0]
 8010c22:	4b7d      	ldr	r3, [pc, #500]	; (8010e18 <tcp_input+0x29c>)
 8010c24:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010c26:	7cbb      	ldrb	r3, [r7, #18]
 8010c28:	4619      	mov	r1, r3
 8010c2a:	6878      	ldr	r0, [r7, #4]
 8010c2c:	f7fd fe46 	bl	800e8bc <pbuf_remove_header>
 8010c30:	e04e      	b.n	8010cd0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d105      	bne.n	8010c46 <tcp_input+0xca>
 8010c3a:	4b70      	ldr	r3, [pc, #448]	; (8010dfc <tcp_input+0x280>)
 8010c3c:	22c2      	movs	r2, #194	; 0xc2
 8010c3e:	4977      	ldr	r1, [pc, #476]	; (8010e1c <tcp_input+0x2a0>)
 8010c40:	4870      	ldr	r0, [pc, #448]	; (8010e04 <tcp_input+0x288>)
 8010c42:	f007 fad5 	bl	80181f0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010c46:	2114      	movs	r1, #20
 8010c48:	6878      	ldr	r0, [r7, #4]
 8010c4a:	f7fd fe37 	bl	800e8bc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	895a      	ldrh	r2, [r3, #10]
 8010c52:	4b71      	ldr	r3, [pc, #452]	; (8010e18 <tcp_input+0x29c>)
 8010c54:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010c56:	4b6e      	ldr	r3, [pc, #440]	; (8010e10 <tcp_input+0x294>)
 8010c58:	881a      	ldrh	r2, [r3, #0]
 8010c5a:	4b6f      	ldr	r3, [pc, #444]	; (8010e18 <tcp_input+0x29c>)
 8010c5c:	881b      	ldrh	r3, [r3, #0]
 8010c5e:	1ad3      	subs	r3, r2, r3
 8010c60:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010c62:	4b6d      	ldr	r3, [pc, #436]	; (8010e18 <tcp_input+0x29c>)
 8010c64:	881b      	ldrh	r3, [r3, #0]
 8010c66:	4619      	mov	r1, r3
 8010c68:	6878      	ldr	r0, [r7, #4]
 8010c6a:	f7fd fe27 	bl	800e8bc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	895b      	ldrh	r3, [r3, #10]
 8010c74:	8a3a      	ldrh	r2, [r7, #16]
 8010c76:	429a      	cmp	r2, r3
 8010c78:	f200 8361 	bhi.w	801133e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	685b      	ldr	r3, [r3, #4]
 8010c82:	4a64      	ldr	r2, [pc, #400]	; (8010e14 <tcp_input+0x298>)
 8010c84:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	8a3a      	ldrh	r2, [r7, #16]
 8010c8c:	4611      	mov	r1, r2
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f7fd fe14 	bl	800e8bc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	891a      	ldrh	r2, [r3, #8]
 8010c98:	8a3b      	ldrh	r3, [r7, #16]
 8010c9a:	1ad3      	subs	r3, r2, r3
 8010c9c:	b29a      	uxth	r2, r3
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	895b      	ldrh	r3, [r3, #10]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d005      	beq.n	8010cb6 <tcp_input+0x13a>
 8010caa:	4b54      	ldr	r3, [pc, #336]	; (8010dfc <tcp_input+0x280>)
 8010cac:	22df      	movs	r2, #223	; 0xdf
 8010cae:	495c      	ldr	r1, [pc, #368]	; (8010e20 <tcp_input+0x2a4>)
 8010cb0:	4854      	ldr	r0, [pc, #336]	; (8010e04 <tcp_input+0x288>)
 8010cb2:	f007 fa9d 	bl	80181f0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	891a      	ldrh	r2, [r3, #8]
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	891b      	ldrh	r3, [r3, #8]
 8010cc0:	429a      	cmp	r2, r3
 8010cc2:	d005      	beq.n	8010cd0 <tcp_input+0x154>
 8010cc4:	4b4d      	ldr	r3, [pc, #308]	; (8010dfc <tcp_input+0x280>)
 8010cc6:	22e0      	movs	r2, #224	; 0xe0
 8010cc8:	4956      	ldr	r1, [pc, #344]	; (8010e24 <tcp_input+0x2a8>)
 8010cca:	484e      	ldr	r0, [pc, #312]	; (8010e04 <tcp_input+0x288>)
 8010ccc:	f007 fa90 	bl	80181f0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010cd0:	4b4d      	ldr	r3, [pc, #308]	; (8010e08 <tcp_input+0x28c>)
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	881b      	ldrh	r3, [r3, #0]
 8010cd6:	b29b      	uxth	r3, r3
 8010cd8:	4a4b      	ldr	r2, [pc, #300]	; (8010e08 <tcp_input+0x28c>)
 8010cda:	6814      	ldr	r4, [r2, #0]
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f7fc f9e9 	bl	800d0b4 <lwip_htons>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010ce6:	4b48      	ldr	r3, [pc, #288]	; (8010e08 <tcp_input+0x28c>)
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	885b      	ldrh	r3, [r3, #2]
 8010cec:	b29b      	uxth	r3, r3
 8010cee:	4a46      	ldr	r2, [pc, #280]	; (8010e08 <tcp_input+0x28c>)
 8010cf0:	6814      	ldr	r4, [r2, #0]
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	f7fc f9de 	bl	800d0b4 <lwip_htons>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010cfc:	4b42      	ldr	r3, [pc, #264]	; (8010e08 <tcp_input+0x28c>)
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	685b      	ldr	r3, [r3, #4]
 8010d02:	4a41      	ldr	r2, [pc, #260]	; (8010e08 <tcp_input+0x28c>)
 8010d04:	6814      	ldr	r4, [r2, #0]
 8010d06:	4618      	mov	r0, r3
 8010d08:	f7fc f9e9 	bl	800d0de <lwip_htonl>
 8010d0c:	4603      	mov	r3, r0
 8010d0e:	6063      	str	r3, [r4, #4]
 8010d10:	6863      	ldr	r3, [r4, #4]
 8010d12:	4a45      	ldr	r2, [pc, #276]	; (8010e28 <tcp_input+0x2ac>)
 8010d14:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010d16:	4b3c      	ldr	r3, [pc, #240]	; (8010e08 <tcp_input+0x28c>)
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	689b      	ldr	r3, [r3, #8]
 8010d1c:	4a3a      	ldr	r2, [pc, #232]	; (8010e08 <tcp_input+0x28c>)
 8010d1e:	6814      	ldr	r4, [r2, #0]
 8010d20:	4618      	mov	r0, r3
 8010d22:	f7fc f9dc 	bl	800d0de <lwip_htonl>
 8010d26:	4603      	mov	r3, r0
 8010d28:	60a3      	str	r3, [r4, #8]
 8010d2a:	68a3      	ldr	r3, [r4, #8]
 8010d2c:	4a3f      	ldr	r2, [pc, #252]	; (8010e2c <tcp_input+0x2b0>)
 8010d2e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010d30:	4b35      	ldr	r3, [pc, #212]	; (8010e08 <tcp_input+0x28c>)
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	89db      	ldrh	r3, [r3, #14]
 8010d36:	b29b      	uxth	r3, r3
 8010d38:	4a33      	ldr	r2, [pc, #204]	; (8010e08 <tcp_input+0x28c>)
 8010d3a:	6814      	ldr	r4, [r2, #0]
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f7fc f9b9 	bl	800d0b4 <lwip_htons>
 8010d42:	4603      	mov	r3, r0
 8010d44:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010d46:	4b30      	ldr	r3, [pc, #192]	; (8010e08 <tcp_input+0x28c>)
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	899b      	ldrh	r3, [r3, #12]
 8010d4c:	b29b      	uxth	r3, r3
 8010d4e:	4618      	mov	r0, r3
 8010d50:	f7fc f9b0 	bl	800d0b4 <lwip_htons>
 8010d54:	4603      	mov	r3, r0
 8010d56:	b2db      	uxtb	r3, r3
 8010d58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010d5c:	b2da      	uxtb	r2, r3
 8010d5e:	4b34      	ldr	r3, [pc, #208]	; (8010e30 <tcp_input+0x2b4>)
 8010d60:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	891a      	ldrh	r2, [r3, #8]
 8010d66:	4b33      	ldr	r3, [pc, #204]	; (8010e34 <tcp_input+0x2b8>)
 8010d68:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010d6a:	4b31      	ldr	r3, [pc, #196]	; (8010e30 <tcp_input+0x2b4>)
 8010d6c:	781b      	ldrb	r3, [r3, #0]
 8010d6e:	f003 0303 	and.w	r3, r3, #3
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d00c      	beq.n	8010d90 <tcp_input+0x214>
    tcplen++;
 8010d76:	4b2f      	ldr	r3, [pc, #188]	; (8010e34 <tcp_input+0x2b8>)
 8010d78:	881b      	ldrh	r3, [r3, #0]
 8010d7a:	3301      	adds	r3, #1
 8010d7c:	b29a      	uxth	r2, r3
 8010d7e:	4b2d      	ldr	r3, [pc, #180]	; (8010e34 <tcp_input+0x2b8>)
 8010d80:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	891a      	ldrh	r2, [r3, #8]
 8010d86:	4b2b      	ldr	r3, [pc, #172]	; (8010e34 <tcp_input+0x2b8>)
 8010d88:	881b      	ldrh	r3, [r3, #0]
 8010d8a:	429a      	cmp	r2, r3
 8010d8c:	f200 82d9 	bhi.w	8011342 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010d90:	2300      	movs	r3, #0
 8010d92:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010d94:	4b28      	ldr	r3, [pc, #160]	; (8010e38 <tcp_input+0x2bc>)
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	61fb      	str	r3, [r7, #28]
 8010d9a:	e09d      	b.n	8010ed8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010d9c:	69fb      	ldr	r3, [r7, #28]
 8010d9e:	7d1b      	ldrb	r3, [r3, #20]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d105      	bne.n	8010db0 <tcp_input+0x234>
 8010da4:	4b15      	ldr	r3, [pc, #84]	; (8010dfc <tcp_input+0x280>)
 8010da6:	22fb      	movs	r2, #251	; 0xfb
 8010da8:	4924      	ldr	r1, [pc, #144]	; (8010e3c <tcp_input+0x2c0>)
 8010daa:	4816      	ldr	r0, [pc, #88]	; (8010e04 <tcp_input+0x288>)
 8010dac:	f007 fa20 	bl	80181f0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010db0:	69fb      	ldr	r3, [r7, #28]
 8010db2:	7d1b      	ldrb	r3, [r3, #20]
 8010db4:	2b0a      	cmp	r3, #10
 8010db6:	d105      	bne.n	8010dc4 <tcp_input+0x248>
 8010db8:	4b10      	ldr	r3, [pc, #64]	; (8010dfc <tcp_input+0x280>)
 8010dba:	22fc      	movs	r2, #252	; 0xfc
 8010dbc:	4920      	ldr	r1, [pc, #128]	; (8010e40 <tcp_input+0x2c4>)
 8010dbe:	4811      	ldr	r0, [pc, #68]	; (8010e04 <tcp_input+0x288>)
 8010dc0:	f007 fa16 	bl	80181f0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010dc4:	69fb      	ldr	r3, [r7, #28]
 8010dc6:	7d1b      	ldrb	r3, [r3, #20]
 8010dc8:	2b01      	cmp	r3, #1
 8010dca:	d105      	bne.n	8010dd8 <tcp_input+0x25c>
 8010dcc:	4b0b      	ldr	r3, [pc, #44]	; (8010dfc <tcp_input+0x280>)
 8010dce:	22fd      	movs	r2, #253	; 0xfd
 8010dd0:	491c      	ldr	r1, [pc, #112]	; (8010e44 <tcp_input+0x2c8>)
 8010dd2:	480c      	ldr	r0, [pc, #48]	; (8010e04 <tcp_input+0x288>)
 8010dd4:	f007 fa0c 	bl	80181f0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010dd8:	69fb      	ldr	r3, [r7, #28]
 8010dda:	7a1b      	ldrb	r3, [r3, #8]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d033      	beq.n	8010e48 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010de0:	69fb      	ldr	r3, [r7, #28]
 8010de2:	7a1a      	ldrb	r2, [r3, #8]
 8010de4:	4b09      	ldr	r3, [pc, #36]	; (8010e0c <tcp_input+0x290>)
 8010de6:	685b      	ldr	r3, [r3, #4]
 8010de8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010dec:	3301      	adds	r3, #1
 8010dee:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010df0:	429a      	cmp	r2, r3
 8010df2:	d029      	beq.n	8010e48 <tcp_input+0x2cc>
      prev = pcb;
 8010df4:	69fb      	ldr	r3, [r7, #28]
 8010df6:	61bb      	str	r3, [r7, #24]
      continue;
 8010df8:	e06b      	b.n	8010ed2 <tcp_input+0x356>
 8010dfa:	bf00      	nop
 8010dfc:	0801bea0 	.word	0x0801bea0
 8010e00:	0801bed4 	.word	0x0801bed4
 8010e04:	0801beec 	.word	0x0801beec
 8010e08:	2000529c 	.word	0x2000529c
 8010e0c:	2000e2d0 	.word	0x2000e2d0
 8010e10:	200052a0 	.word	0x200052a0
 8010e14:	200052a4 	.word	0x200052a4
 8010e18:	200052a2 	.word	0x200052a2
 8010e1c:	0801bf14 	.word	0x0801bf14
 8010e20:	0801bf24 	.word	0x0801bf24
 8010e24:	0801bf30 	.word	0x0801bf30
 8010e28:	200052ac 	.word	0x200052ac
 8010e2c:	200052b0 	.word	0x200052b0
 8010e30:	200052b8 	.word	0x200052b8
 8010e34:	200052b6 	.word	0x200052b6
 8010e38:	20018ba4 	.word	0x20018ba4
 8010e3c:	0801bf50 	.word	0x0801bf50
 8010e40:	0801bf78 	.word	0x0801bf78
 8010e44:	0801bfa4 	.word	0x0801bfa4
    }

    if (pcb->remote_port == tcphdr->src &&
 8010e48:	69fb      	ldr	r3, [r7, #28]
 8010e4a:	8b1a      	ldrh	r2, [r3, #24]
 8010e4c:	4b94      	ldr	r3, [pc, #592]	; (80110a0 <tcp_input+0x524>)
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	881b      	ldrh	r3, [r3, #0]
 8010e52:	b29b      	uxth	r3, r3
 8010e54:	429a      	cmp	r2, r3
 8010e56:	d13a      	bne.n	8010ece <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010e58:	69fb      	ldr	r3, [r7, #28]
 8010e5a:	8ada      	ldrh	r2, [r3, #22]
 8010e5c:	4b90      	ldr	r3, [pc, #576]	; (80110a0 <tcp_input+0x524>)
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	885b      	ldrh	r3, [r3, #2]
 8010e62:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010e64:	429a      	cmp	r2, r3
 8010e66:	d132      	bne.n	8010ece <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010e68:	69fb      	ldr	r3, [r7, #28]
 8010e6a:	685a      	ldr	r2, [r3, #4]
 8010e6c:	4b8d      	ldr	r3, [pc, #564]	; (80110a4 <tcp_input+0x528>)
 8010e6e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010e70:	429a      	cmp	r2, r3
 8010e72:	d12c      	bne.n	8010ece <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010e74:	69fb      	ldr	r3, [r7, #28]
 8010e76:	681a      	ldr	r2, [r3, #0]
 8010e78:	4b8a      	ldr	r3, [pc, #552]	; (80110a4 <tcp_input+0x528>)
 8010e7a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010e7c:	429a      	cmp	r2, r3
 8010e7e:	d126      	bne.n	8010ece <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010e80:	69fb      	ldr	r3, [r7, #28]
 8010e82:	68db      	ldr	r3, [r3, #12]
 8010e84:	69fa      	ldr	r2, [r7, #28]
 8010e86:	429a      	cmp	r2, r3
 8010e88:	d106      	bne.n	8010e98 <tcp_input+0x31c>
 8010e8a:	4b87      	ldr	r3, [pc, #540]	; (80110a8 <tcp_input+0x52c>)
 8010e8c:	f240 120d 	movw	r2, #269	; 0x10d
 8010e90:	4986      	ldr	r1, [pc, #536]	; (80110ac <tcp_input+0x530>)
 8010e92:	4887      	ldr	r0, [pc, #540]	; (80110b0 <tcp_input+0x534>)
 8010e94:	f007 f9ac 	bl	80181f0 <iprintf>
      if (prev != NULL) {
 8010e98:	69bb      	ldr	r3, [r7, #24]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d00a      	beq.n	8010eb4 <tcp_input+0x338>
        prev->next = pcb->next;
 8010e9e:	69fb      	ldr	r3, [r7, #28]
 8010ea0:	68da      	ldr	r2, [r3, #12]
 8010ea2:	69bb      	ldr	r3, [r7, #24]
 8010ea4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010ea6:	4b83      	ldr	r3, [pc, #524]	; (80110b4 <tcp_input+0x538>)
 8010ea8:	681a      	ldr	r2, [r3, #0]
 8010eaa:	69fb      	ldr	r3, [r7, #28]
 8010eac:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010eae:	4a81      	ldr	r2, [pc, #516]	; (80110b4 <tcp_input+0x538>)
 8010eb0:	69fb      	ldr	r3, [r7, #28]
 8010eb2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010eb4:	69fb      	ldr	r3, [r7, #28]
 8010eb6:	68db      	ldr	r3, [r3, #12]
 8010eb8:	69fa      	ldr	r2, [r7, #28]
 8010eba:	429a      	cmp	r2, r3
 8010ebc:	d111      	bne.n	8010ee2 <tcp_input+0x366>
 8010ebe:	4b7a      	ldr	r3, [pc, #488]	; (80110a8 <tcp_input+0x52c>)
 8010ec0:	f240 1215 	movw	r2, #277	; 0x115
 8010ec4:	497c      	ldr	r1, [pc, #496]	; (80110b8 <tcp_input+0x53c>)
 8010ec6:	487a      	ldr	r0, [pc, #488]	; (80110b0 <tcp_input+0x534>)
 8010ec8:	f007 f992 	bl	80181f0 <iprintf>
      break;
 8010ecc:	e009      	b.n	8010ee2 <tcp_input+0x366>
    }
    prev = pcb;
 8010ece:	69fb      	ldr	r3, [r7, #28]
 8010ed0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010ed2:	69fb      	ldr	r3, [r7, #28]
 8010ed4:	68db      	ldr	r3, [r3, #12]
 8010ed6:	61fb      	str	r3, [r7, #28]
 8010ed8:	69fb      	ldr	r3, [r7, #28]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	f47f af5e 	bne.w	8010d9c <tcp_input+0x220>
 8010ee0:	e000      	b.n	8010ee4 <tcp_input+0x368>
      break;
 8010ee2:	bf00      	nop
  }

  if (pcb == NULL) {
 8010ee4:	69fb      	ldr	r3, [r7, #28]
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	f040 8095 	bne.w	8011016 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010eec:	4b73      	ldr	r3, [pc, #460]	; (80110bc <tcp_input+0x540>)
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	61fb      	str	r3, [r7, #28]
 8010ef2:	e03f      	b.n	8010f74 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010ef4:	69fb      	ldr	r3, [r7, #28]
 8010ef6:	7d1b      	ldrb	r3, [r3, #20]
 8010ef8:	2b0a      	cmp	r3, #10
 8010efa:	d006      	beq.n	8010f0a <tcp_input+0x38e>
 8010efc:	4b6a      	ldr	r3, [pc, #424]	; (80110a8 <tcp_input+0x52c>)
 8010efe:	f240 121f 	movw	r2, #287	; 0x11f
 8010f02:	496f      	ldr	r1, [pc, #444]	; (80110c0 <tcp_input+0x544>)
 8010f04:	486a      	ldr	r0, [pc, #424]	; (80110b0 <tcp_input+0x534>)
 8010f06:	f007 f973 	bl	80181f0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010f0a:	69fb      	ldr	r3, [r7, #28]
 8010f0c:	7a1b      	ldrb	r3, [r3, #8]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d009      	beq.n	8010f26 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010f12:	69fb      	ldr	r3, [r7, #28]
 8010f14:	7a1a      	ldrb	r2, [r3, #8]
 8010f16:	4b63      	ldr	r3, [pc, #396]	; (80110a4 <tcp_input+0x528>)
 8010f18:	685b      	ldr	r3, [r3, #4]
 8010f1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010f1e:	3301      	adds	r3, #1
 8010f20:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010f22:	429a      	cmp	r2, r3
 8010f24:	d122      	bne.n	8010f6c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010f26:	69fb      	ldr	r3, [r7, #28]
 8010f28:	8b1a      	ldrh	r2, [r3, #24]
 8010f2a:	4b5d      	ldr	r3, [pc, #372]	; (80110a0 <tcp_input+0x524>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	881b      	ldrh	r3, [r3, #0]
 8010f30:	b29b      	uxth	r3, r3
 8010f32:	429a      	cmp	r2, r3
 8010f34:	d11b      	bne.n	8010f6e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010f36:	69fb      	ldr	r3, [r7, #28]
 8010f38:	8ada      	ldrh	r2, [r3, #22]
 8010f3a:	4b59      	ldr	r3, [pc, #356]	; (80110a0 <tcp_input+0x524>)
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	885b      	ldrh	r3, [r3, #2]
 8010f40:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010f42:	429a      	cmp	r2, r3
 8010f44:	d113      	bne.n	8010f6e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010f46:	69fb      	ldr	r3, [r7, #28]
 8010f48:	685a      	ldr	r2, [r3, #4]
 8010f4a:	4b56      	ldr	r3, [pc, #344]	; (80110a4 <tcp_input+0x528>)
 8010f4c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010f4e:	429a      	cmp	r2, r3
 8010f50:	d10d      	bne.n	8010f6e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010f52:	69fb      	ldr	r3, [r7, #28]
 8010f54:	681a      	ldr	r2, [r3, #0]
 8010f56:	4b53      	ldr	r3, [pc, #332]	; (80110a4 <tcp_input+0x528>)
 8010f58:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010f5a:	429a      	cmp	r2, r3
 8010f5c:	d107      	bne.n	8010f6e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010f5e:	69f8      	ldr	r0, [r7, #28]
 8010f60:	f000 fb54 	bl	801160c <tcp_timewait_input>
        }
        pbuf_free(p);
 8010f64:	6878      	ldr	r0, [r7, #4]
 8010f66:	f7fd fd2f 	bl	800e9c8 <pbuf_free>
        return;
 8010f6a:	e1f0      	b.n	801134e <tcp_input+0x7d2>
        continue;
 8010f6c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f6e:	69fb      	ldr	r3, [r7, #28]
 8010f70:	68db      	ldr	r3, [r3, #12]
 8010f72:	61fb      	str	r3, [r7, #28]
 8010f74:	69fb      	ldr	r3, [r7, #28]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d1bc      	bne.n	8010ef4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010f7e:	4b51      	ldr	r3, [pc, #324]	; (80110c4 <tcp_input+0x548>)
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	617b      	str	r3, [r7, #20]
 8010f84:	e02a      	b.n	8010fdc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010f86:	697b      	ldr	r3, [r7, #20]
 8010f88:	7a1b      	ldrb	r3, [r3, #8]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d00c      	beq.n	8010fa8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010f8e:	697b      	ldr	r3, [r7, #20]
 8010f90:	7a1a      	ldrb	r2, [r3, #8]
 8010f92:	4b44      	ldr	r3, [pc, #272]	; (80110a4 <tcp_input+0x528>)
 8010f94:	685b      	ldr	r3, [r3, #4]
 8010f96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010f9a:	3301      	adds	r3, #1
 8010f9c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010f9e:	429a      	cmp	r2, r3
 8010fa0:	d002      	beq.n	8010fa8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010fa2:	697b      	ldr	r3, [r7, #20]
 8010fa4:	61bb      	str	r3, [r7, #24]
        continue;
 8010fa6:	e016      	b.n	8010fd6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010fa8:	697b      	ldr	r3, [r7, #20]
 8010faa:	8ada      	ldrh	r2, [r3, #22]
 8010fac:	4b3c      	ldr	r3, [pc, #240]	; (80110a0 <tcp_input+0x524>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	885b      	ldrh	r3, [r3, #2]
 8010fb2:	b29b      	uxth	r3, r3
 8010fb4:	429a      	cmp	r2, r3
 8010fb6:	d10c      	bne.n	8010fd2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010fb8:	697b      	ldr	r3, [r7, #20]
 8010fba:	681a      	ldr	r2, [r3, #0]
 8010fbc:	4b39      	ldr	r3, [pc, #228]	; (80110a4 <tcp_input+0x528>)
 8010fbe:	695b      	ldr	r3, [r3, #20]
 8010fc0:	429a      	cmp	r2, r3
 8010fc2:	d00f      	beq.n	8010fe4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010fc4:	697b      	ldr	r3, [r7, #20]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d00d      	beq.n	8010fe6 <tcp_input+0x46a>
 8010fca:	697b      	ldr	r3, [r7, #20]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d009      	beq.n	8010fe6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010fd2:	697b      	ldr	r3, [r7, #20]
 8010fd4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010fd6:	697b      	ldr	r3, [r7, #20]
 8010fd8:	68db      	ldr	r3, [r3, #12]
 8010fda:	617b      	str	r3, [r7, #20]
 8010fdc:	697b      	ldr	r3, [r7, #20]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d1d1      	bne.n	8010f86 <tcp_input+0x40a>
 8010fe2:	e000      	b.n	8010fe6 <tcp_input+0x46a>
            break;
 8010fe4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010fe6:	697b      	ldr	r3, [r7, #20]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d014      	beq.n	8011016 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010fec:	69bb      	ldr	r3, [r7, #24]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d00a      	beq.n	8011008 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010ff2:	697b      	ldr	r3, [r7, #20]
 8010ff4:	68da      	ldr	r2, [r3, #12]
 8010ff6:	69bb      	ldr	r3, [r7, #24]
 8010ff8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010ffa:	4b32      	ldr	r3, [pc, #200]	; (80110c4 <tcp_input+0x548>)
 8010ffc:	681a      	ldr	r2, [r3, #0]
 8010ffe:	697b      	ldr	r3, [r7, #20]
 8011000:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8011002:	4a30      	ldr	r2, [pc, #192]	; (80110c4 <tcp_input+0x548>)
 8011004:	697b      	ldr	r3, [r7, #20]
 8011006:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8011008:	6978      	ldr	r0, [r7, #20]
 801100a:	f000 fa01 	bl	8011410 <tcp_listen_input>
      }
      pbuf_free(p);
 801100e:	6878      	ldr	r0, [r7, #4]
 8011010:	f7fd fcda 	bl	800e9c8 <pbuf_free>
      return;
 8011014:	e19b      	b.n	801134e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8011016:	69fb      	ldr	r3, [r7, #28]
 8011018:	2b00      	cmp	r3, #0
 801101a:	f000 8160 	beq.w	80112de <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801101e:	4b2a      	ldr	r3, [pc, #168]	; (80110c8 <tcp_input+0x54c>)
 8011020:	2200      	movs	r2, #0
 8011022:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	891a      	ldrh	r2, [r3, #8]
 8011028:	4b27      	ldr	r3, [pc, #156]	; (80110c8 <tcp_input+0x54c>)
 801102a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801102c:	4a26      	ldr	r2, [pc, #152]	; (80110c8 <tcp_input+0x54c>)
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8011032:	4b1b      	ldr	r3, [pc, #108]	; (80110a0 <tcp_input+0x524>)
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	4a24      	ldr	r2, [pc, #144]	; (80110c8 <tcp_input+0x54c>)
 8011038:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801103a:	4b24      	ldr	r3, [pc, #144]	; (80110cc <tcp_input+0x550>)
 801103c:	2200      	movs	r2, #0
 801103e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8011040:	4b23      	ldr	r3, [pc, #140]	; (80110d0 <tcp_input+0x554>)
 8011042:	2200      	movs	r2, #0
 8011044:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011046:	4b23      	ldr	r3, [pc, #140]	; (80110d4 <tcp_input+0x558>)
 8011048:	2200      	movs	r2, #0
 801104a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801104c:	4b22      	ldr	r3, [pc, #136]	; (80110d8 <tcp_input+0x55c>)
 801104e:	781b      	ldrb	r3, [r3, #0]
 8011050:	f003 0308 	and.w	r3, r3, #8
 8011054:	2b00      	cmp	r3, #0
 8011056:	d006      	beq.n	8011066 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	7b5b      	ldrb	r3, [r3, #13]
 801105c:	f043 0301 	orr.w	r3, r3, #1
 8011060:	b2da      	uxtb	r2, r3
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8011066:	69fb      	ldr	r3, [r7, #28]
 8011068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801106a:	2b00      	cmp	r3, #0
 801106c:	d038      	beq.n	80110e0 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801106e:	69f8      	ldr	r0, [r7, #28]
 8011070:	f7ff f852 	bl	8010118 <tcp_process_refused_data>
 8011074:	4603      	mov	r3, r0
 8011076:	f113 0f0d 	cmn.w	r3, #13
 801107a:	d007      	beq.n	801108c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801107c:	69fb      	ldr	r3, [r7, #28]
 801107e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011080:	2b00      	cmp	r3, #0
 8011082:	d02d      	beq.n	80110e0 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011084:	4b15      	ldr	r3, [pc, #84]	; (80110dc <tcp_input+0x560>)
 8011086:	881b      	ldrh	r3, [r3, #0]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d029      	beq.n	80110e0 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801108c:	69fb      	ldr	r3, [r7, #28]
 801108e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011090:	2b00      	cmp	r3, #0
 8011092:	f040 8104 	bne.w	801129e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011096:	69f8      	ldr	r0, [r7, #28]
 8011098:	f003 fe16 	bl	8014cc8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801109c:	e0ff      	b.n	801129e <tcp_input+0x722>
 801109e:	bf00      	nop
 80110a0:	2000529c 	.word	0x2000529c
 80110a4:	2000e2d0 	.word	0x2000e2d0
 80110a8:	0801bea0 	.word	0x0801bea0
 80110ac:	0801bfcc 	.word	0x0801bfcc
 80110b0:	0801beec 	.word	0x0801beec
 80110b4:	20018ba4 	.word	0x20018ba4
 80110b8:	0801bff8 	.word	0x0801bff8
 80110bc:	20018bb4 	.word	0x20018bb4
 80110c0:	0801c024 	.word	0x0801c024
 80110c4:	20018bac 	.word	0x20018bac
 80110c8:	2000528c 	.word	0x2000528c
 80110cc:	200052bc 	.word	0x200052bc
 80110d0:	200052b9 	.word	0x200052b9
 80110d4:	200052b4 	.word	0x200052b4
 80110d8:	200052b8 	.word	0x200052b8
 80110dc:	200052b6 	.word	0x200052b6
      }
    }
    tcp_input_pcb = pcb;
 80110e0:	4a9c      	ldr	r2, [pc, #624]	; (8011354 <tcp_input+0x7d8>)
 80110e2:	69fb      	ldr	r3, [r7, #28]
 80110e4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80110e6:	69f8      	ldr	r0, [r7, #28]
 80110e8:	f000 fb0a 	bl	8011700 <tcp_process>
 80110ec:	4603      	mov	r3, r0
 80110ee:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80110f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80110f4:	f113 0f0d 	cmn.w	r3, #13
 80110f8:	f000 80d3 	beq.w	80112a2 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80110fc:	4b96      	ldr	r3, [pc, #600]	; (8011358 <tcp_input+0x7dc>)
 80110fe:	781b      	ldrb	r3, [r3, #0]
 8011100:	f003 0308 	and.w	r3, r3, #8
 8011104:	2b00      	cmp	r3, #0
 8011106:	d015      	beq.n	8011134 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011108:	69fb      	ldr	r3, [r7, #28]
 801110a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801110e:	2b00      	cmp	r3, #0
 8011110:	d008      	beq.n	8011124 <tcp_input+0x5a8>
 8011112:	69fb      	ldr	r3, [r7, #28]
 8011114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011118:	69fa      	ldr	r2, [r7, #28]
 801111a:	6912      	ldr	r2, [r2, #16]
 801111c:	f06f 010d 	mvn.w	r1, #13
 8011120:	4610      	mov	r0, r2
 8011122:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011124:	69f9      	ldr	r1, [r7, #28]
 8011126:	488d      	ldr	r0, [pc, #564]	; (801135c <tcp_input+0x7e0>)
 8011128:	f7ff fbb0 	bl	801088c <tcp_pcb_remove>
        tcp_free(pcb);
 801112c:	69f8      	ldr	r0, [r7, #28]
 801112e:	f7fd fef7 	bl	800ef20 <tcp_free>
 8011132:	e0c1      	b.n	80112b8 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8011134:	2300      	movs	r3, #0
 8011136:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011138:	4b89      	ldr	r3, [pc, #548]	; (8011360 <tcp_input+0x7e4>)
 801113a:	881b      	ldrh	r3, [r3, #0]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d01d      	beq.n	801117c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8011140:	4b87      	ldr	r3, [pc, #540]	; (8011360 <tcp_input+0x7e4>)
 8011142:	881b      	ldrh	r3, [r3, #0]
 8011144:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011146:	69fb      	ldr	r3, [r7, #28]
 8011148:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801114c:	2b00      	cmp	r3, #0
 801114e:	d00a      	beq.n	8011166 <tcp_input+0x5ea>
 8011150:	69fb      	ldr	r3, [r7, #28]
 8011152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011156:	69fa      	ldr	r2, [r7, #28]
 8011158:	6910      	ldr	r0, [r2, #16]
 801115a:	89fa      	ldrh	r2, [r7, #14]
 801115c:	69f9      	ldr	r1, [r7, #28]
 801115e:	4798      	blx	r3
 8011160:	4603      	mov	r3, r0
 8011162:	74fb      	strb	r3, [r7, #19]
 8011164:	e001      	b.n	801116a <tcp_input+0x5ee>
 8011166:	2300      	movs	r3, #0
 8011168:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801116a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801116e:	f113 0f0d 	cmn.w	r3, #13
 8011172:	f000 8098 	beq.w	80112a6 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011176:	4b7a      	ldr	r3, [pc, #488]	; (8011360 <tcp_input+0x7e4>)
 8011178:	2200      	movs	r2, #0
 801117a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801117c:	69f8      	ldr	r0, [r7, #28]
 801117e:	f000 f907 	bl	8011390 <tcp_input_delayed_close>
 8011182:	4603      	mov	r3, r0
 8011184:	2b00      	cmp	r3, #0
 8011186:	f040 8090 	bne.w	80112aa <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801118a:	4b76      	ldr	r3, [pc, #472]	; (8011364 <tcp_input+0x7e8>)
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d041      	beq.n	8011216 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8011192:	69fb      	ldr	r3, [r7, #28]
 8011194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011196:	2b00      	cmp	r3, #0
 8011198:	d006      	beq.n	80111a8 <tcp_input+0x62c>
 801119a:	4b73      	ldr	r3, [pc, #460]	; (8011368 <tcp_input+0x7ec>)
 801119c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80111a0:	4972      	ldr	r1, [pc, #456]	; (801136c <tcp_input+0x7f0>)
 80111a2:	4873      	ldr	r0, [pc, #460]	; (8011370 <tcp_input+0x7f4>)
 80111a4:	f007 f824 	bl	80181f0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80111a8:	69fb      	ldr	r3, [r7, #28]
 80111aa:	8b5b      	ldrh	r3, [r3, #26]
 80111ac:	f003 0310 	and.w	r3, r3, #16
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d008      	beq.n	80111c6 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80111b4:	4b6b      	ldr	r3, [pc, #428]	; (8011364 <tcp_input+0x7e8>)
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	4618      	mov	r0, r3
 80111ba:	f7fd fc05 	bl	800e9c8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80111be:	69f8      	ldr	r0, [r7, #28]
 80111c0:	f7fe f996 	bl	800f4f0 <tcp_abort>
            goto aborted;
 80111c4:	e078      	b.n	80112b8 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80111c6:	69fb      	ldr	r3, [r7, #28]
 80111c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d00c      	beq.n	80111ea <tcp_input+0x66e>
 80111d0:	69fb      	ldr	r3, [r7, #28]
 80111d2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80111d6:	69fb      	ldr	r3, [r7, #28]
 80111d8:	6918      	ldr	r0, [r3, #16]
 80111da:	4b62      	ldr	r3, [pc, #392]	; (8011364 <tcp_input+0x7e8>)
 80111dc:	681a      	ldr	r2, [r3, #0]
 80111de:	2300      	movs	r3, #0
 80111e0:	69f9      	ldr	r1, [r7, #28]
 80111e2:	47a0      	blx	r4
 80111e4:	4603      	mov	r3, r0
 80111e6:	74fb      	strb	r3, [r7, #19]
 80111e8:	e008      	b.n	80111fc <tcp_input+0x680>
 80111ea:	4b5e      	ldr	r3, [pc, #376]	; (8011364 <tcp_input+0x7e8>)
 80111ec:	681a      	ldr	r2, [r3, #0]
 80111ee:	2300      	movs	r3, #0
 80111f0:	69f9      	ldr	r1, [r7, #28]
 80111f2:	2000      	movs	r0, #0
 80111f4:	f7ff f884 	bl	8010300 <tcp_recv_null>
 80111f8:	4603      	mov	r3, r0
 80111fa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80111fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011200:	f113 0f0d 	cmn.w	r3, #13
 8011204:	d053      	beq.n	80112ae <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011206:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d003      	beq.n	8011216 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801120e:	4b55      	ldr	r3, [pc, #340]	; (8011364 <tcp_input+0x7e8>)
 8011210:	681a      	ldr	r2, [r3, #0]
 8011212:	69fb      	ldr	r3, [r7, #28]
 8011214:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011216:	4b50      	ldr	r3, [pc, #320]	; (8011358 <tcp_input+0x7dc>)
 8011218:	781b      	ldrb	r3, [r3, #0]
 801121a:	f003 0320 	and.w	r3, r3, #32
 801121e:	2b00      	cmp	r3, #0
 8011220:	d030      	beq.n	8011284 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8011222:	69fb      	ldr	r3, [r7, #28]
 8011224:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011226:	2b00      	cmp	r3, #0
 8011228:	d009      	beq.n	801123e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801122a:	69fb      	ldr	r3, [r7, #28]
 801122c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801122e:	7b5a      	ldrb	r2, [r3, #13]
 8011230:	69fb      	ldr	r3, [r7, #28]
 8011232:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011234:	f042 0220 	orr.w	r2, r2, #32
 8011238:	b2d2      	uxtb	r2, r2
 801123a:	735a      	strb	r2, [r3, #13]
 801123c:	e022      	b.n	8011284 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801123e:	69fb      	ldr	r3, [r7, #28]
 8011240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011242:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011246:	d005      	beq.n	8011254 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8011248:	69fb      	ldr	r3, [r7, #28]
 801124a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801124c:	3301      	adds	r3, #1
 801124e:	b29a      	uxth	r2, r3
 8011250:	69fb      	ldr	r3, [r7, #28]
 8011252:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011254:	69fb      	ldr	r3, [r7, #28]
 8011256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801125a:	2b00      	cmp	r3, #0
 801125c:	d00b      	beq.n	8011276 <tcp_input+0x6fa>
 801125e:	69fb      	ldr	r3, [r7, #28]
 8011260:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011264:	69fb      	ldr	r3, [r7, #28]
 8011266:	6918      	ldr	r0, [r3, #16]
 8011268:	2300      	movs	r3, #0
 801126a:	2200      	movs	r2, #0
 801126c:	69f9      	ldr	r1, [r7, #28]
 801126e:	47a0      	blx	r4
 8011270:	4603      	mov	r3, r0
 8011272:	74fb      	strb	r3, [r7, #19]
 8011274:	e001      	b.n	801127a <tcp_input+0x6fe>
 8011276:	2300      	movs	r3, #0
 8011278:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801127a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801127e:	f113 0f0d 	cmn.w	r3, #13
 8011282:	d016      	beq.n	80112b2 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011284:	4b33      	ldr	r3, [pc, #204]	; (8011354 <tcp_input+0x7d8>)
 8011286:	2200      	movs	r2, #0
 8011288:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801128a:	69f8      	ldr	r0, [r7, #28]
 801128c:	f000 f880 	bl	8011390 <tcp_input_delayed_close>
 8011290:	4603      	mov	r3, r0
 8011292:	2b00      	cmp	r3, #0
 8011294:	d10f      	bne.n	80112b6 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011296:	69f8      	ldr	r0, [r7, #28]
 8011298:	f002 ff10 	bl	80140bc <tcp_output>
 801129c:	e00c      	b.n	80112b8 <tcp_input+0x73c>
        goto aborted;
 801129e:	bf00      	nop
 80112a0:	e00a      	b.n	80112b8 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80112a2:	bf00      	nop
 80112a4:	e008      	b.n	80112b8 <tcp_input+0x73c>
              goto aborted;
 80112a6:	bf00      	nop
 80112a8:	e006      	b.n	80112b8 <tcp_input+0x73c>
          goto aborted;
 80112aa:	bf00      	nop
 80112ac:	e004      	b.n	80112b8 <tcp_input+0x73c>
            goto aborted;
 80112ae:	bf00      	nop
 80112b0:	e002      	b.n	80112b8 <tcp_input+0x73c>
              goto aborted;
 80112b2:	bf00      	nop
 80112b4:	e000      	b.n	80112b8 <tcp_input+0x73c>
          goto aborted;
 80112b6:	bf00      	nop
    tcp_input_pcb = NULL;
 80112b8:	4b26      	ldr	r3, [pc, #152]	; (8011354 <tcp_input+0x7d8>)
 80112ba:	2200      	movs	r2, #0
 80112bc:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80112be:	4b29      	ldr	r3, [pc, #164]	; (8011364 <tcp_input+0x7e8>)
 80112c0:	2200      	movs	r2, #0
 80112c2:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80112c4:	4b2b      	ldr	r3, [pc, #172]	; (8011374 <tcp_input+0x7f8>)
 80112c6:	685b      	ldr	r3, [r3, #4]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d03f      	beq.n	801134c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 80112cc:	4b29      	ldr	r3, [pc, #164]	; (8011374 <tcp_input+0x7f8>)
 80112ce:	685b      	ldr	r3, [r3, #4]
 80112d0:	4618      	mov	r0, r3
 80112d2:	f7fd fb79 	bl	800e9c8 <pbuf_free>
      inseg.p = NULL;
 80112d6:	4b27      	ldr	r3, [pc, #156]	; (8011374 <tcp_input+0x7f8>)
 80112d8:	2200      	movs	r2, #0
 80112da:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80112dc:	e036      	b.n	801134c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80112de:	4b26      	ldr	r3, [pc, #152]	; (8011378 <tcp_input+0x7fc>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	899b      	ldrh	r3, [r3, #12]
 80112e4:	b29b      	uxth	r3, r3
 80112e6:	4618      	mov	r0, r3
 80112e8:	f7fb fee4 	bl	800d0b4 <lwip_htons>
 80112ec:	4603      	mov	r3, r0
 80112ee:	b2db      	uxtb	r3, r3
 80112f0:	f003 0304 	and.w	r3, r3, #4
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d118      	bne.n	801132a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80112f8:	4b20      	ldr	r3, [pc, #128]	; (801137c <tcp_input+0x800>)
 80112fa:	6819      	ldr	r1, [r3, #0]
 80112fc:	4b20      	ldr	r3, [pc, #128]	; (8011380 <tcp_input+0x804>)
 80112fe:	881b      	ldrh	r3, [r3, #0]
 8011300:	461a      	mov	r2, r3
 8011302:	4b20      	ldr	r3, [pc, #128]	; (8011384 <tcp_input+0x808>)
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011308:	4b1b      	ldr	r3, [pc, #108]	; (8011378 <tcp_input+0x7fc>)
 801130a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801130c:	885b      	ldrh	r3, [r3, #2]
 801130e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011310:	4a19      	ldr	r2, [pc, #100]	; (8011378 <tcp_input+0x7fc>)
 8011312:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011314:	8812      	ldrh	r2, [r2, #0]
 8011316:	b292      	uxth	r2, r2
 8011318:	9202      	str	r2, [sp, #8]
 801131a:	9301      	str	r3, [sp, #4]
 801131c:	4b1a      	ldr	r3, [pc, #104]	; (8011388 <tcp_input+0x80c>)
 801131e:	9300      	str	r3, [sp, #0]
 8011320:	4b1a      	ldr	r3, [pc, #104]	; (801138c <tcp_input+0x810>)
 8011322:	4602      	mov	r2, r0
 8011324:	2000      	movs	r0, #0
 8011326:	f003 fc7d 	bl	8014c24 <tcp_rst>
    pbuf_free(p);
 801132a:	6878      	ldr	r0, [r7, #4]
 801132c:	f7fd fb4c 	bl	800e9c8 <pbuf_free>
  return;
 8011330:	e00c      	b.n	801134c <tcp_input+0x7d0>
    goto dropped;
 8011332:	bf00      	nop
 8011334:	e006      	b.n	8011344 <tcp_input+0x7c8>
    goto dropped;
 8011336:	bf00      	nop
 8011338:	e004      	b.n	8011344 <tcp_input+0x7c8>
    goto dropped;
 801133a:	bf00      	nop
 801133c:	e002      	b.n	8011344 <tcp_input+0x7c8>
      goto dropped;
 801133e:	bf00      	nop
 8011340:	e000      	b.n	8011344 <tcp_input+0x7c8>
      goto dropped;
 8011342:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011344:	6878      	ldr	r0, [r7, #4]
 8011346:	f7fd fb3f 	bl	800e9c8 <pbuf_free>
 801134a:	e000      	b.n	801134e <tcp_input+0x7d2>
  return;
 801134c:	bf00      	nop
}
 801134e:	3724      	adds	r7, #36	; 0x24
 8011350:	46bd      	mov	sp, r7
 8011352:	bd90      	pop	{r4, r7, pc}
 8011354:	20018bb8 	.word	0x20018bb8
 8011358:	200052b9 	.word	0x200052b9
 801135c:	20018ba4 	.word	0x20018ba4
 8011360:	200052b4 	.word	0x200052b4
 8011364:	200052bc 	.word	0x200052bc
 8011368:	0801bea0 	.word	0x0801bea0
 801136c:	0801c054 	.word	0x0801c054
 8011370:	0801beec 	.word	0x0801beec
 8011374:	2000528c 	.word	0x2000528c
 8011378:	2000529c 	.word	0x2000529c
 801137c:	200052b0 	.word	0x200052b0
 8011380:	200052b6 	.word	0x200052b6
 8011384:	200052ac 	.word	0x200052ac
 8011388:	2000e2e0 	.word	0x2000e2e0
 801138c:	2000e2e4 	.word	0x2000e2e4

08011390 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b082      	sub	sp, #8
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d106      	bne.n	80113ac <tcp_input_delayed_close+0x1c>
 801139e:	4b17      	ldr	r3, [pc, #92]	; (80113fc <tcp_input_delayed_close+0x6c>)
 80113a0:	f240 225a 	movw	r2, #602	; 0x25a
 80113a4:	4916      	ldr	r1, [pc, #88]	; (8011400 <tcp_input_delayed_close+0x70>)
 80113a6:	4817      	ldr	r0, [pc, #92]	; (8011404 <tcp_input_delayed_close+0x74>)
 80113a8:	f006 ff22 	bl	80181f0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80113ac:	4b16      	ldr	r3, [pc, #88]	; (8011408 <tcp_input_delayed_close+0x78>)
 80113ae:	781b      	ldrb	r3, [r3, #0]
 80113b0:	f003 0310 	and.w	r3, r3, #16
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d01c      	beq.n	80113f2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	8b5b      	ldrh	r3, [r3, #26]
 80113bc:	f003 0310 	and.w	r3, r3, #16
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d10d      	bne.n	80113e0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d008      	beq.n	80113e0 <tcp_input_delayed_close+0x50>
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80113d4:	687a      	ldr	r2, [r7, #4]
 80113d6:	6912      	ldr	r2, [r2, #16]
 80113d8:	f06f 010e 	mvn.w	r1, #14
 80113dc:	4610      	mov	r0, r2
 80113de:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80113e0:	6879      	ldr	r1, [r7, #4]
 80113e2:	480a      	ldr	r0, [pc, #40]	; (801140c <tcp_input_delayed_close+0x7c>)
 80113e4:	f7ff fa52 	bl	801088c <tcp_pcb_remove>
    tcp_free(pcb);
 80113e8:	6878      	ldr	r0, [r7, #4]
 80113ea:	f7fd fd99 	bl	800ef20 <tcp_free>
    return 1;
 80113ee:	2301      	movs	r3, #1
 80113f0:	e000      	b.n	80113f4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80113f2:	2300      	movs	r3, #0
}
 80113f4:	4618      	mov	r0, r3
 80113f6:	3708      	adds	r7, #8
 80113f8:	46bd      	mov	sp, r7
 80113fa:	bd80      	pop	{r7, pc}
 80113fc:	0801bea0 	.word	0x0801bea0
 8011400:	0801c070 	.word	0x0801c070
 8011404:	0801beec 	.word	0x0801beec
 8011408:	200052b9 	.word	0x200052b9
 801140c:	20018ba4 	.word	0x20018ba4

08011410 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011410:	b590      	push	{r4, r7, lr}
 8011412:	b08b      	sub	sp, #44	; 0x2c
 8011414:	af04      	add	r7, sp, #16
 8011416:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011418:	4b6f      	ldr	r3, [pc, #444]	; (80115d8 <tcp_listen_input+0x1c8>)
 801141a:	781b      	ldrb	r3, [r3, #0]
 801141c:	f003 0304 	and.w	r3, r3, #4
 8011420:	2b00      	cmp	r3, #0
 8011422:	f040 80d2 	bne.w	80115ca <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d106      	bne.n	801143a <tcp_listen_input+0x2a>
 801142c:	4b6b      	ldr	r3, [pc, #428]	; (80115dc <tcp_listen_input+0x1cc>)
 801142e:	f240 2281 	movw	r2, #641	; 0x281
 8011432:	496b      	ldr	r1, [pc, #428]	; (80115e0 <tcp_listen_input+0x1d0>)
 8011434:	486b      	ldr	r0, [pc, #428]	; (80115e4 <tcp_listen_input+0x1d4>)
 8011436:	f006 fedb 	bl	80181f0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801143a:	4b67      	ldr	r3, [pc, #412]	; (80115d8 <tcp_listen_input+0x1c8>)
 801143c:	781b      	ldrb	r3, [r3, #0]
 801143e:	f003 0310 	and.w	r3, r3, #16
 8011442:	2b00      	cmp	r3, #0
 8011444:	d019      	beq.n	801147a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011446:	4b68      	ldr	r3, [pc, #416]	; (80115e8 <tcp_listen_input+0x1d8>)
 8011448:	6819      	ldr	r1, [r3, #0]
 801144a:	4b68      	ldr	r3, [pc, #416]	; (80115ec <tcp_listen_input+0x1dc>)
 801144c:	881b      	ldrh	r3, [r3, #0]
 801144e:	461a      	mov	r2, r3
 8011450:	4b67      	ldr	r3, [pc, #412]	; (80115f0 <tcp_listen_input+0x1e0>)
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011456:	4b67      	ldr	r3, [pc, #412]	; (80115f4 <tcp_listen_input+0x1e4>)
 8011458:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801145a:	885b      	ldrh	r3, [r3, #2]
 801145c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801145e:	4a65      	ldr	r2, [pc, #404]	; (80115f4 <tcp_listen_input+0x1e4>)
 8011460:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011462:	8812      	ldrh	r2, [r2, #0]
 8011464:	b292      	uxth	r2, r2
 8011466:	9202      	str	r2, [sp, #8]
 8011468:	9301      	str	r3, [sp, #4]
 801146a:	4b63      	ldr	r3, [pc, #396]	; (80115f8 <tcp_listen_input+0x1e8>)
 801146c:	9300      	str	r3, [sp, #0]
 801146e:	4b63      	ldr	r3, [pc, #396]	; (80115fc <tcp_listen_input+0x1ec>)
 8011470:	4602      	mov	r2, r0
 8011472:	6878      	ldr	r0, [r7, #4]
 8011474:	f003 fbd6 	bl	8014c24 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011478:	e0a9      	b.n	80115ce <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801147a:	4b57      	ldr	r3, [pc, #348]	; (80115d8 <tcp_listen_input+0x1c8>)
 801147c:	781b      	ldrb	r3, [r3, #0]
 801147e:	f003 0302 	and.w	r3, r3, #2
 8011482:	2b00      	cmp	r3, #0
 8011484:	f000 80a3 	beq.w	80115ce <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	7d5b      	ldrb	r3, [r3, #21]
 801148c:	4618      	mov	r0, r3
 801148e:	f7ff f85b 	bl	8010548 <tcp_alloc>
 8011492:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011494:	697b      	ldr	r3, [r7, #20]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d111      	bne.n	80114be <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	699b      	ldr	r3, [r3, #24]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d00a      	beq.n	80114b8 <tcp_listen_input+0xa8>
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	699b      	ldr	r3, [r3, #24]
 80114a6:	687a      	ldr	r2, [r7, #4]
 80114a8:	6910      	ldr	r0, [r2, #16]
 80114aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80114ae:	2100      	movs	r1, #0
 80114b0:	4798      	blx	r3
 80114b2:	4603      	mov	r3, r0
 80114b4:	73bb      	strb	r3, [r7, #14]
      return;
 80114b6:	e08b      	b.n	80115d0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80114b8:	23f0      	movs	r3, #240	; 0xf0
 80114ba:	73bb      	strb	r3, [r7, #14]
      return;
 80114bc:	e088      	b.n	80115d0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80114be:	4b50      	ldr	r3, [pc, #320]	; (8011600 <tcp_listen_input+0x1f0>)
 80114c0:	695a      	ldr	r2, [r3, #20]
 80114c2:	697b      	ldr	r3, [r7, #20]
 80114c4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80114c6:	4b4e      	ldr	r3, [pc, #312]	; (8011600 <tcp_listen_input+0x1f0>)
 80114c8:	691a      	ldr	r2, [r3, #16]
 80114ca:	697b      	ldr	r3, [r7, #20]
 80114cc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	8ada      	ldrh	r2, [r3, #22]
 80114d2:	697b      	ldr	r3, [r7, #20]
 80114d4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80114d6:	4b47      	ldr	r3, [pc, #284]	; (80115f4 <tcp_listen_input+0x1e4>)
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	881b      	ldrh	r3, [r3, #0]
 80114dc:	b29a      	uxth	r2, r3
 80114de:	697b      	ldr	r3, [r7, #20]
 80114e0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80114e2:	697b      	ldr	r3, [r7, #20]
 80114e4:	2203      	movs	r2, #3
 80114e6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80114e8:	4b41      	ldr	r3, [pc, #260]	; (80115f0 <tcp_listen_input+0x1e0>)
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	1c5a      	adds	r2, r3, #1
 80114ee:	697b      	ldr	r3, [r7, #20]
 80114f0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80114f2:	697b      	ldr	r3, [r7, #20]
 80114f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80114f6:	697b      	ldr	r3, [r7, #20]
 80114f8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80114fa:	6978      	ldr	r0, [r7, #20]
 80114fc:	f7ff fa5a 	bl	80109b4 <tcp_next_iss>
 8011500:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8011502:	697b      	ldr	r3, [r7, #20]
 8011504:	693a      	ldr	r2, [r7, #16]
 8011506:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011508:	697b      	ldr	r3, [r7, #20]
 801150a:	693a      	ldr	r2, [r7, #16]
 801150c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801150e:	697b      	ldr	r3, [r7, #20]
 8011510:	693a      	ldr	r2, [r7, #16]
 8011512:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011514:	697b      	ldr	r3, [r7, #20]
 8011516:	693a      	ldr	r2, [r7, #16]
 8011518:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801151a:	4b35      	ldr	r3, [pc, #212]	; (80115f0 <tcp_listen_input+0x1e0>)
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	1e5a      	subs	r2, r3, #1
 8011520:	697b      	ldr	r3, [r7, #20]
 8011522:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	691a      	ldr	r2, [r3, #16]
 8011528:	697b      	ldr	r3, [r7, #20]
 801152a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801152c:	697b      	ldr	r3, [r7, #20]
 801152e:	687a      	ldr	r2, [r7, #4]
 8011530:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	7a5b      	ldrb	r3, [r3, #9]
 8011536:	f003 030c 	and.w	r3, r3, #12
 801153a:	b2da      	uxtb	r2, r3
 801153c:	697b      	ldr	r3, [r7, #20]
 801153e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	7a1a      	ldrb	r2, [r3, #8]
 8011544:	697b      	ldr	r3, [r7, #20]
 8011546:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011548:	4b2e      	ldr	r3, [pc, #184]	; (8011604 <tcp_listen_input+0x1f4>)
 801154a:	681a      	ldr	r2, [r3, #0]
 801154c:	697b      	ldr	r3, [r7, #20]
 801154e:	60da      	str	r2, [r3, #12]
 8011550:	4a2c      	ldr	r2, [pc, #176]	; (8011604 <tcp_listen_input+0x1f4>)
 8011552:	697b      	ldr	r3, [r7, #20]
 8011554:	6013      	str	r3, [r2, #0]
 8011556:	f003 fd27 	bl	8014fa8 <tcp_timer_needed>
 801155a:	4b2b      	ldr	r3, [pc, #172]	; (8011608 <tcp_listen_input+0x1f8>)
 801155c:	2201      	movs	r2, #1
 801155e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011560:	6978      	ldr	r0, [r7, #20]
 8011562:	f001 fd8d 	bl	8013080 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011566:	4b23      	ldr	r3, [pc, #140]	; (80115f4 <tcp_listen_input+0x1e4>)
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	89db      	ldrh	r3, [r3, #14]
 801156c:	b29a      	uxth	r2, r3
 801156e:	697b      	ldr	r3, [r7, #20]
 8011570:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011574:	697b      	ldr	r3, [r7, #20]
 8011576:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801157a:	697b      	ldr	r3, [r7, #20]
 801157c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011580:	697b      	ldr	r3, [r7, #20]
 8011582:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011584:	697b      	ldr	r3, [r7, #20]
 8011586:	3304      	adds	r3, #4
 8011588:	4618      	mov	r0, r3
 801158a:	f005 f91b 	bl	80167c4 <ip4_route>
 801158e:	4601      	mov	r1, r0
 8011590:	697b      	ldr	r3, [r7, #20]
 8011592:	3304      	adds	r3, #4
 8011594:	461a      	mov	r2, r3
 8011596:	4620      	mov	r0, r4
 8011598:	f7ff fa32 	bl	8010a00 <tcp_eff_send_mss_netif>
 801159c:	4603      	mov	r3, r0
 801159e:	461a      	mov	r2, r3
 80115a0:	697b      	ldr	r3, [r7, #20]
 80115a2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80115a4:	2112      	movs	r1, #18
 80115a6:	6978      	ldr	r0, [r7, #20]
 80115a8:	f002 fc9a 	bl	8013ee0 <tcp_enqueue_flags>
 80115ac:	4603      	mov	r3, r0
 80115ae:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80115b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d004      	beq.n	80115c2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80115b8:	2100      	movs	r1, #0
 80115ba:	6978      	ldr	r0, [r7, #20]
 80115bc:	f7fd feda 	bl	800f374 <tcp_abandon>
      return;
 80115c0:	e006      	b.n	80115d0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80115c2:	6978      	ldr	r0, [r7, #20]
 80115c4:	f002 fd7a 	bl	80140bc <tcp_output>
  return;
 80115c8:	e001      	b.n	80115ce <tcp_listen_input+0x1be>
    return;
 80115ca:	bf00      	nop
 80115cc:	e000      	b.n	80115d0 <tcp_listen_input+0x1c0>
  return;
 80115ce:	bf00      	nop
}
 80115d0:	371c      	adds	r7, #28
 80115d2:	46bd      	mov	sp, r7
 80115d4:	bd90      	pop	{r4, r7, pc}
 80115d6:	bf00      	nop
 80115d8:	200052b8 	.word	0x200052b8
 80115dc:	0801bea0 	.word	0x0801bea0
 80115e0:	0801c098 	.word	0x0801c098
 80115e4:	0801beec 	.word	0x0801beec
 80115e8:	200052b0 	.word	0x200052b0
 80115ec:	200052b6 	.word	0x200052b6
 80115f0:	200052ac 	.word	0x200052ac
 80115f4:	2000529c 	.word	0x2000529c
 80115f8:	2000e2e0 	.word	0x2000e2e0
 80115fc:	2000e2e4 	.word	0x2000e2e4
 8011600:	2000e2d0 	.word	0x2000e2d0
 8011604:	20018ba4 	.word	0x20018ba4
 8011608:	20018ba0 	.word	0x20018ba0

0801160c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b086      	sub	sp, #24
 8011610:	af04      	add	r7, sp, #16
 8011612:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011614:	4b2f      	ldr	r3, [pc, #188]	; (80116d4 <tcp_timewait_input+0xc8>)
 8011616:	781b      	ldrb	r3, [r3, #0]
 8011618:	f003 0304 	and.w	r3, r3, #4
 801161c:	2b00      	cmp	r3, #0
 801161e:	d153      	bne.n	80116c8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d106      	bne.n	8011634 <tcp_timewait_input+0x28>
 8011626:	4b2c      	ldr	r3, [pc, #176]	; (80116d8 <tcp_timewait_input+0xcc>)
 8011628:	f240 22ee 	movw	r2, #750	; 0x2ee
 801162c:	492b      	ldr	r1, [pc, #172]	; (80116dc <tcp_timewait_input+0xd0>)
 801162e:	482c      	ldr	r0, [pc, #176]	; (80116e0 <tcp_timewait_input+0xd4>)
 8011630:	f006 fdde 	bl	80181f0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011634:	4b27      	ldr	r3, [pc, #156]	; (80116d4 <tcp_timewait_input+0xc8>)
 8011636:	781b      	ldrb	r3, [r3, #0]
 8011638:	f003 0302 	and.w	r3, r3, #2
 801163c:	2b00      	cmp	r3, #0
 801163e:	d02a      	beq.n	8011696 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011640:	4b28      	ldr	r3, [pc, #160]	; (80116e4 <tcp_timewait_input+0xd8>)
 8011642:	681a      	ldr	r2, [r3, #0]
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011648:	1ad3      	subs	r3, r2, r3
 801164a:	2b00      	cmp	r3, #0
 801164c:	db2d      	blt.n	80116aa <tcp_timewait_input+0x9e>
 801164e:	4b25      	ldr	r3, [pc, #148]	; (80116e4 <tcp_timewait_input+0xd8>)
 8011650:	681a      	ldr	r2, [r3, #0]
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011656:	6879      	ldr	r1, [r7, #4]
 8011658:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801165a:	440b      	add	r3, r1
 801165c:	1ad3      	subs	r3, r2, r3
 801165e:	2b00      	cmp	r3, #0
 8011660:	dc23      	bgt.n	80116aa <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011662:	4b21      	ldr	r3, [pc, #132]	; (80116e8 <tcp_timewait_input+0xdc>)
 8011664:	6819      	ldr	r1, [r3, #0]
 8011666:	4b21      	ldr	r3, [pc, #132]	; (80116ec <tcp_timewait_input+0xe0>)
 8011668:	881b      	ldrh	r3, [r3, #0]
 801166a:	461a      	mov	r2, r3
 801166c:	4b1d      	ldr	r3, [pc, #116]	; (80116e4 <tcp_timewait_input+0xd8>)
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011672:	4b1f      	ldr	r3, [pc, #124]	; (80116f0 <tcp_timewait_input+0xe4>)
 8011674:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011676:	885b      	ldrh	r3, [r3, #2]
 8011678:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801167a:	4a1d      	ldr	r2, [pc, #116]	; (80116f0 <tcp_timewait_input+0xe4>)
 801167c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801167e:	8812      	ldrh	r2, [r2, #0]
 8011680:	b292      	uxth	r2, r2
 8011682:	9202      	str	r2, [sp, #8]
 8011684:	9301      	str	r3, [sp, #4]
 8011686:	4b1b      	ldr	r3, [pc, #108]	; (80116f4 <tcp_timewait_input+0xe8>)
 8011688:	9300      	str	r3, [sp, #0]
 801168a:	4b1b      	ldr	r3, [pc, #108]	; (80116f8 <tcp_timewait_input+0xec>)
 801168c:	4602      	mov	r2, r0
 801168e:	6878      	ldr	r0, [r7, #4]
 8011690:	f003 fac8 	bl	8014c24 <tcp_rst>
      return;
 8011694:	e01b      	b.n	80116ce <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011696:	4b0f      	ldr	r3, [pc, #60]	; (80116d4 <tcp_timewait_input+0xc8>)
 8011698:	781b      	ldrb	r3, [r3, #0]
 801169a:	f003 0301 	and.w	r3, r3, #1
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d003      	beq.n	80116aa <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80116a2:	4b16      	ldr	r3, [pc, #88]	; (80116fc <tcp_timewait_input+0xf0>)
 80116a4:	681a      	ldr	r2, [r3, #0]
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80116aa:	4b10      	ldr	r3, [pc, #64]	; (80116ec <tcp_timewait_input+0xe0>)
 80116ac:	881b      	ldrh	r3, [r3, #0]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d00c      	beq.n	80116cc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	8b5b      	ldrh	r3, [r3, #26]
 80116b6:	f043 0302 	orr.w	r3, r3, #2
 80116ba:	b29a      	uxth	r2, r3
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80116c0:	6878      	ldr	r0, [r7, #4]
 80116c2:	f002 fcfb 	bl	80140bc <tcp_output>
  }
  return;
 80116c6:	e001      	b.n	80116cc <tcp_timewait_input+0xc0>
    return;
 80116c8:	bf00      	nop
 80116ca:	e000      	b.n	80116ce <tcp_timewait_input+0xc2>
  return;
 80116cc:	bf00      	nop
}
 80116ce:	3708      	adds	r7, #8
 80116d0:	46bd      	mov	sp, r7
 80116d2:	bd80      	pop	{r7, pc}
 80116d4:	200052b8 	.word	0x200052b8
 80116d8:	0801bea0 	.word	0x0801bea0
 80116dc:	0801c0b8 	.word	0x0801c0b8
 80116e0:	0801beec 	.word	0x0801beec
 80116e4:	200052ac 	.word	0x200052ac
 80116e8:	200052b0 	.word	0x200052b0
 80116ec:	200052b6 	.word	0x200052b6
 80116f0:	2000529c 	.word	0x2000529c
 80116f4:	2000e2e0 	.word	0x2000e2e0
 80116f8:	2000e2e4 	.word	0x2000e2e4
 80116fc:	20018ba8 	.word	0x20018ba8

08011700 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011700:	b590      	push	{r4, r7, lr}
 8011702:	b08d      	sub	sp, #52	; 0x34
 8011704:	af04      	add	r7, sp, #16
 8011706:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011708:	2300      	movs	r3, #0
 801170a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801170c:	2300      	movs	r3, #0
 801170e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d106      	bne.n	8011724 <tcp_process+0x24>
 8011716:	4ba5      	ldr	r3, [pc, #660]	; (80119ac <tcp_process+0x2ac>)
 8011718:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801171c:	49a4      	ldr	r1, [pc, #656]	; (80119b0 <tcp_process+0x2b0>)
 801171e:	48a5      	ldr	r0, [pc, #660]	; (80119b4 <tcp_process+0x2b4>)
 8011720:	f006 fd66 	bl	80181f0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011724:	4ba4      	ldr	r3, [pc, #656]	; (80119b8 <tcp_process+0x2b8>)
 8011726:	781b      	ldrb	r3, [r3, #0]
 8011728:	f003 0304 	and.w	r3, r3, #4
 801172c:	2b00      	cmp	r3, #0
 801172e:	d04e      	beq.n	80117ce <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	7d1b      	ldrb	r3, [r3, #20]
 8011734:	2b02      	cmp	r3, #2
 8011736:	d108      	bne.n	801174a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801173c:	4b9f      	ldr	r3, [pc, #636]	; (80119bc <tcp_process+0x2bc>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	429a      	cmp	r2, r3
 8011742:	d123      	bne.n	801178c <tcp_process+0x8c>
        acceptable = 1;
 8011744:	2301      	movs	r3, #1
 8011746:	76fb      	strb	r3, [r7, #27]
 8011748:	e020      	b.n	801178c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801174e:	4b9c      	ldr	r3, [pc, #624]	; (80119c0 <tcp_process+0x2c0>)
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	429a      	cmp	r2, r3
 8011754:	d102      	bne.n	801175c <tcp_process+0x5c>
        acceptable = 1;
 8011756:	2301      	movs	r3, #1
 8011758:	76fb      	strb	r3, [r7, #27]
 801175a:	e017      	b.n	801178c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801175c:	4b98      	ldr	r3, [pc, #608]	; (80119c0 <tcp_process+0x2c0>)
 801175e:	681a      	ldr	r2, [r3, #0]
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011764:	1ad3      	subs	r3, r2, r3
 8011766:	2b00      	cmp	r3, #0
 8011768:	db10      	blt.n	801178c <tcp_process+0x8c>
 801176a:	4b95      	ldr	r3, [pc, #596]	; (80119c0 <tcp_process+0x2c0>)
 801176c:	681a      	ldr	r2, [r3, #0]
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011772:	6879      	ldr	r1, [r7, #4]
 8011774:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011776:	440b      	add	r3, r1
 8011778:	1ad3      	subs	r3, r2, r3
 801177a:	2b00      	cmp	r3, #0
 801177c:	dc06      	bgt.n	801178c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	8b5b      	ldrh	r3, [r3, #26]
 8011782:	f043 0302 	orr.w	r3, r3, #2
 8011786:	b29a      	uxth	r2, r3
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801178c:	7efb      	ldrb	r3, [r7, #27]
 801178e:	2b00      	cmp	r3, #0
 8011790:	d01b      	beq.n	80117ca <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	7d1b      	ldrb	r3, [r3, #20]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d106      	bne.n	80117a8 <tcp_process+0xa8>
 801179a:	4b84      	ldr	r3, [pc, #528]	; (80119ac <tcp_process+0x2ac>)
 801179c:	f44f 724e 	mov.w	r2, #824	; 0x338
 80117a0:	4988      	ldr	r1, [pc, #544]	; (80119c4 <tcp_process+0x2c4>)
 80117a2:	4884      	ldr	r0, [pc, #528]	; (80119b4 <tcp_process+0x2b4>)
 80117a4:	f006 fd24 	bl	80181f0 <iprintf>
      recv_flags |= TF_RESET;
 80117a8:	4b87      	ldr	r3, [pc, #540]	; (80119c8 <tcp_process+0x2c8>)
 80117aa:	781b      	ldrb	r3, [r3, #0]
 80117ac:	f043 0308 	orr.w	r3, r3, #8
 80117b0:	b2da      	uxtb	r2, r3
 80117b2:	4b85      	ldr	r3, [pc, #532]	; (80119c8 <tcp_process+0x2c8>)
 80117b4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	8b5b      	ldrh	r3, [r3, #26]
 80117ba:	f023 0301 	bic.w	r3, r3, #1
 80117be:	b29a      	uxth	r2, r3
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80117c4:	f06f 030d 	mvn.w	r3, #13
 80117c8:	e37a      	b.n	8011ec0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80117ca:	2300      	movs	r3, #0
 80117cc:	e378      	b.n	8011ec0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80117ce:	4b7a      	ldr	r3, [pc, #488]	; (80119b8 <tcp_process+0x2b8>)
 80117d0:	781b      	ldrb	r3, [r3, #0]
 80117d2:	f003 0302 	and.w	r3, r3, #2
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d010      	beq.n	80117fc <tcp_process+0xfc>
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	7d1b      	ldrb	r3, [r3, #20]
 80117de:	2b02      	cmp	r3, #2
 80117e0:	d00c      	beq.n	80117fc <tcp_process+0xfc>
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	7d1b      	ldrb	r3, [r3, #20]
 80117e6:	2b03      	cmp	r3, #3
 80117e8:	d008      	beq.n	80117fc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	8b5b      	ldrh	r3, [r3, #26]
 80117ee:	f043 0302 	orr.w	r3, r3, #2
 80117f2:	b29a      	uxth	r2, r3
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80117f8:	2300      	movs	r3, #0
 80117fa:	e361      	b.n	8011ec0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	8b5b      	ldrh	r3, [r3, #26]
 8011800:	f003 0310 	and.w	r3, r3, #16
 8011804:	2b00      	cmp	r3, #0
 8011806:	d103      	bne.n	8011810 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011808:	4b70      	ldr	r3, [pc, #448]	; (80119cc <tcp_process+0x2cc>)
 801180a:	681a      	ldr	r2, [r3, #0]
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	2200      	movs	r2, #0
 8011814:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	2200      	movs	r2, #0
 801181c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8011820:	6878      	ldr	r0, [r7, #4]
 8011822:	f001 fc2d 	bl	8013080 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	7d1b      	ldrb	r3, [r3, #20]
 801182a:	3b02      	subs	r3, #2
 801182c:	2b07      	cmp	r3, #7
 801182e:	f200 8337 	bhi.w	8011ea0 <tcp_process+0x7a0>
 8011832:	a201      	add	r2, pc, #4	; (adr r2, 8011838 <tcp_process+0x138>)
 8011834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011838:	08011859 	.word	0x08011859
 801183c:	08011a89 	.word	0x08011a89
 8011840:	08011c01 	.word	0x08011c01
 8011844:	08011c2b 	.word	0x08011c2b
 8011848:	08011d4f 	.word	0x08011d4f
 801184c:	08011c01 	.word	0x08011c01
 8011850:	08011ddb 	.word	0x08011ddb
 8011854:	08011e6b 	.word	0x08011e6b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011858:	4b57      	ldr	r3, [pc, #348]	; (80119b8 <tcp_process+0x2b8>)
 801185a:	781b      	ldrb	r3, [r3, #0]
 801185c:	f003 0310 	and.w	r3, r3, #16
 8011860:	2b00      	cmp	r3, #0
 8011862:	f000 80e4 	beq.w	8011a2e <tcp_process+0x32e>
 8011866:	4b54      	ldr	r3, [pc, #336]	; (80119b8 <tcp_process+0x2b8>)
 8011868:	781b      	ldrb	r3, [r3, #0]
 801186a:	f003 0302 	and.w	r3, r3, #2
 801186e:	2b00      	cmp	r3, #0
 8011870:	f000 80dd 	beq.w	8011a2e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011878:	1c5a      	adds	r2, r3, #1
 801187a:	4b50      	ldr	r3, [pc, #320]	; (80119bc <tcp_process+0x2bc>)
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	429a      	cmp	r2, r3
 8011880:	f040 80d5 	bne.w	8011a2e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011884:	4b4e      	ldr	r3, [pc, #312]	; (80119c0 <tcp_process+0x2c0>)
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	1c5a      	adds	r2, r3, #1
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8011896:	4b49      	ldr	r3, [pc, #292]	; (80119bc <tcp_process+0x2bc>)
 8011898:	681a      	ldr	r2, [r3, #0]
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801189e:	4b4c      	ldr	r3, [pc, #304]	; (80119d0 <tcp_process+0x2d0>)
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	89db      	ldrh	r3, [r3, #14]
 80118a4:	b29a      	uxth	r2, r3
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80118b8:	4b41      	ldr	r3, [pc, #260]	; (80119c0 <tcp_process+0x2c0>)
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	1e5a      	subs	r2, r3, #1
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	2204      	movs	r2, #4
 80118c6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	3304      	adds	r3, #4
 80118d0:	4618      	mov	r0, r3
 80118d2:	f004 ff77 	bl	80167c4 <ip4_route>
 80118d6:	4601      	mov	r1, r0
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	3304      	adds	r3, #4
 80118dc:	461a      	mov	r2, r3
 80118de:	4620      	mov	r0, r4
 80118e0:	f7ff f88e 	bl	8010a00 <tcp_eff_send_mss_netif>
 80118e4:	4603      	mov	r3, r0
 80118e6:	461a      	mov	r2, r3
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118f0:	009a      	lsls	r2, r3, #2
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80118f6:	005b      	lsls	r3, r3, #1
 80118f8:	f241 111c 	movw	r1, #4380	; 0x111c
 80118fc:	428b      	cmp	r3, r1
 80118fe:	bf38      	it	cc
 8011900:	460b      	movcc	r3, r1
 8011902:	429a      	cmp	r2, r3
 8011904:	d204      	bcs.n	8011910 <tcp_process+0x210>
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801190a:	009b      	lsls	r3, r3, #2
 801190c:	b29b      	uxth	r3, r3
 801190e:	e00d      	b.n	801192c <tcp_process+0x22c>
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011914:	005b      	lsls	r3, r3, #1
 8011916:	f241 121c 	movw	r2, #4380	; 0x111c
 801191a:	4293      	cmp	r3, r2
 801191c:	d904      	bls.n	8011928 <tcp_process+0x228>
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011922:	005b      	lsls	r3, r3, #1
 8011924:	b29b      	uxth	r3, r3
 8011926:	e001      	b.n	801192c <tcp_process+0x22c>
 8011928:	f241 131c 	movw	r3, #4380	; 0x111c
 801192c:	687a      	ldr	r2, [r7, #4]
 801192e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011938:	2b00      	cmp	r3, #0
 801193a:	d106      	bne.n	801194a <tcp_process+0x24a>
 801193c:	4b1b      	ldr	r3, [pc, #108]	; (80119ac <tcp_process+0x2ac>)
 801193e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8011942:	4924      	ldr	r1, [pc, #144]	; (80119d4 <tcp_process+0x2d4>)
 8011944:	481b      	ldr	r0, [pc, #108]	; (80119b4 <tcp_process+0x2b4>)
 8011946:	f006 fc53 	bl	80181f0 <iprintf>
        --pcb->snd_queuelen;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011950:	3b01      	subs	r3, #1
 8011952:	b29a      	uxth	r2, r3
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801195e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8011960:	69fb      	ldr	r3, [r7, #28]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d111      	bne.n	801198a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801196a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801196c:	69fb      	ldr	r3, [r7, #28]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d106      	bne.n	8011980 <tcp_process+0x280>
 8011972:	4b0e      	ldr	r3, [pc, #56]	; (80119ac <tcp_process+0x2ac>)
 8011974:	f44f 725d 	mov.w	r2, #884	; 0x374
 8011978:	4917      	ldr	r1, [pc, #92]	; (80119d8 <tcp_process+0x2d8>)
 801197a:	480e      	ldr	r0, [pc, #56]	; (80119b4 <tcp_process+0x2b4>)
 801197c:	f006 fc38 	bl	80181f0 <iprintf>
          pcb->unsent = rseg->next;
 8011980:	69fb      	ldr	r3, [r7, #28]
 8011982:	681a      	ldr	r2, [r3, #0]
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	66da      	str	r2, [r3, #108]	; 0x6c
 8011988:	e003      	b.n	8011992 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801198a:	69fb      	ldr	r3, [r7, #28]
 801198c:	681a      	ldr	r2, [r3, #0]
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8011992:	69f8      	ldr	r0, [r7, #28]
 8011994:	f7fe fc51 	bl	801023a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801199c:	2b00      	cmp	r3, #0
 801199e:	d11d      	bne.n	80119dc <tcp_process+0x2dc>
          pcb->rtime = -1;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119a6:	861a      	strh	r2, [r3, #48]	; 0x30
 80119a8:	e01f      	b.n	80119ea <tcp_process+0x2ea>
 80119aa:	bf00      	nop
 80119ac:	0801bea0 	.word	0x0801bea0
 80119b0:	0801c0d8 	.word	0x0801c0d8
 80119b4:	0801beec 	.word	0x0801beec
 80119b8:	200052b8 	.word	0x200052b8
 80119bc:	200052b0 	.word	0x200052b0
 80119c0:	200052ac 	.word	0x200052ac
 80119c4:	0801c0f4 	.word	0x0801c0f4
 80119c8:	200052b9 	.word	0x200052b9
 80119cc:	20018ba8 	.word	0x20018ba8
 80119d0:	2000529c 	.word	0x2000529c
 80119d4:	0801c114 	.word	0x0801c114
 80119d8:	0801c12c 	.word	0x0801c12c
        } else {
          pcb->rtime = 0;
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	2200      	movs	r2, #0
 80119e0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	2200      	movs	r2, #0
 80119e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d00a      	beq.n	8011a0a <tcp_process+0x30a>
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80119fa:	687a      	ldr	r2, [r7, #4]
 80119fc:	6910      	ldr	r0, [r2, #16]
 80119fe:	2200      	movs	r2, #0
 8011a00:	6879      	ldr	r1, [r7, #4]
 8011a02:	4798      	blx	r3
 8011a04:	4603      	mov	r3, r0
 8011a06:	76bb      	strb	r3, [r7, #26]
 8011a08:	e001      	b.n	8011a0e <tcp_process+0x30e>
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8011a0e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011a12:	f113 0f0d 	cmn.w	r3, #13
 8011a16:	d102      	bne.n	8011a1e <tcp_process+0x31e>
          return ERR_ABRT;
 8011a18:	f06f 030c 	mvn.w	r3, #12
 8011a1c:	e250      	b.n	8011ec0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	8b5b      	ldrh	r3, [r3, #26]
 8011a22:	f043 0302 	orr.w	r3, r3, #2
 8011a26:	b29a      	uxth	r2, r3
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011a2c:	e23a      	b.n	8011ea4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8011a2e:	4b9d      	ldr	r3, [pc, #628]	; (8011ca4 <tcp_process+0x5a4>)
 8011a30:	781b      	ldrb	r3, [r3, #0]
 8011a32:	f003 0310 	and.w	r3, r3, #16
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	f000 8234 	beq.w	8011ea4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a3c:	4b9a      	ldr	r3, [pc, #616]	; (8011ca8 <tcp_process+0x5a8>)
 8011a3e:	6819      	ldr	r1, [r3, #0]
 8011a40:	4b9a      	ldr	r3, [pc, #616]	; (8011cac <tcp_process+0x5ac>)
 8011a42:	881b      	ldrh	r3, [r3, #0]
 8011a44:	461a      	mov	r2, r3
 8011a46:	4b9a      	ldr	r3, [pc, #616]	; (8011cb0 <tcp_process+0x5b0>)
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011a4c:	4b99      	ldr	r3, [pc, #612]	; (8011cb4 <tcp_process+0x5b4>)
 8011a4e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a50:	885b      	ldrh	r3, [r3, #2]
 8011a52:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011a54:	4a97      	ldr	r2, [pc, #604]	; (8011cb4 <tcp_process+0x5b4>)
 8011a56:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011a58:	8812      	ldrh	r2, [r2, #0]
 8011a5a:	b292      	uxth	r2, r2
 8011a5c:	9202      	str	r2, [sp, #8]
 8011a5e:	9301      	str	r3, [sp, #4]
 8011a60:	4b95      	ldr	r3, [pc, #596]	; (8011cb8 <tcp_process+0x5b8>)
 8011a62:	9300      	str	r3, [sp, #0]
 8011a64:	4b95      	ldr	r3, [pc, #596]	; (8011cbc <tcp_process+0x5bc>)
 8011a66:	4602      	mov	r2, r0
 8011a68:	6878      	ldr	r0, [r7, #4]
 8011a6a:	f003 f8db 	bl	8014c24 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011a74:	2b05      	cmp	r3, #5
 8011a76:	f200 8215 	bhi.w	8011ea4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	2200      	movs	r2, #0
 8011a7e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8011a80:	6878      	ldr	r0, [r7, #4]
 8011a82:	f002 fea5 	bl	80147d0 <tcp_rexmit_rto>
      break;
 8011a86:	e20d      	b.n	8011ea4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011a88:	4b86      	ldr	r3, [pc, #536]	; (8011ca4 <tcp_process+0x5a4>)
 8011a8a:	781b      	ldrb	r3, [r3, #0]
 8011a8c:	f003 0310 	and.w	r3, r3, #16
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	f000 80a1 	beq.w	8011bd8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011a96:	4b84      	ldr	r3, [pc, #528]	; (8011ca8 <tcp_process+0x5a8>)
 8011a98:	681a      	ldr	r2, [r3, #0]
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a9e:	1ad3      	subs	r3, r2, r3
 8011aa0:	3b01      	subs	r3, #1
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	db7e      	blt.n	8011ba4 <tcp_process+0x4a4>
 8011aa6:	4b80      	ldr	r3, [pc, #512]	; (8011ca8 <tcp_process+0x5a8>)
 8011aa8:	681a      	ldr	r2, [r3, #0]
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011aae:	1ad3      	subs	r3, r2, r3
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	dc77      	bgt.n	8011ba4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	2204      	movs	r2, #4
 8011ab8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d102      	bne.n	8011ac8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011ac2:	23fa      	movs	r3, #250	; 0xfa
 8011ac4:	76bb      	strb	r3, [r7, #26]
 8011ac6:	e01d      	b.n	8011b04 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011acc:	699b      	ldr	r3, [r3, #24]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d106      	bne.n	8011ae0 <tcp_process+0x3e0>
 8011ad2:	4b7b      	ldr	r3, [pc, #492]	; (8011cc0 <tcp_process+0x5c0>)
 8011ad4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011ad8:	497a      	ldr	r1, [pc, #488]	; (8011cc4 <tcp_process+0x5c4>)
 8011ada:	487b      	ldr	r0, [pc, #492]	; (8011cc8 <tcp_process+0x5c8>)
 8011adc:	f006 fb88 	bl	80181f0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011ae4:	699b      	ldr	r3, [r3, #24]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d00a      	beq.n	8011b00 <tcp_process+0x400>
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011aee:	699b      	ldr	r3, [r3, #24]
 8011af0:	687a      	ldr	r2, [r7, #4]
 8011af2:	6910      	ldr	r0, [r2, #16]
 8011af4:	2200      	movs	r2, #0
 8011af6:	6879      	ldr	r1, [r7, #4]
 8011af8:	4798      	blx	r3
 8011afa:	4603      	mov	r3, r0
 8011afc:	76bb      	strb	r3, [r7, #26]
 8011afe:	e001      	b.n	8011b04 <tcp_process+0x404>
 8011b00:	23f0      	movs	r3, #240	; 0xf0
 8011b02:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011b04:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d00a      	beq.n	8011b22 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011b0c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011b10:	f113 0f0d 	cmn.w	r3, #13
 8011b14:	d002      	beq.n	8011b1c <tcp_process+0x41c>
              tcp_abort(pcb);
 8011b16:	6878      	ldr	r0, [r7, #4]
 8011b18:	f7fd fcea 	bl	800f4f0 <tcp_abort>
            }
            return ERR_ABRT;
 8011b1c:	f06f 030c 	mvn.w	r3, #12
 8011b20:	e1ce      	b.n	8011ec0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011b22:	6878      	ldr	r0, [r7, #4]
 8011b24:	f000 fae0 	bl	80120e8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011b28:	4b68      	ldr	r3, [pc, #416]	; (8011ccc <tcp_process+0x5cc>)
 8011b2a:	881b      	ldrh	r3, [r3, #0]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d005      	beq.n	8011b3c <tcp_process+0x43c>
            recv_acked--;
 8011b30:	4b66      	ldr	r3, [pc, #408]	; (8011ccc <tcp_process+0x5cc>)
 8011b32:	881b      	ldrh	r3, [r3, #0]
 8011b34:	3b01      	subs	r3, #1
 8011b36:	b29a      	uxth	r2, r3
 8011b38:	4b64      	ldr	r3, [pc, #400]	; (8011ccc <tcp_process+0x5cc>)
 8011b3a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b40:	009a      	lsls	r2, r3, #2
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b46:	005b      	lsls	r3, r3, #1
 8011b48:	f241 111c 	movw	r1, #4380	; 0x111c
 8011b4c:	428b      	cmp	r3, r1
 8011b4e:	bf38      	it	cc
 8011b50:	460b      	movcc	r3, r1
 8011b52:	429a      	cmp	r2, r3
 8011b54:	d204      	bcs.n	8011b60 <tcp_process+0x460>
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b5a:	009b      	lsls	r3, r3, #2
 8011b5c:	b29b      	uxth	r3, r3
 8011b5e:	e00d      	b.n	8011b7c <tcp_process+0x47c>
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b64:	005b      	lsls	r3, r3, #1
 8011b66:	f241 121c 	movw	r2, #4380	; 0x111c
 8011b6a:	4293      	cmp	r3, r2
 8011b6c:	d904      	bls.n	8011b78 <tcp_process+0x478>
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b72:	005b      	lsls	r3, r3, #1
 8011b74:	b29b      	uxth	r3, r3
 8011b76:	e001      	b.n	8011b7c <tcp_process+0x47c>
 8011b78:	f241 131c 	movw	r3, #4380	; 0x111c
 8011b7c:	687a      	ldr	r2, [r7, #4]
 8011b7e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011b82:	4b53      	ldr	r3, [pc, #332]	; (8011cd0 <tcp_process+0x5d0>)
 8011b84:	781b      	ldrb	r3, [r3, #0]
 8011b86:	f003 0320 	and.w	r3, r3, #32
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d037      	beq.n	8011bfe <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	8b5b      	ldrh	r3, [r3, #26]
 8011b92:	f043 0302 	orr.w	r3, r3, #2
 8011b96:	b29a      	uxth	r2, r3
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	2207      	movs	r2, #7
 8011ba0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011ba2:	e02c      	b.n	8011bfe <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011ba4:	4b40      	ldr	r3, [pc, #256]	; (8011ca8 <tcp_process+0x5a8>)
 8011ba6:	6819      	ldr	r1, [r3, #0]
 8011ba8:	4b40      	ldr	r3, [pc, #256]	; (8011cac <tcp_process+0x5ac>)
 8011baa:	881b      	ldrh	r3, [r3, #0]
 8011bac:	461a      	mov	r2, r3
 8011bae:	4b40      	ldr	r3, [pc, #256]	; (8011cb0 <tcp_process+0x5b0>)
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011bb4:	4b3f      	ldr	r3, [pc, #252]	; (8011cb4 <tcp_process+0x5b4>)
 8011bb6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011bb8:	885b      	ldrh	r3, [r3, #2]
 8011bba:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011bbc:	4a3d      	ldr	r2, [pc, #244]	; (8011cb4 <tcp_process+0x5b4>)
 8011bbe:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011bc0:	8812      	ldrh	r2, [r2, #0]
 8011bc2:	b292      	uxth	r2, r2
 8011bc4:	9202      	str	r2, [sp, #8]
 8011bc6:	9301      	str	r3, [sp, #4]
 8011bc8:	4b3b      	ldr	r3, [pc, #236]	; (8011cb8 <tcp_process+0x5b8>)
 8011bca:	9300      	str	r3, [sp, #0]
 8011bcc:	4b3b      	ldr	r3, [pc, #236]	; (8011cbc <tcp_process+0x5bc>)
 8011bce:	4602      	mov	r2, r0
 8011bd0:	6878      	ldr	r0, [r7, #4]
 8011bd2:	f003 f827 	bl	8014c24 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011bd6:	e167      	b.n	8011ea8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011bd8:	4b32      	ldr	r3, [pc, #200]	; (8011ca4 <tcp_process+0x5a4>)
 8011bda:	781b      	ldrb	r3, [r3, #0]
 8011bdc:	f003 0302 	and.w	r3, r3, #2
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	f000 8161 	beq.w	8011ea8 <tcp_process+0x7a8>
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bea:	1e5a      	subs	r2, r3, #1
 8011bec:	4b30      	ldr	r3, [pc, #192]	; (8011cb0 <tcp_process+0x5b0>)
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	429a      	cmp	r2, r3
 8011bf2:	f040 8159 	bne.w	8011ea8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011bf6:	6878      	ldr	r0, [r7, #4]
 8011bf8:	f002 fe0c 	bl	8014814 <tcp_rexmit>
      break;
 8011bfc:	e154      	b.n	8011ea8 <tcp_process+0x7a8>
 8011bfe:	e153      	b.n	8011ea8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011c00:	6878      	ldr	r0, [r7, #4]
 8011c02:	f000 fa71 	bl	80120e8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011c06:	4b32      	ldr	r3, [pc, #200]	; (8011cd0 <tcp_process+0x5d0>)
 8011c08:	781b      	ldrb	r3, [r3, #0]
 8011c0a:	f003 0320 	and.w	r3, r3, #32
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	f000 814c 	beq.w	8011eac <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	8b5b      	ldrh	r3, [r3, #26]
 8011c18:	f043 0302 	orr.w	r3, r3, #2
 8011c1c:	b29a      	uxth	r2, r3
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	2207      	movs	r2, #7
 8011c26:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011c28:	e140      	b.n	8011eac <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011c2a:	6878      	ldr	r0, [r7, #4]
 8011c2c:	f000 fa5c 	bl	80120e8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011c30:	4b27      	ldr	r3, [pc, #156]	; (8011cd0 <tcp_process+0x5d0>)
 8011c32:	781b      	ldrb	r3, [r3, #0]
 8011c34:	f003 0320 	and.w	r3, r3, #32
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d071      	beq.n	8011d20 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011c3c:	4b19      	ldr	r3, [pc, #100]	; (8011ca4 <tcp_process+0x5a4>)
 8011c3e:	781b      	ldrb	r3, [r3, #0]
 8011c40:	f003 0310 	and.w	r3, r3, #16
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d060      	beq.n	8011d0a <tcp_process+0x60a>
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011c4c:	4b16      	ldr	r3, [pc, #88]	; (8011ca8 <tcp_process+0x5a8>)
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	429a      	cmp	r2, r3
 8011c52:	d15a      	bne.n	8011d0a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d156      	bne.n	8011d0a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	8b5b      	ldrh	r3, [r3, #26]
 8011c60:	f043 0302 	orr.w	r3, r3, #2
 8011c64:	b29a      	uxth	r2, r3
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011c6a:	6878      	ldr	r0, [r7, #4]
 8011c6c:	f7fe fdbe 	bl	80107ec <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011c70:	4b18      	ldr	r3, [pc, #96]	; (8011cd4 <tcp_process+0x5d4>)
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	687a      	ldr	r2, [r7, #4]
 8011c76:	429a      	cmp	r2, r3
 8011c78:	d105      	bne.n	8011c86 <tcp_process+0x586>
 8011c7a:	4b16      	ldr	r3, [pc, #88]	; (8011cd4 <tcp_process+0x5d4>)
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	68db      	ldr	r3, [r3, #12]
 8011c80:	4a14      	ldr	r2, [pc, #80]	; (8011cd4 <tcp_process+0x5d4>)
 8011c82:	6013      	str	r3, [r2, #0]
 8011c84:	e02e      	b.n	8011ce4 <tcp_process+0x5e4>
 8011c86:	4b13      	ldr	r3, [pc, #76]	; (8011cd4 <tcp_process+0x5d4>)
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	617b      	str	r3, [r7, #20]
 8011c8c:	e027      	b.n	8011cde <tcp_process+0x5de>
 8011c8e:	697b      	ldr	r3, [r7, #20]
 8011c90:	68db      	ldr	r3, [r3, #12]
 8011c92:	687a      	ldr	r2, [r7, #4]
 8011c94:	429a      	cmp	r2, r3
 8011c96:	d11f      	bne.n	8011cd8 <tcp_process+0x5d8>
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	68da      	ldr	r2, [r3, #12]
 8011c9c:	697b      	ldr	r3, [r7, #20]
 8011c9e:	60da      	str	r2, [r3, #12]
 8011ca0:	e020      	b.n	8011ce4 <tcp_process+0x5e4>
 8011ca2:	bf00      	nop
 8011ca4:	200052b8 	.word	0x200052b8
 8011ca8:	200052b0 	.word	0x200052b0
 8011cac:	200052b6 	.word	0x200052b6
 8011cb0:	200052ac 	.word	0x200052ac
 8011cb4:	2000529c 	.word	0x2000529c
 8011cb8:	2000e2e0 	.word	0x2000e2e0
 8011cbc:	2000e2e4 	.word	0x2000e2e4
 8011cc0:	0801bea0 	.word	0x0801bea0
 8011cc4:	0801c140 	.word	0x0801c140
 8011cc8:	0801beec 	.word	0x0801beec
 8011ccc:	200052b4 	.word	0x200052b4
 8011cd0:	200052b9 	.word	0x200052b9
 8011cd4:	20018ba4 	.word	0x20018ba4
 8011cd8:	697b      	ldr	r3, [r7, #20]
 8011cda:	68db      	ldr	r3, [r3, #12]
 8011cdc:	617b      	str	r3, [r7, #20]
 8011cde:	697b      	ldr	r3, [r7, #20]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d1d4      	bne.n	8011c8e <tcp_process+0x58e>
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	60da      	str	r2, [r3, #12]
 8011cea:	4b77      	ldr	r3, [pc, #476]	; (8011ec8 <tcp_process+0x7c8>)
 8011cec:	2201      	movs	r2, #1
 8011cee:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	220a      	movs	r2, #10
 8011cf4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011cf6:	4b75      	ldr	r3, [pc, #468]	; (8011ecc <tcp_process+0x7cc>)
 8011cf8:	681a      	ldr	r2, [r3, #0]
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	60da      	str	r2, [r3, #12]
 8011cfe:	4a73      	ldr	r2, [pc, #460]	; (8011ecc <tcp_process+0x7cc>)
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	6013      	str	r3, [r2, #0]
 8011d04:	f003 f950 	bl	8014fa8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011d08:	e0d2      	b.n	8011eb0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	8b5b      	ldrh	r3, [r3, #26]
 8011d0e:	f043 0302 	orr.w	r3, r3, #2
 8011d12:	b29a      	uxth	r2, r3
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	2208      	movs	r2, #8
 8011d1c:	751a      	strb	r2, [r3, #20]
      break;
 8011d1e:	e0c7      	b.n	8011eb0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011d20:	4b6b      	ldr	r3, [pc, #428]	; (8011ed0 <tcp_process+0x7d0>)
 8011d22:	781b      	ldrb	r3, [r3, #0]
 8011d24:	f003 0310 	and.w	r3, r3, #16
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	f000 80c1 	beq.w	8011eb0 <tcp_process+0x7b0>
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011d32:	4b68      	ldr	r3, [pc, #416]	; (8011ed4 <tcp_process+0x7d4>)
 8011d34:	681b      	ldr	r3, [r3, #0]
 8011d36:	429a      	cmp	r2, r3
 8011d38:	f040 80ba 	bne.w	8011eb0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	f040 80b5 	bne.w	8011eb0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	2206      	movs	r2, #6
 8011d4a:	751a      	strb	r2, [r3, #20]
      break;
 8011d4c:	e0b0      	b.n	8011eb0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011d4e:	6878      	ldr	r0, [r7, #4]
 8011d50:	f000 f9ca 	bl	80120e8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011d54:	4b60      	ldr	r3, [pc, #384]	; (8011ed8 <tcp_process+0x7d8>)
 8011d56:	781b      	ldrb	r3, [r3, #0]
 8011d58:	f003 0320 	and.w	r3, r3, #32
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	f000 80a9 	beq.w	8011eb4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	8b5b      	ldrh	r3, [r3, #26]
 8011d66:	f043 0302 	orr.w	r3, r3, #2
 8011d6a:	b29a      	uxth	r2, r3
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011d70:	6878      	ldr	r0, [r7, #4]
 8011d72:	f7fe fd3b 	bl	80107ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011d76:	4b59      	ldr	r3, [pc, #356]	; (8011edc <tcp_process+0x7dc>)
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	687a      	ldr	r2, [r7, #4]
 8011d7c:	429a      	cmp	r2, r3
 8011d7e:	d105      	bne.n	8011d8c <tcp_process+0x68c>
 8011d80:	4b56      	ldr	r3, [pc, #344]	; (8011edc <tcp_process+0x7dc>)
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	68db      	ldr	r3, [r3, #12]
 8011d86:	4a55      	ldr	r2, [pc, #340]	; (8011edc <tcp_process+0x7dc>)
 8011d88:	6013      	str	r3, [r2, #0]
 8011d8a:	e013      	b.n	8011db4 <tcp_process+0x6b4>
 8011d8c:	4b53      	ldr	r3, [pc, #332]	; (8011edc <tcp_process+0x7dc>)
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	613b      	str	r3, [r7, #16]
 8011d92:	e00c      	b.n	8011dae <tcp_process+0x6ae>
 8011d94:	693b      	ldr	r3, [r7, #16]
 8011d96:	68db      	ldr	r3, [r3, #12]
 8011d98:	687a      	ldr	r2, [r7, #4]
 8011d9a:	429a      	cmp	r2, r3
 8011d9c:	d104      	bne.n	8011da8 <tcp_process+0x6a8>
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	68da      	ldr	r2, [r3, #12]
 8011da2:	693b      	ldr	r3, [r7, #16]
 8011da4:	60da      	str	r2, [r3, #12]
 8011da6:	e005      	b.n	8011db4 <tcp_process+0x6b4>
 8011da8:	693b      	ldr	r3, [r7, #16]
 8011daa:	68db      	ldr	r3, [r3, #12]
 8011dac:	613b      	str	r3, [r7, #16]
 8011dae:	693b      	ldr	r3, [r7, #16]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d1ef      	bne.n	8011d94 <tcp_process+0x694>
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	2200      	movs	r2, #0
 8011db8:	60da      	str	r2, [r3, #12]
 8011dba:	4b43      	ldr	r3, [pc, #268]	; (8011ec8 <tcp_process+0x7c8>)
 8011dbc:	2201      	movs	r2, #1
 8011dbe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	220a      	movs	r2, #10
 8011dc4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011dc6:	4b41      	ldr	r3, [pc, #260]	; (8011ecc <tcp_process+0x7cc>)
 8011dc8:	681a      	ldr	r2, [r3, #0]
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	60da      	str	r2, [r3, #12]
 8011dce:	4a3f      	ldr	r2, [pc, #252]	; (8011ecc <tcp_process+0x7cc>)
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	6013      	str	r3, [r2, #0]
 8011dd4:	f003 f8e8 	bl	8014fa8 <tcp_timer_needed>
      }
      break;
 8011dd8:	e06c      	b.n	8011eb4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011dda:	6878      	ldr	r0, [r7, #4]
 8011ddc:	f000 f984 	bl	80120e8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011de0:	4b3b      	ldr	r3, [pc, #236]	; (8011ed0 <tcp_process+0x7d0>)
 8011de2:	781b      	ldrb	r3, [r3, #0]
 8011de4:	f003 0310 	and.w	r3, r3, #16
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d065      	beq.n	8011eb8 <tcp_process+0x7b8>
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011df0:	4b38      	ldr	r3, [pc, #224]	; (8011ed4 <tcp_process+0x7d4>)
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	429a      	cmp	r2, r3
 8011df6:	d15f      	bne.n	8011eb8 <tcp_process+0x7b8>
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d15b      	bne.n	8011eb8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011e00:	6878      	ldr	r0, [r7, #4]
 8011e02:	f7fe fcf3 	bl	80107ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011e06:	4b35      	ldr	r3, [pc, #212]	; (8011edc <tcp_process+0x7dc>)
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	687a      	ldr	r2, [r7, #4]
 8011e0c:	429a      	cmp	r2, r3
 8011e0e:	d105      	bne.n	8011e1c <tcp_process+0x71c>
 8011e10:	4b32      	ldr	r3, [pc, #200]	; (8011edc <tcp_process+0x7dc>)
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	68db      	ldr	r3, [r3, #12]
 8011e16:	4a31      	ldr	r2, [pc, #196]	; (8011edc <tcp_process+0x7dc>)
 8011e18:	6013      	str	r3, [r2, #0]
 8011e1a:	e013      	b.n	8011e44 <tcp_process+0x744>
 8011e1c:	4b2f      	ldr	r3, [pc, #188]	; (8011edc <tcp_process+0x7dc>)
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	60fb      	str	r3, [r7, #12]
 8011e22:	e00c      	b.n	8011e3e <tcp_process+0x73e>
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	68db      	ldr	r3, [r3, #12]
 8011e28:	687a      	ldr	r2, [r7, #4]
 8011e2a:	429a      	cmp	r2, r3
 8011e2c:	d104      	bne.n	8011e38 <tcp_process+0x738>
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	68da      	ldr	r2, [r3, #12]
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	60da      	str	r2, [r3, #12]
 8011e36:	e005      	b.n	8011e44 <tcp_process+0x744>
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	68db      	ldr	r3, [r3, #12]
 8011e3c:	60fb      	str	r3, [r7, #12]
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d1ef      	bne.n	8011e24 <tcp_process+0x724>
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	2200      	movs	r2, #0
 8011e48:	60da      	str	r2, [r3, #12]
 8011e4a:	4b1f      	ldr	r3, [pc, #124]	; (8011ec8 <tcp_process+0x7c8>)
 8011e4c:	2201      	movs	r2, #1
 8011e4e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	220a      	movs	r2, #10
 8011e54:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011e56:	4b1d      	ldr	r3, [pc, #116]	; (8011ecc <tcp_process+0x7cc>)
 8011e58:	681a      	ldr	r2, [r3, #0]
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	60da      	str	r2, [r3, #12]
 8011e5e:	4a1b      	ldr	r2, [pc, #108]	; (8011ecc <tcp_process+0x7cc>)
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	6013      	str	r3, [r2, #0]
 8011e64:	f003 f8a0 	bl	8014fa8 <tcp_timer_needed>
      }
      break;
 8011e68:	e026      	b.n	8011eb8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011e6a:	6878      	ldr	r0, [r7, #4]
 8011e6c:	f000 f93c 	bl	80120e8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011e70:	4b17      	ldr	r3, [pc, #92]	; (8011ed0 <tcp_process+0x7d0>)
 8011e72:	781b      	ldrb	r3, [r3, #0]
 8011e74:	f003 0310 	and.w	r3, r3, #16
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d01f      	beq.n	8011ebc <tcp_process+0x7bc>
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011e80:	4b14      	ldr	r3, [pc, #80]	; (8011ed4 <tcp_process+0x7d4>)
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	429a      	cmp	r2, r3
 8011e86:	d119      	bne.n	8011ebc <tcp_process+0x7bc>
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d115      	bne.n	8011ebc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011e90:	4b11      	ldr	r3, [pc, #68]	; (8011ed8 <tcp_process+0x7d8>)
 8011e92:	781b      	ldrb	r3, [r3, #0]
 8011e94:	f043 0310 	orr.w	r3, r3, #16
 8011e98:	b2da      	uxtb	r2, r3
 8011e9a:	4b0f      	ldr	r3, [pc, #60]	; (8011ed8 <tcp_process+0x7d8>)
 8011e9c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011e9e:	e00d      	b.n	8011ebc <tcp_process+0x7bc>
    default:
      break;
 8011ea0:	bf00      	nop
 8011ea2:	e00c      	b.n	8011ebe <tcp_process+0x7be>
      break;
 8011ea4:	bf00      	nop
 8011ea6:	e00a      	b.n	8011ebe <tcp_process+0x7be>
      break;
 8011ea8:	bf00      	nop
 8011eaa:	e008      	b.n	8011ebe <tcp_process+0x7be>
      break;
 8011eac:	bf00      	nop
 8011eae:	e006      	b.n	8011ebe <tcp_process+0x7be>
      break;
 8011eb0:	bf00      	nop
 8011eb2:	e004      	b.n	8011ebe <tcp_process+0x7be>
      break;
 8011eb4:	bf00      	nop
 8011eb6:	e002      	b.n	8011ebe <tcp_process+0x7be>
      break;
 8011eb8:	bf00      	nop
 8011eba:	e000      	b.n	8011ebe <tcp_process+0x7be>
      break;
 8011ebc:	bf00      	nop
  }
  return ERR_OK;
 8011ebe:	2300      	movs	r3, #0
}
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	3724      	adds	r7, #36	; 0x24
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	bd90      	pop	{r4, r7, pc}
 8011ec8:	20018ba0 	.word	0x20018ba0
 8011ecc:	20018bb4 	.word	0x20018bb4
 8011ed0:	200052b8 	.word	0x200052b8
 8011ed4:	200052b0 	.word	0x200052b0
 8011ed8:	200052b9 	.word	0x200052b9
 8011edc:	20018ba4 	.word	0x20018ba4

08011ee0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011ee0:	b590      	push	{r4, r7, lr}
 8011ee2:	b085      	sub	sp, #20
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
 8011ee8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d106      	bne.n	8011efe <tcp_oos_insert_segment+0x1e>
 8011ef0:	4b3b      	ldr	r3, [pc, #236]	; (8011fe0 <tcp_oos_insert_segment+0x100>)
 8011ef2:	f240 421f 	movw	r2, #1055	; 0x41f
 8011ef6:	493b      	ldr	r1, [pc, #236]	; (8011fe4 <tcp_oos_insert_segment+0x104>)
 8011ef8:	483b      	ldr	r0, [pc, #236]	; (8011fe8 <tcp_oos_insert_segment+0x108>)
 8011efa:	f006 f979 	bl	80181f0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	68db      	ldr	r3, [r3, #12]
 8011f02:	899b      	ldrh	r3, [r3, #12]
 8011f04:	b29b      	uxth	r3, r3
 8011f06:	4618      	mov	r0, r3
 8011f08:	f7fb f8d4 	bl	800d0b4 <lwip_htons>
 8011f0c:	4603      	mov	r3, r0
 8011f0e:	b2db      	uxtb	r3, r3
 8011f10:	f003 0301 	and.w	r3, r3, #1
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d028      	beq.n	8011f6a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011f18:	6838      	ldr	r0, [r7, #0]
 8011f1a:	f7fe f979 	bl	8010210 <tcp_segs_free>
    next = NULL;
 8011f1e:	2300      	movs	r3, #0
 8011f20:	603b      	str	r3, [r7, #0]
 8011f22:	e056      	b.n	8011fd2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011f24:	683b      	ldr	r3, [r7, #0]
 8011f26:	68db      	ldr	r3, [r3, #12]
 8011f28:	899b      	ldrh	r3, [r3, #12]
 8011f2a:	b29b      	uxth	r3, r3
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	f7fb f8c1 	bl	800d0b4 <lwip_htons>
 8011f32:	4603      	mov	r3, r0
 8011f34:	b2db      	uxtb	r3, r3
 8011f36:	f003 0301 	and.w	r3, r3, #1
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d00d      	beq.n	8011f5a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	68db      	ldr	r3, [r3, #12]
 8011f42:	899b      	ldrh	r3, [r3, #12]
 8011f44:	b29c      	uxth	r4, r3
 8011f46:	2001      	movs	r0, #1
 8011f48:	f7fb f8b4 	bl	800d0b4 <lwip_htons>
 8011f4c:	4603      	mov	r3, r0
 8011f4e:	461a      	mov	r2, r3
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	68db      	ldr	r3, [r3, #12]
 8011f54:	4322      	orrs	r2, r4
 8011f56:	b292      	uxth	r2, r2
 8011f58:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011f5a:	683b      	ldr	r3, [r7, #0]
 8011f5c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011f5e:	683b      	ldr	r3, [r7, #0]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011f64:	68f8      	ldr	r0, [r7, #12]
 8011f66:	f7fe f968 	bl	801023a <tcp_seg_free>
    while (next &&
 8011f6a:	683b      	ldr	r3, [r7, #0]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d00e      	beq.n	8011f8e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	891b      	ldrh	r3, [r3, #8]
 8011f74:	461a      	mov	r2, r3
 8011f76:	4b1d      	ldr	r3, [pc, #116]	; (8011fec <tcp_oos_insert_segment+0x10c>)
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	441a      	add	r2, r3
 8011f7c:	683b      	ldr	r3, [r7, #0]
 8011f7e:	68db      	ldr	r3, [r3, #12]
 8011f80:	685b      	ldr	r3, [r3, #4]
 8011f82:	6839      	ldr	r1, [r7, #0]
 8011f84:	8909      	ldrh	r1, [r1, #8]
 8011f86:	440b      	add	r3, r1
 8011f88:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	daca      	bge.n	8011f24 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011f8e:	683b      	ldr	r3, [r7, #0]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d01e      	beq.n	8011fd2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	891b      	ldrh	r3, [r3, #8]
 8011f98:	461a      	mov	r2, r3
 8011f9a:	4b14      	ldr	r3, [pc, #80]	; (8011fec <tcp_oos_insert_segment+0x10c>)
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	441a      	add	r2, r3
 8011fa0:	683b      	ldr	r3, [r7, #0]
 8011fa2:	68db      	ldr	r3, [r3, #12]
 8011fa4:	685b      	ldr	r3, [r3, #4]
 8011fa6:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	dd12      	ble.n	8011fd2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011fac:	683b      	ldr	r3, [r7, #0]
 8011fae:	68db      	ldr	r3, [r3, #12]
 8011fb0:	685b      	ldr	r3, [r3, #4]
 8011fb2:	b29a      	uxth	r2, r3
 8011fb4:	4b0d      	ldr	r3, [pc, #52]	; (8011fec <tcp_oos_insert_segment+0x10c>)
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	b29b      	uxth	r3, r3
 8011fba:	1ad3      	subs	r3, r2, r3
 8011fbc:	b29a      	uxth	r2, r3
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	685a      	ldr	r2, [r3, #4]
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	891b      	ldrh	r3, [r3, #8]
 8011fca:	4619      	mov	r1, r3
 8011fcc:	4610      	mov	r0, r2
 8011fce:	f7fc fb75 	bl	800e6bc <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	683a      	ldr	r2, [r7, #0]
 8011fd6:	601a      	str	r2, [r3, #0]
}
 8011fd8:	bf00      	nop
 8011fda:	3714      	adds	r7, #20
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	bd90      	pop	{r4, r7, pc}
 8011fe0:	0801bea0 	.word	0x0801bea0
 8011fe4:	0801c160 	.word	0x0801c160
 8011fe8:	0801beec 	.word	0x0801beec
 8011fec:	200052ac 	.word	0x200052ac

08011ff0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011ff0:	b5b0      	push	{r4, r5, r7, lr}
 8011ff2:	b086      	sub	sp, #24
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	60f8      	str	r0, [r7, #12]
 8011ff8:	60b9      	str	r1, [r7, #8]
 8011ffa:	607a      	str	r2, [r7, #4]
 8011ffc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011ffe:	e03e      	b.n	801207e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8012000:	68bb      	ldr	r3, [r7, #8]
 8012002:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8012004:	68bb      	ldr	r3, [r7, #8]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801200a:	697b      	ldr	r3, [r7, #20]
 801200c:	685b      	ldr	r3, [r3, #4]
 801200e:	4618      	mov	r0, r3
 8012010:	f7fc fd68 	bl	800eae4 <pbuf_clen>
 8012014:	4603      	mov	r3, r0
 8012016:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801201e:	8a7a      	ldrh	r2, [r7, #18]
 8012020:	429a      	cmp	r2, r3
 8012022:	d906      	bls.n	8012032 <tcp_free_acked_segments+0x42>
 8012024:	4b2a      	ldr	r3, [pc, #168]	; (80120d0 <tcp_free_acked_segments+0xe0>)
 8012026:	f240 4257 	movw	r2, #1111	; 0x457
 801202a:	492a      	ldr	r1, [pc, #168]	; (80120d4 <tcp_free_acked_segments+0xe4>)
 801202c:	482a      	ldr	r0, [pc, #168]	; (80120d8 <tcp_free_acked_segments+0xe8>)
 801202e:	f006 f8df 	bl	80181f0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8012038:	8a7b      	ldrh	r3, [r7, #18]
 801203a:	1ad3      	subs	r3, r2, r3
 801203c:	b29a      	uxth	r2, r3
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8012044:	697b      	ldr	r3, [r7, #20]
 8012046:	891a      	ldrh	r2, [r3, #8]
 8012048:	4b24      	ldr	r3, [pc, #144]	; (80120dc <tcp_free_acked_segments+0xec>)
 801204a:	881b      	ldrh	r3, [r3, #0]
 801204c:	4413      	add	r3, r2
 801204e:	b29a      	uxth	r2, r3
 8012050:	4b22      	ldr	r3, [pc, #136]	; (80120dc <tcp_free_acked_segments+0xec>)
 8012052:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8012054:	6978      	ldr	r0, [r7, #20]
 8012056:	f7fe f8f0 	bl	801023a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012060:	2b00      	cmp	r3, #0
 8012062:	d00c      	beq.n	801207e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8012064:	68bb      	ldr	r3, [r7, #8]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d109      	bne.n	801207e <tcp_free_acked_segments+0x8e>
 801206a:	683b      	ldr	r3, [r7, #0]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d106      	bne.n	801207e <tcp_free_acked_segments+0x8e>
 8012070:	4b17      	ldr	r3, [pc, #92]	; (80120d0 <tcp_free_acked_segments+0xe0>)
 8012072:	f240 4261 	movw	r2, #1121	; 0x461
 8012076:	491a      	ldr	r1, [pc, #104]	; (80120e0 <tcp_free_acked_segments+0xf0>)
 8012078:	4817      	ldr	r0, [pc, #92]	; (80120d8 <tcp_free_acked_segments+0xe8>)
 801207a:	f006 f8b9 	bl	80181f0 <iprintf>
  while (seg_list != NULL &&
 801207e:	68bb      	ldr	r3, [r7, #8]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d020      	beq.n	80120c6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8012084:	68bb      	ldr	r3, [r7, #8]
 8012086:	68db      	ldr	r3, [r3, #12]
 8012088:	685b      	ldr	r3, [r3, #4]
 801208a:	4618      	mov	r0, r3
 801208c:	f7fb f827 	bl	800d0de <lwip_htonl>
 8012090:	4604      	mov	r4, r0
 8012092:	68bb      	ldr	r3, [r7, #8]
 8012094:	891b      	ldrh	r3, [r3, #8]
 8012096:	461d      	mov	r5, r3
 8012098:	68bb      	ldr	r3, [r7, #8]
 801209a:	68db      	ldr	r3, [r3, #12]
 801209c:	899b      	ldrh	r3, [r3, #12]
 801209e:	b29b      	uxth	r3, r3
 80120a0:	4618      	mov	r0, r3
 80120a2:	f7fb f807 	bl	800d0b4 <lwip_htons>
 80120a6:	4603      	mov	r3, r0
 80120a8:	b2db      	uxtb	r3, r3
 80120aa:	f003 0303 	and.w	r3, r3, #3
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d001      	beq.n	80120b6 <tcp_free_acked_segments+0xc6>
 80120b2:	2301      	movs	r3, #1
 80120b4:	e000      	b.n	80120b8 <tcp_free_acked_segments+0xc8>
 80120b6:	2300      	movs	r3, #0
 80120b8:	442b      	add	r3, r5
 80120ba:	18e2      	adds	r2, r4, r3
 80120bc:	4b09      	ldr	r3, [pc, #36]	; (80120e4 <tcp_free_acked_segments+0xf4>)
 80120be:	681b      	ldr	r3, [r3, #0]
 80120c0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	dd9c      	ble.n	8012000 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80120c6:	68bb      	ldr	r3, [r7, #8]
}
 80120c8:	4618      	mov	r0, r3
 80120ca:	3718      	adds	r7, #24
 80120cc:	46bd      	mov	sp, r7
 80120ce:	bdb0      	pop	{r4, r5, r7, pc}
 80120d0:	0801bea0 	.word	0x0801bea0
 80120d4:	0801c188 	.word	0x0801c188
 80120d8:	0801beec 	.word	0x0801beec
 80120dc:	200052b4 	.word	0x200052b4
 80120e0:	0801c1b0 	.word	0x0801c1b0
 80120e4:	200052b0 	.word	0x200052b0

080120e8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80120e8:	b5b0      	push	{r4, r5, r7, lr}
 80120ea:	b094      	sub	sp, #80	; 0x50
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80120f0:	2300      	movs	r3, #0
 80120f2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d106      	bne.n	8012108 <tcp_receive+0x20>
 80120fa:	4ba6      	ldr	r3, [pc, #664]	; (8012394 <tcp_receive+0x2ac>)
 80120fc:	f240 427b 	movw	r2, #1147	; 0x47b
 8012100:	49a5      	ldr	r1, [pc, #660]	; (8012398 <tcp_receive+0x2b0>)
 8012102:	48a6      	ldr	r0, [pc, #664]	; (801239c <tcp_receive+0x2b4>)
 8012104:	f006 f874 	bl	80181f0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	7d1b      	ldrb	r3, [r3, #20]
 801210c:	2b03      	cmp	r3, #3
 801210e:	d806      	bhi.n	801211e <tcp_receive+0x36>
 8012110:	4ba0      	ldr	r3, [pc, #640]	; (8012394 <tcp_receive+0x2ac>)
 8012112:	f240 427c 	movw	r2, #1148	; 0x47c
 8012116:	49a2      	ldr	r1, [pc, #648]	; (80123a0 <tcp_receive+0x2b8>)
 8012118:	48a0      	ldr	r0, [pc, #640]	; (801239c <tcp_receive+0x2b4>)
 801211a:	f006 f869 	bl	80181f0 <iprintf>

  if (flags & TCP_ACK) {
 801211e:	4ba1      	ldr	r3, [pc, #644]	; (80123a4 <tcp_receive+0x2bc>)
 8012120:	781b      	ldrb	r3, [r3, #0]
 8012122:	f003 0310 	and.w	r3, r3, #16
 8012126:	2b00      	cmp	r3, #0
 8012128:	f000 8263 	beq.w	80125f2 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012132:	461a      	mov	r2, r3
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012138:	4413      	add	r3, r2
 801213a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012140:	4b99      	ldr	r3, [pc, #612]	; (80123a8 <tcp_receive+0x2c0>)
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	1ad3      	subs	r3, r2, r3
 8012146:	2b00      	cmp	r3, #0
 8012148:	db1b      	blt.n	8012182 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801214e:	4b96      	ldr	r3, [pc, #600]	; (80123a8 <tcp_receive+0x2c0>)
 8012150:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012152:	429a      	cmp	r2, r3
 8012154:	d106      	bne.n	8012164 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801215a:	4b94      	ldr	r3, [pc, #592]	; (80123ac <tcp_receive+0x2c4>)
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	1ad3      	subs	r3, r2, r3
 8012160:	2b00      	cmp	r3, #0
 8012162:	db0e      	blt.n	8012182 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012168:	4b90      	ldr	r3, [pc, #576]	; (80123ac <tcp_receive+0x2c4>)
 801216a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801216c:	429a      	cmp	r2, r3
 801216e:	d125      	bne.n	80121bc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012170:	4b8f      	ldr	r3, [pc, #572]	; (80123b0 <tcp_receive+0x2c8>)
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	89db      	ldrh	r3, [r3, #14]
 8012176:	b29a      	uxth	r2, r3
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801217e:	429a      	cmp	r2, r3
 8012180:	d91c      	bls.n	80121bc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8012182:	4b8b      	ldr	r3, [pc, #556]	; (80123b0 <tcp_receive+0x2c8>)
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	89db      	ldrh	r3, [r3, #14]
 8012188:	b29a      	uxth	r2, r3
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801219c:	429a      	cmp	r2, r3
 801219e:	d205      	bcs.n	80121ac <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80121ac:	4b7e      	ldr	r3, [pc, #504]	; (80123a8 <tcp_receive+0x2c0>)
 80121ae:	681a      	ldr	r2, [r3, #0]
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80121b4:	4b7d      	ldr	r3, [pc, #500]	; (80123ac <tcp_receive+0x2c4>)
 80121b6:	681a      	ldr	r2, [r3, #0]
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80121bc:	4b7b      	ldr	r3, [pc, #492]	; (80123ac <tcp_receive+0x2c4>)
 80121be:	681a      	ldr	r2, [r3, #0]
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121c4:	1ad3      	subs	r3, r2, r3
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	dc58      	bgt.n	801227c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80121ca:	4b7a      	ldr	r3, [pc, #488]	; (80123b4 <tcp_receive+0x2cc>)
 80121cc:	881b      	ldrh	r3, [r3, #0]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d14b      	bne.n	801226a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80121d6:	687a      	ldr	r2, [r7, #4]
 80121d8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80121dc:	4413      	add	r3, r2
 80121de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121e0:	429a      	cmp	r2, r3
 80121e2:	d142      	bne.n	801226a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	db3d      	blt.n	801226a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80121f2:	4b6e      	ldr	r3, [pc, #440]	; (80123ac <tcp_receive+0x2c4>)
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	429a      	cmp	r2, r3
 80121f8:	d137      	bne.n	801226a <tcp_receive+0x182>
              found_dupack = 1;
 80121fa:	2301      	movs	r3, #1
 80121fc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012204:	2bff      	cmp	r3, #255	; 0xff
 8012206:	d007      	beq.n	8012218 <tcp_receive+0x130>
                ++pcb->dupacks;
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801220e:	3301      	adds	r3, #1
 8012210:	b2da      	uxtb	r2, r3
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801221e:	2b03      	cmp	r3, #3
 8012220:	d91b      	bls.n	801225a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801222c:	4413      	add	r3, r2
 801222e:	b29a      	uxth	r2, r3
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012236:	429a      	cmp	r2, r3
 8012238:	d30a      	bcc.n	8012250 <tcp_receive+0x168>
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012244:	4413      	add	r3, r2
 8012246:	b29a      	uxth	r2, r3
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801224e:	e004      	b.n	801225a <tcp_receive+0x172>
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012256:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012260:	2b02      	cmp	r3, #2
 8012262:	d902      	bls.n	801226a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8012264:	6878      	ldr	r0, [r7, #4]
 8012266:	f002 fb41 	bl	80148ec <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801226a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801226c:	2b00      	cmp	r3, #0
 801226e:	f040 8160 	bne.w	8012532 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	2200      	movs	r2, #0
 8012276:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801227a:	e15a      	b.n	8012532 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801227c:	4b4b      	ldr	r3, [pc, #300]	; (80123ac <tcp_receive+0x2c4>)
 801227e:	681a      	ldr	r2, [r3, #0]
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012284:	1ad3      	subs	r3, r2, r3
 8012286:	3b01      	subs	r3, #1
 8012288:	2b00      	cmp	r3, #0
 801228a:	f2c0 814d 	blt.w	8012528 <tcp_receive+0x440>
 801228e:	4b47      	ldr	r3, [pc, #284]	; (80123ac <tcp_receive+0x2c4>)
 8012290:	681a      	ldr	r2, [r3, #0]
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012296:	1ad3      	subs	r3, r2, r3
 8012298:	2b00      	cmp	r3, #0
 801229a:	f300 8145 	bgt.w	8012528 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	8b5b      	ldrh	r3, [r3, #26]
 80122a2:	f003 0304 	and.w	r3, r3, #4
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d010      	beq.n	80122cc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	8b5b      	ldrh	r3, [r3, #26]
 80122ae:	f023 0304 	bic.w	r3, r3, #4
 80122b2:	b29a      	uxth	r2, r3
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	2200      	movs	r2, #0
 80122c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	2200      	movs	r2, #0
 80122d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80122da:	10db      	asrs	r3, r3, #3
 80122dc:	b21b      	sxth	r3, r3
 80122de:	b29a      	uxth	r2, r3
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80122e6:	b29b      	uxth	r3, r3
 80122e8:	4413      	add	r3, r2
 80122ea:	b29b      	uxth	r3, r3
 80122ec:	b21a      	sxth	r2, r3
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80122f4:	4b2d      	ldr	r3, [pc, #180]	; (80123ac <tcp_receive+0x2c4>)
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	b29a      	uxth	r2, r3
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80122fe:	b29b      	uxth	r3, r3
 8012300:	1ad3      	subs	r3, r2, r3
 8012302:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	2200      	movs	r2, #0
 8012308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801230c:	4b27      	ldr	r3, [pc, #156]	; (80123ac <tcp_receive+0x2c4>)
 801230e:	681a      	ldr	r2, [r3, #0]
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	7d1b      	ldrb	r3, [r3, #20]
 8012318:	2b03      	cmp	r3, #3
 801231a:	f240 8096 	bls.w	801244a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801232a:	429a      	cmp	r2, r3
 801232c:	d244      	bcs.n	80123b8 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	8b5b      	ldrh	r3, [r3, #26]
 8012332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012336:	2b00      	cmp	r3, #0
 8012338:	d001      	beq.n	801233e <tcp_receive+0x256>
 801233a:	2301      	movs	r3, #1
 801233c:	e000      	b.n	8012340 <tcp_receive+0x258>
 801233e:	2302      	movs	r3, #2
 8012340:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012344:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012348:	b29a      	uxth	r2, r3
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801234e:	fb12 f303 	smulbb	r3, r2, r3
 8012352:	b29b      	uxth	r3, r3
 8012354:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012356:	4293      	cmp	r3, r2
 8012358:	bf28      	it	cs
 801235a:	4613      	movcs	r3, r2
 801235c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012364:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012366:	4413      	add	r3, r2
 8012368:	b29a      	uxth	r2, r3
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012370:	429a      	cmp	r2, r3
 8012372:	d309      	bcc.n	8012388 <tcp_receive+0x2a0>
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801237a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801237c:	4413      	add	r3, r2
 801237e:	b29a      	uxth	r2, r3
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012386:	e060      	b.n	801244a <tcp_receive+0x362>
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801238e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012392:	e05a      	b.n	801244a <tcp_receive+0x362>
 8012394:	0801bea0 	.word	0x0801bea0
 8012398:	0801c1d0 	.word	0x0801c1d0
 801239c:	0801beec 	.word	0x0801beec
 80123a0:	0801c1ec 	.word	0x0801c1ec
 80123a4:	200052b8 	.word	0x200052b8
 80123a8:	200052ac 	.word	0x200052ac
 80123ac:	200052b0 	.word	0x200052b0
 80123b0:	2000529c 	.word	0x2000529c
 80123b4:	200052b6 	.word	0x200052b6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80123be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80123c0:	4413      	add	r3, r2
 80123c2:	b29a      	uxth	r2, r3
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80123ca:	429a      	cmp	r2, r3
 80123cc:	d309      	bcc.n	80123e2 <tcp_receive+0x2fa>
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80123d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80123d6:	4413      	add	r3, r2
 80123d8:	b29a      	uxth	r2, r3
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80123e0:	e004      	b.n	80123ec <tcp_receive+0x304>
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80123e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80123f8:	429a      	cmp	r2, r3
 80123fa:	d326      	bcc.n	801244a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012408:	1ad3      	subs	r3, r2, r3
 801240a:	b29a      	uxth	r2, r3
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801241c:	4413      	add	r3, r2
 801241e:	b29a      	uxth	r2, r3
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012426:	429a      	cmp	r2, r3
 8012428:	d30a      	bcc.n	8012440 <tcp_receive+0x358>
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012434:	4413      	add	r3, r2
 8012436:	b29a      	uxth	r2, r3
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801243e:	e004      	b.n	801244a <tcp_receive+0x362>
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012446:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012452:	4a98      	ldr	r2, [pc, #608]	; (80126b4 <tcp_receive+0x5cc>)
 8012454:	6878      	ldr	r0, [r7, #4]
 8012456:	f7ff fdcb 	bl	8011ff0 <tcp_free_acked_segments>
 801245a:	4602      	mov	r2, r0
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012468:	4a93      	ldr	r2, [pc, #588]	; (80126b8 <tcp_receive+0x5d0>)
 801246a:	6878      	ldr	r0, [r7, #4]
 801246c:	f7ff fdc0 	bl	8011ff0 <tcp_free_acked_segments>
 8012470:	4602      	mov	r2, r0
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801247a:	2b00      	cmp	r3, #0
 801247c:	d104      	bne.n	8012488 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012484:	861a      	strh	r2, [r3, #48]	; 0x30
 8012486:	e002      	b.n	801248e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2200      	movs	r2, #0
 801248c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	2200      	movs	r2, #0
 8012492:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012498:	2b00      	cmp	r3, #0
 801249a:	d103      	bne.n	80124a4 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	2200      	movs	r2, #0
 80124a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80124aa:	4b84      	ldr	r3, [pc, #528]	; (80126bc <tcp_receive+0x5d4>)
 80124ac:	881b      	ldrh	r3, [r3, #0]
 80124ae:	4413      	add	r3, r2
 80124b0:	b29a      	uxth	r2, r3
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	8b5b      	ldrh	r3, [r3, #26]
 80124bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d035      	beq.n	8012530 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d118      	bne.n	80124fe <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d00c      	beq.n	80124ee <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124dc:	68db      	ldr	r3, [r3, #12]
 80124de:	685b      	ldr	r3, [r3, #4]
 80124e0:	4618      	mov	r0, r3
 80124e2:	f7fa fdfc 	bl	800d0de <lwip_htonl>
 80124e6:	4603      	mov	r3, r0
 80124e8:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	dc20      	bgt.n	8012530 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	8b5b      	ldrh	r3, [r3, #26]
 80124f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80124f6:	b29a      	uxth	r2, r3
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80124fc:	e018      	b.n	8012530 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012506:	68db      	ldr	r3, [r3, #12]
 8012508:	685b      	ldr	r3, [r3, #4]
 801250a:	4618      	mov	r0, r3
 801250c:	f7fa fde7 	bl	800d0de <lwip_htonl>
 8012510:	4603      	mov	r3, r0
 8012512:	1ae3      	subs	r3, r4, r3
 8012514:	2b00      	cmp	r3, #0
 8012516:	dc0b      	bgt.n	8012530 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	8b5b      	ldrh	r3, [r3, #26]
 801251c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012520:	b29a      	uxth	r2, r3
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012526:	e003      	b.n	8012530 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012528:	6878      	ldr	r0, [r7, #4]
 801252a:	f002 fbcd 	bl	8014cc8 <tcp_send_empty_ack>
 801252e:	e000      	b.n	8012532 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012530:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012536:	2b00      	cmp	r3, #0
 8012538:	d05b      	beq.n	80125f2 <tcp_receive+0x50a>
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801253e:	4b60      	ldr	r3, [pc, #384]	; (80126c0 <tcp_receive+0x5d8>)
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	1ad3      	subs	r3, r2, r3
 8012544:	2b00      	cmp	r3, #0
 8012546:	da54      	bge.n	80125f2 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012548:	4b5e      	ldr	r3, [pc, #376]	; (80126c4 <tcp_receive+0x5dc>)
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	b29a      	uxth	r2, r3
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012552:	b29b      	uxth	r3, r3
 8012554:	1ad3      	subs	r3, r2, r3
 8012556:	b29b      	uxth	r3, r3
 8012558:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801255c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012566:	10db      	asrs	r3, r3, #3
 8012568:	b21b      	sxth	r3, r3
 801256a:	b29b      	uxth	r3, r3
 801256c:	1ad3      	subs	r3, r2, r3
 801256e:	b29b      	uxth	r3, r3
 8012570:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801257a:	b29a      	uxth	r2, r3
 801257c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012580:	4413      	add	r3, r2
 8012582:	b29b      	uxth	r3, r3
 8012584:	b21a      	sxth	r2, r3
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801258a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801258e:	2b00      	cmp	r3, #0
 8012590:	da05      	bge.n	801259e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8012592:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012596:	425b      	negs	r3, r3
 8012598:	b29b      	uxth	r3, r3
 801259a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801259e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80125a8:	109b      	asrs	r3, r3, #2
 80125aa:	b21b      	sxth	r3, r3
 80125ac:	b29b      	uxth	r3, r3
 80125ae:	1ad3      	subs	r3, r2, r3
 80125b0:	b29b      	uxth	r3, r3
 80125b2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80125bc:	b29a      	uxth	r2, r3
 80125be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80125c2:	4413      	add	r3, r2
 80125c4:	b29b      	uxth	r3, r3
 80125c6:	b21a      	sxth	r2, r3
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80125d2:	10db      	asrs	r3, r3, #3
 80125d4:	b21b      	sxth	r3, r3
 80125d6:	b29a      	uxth	r2, r3
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80125de:	b29b      	uxth	r3, r3
 80125e0:	4413      	add	r3, r2
 80125e2:	b29b      	uxth	r3, r3
 80125e4:	b21a      	sxth	r2, r3
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	2200      	movs	r2, #0
 80125f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80125f2:	4b35      	ldr	r3, [pc, #212]	; (80126c8 <tcp_receive+0x5e0>)
 80125f4:	881b      	ldrh	r3, [r3, #0]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	f000 84e1 	beq.w	8012fbe <tcp_receive+0xed6>
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	7d1b      	ldrb	r3, [r3, #20]
 8012600:	2b06      	cmp	r3, #6
 8012602:	f200 84dc 	bhi.w	8012fbe <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801260a:	4b30      	ldr	r3, [pc, #192]	; (80126cc <tcp_receive+0x5e4>)
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	1ad3      	subs	r3, r2, r3
 8012610:	3b01      	subs	r3, #1
 8012612:	2b00      	cmp	r3, #0
 8012614:	f2c0 808e 	blt.w	8012734 <tcp_receive+0x64c>
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801261c:	4b2a      	ldr	r3, [pc, #168]	; (80126c8 <tcp_receive+0x5e0>)
 801261e:	881b      	ldrh	r3, [r3, #0]
 8012620:	4619      	mov	r1, r3
 8012622:	4b2a      	ldr	r3, [pc, #168]	; (80126cc <tcp_receive+0x5e4>)
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	440b      	add	r3, r1
 8012628:	1ad3      	subs	r3, r2, r3
 801262a:	3301      	adds	r3, #1
 801262c:	2b00      	cmp	r3, #0
 801262e:	f300 8081 	bgt.w	8012734 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012632:	4b27      	ldr	r3, [pc, #156]	; (80126d0 <tcp_receive+0x5e8>)
 8012634:	685b      	ldr	r3, [r3, #4]
 8012636:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801263c:	4b23      	ldr	r3, [pc, #140]	; (80126cc <tcp_receive+0x5e4>)
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	1ad3      	subs	r3, r2, r3
 8012642:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012644:	4b22      	ldr	r3, [pc, #136]	; (80126d0 <tcp_receive+0x5e8>)
 8012646:	685b      	ldr	r3, [r3, #4]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d106      	bne.n	801265a <tcp_receive+0x572>
 801264c:	4b21      	ldr	r3, [pc, #132]	; (80126d4 <tcp_receive+0x5ec>)
 801264e:	f240 5294 	movw	r2, #1428	; 0x594
 8012652:	4921      	ldr	r1, [pc, #132]	; (80126d8 <tcp_receive+0x5f0>)
 8012654:	4821      	ldr	r0, [pc, #132]	; (80126dc <tcp_receive+0x5f4>)
 8012656:	f005 fdcb 	bl	80181f0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801265c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012660:	4293      	cmp	r3, r2
 8012662:	d906      	bls.n	8012672 <tcp_receive+0x58a>
 8012664:	4b1b      	ldr	r3, [pc, #108]	; (80126d4 <tcp_receive+0x5ec>)
 8012666:	f240 5295 	movw	r2, #1429	; 0x595
 801266a:	491d      	ldr	r1, [pc, #116]	; (80126e0 <tcp_receive+0x5f8>)
 801266c:	481b      	ldr	r0, [pc, #108]	; (80126dc <tcp_receive+0x5f4>)
 801266e:	f005 fdbf 	bl	80181f0 <iprintf>
      off = (u16_t)off32;
 8012672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012674:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012678:	4b15      	ldr	r3, [pc, #84]	; (80126d0 <tcp_receive+0x5e8>)
 801267a:	685b      	ldr	r3, [r3, #4]
 801267c:	891b      	ldrh	r3, [r3, #8]
 801267e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012682:	429a      	cmp	r2, r3
 8012684:	d906      	bls.n	8012694 <tcp_receive+0x5ac>
 8012686:	4b13      	ldr	r3, [pc, #76]	; (80126d4 <tcp_receive+0x5ec>)
 8012688:	f240 5297 	movw	r2, #1431	; 0x597
 801268c:	4915      	ldr	r1, [pc, #84]	; (80126e4 <tcp_receive+0x5fc>)
 801268e:	4813      	ldr	r0, [pc, #76]	; (80126dc <tcp_receive+0x5f4>)
 8012690:	f005 fdae 	bl	80181f0 <iprintf>
      inseg.len -= off;
 8012694:	4b0e      	ldr	r3, [pc, #56]	; (80126d0 <tcp_receive+0x5e8>)
 8012696:	891a      	ldrh	r2, [r3, #8]
 8012698:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801269c:	1ad3      	subs	r3, r2, r3
 801269e:	b29a      	uxth	r2, r3
 80126a0:	4b0b      	ldr	r3, [pc, #44]	; (80126d0 <tcp_receive+0x5e8>)
 80126a2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80126a4:	4b0a      	ldr	r3, [pc, #40]	; (80126d0 <tcp_receive+0x5e8>)
 80126a6:	685b      	ldr	r3, [r3, #4]
 80126a8:	891a      	ldrh	r2, [r3, #8]
 80126aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80126ae:	1ad3      	subs	r3, r2, r3
 80126b0:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80126b2:	e029      	b.n	8012708 <tcp_receive+0x620>
 80126b4:	0801c208 	.word	0x0801c208
 80126b8:	0801c210 	.word	0x0801c210
 80126bc:	200052b4 	.word	0x200052b4
 80126c0:	200052b0 	.word	0x200052b0
 80126c4:	20018ba8 	.word	0x20018ba8
 80126c8:	200052b6 	.word	0x200052b6
 80126cc:	200052ac 	.word	0x200052ac
 80126d0:	2000528c 	.word	0x2000528c
 80126d4:	0801bea0 	.word	0x0801bea0
 80126d8:	0801c218 	.word	0x0801c218
 80126dc:	0801beec 	.word	0x0801beec
 80126e0:	0801c228 	.word	0x0801c228
 80126e4:	0801c238 	.word	0x0801c238
        off -= p->len;
 80126e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126ea:	895b      	ldrh	r3, [r3, #10]
 80126ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80126f0:	1ad3      	subs	r3, r2, r3
 80126f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80126f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126f8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80126fa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80126fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126fe:	2200      	movs	r2, #0
 8012700:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801270a:	895b      	ldrh	r3, [r3, #10]
 801270c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012710:	429a      	cmp	r2, r3
 8012712:	d8e9      	bhi.n	80126e8 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012714:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012718:	4619      	mov	r1, r3
 801271a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801271c:	f7fc f8ce 	bl	800e8bc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012724:	4a91      	ldr	r2, [pc, #580]	; (801296c <tcp_receive+0x884>)
 8012726:	6013      	str	r3, [r2, #0]
 8012728:	4b91      	ldr	r3, [pc, #580]	; (8012970 <tcp_receive+0x888>)
 801272a:	68db      	ldr	r3, [r3, #12]
 801272c:	4a8f      	ldr	r2, [pc, #572]	; (801296c <tcp_receive+0x884>)
 801272e:	6812      	ldr	r2, [r2, #0]
 8012730:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012732:	e00d      	b.n	8012750 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012734:	4b8d      	ldr	r3, [pc, #564]	; (801296c <tcp_receive+0x884>)
 8012736:	681a      	ldr	r2, [r3, #0]
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801273c:	1ad3      	subs	r3, r2, r3
 801273e:	2b00      	cmp	r3, #0
 8012740:	da06      	bge.n	8012750 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	8b5b      	ldrh	r3, [r3, #26]
 8012746:	f043 0302 	orr.w	r3, r3, #2
 801274a:	b29a      	uxth	r2, r3
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012750:	4b86      	ldr	r3, [pc, #536]	; (801296c <tcp_receive+0x884>)
 8012752:	681a      	ldr	r2, [r3, #0]
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012758:	1ad3      	subs	r3, r2, r3
 801275a:	2b00      	cmp	r3, #0
 801275c:	f2c0 842a 	blt.w	8012fb4 <tcp_receive+0xecc>
 8012760:	4b82      	ldr	r3, [pc, #520]	; (801296c <tcp_receive+0x884>)
 8012762:	681a      	ldr	r2, [r3, #0]
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012768:	6879      	ldr	r1, [r7, #4]
 801276a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801276c:	440b      	add	r3, r1
 801276e:	1ad3      	subs	r3, r2, r3
 8012770:	3301      	adds	r3, #1
 8012772:	2b00      	cmp	r3, #0
 8012774:	f300 841e 	bgt.w	8012fb4 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801277c:	4b7b      	ldr	r3, [pc, #492]	; (801296c <tcp_receive+0x884>)
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	429a      	cmp	r2, r3
 8012782:	f040 829a 	bne.w	8012cba <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012786:	4b7a      	ldr	r3, [pc, #488]	; (8012970 <tcp_receive+0x888>)
 8012788:	891c      	ldrh	r4, [r3, #8]
 801278a:	4b79      	ldr	r3, [pc, #484]	; (8012970 <tcp_receive+0x888>)
 801278c:	68db      	ldr	r3, [r3, #12]
 801278e:	899b      	ldrh	r3, [r3, #12]
 8012790:	b29b      	uxth	r3, r3
 8012792:	4618      	mov	r0, r3
 8012794:	f7fa fc8e 	bl	800d0b4 <lwip_htons>
 8012798:	4603      	mov	r3, r0
 801279a:	b2db      	uxtb	r3, r3
 801279c:	f003 0303 	and.w	r3, r3, #3
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d001      	beq.n	80127a8 <tcp_receive+0x6c0>
 80127a4:	2301      	movs	r3, #1
 80127a6:	e000      	b.n	80127aa <tcp_receive+0x6c2>
 80127a8:	2300      	movs	r3, #0
 80127aa:	4423      	add	r3, r4
 80127ac:	b29a      	uxth	r2, r3
 80127ae:	4b71      	ldr	r3, [pc, #452]	; (8012974 <tcp_receive+0x88c>)
 80127b0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80127b6:	4b6f      	ldr	r3, [pc, #444]	; (8012974 <tcp_receive+0x88c>)
 80127b8:	881b      	ldrh	r3, [r3, #0]
 80127ba:	429a      	cmp	r2, r3
 80127bc:	d275      	bcs.n	80128aa <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80127be:	4b6c      	ldr	r3, [pc, #432]	; (8012970 <tcp_receive+0x888>)
 80127c0:	68db      	ldr	r3, [r3, #12]
 80127c2:	899b      	ldrh	r3, [r3, #12]
 80127c4:	b29b      	uxth	r3, r3
 80127c6:	4618      	mov	r0, r3
 80127c8:	f7fa fc74 	bl	800d0b4 <lwip_htons>
 80127cc:	4603      	mov	r3, r0
 80127ce:	b2db      	uxtb	r3, r3
 80127d0:	f003 0301 	and.w	r3, r3, #1
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d01f      	beq.n	8012818 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80127d8:	4b65      	ldr	r3, [pc, #404]	; (8012970 <tcp_receive+0x888>)
 80127da:	68db      	ldr	r3, [r3, #12]
 80127dc:	899b      	ldrh	r3, [r3, #12]
 80127de:	b29b      	uxth	r3, r3
 80127e0:	b21b      	sxth	r3, r3
 80127e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80127e6:	b21c      	sxth	r4, r3
 80127e8:	4b61      	ldr	r3, [pc, #388]	; (8012970 <tcp_receive+0x888>)
 80127ea:	68db      	ldr	r3, [r3, #12]
 80127ec:	899b      	ldrh	r3, [r3, #12]
 80127ee:	b29b      	uxth	r3, r3
 80127f0:	4618      	mov	r0, r3
 80127f2:	f7fa fc5f 	bl	800d0b4 <lwip_htons>
 80127f6:	4603      	mov	r3, r0
 80127f8:	b2db      	uxtb	r3, r3
 80127fa:	b29b      	uxth	r3, r3
 80127fc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012800:	b29b      	uxth	r3, r3
 8012802:	4618      	mov	r0, r3
 8012804:	f7fa fc56 	bl	800d0b4 <lwip_htons>
 8012808:	4603      	mov	r3, r0
 801280a:	b21b      	sxth	r3, r3
 801280c:	4323      	orrs	r3, r4
 801280e:	b21a      	sxth	r2, r3
 8012810:	4b57      	ldr	r3, [pc, #348]	; (8012970 <tcp_receive+0x888>)
 8012812:	68db      	ldr	r3, [r3, #12]
 8012814:	b292      	uxth	r2, r2
 8012816:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801281c:	4b54      	ldr	r3, [pc, #336]	; (8012970 <tcp_receive+0x888>)
 801281e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012820:	4b53      	ldr	r3, [pc, #332]	; (8012970 <tcp_receive+0x888>)
 8012822:	68db      	ldr	r3, [r3, #12]
 8012824:	899b      	ldrh	r3, [r3, #12]
 8012826:	b29b      	uxth	r3, r3
 8012828:	4618      	mov	r0, r3
 801282a:	f7fa fc43 	bl	800d0b4 <lwip_htons>
 801282e:	4603      	mov	r3, r0
 8012830:	b2db      	uxtb	r3, r3
 8012832:	f003 0302 	and.w	r3, r3, #2
 8012836:	2b00      	cmp	r3, #0
 8012838:	d005      	beq.n	8012846 <tcp_receive+0x75e>
            inseg.len -= 1;
 801283a:	4b4d      	ldr	r3, [pc, #308]	; (8012970 <tcp_receive+0x888>)
 801283c:	891b      	ldrh	r3, [r3, #8]
 801283e:	3b01      	subs	r3, #1
 8012840:	b29a      	uxth	r2, r3
 8012842:	4b4b      	ldr	r3, [pc, #300]	; (8012970 <tcp_receive+0x888>)
 8012844:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012846:	4b4a      	ldr	r3, [pc, #296]	; (8012970 <tcp_receive+0x888>)
 8012848:	685b      	ldr	r3, [r3, #4]
 801284a:	4a49      	ldr	r2, [pc, #292]	; (8012970 <tcp_receive+0x888>)
 801284c:	8912      	ldrh	r2, [r2, #8]
 801284e:	4611      	mov	r1, r2
 8012850:	4618      	mov	r0, r3
 8012852:	f7fb ff33 	bl	800e6bc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012856:	4b46      	ldr	r3, [pc, #280]	; (8012970 <tcp_receive+0x888>)
 8012858:	891c      	ldrh	r4, [r3, #8]
 801285a:	4b45      	ldr	r3, [pc, #276]	; (8012970 <tcp_receive+0x888>)
 801285c:	68db      	ldr	r3, [r3, #12]
 801285e:	899b      	ldrh	r3, [r3, #12]
 8012860:	b29b      	uxth	r3, r3
 8012862:	4618      	mov	r0, r3
 8012864:	f7fa fc26 	bl	800d0b4 <lwip_htons>
 8012868:	4603      	mov	r3, r0
 801286a:	b2db      	uxtb	r3, r3
 801286c:	f003 0303 	and.w	r3, r3, #3
 8012870:	2b00      	cmp	r3, #0
 8012872:	d001      	beq.n	8012878 <tcp_receive+0x790>
 8012874:	2301      	movs	r3, #1
 8012876:	e000      	b.n	801287a <tcp_receive+0x792>
 8012878:	2300      	movs	r3, #0
 801287a:	4423      	add	r3, r4
 801287c:	b29a      	uxth	r2, r3
 801287e:	4b3d      	ldr	r3, [pc, #244]	; (8012974 <tcp_receive+0x88c>)
 8012880:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012882:	4b3c      	ldr	r3, [pc, #240]	; (8012974 <tcp_receive+0x88c>)
 8012884:	881b      	ldrh	r3, [r3, #0]
 8012886:	461a      	mov	r2, r3
 8012888:	4b38      	ldr	r3, [pc, #224]	; (801296c <tcp_receive+0x884>)
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	441a      	add	r2, r3
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012892:	6879      	ldr	r1, [r7, #4]
 8012894:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012896:	440b      	add	r3, r1
 8012898:	429a      	cmp	r2, r3
 801289a:	d006      	beq.n	80128aa <tcp_receive+0x7c2>
 801289c:	4b36      	ldr	r3, [pc, #216]	; (8012978 <tcp_receive+0x890>)
 801289e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80128a2:	4936      	ldr	r1, [pc, #216]	; (801297c <tcp_receive+0x894>)
 80128a4:	4836      	ldr	r0, [pc, #216]	; (8012980 <tcp_receive+0x898>)
 80128a6:	f005 fca3 	bl	80181f0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	f000 80e7 	beq.w	8012a82 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80128b4:	4b2e      	ldr	r3, [pc, #184]	; (8012970 <tcp_receive+0x888>)
 80128b6:	68db      	ldr	r3, [r3, #12]
 80128b8:	899b      	ldrh	r3, [r3, #12]
 80128ba:	b29b      	uxth	r3, r3
 80128bc:	4618      	mov	r0, r3
 80128be:	f7fa fbf9 	bl	800d0b4 <lwip_htons>
 80128c2:	4603      	mov	r3, r0
 80128c4:	b2db      	uxtb	r3, r3
 80128c6:	f003 0301 	and.w	r3, r3, #1
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d010      	beq.n	80128f0 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80128ce:	e00a      	b.n	80128e6 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80128d4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80128da:	681a      	ldr	r2, [r3, #0]
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80128e0:	68f8      	ldr	r0, [r7, #12]
 80128e2:	f7fd fcaa 	bl	801023a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d1f0      	bne.n	80128d0 <tcp_receive+0x7e8>
 80128ee:	e0c8      	b.n	8012a82 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80128f4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80128f6:	e052      	b.n	801299e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80128f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128fa:	68db      	ldr	r3, [r3, #12]
 80128fc:	899b      	ldrh	r3, [r3, #12]
 80128fe:	b29b      	uxth	r3, r3
 8012900:	4618      	mov	r0, r3
 8012902:	f7fa fbd7 	bl	800d0b4 <lwip_htons>
 8012906:	4603      	mov	r3, r0
 8012908:	b2db      	uxtb	r3, r3
 801290a:	f003 0301 	and.w	r3, r3, #1
 801290e:	2b00      	cmp	r3, #0
 8012910:	d03d      	beq.n	801298e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012912:	4b17      	ldr	r3, [pc, #92]	; (8012970 <tcp_receive+0x888>)
 8012914:	68db      	ldr	r3, [r3, #12]
 8012916:	899b      	ldrh	r3, [r3, #12]
 8012918:	b29b      	uxth	r3, r3
 801291a:	4618      	mov	r0, r3
 801291c:	f7fa fbca 	bl	800d0b4 <lwip_htons>
 8012920:	4603      	mov	r3, r0
 8012922:	b2db      	uxtb	r3, r3
 8012924:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012928:	2b00      	cmp	r3, #0
 801292a:	d130      	bne.n	801298e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801292c:	4b10      	ldr	r3, [pc, #64]	; (8012970 <tcp_receive+0x888>)
 801292e:	68db      	ldr	r3, [r3, #12]
 8012930:	899b      	ldrh	r3, [r3, #12]
 8012932:	b29c      	uxth	r4, r3
 8012934:	2001      	movs	r0, #1
 8012936:	f7fa fbbd 	bl	800d0b4 <lwip_htons>
 801293a:	4603      	mov	r3, r0
 801293c:	461a      	mov	r2, r3
 801293e:	4b0c      	ldr	r3, [pc, #48]	; (8012970 <tcp_receive+0x888>)
 8012940:	68db      	ldr	r3, [r3, #12]
 8012942:	4322      	orrs	r2, r4
 8012944:	b292      	uxth	r2, r2
 8012946:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012948:	4b09      	ldr	r3, [pc, #36]	; (8012970 <tcp_receive+0x888>)
 801294a:	891c      	ldrh	r4, [r3, #8]
 801294c:	4b08      	ldr	r3, [pc, #32]	; (8012970 <tcp_receive+0x888>)
 801294e:	68db      	ldr	r3, [r3, #12]
 8012950:	899b      	ldrh	r3, [r3, #12]
 8012952:	b29b      	uxth	r3, r3
 8012954:	4618      	mov	r0, r3
 8012956:	f7fa fbad 	bl	800d0b4 <lwip_htons>
 801295a:	4603      	mov	r3, r0
 801295c:	b2db      	uxtb	r3, r3
 801295e:	f003 0303 	and.w	r3, r3, #3
 8012962:	2b00      	cmp	r3, #0
 8012964:	d00e      	beq.n	8012984 <tcp_receive+0x89c>
 8012966:	2301      	movs	r3, #1
 8012968:	e00d      	b.n	8012986 <tcp_receive+0x89e>
 801296a:	bf00      	nop
 801296c:	200052ac 	.word	0x200052ac
 8012970:	2000528c 	.word	0x2000528c
 8012974:	200052b6 	.word	0x200052b6
 8012978:	0801bea0 	.word	0x0801bea0
 801297c:	0801c248 	.word	0x0801c248
 8012980:	0801beec 	.word	0x0801beec
 8012984:	2300      	movs	r3, #0
 8012986:	4423      	add	r3, r4
 8012988:	b29a      	uxth	r2, r3
 801298a:	4b98      	ldr	r3, [pc, #608]	; (8012bec <tcp_receive+0xb04>)
 801298c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801298e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012990:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8012998:	6938      	ldr	r0, [r7, #16]
 801299a:	f7fd fc4e 	bl	801023a <tcp_seg_free>
            while (next &&
 801299e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d00e      	beq.n	80129c2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80129a4:	4b91      	ldr	r3, [pc, #580]	; (8012bec <tcp_receive+0xb04>)
 80129a6:	881b      	ldrh	r3, [r3, #0]
 80129a8:	461a      	mov	r2, r3
 80129aa:	4b91      	ldr	r3, [pc, #580]	; (8012bf0 <tcp_receive+0xb08>)
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	441a      	add	r2, r3
 80129b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129b2:	68db      	ldr	r3, [r3, #12]
 80129b4:	685b      	ldr	r3, [r3, #4]
 80129b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80129b8:	8909      	ldrh	r1, [r1, #8]
 80129ba:	440b      	add	r3, r1
 80129bc:	1ad3      	subs	r3, r2, r3
            while (next &&
 80129be:	2b00      	cmp	r3, #0
 80129c0:	da9a      	bge.n	80128f8 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80129c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d059      	beq.n	8012a7c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80129c8:	4b88      	ldr	r3, [pc, #544]	; (8012bec <tcp_receive+0xb04>)
 80129ca:	881b      	ldrh	r3, [r3, #0]
 80129cc:	461a      	mov	r2, r3
 80129ce:	4b88      	ldr	r3, [pc, #544]	; (8012bf0 <tcp_receive+0xb08>)
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	441a      	add	r2, r3
 80129d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129d6:	68db      	ldr	r3, [r3, #12]
 80129d8:	685b      	ldr	r3, [r3, #4]
 80129da:	1ad3      	subs	r3, r2, r3
            if (next &&
 80129dc:	2b00      	cmp	r3, #0
 80129de:	dd4d      	ble.n	8012a7c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80129e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129e2:	68db      	ldr	r3, [r3, #12]
 80129e4:	685b      	ldr	r3, [r3, #4]
 80129e6:	b29a      	uxth	r2, r3
 80129e8:	4b81      	ldr	r3, [pc, #516]	; (8012bf0 <tcp_receive+0xb08>)
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	b29b      	uxth	r3, r3
 80129ee:	1ad3      	subs	r3, r2, r3
 80129f0:	b29a      	uxth	r2, r3
 80129f2:	4b80      	ldr	r3, [pc, #512]	; (8012bf4 <tcp_receive+0xb0c>)
 80129f4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80129f6:	4b7f      	ldr	r3, [pc, #508]	; (8012bf4 <tcp_receive+0xb0c>)
 80129f8:	68db      	ldr	r3, [r3, #12]
 80129fa:	899b      	ldrh	r3, [r3, #12]
 80129fc:	b29b      	uxth	r3, r3
 80129fe:	4618      	mov	r0, r3
 8012a00:	f7fa fb58 	bl	800d0b4 <lwip_htons>
 8012a04:	4603      	mov	r3, r0
 8012a06:	b2db      	uxtb	r3, r3
 8012a08:	f003 0302 	and.w	r3, r3, #2
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d005      	beq.n	8012a1c <tcp_receive+0x934>
                inseg.len -= 1;
 8012a10:	4b78      	ldr	r3, [pc, #480]	; (8012bf4 <tcp_receive+0xb0c>)
 8012a12:	891b      	ldrh	r3, [r3, #8]
 8012a14:	3b01      	subs	r3, #1
 8012a16:	b29a      	uxth	r2, r3
 8012a18:	4b76      	ldr	r3, [pc, #472]	; (8012bf4 <tcp_receive+0xb0c>)
 8012a1a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012a1c:	4b75      	ldr	r3, [pc, #468]	; (8012bf4 <tcp_receive+0xb0c>)
 8012a1e:	685b      	ldr	r3, [r3, #4]
 8012a20:	4a74      	ldr	r2, [pc, #464]	; (8012bf4 <tcp_receive+0xb0c>)
 8012a22:	8912      	ldrh	r2, [r2, #8]
 8012a24:	4611      	mov	r1, r2
 8012a26:	4618      	mov	r0, r3
 8012a28:	f7fb fe48 	bl	800e6bc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012a2c:	4b71      	ldr	r3, [pc, #452]	; (8012bf4 <tcp_receive+0xb0c>)
 8012a2e:	891c      	ldrh	r4, [r3, #8]
 8012a30:	4b70      	ldr	r3, [pc, #448]	; (8012bf4 <tcp_receive+0xb0c>)
 8012a32:	68db      	ldr	r3, [r3, #12]
 8012a34:	899b      	ldrh	r3, [r3, #12]
 8012a36:	b29b      	uxth	r3, r3
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f7fa fb3b 	bl	800d0b4 <lwip_htons>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	b2db      	uxtb	r3, r3
 8012a42:	f003 0303 	and.w	r3, r3, #3
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d001      	beq.n	8012a4e <tcp_receive+0x966>
 8012a4a:	2301      	movs	r3, #1
 8012a4c:	e000      	b.n	8012a50 <tcp_receive+0x968>
 8012a4e:	2300      	movs	r3, #0
 8012a50:	4423      	add	r3, r4
 8012a52:	b29a      	uxth	r2, r3
 8012a54:	4b65      	ldr	r3, [pc, #404]	; (8012bec <tcp_receive+0xb04>)
 8012a56:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012a58:	4b64      	ldr	r3, [pc, #400]	; (8012bec <tcp_receive+0xb04>)
 8012a5a:	881b      	ldrh	r3, [r3, #0]
 8012a5c:	461a      	mov	r2, r3
 8012a5e:	4b64      	ldr	r3, [pc, #400]	; (8012bf0 <tcp_receive+0xb08>)
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	441a      	add	r2, r3
 8012a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a66:	68db      	ldr	r3, [r3, #12]
 8012a68:	685b      	ldr	r3, [r3, #4]
 8012a6a:	429a      	cmp	r2, r3
 8012a6c:	d006      	beq.n	8012a7c <tcp_receive+0x994>
 8012a6e:	4b62      	ldr	r3, [pc, #392]	; (8012bf8 <tcp_receive+0xb10>)
 8012a70:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8012a74:	4961      	ldr	r1, [pc, #388]	; (8012bfc <tcp_receive+0xb14>)
 8012a76:	4862      	ldr	r0, [pc, #392]	; (8012c00 <tcp_receive+0xb18>)
 8012a78:	f005 fbba 	bl	80181f0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012a80:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012a82:	4b5a      	ldr	r3, [pc, #360]	; (8012bec <tcp_receive+0xb04>)
 8012a84:	881b      	ldrh	r3, [r3, #0]
 8012a86:	461a      	mov	r2, r3
 8012a88:	4b59      	ldr	r3, [pc, #356]	; (8012bf0 <tcp_receive+0xb08>)
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	441a      	add	r2, r3
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012a96:	4b55      	ldr	r3, [pc, #340]	; (8012bec <tcp_receive+0xb04>)
 8012a98:	881b      	ldrh	r3, [r3, #0]
 8012a9a:	429a      	cmp	r2, r3
 8012a9c:	d206      	bcs.n	8012aac <tcp_receive+0x9c4>
 8012a9e:	4b56      	ldr	r3, [pc, #344]	; (8012bf8 <tcp_receive+0xb10>)
 8012aa0:	f240 6207 	movw	r2, #1543	; 0x607
 8012aa4:	4957      	ldr	r1, [pc, #348]	; (8012c04 <tcp_receive+0xb1c>)
 8012aa6:	4856      	ldr	r0, [pc, #344]	; (8012c00 <tcp_receive+0xb18>)
 8012aa8:	f005 fba2 	bl	80181f0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012ab0:	4b4e      	ldr	r3, [pc, #312]	; (8012bec <tcp_receive+0xb04>)
 8012ab2:	881b      	ldrh	r3, [r3, #0]
 8012ab4:	1ad3      	subs	r3, r2, r3
 8012ab6:	b29a      	uxth	r2, r3
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012abc:	6878      	ldr	r0, [r7, #4]
 8012abe:	f7fc fe97 	bl	800f7f0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012ac2:	4b4c      	ldr	r3, [pc, #304]	; (8012bf4 <tcp_receive+0xb0c>)
 8012ac4:	685b      	ldr	r3, [r3, #4]
 8012ac6:	891b      	ldrh	r3, [r3, #8]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d006      	beq.n	8012ada <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8012acc:	4b49      	ldr	r3, [pc, #292]	; (8012bf4 <tcp_receive+0xb0c>)
 8012ace:	685b      	ldr	r3, [r3, #4]
 8012ad0:	4a4d      	ldr	r2, [pc, #308]	; (8012c08 <tcp_receive+0xb20>)
 8012ad2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012ad4:	4b47      	ldr	r3, [pc, #284]	; (8012bf4 <tcp_receive+0xb0c>)
 8012ad6:	2200      	movs	r2, #0
 8012ad8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012ada:	4b46      	ldr	r3, [pc, #280]	; (8012bf4 <tcp_receive+0xb0c>)
 8012adc:	68db      	ldr	r3, [r3, #12]
 8012ade:	899b      	ldrh	r3, [r3, #12]
 8012ae0:	b29b      	uxth	r3, r3
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	f7fa fae6 	bl	800d0b4 <lwip_htons>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	b2db      	uxtb	r3, r3
 8012aec:	f003 0301 	and.w	r3, r3, #1
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	f000 80b8 	beq.w	8012c66 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012af6:	4b45      	ldr	r3, [pc, #276]	; (8012c0c <tcp_receive+0xb24>)
 8012af8:	781b      	ldrb	r3, [r3, #0]
 8012afa:	f043 0320 	orr.w	r3, r3, #32
 8012afe:	b2da      	uxtb	r2, r3
 8012b00:	4b42      	ldr	r3, [pc, #264]	; (8012c0c <tcp_receive+0xb24>)
 8012b02:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012b04:	e0af      	b.n	8012c66 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b0a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b10:	68db      	ldr	r3, [r3, #12]
 8012b12:	685b      	ldr	r3, [r3, #4]
 8012b14:	4a36      	ldr	r2, [pc, #216]	; (8012bf0 <tcp_receive+0xb08>)
 8012b16:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012b18:	68bb      	ldr	r3, [r7, #8]
 8012b1a:	891b      	ldrh	r3, [r3, #8]
 8012b1c:	461c      	mov	r4, r3
 8012b1e:	68bb      	ldr	r3, [r7, #8]
 8012b20:	68db      	ldr	r3, [r3, #12]
 8012b22:	899b      	ldrh	r3, [r3, #12]
 8012b24:	b29b      	uxth	r3, r3
 8012b26:	4618      	mov	r0, r3
 8012b28:	f7fa fac4 	bl	800d0b4 <lwip_htons>
 8012b2c:	4603      	mov	r3, r0
 8012b2e:	b2db      	uxtb	r3, r3
 8012b30:	f003 0303 	and.w	r3, r3, #3
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d001      	beq.n	8012b3c <tcp_receive+0xa54>
 8012b38:	2301      	movs	r3, #1
 8012b3a:	e000      	b.n	8012b3e <tcp_receive+0xa56>
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	191a      	adds	r2, r3, r4
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b44:	441a      	add	r2, r3
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012b4e:	461c      	mov	r4, r3
 8012b50:	68bb      	ldr	r3, [r7, #8]
 8012b52:	891b      	ldrh	r3, [r3, #8]
 8012b54:	461d      	mov	r5, r3
 8012b56:	68bb      	ldr	r3, [r7, #8]
 8012b58:	68db      	ldr	r3, [r3, #12]
 8012b5a:	899b      	ldrh	r3, [r3, #12]
 8012b5c:	b29b      	uxth	r3, r3
 8012b5e:	4618      	mov	r0, r3
 8012b60:	f7fa faa8 	bl	800d0b4 <lwip_htons>
 8012b64:	4603      	mov	r3, r0
 8012b66:	b2db      	uxtb	r3, r3
 8012b68:	f003 0303 	and.w	r3, r3, #3
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d001      	beq.n	8012b74 <tcp_receive+0xa8c>
 8012b70:	2301      	movs	r3, #1
 8012b72:	e000      	b.n	8012b76 <tcp_receive+0xa8e>
 8012b74:	2300      	movs	r3, #0
 8012b76:	442b      	add	r3, r5
 8012b78:	429c      	cmp	r4, r3
 8012b7a:	d206      	bcs.n	8012b8a <tcp_receive+0xaa2>
 8012b7c:	4b1e      	ldr	r3, [pc, #120]	; (8012bf8 <tcp_receive+0xb10>)
 8012b7e:	f240 622b 	movw	r2, #1579	; 0x62b
 8012b82:	4923      	ldr	r1, [pc, #140]	; (8012c10 <tcp_receive+0xb28>)
 8012b84:	481e      	ldr	r0, [pc, #120]	; (8012c00 <tcp_receive+0xb18>)
 8012b86:	f005 fb33 	bl	80181f0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012b8a:	68bb      	ldr	r3, [r7, #8]
 8012b8c:	891b      	ldrh	r3, [r3, #8]
 8012b8e:	461c      	mov	r4, r3
 8012b90:	68bb      	ldr	r3, [r7, #8]
 8012b92:	68db      	ldr	r3, [r3, #12]
 8012b94:	899b      	ldrh	r3, [r3, #12]
 8012b96:	b29b      	uxth	r3, r3
 8012b98:	4618      	mov	r0, r3
 8012b9a:	f7fa fa8b 	bl	800d0b4 <lwip_htons>
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	b2db      	uxtb	r3, r3
 8012ba2:	f003 0303 	and.w	r3, r3, #3
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d001      	beq.n	8012bae <tcp_receive+0xac6>
 8012baa:	2301      	movs	r3, #1
 8012bac:	e000      	b.n	8012bb0 <tcp_receive+0xac8>
 8012bae:	2300      	movs	r3, #0
 8012bb0:	1919      	adds	r1, r3, r4
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012bb6:	b28b      	uxth	r3, r1
 8012bb8:	1ad3      	subs	r3, r2, r3
 8012bba:	b29a      	uxth	r2, r3
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012bc0:	6878      	ldr	r0, [r7, #4]
 8012bc2:	f7fc fe15 	bl	800f7f0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012bc6:	68bb      	ldr	r3, [r7, #8]
 8012bc8:	685b      	ldr	r3, [r3, #4]
 8012bca:	891b      	ldrh	r3, [r3, #8]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d028      	beq.n	8012c22 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012bd0:	4b0d      	ldr	r3, [pc, #52]	; (8012c08 <tcp_receive+0xb20>)
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d01d      	beq.n	8012c14 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8012bd8:	4b0b      	ldr	r3, [pc, #44]	; (8012c08 <tcp_receive+0xb20>)
 8012bda:	681a      	ldr	r2, [r3, #0]
 8012bdc:	68bb      	ldr	r3, [r7, #8]
 8012bde:	685b      	ldr	r3, [r3, #4]
 8012be0:	4619      	mov	r1, r3
 8012be2:	4610      	mov	r0, r2
 8012be4:	f7fb ffbe 	bl	800eb64 <pbuf_cat>
 8012be8:	e018      	b.n	8012c1c <tcp_receive+0xb34>
 8012bea:	bf00      	nop
 8012bec:	200052b6 	.word	0x200052b6
 8012bf0:	200052ac 	.word	0x200052ac
 8012bf4:	2000528c 	.word	0x2000528c
 8012bf8:	0801bea0 	.word	0x0801bea0
 8012bfc:	0801c280 	.word	0x0801c280
 8012c00:	0801beec 	.word	0x0801beec
 8012c04:	0801c2bc 	.word	0x0801c2bc
 8012c08:	200052bc 	.word	0x200052bc
 8012c0c:	200052b9 	.word	0x200052b9
 8012c10:	0801c2dc 	.word	0x0801c2dc
            } else {
              recv_data = cseg->p;
 8012c14:	68bb      	ldr	r3, [r7, #8]
 8012c16:	685b      	ldr	r3, [r3, #4]
 8012c18:	4a70      	ldr	r2, [pc, #448]	; (8012ddc <tcp_receive+0xcf4>)
 8012c1a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012c1c:	68bb      	ldr	r3, [r7, #8]
 8012c1e:	2200      	movs	r2, #0
 8012c20:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012c22:	68bb      	ldr	r3, [r7, #8]
 8012c24:	68db      	ldr	r3, [r3, #12]
 8012c26:	899b      	ldrh	r3, [r3, #12]
 8012c28:	b29b      	uxth	r3, r3
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f7fa fa42 	bl	800d0b4 <lwip_htons>
 8012c30:	4603      	mov	r3, r0
 8012c32:	b2db      	uxtb	r3, r3
 8012c34:	f003 0301 	and.w	r3, r3, #1
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d00d      	beq.n	8012c58 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012c3c:	4b68      	ldr	r3, [pc, #416]	; (8012de0 <tcp_receive+0xcf8>)
 8012c3e:	781b      	ldrb	r3, [r3, #0]
 8012c40:	f043 0320 	orr.w	r3, r3, #32
 8012c44:	b2da      	uxtb	r2, r3
 8012c46:	4b66      	ldr	r3, [pc, #408]	; (8012de0 <tcp_receive+0xcf8>)
 8012c48:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	7d1b      	ldrb	r3, [r3, #20]
 8012c4e:	2b04      	cmp	r3, #4
 8012c50:	d102      	bne.n	8012c58 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	2207      	movs	r2, #7
 8012c56:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012c58:	68bb      	ldr	r3, [r7, #8]
 8012c5a:	681a      	ldr	r2, [r3, #0]
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012c60:	68b8      	ldr	r0, [r7, #8]
 8012c62:	f7fd faea 	bl	801023a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d008      	beq.n	8012c80 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c72:	68db      	ldr	r3, [r3, #12]
 8012c74:	685a      	ldr	r2, [r3, #4]
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012c7a:	429a      	cmp	r2, r3
 8012c7c:	f43f af43 	beq.w	8012b06 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	8b5b      	ldrh	r3, [r3, #26]
 8012c84:	f003 0301 	and.w	r3, r3, #1
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d00e      	beq.n	8012caa <tcp_receive+0xbc2>
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	8b5b      	ldrh	r3, [r3, #26]
 8012c90:	f023 0301 	bic.w	r3, r3, #1
 8012c94:	b29a      	uxth	r2, r3
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	835a      	strh	r2, [r3, #26]
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	8b5b      	ldrh	r3, [r3, #26]
 8012c9e:	f043 0302 	orr.w	r3, r3, #2
 8012ca2:	b29a      	uxth	r2, r3
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012ca8:	e188      	b.n	8012fbc <tcp_receive+0xed4>
        tcp_ack(pcb);
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	8b5b      	ldrh	r3, [r3, #26]
 8012cae:	f043 0301 	orr.w	r3, r3, #1
 8012cb2:	b29a      	uxth	r2, r3
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012cb8:	e180      	b.n	8012fbc <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d106      	bne.n	8012cd0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012cc2:	4848      	ldr	r0, [pc, #288]	; (8012de4 <tcp_receive+0xcfc>)
 8012cc4:	f7fd faf0 	bl	80102a8 <tcp_seg_copy>
 8012cc8:	4602      	mov	r2, r0
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	675a      	str	r2, [r3, #116]	; 0x74
 8012cce:	e16d      	b.n	8012fac <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012cd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8012cda:	e157      	b.n	8012f8c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8012cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cde:	68db      	ldr	r3, [r3, #12]
 8012ce0:	685a      	ldr	r2, [r3, #4]
 8012ce2:	4b41      	ldr	r3, [pc, #260]	; (8012de8 <tcp_receive+0xd00>)
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	429a      	cmp	r2, r3
 8012ce8:	d11d      	bne.n	8012d26 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012cea:	4b3e      	ldr	r3, [pc, #248]	; (8012de4 <tcp_receive+0xcfc>)
 8012cec:	891a      	ldrh	r2, [r3, #8]
 8012cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cf0:	891b      	ldrh	r3, [r3, #8]
 8012cf2:	429a      	cmp	r2, r3
 8012cf4:	f240 814f 	bls.w	8012f96 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012cf8:	483a      	ldr	r0, [pc, #232]	; (8012de4 <tcp_receive+0xcfc>)
 8012cfa:	f7fd fad5 	bl	80102a8 <tcp_seg_copy>
 8012cfe:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012d00:	697b      	ldr	r3, [r7, #20]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	f000 8149 	beq.w	8012f9a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8012d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d003      	beq.n	8012d16 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8012d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d10:	697a      	ldr	r2, [r7, #20]
 8012d12:	601a      	str	r2, [r3, #0]
 8012d14:	e002      	b.n	8012d1c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	697a      	ldr	r2, [r7, #20]
 8012d1a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012d1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012d1e:	6978      	ldr	r0, [r7, #20]
 8012d20:	f7ff f8de 	bl	8011ee0 <tcp_oos_insert_segment>
                }
                break;
 8012d24:	e139      	b.n	8012f9a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d117      	bne.n	8012d5c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012d2c:	4b2e      	ldr	r3, [pc, #184]	; (8012de8 <tcp_receive+0xd00>)
 8012d2e:	681a      	ldr	r2, [r3, #0]
 8012d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d32:	68db      	ldr	r3, [r3, #12]
 8012d34:	685b      	ldr	r3, [r3, #4]
 8012d36:	1ad3      	subs	r3, r2, r3
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	da57      	bge.n	8012dec <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012d3c:	4829      	ldr	r0, [pc, #164]	; (8012de4 <tcp_receive+0xcfc>)
 8012d3e:	f7fd fab3 	bl	80102a8 <tcp_seg_copy>
 8012d42:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012d44:	69bb      	ldr	r3, [r7, #24]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	f000 8129 	beq.w	8012f9e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	69ba      	ldr	r2, [r7, #24]
 8012d50:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012d52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012d54:	69b8      	ldr	r0, [r7, #24]
 8012d56:	f7ff f8c3 	bl	8011ee0 <tcp_oos_insert_segment>
                  }
                  break;
 8012d5a:	e120      	b.n	8012f9e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012d5c:	4b22      	ldr	r3, [pc, #136]	; (8012de8 <tcp_receive+0xd00>)
 8012d5e:	681a      	ldr	r2, [r3, #0]
 8012d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d62:	68db      	ldr	r3, [r3, #12]
 8012d64:	685b      	ldr	r3, [r3, #4]
 8012d66:	1ad3      	subs	r3, r2, r3
 8012d68:	3b01      	subs	r3, #1
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	db3e      	blt.n	8012dec <tcp_receive+0xd04>
 8012d6e:	4b1e      	ldr	r3, [pc, #120]	; (8012de8 <tcp_receive+0xd00>)
 8012d70:	681a      	ldr	r2, [r3, #0]
 8012d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d74:	68db      	ldr	r3, [r3, #12]
 8012d76:	685b      	ldr	r3, [r3, #4]
 8012d78:	1ad3      	subs	r3, r2, r3
 8012d7a:	3301      	adds	r3, #1
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	dc35      	bgt.n	8012dec <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012d80:	4818      	ldr	r0, [pc, #96]	; (8012de4 <tcp_receive+0xcfc>)
 8012d82:	f7fd fa91 	bl	80102a8 <tcp_seg_copy>
 8012d86:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012d88:	69fb      	ldr	r3, [r7, #28]
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	f000 8109 	beq.w	8012fa2 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d92:	68db      	ldr	r3, [r3, #12]
 8012d94:	685b      	ldr	r3, [r3, #4]
 8012d96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012d98:	8912      	ldrh	r2, [r2, #8]
 8012d9a:	441a      	add	r2, r3
 8012d9c:	4b12      	ldr	r3, [pc, #72]	; (8012de8 <tcp_receive+0xd00>)
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	1ad3      	subs	r3, r2, r3
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	dd12      	ble.n	8012dcc <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012da6:	4b10      	ldr	r3, [pc, #64]	; (8012de8 <tcp_receive+0xd00>)
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	b29a      	uxth	r2, r3
 8012dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dae:	68db      	ldr	r3, [r3, #12]
 8012db0:	685b      	ldr	r3, [r3, #4]
 8012db2:	b29b      	uxth	r3, r3
 8012db4:	1ad3      	subs	r3, r2, r3
 8012db6:	b29a      	uxth	r2, r3
 8012db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dba:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dbe:	685a      	ldr	r2, [r3, #4]
 8012dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dc2:	891b      	ldrh	r3, [r3, #8]
 8012dc4:	4619      	mov	r1, r3
 8012dc6:	4610      	mov	r0, r2
 8012dc8:	f7fb fc78 	bl	800e6bc <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dce:	69fa      	ldr	r2, [r7, #28]
 8012dd0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012dd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012dd4:	69f8      	ldr	r0, [r7, #28]
 8012dd6:	f7ff f883 	bl	8011ee0 <tcp_oos_insert_segment>
                  }
                  break;
 8012dda:	e0e2      	b.n	8012fa2 <tcp_receive+0xeba>
 8012ddc:	200052bc 	.word	0x200052bc
 8012de0:	200052b9 	.word	0x200052b9
 8012de4:	2000528c 	.word	0x2000528c
 8012de8:	200052ac 	.word	0x200052ac
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dee:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	f040 80c6 	bne.w	8012f86 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012dfa:	4b80      	ldr	r3, [pc, #512]	; (8012ffc <tcp_receive+0xf14>)
 8012dfc:	681a      	ldr	r2, [r3, #0]
 8012dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e00:	68db      	ldr	r3, [r3, #12]
 8012e02:	685b      	ldr	r3, [r3, #4]
 8012e04:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	f340 80bd 	ble.w	8012f86 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e0e:	68db      	ldr	r3, [r3, #12]
 8012e10:	899b      	ldrh	r3, [r3, #12]
 8012e12:	b29b      	uxth	r3, r3
 8012e14:	4618      	mov	r0, r3
 8012e16:	f7fa f94d 	bl	800d0b4 <lwip_htons>
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	b2db      	uxtb	r3, r3
 8012e1e:	f003 0301 	and.w	r3, r3, #1
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	f040 80bf 	bne.w	8012fa6 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012e28:	4875      	ldr	r0, [pc, #468]	; (8013000 <tcp_receive+0xf18>)
 8012e2a:	f7fd fa3d 	bl	80102a8 <tcp_seg_copy>
 8012e2e:	4602      	mov	r2, r0
 8012e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e32:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	f000 80b6 	beq.w	8012faa <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e40:	68db      	ldr	r3, [r3, #12]
 8012e42:	685b      	ldr	r3, [r3, #4]
 8012e44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012e46:	8912      	ldrh	r2, [r2, #8]
 8012e48:	441a      	add	r2, r3
 8012e4a:	4b6c      	ldr	r3, [pc, #432]	; (8012ffc <tcp_receive+0xf14>)
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	1ad3      	subs	r3, r2, r3
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	dd12      	ble.n	8012e7a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012e54:	4b69      	ldr	r3, [pc, #420]	; (8012ffc <tcp_receive+0xf14>)
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	b29a      	uxth	r2, r3
 8012e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e5c:	68db      	ldr	r3, [r3, #12]
 8012e5e:	685b      	ldr	r3, [r3, #4]
 8012e60:	b29b      	uxth	r3, r3
 8012e62:	1ad3      	subs	r3, r2, r3
 8012e64:	b29a      	uxth	r2, r3
 8012e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e68:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e6c:	685a      	ldr	r2, [r3, #4]
 8012e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e70:	891b      	ldrh	r3, [r3, #8]
 8012e72:	4619      	mov	r1, r3
 8012e74:	4610      	mov	r0, r2
 8012e76:	f7fb fc21 	bl	800e6bc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012e7a:	4b62      	ldr	r3, [pc, #392]	; (8013004 <tcp_receive+0xf1c>)
 8012e7c:	881b      	ldrh	r3, [r3, #0]
 8012e7e:	461a      	mov	r2, r3
 8012e80:	4b5e      	ldr	r3, [pc, #376]	; (8012ffc <tcp_receive+0xf14>)
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	441a      	add	r2, r3
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e8a:	6879      	ldr	r1, [r7, #4]
 8012e8c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012e8e:	440b      	add	r3, r1
 8012e90:	1ad3      	subs	r3, r2, r3
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	f340 8089 	ble.w	8012faa <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	68db      	ldr	r3, [r3, #12]
 8012e9e:	899b      	ldrh	r3, [r3, #12]
 8012ea0:	b29b      	uxth	r3, r3
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	f7fa f906 	bl	800d0b4 <lwip_htons>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	b2db      	uxtb	r3, r3
 8012eac:	f003 0301 	and.w	r3, r3, #1
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d022      	beq.n	8012efa <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	68db      	ldr	r3, [r3, #12]
 8012eba:	899b      	ldrh	r3, [r3, #12]
 8012ebc:	b29b      	uxth	r3, r3
 8012ebe:	b21b      	sxth	r3, r3
 8012ec0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012ec4:	b21c      	sxth	r4, r3
 8012ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	68db      	ldr	r3, [r3, #12]
 8012ecc:	899b      	ldrh	r3, [r3, #12]
 8012ece:	b29b      	uxth	r3, r3
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	f7fa f8ef 	bl	800d0b4 <lwip_htons>
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	b2db      	uxtb	r3, r3
 8012eda:	b29b      	uxth	r3, r3
 8012edc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012ee0:	b29b      	uxth	r3, r3
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	f7fa f8e6 	bl	800d0b4 <lwip_htons>
 8012ee8:	4603      	mov	r3, r0
 8012eea:	b21b      	sxth	r3, r3
 8012eec:	4323      	orrs	r3, r4
 8012eee:	b21a      	sxth	r2, r3
 8012ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	68db      	ldr	r3, [r3, #12]
 8012ef6:	b292      	uxth	r2, r2
 8012ef8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012efe:	b29a      	uxth	r2, r3
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012f04:	4413      	add	r3, r2
 8012f06:	b299      	uxth	r1, r3
 8012f08:	4b3c      	ldr	r3, [pc, #240]	; (8012ffc <tcp_receive+0xf14>)
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	b29a      	uxth	r2, r3
 8012f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	1a8a      	subs	r2, r1, r2
 8012f14:	b292      	uxth	r2, r2
 8012f16:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	685a      	ldr	r2, [r3, #4]
 8012f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	891b      	ldrh	r3, [r3, #8]
 8012f24:	4619      	mov	r1, r3
 8012f26:	4610      	mov	r0, r2
 8012f28:	f7fb fbc8 	bl	800e6bc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	891c      	ldrh	r4, [r3, #8]
 8012f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	68db      	ldr	r3, [r3, #12]
 8012f38:	899b      	ldrh	r3, [r3, #12]
 8012f3a:	b29b      	uxth	r3, r3
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	f7fa f8b9 	bl	800d0b4 <lwip_htons>
 8012f42:	4603      	mov	r3, r0
 8012f44:	b2db      	uxtb	r3, r3
 8012f46:	f003 0303 	and.w	r3, r3, #3
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d001      	beq.n	8012f52 <tcp_receive+0xe6a>
 8012f4e:	2301      	movs	r3, #1
 8012f50:	e000      	b.n	8012f54 <tcp_receive+0xe6c>
 8012f52:	2300      	movs	r3, #0
 8012f54:	4423      	add	r3, r4
 8012f56:	b29a      	uxth	r2, r3
 8012f58:	4b2a      	ldr	r3, [pc, #168]	; (8013004 <tcp_receive+0xf1c>)
 8012f5a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012f5c:	4b29      	ldr	r3, [pc, #164]	; (8013004 <tcp_receive+0xf1c>)
 8012f5e:	881b      	ldrh	r3, [r3, #0]
 8012f60:	461a      	mov	r2, r3
 8012f62:	4b26      	ldr	r3, [pc, #152]	; (8012ffc <tcp_receive+0xf14>)
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	441a      	add	r2, r3
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f6c:	6879      	ldr	r1, [r7, #4]
 8012f6e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012f70:	440b      	add	r3, r1
 8012f72:	429a      	cmp	r2, r3
 8012f74:	d019      	beq.n	8012faa <tcp_receive+0xec2>
 8012f76:	4b24      	ldr	r3, [pc, #144]	; (8013008 <tcp_receive+0xf20>)
 8012f78:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012f7c:	4923      	ldr	r1, [pc, #140]	; (801300c <tcp_receive+0xf24>)
 8012f7e:	4824      	ldr	r0, [pc, #144]	; (8013010 <tcp_receive+0xf28>)
 8012f80:	f005 f936 	bl	80181f0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012f84:	e011      	b.n	8012faa <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8012f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	f47f aea4 	bne.w	8012cdc <tcp_receive+0xbf4>
 8012f94:	e00a      	b.n	8012fac <tcp_receive+0xec4>
                break;
 8012f96:	bf00      	nop
 8012f98:	e008      	b.n	8012fac <tcp_receive+0xec4>
                break;
 8012f9a:	bf00      	nop
 8012f9c:	e006      	b.n	8012fac <tcp_receive+0xec4>
                  break;
 8012f9e:	bf00      	nop
 8012fa0:	e004      	b.n	8012fac <tcp_receive+0xec4>
                  break;
 8012fa2:	bf00      	nop
 8012fa4:	e002      	b.n	8012fac <tcp_receive+0xec4>
                  break;
 8012fa6:	bf00      	nop
 8012fa8:	e000      	b.n	8012fac <tcp_receive+0xec4>
                break;
 8012faa:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012fac:	6878      	ldr	r0, [r7, #4]
 8012fae:	f001 fe8b 	bl	8014cc8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012fb2:	e003      	b.n	8012fbc <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012fb4:	6878      	ldr	r0, [r7, #4]
 8012fb6:	f001 fe87 	bl	8014cc8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012fba:	e01a      	b.n	8012ff2 <tcp_receive+0xf0a>
 8012fbc:	e019      	b.n	8012ff2 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012fbe:	4b0f      	ldr	r3, [pc, #60]	; (8012ffc <tcp_receive+0xf14>)
 8012fc0:	681a      	ldr	r2, [r3, #0]
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fc6:	1ad3      	subs	r3, r2, r3
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	db0a      	blt.n	8012fe2 <tcp_receive+0xefa>
 8012fcc:	4b0b      	ldr	r3, [pc, #44]	; (8012ffc <tcp_receive+0xf14>)
 8012fce:	681a      	ldr	r2, [r3, #0]
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fd4:	6879      	ldr	r1, [r7, #4]
 8012fd6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012fd8:	440b      	add	r3, r1
 8012fda:	1ad3      	subs	r3, r2, r3
 8012fdc:	3301      	adds	r3, #1
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	dd07      	ble.n	8012ff2 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	8b5b      	ldrh	r3, [r3, #26]
 8012fe6:	f043 0302 	orr.w	r3, r3, #2
 8012fea:	b29a      	uxth	r2, r3
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012ff0:	e7ff      	b.n	8012ff2 <tcp_receive+0xf0a>
 8012ff2:	bf00      	nop
 8012ff4:	3750      	adds	r7, #80	; 0x50
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	bdb0      	pop	{r4, r5, r7, pc}
 8012ffa:	bf00      	nop
 8012ffc:	200052ac 	.word	0x200052ac
 8013000:	2000528c 	.word	0x2000528c
 8013004:	200052b6 	.word	0x200052b6
 8013008:	0801bea0 	.word	0x0801bea0
 801300c:	0801c248 	.word	0x0801c248
 8013010:	0801beec 	.word	0x0801beec

08013014 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8013014:	b480      	push	{r7}
 8013016:	b083      	sub	sp, #12
 8013018:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801301a:	4b15      	ldr	r3, [pc, #84]	; (8013070 <tcp_get_next_optbyte+0x5c>)
 801301c:	881b      	ldrh	r3, [r3, #0]
 801301e:	1c5a      	adds	r2, r3, #1
 8013020:	b291      	uxth	r1, r2
 8013022:	4a13      	ldr	r2, [pc, #76]	; (8013070 <tcp_get_next_optbyte+0x5c>)
 8013024:	8011      	strh	r1, [r2, #0]
 8013026:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8013028:	4b12      	ldr	r3, [pc, #72]	; (8013074 <tcp_get_next_optbyte+0x60>)
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d004      	beq.n	801303a <tcp_get_next_optbyte+0x26>
 8013030:	4b11      	ldr	r3, [pc, #68]	; (8013078 <tcp_get_next_optbyte+0x64>)
 8013032:	881b      	ldrh	r3, [r3, #0]
 8013034:	88fa      	ldrh	r2, [r7, #6]
 8013036:	429a      	cmp	r2, r3
 8013038:	d208      	bcs.n	801304c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801303a:	4b10      	ldr	r3, [pc, #64]	; (801307c <tcp_get_next_optbyte+0x68>)
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	3314      	adds	r3, #20
 8013040:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8013042:	88fb      	ldrh	r3, [r7, #6]
 8013044:	683a      	ldr	r2, [r7, #0]
 8013046:	4413      	add	r3, r2
 8013048:	781b      	ldrb	r3, [r3, #0]
 801304a:	e00b      	b.n	8013064 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801304c:	88fb      	ldrh	r3, [r7, #6]
 801304e:	b2da      	uxtb	r2, r3
 8013050:	4b09      	ldr	r3, [pc, #36]	; (8013078 <tcp_get_next_optbyte+0x64>)
 8013052:	881b      	ldrh	r3, [r3, #0]
 8013054:	b2db      	uxtb	r3, r3
 8013056:	1ad3      	subs	r3, r2, r3
 8013058:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801305a:	4b06      	ldr	r3, [pc, #24]	; (8013074 <tcp_get_next_optbyte+0x60>)
 801305c:	681a      	ldr	r2, [r3, #0]
 801305e:	797b      	ldrb	r3, [r7, #5]
 8013060:	4413      	add	r3, r2
 8013062:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013064:	4618      	mov	r0, r3
 8013066:	370c      	adds	r7, #12
 8013068:	46bd      	mov	sp, r7
 801306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801306e:	4770      	bx	lr
 8013070:	200052a8 	.word	0x200052a8
 8013074:	200052a4 	.word	0x200052a4
 8013078:	200052a2 	.word	0x200052a2
 801307c:	2000529c 	.word	0x2000529c

08013080 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b084      	sub	sp, #16
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d106      	bne.n	801309c <tcp_parseopt+0x1c>
 801308e:	4b32      	ldr	r3, [pc, #200]	; (8013158 <tcp_parseopt+0xd8>)
 8013090:	f240 727d 	movw	r2, #1917	; 0x77d
 8013094:	4931      	ldr	r1, [pc, #196]	; (801315c <tcp_parseopt+0xdc>)
 8013096:	4832      	ldr	r0, [pc, #200]	; (8013160 <tcp_parseopt+0xe0>)
 8013098:	f005 f8aa 	bl	80181f0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801309c:	4b31      	ldr	r3, [pc, #196]	; (8013164 <tcp_parseopt+0xe4>)
 801309e:	881b      	ldrh	r3, [r3, #0]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d055      	beq.n	8013150 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80130a4:	4b30      	ldr	r3, [pc, #192]	; (8013168 <tcp_parseopt+0xe8>)
 80130a6:	2200      	movs	r2, #0
 80130a8:	801a      	strh	r2, [r3, #0]
 80130aa:	e045      	b.n	8013138 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80130ac:	f7ff ffb2 	bl	8013014 <tcp_get_next_optbyte>
 80130b0:	4603      	mov	r3, r0
 80130b2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80130b4:	7bfb      	ldrb	r3, [r7, #15]
 80130b6:	2b02      	cmp	r3, #2
 80130b8:	d006      	beq.n	80130c8 <tcp_parseopt+0x48>
 80130ba:	2b02      	cmp	r3, #2
 80130bc:	dc2b      	bgt.n	8013116 <tcp_parseopt+0x96>
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d041      	beq.n	8013146 <tcp_parseopt+0xc6>
 80130c2:	2b01      	cmp	r3, #1
 80130c4:	d127      	bne.n	8013116 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80130c6:	e037      	b.n	8013138 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80130c8:	f7ff ffa4 	bl	8013014 <tcp_get_next_optbyte>
 80130cc:	4603      	mov	r3, r0
 80130ce:	2b04      	cmp	r3, #4
 80130d0:	d13b      	bne.n	801314a <tcp_parseopt+0xca>
 80130d2:	4b25      	ldr	r3, [pc, #148]	; (8013168 <tcp_parseopt+0xe8>)
 80130d4:	881b      	ldrh	r3, [r3, #0]
 80130d6:	3301      	adds	r3, #1
 80130d8:	4a22      	ldr	r2, [pc, #136]	; (8013164 <tcp_parseopt+0xe4>)
 80130da:	8812      	ldrh	r2, [r2, #0]
 80130dc:	4293      	cmp	r3, r2
 80130de:	da34      	bge.n	801314a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80130e0:	f7ff ff98 	bl	8013014 <tcp_get_next_optbyte>
 80130e4:	4603      	mov	r3, r0
 80130e6:	b29b      	uxth	r3, r3
 80130e8:	021b      	lsls	r3, r3, #8
 80130ea:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80130ec:	f7ff ff92 	bl	8013014 <tcp_get_next_optbyte>
 80130f0:	4603      	mov	r3, r0
 80130f2:	b29a      	uxth	r2, r3
 80130f4:	89bb      	ldrh	r3, [r7, #12]
 80130f6:	4313      	orrs	r3, r2
 80130f8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80130fa:	89bb      	ldrh	r3, [r7, #12]
 80130fc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8013100:	d804      	bhi.n	801310c <tcp_parseopt+0x8c>
 8013102:	89bb      	ldrh	r3, [r7, #12]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d001      	beq.n	801310c <tcp_parseopt+0x8c>
 8013108:	89ba      	ldrh	r2, [r7, #12]
 801310a:	e001      	b.n	8013110 <tcp_parseopt+0x90>
 801310c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8013114:	e010      	b.n	8013138 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8013116:	f7ff ff7d 	bl	8013014 <tcp_get_next_optbyte>
 801311a:	4603      	mov	r3, r0
 801311c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801311e:	7afb      	ldrb	r3, [r7, #11]
 8013120:	2b01      	cmp	r3, #1
 8013122:	d914      	bls.n	801314e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8013124:	7afb      	ldrb	r3, [r7, #11]
 8013126:	b29a      	uxth	r2, r3
 8013128:	4b0f      	ldr	r3, [pc, #60]	; (8013168 <tcp_parseopt+0xe8>)
 801312a:	881b      	ldrh	r3, [r3, #0]
 801312c:	4413      	add	r3, r2
 801312e:	b29b      	uxth	r3, r3
 8013130:	3b02      	subs	r3, #2
 8013132:	b29a      	uxth	r2, r3
 8013134:	4b0c      	ldr	r3, [pc, #48]	; (8013168 <tcp_parseopt+0xe8>)
 8013136:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013138:	4b0b      	ldr	r3, [pc, #44]	; (8013168 <tcp_parseopt+0xe8>)
 801313a:	881a      	ldrh	r2, [r3, #0]
 801313c:	4b09      	ldr	r3, [pc, #36]	; (8013164 <tcp_parseopt+0xe4>)
 801313e:	881b      	ldrh	r3, [r3, #0]
 8013140:	429a      	cmp	r2, r3
 8013142:	d3b3      	bcc.n	80130ac <tcp_parseopt+0x2c>
 8013144:	e004      	b.n	8013150 <tcp_parseopt+0xd0>
          return;
 8013146:	bf00      	nop
 8013148:	e002      	b.n	8013150 <tcp_parseopt+0xd0>
            return;
 801314a:	bf00      	nop
 801314c:	e000      	b.n	8013150 <tcp_parseopt+0xd0>
            return;
 801314e:	bf00      	nop
      }
    }
  }
}
 8013150:	3710      	adds	r7, #16
 8013152:	46bd      	mov	sp, r7
 8013154:	bd80      	pop	{r7, pc}
 8013156:	bf00      	nop
 8013158:	0801bea0 	.word	0x0801bea0
 801315c:	0801c304 	.word	0x0801c304
 8013160:	0801beec 	.word	0x0801beec
 8013164:	200052a0 	.word	0x200052a0
 8013168:	200052a8 	.word	0x200052a8

0801316c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801316c:	b480      	push	{r7}
 801316e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8013170:	4b05      	ldr	r3, [pc, #20]	; (8013188 <tcp_trigger_input_pcb_close+0x1c>)
 8013172:	781b      	ldrb	r3, [r3, #0]
 8013174:	f043 0310 	orr.w	r3, r3, #16
 8013178:	b2da      	uxtb	r2, r3
 801317a:	4b03      	ldr	r3, [pc, #12]	; (8013188 <tcp_trigger_input_pcb_close+0x1c>)
 801317c:	701a      	strb	r2, [r3, #0]
}
 801317e:	bf00      	nop
 8013180:	46bd      	mov	sp, r7
 8013182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013186:	4770      	bx	lr
 8013188:	200052b9 	.word	0x200052b9

0801318c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801318c:	b580      	push	{r7, lr}
 801318e:	b084      	sub	sp, #16
 8013190:	af00      	add	r7, sp, #0
 8013192:	60f8      	str	r0, [r7, #12]
 8013194:	60b9      	str	r1, [r7, #8]
 8013196:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d00a      	beq.n	80131b4 <tcp_route+0x28>
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	7a1b      	ldrb	r3, [r3, #8]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d006      	beq.n	80131b4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	7a1b      	ldrb	r3, [r3, #8]
 80131aa:	4618      	mov	r0, r3
 80131ac:	f7fb f87e 	bl	800e2ac <netif_get_by_index>
 80131b0:	4603      	mov	r3, r0
 80131b2:	e003      	b.n	80131bc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80131b4:	6878      	ldr	r0, [r7, #4]
 80131b6:	f003 fb05 	bl	80167c4 <ip4_route>
 80131ba:	4603      	mov	r3, r0
  }
}
 80131bc:	4618      	mov	r0, r3
 80131be:	3710      	adds	r7, #16
 80131c0:	46bd      	mov	sp, r7
 80131c2:	bd80      	pop	{r7, pc}

080131c4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80131c4:	b590      	push	{r4, r7, lr}
 80131c6:	b087      	sub	sp, #28
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	60f8      	str	r0, [r7, #12]
 80131cc:	60b9      	str	r1, [r7, #8]
 80131ce:	603b      	str	r3, [r7, #0]
 80131d0:	4613      	mov	r3, r2
 80131d2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d105      	bne.n	80131e6 <tcp_create_segment+0x22>
 80131da:	4b44      	ldr	r3, [pc, #272]	; (80132ec <tcp_create_segment+0x128>)
 80131dc:	22a3      	movs	r2, #163	; 0xa3
 80131de:	4944      	ldr	r1, [pc, #272]	; (80132f0 <tcp_create_segment+0x12c>)
 80131e0:	4844      	ldr	r0, [pc, #272]	; (80132f4 <tcp_create_segment+0x130>)
 80131e2:	f005 f805 	bl	80181f0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80131e6:	68bb      	ldr	r3, [r7, #8]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d105      	bne.n	80131f8 <tcp_create_segment+0x34>
 80131ec:	4b3f      	ldr	r3, [pc, #252]	; (80132ec <tcp_create_segment+0x128>)
 80131ee:	22a4      	movs	r2, #164	; 0xa4
 80131f0:	4941      	ldr	r1, [pc, #260]	; (80132f8 <tcp_create_segment+0x134>)
 80131f2:	4840      	ldr	r0, [pc, #256]	; (80132f4 <tcp_create_segment+0x130>)
 80131f4:	f004 fffc 	bl	80181f0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80131f8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80131fc:	009b      	lsls	r3, r3, #2
 80131fe:	b2db      	uxtb	r3, r3
 8013200:	f003 0304 	and.w	r3, r3, #4
 8013204:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013206:	2003      	movs	r0, #3
 8013208:	f7fa fce8 	bl	800dbdc <memp_malloc>
 801320c:	6138      	str	r0, [r7, #16]
 801320e:	693b      	ldr	r3, [r7, #16]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d104      	bne.n	801321e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013214:	68b8      	ldr	r0, [r7, #8]
 8013216:	f7fb fbd7 	bl	800e9c8 <pbuf_free>
    return NULL;
 801321a:	2300      	movs	r3, #0
 801321c:	e061      	b.n	80132e2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801321e:	693b      	ldr	r3, [r7, #16]
 8013220:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013224:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8013226:	693b      	ldr	r3, [r7, #16]
 8013228:	2200      	movs	r2, #0
 801322a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801322c:	693b      	ldr	r3, [r7, #16]
 801322e:	68ba      	ldr	r2, [r7, #8]
 8013230:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013232:	68bb      	ldr	r3, [r7, #8]
 8013234:	891a      	ldrh	r2, [r3, #8]
 8013236:	7dfb      	ldrb	r3, [r7, #23]
 8013238:	b29b      	uxth	r3, r3
 801323a:	429a      	cmp	r2, r3
 801323c:	d205      	bcs.n	801324a <tcp_create_segment+0x86>
 801323e:	4b2b      	ldr	r3, [pc, #172]	; (80132ec <tcp_create_segment+0x128>)
 8013240:	22b0      	movs	r2, #176	; 0xb0
 8013242:	492e      	ldr	r1, [pc, #184]	; (80132fc <tcp_create_segment+0x138>)
 8013244:	482b      	ldr	r0, [pc, #172]	; (80132f4 <tcp_create_segment+0x130>)
 8013246:	f004 ffd3 	bl	80181f0 <iprintf>
  seg->len = p->tot_len - optlen;
 801324a:	68bb      	ldr	r3, [r7, #8]
 801324c:	891a      	ldrh	r2, [r3, #8]
 801324e:	7dfb      	ldrb	r3, [r7, #23]
 8013250:	b29b      	uxth	r3, r3
 8013252:	1ad3      	subs	r3, r2, r3
 8013254:	b29a      	uxth	r2, r3
 8013256:	693b      	ldr	r3, [r7, #16]
 8013258:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801325a:	2114      	movs	r1, #20
 801325c:	68b8      	ldr	r0, [r7, #8]
 801325e:	f7fb fb1d 	bl	800e89c <pbuf_add_header>
 8013262:	4603      	mov	r3, r0
 8013264:	2b00      	cmp	r3, #0
 8013266:	d004      	beq.n	8013272 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013268:	6938      	ldr	r0, [r7, #16]
 801326a:	f7fc ffe6 	bl	801023a <tcp_seg_free>
    return NULL;
 801326e:	2300      	movs	r3, #0
 8013270:	e037      	b.n	80132e2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013272:	693b      	ldr	r3, [r7, #16]
 8013274:	685b      	ldr	r3, [r3, #4]
 8013276:	685a      	ldr	r2, [r3, #4]
 8013278:	693b      	ldr	r3, [r7, #16]
 801327a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801327c:	68fb      	ldr	r3, [r7, #12]
 801327e:	8ada      	ldrh	r2, [r3, #22]
 8013280:	693b      	ldr	r3, [r7, #16]
 8013282:	68dc      	ldr	r4, [r3, #12]
 8013284:	4610      	mov	r0, r2
 8013286:	f7f9 ff15 	bl	800d0b4 <lwip_htons>
 801328a:	4603      	mov	r3, r0
 801328c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	8b1a      	ldrh	r2, [r3, #24]
 8013292:	693b      	ldr	r3, [r7, #16]
 8013294:	68dc      	ldr	r4, [r3, #12]
 8013296:	4610      	mov	r0, r2
 8013298:	f7f9 ff0c 	bl	800d0b4 <lwip_htons>
 801329c:	4603      	mov	r3, r0
 801329e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80132a0:	693b      	ldr	r3, [r7, #16]
 80132a2:	68dc      	ldr	r4, [r3, #12]
 80132a4:	6838      	ldr	r0, [r7, #0]
 80132a6:	f7f9 ff1a 	bl	800d0de <lwip_htonl>
 80132aa:	4603      	mov	r3, r0
 80132ac:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80132ae:	7dfb      	ldrb	r3, [r7, #23]
 80132b0:	089b      	lsrs	r3, r3, #2
 80132b2:	b2db      	uxtb	r3, r3
 80132b4:	b29b      	uxth	r3, r3
 80132b6:	3305      	adds	r3, #5
 80132b8:	b29b      	uxth	r3, r3
 80132ba:	031b      	lsls	r3, r3, #12
 80132bc:	b29a      	uxth	r2, r3
 80132be:	79fb      	ldrb	r3, [r7, #7]
 80132c0:	b29b      	uxth	r3, r3
 80132c2:	4313      	orrs	r3, r2
 80132c4:	b29a      	uxth	r2, r3
 80132c6:	693b      	ldr	r3, [r7, #16]
 80132c8:	68dc      	ldr	r4, [r3, #12]
 80132ca:	4610      	mov	r0, r2
 80132cc:	f7f9 fef2 	bl	800d0b4 <lwip_htons>
 80132d0:	4603      	mov	r3, r0
 80132d2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80132d4:	693b      	ldr	r3, [r7, #16]
 80132d6:	68db      	ldr	r3, [r3, #12]
 80132d8:	2200      	movs	r2, #0
 80132da:	749a      	strb	r2, [r3, #18]
 80132dc:	2200      	movs	r2, #0
 80132de:	74da      	strb	r2, [r3, #19]
  return seg;
 80132e0:	693b      	ldr	r3, [r7, #16]
}
 80132e2:	4618      	mov	r0, r3
 80132e4:	371c      	adds	r7, #28
 80132e6:	46bd      	mov	sp, r7
 80132e8:	bd90      	pop	{r4, r7, pc}
 80132ea:	bf00      	nop
 80132ec:	0801c320 	.word	0x0801c320
 80132f0:	0801c354 	.word	0x0801c354
 80132f4:	0801c374 	.word	0x0801c374
 80132f8:	0801c39c 	.word	0x0801c39c
 80132fc:	0801c3c0 	.word	0x0801c3c0

08013300 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8013300:	b580      	push	{r7, lr}
 8013302:	b086      	sub	sp, #24
 8013304:	af00      	add	r7, sp, #0
 8013306:	607b      	str	r3, [r7, #4]
 8013308:	4603      	mov	r3, r0
 801330a:	73fb      	strb	r3, [r7, #15]
 801330c:	460b      	mov	r3, r1
 801330e:	81bb      	strh	r3, [r7, #12]
 8013310:	4613      	mov	r3, r2
 8013312:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8013314:	89bb      	ldrh	r3, [r7, #12]
 8013316:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d105      	bne.n	801332a <tcp_pbuf_prealloc+0x2a>
 801331e:	4b30      	ldr	r3, [pc, #192]	; (80133e0 <tcp_pbuf_prealloc+0xe0>)
 8013320:	22e8      	movs	r2, #232	; 0xe8
 8013322:	4930      	ldr	r1, [pc, #192]	; (80133e4 <tcp_pbuf_prealloc+0xe4>)
 8013324:	4830      	ldr	r0, [pc, #192]	; (80133e8 <tcp_pbuf_prealloc+0xe8>)
 8013326:	f004 ff63 	bl	80181f0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801332a:	6a3b      	ldr	r3, [r7, #32]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d105      	bne.n	801333c <tcp_pbuf_prealloc+0x3c>
 8013330:	4b2b      	ldr	r3, [pc, #172]	; (80133e0 <tcp_pbuf_prealloc+0xe0>)
 8013332:	22e9      	movs	r2, #233	; 0xe9
 8013334:	492d      	ldr	r1, [pc, #180]	; (80133ec <tcp_pbuf_prealloc+0xec>)
 8013336:	482c      	ldr	r0, [pc, #176]	; (80133e8 <tcp_pbuf_prealloc+0xe8>)
 8013338:	f004 ff5a 	bl	80181f0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801333c:	89ba      	ldrh	r2, [r7, #12]
 801333e:	897b      	ldrh	r3, [r7, #10]
 8013340:	429a      	cmp	r2, r3
 8013342:	d221      	bcs.n	8013388 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013344:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013348:	f003 0302 	and.w	r3, r3, #2
 801334c:	2b00      	cmp	r3, #0
 801334e:	d111      	bne.n	8013374 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8013350:	6a3b      	ldr	r3, [r7, #32]
 8013352:	8b5b      	ldrh	r3, [r3, #26]
 8013354:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013358:	2b00      	cmp	r3, #0
 801335a:	d115      	bne.n	8013388 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801335c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013360:	2b00      	cmp	r3, #0
 8013362:	d007      	beq.n	8013374 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8013364:	6a3b      	ldr	r3, [r7, #32]
 8013366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8013368:	2b00      	cmp	r3, #0
 801336a:	d103      	bne.n	8013374 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801336c:	6a3b      	ldr	r3, [r7, #32]
 801336e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8013370:	2b00      	cmp	r3, #0
 8013372:	d009      	beq.n	8013388 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8013374:	89bb      	ldrh	r3, [r7, #12]
 8013376:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801337a:	f023 0203 	bic.w	r2, r3, #3
 801337e:	897b      	ldrh	r3, [r7, #10]
 8013380:	4293      	cmp	r3, r2
 8013382:	bf28      	it	cs
 8013384:	4613      	movcs	r3, r2
 8013386:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8013388:	8af9      	ldrh	r1, [r7, #22]
 801338a:	7bfb      	ldrb	r3, [r7, #15]
 801338c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013390:	4618      	mov	r0, r3
 8013392:	f7fb f835 	bl	800e400 <pbuf_alloc>
 8013396:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013398:	693b      	ldr	r3, [r7, #16]
 801339a:	2b00      	cmp	r3, #0
 801339c:	d101      	bne.n	80133a2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801339e:	2300      	movs	r3, #0
 80133a0:	e019      	b.n	80133d6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80133a2:	693b      	ldr	r3, [r7, #16]
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d006      	beq.n	80133b8 <tcp_pbuf_prealloc+0xb8>
 80133aa:	4b0d      	ldr	r3, [pc, #52]	; (80133e0 <tcp_pbuf_prealloc+0xe0>)
 80133ac:	f240 120b 	movw	r2, #267	; 0x10b
 80133b0:	490f      	ldr	r1, [pc, #60]	; (80133f0 <tcp_pbuf_prealloc+0xf0>)
 80133b2:	480d      	ldr	r0, [pc, #52]	; (80133e8 <tcp_pbuf_prealloc+0xe8>)
 80133b4:	f004 ff1c 	bl	80181f0 <iprintf>
  *oversize = p->len - length;
 80133b8:	693b      	ldr	r3, [r7, #16]
 80133ba:	895a      	ldrh	r2, [r3, #10]
 80133bc:	89bb      	ldrh	r3, [r7, #12]
 80133be:	1ad3      	subs	r3, r2, r3
 80133c0:	b29a      	uxth	r2, r3
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80133c6:	693b      	ldr	r3, [r7, #16]
 80133c8:	89ba      	ldrh	r2, [r7, #12]
 80133ca:	811a      	strh	r2, [r3, #8]
 80133cc:	693b      	ldr	r3, [r7, #16]
 80133ce:	891a      	ldrh	r2, [r3, #8]
 80133d0:	693b      	ldr	r3, [r7, #16]
 80133d2:	815a      	strh	r2, [r3, #10]
  return p;
 80133d4:	693b      	ldr	r3, [r7, #16]
}
 80133d6:	4618      	mov	r0, r3
 80133d8:	3718      	adds	r7, #24
 80133da:	46bd      	mov	sp, r7
 80133dc:	bd80      	pop	{r7, pc}
 80133de:	bf00      	nop
 80133e0:	0801c320 	.word	0x0801c320
 80133e4:	0801c3d8 	.word	0x0801c3d8
 80133e8:	0801c374 	.word	0x0801c374
 80133ec:	0801c3fc 	.word	0x0801c3fc
 80133f0:	0801c41c 	.word	0x0801c41c

080133f4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b082      	sub	sp, #8
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	6078      	str	r0, [r7, #4]
 80133fc:	460b      	mov	r3, r1
 80133fe:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	2b00      	cmp	r3, #0
 8013404:	d106      	bne.n	8013414 <tcp_write_checks+0x20>
 8013406:	4b33      	ldr	r3, [pc, #204]	; (80134d4 <tcp_write_checks+0xe0>)
 8013408:	f240 1233 	movw	r2, #307	; 0x133
 801340c:	4932      	ldr	r1, [pc, #200]	; (80134d8 <tcp_write_checks+0xe4>)
 801340e:	4833      	ldr	r0, [pc, #204]	; (80134dc <tcp_write_checks+0xe8>)
 8013410:	f004 feee 	bl	80181f0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	7d1b      	ldrb	r3, [r3, #20]
 8013418:	2b04      	cmp	r3, #4
 801341a:	d00e      	beq.n	801343a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8013420:	2b07      	cmp	r3, #7
 8013422:	d00a      	beq.n	801343a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013428:	2b02      	cmp	r3, #2
 801342a:	d006      	beq.n	801343a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8013430:	2b03      	cmp	r3, #3
 8013432:	d002      	beq.n	801343a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013434:	f06f 030a 	mvn.w	r3, #10
 8013438:	e048      	b.n	80134cc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801343a:	887b      	ldrh	r3, [r7, #2]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d101      	bne.n	8013444 <tcp_write_checks+0x50>
    return ERR_OK;
 8013440:	2300      	movs	r3, #0
 8013442:	e043      	b.n	80134cc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801344a:	887a      	ldrh	r2, [r7, #2]
 801344c:	429a      	cmp	r2, r3
 801344e:	d909      	bls.n	8013464 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	8b5b      	ldrh	r3, [r3, #26]
 8013454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013458:	b29a      	uxth	r2, r3
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801345e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013462:	e033      	b.n	80134cc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801346a:	2b08      	cmp	r3, #8
 801346c:	d909      	bls.n	8013482 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	8b5b      	ldrh	r3, [r3, #26]
 8013472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013476:	b29a      	uxth	r2, r3
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801347c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013480:	e024      	b.n	80134cc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013488:	2b00      	cmp	r3, #0
 801348a:	d00f      	beq.n	80134ac <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013490:	2b00      	cmp	r3, #0
 8013492:	d11a      	bne.n	80134ca <tcp_write_checks+0xd6>
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013498:	2b00      	cmp	r3, #0
 801349a:	d116      	bne.n	80134ca <tcp_write_checks+0xd6>
 801349c:	4b0d      	ldr	r3, [pc, #52]	; (80134d4 <tcp_write_checks+0xe0>)
 801349e:	f240 1255 	movw	r2, #341	; 0x155
 80134a2:	490f      	ldr	r1, [pc, #60]	; (80134e0 <tcp_write_checks+0xec>)
 80134a4:	480d      	ldr	r0, [pc, #52]	; (80134dc <tcp_write_checks+0xe8>)
 80134a6:	f004 fea3 	bl	80181f0 <iprintf>
 80134aa:	e00e      	b.n	80134ca <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d103      	bne.n	80134bc <tcp_write_checks+0xc8>
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d006      	beq.n	80134ca <tcp_write_checks+0xd6>
 80134bc:	4b05      	ldr	r3, [pc, #20]	; (80134d4 <tcp_write_checks+0xe0>)
 80134be:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80134c2:	4908      	ldr	r1, [pc, #32]	; (80134e4 <tcp_write_checks+0xf0>)
 80134c4:	4805      	ldr	r0, [pc, #20]	; (80134dc <tcp_write_checks+0xe8>)
 80134c6:	f004 fe93 	bl	80181f0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80134ca:	2300      	movs	r3, #0
}
 80134cc:	4618      	mov	r0, r3
 80134ce:	3708      	adds	r7, #8
 80134d0:	46bd      	mov	sp, r7
 80134d2:	bd80      	pop	{r7, pc}
 80134d4:	0801c320 	.word	0x0801c320
 80134d8:	0801c430 	.word	0x0801c430
 80134dc:	0801c374 	.word	0x0801c374
 80134e0:	0801c450 	.word	0x0801c450
 80134e4:	0801c48c 	.word	0x0801c48c

080134e8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80134e8:	b590      	push	{r4, r7, lr}
 80134ea:	b09b      	sub	sp, #108	; 0x6c
 80134ec:	af04      	add	r7, sp, #16
 80134ee:	60f8      	str	r0, [r7, #12]
 80134f0:	60b9      	str	r1, [r7, #8]
 80134f2:	4611      	mov	r1, r2
 80134f4:	461a      	mov	r2, r3
 80134f6:	460b      	mov	r3, r1
 80134f8:	80fb      	strh	r3, [r7, #6]
 80134fa:	4613      	mov	r3, r2
 80134fc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80134fe:	2300      	movs	r3, #0
 8013500:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8013502:	2300      	movs	r3, #0
 8013504:	653b      	str	r3, [r7, #80]	; 0x50
 8013506:	2300      	movs	r3, #0
 8013508:	64fb      	str	r3, [r7, #76]	; 0x4c
 801350a:	2300      	movs	r3, #0
 801350c:	64bb      	str	r3, [r7, #72]	; 0x48
 801350e:	2300      	movs	r3, #0
 8013510:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8013512:	2300      	movs	r3, #0
 8013514:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8013518:	2300      	movs	r3, #0
 801351a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801351e:	2300      	movs	r3, #0
 8013520:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8013522:	2300      	movs	r3, #0
 8013524:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8013526:	2300      	movs	r3, #0
 8013528:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d109      	bne.n	8013544 <tcp_write+0x5c>
 8013530:	4ba4      	ldr	r3, [pc, #656]	; (80137c4 <tcp_write+0x2dc>)
 8013532:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8013536:	49a4      	ldr	r1, [pc, #656]	; (80137c8 <tcp_write+0x2e0>)
 8013538:	48a4      	ldr	r0, [pc, #656]	; (80137cc <tcp_write+0x2e4>)
 801353a:	f004 fe59 	bl	80181f0 <iprintf>
 801353e:	f06f 030f 	mvn.w	r3, #15
 8013542:	e32a      	b.n	8013b9a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801354a:	085b      	lsrs	r3, r3, #1
 801354c:	b29a      	uxth	r2, r3
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013552:	4293      	cmp	r3, r2
 8013554:	bf28      	it	cs
 8013556:	4613      	movcs	r3, r2
 8013558:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801355a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801355c:	2b00      	cmp	r3, #0
 801355e:	d102      	bne.n	8013566 <tcp_write+0x7e>
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013564:	e000      	b.n	8013568 <tcp_write+0x80>
 8013566:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013568:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801356a:	68bb      	ldr	r3, [r7, #8]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d109      	bne.n	8013584 <tcp_write+0x9c>
 8013570:	4b94      	ldr	r3, [pc, #592]	; (80137c4 <tcp_write+0x2dc>)
 8013572:	f240 12ad 	movw	r2, #429	; 0x1ad
 8013576:	4996      	ldr	r1, [pc, #600]	; (80137d0 <tcp_write+0x2e8>)
 8013578:	4894      	ldr	r0, [pc, #592]	; (80137cc <tcp_write+0x2e4>)
 801357a:	f004 fe39 	bl	80181f0 <iprintf>
 801357e:	f06f 030f 	mvn.w	r3, #15
 8013582:	e30a      	b.n	8013b9a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8013584:	88fb      	ldrh	r3, [r7, #6]
 8013586:	4619      	mov	r1, r3
 8013588:	68f8      	ldr	r0, [r7, #12]
 801358a:	f7ff ff33 	bl	80133f4 <tcp_write_checks>
 801358e:	4603      	mov	r3, r0
 8013590:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8013594:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013598:	2b00      	cmp	r3, #0
 801359a:	d002      	beq.n	80135a2 <tcp_write+0xba>
    return err;
 801359c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80135a0:	e2fb      	b.n	8013b9a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80135a8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80135ac:	2300      	movs	r3, #0
 80135ae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	f000 80f6 	beq.w	80137a8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135c0:	653b      	str	r3, [r7, #80]	; 0x50
 80135c2:	e002      	b.n	80135ca <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80135c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80135ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d1f8      	bne.n	80135c4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80135d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135d4:	7a9b      	ldrb	r3, [r3, #10]
 80135d6:	009b      	lsls	r3, r3, #2
 80135d8:	b29b      	uxth	r3, r3
 80135da:	f003 0304 	and.w	r3, r3, #4
 80135de:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80135e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80135e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135e4:	891b      	ldrh	r3, [r3, #8]
 80135e6:	4619      	mov	r1, r3
 80135e8:	8c3b      	ldrh	r3, [r7, #32]
 80135ea:	440b      	add	r3, r1
 80135ec:	429a      	cmp	r2, r3
 80135ee:	da06      	bge.n	80135fe <tcp_write+0x116>
 80135f0:	4b74      	ldr	r3, [pc, #464]	; (80137c4 <tcp_write+0x2dc>)
 80135f2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80135f6:	4977      	ldr	r1, [pc, #476]	; (80137d4 <tcp_write+0x2ec>)
 80135f8:	4874      	ldr	r0, [pc, #464]	; (80137cc <tcp_write+0x2e4>)
 80135fa:	f004 fdf9 	bl	80181f0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80135fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013600:	891a      	ldrh	r2, [r3, #8]
 8013602:	8c3b      	ldrh	r3, [r7, #32]
 8013604:	4413      	add	r3, r2
 8013606:	b29b      	uxth	r3, r3
 8013608:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801360a:	1ad3      	subs	r3, r2, r3
 801360c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013614:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8013616:	8a7b      	ldrh	r3, [r7, #18]
 8013618:	2b00      	cmp	r3, #0
 801361a:	d026      	beq.n	801366a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801361c:	8a7b      	ldrh	r3, [r7, #18]
 801361e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013620:	429a      	cmp	r2, r3
 8013622:	d206      	bcs.n	8013632 <tcp_write+0x14a>
 8013624:	4b67      	ldr	r3, [pc, #412]	; (80137c4 <tcp_write+0x2dc>)
 8013626:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801362a:	496b      	ldr	r1, [pc, #428]	; (80137d8 <tcp_write+0x2f0>)
 801362c:	4867      	ldr	r0, [pc, #412]	; (80137cc <tcp_write+0x2e4>)
 801362e:	f004 fddf 	bl	80181f0 <iprintf>
      seg = last_unsent;
 8013632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013634:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013636:	8a7b      	ldrh	r3, [r7, #18]
 8013638:	88fa      	ldrh	r2, [r7, #6]
 801363a:	4293      	cmp	r3, r2
 801363c:	bf28      	it	cs
 801363e:	4613      	movcs	r3, r2
 8013640:	b29b      	uxth	r3, r3
 8013642:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013644:	4293      	cmp	r3, r2
 8013646:	bf28      	it	cs
 8013648:	4613      	movcs	r3, r2
 801364a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801364c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013650:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013652:	4413      	add	r3, r2
 8013654:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8013658:	8a7a      	ldrh	r2, [r7, #18]
 801365a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801365c:	1ad3      	subs	r3, r2, r3
 801365e:	b29b      	uxth	r3, r3
 8013660:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8013662:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013664:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013666:	1ad3      	subs	r3, r2, r3
 8013668:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801366a:	8a7b      	ldrh	r3, [r7, #18]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d00b      	beq.n	8013688 <tcp_write+0x1a0>
 8013670:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013674:	88fb      	ldrh	r3, [r7, #6]
 8013676:	429a      	cmp	r2, r3
 8013678:	d006      	beq.n	8013688 <tcp_write+0x1a0>
 801367a:	4b52      	ldr	r3, [pc, #328]	; (80137c4 <tcp_write+0x2dc>)
 801367c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013680:	4956      	ldr	r1, [pc, #344]	; (80137dc <tcp_write+0x2f4>)
 8013682:	4852      	ldr	r0, [pc, #328]	; (80137cc <tcp_write+0x2e4>)
 8013684:	f004 fdb4 	bl	80181f0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8013688:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801368c:	88fb      	ldrh	r3, [r7, #6]
 801368e:	429a      	cmp	r2, r3
 8013690:	f080 8167 	bcs.w	8013962 <tcp_write+0x47a>
 8013694:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013696:	2b00      	cmp	r3, #0
 8013698:	f000 8163 	beq.w	8013962 <tcp_write+0x47a>
 801369c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801369e:	891b      	ldrh	r3, [r3, #8]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	f000 815e 	beq.w	8013962 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80136a6:	88fa      	ldrh	r2, [r7, #6]
 80136a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80136ac:	1ad2      	subs	r2, r2, r3
 80136ae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80136b0:	4293      	cmp	r3, r2
 80136b2:	bfa8      	it	ge
 80136b4:	4613      	movge	r3, r2
 80136b6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80136b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136ba:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80136bc:	797b      	ldrb	r3, [r7, #5]
 80136be:	f003 0301 	and.w	r3, r3, #1
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d027      	beq.n	8013716 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80136c6:	f107 0012 	add.w	r0, r7, #18
 80136ca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80136cc:	8bf9      	ldrh	r1, [r7, #30]
 80136ce:	2301      	movs	r3, #1
 80136d0:	9302      	str	r3, [sp, #8]
 80136d2:	797b      	ldrb	r3, [r7, #5]
 80136d4:	9301      	str	r3, [sp, #4]
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	9300      	str	r3, [sp, #0]
 80136da:	4603      	mov	r3, r0
 80136dc:	2000      	movs	r0, #0
 80136de:	f7ff fe0f 	bl	8013300 <tcp_pbuf_prealloc>
 80136e2:	6578      	str	r0, [r7, #84]	; 0x54
 80136e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	f000 8225 	beq.w	8013b36 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80136ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80136ee:	6858      	ldr	r0, [r3, #4]
 80136f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80136f4:	68ba      	ldr	r2, [r7, #8]
 80136f6:	4413      	add	r3, r2
 80136f8:	8bfa      	ldrh	r2, [r7, #30]
 80136fa:	4619      	mov	r1, r3
 80136fc:	f004 fc9e 	bl	801803c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8013700:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013702:	f7fb f9ef 	bl	800eae4 <pbuf_clen>
 8013706:	4603      	mov	r3, r0
 8013708:	461a      	mov	r2, r3
 801370a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801370e:	4413      	add	r3, r2
 8013710:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8013714:	e041      	b.n	801379a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8013716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013718:	685b      	ldr	r3, [r3, #4]
 801371a:	637b      	str	r3, [r7, #52]	; 0x34
 801371c:	e002      	b.n	8013724 <tcp_write+0x23c>
 801371e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	637b      	str	r3, [r7, #52]	; 0x34
 8013724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d1f8      	bne.n	801371e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801372c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801372e:	7b1b      	ldrb	r3, [r3, #12]
 8013730:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013734:	2b00      	cmp	r3, #0
 8013736:	d115      	bne.n	8013764 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801373a:	685b      	ldr	r3, [r3, #4]
 801373c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801373e:	8952      	ldrh	r2, [r2, #10]
 8013740:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013742:	68ba      	ldr	r2, [r7, #8]
 8013744:	429a      	cmp	r2, r3
 8013746:	d10d      	bne.n	8013764 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8013748:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801374c:	2b00      	cmp	r3, #0
 801374e:	d006      	beq.n	801375e <tcp_write+0x276>
 8013750:	4b1c      	ldr	r3, [pc, #112]	; (80137c4 <tcp_write+0x2dc>)
 8013752:	f240 2231 	movw	r2, #561	; 0x231
 8013756:	4922      	ldr	r1, [pc, #136]	; (80137e0 <tcp_write+0x2f8>)
 8013758:	481c      	ldr	r0, [pc, #112]	; (80137cc <tcp_write+0x2e4>)
 801375a:	f004 fd49 	bl	80181f0 <iprintf>
          extendlen = seglen;
 801375e:	8bfb      	ldrh	r3, [r7, #30]
 8013760:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8013762:	e01a      	b.n	801379a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8013764:	8bfb      	ldrh	r3, [r7, #30]
 8013766:	2201      	movs	r2, #1
 8013768:	4619      	mov	r1, r3
 801376a:	2000      	movs	r0, #0
 801376c:	f7fa fe48 	bl	800e400 <pbuf_alloc>
 8013770:	6578      	str	r0, [r7, #84]	; 0x54
 8013772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013774:	2b00      	cmp	r3, #0
 8013776:	f000 81e0 	beq.w	8013b3a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801377a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801377e:	68ba      	ldr	r2, [r7, #8]
 8013780:	441a      	add	r2, r3
 8013782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013784:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8013786:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013788:	f7fb f9ac 	bl	800eae4 <pbuf_clen>
 801378c:	4603      	mov	r3, r0
 801378e:	461a      	mov	r2, r3
 8013790:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013794:	4413      	add	r3, r2
 8013796:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801379a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801379e:	8bfb      	ldrh	r3, [r7, #30]
 80137a0:	4413      	add	r3, r2
 80137a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80137a6:	e0dc      	b.n	8013962 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	f000 80d7 	beq.w	8013962 <tcp_write+0x47a>
 80137b4:	4b03      	ldr	r3, [pc, #12]	; (80137c4 <tcp_write+0x2dc>)
 80137b6:	f240 224a 	movw	r2, #586	; 0x24a
 80137ba:	490a      	ldr	r1, [pc, #40]	; (80137e4 <tcp_write+0x2fc>)
 80137bc:	4803      	ldr	r0, [pc, #12]	; (80137cc <tcp_write+0x2e4>)
 80137be:	f004 fd17 	bl	80181f0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80137c2:	e0ce      	b.n	8013962 <tcp_write+0x47a>
 80137c4:	0801c320 	.word	0x0801c320
 80137c8:	0801c4c0 	.word	0x0801c4c0
 80137cc:	0801c374 	.word	0x0801c374
 80137d0:	0801c4d8 	.word	0x0801c4d8
 80137d4:	0801c50c 	.word	0x0801c50c
 80137d8:	0801c524 	.word	0x0801c524
 80137dc:	0801c544 	.word	0x0801c544
 80137e0:	0801c564 	.word	0x0801c564
 80137e4:	0801c590 	.word	0x0801c590
    struct pbuf *p;
    u16_t left = len - pos;
 80137e8:	88fa      	ldrh	r2, [r7, #6]
 80137ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80137ee:	1ad3      	subs	r3, r2, r3
 80137f0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80137f2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80137f6:	b29b      	uxth	r3, r3
 80137f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80137fa:	1ad3      	subs	r3, r2, r3
 80137fc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80137fe:	8b7a      	ldrh	r2, [r7, #26]
 8013800:	8bbb      	ldrh	r3, [r7, #28]
 8013802:	4293      	cmp	r3, r2
 8013804:	bf28      	it	cs
 8013806:	4613      	movcs	r3, r2
 8013808:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801380a:	797b      	ldrb	r3, [r7, #5]
 801380c:	f003 0301 	and.w	r3, r3, #1
 8013810:	2b00      	cmp	r3, #0
 8013812:	d036      	beq.n	8013882 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8013814:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013818:	b29a      	uxth	r2, r3
 801381a:	8b3b      	ldrh	r3, [r7, #24]
 801381c:	4413      	add	r3, r2
 801381e:	b299      	uxth	r1, r3
 8013820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013822:	2b00      	cmp	r3, #0
 8013824:	bf0c      	ite	eq
 8013826:	2301      	moveq	r3, #1
 8013828:	2300      	movne	r3, #0
 801382a:	b2db      	uxtb	r3, r3
 801382c:	f107 0012 	add.w	r0, r7, #18
 8013830:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013832:	9302      	str	r3, [sp, #8]
 8013834:	797b      	ldrb	r3, [r7, #5]
 8013836:	9301      	str	r3, [sp, #4]
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	9300      	str	r3, [sp, #0]
 801383c:	4603      	mov	r3, r0
 801383e:	2036      	movs	r0, #54	; 0x36
 8013840:	f7ff fd5e 	bl	8013300 <tcp_pbuf_prealloc>
 8013844:	6338      	str	r0, [r7, #48]	; 0x30
 8013846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013848:	2b00      	cmp	r3, #0
 801384a:	f000 8178 	beq.w	8013b3e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801384e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013850:	895b      	ldrh	r3, [r3, #10]
 8013852:	8b3a      	ldrh	r2, [r7, #24]
 8013854:	429a      	cmp	r2, r3
 8013856:	d906      	bls.n	8013866 <tcp_write+0x37e>
 8013858:	4b8c      	ldr	r3, [pc, #560]	; (8013a8c <tcp_write+0x5a4>)
 801385a:	f240 2266 	movw	r2, #614	; 0x266
 801385e:	498c      	ldr	r1, [pc, #560]	; (8013a90 <tcp_write+0x5a8>)
 8013860:	488c      	ldr	r0, [pc, #560]	; (8013a94 <tcp_write+0x5ac>)
 8013862:	f004 fcc5 	bl	80181f0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8013866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013868:	685a      	ldr	r2, [r3, #4]
 801386a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801386e:	18d0      	adds	r0, r2, r3
 8013870:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013874:	68ba      	ldr	r2, [r7, #8]
 8013876:	4413      	add	r3, r2
 8013878:	8b3a      	ldrh	r2, [r7, #24]
 801387a:	4619      	mov	r1, r3
 801387c:	f004 fbde 	bl	801803c <memcpy>
 8013880:	e02f      	b.n	80138e2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8013882:	8a7b      	ldrh	r3, [r7, #18]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d006      	beq.n	8013896 <tcp_write+0x3ae>
 8013888:	4b80      	ldr	r3, [pc, #512]	; (8013a8c <tcp_write+0x5a4>)
 801388a:	f240 2271 	movw	r2, #625	; 0x271
 801388e:	4982      	ldr	r1, [pc, #520]	; (8013a98 <tcp_write+0x5b0>)
 8013890:	4880      	ldr	r0, [pc, #512]	; (8013a94 <tcp_write+0x5ac>)
 8013892:	f004 fcad 	bl	80181f0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8013896:	8b3b      	ldrh	r3, [r7, #24]
 8013898:	2201      	movs	r2, #1
 801389a:	4619      	mov	r1, r3
 801389c:	2036      	movs	r0, #54	; 0x36
 801389e:	f7fa fdaf 	bl	800e400 <pbuf_alloc>
 80138a2:	6178      	str	r0, [r7, #20]
 80138a4:	697b      	ldr	r3, [r7, #20]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	f000 814b 	beq.w	8013b42 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80138ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80138b0:	68ba      	ldr	r2, [r7, #8]
 80138b2:	441a      	add	r2, r3
 80138b4:	697b      	ldr	r3, [r7, #20]
 80138b6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80138b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80138bc:	b29b      	uxth	r3, r3
 80138be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80138c2:	4619      	mov	r1, r3
 80138c4:	2036      	movs	r0, #54	; 0x36
 80138c6:	f7fa fd9b 	bl	800e400 <pbuf_alloc>
 80138ca:	6338      	str	r0, [r7, #48]	; 0x30
 80138cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d103      	bne.n	80138da <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80138d2:	6978      	ldr	r0, [r7, #20]
 80138d4:	f7fb f878 	bl	800e9c8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80138d8:	e136      	b.n	8013b48 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80138da:	6979      	ldr	r1, [r7, #20]
 80138dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80138de:	f7fb f941 	bl	800eb64 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80138e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80138e4:	f7fb f8fe 	bl	800eae4 <pbuf_clen>
 80138e8:	4603      	mov	r3, r0
 80138ea:	461a      	mov	r2, r3
 80138ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80138f0:	4413      	add	r3, r2
 80138f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80138f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80138fa:	2b09      	cmp	r3, #9
 80138fc:	d903      	bls.n	8013906 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80138fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013900:	f7fb f862 	bl	800e9c8 <pbuf_free>
      goto memerr;
 8013904:	e120      	b.n	8013b48 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801390a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801390e:	441a      	add	r2, r3
 8013910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013914:	9300      	str	r3, [sp, #0]
 8013916:	4613      	mov	r3, r2
 8013918:	2200      	movs	r2, #0
 801391a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801391c:	68f8      	ldr	r0, [r7, #12]
 801391e:	f7ff fc51 	bl	80131c4 <tcp_create_segment>
 8013922:	64f8      	str	r0, [r7, #76]	; 0x4c
 8013924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013926:	2b00      	cmp	r3, #0
 8013928:	f000 810d 	beq.w	8013b46 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801392c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801392e:	2b00      	cmp	r3, #0
 8013930:	d102      	bne.n	8013938 <tcp_write+0x450>
      queue = seg;
 8013932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013934:	647b      	str	r3, [r7, #68]	; 0x44
 8013936:	e00c      	b.n	8013952 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8013938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801393a:	2b00      	cmp	r3, #0
 801393c:	d106      	bne.n	801394c <tcp_write+0x464>
 801393e:	4b53      	ldr	r3, [pc, #332]	; (8013a8c <tcp_write+0x5a4>)
 8013940:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013944:	4955      	ldr	r1, [pc, #340]	; (8013a9c <tcp_write+0x5b4>)
 8013946:	4853      	ldr	r0, [pc, #332]	; (8013a94 <tcp_write+0x5ac>)
 8013948:	f004 fc52 	bl	80181f0 <iprintf>
      prev_seg->next = seg;
 801394c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801394e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013950:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8013952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013954:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8013956:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801395a:	8b3b      	ldrh	r3, [r7, #24]
 801395c:	4413      	add	r3, r2
 801395e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8013962:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013966:	88fb      	ldrh	r3, [r7, #6]
 8013968:	429a      	cmp	r2, r3
 801396a:	f4ff af3d 	bcc.w	80137e8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801396e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013970:	2b00      	cmp	r3, #0
 8013972:	d02c      	beq.n	80139ce <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8013974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013976:	685b      	ldr	r3, [r3, #4]
 8013978:	62fb      	str	r3, [r7, #44]	; 0x2c
 801397a:	e01e      	b.n	80139ba <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801397c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801397e:	891a      	ldrh	r2, [r3, #8]
 8013980:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013982:	4413      	add	r3, r2
 8013984:	b29a      	uxth	r2, r3
 8013986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013988:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801398a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d110      	bne.n	80139b4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8013992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013994:	685b      	ldr	r3, [r3, #4]
 8013996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013998:	8952      	ldrh	r2, [r2, #10]
 801399a:	4413      	add	r3, r2
 801399c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801399e:	68b9      	ldr	r1, [r7, #8]
 80139a0:	4618      	mov	r0, r3
 80139a2:	f004 fb4b 	bl	801803c <memcpy>
        p->len += oversize_used;
 80139a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139a8:	895a      	ldrh	r2, [r3, #10]
 80139aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80139ac:	4413      	add	r3, r2
 80139ae:	b29a      	uxth	r2, r3
 80139b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139b2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80139b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80139ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d1dd      	bne.n	801397c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80139c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139c2:	891a      	ldrh	r2, [r3, #8]
 80139c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80139c6:	4413      	add	r3, r2
 80139c8:	b29a      	uxth	r2, r3
 80139ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139cc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80139ce:	8a7a      	ldrh	r2, [r7, #18]
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80139d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d018      	beq.n	8013a0e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80139dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d106      	bne.n	80139f0 <tcp_write+0x508>
 80139e2:	4b2a      	ldr	r3, [pc, #168]	; (8013a8c <tcp_write+0x5a4>)
 80139e4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80139e8:	492d      	ldr	r1, [pc, #180]	; (8013aa0 <tcp_write+0x5b8>)
 80139ea:	482a      	ldr	r0, [pc, #168]	; (8013a94 <tcp_write+0x5ac>)
 80139ec:	f004 fc00 	bl	80181f0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80139f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139f2:	685b      	ldr	r3, [r3, #4]
 80139f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80139f6:	4618      	mov	r0, r3
 80139f8:	f7fb f8b4 	bl	800eb64 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80139fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139fe:	891a      	ldrh	r2, [r3, #8]
 8013a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a02:	891b      	ldrh	r3, [r3, #8]
 8013a04:	4413      	add	r3, r2
 8013a06:	b29a      	uxth	r2, r3
 8013a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a0a:	811a      	strh	r2, [r3, #8]
 8013a0c:	e037      	b.n	8013a7e <tcp_write+0x596>
  } else if (extendlen > 0) {
 8013a0e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d034      	beq.n	8013a7e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8013a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d003      	beq.n	8013a22 <tcp_write+0x53a>
 8013a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a1c:	685b      	ldr	r3, [r3, #4]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d106      	bne.n	8013a30 <tcp_write+0x548>
 8013a22:	4b1a      	ldr	r3, [pc, #104]	; (8013a8c <tcp_write+0x5a4>)
 8013a24:	f240 22e6 	movw	r2, #742	; 0x2e6
 8013a28:	491e      	ldr	r1, [pc, #120]	; (8013aa4 <tcp_write+0x5bc>)
 8013a2a:	481a      	ldr	r0, [pc, #104]	; (8013a94 <tcp_write+0x5ac>)
 8013a2c:	f004 fbe0 	bl	80181f0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013a30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a32:	685b      	ldr	r3, [r3, #4]
 8013a34:	62bb      	str	r3, [r7, #40]	; 0x28
 8013a36:	e009      	b.n	8013a4c <tcp_write+0x564>
      p->tot_len += extendlen;
 8013a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a3a:	891a      	ldrh	r2, [r3, #8]
 8013a3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013a3e:	4413      	add	r3, r2
 8013a40:	b29a      	uxth	r2, r3
 8013a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a44:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8013a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d1f1      	bne.n	8013a38 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8013a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a56:	891a      	ldrh	r2, [r3, #8]
 8013a58:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013a5a:	4413      	add	r3, r2
 8013a5c:	b29a      	uxth	r2, r3
 8013a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a60:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8013a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a64:	895a      	ldrh	r2, [r3, #10]
 8013a66:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013a68:	4413      	add	r3, r2
 8013a6a:	b29a      	uxth	r2, r3
 8013a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a6e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8013a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a72:	891a      	ldrh	r2, [r3, #8]
 8013a74:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013a76:	4413      	add	r3, r2
 8013a78:	b29a      	uxth	r2, r3
 8013a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a7c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8013a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d111      	bne.n	8013aa8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013a88:	66da      	str	r2, [r3, #108]	; 0x6c
 8013a8a:	e010      	b.n	8013aae <tcp_write+0x5c6>
 8013a8c:	0801c320 	.word	0x0801c320
 8013a90:	0801c5c0 	.word	0x0801c5c0
 8013a94:	0801c374 	.word	0x0801c374
 8013a98:	0801c600 	.word	0x0801c600
 8013a9c:	0801c610 	.word	0x0801c610
 8013aa0:	0801c624 	.word	0x0801c624
 8013aa4:	0801c65c 	.word	0x0801c65c
  } else {
    last_unsent->next = queue;
 8013aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013aaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013aac:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013ab2:	88fb      	ldrh	r3, [r7, #6]
 8013ab4:	441a      	add	r2, r3
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013ac0:	88fb      	ldrh	r3, [r7, #6]
 8013ac2:	1ad3      	subs	r3, r2, r3
 8013ac4:	b29a      	uxth	r2, r3
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013ad2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d00e      	beq.n	8013afe <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d10a      	bne.n	8013afe <tcp_write+0x616>
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d106      	bne.n	8013afe <tcp_write+0x616>
 8013af0:	4b2c      	ldr	r3, [pc, #176]	; (8013ba4 <tcp_write+0x6bc>)
 8013af2:	f240 3212 	movw	r2, #786	; 0x312
 8013af6:	492c      	ldr	r1, [pc, #176]	; (8013ba8 <tcp_write+0x6c0>)
 8013af8:	482c      	ldr	r0, [pc, #176]	; (8013bac <tcp_write+0x6c4>)
 8013afa:	f004 fb79 	bl	80181f0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8013afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d016      	beq.n	8013b32 <tcp_write+0x64a>
 8013b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b06:	68db      	ldr	r3, [r3, #12]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d012      	beq.n	8013b32 <tcp_write+0x64a>
 8013b0c:	797b      	ldrb	r3, [r7, #5]
 8013b0e:	f003 0302 	and.w	r3, r3, #2
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d10d      	bne.n	8013b32 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8013b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b18:	68db      	ldr	r3, [r3, #12]
 8013b1a:	899b      	ldrh	r3, [r3, #12]
 8013b1c:	b29c      	uxth	r4, r3
 8013b1e:	2008      	movs	r0, #8
 8013b20:	f7f9 fac8 	bl	800d0b4 <lwip_htons>
 8013b24:	4603      	mov	r3, r0
 8013b26:	461a      	mov	r2, r3
 8013b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b2a:	68db      	ldr	r3, [r3, #12]
 8013b2c:	4322      	orrs	r2, r4
 8013b2e:	b292      	uxth	r2, r2
 8013b30:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8013b32:	2300      	movs	r3, #0
 8013b34:	e031      	b.n	8013b9a <tcp_write+0x6b2>
          goto memerr;
 8013b36:	bf00      	nop
 8013b38:	e006      	b.n	8013b48 <tcp_write+0x660>
            goto memerr;
 8013b3a:	bf00      	nop
 8013b3c:	e004      	b.n	8013b48 <tcp_write+0x660>
        goto memerr;
 8013b3e:	bf00      	nop
 8013b40:	e002      	b.n	8013b48 <tcp_write+0x660>
        goto memerr;
 8013b42:	bf00      	nop
 8013b44:	e000      	b.n	8013b48 <tcp_write+0x660>
      goto memerr;
 8013b46:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	8b5b      	ldrh	r3, [r3, #26]
 8013b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b50:	b29a      	uxth	r2, r3
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8013b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d002      	beq.n	8013b62 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8013b5c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013b5e:	f7fa ff33 	bl	800e9c8 <pbuf_free>
  }
  if (queue != NULL) {
 8013b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d002      	beq.n	8013b6e <tcp_write+0x686>
    tcp_segs_free(queue);
 8013b68:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013b6a:	f7fc fb51 	bl	8010210 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d00e      	beq.n	8013b96 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d10a      	bne.n	8013b96 <tcp_write+0x6ae>
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d106      	bne.n	8013b96 <tcp_write+0x6ae>
 8013b88:	4b06      	ldr	r3, [pc, #24]	; (8013ba4 <tcp_write+0x6bc>)
 8013b8a:	f240 3227 	movw	r2, #807	; 0x327
 8013b8e:	4906      	ldr	r1, [pc, #24]	; (8013ba8 <tcp_write+0x6c0>)
 8013b90:	4806      	ldr	r0, [pc, #24]	; (8013bac <tcp_write+0x6c4>)
 8013b92:	f004 fb2d 	bl	80181f0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8013b96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	375c      	adds	r7, #92	; 0x5c
 8013b9e:	46bd      	mov	sp, r7
 8013ba0:	bd90      	pop	{r4, r7, pc}
 8013ba2:	bf00      	nop
 8013ba4:	0801c320 	.word	0x0801c320
 8013ba8:	0801c694 	.word	0x0801c694
 8013bac:	0801c374 	.word	0x0801c374

08013bb0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013bb0:	b590      	push	{r4, r7, lr}
 8013bb2:	b08b      	sub	sp, #44	; 0x2c
 8013bb4:	af02      	add	r7, sp, #8
 8013bb6:	6078      	str	r0, [r7, #4]
 8013bb8:	460b      	mov	r3, r1
 8013bba:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013bbc:	2300      	movs	r3, #0
 8013bbe:	61fb      	str	r3, [r7, #28]
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d106      	bne.n	8013bdc <tcp_split_unsent_seg+0x2c>
 8013bce:	4b95      	ldr	r3, [pc, #596]	; (8013e24 <tcp_split_unsent_seg+0x274>)
 8013bd0:	f240 324b 	movw	r2, #843	; 0x34b
 8013bd4:	4994      	ldr	r1, [pc, #592]	; (8013e28 <tcp_split_unsent_seg+0x278>)
 8013bd6:	4895      	ldr	r0, [pc, #596]	; (8013e2c <tcp_split_unsent_seg+0x27c>)
 8013bd8:	f004 fb0a 	bl	80181f0 <iprintf>

  useg = pcb->unsent;
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013be0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013be2:	697b      	ldr	r3, [r7, #20]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d102      	bne.n	8013bee <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013be8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013bec:	e116      	b.n	8013e1c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8013bee:	887b      	ldrh	r3, [r7, #2]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d109      	bne.n	8013c08 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013bf4:	4b8b      	ldr	r3, [pc, #556]	; (8013e24 <tcp_split_unsent_seg+0x274>)
 8013bf6:	f240 3253 	movw	r2, #851	; 0x353
 8013bfa:	498d      	ldr	r1, [pc, #564]	; (8013e30 <tcp_split_unsent_seg+0x280>)
 8013bfc:	488b      	ldr	r0, [pc, #556]	; (8013e2c <tcp_split_unsent_seg+0x27c>)
 8013bfe:	f004 faf7 	bl	80181f0 <iprintf>
    return ERR_VAL;
 8013c02:	f06f 0305 	mvn.w	r3, #5
 8013c06:	e109      	b.n	8013e1c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013c08:	697b      	ldr	r3, [r7, #20]
 8013c0a:	891b      	ldrh	r3, [r3, #8]
 8013c0c:	887a      	ldrh	r2, [r7, #2]
 8013c0e:	429a      	cmp	r2, r3
 8013c10:	d301      	bcc.n	8013c16 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013c12:	2300      	movs	r3, #0
 8013c14:	e102      	b.n	8013e1c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013c1a:	887a      	ldrh	r2, [r7, #2]
 8013c1c:	429a      	cmp	r2, r3
 8013c1e:	d906      	bls.n	8013c2e <tcp_split_unsent_seg+0x7e>
 8013c20:	4b80      	ldr	r3, [pc, #512]	; (8013e24 <tcp_split_unsent_seg+0x274>)
 8013c22:	f240 325b 	movw	r2, #859	; 0x35b
 8013c26:	4983      	ldr	r1, [pc, #524]	; (8013e34 <tcp_split_unsent_seg+0x284>)
 8013c28:	4880      	ldr	r0, [pc, #512]	; (8013e2c <tcp_split_unsent_seg+0x27c>)
 8013c2a:	f004 fae1 	bl	80181f0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013c2e:	697b      	ldr	r3, [r7, #20]
 8013c30:	891b      	ldrh	r3, [r3, #8]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d106      	bne.n	8013c44 <tcp_split_unsent_seg+0x94>
 8013c36:	4b7b      	ldr	r3, [pc, #492]	; (8013e24 <tcp_split_unsent_seg+0x274>)
 8013c38:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013c3c:	497e      	ldr	r1, [pc, #504]	; (8013e38 <tcp_split_unsent_seg+0x288>)
 8013c3e:	487b      	ldr	r0, [pc, #492]	; (8013e2c <tcp_split_unsent_seg+0x27c>)
 8013c40:	f004 fad6 	bl	80181f0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013c44:	697b      	ldr	r3, [r7, #20]
 8013c46:	7a9b      	ldrb	r3, [r3, #10]
 8013c48:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013c4a:	7bfb      	ldrb	r3, [r7, #15]
 8013c4c:	009b      	lsls	r3, r3, #2
 8013c4e:	b2db      	uxtb	r3, r3
 8013c50:	f003 0304 	and.w	r3, r3, #4
 8013c54:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013c56:	697b      	ldr	r3, [r7, #20]
 8013c58:	891a      	ldrh	r2, [r3, #8]
 8013c5a:	887b      	ldrh	r3, [r7, #2]
 8013c5c:	1ad3      	subs	r3, r2, r3
 8013c5e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013c60:	7bbb      	ldrb	r3, [r7, #14]
 8013c62:	b29a      	uxth	r2, r3
 8013c64:	89bb      	ldrh	r3, [r7, #12]
 8013c66:	4413      	add	r3, r2
 8013c68:	b29b      	uxth	r3, r3
 8013c6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013c6e:	4619      	mov	r1, r3
 8013c70:	2036      	movs	r0, #54	; 0x36
 8013c72:	f7fa fbc5 	bl	800e400 <pbuf_alloc>
 8013c76:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013c78:	693b      	ldr	r3, [r7, #16]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	f000 80b7 	beq.w	8013dee <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013c80:	697b      	ldr	r3, [r7, #20]
 8013c82:	685b      	ldr	r3, [r3, #4]
 8013c84:	891a      	ldrh	r2, [r3, #8]
 8013c86:	697b      	ldr	r3, [r7, #20]
 8013c88:	891b      	ldrh	r3, [r3, #8]
 8013c8a:	1ad3      	subs	r3, r2, r3
 8013c8c:	b29a      	uxth	r2, r3
 8013c8e:	887b      	ldrh	r3, [r7, #2]
 8013c90:	4413      	add	r3, r2
 8013c92:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013c94:	697b      	ldr	r3, [r7, #20]
 8013c96:	6858      	ldr	r0, [r3, #4]
 8013c98:	693b      	ldr	r3, [r7, #16]
 8013c9a:	685a      	ldr	r2, [r3, #4]
 8013c9c:	7bbb      	ldrb	r3, [r7, #14]
 8013c9e:	18d1      	adds	r1, r2, r3
 8013ca0:	897b      	ldrh	r3, [r7, #10]
 8013ca2:	89ba      	ldrh	r2, [r7, #12]
 8013ca4:	f7fb f886 	bl	800edb4 <pbuf_copy_partial>
 8013ca8:	4603      	mov	r3, r0
 8013caa:	461a      	mov	r2, r3
 8013cac:	89bb      	ldrh	r3, [r7, #12]
 8013cae:	4293      	cmp	r3, r2
 8013cb0:	f040 809f 	bne.w	8013df2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013cb4:	697b      	ldr	r3, [r7, #20]
 8013cb6:	68db      	ldr	r3, [r3, #12]
 8013cb8:	899b      	ldrh	r3, [r3, #12]
 8013cba:	b29b      	uxth	r3, r3
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	f7f9 f9f9 	bl	800d0b4 <lwip_htons>
 8013cc2:	4603      	mov	r3, r0
 8013cc4:	b2db      	uxtb	r3, r3
 8013cc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013cca:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013ccc:	2300      	movs	r3, #0
 8013cce:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013cd0:	7efb      	ldrb	r3, [r7, #27]
 8013cd2:	f003 0308 	and.w	r3, r3, #8
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d007      	beq.n	8013cea <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013cda:	7efb      	ldrb	r3, [r7, #27]
 8013cdc:	f023 0308 	bic.w	r3, r3, #8
 8013ce0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013ce2:	7ebb      	ldrb	r3, [r7, #26]
 8013ce4:	f043 0308 	orr.w	r3, r3, #8
 8013ce8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8013cea:	7efb      	ldrb	r3, [r7, #27]
 8013cec:	f003 0301 	and.w	r3, r3, #1
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d007      	beq.n	8013d04 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013cf4:	7efb      	ldrb	r3, [r7, #27]
 8013cf6:	f023 0301 	bic.w	r3, r3, #1
 8013cfa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013cfc:	7ebb      	ldrb	r3, [r7, #26]
 8013cfe:	f043 0301 	orr.w	r3, r3, #1
 8013d02:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013d04:	697b      	ldr	r3, [r7, #20]
 8013d06:	68db      	ldr	r3, [r3, #12]
 8013d08:	685b      	ldr	r3, [r3, #4]
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	f7f9 f9e7 	bl	800d0de <lwip_htonl>
 8013d10:	4602      	mov	r2, r0
 8013d12:	887b      	ldrh	r3, [r7, #2]
 8013d14:	18d1      	adds	r1, r2, r3
 8013d16:	7eba      	ldrb	r2, [r7, #26]
 8013d18:	7bfb      	ldrb	r3, [r7, #15]
 8013d1a:	9300      	str	r3, [sp, #0]
 8013d1c:	460b      	mov	r3, r1
 8013d1e:	6939      	ldr	r1, [r7, #16]
 8013d20:	6878      	ldr	r0, [r7, #4]
 8013d22:	f7ff fa4f 	bl	80131c4 <tcp_create_segment>
 8013d26:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013d28:	69fb      	ldr	r3, [r7, #28]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d063      	beq.n	8013df6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013d2e:	697b      	ldr	r3, [r7, #20]
 8013d30:	685b      	ldr	r3, [r3, #4]
 8013d32:	4618      	mov	r0, r3
 8013d34:	f7fa fed6 	bl	800eae4 <pbuf_clen>
 8013d38:	4603      	mov	r3, r0
 8013d3a:	461a      	mov	r2, r3
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013d42:	1a9b      	subs	r3, r3, r2
 8013d44:	b29a      	uxth	r2, r3
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013d4c:	697b      	ldr	r3, [r7, #20]
 8013d4e:	6858      	ldr	r0, [r3, #4]
 8013d50:	697b      	ldr	r3, [r7, #20]
 8013d52:	685b      	ldr	r3, [r3, #4]
 8013d54:	891a      	ldrh	r2, [r3, #8]
 8013d56:	89bb      	ldrh	r3, [r7, #12]
 8013d58:	1ad3      	subs	r3, r2, r3
 8013d5a:	b29b      	uxth	r3, r3
 8013d5c:	4619      	mov	r1, r3
 8013d5e:	f7fa fcad 	bl	800e6bc <pbuf_realloc>
  useg->len -= remainder;
 8013d62:	697b      	ldr	r3, [r7, #20]
 8013d64:	891a      	ldrh	r2, [r3, #8]
 8013d66:	89bb      	ldrh	r3, [r7, #12]
 8013d68:	1ad3      	subs	r3, r2, r3
 8013d6a:	b29a      	uxth	r2, r3
 8013d6c:	697b      	ldr	r3, [r7, #20]
 8013d6e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013d70:	697b      	ldr	r3, [r7, #20]
 8013d72:	68db      	ldr	r3, [r3, #12]
 8013d74:	899b      	ldrh	r3, [r3, #12]
 8013d76:	b29c      	uxth	r4, r3
 8013d78:	7efb      	ldrb	r3, [r7, #27]
 8013d7a:	b29b      	uxth	r3, r3
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	f7f9 f999 	bl	800d0b4 <lwip_htons>
 8013d82:	4603      	mov	r3, r0
 8013d84:	461a      	mov	r2, r3
 8013d86:	697b      	ldr	r3, [r7, #20]
 8013d88:	68db      	ldr	r3, [r3, #12]
 8013d8a:	4322      	orrs	r2, r4
 8013d8c:	b292      	uxth	r2, r2
 8013d8e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013d90:	697b      	ldr	r3, [r7, #20]
 8013d92:	685b      	ldr	r3, [r3, #4]
 8013d94:	4618      	mov	r0, r3
 8013d96:	f7fa fea5 	bl	800eae4 <pbuf_clen>
 8013d9a:	4603      	mov	r3, r0
 8013d9c:	461a      	mov	r2, r3
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013da4:	4413      	add	r3, r2
 8013da6:	b29a      	uxth	r2, r3
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013dae:	69fb      	ldr	r3, [r7, #28]
 8013db0:	685b      	ldr	r3, [r3, #4]
 8013db2:	4618      	mov	r0, r3
 8013db4:	f7fa fe96 	bl	800eae4 <pbuf_clen>
 8013db8:	4603      	mov	r3, r0
 8013dba:	461a      	mov	r2, r3
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013dc2:	4413      	add	r3, r2
 8013dc4:	b29a      	uxth	r2, r3
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013dcc:	697b      	ldr	r3, [r7, #20]
 8013dce:	681a      	ldr	r2, [r3, #0]
 8013dd0:	69fb      	ldr	r3, [r7, #28]
 8013dd2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013dd4:	697b      	ldr	r3, [r7, #20]
 8013dd6:	69fa      	ldr	r2, [r7, #28]
 8013dd8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013dda:	69fb      	ldr	r3, [r7, #28]
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d103      	bne.n	8013dea <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	2200      	movs	r2, #0
 8013de6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013dea:	2300      	movs	r3, #0
 8013dec:	e016      	b.n	8013e1c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013dee:	bf00      	nop
 8013df0:	e002      	b.n	8013df8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013df2:	bf00      	nop
 8013df4:	e000      	b.n	8013df8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013df6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013df8:	69fb      	ldr	r3, [r7, #28]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d006      	beq.n	8013e0c <tcp_split_unsent_seg+0x25c>
 8013dfe:	4b09      	ldr	r3, [pc, #36]	; (8013e24 <tcp_split_unsent_seg+0x274>)
 8013e00:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013e04:	490d      	ldr	r1, [pc, #52]	; (8013e3c <tcp_split_unsent_seg+0x28c>)
 8013e06:	4809      	ldr	r0, [pc, #36]	; (8013e2c <tcp_split_unsent_seg+0x27c>)
 8013e08:	f004 f9f2 	bl	80181f0 <iprintf>
  if (p != NULL) {
 8013e0c:	693b      	ldr	r3, [r7, #16]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d002      	beq.n	8013e18 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013e12:	6938      	ldr	r0, [r7, #16]
 8013e14:	f7fa fdd8 	bl	800e9c8 <pbuf_free>
  }

  return ERR_MEM;
 8013e18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	3724      	adds	r7, #36	; 0x24
 8013e20:	46bd      	mov	sp, r7
 8013e22:	bd90      	pop	{r4, r7, pc}
 8013e24:	0801c320 	.word	0x0801c320
 8013e28:	0801c6b4 	.word	0x0801c6b4
 8013e2c:	0801c374 	.word	0x0801c374
 8013e30:	0801c6d8 	.word	0x0801c6d8
 8013e34:	0801c6fc 	.word	0x0801c6fc
 8013e38:	0801c70c 	.word	0x0801c70c
 8013e3c:	0801c71c 	.word	0x0801c71c

08013e40 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013e40:	b590      	push	{r4, r7, lr}
 8013e42:	b085      	sub	sp, #20
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d106      	bne.n	8013e5c <tcp_send_fin+0x1c>
 8013e4e:	4b21      	ldr	r3, [pc, #132]	; (8013ed4 <tcp_send_fin+0x94>)
 8013e50:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013e54:	4920      	ldr	r1, [pc, #128]	; (8013ed8 <tcp_send_fin+0x98>)
 8013e56:	4821      	ldr	r0, [pc, #132]	; (8013edc <tcp_send_fin+0x9c>)
 8013e58:	f004 f9ca 	bl	80181f0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d02e      	beq.n	8013ec2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e68:	60fb      	str	r3, [r7, #12]
 8013e6a:	e002      	b.n	8013e72 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	681b      	ldr	r3, [r3, #0]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d1f8      	bne.n	8013e6c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	68db      	ldr	r3, [r3, #12]
 8013e7e:	899b      	ldrh	r3, [r3, #12]
 8013e80:	b29b      	uxth	r3, r3
 8013e82:	4618      	mov	r0, r3
 8013e84:	f7f9 f916 	bl	800d0b4 <lwip_htons>
 8013e88:	4603      	mov	r3, r0
 8013e8a:	b2db      	uxtb	r3, r3
 8013e8c:	f003 0307 	and.w	r3, r3, #7
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d116      	bne.n	8013ec2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	68db      	ldr	r3, [r3, #12]
 8013e98:	899b      	ldrh	r3, [r3, #12]
 8013e9a:	b29c      	uxth	r4, r3
 8013e9c:	2001      	movs	r0, #1
 8013e9e:	f7f9 f909 	bl	800d0b4 <lwip_htons>
 8013ea2:	4603      	mov	r3, r0
 8013ea4:	461a      	mov	r2, r3
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	68db      	ldr	r3, [r3, #12]
 8013eaa:	4322      	orrs	r2, r4
 8013eac:	b292      	uxth	r2, r2
 8013eae:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	8b5b      	ldrh	r3, [r3, #26]
 8013eb4:	f043 0320 	orr.w	r3, r3, #32
 8013eb8:	b29a      	uxth	r2, r3
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	e004      	b.n	8013ecc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013ec2:	2101      	movs	r1, #1
 8013ec4:	6878      	ldr	r0, [r7, #4]
 8013ec6:	f000 f80b 	bl	8013ee0 <tcp_enqueue_flags>
 8013eca:	4603      	mov	r3, r0
}
 8013ecc:	4618      	mov	r0, r3
 8013ece:	3714      	adds	r7, #20
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	bd90      	pop	{r4, r7, pc}
 8013ed4:	0801c320 	.word	0x0801c320
 8013ed8:	0801c728 	.word	0x0801c728
 8013edc:	0801c374 	.word	0x0801c374

08013ee0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b08a      	sub	sp, #40	; 0x28
 8013ee4:	af02      	add	r7, sp, #8
 8013ee6:	6078      	str	r0, [r7, #4]
 8013ee8:	460b      	mov	r3, r1
 8013eea:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013eec:	2300      	movs	r3, #0
 8013eee:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013ef0:	2300      	movs	r3, #0
 8013ef2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013ef4:	78fb      	ldrb	r3, [r7, #3]
 8013ef6:	f003 0303 	and.w	r3, r3, #3
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d106      	bne.n	8013f0c <tcp_enqueue_flags+0x2c>
 8013efe:	4b67      	ldr	r3, [pc, #412]	; (801409c <tcp_enqueue_flags+0x1bc>)
 8013f00:	f240 4211 	movw	r2, #1041	; 0x411
 8013f04:	4966      	ldr	r1, [pc, #408]	; (80140a0 <tcp_enqueue_flags+0x1c0>)
 8013f06:	4867      	ldr	r0, [pc, #412]	; (80140a4 <tcp_enqueue_flags+0x1c4>)
 8013f08:	f004 f972 	bl	80181f0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d106      	bne.n	8013f20 <tcp_enqueue_flags+0x40>
 8013f12:	4b62      	ldr	r3, [pc, #392]	; (801409c <tcp_enqueue_flags+0x1bc>)
 8013f14:	f240 4213 	movw	r2, #1043	; 0x413
 8013f18:	4963      	ldr	r1, [pc, #396]	; (80140a8 <tcp_enqueue_flags+0x1c8>)
 8013f1a:	4862      	ldr	r0, [pc, #392]	; (80140a4 <tcp_enqueue_flags+0x1c4>)
 8013f1c:	f004 f968 	bl	80181f0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013f20:	78fb      	ldrb	r3, [r7, #3]
 8013f22:	f003 0302 	and.w	r3, r3, #2
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d001      	beq.n	8013f2e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013f2a:	2301      	movs	r3, #1
 8013f2c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013f2e:	7ffb      	ldrb	r3, [r7, #31]
 8013f30:	009b      	lsls	r3, r3, #2
 8013f32:	b2db      	uxtb	r3, r3
 8013f34:	f003 0304 	and.w	r3, r3, #4
 8013f38:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013f3a:	7dfb      	ldrb	r3, [r7, #23]
 8013f3c:	b29b      	uxth	r3, r3
 8013f3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013f42:	4619      	mov	r1, r3
 8013f44:	2036      	movs	r0, #54	; 0x36
 8013f46:	f7fa fa5b 	bl	800e400 <pbuf_alloc>
 8013f4a:	6138      	str	r0, [r7, #16]
 8013f4c:	693b      	ldr	r3, [r7, #16]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d109      	bne.n	8013f66 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	8b5b      	ldrh	r3, [r3, #26]
 8013f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f5a:	b29a      	uxth	r2, r3
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013f60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013f64:	e095      	b.n	8014092 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013f66:	693b      	ldr	r3, [r7, #16]
 8013f68:	895a      	ldrh	r2, [r3, #10]
 8013f6a:	7dfb      	ldrb	r3, [r7, #23]
 8013f6c:	b29b      	uxth	r3, r3
 8013f6e:	429a      	cmp	r2, r3
 8013f70:	d206      	bcs.n	8013f80 <tcp_enqueue_flags+0xa0>
 8013f72:	4b4a      	ldr	r3, [pc, #296]	; (801409c <tcp_enqueue_flags+0x1bc>)
 8013f74:	f240 4239 	movw	r2, #1081	; 0x439
 8013f78:	494c      	ldr	r1, [pc, #304]	; (80140ac <tcp_enqueue_flags+0x1cc>)
 8013f7a:	484a      	ldr	r0, [pc, #296]	; (80140a4 <tcp_enqueue_flags+0x1c4>)
 8013f7c:	f004 f938 	bl	80181f0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013f84:	78fa      	ldrb	r2, [r7, #3]
 8013f86:	7ffb      	ldrb	r3, [r7, #31]
 8013f88:	9300      	str	r3, [sp, #0]
 8013f8a:	460b      	mov	r3, r1
 8013f8c:	6939      	ldr	r1, [r7, #16]
 8013f8e:	6878      	ldr	r0, [r7, #4]
 8013f90:	f7ff f918 	bl	80131c4 <tcp_create_segment>
 8013f94:	60f8      	str	r0, [r7, #12]
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d109      	bne.n	8013fb0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	8b5b      	ldrh	r3, [r3, #26]
 8013fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013fa4:	b29a      	uxth	r2, r3
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013fae:	e070      	b.n	8014092 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	68db      	ldr	r3, [r3, #12]
 8013fb4:	f003 0303 	and.w	r3, r3, #3
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d006      	beq.n	8013fca <tcp_enqueue_flags+0xea>
 8013fbc:	4b37      	ldr	r3, [pc, #220]	; (801409c <tcp_enqueue_flags+0x1bc>)
 8013fbe:	f240 4242 	movw	r2, #1090	; 0x442
 8013fc2:	493b      	ldr	r1, [pc, #236]	; (80140b0 <tcp_enqueue_flags+0x1d0>)
 8013fc4:	4837      	ldr	r0, [pc, #220]	; (80140a4 <tcp_enqueue_flags+0x1c4>)
 8013fc6:	f004 f913 	bl	80181f0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	891b      	ldrh	r3, [r3, #8]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d006      	beq.n	8013fe0 <tcp_enqueue_flags+0x100>
 8013fd2:	4b32      	ldr	r3, [pc, #200]	; (801409c <tcp_enqueue_flags+0x1bc>)
 8013fd4:	f240 4243 	movw	r2, #1091	; 0x443
 8013fd8:	4936      	ldr	r1, [pc, #216]	; (80140b4 <tcp_enqueue_flags+0x1d4>)
 8013fda:	4832      	ldr	r0, [pc, #200]	; (80140a4 <tcp_enqueue_flags+0x1c4>)
 8013fdc:	f004 f908 	bl	80181f0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d103      	bne.n	8013ff0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	68fa      	ldr	r2, [r7, #12]
 8013fec:	66da      	str	r2, [r3, #108]	; 0x6c
 8013fee:	e00d      	b.n	801400c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ff4:	61bb      	str	r3, [r7, #24]
 8013ff6:	e002      	b.n	8013ffe <tcp_enqueue_flags+0x11e>
 8013ff8:	69bb      	ldr	r3, [r7, #24]
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	61bb      	str	r3, [r7, #24]
 8013ffe:	69bb      	ldr	r3, [r7, #24]
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d1f8      	bne.n	8013ff8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8014006:	69bb      	ldr	r3, [r7, #24]
 8014008:	68fa      	ldr	r2, [r7, #12]
 801400a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	2200      	movs	r2, #0
 8014010:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014014:	78fb      	ldrb	r3, [r7, #3]
 8014016:	f003 0302 	and.w	r3, r3, #2
 801401a:	2b00      	cmp	r3, #0
 801401c:	d104      	bne.n	8014028 <tcp_enqueue_flags+0x148>
 801401e:	78fb      	ldrb	r3, [r7, #3]
 8014020:	f003 0301 	and.w	r3, r3, #1
 8014024:	2b00      	cmp	r3, #0
 8014026:	d004      	beq.n	8014032 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801402c:	1c5a      	adds	r2, r3, #1
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8014032:	78fb      	ldrb	r3, [r7, #3]
 8014034:	f003 0301 	and.w	r3, r3, #1
 8014038:	2b00      	cmp	r3, #0
 801403a:	d006      	beq.n	801404a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	8b5b      	ldrh	r3, [r3, #26]
 8014040:	f043 0320 	orr.w	r3, r3, #32
 8014044:	b29a      	uxth	r2, r3
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	685b      	ldr	r3, [r3, #4]
 801404e:	4618      	mov	r0, r3
 8014050:	f7fa fd48 	bl	800eae4 <pbuf_clen>
 8014054:	4603      	mov	r3, r0
 8014056:	461a      	mov	r2, r3
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801405e:	4413      	add	r3, r2
 8014060:	b29a      	uxth	r2, r3
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801406e:	2b00      	cmp	r3, #0
 8014070:	d00e      	beq.n	8014090 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014076:	2b00      	cmp	r3, #0
 8014078:	d10a      	bne.n	8014090 <tcp_enqueue_flags+0x1b0>
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801407e:	2b00      	cmp	r3, #0
 8014080:	d106      	bne.n	8014090 <tcp_enqueue_flags+0x1b0>
 8014082:	4b06      	ldr	r3, [pc, #24]	; (801409c <tcp_enqueue_flags+0x1bc>)
 8014084:	f240 4265 	movw	r2, #1125	; 0x465
 8014088:	490b      	ldr	r1, [pc, #44]	; (80140b8 <tcp_enqueue_flags+0x1d8>)
 801408a:	4806      	ldr	r0, [pc, #24]	; (80140a4 <tcp_enqueue_flags+0x1c4>)
 801408c:	f004 f8b0 	bl	80181f0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014090:	2300      	movs	r3, #0
}
 8014092:	4618      	mov	r0, r3
 8014094:	3720      	adds	r7, #32
 8014096:	46bd      	mov	sp, r7
 8014098:	bd80      	pop	{r7, pc}
 801409a:	bf00      	nop
 801409c:	0801c320 	.word	0x0801c320
 80140a0:	0801c744 	.word	0x0801c744
 80140a4:	0801c374 	.word	0x0801c374
 80140a8:	0801c79c 	.word	0x0801c79c
 80140ac:	0801c7bc 	.word	0x0801c7bc
 80140b0:	0801c7f8 	.word	0x0801c7f8
 80140b4:	0801c810 	.word	0x0801c810
 80140b8:	0801c83c 	.word	0x0801c83c

080140bc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80140bc:	b5b0      	push	{r4, r5, r7, lr}
 80140be:	b08a      	sub	sp, #40	; 0x28
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d106      	bne.n	80140d8 <tcp_output+0x1c>
 80140ca:	4b9e      	ldr	r3, [pc, #632]	; (8014344 <tcp_output+0x288>)
 80140cc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80140d0:	499d      	ldr	r1, [pc, #628]	; (8014348 <tcp_output+0x28c>)
 80140d2:	489e      	ldr	r0, [pc, #632]	; (801434c <tcp_output+0x290>)
 80140d4:	f004 f88c 	bl	80181f0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	7d1b      	ldrb	r3, [r3, #20]
 80140dc:	2b01      	cmp	r3, #1
 80140de:	d106      	bne.n	80140ee <tcp_output+0x32>
 80140e0:	4b98      	ldr	r3, [pc, #608]	; (8014344 <tcp_output+0x288>)
 80140e2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80140e6:	499a      	ldr	r1, [pc, #616]	; (8014350 <tcp_output+0x294>)
 80140e8:	4898      	ldr	r0, [pc, #608]	; (801434c <tcp_output+0x290>)
 80140ea:	f004 f881 	bl	80181f0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80140ee:	4b99      	ldr	r3, [pc, #612]	; (8014354 <tcp_output+0x298>)
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	687a      	ldr	r2, [r7, #4]
 80140f4:	429a      	cmp	r2, r3
 80140f6:	d101      	bne.n	80140fc <tcp_output+0x40>
    return ERR_OK;
 80140f8:	2300      	movs	r3, #0
 80140fa:	e1ce      	b.n	801449a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014108:	4293      	cmp	r3, r2
 801410a:	bf28      	it	cs
 801410c:	4613      	movcs	r3, r2
 801410e:	b29b      	uxth	r3, r3
 8014110:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014116:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8014118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801411a:	2b00      	cmp	r3, #0
 801411c:	d10b      	bne.n	8014136 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	8b5b      	ldrh	r3, [r3, #26]
 8014122:	f003 0302 	and.w	r3, r3, #2
 8014126:	2b00      	cmp	r3, #0
 8014128:	f000 81aa 	beq.w	8014480 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801412c:	6878      	ldr	r0, [r7, #4]
 801412e:	f000 fdcb 	bl	8014cc8 <tcp_send_empty_ack>
 8014132:	4603      	mov	r3, r0
 8014134:	e1b1      	b.n	801449a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014136:	6879      	ldr	r1, [r7, #4]
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	3304      	adds	r3, #4
 801413c:	461a      	mov	r2, r3
 801413e:	6878      	ldr	r0, [r7, #4]
 8014140:	f7ff f824 	bl	801318c <tcp_route>
 8014144:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014146:	697b      	ldr	r3, [r7, #20]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d102      	bne.n	8014152 <tcp_output+0x96>
    return ERR_RTE;
 801414c:	f06f 0303 	mvn.w	r3, #3
 8014150:	e1a3      	b.n	801449a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	2b00      	cmp	r3, #0
 8014156:	d003      	beq.n	8014160 <tcp_output+0xa4>
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	2b00      	cmp	r3, #0
 801415e:	d111      	bne.n	8014184 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014160:	697b      	ldr	r3, [r7, #20]
 8014162:	2b00      	cmp	r3, #0
 8014164:	d002      	beq.n	801416c <tcp_output+0xb0>
 8014166:	697b      	ldr	r3, [r7, #20]
 8014168:	3304      	adds	r3, #4
 801416a:	e000      	b.n	801416e <tcp_output+0xb2>
 801416c:	2300      	movs	r3, #0
 801416e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014170:	693b      	ldr	r3, [r7, #16]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d102      	bne.n	801417c <tcp_output+0xc0>
      return ERR_RTE;
 8014176:	f06f 0303 	mvn.w	r3, #3
 801417a:	e18e      	b.n	801449a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801417c:	693b      	ldr	r3, [r7, #16]
 801417e:	681a      	ldr	r2, [r3, #0]
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014186:	68db      	ldr	r3, [r3, #12]
 8014188:	685b      	ldr	r3, [r3, #4]
 801418a:	4618      	mov	r0, r3
 801418c:	f7f8 ffa7 	bl	800d0de <lwip_htonl>
 8014190:	4602      	mov	r2, r0
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014196:	1ad3      	subs	r3, r2, r3
 8014198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801419a:	8912      	ldrh	r2, [r2, #8]
 801419c:	4413      	add	r3, r2
 801419e:	69ba      	ldr	r2, [r7, #24]
 80141a0:	429a      	cmp	r2, r3
 80141a2:	d227      	bcs.n	80141f4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80141aa:	461a      	mov	r2, r3
 80141ac:	69bb      	ldr	r3, [r7, #24]
 80141ae:	4293      	cmp	r3, r2
 80141b0:	d114      	bne.n	80141dc <tcp_output+0x120>
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d110      	bne.n	80141dc <tcp_output+0x120>
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d10b      	bne.n	80141dc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	2200      	movs	r2, #0
 80141c8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	2201      	movs	r2, #1
 80141d0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	2200      	movs	r2, #0
 80141d8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	8b5b      	ldrh	r3, [r3, #26]
 80141e0:	f003 0302 	and.w	r3, r3, #2
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	f000 814d 	beq.w	8014484 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80141ea:	6878      	ldr	r0, [r7, #4]
 80141ec:	f000 fd6c 	bl	8014cc8 <tcp_send_empty_ack>
 80141f0:	4603      	mov	r3, r0
 80141f2:	e152      	b.n	801449a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	2200      	movs	r2, #0
 80141f8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014200:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014202:	6a3b      	ldr	r3, [r7, #32]
 8014204:	2b00      	cmp	r3, #0
 8014206:	f000 811c 	beq.w	8014442 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801420a:	e002      	b.n	8014212 <tcp_output+0x156>
 801420c:	6a3b      	ldr	r3, [r7, #32]
 801420e:	681b      	ldr	r3, [r3, #0]
 8014210:	623b      	str	r3, [r7, #32]
 8014212:	6a3b      	ldr	r3, [r7, #32]
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d1f8      	bne.n	801420c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801421a:	e112      	b.n	8014442 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801421e:	68db      	ldr	r3, [r3, #12]
 8014220:	899b      	ldrh	r3, [r3, #12]
 8014222:	b29b      	uxth	r3, r3
 8014224:	4618      	mov	r0, r3
 8014226:	f7f8 ff45 	bl	800d0b4 <lwip_htons>
 801422a:	4603      	mov	r3, r0
 801422c:	b2db      	uxtb	r3, r3
 801422e:	f003 0304 	and.w	r3, r3, #4
 8014232:	2b00      	cmp	r3, #0
 8014234:	d006      	beq.n	8014244 <tcp_output+0x188>
 8014236:	4b43      	ldr	r3, [pc, #268]	; (8014344 <tcp_output+0x288>)
 8014238:	f240 5236 	movw	r2, #1334	; 0x536
 801423c:	4946      	ldr	r1, [pc, #280]	; (8014358 <tcp_output+0x29c>)
 801423e:	4843      	ldr	r0, [pc, #268]	; (801434c <tcp_output+0x290>)
 8014240:	f003 ffd6 	bl	80181f0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014248:	2b00      	cmp	r3, #0
 801424a:	d01f      	beq.n	801428c <tcp_output+0x1d0>
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	8b5b      	ldrh	r3, [r3, #26]
 8014250:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014254:	2b00      	cmp	r3, #0
 8014256:	d119      	bne.n	801428c <tcp_output+0x1d0>
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801425c:	2b00      	cmp	r3, #0
 801425e:	d00b      	beq.n	8014278 <tcp_output+0x1bc>
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d110      	bne.n	801428c <tcp_output+0x1d0>
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801426e:	891a      	ldrh	r2, [r3, #8]
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014274:	429a      	cmp	r2, r3
 8014276:	d209      	bcs.n	801428c <tcp_output+0x1d0>
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801427e:	2b00      	cmp	r3, #0
 8014280:	d004      	beq.n	801428c <tcp_output+0x1d0>
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014288:	2b08      	cmp	r3, #8
 801428a:	d901      	bls.n	8014290 <tcp_output+0x1d4>
 801428c:	2301      	movs	r3, #1
 801428e:	e000      	b.n	8014292 <tcp_output+0x1d6>
 8014290:	2300      	movs	r3, #0
 8014292:	2b00      	cmp	r3, #0
 8014294:	d106      	bne.n	80142a4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	8b5b      	ldrh	r3, [r3, #26]
 801429a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801429e:	2b00      	cmp	r3, #0
 80142a0:	f000 80e4 	beq.w	801446c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	7d1b      	ldrb	r3, [r3, #20]
 80142a8:	2b02      	cmp	r3, #2
 80142aa:	d00d      	beq.n	80142c8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80142ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ae:	68db      	ldr	r3, [r3, #12]
 80142b0:	899b      	ldrh	r3, [r3, #12]
 80142b2:	b29c      	uxth	r4, r3
 80142b4:	2010      	movs	r0, #16
 80142b6:	f7f8 fefd 	bl	800d0b4 <lwip_htons>
 80142ba:	4603      	mov	r3, r0
 80142bc:	461a      	mov	r2, r3
 80142be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142c0:	68db      	ldr	r3, [r3, #12]
 80142c2:	4322      	orrs	r2, r4
 80142c4:	b292      	uxth	r2, r2
 80142c6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80142c8:	697a      	ldr	r2, [r7, #20]
 80142ca:	6879      	ldr	r1, [r7, #4]
 80142cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80142ce:	f000 f909 	bl	80144e4 <tcp_output_segment>
 80142d2:	4603      	mov	r3, r0
 80142d4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80142d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d009      	beq.n	80142f2 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	8b5b      	ldrh	r3, [r3, #26]
 80142e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80142e6:	b29a      	uxth	r2, r3
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	835a      	strh	r2, [r3, #26]
      return err;
 80142ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80142f0:	e0d3      	b.n	801449a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80142f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142f4:	681a      	ldr	r2, [r3, #0]
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	7d1b      	ldrb	r3, [r3, #20]
 80142fe:	2b02      	cmp	r3, #2
 8014300:	d006      	beq.n	8014310 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	8b5b      	ldrh	r3, [r3, #26]
 8014306:	f023 0303 	bic.w	r3, r3, #3
 801430a:	b29a      	uxth	r2, r3
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014312:	68db      	ldr	r3, [r3, #12]
 8014314:	685b      	ldr	r3, [r3, #4]
 8014316:	4618      	mov	r0, r3
 8014318:	f7f8 fee1 	bl	800d0de <lwip_htonl>
 801431c:	4604      	mov	r4, r0
 801431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014320:	891b      	ldrh	r3, [r3, #8]
 8014322:	461d      	mov	r5, r3
 8014324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014326:	68db      	ldr	r3, [r3, #12]
 8014328:	899b      	ldrh	r3, [r3, #12]
 801432a:	b29b      	uxth	r3, r3
 801432c:	4618      	mov	r0, r3
 801432e:	f7f8 fec1 	bl	800d0b4 <lwip_htons>
 8014332:	4603      	mov	r3, r0
 8014334:	b2db      	uxtb	r3, r3
 8014336:	f003 0303 	and.w	r3, r3, #3
 801433a:	2b00      	cmp	r3, #0
 801433c:	d00e      	beq.n	801435c <tcp_output+0x2a0>
 801433e:	2301      	movs	r3, #1
 8014340:	e00d      	b.n	801435e <tcp_output+0x2a2>
 8014342:	bf00      	nop
 8014344:	0801c320 	.word	0x0801c320
 8014348:	0801c864 	.word	0x0801c864
 801434c:	0801c374 	.word	0x0801c374
 8014350:	0801c87c 	.word	0x0801c87c
 8014354:	20018bb8 	.word	0x20018bb8
 8014358:	0801c8a4 	.word	0x0801c8a4
 801435c:	2300      	movs	r3, #0
 801435e:	442b      	add	r3, r5
 8014360:	4423      	add	r3, r4
 8014362:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014368:	68bb      	ldr	r3, [r7, #8]
 801436a:	1ad3      	subs	r3, r2, r3
 801436c:	2b00      	cmp	r3, #0
 801436e:	da02      	bge.n	8014376 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	68ba      	ldr	r2, [r7, #8]
 8014374:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014378:	891b      	ldrh	r3, [r3, #8]
 801437a:	461c      	mov	r4, r3
 801437c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801437e:	68db      	ldr	r3, [r3, #12]
 8014380:	899b      	ldrh	r3, [r3, #12]
 8014382:	b29b      	uxth	r3, r3
 8014384:	4618      	mov	r0, r3
 8014386:	f7f8 fe95 	bl	800d0b4 <lwip_htons>
 801438a:	4603      	mov	r3, r0
 801438c:	b2db      	uxtb	r3, r3
 801438e:	f003 0303 	and.w	r3, r3, #3
 8014392:	2b00      	cmp	r3, #0
 8014394:	d001      	beq.n	801439a <tcp_output+0x2de>
 8014396:	2301      	movs	r3, #1
 8014398:	e000      	b.n	801439c <tcp_output+0x2e0>
 801439a:	2300      	movs	r3, #0
 801439c:	4423      	add	r3, r4
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d049      	beq.n	8014436 <tcp_output+0x37a>
      seg->next = NULL;
 80143a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143a4:	2200      	movs	r2, #0
 80143a6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d105      	bne.n	80143bc <tcp_output+0x300>
        pcb->unacked = seg;
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80143b4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80143b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143b8:	623b      	str	r3, [r7, #32]
 80143ba:	e03f      	b.n	801443c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80143bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143be:	68db      	ldr	r3, [r3, #12]
 80143c0:	685b      	ldr	r3, [r3, #4]
 80143c2:	4618      	mov	r0, r3
 80143c4:	f7f8 fe8b 	bl	800d0de <lwip_htonl>
 80143c8:	4604      	mov	r4, r0
 80143ca:	6a3b      	ldr	r3, [r7, #32]
 80143cc:	68db      	ldr	r3, [r3, #12]
 80143ce:	685b      	ldr	r3, [r3, #4]
 80143d0:	4618      	mov	r0, r3
 80143d2:	f7f8 fe84 	bl	800d0de <lwip_htonl>
 80143d6:	4603      	mov	r3, r0
 80143d8:	1ae3      	subs	r3, r4, r3
 80143da:	2b00      	cmp	r3, #0
 80143dc:	da24      	bge.n	8014428 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	3370      	adds	r3, #112	; 0x70
 80143e2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80143e4:	e002      	b.n	80143ec <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80143e6:	69fb      	ldr	r3, [r7, #28]
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80143ec:	69fb      	ldr	r3, [r7, #28]
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d011      	beq.n	8014418 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80143f4:	69fb      	ldr	r3, [r7, #28]
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	68db      	ldr	r3, [r3, #12]
 80143fa:	685b      	ldr	r3, [r3, #4]
 80143fc:	4618      	mov	r0, r3
 80143fe:	f7f8 fe6e 	bl	800d0de <lwip_htonl>
 8014402:	4604      	mov	r4, r0
 8014404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014406:	68db      	ldr	r3, [r3, #12]
 8014408:	685b      	ldr	r3, [r3, #4]
 801440a:	4618      	mov	r0, r3
 801440c:	f7f8 fe67 	bl	800d0de <lwip_htonl>
 8014410:	4603      	mov	r3, r0
 8014412:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014414:	2b00      	cmp	r3, #0
 8014416:	dbe6      	blt.n	80143e6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014418:	69fb      	ldr	r3, [r7, #28]
 801441a:	681a      	ldr	r2, [r3, #0]
 801441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801441e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014420:	69fb      	ldr	r3, [r7, #28]
 8014422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014424:	601a      	str	r2, [r3, #0]
 8014426:	e009      	b.n	801443c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014428:	6a3b      	ldr	r3, [r7, #32]
 801442a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801442c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801442e:	6a3b      	ldr	r3, [r7, #32]
 8014430:	681b      	ldr	r3, [r3, #0]
 8014432:	623b      	str	r3, [r7, #32]
 8014434:	e002      	b.n	801443c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014436:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014438:	f7fb feff 	bl	801023a <tcp_seg_free>
    }
    seg = pcb->unsent;
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014440:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014444:	2b00      	cmp	r3, #0
 8014446:	d012      	beq.n	801446e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801444a:	68db      	ldr	r3, [r3, #12]
 801444c:	685b      	ldr	r3, [r3, #4]
 801444e:	4618      	mov	r0, r3
 8014450:	f7f8 fe45 	bl	800d0de <lwip_htonl>
 8014454:	4602      	mov	r2, r0
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801445a:	1ad3      	subs	r3, r2, r3
 801445c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801445e:	8912      	ldrh	r2, [r2, #8]
 8014460:	4413      	add	r3, r2
  while (seg != NULL &&
 8014462:	69ba      	ldr	r2, [r7, #24]
 8014464:	429a      	cmp	r2, r3
 8014466:	f4bf aed9 	bcs.w	801421c <tcp_output+0x160>
 801446a:	e000      	b.n	801446e <tcp_output+0x3b2>
      break;
 801446c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014472:	2b00      	cmp	r3, #0
 8014474:	d108      	bne.n	8014488 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	2200      	movs	r2, #0
 801447a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801447e:	e004      	b.n	801448a <tcp_output+0x3ce>
    goto output_done;
 8014480:	bf00      	nop
 8014482:	e002      	b.n	801448a <tcp_output+0x3ce>
    goto output_done;
 8014484:	bf00      	nop
 8014486:	e000      	b.n	801448a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014488:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	8b5b      	ldrh	r3, [r3, #26]
 801448e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014492:	b29a      	uxth	r2, r3
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014498:	2300      	movs	r3, #0
}
 801449a:	4618      	mov	r0, r3
 801449c:	3728      	adds	r7, #40	; 0x28
 801449e:	46bd      	mov	sp, r7
 80144a0:	bdb0      	pop	{r4, r5, r7, pc}
 80144a2:	bf00      	nop

080144a4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80144a4:	b580      	push	{r7, lr}
 80144a6:	b082      	sub	sp, #8
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d106      	bne.n	80144c0 <tcp_output_segment_busy+0x1c>
 80144b2:	4b09      	ldr	r3, [pc, #36]	; (80144d8 <tcp_output_segment_busy+0x34>)
 80144b4:	f240 529a 	movw	r2, #1434	; 0x59a
 80144b8:	4908      	ldr	r1, [pc, #32]	; (80144dc <tcp_output_segment_busy+0x38>)
 80144ba:	4809      	ldr	r0, [pc, #36]	; (80144e0 <tcp_output_segment_busy+0x3c>)
 80144bc:	f003 fe98 	bl	80181f0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	685b      	ldr	r3, [r3, #4]
 80144c4:	7b9b      	ldrb	r3, [r3, #14]
 80144c6:	2b01      	cmp	r3, #1
 80144c8:	d001      	beq.n	80144ce <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80144ca:	2301      	movs	r3, #1
 80144cc:	e000      	b.n	80144d0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80144ce:	2300      	movs	r3, #0
}
 80144d0:	4618      	mov	r0, r3
 80144d2:	3708      	adds	r7, #8
 80144d4:	46bd      	mov	sp, r7
 80144d6:	bd80      	pop	{r7, pc}
 80144d8:	0801c320 	.word	0x0801c320
 80144dc:	0801c8bc 	.word	0x0801c8bc
 80144e0:	0801c374 	.word	0x0801c374

080144e4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80144e4:	b5b0      	push	{r4, r5, r7, lr}
 80144e6:	b08c      	sub	sp, #48	; 0x30
 80144e8:	af04      	add	r7, sp, #16
 80144ea:	60f8      	str	r0, [r7, #12]
 80144ec:	60b9      	str	r1, [r7, #8]
 80144ee:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d106      	bne.n	8014504 <tcp_output_segment+0x20>
 80144f6:	4b63      	ldr	r3, [pc, #396]	; (8014684 <tcp_output_segment+0x1a0>)
 80144f8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80144fc:	4962      	ldr	r1, [pc, #392]	; (8014688 <tcp_output_segment+0x1a4>)
 80144fe:	4863      	ldr	r0, [pc, #396]	; (801468c <tcp_output_segment+0x1a8>)
 8014500:	f003 fe76 	bl	80181f0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014504:	68bb      	ldr	r3, [r7, #8]
 8014506:	2b00      	cmp	r3, #0
 8014508:	d106      	bne.n	8014518 <tcp_output_segment+0x34>
 801450a:	4b5e      	ldr	r3, [pc, #376]	; (8014684 <tcp_output_segment+0x1a0>)
 801450c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014510:	495f      	ldr	r1, [pc, #380]	; (8014690 <tcp_output_segment+0x1ac>)
 8014512:	485e      	ldr	r0, [pc, #376]	; (801468c <tcp_output_segment+0x1a8>)
 8014514:	f003 fe6c 	bl	80181f0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	2b00      	cmp	r3, #0
 801451c:	d106      	bne.n	801452c <tcp_output_segment+0x48>
 801451e:	4b59      	ldr	r3, [pc, #356]	; (8014684 <tcp_output_segment+0x1a0>)
 8014520:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014524:	495b      	ldr	r1, [pc, #364]	; (8014694 <tcp_output_segment+0x1b0>)
 8014526:	4859      	ldr	r0, [pc, #356]	; (801468c <tcp_output_segment+0x1a8>)
 8014528:	f003 fe62 	bl	80181f0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801452c:	68f8      	ldr	r0, [r7, #12]
 801452e:	f7ff ffb9 	bl	80144a4 <tcp_output_segment_busy>
 8014532:	4603      	mov	r3, r0
 8014534:	2b00      	cmp	r3, #0
 8014536:	d001      	beq.n	801453c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014538:	2300      	movs	r3, #0
 801453a:	e09f      	b.n	801467c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801453c:	68bb      	ldr	r3, [r7, #8]
 801453e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	68dc      	ldr	r4, [r3, #12]
 8014544:	4610      	mov	r0, r2
 8014546:	f7f8 fdca 	bl	800d0de <lwip_htonl>
 801454a:	4603      	mov	r3, r0
 801454c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801454e:	68bb      	ldr	r3, [r7, #8]
 8014550:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	68dc      	ldr	r4, [r3, #12]
 8014556:	4610      	mov	r0, r2
 8014558:	f7f8 fdac 	bl	800d0b4 <lwip_htons>
 801455c:	4603      	mov	r3, r0
 801455e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014560:	68bb      	ldr	r3, [r7, #8]
 8014562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014564:	68ba      	ldr	r2, [r7, #8]
 8014566:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014568:	441a      	add	r2, r3
 801456a:	68bb      	ldr	r3, [r7, #8]
 801456c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	68db      	ldr	r3, [r3, #12]
 8014572:	3314      	adds	r3, #20
 8014574:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	7a9b      	ldrb	r3, [r3, #10]
 801457a:	f003 0301 	and.w	r3, r3, #1
 801457e:	2b00      	cmp	r3, #0
 8014580:	d015      	beq.n	80145ae <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8014582:	68bb      	ldr	r3, [r7, #8]
 8014584:	3304      	adds	r3, #4
 8014586:	461a      	mov	r2, r3
 8014588:	6879      	ldr	r1, [r7, #4]
 801458a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801458e:	f7fc fa37 	bl	8010a00 <tcp_eff_send_mss_netif>
 8014592:	4603      	mov	r3, r0
 8014594:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8014596:	8b7b      	ldrh	r3, [r7, #26]
 8014598:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801459c:	4618      	mov	r0, r3
 801459e:	f7f8 fd9e 	bl	800d0de <lwip_htonl>
 80145a2:	4602      	mov	r2, r0
 80145a4:	69fb      	ldr	r3, [r7, #28]
 80145a6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80145a8:	69fb      	ldr	r3, [r7, #28]
 80145aa:	3304      	adds	r3, #4
 80145ac:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80145ae:	68bb      	ldr	r3, [r7, #8]
 80145b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	da02      	bge.n	80145be <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80145b8:	68bb      	ldr	r3, [r7, #8]
 80145ba:	2200      	movs	r2, #0
 80145bc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80145be:	68bb      	ldr	r3, [r7, #8]
 80145c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d10c      	bne.n	80145e0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80145c6:	4b34      	ldr	r3, [pc, #208]	; (8014698 <tcp_output_segment+0x1b4>)
 80145c8:	681a      	ldr	r2, [r3, #0]
 80145ca:	68bb      	ldr	r3, [r7, #8]
 80145cc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	68db      	ldr	r3, [r3, #12]
 80145d2:	685b      	ldr	r3, [r3, #4]
 80145d4:	4618      	mov	r0, r3
 80145d6:	f7f8 fd82 	bl	800d0de <lwip_htonl>
 80145da:	4602      	mov	r2, r0
 80145dc:	68bb      	ldr	r3, [r7, #8]
 80145de:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80145e0:	68fb      	ldr	r3, [r7, #12]
 80145e2:	68da      	ldr	r2, [r3, #12]
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	685b      	ldr	r3, [r3, #4]
 80145e8:	685b      	ldr	r3, [r3, #4]
 80145ea:	1ad3      	subs	r3, r2, r3
 80145ec:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	685b      	ldr	r3, [r3, #4]
 80145f2:	8959      	ldrh	r1, [r3, #10]
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	685b      	ldr	r3, [r3, #4]
 80145f8:	8b3a      	ldrh	r2, [r7, #24]
 80145fa:	1a8a      	subs	r2, r1, r2
 80145fc:	b292      	uxth	r2, r2
 80145fe:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	685b      	ldr	r3, [r3, #4]
 8014604:	8919      	ldrh	r1, [r3, #8]
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	685b      	ldr	r3, [r3, #4]
 801460a:	8b3a      	ldrh	r2, [r7, #24]
 801460c:	1a8a      	subs	r2, r1, r2
 801460e:	b292      	uxth	r2, r2
 8014610:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	685b      	ldr	r3, [r3, #4]
 8014616:	68fa      	ldr	r2, [r7, #12]
 8014618:	68d2      	ldr	r2, [r2, #12]
 801461a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	68db      	ldr	r3, [r3, #12]
 8014620:	2200      	movs	r2, #0
 8014622:	741a      	strb	r2, [r3, #16]
 8014624:	2200      	movs	r2, #0
 8014626:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	68db      	ldr	r3, [r3, #12]
 801462c:	f103 0214 	add.w	r2, r3, #20
 8014630:	68fb      	ldr	r3, [r7, #12]
 8014632:	7a9b      	ldrb	r3, [r3, #10]
 8014634:	009b      	lsls	r3, r3, #2
 8014636:	f003 0304 	and.w	r3, r3, #4
 801463a:	4413      	add	r3, r2
 801463c:	69fa      	ldr	r2, [r7, #28]
 801463e:	429a      	cmp	r2, r3
 8014640:	d006      	beq.n	8014650 <tcp_output_segment+0x16c>
 8014642:	4b10      	ldr	r3, [pc, #64]	; (8014684 <tcp_output_segment+0x1a0>)
 8014644:	f240 621c 	movw	r2, #1564	; 0x61c
 8014648:	4914      	ldr	r1, [pc, #80]	; (801469c <tcp_output_segment+0x1b8>)
 801464a:	4810      	ldr	r0, [pc, #64]	; (801468c <tcp_output_segment+0x1a8>)
 801464c:	f003 fdd0 	bl	80181f0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	6858      	ldr	r0, [r3, #4]
 8014654:	68b9      	ldr	r1, [r7, #8]
 8014656:	68bb      	ldr	r3, [r7, #8]
 8014658:	1d1c      	adds	r4, r3, #4
 801465a:	68bb      	ldr	r3, [r7, #8]
 801465c:	7add      	ldrb	r5, [r3, #11]
 801465e:	68bb      	ldr	r3, [r7, #8]
 8014660:	7a9b      	ldrb	r3, [r3, #10]
 8014662:	687a      	ldr	r2, [r7, #4]
 8014664:	9202      	str	r2, [sp, #8]
 8014666:	2206      	movs	r2, #6
 8014668:	9201      	str	r2, [sp, #4]
 801466a:	9300      	str	r3, [sp, #0]
 801466c:	462b      	mov	r3, r5
 801466e:	4622      	mov	r2, r4
 8014670:	f002 fa66 	bl	8016b40 <ip4_output_if>
 8014674:	4603      	mov	r3, r0
 8014676:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014678:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801467c:	4618      	mov	r0, r3
 801467e:	3720      	adds	r7, #32
 8014680:	46bd      	mov	sp, r7
 8014682:	bdb0      	pop	{r4, r5, r7, pc}
 8014684:	0801c320 	.word	0x0801c320
 8014688:	0801c8e4 	.word	0x0801c8e4
 801468c:	0801c374 	.word	0x0801c374
 8014690:	0801c904 	.word	0x0801c904
 8014694:	0801c924 	.word	0x0801c924
 8014698:	20018ba8 	.word	0x20018ba8
 801469c:	0801c948 	.word	0x0801c948

080146a0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80146a0:	b5b0      	push	{r4, r5, r7, lr}
 80146a2:	b084      	sub	sp, #16
 80146a4:	af00      	add	r7, sp, #0
 80146a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d106      	bne.n	80146bc <tcp_rexmit_rto_prepare+0x1c>
 80146ae:	4b31      	ldr	r3, [pc, #196]	; (8014774 <tcp_rexmit_rto_prepare+0xd4>)
 80146b0:	f240 6263 	movw	r2, #1635	; 0x663
 80146b4:	4930      	ldr	r1, [pc, #192]	; (8014778 <tcp_rexmit_rto_prepare+0xd8>)
 80146b6:	4831      	ldr	r0, [pc, #196]	; (801477c <tcp_rexmit_rto_prepare+0xdc>)
 80146b8:	f003 fd9a 	bl	80181f0 <iprintf>

  if (pcb->unacked == NULL) {
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d102      	bne.n	80146ca <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80146c4:	f06f 0305 	mvn.w	r3, #5
 80146c8:	e050      	b.n	801476c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80146ce:	60fb      	str	r3, [r7, #12]
 80146d0:	e00b      	b.n	80146ea <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80146d2:	68f8      	ldr	r0, [r7, #12]
 80146d4:	f7ff fee6 	bl	80144a4 <tcp_output_segment_busy>
 80146d8:	4603      	mov	r3, r0
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d002      	beq.n	80146e4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80146de:	f06f 0305 	mvn.w	r3, #5
 80146e2:	e043      	b.n	801476c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	60fb      	str	r3, [r7, #12]
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d1ef      	bne.n	80146d2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80146f2:	68f8      	ldr	r0, [r7, #12]
 80146f4:	f7ff fed6 	bl	80144a4 <tcp_output_segment_busy>
 80146f8:	4603      	mov	r3, r0
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d002      	beq.n	8014704 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80146fe:	f06f 0305 	mvn.w	r3, #5
 8014702:	e033      	b.n	801476c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	2200      	movs	r2, #0
 8014718:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	8b5b      	ldrh	r3, [r3, #26]
 801471e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014722:	b29a      	uxth	r2, r3
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	68db      	ldr	r3, [r3, #12]
 801472c:	685b      	ldr	r3, [r3, #4]
 801472e:	4618      	mov	r0, r3
 8014730:	f7f8 fcd5 	bl	800d0de <lwip_htonl>
 8014734:	4604      	mov	r4, r0
 8014736:	68fb      	ldr	r3, [r7, #12]
 8014738:	891b      	ldrh	r3, [r3, #8]
 801473a:	461d      	mov	r5, r3
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	68db      	ldr	r3, [r3, #12]
 8014740:	899b      	ldrh	r3, [r3, #12]
 8014742:	b29b      	uxth	r3, r3
 8014744:	4618      	mov	r0, r3
 8014746:	f7f8 fcb5 	bl	800d0b4 <lwip_htons>
 801474a:	4603      	mov	r3, r0
 801474c:	b2db      	uxtb	r3, r3
 801474e:	f003 0303 	and.w	r3, r3, #3
 8014752:	2b00      	cmp	r3, #0
 8014754:	d001      	beq.n	801475a <tcp_rexmit_rto_prepare+0xba>
 8014756:	2301      	movs	r3, #1
 8014758:	e000      	b.n	801475c <tcp_rexmit_rto_prepare+0xbc>
 801475a:	2300      	movs	r3, #0
 801475c:	442b      	add	r3, r5
 801475e:	18e2      	adds	r2, r4, r3
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	2200      	movs	r2, #0
 8014768:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801476a:	2300      	movs	r3, #0
}
 801476c:	4618      	mov	r0, r3
 801476e:	3710      	adds	r7, #16
 8014770:	46bd      	mov	sp, r7
 8014772:	bdb0      	pop	{r4, r5, r7, pc}
 8014774:	0801c320 	.word	0x0801c320
 8014778:	0801c95c 	.word	0x0801c95c
 801477c:	0801c374 	.word	0x0801c374

08014780 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8014780:	b580      	push	{r7, lr}
 8014782:	b082      	sub	sp, #8
 8014784:	af00      	add	r7, sp, #0
 8014786:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	2b00      	cmp	r3, #0
 801478c:	d106      	bne.n	801479c <tcp_rexmit_rto_commit+0x1c>
 801478e:	4b0d      	ldr	r3, [pc, #52]	; (80147c4 <tcp_rexmit_rto_commit+0x44>)
 8014790:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8014794:	490c      	ldr	r1, [pc, #48]	; (80147c8 <tcp_rexmit_rto_commit+0x48>)
 8014796:	480d      	ldr	r0, [pc, #52]	; (80147cc <tcp_rexmit_rto_commit+0x4c>)
 8014798:	f003 fd2a 	bl	80181f0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80147a2:	2bff      	cmp	r3, #255	; 0xff
 80147a4:	d007      	beq.n	80147b6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80147ac:	3301      	adds	r3, #1
 80147ae:	b2da      	uxtb	r2, r3
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80147b6:	6878      	ldr	r0, [r7, #4]
 80147b8:	f7ff fc80 	bl	80140bc <tcp_output>
}
 80147bc:	bf00      	nop
 80147be:	3708      	adds	r7, #8
 80147c0:	46bd      	mov	sp, r7
 80147c2:	bd80      	pop	{r7, pc}
 80147c4:	0801c320 	.word	0x0801c320
 80147c8:	0801c980 	.word	0x0801c980
 80147cc:	0801c374 	.word	0x0801c374

080147d0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80147d0:	b580      	push	{r7, lr}
 80147d2:	b082      	sub	sp, #8
 80147d4:	af00      	add	r7, sp, #0
 80147d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d106      	bne.n	80147ec <tcp_rexmit_rto+0x1c>
 80147de:	4b0a      	ldr	r3, [pc, #40]	; (8014808 <tcp_rexmit_rto+0x38>)
 80147e0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80147e4:	4909      	ldr	r1, [pc, #36]	; (801480c <tcp_rexmit_rto+0x3c>)
 80147e6:	480a      	ldr	r0, [pc, #40]	; (8014810 <tcp_rexmit_rto+0x40>)
 80147e8:	f003 fd02 	bl	80181f0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80147ec:	6878      	ldr	r0, [r7, #4]
 80147ee:	f7ff ff57 	bl	80146a0 <tcp_rexmit_rto_prepare>
 80147f2:	4603      	mov	r3, r0
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d102      	bne.n	80147fe <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80147f8:	6878      	ldr	r0, [r7, #4]
 80147fa:	f7ff ffc1 	bl	8014780 <tcp_rexmit_rto_commit>
  }
}
 80147fe:	bf00      	nop
 8014800:	3708      	adds	r7, #8
 8014802:	46bd      	mov	sp, r7
 8014804:	bd80      	pop	{r7, pc}
 8014806:	bf00      	nop
 8014808:	0801c320 	.word	0x0801c320
 801480c:	0801c9a4 	.word	0x0801c9a4
 8014810:	0801c374 	.word	0x0801c374

08014814 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014814:	b590      	push	{r4, r7, lr}
 8014816:	b085      	sub	sp, #20
 8014818:	af00      	add	r7, sp, #0
 801481a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d106      	bne.n	8014830 <tcp_rexmit+0x1c>
 8014822:	4b2f      	ldr	r3, [pc, #188]	; (80148e0 <tcp_rexmit+0xcc>)
 8014824:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8014828:	492e      	ldr	r1, [pc, #184]	; (80148e4 <tcp_rexmit+0xd0>)
 801482a:	482f      	ldr	r0, [pc, #188]	; (80148e8 <tcp_rexmit+0xd4>)
 801482c:	f003 fce0 	bl	80181f0 <iprintf>

  if (pcb->unacked == NULL) {
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014834:	2b00      	cmp	r3, #0
 8014836:	d102      	bne.n	801483e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014838:	f06f 0305 	mvn.w	r3, #5
 801483c:	e04c      	b.n	80148d8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014842:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014844:	68b8      	ldr	r0, [r7, #8]
 8014846:	f7ff fe2d 	bl	80144a4 <tcp_output_segment_busy>
 801484a:	4603      	mov	r3, r0
 801484c:	2b00      	cmp	r3, #0
 801484e:	d002      	beq.n	8014856 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8014850:	f06f 0305 	mvn.w	r3, #5
 8014854:	e040      	b.n	80148d8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8014856:	68bb      	ldr	r3, [r7, #8]
 8014858:	681a      	ldr	r2, [r3, #0]
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	336c      	adds	r3, #108	; 0x6c
 8014862:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014864:	e002      	b.n	801486c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	2b00      	cmp	r3, #0
 8014872:	d011      	beq.n	8014898 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	68db      	ldr	r3, [r3, #12]
 801487a:	685b      	ldr	r3, [r3, #4]
 801487c:	4618      	mov	r0, r3
 801487e:	f7f8 fc2e 	bl	800d0de <lwip_htonl>
 8014882:	4604      	mov	r4, r0
 8014884:	68bb      	ldr	r3, [r7, #8]
 8014886:	68db      	ldr	r3, [r3, #12]
 8014888:	685b      	ldr	r3, [r3, #4]
 801488a:	4618      	mov	r0, r3
 801488c:	f7f8 fc27 	bl	800d0de <lwip_htonl>
 8014890:	4603      	mov	r3, r0
 8014892:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014894:	2b00      	cmp	r3, #0
 8014896:	dbe6      	blt.n	8014866 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	681a      	ldr	r2, [r3, #0]
 801489c:	68bb      	ldr	r3, [r7, #8]
 801489e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	68ba      	ldr	r2, [r7, #8]
 80148a4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80148a6:	68bb      	ldr	r3, [r7, #8]
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d103      	bne.n	80148b6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	2200      	movs	r2, #0
 80148b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80148bc:	2bff      	cmp	r3, #255	; 0xff
 80148be:	d007      	beq.n	80148d0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80148c6:	3301      	adds	r3, #1
 80148c8:	b2da      	uxtb	r2, r3
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	2200      	movs	r2, #0
 80148d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80148d6:	2300      	movs	r3, #0
}
 80148d8:	4618      	mov	r0, r3
 80148da:	3714      	adds	r7, #20
 80148dc:	46bd      	mov	sp, r7
 80148de:	bd90      	pop	{r4, r7, pc}
 80148e0:	0801c320 	.word	0x0801c320
 80148e4:	0801c9c0 	.word	0x0801c9c0
 80148e8:	0801c374 	.word	0x0801c374

080148ec <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80148ec:	b580      	push	{r7, lr}
 80148ee:	b082      	sub	sp, #8
 80148f0:	af00      	add	r7, sp, #0
 80148f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d106      	bne.n	8014908 <tcp_rexmit_fast+0x1c>
 80148fa:	4b2a      	ldr	r3, [pc, #168]	; (80149a4 <tcp_rexmit_fast+0xb8>)
 80148fc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8014900:	4929      	ldr	r1, [pc, #164]	; (80149a8 <tcp_rexmit_fast+0xbc>)
 8014902:	482a      	ldr	r0, [pc, #168]	; (80149ac <tcp_rexmit_fast+0xc0>)
 8014904:	f003 fc74 	bl	80181f0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801490c:	2b00      	cmp	r3, #0
 801490e:	d045      	beq.n	801499c <tcp_rexmit_fast+0xb0>
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	8b5b      	ldrh	r3, [r3, #26]
 8014914:	f003 0304 	and.w	r3, r3, #4
 8014918:	2b00      	cmp	r3, #0
 801491a:	d13f      	bne.n	801499c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801491c:	6878      	ldr	r0, [r7, #4]
 801491e:	f7ff ff79 	bl	8014814 <tcp_rexmit>
 8014922:	4603      	mov	r3, r0
 8014924:	2b00      	cmp	r3, #0
 8014926:	d139      	bne.n	801499c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014934:	4293      	cmp	r3, r2
 8014936:	bf28      	it	cs
 8014938:	4613      	movcs	r3, r2
 801493a:	b29b      	uxth	r3, r3
 801493c:	2b00      	cmp	r3, #0
 801493e:	da00      	bge.n	8014942 <tcp_rexmit_fast+0x56>
 8014940:	3301      	adds	r3, #1
 8014942:	105b      	asrs	r3, r3, #1
 8014944:	b29a      	uxth	r2, r3
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014952:	461a      	mov	r2, r3
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014958:	005b      	lsls	r3, r3, #1
 801495a:	429a      	cmp	r2, r3
 801495c:	d206      	bcs.n	801496c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014962:	005b      	lsls	r3, r3, #1
 8014964:	b29a      	uxth	r2, r3
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014976:	4619      	mov	r1, r3
 8014978:	0049      	lsls	r1, r1, #1
 801497a:	440b      	add	r3, r1
 801497c:	b29b      	uxth	r3, r3
 801497e:	4413      	add	r3, r2
 8014980:	b29a      	uxth	r2, r3
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	8b5b      	ldrh	r3, [r3, #26]
 801498c:	f043 0304 	orr.w	r3, r3, #4
 8014990:	b29a      	uxth	r2, r3
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	2200      	movs	r2, #0
 801499a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801499c:	bf00      	nop
 801499e:	3708      	adds	r7, #8
 80149a0:	46bd      	mov	sp, r7
 80149a2:	bd80      	pop	{r7, pc}
 80149a4:	0801c320 	.word	0x0801c320
 80149a8:	0801c9d8 	.word	0x0801c9d8
 80149ac:	0801c374 	.word	0x0801c374

080149b0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80149b0:	b580      	push	{r7, lr}
 80149b2:	b086      	sub	sp, #24
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	60f8      	str	r0, [r7, #12]
 80149b8:	607b      	str	r3, [r7, #4]
 80149ba:	460b      	mov	r3, r1
 80149bc:	817b      	strh	r3, [r7, #10]
 80149be:	4613      	mov	r3, r2
 80149c0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80149c2:	897a      	ldrh	r2, [r7, #10]
 80149c4:	893b      	ldrh	r3, [r7, #8]
 80149c6:	4413      	add	r3, r2
 80149c8:	b29b      	uxth	r3, r3
 80149ca:	3314      	adds	r3, #20
 80149cc:	b29b      	uxth	r3, r3
 80149ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 80149d2:	4619      	mov	r1, r3
 80149d4:	2022      	movs	r0, #34	; 0x22
 80149d6:	f7f9 fd13 	bl	800e400 <pbuf_alloc>
 80149da:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80149dc:	697b      	ldr	r3, [r7, #20]
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d04d      	beq.n	8014a7e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80149e2:	897b      	ldrh	r3, [r7, #10]
 80149e4:	3313      	adds	r3, #19
 80149e6:	697a      	ldr	r2, [r7, #20]
 80149e8:	8952      	ldrh	r2, [r2, #10]
 80149ea:	4293      	cmp	r3, r2
 80149ec:	db06      	blt.n	80149fc <tcp_output_alloc_header_common+0x4c>
 80149ee:	4b26      	ldr	r3, [pc, #152]	; (8014a88 <tcp_output_alloc_header_common+0xd8>)
 80149f0:	f240 7223 	movw	r2, #1827	; 0x723
 80149f4:	4925      	ldr	r1, [pc, #148]	; (8014a8c <tcp_output_alloc_header_common+0xdc>)
 80149f6:	4826      	ldr	r0, [pc, #152]	; (8014a90 <tcp_output_alloc_header_common+0xe0>)
 80149f8:	f003 fbfa 	bl	80181f0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80149fc:	697b      	ldr	r3, [r7, #20]
 80149fe:	685b      	ldr	r3, [r3, #4]
 8014a00:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014a02:	8c3b      	ldrh	r3, [r7, #32]
 8014a04:	4618      	mov	r0, r3
 8014a06:	f7f8 fb55 	bl	800d0b4 <lwip_htons>
 8014a0a:	4603      	mov	r3, r0
 8014a0c:	461a      	mov	r2, r3
 8014a0e:	693b      	ldr	r3, [r7, #16]
 8014a10:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014a12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014a14:	4618      	mov	r0, r3
 8014a16:	f7f8 fb4d 	bl	800d0b4 <lwip_htons>
 8014a1a:	4603      	mov	r3, r0
 8014a1c:	461a      	mov	r2, r3
 8014a1e:	693b      	ldr	r3, [r7, #16]
 8014a20:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014a22:	693b      	ldr	r3, [r7, #16]
 8014a24:	687a      	ldr	r2, [r7, #4]
 8014a26:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014a28:	68f8      	ldr	r0, [r7, #12]
 8014a2a:	f7f8 fb58 	bl	800d0de <lwip_htonl>
 8014a2e:	4602      	mov	r2, r0
 8014a30:	693b      	ldr	r3, [r7, #16]
 8014a32:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014a34:	897b      	ldrh	r3, [r7, #10]
 8014a36:	089b      	lsrs	r3, r3, #2
 8014a38:	b29b      	uxth	r3, r3
 8014a3a:	3305      	adds	r3, #5
 8014a3c:	b29b      	uxth	r3, r3
 8014a3e:	031b      	lsls	r3, r3, #12
 8014a40:	b29a      	uxth	r2, r3
 8014a42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014a46:	b29b      	uxth	r3, r3
 8014a48:	4313      	orrs	r3, r2
 8014a4a:	b29b      	uxth	r3, r3
 8014a4c:	4618      	mov	r0, r3
 8014a4e:	f7f8 fb31 	bl	800d0b4 <lwip_htons>
 8014a52:	4603      	mov	r3, r0
 8014a54:	461a      	mov	r2, r3
 8014a56:	693b      	ldr	r3, [r7, #16]
 8014a58:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8014a5a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	f7f8 fb29 	bl	800d0b4 <lwip_htons>
 8014a62:	4603      	mov	r3, r0
 8014a64:	461a      	mov	r2, r3
 8014a66:	693b      	ldr	r3, [r7, #16]
 8014a68:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014a6a:	693b      	ldr	r3, [r7, #16]
 8014a6c:	2200      	movs	r2, #0
 8014a6e:	741a      	strb	r2, [r3, #16]
 8014a70:	2200      	movs	r2, #0
 8014a72:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014a74:	693b      	ldr	r3, [r7, #16]
 8014a76:	2200      	movs	r2, #0
 8014a78:	749a      	strb	r2, [r3, #18]
 8014a7a:	2200      	movs	r2, #0
 8014a7c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8014a7e:	697b      	ldr	r3, [r7, #20]
}
 8014a80:	4618      	mov	r0, r3
 8014a82:	3718      	adds	r7, #24
 8014a84:	46bd      	mov	sp, r7
 8014a86:	bd80      	pop	{r7, pc}
 8014a88:	0801c320 	.word	0x0801c320
 8014a8c:	0801c9f8 	.word	0x0801c9f8
 8014a90:	0801c374 	.word	0x0801c374

08014a94 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014a94:	b5b0      	push	{r4, r5, r7, lr}
 8014a96:	b08a      	sub	sp, #40	; 0x28
 8014a98:	af04      	add	r7, sp, #16
 8014a9a:	60f8      	str	r0, [r7, #12]
 8014a9c:	607b      	str	r3, [r7, #4]
 8014a9e:	460b      	mov	r3, r1
 8014aa0:	817b      	strh	r3, [r7, #10]
 8014aa2:	4613      	mov	r3, r2
 8014aa4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d106      	bne.n	8014aba <tcp_output_alloc_header+0x26>
 8014aac:	4b15      	ldr	r3, [pc, #84]	; (8014b04 <tcp_output_alloc_header+0x70>)
 8014aae:	f240 7242 	movw	r2, #1858	; 0x742
 8014ab2:	4915      	ldr	r1, [pc, #84]	; (8014b08 <tcp_output_alloc_header+0x74>)
 8014ab4:	4815      	ldr	r0, [pc, #84]	; (8014b0c <tcp_output_alloc_header+0x78>)
 8014ab6:	f003 fb9b 	bl	80181f0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	8adb      	ldrh	r3, [r3, #22]
 8014ac2:	68fa      	ldr	r2, [r7, #12]
 8014ac4:	8b12      	ldrh	r2, [r2, #24]
 8014ac6:	68f9      	ldr	r1, [r7, #12]
 8014ac8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8014aca:	893d      	ldrh	r5, [r7, #8]
 8014acc:	897c      	ldrh	r4, [r7, #10]
 8014ace:	9103      	str	r1, [sp, #12]
 8014ad0:	2110      	movs	r1, #16
 8014ad2:	9102      	str	r1, [sp, #8]
 8014ad4:	9201      	str	r2, [sp, #4]
 8014ad6:	9300      	str	r3, [sp, #0]
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	462a      	mov	r2, r5
 8014adc:	4621      	mov	r1, r4
 8014ade:	f7ff ff67 	bl	80149b0 <tcp_output_alloc_header_common>
 8014ae2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014ae4:	697b      	ldr	r3, [r7, #20]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d006      	beq.n	8014af8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014aee:	68fa      	ldr	r2, [r7, #12]
 8014af0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014af2:	441a      	add	r2, r3
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014af8:	697b      	ldr	r3, [r7, #20]
}
 8014afa:	4618      	mov	r0, r3
 8014afc:	3718      	adds	r7, #24
 8014afe:	46bd      	mov	sp, r7
 8014b00:	bdb0      	pop	{r4, r5, r7, pc}
 8014b02:	bf00      	nop
 8014b04:	0801c320 	.word	0x0801c320
 8014b08:	0801ca28 	.word	0x0801ca28
 8014b0c:	0801c374 	.word	0x0801c374

08014b10 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014b10:	b580      	push	{r7, lr}
 8014b12:	b088      	sub	sp, #32
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	60f8      	str	r0, [r7, #12]
 8014b18:	60b9      	str	r1, [r7, #8]
 8014b1a:	4611      	mov	r1, r2
 8014b1c:	461a      	mov	r2, r3
 8014b1e:	460b      	mov	r3, r1
 8014b20:	71fb      	strb	r3, [r7, #7]
 8014b22:	4613      	mov	r3, r2
 8014b24:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014b26:	2300      	movs	r3, #0
 8014b28:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8014b2a:	68bb      	ldr	r3, [r7, #8]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d106      	bne.n	8014b3e <tcp_output_fill_options+0x2e>
 8014b30:	4b13      	ldr	r3, [pc, #76]	; (8014b80 <tcp_output_fill_options+0x70>)
 8014b32:	f240 7256 	movw	r2, #1878	; 0x756
 8014b36:	4913      	ldr	r1, [pc, #76]	; (8014b84 <tcp_output_fill_options+0x74>)
 8014b38:	4813      	ldr	r0, [pc, #76]	; (8014b88 <tcp_output_fill_options+0x78>)
 8014b3a:	f003 fb59 	bl	80181f0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8014b3e:	68bb      	ldr	r3, [r7, #8]
 8014b40:	685b      	ldr	r3, [r3, #4]
 8014b42:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014b44:	69bb      	ldr	r3, [r7, #24]
 8014b46:	3314      	adds	r3, #20
 8014b48:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8014b4a:	69bb      	ldr	r3, [r7, #24]
 8014b4c:	f103 0214 	add.w	r2, r3, #20
 8014b50:	8bfb      	ldrh	r3, [r7, #30]
 8014b52:	009b      	lsls	r3, r3, #2
 8014b54:	4619      	mov	r1, r3
 8014b56:	79fb      	ldrb	r3, [r7, #7]
 8014b58:	009b      	lsls	r3, r3, #2
 8014b5a:	f003 0304 	and.w	r3, r3, #4
 8014b5e:	440b      	add	r3, r1
 8014b60:	4413      	add	r3, r2
 8014b62:	697a      	ldr	r2, [r7, #20]
 8014b64:	429a      	cmp	r2, r3
 8014b66:	d006      	beq.n	8014b76 <tcp_output_fill_options+0x66>
 8014b68:	4b05      	ldr	r3, [pc, #20]	; (8014b80 <tcp_output_fill_options+0x70>)
 8014b6a:	f240 7275 	movw	r2, #1909	; 0x775
 8014b6e:	4907      	ldr	r1, [pc, #28]	; (8014b8c <tcp_output_fill_options+0x7c>)
 8014b70:	4805      	ldr	r0, [pc, #20]	; (8014b88 <tcp_output_fill_options+0x78>)
 8014b72:	f003 fb3d 	bl	80181f0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014b76:	bf00      	nop
 8014b78:	3720      	adds	r7, #32
 8014b7a:	46bd      	mov	sp, r7
 8014b7c:	bd80      	pop	{r7, pc}
 8014b7e:	bf00      	nop
 8014b80:	0801c320 	.word	0x0801c320
 8014b84:	0801ca50 	.word	0x0801ca50
 8014b88:	0801c374 	.word	0x0801c374
 8014b8c:	0801c948 	.word	0x0801c948

08014b90 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b08a      	sub	sp, #40	; 0x28
 8014b94:	af04      	add	r7, sp, #16
 8014b96:	60f8      	str	r0, [r7, #12]
 8014b98:	60b9      	str	r1, [r7, #8]
 8014b9a:	607a      	str	r2, [r7, #4]
 8014b9c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014b9e:	68bb      	ldr	r3, [r7, #8]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d106      	bne.n	8014bb2 <tcp_output_control_segment+0x22>
 8014ba4:	4b1c      	ldr	r3, [pc, #112]	; (8014c18 <tcp_output_control_segment+0x88>)
 8014ba6:	f240 7287 	movw	r2, #1927	; 0x787
 8014baa:	491c      	ldr	r1, [pc, #112]	; (8014c1c <tcp_output_control_segment+0x8c>)
 8014bac:	481c      	ldr	r0, [pc, #112]	; (8014c20 <tcp_output_control_segment+0x90>)
 8014bae:	f003 fb1f 	bl	80181f0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014bb2:	683a      	ldr	r2, [r7, #0]
 8014bb4:	6879      	ldr	r1, [r7, #4]
 8014bb6:	68f8      	ldr	r0, [r7, #12]
 8014bb8:	f7fe fae8 	bl	801318c <tcp_route>
 8014bbc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8014bbe:	693b      	ldr	r3, [r7, #16]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d102      	bne.n	8014bca <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014bc4:	23fc      	movs	r3, #252	; 0xfc
 8014bc6:	75fb      	strb	r3, [r7, #23]
 8014bc8:	e01c      	b.n	8014c04 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d006      	beq.n	8014bde <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	7adb      	ldrb	r3, [r3, #11]
 8014bd4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	7a9b      	ldrb	r3, [r3, #10]
 8014bda:	757b      	strb	r3, [r7, #21]
 8014bdc:	e003      	b.n	8014be6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014bde:	23ff      	movs	r3, #255	; 0xff
 8014be0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014be2:	2300      	movs	r3, #0
 8014be4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014be6:	7dba      	ldrb	r2, [r7, #22]
 8014be8:	693b      	ldr	r3, [r7, #16]
 8014bea:	9302      	str	r3, [sp, #8]
 8014bec:	2306      	movs	r3, #6
 8014bee:	9301      	str	r3, [sp, #4]
 8014bf0:	7d7b      	ldrb	r3, [r7, #21]
 8014bf2:	9300      	str	r3, [sp, #0]
 8014bf4:	4613      	mov	r3, r2
 8014bf6:	683a      	ldr	r2, [r7, #0]
 8014bf8:	6879      	ldr	r1, [r7, #4]
 8014bfa:	68b8      	ldr	r0, [r7, #8]
 8014bfc:	f001 ffa0 	bl	8016b40 <ip4_output_if>
 8014c00:	4603      	mov	r3, r0
 8014c02:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014c04:	68b8      	ldr	r0, [r7, #8]
 8014c06:	f7f9 fedf 	bl	800e9c8 <pbuf_free>
  return err;
 8014c0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014c0e:	4618      	mov	r0, r3
 8014c10:	3718      	adds	r7, #24
 8014c12:	46bd      	mov	sp, r7
 8014c14:	bd80      	pop	{r7, pc}
 8014c16:	bf00      	nop
 8014c18:	0801c320 	.word	0x0801c320
 8014c1c:	0801ca78 	.word	0x0801ca78
 8014c20:	0801c374 	.word	0x0801c374

08014c24 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014c24:	b590      	push	{r4, r7, lr}
 8014c26:	b08b      	sub	sp, #44	; 0x2c
 8014c28:	af04      	add	r7, sp, #16
 8014c2a:	60f8      	str	r0, [r7, #12]
 8014c2c:	60b9      	str	r1, [r7, #8]
 8014c2e:	607a      	str	r2, [r7, #4]
 8014c30:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014c32:	683b      	ldr	r3, [r7, #0]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d106      	bne.n	8014c46 <tcp_rst+0x22>
 8014c38:	4b1f      	ldr	r3, [pc, #124]	; (8014cb8 <tcp_rst+0x94>)
 8014c3a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8014c3e:	491f      	ldr	r1, [pc, #124]	; (8014cbc <tcp_rst+0x98>)
 8014c40:	481f      	ldr	r0, [pc, #124]	; (8014cc0 <tcp_rst+0x9c>)
 8014c42:	f003 fad5 	bl	80181f0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d106      	bne.n	8014c5a <tcp_rst+0x36>
 8014c4c:	4b1a      	ldr	r3, [pc, #104]	; (8014cb8 <tcp_rst+0x94>)
 8014c4e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8014c52:	491c      	ldr	r1, [pc, #112]	; (8014cc4 <tcp_rst+0xa0>)
 8014c54:	481a      	ldr	r0, [pc, #104]	; (8014cc0 <tcp_rst+0x9c>)
 8014c56:	f003 facb 	bl	80181f0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014c5e:	f246 0308 	movw	r3, #24584	; 0x6008
 8014c62:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014c64:	7dfb      	ldrb	r3, [r7, #23]
 8014c66:	b29c      	uxth	r4, r3
 8014c68:	68b8      	ldr	r0, [r7, #8]
 8014c6a:	f7f8 fa38 	bl	800d0de <lwip_htonl>
 8014c6e:	4602      	mov	r2, r0
 8014c70:	8abb      	ldrh	r3, [r7, #20]
 8014c72:	9303      	str	r3, [sp, #12]
 8014c74:	2314      	movs	r3, #20
 8014c76:	9302      	str	r3, [sp, #8]
 8014c78:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014c7a:	9301      	str	r3, [sp, #4]
 8014c7c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014c7e:	9300      	str	r3, [sp, #0]
 8014c80:	4613      	mov	r3, r2
 8014c82:	2200      	movs	r2, #0
 8014c84:	4621      	mov	r1, r4
 8014c86:	6878      	ldr	r0, [r7, #4]
 8014c88:	f7ff fe92 	bl	80149b0 <tcp_output_alloc_header_common>
 8014c8c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014c8e:	693b      	ldr	r3, [r7, #16]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d00c      	beq.n	8014cae <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014c94:	7dfb      	ldrb	r3, [r7, #23]
 8014c96:	2200      	movs	r2, #0
 8014c98:	6939      	ldr	r1, [r7, #16]
 8014c9a:	68f8      	ldr	r0, [r7, #12]
 8014c9c:	f7ff ff38 	bl	8014b10 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ca2:	683a      	ldr	r2, [r7, #0]
 8014ca4:	6939      	ldr	r1, [r7, #16]
 8014ca6:	68f8      	ldr	r0, [r7, #12]
 8014ca8:	f7ff ff72 	bl	8014b90 <tcp_output_control_segment>
 8014cac:	e000      	b.n	8014cb0 <tcp_rst+0x8c>
    return;
 8014cae:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014cb0:	371c      	adds	r7, #28
 8014cb2:	46bd      	mov	sp, r7
 8014cb4:	bd90      	pop	{r4, r7, pc}
 8014cb6:	bf00      	nop
 8014cb8:	0801c320 	.word	0x0801c320
 8014cbc:	0801caa4 	.word	0x0801caa4
 8014cc0:	0801c374 	.word	0x0801c374
 8014cc4:	0801cac0 	.word	0x0801cac0

08014cc8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014cc8:	b590      	push	{r4, r7, lr}
 8014cca:	b087      	sub	sp, #28
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014cd0:	2300      	movs	r3, #0
 8014cd2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014cd4:	2300      	movs	r3, #0
 8014cd6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d106      	bne.n	8014cec <tcp_send_empty_ack+0x24>
 8014cde:	4b28      	ldr	r3, [pc, #160]	; (8014d80 <tcp_send_empty_ack+0xb8>)
 8014ce0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014ce4:	4927      	ldr	r1, [pc, #156]	; (8014d84 <tcp_send_empty_ack+0xbc>)
 8014ce6:	4828      	ldr	r0, [pc, #160]	; (8014d88 <tcp_send_empty_ack+0xc0>)
 8014ce8:	f003 fa82 	bl	80181f0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014cec:	7dfb      	ldrb	r3, [r7, #23]
 8014cee:	009b      	lsls	r3, r3, #2
 8014cf0:	b2db      	uxtb	r3, r3
 8014cf2:	f003 0304 	and.w	r3, r3, #4
 8014cf6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014cf8:	7d7b      	ldrb	r3, [r7, #21]
 8014cfa:	b29c      	uxth	r4, r3
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014d00:	4618      	mov	r0, r3
 8014d02:	f7f8 f9ec 	bl	800d0de <lwip_htonl>
 8014d06:	4603      	mov	r3, r0
 8014d08:	2200      	movs	r2, #0
 8014d0a:	4621      	mov	r1, r4
 8014d0c:	6878      	ldr	r0, [r7, #4]
 8014d0e:	f7ff fec1 	bl	8014a94 <tcp_output_alloc_header>
 8014d12:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014d14:	693b      	ldr	r3, [r7, #16]
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d109      	bne.n	8014d2e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	8b5b      	ldrh	r3, [r3, #26]
 8014d1e:	f043 0303 	orr.w	r3, r3, #3
 8014d22:	b29a      	uxth	r2, r3
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014d28:	f06f 0301 	mvn.w	r3, #1
 8014d2c:	e023      	b.n	8014d76 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014d2e:	7dbb      	ldrb	r3, [r7, #22]
 8014d30:	7dfa      	ldrb	r2, [r7, #23]
 8014d32:	6939      	ldr	r1, [r7, #16]
 8014d34:	6878      	ldr	r0, [r7, #4]
 8014d36:	f7ff feeb 	bl	8014b10 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014d3a:	687a      	ldr	r2, [r7, #4]
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	3304      	adds	r3, #4
 8014d40:	6939      	ldr	r1, [r7, #16]
 8014d42:	6878      	ldr	r0, [r7, #4]
 8014d44:	f7ff ff24 	bl	8014b90 <tcp_output_control_segment>
 8014d48:	4603      	mov	r3, r0
 8014d4a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d007      	beq.n	8014d64 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	8b5b      	ldrh	r3, [r3, #26]
 8014d58:	f043 0303 	orr.w	r3, r3, #3
 8014d5c:	b29a      	uxth	r2, r3
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	835a      	strh	r2, [r3, #26]
 8014d62:	e006      	b.n	8014d72 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	8b5b      	ldrh	r3, [r3, #26]
 8014d68:	f023 0303 	bic.w	r3, r3, #3
 8014d6c:	b29a      	uxth	r2, r3
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014d76:	4618      	mov	r0, r3
 8014d78:	371c      	adds	r7, #28
 8014d7a:	46bd      	mov	sp, r7
 8014d7c:	bd90      	pop	{r4, r7, pc}
 8014d7e:	bf00      	nop
 8014d80:	0801c320 	.word	0x0801c320
 8014d84:	0801cadc 	.word	0x0801cadc
 8014d88:	0801c374 	.word	0x0801c374

08014d8c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014d8c:	b590      	push	{r4, r7, lr}
 8014d8e:	b087      	sub	sp, #28
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014d94:	2300      	movs	r3, #0
 8014d96:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d106      	bne.n	8014dac <tcp_keepalive+0x20>
 8014d9e:	4b18      	ldr	r3, [pc, #96]	; (8014e00 <tcp_keepalive+0x74>)
 8014da0:	f640 0224 	movw	r2, #2084	; 0x824
 8014da4:	4917      	ldr	r1, [pc, #92]	; (8014e04 <tcp_keepalive+0x78>)
 8014da6:	4818      	ldr	r0, [pc, #96]	; (8014e08 <tcp_keepalive+0x7c>)
 8014da8:	f003 fa22 	bl	80181f0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014dac:	7dfb      	ldrb	r3, [r7, #23]
 8014dae:	b29c      	uxth	r4, r3
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014db4:	3b01      	subs	r3, #1
 8014db6:	4618      	mov	r0, r3
 8014db8:	f7f8 f991 	bl	800d0de <lwip_htonl>
 8014dbc:	4603      	mov	r3, r0
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	4621      	mov	r1, r4
 8014dc2:	6878      	ldr	r0, [r7, #4]
 8014dc4:	f7ff fe66 	bl	8014a94 <tcp_output_alloc_header>
 8014dc8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014dca:	693b      	ldr	r3, [r7, #16]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d102      	bne.n	8014dd6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014dd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014dd4:	e010      	b.n	8014df8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014dd6:	7dfb      	ldrb	r3, [r7, #23]
 8014dd8:	2200      	movs	r2, #0
 8014dda:	6939      	ldr	r1, [r7, #16]
 8014ddc:	6878      	ldr	r0, [r7, #4]
 8014dde:	f7ff fe97 	bl	8014b10 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014de2:	687a      	ldr	r2, [r7, #4]
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	3304      	adds	r3, #4
 8014de8:	6939      	ldr	r1, [r7, #16]
 8014dea:	6878      	ldr	r0, [r7, #4]
 8014dec:	f7ff fed0 	bl	8014b90 <tcp_output_control_segment>
 8014df0:	4603      	mov	r3, r0
 8014df2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014df8:	4618      	mov	r0, r3
 8014dfa:	371c      	adds	r7, #28
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	bd90      	pop	{r4, r7, pc}
 8014e00:	0801c320 	.word	0x0801c320
 8014e04:	0801cafc 	.word	0x0801cafc
 8014e08:	0801c374 	.word	0x0801c374

08014e0c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014e0c:	b590      	push	{r4, r7, lr}
 8014e0e:	b08b      	sub	sp, #44	; 0x2c
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014e14:	2300      	movs	r3, #0
 8014e16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d106      	bne.n	8014e2e <tcp_zero_window_probe+0x22>
 8014e20:	4b4c      	ldr	r3, [pc, #304]	; (8014f54 <tcp_zero_window_probe+0x148>)
 8014e22:	f640 024f 	movw	r2, #2127	; 0x84f
 8014e26:	494c      	ldr	r1, [pc, #304]	; (8014f58 <tcp_zero_window_probe+0x14c>)
 8014e28:	484c      	ldr	r0, [pc, #304]	; (8014f5c <tcp_zero_window_probe+0x150>)
 8014e2a:	f003 f9e1 	bl	80181f0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e32:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014e34:	6a3b      	ldr	r3, [r7, #32]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d101      	bne.n	8014e3e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	e086      	b.n	8014f4c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014e44:	2bff      	cmp	r3, #255	; 0xff
 8014e46:	d007      	beq.n	8014e58 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014e4e:	3301      	adds	r3, #1
 8014e50:	b2da      	uxtb	r2, r3
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014e58:	6a3b      	ldr	r3, [r7, #32]
 8014e5a:	68db      	ldr	r3, [r3, #12]
 8014e5c:	899b      	ldrh	r3, [r3, #12]
 8014e5e:	b29b      	uxth	r3, r3
 8014e60:	4618      	mov	r0, r3
 8014e62:	f7f8 f927 	bl	800d0b4 <lwip_htons>
 8014e66:	4603      	mov	r3, r0
 8014e68:	b2db      	uxtb	r3, r3
 8014e6a:	f003 0301 	and.w	r3, r3, #1
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d005      	beq.n	8014e7e <tcp_zero_window_probe+0x72>
 8014e72:	6a3b      	ldr	r3, [r7, #32]
 8014e74:	891b      	ldrh	r3, [r3, #8]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d101      	bne.n	8014e7e <tcp_zero_window_probe+0x72>
 8014e7a:	2301      	movs	r3, #1
 8014e7c:	e000      	b.n	8014e80 <tcp_zero_window_probe+0x74>
 8014e7e:	2300      	movs	r3, #0
 8014e80:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014e82:	7ffb      	ldrb	r3, [r7, #31]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	bf0c      	ite	eq
 8014e88:	2301      	moveq	r3, #1
 8014e8a:	2300      	movne	r3, #0
 8014e8c:	b2db      	uxtb	r3, r3
 8014e8e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e94:	b299      	uxth	r1, r3
 8014e96:	6a3b      	ldr	r3, [r7, #32]
 8014e98:	68db      	ldr	r3, [r3, #12]
 8014e9a:	685b      	ldr	r3, [r3, #4]
 8014e9c:	8bba      	ldrh	r2, [r7, #28]
 8014e9e:	6878      	ldr	r0, [r7, #4]
 8014ea0:	f7ff fdf8 	bl	8014a94 <tcp_output_alloc_header>
 8014ea4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014ea6:	69bb      	ldr	r3, [r7, #24]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d102      	bne.n	8014eb2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014eac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014eb0:	e04c      	b.n	8014f4c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014eb2:	69bb      	ldr	r3, [r7, #24]
 8014eb4:	685b      	ldr	r3, [r3, #4]
 8014eb6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014eb8:	7ffb      	ldrb	r3, [r7, #31]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d011      	beq.n	8014ee2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014ebe:	697b      	ldr	r3, [r7, #20]
 8014ec0:	899b      	ldrh	r3, [r3, #12]
 8014ec2:	b29b      	uxth	r3, r3
 8014ec4:	b21b      	sxth	r3, r3
 8014ec6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014eca:	b21c      	sxth	r4, r3
 8014ecc:	2011      	movs	r0, #17
 8014ece:	f7f8 f8f1 	bl	800d0b4 <lwip_htons>
 8014ed2:	4603      	mov	r3, r0
 8014ed4:	b21b      	sxth	r3, r3
 8014ed6:	4323      	orrs	r3, r4
 8014ed8:	b21b      	sxth	r3, r3
 8014eda:	b29a      	uxth	r2, r3
 8014edc:	697b      	ldr	r3, [r7, #20]
 8014ede:	819a      	strh	r2, [r3, #12]
 8014ee0:	e010      	b.n	8014f04 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014ee2:	69bb      	ldr	r3, [r7, #24]
 8014ee4:	685b      	ldr	r3, [r3, #4]
 8014ee6:	3314      	adds	r3, #20
 8014ee8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014eea:	6a3b      	ldr	r3, [r7, #32]
 8014eec:	6858      	ldr	r0, [r3, #4]
 8014eee:	6a3b      	ldr	r3, [r7, #32]
 8014ef0:	685b      	ldr	r3, [r3, #4]
 8014ef2:	891a      	ldrh	r2, [r3, #8]
 8014ef4:	6a3b      	ldr	r3, [r7, #32]
 8014ef6:	891b      	ldrh	r3, [r3, #8]
 8014ef8:	1ad3      	subs	r3, r2, r3
 8014efa:	b29b      	uxth	r3, r3
 8014efc:	2201      	movs	r2, #1
 8014efe:	6939      	ldr	r1, [r7, #16]
 8014f00:	f7f9 ff58 	bl	800edb4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014f04:	6a3b      	ldr	r3, [r7, #32]
 8014f06:	68db      	ldr	r3, [r3, #12]
 8014f08:	685b      	ldr	r3, [r3, #4]
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	f7f8 f8e7 	bl	800d0de <lwip_htonl>
 8014f10:	4603      	mov	r3, r0
 8014f12:	3301      	adds	r3, #1
 8014f14:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	1ad3      	subs	r3, r2, r3
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	da02      	bge.n	8014f28 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	68fa      	ldr	r2, [r7, #12]
 8014f26:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014f2c:	2200      	movs	r2, #0
 8014f2e:	69b9      	ldr	r1, [r7, #24]
 8014f30:	6878      	ldr	r0, [r7, #4]
 8014f32:	f7ff fded 	bl	8014b10 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014f36:	687a      	ldr	r2, [r7, #4]
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	3304      	adds	r3, #4
 8014f3c:	69b9      	ldr	r1, [r7, #24]
 8014f3e:	6878      	ldr	r0, [r7, #4]
 8014f40:	f7ff fe26 	bl	8014b90 <tcp_output_control_segment>
 8014f44:	4603      	mov	r3, r0
 8014f46:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014f48:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	372c      	adds	r7, #44	; 0x2c
 8014f50:	46bd      	mov	sp, r7
 8014f52:	bd90      	pop	{r4, r7, pc}
 8014f54:	0801c320 	.word	0x0801c320
 8014f58:	0801cb18 	.word	0x0801cb18
 8014f5c:	0801c374 	.word	0x0801c374

08014f60 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b082      	sub	sp, #8
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014f68:	f7fa f812 	bl	800ef90 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014f6c:	4b0a      	ldr	r3, [pc, #40]	; (8014f98 <tcpip_tcp_timer+0x38>)
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d103      	bne.n	8014f7c <tcpip_tcp_timer+0x1c>
 8014f74:	4b09      	ldr	r3, [pc, #36]	; (8014f9c <tcpip_tcp_timer+0x3c>)
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d005      	beq.n	8014f88 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014f7c:	2200      	movs	r2, #0
 8014f7e:	4908      	ldr	r1, [pc, #32]	; (8014fa0 <tcpip_tcp_timer+0x40>)
 8014f80:	20fa      	movs	r0, #250	; 0xfa
 8014f82:	f000 f8f3 	bl	801516c <sys_timeout>
 8014f86:	e003      	b.n	8014f90 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014f88:	4b06      	ldr	r3, [pc, #24]	; (8014fa4 <tcpip_tcp_timer+0x44>)
 8014f8a:	2200      	movs	r2, #0
 8014f8c:	601a      	str	r2, [r3, #0]
  }
}
 8014f8e:	bf00      	nop
 8014f90:	bf00      	nop
 8014f92:	3708      	adds	r7, #8
 8014f94:	46bd      	mov	sp, r7
 8014f96:	bd80      	pop	{r7, pc}
 8014f98:	20018ba4 	.word	0x20018ba4
 8014f9c:	20018bb4 	.word	0x20018bb4
 8014fa0:	08014f61 	.word	0x08014f61
 8014fa4:	200052c8 	.word	0x200052c8

08014fa8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014fac:	4b0a      	ldr	r3, [pc, #40]	; (8014fd8 <tcp_timer_needed+0x30>)
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d10f      	bne.n	8014fd4 <tcp_timer_needed+0x2c>
 8014fb4:	4b09      	ldr	r3, [pc, #36]	; (8014fdc <tcp_timer_needed+0x34>)
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d103      	bne.n	8014fc4 <tcp_timer_needed+0x1c>
 8014fbc:	4b08      	ldr	r3, [pc, #32]	; (8014fe0 <tcp_timer_needed+0x38>)
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d007      	beq.n	8014fd4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014fc4:	4b04      	ldr	r3, [pc, #16]	; (8014fd8 <tcp_timer_needed+0x30>)
 8014fc6:	2201      	movs	r2, #1
 8014fc8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014fca:	2200      	movs	r2, #0
 8014fcc:	4905      	ldr	r1, [pc, #20]	; (8014fe4 <tcp_timer_needed+0x3c>)
 8014fce:	20fa      	movs	r0, #250	; 0xfa
 8014fd0:	f000 f8cc 	bl	801516c <sys_timeout>
  }
}
 8014fd4:	bf00      	nop
 8014fd6:	bd80      	pop	{r7, pc}
 8014fd8:	200052c8 	.word	0x200052c8
 8014fdc:	20018ba4 	.word	0x20018ba4
 8014fe0:	20018bb4 	.word	0x20018bb4
 8014fe4:	08014f61 	.word	0x08014f61

08014fe8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014fe8:	b580      	push	{r7, lr}
 8014fea:	b086      	sub	sp, #24
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	60f8      	str	r0, [r7, #12]
 8014ff0:	60b9      	str	r1, [r7, #8]
 8014ff2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014ff4:	200a      	movs	r0, #10
 8014ff6:	f7f8 fdf1 	bl	800dbdc <memp_malloc>
 8014ffa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014ffc:	693b      	ldr	r3, [r7, #16]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d109      	bne.n	8015016 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8015002:	693b      	ldr	r3, [r7, #16]
 8015004:	2b00      	cmp	r3, #0
 8015006:	d151      	bne.n	80150ac <sys_timeout_abs+0xc4>
 8015008:	4b2a      	ldr	r3, [pc, #168]	; (80150b4 <sys_timeout_abs+0xcc>)
 801500a:	22be      	movs	r2, #190	; 0xbe
 801500c:	492a      	ldr	r1, [pc, #168]	; (80150b8 <sys_timeout_abs+0xd0>)
 801500e:	482b      	ldr	r0, [pc, #172]	; (80150bc <sys_timeout_abs+0xd4>)
 8015010:	f003 f8ee 	bl	80181f0 <iprintf>
    return;
 8015014:	e04a      	b.n	80150ac <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8015016:	693b      	ldr	r3, [r7, #16]
 8015018:	2200      	movs	r2, #0
 801501a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801501c:	693b      	ldr	r3, [r7, #16]
 801501e:	68ba      	ldr	r2, [r7, #8]
 8015020:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015022:	693b      	ldr	r3, [r7, #16]
 8015024:	687a      	ldr	r2, [r7, #4]
 8015026:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8015028:	693b      	ldr	r3, [r7, #16]
 801502a:	68fa      	ldr	r2, [r7, #12]
 801502c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801502e:	4b24      	ldr	r3, [pc, #144]	; (80150c0 <sys_timeout_abs+0xd8>)
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d103      	bne.n	801503e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8015036:	4a22      	ldr	r2, [pc, #136]	; (80150c0 <sys_timeout_abs+0xd8>)
 8015038:	693b      	ldr	r3, [r7, #16]
 801503a:	6013      	str	r3, [r2, #0]
    return;
 801503c:	e037      	b.n	80150ae <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801503e:	693b      	ldr	r3, [r7, #16]
 8015040:	685a      	ldr	r2, [r3, #4]
 8015042:	4b1f      	ldr	r3, [pc, #124]	; (80150c0 <sys_timeout_abs+0xd8>)
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	685b      	ldr	r3, [r3, #4]
 8015048:	1ad3      	subs	r3, r2, r3
 801504a:	0fdb      	lsrs	r3, r3, #31
 801504c:	f003 0301 	and.w	r3, r3, #1
 8015050:	b2db      	uxtb	r3, r3
 8015052:	2b00      	cmp	r3, #0
 8015054:	d007      	beq.n	8015066 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8015056:	4b1a      	ldr	r3, [pc, #104]	; (80150c0 <sys_timeout_abs+0xd8>)
 8015058:	681a      	ldr	r2, [r3, #0]
 801505a:	693b      	ldr	r3, [r7, #16]
 801505c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801505e:	4a18      	ldr	r2, [pc, #96]	; (80150c0 <sys_timeout_abs+0xd8>)
 8015060:	693b      	ldr	r3, [r7, #16]
 8015062:	6013      	str	r3, [r2, #0]
 8015064:	e023      	b.n	80150ae <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015066:	4b16      	ldr	r3, [pc, #88]	; (80150c0 <sys_timeout_abs+0xd8>)
 8015068:	681b      	ldr	r3, [r3, #0]
 801506a:	617b      	str	r3, [r7, #20]
 801506c:	e01a      	b.n	80150a4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801506e:	697b      	ldr	r3, [r7, #20]
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d00b      	beq.n	801508e <sys_timeout_abs+0xa6>
 8015076:	693b      	ldr	r3, [r7, #16]
 8015078:	685a      	ldr	r2, [r3, #4]
 801507a:	697b      	ldr	r3, [r7, #20]
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	685b      	ldr	r3, [r3, #4]
 8015080:	1ad3      	subs	r3, r2, r3
 8015082:	0fdb      	lsrs	r3, r3, #31
 8015084:	f003 0301 	and.w	r3, r3, #1
 8015088:	b2db      	uxtb	r3, r3
 801508a:	2b00      	cmp	r3, #0
 801508c:	d007      	beq.n	801509e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801508e:	697b      	ldr	r3, [r7, #20]
 8015090:	681a      	ldr	r2, [r3, #0]
 8015092:	693b      	ldr	r3, [r7, #16]
 8015094:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015096:	697b      	ldr	r3, [r7, #20]
 8015098:	693a      	ldr	r2, [r7, #16]
 801509a:	601a      	str	r2, [r3, #0]
        break;
 801509c:	e007      	b.n	80150ae <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801509e:	697b      	ldr	r3, [r7, #20]
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	617b      	str	r3, [r7, #20]
 80150a4:	697b      	ldr	r3, [r7, #20]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d1e1      	bne.n	801506e <sys_timeout_abs+0x86>
 80150aa:	e000      	b.n	80150ae <sys_timeout_abs+0xc6>
    return;
 80150ac:	bf00      	nop
      }
    }
  }
}
 80150ae:	3718      	adds	r7, #24
 80150b0:	46bd      	mov	sp, r7
 80150b2:	bd80      	pop	{r7, pc}
 80150b4:	0801cb3c 	.word	0x0801cb3c
 80150b8:	0801cb70 	.word	0x0801cb70
 80150bc:	0801cbb0 	.word	0x0801cbb0
 80150c0:	200052c0 	.word	0x200052c0

080150c4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80150c4:	b580      	push	{r7, lr}
 80150c6:	b086      	sub	sp, #24
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80150d0:	697b      	ldr	r3, [r7, #20]
 80150d2:	685b      	ldr	r3, [r3, #4]
 80150d4:	4798      	blx	r3

  now = sys_now();
 80150d6:	f7f2 fe2b 	bl	8007d30 <sys_now>
 80150da:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80150dc:	697b      	ldr	r3, [r7, #20]
 80150de:	681a      	ldr	r2, [r3, #0]
 80150e0:	4b0f      	ldr	r3, [pc, #60]	; (8015120 <lwip_cyclic_timer+0x5c>)
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	4413      	add	r3, r2
 80150e6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80150e8:	68fa      	ldr	r2, [r7, #12]
 80150ea:	693b      	ldr	r3, [r7, #16]
 80150ec:	1ad3      	subs	r3, r2, r3
 80150ee:	0fdb      	lsrs	r3, r3, #31
 80150f0:	f003 0301 	and.w	r3, r3, #1
 80150f4:	b2db      	uxtb	r3, r3
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d009      	beq.n	801510e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80150fa:	697b      	ldr	r3, [r7, #20]
 80150fc:	681a      	ldr	r2, [r3, #0]
 80150fe:	693b      	ldr	r3, [r7, #16]
 8015100:	4413      	add	r3, r2
 8015102:	687a      	ldr	r2, [r7, #4]
 8015104:	4907      	ldr	r1, [pc, #28]	; (8015124 <lwip_cyclic_timer+0x60>)
 8015106:	4618      	mov	r0, r3
 8015108:	f7ff ff6e 	bl	8014fe8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801510c:	e004      	b.n	8015118 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801510e:	687a      	ldr	r2, [r7, #4]
 8015110:	4904      	ldr	r1, [pc, #16]	; (8015124 <lwip_cyclic_timer+0x60>)
 8015112:	68f8      	ldr	r0, [r7, #12]
 8015114:	f7ff ff68 	bl	8014fe8 <sys_timeout_abs>
}
 8015118:	bf00      	nop
 801511a:	3718      	adds	r7, #24
 801511c:	46bd      	mov	sp, r7
 801511e:	bd80      	pop	{r7, pc}
 8015120:	200052c4 	.word	0x200052c4
 8015124:	080150c5 	.word	0x080150c5

08015128 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015128:	b580      	push	{r7, lr}
 801512a:	b082      	sub	sp, #8
 801512c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801512e:	2301      	movs	r3, #1
 8015130:	607b      	str	r3, [r7, #4]
 8015132:	e00e      	b.n	8015152 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015134:	4a0b      	ldr	r2, [pc, #44]	; (8015164 <sys_timeouts_init+0x3c>)
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	00db      	lsls	r3, r3, #3
 8015140:	4a08      	ldr	r2, [pc, #32]	; (8015164 <sys_timeouts_init+0x3c>)
 8015142:	4413      	add	r3, r2
 8015144:	461a      	mov	r2, r3
 8015146:	4908      	ldr	r1, [pc, #32]	; (8015168 <sys_timeouts_init+0x40>)
 8015148:	f000 f810 	bl	801516c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	3301      	adds	r3, #1
 8015150:	607b      	str	r3, [r7, #4]
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	2b02      	cmp	r3, #2
 8015156:	d9ed      	bls.n	8015134 <sys_timeouts_init+0xc>
  }
}
 8015158:	bf00      	nop
 801515a:	bf00      	nop
 801515c:	3708      	adds	r7, #8
 801515e:	46bd      	mov	sp, r7
 8015160:	bd80      	pop	{r7, pc}
 8015162:	bf00      	nop
 8015164:	08021508 	.word	0x08021508
 8015168:	080150c5 	.word	0x080150c5

0801516c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801516c:	b580      	push	{r7, lr}
 801516e:	b086      	sub	sp, #24
 8015170:	af00      	add	r7, sp, #0
 8015172:	60f8      	str	r0, [r7, #12]
 8015174:	60b9      	str	r1, [r7, #8]
 8015176:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801517e:	d306      	bcc.n	801518e <sys_timeout+0x22>
 8015180:	4b0a      	ldr	r3, [pc, #40]	; (80151ac <sys_timeout+0x40>)
 8015182:	f240 1229 	movw	r2, #297	; 0x129
 8015186:	490a      	ldr	r1, [pc, #40]	; (80151b0 <sys_timeout+0x44>)
 8015188:	480a      	ldr	r0, [pc, #40]	; (80151b4 <sys_timeout+0x48>)
 801518a:	f003 f831 	bl	80181f0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801518e:	f7f2 fdcf 	bl	8007d30 <sys_now>
 8015192:	4602      	mov	r2, r0
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	4413      	add	r3, r2
 8015198:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801519a:	687a      	ldr	r2, [r7, #4]
 801519c:	68b9      	ldr	r1, [r7, #8]
 801519e:	6978      	ldr	r0, [r7, #20]
 80151a0:	f7ff ff22 	bl	8014fe8 <sys_timeout_abs>
#endif
}
 80151a4:	bf00      	nop
 80151a6:	3718      	adds	r7, #24
 80151a8:	46bd      	mov	sp, r7
 80151aa:	bd80      	pop	{r7, pc}
 80151ac:	0801cb3c 	.word	0x0801cb3c
 80151b0:	0801cbd8 	.word	0x0801cbd8
 80151b4:	0801cbb0 	.word	0x0801cbb0

080151b8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80151b8:	b580      	push	{r7, lr}
 80151ba:	b084      	sub	sp, #16
 80151bc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80151be:	f7f2 fdb7 	bl	8007d30 <sys_now>
 80151c2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80151c4:	4b17      	ldr	r3, [pc, #92]	; (8015224 <sys_check_timeouts+0x6c>)
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80151ca:	68bb      	ldr	r3, [r7, #8]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d022      	beq.n	8015216 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80151d0:	68bb      	ldr	r3, [r7, #8]
 80151d2:	685b      	ldr	r3, [r3, #4]
 80151d4:	68fa      	ldr	r2, [r7, #12]
 80151d6:	1ad3      	subs	r3, r2, r3
 80151d8:	0fdb      	lsrs	r3, r3, #31
 80151da:	f003 0301 	and.w	r3, r3, #1
 80151de:	b2db      	uxtb	r3, r3
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d11a      	bne.n	801521a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80151e4:	68bb      	ldr	r3, [r7, #8]
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	4a0e      	ldr	r2, [pc, #56]	; (8015224 <sys_check_timeouts+0x6c>)
 80151ea:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80151ec:	68bb      	ldr	r3, [r7, #8]
 80151ee:	689b      	ldr	r3, [r3, #8]
 80151f0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80151f2:	68bb      	ldr	r3, [r7, #8]
 80151f4:	68db      	ldr	r3, [r3, #12]
 80151f6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80151f8:	68bb      	ldr	r3, [r7, #8]
 80151fa:	685b      	ldr	r3, [r3, #4]
 80151fc:	4a0a      	ldr	r2, [pc, #40]	; (8015228 <sys_check_timeouts+0x70>)
 80151fe:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8015200:	68b9      	ldr	r1, [r7, #8]
 8015202:	200a      	movs	r0, #10
 8015204:	f7f8 fd3c 	bl	800dc80 <memp_free>
    if (handler != NULL) {
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d0da      	beq.n	80151c4 <sys_check_timeouts+0xc>
      handler(arg);
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	6838      	ldr	r0, [r7, #0]
 8015212:	4798      	blx	r3
  do {
 8015214:	e7d6      	b.n	80151c4 <sys_check_timeouts+0xc>
      return;
 8015216:	bf00      	nop
 8015218:	e000      	b.n	801521c <sys_check_timeouts+0x64>
      return;
 801521a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801521c:	3710      	adds	r7, #16
 801521e:	46bd      	mov	sp, r7
 8015220:	bd80      	pop	{r7, pc}
 8015222:	bf00      	nop
 8015224:	200052c0 	.word	0x200052c0
 8015228:	200052c4 	.word	0x200052c4

0801522c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801522c:	b580      	push	{r7, lr}
 801522e:	b082      	sub	sp, #8
 8015230:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8015232:	4b16      	ldr	r3, [pc, #88]	; (801528c <sys_timeouts_sleeptime+0x60>)
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	2b00      	cmp	r3, #0
 8015238:	d102      	bne.n	8015240 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801523a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801523e:	e020      	b.n	8015282 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8015240:	f7f2 fd76 	bl	8007d30 <sys_now>
 8015244:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8015246:	4b11      	ldr	r3, [pc, #68]	; (801528c <sys_timeouts_sleeptime+0x60>)
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	685a      	ldr	r2, [r3, #4]
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	1ad3      	subs	r3, r2, r3
 8015250:	0fdb      	lsrs	r3, r3, #31
 8015252:	f003 0301 	and.w	r3, r3, #1
 8015256:	b2db      	uxtb	r3, r3
 8015258:	2b00      	cmp	r3, #0
 801525a:	d001      	beq.n	8015260 <sys_timeouts_sleeptime+0x34>
    return 0;
 801525c:	2300      	movs	r3, #0
 801525e:	e010      	b.n	8015282 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8015260:	4b0a      	ldr	r3, [pc, #40]	; (801528c <sys_timeouts_sleeptime+0x60>)
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	685a      	ldr	r2, [r3, #4]
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	1ad3      	subs	r3, r2, r3
 801526a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801526c:	683b      	ldr	r3, [r7, #0]
 801526e:	2b00      	cmp	r3, #0
 8015270:	da06      	bge.n	8015280 <sys_timeouts_sleeptime+0x54>
 8015272:	4b07      	ldr	r3, [pc, #28]	; (8015290 <sys_timeouts_sleeptime+0x64>)
 8015274:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8015278:	4906      	ldr	r1, [pc, #24]	; (8015294 <sys_timeouts_sleeptime+0x68>)
 801527a:	4807      	ldr	r0, [pc, #28]	; (8015298 <sys_timeouts_sleeptime+0x6c>)
 801527c:	f002 ffb8 	bl	80181f0 <iprintf>
    return ret;
 8015280:	683b      	ldr	r3, [r7, #0]
  }
}
 8015282:	4618      	mov	r0, r3
 8015284:	3708      	adds	r7, #8
 8015286:	46bd      	mov	sp, r7
 8015288:	bd80      	pop	{r7, pc}
 801528a:	bf00      	nop
 801528c:	200052c0 	.word	0x200052c0
 8015290:	0801cb3c 	.word	0x0801cb3c
 8015294:	0801cc10 	.word	0x0801cc10
 8015298:	0801cbb0 	.word	0x0801cbb0

0801529c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801529c:	b580      	push	{r7, lr}
 801529e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80152a0:	f003 f834 	bl	801830c <rand>
 80152a4:	4603      	mov	r3, r0
 80152a6:	b29b      	uxth	r3, r3
 80152a8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80152ac:	b29b      	uxth	r3, r3
 80152ae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80152b2:	b29a      	uxth	r2, r3
 80152b4:	4b01      	ldr	r3, [pc, #4]	; (80152bc <udp_init+0x20>)
 80152b6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80152b8:	bf00      	nop
 80152ba:	bd80      	pop	{r7, pc}
 80152bc:	2000072c 	.word	0x2000072c

080152c0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80152c0:	b580      	push	{r7, lr}
 80152c2:	b084      	sub	sp, #16
 80152c4:	af00      	add	r7, sp, #0
 80152c6:	60f8      	str	r0, [r7, #12]
 80152c8:	60b9      	str	r1, [r7, #8]
 80152ca:	4613      	mov	r3, r2
 80152cc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d105      	bne.n	80152e0 <udp_input_local_match+0x20>
 80152d4:	4b27      	ldr	r3, [pc, #156]	; (8015374 <udp_input_local_match+0xb4>)
 80152d6:	2287      	movs	r2, #135	; 0x87
 80152d8:	4927      	ldr	r1, [pc, #156]	; (8015378 <udp_input_local_match+0xb8>)
 80152da:	4828      	ldr	r0, [pc, #160]	; (801537c <udp_input_local_match+0xbc>)
 80152dc:	f002 ff88 	bl	80181f0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80152e0:	68bb      	ldr	r3, [r7, #8]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d105      	bne.n	80152f2 <udp_input_local_match+0x32>
 80152e6:	4b23      	ldr	r3, [pc, #140]	; (8015374 <udp_input_local_match+0xb4>)
 80152e8:	2288      	movs	r2, #136	; 0x88
 80152ea:	4925      	ldr	r1, [pc, #148]	; (8015380 <udp_input_local_match+0xc0>)
 80152ec:	4823      	ldr	r0, [pc, #140]	; (801537c <udp_input_local_match+0xbc>)
 80152ee:	f002 ff7f 	bl	80181f0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	7a1b      	ldrb	r3, [r3, #8]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d00b      	beq.n	8015312 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	7a1a      	ldrb	r2, [r3, #8]
 80152fe:	4b21      	ldr	r3, [pc, #132]	; (8015384 <udp_input_local_match+0xc4>)
 8015300:	685b      	ldr	r3, [r3, #4]
 8015302:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015306:	3301      	adds	r3, #1
 8015308:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801530a:	429a      	cmp	r2, r3
 801530c:	d001      	beq.n	8015312 <udp_input_local_match+0x52>
    return 0;
 801530e:	2300      	movs	r3, #0
 8015310:	e02b      	b.n	801536a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8015312:	79fb      	ldrb	r3, [r7, #7]
 8015314:	2b00      	cmp	r3, #0
 8015316:	d018      	beq.n	801534a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015318:	68fb      	ldr	r3, [r7, #12]
 801531a:	2b00      	cmp	r3, #0
 801531c:	d013      	beq.n	8015346 <udp_input_local_match+0x86>
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	2b00      	cmp	r3, #0
 8015324:	d00f      	beq.n	8015346 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015326:	4b17      	ldr	r3, [pc, #92]	; (8015384 <udp_input_local_match+0xc4>)
 8015328:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801532a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801532e:	d00a      	beq.n	8015346 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	681a      	ldr	r2, [r3, #0]
 8015334:	4b13      	ldr	r3, [pc, #76]	; (8015384 <udp_input_local_match+0xc4>)
 8015336:	695b      	ldr	r3, [r3, #20]
 8015338:	405a      	eors	r2, r3
 801533a:	68bb      	ldr	r3, [r7, #8]
 801533c:	3308      	adds	r3, #8
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015342:	2b00      	cmp	r3, #0
 8015344:	d110      	bne.n	8015368 <udp_input_local_match+0xa8>
          return 1;
 8015346:	2301      	movs	r3, #1
 8015348:	e00f      	b.n	801536a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801534a:	68fb      	ldr	r3, [r7, #12]
 801534c:	2b00      	cmp	r3, #0
 801534e:	d009      	beq.n	8015364 <udp_input_local_match+0xa4>
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	2b00      	cmp	r3, #0
 8015356:	d005      	beq.n	8015364 <udp_input_local_match+0xa4>
 8015358:	68fb      	ldr	r3, [r7, #12]
 801535a:	681a      	ldr	r2, [r3, #0]
 801535c:	4b09      	ldr	r3, [pc, #36]	; (8015384 <udp_input_local_match+0xc4>)
 801535e:	695b      	ldr	r3, [r3, #20]
 8015360:	429a      	cmp	r2, r3
 8015362:	d101      	bne.n	8015368 <udp_input_local_match+0xa8>
        return 1;
 8015364:	2301      	movs	r3, #1
 8015366:	e000      	b.n	801536a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015368:	2300      	movs	r3, #0
}
 801536a:	4618      	mov	r0, r3
 801536c:	3710      	adds	r7, #16
 801536e:	46bd      	mov	sp, r7
 8015370:	bd80      	pop	{r7, pc}
 8015372:	bf00      	nop
 8015374:	0801cc24 	.word	0x0801cc24
 8015378:	0801cc54 	.word	0x0801cc54
 801537c:	0801cc78 	.word	0x0801cc78
 8015380:	0801cca0 	.word	0x0801cca0
 8015384:	2000e2d0 	.word	0x2000e2d0

08015388 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015388:	b590      	push	{r4, r7, lr}
 801538a:	b08d      	sub	sp, #52	; 0x34
 801538c:	af02      	add	r7, sp, #8
 801538e:	6078      	str	r0, [r7, #4]
 8015390:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015392:	2300      	movs	r3, #0
 8015394:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	2b00      	cmp	r3, #0
 801539a:	d105      	bne.n	80153a8 <udp_input+0x20>
 801539c:	4b7c      	ldr	r3, [pc, #496]	; (8015590 <udp_input+0x208>)
 801539e:	22cf      	movs	r2, #207	; 0xcf
 80153a0:	497c      	ldr	r1, [pc, #496]	; (8015594 <udp_input+0x20c>)
 80153a2:	487d      	ldr	r0, [pc, #500]	; (8015598 <udp_input+0x210>)
 80153a4:	f002 ff24 	bl	80181f0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80153a8:	683b      	ldr	r3, [r7, #0]
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d105      	bne.n	80153ba <udp_input+0x32>
 80153ae:	4b78      	ldr	r3, [pc, #480]	; (8015590 <udp_input+0x208>)
 80153b0:	22d0      	movs	r2, #208	; 0xd0
 80153b2:	497a      	ldr	r1, [pc, #488]	; (801559c <udp_input+0x214>)
 80153b4:	4878      	ldr	r0, [pc, #480]	; (8015598 <udp_input+0x210>)
 80153b6:	f002 ff1b 	bl	80181f0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	895b      	ldrh	r3, [r3, #10]
 80153be:	2b07      	cmp	r3, #7
 80153c0:	d803      	bhi.n	80153ca <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80153c2:	6878      	ldr	r0, [r7, #4]
 80153c4:	f7f9 fb00 	bl	800e9c8 <pbuf_free>
    goto end;
 80153c8:	e0de      	b.n	8015588 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	685b      	ldr	r3, [r3, #4]
 80153ce:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80153d0:	4b73      	ldr	r3, [pc, #460]	; (80155a0 <udp_input+0x218>)
 80153d2:	695b      	ldr	r3, [r3, #20]
 80153d4:	4a72      	ldr	r2, [pc, #456]	; (80155a0 <udp_input+0x218>)
 80153d6:	6812      	ldr	r2, [r2, #0]
 80153d8:	4611      	mov	r1, r2
 80153da:	4618      	mov	r0, r3
 80153dc:	f001 fc88 	bl	8016cf0 <ip4_addr_isbroadcast_u32>
 80153e0:	4603      	mov	r3, r0
 80153e2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80153e4:	697b      	ldr	r3, [r7, #20]
 80153e6:	881b      	ldrh	r3, [r3, #0]
 80153e8:	b29b      	uxth	r3, r3
 80153ea:	4618      	mov	r0, r3
 80153ec:	f7f7 fe62 	bl	800d0b4 <lwip_htons>
 80153f0:	4603      	mov	r3, r0
 80153f2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80153f4:	697b      	ldr	r3, [r7, #20]
 80153f6:	885b      	ldrh	r3, [r3, #2]
 80153f8:	b29b      	uxth	r3, r3
 80153fa:	4618      	mov	r0, r3
 80153fc:	f7f7 fe5a 	bl	800d0b4 <lwip_htons>
 8015400:	4603      	mov	r3, r0
 8015402:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015404:	2300      	movs	r3, #0
 8015406:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8015408:	2300      	movs	r3, #0
 801540a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801540c:	2300      	movs	r3, #0
 801540e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015410:	4b64      	ldr	r3, [pc, #400]	; (80155a4 <udp_input+0x21c>)
 8015412:	681b      	ldr	r3, [r3, #0]
 8015414:	627b      	str	r3, [r7, #36]	; 0x24
 8015416:	e054      	b.n	80154c2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801541a:	8a5b      	ldrh	r3, [r3, #18]
 801541c:	89fa      	ldrh	r2, [r7, #14]
 801541e:	429a      	cmp	r2, r3
 8015420:	d14a      	bne.n	80154b8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8015422:	7cfb      	ldrb	r3, [r7, #19]
 8015424:	461a      	mov	r2, r3
 8015426:	6839      	ldr	r1, [r7, #0]
 8015428:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801542a:	f7ff ff49 	bl	80152c0 <udp_input_local_match>
 801542e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015430:	2b00      	cmp	r3, #0
 8015432:	d041      	beq.n	80154b8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015436:	7c1b      	ldrb	r3, [r3, #16]
 8015438:	f003 0304 	and.w	r3, r3, #4
 801543c:	2b00      	cmp	r3, #0
 801543e:	d11d      	bne.n	801547c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015440:	69fb      	ldr	r3, [r7, #28]
 8015442:	2b00      	cmp	r3, #0
 8015444:	d102      	bne.n	801544c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015448:	61fb      	str	r3, [r7, #28]
 801544a:	e017      	b.n	801547c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801544c:	7cfb      	ldrb	r3, [r7, #19]
 801544e:	2b00      	cmp	r3, #0
 8015450:	d014      	beq.n	801547c <udp_input+0xf4>
 8015452:	4b53      	ldr	r3, [pc, #332]	; (80155a0 <udp_input+0x218>)
 8015454:	695b      	ldr	r3, [r3, #20]
 8015456:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801545a:	d10f      	bne.n	801547c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801545c:	69fb      	ldr	r3, [r7, #28]
 801545e:	681a      	ldr	r2, [r3, #0]
 8015460:	683b      	ldr	r3, [r7, #0]
 8015462:	3304      	adds	r3, #4
 8015464:	681b      	ldr	r3, [r3, #0]
 8015466:	429a      	cmp	r2, r3
 8015468:	d008      	beq.n	801547c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801546c:	681a      	ldr	r2, [r3, #0]
 801546e:	683b      	ldr	r3, [r7, #0]
 8015470:	3304      	adds	r3, #4
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	429a      	cmp	r2, r3
 8015476:	d101      	bne.n	801547c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801547a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801547e:	8a9b      	ldrh	r3, [r3, #20]
 8015480:	8a3a      	ldrh	r2, [r7, #16]
 8015482:	429a      	cmp	r2, r3
 8015484:	d118      	bne.n	80154b8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015488:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801548a:	2b00      	cmp	r3, #0
 801548c:	d005      	beq.n	801549a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015490:	685a      	ldr	r2, [r3, #4]
 8015492:	4b43      	ldr	r3, [pc, #268]	; (80155a0 <udp_input+0x218>)
 8015494:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015496:	429a      	cmp	r2, r3
 8015498:	d10e      	bne.n	80154b8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801549a:	6a3b      	ldr	r3, [r7, #32]
 801549c:	2b00      	cmp	r3, #0
 801549e:	d014      	beq.n	80154ca <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80154a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154a2:	68da      	ldr	r2, [r3, #12]
 80154a4:	6a3b      	ldr	r3, [r7, #32]
 80154a6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80154a8:	4b3e      	ldr	r3, [pc, #248]	; (80155a4 <udp_input+0x21c>)
 80154aa:	681a      	ldr	r2, [r3, #0]
 80154ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154ae:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80154b0:	4a3c      	ldr	r2, [pc, #240]	; (80155a4 <udp_input+0x21c>)
 80154b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154b4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80154b6:	e008      	b.n	80154ca <udp_input+0x142>
      }
    }

    prev = pcb;
 80154b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154ba:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80154bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154be:	68db      	ldr	r3, [r3, #12]
 80154c0:	627b      	str	r3, [r7, #36]	; 0x24
 80154c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d1a7      	bne.n	8015418 <udp_input+0x90>
 80154c8:	e000      	b.n	80154cc <udp_input+0x144>
        break;
 80154ca:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80154cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d101      	bne.n	80154d6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80154d2:	69fb      	ldr	r3, [r7, #28]
 80154d4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80154d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d002      	beq.n	80154e2 <udp_input+0x15a>
    for_us = 1;
 80154dc:	2301      	movs	r3, #1
 80154de:	76fb      	strb	r3, [r7, #27]
 80154e0:	e00a      	b.n	80154f8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80154e2:	683b      	ldr	r3, [r7, #0]
 80154e4:	3304      	adds	r3, #4
 80154e6:	681a      	ldr	r2, [r3, #0]
 80154e8:	4b2d      	ldr	r3, [pc, #180]	; (80155a0 <udp_input+0x218>)
 80154ea:	695b      	ldr	r3, [r3, #20]
 80154ec:	429a      	cmp	r2, r3
 80154ee:	bf0c      	ite	eq
 80154f0:	2301      	moveq	r3, #1
 80154f2:	2300      	movne	r3, #0
 80154f4:	b2db      	uxtb	r3, r3
 80154f6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80154f8:	7efb      	ldrb	r3, [r7, #27]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d041      	beq.n	8015582 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80154fe:	2108      	movs	r1, #8
 8015500:	6878      	ldr	r0, [r7, #4]
 8015502:	f7f9 f9db 	bl	800e8bc <pbuf_remove_header>
 8015506:	4603      	mov	r3, r0
 8015508:	2b00      	cmp	r3, #0
 801550a:	d00a      	beq.n	8015522 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801550c:	4b20      	ldr	r3, [pc, #128]	; (8015590 <udp_input+0x208>)
 801550e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8015512:	4925      	ldr	r1, [pc, #148]	; (80155a8 <udp_input+0x220>)
 8015514:	4820      	ldr	r0, [pc, #128]	; (8015598 <udp_input+0x210>)
 8015516:	f002 fe6b 	bl	80181f0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801551a:	6878      	ldr	r0, [r7, #4]
 801551c:	f7f9 fa54 	bl	800e9c8 <pbuf_free>
      goto end;
 8015520:	e032      	b.n	8015588 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8015522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015524:	2b00      	cmp	r3, #0
 8015526:	d012      	beq.n	801554e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801552a:	699b      	ldr	r3, [r3, #24]
 801552c:	2b00      	cmp	r3, #0
 801552e:	d00a      	beq.n	8015546 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015532:	699c      	ldr	r4, [r3, #24]
 8015534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015536:	69d8      	ldr	r0, [r3, #28]
 8015538:	8a3b      	ldrh	r3, [r7, #16]
 801553a:	9300      	str	r3, [sp, #0]
 801553c:	4b1b      	ldr	r3, [pc, #108]	; (80155ac <udp_input+0x224>)
 801553e:	687a      	ldr	r2, [r7, #4]
 8015540:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015542:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015544:	e021      	b.n	801558a <udp_input+0x202>
        pbuf_free(p);
 8015546:	6878      	ldr	r0, [r7, #4]
 8015548:	f7f9 fa3e 	bl	800e9c8 <pbuf_free>
        goto end;
 801554c:	e01c      	b.n	8015588 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801554e:	7cfb      	ldrb	r3, [r7, #19]
 8015550:	2b00      	cmp	r3, #0
 8015552:	d112      	bne.n	801557a <udp_input+0x1f2>
 8015554:	4b12      	ldr	r3, [pc, #72]	; (80155a0 <udp_input+0x218>)
 8015556:	695b      	ldr	r3, [r3, #20]
 8015558:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801555c:	2be0      	cmp	r3, #224	; 0xe0
 801555e:	d00c      	beq.n	801557a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015560:	4b0f      	ldr	r3, [pc, #60]	; (80155a0 <udp_input+0x218>)
 8015562:	899b      	ldrh	r3, [r3, #12]
 8015564:	3308      	adds	r3, #8
 8015566:	b29b      	uxth	r3, r3
 8015568:	b21b      	sxth	r3, r3
 801556a:	4619      	mov	r1, r3
 801556c:	6878      	ldr	r0, [r7, #4]
 801556e:	f7f9 fa18 	bl	800e9a2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015572:	2103      	movs	r1, #3
 8015574:	6878      	ldr	r0, [r7, #4]
 8015576:	f001 f89b 	bl	80166b0 <icmp_dest_unreach>
      pbuf_free(p);
 801557a:	6878      	ldr	r0, [r7, #4]
 801557c:	f7f9 fa24 	bl	800e9c8 <pbuf_free>
  return;
 8015580:	e003      	b.n	801558a <udp_input+0x202>
    pbuf_free(p);
 8015582:	6878      	ldr	r0, [r7, #4]
 8015584:	f7f9 fa20 	bl	800e9c8 <pbuf_free>
  return;
 8015588:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801558a:	372c      	adds	r7, #44	; 0x2c
 801558c:	46bd      	mov	sp, r7
 801558e:	bd90      	pop	{r4, r7, pc}
 8015590:	0801cc24 	.word	0x0801cc24
 8015594:	0801ccc8 	.word	0x0801ccc8
 8015598:	0801cc78 	.word	0x0801cc78
 801559c:	0801cce0 	.word	0x0801cce0
 80155a0:	2000e2d0 	.word	0x2000e2d0
 80155a4:	20018bbc 	.word	0x20018bbc
 80155a8:	0801ccfc 	.word	0x0801ccfc
 80155ac:	2000e2e0 	.word	0x2000e2e0

080155b0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80155b0:	b480      	push	{r7}
 80155b2:	b085      	sub	sp, #20
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	6078      	str	r0, [r7, #4]
 80155b8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d01e      	beq.n	80155fe <udp_netif_ip_addr_changed+0x4e>
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d01a      	beq.n	80155fe <udp_netif_ip_addr_changed+0x4e>
 80155c8:	683b      	ldr	r3, [r7, #0]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d017      	beq.n	80155fe <udp_netif_ip_addr_changed+0x4e>
 80155ce:	683b      	ldr	r3, [r7, #0]
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d013      	beq.n	80155fe <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80155d6:	4b0d      	ldr	r3, [pc, #52]	; (801560c <udp_netif_ip_addr_changed+0x5c>)
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	60fb      	str	r3, [r7, #12]
 80155dc:	e00c      	b.n	80155f8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	681a      	ldr	r2, [r3, #0]
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	681b      	ldr	r3, [r3, #0]
 80155e6:	429a      	cmp	r2, r3
 80155e8:	d103      	bne.n	80155f2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80155ea:	683b      	ldr	r3, [r7, #0]
 80155ec:	681a      	ldr	r2, [r3, #0]
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	68db      	ldr	r3, [r3, #12]
 80155f6:	60fb      	str	r3, [r7, #12]
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d1ef      	bne.n	80155de <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80155fe:	bf00      	nop
 8015600:	3714      	adds	r7, #20
 8015602:	46bd      	mov	sp, r7
 8015604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015608:	4770      	bx	lr
 801560a:	bf00      	nop
 801560c:	20018bbc 	.word	0x20018bbc

08015610 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015610:	b580      	push	{r7, lr}
 8015612:	b082      	sub	sp, #8
 8015614:	af00      	add	r7, sp, #0
 8015616:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015618:	4915      	ldr	r1, [pc, #84]	; (8015670 <etharp_free_entry+0x60>)
 801561a:	687a      	ldr	r2, [r7, #4]
 801561c:	4613      	mov	r3, r2
 801561e:	005b      	lsls	r3, r3, #1
 8015620:	4413      	add	r3, r2
 8015622:	00db      	lsls	r3, r3, #3
 8015624:	440b      	add	r3, r1
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d013      	beq.n	8015654 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801562c:	4910      	ldr	r1, [pc, #64]	; (8015670 <etharp_free_entry+0x60>)
 801562e:	687a      	ldr	r2, [r7, #4]
 8015630:	4613      	mov	r3, r2
 8015632:	005b      	lsls	r3, r3, #1
 8015634:	4413      	add	r3, r2
 8015636:	00db      	lsls	r3, r3, #3
 8015638:	440b      	add	r3, r1
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	4618      	mov	r0, r3
 801563e:	f7f9 f9c3 	bl	800e9c8 <pbuf_free>
    arp_table[i].q = NULL;
 8015642:	490b      	ldr	r1, [pc, #44]	; (8015670 <etharp_free_entry+0x60>)
 8015644:	687a      	ldr	r2, [r7, #4]
 8015646:	4613      	mov	r3, r2
 8015648:	005b      	lsls	r3, r3, #1
 801564a:	4413      	add	r3, r2
 801564c:	00db      	lsls	r3, r3, #3
 801564e:	440b      	add	r3, r1
 8015650:	2200      	movs	r2, #0
 8015652:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015654:	4906      	ldr	r1, [pc, #24]	; (8015670 <etharp_free_entry+0x60>)
 8015656:	687a      	ldr	r2, [r7, #4]
 8015658:	4613      	mov	r3, r2
 801565a:	005b      	lsls	r3, r3, #1
 801565c:	4413      	add	r3, r2
 801565e:	00db      	lsls	r3, r3, #3
 8015660:	440b      	add	r3, r1
 8015662:	3314      	adds	r3, #20
 8015664:	2200      	movs	r2, #0
 8015666:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015668:	bf00      	nop
 801566a:	3708      	adds	r7, #8
 801566c:	46bd      	mov	sp, r7
 801566e:	bd80      	pop	{r7, pc}
 8015670:	200052cc 	.word	0x200052cc

08015674 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015674:	b580      	push	{r7, lr}
 8015676:	b082      	sub	sp, #8
 8015678:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801567a:	2300      	movs	r3, #0
 801567c:	607b      	str	r3, [r7, #4]
 801567e:	e096      	b.n	80157ae <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015680:	494f      	ldr	r1, [pc, #316]	; (80157c0 <etharp_tmr+0x14c>)
 8015682:	687a      	ldr	r2, [r7, #4]
 8015684:	4613      	mov	r3, r2
 8015686:	005b      	lsls	r3, r3, #1
 8015688:	4413      	add	r3, r2
 801568a:	00db      	lsls	r3, r3, #3
 801568c:	440b      	add	r3, r1
 801568e:	3314      	adds	r3, #20
 8015690:	781b      	ldrb	r3, [r3, #0]
 8015692:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015694:	78fb      	ldrb	r3, [r7, #3]
 8015696:	2b00      	cmp	r3, #0
 8015698:	f000 8086 	beq.w	80157a8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801569c:	4948      	ldr	r1, [pc, #288]	; (80157c0 <etharp_tmr+0x14c>)
 801569e:	687a      	ldr	r2, [r7, #4]
 80156a0:	4613      	mov	r3, r2
 80156a2:	005b      	lsls	r3, r3, #1
 80156a4:	4413      	add	r3, r2
 80156a6:	00db      	lsls	r3, r3, #3
 80156a8:	440b      	add	r3, r1
 80156aa:	3312      	adds	r3, #18
 80156ac:	881b      	ldrh	r3, [r3, #0]
 80156ae:	3301      	adds	r3, #1
 80156b0:	b298      	uxth	r0, r3
 80156b2:	4943      	ldr	r1, [pc, #268]	; (80157c0 <etharp_tmr+0x14c>)
 80156b4:	687a      	ldr	r2, [r7, #4]
 80156b6:	4613      	mov	r3, r2
 80156b8:	005b      	lsls	r3, r3, #1
 80156ba:	4413      	add	r3, r2
 80156bc:	00db      	lsls	r3, r3, #3
 80156be:	440b      	add	r3, r1
 80156c0:	3312      	adds	r3, #18
 80156c2:	4602      	mov	r2, r0
 80156c4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80156c6:	493e      	ldr	r1, [pc, #248]	; (80157c0 <etharp_tmr+0x14c>)
 80156c8:	687a      	ldr	r2, [r7, #4]
 80156ca:	4613      	mov	r3, r2
 80156cc:	005b      	lsls	r3, r3, #1
 80156ce:	4413      	add	r3, r2
 80156d0:	00db      	lsls	r3, r3, #3
 80156d2:	440b      	add	r3, r1
 80156d4:	3312      	adds	r3, #18
 80156d6:	881b      	ldrh	r3, [r3, #0]
 80156d8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80156dc:	d215      	bcs.n	801570a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80156de:	4938      	ldr	r1, [pc, #224]	; (80157c0 <etharp_tmr+0x14c>)
 80156e0:	687a      	ldr	r2, [r7, #4]
 80156e2:	4613      	mov	r3, r2
 80156e4:	005b      	lsls	r3, r3, #1
 80156e6:	4413      	add	r3, r2
 80156e8:	00db      	lsls	r3, r3, #3
 80156ea:	440b      	add	r3, r1
 80156ec:	3314      	adds	r3, #20
 80156ee:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80156f0:	2b01      	cmp	r3, #1
 80156f2:	d10e      	bne.n	8015712 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80156f4:	4932      	ldr	r1, [pc, #200]	; (80157c0 <etharp_tmr+0x14c>)
 80156f6:	687a      	ldr	r2, [r7, #4]
 80156f8:	4613      	mov	r3, r2
 80156fa:	005b      	lsls	r3, r3, #1
 80156fc:	4413      	add	r3, r2
 80156fe:	00db      	lsls	r3, r3, #3
 8015700:	440b      	add	r3, r1
 8015702:	3312      	adds	r3, #18
 8015704:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015706:	2b04      	cmp	r3, #4
 8015708:	d903      	bls.n	8015712 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801570a:	6878      	ldr	r0, [r7, #4]
 801570c:	f7ff ff80 	bl	8015610 <etharp_free_entry>
 8015710:	e04a      	b.n	80157a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015712:	492b      	ldr	r1, [pc, #172]	; (80157c0 <etharp_tmr+0x14c>)
 8015714:	687a      	ldr	r2, [r7, #4]
 8015716:	4613      	mov	r3, r2
 8015718:	005b      	lsls	r3, r3, #1
 801571a:	4413      	add	r3, r2
 801571c:	00db      	lsls	r3, r3, #3
 801571e:	440b      	add	r3, r1
 8015720:	3314      	adds	r3, #20
 8015722:	781b      	ldrb	r3, [r3, #0]
 8015724:	2b03      	cmp	r3, #3
 8015726:	d10a      	bne.n	801573e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015728:	4925      	ldr	r1, [pc, #148]	; (80157c0 <etharp_tmr+0x14c>)
 801572a:	687a      	ldr	r2, [r7, #4]
 801572c:	4613      	mov	r3, r2
 801572e:	005b      	lsls	r3, r3, #1
 8015730:	4413      	add	r3, r2
 8015732:	00db      	lsls	r3, r3, #3
 8015734:	440b      	add	r3, r1
 8015736:	3314      	adds	r3, #20
 8015738:	2204      	movs	r2, #4
 801573a:	701a      	strb	r2, [r3, #0]
 801573c:	e034      	b.n	80157a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801573e:	4920      	ldr	r1, [pc, #128]	; (80157c0 <etharp_tmr+0x14c>)
 8015740:	687a      	ldr	r2, [r7, #4]
 8015742:	4613      	mov	r3, r2
 8015744:	005b      	lsls	r3, r3, #1
 8015746:	4413      	add	r3, r2
 8015748:	00db      	lsls	r3, r3, #3
 801574a:	440b      	add	r3, r1
 801574c:	3314      	adds	r3, #20
 801574e:	781b      	ldrb	r3, [r3, #0]
 8015750:	2b04      	cmp	r3, #4
 8015752:	d10a      	bne.n	801576a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015754:	491a      	ldr	r1, [pc, #104]	; (80157c0 <etharp_tmr+0x14c>)
 8015756:	687a      	ldr	r2, [r7, #4]
 8015758:	4613      	mov	r3, r2
 801575a:	005b      	lsls	r3, r3, #1
 801575c:	4413      	add	r3, r2
 801575e:	00db      	lsls	r3, r3, #3
 8015760:	440b      	add	r3, r1
 8015762:	3314      	adds	r3, #20
 8015764:	2202      	movs	r2, #2
 8015766:	701a      	strb	r2, [r3, #0]
 8015768:	e01e      	b.n	80157a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801576a:	4915      	ldr	r1, [pc, #84]	; (80157c0 <etharp_tmr+0x14c>)
 801576c:	687a      	ldr	r2, [r7, #4]
 801576e:	4613      	mov	r3, r2
 8015770:	005b      	lsls	r3, r3, #1
 8015772:	4413      	add	r3, r2
 8015774:	00db      	lsls	r3, r3, #3
 8015776:	440b      	add	r3, r1
 8015778:	3314      	adds	r3, #20
 801577a:	781b      	ldrb	r3, [r3, #0]
 801577c:	2b01      	cmp	r3, #1
 801577e:	d113      	bne.n	80157a8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015780:	490f      	ldr	r1, [pc, #60]	; (80157c0 <etharp_tmr+0x14c>)
 8015782:	687a      	ldr	r2, [r7, #4]
 8015784:	4613      	mov	r3, r2
 8015786:	005b      	lsls	r3, r3, #1
 8015788:	4413      	add	r3, r2
 801578a:	00db      	lsls	r3, r3, #3
 801578c:	440b      	add	r3, r1
 801578e:	3308      	adds	r3, #8
 8015790:	6818      	ldr	r0, [r3, #0]
 8015792:	687a      	ldr	r2, [r7, #4]
 8015794:	4613      	mov	r3, r2
 8015796:	005b      	lsls	r3, r3, #1
 8015798:	4413      	add	r3, r2
 801579a:	00db      	lsls	r3, r3, #3
 801579c:	4a08      	ldr	r2, [pc, #32]	; (80157c0 <etharp_tmr+0x14c>)
 801579e:	4413      	add	r3, r2
 80157a0:	3304      	adds	r3, #4
 80157a2:	4619      	mov	r1, r3
 80157a4:	f000 fe6e 	bl	8016484 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	3301      	adds	r3, #1
 80157ac:	607b      	str	r3, [r7, #4]
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	2b09      	cmp	r3, #9
 80157b2:	f77f af65 	ble.w	8015680 <etharp_tmr+0xc>
      }
    }
  }
}
 80157b6:	bf00      	nop
 80157b8:	bf00      	nop
 80157ba:	3708      	adds	r7, #8
 80157bc:	46bd      	mov	sp, r7
 80157be:	bd80      	pop	{r7, pc}
 80157c0:	200052cc 	.word	0x200052cc

080157c4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b08a      	sub	sp, #40	; 0x28
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	60f8      	str	r0, [r7, #12]
 80157cc:	460b      	mov	r3, r1
 80157ce:	607a      	str	r2, [r7, #4]
 80157d0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80157d2:	230a      	movs	r3, #10
 80157d4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80157d6:	230a      	movs	r3, #10
 80157d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80157da:	230a      	movs	r3, #10
 80157dc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80157de:	2300      	movs	r3, #0
 80157e0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80157e2:	230a      	movs	r3, #10
 80157e4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80157e6:	2300      	movs	r3, #0
 80157e8:	83bb      	strh	r3, [r7, #28]
 80157ea:	2300      	movs	r3, #0
 80157ec:	837b      	strh	r3, [r7, #26]
 80157ee:	2300      	movs	r3, #0
 80157f0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80157f2:	2300      	movs	r3, #0
 80157f4:	843b      	strh	r3, [r7, #32]
 80157f6:	e0ae      	b.n	8015956 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80157f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80157fc:	49a6      	ldr	r1, [pc, #664]	; (8015a98 <etharp_find_entry+0x2d4>)
 80157fe:	4613      	mov	r3, r2
 8015800:	005b      	lsls	r3, r3, #1
 8015802:	4413      	add	r3, r2
 8015804:	00db      	lsls	r3, r3, #3
 8015806:	440b      	add	r3, r1
 8015808:	3314      	adds	r3, #20
 801580a:	781b      	ldrb	r3, [r3, #0]
 801580c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801580e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015812:	2b0a      	cmp	r3, #10
 8015814:	d105      	bne.n	8015822 <etharp_find_entry+0x5e>
 8015816:	7dfb      	ldrb	r3, [r7, #23]
 8015818:	2b00      	cmp	r3, #0
 801581a:	d102      	bne.n	8015822 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801581c:	8c3b      	ldrh	r3, [r7, #32]
 801581e:	847b      	strh	r3, [r7, #34]	; 0x22
 8015820:	e095      	b.n	801594e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015822:	7dfb      	ldrb	r3, [r7, #23]
 8015824:	2b00      	cmp	r3, #0
 8015826:	f000 8092 	beq.w	801594e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801582a:	7dfb      	ldrb	r3, [r7, #23]
 801582c:	2b01      	cmp	r3, #1
 801582e:	d009      	beq.n	8015844 <etharp_find_entry+0x80>
 8015830:	7dfb      	ldrb	r3, [r7, #23]
 8015832:	2b01      	cmp	r3, #1
 8015834:	d806      	bhi.n	8015844 <etharp_find_entry+0x80>
 8015836:	4b99      	ldr	r3, [pc, #612]	; (8015a9c <etharp_find_entry+0x2d8>)
 8015838:	f240 1223 	movw	r2, #291	; 0x123
 801583c:	4998      	ldr	r1, [pc, #608]	; (8015aa0 <etharp_find_entry+0x2dc>)
 801583e:	4899      	ldr	r0, [pc, #612]	; (8015aa4 <etharp_find_entry+0x2e0>)
 8015840:	f002 fcd6 	bl	80181f0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d020      	beq.n	801588c <etharp_find_entry+0xc8>
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	6819      	ldr	r1, [r3, #0]
 801584e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015852:	4891      	ldr	r0, [pc, #580]	; (8015a98 <etharp_find_entry+0x2d4>)
 8015854:	4613      	mov	r3, r2
 8015856:	005b      	lsls	r3, r3, #1
 8015858:	4413      	add	r3, r2
 801585a:	00db      	lsls	r3, r3, #3
 801585c:	4403      	add	r3, r0
 801585e:	3304      	adds	r3, #4
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	4299      	cmp	r1, r3
 8015864:	d112      	bne.n	801588c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d00c      	beq.n	8015886 <etharp_find_entry+0xc2>
 801586c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015870:	4989      	ldr	r1, [pc, #548]	; (8015a98 <etharp_find_entry+0x2d4>)
 8015872:	4613      	mov	r3, r2
 8015874:	005b      	lsls	r3, r3, #1
 8015876:	4413      	add	r3, r2
 8015878:	00db      	lsls	r3, r3, #3
 801587a:	440b      	add	r3, r1
 801587c:	3308      	adds	r3, #8
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	687a      	ldr	r2, [r7, #4]
 8015882:	429a      	cmp	r2, r3
 8015884:	d102      	bne.n	801588c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015886:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801588a:	e100      	b.n	8015a8e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801588c:	7dfb      	ldrb	r3, [r7, #23]
 801588e:	2b01      	cmp	r3, #1
 8015890:	d140      	bne.n	8015914 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015892:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015896:	4980      	ldr	r1, [pc, #512]	; (8015a98 <etharp_find_entry+0x2d4>)
 8015898:	4613      	mov	r3, r2
 801589a:	005b      	lsls	r3, r3, #1
 801589c:	4413      	add	r3, r2
 801589e:	00db      	lsls	r3, r3, #3
 80158a0:	440b      	add	r3, r1
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d01a      	beq.n	80158de <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80158a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80158ac:	497a      	ldr	r1, [pc, #488]	; (8015a98 <etharp_find_entry+0x2d4>)
 80158ae:	4613      	mov	r3, r2
 80158b0:	005b      	lsls	r3, r3, #1
 80158b2:	4413      	add	r3, r2
 80158b4:	00db      	lsls	r3, r3, #3
 80158b6:	440b      	add	r3, r1
 80158b8:	3312      	adds	r3, #18
 80158ba:	881b      	ldrh	r3, [r3, #0]
 80158bc:	8bba      	ldrh	r2, [r7, #28]
 80158be:	429a      	cmp	r2, r3
 80158c0:	d845      	bhi.n	801594e <etharp_find_entry+0x18a>
            old_queue = i;
 80158c2:	8c3b      	ldrh	r3, [r7, #32]
 80158c4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80158c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80158ca:	4973      	ldr	r1, [pc, #460]	; (8015a98 <etharp_find_entry+0x2d4>)
 80158cc:	4613      	mov	r3, r2
 80158ce:	005b      	lsls	r3, r3, #1
 80158d0:	4413      	add	r3, r2
 80158d2:	00db      	lsls	r3, r3, #3
 80158d4:	440b      	add	r3, r1
 80158d6:	3312      	adds	r3, #18
 80158d8:	881b      	ldrh	r3, [r3, #0]
 80158da:	83bb      	strh	r3, [r7, #28]
 80158dc:	e037      	b.n	801594e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80158de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80158e2:	496d      	ldr	r1, [pc, #436]	; (8015a98 <etharp_find_entry+0x2d4>)
 80158e4:	4613      	mov	r3, r2
 80158e6:	005b      	lsls	r3, r3, #1
 80158e8:	4413      	add	r3, r2
 80158ea:	00db      	lsls	r3, r3, #3
 80158ec:	440b      	add	r3, r1
 80158ee:	3312      	adds	r3, #18
 80158f0:	881b      	ldrh	r3, [r3, #0]
 80158f2:	8b7a      	ldrh	r2, [r7, #26]
 80158f4:	429a      	cmp	r2, r3
 80158f6:	d82a      	bhi.n	801594e <etharp_find_entry+0x18a>
            old_pending = i;
 80158f8:	8c3b      	ldrh	r3, [r7, #32]
 80158fa:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80158fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015900:	4965      	ldr	r1, [pc, #404]	; (8015a98 <etharp_find_entry+0x2d4>)
 8015902:	4613      	mov	r3, r2
 8015904:	005b      	lsls	r3, r3, #1
 8015906:	4413      	add	r3, r2
 8015908:	00db      	lsls	r3, r3, #3
 801590a:	440b      	add	r3, r1
 801590c:	3312      	adds	r3, #18
 801590e:	881b      	ldrh	r3, [r3, #0]
 8015910:	837b      	strh	r3, [r7, #26]
 8015912:	e01c      	b.n	801594e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015914:	7dfb      	ldrb	r3, [r7, #23]
 8015916:	2b01      	cmp	r3, #1
 8015918:	d919      	bls.n	801594e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801591a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801591e:	495e      	ldr	r1, [pc, #376]	; (8015a98 <etharp_find_entry+0x2d4>)
 8015920:	4613      	mov	r3, r2
 8015922:	005b      	lsls	r3, r3, #1
 8015924:	4413      	add	r3, r2
 8015926:	00db      	lsls	r3, r3, #3
 8015928:	440b      	add	r3, r1
 801592a:	3312      	adds	r3, #18
 801592c:	881b      	ldrh	r3, [r3, #0]
 801592e:	8b3a      	ldrh	r2, [r7, #24]
 8015930:	429a      	cmp	r2, r3
 8015932:	d80c      	bhi.n	801594e <etharp_find_entry+0x18a>
            old_stable = i;
 8015934:	8c3b      	ldrh	r3, [r7, #32]
 8015936:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015938:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801593c:	4956      	ldr	r1, [pc, #344]	; (8015a98 <etharp_find_entry+0x2d4>)
 801593e:	4613      	mov	r3, r2
 8015940:	005b      	lsls	r3, r3, #1
 8015942:	4413      	add	r3, r2
 8015944:	00db      	lsls	r3, r3, #3
 8015946:	440b      	add	r3, r1
 8015948:	3312      	adds	r3, #18
 801594a:	881b      	ldrh	r3, [r3, #0]
 801594c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801594e:	8c3b      	ldrh	r3, [r7, #32]
 8015950:	3301      	adds	r3, #1
 8015952:	b29b      	uxth	r3, r3
 8015954:	843b      	strh	r3, [r7, #32]
 8015956:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801595a:	2b09      	cmp	r3, #9
 801595c:	f77f af4c 	ble.w	80157f8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015960:	7afb      	ldrb	r3, [r7, #11]
 8015962:	f003 0302 	and.w	r3, r3, #2
 8015966:	2b00      	cmp	r3, #0
 8015968:	d108      	bne.n	801597c <etharp_find_entry+0x1b8>
 801596a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801596e:	2b0a      	cmp	r3, #10
 8015970:	d107      	bne.n	8015982 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015972:	7afb      	ldrb	r3, [r7, #11]
 8015974:	f003 0301 	and.w	r3, r3, #1
 8015978:	2b00      	cmp	r3, #0
 801597a:	d102      	bne.n	8015982 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801597c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015980:	e085      	b.n	8015a8e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015982:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015986:	2b09      	cmp	r3, #9
 8015988:	dc02      	bgt.n	8015990 <etharp_find_entry+0x1cc>
    i = empty;
 801598a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801598c:	843b      	strh	r3, [r7, #32]
 801598e:	e039      	b.n	8015a04 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015990:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015994:	2b09      	cmp	r3, #9
 8015996:	dc14      	bgt.n	80159c2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015998:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801599a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801599c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80159a0:	493d      	ldr	r1, [pc, #244]	; (8015a98 <etharp_find_entry+0x2d4>)
 80159a2:	4613      	mov	r3, r2
 80159a4:	005b      	lsls	r3, r3, #1
 80159a6:	4413      	add	r3, r2
 80159a8:	00db      	lsls	r3, r3, #3
 80159aa:	440b      	add	r3, r1
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d018      	beq.n	80159e4 <etharp_find_entry+0x220>
 80159b2:	4b3a      	ldr	r3, [pc, #232]	; (8015a9c <etharp_find_entry+0x2d8>)
 80159b4:	f240 126d 	movw	r2, #365	; 0x16d
 80159b8:	493b      	ldr	r1, [pc, #236]	; (8015aa8 <etharp_find_entry+0x2e4>)
 80159ba:	483a      	ldr	r0, [pc, #232]	; (8015aa4 <etharp_find_entry+0x2e0>)
 80159bc:	f002 fc18 	bl	80181f0 <iprintf>
 80159c0:	e010      	b.n	80159e4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80159c2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80159c6:	2b09      	cmp	r3, #9
 80159c8:	dc02      	bgt.n	80159d0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80159ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80159cc:	843b      	strh	r3, [r7, #32]
 80159ce:	e009      	b.n	80159e4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80159d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80159d4:	2b09      	cmp	r3, #9
 80159d6:	dc02      	bgt.n	80159de <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80159d8:	8bfb      	ldrh	r3, [r7, #30]
 80159da:	843b      	strh	r3, [r7, #32]
 80159dc:	e002      	b.n	80159e4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80159de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80159e2:	e054      	b.n	8015a8e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80159e4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80159e8:	2b09      	cmp	r3, #9
 80159ea:	dd06      	ble.n	80159fa <etharp_find_entry+0x236>
 80159ec:	4b2b      	ldr	r3, [pc, #172]	; (8015a9c <etharp_find_entry+0x2d8>)
 80159ee:	f240 127f 	movw	r2, #383	; 0x17f
 80159f2:	492e      	ldr	r1, [pc, #184]	; (8015aac <etharp_find_entry+0x2e8>)
 80159f4:	482b      	ldr	r0, [pc, #172]	; (8015aa4 <etharp_find_entry+0x2e0>)
 80159f6:	f002 fbfb 	bl	80181f0 <iprintf>
    etharp_free_entry(i);
 80159fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80159fe:	4618      	mov	r0, r3
 8015a00:	f7ff fe06 	bl	8015610 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015a04:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015a08:	2b09      	cmp	r3, #9
 8015a0a:	dd06      	ble.n	8015a1a <etharp_find_entry+0x256>
 8015a0c:	4b23      	ldr	r3, [pc, #140]	; (8015a9c <etharp_find_entry+0x2d8>)
 8015a0e:	f240 1283 	movw	r2, #387	; 0x183
 8015a12:	4926      	ldr	r1, [pc, #152]	; (8015aac <etharp_find_entry+0x2e8>)
 8015a14:	4823      	ldr	r0, [pc, #140]	; (8015aa4 <etharp_find_entry+0x2e0>)
 8015a16:	f002 fbeb 	bl	80181f0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015a1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a1e:	491e      	ldr	r1, [pc, #120]	; (8015a98 <etharp_find_entry+0x2d4>)
 8015a20:	4613      	mov	r3, r2
 8015a22:	005b      	lsls	r3, r3, #1
 8015a24:	4413      	add	r3, r2
 8015a26:	00db      	lsls	r3, r3, #3
 8015a28:	440b      	add	r3, r1
 8015a2a:	3314      	adds	r3, #20
 8015a2c:	781b      	ldrb	r3, [r3, #0]
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d006      	beq.n	8015a40 <etharp_find_entry+0x27c>
 8015a32:	4b1a      	ldr	r3, [pc, #104]	; (8015a9c <etharp_find_entry+0x2d8>)
 8015a34:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015a38:	491d      	ldr	r1, [pc, #116]	; (8015ab0 <etharp_find_entry+0x2ec>)
 8015a3a:	481a      	ldr	r0, [pc, #104]	; (8015aa4 <etharp_find_entry+0x2e0>)
 8015a3c:	f002 fbd8 	bl	80181f0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d00b      	beq.n	8015a5e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015a46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	6819      	ldr	r1, [r3, #0]
 8015a4e:	4812      	ldr	r0, [pc, #72]	; (8015a98 <etharp_find_entry+0x2d4>)
 8015a50:	4613      	mov	r3, r2
 8015a52:	005b      	lsls	r3, r3, #1
 8015a54:	4413      	add	r3, r2
 8015a56:	00db      	lsls	r3, r3, #3
 8015a58:	4403      	add	r3, r0
 8015a5a:	3304      	adds	r3, #4
 8015a5c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015a5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a62:	490d      	ldr	r1, [pc, #52]	; (8015a98 <etharp_find_entry+0x2d4>)
 8015a64:	4613      	mov	r3, r2
 8015a66:	005b      	lsls	r3, r3, #1
 8015a68:	4413      	add	r3, r2
 8015a6a:	00db      	lsls	r3, r3, #3
 8015a6c:	440b      	add	r3, r1
 8015a6e:	3312      	adds	r3, #18
 8015a70:	2200      	movs	r2, #0
 8015a72:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015a74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a78:	4907      	ldr	r1, [pc, #28]	; (8015a98 <etharp_find_entry+0x2d4>)
 8015a7a:	4613      	mov	r3, r2
 8015a7c:	005b      	lsls	r3, r3, #1
 8015a7e:	4413      	add	r3, r2
 8015a80:	00db      	lsls	r3, r3, #3
 8015a82:	440b      	add	r3, r1
 8015a84:	3308      	adds	r3, #8
 8015a86:	687a      	ldr	r2, [r7, #4]
 8015a88:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015a8a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015a8e:	4618      	mov	r0, r3
 8015a90:	3728      	adds	r7, #40	; 0x28
 8015a92:	46bd      	mov	sp, r7
 8015a94:	bd80      	pop	{r7, pc}
 8015a96:	bf00      	nop
 8015a98:	200052cc 	.word	0x200052cc
 8015a9c:	0801cf88 	.word	0x0801cf88
 8015aa0:	0801cfc0 	.word	0x0801cfc0
 8015aa4:	0801d000 	.word	0x0801d000
 8015aa8:	0801d028 	.word	0x0801d028
 8015aac:	0801d040 	.word	0x0801d040
 8015ab0:	0801d054 	.word	0x0801d054

08015ab4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015ab4:	b580      	push	{r7, lr}
 8015ab6:	b088      	sub	sp, #32
 8015ab8:	af02      	add	r7, sp, #8
 8015aba:	60f8      	str	r0, [r7, #12]
 8015abc:	60b9      	str	r1, [r7, #8]
 8015abe:	607a      	str	r2, [r7, #4]
 8015ac0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015ac8:	2b06      	cmp	r3, #6
 8015aca:	d006      	beq.n	8015ada <etharp_update_arp_entry+0x26>
 8015acc:	4b48      	ldr	r3, [pc, #288]	; (8015bf0 <etharp_update_arp_entry+0x13c>)
 8015ace:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015ad2:	4948      	ldr	r1, [pc, #288]	; (8015bf4 <etharp_update_arp_entry+0x140>)
 8015ad4:	4848      	ldr	r0, [pc, #288]	; (8015bf8 <etharp_update_arp_entry+0x144>)
 8015ad6:	f002 fb8b 	bl	80181f0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015ada:	68bb      	ldr	r3, [r7, #8]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d012      	beq.n	8015b06 <etharp_update_arp_entry+0x52>
 8015ae0:	68bb      	ldr	r3, [r7, #8]
 8015ae2:	681b      	ldr	r3, [r3, #0]
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d00e      	beq.n	8015b06 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015ae8:	68bb      	ldr	r3, [r7, #8]
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	68f9      	ldr	r1, [r7, #12]
 8015aee:	4618      	mov	r0, r3
 8015af0:	f001 f8fe 	bl	8016cf0 <ip4_addr_isbroadcast_u32>
 8015af4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d105      	bne.n	8015b06 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015afa:	68bb      	ldr	r3, [r7, #8]
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015b02:	2be0      	cmp	r3, #224	; 0xe0
 8015b04:	d102      	bne.n	8015b0c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015b06:	f06f 030f 	mvn.w	r3, #15
 8015b0a:	e06c      	b.n	8015be6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015b0c:	78fb      	ldrb	r3, [r7, #3]
 8015b0e:	68fa      	ldr	r2, [r7, #12]
 8015b10:	4619      	mov	r1, r3
 8015b12:	68b8      	ldr	r0, [r7, #8]
 8015b14:	f7ff fe56 	bl	80157c4 <etharp_find_entry>
 8015b18:	4603      	mov	r3, r0
 8015b1a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015b1c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	da02      	bge.n	8015b2a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015b24:	8afb      	ldrh	r3, [r7, #22]
 8015b26:	b25b      	sxtb	r3, r3
 8015b28:	e05d      	b.n	8015be6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015b2a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015b2e:	4933      	ldr	r1, [pc, #204]	; (8015bfc <etharp_update_arp_entry+0x148>)
 8015b30:	4613      	mov	r3, r2
 8015b32:	005b      	lsls	r3, r3, #1
 8015b34:	4413      	add	r3, r2
 8015b36:	00db      	lsls	r3, r3, #3
 8015b38:	440b      	add	r3, r1
 8015b3a:	3314      	adds	r3, #20
 8015b3c:	2202      	movs	r2, #2
 8015b3e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015b40:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015b44:	492d      	ldr	r1, [pc, #180]	; (8015bfc <etharp_update_arp_entry+0x148>)
 8015b46:	4613      	mov	r3, r2
 8015b48:	005b      	lsls	r3, r3, #1
 8015b4a:	4413      	add	r3, r2
 8015b4c:	00db      	lsls	r3, r3, #3
 8015b4e:	440b      	add	r3, r1
 8015b50:	3308      	adds	r3, #8
 8015b52:	68fa      	ldr	r2, [r7, #12]
 8015b54:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015b56:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015b5a:	4613      	mov	r3, r2
 8015b5c:	005b      	lsls	r3, r3, #1
 8015b5e:	4413      	add	r3, r2
 8015b60:	00db      	lsls	r3, r3, #3
 8015b62:	3308      	adds	r3, #8
 8015b64:	4a25      	ldr	r2, [pc, #148]	; (8015bfc <etharp_update_arp_entry+0x148>)
 8015b66:	4413      	add	r3, r2
 8015b68:	3304      	adds	r3, #4
 8015b6a:	2206      	movs	r2, #6
 8015b6c:	6879      	ldr	r1, [r7, #4]
 8015b6e:	4618      	mov	r0, r3
 8015b70:	f002 fa64 	bl	801803c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015b74:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015b78:	4920      	ldr	r1, [pc, #128]	; (8015bfc <etharp_update_arp_entry+0x148>)
 8015b7a:	4613      	mov	r3, r2
 8015b7c:	005b      	lsls	r3, r3, #1
 8015b7e:	4413      	add	r3, r2
 8015b80:	00db      	lsls	r3, r3, #3
 8015b82:	440b      	add	r3, r1
 8015b84:	3312      	adds	r3, #18
 8015b86:	2200      	movs	r2, #0
 8015b88:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015b8a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015b8e:	491b      	ldr	r1, [pc, #108]	; (8015bfc <etharp_update_arp_entry+0x148>)
 8015b90:	4613      	mov	r3, r2
 8015b92:	005b      	lsls	r3, r3, #1
 8015b94:	4413      	add	r3, r2
 8015b96:	00db      	lsls	r3, r3, #3
 8015b98:	440b      	add	r3, r1
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d021      	beq.n	8015be4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015ba0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015ba4:	4915      	ldr	r1, [pc, #84]	; (8015bfc <etharp_update_arp_entry+0x148>)
 8015ba6:	4613      	mov	r3, r2
 8015ba8:	005b      	lsls	r3, r3, #1
 8015baa:	4413      	add	r3, r2
 8015bac:	00db      	lsls	r3, r3, #3
 8015bae:	440b      	add	r3, r1
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015bb4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015bb8:	4910      	ldr	r1, [pc, #64]	; (8015bfc <etharp_update_arp_entry+0x148>)
 8015bba:	4613      	mov	r3, r2
 8015bbc:	005b      	lsls	r3, r3, #1
 8015bbe:	4413      	add	r3, r2
 8015bc0:	00db      	lsls	r3, r3, #3
 8015bc2:	440b      	add	r3, r1
 8015bc4:	2200      	movs	r2, #0
 8015bc6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015bce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015bd2:	9300      	str	r3, [sp, #0]
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	6939      	ldr	r1, [r7, #16]
 8015bd8:	68f8      	ldr	r0, [r7, #12]
 8015bda:	f001 ff91 	bl	8017b00 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015bde:	6938      	ldr	r0, [r7, #16]
 8015be0:	f7f8 fef2 	bl	800e9c8 <pbuf_free>
  }
  return ERR_OK;
 8015be4:	2300      	movs	r3, #0
}
 8015be6:	4618      	mov	r0, r3
 8015be8:	3718      	adds	r7, #24
 8015bea:	46bd      	mov	sp, r7
 8015bec:	bd80      	pop	{r7, pc}
 8015bee:	bf00      	nop
 8015bf0:	0801cf88 	.word	0x0801cf88
 8015bf4:	0801d080 	.word	0x0801d080
 8015bf8:	0801d000 	.word	0x0801d000
 8015bfc:	200052cc 	.word	0x200052cc

08015c00 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015c00:	b580      	push	{r7, lr}
 8015c02:	b084      	sub	sp, #16
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015c08:	2300      	movs	r3, #0
 8015c0a:	60fb      	str	r3, [r7, #12]
 8015c0c:	e01e      	b.n	8015c4c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015c0e:	4913      	ldr	r1, [pc, #76]	; (8015c5c <etharp_cleanup_netif+0x5c>)
 8015c10:	68fa      	ldr	r2, [r7, #12]
 8015c12:	4613      	mov	r3, r2
 8015c14:	005b      	lsls	r3, r3, #1
 8015c16:	4413      	add	r3, r2
 8015c18:	00db      	lsls	r3, r3, #3
 8015c1a:	440b      	add	r3, r1
 8015c1c:	3314      	adds	r3, #20
 8015c1e:	781b      	ldrb	r3, [r3, #0]
 8015c20:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015c22:	7afb      	ldrb	r3, [r7, #11]
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d00e      	beq.n	8015c46 <etharp_cleanup_netif+0x46>
 8015c28:	490c      	ldr	r1, [pc, #48]	; (8015c5c <etharp_cleanup_netif+0x5c>)
 8015c2a:	68fa      	ldr	r2, [r7, #12]
 8015c2c:	4613      	mov	r3, r2
 8015c2e:	005b      	lsls	r3, r3, #1
 8015c30:	4413      	add	r3, r2
 8015c32:	00db      	lsls	r3, r3, #3
 8015c34:	440b      	add	r3, r1
 8015c36:	3308      	adds	r3, #8
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	687a      	ldr	r2, [r7, #4]
 8015c3c:	429a      	cmp	r2, r3
 8015c3e:	d102      	bne.n	8015c46 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015c40:	68f8      	ldr	r0, [r7, #12]
 8015c42:	f7ff fce5 	bl	8015610 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	3301      	adds	r3, #1
 8015c4a:	60fb      	str	r3, [r7, #12]
 8015c4c:	68fb      	ldr	r3, [r7, #12]
 8015c4e:	2b09      	cmp	r3, #9
 8015c50:	dddd      	ble.n	8015c0e <etharp_cleanup_netif+0xe>
    }
  }
}
 8015c52:	bf00      	nop
 8015c54:	bf00      	nop
 8015c56:	3710      	adds	r7, #16
 8015c58:	46bd      	mov	sp, r7
 8015c5a:	bd80      	pop	{r7, pc}
 8015c5c:	200052cc 	.word	0x200052cc

08015c60 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015c60:	b5b0      	push	{r4, r5, r7, lr}
 8015c62:	b08a      	sub	sp, #40	; 0x28
 8015c64:	af04      	add	r7, sp, #16
 8015c66:	6078      	str	r0, [r7, #4]
 8015c68:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015c6a:	683b      	ldr	r3, [r7, #0]
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d107      	bne.n	8015c80 <etharp_input+0x20>
 8015c70:	4b3d      	ldr	r3, [pc, #244]	; (8015d68 <etharp_input+0x108>)
 8015c72:	f240 228a 	movw	r2, #650	; 0x28a
 8015c76:	493d      	ldr	r1, [pc, #244]	; (8015d6c <etharp_input+0x10c>)
 8015c78:	483d      	ldr	r0, [pc, #244]	; (8015d70 <etharp_input+0x110>)
 8015c7a:	f002 fab9 	bl	80181f0 <iprintf>
 8015c7e:	e06f      	b.n	8015d60 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	685b      	ldr	r3, [r3, #4]
 8015c84:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015c86:	693b      	ldr	r3, [r7, #16]
 8015c88:	881b      	ldrh	r3, [r3, #0]
 8015c8a:	b29b      	uxth	r3, r3
 8015c8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015c90:	d10c      	bne.n	8015cac <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015c92:	693b      	ldr	r3, [r7, #16]
 8015c94:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015c96:	2b06      	cmp	r3, #6
 8015c98:	d108      	bne.n	8015cac <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015c9a:	693b      	ldr	r3, [r7, #16]
 8015c9c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015c9e:	2b04      	cmp	r3, #4
 8015ca0:	d104      	bne.n	8015cac <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015ca2:	693b      	ldr	r3, [r7, #16]
 8015ca4:	885b      	ldrh	r3, [r3, #2]
 8015ca6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015ca8:	2b08      	cmp	r3, #8
 8015caa:	d003      	beq.n	8015cb4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015cac:	6878      	ldr	r0, [r7, #4]
 8015cae:	f7f8 fe8b 	bl	800e9c8 <pbuf_free>
    return;
 8015cb2:	e055      	b.n	8015d60 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015cb4:	693b      	ldr	r3, [r7, #16]
 8015cb6:	330e      	adds	r3, #14
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015cbc:	693b      	ldr	r3, [r7, #16]
 8015cbe:	3318      	adds	r3, #24
 8015cc0:	681b      	ldr	r3, [r3, #0]
 8015cc2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015cc4:	683b      	ldr	r3, [r7, #0]
 8015cc6:	3304      	adds	r3, #4
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d102      	bne.n	8015cd4 <etharp_input+0x74>
    for_us = 0;
 8015cce:	2300      	movs	r3, #0
 8015cd0:	75fb      	strb	r3, [r7, #23]
 8015cd2:	e009      	b.n	8015ce8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015cd4:	68ba      	ldr	r2, [r7, #8]
 8015cd6:	683b      	ldr	r3, [r7, #0]
 8015cd8:	3304      	adds	r3, #4
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	429a      	cmp	r2, r3
 8015cde:	bf0c      	ite	eq
 8015ce0:	2301      	moveq	r3, #1
 8015ce2:	2300      	movne	r3, #0
 8015ce4:	b2db      	uxtb	r3, r3
 8015ce6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015ce8:	693b      	ldr	r3, [r7, #16]
 8015cea:	f103 0208 	add.w	r2, r3, #8
 8015cee:	7dfb      	ldrb	r3, [r7, #23]
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d001      	beq.n	8015cf8 <etharp_input+0x98>
 8015cf4:	2301      	movs	r3, #1
 8015cf6:	e000      	b.n	8015cfa <etharp_input+0x9a>
 8015cf8:	2302      	movs	r3, #2
 8015cfa:	f107 010c 	add.w	r1, r7, #12
 8015cfe:	6838      	ldr	r0, [r7, #0]
 8015d00:	f7ff fed8 	bl	8015ab4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015d04:	693b      	ldr	r3, [r7, #16]
 8015d06:	88db      	ldrh	r3, [r3, #6]
 8015d08:	b29b      	uxth	r3, r3
 8015d0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015d0e:	d003      	beq.n	8015d18 <etharp_input+0xb8>
 8015d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015d14:	d01e      	beq.n	8015d54 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015d16:	e020      	b.n	8015d5a <etharp_input+0xfa>
      if (for_us) {
 8015d18:	7dfb      	ldrb	r3, [r7, #23]
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d01c      	beq.n	8015d58 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015d1e:	683b      	ldr	r3, [r7, #0]
 8015d20:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015d24:	693b      	ldr	r3, [r7, #16]
 8015d26:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015d2a:	683b      	ldr	r3, [r7, #0]
 8015d2c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8015d30:	683b      	ldr	r3, [r7, #0]
 8015d32:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015d34:	693a      	ldr	r2, [r7, #16]
 8015d36:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015d38:	2102      	movs	r1, #2
 8015d3a:	9103      	str	r1, [sp, #12]
 8015d3c:	f107 010c 	add.w	r1, r7, #12
 8015d40:	9102      	str	r1, [sp, #8]
 8015d42:	9201      	str	r2, [sp, #4]
 8015d44:	9300      	str	r3, [sp, #0]
 8015d46:	462b      	mov	r3, r5
 8015d48:	4622      	mov	r2, r4
 8015d4a:	4601      	mov	r1, r0
 8015d4c:	6838      	ldr	r0, [r7, #0]
 8015d4e:	f000 faeb 	bl	8016328 <etharp_raw>
      break;
 8015d52:	e001      	b.n	8015d58 <etharp_input+0xf8>
      break;
 8015d54:	bf00      	nop
 8015d56:	e000      	b.n	8015d5a <etharp_input+0xfa>
      break;
 8015d58:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015d5a:	6878      	ldr	r0, [r7, #4]
 8015d5c:	f7f8 fe34 	bl	800e9c8 <pbuf_free>
}
 8015d60:	3718      	adds	r7, #24
 8015d62:	46bd      	mov	sp, r7
 8015d64:	bdb0      	pop	{r4, r5, r7, pc}
 8015d66:	bf00      	nop
 8015d68:	0801cf88 	.word	0x0801cf88
 8015d6c:	0801d0d8 	.word	0x0801d0d8
 8015d70:	0801d000 	.word	0x0801d000

08015d74 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015d74:	b580      	push	{r7, lr}
 8015d76:	b086      	sub	sp, #24
 8015d78:	af02      	add	r7, sp, #8
 8015d7a:	60f8      	str	r0, [r7, #12]
 8015d7c:	60b9      	str	r1, [r7, #8]
 8015d7e:	4613      	mov	r3, r2
 8015d80:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015d82:	79fa      	ldrb	r2, [r7, #7]
 8015d84:	4944      	ldr	r1, [pc, #272]	; (8015e98 <etharp_output_to_arp_index+0x124>)
 8015d86:	4613      	mov	r3, r2
 8015d88:	005b      	lsls	r3, r3, #1
 8015d8a:	4413      	add	r3, r2
 8015d8c:	00db      	lsls	r3, r3, #3
 8015d8e:	440b      	add	r3, r1
 8015d90:	3314      	adds	r3, #20
 8015d92:	781b      	ldrb	r3, [r3, #0]
 8015d94:	2b01      	cmp	r3, #1
 8015d96:	d806      	bhi.n	8015da6 <etharp_output_to_arp_index+0x32>
 8015d98:	4b40      	ldr	r3, [pc, #256]	; (8015e9c <etharp_output_to_arp_index+0x128>)
 8015d9a:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015d9e:	4940      	ldr	r1, [pc, #256]	; (8015ea0 <etharp_output_to_arp_index+0x12c>)
 8015da0:	4840      	ldr	r0, [pc, #256]	; (8015ea4 <etharp_output_to_arp_index+0x130>)
 8015da2:	f002 fa25 	bl	80181f0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015da6:	79fa      	ldrb	r2, [r7, #7]
 8015da8:	493b      	ldr	r1, [pc, #236]	; (8015e98 <etharp_output_to_arp_index+0x124>)
 8015daa:	4613      	mov	r3, r2
 8015dac:	005b      	lsls	r3, r3, #1
 8015dae:	4413      	add	r3, r2
 8015db0:	00db      	lsls	r3, r3, #3
 8015db2:	440b      	add	r3, r1
 8015db4:	3314      	adds	r3, #20
 8015db6:	781b      	ldrb	r3, [r3, #0]
 8015db8:	2b02      	cmp	r3, #2
 8015dba:	d153      	bne.n	8015e64 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015dbc:	79fa      	ldrb	r2, [r7, #7]
 8015dbe:	4936      	ldr	r1, [pc, #216]	; (8015e98 <etharp_output_to_arp_index+0x124>)
 8015dc0:	4613      	mov	r3, r2
 8015dc2:	005b      	lsls	r3, r3, #1
 8015dc4:	4413      	add	r3, r2
 8015dc6:	00db      	lsls	r3, r3, #3
 8015dc8:	440b      	add	r3, r1
 8015dca:	3312      	adds	r3, #18
 8015dcc:	881b      	ldrh	r3, [r3, #0]
 8015dce:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8015dd2:	d919      	bls.n	8015e08 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015dd4:	79fa      	ldrb	r2, [r7, #7]
 8015dd6:	4613      	mov	r3, r2
 8015dd8:	005b      	lsls	r3, r3, #1
 8015dda:	4413      	add	r3, r2
 8015ddc:	00db      	lsls	r3, r3, #3
 8015dde:	4a2e      	ldr	r2, [pc, #184]	; (8015e98 <etharp_output_to_arp_index+0x124>)
 8015de0:	4413      	add	r3, r2
 8015de2:	3304      	adds	r3, #4
 8015de4:	4619      	mov	r1, r3
 8015de6:	68f8      	ldr	r0, [r7, #12]
 8015de8:	f000 fb4c 	bl	8016484 <etharp_request>
 8015dec:	4603      	mov	r3, r0
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d138      	bne.n	8015e64 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015df2:	79fa      	ldrb	r2, [r7, #7]
 8015df4:	4928      	ldr	r1, [pc, #160]	; (8015e98 <etharp_output_to_arp_index+0x124>)
 8015df6:	4613      	mov	r3, r2
 8015df8:	005b      	lsls	r3, r3, #1
 8015dfa:	4413      	add	r3, r2
 8015dfc:	00db      	lsls	r3, r3, #3
 8015dfe:	440b      	add	r3, r1
 8015e00:	3314      	adds	r3, #20
 8015e02:	2203      	movs	r2, #3
 8015e04:	701a      	strb	r2, [r3, #0]
 8015e06:	e02d      	b.n	8015e64 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015e08:	79fa      	ldrb	r2, [r7, #7]
 8015e0a:	4923      	ldr	r1, [pc, #140]	; (8015e98 <etharp_output_to_arp_index+0x124>)
 8015e0c:	4613      	mov	r3, r2
 8015e0e:	005b      	lsls	r3, r3, #1
 8015e10:	4413      	add	r3, r2
 8015e12:	00db      	lsls	r3, r3, #3
 8015e14:	440b      	add	r3, r1
 8015e16:	3312      	adds	r3, #18
 8015e18:	881b      	ldrh	r3, [r3, #0]
 8015e1a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015e1e:	d321      	bcc.n	8015e64 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015e20:	79fa      	ldrb	r2, [r7, #7]
 8015e22:	4613      	mov	r3, r2
 8015e24:	005b      	lsls	r3, r3, #1
 8015e26:	4413      	add	r3, r2
 8015e28:	00db      	lsls	r3, r3, #3
 8015e2a:	4a1b      	ldr	r2, [pc, #108]	; (8015e98 <etharp_output_to_arp_index+0x124>)
 8015e2c:	4413      	add	r3, r2
 8015e2e:	1d19      	adds	r1, r3, #4
 8015e30:	79fa      	ldrb	r2, [r7, #7]
 8015e32:	4613      	mov	r3, r2
 8015e34:	005b      	lsls	r3, r3, #1
 8015e36:	4413      	add	r3, r2
 8015e38:	00db      	lsls	r3, r3, #3
 8015e3a:	3308      	adds	r3, #8
 8015e3c:	4a16      	ldr	r2, [pc, #88]	; (8015e98 <etharp_output_to_arp_index+0x124>)
 8015e3e:	4413      	add	r3, r2
 8015e40:	3304      	adds	r3, #4
 8015e42:	461a      	mov	r2, r3
 8015e44:	68f8      	ldr	r0, [r7, #12]
 8015e46:	f000 fafb 	bl	8016440 <etharp_request_dst>
 8015e4a:	4603      	mov	r3, r0
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	d109      	bne.n	8015e64 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015e50:	79fa      	ldrb	r2, [r7, #7]
 8015e52:	4911      	ldr	r1, [pc, #68]	; (8015e98 <etharp_output_to_arp_index+0x124>)
 8015e54:	4613      	mov	r3, r2
 8015e56:	005b      	lsls	r3, r3, #1
 8015e58:	4413      	add	r3, r2
 8015e5a:	00db      	lsls	r3, r3, #3
 8015e5c:	440b      	add	r3, r1
 8015e5e:	3314      	adds	r3, #20
 8015e60:	2203      	movs	r2, #3
 8015e62:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8015e6a:	79fa      	ldrb	r2, [r7, #7]
 8015e6c:	4613      	mov	r3, r2
 8015e6e:	005b      	lsls	r3, r3, #1
 8015e70:	4413      	add	r3, r2
 8015e72:	00db      	lsls	r3, r3, #3
 8015e74:	3308      	adds	r3, #8
 8015e76:	4a08      	ldr	r2, [pc, #32]	; (8015e98 <etharp_output_to_arp_index+0x124>)
 8015e78:	4413      	add	r3, r2
 8015e7a:	3304      	adds	r3, #4
 8015e7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015e80:	9200      	str	r2, [sp, #0]
 8015e82:	460a      	mov	r2, r1
 8015e84:	68b9      	ldr	r1, [r7, #8]
 8015e86:	68f8      	ldr	r0, [r7, #12]
 8015e88:	f001 fe3a 	bl	8017b00 <ethernet_output>
 8015e8c:	4603      	mov	r3, r0
}
 8015e8e:	4618      	mov	r0, r3
 8015e90:	3710      	adds	r7, #16
 8015e92:	46bd      	mov	sp, r7
 8015e94:	bd80      	pop	{r7, pc}
 8015e96:	bf00      	nop
 8015e98:	200052cc 	.word	0x200052cc
 8015e9c:	0801cf88 	.word	0x0801cf88
 8015ea0:	0801d0f8 	.word	0x0801d0f8
 8015ea4:	0801d000 	.word	0x0801d000

08015ea8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015ea8:	b580      	push	{r7, lr}
 8015eaa:	b08a      	sub	sp, #40	; 0x28
 8015eac:	af02      	add	r7, sp, #8
 8015eae:	60f8      	str	r0, [r7, #12]
 8015eb0:	60b9      	str	r1, [r7, #8]
 8015eb2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015eb8:	68fb      	ldr	r3, [r7, #12]
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d106      	bne.n	8015ecc <etharp_output+0x24>
 8015ebe:	4b73      	ldr	r3, [pc, #460]	; (801608c <etharp_output+0x1e4>)
 8015ec0:	f240 321e 	movw	r2, #798	; 0x31e
 8015ec4:	4972      	ldr	r1, [pc, #456]	; (8016090 <etharp_output+0x1e8>)
 8015ec6:	4873      	ldr	r0, [pc, #460]	; (8016094 <etharp_output+0x1ec>)
 8015ec8:	f002 f992 	bl	80181f0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015ecc:	68bb      	ldr	r3, [r7, #8]
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d106      	bne.n	8015ee0 <etharp_output+0x38>
 8015ed2:	4b6e      	ldr	r3, [pc, #440]	; (801608c <etharp_output+0x1e4>)
 8015ed4:	f240 321f 	movw	r2, #799	; 0x31f
 8015ed8:	496f      	ldr	r1, [pc, #444]	; (8016098 <etharp_output+0x1f0>)
 8015eda:	486e      	ldr	r0, [pc, #440]	; (8016094 <etharp_output+0x1ec>)
 8015edc:	f002 f988 	bl	80181f0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d106      	bne.n	8015ef4 <etharp_output+0x4c>
 8015ee6:	4b69      	ldr	r3, [pc, #420]	; (801608c <etharp_output+0x1e4>)
 8015ee8:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015eec:	496b      	ldr	r1, [pc, #428]	; (801609c <etharp_output+0x1f4>)
 8015eee:	4869      	ldr	r0, [pc, #420]	; (8016094 <etharp_output+0x1ec>)
 8015ef0:	f002 f97e 	bl	80181f0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	68f9      	ldr	r1, [r7, #12]
 8015efa:	4618      	mov	r0, r3
 8015efc:	f000 fef8 	bl	8016cf0 <ip4_addr_isbroadcast_u32>
 8015f00:	4603      	mov	r3, r0
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d002      	beq.n	8015f0c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015f06:	4b66      	ldr	r3, [pc, #408]	; (80160a0 <etharp_output+0x1f8>)
 8015f08:	61fb      	str	r3, [r7, #28]
 8015f0a:	e0af      	b.n	801606c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015f14:	2be0      	cmp	r3, #224	; 0xe0
 8015f16:	d118      	bne.n	8015f4a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015f18:	2301      	movs	r3, #1
 8015f1a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015f20:	235e      	movs	r3, #94	; 0x5e
 8015f22:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	3301      	adds	r3, #1
 8015f28:	781b      	ldrb	r3, [r3, #0]
 8015f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015f2e:	b2db      	uxtb	r3, r3
 8015f30:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	3302      	adds	r3, #2
 8015f36:	781b      	ldrb	r3, [r3, #0]
 8015f38:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	3303      	adds	r3, #3
 8015f3e:	781b      	ldrb	r3, [r3, #0]
 8015f40:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015f42:	f107 0310 	add.w	r3, r7, #16
 8015f46:	61fb      	str	r3, [r7, #28]
 8015f48:	e090      	b.n	801606c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	681a      	ldr	r2, [r3, #0]
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	3304      	adds	r3, #4
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	405a      	eors	r2, r3
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	3308      	adds	r3, #8
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	4013      	ands	r3, r2
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d012      	beq.n	8015f88 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015f68:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015f6c:	4293      	cmp	r3, r2
 8015f6e:	d00b      	beq.n	8015f88 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015f70:	68fb      	ldr	r3, [r7, #12]
 8015f72:	330c      	adds	r3, #12
 8015f74:	681b      	ldr	r3, [r3, #0]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d003      	beq.n	8015f82 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015f7a:	68fb      	ldr	r3, [r7, #12]
 8015f7c:	330c      	adds	r3, #12
 8015f7e:	61bb      	str	r3, [r7, #24]
 8015f80:	e002      	b.n	8015f88 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015f82:	f06f 0303 	mvn.w	r3, #3
 8015f86:	e07d      	b.n	8016084 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015f88:	4b46      	ldr	r3, [pc, #280]	; (80160a4 <etharp_output+0x1fc>)
 8015f8a:	781b      	ldrb	r3, [r3, #0]
 8015f8c:	4619      	mov	r1, r3
 8015f8e:	4a46      	ldr	r2, [pc, #280]	; (80160a8 <etharp_output+0x200>)
 8015f90:	460b      	mov	r3, r1
 8015f92:	005b      	lsls	r3, r3, #1
 8015f94:	440b      	add	r3, r1
 8015f96:	00db      	lsls	r3, r3, #3
 8015f98:	4413      	add	r3, r2
 8015f9a:	3314      	adds	r3, #20
 8015f9c:	781b      	ldrb	r3, [r3, #0]
 8015f9e:	2b01      	cmp	r3, #1
 8015fa0:	d925      	bls.n	8015fee <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015fa2:	4b40      	ldr	r3, [pc, #256]	; (80160a4 <etharp_output+0x1fc>)
 8015fa4:	781b      	ldrb	r3, [r3, #0]
 8015fa6:	4619      	mov	r1, r3
 8015fa8:	4a3f      	ldr	r2, [pc, #252]	; (80160a8 <etharp_output+0x200>)
 8015faa:	460b      	mov	r3, r1
 8015fac:	005b      	lsls	r3, r3, #1
 8015fae:	440b      	add	r3, r1
 8015fb0:	00db      	lsls	r3, r3, #3
 8015fb2:	4413      	add	r3, r2
 8015fb4:	3308      	adds	r3, #8
 8015fb6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015fb8:	68fa      	ldr	r2, [r7, #12]
 8015fba:	429a      	cmp	r2, r3
 8015fbc:	d117      	bne.n	8015fee <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015fbe:	69bb      	ldr	r3, [r7, #24]
 8015fc0:	681a      	ldr	r2, [r3, #0]
 8015fc2:	4b38      	ldr	r3, [pc, #224]	; (80160a4 <etharp_output+0x1fc>)
 8015fc4:	781b      	ldrb	r3, [r3, #0]
 8015fc6:	4618      	mov	r0, r3
 8015fc8:	4937      	ldr	r1, [pc, #220]	; (80160a8 <etharp_output+0x200>)
 8015fca:	4603      	mov	r3, r0
 8015fcc:	005b      	lsls	r3, r3, #1
 8015fce:	4403      	add	r3, r0
 8015fd0:	00db      	lsls	r3, r3, #3
 8015fd2:	440b      	add	r3, r1
 8015fd4:	3304      	adds	r3, #4
 8015fd6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015fd8:	429a      	cmp	r2, r3
 8015fda:	d108      	bne.n	8015fee <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015fdc:	4b31      	ldr	r3, [pc, #196]	; (80160a4 <etharp_output+0x1fc>)
 8015fde:	781b      	ldrb	r3, [r3, #0]
 8015fe0:	461a      	mov	r2, r3
 8015fe2:	68b9      	ldr	r1, [r7, #8]
 8015fe4:	68f8      	ldr	r0, [r7, #12]
 8015fe6:	f7ff fec5 	bl	8015d74 <etharp_output_to_arp_index>
 8015fea:	4603      	mov	r3, r0
 8015fec:	e04a      	b.n	8016084 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015fee:	2300      	movs	r3, #0
 8015ff0:	75fb      	strb	r3, [r7, #23]
 8015ff2:	e031      	b.n	8016058 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015ff4:	7dfa      	ldrb	r2, [r7, #23]
 8015ff6:	492c      	ldr	r1, [pc, #176]	; (80160a8 <etharp_output+0x200>)
 8015ff8:	4613      	mov	r3, r2
 8015ffa:	005b      	lsls	r3, r3, #1
 8015ffc:	4413      	add	r3, r2
 8015ffe:	00db      	lsls	r3, r3, #3
 8016000:	440b      	add	r3, r1
 8016002:	3314      	adds	r3, #20
 8016004:	781b      	ldrb	r3, [r3, #0]
 8016006:	2b01      	cmp	r3, #1
 8016008:	d923      	bls.n	8016052 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801600a:	7dfa      	ldrb	r2, [r7, #23]
 801600c:	4926      	ldr	r1, [pc, #152]	; (80160a8 <etharp_output+0x200>)
 801600e:	4613      	mov	r3, r2
 8016010:	005b      	lsls	r3, r3, #1
 8016012:	4413      	add	r3, r2
 8016014:	00db      	lsls	r3, r3, #3
 8016016:	440b      	add	r3, r1
 8016018:	3308      	adds	r3, #8
 801601a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801601c:	68fa      	ldr	r2, [r7, #12]
 801601e:	429a      	cmp	r2, r3
 8016020:	d117      	bne.n	8016052 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016022:	69bb      	ldr	r3, [r7, #24]
 8016024:	6819      	ldr	r1, [r3, #0]
 8016026:	7dfa      	ldrb	r2, [r7, #23]
 8016028:	481f      	ldr	r0, [pc, #124]	; (80160a8 <etharp_output+0x200>)
 801602a:	4613      	mov	r3, r2
 801602c:	005b      	lsls	r3, r3, #1
 801602e:	4413      	add	r3, r2
 8016030:	00db      	lsls	r3, r3, #3
 8016032:	4403      	add	r3, r0
 8016034:	3304      	adds	r3, #4
 8016036:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016038:	4299      	cmp	r1, r3
 801603a:	d10a      	bne.n	8016052 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801603c:	4a19      	ldr	r2, [pc, #100]	; (80160a4 <etharp_output+0x1fc>)
 801603e:	7dfb      	ldrb	r3, [r7, #23]
 8016040:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016042:	7dfb      	ldrb	r3, [r7, #23]
 8016044:	461a      	mov	r2, r3
 8016046:	68b9      	ldr	r1, [r7, #8]
 8016048:	68f8      	ldr	r0, [r7, #12]
 801604a:	f7ff fe93 	bl	8015d74 <etharp_output_to_arp_index>
 801604e:	4603      	mov	r3, r0
 8016050:	e018      	b.n	8016084 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016052:	7dfb      	ldrb	r3, [r7, #23]
 8016054:	3301      	adds	r3, #1
 8016056:	75fb      	strb	r3, [r7, #23]
 8016058:	7dfb      	ldrb	r3, [r7, #23]
 801605a:	2b09      	cmp	r3, #9
 801605c:	d9ca      	bls.n	8015ff4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801605e:	68ba      	ldr	r2, [r7, #8]
 8016060:	69b9      	ldr	r1, [r7, #24]
 8016062:	68f8      	ldr	r0, [r7, #12]
 8016064:	f000 f822 	bl	80160ac <etharp_query>
 8016068:	4603      	mov	r3, r0
 801606a:	e00b      	b.n	8016084 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8016072:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016076:	9300      	str	r3, [sp, #0]
 8016078:	69fb      	ldr	r3, [r7, #28]
 801607a:	68b9      	ldr	r1, [r7, #8]
 801607c:	68f8      	ldr	r0, [r7, #12]
 801607e:	f001 fd3f 	bl	8017b00 <ethernet_output>
 8016082:	4603      	mov	r3, r0
}
 8016084:	4618      	mov	r0, r3
 8016086:	3720      	adds	r7, #32
 8016088:	46bd      	mov	sp, r7
 801608a:	bd80      	pop	{r7, pc}
 801608c:	0801cf88 	.word	0x0801cf88
 8016090:	0801d0d8 	.word	0x0801d0d8
 8016094:	0801d000 	.word	0x0801d000
 8016098:	0801d128 	.word	0x0801d128
 801609c:	0801d0c8 	.word	0x0801d0c8
 80160a0:	08021524 	.word	0x08021524
 80160a4:	200053bc 	.word	0x200053bc
 80160a8:	200052cc 	.word	0x200052cc

080160ac <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80160ac:	b580      	push	{r7, lr}
 80160ae:	b08c      	sub	sp, #48	; 0x30
 80160b0:	af02      	add	r7, sp, #8
 80160b2:	60f8      	str	r0, [r7, #12]
 80160b4:	60b9      	str	r1, [r7, #8]
 80160b6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	3326      	adds	r3, #38	; 0x26
 80160bc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80160be:	23ff      	movs	r3, #255	; 0xff
 80160c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80160c4:	2300      	movs	r3, #0
 80160c6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80160c8:	68bb      	ldr	r3, [r7, #8]
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	68f9      	ldr	r1, [r7, #12]
 80160ce:	4618      	mov	r0, r3
 80160d0:	f000 fe0e 	bl	8016cf0 <ip4_addr_isbroadcast_u32>
 80160d4:	4603      	mov	r3, r0
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d10c      	bne.n	80160f4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80160da:	68bb      	ldr	r3, [r7, #8]
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80160e2:	2be0      	cmp	r3, #224	; 0xe0
 80160e4:	d006      	beq.n	80160f4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80160e6:	68bb      	ldr	r3, [r7, #8]
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d003      	beq.n	80160f4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80160ec:	68bb      	ldr	r3, [r7, #8]
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d102      	bne.n	80160fa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80160f4:	f06f 030f 	mvn.w	r3, #15
 80160f8:	e101      	b.n	80162fe <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80160fa:	68fa      	ldr	r2, [r7, #12]
 80160fc:	2101      	movs	r1, #1
 80160fe:	68b8      	ldr	r0, [r7, #8]
 8016100:	f7ff fb60 	bl	80157c4 <etharp_find_entry>
 8016104:	4603      	mov	r3, r0
 8016106:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016108:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801610c:	2b00      	cmp	r3, #0
 801610e:	da02      	bge.n	8016116 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016110:	8a7b      	ldrh	r3, [r7, #18]
 8016112:	b25b      	sxtb	r3, r3
 8016114:	e0f3      	b.n	80162fe <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016116:	8a7b      	ldrh	r3, [r7, #18]
 8016118:	2b7e      	cmp	r3, #126	; 0x7e
 801611a:	d906      	bls.n	801612a <etharp_query+0x7e>
 801611c:	4b7a      	ldr	r3, [pc, #488]	; (8016308 <etharp_query+0x25c>)
 801611e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8016122:	497a      	ldr	r1, [pc, #488]	; (801630c <etharp_query+0x260>)
 8016124:	487a      	ldr	r0, [pc, #488]	; (8016310 <etharp_query+0x264>)
 8016126:	f002 f863 	bl	80181f0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801612a:	8a7b      	ldrh	r3, [r7, #18]
 801612c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801612e:	7c7a      	ldrb	r2, [r7, #17]
 8016130:	4978      	ldr	r1, [pc, #480]	; (8016314 <etharp_query+0x268>)
 8016132:	4613      	mov	r3, r2
 8016134:	005b      	lsls	r3, r3, #1
 8016136:	4413      	add	r3, r2
 8016138:	00db      	lsls	r3, r3, #3
 801613a:	440b      	add	r3, r1
 801613c:	3314      	adds	r3, #20
 801613e:	781b      	ldrb	r3, [r3, #0]
 8016140:	2b00      	cmp	r3, #0
 8016142:	d115      	bne.n	8016170 <etharp_query+0xc4>
    is_new_entry = 1;
 8016144:	2301      	movs	r3, #1
 8016146:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016148:	7c7a      	ldrb	r2, [r7, #17]
 801614a:	4972      	ldr	r1, [pc, #456]	; (8016314 <etharp_query+0x268>)
 801614c:	4613      	mov	r3, r2
 801614e:	005b      	lsls	r3, r3, #1
 8016150:	4413      	add	r3, r2
 8016152:	00db      	lsls	r3, r3, #3
 8016154:	440b      	add	r3, r1
 8016156:	3314      	adds	r3, #20
 8016158:	2201      	movs	r2, #1
 801615a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801615c:	7c7a      	ldrb	r2, [r7, #17]
 801615e:	496d      	ldr	r1, [pc, #436]	; (8016314 <etharp_query+0x268>)
 8016160:	4613      	mov	r3, r2
 8016162:	005b      	lsls	r3, r3, #1
 8016164:	4413      	add	r3, r2
 8016166:	00db      	lsls	r3, r3, #3
 8016168:	440b      	add	r3, r1
 801616a:	3308      	adds	r3, #8
 801616c:	68fa      	ldr	r2, [r7, #12]
 801616e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016170:	7c7a      	ldrb	r2, [r7, #17]
 8016172:	4968      	ldr	r1, [pc, #416]	; (8016314 <etharp_query+0x268>)
 8016174:	4613      	mov	r3, r2
 8016176:	005b      	lsls	r3, r3, #1
 8016178:	4413      	add	r3, r2
 801617a:	00db      	lsls	r3, r3, #3
 801617c:	440b      	add	r3, r1
 801617e:	3314      	adds	r3, #20
 8016180:	781b      	ldrb	r3, [r3, #0]
 8016182:	2b01      	cmp	r3, #1
 8016184:	d011      	beq.n	80161aa <etharp_query+0xfe>
 8016186:	7c7a      	ldrb	r2, [r7, #17]
 8016188:	4962      	ldr	r1, [pc, #392]	; (8016314 <etharp_query+0x268>)
 801618a:	4613      	mov	r3, r2
 801618c:	005b      	lsls	r3, r3, #1
 801618e:	4413      	add	r3, r2
 8016190:	00db      	lsls	r3, r3, #3
 8016192:	440b      	add	r3, r1
 8016194:	3314      	adds	r3, #20
 8016196:	781b      	ldrb	r3, [r3, #0]
 8016198:	2b01      	cmp	r3, #1
 801619a:	d806      	bhi.n	80161aa <etharp_query+0xfe>
 801619c:	4b5a      	ldr	r3, [pc, #360]	; (8016308 <etharp_query+0x25c>)
 801619e:	f240 32cd 	movw	r2, #973	; 0x3cd
 80161a2:	495d      	ldr	r1, [pc, #372]	; (8016318 <etharp_query+0x26c>)
 80161a4:	485a      	ldr	r0, [pc, #360]	; (8016310 <etharp_query+0x264>)
 80161a6:	f002 f823 	bl	80181f0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80161aa:	6a3b      	ldr	r3, [r7, #32]
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d102      	bne.n	80161b6 <etharp_query+0x10a>
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d10c      	bne.n	80161d0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80161b6:	68b9      	ldr	r1, [r7, #8]
 80161b8:	68f8      	ldr	r0, [r7, #12]
 80161ba:	f000 f963 	bl	8016484 <etharp_request>
 80161be:	4603      	mov	r3, r0
 80161c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d102      	bne.n	80161d0 <etharp_query+0x124>
      return result;
 80161ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80161ce:	e096      	b.n	80162fe <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d106      	bne.n	80161e4 <etharp_query+0x138>
 80161d6:	4b4c      	ldr	r3, [pc, #304]	; (8016308 <etharp_query+0x25c>)
 80161d8:	f240 32e1 	movw	r2, #993	; 0x3e1
 80161dc:	494f      	ldr	r1, [pc, #316]	; (801631c <etharp_query+0x270>)
 80161de:	484c      	ldr	r0, [pc, #304]	; (8016310 <etharp_query+0x264>)
 80161e0:	f002 f806 	bl	80181f0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80161e4:	7c7a      	ldrb	r2, [r7, #17]
 80161e6:	494b      	ldr	r1, [pc, #300]	; (8016314 <etharp_query+0x268>)
 80161e8:	4613      	mov	r3, r2
 80161ea:	005b      	lsls	r3, r3, #1
 80161ec:	4413      	add	r3, r2
 80161ee:	00db      	lsls	r3, r3, #3
 80161f0:	440b      	add	r3, r1
 80161f2:	3314      	adds	r3, #20
 80161f4:	781b      	ldrb	r3, [r3, #0]
 80161f6:	2b01      	cmp	r3, #1
 80161f8:	d917      	bls.n	801622a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80161fa:	4a49      	ldr	r2, [pc, #292]	; (8016320 <etharp_query+0x274>)
 80161fc:	7c7b      	ldrb	r3, [r7, #17]
 80161fe:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016200:	7c7a      	ldrb	r2, [r7, #17]
 8016202:	4613      	mov	r3, r2
 8016204:	005b      	lsls	r3, r3, #1
 8016206:	4413      	add	r3, r2
 8016208:	00db      	lsls	r3, r3, #3
 801620a:	3308      	adds	r3, #8
 801620c:	4a41      	ldr	r2, [pc, #260]	; (8016314 <etharp_query+0x268>)
 801620e:	4413      	add	r3, r2
 8016210:	3304      	adds	r3, #4
 8016212:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016216:	9200      	str	r2, [sp, #0]
 8016218:	697a      	ldr	r2, [r7, #20]
 801621a:	6879      	ldr	r1, [r7, #4]
 801621c:	68f8      	ldr	r0, [r7, #12]
 801621e:	f001 fc6f 	bl	8017b00 <ethernet_output>
 8016222:	4603      	mov	r3, r0
 8016224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016228:	e067      	b.n	80162fa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801622a:	7c7a      	ldrb	r2, [r7, #17]
 801622c:	4939      	ldr	r1, [pc, #228]	; (8016314 <etharp_query+0x268>)
 801622e:	4613      	mov	r3, r2
 8016230:	005b      	lsls	r3, r3, #1
 8016232:	4413      	add	r3, r2
 8016234:	00db      	lsls	r3, r3, #3
 8016236:	440b      	add	r3, r1
 8016238:	3314      	adds	r3, #20
 801623a:	781b      	ldrb	r3, [r3, #0]
 801623c:	2b01      	cmp	r3, #1
 801623e:	d15c      	bne.n	80162fa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016240:	2300      	movs	r3, #0
 8016242:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016248:	e01c      	b.n	8016284 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801624a:	69fb      	ldr	r3, [r7, #28]
 801624c:	895a      	ldrh	r2, [r3, #10]
 801624e:	69fb      	ldr	r3, [r7, #28]
 8016250:	891b      	ldrh	r3, [r3, #8]
 8016252:	429a      	cmp	r2, r3
 8016254:	d10a      	bne.n	801626c <etharp_query+0x1c0>
 8016256:	69fb      	ldr	r3, [r7, #28]
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	2b00      	cmp	r3, #0
 801625c:	d006      	beq.n	801626c <etharp_query+0x1c0>
 801625e:	4b2a      	ldr	r3, [pc, #168]	; (8016308 <etharp_query+0x25c>)
 8016260:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016264:	492f      	ldr	r1, [pc, #188]	; (8016324 <etharp_query+0x278>)
 8016266:	482a      	ldr	r0, [pc, #168]	; (8016310 <etharp_query+0x264>)
 8016268:	f001 ffc2 	bl	80181f0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801626c:	69fb      	ldr	r3, [r7, #28]
 801626e:	7b1b      	ldrb	r3, [r3, #12]
 8016270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016274:	2b00      	cmp	r3, #0
 8016276:	d002      	beq.n	801627e <etharp_query+0x1d2>
        copy_needed = 1;
 8016278:	2301      	movs	r3, #1
 801627a:	61bb      	str	r3, [r7, #24]
        break;
 801627c:	e005      	b.n	801628a <etharp_query+0x1de>
      }
      p = p->next;
 801627e:	69fb      	ldr	r3, [r7, #28]
 8016280:	681b      	ldr	r3, [r3, #0]
 8016282:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016284:	69fb      	ldr	r3, [r7, #28]
 8016286:	2b00      	cmp	r3, #0
 8016288:	d1df      	bne.n	801624a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801628a:	69bb      	ldr	r3, [r7, #24]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d007      	beq.n	80162a0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016290:	687a      	ldr	r2, [r7, #4]
 8016292:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016296:	200e      	movs	r0, #14
 8016298:	f7f8 fdfe 	bl	800ee98 <pbuf_clone>
 801629c:	61f8      	str	r0, [r7, #28]
 801629e:	e004      	b.n	80162aa <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80162a4:	69f8      	ldr	r0, [r7, #28]
 80162a6:	f7f8 fc35 	bl	800eb14 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80162aa:	69fb      	ldr	r3, [r7, #28]
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d021      	beq.n	80162f4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80162b0:	7c7a      	ldrb	r2, [r7, #17]
 80162b2:	4918      	ldr	r1, [pc, #96]	; (8016314 <etharp_query+0x268>)
 80162b4:	4613      	mov	r3, r2
 80162b6:	005b      	lsls	r3, r3, #1
 80162b8:	4413      	add	r3, r2
 80162ba:	00db      	lsls	r3, r3, #3
 80162bc:	440b      	add	r3, r1
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d00a      	beq.n	80162da <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80162c4:	7c7a      	ldrb	r2, [r7, #17]
 80162c6:	4913      	ldr	r1, [pc, #76]	; (8016314 <etharp_query+0x268>)
 80162c8:	4613      	mov	r3, r2
 80162ca:	005b      	lsls	r3, r3, #1
 80162cc:	4413      	add	r3, r2
 80162ce:	00db      	lsls	r3, r3, #3
 80162d0:	440b      	add	r3, r1
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	4618      	mov	r0, r3
 80162d6:	f7f8 fb77 	bl	800e9c8 <pbuf_free>
      }
      arp_table[i].q = p;
 80162da:	7c7a      	ldrb	r2, [r7, #17]
 80162dc:	490d      	ldr	r1, [pc, #52]	; (8016314 <etharp_query+0x268>)
 80162de:	4613      	mov	r3, r2
 80162e0:	005b      	lsls	r3, r3, #1
 80162e2:	4413      	add	r3, r2
 80162e4:	00db      	lsls	r3, r3, #3
 80162e6:	440b      	add	r3, r1
 80162e8:	69fa      	ldr	r2, [r7, #28]
 80162ea:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80162ec:	2300      	movs	r3, #0
 80162ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80162f2:	e002      	b.n	80162fa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80162f4:	23ff      	movs	r3, #255	; 0xff
 80162f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80162fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80162fe:	4618      	mov	r0, r3
 8016300:	3728      	adds	r7, #40	; 0x28
 8016302:	46bd      	mov	sp, r7
 8016304:	bd80      	pop	{r7, pc}
 8016306:	bf00      	nop
 8016308:	0801cf88 	.word	0x0801cf88
 801630c:	0801d134 	.word	0x0801d134
 8016310:	0801d000 	.word	0x0801d000
 8016314:	200052cc 	.word	0x200052cc
 8016318:	0801d144 	.word	0x0801d144
 801631c:	0801d128 	.word	0x0801d128
 8016320:	200053bc 	.word	0x200053bc
 8016324:	0801d16c 	.word	0x0801d16c

08016328 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016328:	b580      	push	{r7, lr}
 801632a:	b08a      	sub	sp, #40	; 0x28
 801632c:	af02      	add	r7, sp, #8
 801632e:	60f8      	str	r0, [r7, #12]
 8016330:	60b9      	str	r1, [r7, #8]
 8016332:	607a      	str	r2, [r7, #4]
 8016334:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016336:	2300      	movs	r3, #0
 8016338:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d106      	bne.n	801634e <etharp_raw+0x26>
 8016340:	4b3a      	ldr	r3, [pc, #232]	; (801642c <etharp_raw+0x104>)
 8016342:	f240 4257 	movw	r2, #1111	; 0x457
 8016346:	493a      	ldr	r1, [pc, #232]	; (8016430 <etharp_raw+0x108>)
 8016348:	483a      	ldr	r0, [pc, #232]	; (8016434 <etharp_raw+0x10c>)
 801634a:	f001 ff51 	bl	80181f0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801634e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016352:	211c      	movs	r1, #28
 8016354:	200e      	movs	r0, #14
 8016356:	f7f8 f853 	bl	800e400 <pbuf_alloc>
 801635a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801635c:	69bb      	ldr	r3, [r7, #24]
 801635e:	2b00      	cmp	r3, #0
 8016360:	d102      	bne.n	8016368 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016366:	e05d      	b.n	8016424 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016368:	69bb      	ldr	r3, [r7, #24]
 801636a:	895b      	ldrh	r3, [r3, #10]
 801636c:	2b1b      	cmp	r3, #27
 801636e:	d806      	bhi.n	801637e <etharp_raw+0x56>
 8016370:	4b2e      	ldr	r3, [pc, #184]	; (801642c <etharp_raw+0x104>)
 8016372:	f240 4262 	movw	r2, #1122	; 0x462
 8016376:	4930      	ldr	r1, [pc, #192]	; (8016438 <etharp_raw+0x110>)
 8016378:	482e      	ldr	r0, [pc, #184]	; (8016434 <etharp_raw+0x10c>)
 801637a:	f001 ff39 	bl	80181f0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801637e:	69bb      	ldr	r3, [r7, #24]
 8016380:	685b      	ldr	r3, [r3, #4]
 8016382:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016384:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016386:	4618      	mov	r0, r3
 8016388:	f7f6 fe94 	bl	800d0b4 <lwip_htons>
 801638c:	4603      	mov	r3, r0
 801638e:	461a      	mov	r2, r3
 8016390:	697b      	ldr	r3, [r7, #20]
 8016392:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016394:	68fb      	ldr	r3, [r7, #12]
 8016396:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801639a:	2b06      	cmp	r3, #6
 801639c:	d006      	beq.n	80163ac <etharp_raw+0x84>
 801639e:	4b23      	ldr	r3, [pc, #140]	; (801642c <etharp_raw+0x104>)
 80163a0:	f240 4269 	movw	r2, #1129	; 0x469
 80163a4:	4925      	ldr	r1, [pc, #148]	; (801643c <etharp_raw+0x114>)
 80163a6:	4823      	ldr	r0, [pc, #140]	; (8016434 <etharp_raw+0x10c>)
 80163a8:	f001 ff22 	bl	80181f0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80163ac:	697b      	ldr	r3, [r7, #20]
 80163ae:	3308      	adds	r3, #8
 80163b0:	2206      	movs	r2, #6
 80163b2:	6839      	ldr	r1, [r7, #0]
 80163b4:	4618      	mov	r0, r3
 80163b6:	f001 fe41 	bl	801803c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80163ba:	697b      	ldr	r3, [r7, #20]
 80163bc:	3312      	adds	r3, #18
 80163be:	2206      	movs	r2, #6
 80163c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80163c2:	4618      	mov	r0, r3
 80163c4:	f001 fe3a 	bl	801803c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80163c8:	697b      	ldr	r3, [r7, #20]
 80163ca:	330e      	adds	r3, #14
 80163cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80163ce:	6812      	ldr	r2, [r2, #0]
 80163d0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80163d2:	697b      	ldr	r3, [r7, #20]
 80163d4:	3318      	adds	r3, #24
 80163d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80163d8:	6812      	ldr	r2, [r2, #0]
 80163da:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80163dc:	697b      	ldr	r3, [r7, #20]
 80163de:	2200      	movs	r2, #0
 80163e0:	701a      	strb	r2, [r3, #0]
 80163e2:	2200      	movs	r2, #0
 80163e4:	f042 0201 	orr.w	r2, r2, #1
 80163e8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80163ea:	697b      	ldr	r3, [r7, #20]
 80163ec:	2200      	movs	r2, #0
 80163ee:	f042 0208 	orr.w	r2, r2, #8
 80163f2:	709a      	strb	r2, [r3, #2]
 80163f4:	2200      	movs	r2, #0
 80163f6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80163f8:	697b      	ldr	r3, [r7, #20]
 80163fa:	2206      	movs	r2, #6
 80163fc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80163fe:	697b      	ldr	r3, [r7, #20]
 8016400:	2204      	movs	r2, #4
 8016402:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016404:	f640 0306 	movw	r3, #2054	; 0x806
 8016408:	9300      	str	r3, [sp, #0]
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	68ba      	ldr	r2, [r7, #8]
 801640e:	69b9      	ldr	r1, [r7, #24]
 8016410:	68f8      	ldr	r0, [r7, #12]
 8016412:	f001 fb75 	bl	8017b00 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016416:	69b8      	ldr	r0, [r7, #24]
 8016418:	f7f8 fad6 	bl	800e9c8 <pbuf_free>
  p = NULL;
 801641c:	2300      	movs	r3, #0
 801641e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016420:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016424:	4618      	mov	r0, r3
 8016426:	3720      	adds	r7, #32
 8016428:	46bd      	mov	sp, r7
 801642a:	bd80      	pop	{r7, pc}
 801642c:	0801cf88 	.word	0x0801cf88
 8016430:	0801d0d8 	.word	0x0801d0d8
 8016434:	0801d000 	.word	0x0801d000
 8016438:	0801d188 	.word	0x0801d188
 801643c:	0801d1bc 	.word	0x0801d1bc

08016440 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016440:	b580      	push	{r7, lr}
 8016442:	b088      	sub	sp, #32
 8016444:	af04      	add	r7, sp, #16
 8016446:	60f8      	str	r0, [r7, #12]
 8016448:	60b9      	str	r1, [r7, #8]
 801644a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016452:	68fb      	ldr	r3, [r7, #12]
 8016454:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801645c:	2201      	movs	r2, #1
 801645e:	9203      	str	r2, [sp, #12]
 8016460:	68ba      	ldr	r2, [r7, #8]
 8016462:	9202      	str	r2, [sp, #8]
 8016464:	4a06      	ldr	r2, [pc, #24]	; (8016480 <etharp_request_dst+0x40>)
 8016466:	9201      	str	r2, [sp, #4]
 8016468:	9300      	str	r3, [sp, #0]
 801646a:	4603      	mov	r3, r0
 801646c:	687a      	ldr	r2, [r7, #4]
 801646e:	68f8      	ldr	r0, [r7, #12]
 8016470:	f7ff ff5a 	bl	8016328 <etharp_raw>
 8016474:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016476:	4618      	mov	r0, r3
 8016478:	3710      	adds	r7, #16
 801647a:	46bd      	mov	sp, r7
 801647c:	bd80      	pop	{r7, pc}
 801647e:	bf00      	nop
 8016480:	0802152c 	.word	0x0802152c

08016484 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016484:	b580      	push	{r7, lr}
 8016486:	b082      	sub	sp, #8
 8016488:	af00      	add	r7, sp, #0
 801648a:	6078      	str	r0, [r7, #4]
 801648c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801648e:	4a05      	ldr	r2, [pc, #20]	; (80164a4 <etharp_request+0x20>)
 8016490:	6839      	ldr	r1, [r7, #0]
 8016492:	6878      	ldr	r0, [r7, #4]
 8016494:	f7ff ffd4 	bl	8016440 <etharp_request_dst>
 8016498:	4603      	mov	r3, r0
}
 801649a:	4618      	mov	r0, r3
 801649c:	3708      	adds	r7, #8
 801649e:	46bd      	mov	sp, r7
 80164a0:	bd80      	pop	{r7, pc}
 80164a2:	bf00      	nop
 80164a4:	08021524 	.word	0x08021524

080164a8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80164a8:	b580      	push	{r7, lr}
 80164aa:	b08e      	sub	sp, #56	; 0x38
 80164ac:	af04      	add	r7, sp, #16
 80164ae:	6078      	str	r0, [r7, #4]
 80164b0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80164b2:	4b79      	ldr	r3, [pc, #484]	; (8016698 <icmp_input+0x1f0>)
 80164b4:	689b      	ldr	r3, [r3, #8]
 80164b6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80164b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164ba:	781b      	ldrb	r3, [r3, #0]
 80164bc:	f003 030f 	and.w	r3, r3, #15
 80164c0:	b2db      	uxtb	r3, r3
 80164c2:	009b      	lsls	r3, r3, #2
 80164c4:	b2db      	uxtb	r3, r3
 80164c6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80164c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80164ca:	2b13      	cmp	r3, #19
 80164cc:	f240 80cd 	bls.w	801666a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	895b      	ldrh	r3, [r3, #10]
 80164d4:	2b03      	cmp	r3, #3
 80164d6:	f240 80ca 	bls.w	801666e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	685b      	ldr	r3, [r3, #4]
 80164de:	781b      	ldrb	r3, [r3, #0]
 80164e0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80164e4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	f000 80b7 	beq.w	801665c <icmp_input+0x1b4>
 80164ee:	2b08      	cmp	r3, #8
 80164f0:	f040 80b7 	bne.w	8016662 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80164f4:	4b69      	ldr	r3, [pc, #420]	; (801669c <icmp_input+0x1f4>)
 80164f6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80164f8:	4b67      	ldr	r3, [pc, #412]	; (8016698 <icmp_input+0x1f0>)
 80164fa:	695b      	ldr	r3, [r3, #20]
 80164fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016500:	2be0      	cmp	r3, #224	; 0xe0
 8016502:	f000 80bb 	beq.w	801667c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016506:	4b64      	ldr	r3, [pc, #400]	; (8016698 <icmp_input+0x1f0>)
 8016508:	695b      	ldr	r3, [r3, #20]
 801650a:	4a63      	ldr	r2, [pc, #396]	; (8016698 <icmp_input+0x1f0>)
 801650c:	6812      	ldr	r2, [r2, #0]
 801650e:	4611      	mov	r1, r2
 8016510:	4618      	mov	r0, r3
 8016512:	f000 fbed 	bl	8016cf0 <ip4_addr_isbroadcast_u32>
 8016516:	4603      	mov	r3, r0
 8016518:	2b00      	cmp	r3, #0
 801651a:	f040 80b1 	bne.w	8016680 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	891b      	ldrh	r3, [r3, #8]
 8016522:	2b07      	cmp	r3, #7
 8016524:	f240 80a5 	bls.w	8016672 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016528:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801652a:	330e      	adds	r3, #14
 801652c:	4619      	mov	r1, r3
 801652e:	6878      	ldr	r0, [r7, #4]
 8016530:	f7f8 f9b4 	bl	800e89c <pbuf_add_header>
 8016534:	4603      	mov	r3, r0
 8016536:	2b00      	cmp	r3, #0
 8016538:	d04b      	beq.n	80165d2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	891a      	ldrh	r2, [r3, #8]
 801653e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016540:	4413      	add	r3, r2
 8016542:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	891b      	ldrh	r3, [r3, #8]
 8016548:	8b7a      	ldrh	r2, [r7, #26]
 801654a:	429a      	cmp	r2, r3
 801654c:	f0c0 809a 	bcc.w	8016684 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016550:	8b7b      	ldrh	r3, [r7, #26]
 8016552:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016556:	4619      	mov	r1, r3
 8016558:	200e      	movs	r0, #14
 801655a:	f7f7 ff51 	bl	800e400 <pbuf_alloc>
 801655e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016560:	697b      	ldr	r3, [r7, #20]
 8016562:	2b00      	cmp	r3, #0
 8016564:	f000 8090 	beq.w	8016688 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016568:	697b      	ldr	r3, [r7, #20]
 801656a:	895b      	ldrh	r3, [r3, #10]
 801656c:	461a      	mov	r2, r3
 801656e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016570:	3308      	adds	r3, #8
 8016572:	429a      	cmp	r2, r3
 8016574:	d203      	bcs.n	801657e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016576:	6978      	ldr	r0, [r7, #20]
 8016578:	f7f8 fa26 	bl	800e9c8 <pbuf_free>
          goto icmperr;
 801657c:	e085      	b.n	801668a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801657e:	697b      	ldr	r3, [r7, #20]
 8016580:	685b      	ldr	r3, [r3, #4]
 8016582:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016584:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016586:	4618      	mov	r0, r3
 8016588:	f001 fd58 	bl	801803c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801658c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801658e:	4619      	mov	r1, r3
 8016590:	6978      	ldr	r0, [r7, #20]
 8016592:	f7f8 f993 	bl	800e8bc <pbuf_remove_header>
 8016596:	4603      	mov	r3, r0
 8016598:	2b00      	cmp	r3, #0
 801659a:	d009      	beq.n	80165b0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801659c:	4b40      	ldr	r3, [pc, #256]	; (80166a0 <icmp_input+0x1f8>)
 801659e:	22b6      	movs	r2, #182	; 0xb6
 80165a0:	4940      	ldr	r1, [pc, #256]	; (80166a4 <icmp_input+0x1fc>)
 80165a2:	4841      	ldr	r0, [pc, #260]	; (80166a8 <icmp_input+0x200>)
 80165a4:	f001 fe24 	bl	80181f0 <iprintf>
          pbuf_free(r);
 80165a8:	6978      	ldr	r0, [r7, #20]
 80165aa:	f7f8 fa0d 	bl	800e9c8 <pbuf_free>
          goto icmperr;
 80165ae:	e06c      	b.n	801668a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80165b0:	6879      	ldr	r1, [r7, #4]
 80165b2:	6978      	ldr	r0, [r7, #20]
 80165b4:	f7f8 fb2c 	bl	800ec10 <pbuf_copy>
 80165b8:	4603      	mov	r3, r0
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d003      	beq.n	80165c6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80165be:	6978      	ldr	r0, [r7, #20]
 80165c0:	f7f8 fa02 	bl	800e9c8 <pbuf_free>
          goto icmperr;
 80165c4:	e061      	b.n	801668a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80165c6:	6878      	ldr	r0, [r7, #4]
 80165c8:	f7f8 f9fe 	bl	800e9c8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80165cc:	697b      	ldr	r3, [r7, #20]
 80165ce:	607b      	str	r3, [r7, #4]
 80165d0:	e00f      	b.n	80165f2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80165d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80165d4:	330e      	adds	r3, #14
 80165d6:	4619      	mov	r1, r3
 80165d8:	6878      	ldr	r0, [r7, #4]
 80165da:	f7f8 f96f 	bl	800e8bc <pbuf_remove_header>
 80165de:	4603      	mov	r3, r0
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d006      	beq.n	80165f2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80165e4:	4b2e      	ldr	r3, [pc, #184]	; (80166a0 <icmp_input+0x1f8>)
 80165e6:	22c7      	movs	r2, #199	; 0xc7
 80165e8:	4930      	ldr	r1, [pc, #192]	; (80166ac <icmp_input+0x204>)
 80165ea:	482f      	ldr	r0, [pc, #188]	; (80166a8 <icmp_input+0x200>)
 80165ec:	f001 fe00 	bl	80181f0 <iprintf>
          goto icmperr;
 80165f0:	e04b      	b.n	801668a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	685b      	ldr	r3, [r3, #4]
 80165f6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80165f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80165fa:	4619      	mov	r1, r3
 80165fc:	6878      	ldr	r0, [r7, #4]
 80165fe:	f7f8 f94d 	bl	800e89c <pbuf_add_header>
 8016602:	4603      	mov	r3, r0
 8016604:	2b00      	cmp	r3, #0
 8016606:	d12b      	bne.n	8016660 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	685b      	ldr	r3, [r3, #4]
 801660c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801660e:	69fb      	ldr	r3, [r7, #28]
 8016610:	681a      	ldr	r2, [r3, #0]
 8016612:	68fb      	ldr	r3, [r7, #12]
 8016614:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016616:	4b20      	ldr	r3, [pc, #128]	; (8016698 <icmp_input+0x1f0>)
 8016618:	691a      	ldr	r2, [r3, #16]
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801661e:	693b      	ldr	r3, [r7, #16]
 8016620:	2200      	movs	r2, #0
 8016622:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8016624:	693b      	ldr	r3, [r7, #16]
 8016626:	2200      	movs	r2, #0
 8016628:	709a      	strb	r2, [r3, #2]
 801662a:	2200      	movs	r2, #0
 801662c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	22ff      	movs	r2, #255	; 0xff
 8016632:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016634:	68fb      	ldr	r3, [r7, #12]
 8016636:	2200      	movs	r2, #0
 8016638:	729a      	strb	r2, [r3, #10]
 801663a:	2200      	movs	r2, #0
 801663c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801663e:	683b      	ldr	r3, [r7, #0]
 8016640:	9302      	str	r3, [sp, #8]
 8016642:	2301      	movs	r3, #1
 8016644:	9301      	str	r3, [sp, #4]
 8016646:	2300      	movs	r3, #0
 8016648:	9300      	str	r3, [sp, #0]
 801664a:	23ff      	movs	r3, #255	; 0xff
 801664c:	2200      	movs	r2, #0
 801664e:	69f9      	ldr	r1, [r7, #28]
 8016650:	6878      	ldr	r0, [r7, #4]
 8016652:	f000 fa75 	bl	8016b40 <ip4_output_if>
 8016656:	4603      	mov	r3, r0
 8016658:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801665a:	e001      	b.n	8016660 <icmp_input+0x1b8>
      break;
 801665c:	bf00      	nop
 801665e:	e000      	b.n	8016662 <icmp_input+0x1ba>
      break;
 8016660:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016662:	6878      	ldr	r0, [r7, #4]
 8016664:	f7f8 f9b0 	bl	800e9c8 <pbuf_free>
  return;
 8016668:	e013      	b.n	8016692 <icmp_input+0x1ea>
    goto lenerr;
 801666a:	bf00      	nop
 801666c:	e002      	b.n	8016674 <icmp_input+0x1cc>
    goto lenerr;
 801666e:	bf00      	nop
 8016670:	e000      	b.n	8016674 <icmp_input+0x1cc>
        goto lenerr;
 8016672:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016674:	6878      	ldr	r0, [r7, #4]
 8016676:	f7f8 f9a7 	bl	800e9c8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801667a:	e00a      	b.n	8016692 <icmp_input+0x1ea>
        goto icmperr;
 801667c:	bf00      	nop
 801667e:	e004      	b.n	801668a <icmp_input+0x1e2>
        goto icmperr;
 8016680:	bf00      	nop
 8016682:	e002      	b.n	801668a <icmp_input+0x1e2>
          goto icmperr;
 8016684:	bf00      	nop
 8016686:	e000      	b.n	801668a <icmp_input+0x1e2>
          goto icmperr;
 8016688:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801668a:	6878      	ldr	r0, [r7, #4]
 801668c:	f7f8 f99c 	bl	800e9c8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016690:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016692:	3728      	adds	r7, #40	; 0x28
 8016694:	46bd      	mov	sp, r7
 8016696:	bd80      	pop	{r7, pc}
 8016698:	2000e2d0 	.word	0x2000e2d0
 801669c:	2000e2e4 	.word	0x2000e2e4
 80166a0:	0801d200 	.word	0x0801d200
 80166a4:	0801d238 	.word	0x0801d238
 80166a8:	0801d270 	.word	0x0801d270
 80166ac:	0801d298 	.word	0x0801d298

080166b0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80166b0:	b580      	push	{r7, lr}
 80166b2:	b082      	sub	sp, #8
 80166b4:	af00      	add	r7, sp, #0
 80166b6:	6078      	str	r0, [r7, #4]
 80166b8:	460b      	mov	r3, r1
 80166ba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80166bc:	78fb      	ldrb	r3, [r7, #3]
 80166be:	461a      	mov	r2, r3
 80166c0:	2103      	movs	r1, #3
 80166c2:	6878      	ldr	r0, [r7, #4]
 80166c4:	f000 f814 	bl	80166f0 <icmp_send_response>
}
 80166c8:	bf00      	nop
 80166ca:	3708      	adds	r7, #8
 80166cc:	46bd      	mov	sp, r7
 80166ce:	bd80      	pop	{r7, pc}

080166d0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80166d0:	b580      	push	{r7, lr}
 80166d2:	b082      	sub	sp, #8
 80166d4:	af00      	add	r7, sp, #0
 80166d6:	6078      	str	r0, [r7, #4]
 80166d8:	460b      	mov	r3, r1
 80166da:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80166dc:	78fb      	ldrb	r3, [r7, #3]
 80166de:	461a      	mov	r2, r3
 80166e0:	210b      	movs	r1, #11
 80166e2:	6878      	ldr	r0, [r7, #4]
 80166e4:	f000 f804 	bl	80166f0 <icmp_send_response>
}
 80166e8:	bf00      	nop
 80166ea:	3708      	adds	r7, #8
 80166ec:	46bd      	mov	sp, r7
 80166ee:	bd80      	pop	{r7, pc}

080166f0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80166f0:	b580      	push	{r7, lr}
 80166f2:	b08c      	sub	sp, #48	; 0x30
 80166f4:	af04      	add	r7, sp, #16
 80166f6:	6078      	str	r0, [r7, #4]
 80166f8:	460b      	mov	r3, r1
 80166fa:	70fb      	strb	r3, [r7, #3]
 80166fc:	4613      	mov	r3, r2
 80166fe:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016700:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016704:	2124      	movs	r1, #36	; 0x24
 8016706:	2022      	movs	r0, #34	; 0x22
 8016708:	f7f7 fe7a 	bl	800e400 <pbuf_alloc>
 801670c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801670e:	69fb      	ldr	r3, [r7, #28]
 8016710:	2b00      	cmp	r3, #0
 8016712:	d04c      	beq.n	80167ae <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016714:	69fb      	ldr	r3, [r7, #28]
 8016716:	895b      	ldrh	r3, [r3, #10]
 8016718:	2b23      	cmp	r3, #35	; 0x23
 801671a:	d806      	bhi.n	801672a <icmp_send_response+0x3a>
 801671c:	4b26      	ldr	r3, [pc, #152]	; (80167b8 <icmp_send_response+0xc8>)
 801671e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016722:	4926      	ldr	r1, [pc, #152]	; (80167bc <icmp_send_response+0xcc>)
 8016724:	4826      	ldr	r0, [pc, #152]	; (80167c0 <icmp_send_response+0xd0>)
 8016726:	f001 fd63 	bl	80181f0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	685b      	ldr	r3, [r3, #4]
 801672e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016730:	69fb      	ldr	r3, [r7, #28]
 8016732:	685b      	ldr	r3, [r3, #4]
 8016734:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016736:	697b      	ldr	r3, [r7, #20]
 8016738:	78fa      	ldrb	r2, [r7, #3]
 801673a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801673c:	697b      	ldr	r3, [r7, #20]
 801673e:	78ba      	ldrb	r2, [r7, #2]
 8016740:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016742:	697b      	ldr	r3, [r7, #20]
 8016744:	2200      	movs	r2, #0
 8016746:	711a      	strb	r2, [r3, #4]
 8016748:	2200      	movs	r2, #0
 801674a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801674c:	697b      	ldr	r3, [r7, #20]
 801674e:	2200      	movs	r2, #0
 8016750:	719a      	strb	r2, [r3, #6]
 8016752:	2200      	movs	r2, #0
 8016754:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016756:	69fb      	ldr	r3, [r7, #28]
 8016758:	685b      	ldr	r3, [r3, #4]
 801675a:	f103 0008 	add.w	r0, r3, #8
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	685b      	ldr	r3, [r3, #4]
 8016762:	221c      	movs	r2, #28
 8016764:	4619      	mov	r1, r3
 8016766:	f001 fc69 	bl	801803c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801676a:	69bb      	ldr	r3, [r7, #24]
 801676c:	68db      	ldr	r3, [r3, #12]
 801676e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016770:	f107 030c 	add.w	r3, r7, #12
 8016774:	4618      	mov	r0, r3
 8016776:	f000 f825 	bl	80167c4 <ip4_route>
 801677a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801677c:	693b      	ldr	r3, [r7, #16]
 801677e:	2b00      	cmp	r3, #0
 8016780:	d011      	beq.n	80167a6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016782:	697b      	ldr	r3, [r7, #20]
 8016784:	2200      	movs	r2, #0
 8016786:	709a      	strb	r2, [r3, #2]
 8016788:	2200      	movs	r2, #0
 801678a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801678c:	f107 020c 	add.w	r2, r7, #12
 8016790:	693b      	ldr	r3, [r7, #16]
 8016792:	9302      	str	r3, [sp, #8]
 8016794:	2301      	movs	r3, #1
 8016796:	9301      	str	r3, [sp, #4]
 8016798:	2300      	movs	r3, #0
 801679a:	9300      	str	r3, [sp, #0]
 801679c:	23ff      	movs	r3, #255	; 0xff
 801679e:	2100      	movs	r1, #0
 80167a0:	69f8      	ldr	r0, [r7, #28]
 80167a2:	f000 f9cd 	bl	8016b40 <ip4_output_if>
  }
  pbuf_free(q);
 80167a6:	69f8      	ldr	r0, [r7, #28]
 80167a8:	f7f8 f90e 	bl	800e9c8 <pbuf_free>
 80167ac:	e000      	b.n	80167b0 <icmp_send_response+0xc0>
    return;
 80167ae:	bf00      	nop
}
 80167b0:	3720      	adds	r7, #32
 80167b2:	46bd      	mov	sp, r7
 80167b4:	bd80      	pop	{r7, pc}
 80167b6:	bf00      	nop
 80167b8:	0801d200 	.word	0x0801d200
 80167bc:	0801d2cc 	.word	0x0801d2cc
 80167c0:	0801d270 	.word	0x0801d270

080167c4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80167c4:	b480      	push	{r7}
 80167c6:	b085      	sub	sp, #20
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80167cc:	4b33      	ldr	r3, [pc, #204]	; (801689c <ip4_route+0xd8>)
 80167ce:	681b      	ldr	r3, [r3, #0]
 80167d0:	60fb      	str	r3, [r7, #12]
 80167d2:	e036      	b.n	8016842 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80167da:	f003 0301 	and.w	r3, r3, #1
 80167de:	b2db      	uxtb	r3, r3
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d02b      	beq.n	801683c <ip4_route+0x78>
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80167ea:	089b      	lsrs	r3, r3, #2
 80167ec:	f003 0301 	and.w	r3, r3, #1
 80167f0:	b2db      	uxtb	r3, r3
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d022      	beq.n	801683c <ip4_route+0x78>
 80167f6:	68fb      	ldr	r3, [r7, #12]
 80167f8:	3304      	adds	r3, #4
 80167fa:	681b      	ldr	r3, [r3, #0]
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d01d      	beq.n	801683c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	681a      	ldr	r2, [r3, #0]
 8016804:	68fb      	ldr	r3, [r7, #12]
 8016806:	3304      	adds	r3, #4
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	405a      	eors	r2, r3
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	3308      	adds	r3, #8
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	4013      	ands	r3, r2
 8016814:	2b00      	cmp	r3, #0
 8016816:	d101      	bne.n	801681c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	e038      	b.n	801688e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016822:	f003 0302 	and.w	r3, r3, #2
 8016826:	2b00      	cmp	r3, #0
 8016828:	d108      	bne.n	801683c <ip4_route+0x78>
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	681a      	ldr	r2, [r3, #0]
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	330c      	adds	r3, #12
 8016832:	681b      	ldr	r3, [r3, #0]
 8016834:	429a      	cmp	r2, r3
 8016836:	d101      	bne.n	801683c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	e028      	b.n	801688e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801683c:	68fb      	ldr	r3, [r7, #12]
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	60fb      	str	r3, [r7, #12]
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	2b00      	cmp	r3, #0
 8016846:	d1c5      	bne.n	80167d4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016848:	4b15      	ldr	r3, [pc, #84]	; (80168a0 <ip4_route+0xdc>)
 801684a:	681b      	ldr	r3, [r3, #0]
 801684c:	2b00      	cmp	r3, #0
 801684e:	d01a      	beq.n	8016886 <ip4_route+0xc2>
 8016850:	4b13      	ldr	r3, [pc, #76]	; (80168a0 <ip4_route+0xdc>)
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016858:	f003 0301 	and.w	r3, r3, #1
 801685c:	2b00      	cmp	r3, #0
 801685e:	d012      	beq.n	8016886 <ip4_route+0xc2>
 8016860:	4b0f      	ldr	r3, [pc, #60]	; (80168a0 <ip4_route+0xdc>)
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016868:	f003 0304 	and.w	r3, r3, #4
 801686c:	2b00      	cmp	r3, #0
 801686e:	d00a      	beq.n	8016886 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016870:	4b0b      	ldr	r3, [pc, #44]	; (80168a0 <ip4_route+0xdc>)
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	3304      	adds	r3, #4
 8016876:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016878:	2b00      	cmp	r3, #0
 801687a:	d004      	beq.n	8016886 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	681b      	ldr	r3, [r3, #0]
 8016880:	b2db      	uxtb	r3, r3
 8016882:	2b7f      	cmp	r3, #127	; 0x7f
 8016884:	d101      	bne.n	801688a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016886:	2300      	movs	r3, #0
 8016888:	e001      	b.n	801688e <ip4_route+0xca>
  }

  return netif_default;
 801688a:	4b05      	ldr	r3, [pc, #20]	; (80168a0 <ip4_route+0xdc>)
 801688c:	681b      	ldr	r3, [r3, #0]
}
 801688e:	4618      	mov	r0, r3
 8016890:	3714      	adds	r7, #20
 8016892:	46bd      	mov	sp, r7
 8016894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016898:	4770      	bx	lr
 801689a:	bf00      	nop
 801689c:	20018b94 	.word	0x20018b94
 80168a0:	20018b98 	.word	0x20018b98

080168a4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80168a4:	b580      	push	{r7, lr}
 80168a6:	b082      	sub	sp, #8
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80168b2:	f003 0301 	and.w	r3, r3, #1
 80168b6:	b2db      	uxtb	r3, r3
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d016      	beq.n	80168ea <ip4_input_accept+0x46>
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	3304      	adds	r3, #4
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d011      	beq.n	80168ea <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80168c6:	4b0b      	ldr	r3, [pc, #44]	; (80168f4 <ip4_input_accept+0x50>)
 80168c8:	695a      	ldr	r2, [r3, #20]
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	3304      	adds	r3, #4
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	429a      	cmp	r2, r3
 80168d2:	d008      	beq.n	80168e6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80168d4:	4b07      	ldr	r3, [pc, #28]	; (80168f4 <ip4_input_accept+0x50>)
 80168d6:	695b      	ldr	r3, [r3, #20]
 80168d8:	6879      	ldr	r1, [r7, #4]
 80168da:	4618      	mov	r0, r3
 80168dc:	f000 fa08 	bl	8016cf0 <ip4_addr_isbroadcast_u32>
 80168e0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d001      	beq.n	80168ea <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80168e6:	2301      	movs	r3, #1
 80168e8:	e000      	b.n	80168ec <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80168ea:	2300      	movs	r3, #0
}
 80168ec:	4618      	mov	r0, r3
 80168ee:	3708      	adds	r7, #8
 80168f0:	46bd      	mov	sp, r7
 80168f2:	bd80      	pop	{r7, pc}
 80168f4:	2000e2d0 	.word	0x2000e2d0

080168f8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80168f8:	b580      	push	{r7, lr}
 80168fa:	b086      	sub	sp, #24
 80168fc:	af00      	add	r7, sp, #0
 80168fe:	6078      	str	r0, [r7, #4]
 8016900:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	685b      	ldr	r3, [r3, #4]
 8016906:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8016908:	697b      	ldr	r3, [r7, #20]
 801690a:	781b      	ldrb	r3, [r3, #0]
 801690c:	091b      	lsrs	r3, r3, #4
 801690e:	b2db      	uxtb	r3, r3
 8016910:	2b04      	cmp	r3, #4
 8016912:	d004      	beq.n	801691e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016914:	6878      	ldr	r0, [r7, #4]
 8016916:	f7f8 f857 	bl	800e9c8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801691a:	2300      	movs	r3, #0
 801691c:	e107      	b.n	8016b2e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801691e:	697b      	ldr	r3, [r7, #20]
 8016920:	781b      	ldrb	r3, [r3, #0]
 8016922:	f003 030f 	and.w	r3, r3, #15
 8016926:	b2db      	uxtb	r3, r3
 8016928:	009b      	lsls	r3, r3, #2
 801692a:	b2db      	uxtb	r3, r3
 801692c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801692e:	697b      	ldr	r3, [r7, #20]
 8016930:	885b      	ldrh	r3, [r3, #2]
 8016932:	b29b      	uxth	r3, r3
 8016934:	4618      	mov	r0, r3
 8016936:	f7f6 fbbd 	bl	800d0b4 <lwip_htons>
 801693a:	4603      	mov	r3, r0
 801693c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	891b      	ldrh	r3, [r3, #8]
 8016942:	89ba      	ldrh	r2, [r7, #12]
 8016944:	429a      	cmp	r2, r3
 8016946:	d204      	bcs.n	8016952 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8016948:	89bb      	ldrh	r3, [r7, #12]
 801694a:	4619      	mov	r1, r3
 801694c:	6878      	ldr	r0, [r7, #4]
 801694e:	f7f7 feb5 	bl	800e6bc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	895b      	ldrh	r3, [r3, #10]
 8016956:	89fa      	ldrh	r2, [r7, #14]
 8016958:	429a      	cmp	r2, r3
 801695a:	d807      	bhi.n	801696c <ip4_input+0x74>
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	891b      	ldrh	r3, [r3, #8]
 8016960:	89ba      	ldrh	r2, [r7, #12]
 8016962:	429a      	cmp	r2, r3
 8016964:	d802      	bhi.n	801696c <ip4_input+0x74>
 8016966:	89fb      	ldrh	r3, [r7, #14]
 8016968:	2b13      	cmp	r3, #19
 801696a:	d804      	bhi.n	8016976 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801696c:	6878      	ldr	r0, [r7, #4]
 801696e:	f7f8 f82b 	bl	800e9c8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016972:	2300      	movs	r3, #0
 8016974:	e0db      	b.n	8016b2e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016976:	697b      	ldr	r3, [r7, #20]
 8016978:	691b      	ldr	r3, [r3, #16]
 801697a:	4a6f      	ldr	r2, [pc, #444]	; (8016b38 <ip4_input+0x240>)
 801697c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801697e:	697b      	ldr	r3, [r7, #20]
 8016980:	68db      	ldr	r3, [r3, #12]
 8016982:	4a6d      	ldr	r2, [pc, #436]	; (8016b38 <ip4_input+0x240>)
 8016984:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016986:	4b6c      	ldr	r3, [pc, #432]	; (8016b38 <ip4_input+0x240>)
 8016988:	695b      	ldr	r3, [r3, #20]
 801698a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801698e:	2be0      	cmp	r3, #224	; 0xe0
 8016990:	d112      	bne.n	80169b8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016992:	683b      	ldr	r3, [r7, #0]
 8016994:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016998:	f003 0301 	and.w	r3, r3, #1
 801699c:	b2db      	uxtb	r3, r3
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d007      	beq.n	80169b2 <ip4_input+0xba>
 80169a2:	683b      	ldr	r3, [r7, #0]
 80169a4:	3304      	adds	r3, #4
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d002      	beq.n	80169b2 <ip4_input+0xba>
      netif = inp;
 80169ac:	683b      	ldr	r3, [r7, #0]
 80169ae:	613b      	str	r3, [r7, #16]
 80169b0:	e02a      	b.n	8016a08 <ip4_input+0x110>
    } else {
      netif = NULL;
 80169b2:	2300      	movs	r3, #0
 80169b4:	613b      	str	r3, [r7, #16]
 80169b6:	e027      	b.n	8016a08 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80169b8:	6838      	ldr	r0, [r7, #0]
 80169ba:	f7ff ff73 	bl	80168a4 <ip4_input_accept>
 80169be:	4603      	mov	r3, r0
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d002      	beq.n	80169ca <ip4_input+0xd2>
      netif = inp;
 80169c4:	683b      	ldr	r3, [r7, #0]
 80169c6:	613b      	str	r3, [r7, #16]
 80169c8:	e01e      	b.n	8016a08 <ip4_input+0x110>
    } else {
      netif = NULL;
 80169ca:	2300      	movs	r3, #0
 80169cc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80169ce:	4b5a      	ldr	r3, [pc, #360]	; (8016b38 <ip4_input+0x240>)
 80169d0:	695b      	ldr	r3, [r3, #20]
 80169d2:	b2db      	uxtb	r3, r3
 80169d4:	2b7f      	cmp	r3, #127	; 0x7f
 80169d6:	d017      	beq.n	8016a08 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80169d8:	4b58      	ldr	r3, [pc, #352]	; (8016b3c <ip4_input+0x244>)
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	613b      	str	r3, [r7, #16]
 80169de:	e00e      	b.n	80169fe <ip4_input+0x106>
          if (netif == inp) {
 80169e0:	693a      	ldr	r2, [r7, #16]
 80169e2:	683b      	ldr	r3, [r7, #0]
 80169e4:	429a      	cmp	r2, r3
 80169e6:	d006      	beq.n	80169f6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80169e8:	6938      	ldr	r0, [r7, #16]
 80169ea:	f7ff ff5b 	bl	80168a4 <ip4_input_accept>
 80169ee:	4603      	mov	r3, r0
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d108      	bne.n	8016a06 <ip4_input+0x10e>
 80169f4:	e000      	b.n	80169f8 <ip4_input+0x100>
            continue;
 80169f6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80169f8:	693b      	ldr	r3, [r7, #16]
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	613b      	str	r3, [r7, #16]
 80169fe:	693b      	ldr	r3, [r7, #16]
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d1ed      	bne.n	80169e0 <ip4_input+0xe8>
 8016a04:	e000      	b.n	8016a08 <ip4_input+0x110>
            break;
 8016a06:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016a08:	4b4b      	ldr	r3, [pc, #300]	; (8016b38 <ip4_input+0x240>)
 8016a0a:	691b      	ldr	r3, [r3, #16]
 8016a0c:	6839      	ldr	r1, [r7, #0]
 8016a0e:	4618      	mov	r0, r3
 8016a10:	f000 f96e 	bl	8016cf0 <ip4_addr_isbroadcast_u32>
 8016a14:	4603      	mov	r3, r0
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d105      	bne.n	8016a26 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016a1a:	4b47      	ldr	r3, [pc, #284]	; (8016b38 <ip4_input+0x240>)
 8016a1c:	691b      	ldr	r3, [r3, #16]
 8016a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016a22:	2be0      	cmp	r3, #224	; 0xe0
 8016a24:	d104      	bne.n	8016a30 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016a26:	6878      	ldr	r0, [r7, #4]
 8016a28:	f7f7 ffce 	bl	800e9c8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016a2c:	2300      	movs	r3, #0
 8016a2e:	e07e      	b.n	8016b2e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016a30:	693b      	ldr	r3, [r7, #16]
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d104      	bne.n	8016a40 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016a36:	6878      	ldr	r0, [r7, #4]
 8016a38:	f7f7 ffc6 	bl	800e9c8 <pbuf_free>
    return ERR_OK;
 8016a3c:	2300      	movs	r3, #0
 8016a3e:	e076      	b.n	8016b2e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016a40:	697b      	ldr	r3, [r7, #20]
 8016a42:	88db      	ldrh	r3, [r3, #6]
 8016a44:	b29b      	uxth	r3, r3
 8016a46:	461a      	mov	r2, r3
 8016a48:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016a4c:	4013      	ands	r3, r2
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d00b      	beq.n	8016a6a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016a52:	6878      	ldr	r0, [r7, #4]
 8016a54:	f000 fc92 	bl	801737c <ip4_reass>
 8016a58:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d101      	bne.n	8016a64 <ip4_input+0x16c>
      return ERR_OK;
 8016a60:	2300      	movs	r3, #0
 8016a62:	e064      	b.n	8016b2e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	685b      	ldr	r3, [r3, #4]
 8016a68:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016a6a:	4a33      	ldr	r2, [pc, #204]	; (8016b38 <ip4_input+0x240>)
 8016a6c:	693b      	ldr	r3, [r7, #16]
 8016a6e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016a70:	4a31      	ldr	r2, [pc, #196]	; (8016b38 <ip4_input+0x240>)
 8016a72:	683b      	ldr	r3, [r7, #0]
 8016a74:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016a76:	4a30      	ldr	r2, [pc, #192]	; (8016b38 <ip4_input+0x240>)
 8016a78:	697b      	ldr	r3, [r7, #20]
 8016a7a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016a7c:	697b      	ldr	r3, [r7, #20]
 8016a7e:	781b      	ldrb	r3, [r3, #0]
 8016a80:	f003 030f 	and.w	r3, r3, #15
 8016a84:	b2db      	uxtb	r3, r3
 8016a86:	009b      	lsls	r3, r3, #2
 8016a88:	b2db      	uxtb	r3, r3
 8016a8a:	b29a      	uxth	r2, r3
 8016a8c:	4b2a      	ldr	r3, [pc, #168]	; (8016b38 <ip4_input+0x240>)
 8016a8e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016a90:	89fb      	ldrh	r3, [r7, #14]
 8016a92:	4619      	mov	r1, r3
 8016a94:	6878      	ldr	r0, [r7, #4]
 8016a96:	f7f7 ff11 	bl	800e8bc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016a9a:	697b      	ldr	r3, [r7, #20]
 8016a9c:	7a5b      	ldrb	r3, [r3, #9]
 8016a9e:	2b11      	cmp	r3, #17
 8016aa0:	d006      	beq.n	8016ab0 <ip4_input+0x1b8>
 8016aa2:	2b11      	cmp	r3, #17
 8016aa4:	dc13      	bgt.n	8016ace <ip4_input+0x1d6>
 8016aa6:	2b01      	cmp	r3, #1
 8016aa8:	d00c      	beq.n	8016ac4 <ip4_input+0x1cc>
 8016aaa:	2b06      	cmp	r3, #6
 8016aac:	d005      	beq.n	8016aba <ip4_input+0x1c2>
 8016aae:	e00e      	b.n	8016ace <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016ab0:	6839      	ldr	r1, [r7, #0]
 8016ab2:	6878      	ldr	r0, [r7, #4]
 8016ab4:	f7fe fc68 	bl	8015388 <udp_input>
        break;
 8016ab8:	e026      	b.n	8016b08 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016aba:	6839      	ldr	r1, [r7, #0]
 8016abc:	6878      	ldr	r0, [r7, #4]
 8016abe:	f7fa f85d 	bl	8010b7c <tcp_input>
        break;
 8016ac2:	e021      	b.n	8016b08 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016ac4:	6839      	ldr	r1, [r7, #0]
 8016ac6:	6878      	ldr	r0, [r7, #4]
 8016ac8:	f7ff fcee 	bl	80164a8 <icmp_input>
        break;
 8016acc:	e01c      	b.n	8016b08 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016ace:	4b1a      	ldr	r3, [pc, #104]	; (8016b38 <ip4_input+0x240>)
 8016ad0:	695b      	ldr	r3, [r3, #20]
 8016ad2:	6939      	ldr	r1, [r7, #16]
 8016ad4:	4618      	mov	r0, r3
 8016ad6:	f000 f90b 	bl	8016cf0 <ip4_addr_isbroadcast_u32>
 8016ada:	4603      	mov	r3, r0
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d10f      	bne.n	8016b00 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016ae0:	4b15      	ldr	r3, [pc, #84]	; (8016b38 <ip4_input+0x240>)
 8016ae2:	695b      	ldr	r3, [r3, #20]
 8016ae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016ae8:	2be0      	cmp	r3, #224	; 0xe0
 8016aea:	d009      	beq.n	8016b00 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016aec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016af0:	4619      	mov	r1, r3
 8016af2:	6878      	ldr	r0, [r7, #4]
 8016af4:	f7f7 ff55 	bl	800e9a2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016af8:	2102      	movs	r1, #2
 8016afa:	6878      	ldr	r0, [r7, #4]
 8016afc:	f7ff fdd8 	bl	80166b0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016b00:	6878      	ldr	r0, [r7, #4]
 8016b02:	f7f7 ff61 	bl	800e9c8 <pbuf_free>
        break;
 8016b06:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016b08:	4b0b      	ldr	r3, [pc, #44]	; (8016b38 <ip4_input+0x240>)
 8016b0a:	2200      	movs	r2, #0
 8016b0c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016b0e:	4b0a      	ldr	r3, [pc, #40]	; (8016b38 <ip4_input+0x240>)
 8016b10:	2200      	movs	r2, #0
 8016b12:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016b14:	4b08      	ldr	r3, [pc, #32]	; (8016b38 <ip4_input+0x240>)
 8016b16:	2200      	movs	r2, #0
 8016b18:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016b1a:	4b07      	ldr	r3, [pc, #28]	; (8016b38 <ip4_input+0x240>)
 8016b1c:	2200      	movs	r2, #0
 8016b1e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016b20:	4b05      	ldr	r3, [pc, #20]	; (8016b38 <ip4_input+0x240>)
 8016b22:	2200      	movs	r2, #0
 8016b24:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016b26:	4b04      	ldr	r3, [pc, #16]	; (8016b38 <ip4_input+0x240>)
 8016b28:	2200      	movs	r2, #0
 8016b2a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016b2c:	2300      	movs	r3, #0
}
 8016b2e:	4618      	mov	r0, r3
 8016b30:	3718      	adds	r7, #24
 8016b32:	46bd      	mov	sp, r7
 8016b34:	bd80      	pop	{r7, pc}
 8016b36:	bf00      	nop
 8016b38:	2000e2d0 	.word	0x2000e2d0
 8016b3c:	20018b94 	.word	0x20018b94

08016b40 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016b40:	b580      	push	{r7, lr}
 8016b42:	b08a      	sub	sp, #40	; 0x28
 8016b44:	af04      	add	r7, sp, #16
 8016b46:	60f8      	str	r0, [r7, #12]
 8016b48:	60b9      	str	r1, [r7, #8]
 8016b4a:	607a      	str	r2, [r7, #4]
 8016b4c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016b4e:	68bb      	ldr	r3, [r7, #8]
 8016b50:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d009      	beq.n	8016b6c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016b58:	68bb      	ldr	r3, [r7, #8]
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d003      	beq.n	8016b66 <ip4_output_if+0x26>
 8016b5e:	68bb      	ldr	r3, [r7, #8]
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d102      	bne.n	8016b6c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b68:	3304      	adds	r3, #4
 8016b6a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016b6c:	78fa      	ldrb	r2, [r7, #3]
 8016b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b70:	9302      	str	r3, [sp, #8]
 8016b72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016b76:	9301      	str	r3, [sp, #4]
 8016b78:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016b7c:	9300      	str	r3, [sp, #0]
 8016b7e:	4613      	mov	r3, r2
 8016b80:	687a      	ldr	r2, [r7, #4]
 8016b82:	6979      	ldr	r1, [r7, #20]
 8016b84:	68f8      	ldr	r0, [r7, #12]
 8016b86:	f000 f805 	bl	8016b94 <ip4_output_if_src>
 8016b8a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016b8c:	4618      	mov	r0, r3
 8016b8e:	3718      	adds	r7, #24
 8016b90:	46bd      	mov	sp, r7
 8016b92:	bd80      	pop	{r7, pc}

08016b94 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016b94:	b580      	push	{r7, lr}
 8016b96:	b088      	sub	sp, #32
 8016b98:	af00      	add	r7, sp, #0
 8016b9a:	60f8      	str	r0, [r7, #12]
 8016b9c:	60b9      	str	r1, [r7, #8]
 8016b9e:	607a      	str	r2, [r7, #4]
 8016ba0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	7b9b      	ldrb	r3, [r3, #14]
 8016ba6:	2b01      	cmp	r3, #1
 8016ba8:	d006      	beq.n	8016bb8 <ip4_output_if_src+0x24>
 8016baa:	4b4b      	ldr	r3, [pc, #300]	; (8016cd8 <ip4_output_if_src+0x144>)
 8016bac:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016bb0:	494a      	ldr	r1, [pc, #296]	; (8016cdc <ip4_output_if_src+0x148>)
 8016bb2:	484b      	ldr	r0, [pc, #300]	; (8016ce0 <ip4_output_if_src+0x14c>)
 8016bb4:	f001 fb1c 	bl	80181f0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d060      	beq.n	8016c80 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016bbe:	2314      	movs	r3, #20
 8016bc0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016bc2:	2114      	movs	r1, #20
 8016bc4:	68f8      	ldr	r0, [r7, #12]
 8016bc6:	f7f7 fe69 	bl	800e89c <pbuf_add_header>
 8016bca:	4603      	mov	r3, r0
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d002      	beq.n	8016bd6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016bd0:	f06f 0301 	mvn.w	r3, #1
 8016bd4:	e07c      	b.n	8016cd0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	685b      	ldr	r3, [r3, #4]
 8016bda:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	895b      	ldrh	r3, [r3, #10]
 8016be0:	2b13      	cmp	r3, #19
 8016be2:	d806      	bhi.n	8016bf2 <ip4_output_if_src+0x5e>
 8016be4:	4b3c      	ldr	r3, [pc, #240]	; (8016cd8 <ip4_output_if_src+0x144>)
 8016be6:	f44f 7262 	mov.w	r2, #904	; 0x388
 8016bea:	493e      	ldr	r1, [pc, #248]	; (8016ce4 <ip4_output_if_src+0x150>)
 8016bec:	483c      	ldr	r0, [pc, #240]	; (8016ce0 <ip4_output_if_src+0x14c>)
 8016bee:	f001 faff 	bl	80181f0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016bf2:	69fb      	ldr	r3, [r7, #28]
 8016bf4:	78fa      	ldrb	r2, [r7, #3]
 8016bf6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016bf8:	69fb      	ldr	r3, [r7, #28]
 8016bfa:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016bfe:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	681a      	ldr	r2, [r3, #0]
 8016c04:	69fb      	ldr	r3, [r7, #28]
 8016c06:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016c08:	8b7b      	ldrh	r3, [r7, #26]
 8016c0a:	089b      	lsrs	r3, r3, #2
 8016c0c:	b29b      	uxth	r3, r3
 8016c0e:	b2db      	uxtb	r3, r3
 8016c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c14:	b2da      	uxtb	r2, r3
 8016c16:	69fb      	ldr	r3, [r7, #28]
 8016c18:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016c1a:	69fb      	ldr	r3, [r7, #28]
 8016c1c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016c20:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016c22:	68fb      	ldr	r3, [r7, #12]
 8016c24:	891b      	ldrh	r3, [r3, #8]
 8016c26:	4618      	mov	r0, r3
 8016c28:	f7f6 fa44 	bl	800d0b4 <lwip_htons>
 8016c2c:	4603      	mov	r3, r0
 8016c2e:	461a      	mov	r2, r3
 8016c30:	69fb      	ldr	r3, [r7, #28]
 8016c32:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016c34:	69fb      	ldr	r3, [r7, #28]
 8016c36:	2200      	movs	r2, #0
 8016c38:	719a      	strb	r2, [r3, #6]
 8016c3a:	2200      	movs	r2, #0
 8016c3c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016c3e:	4b2a      	ldr	r3, [pc, #168]	; (8016ce8 <ip4_output_if_src+0x154>)
 8016c40:	881b      	ldrh	r3, [r3, #0]
 8016c42:	4618      	mov	r0, r3
 8016c44:	f7f6 fa36 	bl	800d0b4 <lwip_htons>
 8016c48:	4603      	mov	r3, r0
 8016c4a:	461a      	mov	r2, r3
 8016c4c:	69fb      	ldr	r3, [r7, #28]
 8016c4e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016c50:	4b25      	ldr	r3, [pc, #148]	; (8016ce8 <ip4_output_if_src+0x154>)
 8016c52:	881b      	ldrh	r3, [r3, #0]
 8016c54:	3301      	adds	r3, #1
 8016c56:	b29a      	uxth	r2, r3
 8016c58:	4b23      	ldr	r3, [pc, #140]	; (8016ce8 <ip4_output_if_src+0x154>)
 8016c5a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016c5c:	68bb      	ldr	r3, [r7, #8]
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d104      	bne.n	8016c6c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016c62:	4b22      	ldr	r3, [pc, #136]	; (8016cec <ip4_output_if_src+0x158>)
 8016c64:	681a      	ldr	r2, [r3, #0]
 8016c66:	69fb      	ldr	r3, [r7, #28]
 8016c68:	60da      	str	r2, [r3, #12]
 8016c6a:	e003      	b.n	8016c74 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016c6c:	68bb      	ldr	r3, [r7, #8]
 8016c6e:	681a      	ldr	r2, [r3, #0]
 8016c70:	69fb      	ldr	r3, [r7, #28]
 8016c72:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016c74:	69fb      	ldr	r3, [r7, #28]
 8016c76:	2200      	movs	r2, #0
 8016c78:	729a      	strb	r2, [r3, #10]
 8016c7a:	2200      	movs	r2, #0
 8016c7c:	72da      	strb	r2, [r3, #11]
 8016c7e:	e00f      	b.n	8016ca0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016c80:	68fb      	ldr	r3, [r7, #12]
 8016c82:	895b      	ldrh	r3, [r3, #10]
 8016c84:	2b13      	cmp	r3, #19
 8016c86:	d802      	bhi.n	8016c8e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016c88:	f06f 0301 	mvn.w	r3, #1
 8016c8c:	e020      	b.n	8016cd0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	685b      	ldr	r3, [r3, #4]
 8016c92:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016c94:	69fb      	ldr	r3, [r7, #28]
 8016c96:	691b      	ldr	r3, [r3, #16]
 8016c98:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016c9a:	f107 0314 	add.w	r3, r7, #20
 8016c9e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ca2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d00c      	beq.n	8016cc2 <ip4_output_if_src+0x12e>
 8016ca8:	68fb      	ldr	r3, [r7, #12]
 8016caa:	891a      	ldrh	r2, [r3, #8]
 8016cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016cb0:	429a      	cmp	r2, r3
 8016cb2:	d906      	bls.n	8016cc2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8016cb4:	687a      	ldr	r2, [r7, #4]
 8016cb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016cb8:	68f8      	ldr	r0, [r7, #12]
 8016cba:	f000 fd4d 	bl	8017758 <ip4_frag>
 8016cbe:	4603      	mov	r3, r0
 8016cc0:	e006      	b.n	8016cd0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cc4:	695b      	ldr	r3, [r3, #20]
 8016cc6:	687a      	ldr	r2, [r7, #4]
 8016cc8:	68f9      	ldr	r1, [r7, #12]
 8016cca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016ccc:	4798      	blx	r3
 8016cce:	4603      	mov	r3, r0
}
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	3720      	adds	r7, #32
 8016cd4:	46bd      	mov	sp, r7
 8016cd6:	bd80      	pop	{r7, pc}
 8016cd8:	0801d2f8 	.word	0x0801d2f8
 8016cdc:	0801d32c 	.word	0x0801d32c
 8016ce0:	0801d338 	.word	0x0801d338
 8016ce4:	0801d360 	.word	0x0801d360
 8016ce8:	200053be 	.word	0x200053be
 8016cec:	08021520 	.word	0x08021520

08016cf0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016cf0:	b480      	push	{r7}
 8016cf2:	b085      	sub	sp, #20
 8016cf4:	af00      	add	r7, sp, #0
 8016cf6:	6078      	str	r0, [r7, #4]
 8016cf8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016d04:	d002      	beq.n	8016d0c <ip4_addr_isbroadcast_u32+0x1c>
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d101      	bne.n	8016d10 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016d0c:	2301      	movs	r3, #1
 8016d0e:	e02a      	b.n	8016d66 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016d10:	683b      	ldr	r3, [r7, #0]
 8016d12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016d16:	f003 0302 	and.w	r3, r3, #2
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d101      	bne.n	8016d22 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8016d1e:	2300      	movs	r3, #0
 8016d20:	e021      	b.n	8016d66 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016d22:	683b      	ldr	r3, [r7, #0]
 8016d24:	3304      	adds	r3, #4
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	687a      	ldr	r2, [r7, #4]
 8016d2a:	429a      	cmp	r2, r3
 8016d2c:	d101      	bne.n	8016d32 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8016d2e:	2300      	movs	r3, #0
 8016d30:	e019      	b.n	8016d66 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016d32:	68fa      	ldr	r2, [r7, #12]
 8016d34:	683b      	ldr	r3, [r7, #0]
 8016d36:	3304      	adds	r3, #4
 8016d38:	681b      	ldr	r3, [r3, #0]
 8016d3a:	405a      	eors	r2, r3
 8016d3c:	683b      	ldr	r3, [r7, #0]
 8016d3e:	3308      	adds	r3, #8
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	4013      	ands	r3, r2
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d10d      	bne.n	8016d64 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016d48:	683b      	ldr	r3, [r7, #0]
 8016d4a:	3308      	adds	r3, #8
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	43da      	mvns	r2, r3
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016d54:	683b      	ldr	r3, [r7, #0]
 8016d56:	3308      	adds	r3, #8
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016d5c:	429a      	cmp	r2, r3
 8016d5e:	d101      	bne.n	8016d64 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016d60:	2301      	movs	r3, #1
 8016d62:	e000      	b.n	8016d66 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016d64:	2300      	movs	r3, #0
  }
}
 8016d66:	4618      	mov	r0, r3
 8016d68:	3714      	adds	r7, #20
 8016d6a:	46bd      	mov	sp, r7
 8016d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d70:	4770      	bx	lr
	...

08016d74 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016d74:	b580      	push	{r7, lr}
 8016d76:	b084      	sub	sp, #16
 8016d78:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016d7a:	2300      	movs	r3, #0
 8016d7c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016d7e:	4b12      	ldr	r3, [pc, #72]	; (8016dc8 <ip_reass_tmr+0x54>)
 8016d80:	681b      	ldr	r3, [r3, #0]
 8016d82:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016d84:	e018      	b.n	8016db8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	7fdb      	ldrb	r3, [r3, #31]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d00b      	beq.n	8016da6 <ip_reass_tmr+0x32>
      r->timer--;
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	7fdb      	ldrb	r3, [r3, #31]
 8016d92:	3b01      	subs	r3, #1
 8016d94:	b2da      	uxtb	r2, r3
 8016d96:	68fb      	ldr	r3, [r7, #12]
 8016d98:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	60fb      	str	r3, [r7, #12]
 8016da4:	e008      	b.n	8016db8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016da6:	68fb      	ldr	r3, [r7, #12]
 8016da8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016daa:	68fb      	ldr	r3, [r7, #12]
 8016dac:	681b      	ldr	r3, [r3, #0]
 8016dae:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016db0:	68b9      	ldr	r1, [r7, #8]
 8016db2:	6878      	ldr	r0, [r7, #4]
 8016db4:	f000 f80a 	bl	8016dcc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016db8:	68fb      	ldr	r3, [r7, #12]
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d1e3      	bne.n	8016d86 <ip_reass_tmr+0x12>
    }
  }
}
 8016dbe:	bf00      	nop
 8016dc0:	bf00      	nop
 8016dc2:	3710      	adds	r7, #16
 8016dc4:	46bd      	mov	sp, r7
 8016dc6:	bd80      	pop	{r7, pc}
 8016dc8:	200053c0 	.word	0x200053c0

08016dcc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016dcc:	b580      	push	{r7, lr}
 8016dce:	b088      	sub	sp, #32
 8016dd0:	af00      	add	r7, sp, #0
 8016dd2:	6078      	str	r0, [r7, #4]
 8016dd4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016dd6:	2300      	movs	r3, #0
 8016dd8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016dda:	683a      	ldr	r2, [r7, #0]
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	429a      	cmp	r2, r3
 8016de0:	d105      	bne.n	8016dee <ip_reass_free_complete_datagram+0x22>
 8016de2:	4b45      	ldr	r3, [pc, #276]	; (8016ef8 <ip_reass_free_complete_datagram+0x12c>)
 8016de4:	22ab      	movs	r2, #171	; 0xab
 8016de6:	4945      	ldr	r1, [pc, #276]	; (8016efc <ip_reass_free_complete_datagram+0x130>)
 8016de8:	4845      	ldr	r0, [pc, #276]	; (8016f00 <ip_reass_free_complete_datagram+0x134>)
 8016dea:	f001 fa01 	bl	80181f0 <iprintf>
  if (prev != NULL) {
 8016dee:	683b      	ldr	r3, [r7, #0]
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d00a      	beq.n	8016e0a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016df4:	683b      	ldr	r3, [r7, #0]
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	687a      	ldr	r2, [r7, #4]
 8016dfa:	429a      	cmp	r2, r3
 8016dfc:	d005      	beq.n	8016e0a <ip_reass_free_complete_datagram+0x3e>
 8016dfe:	4b3e      	ldr	r3, [pc, #248]	; (8016ef8 <ip_reass_free_complete_datagram+0x12c>)
 8016e00:	22ad      	movs	r2, #173	; 0xad
 8016e02:	4940      	ldr	r1, [pc, #256]	; (8016f04 <ip_reass_free_complete_datagram+0x138>)
 8016e04:	483e      	ldr	r0, [pc, #248]	; (8016f00 <ip_reass_free_complete_datagram+0x134>)
 8016e06:	f001 f9f3 	bl	80181f0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	685b      	ldr	r3, [r3, #4]
 8016e0e:	685b      	ldr	r3, [r3, #4]
 8016e10:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016e12:	697b      	ldr	r3, [r7, #20]
 8016e14:	889b      	ldrh	r3, [r3, #4]
 8016e16:	b29b      	uxth	r3, r3
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d12a      	bne.n	8016e72 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	685b      	ldr	r3, [r3, #4]
 8016e20:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016e22:	697b      	ldr	r3, [r7, #20]
 8016e24:	681a      	ldr	r2, [r3, #0]
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016e2a:	69bb      	ldr	r3, [r7, #24]
 8016e2c:	6858      	ldr	r0, [r3, #4]
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	3308      	adds	r3, #8
 8016e32:	2214      	movs	r2, #20
 8016e34:	4619      	mov	r1, r3
 8016e36:	f001 f901 	bl	801803c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016e3a:	2101      	movs	r1, #1
 8016e3c:	69b8      	ldr	r0, [r7, #24]
 8016e3e:	f7ff fc47 	bl	80166d0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016e42:	69b8      	ldr	r0, [r7, #24]
 8016e44:	f7f7 fe4e 	bl	800eae4 <pbuf_clen>
 8016e48:	4603      	mov	r3, r0
 8016e4a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016e4c:	8bfa      	ldrh	r2, [r7, #30]
 8016e4e:	8a7b      	ldrh	r3, [r7, #18]
 8016e50:	4413      	add	r3, r2
 8016e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016e56:	db05      	blt.n	8016e64 <ip_reass_free_complete_datagram+0x98>
 8016e58:	4b27      	ldr	r3, [pc, #156]	; (8016ef8 <ip_reass_free_complete_datagram+0x12c>)
 8016e5a:	22bc      	movs	r2, #188	; 0xbc
 8016e5c:	492a      	ldr	r1, [pc, #168]	; (8016f08 <ip_reass_free_complete_datagram+0x13c>)
 8016e5e:	4828      	ldr	r0, [pc, #160]	; (8016f00 <ip_reass_free_complete_datagram+0x134>)
 8016e60:	f001 f9c6 	bl	80181f0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016e64:	8bfa      	ldrh	r2, [r7, #30]
 8016e66:	8a7b      	ldrh	r3, [r7, #18]
 8016e68:	4413      	add	r3, r2
 8016e6a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016e6c:	69b8      	ldr	r0, [r7, #24]
 8016e6e:	f7f7 fdab 	bl	800e9c8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	685b      	ldr	r3, [r3, #4]
 8016e76:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016e78:	e01f      	b.n	8016eba <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016e7a:	69bb      	ldr	r3, [r7, #24]
 8016e7c:	685b      	ldr	r3, [r3, #4]
 8016e7e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016e80:	69bb      	ldr	r3, [r7, #24]
 8016e82:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016e84:	697b      	ldr	r3, [r7, #20]
 8016e86:	681b      	ldr	r3, [r3, #0]
 8016e88:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016e8a:	68f8      	ldr	r0, [r7, #12]
 8016e8c:	f7f7 fe2a 	bl	800eae4 <pbuf_clen>
 8016e90:	4603      	mov	r3, r0
 8016e92:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016e94:	8bfa      	ldrh	r2, [r7, #30]
 8016e96:	8a7b      	ldrh	r3, [r7, #18]
 8016e98:	4413      	add	r3, r2
 8016e9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016e9e:	db05      	blt.n	8016eac <ip_reass_free_complete_datagram+0xe0>
 8016ea0:	4b15      	ldr	r3, [pc, #84]	; (8016ef8 <ip_reass_free_complete_datagram+0x12c>)
 8016ea2:	22cc      	movs	r2, #204	; 0xcc
 8016ea4:	4918      	ldr	r1, [pc, #96]	; (8016f08 <ip_reass_free_complete_datagram+0x13c>)
 8016ea6:	4816      	ldr	r0, [pc, #88]	; (8016f00 <ip_reass_free_complete_datagram+0x134>)
 8016ea8:	f001 f9a2 	bl	80181f0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016eac:	8bfa      	ldrh	r2, [r7, #30]
 8016eae:	8a7b      	ldrh	r3, [r7, #18]
 8016eb0:	4413      	add	r3, r2
 8016eb2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016eb4:	68f8      	ldr	r0, [r7, #12]
 8016eb6:	f7f7 fd87 	bl	800e9c8 <pbuf_free>
  while (p != NULL) {
 8016eba:	69bb      	ldr	r3, [r7, #24]
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d1dc      	bne.n	8016e7a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016ec0:	6839      	ldr	r1, [r7, #0]
 8016ec2:	6878      	ldr	r0, [r7, #4]
 8016ec4:	f000 f8c2 	bl	801704c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016ec8:	4b10      	ldr	r3, [pc, #64]	; (8016f0c <ip_reass_free_complete_datagram+0x140>)
 8016eca:	881b      	ldrh	r3, [r3, #0]
 8016ecc:	8bfa      	ldrh	r2, [r7, #30]
 8016ece:	429a      	cmp	r2, r3
 8016ed0:	d905      	bls.n	8016ede <ip_reass_free_complete_datagram+0x112>
 8016ed2:	4b09      	ldr	r3, [pc, #36]	; (8016ef8 <ip_reass_free_complete_datagram+0x12c>)
 8016ed4:	22d2      	movs	r2, #210	; 0xd2
 8016ed6:	490e      	ldr	r1, [pc, #56]	; (8016f10 <ip_reass_free_complete_datagram+0x144>)
 8016ed8:	4809      	ldr	r0, [pc, #36]	; (8016f00 <ip_reass_free_complete_datagram+0x134>)
 8016eda:	f001 f989 	bl	80181f0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016ede:	4b0b      	ldr	r3, [pc, #44]	; (8016f0c <ip_reass_free_complete_datagram+0x140>)
 8016ee0:	881a      	ldrh	r2, [r3, #0]
 8016ee2:	8bfb      	ldrh	r3, [r7, #30]
 8016ee4:	1ad3      	subs	r3, r2, r3
 8016ee6:	b29a      	uxth	r2, r3
 8016ee8:	4b08      	ldr	r3, [pc, #32]	; (8016f0c <ip_reass_free_complete_datagram+0x140>)
 8016eea:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016eec:	8bfb      	ldrh	r3, [r7, #30]
}
 8016eee:	4618      	mov	r0, r3
 8016ef0:	3720      	adds	r7, #32
 8016ef2:	46bd      	mov	sp, r7
 8016ef4:	bd80      	pop	{r7, pc}
 8016ef6:	bf00      	nop
 8016ef8:	0801d390 	.word	0x0801d390
 8016efc:	0801d3cc 	.word	0x0801d3cc
 8016f00:	0801d3d8 	.word	0x0801d3d8
 8016f04:	0801d400 	.word	0x0801d400
 8016f08:	0801d414 	.word	0x0801d414
 8016f0c:	200053c4 	.word	0x200053c4
 8016f10:	0801d434 	.word	0x0801d434

08016f14 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016f14:	b580      	push	{r7, lr}
 8016f16:	b08a      	sub	sp, #40	; 0x28
 8016f18:	af00      	add	r7, sp, #0
 8016f1a:	6078      	str	r0, [r7, #4]
 8016f1c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016f1e:	2300      	movs	r3, #0
 8016f20:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016f22:	2300      	movs	r3, #0
 8016f24:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016f26:	2300      	movs	r3, #0
 8016f28:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016f2a:	2300      	movs	r3, #0
 8016f2c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016f2e:	2300      	movs	r3, #0
 8016f30:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016f32:	4b28      	ldr	r3, [pc, #160]	; (8016fd4 <ip_reass_remove_oldest_datagram+0xc0>)
 8016f34:	681b      	ldr	r3, [r3, #0]
 8016f36:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016f38:	e030      	b.n	8016f9c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f3c:	695a      	ldr	r2, [r3, #20]
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	68db      	ldr	r3, [r3, #12]
 8016f42:	429a      	cmp	r2, r3
 8016f44:	d10c      	bne.n	8016f60 <ip_reass_remove_oldest_datagram+0x4c>
 8016f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f48:	699a      	ldr	r2, [r3, #24]
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	691b      	ldr	r3, [r3, #16]
 8016f4e:	429a      	cmp	r2, r3
 8016f50:	d106      	bne.n	8016f60 <ip_reass_remove_oldest_datagram+0x4c>
 8016f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f54:	899a      	ldrh	r2, [r3, #12]
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	889b      	ldrh	r3, [r3, #4]
 8016f5a:	b29b      	uxth	r3, r3
 8016f5c:	429a      	cmp	r2, r3
 8016f5e:	d014      	beq.n	8016f8a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016f60:	693b      	ldr	r3, [r7, #16]
 8016f62:	3301      	adds	r3, #1
 8016f64:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016f66:	6a3b      	ldr	r3, [r7, #32]
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d104      	bne.n	8016f76 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f6e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016f70:	69fb      	ldr	r3, [r7, #28]
 8016f72:	61bb      	str	r3, [r7, #24]
 8016f74:	e009      	b.n	8016f8a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f78:	7fda      	ldrb	r2, [r3, #31]
 8016f7a:	6a3b      	ldr	r3, [r7, #32]
 8016f7c:	7fdb      	ldrb	r3, [r3, #31]
 8016f7e:	429a      	cmp	r2, r3
 8016f80:	d803      	bhi.n	8016f8a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f84:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016f86:	69fb      	ldr	r3, [r7, #28]
 8016f88:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d001      	beq.n	8016f96 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f94:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f98:	681b      	ldr	r3, [r3, #0]
 8016f9a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d1cb      	bne.n	8016f3a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016fa2:	6a3b      	ldr	r3, [r7, #32]
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d008      	beq.n	8016fba <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016fa8:	69b9      	ldr	r1, [r7, #24]
 8016faa:	6a38      	ldr	r0, [r7, #32]
 8016fac:	f7ff ff0e 	bl	8016dcc <ip_reass_free_complete_datagram>
 8016fb0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016fb2:	697a      	ldr	r2, [r7, #20]
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	4413      	add	r3, r2
 8016fb8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016fba:	697a      	ldr	r2, [r7, #20]
 8016fbc:	683b      	ldr	r3, [r7, #0]
 8016fbe:	429a      	cmp	r2, r3
 8016fc0:	da02      	bge.n	8016fc8 <ip_reass_remove_oldest_datagram+0xb4>
 8016fc2:	693b      	ldr	r3, [r7, #16]
 8016fc4:	2b01      	cmp	r3, #1
 8016fc6:	dcac      	bgt.n	8016f22 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016fc8:	697b      	ldr	r3, [r7, #20]
}
 8016fca:	4618      	mov	r0, r3
 8016fcc:	3728      	adds	r7, #40	; 0x28
 8016fce:	46bd      	mov	sp, r7
 8016fd0:	bd80      	pop	{r7, pc}
 8016fd2:	bf00      	nop
 8016fd4:	200053c0 	.word	0x200053c0

08016fd8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016fd8:	b580      	push	{r7, lr}
 8016fda:	b084      	sub	sp, #16
 8016fdc:	af00      	add	r7, sp, #0
 8016fde:	6078      	str	r0, [r7, #4]
 8016fe0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016fe2:	2004      	movs	r0, #4
 8016fe4:	f7f6 fdfa 	bl	800dbdc <memp_malloc>
 8016fe8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d110      	bne.n	8017012 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016ff0:	6839      	ldr	r1, [r7, #0]
 8016ff2:	6878      	ldr	r0, [r7, #4]
 8016ff4:	f7ff ff8e 	bl	8016f14 <ip_reass_remove_oldest_datagram>
 8016ff8:	4602      	mov	r2, r0
 8016ffa:	683b      	ldr	r3, [r7, #0]
 8016ffc:	4293      	cmp	r3, r2
 8016ffe:	dc03      	bgt.n	8017008 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017000:	2004      	movs	r0, #4
 8017002:	f7f6 fdeb 	bl	800dbdc <memp_malloc>
 8017006:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	2b00      	cmp	r3, #0
 801700c:	d101      	bne.n	8017012 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801700e:	2300      	movs	r3, #0
 8017010:	e016      	b.n	8017040 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017012:	2220      	movs	r2, #32
 8017014:	2100      	movs	r1, #0
 8017016:	68f8      	ldr	r0, [r7, #12]
 8017018:	f001 f838 	bl	801808c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	220f      	movs	r2, #15
 8017020:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017022:	4b09      	ldr	r3, [pc, #36]	; (8017048 <ip_reass_enqueue_new_datagram+0x70>)
 8017024:	681a      	ldr	r2, [r3, #0]
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801702a:	4a07      	ldr	r2, [pc, #28]	; (8017048 <ip_reass_enqueue_new_datagram+0x70>)
 801702c:	68fb      	ldr	r3, [r7, #12]
 801702e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	3308      	adds	r3, #8
 8017034:	2214      	movs	r2, #20
 8017036:	6879      	ldr	r1, [r7, #4]
 8017038:	4618      	mov	r0, r3
 801703a:	f000 ffff 	bl	801803c <memcpy>
  return ipr;
 801703e:	68fb      	ldr	r3, [r7, #12]
}
 8017040:	4618      	mov	r0, r3
 8017042:	3710      	adds	r7, #16
 8017044:	46bd      	mov	sp, r7
 8017046:	bd80      	pop	{r7, pc}
 8017048:	200053c0 	.word	0x200053c0

0801704c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801704c:	b580      	push	{r7, lr}
 801704e:	b082      	sub	sp, #8
 8017050:	af00      	add	r7, sp, #0
 8017052:	6078      	str	r0, [r7, #4]
 8017054:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017056:	4b10      	ldr	r3, [pc, #64]	; (8017098 <ip_reass_dequeue_datagram+0x4c>)
 8017058:	681b      	ldr	r3, [r3, #0]
 801705a:	687a      	ldr	r2, [r7, #4]
 801705c:	429a      	cmp	r2, r3
 801705e:	d104      	bne.n	801706a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	4a0c      	ldr	r2, [pc, #48]	; (8017098 <ip_reass_dequeue_datagram+0x4c>)
 8017066:	6013      	str	r3, [r2, #0]
 8017068:	e00d      	b.n	8017086 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801706a:	683b      	ldr	r3, [r7, #0]
 801706c:	2b00      	cmp	r3, #0
 801706e:	d106      	bne.n	801707e <ip_reass_dequeue_datagram+0x32>
 8017070:	4b0a      	ldr	r3, [pc, #40]	; (801709c <ip_reass_dequeue_datagram+0x50>)
 8017072:	f240 1245 	movw	r2, #325	; 0x145
 8017076:	490a      	ldr	r1, [pc, #40]	; (80170a0 <ip_reass_dequeue_datagram+0x54>)
 8017078:	480a      	ldr	r0, [pc, #40]	; (80170a4 <ip_reass_dequeue_datagram+0x58>)
 801707a:	f001 f8b9 	bl	80181f0 <iprintf>
    prev->next = ipr->next;
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	681a      	ldr	r2, [r3, #0]
 8017082:	683b      	ldr	r3, [r7, #0]
 8017084:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017086:	6879      	ldr	r1, [r7, #4]
 8017088:	2004      	movs	r0, #4
 801708a:	f7f6 fdf9 	bl	800dc80 <memp_free>
}
 801708e:	bf00      	nop
 8017090:	3708      	adds	r7, #8
 8017092:	46bd      	mov	sp, r7
 8017094:	bd80      	pop	{r7, pc}
 8017096:	bf00      	nop
 8017098:	200053c0 	.word	0x200053c0
 801709c:	0801d390 	.word	0x0801d390
 80170a0:	0801d458 	.word	0x0801d458
 80170a4:	0801d3d8 	.word	0x0801d3d8

080170a8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80170a8:	b580      	push	{r7, lr}
 80170aa:	b08c      	sub	sp, #48	; 0x30
 80170ac:	af00      	add	r7, sp, #0
 80170ae:	60f8      	str	r0, [r7, #12]
 80170b0:	60b9      	str	r1, [r7, #8]
 80170b2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80170b4:	2300      	movs	r3, #0
 80170b6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80170b8:	2301      	movs	r3, #1
 80170ba:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80170bc:	68bb      	ldr	r3, [r7, #8]
 80170be:	685b      	ldr	r3, [r3, #4]
 80170c0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80170c2:	69fb      	ldr	r3, [r7, #28]
 80170c4:	885b      	ldrh	r3, [r3, #2]
 80170c6:	b29b      	uxth	r3, r3
 80170c8:	4618      	mov	r0, r3
 80170ca:	f7f5 fff3 	bl	800d0b4 <lwip_htons>
 80170ce:	4603      	mov	r3, r0
 80170d0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80170d2:	69fb      	ldr	r3, [r7, #28]
 80170d4:	781b      	ldrb	r3, [r3, #0]
 80170d6:	f003 030f 	and.w	r3, r3, #15
 80170da:	b2db      	uxtb	r3, r3
 80170dc:	009b      	lsls	r3, r3, #2
 80170de:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80170e0:	7e7b      	ldrb	r3, [r7, #25]
 80170e2:	b29b      	uxth	r3, r3
 80170e4:	8b7a      	ldrh	r2, [r7, #26]
 80170e6:	429a      	cmp	r2, r3
 80170e8:	d202      	bcs.n	80170f0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80170ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80170ee:	e135      	b.n	801735c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80170f0:	7e7b      	ldrb	r3, [r7, #25]
 80170f2:	b29b      	uxth	r3, r3
 80170f4:	8b7a      	ldrh	r2, [r7, #26]
 80170f6:	1ad3      	subs	r3, r2, r3
 80170f8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80170fa:	69fb      	ldr	r3, [r7, #28]
 80170fc:	88db      	ldrh	r3, [r3, #6]
 80170fe:	b29b      	uxth	r3, r3
 8017100:	4618      	mov	r0, r3
 8017102:	f7f5 ffd7 	bl	800d0b4 <lwip_htons>
 8017106:	4603      	mov	r3, r0
 8017108:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801710c:	b29b      	uxth	r3, r3
 801710e:	00db      	lsls	r3, r3, #3
 8017110:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017112:	68bb      	ldr	r3, [r7, #8]
 8017114:	685b      	ldr	r3, [r3, #4]
 8017116:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801711a:	2200      	movs	r2, #0
 801711c:	701a      	strb	r2, [r3, #0]
 801711e:	2200      	movs	r2, #0
 8017120:	705a      	strb	r2, [r3, #1]
 8017122:	2200      	movs	r2, #0
 8017124:	709a      	strb	r2, [r3, #2]
 8017126:	2200      	movs	r2, #0
 8017128:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801712a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801712c:	8afa      	ldrh	r2, [r7, #22]
 801712e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017130:	8afa      	ldrh	r2, [r7, #22]
 8017132:	8b7b      	ldrh	r3, [r7, #26]
 8017134:	4413      	add	r3, r2
 8017136:	b29a      	uxth	r2, r3
 8017138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801713a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801713c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801713e:	88db      	ldrh	r3, [r3, #6]
 8017140:	b29b      	uxth	r3, r3
 8017142:	8afa      	ldrh	r2, [r7, #22]
 8017144:	429a      	cmp	r2, r3
 8017146:	d902      	bls.n	801714e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017148:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801714c:	e106      	b.n	801735c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	685b      	ldr	r3, [r3, #4]
 8017152:	627b      	str	r3, [r7, #36]	; 0x24
 8017154:	e068      	b.n	8017228 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017158:	685b      	ldr	r3, [r3, #4]
 801715a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801715c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801715e:	889b      	ldrh	r3, [r3, #4]
 8017160:	b29a      	uxth	r2, r3
 8017162:	693b      	ldr	r3, [r7, #16]
 8017164:	889b      	ldrh	r3, [r3, #4]
 8017166:	b29b      	uxth	r3, r3
 8017168:	429a      	cmp	r2, r3
 801716a:	d235      	bcs.n	80171d8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801716c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801716e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017170:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017174:	2b00      	cmp	r3, #0
 8017176:	d020      	beq.n	80171ba <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801717a:	889b      	ldrh	r3, [r3, #4]
 801717c:	b29a      	uxth	r2, r3
 801717e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017180:	88db      	ldrh	r3, [r3, #6]
 8017182:	b29b      	uxth	r3, r3
 8017184:	429a      	cmp	r2, r3
 8017186:	d307      	bcc.n	8017198 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801718a:	88db      	ldrh	r3, [r3, #6]
 801718c:	b29a      	uxth	r2, r3
 801718e:	693b      	ldr	r3, [r7, #16]
 8017190:	889b      	ldrh	r3, [r3, #4]
 8017192:	b29b      	uxth	r3, r3
 8017194:	429a      	cmp	r2, r3
 8017196:	d902      	bls.n	801719e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017198:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801719c:	e0de      	b.n	801735c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801719e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171a0:	68ba      	ldr	r2, [r7, #8]
 80171a2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80171a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171a6:	88db      	ldrh	r3, [r3, #6]
 80171a8:	b29a      	uxth	r2, r3
 80171aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171ac:	889b      	ldrh	r3, [r3, #4]
 80171ae:	b29b      	uxth	r3, r3
 80171b0:	429a      	cmp	r2, r3
 80171b2:	d03d      	beq.n	8017230 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80171b4:	2300      	movs	r3, #0
 80171b6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80171b8:	e03a      	b.n	8017230 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80171ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171bc:	88db      	ldrh	r3, [r3, #6]
 80171be:	b29a      	uxth	r2, r3
 80171c0:	693b      	ldr	r3, [r7, #16]
 80171c2:	889b      	ldrh	r3, [r3, #4]
 80171c4:	b29b      	uxth	r3, r3
 80171c6:	429a      	cmp	r2, r3
 80171c8:	d902      	bls.n	80171d0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80171ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80171ce:	e0c5      	b.n	801735c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	68ba      	ldr	r2, [r7, #8]
 80171d4:	605a      	str	r2, [r3, #4]
      break;
 80171d6:	e02b      	b.n	8017230 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80171d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171da:	889b      	ldrh	r3, [r3, #4]
 80171dc:	b29a      	uxth	r2, r3
 80171de:	693b      	ldr	r3, [r7, #16]
 80171e0:	889b      	ldrh	r3, [r3, #4]
 80171e2:	b29b      	uxth	r3, r3
 80171e4:	429a      	cmp	r2, r3
 80171e6:	d102      	bne.n	80171ee <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80171e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80171ec:	e0b6      	b.n	801735c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80171ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80171f0:	889b      	ldrh	r3, [r3, #4]
 80171f2:	b29a      	uxth	r2, r3
 80171f4:	693b      	ldr	r3, [r7, #16]
 80171f6:	88db      	ldrh	r3, [r3, #6]
 80171f8:	b29b      	uxth	r3, r3
 80171fa:	429a      	cmp	r2, r3
 80171fc:	d202      	bcs.n	8017204 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80171fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017202:	e0ab      	b.n	801735c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017206:	2b00      	cmp	r3, #0
 8017208:	d009      	beq.n	801721e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801720a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801720c:	88db      	ldrh	r3, [r3, #6]
 801720e:	b29a      	uxth	r2, r3
 8017210:	693b      	ldr	r3, [r7, #16]
 8017212:	889b      	ldrh	r3, [r3, #4]
 8017214:	b29b      	uxth	r3, r3
 8017216:	429a      	cmp	r2, r3
 8017218:	d001      	beq.n	801721e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801721a:	2300      	movs	r3, #0
 801721c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801721e:	693b      	ldr	r3, [r7, #16]
 8017220:	681b      	ldr	r3, [r3, #0]
 8017222:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017224:	693b      	ldr	r3, [r7, #16]
 8017226:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801722a:	2b00      	cmp	r3, #0
 801722c:	d193      	bne.n	8017156 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801722e:	e000      	b.n	8017232 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017230:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017234:	2b00      	cmp	r3, #0
 8017236:	d12d      	bne.n	8017294 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801723a:	2b00      	cmp	r3, #0
 801723c:	d01c      	beq.n	8017278 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801723e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017240:	88db      	ldrh	r3, [r3, #6]
 8017242:	b29a      	uxth	r2, r3
 8017244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017246:	889b      	ldrh	r3, [r3, #4]
 8017248:	b29b      	uxth	r3, r3
 801724a:	429a      	cmp	r2, r3
 801724c:	d906      	bls.n	801725c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801724e:	4b45      	ldr	r3, [pc, #276]	; (8017364 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017250:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017254:	4944      	ldr	r1, [pc, #272]	; (8017368 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017256:	4845      	ldr	r0, [pc, #276]	; (801736c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017258:	f000 ffca 	bl	80181f0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801725c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801725e:	68ba      	ldr	r2, [r7, #8]
 8017260:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017264:	88db      	ldrh	r3, [r3, #6]
 8017266:	b29a      	uxth	r2, r3
 8017268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801726a:	889b      	ldrh	r3, [r3, #4]
 801726c:	b29b      	uxth	r3, r3
 801726e:	429a      	cmp	r2, r3
 8017270:	d010      	beq.n	8017294 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017272:	2300      	movs	r3, #0
 8017274:	623b      	str	r3, [r7, #32]
 8017276:	e00d      	b.n	8017294 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017278:	68fb      	ldr	r3, [r7, #12]
 801727a:	685b      	ldr	r3, [r3, #4]
 801727c:	2b00      	cmp	r3, #0
 801727e:	d006      	beq.n	801728e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017280:	4b38      	ldr	r3, [pc, #224]	; (8017364 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017282:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8017286:	493a      	ldr	r1, [pc, #232]	; (8017370 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017288:	4838      	ldr	r0, [pc, #224]	; (801736c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801728a:	f000 ffb1 	bl	80181f0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	68ba      	ldr	r2, [r7, #8]
 8017292:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	2b00      	cmp	r3, #0
 8017298:	d105      	bne.n	80172a6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	7f9b      	ldrb	r3, [r3, #30]
 801729e:	f003 0301 	and.w	r3, r3, #1
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	d059      	beq.n	801735a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80172a6:	6a3b      	ldr	r3, [r7, #32]
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d04f      	beq.n	801734c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	685b      	ldr	r3, [r3, #4]
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d006      	beq.n	80172c2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80172b4:	68fb      	ldr	r3, [r7, #12]
 80172b6:	685b      	ldr	r3, [r3, #4]
 80172b8:	685b      	ldr	r3, [r3, #4]
 80172ba:	889b      	ldrh	r3, [r3, #4]
 80172bc:	b29b      	uxth	r3, r3
 80172be:	2b00      	cmp	r3, #0
 80172c0:	d002      	beq.n	80172c8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80172c2:	2300      	movs	r3, #0
 80172c4:	623b      	str	r3, [r7, #32]
 80172c6:	e041      	b.n	801734c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80172c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172ca:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80172cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172ce:	681b      	ldr	r3, [r3, #0]
 80172d0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80172d2:	e012      	b.n	80172fa <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80172d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172d6:	685b      	ldr	r3, [r3, #4]
 80172d8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80172da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172dc:	88db      	ldrh	r3, [r3, #6]
 80172de:	b29a      	uxth	r2, r3
 80172e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172e2:	889b      	ldrh	r3, [r3, #4]
 80172e4:	b29b      	uxth	r3, r3
 80172e6:	429a      	cmp	r2, r3
 80172e8:	d002      	beq.n	80172f0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80172ea:	2300      	movs	r3, #0
 80172ec:	623b      	str	r3, [r7, #32]
            break;
 80172ee:	e007      	b.n	8017300 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80172f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172f2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80172f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172f6:	681b      	ldr	r3, [r3, #0]
 80172f8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80172fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d1e9      	bne.n	80172d4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017300:	6a3b      	ldr	r3, [r7, #32]
 8017302:	2b00      	cmp	r3, #0
 8017304:	d022      	beq.n	801734c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	685b      	ldr	r3, [r3, #4]
 801730a:	2b00      	cmp	r3, #0
 801730c:	d106      	bne.n	801731c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801730e:	4b15      	ldr	r3, [pc, #84]	; (8017364 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017310:	f240 12df 	movw	r2, #479	; 0x1df
 8017314:	4917      	ldr	r1, [pc, #92]	; (8017374 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017316:	4815      	ldr	r0, [pc, #84]	; (801736c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017318:	f000 ff6a 	bl	80181f0 <iprintf>
          LWIP_ASSERT("sanity check",
 801731c:	68fb      	ldr	r3, [r7, #12]
 801731e:	685b      	ldr	r3, [r3, #4]
 8017320:	685b      	ldr	r3, [r3, #4]
 8017322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017324:	429a      	cmp	r2, r3
 8017326:	d106      	bne.n	8017336 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017328:	4b0e      	ldr	r3, [pc, #56]	; (8017364 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801732a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801732e:	4911      	ldr	r1, [pc, #68]	; (8017374 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017330:	480e      	ldr	r0, [pc, #56]	; (801736c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017332:	f000 ff5d 	bl	80181f0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017338:	681b      	ldr	r3, [r3, #0]
 801733a:	2b00      	cmp	r3, #0
 801733c:	d006      	beq.n	801734c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801733e:	4b09      	ldr	r3, [pc, #36]	; (8017364 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017340:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8017344:	490c      	ldr	r1, [pc, #48]	; (8017378 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017346:	4809      	ldr	r0, [pc, #36]	; (801736c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017348:	f000 ff52 	bl	80181f0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801734c:	6a3b      	ldr	r3, [r7, #32]
 801734e:	2b00      	cmp	r3, #0
 8017350:	bf14      	ite	ne
 8017352:	2301      	movne	r3, #1
 8017354:	2300      	moveq	r3, #0
 8017356:	b2db      	uxtb	r3, r3
 8017358:	e000      	b.n	801735c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801735a:	2300      	movs	r3, #0
}
 801735c:	4618      	mov	r0, r3
 801735e:	3730      	adds	r7, #48	; 0x30
 8017360:	46bd      	mov	sp, r7
 8017362:	bd80      	pop	{r7, pc}
 8017364:	0801d390 	.word	0x0801d390
 8017368:	0801d474 	.word	0x0801d474
 801736c:	0801d3d8 	.word	0x0801d3d8
 8017370:	0801d494 	.word	0x0801d494
 8017374:	0801d4cc 	.word	0x0801d4cc
 8017378:	0801d4dc 	.word	0x0801d4dc

0801737c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801737c:	b580      	push	{r7, lr}
 801737e:	b08e      	sub	sp, #56	; 0x38
 8017380:	af00      	add	r7, sp, #0
 8017382:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	685b      	ldr	r3, [r3, #4]
 8017388:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801738a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801738c:	781b      	ldrb	r3, [r3, #0]
 801738e:	f003 030f 	and.w	r3, r3, #15
 8017392:	b2db      	uxtb	r3, r3
 8017394:	009b      	lsls	r3, r3, #2
 8017396:	b2db      	uxtb	r3, r3
 8017398:	2b14      	cmp	r3, #20
 801739a:	f040 8167 	bne.w	801766c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801739e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173a0:	88db      	ldrh	r3, [r3, #6]
 80173a2:	b29b      	uxth	r3, r3
 80173a4:	4618      	mov	r0, r3
 80173a6:	f7f5 fe85 	bl	800d0b4 <lwip_htons>
 80173aa:	4603      	mov	r3, r0
 80173ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80173b0:	b29b      	uxth	r3, r3
 80173b2:	00db      	lsls	r3, r3, #3
 80173b4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80173b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173b8:	885b      	ldrh	r3, [r3, #2]
 80173ba:	b29b      	uxth	r3, r3
 80173bc:	4618      	mov	r0, r3
 80173be:	f7f5 fe79 	bl	800d0b4 <lwip_htons>
 80173c2:	4603      	mov	r3, r0
 80173c4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80173c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173c8:	781b      	ldrb	r3, [r3, #0]
 80173ca:	f003 030f 	and.w	r3, r3, #15
 80173ce:	b2db      	uxtb	r3, r3
 80173d0:	009b      	lsls	r3, r3, #2
 80173d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80173d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80173da:	b29b      	uxth	r3, r3
 80173dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80173de:	429a      	cmp	r2, r3
 80173e0:	f0c0 8146 	bcc.w	8017670 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80173e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80173e8:	b29b      	uxth	r3, r3
 80173ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80173ec:	1ad3      	subs	r3, r2, r3
 80173ee:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80173f0:	6878      	ldr	r0, [r7, #4]
 80173f2:	f7f7 fb77 	bl	800eae4 <pbuf_clen>
 80173f6:	4603      	mov	r3, r0
 80173f8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80173fa:	4b9f      	ldr	r3, [pc, #636]	; (8017678 <ip4_reass+0x2fc>)
 80173fc:	881b      	ldrh	r3, [r3, #0]
 80173fe:	461a      	mov	r2, r3
 8017400:	8c3b      	ldrh	r3, [r7, #32]
 8017402:	4413      	add	r3, r2
 8017404:	2b0a      	cmp	r3, #10
 8017406:	dd10      	ble.n	801742a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017408:	8c3b      	ldrh	r3, [r7, #32]
 801740a:	4619      	mov	r1, r3
 801740c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801740e:	f7ff fd81 	bl	8016f14 <ip_reass_remove_oldest_datagram>
 8017412:	4603      	mov	r3, r0
 8017414:	2b00      	cmp	r3, #0
 8017416:	f000 812d 	beq.w	8017674 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801741a:	4b97      	ldr	r3, [pc, #604]	; (8017678 <ip4_reass+0x2fc>)
 801741c:	881b      	ldrh	r3, [r3, #0]
 801741e:	461a      	mov	r2, r3
 8017420:	8c3b      	ldrh	r3, [r7, #32]
 8017422:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017424:	2b0a      	cmp	r3, #10
 8017426:	f300 8125 	bgt.w	8017674 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801742a:	4b94      	ldr	r3, [pc, #592]	; (801767c <ip4_reass+0x300>)
 801742c:	681b      	ldr	r3, [r3, #0]
 801742e:	633b      	str	r3, [r7, #48]	; 0x30
 8017430:	e015      	b.n	801745e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017434:	695a      	ldr	r2, [r3, #20]
 8017436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017438:	68db      	ldr	r3, [r3, #12]
 801743a:	429a      	cmp	r2, r3
 801743c:	d10c      	bne.n	8017458 <ip4_reass+0xdc>
 801743e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017440:	699a      	ldr	r2, [r3, #24]
 8017442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017444:	691b      	ldr	r3, [r3, #16]
 8017446:	429a      	cmp	r2, r3
 8017448:	d106      	bne.n	8017458 <ip4_reass+0xdc>
 801744a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801744c:	899a      	ldrh	r2, [r3, #12]
 801744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017450:	889b      	ldrh	r3, [r3, #4]
 8017452:	b29b      	uxth	r3, r3
 8017454:	429a      	cmp	r2, r3
 8017456:	d006      	beq.n	8017466 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	633b      	str	r3, [r7, #48]	; 0x30
 801745e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017460:	2b00      	cmp	r3, #0
 8017462:	d1e6      	bne.n	8017432 <ip4_reass+0xb6>
 8017464:	e000      	b.n	8017468 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017466:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801746a:	2b00      	cmp	r3, #0
 801746c:	d109      	bne.n	8017482 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801746e:	8c3b      	ldrh	r3, [r7, #32]
 8017470:	4619      	mov	r1, r3
 8017472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017474:	f7ff fdb0 	bl	8016fd8 <ip_reass_enqueue_new_datagram>
 8017478:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801747a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801747c:	2b00      	cmp	r3, #0
 801747e:	d11c      	bne.n	80174ba <ip4_reass+0x13e>
      goto nullreturn;
 8017480:	e109      	b.n	8017696 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017484:	88db      	ldrh	r3, [r3, #6]
 8017486:	b29b      	uxth	r3, r3
 8017488:	4618      	mov	r0, r3
 801748a:	f7f5 fe13 	bl	800d0b4 <lwip_htons>
 801748e:	4603      	mov	r3, r0
 8017490:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017494:	2b00      	cmp	r3, #0
 8017496:	d110      	bne.n	80174ba <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801749a:	89db      	ldrh	r3, [r3, #14]
 801749c:	4618      	mov	r0, r3
 801749e:	f7f5 fe09 	bl	800d0b4 <lwip_htons>
 80174a2:	4603      	mov	r3, r0
 80174a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d006      	beq.n	80174ba <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80174ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174ae:	3308      	adds	r3, #8
 80174b0:	2214      	movs	r2, #20
 80174b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80174b4:	4618      	mov	r0, r3
 80174b6:	f000 fdc1 	bl	801803c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80174ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174bc:	88db      	ldrh	r3, [r3, #6]
 80174be:	b29b      	uxth	r3, r3
 80174c0:	f003 0320 	and.w	r3, r3, #32
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	bf0c      	ite	eq
 80174c8:	2301      	moveq	r3, #1
 80174ca:	2300      	movne	r3, #0
 80174cc:	b2db      	uxtb	r3, r3
 80174ce:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80174d0:	69fb      	ldr	r3, [r7, #28]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d00e      	beq.n	80174f4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80174d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80174d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80174da:	4413      	add	r3, r2
 80174dc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80174de:	8b7a      	ldrh	r2, [r7, #26]
 80174e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80174e2:	429a      	cmp	r2, r3
 80174e4:	f0c0 80a0 	bcc.w	8017628 <ip4_reass+0x2ac>
 80174e8:	8b7b      	ldrh	r3, [r7, #26]
 80174ea:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80174ee:	4293      	cmp	r3, r2
 80174f0:	f200 809a 	bhi.w	8017628 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80174f4:	69fa      	ldr	r2, [r7, #28]
 80174f6:	6879      	ldr	r1, [r7, #4]
 80174f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80174fa:	f7ff fdd5 	bl	80170a8 <ip_reass_chain_frag_into_datagram_and_validate>
 80174fe:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017500:	697b      	ldr	r3, [r7, #20]
 8017502:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017506:	f000 8091 	beq.w	801762c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801750a:	4b5b      	ldr	r3, [pc, #364]	; (8017678 <ip4_reass+0x2fc>)
 801750c:	881a      	ldrh	r2, [r3, #0]
 801750e:	8c3b      	ldrh	r3, [r7, #32]
 8017510:	4413      	add	r3, r2
 8017512:	b29a      	uxth	r2, r3
 8017514:	4b58      	ldr	r3, [pc, #352]	; (8017678 <ip4_reass+0x2fc>)
 8017516:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017518:	69fb      	ldr	r3, [r7, #28]
 801751a:	2b00      	cmp	r3, #0
 801751c:	d00d      	beq.n	801753a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801751e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017520:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017522:	4413      	add	r3, r2
 8017524:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017528:	8a7a      	ldrh	r2, [r7, #18]
 801752a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801752c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801752e:	7f9b      	ldrb	r3, [r3, #30]
 8017530:	f043 0301 	orr.w	r3, r3, #1
 8017534:	b2da      	uxtb	r2, r3
 8017536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017538:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801753a:	697b      	ldr	r3, [r7, #20]
 801753c:	2b01      	cmp	r3, #1
 801753e:	d171      	bne.n	8017624 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017542:	8b9b      	ldrh	r3, [r3, #28]
 8017544:	3314      	adds	r3, #20
 8017546:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801754a:	685b      	ldr	r3, [r3, #4]
 801754c:	685b      	ldr	r3, [r3, #4]
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017554:	685b      	ldr	r3, [r3, #4]
 8017556:	685b      	ldr	r3, [r3, #4]
 8017558:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801755a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801755c:	3308      	adds	r3, #8
 801755e:	2214      	movs	r2, #20
 8017560:	4619      	mov	r1, r3
 8017562:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017564:	f000 fd6a 	bl	801803c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017568:	8a3b      	ldrh	r3, [r7, #16]
 801756a:	4618      	mov	r0, r3
 801756c:	f7f5 fda2 	bl	800d0b4 <lwip_htons>
 8017570:	4603      	mov	r3, r0
 8017572:	461a      	mov	r2, r3
 8017574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017576:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801757a:	2200      	movs	r2, #0
 801757c:	719a      	strb	r2, [r3, #6]
 801757e:	2200      	movs	r2, #0
 8017580:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017584:	2200      	movs	r2, #0
 8017586:	729a      	strb	r2, [r3, #10]
 8017588:	2200      	movs	r2, #0
 801758a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801758c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801758e:	685b      	ldr	r3, [r3, #4]
 8017590:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017592:	e00d      	b.n	80175b0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017596:	685b      	ldr	r3, [r3, #4]
 8017598:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801759a:	2114      	movs	r1, #20
 801759c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801759e:	f7f7 f98d 	bl	800e8bc <pbuf_remove_header>
      pbuf_cat(p, r);
 80175a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80175a4:	6878      	ldr	r0, [r7, #4]
 80175a6:	f7f7 fadd 	bl	800eb64 <pbuf_cat>
      r = iprh->next_pbuf;
 80175aa:	68fb      	ldr	r3, [r7, #12]
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80175b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d1ee      	bne.n	8017594 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80175b6:	4b31      	ldr	r3, [pc, #196]	; (801767c <ip4_reass+0x300>)
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80175bc:	429a      	cmp	r2, r3
 80175be:	d102      	bne.n	80175c6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80175c0:	2300      	movs	r3, #0
 80175c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80175c4:	e010      	b.n	80175e8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80175c6:	4b2d      	ldr	r3, [pc, #180]	; (801767c <ip4_reass+0x300>)
 80175c8:	681b      	ldr	r3, [r3, #0]
 80175ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80175cc:	e007      	b.n	80175de <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80175ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175d0:	681b      	ldr	r3, [r3, #0]
 80175d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80175d4:	429a      	cmp	r2, r3
 80175d6:	d006      	beq.n	80175e6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80175d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80175de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d1f4      	bne.n	80175ce <ip4_reass+0x252>
 80175e4:	e000      	b.n	80175e8 <ip4_reass+0x26c>
          break;
 80175e6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80175e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80175ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80175ec:	f7ff fd2e 	bl	801704c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80175f0:	6878      	ldr	r0, [r7, #4]
 80175f2:	f7f7 fa77 	bl	800eae4 <pbuf_clen>
 80175f6:	4603      	mov	r3, r0
 80175f8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80175fa:	4b1f      	ldr	r3, [pc, #124]	; (8017678 <ip4_reass+0x2fc>)
 80175fc:	881b      	ldrh	r3, [r3, #0]
 80175fe:	8c3a      	ldrh	r2, [r7, #32]
 8017600:	429a      	cmp	r2, r3
 8017602:	d906      	bls.n	8017612 <ip4_reass+0x296>
 8017604:	4b1e      	ldr	r3, [pc, #120]	; (8017680 <ip4_reass+0x304>)
 8017606:	f240 229b 	movw	r2, #667	; 0x29b
 801760a:	491e      	ldr	r1, [pc, #120]	; (8017684 <ip4_reass+0x308>)
 801760c:	481e      	ldr	r0, [pc, #120]	; (8017688 <ip4_reass+0x30c>)
 801760e:	f000 fdef 	bl	80181f0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017612:	4b19      	ldr	r3, [pc, #100]	; (8017678 <ip4_reass+0x2fc>)
 8017614:	881a      	ldrh	r2, [r3, #0]
 8017616:	8c3b      	ldrh	r3, [r7, #32]
 8017618:	1ad3      	subs	r3, r2, r3
 801761a:	b29a      	uxth	r2, r3
 801761c:	4b16      	ldr	r3, [pc, #88]	; (8017678 <ip4_reass+0x2fc>)
 801761e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	e03c      	b.n	801769e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017624:	2300      	movs	r3, #0
 8017626:	e03a      	b.n	801769e <ip4_reass+0x322>
      goto nullreturn_ipr;
 8017628:	bf00      	nop
 801762a:	e000      	b.n	801762e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801762c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017630:	2b00      	cmp	r3, #0
 8017632:	d106      	bne.n	8017642 <ip4_reass+0x2c6>
 8017634:	4b12      	ldr	r3, [pc, #72]	; (8017680 <ip4_reass+0x304>)
 8017636:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801763a:	4914      	ldr	r1, [pc, #80]	; (801768c <ip4_reass+0x310>)
 801763c:	4812      	ldr	r0, [pc, #72]	; (8017688 <ip4_reass+0x30c>)
 801763e:	f000 fdd7 	bl	80181f0 <iprintf>
  if (ipr->p == NULL) {
 8017642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017644:	685b      	ldr	r3, [r3, #4]
 8017646:	2b00      	cmp	r3, #0
 8017648:	d124      	bne.n	8017694 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801764a:	4b0c      	ldr	r3, [pc, #48]	; (801767c <ip4_reass+0x300>)
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017650:	429a      	cmp	r2, r3
 8017652:	d006      	beq.n	8017662 <ip4_reass+0x2e6>
 8017654:	4b0a      	ldr	r3, [pc, #40]	; (8017680 <ip4_reass+0x304>)
 8017656:	f240 22ab 	movw	r2, #683	; 0x2ab
 801765a:	490d      	ldr	r1, [pc, #52]	; (8017690 <ip4_reass+0x314>)
 801765c:	480a      	ldr	r0, [pc, #40]	; (8017688 <ip4_reass+0x30c>)
 801765e:	f000 fdc7 	bl	80181f0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017662:	2100      	movs	r1, #0
 8017664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017666:	f7ff fcf1 	bl	801704c <ip_reass_dequeue_datagram>
 801766a:	e014      	b.n	8017696 <ip4_reass+0x31a>
    goto nullreturn;
 801766c:	bf00      	nop
 801766e:	e012      	b.n	8017696 <ip4_reass+0x31a>
    goto nullreturn;
 8017670:	bf00      	nop
 8017672:	e010      	b.n	8017696 <ip4_reass+0x31a>
      goto nullreturn;
 8017674:	bf00      	nop
 8017676:	e00e      	b.n	8017696 <ip4_reass+0x31a>
 8017678:	200053c4 	.word	0x200053c4
 801767c:	200053c0 	.word	0x200053c0
 8017680:	0801d390 	.word	0x0801d390
 8017684:	0801d500 	.word	0x0801d500
 8017688:	0801d3d8 	.word	0x0801d3d8
 801768c:	0801d51c 	.word	0x0801d51c
 8017690:	0801d528 	.word	0x0801d528
  }

nullreturn:
 8017694:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017696:	6878      	ldr	r0, [r7, #4]
 8017698:	f7f7 f996 	bl	800e9c8 <pbuf_free>
  return NULL;
 801769c:	2300      	movs	r3, #0
}
 801769e:	4618      	mov	r0, r3
 80176a0:	3738      	adds	r7, #56	; 0x38
 80176a2:	46bd      	mov	sp, r7
 80176a4:	bd80      	pop	{r7, pc}
 80176a6:	bf00      	nop

080176a8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80176a8:	b580      	push	{r7, lr}
 80176aa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80176ac:	2005      	movs	r0, #5
 80176ae:	f7f6 fa95 	bl	800dbdc <memp_malloc>
 80176b2:	4603      	mov	r3, r0
}
 80176b4:	4618      	mov	r0, r3
 80176b6:	bd80      	pop	{r7, pc}

080176b8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80176b8:	b580      	push	{r7, lr}
 80176ba:	b082      	sub	sp, #8
 80176bc:	af00      	add	r7, sp, #0
 80176be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d106      	bne.n	80176d4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80176c6:	4b07      	ldr	r3, [pc, #28]	; (80176e4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80176c8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80176cc:	4906      	ldr	r1, [pc, #24]	; (80176e8 <ip_frag_free_pbuf_custom_ref+0x30>)
 80176ce:	4807      	ldr	r0, [pc, #28]	; (80176ec <ip_frag_free_pbuf_custom_ref+0x34>)
 80176d0:	f000 fd8e 	bl	80181f0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80176d4:	6879      	ldr	r1, [r7, #4]
 80176d6:	2005      	movs	r0, #5
 80176d8:	f7f6 fad2 	bl	800dc80 <memp_free>
}
 80176dc:	bf00      	nop
 80176de:	3708      	adds	r7, #8
 80176e0:	46bd      	mov	sp, r7
 80176e2:	bd80      	pop	{r7, pc}
 80176e4:	0801d390 	.word	0x0801d390
 80176e8:	0801d548 	.word	0x0801d548
 80176ec:	0801d3d8 	.word	0x0801d3d8

080176f0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80176f0:	b580      	push	{r7, lr}
 80176f2:	b084      	sub	sp, #16
 80176f4:	af00      	add	r7, sp, #0
 80176f6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80176fc:	68fb      	ldr	r3, [r7, #12]
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d106      	bne.n	8017710 <ipfrag_free_pbuf_custom+0x20>
 8017702:	4b11      	ldr	r3, [pc, #68]	; (8017748 <ipfrag_free_pbuf_custom+0x58>)
 8017704:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017708:	4910      	ldr	r1, [pc, #64]	; (801774c <ipfrag_free_pbuf_custom+0x5c>)
 801770a:	4811      	ldr	r0, [pc, #68]	; (8017750 <ipfrag_free_pbuf_custom+0x60>)
 801770c:	f000 fd70 	bl	80181f0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017710:	68fa      	ldr	r2, [r7, #12]
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	429a      	cmp	r2, r3
 8017716:	d006      	beq.n	8017726 <ipfrag_free_pbuf_custom+0x36>
 8017718:	4b0b      	ldr	r3, [pc, #44]	; (8017748 <ipfrag_free_pbuf_custom+0x58>)
 801771a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801771e:	490d      	ldr	r1, [pc, #52]	; (8017754 <ipfrag_free_pbuf_custom+0x64>)
 8017720:	480b      	ldr	r0, [pc, #44]	; (8017750 <ipfrag_free_pbuf_custom+0x60>)
 8017722:	f000 fd65 	bl	80181f0 <iprintf>
  if (pcr->original != NULL) {
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	695b      	ldr	r3, [r3, #20]
 801772a:	2b00      	cmp	r3, #0
 801772c:	d004      	beq.n	8017738 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801772e:	68fb      	ldr	r3, [r7, #12]
 8017730:	695b      	ldr	r3, [r3, #20]
 8017732:	4618      	mov	r0, r3
 8017734:	f7f7 f948 	bl	800e9c8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017738:	68f8      	ldr	r0, [r7, #12]
 801773a:	f7ff ffbd 	bl	80176b8 <ip_frag_free_pbuf_custom_ref>
}
 801773e:	bf00      	nop
 8017740:	3710      	adds	r7, #16
 8017742:	46bd      	mov	sp, r7
 8017744:	bd80      	pop	{r7, pc}
 8017746:	bf00      	nop
 8017748:	0801d390 	.word	0x0801d390
 801774c:	0801d554 	.word	0x0801d554
 8017750:	0801d3d8 	.word	0x0801d3d8
 8017754:	0801d560 	.word	0x0801d560

08017758 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017758:	b580      	push	{r7, lr}
 801775a:	b094      	sub	sp, #80	; 0x50
 801775c:	af02      	add	r7, sp, #8
 801775e:	60f8      	str	r0, [r7, #12]
 8017760:	60b9      	str	r1, [r7, #8]
 8017762:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017764:	2300      	movs	r3, #0
 8017766:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801776a:	68bb      	ldr	r3, [r7, #8]
 801776c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801776e:	3b14      	subs	r3, #20
 8017770:	2b00      	cmp	r3, #0
 8017772:	da00      	bge.n	8017776 <ip4_frag+0x1e>
 8017774:	3307      	adds	r3, #7
 8017776:	10db      	asrs	r3, r3, #3
 8017778:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801777a:	2314      	movs	r3, #20
 801777c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801777e:	68fb      	ldr	r3, [r7, #12]
 8017780:	685b      	ldr	r3, [r3, #4]
 8017782:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017786:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801778a:	781b      	ldrb	r3, [r3, #0]
 801778c:	f003 030f 	and.w	r3, r3, #15
 8017790:	b2db      	uxtb	r3, r3
 8017792:	009b      	lsls	r3, r3, #2
 8017794:	b2db      	uxtb	r3, r3
 8017796:	2b14      	cmp	r3, #20
 8017798:	d002      	beq.n	80177a0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801779a:	f06f 0305 	mvn.w	r3, #5
 801779e:	e110      	b.n	80179c2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	895b      	ldrh	r3, [r3, #10]
 80177a4:	2b13      	cmp	r3, #19
 80177a6:	d809      	bhi.n	80177bc <ip4_frag+0x64>
 80177a8:	4b88      	ldr	r3, [pc, #544]	; (80179cc <ip4_frag+0x274>)
 80177aa:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80177ae:	4988      	ldr	r1, [pc, #544]	; (80179d0 <ip4_frag+0x278>)
 80177b0:	4888      	ldr	r0, [pc, #544]	; (80179d4 <ip4_frag+0x27c>)
 80177b2:	f000 fd1d 	bl	80181f0 <iprintf>
 80177b6:	f06f 0305 	mvn.w	r3, #5
 80177ba:	e102      	b.n	80179c2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80177bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80177be:	88db      	ldrh	r3, [r3, #6]
 80177c0:	b29b      	uxth	r3, r3
 80177c2:	4618      	mov	r0, r3
 80177c4:	f7f5 fc76 	bl	800d0b4 <lwip_htons>
 80177c8:	4603      	mov	r3, r0
 80177ca:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80177cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80177ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80177d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80177d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80177d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80177dc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80177de:	68fb      	ldr	r3, [r7, #12]
 80177e0:	891b      	ldrh	r3, [r3, #8]
 80177e2:	3b14      	subs	r3, #20
 80177e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80177e8:	e0e1      	b.n	80179ae <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80177ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80177ec:	00db      	lsls	r3, r3, #3
 80177ee:	b29b      	uxth	r3, r3
 80177f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80177f4:	4293      	cmp	r3, r2
 80177f6:	bf28      	it	cs
 80177f8:	4613      	movcs	r3, r2
 80177fa:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80177fc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017800:	2114      	movs	r1, #20
 8017802:	200e      	movs	r0, #14
 8017804:	f7f6 fdfc 	bl	800e400 <pbuf_alloc>
 8017808:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801780c:	2b00      	cmp	r3, #0
 801780e:	f000 80d5 	beq.w	80179bc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017814:	895b      	ldrh	r3, [r3, #10]
 8017816:	2b13      	cmp	r3, #19
 8017818:	d806      	bhi.n	8017828 <ip4_frag+0xd0>
 801781a:	4b6c      	ldr	r3, [pc, #432]	; (80179cc <ip4_frag+0x274>)
 801781c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8017820:	496d      	ldr	r1, [pc, #436]	; (80179d8 <ip4_frag+0x280>)
 8017822:	486c      	ldr	r0, [pc, #432]	; (80179d4 <ip4_frag+0x27c>)
 8017824:	f000 fce4 	bl	80181f0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801782a:	685b      	ldr	r3, [r3, #4]
 801782c:	2214      	movs	r2, #20
 801782e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017830:	4618      	mov	r0, r3
 8017832:	f000 fc03 	bl	801803c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017838:	685b      	ldr	r3, [r3, #4]
 801783a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801783c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801783e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017842:	e064      	b.n	801790e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017844:	68fb      	ldr	r3, [r7, #12]
 8017846:	895a      	ldrh	r2, [r3, #10]
 8017848:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801784a:	1ad3      	subs	r3, r2, r3
 801784c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801784e:	68fb      	ldr	r3, [r7, #12]
 8017850:	895b      	ldrh	r3, [r3, #10]
 8017852:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017854:	429a      	cmp	r2, r3
 8017856:	d906      	bls.n	8017866 <ip4_frag+0x10e>
 8017858:	4b5c      	ldr	r3, [pc, #368]	; (80179cc <ip4_frag+0x274>)
 801785a:	f240 322d 	movw	r2, #813	; 0x32d
 801785e:	495f      	ldr	r1, [pc, #380]	; (80179dc <ip4_frag+0x284>)
 8017860:	485c      	ldr	r0, [pc, #368]	; (80179d4 <ip4_frag+0x27c>)
 8017862:	f000 fcc5 	bl	80181f0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017866:	8bfa      	ldrh	r2, [r7, #30]
 8017868:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801786c:	4293      	cmp	r3, r2
 801786e:	bf28      	it	cs
 8017870:	4613      	movcs	r3, r2
 8017872:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017876:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801787a:	2b00      	cmp	r3, #0
 801787c:	d105      	bne.n	801788a <ip4_frag+0x132>
        poff = 0;
 801787e:	2300      	movs	r3, #0
 8017880:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017882:	68fb      	ldr	r3, [r7, #12]
 8017884:	681b      	ldr	r3, [r3, #0]
 8017886:	60fb      	str	r3, [r7, #12]
        continue;
 8017888:	e041      	b.n	801790e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801788a:	f7ff ff0d 	bl	80176a8 <ip_frag_alloc_pbuf_custom_ref>
 801788e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017890:	69bb      	ldr	r3, [r7, #24]
 8017892:	2b00      	cmp	r3, #0
 8017894:	d103      	bne.n	801789e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017896:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017898:	f7f7 f896 	bl	800e9c8 <pbuf_free>
        goto memerr;
 801789c:	e08f      	b.n	80179be <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801789e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80178a0:	68fb      	ldr	r3, [r7, #12]
 80178a2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80178a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80178a6:	4413      	add	r3, r2
 80178a8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80178ac:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80178b0:	9201      	str	r2, [sp, #4]
 80178b2:	9300      	str	r3, [sp, #0]
 80178b4:	4603      	mov	r3, r0
 80178b6:	2241      	movs	r2, #65	; 0x41
 80178b8:	2000      	movs	r0, #0
 80178ba:	f7f6 fecb 	bl	800e654 <pbuf_alloced_custom>
 80178be:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80178c0:	697b      	ldr	r3, [r7, #20]
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	d106      	bne.n	80178d4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80178c6:	69b8      	ldr	r0, [r7, #24]
 80178c8:	f7ff fef6 	bl	80176b8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80178cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80178ce:	f7f7 f87b 	bl	800e9c8 <pbuf_free>
        goto memerr;
 80178d2:	e074      	b.n	80179be <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80178d4:	68f8      	ldr	r0, [r7, #12]
 80178d6:	f7f7 f91d 	bl	800eb14 <pbuf_ref>
      pcr->original = p;
 80178da:	69bb      	ldr	r3, [r7, #24]
 80178dc:	68fa      	ldr	r2, [r7, #12]
 80178de:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80178e0:	69bb      	ldr	r3, [r7, #24]
 80178e2:	4a3f      	ldr	r2, [pc, #252]	; (80179e0 <ip4_frag+0x288>)
 80178e4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80178e6:	6979      	ldr	r1, [r7, #20]
 80178e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80178ea:	f7f7 f93b 	bl	800eb64 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80178ee:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80178f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80178f6:	1ad3      	subs	r3, r2, r3
 80178f8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80178fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017900:	2b00      	cmp	r3, #0
 8017902:	d004      	beq.n	801790e <ip4_frag+0x1b6>
        poff = 0;
 8017904:	2300      	movs	r3, #0
 8017906:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	681b      	ldr	r3, [r3, #0]
 801790c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801790e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017912:	2b00      	cmp	r3, #0
 8017914:	d196      	bne.n	8017844 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017916:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017918:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801791c:	4413      	add	r3, r2
 801791e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017920:	68bb      	ldr	r3, [r7, #8]
 8017922:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017924:	f1a3 0213 	sub.w	r2, r3, #19
 8017928:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801792c:	429a      	cmp	r2, r3
 801792e:	bfcc      	ite	gt
 8017930:	2301      	movgt	r3, #1
 8017932:	2300      	movle	r3, #0
 8017934:	b2db      	uxtb	r3, r3
 8017936:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017938:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801793c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017940:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017942:	6a3b      	ldr	r3, [r7, #32]
 8017944:	2b00      	cmp	r3, #0
 8017946:	d002      	beq.n	801794e <ip4_frag+0x1f6>
 8017948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801794a:	2b00      	cmp	r3, #0
 801794c:	d003      	beq.n	8017956 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801794e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017950:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017954:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017956:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017958:	4618      	mov	r0, r3
 801795a:	f7f5 fbab 	bl	800d0b4 <lwip_htons>
 801795e:	4603      	mov	r3, r0
 8017960:	461a      	mov	r2, r3
 8017962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017964:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017966:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017968:	3314      	adds	r3, #20
 801796a:	b29b      	uxth	r3, r3
 801796c:	4618      	mov	r0, r3
 801796e:	f7f5 fba1 	bl	800d0b4 <lwip_htons>
 8017972:	4603      	mov	r3, r0
 8017974:	461a      	mov	r2, r3
 8017976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017978:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801797a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801797c:	2200      	movs	r2, #0
 801797e:	729a      	strb	r2, [r3, #10]
 8017980:	2200      	movs	r2, #0
 8017982:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017984:	68bb      	ldr	r3, [r7, #8]
 8017986:	695b      	ldr	r3, [r3, #20]
 8017988:	687a      	ldr	r2, [r7, #4]
 801798a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801798c:	68b8      	ldr	r0, [r7, #8]
 801798e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017990:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017992:	f7f7 f819 	bl	800e9c8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017996:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801799a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801799c:	1ad3      	subs	r3, r2, r3
 801799e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80179a2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80179a6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80179a8:	4413      	add	r3, r2
 80179aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80179ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	f47f af19 	bne.w	80177ea <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80179b8:	2300      	movs	r3, #0
 80179ba:	e002      	b.n	80179c2 <ip4_frag+0x26a>
      goto memerr;
 80179bc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80179be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80179c2:	4618      	mov	r0, r3
 80179c4:	3748      	adds	r7, #72	; 0x48
 80179c6:	46bd      	mov	sp, r7
 80179c8:	bd80      	pop	{r7, pc}
 80179ca:	bf00      	nop
 80179cc:	0801d390 	.word	0x0801d390
 80179d0:	0801d56c 	.word	0x0801d56c
 80179d4:	0801d3d8 	.word	0x0801d3d8
 80179d8:	0801d588 	.word	0x0801d588
 80179dc:	0801d5a8 	.word	0x0801d5a8
 80179e0:	080176f1 	.word	0x080176f1

080179e4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80179e4:	b580      	push	{r7, lr}
 80179e6:	b086      	sub	sp, #24
 80179e8:	af00      	add	r7, sp, #0
 80179ea:	6078      	str	r0, [r7, #4]
 80179ec:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80179ee:	230e      	movs	r3, #14
 80179f0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	895b      	ldrh	r3, [r3, #10]
 80179f6:	2b0e      	cmp	r3, #14
 80179f8:	d96e      	bls.n	8017ad8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	7bdb      	ldrb	r3, [r3, #15]
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d106      	bne.n	8017a10 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017a02:	683b      	ldr	r3, [r7, #0]
 8017a04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017a08:	3301      	adds	r3, #1
 8017a0a:	b2da      	uxtb	r2, r3
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	685b      	ldr	r3, [r3, #4]
 8017a14:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017a16:	693b      	ldr	r3, [r7, #16]
 8017a18:	7b1a      	ldrb	r2, [r3, #12]
 8017a1a:	7b5b      	ldrb	r3, [r3, #13]
 8017a1c:	021b      	lsls	r3, r3, #8
 8017a1e:	4313      	orrs	r3, r2
 8017a20:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017a22:	693b      	ldr	r3, [r7, #16]
 8017a24:	781b      	ldrb	r3, [r3, #0]
 8017a26:	f003 0301 	and.w	r3, r3, #1
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d023      	beq.n	8017a76 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017a2e:	693b      	ldr	r3, [r7, #16]
 8017a30:	781b      	ldrb	r3, [r3, #0]
 8017a32:	2b01      	cmp	r3, #1
 8017a34:	d10f      	bne.n	8017a56 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017a36:	693b      	ldr	r3, [r7, #16]
 8017a38:	785b      	ldrb	r3, [r3, #1]
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d11b      	bne.n	8017a76 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017a3e:	693b      	ldr	r3, [r7, #16]
 8017a40:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017a42:	2b5e      	cmp	r3, #94	; 0x5e
 8017a44:	d117      	bne.n	8017a76 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	7b5b      	ldrb	r3, [r3, #13]
 8017a4a:	f043 0310 	orr.w	r3, r3, #16
 8017a4e:	b2da      	uxtb	r2, r3
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	735a      	strb	r2, [r3, #13]
 8017a54:	e00f      	b.n	8017a76 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017a56:	693b      	ldr	r3, [r7, #16]
 8017a58:	2206      	movs	r2, #6
 8017a5a:	4928      	ldr	r1, [pc, #160]	; (8017afc <ethernet_input+0x118>)
 8017a5c:	4618      	mov	r0, r3
 8017a5e:	f000 fadf 	bl	8018020 <memcmp>
 8017a62:	4603      	mov	r3, r0
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d106      	bne.n	8017a76 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	7b5b      	ldrb	r3, [r3, #13]
 8017a6c:	f043 0308 	orr.w	r3, r3, #8
 8017a70:	b2da      	uxtb	r2, r3
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017a76:	89fb      	ldrh	r3, [r7, #14]
 8017a78:	2b08      	cmp	r3, #8
 8017a7a:	d003      	beq.n	8017a84 <ethernet_input+0xa0>
 8017a7c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017a80:	d014      	beq.n	8017aac <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017a82:	e032      	b.n	8017aea <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017a84:	683b      	ldr	r3, [r7, #0]
 8017a86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017a8a:	f003 0308 	and.w	r3, r3, #8
 8017a8e:	2b00      	cmp	r3, #0
 8017a90:	d024      	beq.n	8017adc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017a92:	8afb      	ldrh	r3, [r7, #22]
 8017a94:	4619      	mov	r1, r3
 8017a96:	6878      	ldr	r0, [r7, #4]
 8017a98:	f7f6 ff10 	bl	800e8bc <pbuf_remove_header>
 8017a9c:	4603      	mov	r3, r0
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d11e      	bne.n	8017ae0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8017aa2:	6839      	ldr	r1, [r7, #0]
 8017aa4:	6878      	ldr	r0, [r7, #4]
 8017aa6:	f7fe ff27 	bl	80168f8 <ip4_input>
      break;
 8017aaa:	e013      	b.n	8017ad4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017aac:	683b      	ldr	r3, [r7, #0]
 8017aae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017ab2:	f003 0308 	and.w	r3, r3, #8
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d014      	beq.n	8017ae4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017aba:	8afb      	ldrh	r3, [r7, #22]
 8017abc:	4619      	mov	r1, r3
 8017abe:	6878      	ldr	r0, [r7, #4]
 8017ac0:	f7f6 fefc 	bl	800e8bc <pbuf_remove_header>
 8017ac4:	4603      	mov	r3, r0
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	d10e      	bne.n	8017ae8 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017aca:	6839      	ldr	r1, [r7, #0]
 8017acc:	6878      	ldr	r0, [r7, #4]
 8017ace:	f7fe f8c7 	bl	8015c60 <etharp_input>
      break;
 8017ad2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017ad4:	2300      	movs	r3, #0
 8017ad6:	e00c      	b.n	8017af2 <ethernet_input+0x10e>
    goto free_and_return;
 8017ad8:	bf00      	nop
 8017ada:	e006      	b.n	8017aea <ethernet_input+0x106>
        goto free_and_return;
 8017adc:	bf00      	nop
 8017ade:	e004      	b.n	8017aea <ethernet_input+0x106>
        goto free_and_return;
 8017ae0:	bf00      	nop
 8017ae2:	e002      	b.n	8017aea <ethernet_input+0x106>
        goto free_and_return;
 8017ae4:	bf00      	nop
 8017ae6:	e000      	b.n	8017aea <ethernet_input+0x106>
        goto free_and_return;
 8017ae8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017aea:	6878      	ldr	r0, [r7, #4]
 8017aec:	f7f6 ff6c 	bl	800e9c8 <pbuf_free>
  return ERR_OK;
 8017af0:	2300      	movs	r3, #0
}
 8017af2:	4618      	mov	r0, r3
 8017af4:	3718      	adds	r7, #24
 8017af6:	46bd      	mov	sp, r7
 8017af8:	bd80      	pop	{r7, pc}
 8017afa:	bf00      	nop
 8017afc:	08021524 	.word	0x08021524

08017b00 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017b00:	b580      	push	{r7, lr}
 8017b02:	b086      	sub	sp, #24
 8017b04:	af00      	add	r7, sp, #0
 8017b06:	60f8      	str	r0, [r7, #12]
 8017b08:	60b9      	str	r1, [r7, #8]
 8017b0a:	607a      	str	r2, [r7, #4]
 8017b0c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017b0e:	8c3b      	ldrh	r3, [r7, #32]
 8017b10:	4618      	mov	r0, r3
 8017b12:	f7f5 facf 	bl	800d0b4 <lwip_htons>
 8017b16:	4603      	mov	r3, r0
 8017b18:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017b1a:	210e      	movs	r1, #14
 8017b1c:	68b8      	ldr	r0, [r7, #8]
 8017b1e:	f7f6 febd 	bl	800e89c <pbuf_add_header>
 8017b22:	4603      	mov	r3, r0
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d125      	bne.n	8017b74 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017b28:	68bb      	ldr	r3, [r7, #8]
 8017b2a:	685b      	ldr	r3, [r3, #4]
 8017b2c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017b2e:	693b      	ldr	r3, [r7, #16]
 8017b30:	8afa      	ldrh	r2, [r7, #22]
 8017b32:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017b34:	693b      	ldr	r3, [r7, #16]
 8017b36:	2206      	movs	r2, #6
 8017b38:	6839      	ldr	r1, [r7, #0]
 8017b3a:	4618      	mov	r0, r3
 8017b3c:	f000 fa7e 	bl	801803c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017b40:	693b      	ldr	r3, [r7, #16]
 8017b42:	3306      	adds	r3, #6
 8017b44:	2206      	movs	r2, #6
 8017b46:	6879      	ldr	r1, [r7, #4]
 8017b48:	4618      	mov	r0, r3
 8017b4a:	f000 fa77 	bl	801803c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017b4e:	68fb      	ldr	r3, [r7, #12]
 8017b50:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017b54:	2b06      	cmp	r3, #6
 8017b56:	d006      	beq.n	8017b66 <ethernet_output+0x66>
 8017b58:	4b0a      	ldr	r3, [pc, #40]	; (8017b84 <ethernet_output+0x84>)
 8017b5a:	f44f 7299 	mov.w	r2, #306	; 0x132
 8017b5e:	490a      	ldr	r1, [pc, #40]	; (8017b88 <ethernet_output+0x88>)
 8017b60:	480a      	ldr	r0, [pc, #40]	; (8017b8c <ethernet_output+0x8c>)
 8017b62:	f000 fb45 	bl	80181f0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017b66:	68fb      	ldr	r3, [r7, #12]
 8017b68:	699b      	ldr	r3, [r3, #24]
 8017b6a:	68b9      	ldr	r1, [r7, #8]
 8017b6c:	68f8      	ldr	r0, [r7, #12]
 8017b6e:	4798      	blx	r3
 8017b70:	4603      	mov	r3, r0
 8017b72:	e002      	b.n	8017b7a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017b74:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017b76:	f06f 0301 	mvn.w	r3, #1
}
 8017b7a:	4618      	mov	r0, r3
 8017b7c:	3718      	adds	r7, #24
 8017b7e:	46bd      	mov	sp, r7
 8017b80:	bd80      	pop	{r7, pc}
 8017b82:	bf00      	nop
 8017b84:	0801d5b8 	.word	0x0801d5b8
 8017b88:	0801d5f0 	.word	0x0801d5f0
 8017b8c:	0801d624 	.word	0x0801d624

08017b90 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017b90:	b580      	push	{r7, lr}
 8017b92:	b086      	sub	sp, #24
 8017b94:	af00      	add	r7, sp, #0
 8017b96:	6078      	str	r0, [r7, #4]
 8017b98:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8017b9a:	683b      	ldr	r3, [r7, #0]
 8017b9c:	60bb      	str	r3, [r7, #8]
 8017b9e:	2304      	movs	r3, #4
 8017ba0:	60fb      	str	r3, [r7, #12]
 8017ba2:	2300      	movs	r3, #0
 8017ba4:	613b      	str	r3, [r7, #16]
 8017ba6:	2300      	movs	r3, #0
 8017ba8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8017baa:	f107 0308 	add.w	r3, r7, #8
 8017bae:	2100      	movs	r1, #0
 8017bb0:	4618      	mov	r0, r3
 8017bb2:	f7f0 fb7b 	bl	80082ac <osMessageCreate>
 8017bb6:	4602      	mov	r2, r0
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	681b      	ldr	r3, [r3, #0]
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	d102      	bne.n	8017bca <sys_mbox_new+0x3a>
    return ERR_MEM;
 8017bc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017bc8:	e000      	b.n	8017bcc <sys_mbox_new+0x3c>

  return ERR_OK;
 8017bca:	2300      	movs	r3, #0
}
 8017bcc:	4618      	mov	r0, r3
 8017bce:	3718      	adds	r7, #24
 8017bd0:	46bd      	mov	sp, r7
 8017bd2:	bd80      	pop	{r7, pc}

08017bd4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017bd4:	b580      	push	{r7, lr}
 8017bd6:	b084      	sub	sp, #16
 8017bd8:	af00      	add	r7, sp, #0
 8017bda:	6078      	str	r0, [r7, #4]
 8017bdc:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	681b      	ldr	r3, [r3, #0]
 8017be2:	6839      	ldr	r1, [r7, #0]
 8017be4:	2200      	movs	r2, #0
 8017be6:	4618      	mov	r0, r3
 8017be8:	f7f0 fb88 	bl	80082fc <osMessagePut>
 8017bec:	4603      	mov	r3, r0
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d102      	bne.n	8017bf8 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8017bf2:	2300      	movs	r3, #0
 8017bf4:	73fb      	strb	r3, [r7, #15]
 8017bf6:	e001      	b.n	8017bfc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017bf8:	23ff      	movs	r3, #255	; 0xff
 8017bfa:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017c00:	4618      	mov	r0, r3
 8017c02:	3710      	adds	r7, #16
 8017c04:	46bd      	mov	sp, r7
 8017c06:	bd80      	pop	{r7, pc}

08017c08 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017c08:	b580      	push	{r7, lr}
 8017c0a:	b08c      	sub	sp, #48	; 0x30
 8017c0c:	af00      	add	r7, sp, #0
 8017c0e:	61f8      	str	r0, [r7, #28]
 8017c10:	61b9      	str	r1, [r7, #24]
 8017c12:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8017c14:	f7f0 f987 	bl	8007f26 <osKernelSysTick>
 8017c18:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017c1a:	697b      	ldr	r3, [r7, #20]
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d017      	beq.n	8017c50 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8017c20:	69fb      	ldr	r3, [r7, #28]
 8017c22:	6819      	ldr	r1, [r3, #0]
 8017c24:	f107 0320 	add.w	r3, r7, #32
 8017c28:	697a      	ldr	r2, [r7, #20]
 8017c2a:	4618      	mov	r0, r3
 8017c2c:	f7f0 fba6 	bl	800837c <osMessageGet>

    if(event.status == osEventMessage)
 8017c30:	6a3b      	ldr	r3, [r7, #32]
 8017c32:	2b10      	cmp	r3, #16
 8017c34:	d109      	bne.n	8017c4a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8017c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c38:	461a      	mov	r2, r3
 8017c3a:	69bb      	ldr	r3, [r7, #24]
 8017c3c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8017c3e:	f7f0 f972 	bl	8007f26 <osKernelSysTick>
 8017c42:	4602      	mov	r2, r0
 8017c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c46:	1ad3      	subs	r3, r2, r3
 8017c48:	e019      	b.n	8017c7e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017c4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017c4e:	e016      	b.n	8017c7e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8017c50:	69fb      	ldr	r3, [r7, #28]
 8017c52:	6819      	ldr	r1, [r3, #0]
 8017c54:	463b      	mov	r3, r7
 8017c56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017c5a:	4618      	mov	r0, r3
 8017c5c:	f7f0 fb8e 	bl	800837c <osMessageGet>
 8017c60:	f107 0320 	add.w	r3, r7, #32
 8017c64:	463a      	mov	r2, r7
 8017c66:	ca07      	ldmia	r2, {r0, r1, r2}
 8017c68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8017c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c6e:	461a      	mov	r2, r3
 8017c70:	69bb      	ldr	r3, [r7, #24]
 8017c72:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8017c74:	f7f0 f957 	bl	8007f26 <osKernelSysTick>
 8017c78:	4602      	mov	r2, r0
 8017c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c7c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017c7e:	4618      	mov	r0, r3
 8017c80:	3730      	adds	r7, #48	; 0x30
 8017c82:	46bd      	mov	sp, r7
 8017c84:	bd80      	pop	{r7, pc}

08017c86 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017c86:	b480      	push	{r7}
 8017c88:	b083      	sub	sp, #12
 8017c8a:	af00      	add	r7, sp, #0
 8017c8c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	681b      	ldr	r3, [r3, #0]
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d101      	bne.n	8017c9a <sys_mbox_valid+0x14>
    return 0;
 8017c96:	2300      	movs	r3, #0
 8017c98:	e000      	b.n	8017c9c <sys_mbox_valid+0x16>
  else
    return 1;
 8017c9a:	2301      	movs	r3, #1
}
 8017c9c:	4618      	mov	r0, r3
 8017c9e:	370c      	adds	r7, #12
 8017ca0:	46bd      	mov	sp, r7
 8017ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ca6:	4770      	bx	lr

08017ca8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017ca8:	b580      	push	{r7, lr}
 8017caa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8017cac:	4803      	ldr	r0, [pc, #12]	; (8017cbc <sys_init+0x14>)
 8017cae:	f7f0 f9aa 	bl	8008006 <osMutexCreate>
 8017cb2:	4603      	mov	r3, r0
 8017cb4:	4a02      	ldr	r2, [pc, #8]	; (8017cc0 <sys_init+0x18>)
 8017cb6:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8017cb8:	bf00      	nop
 8017cba:	bd80      	pop	{r7, pc}
 8017cbc:	08021534 	.word	0x08021534
 8017cc0:	20018bc4 	.word	0x20018bc4

08017cc4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8017cc4:	b580      	push	{r7, lr}
 8017cc6:	b084      	sub	sp, #16
 8017cc8:	af00      	add	r7, sp, #0
 8017cca:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8017ccc:	2300      	movs	r3, #0
 8017cce:	60bb      	str	r3, [r7, #8]
 8017cd0:	2300      	movs	r3, #0
 8017cd2:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8017cd4:	f107 0308 	add.w	r3, r7, #8
 8017cd8:	4618      	mov	r0, r3
 8017cda:	f7f0 f994 	bl	8008006 <osMutexCreate>
 8017cde:	4602      	mov	r2, r0
 8017ce0:	687b      	ldr	r3, [r7, #4]
 8017ce2:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	681b      	ldr	r3, [r3, #0]
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d102      	bne.n	8017cf2 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017cec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017cf0:	e000      	b.n	8017cf4 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8017cf2:	2300      	movs	r3, #0
}
 8017cf4:	4618      	mov	r0, r3
 8017cf6:	3710      	adds	r7, #16
 8017cf8:	46bd      	mov	sp, r7
 8017cfa:	bd80      	pop	{r7, pc}

08017cfc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8017cfc:	b580      	push	{r7, lr}
 8017cfe:	b082      	sub	sp, #8
 8017d00:	af00      	add	r7, sp, #0
 8017d02:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8017d0c:	4618      	mov	r0, r3
 8017d0e:	f7f0 f993 	bl	8008038 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8017d12:	bf00      	nop
 8017d14:	3708      	adds	r7, #8
 8017d16:	46bd      	mov	sp, r7
 8017d18:	bd80      	pop	{r7, pc}

08017d1a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8017d1a:	b580      	push	{r7, lr}
 8017d1c:	b082      	sub	sp, #8
 8017d1e:	af00      	add	r7, sp, #0
 8017d20:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	681b      	ldr	r3, [r3, #0]
 8017d26:	4618      	mov	r0, r3
 8017d28:	f7f0 f9d4 	bl	80080d4 <osMutexRelease>
}
 8017d2c:	bf00      	nop
 8017d2e:	3708      	adds	r7, #8
 8017d30:	46bd      	mov	sp, r7
 8017d32:	bd80      	pop	{r7, pc}

08017d34 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017d34:	b580      	push	{r7, lr}
 8017d36:	b08c      	sub	sp, #48	; 0x30
 8017d38:	af00      	add	r7, sp, #0
 8017d3a:	60f8      	str	r0, [r7, #12]
 8017d3c:	60b9      	str	r1, [r7, #8]
 8017d3e:	607a      	str	r2, [r7, #4]
 8017d40:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8017d42:	f107 0314 	add.w	r3, r7, #20
 8017d46:	2200      	movs	r2, #0
 8017d48:	601a      	str	r2, [r3, #0]
 8017d4a:	605a      	str	r2, [r3, #4]
 8017d4c:	609a      	str	r2, [r3, #8]
 8017d4e:	60da      	str	r2, [r3, #12]
 8017d50:	611a      	str	r2, [r3, #16]
 8017d52:	615a      	str	r2, [r3, #20]
 8017d54:	619a      	str	r2, [r3, #24]
 8017d56:	68fb      	ldr	r3, [r7, #12]
 8017d58:	617b      	str	r3, [r7, #20]
 8017d5a:	68bb      	ldr	r3, [r7, #8]
 8017d5c:	61bb      	str	r3, [r7, #24]
 8017d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d60:	b21b      	sxth	r3, r3
 8017d62:	83bb      	strh	r3, [r7, #28]
 8017d64:	683b      	ldr	r3, [r7, #0]
 8017d66:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8017d68:	f107 0314 	add.w	r3, r7, #20
 8017d6c:	6879      	ldr	r1, [r7, #4]
 8017d6e:	4618      	mov	r0, r3
 8017d70:	f7f0 f8e9 	bl	8007f46 <osThreadCreate>
 8017d74:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8017d76:	4618      	mov	r0, r3
 8017d78:	3730      	adds	r7, #48	; 0x30
 8017d7a:	46bd      	mov	sp, r7
 8017d7c:	bd80      	pop	{r7, pc}
	...

08017d80 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017d80:	b580      	push	{r7, lr}
 8017d82:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8017d84:	4b04      	ldr	r3, [pc, #16]	; (8017d98 <sys_arch_protect+0x18>)
 8017d86:	681b      	ldr	r3, [r3, #0]
 8017d88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8017d8c:	4618      	mov	r0, r3
 8017d8e:	f7f0 f953 	bl	8008038 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8017d92:	2301      	movs	r3, #1
}
 8017d94:	4618      	mov	r0, r3
 8017d96:	bd80      	pop	{r7, pc}
 8017d98:	20018bc4 	.word	0x20018bc4

08017d9c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017d9c:	b580      	push	{r7, lr}
 8017d9e:	b082      	sub	sp, #8
 8017da0:	af00      	add	r7, sp, #0
 8017da2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017da4:	4b04      	ldr	r3, [pc, #16]	; (8017db8 <sys_arch_unprotect+0x1c>)
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	4618      	mov	r0, r3
 8017daa:	f7f0 f993 	bl	80080d4 <osMutexRelease>
}
 8017dae:	bf00      	nop
 8017db0:	3708      	adds	r7, #8
 8017db2:	46bd      	mov	sp, r7
 8017db4:	bd80      	pop	{r7, pc}
 8017db6:	bf00      	nop
 8017db8:	20018bc4 	.word	0x20018bc4

08017dbc <atoi>:
 8017dbc:	220a      	movs	r2, #10
 8017dbe:	2100      	movs	r1, #0
 8017dc0:	f000 bd12 	b.w	80187e8 <strtol>

08017dc4 <std>:
 8017dc4:	2300      	movs	r3, #0
 8017dc6:	b510      	push	{r4, lr}
 8017dc8:	4604      	mov	r4, r0
 8017dca:	e9c0 3300 	strd	r3, r3, [r0]
 8017dce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017dd2:	6083      	str	r3, [r0, #8]
 8017dd4:	8181      	strh	r1, [r0, #12]
 8017dd6:	6643      	str	r3, [r0, #100]	; 0x64
 8017dd8:	81c2      	strh	r2, [r0, #14]
 8017dda:	6183      	str	r3, [r0, #24]
 8017ddc:	4619      	mov	r1, r3
 8017dde:	2208      	movs	r2, #8
 8017de0:	305c      	adds	r0, #92	; 0x5c
 8017de2:	f000 f953 	bl	801808c <memset>
 8017de6:	4b05      	ldr	r3, [pc, #20]	; (8017dfc <std+0x38>)
 8017de8:	6263      	str	r3, [r4, #36]	; 0x24
 8017dea:	4b05      	ldr	r3, [pc, #20]	; (8017e00 <std+0x3c>)
 8017dec:	62a3      	str	r3, [r4, #40]	; 0x28
 8017dee:	4b05      	ldr	r3, [pc, #20]	; (8017e04 <std+0x40>)
 8017df0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017df2:	4b05      	ldr	r3, [pc, #20]	; (8017e08 <std+0x44>)
 8017df4:	6224      	str	r4, [r4, #32]
 8017df6:	6323      	str	r3, [r4, #48]	; 0x30
 8017df8:	bd10      	pop	{r4, pc}
 8017dfa:	bf00      	nop
 8017dfc:	08018591 	.word	0x08018591
 8017e00:	080185b7 	.word	0x080185b7
 8017e04:	080185ef 	.word	0x080185ef
 8017e08:	08018613 	.word	0x08018613

08017e0c <_cleanup_r>:
 8017e0c:	4901      	ldr	r1, [pc, #4]	; (8017e14 <_cleanup_r+0x8>)
 8017e0e:	f000 b8af 	b.w	8017f70 <_fwalk_reent>
 8017e12:	bf00      	nop
 8017e14:	08018b15 	.word	0x08018b15

08017e18 <__sfmoreglue>:
 8017e18:	b570      	push	{r4, r5, r6, lr}
 8017e1a:	1e4a      	subs	r2, r1, #1
 8017e1c:	2568      	movs	r5, #104	; 0x68
 8017e1e:	4355      	muls	r5, r2
 8017e20:	460e      	mov	r6, r1
 8017e22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017e26:	f000 f989 	bl	801813c <_malloc_r>
 8017e2a:	4604      	mov	r4, r0
 8017e2c:	b140      	cbz	r0, 8017e40 <__sfmoreglue+0x28>
 8017e2e:	2100      	movs	r1, #0
 8017e30:	e9c0 1600 	strd	r1, r6, [r0]
 8017e34:	300c      	adds	r0, #12
 8017e36:	60a0      	str	r0, [r4, #8]
 8017e38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017e3c:	f000 f926 	bl	801808c <memset>
 8017e40:	4620      	mov	r0, r4
 8017e42:	bd70      	pop	{r4, r5, r6, pc}

08017e44 <__sfp_lock_acquire>:
 8017e44:	4801      	ldr	r0, [pc, #4]	; (8017e4c <__sfp_lock_acquire+0x8>)
 8017e46:	f000 b8d8 	b.w	8017ffa <__retarget_lock_acquire_recursive>
 8017e4a:	bf00      	nop
 8017e4c:	20018bd0 	.word	0x20018bd0

08017e50 <__sfp_lock_release>:
 8017e50:	4801      	ldr	r0, [pc, #4]	; (8017e58 <__sfp_lock_release+0x8>)
 8017e52:	f000 b8d3 	b.w	8017ffc <__retarget_lock_release_recursive>
 8017e56:	bf00      	nop
 8017e58:	20018bd0 	.word	0x20018bd0

08017e5c <__sinit_lock_acquire>:
 8017e5c:	4801      	ldr	r0, [pc, #4]	; (8017e64 <__sinit_lock_acquire+0x8>)
 8017e5e:	f000 b8cc 	b.w	8017ffa <__retarget_lock_acquire_recursive>
 8017e62:	bf00      	nop
 8017e64:	20018bcb 	.word	0x20018bcb

08017e68 <__sinit_lock_release>:
 8017e68:	4801      	ldr	r0, [pc, #4]	; (8017e70 <__sinit_lock_release+0x8>)
 8017e6a:	f000 b8c7 	b.w	8017ffc <__retarget_lock_release_recursive>
 8017e6e:	bf00      	nop
 8017e70:	20018bcb 	.word	0x20018bcb

08017e74 <__sinit>:
 8017e74:	b510      	push	{r4, lr}
 8017e76:	4604      	mov	r4, r0
 8017e78:	f7ff fff0 	bl	8017e5c <__sinit_lock_acquire>
 8017e7c:	69a3      	ldr	r3, [r4, #24]
 8017e7e:	b11b      	cbz	r3, 8017e88 <__sinit+0x14>
 8017e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017e84:	f7ff bff0 	b.w	8017e68 <__sinit_lock_release>
 8017e88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017e8c:	6523      	str	r3, [r4, #80]	; 0x50
 8017e8e:	4b13      	ldr	r3, [pc, #76]	; (8017edc <__sinit+0x68>)
 8017e90:	4a13      	ldr	r2, [pc, #76]	; (8017ee0 <__sinit+0x6c>)
 8017e92:	681b      	ldr	r3, [r3, #0]
 8017e94:	62a2      	str	r2, [r4, #40]	; 0x28
 8017e96:	42a3      	cmp	r3, r4
 8017e98:	bf04      	itt	eq
 8017e9a:	2301      	moveq	r3, #1
 8017e9c:	61a3      	streq	r3, [r4, #24]
 8017e9e:	4620      	mov	r0, r4
 8017ea0:	f000 f820 	bl	8017ee4 <__sfp>
 8017ea4:	6060      	str	r0, [r4, #4]
 8017ea6:	4620      	mov	r0, r4
 8017ea8:	f000 f81c 	bl	8017ee4 <__sfp>
 8017eac:	60a0      	str	r0, [r4, #8]
 8017eae:	4620      	mov	r0, r4
 8017eb0:	f000 f818 	bl	8017ee4 <__sfp>
 8017eb4:	2200      	movs	r2, #0
 8017eb6:	60e0      	str	r0, [r4, #12]
 8017eb8:	2104      	movs	r1, #4
 8017eba:	6860      	ldr	r0, [r4, #4]
 8017ebc:	f7ff ff82 	bl	8017dc4 <std>
 8017ec0:	68a0      	ldr	r0, [r4, #8]
 8017ec2:	2201      	movs	r2, #1
 8017ec4:	2109      	movs	r1, #9
 8017ec6:	f7ff ff7d 	bl	8017dc4 <std>
 8017eca:	68e0      	ldr	r0, [r4, #12]
 8017ecc:	2202      	movs	r2, #2
 8017ece:	2112      	movs	r1, #18
 8017ed0:	f7ff ff78 	bl	8017dc4 <std>
 8017ed4:	2301      	movs	r3, #1
 8017ed6:	61a3      	str	r3, [r4, #24]
 8017ed8:	e7d2      	b.n	8017e80 <__sinit+0xc>
 8017eda:	bf00      	nop
 8017edc:	080216a0 	.word	0x080216a0
 8017ee0:	08017e0d 	.word	0x08017e0d

08017ee4 <__sfp>:
 8017ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ee6:	4607      	mov	r7, r0
 8017ee8:	f7ff ffac 	bl	8017e44 <__sfp_lock_acquire>
 8017eec:	4b1e      	ldr	r3, [pc, #120]	; (8017f68 <__sfp+0x84>)
 8017eee:	681e      	ldr	r6, [r3, #0]
 8017ef0:	69b3      	ldr	r3, [r6, #24]
 8017ef2:	b913      	cbnz	r3, 8017efa <__sfp+0x16>
 8017ef4:	4630      	mov	r0, r6
 8017ef6:	f7ff ffbd 	bl	8017e74 <__sinit>
 8017efa:	3648      	adds	r6, #72	; 0x48
 8017efc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017f00:	3b01      	subs	r3, #1
 8017f02:	d503      	bpl.n	8017f0c <__sfp+0x28>
 8017f04:	6833      	ldr	r3, [r6, #0]
 8017f06:	b30b      	cbz	r3, 8017f4c <__sfp+0x68>
 8017f08:	6836      	ldr	r6, [r6, #0]
 8017f0a:	e7f7      	b.n	8017efc <__sfp+0x18>
 8017f0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017f10:	b9d5      	cbnz	r5, 8017f48 <__sfp+0x64>
 8017f12:	4b16      	ldr	r3, [pc, #88]	; (8017f6c <__sfp+0x88>)
 8017f14:	60e3      	str	r3, [r4, #12]
 8017f16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017f1a:	6665      	str	r5, [r4, #100]	; 0x64
 8017f1c:	f000 f86c 	bl	8017ff8 <__retarget_lock_init_recursive>
 8017f20:	f7ff ff96 	bl	8017e50 <__sfp_lock_release>
 8017f24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017f28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017f2c:	6025      	str	r5, [r4, #0]
 8017f2e:	61a5      	str	r5, [r4, #24]
 8017f30:	2208      	movs	r2, #8
 8017f32:	4629      	mov	r1, r5
 8017f34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017f38:	f000 f8a8 	bl	801808c <memset>
 8017f3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017f40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017f44:	4620      	mov	r0, r4
 8017f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f48:	3468      	adds	r4, #104	; 0x68
 8017f4a:	e7d9      	b.n	8017f00 <__sfp+0x1c>
 8017f4c:	2104      	movs	r1, #4
 8017f4e:	4638      	mov	r0, r7
 8017f50:	f7ff ff62 	bl	8017e18 <__sfmoreglue>
 8017f54:	4604      	mov	r4, r0
 8017f56:	6030      	str	r0, [r6, #0]
 8017f58:	2800      	cmp	r0, #0
 8017f5a:	d1d5      	bne.n	8017f08 <__sfp+0x24>
 8017f5c:	f7ff ff78 	bl	8017e50 <__sfp_lock_release>
 8017f60:	230c      	movs	r3, #12
 8017f62:	603b      	str	r3, [r7, #0]
 8017f64:	e7ee      	b.n	8017f44 <__sfp+0x60>
 8017f66:	bf00      	nop
 8017f68:	080216a0 	.word	0x080216a0
 8017f6c:	ffff0001 	.word	0xffff0001

08017f70 <_fwalk_reent>:
 8017f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017f74:	4606      	mov	r6, r0
 8017f76:	4688      	mov	r8, r1
 8017f78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017f7c:	2700      	movs	r7, #0
 8017f7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017f82:	f1b9 0901 	subs.w	r9, r9, #1
 8017f86:	d505      	bpl.n	8017f94 <_fwalk_reent+0x24>
 8017f88:	6824      	ldr	r4, [r4, #0]
 8017f8a:	2c00      	cmp	r4, #0
 8017f8c:	d1f7      	bne.n	8017f7e <_fwalk_reent+0xe>
 8017f8e:	4638      	mov	r0, r7
 8017f90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017f94:	89ab      	ldrh	r3, [r5, #12]
 8017f96:	2b01      	cmp	r3, #1
 8017f98:	d907      	bls.n	8017faa <_fwalk_reent+0x3a>
 8017f9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017f9e:	3301      	adds	r3, #1
 8017fa0:	d003      	beq.n	8017faa <_fwalk_reent+0x3a>
 8017fa2:	4629      	mov	r1, r5
 8017fa4:	4630      	mov	r0, r6
 8017fa6:	47c0      	blx	r8
 8017fa8:	4307      	orrs	r7, r0
 8017faa:	3568      	adds	r5, #104	; 0x68
 8017fac:	e7e9      	b.n	8017f82 <_fwalk_reent+0x12>
	...

08017fb0 <__libc_init_array>:
 8017fb0:	b570      	push	{r4, r5, r6, lr}
 8017fb2:	4d0d      	ldr	r5, [pc, #52]	; (8017fe8 <__libc_init_array+0x38>)
 8017fb4:	4c0d      	ldr	r4, [pc, #52]	; (8017fec <__libc_init_array+0x3c>)
 8017fb6:	1b64      	subs	r4, r4, r5
 8017fb8:	10a4      	asrs	r4, r4, #2
 8017fba:	2600      	movs	r6, #0
 8017fbc:	42a6      	cmp	r6, r4
 8017fbe:	d109      	bne.n	8017fd4 <__libc_init_array+0x24>
 8017fc0:	4d0b      	ldr	r5, [pc, #44]	; (8017ff0 <__libc_init_array+0x40>)
 8017fc2:	4c0c      	ldr	r4, [pc, #48]	; (8017ff4 <__libc_init_array+0x44>)
 8017fc4:	f001 ff7e 	bl	8019ec4 <_init>
 8017fc8:	1b64      	subs	r4, r4, r5
 8017fca:	10a4      	asrs	r4, r4, #2
 8017fcc:	2600      	movs	r6, #0
 8017fce:	42a6      	cmp	r6, r4
 8017fd0:	d105      	bne.n	8017fde <__libc_init_array+0x2e>
 8017fd2:	bd70      	pop	{r4, r5, r6, pc}
 8017fd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8017fd8:	4798      	blx	r3
 8017fda:	3601      	adds	r6, #1
 8017fdc:	e7ee      	b.n	8017fbc <__libc_init_array+0xc>
 8017fde:	f855 3b04 	ldr.w	r3, [r5], #4
 8017fe2:	4798      	blx	r3
 8017fe4:	3601      	adds	r6, #1
 8017fe6:	e7f2      	b.n	8017fce <__libc_init_array+0x1e>
 8017fe8:	080217ac 	.word	0x080217ac
 8017fec:	080217ac 	.word	0x080217ac
 8017ff0:	080217ac 	.word	0x080217ac
 8017ff4:	080217b0 	.word	0x080217b0

08017ff8 <__retarget_lock_init_recursive>:
 8017ff8:	4770      	bx	lr

08017ffa <__retarget_lock_acquire_recursive>:
 8017ffa:	4770      	bx	lr

08017ffc <__retarget_lock_release_recursive>:
 8017ffc:	4770      	bx	lr
	...

08018000 <malloc>:
 8018000:	4b02      	ldr	r3, [pc, #8]	; (801800c <malloc+0xc>)
 8018002:	4601      	mov	r1, r0
 8018004:	6818      	ldr	r0, [r3, #0]
 8018006:	f000 b899 	b.w	801813c <_malloc_r>
 801800a:	bf00      	nop
 801800c:	20000730 	.word	0x20000730

08018010 <free>:
 8018010:	4b02      	ldr	r3, [pc, #8]	; (801801c <free+0xc>)
 8018012:	4601      	mov	r1, r0
 8018014:	6818      	ldr	r0, [r3, #0]
 8018016:	f000 b841 	b.w	801809c <_free_r>
 801801a:	bf00      	nop
 801801c:	20000730 	.word	0x20000730

08018020 <memcmp>:
 8018020:	b530      	push	{r4, r5, lr}
 8018022:	3901      	subs	r1, #1
 8018024:	2400      	movs	r4, #0
 8018026:	42a2      	cmp	r2, r4
 8018028:	d101      	bne.n	801802e <memcmp+0xe>
 801802a:	2000      	movs	r0, #0
 801802c:	e005      	b.n	801803a <memcmp+0x1a>
 801802e:	5d03      	ldrb	r3, [r0, r4]
 8018030:	3401      	adds	r4, #1
 8018032:	5d0d      	ldrb	r5, [r1, r4]
 8018034:	42ab      	cmp	r3, r5
 8018036:	d0f6      	beq.n	8018026 <memcmp+0x6>
 8018038:	1b58      	subs	r0, r3, r5
 801803a:	bd30      	pop	{r4, r5, pc}

0801803c <memcpy>:
 801803c:	440a      	add	r2, r1
 801803e:	4291      	cmp	r1, r2
 8018040:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8018044:	d100      	bne.n	8018048 <memcpy+0xc>
 8018046:	4770      	bx	lr
 8018048:	b510      	push	{r4, lr}
 801804a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801804e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018052:	4291      	cmp	r1, r2
 8018054:	d1f9      	bne.n	801804a <memcpy+0xe>
 8018056:	bd10      	pop	{r4, pc}

08018058 <memmove>:
 8018058:	4288      	cmp	r0, r1
 801805a:	b510      	push	{r4, lr}
 801805c:	eb01 0402 	add.w	r4, r1, r2
 8018060:	d902      	bls.n	8018068 <memmove+0x10>
 8018062:	4284      	cmp	r4, r0
 8018064:	4623      	mov	r3, r4
 8018066:	d807      	bhi.n	8018078 <memmove+0x20>
 8018068:	1e43      	subs	r3, r0, #1
 801806a:	42a1      	cmp	r1, r4
 801806c:	d008      	beq.n	8018080 <memmove+0x28>
 801806e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018072:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018076:	e7f8      	b.n	801806a <memmove+0x12>
 8018078:	4402      	add	r2, r0
 801807a:	4601      	mov	r1, r0
 801807c:	428a      	cmp	r2, r1
 801807e:	d100      	bne.n	8018082 <memmove+0x2a>
 8018080:	bd10      	pop	{r4, pc}
 8018082:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018086:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801808a:	e7f7      	b.n	801807c <memmove+0x24>

0801808c <memset>:
 801808c:	4402      	add	r2, r0
 801808e:	4603      	mov	r3, r0
 8018090:	4293      	cmp	r3, r2
 8018092:	d100      	bne.n	8018096 <memset+0xa>
 8018094:	4770      	bx	lr
 8018096:	f803 1b01 	strb.w	r1, [r3], #1
 801809a:	e7f9      	b.n	8018090 <memset+0x4>

0801809c <_free_r>:
 801809c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801809e:	2900      	cmp	r1, #0
 80180a0:	d048      	beq.n	8018134 <_free_r+0x98>
 80180a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80180a6:	9001      	str	r0, [sp, #4]
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	f1a1 0404 	sub.w	r4, r1, #4
 80180ae:	bfb8      	it	lt
 80180b0:	18e4      	addlt	r4, r4, r3
 80180b2:	f000 fdf3 	bl	8018c9c <__malloc_lock>
 80180b6:	4a20      	ldr	r2, [pc, #128]	; (8018138 <_free_r+0x9c>)
 80180b8:	9801      	ldr	r0, [sp, #4]
 80180ba:	6813      	ldr	r3, [r2, #0]
 80180bc:	4615      	mov	r5, r2
 80180be:	b933      	cbnz	r3, 80180ce <_free_r+0x32>
 80180c0:	6063      	str	r3, [r4, #4]
 80180c2:	6014      	str	r4, [r2, #0]
 80180c4:	b003      	add	sp, #12
 80180c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80180ca:	f000 bded 	b.w	8018ca8 <__malloc_unlock>
 80180ce:	42a3      	cmp	r3, r4
 80180d0:	d90b      	bls.n	80180ea <_free_r+0x4e>
 80180d2:	6821      	ldr	r1, [r4, #0]
 80180d4:	1862      	adds	r2, r4, r1
 80180d6:	4293      	cmp	r3, r2
 80180d8:	bf04      	itt	eq
 80180da:	681a      	ldreq	r2, [r3, #0]
 80180dc:	685b      	ldreq	r3, [r3, #4]
 80180de:	6063      	str	r3, [r4, #4]
 80180e0:	bf04      	itt	eq
 80180e2:	1852      	addeq	r2, r2, r1
 80180e4:	6022      	streq	r2, [r4, #0]
 80180e6:	602c      	str	r4, [r5, #0]
 80180e8:	e7ec      	b.n	80180c4 <_free_r+0x28>
 80180ea:	461a      	mov	r2, r3
 80180ec:	685b      	ldr	r3, [r3, #4]
 80180ee:	b10b      	cbz	r3, 80180f4 <_free_r+0x58>
 80180f0:	42a3      	cmp	r3, r4
 80180f2:	d9fa      	bls.n	80180ea <_free_r+0x4e>
 80180f4:	6811      	ldr	r1, [r2, #0]
 80180f6:	1855      	adds	r5, r2, r1
 80180f8:	42a5      	cmp	r5, r4
 80180fa:	d10b      	bne.n	8018114 <_free_r+0x78>
 80180fc:	6824      	ldr	r4, [r4, #0]
 80180fe:	4421      	add	r1, r4
 8018100:	1854      	adds	r4, r2, r1
 8018102:	42a3      	cmp	r3, r4
 8018104:	6011      	str	r1, [r2, #0]
 8018106:	d1dd      	bne.n	80180c4 <_free_r+0x28>
 8018108:	681c      	ldr	r4, [r3, #0]
 801810a:	685b      	ldr	r3, [r3, #4]
 801810c:	6053      	str	r3, [r2, #4]
 801810e:	4421      	add	r1, r4
 8018110:	6011      	str	r1, [r2, #0]
 8018112:	e7d7      	b.n	80180c4 <_free_r+0x28>
 8018114:	d902      	bls.n	801811c <_free_r+0x80>
 8018116:	230c      	movs	r3, #12
 8018118:	6003      	str	r3, [r0, #0]
 801811a:	e7d3      	b.n	80180c4 <_free_r+0x28>
 801811c:	6825      	ldr	r5, [r4, #0]
 801811e:	1961      	adds	r1, r4, r5
 8018120:	428b      	cmp	r3, r1
 8018122:	bf04      	itt	eq
 8018124:	6819      	ldreq	r1, [r3, #0]
 8018126:	685b      	ldreq	r3, [r3, #4]
 8018128:	6063      	str	r3, [r4, #4]
 801812a:	bf04      	itt	eq
 801812c:	1949      	addeq	r1, r1, r5
 801812e:	6021      	streq	r1, [r4, #0]
 8018130:	6054      	str	r4, [r2, #4]
 8018132:	e7c7      	b.n	80180c4 <_free_r+0x28>
 8018134:	b003      	add	sp, #12
 8018136:	bd30      	pop	{r4, r5, pc}
 8018138:	200053c8 	.word	0x200053c8

0801813c <_malloc_r>:
 801813c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801813e:	1ccd      	adds	r5, r1, #3
 8018140:	f025 0503 	bic.w	r5, r5, #3
 8018144:	3508      	adds	r5, #8
 8018146:	2d0c      	cmp	r5, #12
 8018148:	bf38      	it	cc
 801814a:	250c      	movcc	r5, #12
 801814c:	2d00      	cmp	r5, #0
 801814e:	4606      	mov	r6, r0
 8018150:	db01      	blt.n	8018156 <_malloc_r+0x1a>
 8018152:	42a9      	cmp	r1, r5
 8018154:	d903      	bls.n	801815e <_malloc_r+0x22>
 8018156:	230c      	movs	r3, #12
 8018158:	6033      	str	r3, [r6, #0]
 801815a:	2000      	movs	r0, #0
 801815c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801815e:	f000 fd9d 	bl	8018c9c <__malloc_lock>
 8018162:	4921      	ldr	r1, [pc, #132]	; (80181e8 <_malloc_r+0xac>)
 8018164:	680a      	ldr	r2, [r1, #0]
 8018166:	4614      	mov	r4, r2
 8018168:	b99c      	cbnz	r4, 8018192 <_malloc_r+0x56>
 801816a:	4f20      	ldr	r7, [pc, #128]	; (80181ec <_malloc_r+0xb0>)
 801816c:	683b      	ldr	r3, [r7, #0]
 801816e:	b923      	cbnz	r3, 801817a <_malloc_r+0x3e>
 8018170:	4621      	mov	r1, r4
 8018172:	4630      	mov	r0, r6
 8018174:	f000 f97c 	bl	8018470 <_sbrk_r>
 8018178:	6038      	str	r0, [r7, #0]
 801817a:	4629      	mov	r1, r5
 801817c:	4630      	mov	r0, r6
 801817e:	f000 f977 	bl	8018470 <_sbrk_r>
 8018182:	1c43      	adds	r3, r0, #1
 8018184:	d123      	bne.n	80181ce <_malloc_r+0x92>
 8018186:	230c      	movs	r3, #12
 8018188:	6033      	str	r3, [r6, #0]
 801818a:	4630      	mov	r0, r6
 801818c:	f000 fd8c 	bl	8018ca8 <__malloc_unlock>
 8018190:	e7e3      	b.n	801815a <_malloc_r+0x1e>
 8018192:	6823      	ldr	r3, [r4, #0]
 8018194:	1b5b      	subs	r3, r3, r5
 8018196:	d417      	bmi.n	80181c8 <_malloc_r+0x8c>
 8018198:	2b0b      	cmp	r3, #11
 801819a:	d903      	bls.n	80181a4 <_malloc_r+0x68>
 801819c:	6023      	str	r3, [r4, #0]
 801819e:	441c      	add	r4, r3
 80181a0:	6025      	str	r5, [r4, #0]
 80181a2:	e004      	b.n	80181ae <_malloc_r+0x72>
 80181a4:	6863      	ldr	r3, [r4, #4]
 80181a6:	42a2      	cmp	r2, r4
 80181a8:	bf0c      	ite	eq
 80181aa:	600b      	streq	r3, [r1, #0]
 80181ac:	6053      	strne	r3, [r2, #4]
 80181ae:	4630      	mov	r0, r6
 80181b0:	f000 fd7a 	bl	8018ca8 <__malloc_unlock>
 80181b4:	f104 000b 	add.w	r0, r4, #11
 80181b8:	1d23      	adds	r3, r4, #4
 80181ba:	f020 0007 	bic.w	r0, r0, #7
 80181be:	1ac2      	subs	r2, r0, r3
 80181c0:	d0cc      	beq.n	801815c <_malloc_r+0x20>
 80181c2:	1a1b      	subs	r3, r3, r0
 80181c4:	50a3      	str	r3, [r4, r2]
 80181c6:	e7c9      	b.n	801815c <_malloc_r+0x20>
 80181c8:	4622      	mov	r2, r4
 80181ca:	6864      	ldr	r4, [r4, #4]
 80181cc:	e7cc      	b.n	8018168 <_malloc_r+0x2c>
 80181ce:	1cc4      	adds	r4, r0, #3
 80181d0:	f024 0403 	bic.w	r4, r4, #3
 80181d4:	42a0      	cmp	r0, r4
 80181d6:	d0e3      	beq.n	80181a0 <_malloc_r+0x64>
 80181d8:	1a21      	subs	r1, r4, r0
 80181da:	4630      	mov	r0, r6
 80181dc:	f000 f948 	bl	8018470 <_sbrk_r>
 80181e0:	3001      	adds	r0, #1
 80181e2:	d1dd      	bne.n	80181a0 <_malloc_r+0x64>
 80181e4:	e7cf      	b.n	8018186 <_malloc_r+0x4a>
 80181e6:	bf00      	nop
 80181e8:	200053c8 	.word	0x200053c8
 80181ec:	200053cc 	.word	0x200053cc

080181f0 <iprintf>:
 80181f0:	b40f      	push	{r0, r1, r2, r3}
 80181f2:	4b0a      	ldr	r3, [pc, #40]	; (801821c <iprintf+0x2c>)
 80181f4:	b513      	push	{r0, r1, r4, lr}
 80181f6:	681c      	ldr	r4, [r3, #0]
 80181f8:	b124      	cbz	r4, 8018204 <iprintf+0x14>
 80181fa:	69a3      	ldr	r3, [r4, #24]
 80181fc:	b913      	cbnz	r3, 8018204 <iprintf+0x14>
 80181fe:	4620      	mov	r0, r4
 8018200:	f7ff fe38 	bl	8017e74 <__sinit>
 8018204:	ab05      	add	r3, sp, #20
 8018206:	9a04      	ldr	r2, [sp, #16]
 8018208:	68a1      	ldr	r1, [r4, #8]
 801820a:	9301      	str	r3, [sp, #4]
 801820c:	4620      	mov	r0, r4
 801820e:	f001 f8cf 	bl	80193b0 <_vfiprintf_r>
 8018212:	b002      	add	sp, #8
 8018214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018218:	b004      	add	sp, #16
 801821a:	4770      	bx	lr
 801821c:	20000730 	.word	0x20000730

08018220 <_puts_r>:
 8018220:	b570      	push	{r4, r5, r6, lr}
 8018222:	460e      	mov	r6, r1
 8018224:	4605      	mov	r5, r0
 8018226:	b118      	cbz	r0, 8018230 <_puts_r+0x10>
 8018228:	6983      	ldr	r3, [r0, #24]
 801822a:	b90b      	cbnz	r3, 8018230 <_puts_r+0x10>
 801822c:	f7ff fe22 	bl	8017e74 <__sinit>
 8018230:	69ab      	ldr	r3, [r5, #24]
 8018232:	68ac      	ldr	r4, [r5, #8]
 8018234:	b913      	cbnz	r3, 801823c <_puts_r+0x1c>
 8018236:	4628      	mov	r0, r5
 8018238:	f7ff fe1c 	bl	8017e74 <__sinit>
 801823c:	4b2c      	ldr	r3, [pc, #176]	; (80182f0 <_puts_r+0xd0>)
 801823e:	429c      	cmp	r4, r3
 8018240:	d120      	bne.n	8018284 <_puts_r+0x64>
 8018242:	686c      	ldr	r4, [r5, #4]
 8018244:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018246:	07db      	lsls	r3, r3, #31
 8018248:	d405      	bmi.n	8018256 <_puts_r+0x36>
 801824a:	89a3      	ldrh	r3, [r4, #12]
 801824c:	0598      	lsls	r0, r3, #22
 801824e:	d402      	bmi.n	8018256 <_puts_r+0x36>
 8018250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018252:	f7ff fed2 	bl	8017ffa <__retarget_lock_acquire_recursive>
 8018256:	89a3      	ldrh	r3, [r4, #12]
 8018258:	0719      	lsls	r1, r3, #28
 801825a:	d51d      	bpl.n	8018298 <_puts_r+0x78>
 801825c:	6923      	ldr	r3, [r4, #16]
 801825e:	b1db      	cbz	r3, 8018298 <_puts_r+0x78>
 8018260:	3e01      	subs	r6, #1
 8018262:	68a3      	ldr	r3, [r4, #8]
 8018264:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8018268:	3b01      	subs	r3, #1
 801826a:	60a3      	str	r3, [r4, #8]
 801826c:	bb39      	cbnz	r1, 80182be <_puts_r+0x9e>
 801826e:	2b00      	cmp	r3, #0
 8018270:	da38      	bge.n	80182e4 <_puts_r+0xc4>
 8018272:	4622      	mov	r2, r4
 8018274:	210a      	movs	r1, #10
 8018276:	4628      	mov	r0, r5
 8018278:	f000 fac0 	bl	80187fc <__swbuf_r>
 801827c:	3001      	adds	r0, #1
 801827e:	d011      	beq.n	80182a4 <_puts_r+0x84>
 8018280:	250a      	movs	r5, #10
 8018282:	e011      	b.n	80182a8 <_puts_r+0x88>
 8018284:	4b1b      	ldr	r3, [pc, #108]	; (80182f4 <_puts_r+0xd4>)
 8018286:	429c      	cmp	r4, r3
 8018288:	d101      	bne.n	801828e <_puts_r+0x6e>
 801828a:	68ac      	ldr	r4, [r5, #8]
 801828c:	e7da      	b.n	8018244 <_puts_r+0x24>
 801828e:	4b1a      	ldr	r3, [pc, #104]	; (80182f8 <_puts_r+0xd8>)
 8018290:	429c      	cmp	r4, r3
 8018292:	bf08      	it	eq
 8018294:	68ec      	ldreq	r4, [r5, #12]
 8018296:	e7d5      	b.n	8018244 <_puts_r+0x24>
 8018298:	4621      	mov	r1, r4
 801829a:	4628      	mov	r0, r5
 801829c:	f000 fb12 	bl	80188c4 <__swsetup_r>
 80182a0:	2800      	cmp	r0, #0
 80182a2:	d0dd      	beq.n	8018260 <_puts_r+0x40>
 80182a4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80182a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80182aa:	07da      	lsls	r2, r3, #31
 80182ac:	d405      	bmi.n	80182ba <_puts_r+0x9a>
 80182ae:	89a3      	ldrh	r3, [r4, #12]
 80182b0:	059b      	lsls	r3, r3, #22
 80182b2:	d402      	bmi.n	80182ba <_puts_r+0x9a>
 80182b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80182b6:	f7ff fea1 	bl	8017ffc <__retarget_lock_release_recursive>
 80182ba:	4628      	mov	r0, r5
 80182bc:	bd70      	pop	{r4, r5, r6, pc}
 80182be:	2b00      	cmp	r3, #0
 80182c0:	da04      	bge.n	80182cc <_puts_r+0xac>
 80182c2:	69a2      	ldr	r2, [r4, #24]
 80182c4:	429a      	cmp	r2, r3
 80182c6:	dc06      	bgt.n	80182d6 <_puts_r+0xb6>
 80182c8:	290a      	cmp	r1, #10
 80182ca:	d004      	beq.n	80182d6 <_puts_r+0xb6>
 80182cc:	6823      	ldr	r3, [r4, #0]
 80182ce:	1c5a      	adds	r2, r3, #1
 80182d0:	6022      	str	r2, [r4, #0]
 80182d2:	7019      	strb	r1, [r3, #0]
 80182d4:	e7c5      	b.n	8018262 <_puts_r+0x42>
 80182d6:	4622      	mov	r2, r4
 80182d8:	4628      	mov	r0, r5
 80182da:	f000 fa8f 	bl	80187fc <__swbuf_r>
 80182de:	3001      	adds	r0, #1
 80182e0:	d1bf      	bne.n	8018262 <_puts_r+0x42>
 80182e2:	e7df      	b.n	80182a4 <_puts_r+0x84>
 80182e4:	6823      	ldr	r3, [r4, #0]
 80182e6:	250a      	movs	r5, #10
 80182e8:	1c5a      	adds	r2, r3, #1
 80182ea:	6022      	str	r2, [r4, #0]
 80182ec:	701d      	strb	r5, [r3, #0]
 80182ee:	e7db      	b.n	80182a8 <_puts_r+0x88>
 80182f0:	08021660 	.word	0x08021660
 80182f4:	08021680 	.word	0x08021680
 80182f8:	08021640 	.word	0x08021640

080182fc <puts>:
 80182fc:	4b02      	ldr	r3, [pc, #8]	; (8018308 <puts+0xc>)
 80182fe:	4601      	mov	r1, r0
 8018300:	6818      	ldr	r0, [r3, #0]
 8018302:	f7ff bf8d 	b.w	8018220 <_puts_r>
 8018306:	bf00      	nop
 8018308:	20000730 	.word	0x20000730

0801830c <rand>:
 801830c:	4b17      	ldr	r3, [pc, #92]	; (801836c <rand+0x60>)
 801830e:	b510      	push	{r4, lr}
 8018310:	681c      	ldr	r4, [r3, #0]
 8018312:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018314:	b9b3      	cbnz	r3, 8018344 <rand+0x38>
 8018316:	2018      	movs	r0, #24
 8018318:	f7ff fe72 	bl	8018000 <malloc>
 801831c:	63a0      	str	r0, [r4, #56]	; 0x38
 801831e:	b928      	cbnz	r0, 801832c <rand+0x20>
 8018320:	4602      	mov	r2, r0
 8018322:	4b13      	ldr	r3, [pc, #76]	; (8018370 <rand+0x64>)
 8018324:	4813      	ldr	r0, [pc, #76]	; (8018374 <rand+0x68>)
 8018326:	214e      	movs	r1, #78	; 0x4e
 8018328:	f000 fb3a 	bl	80189a0 <__assert_func>
 801832c:	4a12      	ldr	r2, [pc, #72]	; (8018378 <rand+0x6c>)
 801832e:	4b13      	ldr	r3, [pc, #76]	; (801837c <rand+0x70>)
 8018330:	e9c0 2300 	strd	r2, r3, [r0]
 8018334:	4b12      	ldr	r3, [pc, #72]	; (8018380 <rand+0x74>)
 8018336:	6083      	str	r3, [r0, #8]
 8018338:	230b      	movs	r3, #11
 801833a:	8183      	strh	r3, [r0, #12]
 801833c:	2201      	movs	r2, #1
 801833e:	2300      	movs	r3, #0
 8018340:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8018344:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018346:	480f      	ldr	r0, [pc, #60]	; (8018384 <rand+0x78>)
 8018348:	690a      	ldr	r2, [r1, #16]
 801834a:	694b      	ldr	r3, [r1, #20]
 801834c:	4c0e      	ldr	r4, [pc, #56]	; (8018388 <rand+0x7c>)
 801834e:	4350      	muls	r0, r2
 8018350:	fb04 0003 	mla	r0, r4, r3, r0
 8018354:	fba2 3404 	umull	r3, r4, r2, r4
 8018358:	1c5a      	adds	r2, r3, #1
 801835a:	4404      	add	r4, r0
 801835c:	f144 0000 	adc.w	r0, r4, #0
 8018360:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8018364:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018368:	bd10      	pop	{r4, pc}
 801836a:	bf00      	nop
 801836c:	20000730 	.word	0x20000730
 8018370:	080216a4 	.word	0x080216a4
 8018374:	080216bb 	.word	0x080216bb
 8018378:	abcd330e 	.word	0xabcd330e
 801837c:	e66d1234 	.word	0xe66d1234
 8018380:	0005deec 	.word	0x0005deec
 8018384:	5851f42d 	.word	0x5851f42d
 8018388:	4c957f2d 	.word	0x4c957f2d

0801838c <realloc>:
 801838c:	4b02      	ldr	r3, [pc, #8]	; (8018398 <realloc+0xc>)
 801838e:	460a      	mov	r2, r1
 8018390:	4601      	mov	r1, r0
 8018392:	6818      	ldr	r0, [r3, #0]
 8018394:	f000 bc8e 	b.w	8018cb4 <_realloc_r>
 8018398:	20000730 	.word	0x20000730

0801839c <cleanup_glue>:
 801839c:	b538      	push	{r3, r4, r5, lr}
 801839e:	460c      	mov	r4, r1
 80183a0:	6809      	ldr	r1, [r1, #0]
 80183a2:	4605      	mov	r5, r0
 80183a4:	b109      	cbz	r1, 80183aa <cleanup_glue+0xe>
 80183a6:	f7ff fff9 	bl	801839c <cleanup_glue>
 80183aa:	4621      	mov	r1, r4
 80183ac:	4628      	mov	r0, r5
 80183ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80183b2:	f7ff be73 	b.w	801809c <_free_r>
	...

080183b8 <_reclaim_reent>:
 80183b8:	4b2c      	ldr	r3, [pc, #176]	; (801846c <_reclaim_reent+0xb4>)
 80183ba:	681b      	ldr	r3, [r3, #0]
 80183bc:	4283      	cmp	r3, r0
 80183be:	b570      	push	{r4, r5, r6, lr}
 80183c0:	4604      	mov	r4, r0
 80183c2:	d051      	beq.n	8018468 <_reclaim_reent+0xb0>
 80183c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80183c6:	b143      	cbz	r3, 80183da <_reclaim_reent+0x22>
 80183c8:	68db      	ldr	r3, [r3, #12]
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d14a      	bne.n	8018464 <_reclaim_reent+0xac>
 80183ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80183d0:	6819      	ldr	r1, [r3, #0]
 80183d2:	b111      	cbz	r1, 80183da <_reclaim_reent+0x22>
 80183d4:	4620      	mov	r0, r4
 80183d6:	f7ff fe61 	bl	801809c <_free_r>
 80183da:	6961      	ldr	r1, [r4, #20]
 80183dc:	b111      	cbz	r1, 80183e4 <_reclaim_reent+0x2c>
 80183de:	4620      	mov	r0, r4
 80183e0:	f7ff fe5c 	bl	801809c <_free_r>
 80183e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80183e6:	b111      	cbz	r1, 80183ee <_reclaim_reent+0x36>
 80183e8:	4620      	mov	r0, r4
 80183ea:	f7ff fe57 	bl	801809c <_free_r>
 80183ee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80183f0:	b111      	cbz	r1, 80183f8 <_reclaim_reent+0x40>
 80183f2:	4620      	mov	r0, r4
 80183f4:	f7ff fe52 	bl	801809c <_free_r>
 80183f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80183fa:	b111      	cbz	r1, 8018402 <_reclaim_reent+0x4a>
 80183fc:	4620      	mov	r0, r4
 80183fe:	f7ff fe4d 	bl	801809c <_free_r>
 8018402:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8018404:	b111      	cbz	r1, 801840c <_reclaim_reent+0x54>
 8018406:	4620      	mov	r0, r4
 8018408:	f7ff fe48 	bl	801809c <_free_r>
 801840c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801840e:	b111      	cbz	r1, 8018416 <_reclaim_reent+0x5e>
 8018410:	4620      	mov	r0, r4
 8018412:	f7ff fe43 	bl	801809c <_free_r>
 8018416:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8018418:	b111      	cbz	r1, 8018420 <_reclaim_reent+0x68>
 801841a:	4620      	mov	r0, r4
 801841c:	f7ff fe3e 	bl	801809c <_free_r>
 8018420:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018422:	b111      	cbz	r1, 801842a <_reclaim_reent+0x72>
 8018424:	4620      	mov	r0, r4
 8018426:	f7ff fe39 	bl	801809c <_free_r>
 801842a:	69a3      	ldr	r3, [r4, #24]
 801842c:	b1e3      	cbz	r3, 8018468 <_reclaim_reent+0xb0>
 801842e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018430:	4620      	mov	r0, r4
 8018432:	4798      	blx	r3
 8018434:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8018436:	b1b9      	cbz	r1, 8018468 <_reclaim_reent+0xb0>
 8018438:	4620      	mov	r0, r4
 801843a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801843e:	f7ff bfad 	b.w	801839c <cleanup_glue>
 8018442:	5949      	ldr	r1, [r1, r5]
 8018444:	b941      	cbnz	r1, 8018458 <_reclaim_reent+0xa0>
 8018446:	3504      	adds	r5, #4
 8018448:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801844a:	2d80      	cmp	r5, #128	; 0x80
 801844c:	68d9      	ldr	r1, [r3, #12]
 801844e:	d1f8      	bne.n	8018442 <_reclaim_reent+0x8a>
 8018450:	4620      	mov	r0, r4
 8018452:	f7ff fe23 	bl	801809c <_free_r>
 8018456:	e7ba      	b.n	80183ce <_reclaim_reent+0x16>
 8018458:	680e      	ldr	r6, [r1, #0]
 801845a:	4620      	mov	r0, r4
 801845c:	f7ff fe1e 	bl	801809c <_free_r>
 8018460:	4631      	mov	r1, r6
 8018462:	e7ef      	b.n	8018444 <_reclaim_reent+0x8c>
 8018464:	2500      	movs	r5, #0
 8018466:	e7ef      	b.n	8018448 <_reclaim_reent+0x90>
 8018468:	bd70      	pop	{r4, r5, r6, pc}
 801846a:	bf00      	nop
 801846c:	20000730 	.word	0x20000730

08018470 <_sbrk_r>:
 8018470:	b538      	push	{r3, r4, r5, lr}
 8018472:	4d06      	ldr	r5, [pc, #24]	; (801848c <_sbrk_r+0x1c>)
 8018474:	2300      	movs	r3, #0
 8018476:	4604      	mov	r4, r0
 8018478:	4608      	mov	r0, r1
 801847a:	602b      	str	r3, [r5, #0]
 801847c:	f7e9 fd5c 	bl	8001f38 <_sbrk>
 8018480:	1c43      	adds	r3, r0, #1
 8018482:	d102      	bne.n	801848a <_sbrk_r+0x1a>
 8018484:	682b      	ldr	r3, [r5, #0]
 8018486:	b103      	cbz	r3, 801848a <_sbrk_r+0x1a>
 8018488:	6023      	str	r3, [r4, #0]
 801848a:	bd38      	pop	{r3, r4, r5, pc}
 801848c:	20018bc0 	.word	0x20018bc0

08018490 <sniprintf>:
 8018490:	b40c      	push	{r2, r3}
 8018492:	b530      	push	{r4, r5, lr}
 8018494:	4b17      	ldr	r3, [pc, #92]	; (80184f4 <sniprintf+0x64>)
 8018496:	1e0c      	subs	r4, r1, #0
 8018498:	681d      	ldr	r5, [r3, #0]
 801849a:	b09d      	sub	sp, #116	; 0x74
 801849c:	da08      	bge.n	80184b0 <sniprintf+0x20>
 801849e:	238b      	movs	r3, #139	; 0x8b
 80184a0:	602b      	str	r3, [r5, #0]
 80184a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80184a6:	b01d      	add	sp, #116	; 0x74
 80184a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80184ac:	b002      	add	sp, #8
 80184ae:	4770      	bx	lr
 80184b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80184b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80184b8:	bf14      	ite	ne
 80184ba:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80184be:	4623      	moveq	r3, r4
 80184c0:	9304      	str	r3, [sp, #16]
 80184c2:	9307      	str	r3, [sp, #28]
 80184c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80184c8:	9002      	str	r0, [sp, #8]
 80184ca:	9006      	str	r0, [sp, #24]
 80184cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80184d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80184d2:	ab21      	add	r3, sp, #132	; 0x84
 80184d4:	a902      	add	r1, sp, #8
 80184d6:	4628      	mov	r0, r5
 80184d8:	9301      	str	r3, [sp, #4]
 80184da:	f000 fc6d 	bl	8018db8 <_svfiprintf_r>
 80184de:	1c43      	adds	r3, r0, #1
 80184e0:	bfbc      	itt	lt
 80184e2:	238b      	movlt	r3, #139	; 0x8b
 80184e4:	602b      	strlt	r3, [r5, #0]
 80184e6:	2c00      	cmp	r4, #0
 80184e8:	d0dd      	beq.n	80184a6 <sniprintf+0x16>
 80184ea:	9b02      	ldr	r3, [sp, #8]
 80184ec:	2200      	movs	r2, #0
 80184ee:	701a      	strb	r2, [r3, #0]
 80184f0:	e7d9      	b.n	80184a6 <sniprintf+0x16>
 80184f2:	bf00      	nop
 80184f4:	20000730 	.word	0x20000730

080184f8 <siprintf>:
 80184f8:	b40e      	push	{r1, r2, r3}
 80184fa:	b500      	push	{lr}
 80184fc:	b09c      	sub	sp, #112	; 0x70
 80184fe:	ab1d      	add	r3, sp, #116	; 0x74
 8018500:	9002      	str	r0, [sp, #8]
 8018502:	9006      	str	r0, [sp, #24]
 8018504:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018508:	4809      	ldr	r0, [pc, #36]	; (8018530 <siprintf+0x38>)
 801850a:	9107      	str	r1, [sp, #28]
 801850c:	9104      	str	r1, [sp, #16]
 801850e:	4909      	ldr	r1, [pc, #36]	; (8018534 <siprintf+0x3c>)
 8018510:	f853 2b04 	ldr.w	r2, [r3], #4
 8018514:	9105      	str	r1, [sp, #20]
 8018516:	6800      	ldr	r0, [r0, #0]
 8018518:	9301      	str	r3, [sp, #4]
 801851a:	a902      	add	r1, sp, #8
 801851c:	f000 fc4c 	bl	8018db8 <_svfiprintf_r>
 8018520:	9b02      	ldr	r3, [sp, #8]
 8018522:	2200      	movs	r2, #0
 8018524:	701a      	strb	r2, [r3, #0]
 8018526:	b01c      	add	sp, #112	; 0x70
 8018528:	f85d eb04 	ldr.w	lr, [sp], #4
 801852c:	b003      	add	sp, #12
 801852e:	4770      	bx	lr
 8018530:	20000730 	.word	0x20000730
 8018534:	ffff0208 	.word	0xffff0208

08018538 <siscanf>:
 8018538:	b40e      	push	{r1, r2, r3}
 801853a:	b510      	push	{r4, lr}
 801853c:	b09f      	sub	sp, #124	; 0x7c
 801853e:	ac21      	add	r4, sp, #132	; 0x84
 8018540:	f44f 7101 	mov.w	r1, #516	; 0x204
 8018544:	f854 2b04 	ldr.w	r2, [r4], #4
 8018548:	9201      	str	r2, [sp, #4]
 801854a:	f8ad 101c 	strh.w	r1, [sp, #28]
 801854e:	9004      	str	r0, [sp, #16]
 8018550:	9008      	str	r0, [sp, #32]
 8018552:	f7e7 fe7f 	bl	8000254 <strlen>
 8018556:	4b0c      	ldr	r3, [pc, #48]	; (8018588 <siscanf+0x50>)
 8018558:	9005      	str	r0, [sp, #20]
 801855a:	9009      	str	r0, [sp, #36]	; 0x24
 801855c:	930d      	str	r3, [sp, #52]	; 0x34
 801855e:	480b      	ldr	r0, [pc, #44]	; (801858c <siscanf+0x54>)
 8018560:	9a01      	ldr	r2, [sp, #4]
 8018562:	6800      	ldr	r0, [r0, #0]
 8018564:	9403      	str	r4, [sp, #12]
 8018566:	2300      	movs	r3, #0
 8018568:	9311      	str	r3, [sp, #68]	; 0x44
 801856a:	9316      	str	r3, [sp, #88]	; 0x58
 801856c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018570:	f8ad 301e 	strh.w	r3, [sp, #30]
 8018574:	a904      	add	r1, sp, #16
 8018576:	4623      	mov	r3, r4
 8018578:	f000 fd78 	bl	801906c <__ssvfiscanf_r>
 801857c:	b01f      	add	sp, #124	; 0x7c
 801857e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018582:	b003      	add	sp, #12
 8018584:	4770      	bx	lr
 8018586:	bf00      	nop
 8018588:	080185b3 	.word	0x080185b3
 801858c:	20000730 	.word	0x20000730

08018590 <__sread>:
 8018590:	b510      	push	{r4, lr}
 8018592:	460c      	mov	r4, r1
 8018594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018598:	f001 fb1a 	bl	8019bd0 <_read_r>
 801859c:	2800      	cmp	r0, #0
 801859e:	bfab      	itete	ge
 80185a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80185a2:	89a3      	ldrhlt	r3, [r4, #12]
 80185a4:	181b      	addge	r3, r3, r0
 80185a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80185aa:	bfac      	ite	ge
 80185ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80185ae:	81a3      	strhlt	r3, [r4, #12]
 80185b0:	bd10      	pop	{r4, pc}

080185b2 <__seofread>:
 80185b2:	2000      	movs	r0, #0
 80185b4:	4770      	bx	lr

080185b6 <__swrite>:
 80185b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185ba:	461f      	mov	r7, r3
 80185bc:	898b      	ldrh	r3, [r1, #12]
 80185be:	05db      	lsls	r3, r3, #23
 80185c0:	4605      	mov	r5, r0
 80185c2:	460c      	mov	r4, r1
 80185c4:	4616      	mov	r6, r2
 80185c6:	d505      	bpl.n	80185d4 <__swrite+0x1e>
 80185c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80185cc:	2302      	movs	r3, #2
 80185ce:	2200      	movs	r2, #0
 80185d0:	f000 faee 	bl	8018bb0 <_lseek_r>
 80185d4:	89a3      	ldrh	r3, [r4, #12]
 80185d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80185da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80185de:	81a3      	strh	r3, [r4, #12]
 80185e0:	4632      	mov	r2, r6
 80185e2:	463b      	mov	r3, r7
 80185e4:	4628      	mov	r0, r5
 80185e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80185ea:	f000 b959 	b.w	80188a0 <_write_r>

080185ee <__sseek>:
 80185ee:	b510      	push	{r4, lr}
 80185f0:	460c      	mov	r4, r1
 80185f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80185f6:	f000 fadb 	bl	8018bb0 <_lseek_r>
 80185fa:	1c43      	adds	r3, r0, #1
 80185fc:	89a3      	ldrh	r3, [r4, #12]
 80185fe:	bf15      	itete	ne
 8018600:	6560      	strne	r0, [r4, #84]	; 0x54
 8018602:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018606:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801860a:	81a3      	strheq	r3, [r4, #12]
 801860c:	bf18      	it	ne
 801860e:	81a3      	strhne	r3, [r4, #12]
 8018610:	bd10      	pop	{r4, pc}

08018612 <__sclose>:
 8018612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018616:	f000 b9e1 	b.w	80189dc <_close_r>

0801861a <strcat>:
 801861a:	b510      	push	{r4, lr}
 801861c:	4602      	mov	r2, r0
 801861e:	7814      	ldrb	r4, [r2, #0]
 8018620:	4613      	mov	r3, r2
 8018622:	3201      	adds	r2, #1
 8018624:	2c00      	cmp	r4, #0
 8018626:	d1fa      	bne.n	801861e <strcat+0x4>
 8018628:	3b01      	subs	r3, #1
 801862a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801862e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018632:	2a00      	cmp	r2, #0
 8018634:	d1f9      	bne.n	801862a <strcat+0x10>
 8018636:	bd10      	pop	{r4, pc}

08018638 <strchr>:
 8018638:	b2c9      	uxtb	r1, r1
 801863a:	4603      	mov	r3, r0
 801863c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018640:	b11a      	cbz	r2, 801864a <strchr+0x12>
 8018642:	428a      	cmp	r2, r1
 8018644:	d1f9      	bne.n	801863a <strchr+0x2>
 8018646:	4618      	mov	r0, r3
 8018648:	4770      	bx	lr
 801864a:	2900      	cmp	r1, #0
 801864c:	bf18      	it	ne
 801864e:	2300      	movne	r3, #0
 8018650:	e7f9      	b.n	8018646 <strchr+0xe>

08018652 <strcpy>:
 8018652:	4603      	mov	r3, r0
 8018654:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018658:	f803 2b01 	strb.w	r2, [r3], #1
 801865c:	2a00      	cmp	r2, #0
 801865e:	d1f9      	bne.n	8018654 <strcpy+0x2>
 8018660:	4770      	bx	lr

08018662 <strncmp>:
 8018662:	b510      	push	{r4, lr}
 8018664:	b16a      	cbz	r2, 8018682 <strncmp+0x20>
 8018666:	3901      	subs	r1, #1
 8018668:	1884      	adds	r4, r0, r2
 801866a:	f810 3b01 	ldrb.w	r3, [r0], #1
 801866e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018672:	4293      	cmp	r3, r2
 8018674:	d103      	bne.n	801867e <strncmp+0x1c>
 8018676:	42a0      	cmp	r0, r4
 8018678:	d001      	beq.n	801867e <strncmp+0x1c>
 801867a:	2b00      	cmp	r3, #0
 801867c:	d1f5      	bne.n	801866a <strncmp+0x8>
 801867e:	1a98      	subs	r0, r3, r2
 8018680:	bd10      	pop	{r4, pc}
 8018682:	4610      	mov	r0, r2
 8018684:	e7fc      	b.n	8018680 <strncmp+0x1e>

08018686 <strncpy>:
 8018686:	b510      	push	{r4, lr}
 8018688:	3901      	subs	r1, #1
 801868a:	4603      	mov	r3, r0
 801868c:	b132      	cbz	r2, 801869c <strncpy+0x16>
 801868e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018692:	f803 4b01 	strb.w	r4, [r3], #1
 8018696:	3a01      	subs	r2, #1
 8018698:	2c00      	cmp	r4, #0
 801869a:	d1f7      	bne.n	801868c <strncpy+0x6>
 801869c:	441a      	add	r2, r3
 801869e:	2100      	movs	r1, #0
 80186a0:	4293      	cmp	r3, r2
 80186a2:	d100      	bne.n	80186a6 <strncpy+0x20>
 80186a4:	bd10      	pop	{r4, pc}
 80186a6:	f803 1b01 	strb.w	r1, [r3], #1
 80186aa:	e7f9      	b.n	80186a0 <strncpy+0x1a>

080186ac <strstr>:
 80186ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80186ae:	780c      	ldrb	r4, [r1, #0]
 80186b0:	b164      	cbz	r4, 80186cc <strstr+0x20>
 80186b2:	4603      	mov	r3, r0
 80186b4:	781a      	ldrb	r2, [r3, #0]
 80186b6:	4618      	mov	r0, r3
 80186b8:	1c5e      	adds	r6, r3, #1
 80186ba:	b90a      	cbnz	r2, 80186c0 <strstr+0x14>
 80186bc:	4610      	mov	r0, r2
 80186be:	e005      	b.n	80186cc <strstr+0x20>
 80186c0:	4294      	cmp	r4, r2
 80186c2:	d108      	bne.n	80186d6 <strstr+0x2a>
 80186c4:	460d      	mov	r5, r1
 80186c6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80186ca:	b902      	cbnz	r2, 80186ce <strstr+0x22>
 80186cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80186ce:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80186d2:	4297      	cmp	r7, r2
 80186d4:	d0f7      	beq.n	80186c6 <strstr+0x1a>
 80186d6:	4633      	mov	r3, r6
 80186d8:	e7ec      	b.n	80186b4 <strstr+0x8>
	...

080186dc <_strtol_l.isra.0>:
 80186dc:	2b01      	cmp	r3, #1
 80186de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186e2:	d001      	beq.n	80186e8 <_strtol_l.isra.0+0xc>
 80186e4:	2b24      	cmp	r3, #36	; 0x24
 80186e6:	d906      	bls.n	80186f6 <_strtol_l.isra.0+0x1a>
 80186e8:	f000 f988 	bl	80189fc <__errno>
 80186ec:	2316      	movs	r3, #22
 80186ee:	6003      	str	r3, [r0, #0]
 80186f0:	2000      	movs	r0, #0
 80186f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186f6:	4f3a      	ldr	r7, [pc, #232]	; (80187e0 <_strtol_l.isra.0+0x104>)
 80186f8:	468e      	mov	lr, r1
 80186fa:	4676      	mov	r6, lr
 80186fc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8018700:	5de5      	ldrb	r5, [r4, r7]
 8018702:	f015 0508 	ands.w	r5, r5, #8
 8018706:	d1f8      	bne.n	80186fa <_strtol_l.isra.0+0x1e>
 8018708:	2c2d      	cmp	r4, #45	; 0x2d
 801870a:	d134      	bne.n	8018776 <_strtol_l.isra.0+0x9a>
 801870c:	f89e 4000 	ldrb.w	r4, [lr]
 8018710:	f04f 0801 	mov.w	r8, #1
 8018714:	f106 0e02 	add.w	lr, r6, #2
 8018718:	2b00      	cmp	r3, #0
 801871a:	d05c      	beq.n	80187d6 <_strtol_l.isra.0+0xfa>
 801871c:	2b10      	cmp	r3, #16
 801871e:	d10c      	bne.n	801873a <_strtol_l.isra.0+0x5e>
 8018720:	2c30      	cmp	r4, #48	; 0x30
 8018722:	d10a      	bne.n	801873a <_strtol_l.isra.0+0x5e>
 8018724:	f89e 4000 	ldrb.w	r4, [lr]
 8018728:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801872c:	2c58      	cmp	r4, #88	; 0x58
 801872e:	d14d      	bne.n	80187cc <_strtol_l.isra.0+0xf0>
 8018730:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8018734:	2310      	movs	r3, #16
 8018736:	f10e 0e02 	add.w	lr, lr, #2
 801873a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801873e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8018742:	2600      	movs	r6, #0
 8018744:	fbbc f9f3 	udiv	r9, ip, r3
 8018748:	4635      	mov	r5, r6
 801874a:	fb03 ca19 	mls	sl, r3, r9, ip
 801874e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8018752:	2f09      	cmp	r7, #9
 8018754:	d818      	bhi.n	8018788 <_strtol_l.isra.0+0xac>
 8018756:	463c      	mov	r4, r7
 8018758:	42a3      	cmp	r3, r4
 801875a:	dd24      	ble.n	80187a6 <_strtol_l.isra.0+0xca>
 801875c:	2e00      	cmp	r6, #0
 801875e:	db1f      	blt.n	80187a0 <_strtol_l.isra.0+0xc4>
 8018760:	45a9      	cmp	r9, r5
 8018762:	d31d      	bcc.n	80187a0 <_strtol_l.isra.0+0xc4>
 8018764:	d101      	bne.n	801876a <_strtol_l.isra.0+0x8e>
 8018766:	45a2      	cmp	sl, r4
 8018768:	db1a      	blt.n	80187a0 <_strtol_l.isra.0+0xc4>
 801876a:	fb05 4503 	mla	r5, r5, r3, r4
 801876e:	2601      	movs	r6, #1
 8018770:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8018774:	e7eb      	b.n	801874e <_strtol_l.isra.0+0x72>
 8018776:	2c2b      	cmp	r4, #43	; 0x2b
 8018778:	bf08      	it	eq
 801877a:	f89e 4000 	ldrbeq.w	r4, [lr]
 801877e:	46a8      	mov	r8, r5
 8018780:	bf08      	it	eq
 8018782:	f106 0e02 	addeq.w	lr, r6, #2
 8018786:	e7c7      	b.n	8018718 <_strtol_l.isra.0+0x3c>
 8018788:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801878c:	2f19      	cmp	r7, #25
 801878e:	d801      	bhi.n	8018794 <_strtol_l.isra.0+0xb8>
 8018790:	3c37      	subs	r4, #55	; 0x37
 8018792:	e7e1      	b.n	8018758 <_strtol_l.isra.0+0x7c>
 8018794:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8018798:	2f19      	cmp	r7, #25
 801879a:	d804      	bhi.n	80187a6 <_strtol_l.isra.0+0xca>
 801879c:	3c57      	subs	r4, #87	; 0x57
 801879e:	e7db      	b.n	8018758 <_strtol_l.isra.0+0x7c>
 80187a0:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80187a4:	e7e4      	b.n	8018770 <_strtol_l.isra.0+0x94>
 80187a6:	2e00      	cmp	r6, #0
 80187a8:	da05      	bge.n	80187b6 <_strtol_l.isra.0+0xda>
 80187aa:	2322      	movs	r3, #34	; 0x22
 80187ac:	6003      	str	r3, [r0, #0]
 80187ae:	4665      	mov	r5, ip
 80187b0:	b942      	cbnz	r2, 80187c4 <_strtol_l.isra.0+0xe8>
 80187b2:	4628      	mov	r0, r5
 80187b4:	e79d      	b.n	80186f2 <_strtol_l.isra.0+0x16>
 80187b6:	f1b8 0f00 	cmp.w	r8, #0
 80187ba:	d000      	beq.n	80187be <_strtol_l.isra.0+0xe2>
 80187bc:	426d      	negs	r5, r5
 80187be:	2a00      	cmp	r2, #0
 80187c0:	d0f7      	beq.n	80187b2 <_strtol_l.isra.0+0xd6>
 80187c2:	b10e      	cbz	r6, 80187c8 <_strtol_l.isra.0+0xec>
 80187c4:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80187c8:	6011      	str	r1, [r2, #0]
 80187ca:	e7f2      	b.n	80187b2 <_strtol_l.isra.0+0xd6>
 80187cc:	2430      	movs	r4, #48	; 0x30
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d1b3      	bne.n	801873a <_strtol_l.isra.0+0x5e>
 80187d2:	2308      	movs	r3, #8
 80187d4:	e7b1      	b.n	801873a <_strtol_l.isra.0+0x5e>
 80187d6:	2c30      	cmp	r4, #48	; 0x30
 80187d8:	d0a4      	beq.n	8018724 <_strtol_l.isra.0+0x48>
 80187da:	230a      	movs	r3, #10
 80187dc:	e7ad      	b.n	801873a <_strtol_l.isra.0+0x5e>
 80187de:	bf00      	nop
 80187e0:	0802153d 	.word	0x0802153d

080187e4 <_strtol_r>:
 80187e4:	f7ff bf7a 	b.w	80186dc <_strtol_l.isra.0>

080187e8 <strtol>:
 80187e8:	4613      	mov	r3, r2
 80187ea:	460a      	mov	r2, r1
 80187ec:	4601      	mov	r1, r0
 80187ee:	4802      	ldr	r0, [pc, #8]	; (80187f8 <strtol+0x10>)
 80187f0:	6800      	ldr	r0, [r0, #0]
 80187f2:	f7ff bf73 	b.w	80186dc <_strtol_l.isra.0>
 80187f6:	bf00      	nop
 80187f8:	20000730 	.word	0x20000730

080187fc <__swbuf_r>:
 80187fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187fe:	460e      	mov	r6, r1
 8018800:	4614      	mov	r4, r2
 8018802:	4605      	mov	r5, r0
 8018804:	b118      	cbz	r0, 801880e <__swbuf_r+0x12>
 8018806:	6983      	ldr	r3, [r0, #24]
 8018808:	b90b      	cbnz	r3, 801880e <__swbuf_r+0x12>
 801880a:	f7ff fb33 	bl	8017e74 <__sinit>
 801880e:	4b21      	ldr	r3, [pc, #132]	; (8018894 <__swbuf_r+0x98>)
 8018810:	429c      	cmp	r4, r3
 8018812:	d12b      	bne.n	801886c <__swbuf_r+0x70>
 8018814:	686c      	ldr	r4, [r5, #4]
 8018816:	69a3      	ldr	r3, [r4, #24]
 8018818:	60a3      	str	r3, [r4, #8]
 801881a:	89a3      	ldrh	r3, [r4, #12]
 801881c:	071a      	lsls	r2, r3, #28
 801881e:	d52f      	bpl.n	8018880 <__swbuf_r+0x84>
 8018820:	6923      	ldr	r3, [r4, #16]
 8018822:	b36b      	cbz	r3, 8018880 <__swbuf_r+0x84>
 8018824:	6923      	ldr	r3, [r4, #16]
 8018826:	6820      	ldr	r0, [r4, #0]
 8018828:	1ac0      	subs	r0, r0, r3
 801882a:	6963      	ldr	r3, [r4, #20]
 801882c:	b2f6      	uxtb	r6, r6
 801882e:	4283      	cmp	r3, r0
 8018830:	4637      	mov	r7, r6
 8018832:	dc04      	bgt.n	801883e <__swbuf_r+0x42>
 8018834:	4621      	mov	r1, r4
 8018836:	4628      	mov	r0, r5
 8018838:	f000 f96c 	bl	8018b14 <_fflush_r>
 801883c:	bb30      	cbnz	r0, 801888c <__swbuf_r+0x90>
 801883e:	68a3      	ldr	r3, [r4, #8]
 8018840:	3b01      	subs	r3, #1
 8018842:	60a3      	str	r3, [r4, #8]
 8018844:	6823      	ldr	r3, [r4, #0]
 8018846:	1c5a      	adds	r2, r3, #1
 8018848:	6022      	str	r2, [r4, #0]
 801884a:	701e      	strb	r6, [r3, #0]
 801884c:	6963      	ldr	r3, [r4, #20]
 801884e:	3001      	adds	r0, #1
 8018850:	4283      	cmp	r3, r0
 8018852:	d004      	beq.n	801885e <__swbuf_r+0x62>
 8018854:	89a3      	ldrh	r3, [r4, #12]
 8018856:	07db      	lsls	r3, r3, #31
 8018858:	d506      	bpl.n	8018868 <__swbuf_r+0x6c>
 801885a:	2e0a      	cmp	r6, #10
 801885c:	d104      	bne.n	8018868 <__swbuf_r+0x6c>
 801885e:	4621      	mov	r1, r4
 8018860:	4628      	mov	r0, r5
 8018862:	f000 f957 	bl	8018b14 <_fflush_r>
 8018866:	b988      	cbnz	r0, 801888c <__swbuf_r+0x90>
 8018868:	4638      	mov	r0, r7
 801886a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801886c:	4b0a      	ldr	r3, [pc, #40]	; (8018898 <__swbuf_r+0x9c>)
 801886e:	429c      	cmp	r4, r3
 8018870:	d101      	bne.n	8018876 <__swbuf_r+0x7a>
 8018872:	68ac      	ldr	r4, [r5, #8]
 8018874:	e7cf      	b.n	8018816 <__swbuf_r+0x1a>
 8018876:	4b09      	ldr	r3, [pc, #36]	; (801889c <__swbuf_r+0xa0>)
 8018878:	429c      	cmp	r4, r3
 801887a:	bf08      	it	eq
 801887c:	68ec      	ldreq	r4, [r5, #12]
 801887e:	e7ca      	b.n	8018816 <__swbuf_r+0x1a>
 8018880:	4621      	mov	r1, r4
 8018882:	4628      	mov	r0, r5
 8018884:	f000 f81e 	bl	80188c4 <__swsetup_r>
 8018888:	2800      	cmp	r0, #0
 801888a:	d0cb      	beq.n	8018824 <__swbuf_r+0x28>
 801888c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018890:	e7ea      	b.n	8018868 <__swbuf_r+0x6c>
 8018892:	bf00      	nop
 8018894:	08021660 	.word	0x08021660
 8018898:	08021680 	.word	0x08021680
 801889c:	08021640 	.word	0x08021640

080188a0 <_write_r>:
 80188a0:	b538      	push	{r3, r4, r5, lr}
 80188a2:	4d07      	ldr	r5, [pc, #28]	; (80188c0 <_write_r+0x20>)
 80188a4:	4604      	mov	r4, r0
 80188a6:	4608      	mov	r0, r1
 80188a8:	4611      	mov	r1, r2
 80188aa:	2200      	movs	r2, #0
 80188ac:	602a      	str	r2, [r5, #0]
 80188ae:	461a      	mov	r2, r3
 80188b0:	f7e9 faf1 	bl	8001e96 <_write>
 80188b4:	1c43      	adds	r3, r0, #1
 80188b6:	d102      	bne.n	80188be <_write_r+0x1e>
 80188b8:	682b      	ldr	r3, [r5, #0]
 80188ba:	b103      	cbz	r3, 80188be <_write_r+0x1e>
 80188bc:	6023      	str	r3, [r4, #0]
 80188be:	bd38      	pop	{r3, r4, r5, pc}
 80188c0:	20018bc0 	.word	0x20018bc0

080188c4 <__swsetup_r>:
 80188c4:	4b32      	ldr	r3, [pc, #200]	; (8018990 <__swsetup_r+0xcc>)
 80188c6:	b570      	push	{r4, r5, r6, lr}
 80188c8:	681d      	ldr	r5, [r3, #0]
 80188ca:	4606      	mov	r6, r0
 80188cc:	460c      	mov	r4, r1
 80188ce:	b125      	cbz	r5, 80188da <__swsetup_r+0x16>
 80188d0:	69ab      	ldr	r3, [r5, #24]
 80188d2:	b913      	cbnz	r3, 80188da <__swsetup_r+0x16>
 80188d4:	4628      	mov	r0, r5
 80188d6:	f7ff facd 	bl	8017e74 <__sinit>
 80188da:	4b2e      	ldr	r3, [pc, #184]	; (8018994 <__swsetup_r+0xd0>)
 80188dc:	429c      	cmp	r4, r3
 80188de:	d10f      	bne.n	8018900 <__swsetup_r+0x3c>
 80188e0:	686c      	ldr	r4, [r5, #4]
 80188e2:	89a3      	ldrh	r3, [r4, #12]
 80188e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80188e8:	0719      	lsls	r1, r3, #28
 80188ea:	d42c      	bmi.n	8018946 <__swsetup_r+0x82>
 80188ec:	06dd      	lsls	r5, r3, #27
 80188ee:	d411      	bmi.n	8018914 <__swsetup_r+0x50>
 80188f0:	2309      	movs	r3, #9
 80188f2:	6033      	str	r3, [r6, #0]
 80188f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80188f8:	81a3      	strh	r3, [r4, #12]
 80188fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80188fe:	e03e      	b.n	801897e <__swsetup_r+0xba>
 8018900:	4b25      	ldr	r3, [pc, #148]	; (8018998 <__swsetup_r+0xd4>)
 8018902:	429c      	cmp	r4, r3
 8018904:	d101      	bne.n	801890a <__swsetup_r+0x46>
 8018906:	68ac      	ldr	r4, [r5, #8]
 8018908:	e7eb      	b.n	80188e2 <__swsetup_r+0x1e>
 801890a:	4b24      	ldr	r3, [pc, #144]	; (801899c <__swsetup_r+0xd8>)
 801890c:	429c      	cmp	r4, r3
 801890e:	bf08      	it	eq
 8018910:	68ec      	ldreq	r4, [r5, #12]
 8018912:	e7e6      	b.n	80188e2 <__swsetup_r+0x1e>
 8018914:	0758      	lsls	r0, r3, #29
 8018916:	d512      	bpl.n	801893e <__swsetup_r+0x7a>
 8018918:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801891a:	b141      	cbz	r1, 801892e <__swsetup_r+0x6a>
 801891c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018920:	4299      	cmp	r1, r3
 8018922:	d002      	beq.n	801892a <__swsetup_r+0x66>
 8018924:	4630      	mov	r0, r6
 8018926:	f7ff fbb9 	bl	801809c <_free_r>
 801892a:	2300      	movs	r3, #0
 801892c:	6363      	str	r3, [r4, #52]	; 0x34
 801892e:	89a3      	ldrh	r3, [r4, #12]
 8018930:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018934:	81a3      	strh	r3, [r4, #12]
 8018936:	2300      	movs	r3, #0
 8018938:	6063      	str	r3, [r4, #4]
 801893a:	6923      	ldr	r3, [r4, #16]
 801893c:	6023      	str	r3, [r4, #0]
 801893e:	89a3      	ldrh	r3, [r4, #12]
 8018940:	f043 0308 	orr.w	r3, r3, #8
 8018944:	81a3      	strh	r3, [r4, #12]
 8018946:	6923      	ldr	r3, [r4, #16]
 8018948:	b94b      	cbnz	r3, 801895e <__swsetup_r+0x9a>
 801894a:	89a3      	ldrh	r3, [r4, #12]
 801894c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018954:	d003      	beq.n	801895e <__swsetup_r+0x9a>
 8018956:	4621      	mov	r1, r4
 8018958:	4630      	mov	r0, r6
 801895a:	f000 f95f 	bl	8018c1c <__smakebuf_r>
 801895e:	89a0      	ldrh	r0, [r4, #12]
 8018960:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018964:	f010 0301 	ands.w	r3, r0, #1
 8018968:	d00a      	beq.n	8018980 <__swsetup_r+0xbc>
 801896a:	2300      	movs	r3, #0
 801896c:	60a3      	str	r3, [r4, #8]
 801896e:	6963      	ldr	r3, [r4, #20]
 8018970:	425b      	negs	r3, r3
 8018972:	61a3      	str	r3, [r4, #24]
 8018974:	6923      	ldr	r3, [r4, #16]
 8018976:	b943      	cbnz	r3, 801898a <__swsetup_r+0xc6>
 8018978:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801897c:	d1ba      	bne.n	80188f4 <__swsetup_r+0x30>
 801897e:	bd70      	pop	{r4, r5, r6, pc}
 8018980:	0781      	lsls	r1, r0, #30
 8018982:	bf58      	it	pl
 8018984:	6963      	ldrpl	r3, [r4, #20]
 8018986:	60a3      	str	r3, [r4, #8]
 8018988:	e7f4      	b.n	8018974 <__swsetup_r+0xb0>
 801898a:	2000      	movs	r0, #0
 801898c:	e7f7      	b.n	801897e <__swsetup_r+0xba>
 801898e:	bf00      	nop
 8018990:	20000730 	.word	0x20000730
 8018994:	08021660 	.word	0x08021660
 8018998:	08021680 	.word	0x08021680
 801899c:	08021640 	.word	0x08021640

080189a0 <__assert_func>:
 80189a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80189a2:	4614      	mov	r4, r2
 80189a4:	461a      	mov	r2, r3
 80189a6:	4b09      	ldr	r3, [pc, #36]	; (80189cc <__assert_func+0x2c>)
 80189a8:	681b      	ldr	r3, [r3, #0]
 80189aa:	4605      	mov	r5, r0
 80189ac:	68d8      	ldr	r0, [r3, #12]
 80189ae:	b14c      	cbz	r4, 80189c4 <__assert_func+0x24>
 80189b0:	4b07      	ldr	r3, [pc, #28]	; (80189d0 <__assert_func+0x30>)
 80189b2:	9100      	str	r1, [sp, #0]
 80189b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80189b8:	4906      	ldr	r1, [pc, #24]	; (80189d4 <__assert_func+0x34>)
 80189ba:	462b      	mov	r3, r5
 80189bc:	f000 f8e6 	bl	8018b8c <fiprintf>
 80189c0:	f001 fa0a 	bl	8019dd8 <abort>
 80189c4:	4b04      	ldr	r3, [pc, #16]	; (80189d8 <__assert_func+0x38>)
 80189c6:	461c      	mov	r4, r3
 80189c8:	e7f3      	b.n	80189b2 <__assert_func+0x12>
 80189ca:	bf00      	nop
 80189cc:	20000730 	.word	0x20000730
 80189d0:	0802171a 	.word	0x0802171a
 80189d4:	08021727 	.word	0x08021727
 80189d8:	08021755 	.word	0x08021755

080189dc <_close_r>:
 80189dc:	b538      	push	{r3, r4, r5, lr}
 80189de:	4d06      	ldr	r5, [pc, #24]	; (80189f8 <_close_r+0x1c>)
 80189e0:	2300      	movs	r3, #0
 80189e2:	4604      	mov	r4, r0
 80189e4:	4608      	mov	r0, r1
 80189e6:	602b      	str	r3, [r5, #0]
 80189e8:	f7e9 fa71 	bl	8001ece <_close>
 80189ec:	1c43      	adds	r3, r0, #1
 80189ee:	d102      	bne.n	80189f6 <_close_r+0x1a>
 80189f0:	682b      	ldr	r3, [r5, #0]
 80189f2:	b103      	cbz	r3, 80189f6 <_close_r+0x1a>
 80189f4:	6023      	str	r3, [r4, #0]
 80189f6:	bd38      	pop	{r3, r4, r5, pc}
 80189f8:	20018bc0 	.word	0x20018bc0

080189fc <__errno>:
 80189fc:	4b01      	ldr	r3, [pc, #4]	; (8018a04 <__errno+0x8>)
 80189fe:	6818      	ldr	r0, [r3, #0]
 8018a00:	4770      	bx	lr
 8018a02:	bf00      	nop
 8018a04:	20000730 	.word	0x20000730

08018a08 <__sflush_r>:
 8018a08:	898a      	ldrh	r2, [r1, #12]
 8018a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a0e:	4605      	mov	r5, r0
 8018a10:	0710      	lsls	r0, r2, #28
 8018a12:	460c      	mov	r4, r1
 8018a14:	d458      	bmi.n	8018ac8 <__sflush_r+0xc0>
 8018a16:	684b      	ldr	r3, [r1, #4]
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	dc05      	bgt.n	8018a28 <__sflush_r+0x20>
 8018a1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	dc02      	bgt.n	8018a28 <__sflush_r+0x20>
 8018a22:	2000      	movs	r0, #0
 8018a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018a2a:	2e00      	cmp	r6, #0
 8018a2c:	d0f9      	beq.n	8018a22 <__sflush_r+0x1a>
 8018a2e:	2300      	movs	r3, #0
 8018a30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018a34:	682f      	ldr	r7, [r5, #0]
 8018a36:	602b      	str	r3, [r5, #0]
 8018a38:	d032      	beq.n	8018aa0 <__sflush_r+0x98>
 8018a3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018a3c:	89a3      	ldrh	r3, [r4, #12]
 8018a3e:	075a      	lsls	r2, r3, #29
 8018a40:	d505      	bpl.n	8018a4e <__sflush_r+0x46>
 8018a42:	6863      	ldr	r3, [r4, #4]
 8018a44:	1ac0      	subs	r0, r0, r3
 8018a46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018a48:	b10b      	cbz	r3, 8018a4e <__sflush_r+0x46>
 8018a4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018a4c:	1ac0      	subs	r0, r0, r3
 8018a4e:	2300      	movs	r3, #0
 8018a50:	4602      	mov	r2, r0
 8018a52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018a54:	6a21      	ldr	r1, [r4, #32]
 8018a56:	4628      	mov	r0, r5
 8018a58:	47b0      	blx	r6
 8018a5a:	1c43      	adds	r3, r0, #1
 8018a5c:	89a3      	ldrh	r3, [r4, #12]
 8018a5e:	d106      	bne.n	8018a6e <__sflush_r+0x66>
 8018a60:	6829      	ldr	r1, [r5, #0]
 8018a62:	291d      	cmp	r1, #29
 8018a64:	d82c      	bhi.n	8018ac0 <__sflush_r+0xb8>
 8018a66:	4a2a      	ldr	r2, [pc, #168]	; (8018b10 <__sflush_r+0x108>)
 8018a68:	40ca      	lsrs	r2, r1
 8018a6a:	07d6      	lsls	r6, r2, #31
 8018a6c:	d528      	bpl.n	8018ac0 <__sflush_r+0xb8>
 8018a6e:	2200      	movs	r2, #0
 8018a70:	6062      	str	r2, [r4, #4]
 8018a72:	04d9      	lsls	r1, r3, #19
 8018a74:	6922      	ldr	r2, [r4, #16]
 8018a76:	6022      	str	r2, [r4, #0]
 8018a78:	d504      	bpl.n	8018a84 <__sflush_r+0x7c>
 8018a7a:	1c42      	adds	r2, r0, #1
 8018a7c:	d101      	bne.n	8018a82 <__sflush_r+0x7a>
 8018a7e:	682b      	ldr	r3, [r5, #0]
 8018a80:	b903      	cbnz	r3, 8018a84 <__sflush_r+0x7c>
 8018a82:	6560      	str	r0, [r4, #84]	; 0x54
 8018a84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018a86:	602f      	str	r7, [r5, #0]
 8018a88:	2900      	cmp	r1, #0
 8018a8a:	d0ca      	beq.n	8018a22 <__sflush_r+0x1a>
 8018a8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018a90:	4299      	cmp	r1, r3
 8018a92:	d002      	beq.n	8018a9a <__sflush_r+0x92>
 8018a94:	4628      	mov	r0, r5
 8018a96:	f7ff fb01 	bl	801809c <_free_r>
 8018a9a:	2000      	movs	r0, #0
 8018a9c:	6360      	str	r0, [r4, #52]	; 0x34
 8018a9e:	e7c1      	b.n	8018a24 <__sflush_r+0x1c>
 8018aa0:	6a21      	ldr	r1, [r4, #32]
 8018aa2:	2301      	movs	r3, #1
 8018aa4:	4628      	mov	r0, r5
 8018aa6:	47b0      	blx	r6
 8018aa8:	1c41      	adds	r1, r0, #1
 8018aaa:	d1c7      	bne.n	8018a3c <__sflush_r+0x34>
 8018aac:	682b      	ldr	r3, [r5, #0]
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	d0c4      	beq.n	8018a3c <__sflush_r+0x34>
 8018ab2:	2b1d      	cmp	r3, #29
 8018ab4:	d001      	beq.n	8018aba <__sflush_r+0xb2>
 8018ab6:	2b16      	cmp	r3, #22
 8018ab8:	d101      	bne.n	8018abe <__sflush_r+0xb6>
 8018aba:	602f      	str	r7, [r5, #0]
 8018abc:	e7b1      	b.n	8018a22 <__sflush_r+0x1a>
 8018abe:	89a3      	ldrh	r3, [r4, #12]
 8018ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018ac4:	81a3      	strh	r3, [r4, #12]
 8018ac6:	e7ad      	b.n	8018a24 <__sflush_r+0x1c>
 8018ac8:	690f      	ldr	r7, [r1, #16]
 8018aca:	2f00      	cmp	r7, #0
 8018acc:	d0a9      	beq.n	8018a22 <__sflush_r+0x1a>
 8018ace:	0793      	lsls	r3, r2, #30
 8018ad0:	680e      	ldr	r6, [r1, #0]
 8018ad2:	bf08      	it	eq
 8018ad4:	694b      	ldreq	r3, [r1, #20]
 8018ad6:	600f      	str	r7, [r1, #0]
 8018ad8:	bf18      	it	ne
 8018ada:	2300      	movne	r3, #0
 8018adc:	eba6 0807 	sub.w	r8, r6, r7
 8018ae0:	608b      	str	r3, [r1, #8]
 8018ae2:	f1b8 0f00 	cmp.w	r8, #0
 8018ae6:	dd9c      	ble.n	8018a22 <__sflush_r+0x1a>
 8018ae8:	6a21      	ldr	r1, [r4, #32]
 8018aea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018aec:	4643      	mov	r3, r8
 8018aee:	463a      	mov	r2, r7
 8018af0:	4628      	mov	r0, r5
 8018af2:	47b0      	blx	r6
 8018af4:	2800      	cmp	r0, #0
 8018af6:	dc06      	bgt.n	8018b06 <__sflush_r+0xfe>
 8018af8:	89a3      	ldrh	r3, [r4, #12]
 8018afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018afe:	81a3      	strh	r3, [r4, #12]
 8018b00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018b04:	e78e      	b.n	8018a24 <__sflush_r+0x1c>
 8018b06:	4407      	add	r7, r0
 8018b08:	eba8 0800 	sub.w	r8, r8, r0
 8018b0c:	e7e9      	b.n	8018ae2 <__sflush_r+0xda>
 8018b0e:	bf00      	nop
 8018b10:	20400001 	.word	0x20400001

08018b14 <_fflush_r>:
 8018b14:	b538      	push	{r3, r4, r5, lr}
 8018b16:	690b      	ldr	r3, [r1, #16]
 8018b18:	4605      	mov	r5, r0
 8018b1a:	460c      	mov	r4, r1
 8018b1c:	b913      	cbnz	r3, 8018b24 <_fflush_r+0x10>
 8018b1e:	2500      	movs	r5, #0
 8018b20:	4628      	mov	r0, r5
 8018b22:	bd38      	pop	{r3, r4, r5, pc}
 8018b24:	b118      	cbz	r0, 8018b2e <_fflush_r+0x1a>
 8018b26:	6983      	ldr	r3, [r0, #24]
 8018b28:	b90b      	cbnz	r3, 8018b2e <_fflush_r+0x1a>
 8018b2a:	f7ff f9a3 	bl	8017e74 <__sinit>
 8018b2e:	4b14      	ldr	r3, [pc, #80]	; (8018b80 <_fflush_r+0x6c>)
 8018b30:	429c      	cmp	r4, r3
 8018b32:	d11b      	bne.n	8018b6c <_fflush_r+0x58>
 8018b34:	686c      	ldr	r4, [r5, #4]
 8018b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	d0ef      	beq.n	8018b1e <_fflush_r+0xa>
 8018b3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018b40:	07d0      	lsls	r0, r2, #31
 8018b42:	d404      	bmi.n	8018b4e <_fflush_r+0x3a>
 8018b44:	0599      	lsls	r1, r3, #22
 8018b46:	d402      	bmi.n	8018b4e <_fflush_r+0x3a>
 8018b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018b4a:	f7ff fa56 	bl	8017ffa <__retarget_lock_acquire_recursive>
 8018b4e:	4628      	mov	r0, r5
 8018b50:	4621      	mov	r1, r4
 8018b52:	f7ff ff59 	bl	8018a08 <__sflush_r>
 8018b56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018b58:	07da      	lsls	r2, r3, #31
 8018b5a:	4605      	mov	r5, r0
 8018b5c:	d4e0      	bmi.n	8018b20 <_fflush_r+0xc>
 8018b5e:	89a3      	ldrh	r3, [r4, #12]
 8018b60:	059b      	lsls	r3, r3, #22
 8018b62:	d4dd      	bmi.n	8018b20 <_fflush_r+0xc>
 8018b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018b66:	f7ff fa49 	bl	8017ffc <__retarget_lock_release_recursive>
 8018b6a:	e7d9      	b.n	8018b20 <_fflush_r+0xc>
 8018b6c:	4b05      	ldr	r3, [pc, #20]	; (8018b84 <_fflush_r+0x70>)
 8018b6e:	429c      	cmp	r4, r3
 8018b70:	d101      	bne.n	8018b76 <_fflush_r+0x62>
 8018b72:	68ac      	ldr	r4, [r5, #8]
 8018b74:	e7df      	b.n	8018b36 <_fflush_r+0x22>
 8018b76:	4b04      	ldr	r3, [pc, #16]	; (8018b88 <_fflush_r+0x74>)
 8018b78:	429c      	cmp	r4, r3
 8018b7a:	bf08      	it	eq
 8018b7c:	68ec      	ldreq	r4, [r5, #12]
 8018b7e:	e7da      	b.n	8018b36 <_fflush_r+0x22>
 8018b80:	08021660 	.word	0x08021660
 8018b84:	08021680 	.word	0x08021680
 8018b88:	08021640 	.word	0x08021640

08018b8c <fiprintf>:
 8018b8c:	b40e      	push	{r1, r2, r3}
 8018b8e:	b503      	push	{r0, r1, lr}
 8018b90:	4601      	mov	r1, r0
 8018b92:	ab03      	add	r3, sp, #12
 8018b94:	4805      	ldr	r0, [pc, #20]	; (8018bac <fiprintf+0x20>)
 8018b96:	f853 2b04 	ldr.w	r2, [r3], #4
 8018b9a:	6800      	ldr	r0, [r0, #0]
 8018b9c:	9301      	str	r3, [sp, #4]
 8018b9e:	f000 fc07 	bl	80193b0 <_vfiprintf_r>
 8018ba2:	b002      	add	sp, #8
 8018ba4:	f85d eb04 	ldr.w	lr, [sp], #4
 8018ba8:	b003      	add	sp, #12
 8018baa:	4770      	bx	lr
 8018bac:	20000730 	.word	0x20000730

08018bb0 <_lseek_r>:
 8018bb0:	b538      	push	{r3, r4, r5, lr}
 8018bb2:	4d07      	ldr	r5, [pc, #28]	; (8018bd0 <_lseek_r+0x20>)
 8018bb4:	4604      	mov	r4, r0
 8018bb6:	4608      	mov	r0, r1
 8018bb8:	4611      	mov	r1, r2
 8018bba:	2200      	movs	r2, #0
 8018bbc:	602a      	str	r2, [r5, #0]
 8018bbe:	461a      	mov	r2, r3
 8018bc0:	f7e9 f9ac 	bl	8001f1c <_lseek>
 8018bc4:	1c43      	adds	r3, r0, #1
 8018bc6:	d102      	bne.n	8018bce <_lseek_r+0x1e>
 8018bc8:	682b      	ldr	r3, [r5, #0]
 8018bca:	b103      	cbz	r3, 8018bce <_lseek_r+0x1e>
 8018bcc:	6023      	str	r3, [r4, #0]
 8018bce:	bd38      	pop	{r3, r4, r5, pc}
 8018bd0:	20018bc0 	.word	0x20018bc0

08018bd4 <__swhatbuf_r>:
 8018bd4:	b570      	push	{r4, r5, r6, lr}
 8018bd6:	460e      	mov	r6, r1
 8018bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018bdc:	2900      	cmp	r1, #0
 8018bde:	b096      	sub	sp, #88	; 0x58
 8018be0:	4614      	mov	r4, r2
 8018be2:	461d      	mov	r5, r3
 8018be4:	da07      	bge.n	8018bf6 <__swhatbuf_r+0x22>
 8018be6:	2300      	movs	r3, #0
 8018be8:	602b      	str	r3, [r5, #0]
 8018bea:	89b3      	ldrh	r3, [r6, #12]
 8018bec:	061a      	lsls	r2, r3, #24
 8018bee:	d410      	bmi.n	8018c12 <__swhatbuf_r+0x3e>
 8018bf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018bf4:	e00e      	b.n	8018c14 <__swhatbuf_r+0x40>
 8018bf6:	466a      	mov	r2, sp
 8018bf8:	f001 f8f6 	bl	8019de8 <_fstat_r>
 8018bfc:	2800      	cmp	r0, #0
 8018bfe:	dbf2      	blt.n	8018be6 <__swhatbuf_r+0x12>
 8018c00:	9a01      	ldr	r2, [sp, #4]
 8018c02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018c06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018c0a:	425a      	negs	r2, r3
 8018c0c:	415a      	adcs	r2, r3
 8018c0e:	602a      	str	r2, [r5, #0]
 8018c10:	e7ee      	b.n	8018bf0 <__swhatbuf_r+0x1c>
 8018c12:	2340      	movs	r3, #64	; 0x40
 8018c14:	2000      	movs	r0, #0
 8018c16:	6023      	str	r3, [r4, #0]
 8018c18:	b016      	add	sp, #88	; 0x58
 8018c1a:	bd70      	pop	{r4, r5, r6, pc}

08018c1c <__smakebuf_r>:
 8018c1c:	898b      	ldrh	r3, [r1, #12]
 8018c1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018c20:	079d      	lsls	r5, r3, #30
 8018c22:	4606      	mov	r6, r0
 8018c24:	460c      	mov	r4, r1
 8018c26:	d507      	bpl.n	8018c38 <__smakebuf_r+0x1c>
 8018c28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018c2c:	6023      	str	r3, [r4, #0]
 8018c2e:	6123      	str	r3, [r4, #16]
 8018c30:	2301      	movs	r3, #1
 8018c32:	6163      	str	r3, [r4, #20]
 8018c34:	b002      	add	sp, #8
 8018c36:	bd70      	pop	{r4, r5, r6, pc}
 8018c38:	ab01      	add	r3, sp, #4
 8018c3a:	466a      	mov	r2, sp
 8018c3c:	f7ff ffca 	bl	8018bd4 <__swhatbuf_r>
 8018c40:	9900      	ldr	r1, [sp, #0]
 8018c42:	4605      	mov	r5, r0
 8018c44:	4630      	mov	r0, r6
 8018c46:	f7ff fa79 	bl	801813c <_malloc_r>
 8018c4a:	b948      	cbnz	r0, 8018c60 <__smakebuf_r+0x44>
 8018c4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c50:	059a      	lsls	r2, r3, #22
 8018c52:	d4ef      	bmi.n	8018c34 <__smakebuf_r+0x18>
 8018c54:	f023 0303 	bic.w	r3, r3, #3
 8018c58:	f043 0302 	orr.w	r3, r3, #2
 8018c5c:	81a3      	strh	r3, [r4, #12]
 8018c5e:	e7e3      	b.n	8018c28 <__smakebuf_r+0xc>
 8018c60:	4b0d      	ldr	r3, [pc, #52]	; (8018c98 <__smakebuf_r+0x7c>)
 8018c62:	62b3      	str	r3, [r6, #40]	; 0x28
 8018c64:	89a3      	ldrh	r3, [r4, #12]
 8018c66:	6020      	str	r0, [r4, #0]
 8018c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018c6c:	81a3      	strh	r3, [r4, #12]
 8018c6e:	9b00      	ldr	r3, [sp, #0]
 8018c70:	6163      	str	r3, [r4, #20]
 8018c72:	9b01      	ldr	r3, [sp, #4]
 8018c74:	6120      	str	r0, [r4, #16]
 8018c76:	b15b      	cbz	r3, 8018c90 <__smakebuf_r+0x74>
 8018c78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018c7c:	4630      	mov	r0, r6
 8018c7e:	f001 f8c5 	bl	8019e0c <_isatty_r>
 8018c82:	b128      	cbz	r0, 8018c90 <__smakebuf_r+0x74>
 8018c84:	89a3      	ldrh	r3, [r4, #12]
 8018c86:	f023 0303 	bic.w	r3, r3, #3
 8018c8a:	f043 0301 	orr.w	r3, r3, #1
 8018c8e:	81a3      	strh	r3, [r4, #12]
 8018c90:	89a0      	ldrh	r0, [r4, #12]
 8018c92:	4305      	orrs	r5, r0
 8018c94:	81a5      	strh	r5, [r4, #12]
 8018c96:	e7cd      	b.n	8018c34 <__smakebuf_r+0x18>
 8018c98:	08017e0d 	.word	0x08017e0d

08018c9c <__malloc_lock>:
 8018c9c:	4801      	ldr	r0, [pc, #4]	; (8018ca4 <__malloc_lock+0x8>)
 8018c9e:	f7ff b9ac 	b.w	8017ffa <__retarget_lock_acquire_recursive>
 8018ca2:	bf00      	nop
 8018ca4:	20018bcc 	.word	0x20018bcc

08018ca8 <__malloc_unlock>:
 8018ca8:	4801      	ldr	r0, [pc, #4]	; (8018cb0 <__malloc_unlock+0x8>)
 8018caa:	f7ff b9a7 	b.w	8017ffc <__retarget_lock_release_recursive>
 8018cae:	bf00      	nop
 8018cb0:	20018bcc 	.word	0x20018bcc

08018cb4 <_realloc_r>:
 8018cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018cb6:	4607      	mov	r7, r0
 8018cb8:	4614      	mov	r4, r2
 8018cba:	460e      	mov	r6, r1
 8018cbc:	b921      	cbnz	r1, 8018cc8 <_realloc_r+0x14>
 8018cbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018cc2:	4611      	mov	r1, r2
 8018cc4:	f7ff ba3a 	b.w	801813c <_malloc_r>
 8018cc8:	b922      	cbnz	r2, 8018cd4 <_realloc_r+0x20>
 8018cca:	f7ff f9e7 	bl	801809c <_free_r>
 8018cce:	4625      	mov	r5, r4
 8018cd0:	4628      	mov	r0, r5
 8018cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018cd4:	f001 f8aa 	bl	8019e2c <_malloc_usable_size_r>
 8018cd8:	42a0      	cmp	r0, r4
 8018cda:	d20f      	bcs.n	8018cfc <_realloc_r+0x48>
 8018cdc:	4621      	mov	r1, r4
 8018cde:	4638      	mov	r0, r7
 8018ce0:	f7ff fa2c 	bl	801813c <_malloc_r>
 8018ce4:	4605      	mov	r5, r0
 8018ce6:	2800      	cmp	r0, #0
 8018ce8:	d0f2      	beq.n	8018cd0 <_realloc_r+0x1c>
 8018cea:	4631      	mov	r1, r6
 8018cec:	4622      	mov	r2, r4
 8018cee:	f7ff f9a5 	bl	801803c <memcpy>
 8018cf2:	4631      	mov	r1, r6
 8018cf4:	4638      	mov	r0, r7
 8018cf6:	f7ff f9d1 	bl	801809c <_free_r>
 8018cfa:	e7e9      	b.n	8018cd0 <_realloc_r+0x1c>
 8018cfc:	4635      	mov	r5, r6
 8018cfe:	e7e7      	b.n	8018cd0 <_realloc_r+0x1c>

08018d00 <__ssputs_r>:
 8018d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d04:	688e      	ldr	r6, [r1, #8]
 8018d06:	429e      	cmp	r6, r3
 8018d08:	4682      	mov	sl, r0
 8018d0a:	460c      	mov	r4, r1
 8018d0c:	4690      	mov	r8, r2
 8018d0e:	461f      	mov	r7, r3
 8018d10:	d838      	bhi.n	8018d84 <__ssputs_r+0x84>
 8018d12:	898a      	ldrh	r2, [r1, #12]
 8018d14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018d18:	d032      	beq.n	8018d80 <__ssputs_r+0x80>
 8018d1a:	6825      	ldr	r5, [r4, #0]
 8018d1c:	6909      	ldr	r1, [r1, #16]
 8018d1e:	eba5 0901 	sub.w	r9, r5, r1
 8018d22:	6965      	ldr	r5, [r4, #20]
 8018d24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018d28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018d2c:	3301      	adds	r3, #1
 8018d2e:	444b      	add	r3, r9
 8018d30:	106d      	asrs	r5, r5, #1
 8018d32:	429d      	cmp	r5, r3
 8018d34:	bf38      	it	cc
 8018d36:	461d      	movcc	r5, r3
 8018d38:	0553      	lsls	r3, r2, #21
 8018d3a:	d531      	bpl.n	8018da0 <__ssputs_r+0xa0>
 8018d3c:	4629      	mov	r1, r5
 8018d3e:	f7ff f9fd 	bl	801813c <_malloc_r>
 8018d42:	4606      	mov	r6, r0
 8018d44:	b950      	cbnz	r0, 8018d5c <__ssputs_r+0x5c>
 8018d46:	230c      	movs	r3, #12
 8018d48:	f8ca 3000 	str.w	r3, [sl]
 8018d4c:	89a3      	ldrh	r3, [r4, #12]
 8018d4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018d52:	81a3      	strh	r3, [r4, #12]
 8018d54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d5c:	6921      	ldr	r1, [r4, #16]
 8018d5e:	464a      	mov	r2, r9
 8018d60:	f7ff f96c 	bl	801803c <memcpy>
 8018d64:	89a3      	ldrh	r3, [r4, #12]
 8018d66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018d6e:	81a3      	strh	r3, [r4, #12]
 8018d70:	6126      	str	r6, [r4, #16]
 8018d72:	6165      	str	r5, [r4, #20]
 8018d74:	444e      	add	r6, r9
 8018d76:	eba5 0509 	sub.w	r5, r5, r9
 8018d7a:	6026      	str	r6, [r4, #0]
 8018d7c:	60a5      	str	r5, [r4, #8]
 8018d7e:	463e      	mov	r6, r7
 8018d80:	42be      	cmp	r6, r7
 8018d82:	d900      	bls.n	8018d86 <__ssputs_r+0x86>
 8018d84:	463e      	mov	r6, r7
 8018d86:	4632      	mov	r2, r6
 8018d88:	6820      	ldr	r0, [r4, #0]
 8018d8a:	4641      	mov	r1, r8
 8018d8c:	f7ff f964 	bl	8018058 <memmove>
 8018d90:	68a3      	ldr	r3, [r4, #8]
 8018d92:	6822      	ldr	r2, [r4, #0]
 8018d94:	1b9b      	subs	r3, r3, r6
 8018d96:	4432      	add	r2, r6
 8018d98:	60a3      	str	r3, [r4, #8]
 8018d9a:	6022      	str	r2, [r4, #0]
 8018d9c:	2000      	movs	r0, #0
 8018d9e:	e7db      	b.n	8018d58 <__ssputs_r+0x58>
 8018da0:	462a      	mov	r2, r5
 8018da2:	f7ff ff87 	bl	8018cb4 <_realloc_r>
 8018da6:	4606      	mov	r6, r0
 8018da8:	2800      	cmp	r0, #0
 8018daa:	d1e1      	bne.n	8018d70 <__ssputs_r+0x70>
 8018dac:	6921      	ldr	r1, [r4, #16]
 8018dae:	4650      	mov	r0, sl
 8018db0:	f7ff f974 	bl	801809c <_free_r>
 8018db4:	e7c7      	b.n	8018d46 <__ssputs_r+0x46>
	...

08018db8 <_svfiprintf_r>:
 8018db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dbc:	4698      	mov	r8, r3
 8018dbe:	898b      	ldrh	r3, [r1, #12]
 8018dc0:	061b      	lsls	r3, r3, #24
 8018dc2:	b09d      	sub	sp, #116	; 0x74
 8018dc4:	4607      	mov	r7, r0
 8018dc6:	460d      	mov	r5, r1
 8018dc8:	4614      	mov	r4, r2
 8018dca:	d50e      	bpl.n	8018dea <_svfiprintf_r+0x32>
 8018dcc:	690b      	ldr	r3, [r1, #16]
 8018dce:	b963      	cbnz	r3, 8018dea <_svfiprintf_r+0x32>
 8018dd0:	2140      	movs	r1, #64	; 0x40
 8018dd2:	f7ff f9b3 	bl	801813c <_malloc_r>
 8018dd6:	6028      	str	r0, [r5, #0]
 8018dd8:	6128      	str	r0, [r5, #16]
 8018dda:	b920      	cbnz	r0, 8018de6 <_svfiprintf_r+0x2e>
 8018ddc:	230c      	movs	r3, #12
 8018dde:	603b      	str	r3, [r7, #0]
 8018de0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018de4:	e0d1      	b.n	8018f8a <_svfiprintf_r+0x1d2>
 8018de6:	2340      	movs	r3, #64	; 0x40
 8018de8:	616b      	str	r3, [r5, #20]
 8018dea:	2300      	movs	r3, #0
 8018dec:	9309      	str	r3, [sp, #36]	; 0x24
 8018dee:	2320      	movs	r3, #32
 8018df0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018df4:	f8cd 800c 	str.w	r8, [sp, #12]
 8018df8:	2330      	movs	r3, #48	; 0x30
 8018dfa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018fa4 <_svfiprintf_r+0x1ec>
 8018dfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018e02:	f04f 0901 	mov.w	r9, #1
 8018e06:	4623      	mov	r3, r4
 8018e08:	469a      	mov	sl, r3
 8018e0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018e0e:	b10a      	cbz	r2, 8018e14 <_svfiprintf_r+0x5c>
 8018e10:	2a25      	cmp	r2, #37	; 0x25
 8018e12:	d1f9      	bne.n	8018e08 <_svfiprintf_r+0x50>
 8018e14:	ebba 0b04 	subs.w	fp, sl, r4
 8018e18:	d00b      	beq.n	8018e32 <_svfiprintf_r+0x7a>
 8018e1a:	465b      	mov	r3, fp
 8018e1c:	4622      	mov	r2, r4
 8018e1e:	4629      	mov	r1, r5
 8018e20:	4638      	mov	r0, r7
 8018e22:	f7ff ff6d 	bl	8018d00 <__ssputs_r>
 8018e26:	3001      	adds	r0, #1
 8018e28:	f000 80aa 	beq.w	8018f80 <_svfiprintf_r+0x1c8>
 8018e2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018e2e:	445a      	add	r2, fp
 8018e30:	9209      	str	r2, [sp, #36]	; 0x24
 8018e32:	f89a 3000 	ldrb.w	r3, [sl]
 8018e36:	2b00      	cmp	r3, #0
 8018e38:	f000 80a2 	beq.w	8018f80 <_svfiprintf_r+0x1c8>
 8018e3c:	2300      	movs	r3, #0
 8018e3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018e42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018e46:	f10a 0a01 	add.w	sl, sl, #1
 8018e4a:	9304      	str	r3, [sp, #16]
 8018e4c:	9307      	str	r3, [sp, #28]
 8018e4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018e52:	931a      	str	r3, [sp, #104]	; 0x68
 8018e54:	4654      	mov	r4, sl
 8018e56:	2205      	movs	r2, #5
 8018e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e5c:	4851      	ldr	r0, [pc, #324]	; (8018fa4 <_svfiprintf_r+0x1ec>)
 8018e5e:	f7e7 fa07 	bl	8000270 <memchr>
 8018e62:	9a04      	ldr	r2, [sp, #16]
 8018e64:	b9d8      	cbnz	r0, 8018e9e <_svfiprintf_r+0xe6>
 8018e66:	06d0      	lsls	r0, r2, #27
 8018e68:	bf44      	itt	mi
 8018e6a:	2320      	movmi	r3, #32
 8018e6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018e70:	0711      	lsls	r1, r2, #28
 8018e72:	bf44      	itt	mi
 8018e74:	232b      	movmi	r3, #43	; 0x2b
 8018e76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018e7a:	f89a 3000 	ldrb.w	r3, [sl]
 8018e7e:	2b2a      	cmp	r3, #42	; 0x2a
 8018e80:	d015      	beq.n	8018eae <_svfiprintf_r+0xf6>
 8018e82:	9a07      	ldr	r2, [sp, #28]
 8018e84:	4654      	mov	r4, sl
 8018e86:	2000      	movs	r0, #0
 8018e88:	f04f 0c0a 	mov.w	ip, #10
 8018e8c:	4621      	mov	r1, r4
 8018e8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018e92:	3b30      	subs	r3, #48	; 0x30
 8018e94:	2b09      	cmp	r3, #9
 8018e96:	d94e      	bls.n	8018f36 <_svfiprintf_r+0x17e>
 8018e98:	b1b0      	cbz	r0, 8018ec8 <_svfiprintf_r+0x110>
 8018e9a:	9207      	str	r2, [sp, #28]
 8018e9c:	e014      	b.n	8018ec8 <_svfiprintf_r+0x110>
 8018e9e:	eba0 0308 	sub.w	r3, r0, r8
 8018ea2:	fa09 f303 	lsl.w	r3, r9, r3
 8018ea6:	4313      	orrs	r3, r2
 8018ea8:	9304      	str	r3, [sp, #16]
 8018eaa:	46a2      	mov	sl, r4
 8018eac:	e7d2      	b.n	8018e54 <_svfiprintf_r+0x9c>
 8018eae:	9b03      	ldr	r3, [sp, #12]
 8018eb0:	1d19      	adds	r1, r3, #4
 8018eb2:	681b      	ldr	r3, [r3, #0]
 8018eb4:	9103      	str	r1, [sp, #12]
 8018eb6:	2b00      	cmp	r3, #0
 8018eb8:	bfbb      	ittet	lt
 8018eba:	425b      	neglt	r3, r3
 8018ebc:	f042 0202 	orrlt.w	r2, r2, #2
 8018ec0:	9307      	strge	r3, [sp, #28]
 8018ec2:	9307      	strlt	r3, [sp, #28]
 8018ec4:	bfb8      	it	lt
 8018ec6:	9204      	strlt	r2, [sp, #16]
 8018ec8:	7823      	ldrb	r3, [r4, #0]
 8018eca:	2b2e      	cmp	r3, #46	; 0x2e
 8018ecc:	d10c      	bne.n	8018ee8 <_svfiprintf_r+0x130>
 8018ece:	7863      	ldrb	r3, [r4, #1]
 8018ed0:	2b2a      	cmp	r3, #42	; 0x2a
 8018ed2:	d135      	bne.n	8018f40 <_svfiprintf_r+0x188>
 8018ed4:	9b03      	ldr	r3, [sp, #12]
 8018ed6:	1d1a      	adds	r2, r3, #4
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	9203      	str	r2, [sp, #12]
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	bfb8      	it	lt
 8018ee0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018ee4:	3402      	adds	r4, #2
 8018ee6:	9305      	str	r3, [sp, #20]
 8018ee8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018fb4 <_svfiprintf_r+0x1fc>
 8018eec:	7821      	ldrb	r1, [r4, #0]
 8018eee:	2203      	movs	r2, #3
 8018ef0:	4650      	mov	r0, sl
 8018ef2:	f7e7 f9bd 	bl	8000270 <memchr>
 8018ef6:	b140      	cbz	r0, 8018f0a <_svfiprintf_r+0x152>
 8018ef8:	2340      	movs	r3, #64	; 0x40
 8018efa:	eba0 000a 	sub.w	r0, r0, sl
 8018efe:	fa03 f000 	lsl.w	r0, r3, r0
 8018f02:	9b04      	ldr	r3, [sp, #16]
 8018f04:	4303      	orrs	r3, r0
 8018f06:	3401      	adds	r4, #1
 8018f08:	9304      	str	r3, [sp, #16]
 8018f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018f0e:	4826      	ldr	r0, [pc, #152]	; (8018fa8 <_svfiprintf_r+0x1f0>)
 8018f10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018f14:	2206      	movs	r2, #6
 8018f16:	f7e7 f9ab 	bl	8000270 <memchr>
 8018f1a:	2800      	cmp	r0, #0
 8018f1c:	d038      	beq.n	8018f90 <_svfiprintf_r+0x1d8>
 8018f1e:	4b23      	ldr	r3, [pc, #140]	; (8018fac <_svfiprintf_r+0x1f4>)
 8018f20:	bb1b      	cbnz	r3, 8018f6a <_svfiprintf_r+0x1b2>
 8018f22:	9b03      	ldr	r3, [sp, #12]
 8018f24:	3307      	adds	r3, #7
 8018f26:	f023 0307 	bic.w	r3, r3, #7
 8018f2a:	3308      	adds	r3, #8
 8018f2c:	9303      	str	r3, [sp, #12]
 8018f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f30:	4433      	add	r3, r6
 8018f32:	9309      	str	r3, [sp, #36]	; 0x24
 8018f34:	e767      	b.n	8018e06 <_svfiprintf_r+0x4e>
 8018f36:	fb0c 3202 	mla	r2, ip, r2, r3
 8018f3a:	460c      	mov	r4, r1
 8018f3c:	2001      	movs	r0, #1
 8018f3e:	e7a5      	b.n	8018e8c <_svfiprintf_r+0xd4>
 8018f40:	2300      	movs	r3, #0
 8018f42:	3401      	adds	r4, #1
 8018f44:	9305      	str	r3, [sp, #20]
 8018f46:	4619      	mov	r1, r3
 8018f48:	f04f 0c0a 	mov.w	ip, #10
 8018f4c:	4620      	mov	r0, r4
 8018f4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018f52:	3a30      	subs	r2, #48	; 0x30
 8018f54:	2a09      	cmp	r2, #9
 8018f56:	d903      	bls.n	8018f60 <_svfiprintf_r+0x1a8>
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d0c5      	beq.n	8018ee8 <_svfiprintf_r+0x130>
 8018f5c:	9105      	str	r1, [sp, #20]
 8018f5e:	e7c3      	b.n	8018ee8 <_svfiprintf_r+0x130>
 8018f60:	fb0c 2101 	mla	r1, ip, r1, r2
 8018f64:	4604      	mov	r4, r0
 8018f66:	2301      	movs	r3, #1
 8018f68:	e7f0      	b.n	8018f4c <_svfiprintf_r+0x194>
 8018f6a:	ab03      	add	r3, sp, #12
 8018f6c:	9300      	str	r3, [sp, #0]
 8018f6e:	462a      	mov	r2, r5
 8018f70:	4b0f      	ldr	r3, [pc, #60]	; (8018fb0 <_svfiprintf_r+0x1f8>)
 8018f72:	a904      	add	r1, sp, #16
 8018f74:	4638      	mov	r0, r7
 8018f76:	f3af 8000 	nop.w
 8018f7a:	1c42      	adds	r2, r0, #1
 8018f7c:	4606      	mov	r6, r0
 8018f7e:	d1d6      	bne.n	8018f2e <_svfiprintf_r+0x176>
 8018f80:	89ab      	ldrh	r3, [r5, #12]
 8018f82:	065b      	lsls	r3, r3, #25
 8018f84:	f53f af2c 	bmi.w	8018de0 <_svfiprintf_r+0x28>
 8018f88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018f8a:	b01d      	add	sp, #116	; 0x74
 8018f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f90:	ab03      	add	r3, sp, #12
 8018f92:	9300      	str	r3, [sp, #0]
 8018f94:	462a      	mov	r2, r5
 8018f96:	4b06      	ldr	r3, [pc, #24]	; (8018fb0 <_svfiprintf_r+0x1f8>)
 8018f98:	a904      	add	r1, sp, #16
 8018f9a:	4638      	mov	r0, r7
 8018f9c:	f000 fba6 	bl	80196ec <_printf_i>
 8018fa0:	e7eb      	b.n	8018f7a <_svfiprintf_r+0x1c2>
 8018fa2:	bf00      	nop
 8018fa4:	08021756 	.word	0x08021756
 8018fa8:	08021760 	.word	0x08021760
 8018fac:	00000000 	.word	0x00000000
 8018fb0:	08018d01 	.word	0x08018d01
 8018fb4:	0802175c 	.word	0x0802175c

08018fb8 <_sungetc_r>:
 8018fb8:	b538      	push	{r3, r4, r5, lr}
 8018fba:	1c4b      	adds	r3, r1, #1
 8018fbc:	4614      	mov	r4, r2
 8018fbe:	d103      	bne.n	8018fc8 <_sungetc_r+0x10>
 8018fc0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8018fc4:	4628      	mov	r0, r5
 8018fc6:	bd38      	pop	{r3, r4, r5, pc}
 8018fc8:	8993      	ldrh	r3, [r2, #12]
 8018fca:	f023 0320 	bic.w	r3, r3, #32
 8018fce:	8193      	strh	r3, [r2, #12]
 8018fd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018fd2:	6852      	ldr	r2, [r2, #4]
 8018fd4:	b2cd      	uxtb	r5, r1
 8018fd6:	b18b      	cbz	r3, 8018ffc <_sungetc_r+0x44>
 8018fd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018fda:	4293      	cmp	r3, r2
 8018fdc:	dd08      	ble.n	8018ff0 <_sungetc_r+0x38>
 8018fde:	6823      	ldr	r3, [r4, #0]
 8018fe0:	1e5a      	subs	r2, r3, #1
 8018fe2:	6022      	str	r2, [r4, #0]
 8018fe4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8018fe8:	6863      	ldr	r3, [r4, #4]
 8018fea:	3301      	adds	r3, #1
 8018fec:	6063      	str	r3, [r4, #4]
 8018fee:	e7e9      	b.n	8018fc4 <_sungetc_r+0xc>
 8018ff0:	4621      	mov	r1, r4
 8018ff2:	f000 feb7 	bl	8019d64 <__submore>
 8018ff6:	2800      	cmp	r0, #0
 8018ff8:	d0f1      	beq.n	8018fde <_sungetc_r+0x26>
 8018ffa:	e7e1      	b.n	8018fc0 <_sungetc_r+0x8>
 8018ffc:	6921      	ldr	r1, [r4, #16]
 8018ffe:	6823      	ldr	r3, [r4, #0]
 8019000:	b151      	cbz	r1, 8019018 <_sungetc_r+0x60>
 8019002:	4299      	cmp	r1, r3
 8019004:	d208      	bcs.n	8019018 <_sungetc_r+0x60>
 8019006:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801900a:	42a9      	cmp	r1, r5
 801900c:	d104      	bne.n	8019018 <_sungetc_r+0x60>
 801900e:	3b01      	subs	r3, #1
 8019010:	3201      	adds	r2, #1
 8019012:	6023      	str	r3, [r4, #0]
 8019014:	6062      	str	r2, [r4, #4]
 8019016:	e7d5      	b.n	8018fc4 <_sungetc_r+0xc>
 8019018:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801901c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019020:	6363      	str	r3, [r4, #52]	; 0x34
 8019022:	2303      	movs	r3, #3
 8019024:	63a3      	str	r3, [r4, #56]	; 0x38
 8019026:	4623      	mov	r3, r4
 8019028:	f803 5f46 	strb.w	r5, [r3, #70]!
 801902c:	6023      	str	r3, [r4, #0]
 801902e:	2301      	movs	r3, #1
 8019030:	e7dc      	b.n	8018fec <_sungetc_r+0x34>

08019032 <__ssrefill_r>:
 8019032:	b510      	push	{r4, lr}
 8019034:	460c      	mov	r4, r1
 8019036:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019038:	b169      	cbz	r1, 8019056 <__ssrefill_r+0x24>
 801903a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801903e:	4299      	cmp	r1, r3
 8019040:	d001      	beq.n	8019046 <__ssrefill_r+0x14>
 8019042:	f7ff f82b 	bl	801809c <_free_r>
 8019046:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019048:	6063      	str	r3, [r4, #4]
 801904a:	2000      	movs	r0, #0
 801904c:	6360      	str	r0, [r4, #52]	; 0x34
 801904e:	b113      	cbz	r3, 8019056 <__ssrefill_r+0x24>
 8019050:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019052:	6023      	str	r3, [r4, #0]
 8019054:	bd10      	pop	{r4, pc}
 8019056:	6923      	ldr	r3, [r4, #16]
 8019058:	6023      	str	r3, [r4, #0]
 801905a:	2300      	movs	r3, #0
 801905c:	6063      	str	r3, [r4, #4]
 801905e:	89a3      	ldrh	r3, [r4, #12]
 8019060:	f043 0320 	orr.w	r3, r3, #32
 8019064:	81a3      	strh	r3, [r4, #12]
 8019066:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801906a:	e7f3      	b.n	8019054 <__ssrefill_r+0x22>

0801906c <__ssvfiscanf_r>:
 801906c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019070:	460c      	mov	r4, r1
 8019072:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8019076:	2100      	movs	r1, #0
 8019078:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801907c:	49b2      	ldr	r1, [pc, #712]	; (8019348 <__ssvfiscanf_r+0x2dc>)
 801907e:	91a0      	str	r1, [sp, #640]	; 0x280
 8019080:	f10d 0804 	add.w	r8, sp, #4
 8019084:	49b1      	ldr	r1, [pc, #708]	; (801934c <__ssvfiscanf_r+0x2e0>)
 8019086:	4fb2      	ldr	r7, [pc, #712]	; (8019350 <__ssvfiscanf_r+0x2e4>)
 8019088:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8019354 <__ssvfiscanf_r+0x2e8>
 801908c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8019090:	4606      	mov	r6, r0
 8019092:	91a1      	str	r1, [sp, #644]	; 0x284
 8019094:	9300      	str	r3, [sp, #0]
 8019096:	f892 a000 	ldrb.w	sl, [r2]
 801909a:	f1ba 0f00 	cmp.w	sl, #0
 801909e:	f000 8151 	beq.w	8019344 <__ssvfiscanf_r+0x2d8>
 80190a2:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80190a6:	f013 0308 	ands.w	r3, r3, #8
 80190aa:	f102 0501 	add.w	r5, r2, #1
 80190ae:	d019      	beq.n	80190e4 <__ssvfiscanf_r+0x78>
 80190b0:	6863      	ldr	r3, [r4, #4]
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	dd0f      	ble.n	80190d6 <__ssvfiscanf_r+0x6a>
 80190b6:	6823      	ldr	r3, [r4, #0]
 80190b8:	781a      	ldrb	r2, [r3, #0]
 80190ba:	5cba      	ldrb	r2, [r7, r2]
 80190bc:	0712      	lsls	r2, r2, #28
 80190be:	d401      	bmi.n	80190c4 <__ssvfiscanf_r+0x58>
 80190c0:	462a      	mov	r2, r5
 80190c2:	e7e8      	b.n	8019096 <__ssvfiscanf_r+0x2a>
 80190c4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80190c6:	3201      	adds	r2, #1
 80190c8:	9245      	str	r2, [sp, #276]	; 0x114
 80190ca:	6862      	ldr	r2, [r4, #4]
 80190cc:	3301      	adds	r3, #1
 80190ce:	3a01      	subs	r2, #1
 80190d0:	6062      	str	r2, [r4, #4]
 80190d2:	6023      	str	r3, [r4, #0]
 80190d4:	e7ec      	b.n	80190b0 <__ssvfiscanf_r+0x44>
 80190d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80190d8:	4621      	mov	r1, r4
 80190da:	4630      	mov	r0, r6
 80190dc:	4798      	blx	r3
 80190de:	2800      	cmp	r0, #0
 80190e0:	d0e9      	beq.n	80190b6 <__ssvfiscanf_r+0x4a>
 80190e2:	e7ed      	b.n	80190c0 <__ssvfiscanf_r+0x54>
 80190e4:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80190e8:	f040 8083 	bne.w	80191f2 <__ssvfiscanf_r+0x186>
 80190ec:	9341      	str	r3, [sp, #260]	; 0x104
 80190ee:	9343      	str	r3, [sp, #268]	; 0x10c
 80190f0:	7853      	ldrb	r3, [r2, #1]
 80190f2:	2b2a      	cmp	r3, #42	; 0x2a
 80190f4:	bf02      	ittt	eq
 80190f6:	2310      	moveq	r3, #16
 80190f8:	1c95      	addeq	r5, r2, #2
 80190fa:	9341      	streq	r3, [sp, #260]	; 0x104
 80190fc:	220a      	movs	r2, #10
 80190fe:	46ab      	mov	fp, r5
 8019100:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8019104:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8019108:	2b09      	cmp	r3, #9
 801910a:	d91d      	bls.n	8019148 <__ssvfiscanf_r+0xdc>
 801910c:	4891      	ldr	r0, [pc, #580]	; (8019354 <__ssvfiscanf_r+0x2e8>)
 801910e:	2203      	movs	r2, #3
 8019110:	f7e7 f8ae 	bl	8000270 <memchr>
 8019114:	b140      	cbz	r0, 8019128 <__ssvfiscanf_r+0xbc>
 8019116:	2301      	movs	r3, #1
 8019118:	eba0 0009 	sub.w	r0, r0, r9
 801911c:	fa03 f000 	lsl.w	r0, r3, r0
 8019120:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019122:	4318      	orrs	r0, r3
 8019124:	9041      	str	r0, [sp, #260]	; 0x104
 8019126:	465d      	mov	r5, fp
 8019128:	f815 3b01 	ldrb.w	r3, [r5], #1
 801912c:	2b78      	cmp	r3, #120	; 0x78
 801912e:	d806      	bhi.n	801913e <__ssvfiscanf_r+0xd2>
 8019130:	2b57      	cmp	r3, #87	; 0x57
 8019132:	d810      	bhi.n	8019156 <__ssvfiscanf_r+0xea>
 8019134:	2b25      	cmp	r3, #37	; 0x25
 8019136:	d05c      	beq.n	80191f2 <__ssvfiscanf_r+0x186>
 8019138:	d856      	bhi.n	80191e8 <__ssvfiscanf_r+0x17c>
 801913a:	2b00      	cmp	r3, #0
 801913c:	d074      	beq.n	8019228 <__ssvfiscanf_r+0x1bc>
 801913e:	2303      	movs	r3, #3
 8019140:	9347      	str	r3, [sp, #284]	; 0x11c
 8019142:	230a      	movs	r3, #10
 8019144:	9342      	str	r3, [sp, #264]	; 0x108
 8019146:	e081      	b.n	801924c <__ssvfiscanf_r+0x1e0>
 8019148:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801914a:	fb02 1303 	mla	r3, r2, r3, r1
 801914e:	3b30      	subs	r3, #48	; 0x30
 8019150:	9343      	str	r3, [sp, #268]	; 0x10c
 8019152:	465d      	mov	r5, fp
 8019154:	e7d3      	b.n	80190fe <__ssvfiscanf_r+0x92>
 8019156:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801915a:	2a20      	cmp	r2, #32
 801915c:	d8ef      	bhi.n	801913e <__ssvfiscanf_r+0xd2>
 801915e:	a101      	add	r1, pc, #4	; (adr r1, 8019164 <__ssvfiscanf_r+0xf8>)
 8019160:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8019164:	08019237 	.word	0x08019237
 8019168:	0801913f 	.word	0x0801913f
 801916c:	0801913f 	.word	0x0801913f
 8019170:	08019295 	.word	0x08019295
 8019174:	0801913f 	.word	0x0801913f
 8019178:	0801913f 	.word	0x0801913f
 801917c:	0801913f 	.word	0x0801913f
 8019180:	0801913f 	.word	0x0801913f
 8019184:	0801913f 	.word	0x0801913f
 8019188:	0801913f 	.word	0x0801913f
 801918c:	0801913f 	.word	0x0801913f
 8019190:	080192ab 	.word	0x080192ab
 8019194:	08019281 	.word	0x08019281
 8019198:	080191ef 	.word	0x080191ef
 801919c:	080191ef 	.word	0x080191ef
 80191a0:	080191ef 	.word	0x080191ef
 80191a4:	0801913f 	.word	0x0801913f
 80191a8:	08019285 	.word	0x08019285
 80191ac:	0801913f 	.word	0x0801913f
 80191b0:	0801913f 	.word	0x0801913f
 80191b4:	0801913f 	.word	0x0801913f
 80191b8:	0801913f 	.word	0x0801913f
 80191bc:	080192bb 	.word	0x080192bb
 80191c0:	0801928d 	.word	0x0801928d
 80191c4:	0801922f 	.word	0x0801922f
 80191c8:	0801913f 	.word	0x0801913f
 80191cc:	0801913f 	.word	0x0801913f
 80191d0:	080192b7 	.word	0x080192b7
 80191d4:	0801913f 	.word	0x0801913f
 80191d8:	08019281 	.word	0x08019281
 80191dc:	0801913f 	.word	0x0801913f
 80191e0:	0801913f 	.word	0x0801913f
 80191e4:	08019237 	.word	0x08019237
 80191e8:	3b45      	subs	r3, #69	; 0x45
 80191ea:	2b02      	cmp	r3, #2
 80191ec:	d8a7      	bhi.n	801913e <__ssvfiscanf_r+0xd2>
 80191ee:	2305      	movs	r3, #5
 80191f0:	e02b      	b.n	801924a <__ssvfiscanf_r+0x1de>
 80191f2:	6863      	ldr	r3, [r4, #4]
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	dd0d      	ble.n	8019214 <__ssvfiscanf_r+0x1a8>
 80191f8:	6823      	ldr	r3, [r4, #0]
 80191fa:	781a      	ldrb	r2, [r3, #0]
 80191fc:	4552      	cmp	r2, sl
 80191fe:	f040 80a1 	bne.w	8019344 <__ssvfiscanf_r+0x2d8>
 8019202:	3301      	adds	r3, #1
 8019204:	6862      	ldr	r2, [r4, #4]
 8019206:	6023      	str	r3, [r4, #0]
 8019208:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801920a:	3a01      	subs	r2, #1
 801920c:	3301      	adds	r3, #1
 801920e:	6062      	str	r2, [r4, #4]
 8019210:	9345      	str	r3, [sp, #276]	; 0x114
 8019212:	e755      	b.n	80190c0 <__ssvfiscanf_r+0x54>
 8019214:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019216:	4621      	mov	r1, r4
 8019218:	4630      	mov	r0, r6
 801921a:	4798      	blx	r3
 801921c:	2800      	cmp	r0, #0
 801921e:	d0eb      	beq.n	80191f8 <__ssvfiscanf_r+0x18c>
 8019220:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019222:	2800      	cmp	r0, #0
 8019224:	f040 8084 	bne.w	8019330 <__ssvfiscanf_r+0x2c4>
 8019228:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801922c:	e086      	b.n	801933c <__ssvfiscanf_r+0x2d0>
 801922e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019230:	f042 0220 	orr.w	r2, r2, #32
 8019234:	9241      	str	r2, [sp, #260]	; 0x104
 8019236:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801923c:	9241      	str	r2, [sp, #260]	; 0x104
 801923e:	2210      	movs	r2, #16
 8019240:	2b6f      	cmp	r3, #111	; 0x6f
 8019242:	9242      	str	r2, [sp, #264]	; 0x108
 8019244:	bf34      	ite	cc
 8019246:	2303      	movcc	r3, #3
 8019248:	2304      	movcs	r3, #4
 801924a:	9347      	str	r3, [sp, #284]	; 0x11c
 801924c:	6863      	ldr	r3, [r4, #4]
 801924e:	2b00      	cmp	r3, #0
 8019250:	dd41      	ble.n	80192d6 <__ssvfiscanf_r+0x26a>
 8019252:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019254:	0659      	lsls	r1, r3, #25
 8019256:	d404      	bmi.n	8019262 <__ssvfiscanf_r+0x1f6>
 8019258:	6823      	ldr	r3, [r4, #0]
 801925a:	781a      	ldrb	r2, [r3, #0]
 801925c:	5cba      	ldrb	r2, [r7, r2]
 801925e:	0712      	lsls	r2, r2, #28
 8019260:	d440      	bmi.n	80192e4 <__ssvfiscanf_r+0x278>
 8019262:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8019264:	2b02      	cmp	r3, #2
 8019266:	dc4f      	bgt.n	8019308 <__ssvfiscanf_r+0x29c>
 8019268:	466b      	mov	r3, sp
 801926a:	4622      	mov	r2, r4
 801926c:	a941      	add	r1, sp, #260	; 0x104
 801926e:	4630      	mov	r0, r6
 8019270:	f000 fb62 	bl	8019938 <_scanf_chars>
 8019274:	2801      	cmp	r0, #1
 8019276:	d065      	beq.n	8019344 <__ssvfiscanf_r+0x2d8>
 8019278:	2802      	cmp	r0, #2
 801927a:	f47f af21 	bne.w	80190c0 <__ssvfiscanf_r+0x54>
 801927e:	e7cf      	b.n	8019220 <__ssvfiscanf_r+0x1b4>
 8019280:	220a      	movs	r2, #10
 8019282:	e7dd      	b.n	8019240 <__ssvfiscanf_r+0x1d4>
 8019284:	2300      	movs	r3, #0
 8019286:	9342      	str	r3, [sp, #264]	; 0x108
 8019288:	2303      	movs	r3, #3
 801928a:	e7de      	b.n	801924a <__ssvfiscanf_r+0x1de>
 801928c:	2308      	movs	r3, #8
 801928e:	9342      	str	r3, [sp, #264]	; 0x108
 8019290:	2304      	movs	r3, #4
 8019292:	e7da      	b.n	801924a <__ssvfiscanf_r+0x1de>
 8019294:	4629      	mov	r1, r5
 8019296:	4640      	mov	r0, r8
 8019298:	f000 fcac 	bl	8019bf4 <__sccl>
 801929c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801929e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80192a2:	9341      	str	r3, [sp, #260]	; 0x104
 80192a4:	4605      	mov	r5, r0
 80192a6:	2301      	movs	r3, #1
 80192a8:	e7cf      	b.n	801924a <__ssvfiscanf_r+0x1de>
 80192aa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80192ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80192b0:	9341      	str	r3, [sp, #260]	; 0x104
 80192b2:	2300      	movs	r3, #0
 80192b4:	e7c9      	b.n	801924a <__ssvfiscanf_r+0x1de>
 80192b6:	2302      	movs	r3, #2
 80192b8:	e7c7      	b.n	801924a <__ssvfiscanf_r+0x1de>
 80192ba:	9841      	ldr	r0, [sp, #260]	; 0x104
 80192bc:	06c3      	lsls	r3, r0, #27
 80192be:	f53f aeff 	bmi.w	80190c0 <__ssvfiscanf_r+0x54>
 80192c2:	9b00      	ldr	r3, [sp, #0]
 80192c4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80192c6:	1d19      	adds	r1, r3, #4
 80192c8:	9100      	str	r1, [sp, #0]
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	07c0      	lsls	r0, r0, #31
 80192ce:	bf4c      	ite	mi
 80192d0:	801a      	strhmi	r2, [r3, #0]
 80192d2:	601a      	strpl	r2, [r3, #0]
 80192d4:	e6f4      	b.n	80190c0 <__ssvfiscanf_r+0x54>
 80192d6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80192d8:	4621      	mov	r1, r4
 80192da:	4630      	mov	r0, r6
 80192dc:	4798      	blx	r3
 80192de:	2800      	cmp	r0, #0
 80192e0:	d0b7      	beq.n	8019252 <__ssvfiscanf_r+0x1e6>
 80192e2:	e79d      	b.n	8019220 <__ssvfiscanf_r+0x1b4>
 80192e4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80192e6:	3201      	adds	r2, #1
 80192e8:	9245      	str	r2, [sp, #276]	; 0x114
 80192ea:	6862      	ldr	r2, [r4, #4]
 80192ec:	3a01      	subs	r2, #1
 80192ee:	2a00      	cmp	r2, #0
 80192f0:	6062      	str	r2, [r4, #4]
 80192f2:	dd02      	ble.n	80192fa <__ssvfiscanf_r+0x28e>
 80192f4:	3301      	adds	r3, #1
 80192f6:	6023      	str	r3, [r4, #0]
 80192f8:	e7ae      	b.n	8019258 <__ssvfiscanf_r+0x1ec>
 80192fa:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80192fc:	4621      	mov	r1, r4
 80192fe:	4630      	mov	r0, r6
 8019300:	4798      	blx	r3
 8019302:	2800      	cmp	r0, #0
 8019304:	d0a8      	beq.n	8019258 <__ssvfiscanf_r+0x1ec>
 8019306:	e78b      	b.n	8019220 <__ssvfiscanf_r+0x1b4>
 8019308:	2b04      	cmp	r3, #4
 801930a:	dc06      	bgt.n	801931a <__ssvfiscanf_r+0x2ae>
 801930c:	466b      	mov	r3, sp
 801930e:	4622      	mov	r2, r4
 8019310:	a941      	add	r1, sp, #260	; 0x104
 8019312:	4630      	mov	r0, r6
 8019314:	f000 fb68 	bl	80199e8 <_scanf_i>
 8019318:	e7ac      	b.n	8019274 <__ssvfiscanf_r+0x208>
 801931a:	4b0f      	ldr	r3, [pc, #60]	; (8019358 <__ssvfiscanf_r+0x2ec>)
 801931c:	2b00      	cmp	r3, #0
 801931e:	f43f aecf 	beq.w	80190c0 <__ssvfiscanf_r+0x54>
 8019322:	466b      	mov	r3, sp
 8019324:	4622      	mov	r2, r4
 8019326:	a941      	add	r1, sp, #260	; 0x104
 8019328:	4630      	mov	r0, r6
 801932a:	f3af 8000 	nop.w
 801932e:	e7a1      	b.n	8019274 <__ssvfiscanf_r+0x208>
 8019330:	89a3      	ldrh	r3, [r4, #12]
 8019332:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019336:	bf18      	it	ne
 8019338:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 801933c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8019340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019344:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019346:	e7f9      	b.n	801933c <__ssvfiscanf_r+0x2d0>
 8019348:	08018fb9 	.word	0x08018fb9
 801934c:	08019033 	.word	0x08019033
 8019350:	0802153d 	.word	0x0802153d
 8019354:	0802175c 	.word	0x0802175c
 8019358:	00000000 	.word	0x00000000

0801935c <__sfputc_r>:
 801935c:	6893      	ldr	r3, [r2, #8]
 801935e:	3b01      	subs	r3, #1
 8019360:	2b00      	cmp	r3, #0
 8019362:	b410      	push	{r4}
 8019364:	6093      	str	r3, [r2, #8]
 8019366:	da08      	bge.n	801937a <__sfputc_r+0x1e>
 8019368:	6994      	ldr	r4, [r2, #24]
 801936a:	42a3      	cmp	r3, r4
 801936c:	db01      	blt.n	8019372 <__sfputc_r+0x16>
 801936e:	290a      	cmp	r1, #10
 8019370:	d103      	bne.n	801937a <__sfputc_r+0x1e>
 8019372:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019376:	f7ff ba41 	b.w	80187fc <__swbuf_r>
 801937a:	6813      	ldr	r3, [r2, #0]
 801937c:	1c58      	adds	r0, r3, #1
 801937e:	6010      	str	r0, [r2, #0]
 8019380:	7019      	strb	r1, [r3, #0]
 8019382:	4608      	mov	r0, r1
 8019384:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019388:	4770      	bx	lr

0801938a <__sfputs_r>:
 801938a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801938c:	4606      	mov	r6, r0
 801938e:	460f      	mov	r7, r1
 8019390:	4614      	mov	r4, r2
 8019392:	18d5      	adds	r5, r2, r3
 8019394:	42ac      	cmp	r4, r5
 8019396:	d101      	bne.n	801939c <__sfputs_r+0x12>
 8019398:	2000      	movs	r0, #0
 801939a:	e007      	b.n	80193ac <__sfputs_r+0x22>
 801939c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80193a0:	463a      	mov	r2, r7
 80193a2:	4630      	mov	r0, r6
 80193a4:	f7ff ffda 	bl	801935c <__sfputc_r>
 80193a8:	1c43      	adds	r3, r0, #1
 80193aa:	d1f3      	bne.n	8019394 <__sfputs_r+0xa>
 80193ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080193b0 <_vfiprintf_r>:
 80193b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193b4:	460d      	mov	r5, r1
 80193b6:	b09d      	sub	sp, #116	; 0x74
 80193b8:	4614      	mov	r4, r2
 80193ba:	4698      	mov	r8, r3
 80193bc:	4606      	mov	r6, r0
 80193be:	b118      	cbz	r0, 80193c8 <_vfiprintf_r+0x18>
 80193c0:	6983      	ldr	r3, [r0, #24]
 80193c2:	b90b      	cbnz	r3, 80193c8 <_vfiprintf_r+0x18>
 80193c4:	f7fe fd56 	bl	8017e74 <__sinit>
 80193c8:	4b89      	ldr	r3, [pc, #548]	; (80195f0 <_vfiprintf_r+0x240>)
 80193ca:	429d      	cmp	r5, r3
 80193cc:	d11b      	bne.n	8019406 <_vfiprintf_r+0x56>
 80193ce:	6875      	ldr	r5, [r6, #4]
 80193d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80193d2:	07d9      	lsls	r1, r3, #31
 80193d4:	d405      	bmi.n	80193e2 <_vfiprintf_r+0x32>
 80193d6:	89ab      	ldrh	r3, [r5, #12]
 80193d8:	059a      	lsls	r2, r3, #22
 80193da:	d402      	bmi.n	80193e2 <_vfiprintf_r+0x32>
 80193dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80193de:	f7fe fe0c 	bl	8017ffa <__retarget_lock_acquire_recursive>
 80193e2:	89ab      	ldrh	r3, [r5, #12]
 80193e4:	071b      	lsls	r3, r3, #28
 80193e6:	d501      	bpl.n	80193ec <_vfiprintf_r+0x3c>
 80193e8:	692b      	ldr	r3, [r5, #16]
 80193ea:	b9eb      	cbnz	r3, 8019428 <_vfiprintf_r+0x78>
 80193ec:	4629      	mov	r1, r5
 80193ee:	4630      	mov	r0, r6
 80193f0:	f7ff fa68 	bl	80188c4 <__swsetup_r>
 80193f4:	b1c0      	cbz	r0, 8019428 <_vfiprintf_r+0x78>
 80193f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80193f8:	07dc      	lsls	r4, r3, #31
 80193fa:	d50e      	bpl.n	801941a <_vfiprintf_r+0x6a>
 80193fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019400:	b01d      	add	sp, #116	; 0x74
 8019402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019406:	4b7b      	ldr	r3, [pc, #492]	; (80195f4 <_vfiprintf_r+0x244>)
 8019408:	429d      	cmp	r5, r3
 801940a:	d101      	bne.n	8019410 <_vfiprintf_r+0x60>
 801940c:	68b5      	ldr	r5, [r6, #8]
 801940e:	e7df      	b.n	80193d0 <_vfiprintf_r+0x20>
 8019410:	4b79      	ldr	r3, [pc, #484]	; (80195f8 <_vfiprintf_r+0x248>)
 8019412:	429d      	cmp	r5, r3
 8019414:	bf08      	it	eq
 8019416:	68f5      	ldreq	r5, [r6, #12]
 8019418:	e7da      	b.n	80193d0 <_vfiprintf_r+0x20>
 801941a:	89ab      	ldrh	r3, [r5, #12]
 801941c:	0598      	lsls	r0, r3, #22
 801941e:	d4ed      	bmi.n	80193fc <_vfiprintf_r+0x4c>
 8019420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019422:	f7fe fdeb 	bl	8017ffc <__retarget_lock_release_recursive>
 8019426:	e7e9      	b.n	80193fc <_vfiprintf_r+0x4c>
 8019428:	2300      	movs	r3, #0
 801942a:	9309      	str	r3, [sp, #36]	; 0x24
 801942c:	2320      	movs	r3, #32
 801942e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019432:	f8cd 800c 	str.w	r8, [sp, #12]
 8019436:	2330      	movs	r3, #48	; 0x30
 8019438:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80195fc <_vfiprintf_r+0x24c>
 801943c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019440:	f04f 0901 	mov.w	r9, #1
 8019444:	4623      	mov	r3, r4
 8019446:	469a      	mov	sl, r3
 8019448:	f813 2b01 	ldrb.w	r2, [r3], #1
 801944c:	b10a      	cbz	r2, 8019452 <_vfiprintf_r+0xa2>
 801944e:	2a25      	cmp	r2, #37	; 0x25
 8019450:	d1f9      	bne.n	8019446 <_vfiprintf_r+0x96>
 8019452:	ebba 0b04 	subs.w	fp, sl, r4
 8019456:	d00b      	beq.n	8019470 <_vfiprintf_r+0xc0>
 8019458:	465b      	mov	r3, fp
 801945a:	4622      	mov	r2, r4
 801945c:	4629      	mov	r1, r5
 801945e:	4630      	mov	r0, r6
 8019460:	f7ff ff93 	bl	801938a <__sfputs_r>
 8019464:	3001      	adds	r0, #1
 8019466:	f000 80aa 	beq.w	80195be <_vfiprintf_r+0x20e>
 801946a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801946c:	445a      	add	r2, fp
 801946e:	9209      	str	r2, [sp, #36]	; 0x24
 8019470:	f89a 3000 	ldrb.w	r3, [sl]
 8019474:	2b00      	cmp	r3, #0
 8019476:	f000 80a2 	beq.w	80195be <_vfiprintf_r+0x20e>
 801947a:	2300      	movs	r3, #0
 801947c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019480:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019484:	f10a 0a01 	add.w	sl, sl, #1
 8019488:	9304      	str	r3, [sp, #16]
 801948a:	9307      	str	r3, [sp, #28]
 801948c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019490:	931a      	str	r3, [sp, #104]	; 0x68
 8019492:	4654      	mov	r4, sl
 8019494:	2205      	movs	r2, #5
 8019496:	f814 1b01 	ldrb.w	r1, [r4], #1
 801949a:	4858      	ldr	r0, [pc, #352]	; (80195fc <_vfiprintf_r+0x24c>)
 801949c:	f7e6 fee8 	bl	8000270 <memchr>
 80194a0:	9a04      	ldr	r2, [sp, #16]
 80194a2:	b9d8      	cbnz	r0, 80194dc <_vfiprintf_r+0x12c>
 80194a4:	06d1      	lsls	r1, r2, #27
 80194a6:	bf44      	itt	mi
 80194a8:	2320      	movmi	r3, #32
 80194aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80194ae:	0713      	lsls	r3, r2, #28
 80194b0:	bf44      	itt	mi
 80194b2:	232b      	movmi	r3, #43	; 0x2b
 80194b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80194b8:	f89a 3000 	ldrb.w	r3, [sl]
 80194bc:	2b2a      	cmp	r3, #42	; 0x2a
 80194be:	d015      	beq.n	80194ec <_vfiprintf_r+0x13c>
 80194c0:	9a07      	ldr	r2, [sp, #28]
 80194c2:	4654      	mov	r4, sl
 80194c4:	2000      	movs	r0, #0
 80194c6:	f04f 0c0a 	mov.w	ip, #10
 80194ca:	4621      	mov	r1, r4
 80194cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80194d0:	3b30      	subs	r3, #48	; 0x30
 80194d2:	2b09      	cmp	r3, #9
 80194d4:	d94e      	bls.n	8019574 <_vfiprintf_r+0x1c4>
 80194d6:	b1b0      	cbz	r0, 8019506 <_vfiprintf_r+0x156>
 80194d8:	9207      	str	r2, [sp, #28]
 80194da:	e014      	b.n	8019506 <_vfiprintf_r+0x156>
 80194dc:	eba0 0308 	sub.w	r3, r0, r8
 80194e0:	fa09 f303 	lsl.w	r3, r9, r3
 80194e4:	4313      	orrs	r3, r2
 80194e6:	9304      	str	r3, [sp, #16]
 80194e8:	46a2      	mov	sl, r4
 80194ea:	e7d2      	b.n	8019492 <_vfiprintf_r+0xe2>
 80194ec:	9b03      	ldr	r3, [sp, #12]
 80194ee:	1d19      	adds	r1, r3, #4
 80194f0:	681b      	ldr	r3, [r3, #0]
 80194f2:	9103      	str	r1, [sp, #12]
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	bfbb      	ittet	lt
 80194f8:	425b      	neglt	r3, r3
 80194fa:	f042 0202 	orrlt.w	r2, r2, #2
 80194fe:	9307      	strge	r3, [sp, #28]
 8019500:	9307      	strlt	r3, [sp, #28]
 8019502:	bfb8      	it	lt
 8019504:	9204      	strlt	r2, [sp, #16]
 8019506:	7823      	ldrb	r3, [r4, #0]
 8019508:	2b2e      	cmp	r3, #46	; 0x2e
 801950a:	d10c      	bne.n	8019526 <_vfiprintf_r+0x176>
 801950c:	7863      	ldrb	r3, [r4, #1]
 801950e:	2b2a      	cmp	r3, #42	; 0x2a
 8019510:	d135      	bne.n	801957e <_vfiprintf_r+0x1ce>
 8019512:	9b03      	ldr	r3, [sp, #12]
 8019514:	1d1a      	adds	r2, r3, #4
 8019516:	681b      	ldr	r3, [r3, #0]
 8019518:	9203      	str	r2, [sp, #12]
 801951a:	2b00      	cmp	r3, #0
 801951c:	bfb8      	it	lt
 801951e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8019522:	3402      	adds	r4, #2
 8019524:	9305      	str	r3, [sp, #20]
 8019526:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801960c <_vfiprintf_r+0x25c>
 801952a:	7821      	ldrb	r1, [r4, #0]
 801952c:	2203      	movs	r2, #3
 801952e:	4650      	mov	r0, sl
 8019530:	f7e6 fe9e 	bl	8000270 <memchr>
 8019534:	b140      	cbz	r0, 8019548 <_vfiprintf_r+0x198>
 8019536:	2340      	movs	r3, #64	; 0x40
 8019538:	eba0 000a 	sub.w	r0, r0, sl
 801953c:	fa03 f000 	lsl.w	r0, r3, r0
 8019540:	9b04      	ldr	r3, [sp, #16]
 8019542:	4303      	orrs	r3, r0
 8019544:	3401      	adds	r4, #1
 8019546:	9304      	str	r3, [sp, #16]
 8019548:	f814 1b01 	ldrb.w	r1, [r4], #1
 801954c:	482c      	ldr	r0, [pc, #176]	; (8019600 <_vfiprintf_r+0x250>)
 801954e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019552:	2206      	movs	r2, #6
 8019554:	f7e6 fe8c 	bl	8000270 <memchr>
 8019558:	2800      	cmp	r0, #0
 801955a:	d03f      	beq.n	80195dc <_vfiprintf_r+0x22c>
 801955c:	4b29      	ldr	r3, [pc, #164]	; (8019604 <_vfiprintf_r+0x254>)
 801955e:	bb1b      	cbnz	r3, 80195a8 <_vfiprintf_r+0x1f8>
 8019560:	9b03      	ldr	r3, [sp, #12]
 8019562:	3307      	adds	r3, #7
 8019564:	f023 0307 	bic.w	r3, r3, #7
 8019568:	3308      	adds	r3, #8
 801956a:	9303      	str	r3, [sp, #12]
 801956c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801956e:	443b      	add	r3, r7
 8019570:	9309      	str	r3, [sp, #36]	; 0x24
 8019572:	e767      	b.n	8019444 <_vfiprintf_r+0x94>
 8019574:	fb0c 3202 	mla	r2, ip, r2, r3
 8019578:	460c      	mov	r4, r1
 801957a:	2001      	movs	r0, #1
 801957c:	e7a5      	b.n	80194ca <_vfiprintf_r+0x11a>
 801957e:	2300      	movs	r3, #0
 8019580:	3401      	adds	r4, #1
 8019582:	9305      	str	r3, [sp, #20]
 8019584:	4619      	mov	r1, r3
 8019586:	f04f 0c0a 	mov.w	ip, #10
 801958a:	4620      	mov	r0, r4
 801958c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019590:	3a30      	subs	r2, #48	; 0x30
 8019592:	2a09      	cmp	r2, #9
 8019594:	d903      	bls.n	801959e <_vfiprintf_r+0x1ee>
 8019596:	2b00      	cmp	r3, #0
 8019598:	d0c5      	beq.n	8019526 <_vfiprintf_r+0x176>
 801959a:	9105      	str	r1, [sp, #20]
 801959c:	e7c3      	b.n	8019526 <_vfiprintf_r+0x176>
 801959e:	fb0c 2101 	mla	r1, ip, r1, r2
 80195a2:	4604      	mov	r4, r0
 80195a4:	2301      	movs	r3, #1
 80195a6:	e7f0      	b.n	801958a <_vfiprintf_r+0x1da>
 80195a8:	ab03      	add	r3, sp, #12
 80195aa:	9300      	str	r3, [sp, #0]
 80195ac:	462a      	mov	r2, r5
 80195ae:	4b16      	ldr	r3, [pc, #88]	; (8019608 <_vfiprintf_r+0x258>)
 80195b0:	a904      	add	r1, sp, #16
 80195b2:	4630      	mov	r0, r6
 80195b4:	f3af 8000 	nop.w
 80195b8:	4607      	mov	r7, r0
 80195ba:	1c78      	adds	r0, r7, #1
 80195bc:	d1d6      	bne.n	801956c <_vfiprintf_r+0x1bc>
 80195be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80195c0:	07d9      	lsls	r1, r3, #31
 80195c2:	d405      	bmi.n	80195d0 <_vfiprintf_r+0x220>
 80195c4:	89ab      	ldrh	r3, [r5, #12]
 80195c6:	059a      	lsls	r2, r3, #22
 80195c8:	d402      	bmi.n	80195d0 <_vfiprintf_r+0x220>
 80195ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80195cc:	f7fe fd16 	bl	8017ffc <__retarget_lock_release_recursive>
 80195d0:	89ab      	ldrh	r3, [r5, #12]
 80195d2:	065b      	lsls	r3, r3, #25
 80195d4:	f53f af12 	bmi.w	80193fc <_vfiprintf_r+0x4c>
 80195d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80195da:	e711      	b.n	8019400 <_vfiprintf_r+0x50>
 80195dc:	ab03      	add	r3, sp, #12
 80195de:	9300      	str	r3, [sp, #0]
 80195e0:	462a      	mov	r2, r5
 80195e2:	4b09      	ldr	r3, [pc, #36]	; (8019608 <_vfiprintf_r+0x258>)
 80195e4:	a904      	add	r1, sp, #16
 80195e6:	4630      	mov	r0, r6
 80195e8:	f000 f880 	bl	80196ec <_printf_i>
 80195ec:	e7e4      	b.n	80195b8 <_vfiprintf_r+0x208>
 80195ee:	bf00      	nop
 80195f0:	08021660 	.word	0x08021660
 80195f4:	08021680 	.word	0x08021680
 80195f8:	08021640 	.word	0x08021640
 80195fc:	08021756 	.word	0x08021756
 8019600:	08021760 	.word	0x08021760
 8019604:	00000000 	.word	0x00000000
 8019608:	0801938b 	.word	0x0801938b
 801960c:	0802175c 	.word	0x0802175c

08019610 <_printf_common>:
 8019610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019614:	4616      	mov	r6, r2
 8019616:	4699      	mov	r9, r3
 8019618:	688a      	ldr	r2, [r1, #8]
 801961a:	690b      	ldr	r3, [r1, #16]
 801961c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019620:	4293      	cmp	r3, r2
 8019622:	bfb8      	it	lt
 8019624:	4613      	movlt	r3, r2
 8019626:	6033      	str	r3, [r6, #0]
 8019628:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801962c:	4607      	mov	r7, r0
 801962e:	460c      	mov	r4, r1
 8019630:	b10a      	cbz	r2, 8019636 <_printf_common+0x26>
 8019632:	3301      	adds	r3, #1
 8019634:	6033      	str	r3, [r6, #0]
 8019636:	6823      	ldr	r3, [r4, #0]
 8019638:	0699      	lsls	r1, r3, #26
 801963a:	bf42      	ittt	mi
 801963c:	6833      	ldrmi	r3, [r6, #0]
 801963e:	3302      	addmi	r3, #2
 8019640:	6033      	strmi	r3, [r6, #0]
 8019642:	6825      	ldr	r5, [r4, #0]
 8019644:	f015 0506 	ands.w	r5, r5, #6
 8019648:	d106      	bne.n	8019658 <_printf_common+0x48>
 801964a:	f104 0a19 	add.w	sl, r4, #25
 801964e:	68e3      	ldr	r3, [r4, #12]
 8019650:	6832      	ldr	r2, [r6, #0]
 8019652:	1a9b      	subs	r3, r3, r2
 8019654:	42ab      	cmp	r3, r5
 8019656:	dc26      	bgt.n	80196a6 <_printf_common+0x96>
 8019658:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801965c:	1e13      	subs	r3, r2, #0
 801965e:	6822      	ldr	r2, [r4, #0]
 8019660:	bf18      	it	ne
 8019662:	2301      	movne	r3, #1
 8019664:	0692      	lsls	r2, r2, #26
 8019666:	d42b      	bmi.n	80196c0 <_printf_common+0xb0>
 8019668:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801966c:	4649      	mov	r1, r9
 801966e:	4638      	mov	r0, r7
 8019670:	47c0      	blx	r8
 8019672:	3001      	adds	r0, #1
 8019674:	d01e      	beq.n	80196b4 <_printf_common+0xa4>
 8019676:	6823      	ldr	r3, [r4, #0]
 8019678:	68e5      	ldr	r5, [r4, #12]
 801967a:	6832      	ldr	r2, [r6, #0]
 801967c:	f003 0306 	and.w	r3, r3, #6
 8019680:	2b04      	cmp	r3, #4
 8019682:	bf08      	it	eq
 8019684:	1aad      	subeq	r5, r5, r2
 8019686:	68a3      	ldr	r3, [r4, #8]
 8019688:	6922      	ldr	r2, [r4, #16]
 801968a:	bf0c      	ite	eq
 801968c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019690:	2500      	movne	r5, #0
 8019692:	4293      	cmp	r3, r2
 8019694:	bfc4      	itt	gt
 8019696:	1a9b      	subgt	r3, r3, r2
 8019698:	18ed      	addgt	r5, r5, r3
 801969a:	2600      	movs	r6, #0
 801969c:	341a      	adds	r4, #26
 801969e:	42b5      	cmp	r5, r6
 80196a0:	d11a      	bne.n	80196d8 <_printf_common+0xc8>
 80196a2:	2000      	movs	r0, #0
 80196a4:	e008      	b.n	80196b8 <_printf_common+0xa8>
 80196a6:	2301      	movs	r3, #1
 80196a8:	4652      	mov	r2, sl
 80196aa:	4649      	mov	r1, r9
 80196ac:	4638      	mov	r0, r7
 80196ae:	47c0      	blx	r8
 80196b0:	3001      	adds	r0, #1
 80196b2:	d103      	bne.n	80196bc <_printf_common+0xac>
 80196b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80196b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80196bc:	3501      	adds	r5, #1
 80196be:	e7c6      	b.n	801964e <_printf_common+0x3e>
 80196c0:	18e1      	adds	r1, r4, r3
 80196c2:	1c5a      	adds	r2, r3, #1
 80196c4:	2030      	movs	r0, #48	; 0x30
 80196c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80196ca:	4422      	add	r2, r4
 80196cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80196d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80196d4:	3302      	adds	r3, #2
 80196d6:	e7c7      	b.n	8019668 <_printf_common+0x58>
 80196d8:	2301      	movs	r3, #1
 80196da:	4622      	mov	r2, r4
 80196dc:	4649      	mov	r1, r9
 80196de:	4638      	mov	r0, r7
 80196e0:	47c0      	blx	r8
 80196e2:	3001      	adds	r0, #1
 80196e4:	d0e6      	beq.n	80196b4 <_printf_common+0xa4>
 80196e6:	3601      	adds	r6, #1
 80196e8:	e7d9      	b.n	801969e <_printf_common+0x8e>
	...

080196ec <_printf_i>:
 80196ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80196f0:	460c      	mov	r4, r1
 80196f2:	4691      	mov	r9, r2
 80196f4:	7e27      	ldrb	r7, [r4, #24]
 80196f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80196f8:	2f78      	cmp	r7, #120	; 0x78
 80196fa:	4680      	mov	r8, r0
 80196fc:	469a      	mov	sl, r3
 80196fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019702:	d807      	bhi.n	8019714 <_printf_i+0x28>
 8019704:	2f62      	cmp	r7, #98	; 0x62
 8019706:	d80a      	bhi.n	801971e <_printf_i+0x32>
 8019708:	2f00      	cmp	r7, #0
 801970a:	f000 80d8 	beq.w	80198be <_printf_i+0x1d2>
 801970e:	2f58      	cmp	r7, #88	; 0x58
 8019710:	f000 80a3 	beq.w	801985a <_printf_i+0x16e>
 8019714:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019718:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801971c:	e03a      	b.n	8019794 <_printf_i+0xa8>
 801971e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019722:	2b15      	cmp	r3, #21
 8019724:	d8f6      	bhi.n	8019714 <_printf_i+0x28>
 8019726:	a001      	add	r0, pc, #4	; (adr r0, 801972c <_printf_i+0x40>)
 8019728:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801972c:	08019785 	.word	0x08019785
 8019730:	08019799 	.word	0x08019799
 8019734:	08019715 	.word	0x08019715
 8019738:	08019715 	.word	0x08019715
 801973c:	08019715 	.word	0x08019715
 8019740:	08019715 	.word	0x08019715
 8019744:	08019799 	.word	0x08019799
 8019748:	08019715 	.word	0x08019715
 801974c:	08019715 	.word	0x08019715
 8019750:	08019715 	.word	0x08019715
 8019754:	08019715 	.word	0x08019715
 8019758:	080198a5 	.word	0x080198a5
 801975c:	080197c9 	.word	0x080197c9
 8019760:	08019887 	.word	0x08019887
 8019764:	08019715 	.word	0x08019715
 8019768:	08019715 	.word	0x08019715
 801976c:	080198c7 	.word	0x080198c7
 8019770:	08019715 	.word	0x08019715
 8019774:	080197c9 	.word	0x080197c9
 8019778:	08019715 	.word	0x08019715
 801977c:	08019715 	.word	0x08019715
 8019780:	0801988f 	.word	0x0801988f
 8019784:	680b      	ldr	r3, [r1, #0]
 8019786:	1d1a      	adds	r2, r3, #4
 8019788:	681b      	ldr	r3, [r3, #0]
 801978a:	600a      	str	r2, [r1, #0]
 801978c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019790:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019794:	2301      	movs	r3, #1
 8019796:	e0a3      	b.n	80198e0 <_printf_i+0x1f4>
 8019798:	6825      	ldr	r5, [r4, #0]
 801979a:	6808      	ldr	r0, [r1, #0]
 801979c:	062e      	lsls	r6, r5, #24
 801979e:	f100 0304 	add.w	r3, r0, #4
 80197a2:	d50a      	bpl.n	80197ba <_printf_i+0xce>
 80197a4:	6805      	ldr	r5, [r0, #0]
 80197a6:	600b      	str	r3, [r1, #0]
 80197a8:	2d00      	cmp	r5, #0
 80197aa:	da03      	bge.n	80197b4 <_printf_i+0xc8>
 80197ac:	232d      	movs	r3, #45	; 0x2d
 80197ae:	426d      	negs	r5, r5
 80197b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80197b4:	485e      	ldr	r0, [pc, #376]	; (8019930 <_printf_i+0x244>)
 80197b6:	230a      	movs	r3, #10
 80197b8:	e019      	b.n	80197ee <_printf_i+0x102>
 80197ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 80197be:	6805      	ldr	r5, [r0, #0]
 80197c0:	600b      	str	r3, [r1, #0]
 80197c2:	bf18      	it	ne
 80197c4:	b22d      	sxthne	r5, r5
 80197c6:	e7ef      	b.n	80197a8 <_printf_i+0xbc>
 80197c8:	680b      	ldr	r3, [r1, #0]
 80197ca:	6825      	ldr	r5, [r4, #0]
 80197cc:	1d18      	adds	r0, r3, #4
 80197ce:	6008      	str	r0, [r1, #0]
 80197d0:	0628      	lsls	r0, r5, #24
 80197d2:	d501      	bpl.n	80197d8 <_printf_i+0xec>
 80197d4:	681d      	ldr	r5, [r3, #0]
 80197d6:	e002      	b.n	80197de <_printf_i+0xf2>
 80197d8:	0669      	lsls	r1, r5, #25
 80197da:	d5fb      	bpl.n	80197d4 <_printf_i+0xe8>
 80197dc:	881d      	ldrh	r5, [r3, #0]
 80197de:	4854      	ldr	r0, [pc, #336]	; (8019930 <_printf_i+0x244>)
 80197e0:	2f6f      	cmp	r7, #111	; 0x6f
 80197e2:	bf0c      	ite	eq
 80197e4:	2308      	moveq	r3, #8
 80197e6:	230a      	movne	r3, #10
 80197e8:	2100      	movs	r1, #0
 80197ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80197ee:	6866      	ldr	r6, [r4, #4]
 80197f0:	60a6      	str	r6, [r4, #8]
 80197f2:	2e00      	cmp	r6, #0
 80197f4:	bfa2      	ittt	ge
 80197f6:	6821      	ldrge	r1, [r4, #0]
 80197f8:	f021 0104 	bicge.w	r1, r1, #4
 80197fc:	6021      	strge	r1, [r4, #0]
 80197fe:	b90d      	cbnz	r5, 8019804 <_printf_i+0x118>
 8019800:	2e00      	cmp	r6, #0
 8019802:	d04d      	beq.n	80198a0 <_printf_i+0x1b4>
 8019804:	4616      	mov	r6, r2
 8019806:	fbb5 f1f3 	udiv	r1, r5, r3
 801980a:	fb03 5711 	mls	r7, r3, r1, r5
 801980e:	5dc7      	ldrb	r7, [r0, r7]
 8019810:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019814:	462f      	mov	r7, r5
 8019816:	42bb      	cmp	r3, r7
 8019818:	460d      	mov	r5, r1
 801981a:	d9f4      	bls.n	8019806 <_printf_i+0x11a>
 801981c:	2b08      	cmp	r3, #8
 801981e:	d10b      	bne.n	8019838 <_printf_i+0x14c>
 8019820:	6823      	ldr	r3, [r4, #0]
 8019822:	07df      	lsls	r7, r3, #31
 8019824:	d508      	bpl.n	8019838 <_printf_i+0x14c>
 8019826:	6923      	ldr	r3, [r4, #16]
 8019828:	6861      	ldr	r1, [r4, #4]
 801982a:	4299      	cmp	r1, r3
 801982c:	bfde      	ittt	le
 801982e:	2330      	movle	r3, #48	; 0x30
 8019830:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019834:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8019838:	1b92      	subs	r2, r2, r6
 801983a:	6122      	str	r2, [r4, #16]
 801983c:	f8cd a000 	str.w	sl, [sp]
 8019840:	464b      	mov	r3, r9
 8019842:	aa03      	add	r2, sp, #12
 8019844:	4621      	mov	r1, r4
 8019846:	4640      	mov	r0, r8
 8019848:	f7ff fee2 	bl	8019610 <_printf_common>
 801984c:	3001      	adds	r0, #1
 801984e:	d14c      	bne.n	80198ea <_printf_i+0x1fe>
 8019850:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019854:	b004      	add	sp, #16
 8019856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801985a:	4835      	ldr	r0, [pc, #212]	; (8019930 <_printf_i+0x244>)
 801985c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019860:	6823      	ldr	r3, [r4, #0]
 8019862:	680e      	ldr	r6, [r1, #0]
 8019864:	061f      	lsls	r7, r3, #24
 8019866:	f856 5b04 	ldr.w	r5, [r6], #4
 801986a:	600e      	str	r6, [r1, #0]
 801986c:	d514      	bpl.n	8019898 <_printf_i+0x1ac>
 801986e:	07d9      	lsls	r1, r3, #31
 8019870:	bf44      	itt	mi
 8019872:	f043 0320 	orrmi.w	r3, r3, #32
 8019876:	6023      	strmi	r3, [r4, #0]
 8019878:	b91d      	cbnz	r5, 8019882 <_printf_i+0x196>
 801987a:	6823      	ldr	r3, [r4, #0]
 801987c:	f023 0320 	bic.w	r3, r3, #32
 8019880:	6023      	str	r3, [r4, #0]
 8019882:	2310      	movs	r3, #16
 8019884:	e7b0      	b.n	80197e8 <_printf_i+0xfc>
 8019886:	6823      	ldr	r3, [r4, #0]
 8019888:	f043 0320 	orr.w	r3, r3, #32
 801988c:	6023      	str	r3, [r4, #0]
 801988e:	2378      	movs	r3, #120	; 0x78
 8019890:	4828      	ldr	r0, [pc, #160]	; (8019934 <_printf_i+0x248>)
 8019892:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019896:	e7e3      	b.n	8019860 <_printf_i+0x174>
 8019898:	065e      	lsls	r6, r3, #25
 801989a:	bf48      	it	mi
 801989c:	b2ad      	uxthmi	r5, r5
 801989e:	e7e6      	b.n	801986e <_printf_i+0x182>
 80198a0:	4616      	mov	r6, r2
 80198a2:	e7bb      	b.n	801981c <_printf_i+0x130>
 80198a4:	680b      	ldr	r3, [r1, #0]
 80198a6:	6826      	ldr	r6, [r4, #0]
 80198a8:	6960      	ldr	r0, [r4, #20]
 80198aa:	1d1d      	adds	r5, r3, #4
 80198ac:	600d      	str	r5, [r1, #0]
 80198ae:	0635      	lsls	r5, r6, #24
 80198b0:	681b      	ldr	r3, [r3, #0]
 80198b2:	d501      	bpl.n	80198b8 <_printf_i+0x1cc>
 80198b4:	6018      	str	r0, [r3, #0]
 80198b6:	e002      	b.n	80198be <_printf_i+0x1d2>
 80198b8:	0671      	lsls	r1, r6, #25
 80198ba:	d5fb      	bpl.n	80198b4 <_printf_i+0x1c8>
 80198bc:	8018      	strh	r0, [r3, #0]
 80198be:	2300      	movs	r3, #0
 80198c0:	6123      	str	r3, [r4, #16]
 80198c2:	4616      	mov	r6, r2
 80198c4:	e7ba      	b.n	801983c <_printf_i+0x150>
 80198c6:	680b      	ldr	r3, [r1, #0]
 80198c8:	1d1a      	adds	r2, r3, #4
 80198ca:	600a      	str	r2, [r1, #0]
 80198cc:	681e      	ldr	r6, [r3, #0]
 80198ce:	6862      	ldr	r2, [r4, #4]
 80198d0:	2100      	movs	r1, #0
 80198d2:	4630      	mov	r0, r6
 80198d4:	f7e6 fccc 	bl	8000270 <memchr>
 80198d8:	b108      	cbz	r0, 80198de <_printf_i+0x1f2>
 80198da:	1b80      	subs	r0, r0, r6
 80198dc:	6060      	str	r0, [r4, #4]
 80198de:	6863      	ldr	r3, [r4, #4]
 80198e0:	6123      	str	r3, [r4, #16]
 80198e2:	2300      	movs	r3, #0
 80198e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80198e8:	e7a8      	b.n	801983c <_printf_i+0x150>
 80198ea:	6923      	ldr	r3, [r4, #16]
 80198ec:	4632      	mov	r2, r6
 80198ee:	4649      	mov	r1, r9
 80198f0:	4640      	mov	r0, r8
 80198f2:	47d0      	blx	sl
 80198f4:	3001      	adds	r0, #1
 80198f6:	d0ab      	beq.n	8019850 <_printf_i+0x164>
 80198f8:	6823      	ldr	r3, [r4, #0]
 80198fa:	079b      	lsls	r3, r3, #30
 80198fc:	d413      	bmi.n	8019926 <_printf_i+0x23a>
 80198fe:	68e0      	ldr	r0, [r4, #12]
 8019900:	9b03      	ldr	r3, [sp, #12]
 8019902:	4298      	cmp	r0, r3
 8019904:	bfb8      	it	lt
 8019906:	4618      	movlt	r0, r3
 8019908:	e7a4      	b.n	8019854 <_printf_i+0x168>
 801990a:	2301      	movs	r3, #1
 801990c:	4632      	mov	r2, r6
 801990e:	4649      	mov	r1, r9
 8019910:	4640      	mov	r0, r8
 8019912:	47d0      	blx	sl
 8019914:	3001      	adds	r0, #1
 8019916:	d09b      	beq.n	8019850 <_printf_i+0x164>
 8019918:	3501      	adds	r5, #1
 801991a:	68e3      	ldr	r3, [r4, #12]
 801991c:	9903      	ldr	r1, [sp, #12]
 801991e:	1a5b      	subs	r3, r3, r1
 8019920:	42ab      	cmp	r3, r5
 8019922:	dcf2      	bgt.n	801990a <_printf_i+0x21e>
 8019924:	e7eb      	b.n	80198fe <_printf_i+0x212>
 8019926:	2500      	movs	r5, #0
 8019928:	f104 0619 	add.w	r6, r4, #25
 801992c:	e7f5      	b.n	801991a <_printf_i+0x22e>
 801992e:	bf00      	nop
 8019930:	08021767 	.word	0x08021767
 8019934:	08021778 	.word	0x08021778

08019938 <_scanf_chars>:
 8019938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801993c:	4615      	mov	r5, r2
 801993e:	688a      	ldr	r2, [r1, #8]
 8019940:	4680      	mov	r8, r0
 8019942:	460c      	mov	r4, r1
 8019944:	b932      	cbnz	r2, 8019954 <_scanf_chars+0x1c>
 8019946:	698a      	ldr	r2, [r1, #24]
 8019948:	2a00      	cmp	r2, #0
 801994a:	bf0c      	ite	eq
 801994c:	2201      	moveq	r2, #1
 801994e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8019952:	608a      	str	r2, [r1, #8]
 8019954:	6822      	ldr	r2, [r4, #0]
 8019956:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80199e4 <_scanf_chars+0xac>
 801995a:	06d1      	lsls	r1, r2, #27
 801995c:	bf5f      	itttt	pl
 801995e:	681a      	ldrpl	r2, [r3, #0]
 8019960:	1d11      	addpl	r1, r2, #4
 8019962:	6019      	strpl	r1, [r3, #0]
 8019964:	6816      	ldrpl	r6, [r2, #0]
 8019966:	2700      	movs	r7, #0
 8019968:	69a0      	ldr	r0, [r4, #24]
 801996a:	b188      	cbz	r0, 8019990 <_scanf_chars+0x58>
 801996c:	2801      	cmp	r0, #1
 801996e:	d107      	bne.n	8019980 <_scanf_chars+0x48>
 8019970:	682b      	ldr	r3, [r5, #0]
 8019972:	781a      	ldrb	r2, [r3, #0]
 8019974:	6963      	ldr	r3, [r4, #20]
 8019976:	5c9b      	ldrb	r3, [r3, r2]
 8019978:	b953      	cbnz	r3, 8019990 <_scanf_chars+0x58>
 801997a:	bb27      	cbnz	r7, 80199c6 <_scanf_chars+0x8e>
 801997c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019980:	2802      	cmp	r0, #2
 8019982:	d120      	bne.n	80199c6 <_scanf_chars+0x8e>
 8019984:	682b      	ldr	r3, [r5, #0]
 8019986:	781b      	ldrb	r3, [r3, #0]
 8019988:	f813 3009 	ldrb.w	r3, [r3, r9]
 801998c:	071b      	lsls	r3, r3, #28
 801998e:	d41a      	bmi.n	80199c6 <_scanf_chars+0x8e>
 8019990:	6823      	ldr	r3, [r4, #0]
 8019992:	06da      	lsls	r2, r3, #27
 8019994:	bf5e      	ittt	pl
 8019996:	682b      	ldrpl	r3, [r5, #0]
 8019998:	781b      	ldrbpl	r3, [r3, #0]
 801999a:	f806 3b01 	strbpl.w	r3, [r6], #1
 801999e:	682a      	ldr	r2, [r5, #0]
 80199a0:	686b      	ldr	r3, [r5, #4]
 80199a2:	3201      	adds	r2, #1
 80199a4:	602a      	str	r2, [r5, #0]
 80199a6:	68a2      	ldr	r2, [r4, #8]
 80199a8:	3b01      	subs	r3, #1
 80199aa:	3a01      	subs	r2, #1
 80199ac:	606b      	str	r3, [r5, #4]
 80199ae:	3701      	adds	r7, #1
 80199b0:	60a2      	str	r2, [r4, #8]
 80199b2:	b142      	cbz	r2, 80199c6 <_scanf_chars+0x8e>
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	dcd7      	bgt.n	8019968 <_scanf_chars+0x30>
 80199b8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80199bc:	4629      	mov	r1, r5
 80199be:	4640      	mov	r0, r8
 80199c0:	4798      	blx	r3
 80199c2:	2800      	cmp	r0, #0
 80199c4:	d0d0      	beq.n	8019968 <_scanf_chars+0x30>
 80199c6:	6823      	ldr	r3, [r4, #0]
 80199c8:	f013 0310 	ands.w	r3, r3, #16
 80199cc:	d105      	bne.n	80199da <_scanf_chars+0xa2>
 80199ce:	68e2      	ldr	r2, [r4, #12]
 80199d0:	3201      	adds	r2, #1
 80199d2:	60e2      	str	r2, [r4, #12]
 80199d4:	69a2      	ldr	r2, [r4, #24]
 80199d6:	b102      	cbz	r2, 80199da <_scanf_chars+0xa2>
 80199d8:	7033      	strb	r3, [r6, #0]
 80199da:	6923      	ldr	r3, [r4, #16]
 80199dc:	441f      	add	r7, r3
 80199de:	6127      	str	r7, [r4, #16]
 80199e0:	2000      	movs	r0, #0
 80199e2:	e7cb      	b.n	801997c <_scanf_chars+0x44>
 80199e4:	0802153d 	.word	0x0802153d

080199e8 <_scanf_i>:
 80199e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199ec:	4698      	mov	r8, r3
 80199ee:	4b74      	ldr	r3, [pc, #464]	; (8019bc0 <_scanf_i+0x1d8>)
 80199f0:	460c      	mov	r4, r1
 80199f2:	4682      	mov	sl, r0
 80199f4:	4616      	mov	r6, r2
 80199f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80199fa:	b087      	sub	sp, #28
 80199fc:	ab03      	add	r3, sp, #12
 80199fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019a02:	4b70      	ldr	r3, [pc, #448]	; (8019bc4 <_scanf_i+0x1dc>)
 8019a04:	69a1      	ldr	r1, [r4, #24]
 8019a06:	4a70      	ldr	r2, [pc, #448]	; (8019bc8 <_scanf_i+0x1e0>)
 8019a08:	2903      	cmp	r1, #3
 8019a0a:	bf18      	it	ne
 8019a0c:	461a      	movne	r2, r3
 8019a0e:	68a3      	ldr	r3, [r4, #8]
 8019a10:	9201      	str	r2, [sp, #4]
 8019a12:	1e5a      	subs	r2, r3, #1
 8019a14:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8019a18:	bf88      	it	hi
 8019a1a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019a1e:	4627      	mov	r7, r4
 8019a20:	bf82      	ittt	hi
 8019a22:	eb03 0905 	addhi.w	r9, r3, r5
 8019a26:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019a2a:	60a3      	strhi	r3, [r4, #8]
 8019a2c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8019a30:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8019a34:	bf98      	it	ls
 8019a36:	f04f 0900 	movls.w	r9, #0
 8019a3a:	6023      	str	r3, [r4, #0]
 8019a3c:	463d      	mov	r5, r7
 8019a3e:	f04f 0b00 	mov.w	fp, #0
 8019a42:	6831      	ldr	r1, [r6, #0]
 8019a44:	ab03      	add	r3, sp, #12
 8019a46:	7809      	ldrb	r1, [r1, #0]
 8019a48:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8019a4c:	2202      	movs	r2, #2
 8019a4e:	f7e6 fc0f 	bl	8000270 <memchr>
 8019a52:	b328      	cbz	r0, 8019aa0 <_scanf_i+0xb8>
 8019a54:	f1bb 0f01 	cmp.w	fp, #1
 8019a58:	d159      	bne.n	8019b0e <_scanf_i+0x126>
 8019a5a:	6862      	ldr	r2, [r4, #4]
 8019a5c:	b92a      	cbnz	r2, 8019a6a <_scanf_i+0x82>
 8019a5e:	6822      	ldr	r2, [r4, #0]
 8019a60:	2308      	movs	r3, #8
 8019a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019a66:	6063      	str	r3, [r4, #4]
 8019a68:	6022      	str	r2, [r4, #0]
 8019a6a:	6822      	ldr	r2, [r4, #0]
 8019a6c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019a70:	6022      	str	r2, [r4, #0]
 8019a72:	68a2      	ldr	r2, [r4, #8]
 8019a74:	1e51      	subs	r1, r2, #1
 8019a76:	60a1      	str	r1, [r4, #8]
 8019a78:	b192      	cbz	r2, 8019aa0 <_scanf_i+0xb8>
 8019a7a:	6832      	ldr	r2, [r6, #0]
 8019a7c:	1c51      	adds	r1, r2, #1
 8019a7e:	6031      	str	r1, [r6, #0]
 8019a80:	7812      	ldrb	r2, [r2, #0]
 8019a82:	f805 2b01 	strb.w	r2, [r5], #1
 8019a86:	6872      	ldr	r2, [r6, #4]
 8019a88:	3a01      	subs	r2, #1
 8019a8a:	2a00      	cmp	r2, #0
 8019a8c:	6072      	str	r2, [r6, #4]
 8019a8e:	dc07      	bgt.n	8019aa0 <_scanf_i+0xb8>
 8019a90:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8019a94:	4631      	mov	r1, r6
 8019a96:	4650      	mov	r0, sl
 8019a98:	4790      	blx	r2
 8019a9a:	2800      	cmp	r0, #0
 8019a9c:	f040 8085 	bne.w	8019baa <_scanf_i+0x1c2>
 8019aa0:	f10b 0b01 	add.w	fp, fp, #1
 8019aa4:	f1bb 0f03 	cmp.w	fp, #3
 8019aa8:	d1cb      	bne.n	8019a42 <_scanf_i+0x5a>
 8019aaa:	6863      	ldr	r3, [r4, #4]
 8019aac:	b90b      	cbnz	r3, 8019ab2 <_scanf_i+0xca>
 8019aae:	230a      	movs	r3, #10
 8019ab0:	6063      	str	r3, [r4, #4]
 8019ab2:	6863      	ldr	r3, [r4, #4]
 8019ab4:	4945      	ldr	r1, [pc, #276]	; (8019bcc <_scanf_i+0x1e4>)
 8019ab6:	6960      	ldr	r0, [r4, #20]
 8019ab8:	1ac9      	subs	r1, r1, r3
 8019aba:	f000 f89b 	bl	8019bf4 <__sccl>
 8019abe:	f04f 0b00 	mov.w	fp, #0
 8019ac2:	68a3      	ldr	r3, [r4, #8]
 8019ac4:	6822      	ldr	r2, [r4, #0]
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d03d      	beq.n	8019b46 <_scanf_i+0x15e>
 8019aca:	6831      	ldr	r1, [r6, #0]
 8019acc:	6960      	ldr	r0, [r4, #20]
 8019ace:	f891 c000 	ldrb.w	ip, [r1]
 8019ad2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8019ad6:	2800      	cmp	r0, #0
 8019ad8:	d035      	beq.n	8019b46 <_scanf_i+0x15e>
 8019ada:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8019ade:	d124      	bne.n	8019b2a <_scanf_i+0x142>
 8019ae0:	0510      	lsls	r0, r2, #20
 8019ae2:	d522      	bpl.n	8019b2a <_scanf_i+0x142>
 8019ae4:	f10b 0b01 	add.w	fp, fp, #1
 8019ae8:	f1b9 0f00 	cmp.w	r9, #0
 8019aec:	d003      	beq.n	8019af6 <_scanf_i+0x10e>
 8019aee:	3301      	adds	r3, #1
 8019af0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8019af4:	60a3      	str	r3, [r4, #8]
 8019af6:	6873      	ldr	r3, [r6, #4]
 8019af8:	3b01      	subs	r3, #1
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	6073      	str	r3, [r6, #4]
 8019afe:	dd1b      	ble.n	8019b38 <_scanf_i+0x150>
 8019b00:	6833      	ldr	r3, [r6, #0]
 8019b02:	3301      	adds	r3, #1
 8019b04:	6033      	str	r3, [r6, #0]
 8019b06:	68a3      	ldr	r3, [r4, #8]
 8019b08:	3b01      	subs	r3, #1
 8019b0a:	60a3      	str	r3, [r4, #8]
 8019b0c:	e7d9      	b.n	8019ac2 <_scanf_i+0xda>
 8019b0e:	f1bb 0f02 	cmp.w	fp, #2
 8019b12:	d1ae      	bne.n	8019a72 <_scanf_i+0x8a>
 8019b14:	6822      	ldr	r2, [r4, #0]
 8019b16:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019b1a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019b1e:	d1bf      	bne.n	8019aa0 <_scanf_i+0xb8>
 8019b20:	2310      	movs	r3, #16
 8019b22:	6063      	str	r3, [r4, #4]
 8019b24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019b28:	e7a2      	b.n	8019a70 <_scanf_i+0x88>
 8019b2a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019b2e:	6022      	str	r2, [r4, #0]
 8019b30:	780b      	ldrb	r3, [r1, #0]
 8019b32:	f805 3b01 	strb.w	r3, [r5], #1
 8019b36:	e7de      	b.n	8019af6 <_scanf_i+0x10e>
 8019b38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019b3c:	4631      	mov	r1, r6
 8019b3e:	4650      	mov	r0, sl
 8019b40:	4798      	blx	r3
 8019b42:	2800      	cmp	r0, #0
 8019b44:	d0df      	beq.n	8019b06 <_scanf_i+0x11e>
 8019b46:	6823      	ldr	r3, [r4, #0]
 8019b48:	05d9      	lsls	r1, r3, #23
 8019b4a:	d50d      	bpl.n	8019b68 <_scanf_i+0x180>
 8019b4c:	42bd      	cmp	r5, r7
 8019b4e:	d909      	bls.n	8019b64 <_scanf_i+0x17c>
 8019b50:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8019b54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019b58:	4632      	mov	r2, r6
 8019b5a:	4650      	mov	r0, sl
 8019b5c:	4798      	blx	r3
 8019b5e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8019b62:	464d      	mov	r5, r9
 8019b64:	42bd      	cmp	r5, r7
 8019b66:	d028      	beq.n	8019bba <_scanf_i+0x1d2>
 8019b68:	6822      	ldr	r2, [r4, #0]
 8019b6a:	f012 0210 	ands.w	r2, r2, #16
 8019b6e:	d113      	bne.n	8019b98 <_scanf_i+0x1b0>
 8019b70:	702a      	strb	r2, [r5, #0]
 8019b72:	6863      	ldr	r3, [r4, #4]
 8019b74:	9e01      	ldr	r6, [sp, #4]
 8019b76:	4639      	mov	r1, r7
 8019b78:	4650      	mov	r0, sl
 8019b7a:	47b0      	blx	r6
 8019b7c:	f8d8 3000 	ldr.w	r3, [r8]
 8019b80:	6821      	ldr	r1, [r4, #0]
 8019b82:	1d1a      	adds	r2, r3, #4
 8019b84:	f8c8 2000 	str.w	r2, [r8]
 8019b88:	f011 0f20 	tst.w	r1, #32
 8019b8c:	681b      	ldr	r3, [r3, #0]
 8019b8e:	d00f      	beq.n	8019bb0 <_scanf_i+0x1c8>
 8019b90:	6018      	str	r0, [r3, #0]
 8019b92:	68e3      	ldr	r3, [r4, #12]
 8019b94:	3301      	adds	r3, #1
 8019b96:	60e3      	str	r3, [r4, #12]
 8019b98:	1bed      	subs	r5, r5, r7
 8019b9a:	44ab      	add	fp, r5
 8019b9c:	6925      	ldr	r5, [r4, #16]
 8019b9e:	445d      	add	r5, fp
 8019ba0:	6125      	str	r5, [r4, #16]
 8019ba2:	2000      	movs	r0, #0
 8019ba4:	b007      	add	sp, #28
 8019ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019baa:	f04f 0b00 	mov.w	fp, #0
 8019bae:	e7ca      	b.n	8019b46 <_scanf_i+0x15e>
 8019bb0:	07ca      	lsls	r2, r1, #31
 8019bb2:	bf4c      	ite	mi
 8019bb4:	8018      	strhmi	r0, [r3, #0]
 8019bb6:	6018      	strpl	r0, [r3, #0]
 8019bb8:	e7eb      	b.n	8019b92 <_scanf_i+0x1aa>
 8019bba:	2001      	movs	r0, #1
 8019bbc:	e7f2      	b.n	8019ba4 <_scanf_i+0x1bc>
 8019bbe:	bf00      	nop
 8019bc0:	0801d64c 	.word	0x0801d64c
 8019bc4:	08019d61 	.word	0x08019d61
 8019bc8:	080187e5 	.word	0x080187e5
 8019bcc:	080217a2 	.word	0x080217a2

08019bd0 <_read_r>:
 8019bd0:	b538      	push	{r3, r4, r5, lr}
 8019bd2:	4d07      	ldr	r5, [pc, #28]	; (8019bf0 <_read_r+0x20>)
 8019bd4:	4604      	mov	r4, r0
 8019bd6:	4608      	mov	r0, r1
 8019bd8:	4611      	mov	r1, r2
 8019bda:	2200      	movs	r2, #0
 8019bdc:	602a      	str	r2, [r5, #0]
 8019bde:	461a      	mov	r2, r3
 8019be0:	f7e8 f93c 	bl	8001e5c <_read>
 8019be4:	1c43      	adds	r3, r0, #1
 8019be6:	d102      	bne.n	8019bee <_read_r+0x1e>
 8019be8:	682b      	ldr	r3, [r5, #0]
 8019bea:	b103      	cbz	r3, 8019bee <_read_r+0x1e>
 8019bec:	6023      	str	r3, [r4, #0]
 8019bee:	bd38      	pop	{r3, r4, r5, pc}
 8019bf0:	20018bc0 	.word	0x20018bc0

08019bf4 <__sccl>:
 8019bf4:	b570      	push	{r4, r5, r6, lr}
 8019bf6:	780b      	ldrb	r3, [r1, #0]
 8019bf8:	4604      	mov	r4, r0
 8019bfa:	2b5e      	cmp	r3, #94	; 0x5e
 8019bfc:	bf0b      	itete	eq
 8019bfe:	784b      	ldrbeq	r3, [r1, #1]
 8019c00:	1c48      	addne	r0, r1, #1
 8019c02:	1c88      	addeq	r0, r1, #2
 8019c04:	2200      	movne	r2, #0
 8019c06:	bf08      	it	eq
 8019c08:	2201      	moveq	r2, #1
 8019c0a:	1e61      	subs	r1, r4, #1
 8019c0c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8019c10:	f801 2f01 	strb.w	r2, [r1, #1]!
 8019c14:	42a9      	cmp	r1, r5
 8019c16:	d1fb      	bne.n	8019c10 <__sccl+0x1c>
 8019c18:	b90b      	cbnz	r3, 8019c1e <__sccl+0x2a>
 8019c1a:	3801      	subs	r0, #1
 8019c1c:	bd70      	pop	{r4, r5, r6, pc}
 8019c1e:	f082 0101 	eor.w	r1, r2, #1
 8019c22:	54e1      	strb	r1, [r4, r3]
 8019c24:	1c42      	adds	r2, r0, #1
 8019c26:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8019c2a:	2d2d      	cmp	r5, #45	; 0x2d
 8019c2c:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 8019c30:	4610      	mov	r0, r2
 8019c32:	d006      	beq.n	8019c42 <__sccl+0x4e>
 8019c34:	2d5d      	cmp	r5, #93	; 0x5d
 8019c36:	d0f1      	beq.n	8019c1c <__sccl+0x28>
 8019c38:	b90d      	cbnz	r5, 8019c3e <__sccl+0x4a>
 8019c3a:	4630      	mov	r0, r6
 8019c3c:	e7ee      	b.n	8019c1c <__sccl+0x28>
 8019c3e:	462b      	mov	r3, r5
 8019c40:	e7ef      	b.n	8019c22 <__sccl+0x2e>
 8019c42:	7816      	ldrb	r6, [r2, #0]
 8019c44:	2e5d      	cmp	r6, #93	; 0x5d
 8019c46:	d0fa      	beq.n	8019c3e <__sccl+0x4a>
 8019c48:	42b3      	cmp	r3, r6
 8019c4a:	dcf8      	bgt.n	8019c3e <__sccl+0x4a>
 8019c4c:	4618      	mov	r0, r3
 8019c4e:	3001      	adds	r0, #1
 8019c50:	4286      	cmp	r6, r0
 8019c52:	5421      	strb	r1, [r4, r0]
 8019c54:	dcfb      	bgt.n	8019c4e <__sccl+0x5a>
 8019c56:	43d8      	mvns	r0, r3
 8019c58:	4430      	add	r0, r6
 8019c5a:	1c5d      	adds	r5, r3, #1
 8019c5c:	42b3      	cmp	r3, r6
 8019c5e:	bfa8      	it	ge
 8019c60:	2000      	movge	r0, #0
 8019c62:	182b      	adds	r3, r5, r0
 8019c64:	3202      	adds	r2, #2
 8019c66:	e7de      	b.n	8019c26 <__sccl+0x32>

08019c68 <_strtoul_l.isra.0>:
 8019c68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019c6c:	4e3b      	ldr	r6, [pc, #236]	; (8019d5c <_strtoul_l.isra.0+0xf4>)
 8019c6e:	4686      	mov	lr, r0
 8019c70:	468c      	mov	ip, r1
 8019c72:	4660      	mov	r0, ip
 8019c74:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8019c78:	5da5      	ldrb	r5, [r4, r6]
 8019c7a:	f015 0508 	ands.w	r5, r5, #8
 8019c7e:	d1f8      	bne.n	8019c72 <_strtoul_l.isra.0+0xa>
 8019c80:	2c2d      	cmp	r4, #45	; 0x2d
 8019c82:	d134      	bne.n	8019cee <_strtoul_l.isra.0+0x86>
 8019c84:	f89c 4000 	ldrb.w	r4, [ip]
 8019c88:	f04f 0801 	mov.w	r8, #1
 8019c8c:	f100 0c02 	add.w	ip, r0, #2
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	d05e      	beq.n	8019d52 <_strtoul_l.isra.0+0xea>
 8019c94:	2b10      	cmp	r3, #16
 8019c96:	d10c      	bne.n	8019cb2 <_strtoul_l.isra.0+0x4a>
 8019c98:	2c30      	cmp	r4, #48	; 0x30
 8019c9a:	d10a      	bne.n	8019cb2 <_strtoul_l.isra.0+0x4a>
 8019c9c:	f89c 0000 	ldrb.w	r0, [ip]
 8019ca0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8019ca4:	2858      	cmp	r0, #88	; 0x58
 8019ca6:	d14f      	bne.n	8019d48 <_strtoul_l.isra.0+0xe0>
 8019ca8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8019cac:	2310      	movs	r3, #16
 8019cae:	f10c 0c02 	add.w	ip, ip, #2
 8019cb2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8019cb6:	2500      	movs	r5, #0
 8019cb8:	fbb7 f7f3 	udiv	r7, r7, r3
 8019cbc:	fb03 f907 	mul.w	r9, r3, r7
 8019cc0:	ea6f 0909 	mvn.w	r9, r9
 8019cc4:	4628      	mov	r0, r5
 8019cc6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8019cca:	2e09      	cmp	r6, #9
 8019ccc:	d818      	bhi.n	8019d00 <_strtoul_l.isra.0+0x98>
 8019cce:	4634      	mov	r4, r6
 8019cd0:	42a3      	cmp	r3, r4
 8019cd2:	dd24      	ble.n	8019d1e <_strtoul_l.isra.0+0xb6>
 8019cd4:	2d00      	cmp	r5, #0
 8019cd6:	db1f      	blt.n	8019d18 <_strtoul_l.isra.0+0xb0>
 8019cd8:	4287      	cmp	r7, r0
 8019cda:	d31d      	bcc.n	8019d18 <_strtoul_l.isra.0+0xb0>
 8019cdc:	d101      	bne.n	8019ce2 <_strtoul_l.isra.0+0x7a>
 8019cde:	45a1      	cmp	r9, r4
 8019ce0:	db1a      	blt.n	8019d18 <_strtoul_l.isra.0+0xb0>
 8019ce2:	fb00 4003 	mla	r0, r0, r3, r4
 8019ce6:	2501      	movs	r5, #1
 8019ce8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8019cec:	e7eb      	b.n	8019cc6 <_strtoul_l.isra.0+0x5e>
 8019cee:	2c2b      	cmp	r4, #43	; 0x2b
 8019cf0:	bf08      	it	eq
 8019cf2:	f89c 4000 	ldrbeq.w	r4, [ip]
 8019cf6:	46a8      	mov	r8, r5
 8019cf8:	bf08      	it	eq
 8019cfa:	f100 0c02 	addeq.w	ip, r0, #2
 8019cfe:	e7c7      	b.n	8019c90 <_strtoul_l.isra.0+0x28>
 8019d00:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8019d04:	2e19      	cmp	r6, #25
 8019d06:	d801      	bhi.n	8019d0c <_strtoul_l.isra.0+0xa4>
 8019d08:	3c37      	subs	r4, #55	; 0x37
 8019d0a:	e7e1      	b.n	8019cd0 <_strtoul_l.isra.0+0x68>
 8019d0c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8019d10:	2e19      	cmp	r6, #25
 8019d12:	d804      	bhi.n	8019d1e <_strtoul_l.isra.0+0xb6>
 8019d14:	3c57      	subs	r4, #87	; 0x57
 8019d16:	e7db      	b.n	8019cd0 <_strtoul_l.isra.0+0x68>
 8019d18:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8019d1c:	e7e4      	b.n	8019ce8 <_strtoul_l.isra.0+0x80>
 8019d1e:	2d00      	cmp	r5, #0
 8019d20:	da07      	bge.n	8019d32 <_strtoul_l.isra.0+0xca>
 8019d22:	2322      	movs	r3, #34	; 0x22
 8019d24:	f8ce 3000 	str.w	r3, [lr]
 8019d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019d2c:	b942      	cbnz	r2, 8019d40 <_strtoul_l.isra.0+0xd8>
 8019d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019d32:	f1b8 0f00 	cmp.w	r8, #0
 8019d36:	d000      	beq.n	8019d3a <_strtoul_l.isra.0+0xd2>
 8019d38:	4240      	negs	r0, r0
 8019d3a:	2a00      	cmp	r2, #0
 8019d3c:	d0f7      	beq.n	8019d2e <_strtoul_l.isra.0+0xc6>
 8019d3e:	b10d      	cbz	r5, 8019d44 <_strtoul_l.isra.0+0xdc>
 8019d40:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8019d44:	6011      	str	r1, [r2, #0]
 8019d46:	e7f2      	b.n	8019d2e <_strtoul_l.isra.0+0xc6>
 8019d48:	2430      	movs	r4, #48	; 0x30
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	d1b1      	bne.n	8019cb2 <_strtoul_l.isra.0+0x4a>
 8019d4e:	2308      	movs	r3, #8
 8019d50:	e7af      	b.n	8019cb2 <_strtoul_l.isra.0+0x4a>
 8019d52:	2c30      	cmp	r4, #48	; 0x30
 8019d54:	d0a2      	beq.n	8019c9c <_strtoul_l.isra.0+0x34>
 8019d56:	230a      	movs	r3, #10
 8019d58:	e7ab      	b.n	8019cb2 <_strtoul_l.isra.0+0x4a>
 8019d5a:	bf00      	nop
 8019d5c:	0802153d 	.word	0x0802153d

08019d60 <_strtoul_r>:
 8019d60:	f7ff bf82 	b.w	8019c68 <_strtoul_l.isra.0>

08019d64 <__submore>:
 8019d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d68:	460c      	mov	r4, r1
 8019d6a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019d6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019d70:	4299      	cmp	r1, r3
 8019d72:	d11d      	bne.n	8019db0 <__submore+0x4c>
 8019d74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019d78:	f7fe f9e0 	bl	801813c <_malloc_r>
 8019d7c:	b918      	cbnz	r0, 8019d86 <__submore+0x22>
 8019d7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019d8a:	63a3      	str	r3, [r4, #56]	; 0x38
 8019d8c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019d90:	6360      	str	r0, [r4, #52]	; 0x34
 8019d92:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8019d96:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019d9a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8019d9e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019da2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8019da6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019daa:	6020      	str	r0, [r4, #0]
 8019dac:	2000      	movs	r0, #0
 8019dae:	e7e8      	b.n	8019d82 <__submore+0x1e>
 8019db0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8019db2:	0077      	lsls	r7, r6, #1
 8019db4:	463a      	mov	r2, r7
 8019db6:	f7fe ff7d 	bl	8018cb4 <_realloc_r>
 8019dba:	4605      	mov	r5, r0
 8019dbc:	2800      	cmp	r0, #0
 8019dbe:	d0de      	beq.n	8019d7e <__submore+0x1a>
 8019dc0:	eb00 0806 	add.w	r8, r0, r6
 8019dc4:	4601      	mov	r1, r0
 8019dc6:	4632      	mov	r2, r6
 8019dc8:	4640      	mov	r0, r8
 8019dca:	f7fe f937 	bl	801803c <memcpy>
 8019dce:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019dd2:	f8c4 8000 	str.w	r8, [r4]
 8019dd6:	e7e9      	b.n	8019dac <__submore+0x48>

08019dd8 <abort>:
 8019dd8:	b508      	push	{r3, lr}
 8019dda:	2006      	movs	r0, #6
 8019ddc:	f000 f856 	bl	8019e8c <raise>
 8019de0:	2001      	movs	r0, #1
 8019de2:	f7e8 f831 	bl	8001e48 <_exit>
	...

08019de8 <_fstat_r>:
 8019de8:	b538      	push	{r3, r4, r5, lr}
 8019dea:	4d07      	ldr	r5, [pc, #28]	; (8019e08 <_fstat_r+0x20>)
 8019dec:	2300      	movs	r3, #0
 8019dee:	4604      	mov	r4, r0
 8019df0:	4608      	mov	r0, r1
 8019df2:	4611      	mov	r1, r2
 8019df4:	602b      	str	r3, [r5, #0]
 8019df6:	f7e8 f876 	bl	8001ee6 <_fstat>
 8019dfa:	1c43      	adds	r3, r0, #1
 8019dfc:	d102      	bne.n	8019e04 <_fstat_r+0x1c>
 8019dfe:	682b      	ldr	r3, [r5, #0]
 8019e00:	b103      	cbz	r3, 8019e04 <_fstat_r+0x1c>
 8019e02:	6023      	str	r3, [r4, #0]
 8019e04:	bd38      	pop	{r3, r4, r5, pc}
 8019e06:	bf00      	nop
 8019e08:	20018bc0 	.word	0x20018bc0

08019e0c <_isatty_r>:
 8019e0c:	b538      	push	{r3, r4, r5, lr}
 8019e0e:	4d06      	ldr	r5, [pc, #24]	; (8019e28 <_isatty_r+0x1c>)
 8019e10:	2300      	movs	r3, #0
 8019e12:	4604      	mov	r4, r0
 8019e14:	4608      	mov	r0, r1
 8019e16:	602b      	str	r3, [r5, #0]
 8019e18:	f7e8 f875 	bl	8001f06 <_isatty>
 8019e1c:	1c43      	adds	r3, r0, #1
 8019e1e:	d102      	bne.n	8019e26 <_isatty_r+0x1a>
 8019e20:	682b      	ldr	r3, [r5, #0]
 8019e22:	b103      	cbz	r3, 8019e26 <_isatty_r+0x1a>
 8019e24:	6023      	str	r3, [r4, #0]
 8019e26:	bd38      	pop	{r3, r4, r5, pc}
 8019e28:	20018bc0 	.word	0x20018bc0

08019e2c <_malloc_usable_size_r>:
 8019e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019e30:	1f18      	subs	r0, r3, #4
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	bfbc      	itt	lt
 8019e36:	580b      	ldrlt	r3, [r1, r0]
 8019e38:	18c0      	addlt	r0, r0, r3
 8019e3a:	4770      	bx	lr

08019e3c <_raise_r>:
 8019e3c:	291f      	cmp	r1, #31
 8019e3e:	b538      	push	{r3, r4, r5, lr}
 8019e40:	4604      	mov	r4, r0
 8019e42:	460d      	mov	r5, r1
 8019e44:	d904      	bls.n	8019e50 <_raise_r+0x14>
 8019e46:	2316      	movs	r3, #22
 8019e48:	6003      	str	r3, [r0, #0]
 8019e4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019e4e:	bd38      	pop	{r3, r4, r5, pc}
 8019e50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019e52:	b112      	cbz	r2, 8019e5a <_raise_r+0x1e>
 8019e54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019e58:	b94b      	cbnz	r3, 8019e6e <_raise_r+0x32>
 8019e5a:	4620      	mov	r0, r4
 8019e5c:	f000 f830 	bl	8019ec0 <_getpid_r>
 8019e60:	462a      	mov	r2, r5
 8019e62:	4601      	mov	r1, r0
 8019e64:	4620      	mov	r0, r4
 8019e66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019e6a:	f000 b817 	b.w	8019e9c <_kill_r>
 8019e6e:	2b01      	cmp	r3, #1
 8019e70:	d00a      	beq.n	8019e88 <_raise_r+0x4c>
 8019e72:	1c59      	adds	r1, r3, #1
 8019e74:	d103      	bne.n	8019e7e <_raise_r+0x42>
 8019e76:	2316      	movs	r3, #22
 8019e78:	6003      	str	r3, [r0, #0]
 8019e7a:	2001      	movs	r0, #1
 8019e7c:	e7e7      	b.n	8019e4e <_raise_r+0x12>
 8019e7e:	2400      	movs	r4, #0
 8019e80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019e84:	4628      	mov	r0, r5
 8019e86:	4798      	blx	r3
 8019e88:	2000      	movs	r0, #0
 8019e8a:	e7e0      	b.n	8019e4e <_raise_r+0x12>

08019e8c <raise>:
 8019e8c:	4b02      	ldr	r3, [pc, #8]	; (8019e98 <raise+0xc>)
 8019e8e:	4601      	mov	r1, r0
 8019e90:	6818      	ldr	r0, [r3, #0]
 8019e92:	f7ff bfd3 	b.w	8019e3c <_raise_r>
 8019e96:	bf00      	nop
 8019e98:	20000730 	.word	0x20000730

08019e9c <_kill_r>:
 8019e9c:	b538      	push	{r3, r4, r5, lr}
 8019e9e:	4d07      	ldr	r5, [pc, #28]	; (8019ebc <_kill_r+0x20>)
 8019ea0:	2300      	movs	r3, #0
 8019ea2:	4604      	mov	r4, r0
 8019ea4:	4608      	mov	r0, r1
 8019ea6:	4611      	mov	r1, r2
 8019ea8:	602b      	str	r3, [r5, #0]
 8019eaa:	f7e7 ffbb 	bl	8001e24 <_kill>
 8019eae:	1c43      	adds	r3, r0, #1
 8019eb0:	d102      	bne.n	8019eb8 <_kill_r+0x1c>
 8019eb2:	682b      	ldr	r3, [r5, #0]
 8019eb4:	b103      	cbz	r3, 8019eb8 <_kill_r+0x1c>
 8019eb6:	6023      	str	r3, [r4, #0]
 8019eb8:	bd38      	pop	{r3, r4, r5, pc}
 8019eba:	bf00      	nop
 8019ebc:	20018bc0 	.word	0x20018bc0

08019ec0 <_getpid_r>:
 8019ec0:	f7e7 bfa8 	b.w	8001e14 <_getpid>

08019ec4 <_init>:
 8019ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ec6:	bf00      	nop
 8019ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019eca:	bc08      	pop	{r3}
 8019ecc:	469e      	mov	lr, r3
 8019ece:	4770      	bx	lr

08019ed0 <_fini>:
 8019ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ed2:	bf00      	nop
 8019ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019ed6:	bc08      	pop	{r3}
 8019ed8:	469e      	mov	lr, r3
 8019eda:	4770      	bx	lr
