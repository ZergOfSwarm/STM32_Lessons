
My_Bootloader_v1.10.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ee4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800417c  0800417c  0001417c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800418c  0800418c  0001418c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004190  08004190  00014190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08004194  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000070  24000010  080041a4  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000080  080041a4  00020080  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c9f2  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001d94  00000000  00000000  0002ca30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000009b8  00000000  00000000  0002e7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000008d0  00000000  00000000  0002f180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035ede  00000000  00000000  0002fa50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000c3b3  00000000  00000000  0006592e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001543e2  00000000  00000000  00071ce1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001c60c3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002644  00000000  00000000  001c6114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004164 	.word	0x08004164

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08004164 	.word	0x08004164

080002d8 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b08c      	sub	sp, #48	; 0x30
 80002dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 031c 	add.w	r3, r7, #28
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
 80002ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80002ee:	4b38      	ldr	r3, [pc, #224]	; (80003d0 <MX_GPIO_Init+0xf8>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80002f4:	4a36      	ldr	r2, [pc, #216]	; (80003d0 <MX_GPIO_Init+0xf8>)
 80002f6:	f043 0310 	orr.w	r3, r3, #16
 80002fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80002fe:	4b34      	ldr	r3, [pc, #208]	; (80003d0 <MX_GPIO_Init+0xf8>)
 8000300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000304:	f003 0310 	and.w	r3, r3, #16
 8000308:	61bb      	str	r3, [r7, #24]
 800030a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800030c:	4b30      	ldr	r3, [pc, #192]	; (80003d0 <MX_GPIO_Init+0xf8>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000312:	4a2f      	ldr	r2, [pc, #188]	; (80003d0 <MX_GPIO_Init+0xf8>)
 8000314:	f043 0304 	orr.w	r3, r3, #4
 8000318:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800031c:	4b2c      	ldr	r3, [pc, #176]	; (80003d0 <MX_GPIO_Init+0xf8>)
 800031e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000322:	f003 0304 	and.w	r3, r3, #4
 8000326:	617b      	str	r3, [r7, #20]
 8000328:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800032a:	4b29      	ldr	r3, [pc, #164]	; (80003d0 <MX_GPIO_Init+0xf8>)
 800032c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000330:	4a27      	ldr	r2, [pc, #156]	; (80003d0 <MX_GPIO_Init+0xf8>)
 8000332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000336:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800033a:	4b25      	ldr	r3, [pc, #148]	; (80003d0 <MX_GPIO_Init+0xf8>)
 800033c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000344:	613b      	str	r3, [r7, #16]
 8000346:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000348:	4b21      	ldr	r3, [pc, #132]	; (80003d0 <MX_GPIO_Init+0xf8>)
 800034a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800034e:	4a20      	ldr	r2, [pc, #128]	; (80003d0 <MX_GPIO_Init+0xf8>)
 8000350:	f043 0302 	orr.w	r3, r3, #2
 8000354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000358:	4b1d      	ldr	r3, [pc, #116]	; (80003d0 <MX_GPIO_Init+0xf8>)
 800035a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800035e:	f003 0302 	and.w	r3, r3, #2
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000366:	4b1a      	ldr	r3, [pc, #104]	; (80003d0 <MX_GPIO_Init+0xf8>)
 8000368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800036c:	4a18      	ldr	r2, [pc, #96]	; (80003d0 <MX_GPIO_Init+0xf8>)
 800036e:	f043 0308 	orr.w	r3, r3, #8
 8000372:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000376:	4b16      	ldr	r3, [pc, #88]	; (80003d0 <MX_GPIO_Init+0xf8>)
 8000378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800037c:	f003 0308 	and.w	r3, r3, #8
 8000380:	60bb      	str	r3, [r7, #8]
 8000382:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000384:	4b12      	ldr	r3, [pc, #72]	; (80003d0 <MX_GPIO_Init+0xf8>)
 8000386:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800038a:	4a11      	ldr	r2, [pc, #68]	; (80003d0 <MX_GPIO_Init+0xf8>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000394:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <MX_GPIO_Init+0xf8>)
 8000396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 80003a2:	2200      	movs	r2, #0
 80003a4:	2108      	movs	r1, #8
 80003a6:	480b      	ldr	r0, [pc, #44]	; (80003d4 <MX_GPIO_Init+0xfc>)
 80003a8:	f000 ffde 	bl	8001368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 80003ac:	2308      	movs	r3, #8
 80003ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b0:	2301      	movs	r3, #1
 80003b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b4:	2300      	movs	r3, #0
 80003b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b8:	2300      	movs	r3, #0
 80003ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 80003bc:	f107 031c 	add.w	r3, r7, #28
 80003c0:	4619      	mov	r1, r3
 80003c2:	4804      	ldr	r0, [pc, #16]	; (80003d4 <MX_GPIO_Init+0xfc>)
 80003c4:	f000 fe20 	bl	8001008 <HAL_GPIO_Init>

}
 80003c8:	bf00      	nop
 80003ca:	3730      	adds	r7, #48	; 0x30
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	58024400 	.word	0x58024400
 80003d4:	58021000 	.word	0x58021000

080003d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003de:	f000 f8af 	bl	8000540 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e2:	f000 fbe7 	bl	8000bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e6:	f000 f82f 	bl	8000448 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ea:	f7ff ff75 	bl	80002d8 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80003ee:	f000 f8d9 	bl	80005a4 <MX_QUADSPI_Init>
  /* USER CODE BEGIN 2 */
  if (QSPI_W25Qxx_Init() != QSPI_W25Qxx_OK){  //重新初始化QSPI-flash
 80003f2:	f000 f9d3 	bl	800079c <QSPI_W25Qxx_Init>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <main+0x28>
  	  Error_Handler();
 80003fc:	f000 f8cd 	bl	800059a <Error_Handler>
    }
  QSPI_W25Qxx_MemoryMappedMode();     //Установите QSPI как режим отображения памяти
 8000400:	f000 faa2 	bl	8000948 <QSPI_W25Qxx_MemoryMappedMode>
  HAL_MPU_Disable();                  //关闭mpu
 8000404:	f000 fd84 	bl	8000f10 <HAL_MPU_Disable>

  SysTick->CTRL = 0;        // 关闭SysTick
 8000408:	4b0c      	ldr	r3, [pc, #48]	; (800043c <main+0x64>)
 800040a:	2200      	movs	r2, #0
 800040c:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = 0;        // 清零重载值
 800040e:	4b0b      	ldr	r3, [pc, #44]	; (800043c <main+0x64>)
 8000410:	2200      	movs	r2, #0
 8000412:	605a      	str	r2, [r3, #4]
  SysTick->VAL = 0;            // 清零计数值
 8000414:	4b09      	ldr	r3, [pc, #36]	; (800043c <main+0x64>)
 8000416:	2200      	movs	r2, #0
 8000418:	609a      	str	r2, [r3, #8]

  JumpToApplication = (pFunction) (*(__IO uint32_t *) (W25Qxx_Mem_Addr + 4));    // 设置起始地址
 800041a:	4b09      	ldr	r3, [pc, #36]	; (8000440 <main+0x68>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	461a      	mov	r2, r3
 8000420:	4b08      	ldr	r3, [pc, #32]	; (8000444 <main+0x6c>)
 8000422:	601a      	str	r2, [r3, #0]
  __set_MSP(*(__IO uint32_t *) W25Qxx_Mem_Addr);    // 设置主堆栈指针
 8000424:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	f383 8808 	msr	MSP, r3
}
 8000432:	bf00      	nop
  JumpToApplication();            // 执行跳转
 8000434:	4b03      	ldr	r3, [pc, #12]	; (8000444 <main+0x6c>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4798      	blx	r3
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800043a:	e7fe      	b.n	800043a <main+0x62>
 800043c:	e000e010 	.word	0xe000e010
 8000440:	90000004 	.word	0x90000004
 8000444:	2400002c 	.word	0x2400002c

08000448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b09c      	sub	sp, #112	; 0x70
 800044c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000452:	224c      	movs	r2, #76	; 0x4c
 8000454:	2100      	movs	r1, #0
 8000456:	4618      	mov	r0, r3
 8000458:	f003 fe7c 	bl	8004154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	2220      	movs	r2, #32
 8000460:	2100      	movs	r1, #0
 8000462:	4618      	mov	r0, r3
 8000464:	f003 fe76 	bl	8004154 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000468:	2002      	movs	r0, #2
 800046a:	f000 ffbd 	bl	80013e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800046e:	2300      	movs	r3, #0
 8000470:	603b      	str	r3, [r7, #0]
 8000472:	4b31      	ldr	r3, [pc, #196]	; (8000538 <SystemClock_Config+0xf0>)
 8000474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000476:	4a30      	ldr	r2, [pc, #192]	; (8000538 <SystemClock_Config+0xf0>)
 8000478:	f023 0301 	bic.w	r3, r3, #1
 800047c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800047e:	4b2e      	ldr	r3, [pc, #184]	; (8000538 <SystemClock_Config+0xf0>)
 8000480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	603b      	str	r3, [r7, #0]
 8000488:	4b2c      	ldr	r3, [pc, #176]	; (800053c <SystemClock_Config+0xf4>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000490:	4a2a      	ldr	r2, [pc, #168]	; (800053c <SystemClock_Config+0xf4>)
 8000492:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b28      	ldr	r3, [pc, #160]	; (800053c <SystemClock_Config+0xf4>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004a0:	603b      	str	r3, [r7, #0]
 80004a2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004a4:	bf00      	nop
 80004a6:	4b25      	ldr	r3, [pc, #148]	; (800053c <SystemClock_Config+0xf4>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004b2:	d1f8      	bne.n	80004a6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004b4:	2301      	movs	r3, #1
 80004b6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004be:	2302      	movs	r3, #2
 80004c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004c2:	2302      	movs	r3, #2
 80004c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80004c6:	2302      	movs	r3, #2
 80004c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 80004ca:	2320      	movs	r3, #32
 80004cc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80004ce:	2302      	movs	r3, #2
 80004d0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80004d2:	2302      	movs	r3, #2
 80004d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004d6:	2302      	movs	r3, #2
 80004d8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80004da:	230c      	movs	r3, #12
 80004dc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80004de:	2300      	movs	r3, #0
 80004e0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ea:	4618      	mov	r0, r3
 80004ec:	f001 fe06 	bl	80020fc <HAL_RCC_OscConfig>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80004f6:	f000 f850 	bl	800059a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004fa:	233f      	movs	r3, #63	; 0x3f
 80004fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004fe:	2303      	movs	r3, #3
 8000500:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000506:	2308      	movs	r3, #8
 8000508:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800050e:	2300      	movs	r3, #0
 8000510:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000512:	2300      	movs	r3, #0
 8000514:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000516:	2300      	movs	r3, #0
 8000518:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	2102      	movs	r1, #2
 800051e:	4618      	mov	r0, r3
 8000520:	f002 fa1a 	bl	8002958 <HAL_RCC_ClockConfig>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800052a:	f000 f836 	bl	800059a <Error_Handler>
  }
}
 800052e:	bf00      	nop
 8000530:	3770      	adds	r7, #112	; 0x70
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	58000400 	.word	0x58000400
 800053c:	58024800 	.word	0x58024800

08000540 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000546:	463b      	mov	r3, r7
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000552:	f000 fcdd 	bl	8000f10 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000556:	2301      	movs	r3, #1
 8000558:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800055a:	2300      	movs	r3, #0
 800055c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 800055e:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000562:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_8MB;
 8000564:	2316      	movs	r3, #22
 8000566:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000568:	2300      	movs	r3, #0
 800056a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800056c:	2300      	movs	r3, #0
 800056e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000570:	2300      	movs	r3, #0
 8000572:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000574:	2301      	movs	r3, #1
 8000576:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000578:	2301      	movs	r3, #1
 800057a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800057c:	2300      	movs	r3, #0
 800057e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000580:	2300      	movs	r3, #0
 8000582:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000584:	463b      	mov	r3, r7
 8000586:	4618      	mov	r0, r3
 8000588:	f000 fcfa 	bl	8000f80 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800058c:	2004      	movs	r0, #4
 800058e:	f000 fcd7 	bl	8000f40 <HAL_MPU_Enable>

}
 8000592:	bf00      	nop
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}

0800059a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800059a:	b480      	push	{r7}
 800059c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800059e:	b672      	cpsid	i
}
 80005a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a2:	e7fe      	b.n	80005a2 <Error_Handler+0x8>

080005a4 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <MX_QUADSPI_Init+0x50>)
 80005aa:	4a13      	ldr	r2, [pc, #76]	; (80005f8 <MX_QUADSPI_Init+0x54>)
 80005ac:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_QUADSPI_Init+0x50>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <MX_QUADSPI_Init+0x50>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <MX_QUADSPI_Init+0x50>)
 80005bc:	2200      	movs	r2, #0
 80005be:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 22;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <MX_QUADSPI_Init+0x50>)
 80005c2:	2216      	movs	r2, #22
 80005c4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_2_CYCLE;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <MX_QUADSPI_Init+0x50>)
 80005c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005cc:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80005ce:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <MX_QUADSPI_Init+0x50>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <MX_QUADSPI_Init+0x50>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80005da:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <MX_QUADSPI_Init+0x50>)
 80005dc:	2200      	movs	r2, #0
 80005de:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <MX_QUADSPI_Init+0x50>)
 80005e2:	f000 ff3b 	bl	800145c <HAL_QSPI_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 80005ec:	f7ff ffd5 	bl	800059a <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	24000030 	.word	0x24000030
 80005f8:	52005000 	.word	0x52005000

080005fc <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b0ba      	sub	sp, #232	; 0xe8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000604:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000614:	f107 0318 	add.w	r3, r7, #24
 8000618:	22bc      	movs	r2, #188	; 0xbc
 800061a:	2100      	movs	r1, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f003 fd99 	bl	8004154 <memset>
  if(qspiHandle->Instance==QUADSPI)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a58      	ldr	r2, [pc, #352]	; (8000788 <HAL_QSPI_MspInit+0x18c>)
 8000628:	4293      	cmp	r3, r2
 800062a:	f040 80a8 	bne.w	800077e <HAL_QSPI_MspInit+0x182>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 800062e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000632:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000634:	2300      	movs	r3, #0
 8000636:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000638:	f107 0318 	add.w	r3, r7, #24
 800063c:	4618      	mov	r0, r3
 800063e:	f002 fcbb 	bl	8002fb8 <HAL_RCCEx_PeriphCLKConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <HAL_QSPI_MspInit+0x50>
    {
      Error_Handler();
 8000648:	f7ff ffa7 	bl	800059a <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800064c:	4b4f      	ldr	r3, [pc, #316]	; (800078c <HAL_QSPI_MspInit+0x190>)
 800064e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000652:	4a4e      	ldr	r2, [pc, #312]	; (800078c <HAL_QSPI_MspInit+0x190>)
 8000654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000658:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800065c:	4b4b      	ldr	r3, [pc, #300]	; (800078c <HAL_QSPI_MspInit+0x190>)
 800065e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000666:	617b      	str	r3, [r7, #20]
 8000668:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800066a:	4b48      	ldr	r3, [pc, #288]	; (800078c <HAL_QSPI_MspInit+0x190>)
 800066c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000670:	4a46      	ldr	r2, [pc, #280]	; (800078c <HAL_QSPI_MspInit+0x190>)
 8000672:	f043 0310 	orr.w	r3, r3, #16
 8000676:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800067a:	4b44      	ldr	r3, [pc, #272]	; (800078c <HAL_QSPI_MspInit+0x190>)
 800067c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000680:	f003 0310 	and.w	r3, r3, #16
 8000684:	613b      	str	r3, [r7, #16]
 8000686:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000688:	4b40      	ldr	r3, [pc, #256]	; (800078c <HAL_QSPI_MspInit+0x190>)
 800068a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800068e:	4a3f      	ldr	r2, [pc, #252]	; (800078c <HAL_QSPI_MspInit+0x190>)
 8000690:	f043 0302 	orr.w	r3, r3, #2
 8000694:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000698:	4b3c      	ldr	r3, [pc, #240]	; (800078c <HAL_QSPI_MspInit+0x190>)
 800069a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800069e:	f003 0302 	and.w	r3, r3, #2
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80006a6:	4b39      	ldr	r3, [pc, #228]	; (800078c <HAL_QSPI_MspInit+0x190>)
 80006a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006ac:	4a37      	ldr	r2, [pc, #220]	; (800078c <HAL_QSPI_MspInit+0x190>)
 80006ae:	f043 0308 	orr.w	r3, r3, #8
 80006b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006b6:	4b35      	ldr	r3, [pc, #212]	; (800078c <HAL_QSPI_MspInit+0x190>)
 80006b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006bc:	f003 0308 	and.w	r3, r3, #8
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006c4:	2304      	movs	r3, #4
 80006c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ca:	2302      	movs	r3, #2
 80006cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d6:	2303      	movs	r3, #3
 80006d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80006dc:	2309      	movs	r3, #9
 80006de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80006e6:	4619      	mov	r1, r3
 80006e8:	4829      	ldr	r0, [pc, #164]	; (8000790 <HAL_QSPI_MspInit+0x194>)
 80006ea:	f000 fc8d 	bl	8001008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006ee:	2304      	movs	r3, #4
 80006f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f4:	2302      	movs	r3, #2
 80006f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000700:	2303      	movs	r3, #3
 8000702:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000706:	2309      	movs	r3, #9
 8000708:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000710:	4619      	mov	r1, r3
 8000712:	4820      	ldr	r0, [pc, #128]	; (8000794 <HAL_QSPI_MspInit+0x198>)
 8000714:	f000 fc78 	bl	8001008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000718:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800071c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000720:	2302      	movs	r3, #2
 8000722:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800072c:	2303      	movs	r3, #3
 800072e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000732:	2309      	movs	r3, #9
 8000734:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000738:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800073c:	4619      	mov	r1, r3
 800073e:	4816      	ldr	r0, [pc, #88]	; (8000798 <HAL_QSPI_MspInit+0x19c>)
 8000740:	f000 fc62 	bl	8001008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000744:	2340      	movs	r3, #64	; 0x40
 8000746:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074a:	2302      	movs	r3, #2
 800074c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000756:	2303      	movs	r3, #3
 8000758:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800075c:	230a      	movs	r3, #10
 800075e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000762:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000766:	4619      	mov	r1, r3
 8000768:	480a      	ldr	r0, [pc, #40]	; (8000794 <HAL_QSPI_MspInit+0x198>)
 800076a:	f000 fc4d 	bl	8001008 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 0, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	2100      	movs	r1, #0
 8000772:	205c      	movs	r0, #92	; 0x5c
 8000774:	f000 fb97 	bl	8000ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8000778:	205c      	movs	r0, #92	; 0x5c
 800077a:	f000 fbae 	bl	8000eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 800077e:	bf00      	nop
 8000780:	37e8      	adds	r7, #232	; 0xe8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	52005000 	.word	0x52005000
 800078c:	58024400 	.word	0x58024400
 8000790:	58021000 	.word	0x58021000
 8000794:	58020400 	.word	0x58020400
 8000798:	58020c00 	.word	0x58020c00

0800079c <QSPI_W25Qxx_Init>:
}

/* USER CODE BEGIN 1 */

int8_t QSPI_W25Qxx_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
    uint32_t	Device_ID;	// 器件ID

    MX_QUADSPI_Init();							//инициализация QSPI
 80007a2:	f7ff feff 	bl	80005a4 <MX_QUADSPI_Init>
    QSPI_W25Qxx_Reset();							// 复位器件
 80007a6:	f000 f84b 	bl	8000840 <QSPI_W25Qxx_Reset>
    Device_ID = QSPI_W25Qxx_ReadID(); 		// 读取器件ID
 80007aa:	f000 f893 	bl	80008d4 <QSPI_W25Qxx_ReadID>
 80007ae:	6078      	str	r0, [r7, #4]

    if( Device_ID == W25Qxx_FLASH_ID )		// 进行匹配
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4a05      	ldr	r2, [pc, #20]	; (80007c8 <QSPI_W25Qxx_Init+0x2c>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d101      	bne.n	80007bc <QSPI_W25Qxx_Init+0x20>
    {
        return QSPI_W25Qxx_OK;			// 返回成功标志
 80007b8:	2300      	movs	r3, #0
 80007ba:	e001      	b.n	80007c0 <QSPI_W25Qxx_Init+0x24>
    }
    else
    {
        return W25Qxx_ERROR_INIT;		// 返回错误标志
 80007bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	00ef4017 	.word	0x00ef4017

080007cc <QSPI_W25Qxx_AutoPollingMemReady>:
*	函数功能: 使用自动轮询标志查询，等待�?�信结束
*	�?    �?: 每一次�?�信都应该调用次函数，等待�?�信结束，避免错误的操作
**************************************************************************************************/

int8_t QSPI_W25Qxx_AutoPollingMemReady(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b094      	sub	sp, #80	; 0x50
 80007d0:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef     s_command;	   // QSPI传输配置
    QSPI_AutoPollingTypeDef s_config;		// 轮询比较相关配置参数

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;			// 1线指令模�?
 80007d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007d6:	633b      	str	r3, [r7, #48]	; 0x30
    s_command.AddressMode       = QSPI_ADDRESS_NONE;					// 无地�?模式
 80007d8:	2300      	movs	r3, #0
 80007da:	637b      	str	r3, [r7, #52]	; 0x34
    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;			//	无交替字�?
 80007dc:	2300      	movs	r3, #0
 80007de:	63bb      	str	r3, [r7, #56]	; 0x38
    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;	     	 	// 禁止DDR模式
 80007e0:	2300      	movs	r3, #0
 80007e2:	647b      	str	r3, [r7, #68]	; 0x44
    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;	   	// DDR模式中数据延迟，这里用不�?
 80007e4:	2300      	movs	r3, #0
 80007e6:	64bb      	str	r3, [r7, #72]	; 0x48
    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;	   	//	每次传输数据都发送指�?
 80007e8:	2300      	movs	r3, #0
 80007ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    s_command.DataMode          = QSPI_DATA_1_LINE;						// 1线数据模�?
 80007ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80007f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    s_command.DummyCycles       = 0;											//	空周期个�?
 80007f2:	2300      	movs	r3, #0
 80007f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.Instruction       = W25Qxx_CMD_ReadStatus_REG1;	   // 读状态信息寄存器
 80007f6:	2305      	movs	r3, #5
 80007f8:	61bb      	str	r3, [r7, #24]

// 不停的查�? W25Qxx_CMD_ReadStatus_REG1 寄存器，将读取到的状态字节中�? W25Qxx_Status_REG1_BUSY 不停的与0作比�?
// 读状态寄存器1的第0位（只读），Busy标志位，当正在擦�?/写入数据/写命令时会被�?1，空闲或通信结束�?0

    s_config.Match           = 0;   									//	匹配�?
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
    s_config.MatchMode       = QSPI_MATCH_MODE_AND;	      	//	与运�?
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
    s_config.Interval        = 0x10;	                     	//	轮询间隔
 8000802:	2310      	movs	r3, #16
 8000804:	60bb      	str	r3, [r7, #8]
    s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;	// 自动停止模式
 8000806:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800080a:	617b      	str	r3, [r7, #20]
    s_config.StatusBytesSize = 1;	                        	//	状�?�字节数
 800080c:	2301      	movs	r3, #1
 800080e:	60fb      	str	r3, [r7, #12]
    s_config.Mask            = W25Qxx_Status_REG1_BUSY;	   // 对在轮询模式下接收的状�?�字节进行屏蔽，只比较需要用到的�?
 8000810:	2301      	movs	r3, #1
 8000812:	607b      	str	r3, [r7, #4]

    // 发�?�轮询等待命�?
    if (HAL_QSPI_AutoPolling(&hqspi, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000814:	463a      	mov	r2, r7
 8000816:	f107 0118 	add.w	r1, r7, #24
 800081a:	f241 3388 	movw	r3, #5000	; 0x1388
 800081e:	4807      	ldr	r0, [pc, #28]	; (800083c <QSPI_W25Qxx_AutoPollingMemReady+0x70>)
 8000820:	f001 f945 	bl	8001aae <HAL_QSPI_AutoPolling>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d002      	beq.n	8000830 <QSPI_W25Qxx_AutoPollingMemReady+0x64>
    {
        return W25Qxx_ERROR_AUTOPOLLING; // 轮询等待无响�?
 800082a:	f06f 0302 	mvn.w	r3, #2
 800082e:	e000      	b.n	8000832 <QSPI_W25Qxx_AutoPollingMemReady+0x66>
    }
    return QSPI_W25Qxx_OK; // 通信正常结束
 8000830:	2300      	movs	r3, #0

}
 8000832:	4618      	mov	r0, r3
 8000834:	3750      	adds	r7, #80	; 0x50
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	24000030 	.word	0x24000030

08000840 <QSPI_W25Qxx_Reset>:
*	函数功能: 复位器件
*	Функция: сбросить устройство
*************************************************************************************************/

int8_t QSPI_W25Qxx_Reset(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08e      	sub	sp, #56	; 0x38
 8000844:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef s_command;	// QSPI传输配置

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;   	// 1线指令模�?
 8000846:	f44f 7380 	mov.w	r3, #256	; 0x100
 800084a:	61bb      	str	r3, [r7, #24]
    s_command.AddressMode 		 = QSPI_ADDRESS_NONE;   			// 无地�?模式
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]
    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE; 	// 无交替字�?
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;     	// 禁止DDR模式
 8000854:	2300      	movs	r3, #0
 8000856:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY; 	// DDR模式中数据延迟，这里用不�?
 8000858:	2300      	movs	r3, #0
 800085a:	633b      	str	r3, [r7, #48]	; 0x30
    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;	 	// 每次传输数据都发送指�?
 800085c:	2300      	movs	r3, #0
 800085e:	637b      	str	r3, [r7, #52]	; 0x34
    s_command.DataMode 			 = QSPI_DATA_NONE;       			// 无数据模�?
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
    s_command.DummyCycles 		 = 0;                     			// 空周期个�?
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
    s_command.Instruction 		 = W25Qxx_CMD_EnableReset;       // 执行复位使能命令
 8000868:	2366      	movs	r3, #102	; 0x66
 800086a:	603b      	str	r3, [r7, #0]

    // 发�?�复位使能命�?
    if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800086c:	463b      	mov	r3, r7
 800086e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000872:	4619      	mov	r1, r3
 8000874:	4816      	ldr	r0, [pc, #88]	; (80008d0 <QSPI_W25Qxx_Reset+0x90>)
 8000876:	f001 f81f 	bl	80018b8 <HAL_QSPI_Command>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d002      	beq.n	8000886 <QSPI_W25Qxx_Reset+0x46>
    {
        return W25Qxx_ERROR_INIT;			// 如果发�?�失败，返回错误信息
 8000880:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000884:	e01f      	b.n	80008c6 <QSPI_W25Qxx_Reset+0x86>
    }
    // 使用自动轮询标志位，等待通信结束
    if (QSPI_W25Qxx_AutoPollingMemReady() != QSPI_W25Qxx_OK)
 8000886:	f7ff ffa1 	bl	80007cc <QSPI_W25Qxx_AutoPollingMemReady>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d002      	beq.n	8000896 <QSPI_W25Qxx_Reset+0x56>
    {
        return W25Qxx_ERROR_AUTOPOLLING;	// 轮询等待无响�?
 8000890:	f06f 0302 	mvn.w	r3, #2
 8000894:	e017      	b.n	80008c6 <QSPI_W25Qxx_Reset+0x86>
    }

    s_command.Instruction  = W25Qxx_CMD_ResetDevice;     // 复位器件命令
 8000896:	2399      	movs	r3, #153	; 0x99
 8000898:	603b      	str	r3, [r7, #0]

    //发�?�复位器件命�?
    if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800089a:	463b      	mov	r3, r7
 800089c:	f241 3288 	movw	r2, #5000	; 0x1388
 80008a0:	4619      	mov	r1, r3
 80008a2:	480b      	ldr	r0, [pc, #44]	; (80008d0 <QSPI_W25Qxx_Reset+0x90>)
 80008a4:	f001 f808 	bl	80018b8 <HAL_QSPI_Command>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d002      	beq.n	80008b4 <QSPI_W25Qxx_Reset+0x74>
    {
        return W25Qxx_ERROR_INIT;		  // 如果发�?�失败，返回错误信息
 80008ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008b2:	e008      	b.n	80008c6 <QSPI_W25Qxx_Reset+0x86>
    }
    // 使用自动轮询标志位，等待通信结束
    if (QSPI_W25Qxx_AutoPollingMemReady() != QSPI_W25Qxx_OK)
 80008b4:	f7ff ff8a 	bl	80007cc <QSPI_W25Qxx_AutoPollingMemReady>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d002      	beq.n	80008c4 <QSPI_W25Qxx_Reset+0x84>
    {
        return W25Qxx_ERROR_AUTOPOLLING;	// 轮询等待无响�?
 80008be:	f06f 0302 	mvn.w	r3, #2
 80008c2:	e000      	b.n	80008c6 <QSPI_W25Qxx_Reset+0x86>
    }
    return QSPI_W25Qxx_OK;	// 复位成功
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3738      	adds	r7, #56	; 0x38
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	24000030 	.word	0x24000030

080008d4 <QSPI_W25Qxx_ReadID>:
*	函数功能: 初始�? QSPI 配置，读取器件ID
*	�?    �?: �?
**************************************************************************************************/

uint32_t QSPI_W25Qxx_ReadID(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b090      	sub	sp, #64	; 0x40
 80008d8:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef s_command;	// QSPI传输配置
    uint8_t	QSPI_ReceiveBuff[3];		// 存储QSPI读到的数�?
    uint32_t	W25Qxx_ID;					// 器件的ID

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;    // 1线指令模�?
 80008da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008de:	61fb      	str	r3, [r7, #28]
    s_command.AddressSize       = QSPI_ADDRESS_24_BITS;     	 // 24位地�?
 80008e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e4:	613b      	str	r3, [r7, #16]
    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;  // 无交替字�?
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;      // 禁止DDR模式
 80008ea:	2300      	movs	r3, #0
 80008ec:	633b      	str	r3, [r7, #48]	; 0x30
    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;  // DDR模式中数据延迟，这里用不�?
 80008ee:	2300      	movs	r3, #0
 80008f0:	637b      	str	r3, [r7, #52]	; 0x34
    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;	 // 每次传输数据都发送指�?
 80008f2:	2300      	movs	r3, #0
 80008f4:	63bb      	str	r3, [r7, #56]	; 0x38
    s_command.AddressMode		 = QSPI_ADDRESS_NONE;   		 // 无地�?模式
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
    s_command.DataMode			 = QSPI_DATA_1_LINE;       	 // 1线数据模�?
 80008fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.DummyCycles 		 = 0;                   		 // 空周期个�?
 8000900:	2300      	movs	r3, #0
 8000902:	61bb      	str	r3, [r7, #24]
    s_command.NbData 				 = 3;                          // 传输数据的长�?
 8000904:	2303      	movs	r3, #3
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.Instruction 		 = W25Qxx_CMD_JedecID;         // 执行读器件ID命令
 8000908:	239f      	movs	r3, #159	; 0x9f
 800090a:	607b      	str	r3, [r7, #4]

    // 发�?�指�?
    if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000912:	4619      	mov	r1, r3
 8000914:	480b      	ldr	r0, [pc, #44]	; (8000944 <QSPI_W25Qxx_ReadID+0x70>)
 8000916:	f000 ffcf 	bl	80018b8 <HAL_QSPI_Command>
    {
//		return W25Qxx_ERROR_INIT;		// 如果发�?�失败，返回错误信息
    }
    // 接收数据
    if (HAL_QSPI_Receive(&hqspi, QSPI_ReceiveBuff, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800091a:	463b      	mov	r3, r7
 800091c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000920:	4619      	mov	r1, r3
 8000922:	4808      	ldr	r0, [pc, #32]	; (8000944 <QSPI_W25Qxx_ReadID+0x70>)
 8000924:	f001 f826 	bl	8001974 <HAL_QSPI_Receive>
    {
//		return W25Qxx_ERROR_TRANSMIT;  // 如果接收失败，返回错误信�?
    }
    // 将得到的数据组合成ID
    W25Qxx_ID = (QSPI_ReceiveBuff[0] << 16) | (QSPI_ReceiveBuff[1] << 8 ) | QSPI_ReceiveBuff[2];
 8000928:	783b      	ldrb	r3, [r7, #0]
 800092a:	041a      	lsls	r2, r3, #16
 800092c:	787b      	ldrb	r3, [r7, #1]
 800092e:	021b      	lsls	r3, r3, #8
 8000930:	4313      	orrs	r3, r2
 8000932:	78ba      	ldrb	r2, [r7, #2]
 8000934:	4313      	orrs	r3, r2
 8000936:	63fb      	str	r3, [r7, #60]	; 0x3c

    return W25Qxx_ID; // 返回ID
 8000938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800093a:	4618      	mov	r0, r3
 800093c:	3740      	adds	r7, #64	; 0x40
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	24000030 	.word	0x24000030

08000948 <QSPI_W25Qxx_MemoryMappedMode>:
*	函数功能: 将QSPI设置为内存映射模�?
*	�?    �?: 设置为内存映射模式时，只能读，不能写！！�?
**************************************************************************************************/

int8_t QSPI_W25Qxx_MemoryMappedMode(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b090      	sub	sp, #64	; 0x40
 800094c:	af00      	add	r7, sp, #0
    QSPI_CommandTypeDef      s_command;				 // QSPI传输配置
    QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;	 // 内存映射访问参数

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;    		// 1线指令模�?
 800094e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000952:	623b      	str	r3, [r7, #32]
    s_command.AddressSize       = QSPI_ADDRESS_24_BITS;            // 24位地�?
 8000954:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000958:	617b      	str	r3, [r7, #20]
    s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;  		// 无交替字�?
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;     		// 禁止DDR模式
 800095e:	2300      	movs	r3, #0
 8000960:	637b      	str	r3, [r7, #52]	; 0x34
    s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY; 		// DDR模式中数据延迟，这里用不�?
 8000962:	2300      	movs	r3, #0
 8000964:	63bb      	str	r3, [r7, #56]	; 0x38
    s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;			// 每次传输数据都发送指�?
 8000966:	2300      	movs	r3, #0
 8000968:	63fb      	str	r3, [r7, #60]	; 0x3c
    s_command.AddressMode 		 = QSPI_ADDRESS_4_LINES; 				// 4线地�?模式
 800096a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
    s_command.DataMode    		 = QSPI_DATA_4_LINES;    				// 4线数据模�?
 8000970:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000974:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DummyCycles 		 = 6;                    				// 空周期个�?
 8000976:	2306      	movs	r3, #6
 8000978:	61fb      	str	r3, [r7, #28]
    s_command.Instruction 		 = W25Qxx_CMD_FastReadQuad_IO; 		// 1-4-4模式�?(1线指�?4线地�?4线数�?)，快速读取指�?
 800097a:	23eb      	movs	r3, #235	; 0xeb
 800097c:	60bb      	str	r3, [r7, #8]

    s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE; // 禁用超时计数�?, nCS 保持�?活状�?
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
    s_mem_mapped_cfg.TimeOutPeriod     = 0;									 // 超时判断周期
 8000982:	2300      	movs	r3, #0
 8000984:	603b      	str	r3, [r7, #0]

    QSPI_W25Qxx_Reset();		// 复位W25Qxx
 8000986:	f7ff ff5b 	bl	8000840 <QSPI_W25Qxx_Reset>

    if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &s_mem_mapped_cfg) != HAL_OK)	// 进行配置
 800098a:	463a      	mov	r2, r7
 800098c:	f107 0308 	add.w	r3, r7, #8
 8000990:	4619      	mov	r1, r3
 8000992:	4807      	ldr	r0, [pc, #28]	; (80009b0 <QSPI_W25Qxx_MemoryMappedMode+0x68>)
 8000994:	f001 f902 	bl	8001b9c <HAL_QSPI_MemoryMapped>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d002      	beq.n	80009a4 <QSPI_W25Qxx_MemoryMappedMode+0x5c>
    {
        return W25Qxx_ERROR_MemoryMapped; 	// 设置内存映射模式错误
 800099e:	f06f 0305 	mvn.w	r3, #5
 80009a2:	e000      	b.n	80009a6 <QSPI_W25Qxx_MemoryMappedMode+0x5e>
    }
    return QSPI_W25Qxx_OK; // 配置成功
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3740      	adds	r7, #64	; 0x40
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	24000030 	.word	0x24000030

080009b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <HAL_MspInit+0x30>)
 80009bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009c0:	4a08      	ldr	r2, [pc, #32]	; (80009e4 <HAL_MspInit+0x30>)
 80009c2:	f043 0302 	orr.w	r3, r3, #2
 80009c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80009ca:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_MspInit+0x30>)
 80009cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009d0:	f003 0302 	and.w	r3, r3, #2
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	58024400 	.word	0x58024400

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <NMI_Handler+0x4>

080009ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <HardFault_Handler+0x4>

080009f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <MemManage_Handler+0x4>

080009fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <BusFault_Handler+0x4>

08000a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <UsageFault_Handler+0x4>

08000a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a34:	f000 f930 	bl	8000c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <QUADSPI_IRQHandler+0x10>)
 8000a42:	f000 fd7f 	bl	8001544 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	24000030 	.word	0x24000030

08000a50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a54:	4b37      	ldr	r3, [pc, #220]	; (8000b34 <SystemInit+0xe4>)
 8000a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a5a:	4a36      	ldr	r2, [pc, #216]	; (8000b34 <SystemInit+0xe4>)
 8000a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a64:	4b34      	ldr	r3, [pc, #208]	; (8000b38 <SystemInit+0xe8>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f003 030f 	and.w	r3, r3, #15
 8000a6c:	2b06      	cmp	r3, #6
 8000a6e:	d807      	bhi.n	8000a80 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a70:	4b31      	ldr	r3, [pc, #196]	; (8000b38 <SystemInit+0xe8>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f023 030f 	bic.w	r3, r3, #15
 8000a78:	4a2f      	ldr	r2, [pc, #188]	; (8000b38 <SystemInit+0xe8>)
 8000a7a:	f043 0307 	orr.w	r3, r3, #7
 8000a7e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a80:	4b2e      	ldr	r3, [pc, #184]	; (8000b3c <SystemInit+0xec>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a2d      	ldr	r2, [pc, #180]	; (8000b3c <SystemInit+0xec>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a8c:	4b2b      	ldr	r3, [pc, #172]	; (8000b3c <SystemInit+0xec>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a92:	4b2a      	ldr	r3, [pc, #168]	; (8000b3c <SystemInit+0xec>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	4929      	ldr	r1, [pc, #164]	; (8000b3c <SystemInit+0xec>)
 8000a98:	4b29      	ldr	r3, [pc, #164]	; (8000b40 <SystemInit+0xf0>)
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a9e:	4b26      	ldr	r3, [pc, #152]	; (8000b38 <SystemInit+0xe8>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f003 0308 	and.w	r3, r3, #8
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d007      	beq.n	8000aba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aaa:	4b23      	ldr	r3, [pc, #140]	; (8000b38 <SystemInit+0xe8>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f023 030f 	bic.w	r3, r3, #15
 8000ab2:	4a21      	ldr	r2, [pc, #132]	; (8000b38 <SystemInit+0xe8>)
 8000ab4:	f043 0307 	orr.w	r3, r3, #7
 8000ab8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000aba:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <SystemInit+0xec>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ac0:	4b1e      	ldr	r3, [pc, #120]	; (8000b3c <SystemInit+0xec>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ac6:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <SystemInit+0xec>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000acc:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <SystemInit+0xec>)
 8000ace:	4a1d      	ldr	r2, [pc, #116]	; (8000b44 <SystemInit+0xf4>)
 8000ad0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <SystemInit+0xec>)
 8000ad4:	4a1c      	ldr	r2, [pc, #112]	; (8000b48 <SystemInit+0xf8>)
 8000ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ad8:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <SystemInit+0xec>)
 8000ada:	4a1c      	ldr	r2, [pc, #112]	; (8000b4c <SystemInit+0xfc>)
 8000adc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ade:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <SystemInit+0xec>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ae4:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <SystemInit+0xec>)
 8000ae6:	4a19      	ldr	r2, [pc, #100]	; (8000b4c <SystemInit+0xfc>)
 8000ae8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000aea:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <SystemInit+0xec>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <SystemInit+0xec>)
 8000af2:	4a16      	ldr	r2, [pc, #88]	; (8000b4c <SystemInit+0xfc>)
 8000af4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <SystemInit+0xec>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <SystemInit+0xec>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <SystemInit+0xec>)
 8000b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b06:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <SystemInit+0xec>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b0e:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <SystemInit+0x100>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <SystemInit+0x104>)
 8000b14:	4013      	ands	r3, r2
 8000b16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000b1a:	d202      	bcs.n	8000b22 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <SystemInit+0x108>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <SystemInit+0x10c>)
 8000b24:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000b28:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000ed00 	.word	0xe000ed00
 8000b38:	52002000 	.word	0x52002000
 8000b3c:	58024400 	.word	0x58024400
 8000b40:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b44:	02020200 	.word	0x02020200
 8000b48:	01ff0000 	.word	0x01ff0000
 8000b4c:	01010280 	.word	0x01010280
 8000b50:	5c001000 	.word	0x5c001000
 8000b54:	ffff0000 	.word	0xffff0000
 8000b58:	51008108 	.word	0x51008108
 8000b5c:	52004000 	.word	0x52004000

08000b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b64:	f7ff ff74 	bl	8000a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b68:	480c      	ldr	r0, [pc, #48]	; (8000b9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b6a:	490d      	ldr	r1, [pc, #52]	; (8000ba0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ba4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b70:	e002      	b.n	8000b78 <LoopCopyDataInit>

08000b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b76:	3304      	adds	r3, #4

08000b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b7c:	d3f9      	bcc.n	8000b72 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b80:	4c0a      	ldr	r4, [pc, #40]	; (8000bac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b84:	e001      	b.n	8000b8a <LoopFillZerobss>

08000b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b88:	3204      	adds	r2, #4

08000b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b8c:	d3fb      	bcc.n	8000b86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f003 fabd 	bl	800410c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b92:	f7ff fc21 	bl	80003d8 <main>
  bx  lr
 8000b96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b98:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000b9c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ba0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000ba4:	08004194 	.word	0x08004194
  ldr r2, =_sbss
 8000ba8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000bac:	24000080 	.word	0x24000080

08000bb0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC3_IRQHandler>
	...

08000bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bba:	2003      	movs	r0, #3
 8000bbc:	f000 f968 	bl	8000e90 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000bc0:	f002 f880 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <HAL_Init+0x68>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	0a1b      	lsrs	r3, r3, #8
 8000bcc:	f003 030f 	and.w	r3, r3, #15
 8000bd0:	4913      	ldr	r1, [pc, #76]	; (8000c20 <HAL_Init+0x6c>)
 8000bd2:	5ccb      	ldrb	r3, [r1, r3]
 8000bd4:	f003 031f 	and.w	r3, r3, #31
 8000bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bdc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000bde:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <HAL_Init+0x68>)
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	f003 030f 	and.w	r3, r3, #15
 8000be6:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <HAL_Init+0x6c>)
 8000be8:	5cd3      	ldrb	r3, [r2, r3]
 8000bea:	f003 031f 	and.w	r3, r3, #31
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8000bf4:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <HAL_Init+0x70>)
 8000bf6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000bf8:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <HAL_Init+0x74>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bfe:	200f      	movs	r0, #15
 8000c00:	f000 f814 	bl	8000c2c <HAL_InitTick>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e002      	b.n	8000c14 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c0e:	f7ff fed1 	bl	80009b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	58024400 	.word	0x58024400
 8000c20:	0800417c 	.word	0x0800417c
 8000c24:	24000004 	.word	0x24000004
 8000c28:	24000000 	.word	0x24000000

08000c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <HAL_InitTick+0x60>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d101      	bne.n	8000c40 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e021      	b.n	8000c84 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <HAL_InitTick+0x64>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <HAL_InitTick+0x60>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f94d 	bl	8000ef6 <HAL_SYSTICK_Config>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00e      	b.n	8000c84 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d80a      	bhi.n	8000c82 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c74:	f000 f917 	bl	8000ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c78:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <HAL_InitTick+0x68>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e000      	b.n	8000c84 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	2400000c 	.word	0x2400000c
 8000c90:	24000000 	.word	0x24000000
 8000c94:	24000008 	.word	0x24000008

08000c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x20>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x24>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <HAL_IncTick+0x24>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	2400000c 	.word	0x2400000c
 8000cbc:	2400007c 	.word	0x2400007c

08000cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <HAL_GetTick+0x14>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	2400007c 	.word	0x2400007c

08000cd8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000cdc:	4b03      	ldr	r3, [pc, #12]	; (8000cec <HAL_GetREVID+0x14>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	0c1b      	lsrs	r3, r3, #16
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	5c001000 	.word	0x5c001000

08000cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d00:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <__NVIC_SetPriorityGrouping+0x40>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d06:	68ba      	ldr	r2, [r7, #8]
 8000d08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <__NVIC_SetPriorityGrouping+0x44>)
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1e:	4a04      	ldr	r2, [pc, #16]	; (8000d30 <__NVIC_SetPriorityGrouping+0x40>)
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	60d3      	str	r3, [r2, #12]
}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00
 8000d34:	05fa0000 	.word	0x05fa0000

08000d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <__NVIC_GetPriorityGrouping+0x18>)
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	0a1b      	lsrs	r3, r3, #8
 8000d42:	f003 0307 	and.w	r3, r3, #7
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	db0b      	blt.n	8000d7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d66:	88fb      	ldrh	r3, [r7, #6]
 8000d68:	f003 021f 	and.w	r2, r3, #31
 8000d6c:	4907      	ldr	r1, [pc, #28]	; (8000d8c <__NVIC_EnableIRQ+0x38>)
 8000d6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d72:	095b      	lsrs	r3, r3, #5
 8000d74:	2001      	movs	r0, #1
 8000d76:	fa00 f202 	lsl.w	r2, r0, r2
 8000d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000e100 	.word	0xe000e100

08000d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	6039      	str	r1, [r7, #0]
 8000d9a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	db0a      	blt.n	8000dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	490c      	ldr	r1, [pc, #48]	; (8000ddc <__NVIC_SetPriority+0x4c>)
 8000daa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dae:	0112      	lsls	r2, r2, #4
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	440b      	add	r3, r1
 8000db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000db8:	e00a      	b.n	8000dd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4908      	ldr	r1, [pc, #32]	; (8000de0 <__NVIC_SetPriority+0x50>)
 8000dc0:	88fb      	ldrh	r3, [r7, #6]
 8000dc2:	f003 030f 	and.w	r3, r3, #15
 8000dc6:	3b04      	subs	r3, #4
 8000dc8:	0112      	lsls	r2, r2, #4
 8000dca:	b2d2      	uxtb	r2, r2
 8000dcc:	440b      	add	r3, r1
 8000dce:	761a      	strb	r2, [r3, #24]
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000e100 	.word	0xe000e100
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	; 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	f1c3 0307 	rsb	r3, r3, #7
 8000dfe:	2b04      	cmp	r3, #4
 8000e00:	bf28      	it	cs
 8000e02:	2304      	movcs	r3, #4
 8000e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	2b06      	cmp	r3, #6
 8000e0c:	d902      	bls.n	8000e14 <NVIC_EncodePriority+0x30>
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3b03      	subs	r3, #3
 8000e12:	e000      	b.n	8000e16 <NVIC_EncodePriority+0x32>
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43da      	mvns	r2, r3
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	401a      	ands	r2, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	43d9      	mvns	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	4313      	orrs	r3, r2
         );
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3724      	adds	r7, #36	; 0x24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e5c:	d301      	bcc.n	8000e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e00f      	b.n	8000e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e62:	4a0a      	ldr	r2, [pc, #40]	; (8000e8c <SysTick_Config+0x40>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e6a:	210f      	movs	r1, #15
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e70:	f7ff ff8e 	bl	8000d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <SysTick_Config+0x40>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7a:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <SysTick_Config+0x40>)
 8000e7c:	2207      	movs	r2, #7
 8000e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	e000e010 	.word	0xe000e010

08000e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff ff29 	bl	8000cf0 <__NVIC_SetPriorityGrouping>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
 8000eb2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb4:	f7ff ff40 	bl	8000d38 <__NVIC_GetPriorityGrouping>
 8000eb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	68b9      	ldr	r1, [r7, #8]
 8000ebe:	6978      	ldr	r0, [r7, #20]
 8000ec0:	f7ff ff90 	bl	8000de4 <NVIC_EncodePriority>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000eca:	4611      	mov	r1, r2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff5f 	bl	8000d90 <__NVIC_SetPriority>
}
 8000ed2:	bf00      	nop
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff33 	bl	8000d54 <__NVIC_EnableIRQ>
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ffa4 	bl	8000e4c <SysTick_Config>
 8000f04:	4603      	mov	r3, r0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000f14:	f3bf 8f5f 	dmb	sy
}
 8000f18:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000f1a:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <HAL_MPU_Disable+0x28>)
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1e:	4a06      	ldr	r2, [pc, #24]	; (8000f38 <HAL_MPU_Disable+0x28>)
 8000f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f24:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000f26:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <HAL_MPU_Disable+0x2c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	605a      	str	r2, [r3, #4]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00
 8000f3c:	e000ed90 	.word	0xe000ed90

08000f40 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000f48:	4a0b      	ldr	r2, [pc, #44]	; (8000f78 <HAL_MPU_Enable+0x38>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_MPU_Enable+0x3c>)
 8000f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f56:	4a09      	ldr	r2, [pc, #36]	; (8000f7c <HAL_MPU_Enable+0x3c>)
 8000f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f5c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000f5e:	f3bf 8f4f 	dsb	sy
}
 8000f62:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f64:	f3bf 8f6f 	isb	sy
}
 8000f68:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000ed90 	.word	0xe000ed90
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	785a      	ldrb	r2, [r3, #1]
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <HAL_MPU_ConfigRegion+0x84>)
 8000f8e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d029      	beq.n	8000fec <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000f98:	4a1a      	ldr	r2, [pc, #104]	; (8001004 <HAL_MPU_ConfigRegion+0x84>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	7b1b      	ldrb	r3, [r3, #12]
 8000fa4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	7adb      	ldrb	r3, [r3, #11]
 8000faa:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fac:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	7a9b      	ldrb	r3, [r3, #10]
 8000fb2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000fb4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	7b5b      	ldrb	r3, [r3, #13]
 8000fba:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000fbc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	7b9b      	ldrb	r3, [r3, #14]
 8000fc2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000fc4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	7bdb      	ldrb	r3, [r3, #15]
 8000fca:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000fcc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	7a5b      	ldrb	r3, [r3, #9]
 8000fd2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000fd4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	7a1b      	ldrb	r3, [r3, #8]
 8000fda:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000fdc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	7812      	ldrb	r2, [r2, #0]
 8000fe2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fe4:	4a07      	ldr	r2, [pc, #28]	; (8001004 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000fe6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fe8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000fea:	e005      	b.n	8000ff8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <HAL_MPU_ConfigRegion+0x84>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000ff2:	4b04      	ldr	r3, [pc, #16]	; (8001004 <HAL_MPU_ConfigRegion+0x84>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed90 	.word	0xe000ed90

08001008 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001008:	b480      	push	{r7}
 800100a:	b089      	sub	sp, #36	; 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001016:	4b89      	ldr	r3, [pc, #548]	; (800123c <HAL_GPIO_Init+0x234>)
 8001018:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800101a:	e194      	b.n	8001346 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	2101      	movs	r1, #1
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	fa01 f303 	lsl.w	r3, r1, r3
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	2b00      	cmp	r3, #0
 8001030:	f000 8186 	beq.w	8001340 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	2b01      	cmp	r3, #1
 800103e:	d005      	beq.n	800104c <HAL_GPIO_Init+0x44>
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d130      	bne.n	80010ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	2203      	movs	r2, #3
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	68da      	ldr	r2, [r3, #12]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001082:	2201      	movs	r2, #1
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	091b      	lsrs	r3, r3, #4
 8001098:	f003 0201 	and.w	r2, r3, #1
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d017      	beq.n	80010ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	2203      	movs	r2, #3
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4013      	ands	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	689a      	ldr	r2, [r3, #8]
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d123      	bne.n	800113e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	08da      	lsrs	r2, r3, #3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3208      	adds	r2, #8
 80010fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	220f      	movs	r2, #15
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	691a      	ldr	r2, [r3, #16]
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	f003 0307 	and.w	r3, r3, #7
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	08da      	lsrs	r2, r3, #3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3208      	adds	r2, #8
 8001138:	69b9      	ldr	r1, [r7, #24]
 800113a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	2203      	movs	r2, #3
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0203 	and.w	r2, r3, #3
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4313      	orrs	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 80e0 	beq.w	8001340 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001180:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <HAL_GPIO_Init+0x238>)
 8001182:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001186:	4a2e      	ldr	r2, [pc, #184]	; (8001240 <HAL_GPIO_Init+0x238>)
 8001188:	f043 0302 	orr.w	r3, r3, #2
 800118c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001190:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <HAL_GPIO_Init+0x238>)
 8001192:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800119e:	4a29      	ldr	r2, [pc, #164]	; (8001244 <HAL_GPIO_Init+0x23c>)
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	3302      	adds	r3, #2
 80011a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	220f      	movs	r2, #15
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a20      	ldr	r2, [pc, #128]	; (8001248 <HAL_GPIO_Init+0x240>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d052      	beq.n	8001270 <HAL_GPIO_Init+0x268>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a1f      	ldr	r2, [pc, #124]	; (800124c <HAL_GPIO_Init+0x244>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d031      	beq.n	8001236 <HAL_GPIO_Init+0x22e>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a1e      	ldr	r2, [pc, #120]	; (8001250 <HAL_GPIO_Init+0x248>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d02b      	beq.n	8001232 <HAL_GPIO_Init+0x22a>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a1d      	ldr	r2, [pc, #116]	; (8001254 <HAL_GPIO_Init+0x24c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d025      	beq.n	800122e <HAL_GPIO_Init+0x226>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a1c      	ldr	r2, [pc, #112]	; (8001258 <HAL_GPIO_Init+0x250>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d01f      	beq.n	800122a <HAL_GPIO_Init+0x222>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a1b      	ldr	r2, [pc, #108]	; (800125c <HAL_GPIO_Init+0x254>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d019      	beq.n	8001226 <HAL_GPIO_Init+0x21e>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a1a      	ldr	r2, [pc, #104]	; (8001260 <HAL_GPIO_Init+0x258>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d013      	beq.n	8001222 <HAL_GPIO_Init+0x21a>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a19      	ldr	r2, [pc, #100]	; (8001264 <HAL_GPIO_Init+0x25c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d00d      	beq.n	800121e <HAL_GPIO_Init+0x216>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a18      	ldr	r2, [pc, #96]	; (8001268 <HAL_GPIO_Init+0x260>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d007      	beq.n	800121a <HAL_GPIO_Init+0x212>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a17      	ldr	r2, [pc, #92]	; (800126c <HAL_GPIO_Init+0x264>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d101      	bne.n	8001216 <HAL_GPIO_Init+0x20e>
 8001212:	2309      	movs	r3, #9
 8001214:	e02d      	b.n	8001272 <HAL_GPIO_Init+0x26a>
 8001216:	230a      	movs	r3, #10
 8001218:	e02b      	b.n	8001272 <HAL_GPIO_Init+0x26a>
 800121a:	2308      	movs	r3, #8
 800121c:	e029      	b.n	8001272 <HAL_GPIO_Init+0x26a>
 800121e:	2307      	movs	r3, #7
 8001220:	e027      	b.n	8001272 <HAL_GPIO_Init+0x26a>
 8001222:	2306      	movs	r3, #6
 8001224:	e025      	b.n	8001272 <HAL_GPIO_Init+0x26a>
 8001226:	2305      	movs	r3, #5
 8001228:	e023      	b.n	8001272 <HAL_GPIO_Init+0x26a>
 800122a:	2304      	movs	r3, #4
 800122c:	e021      	b.n	8001272 <HAL_GPIO_Init+0x26a>
 800122e:	2303      	movs	r3, #3
 8001230:	e01f      	b.n	8001272 <HAL_GPIO_Init+0x26a>
 8001232:	2302      	movs	r3, #2
 8001234:	e01d      	b.n	8001272 <HAL_GPIO_Init+0x26a>
 8001236:	2301      	movs	r3, #1
 8001238:	e01b      	b.n	8001272 <HAL_GPIO_Init+0x26a>
 800123a:	bf00      	nop
 800123c:	58000080 	.word	0x58000080
 8001240:	58024400 	.word	0x58024400
 8001244:	58000400 	.word	0x58000400
 8001248:	58020000 	.word	0x58020000
 800124c:	58020400 	.word	0x58020400
 8001250:	58020800 	.word	0x58020800
 8001254:	58020c00 	.word	0x58020c00
 8001258:	58021000 	.word	0x58021000
 800125c:	58021400 	.word	0x58021400
 8001260:	58021800 	.word	0x58021800
 8001264:	58021c00 	.word	0x58021c00
 8001268:	58022000 	.word	0x58022000
 800126c:	58022400 	.word	0x58022400
 8001270:	2300      	movs	r3, #0
 8001272:	69fa      	ldr	r2, [r7, #28]
 8001274:	f002 0203 	and.w	r2, r2, #3
 8001278:	0092      	lsls	r2, r2, #2
 800127a:	4093      	lsls	r3, r2
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001282:	4938      	ldr	r1, [pc, #224]	; (8001364 <HAL_GPIO_Init+0x35c>)
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	089b      	lsrs	r3, r3, #2
 8001288:	3302      	adds	r3, #2
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80012b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80012be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	4013      	ands	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80012e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	43db      	mvns	r3, r3
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	4013      	ands	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d003      	beq.n	8001310 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	4313      	orrs	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d003      	beq.n	800133a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	3301      	adds	r3, #1
 8001344:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	fa22 f303 	lsr.w	r3, r2, r3
 8001350:	2b00      	cmp	r3, #0
 8001352:	f47f ae63 	bne.w	800101c <HAL_GPIO_Init+0x14>
  }
}
 8001356:	bf00      	nop
 8001358:	bf00      	nop
 800135a:	3724      	adds	r7, #36	; 0x24
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	58000400 	.word	0x58000400

08001368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
 8001374:	4613      	mov	r3, r2
 8001376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001378:	787b      	ldrb	r3, [r7, #1]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800137e:	887a      	ldrh	r2, [r7, #2]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001384:	e003      	b.n	800138e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001386:	887b      	ldrh	r3, [r7, #2]
 8001388:	041a      	lsls	r2, r3, #16
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	619a      	str	r2, [r3, #24]
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d101      	bne.n	80013ac <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e017      	b.n	80013dc <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d004      	beq.n	80013c2 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2280      	movs	r2, #128	; 0x80
 80013bc:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e00c      	b.n	80013dc <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2204      	movs	r2, #4
 80013c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68da      	ldr	r2, [r3, #12]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 0201 	bic.w	r2, r2, #1
 80013d8:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80013f0:	4b19      	ldr	r3, [pc, #100]	; (8001458 <HAL_PWREx_ConfigSupply+0x70>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	2b04      	cmp	r3, #4
 80013fa:	d00a      	beq.n	8001412 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80013fc:	4b16      	ldr	r3, [pc, #88]	; (8001458 <HAL_PWREx_ConfigSupply+0x70>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	429a      	cmp	r2, r3
 8001408:	d001      	beq.n	800140e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e01f      	b.n	800144e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e01d      	b.n	800144e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <HAL_PWREx_ConfigSupply+0x70>)
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	f023 0207 	bic.w	r2, r3, #7
 800141a:	490f      	ldr	r1, [pc, #60]	; (8001458 <HAL_PWREx_ConfigSupply+0x70>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4313      	orrs	r3, r2
 8001420:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001422:	f7ff fc4d 	bl	8000cc0 <HAL_GetTick>
 8001426:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001428:	e009      	b.n	800143e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800142a:	f7ff fc49 	bl	8000cc0 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001438:	d901      	bls.n	800143e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e007      	b.n	800144e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_PWREx_ConfigSupply+0x70>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800144a:	d1ee      	bne.n	800142a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	58024800 	.word	0x58024800

0800145c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af02      	add	r7, sp, #8
 8001462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001464:	f7ff fc2c 	bl	8000cc0 <HAL_GetTick>
 8001468:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e05f      	b.n	8001534 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	d107      	bne.n	8001490 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff f8bb 	bl	80005fc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8001486:	f241 3188 	movw	r1, #5000	; 0x1388
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 fc38 	bl	8001d00 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	3b01      	subs	r3, #1
 80014a0:	021a      	lsls	r2, r3, #8
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	430a      	orrs	r2, r1
 80014a8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2200      	movs	r2, #0
 80014b4:	2120      	movs	r1, #32
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 fc63 	bl	8001d82 <QSPI_WaitFlagStateUntilTimeout>
 80014bc:	4603      	mov	r3, r0
 80014be:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80014c0:	7afb      	ldrb	r3, [r7, #11]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d135      	bne.n	8001532 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b1b      	ldr	r3, [pc, #108]	; (800153c <HAL_QSPI_Init+0xe0>)
 80014ce:	4013      	ands	r3, r2
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	6852      	ldr	r2, [r2, #4]
 80014d4:	0611      	lsls	r1, r2, #24
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	68d2      	ldr	r2, [r2, #12]
 80014da:	4311      	orrs	r1, r2
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	69d2      	ldr	r2, [r2, #28]
 80014e0:	4311      	orrs	r1, r2
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	6a12      	ldr	r2, [r2, #32]
 80014e6:	4311      	orrs	r1, r2
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	6812      	ldr	r2, [r2, #0]
 80014ec:	430b      	orrs	r3, r1
 80014ee:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_QSPI_Init+0xe4>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	6912      	ldr	r2, [r2, #16]
 80014fe:	0411      	lsls	r1, r2, #16
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	6952      	ldr	r2, [r2, #20]
 8001504:	4311      	orrs	r1, r2
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	6992      	ldr	r2, [r2, #24]
 800150a:	4311      	orrs	r1, r2
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	6812      	ldr	r2, [r2, #0]
 8001510:	430b      	orrs	r3, r1
 8001512:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f042 0201 	orr.w	r2, r2, #1
 8001522:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8001532:	7afb      	ldrb	r3, [r7, #11]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	00ffff2f 	.word	0x00ffff2f
 8001540:	ffe0f8fe 	.word	0xffe0f8fe

08001544 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	2b00      	cmp	r3, #0
 8001564:	d064      	beq.n	8001630 <HAL_QSPI_IRQHandler+0xec>
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d05f      	beq.n	8001630 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	3320      	adds	r3, #32
 8001576:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b12      	cmp	r3, #18
 8001582:	d125      	bne.n	80015d0 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 8001584:	e01c      	b.n	80015c0 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158a:	2b00      	cmp	r3, #0
 800158c:	d00f      	beq.n	80015ae <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001592:	781a      	ldrb	r2, [r3, #0]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	1c5a      	adds	r2, r3, #1
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a6:	1e5a      	subs	r2, r3, #1
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80015ac:	e008      	b.n	80015c0 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015bc:	601a      	str	r2, [r3, #0]
          break;
 80015be:	e033      	b.n	8001628 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1db      	bne.n	8001586 <HAL_QSPI_IRQHandler+0x42>
 80015ce:	e02b      	b.n	8001628 <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	2b22      	cmp	r3, #34	; 0x22
 80015da:	d125      	bne.n	8001628 <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 80015dc:	e01d      	b.n	800161a <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d010      	beq.n	8001608 <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	7812      	ldrb	r2, [r2, #0]
 80015ee:	b2d2      	uxtb	r2, r2
 80015f0:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001600:	1e5a      	subs	r2, r3, #1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	639a      	str	r2, [r3, #56]	; 0x38
 8001606:	e008      	b.n	800161a <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001616:	601a      	str	r2, [r3, #0]
          break;
 8001618:	e006      	b.n	8001628 <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1da      	bne.n	80015de <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 fb4b 	bl	8001cc4 <HAL_QSPI_FifoThresholdCallback>
 800162e:	e13c      	b.n	80018aa <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	f000 80b0 	beq.w	800179c <HAL_QSPI_IRQHandler+0x258>
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 80aa 	beq.w	800179c <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2202      	movs	r2, #2
 800164e:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800165e:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b12      	cmp	r3, #18
 800166a:	d120      	bne.n	80016ae <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0304 	and.w	r3, r3, #4
 8001676:	2b00      	cmp	r3, #0
 8001678:	d011      	beq.n	800169e <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0204 	bic.w	r2, r2, #4
 8001688:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0201 	bic.w	r2, r2, #1
 800169c:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 fb02 	bl	8001cb0 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80016ac:	e0fa      	b.n	80018a4 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b22      	cmp	r3, #34	; 0x22
 80016b8:	d143      	bne.n	8001742 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d012      	beq.n	80016ee <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0204 	bic.w	r2, r2, #4
 80016d6:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68da      	ldr	r2, [r3, #12]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f022 0201 	bic.w	r2, r2, #1
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	e021      	b.n	8001732 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	3320      	adds	r3, #32
 80016f4:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 80016f6:	e013      	b.n	8001720 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d017      	beq.n	8001730 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001704:	68fa      	ldr	r2, [r7, #12]
 8001706:	7812      	ldrb	r2, [r2, #0]
 8001708:	b2d2      	uxtb	r2, r2
 800170a:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001710:	1c5a      	adds	r2, r3, #1
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800171a:	1e5a      	subs	r2, r3, #1
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1e4      	bne.n	80016f8 <HAL_QSPI_IRQHandler+0x1b4>
 800172e:	e000      	b.n	8001732 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8001730:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 faae 	bl	8001c9c <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8001740:	e0b0      	b.n	80018a4 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d107      	bne.n	800175e <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2201      	movs	r2, #1
 8001752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 fa96 	bl	8001c88 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800175c:	e0a2      	b.n	80018a4 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001764:	b2db      	uxtb	r3, r3
 8001766:	2b08      	cmp	r3, #8
 8001768:	f040 809c 	bne.w	80018a4 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	695a      	ldr	r2, [r3, #20]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800177a:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001788:	2b00      	cmp	r3, #0
 800178a:	d103      	bne.n	8001794 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 fa71 	bl	8001c74 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8001792:	e087      	b.n	80018a4 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 fa63 	bl	8001c60 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800179a:	e083      	b.n	80018a4 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	f003 0308 	and.w	r3, r3, #8
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d01f      	beq.n	80017e6 <HAL_QSPI_IRQHandler+0x2a2>
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d01a      	beq.n	80017e6 <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2208      	movs	r2, #8
 80017b6:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d00b      	beq.n	80017de <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80017d4:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 fa7a 	bl	8001cd8 <HAL_QSPI_StatusMatchCallback>
 80017e4:	e061      	b.n	80018aa <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d047      	beq.n	8001880 <HAL_QSPI_IRQHandler+0x33c>
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d042      	beq.n	8001880 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2201      	movs	r2, #1
 8001800:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001810:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	f043 0202 	orr.w	r2, r3, #2
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d021      	beq.n	8001870 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0204 	bic.w	r2, r2, #4
 800183a:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001840:	4a1c      	ldr	r2, [pc, #112]	; (80018b4 <HAL_QSPI_IRQHandler+0x370>)
 8001842:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fda6 	bl	800139a <HAL_MDMA_Abort_IT>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d029      	beq.n	80018a8 <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001858:	f043 0204 	orr.w	r2, r3, #4
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 f9f9 	bl	8001c60 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800186e:	e01b      	b.n	80018a8 <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 f9f1 	bl	8001c60 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800187e:	e013      	b.n	80018a8 <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f003 0310 	and.w	r3, r3, #16
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00f      	beq.n	80018aa <HAL_QSPI_IRQHandler+0x366>
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00a      	beq.n	80018aa <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2210      	movs	r2, #16
 800189a:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 fa25 	bl	8001cec <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 80018a2:	e002      	b.n	80018aa <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80018a4:	bf00      	nop
 80018a6:	e000      	b.n	80018aa <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 80018a8:	bf00      	nop
}
 80018aa:	bf00      	nop
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	08001d1d 	.word	0x08001d1d

080018b8 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af02      	add	r7, sp, #8
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80018c4:	f7ff f9fc 	bl	8000cc0 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d101      	bne.n	80018da <HAL_QSPI_Command+0x22>
 80018d6:	2302      	movs	r3, #2
 80018d8:	e048      	b.n	800196c <HAL_QSPI_Command+0xb4>
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d137      	bne.n	800195e <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2200      	movs	r2, #0
 80018f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2202      	movs	r2, #2
 80018f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	2200      	movs	r2, #0
 8001904:	2120      	movs	r1, #32
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f000 fa3b 	bl	8001d82 <QSPI_WaitFlagStateUntilTimeout>
 800190c:	4603      	mov	r3, r0
 800190e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001910:	7dfb      	ldrb	r3, [r7, #23]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d125      	bne.n	8001962 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8001916:	2200      	movs	r2, #0
 8001918:	68b9      	ldr	r1, [r7, #8]
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f000 fa68 	bl	8001df0 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	2b00      	cmp	r3, #0
 8001926:	d115      	bne.n	8001954 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	2201      	movs	r2, #1
 8001930:	2102      	movs	r1, #2
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f000 fa25 	bl	8001d82 <QSPI_WaitFlagStateUntilTimeout>
 8001938:	4603      	mov	r3, r0
 800193a:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800193c:	7dfb      	ldrb	r3, [r7, #23]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10f      	bne.n	8001962 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2202      	movs	r2, #2
 8001948:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001952:	e006      	b.n	8001962 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800195c:	e001      	b.n	8001962 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800195e:	2302      	movs	r3, #2
 8001960:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800196a:	7dfb      	ldrb	r3, [r7, #23]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	; 0x28
 8001978:	af02      	add	r7, sp, #8
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001980:	2300      	movs	r3, #0
 8001982:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8001984:	f7ff f99c 	bl	8000cc0 <HAL_GetTick>
 8001988:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	3320      	adds	r3, #32
 8001998:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d101      	bne.n	80019aa <HAL_QSPI_Receive+0x36>
 80019a6:	2302      	movs	r3, #2
 80019a8:	e07d      	b.n	8001aa6 <HAL_QSPI_Receive+0x132>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d16c      	bne.n	8001a98 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d05d      	beq.n	8001a86 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2222      	movs	r2, #34	; 0x22
 80019ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	1c5a      	adds	r2, r3, #1
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001a02:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8001a0c:	e01c      	b.n	8001a48 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	2201      	movs	r2, #1
 8001a16:	2106      	movs	r1, #6
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f000 f9b2 	bl	8001d82 <QSPI_WaitFlagStateUntilTimeout>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8001a22:	7ffb      	ldrb	r3, [r7, #31]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d114      	bne.n	8001a52 <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	7812      	ldrb	r2, [r2, #0]
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a38:	1c5a      	adds	r2, r3, #1
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a42:	1e5a      	subs	r2, r3, #1
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1de      	bne.n	8001a0e <HAL_QSPI_Receive+0x9a>
 8001a50:	e000      	b.n	8001a54 <HAL_QSPI_Receive+0xe0>
          break;
 8001a52:	bf00      	nop
      }

      if (status == HAL_OK)
 8001a54:	7ffb      	ldrb	r3, [r7, #31]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d110      	bne.n	8001a7c <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	2201      	movs	r2, #1
 8001a62:	2102      	movs	r1, #2
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f000 f98c 	bl	8001d82 <QSPI_WaitFlagStateUntilTimeout>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8001a6e:	7ffb      	ldrb	r3, [r7, #31]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d103      	bne.n	8001a7c <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2202      	movs	r2, #2
 8001a7a:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a84:	e00a      	b.n	8001a9c <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	f043 0208 	orr.w	r2, r3, #8
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	77fb      	strb	r3, [r7, #31]
 8001a96:	e001      	b.n	8001a9c <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8001aa4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3720      	adds	r7, #32
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b088      	sub	sp, #32
 8001ab2:	af02      	add	r7, sp, #8
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
 8001aba:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001abc:	f7ff f900 	bl	8000cc0 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d101      	bne.n	8001ad2 <HAL_QSPI_AutoPolling+0x24>
 8001ace:	2302      	movs	r3, #2
 8001ad0:	e060      	b.n	8001b94 <HAL_QSPI_AutoPolling+0xe6>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d14f      	bne.n	8001b86 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2242      	movs	r2, #66	; 0x42
 8001af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	2200      	movs	r2, #0
 8001afc:	2120      	movs	r1, #32
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 f93f 	bl	8001d82 <QSPI_WaitFlagStateUntilTimeout>
 8001b04:	4603      	mov	r3, r0
 8001b06:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001b08:	7dfb      	ldrb	r3, [r7, #23]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d13d      	bne.n	8001b8a <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6812      	ldr	r2, [r2, #0]
 8001b16:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6852      	ldr	r2, [r2, #4]
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	6892      	ldr	r2, [r2, #8]
 8001b2a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	691b      	ldr	r3, [r3, #16]
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001b44:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8001b4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b52:	68b9      	ldr	r1, [r7, #8]
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f000 f94b 	bl	8001df0 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	2201      	movs	r2, #1
 8001b62:	2108      	movs	r1, #8
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f000 f90c 	bl	8001d82 <QSPI_WaitFlagStateUntilTimeout>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8001b6e:	7dfb      	ldrb	r3, [r7, #23]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d10a      	bne.n	8001b8a <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2208      	movs	r2, #8
 8001b7a:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001b84:	e001      	b.n	8001b8a <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8001b86:	2302      	movs	r3, #2
 8001b88:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8001b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b088      	sub	sp, #32
 8001ba0:	af02      	add	r7, sp, #8
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8001ba8:	f7ff f88a 	bl	8000cc0 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d101      	bne.n	8001bbe <HAL_QSPI_MemoryMapped+0x22>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e04c      	b.n	8001c58 <HAL_QSPI_MemoryMapped+0xbc>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d13b      	bne.n	8001c4a <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2282      	movs	r2, #130	; 0x82
 8001bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	2200      	movs	r2, #0
 8001bea:	2120      	movs	r1, #32
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f000 f8c8 	bl	8001d82 <QSPI_WaitFlagStateUntilTimeout>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8001bf6:	7dfb      	ldrb	r3, [r7, #23]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d128      	bne.n	8001c4e <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 0108 	bic.w	r1, r3, #8
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d110      	bne.n	8001c3c <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6812      	ldr	r2, [r2, #0]
 8001c22:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2210      	movs	r2, #16
 8001c2a:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001c3a:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8001c3c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001c40:	68b9      	ldr	r1, [r7, #8]
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f000 f8d4 	bl	8001df0 <QSPI_Config>
 8001c48:	e001      	b.n	8001c4e <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8001c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b08      	cmp	r3, #8
 8001d40:	d114      	bne.n	8001d6c <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2202      	movs	r2, #2
 8001d48:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001d58:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 0202 	orr.w	r2, r2, #2
 8001d68:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 8001d6a:	e006      	b.n	8001d7a <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f7ff ff73 	bl	8001c60 <HAL_QSPI_ErrorCallback>
}
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b084      	sub	sp, #16
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	60f8      	str	r0, [r7, #12]
 8001d8a:	60b9      	str	r1, [r7, #8]
 8001d8c:	603b      	str	r3, [r7, #0]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001d92:	e01a      	b.n	8001dca <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d9a:	d016      	beq.n	8001dca <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d9c:	f7fe ff90 	bl	8000cc0 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d302      	bcc.n	8001db2 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10b      	bne.n	8001dca <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2204      	movs	r2, #4
 8001db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	f043 0201 	orr.w	r2, r3, #1
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e00e      	b.n	8001de8 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	bf14      	ite	ne
 8001dd8:	2301      	movne	r3, #1
 8001dda:	2300      	moveq	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	461a      	mov	r2, r3
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d1d6      	bne.n	8001d94 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d009      	beq.n	8001e18 <QSPI_Config+0x28>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001e0a:	d005      	beq.n	8001e18 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	3a01      	subs	r2, #1
 8001e16:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 80b9 	beq.w	8001f94 <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d05f      	beq.n	8001eea <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	6892      	ldr	r2, [r2, #8]
 8001e32:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	69db      	ldr	r3, [r3, #28]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d031      	beq.n	8001ea0 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	431a      	orrs	r2, r3
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	431a      	orrs	r2, r3
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	049b      	lsls	r3, r3, #18
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	431a      	orrs	r2, r3
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	69db      	ldr	r3, [r3, #28]
 8001e70:	431a      	orrs	r2, r3
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	431a      	orrs	r2, r3
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	ea42 0103 	orr.w	r1, r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001e90:	f000 812e 	beq.w	80020f0 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	6852      	ldr	r2, [r2, #4]
 8001e9c:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8001e9e:	e127      	b.n	80020f0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	049b      	lsls	r3, r3, #18
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	6a1b      	ldr	r3, [r3, #32]
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	431a      	orrs	r2, r3
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	ea42 0103 	orr.w	r1, r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	615a      	str	r2, [r3, #20]
}
 8001ee8:	e102      	b.n	80020f0 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d02e      	beq.n	8001f50 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	431a      	orrs	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f00:	431a      	orrs	r2, r3
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	431a      	orrs	r2, r3
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	049b      	lsls	r3, r3, #18
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	431a      	orrs	r2, r3
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	431a      	orrs	r2, r3
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	431a      	orrs	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	ea42 0103 	orr.w	r1, r2, r3
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001f40:	f000 80d6 	beq.w	80020f0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	6852      	ldr	r2, [r2, #4]
 8001f4c:	619a      	str	r2, [r3, #24]
}
 8001f4e:	e0cf      	b.n	80020f0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	431a      	orrs	r2, r3
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	049b      	lsls	r3, r3, #18
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	431a      	orrs	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	ea42 0103 	orr.w	r1, r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	615a      	str	r2, [r3, #20]
}
 8001f92:	e0ad      	b.n	80020f0 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d058      	beq.n	800204e <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	68ba      	ldr	r2, [r7, #8]
 8001fa2:	6892      	ldr	r2, [r2, #8]
 8001fa4:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d02d      	beq.n	800200a <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	049b      	lsls	r3, r3, #18
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	ea42 0103 	orr.w	r1, r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001ffc:	d078      	beq.n	80020f0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	6852      	ldr	r2, [r2, #4]
 8002006:	619a      	str	r2, [r3, #24]
}
 8002008:	e072      	b.n	80020f0 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	431a      	orrs	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002018:	431a      	orrs	r2, r3
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	431a      	orrs	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	049b      	lsls	r3, r3, #18
 8002026:	431a      	orrs	r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	431a      	orrs	r2, r3
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	431a      	orrs	r2, r3
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	431a      	orrs	r2, r3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	ea42 0103 	orr.w	r1, r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	430a      	orrs	r2, r1
 800204a:	615a      	str	r2, [r3, #20]
}
 800204c:	e050      	b.n	80020f0 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d02a      	beq.n	80020ac <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	431a      	orrs	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002064:	431a      	orrs	r2, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	431a      	orrs	r2, r3
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	049b      	lsls	r3, r3, #18
 8002072:	431a      	orrs	r2, r3
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	431a      	orrs	r2, r3
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	431a      	orrs	r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	431a      	orrs	r2, r3
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	ea42 0103 	orr.w	r1, r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	430a      	orrs	r2, r1
 8002096:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800209e:	d027      	beq.n	80020f0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	6852      	ldr	r2, [r2, #4]
 80020a8:	619a      	str	r2, [r3, #24]
}
 80020aa:	e021      	b.n	80020f0 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d01d      	beq.n	80020f0 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020bc:	431a      	orrs	r2, r3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c2:	431a      	orrs	r2, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	431a      	orrs	r2, r3
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	049b      	lsls	r3, r3, #18
 80020d0:	431a      	orrs	r2, r3
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	431a      	orrs	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	431a      	orrs	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	ea42 0103 	orr.w	r1, r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	430a      	orrs	r2, r1
 80020ee:	615a      	str	r2, [r3, #20]
}
 80020f0:	bf00      	nop
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08c      	sub	sp, #48	; 0x30
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d102      	bne.n	8002110 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	f000 bc1d 	b.w	800294a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 8087 	beq.w	800222c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800211e:	4b99      	ldr	r3, [pc, #612]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002126:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002128:	4b96      	ldr	r3, [pc, #600]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 800212a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800212e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002130:	2b10      	cmp	r3, #16
 8002132:	d007      	beq.n	8002144 <HAL_RCC_OscConfig+0x48>
 8002134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002136:	2b18      	cmp	r3, #24
 8002138:	d110      	bne.n	800215c <HAL_RCC_OscConfig+0x60>
 800213a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d10b      	bne.n	800215c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002144:	4b8f      	ldr	r3, [pc, #572]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d06c      	beq.n	800222a <HAL_RCC_OscConfig+0x12e>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d168      	bne.n	800222a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e3f6      	b.n	800294a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002164:	d106      	bne.n	8002174 <HAL_RCC_OscConfig+0x78>
 8002166:	4b87      	ldr	r3, [pc, #540]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a86      	ldr	r2, [pc, #536]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 800216c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e02e      	b.n	80021d2 <HAL_RCC_OscConfig+0xd6>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10c      	bne.n	8002196 <HAL_RCC_OscConfig+0x9a>
 800217c:	4b81      	ldr	r3, [pc, #516]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a80      	ldr	r2, [pc, #512]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 8002182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	4b7e      	ldr	r3, [pc, #504]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a7d      	ldr	r2, [pc, #500]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 800218e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002192:	6013      	str	r3, [r2, #0]
 8002194:	e01d      	b.n	80021d2 <HAL_RCC_OscConfig+0xd6>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800219e:	d10c      	bne.n	80021ba <HAL_RCC_OscConfig+0xbe>
 80021a0:	4b78      	ldr	r3, [pc, #480]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a77      	ldr	r2, [pc, #476]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 80021a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	4b75      	ldr	r3, [pc, #468]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a74      	ldr	r2, [pc, #464]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 80021b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	e00b      	b.n	80021d2 <HAL_RCC_OscConfig+0xd6>
 80021ba:	4b72      	ldr	r3, [pc, #456]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a71      	ldr	r2, [pc, #452]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 80021c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b6f      	ldr	r3, [pc, #444]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a6e      	ldr	r2, [pc, #440]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 80021cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d013      	beq.n	8002202 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021da:	f7fe fd71 	bl	8000cc0 <HAL_GetTick>
 80021de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021e2:	f7fe fd6d 	bl	8000cc0 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b64      	cmp	r3, #100	; 0x64
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e3aa      	b.n	800294a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021f4:	4b63      	ldr	r3, [pc, #396]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0xe6>
 8002200:	e014      	b.n	800222c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002202:	f7fe fd5d 	bl	8000cc0 <HAL_GetTick>
 8002206:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800220a:	f7fe fd59 	bl	8000cc0 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b64      	cmp	r3, #100	; 0x64
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e396      	b.n	800294a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800221c:	4b59      	ldr	r3, [pc, #356]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f0      	bne.n	800220a <HAL_RCC_OscConfig+0x10e>
 8002228:	e000      	b.n	800222c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800222a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80cb 	beq.w	80023d0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800223a:	4b52      	ldr	r3, [pc, #328]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002242:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002244:	4b4f      	ldr	r3, [pc, #316]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 8002246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002248:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800224a:	6a3b      	ldr	r3, [r7, #32]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d007      	beq.n	8002260 <HAL_RCC_OscConfig+0x164>
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	2b18      	cmp	r3, #24
 8002254:	d156      	bne.n	8002304 <HAL_RCC_OscConfig+0x208>
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f003 0303 	and.w	r3, r3, #3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d151      	bne.n	8002304 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002260:	4b48      	ldr	r3, [pc, #288]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_RCC_OscConfig+0x17c>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e368      	b.n	800294a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002278:	4b42      	ldr	r3, [pc, #264]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f023 0219 	bic.w	r2, r3, #25
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	493f      	ldr	r1, [pc, #252]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 8002286:	4313      	orrs	r3, r2
 8002288:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800228a:	f7fe fd19 	bl	8000cc0 <HAL_GetTick>
 800228e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002292:	f7fe fd15 	bl	8000cc0 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e352      	b.n	800294a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022a4:	4b37      	ldr	r3, [pc, #220]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0f0      	beq.n	8002292 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b0:	f7fe fd12 	bl	8000cd8 <HAL_GetREVID>
 80022b4:	4603      	mov	r3, r0
 80022b6:	f241 0203 	movw	r2, #4099	; 0x1003
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d817      	bhi.n	80022ee <HAL_RCC_OscConfig+0x1f2>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	2b40      	cmp	r3, #64	; 0x40
 80022c4:	d108      	bne.n	80022d8 <HAL_RCC_OscConfig+0x1dc>
 80022c6:	4b2f      	ldr	r3, [pc, #188]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80022ce:	4a2d      	ldr	r2, [pc, #180]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 80022d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022d6:	e07b      	b.n	80023d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d8:	4b2a      	ldr	r3, [pc, #168]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	031b      	lsls	r3, r3, #12
 80022e6:	4927      	ldr	r1, [pc, #156]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022ec:	e070      	b.n	80023d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ee:	4b25      	ldr	r3, [pc, #148]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	061b      	lsls	r3, r3, #24
 80022fc:	4921      	ldr	r1, [pc, #132]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002302:	e065      	b.n	80023d0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d048      	beq.n	800239e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800230c:	4b1d      	ldr	r3, [pc, #116]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f023 0219 	bic.w	r2, r3, #25
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	491a      	ldr	r1, [pc, #104]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 800231a:	4313      	orrs	r3, r2
 800231c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231e:	f7fe fccf 	bl	8000cc0 <HAL_GetTick>
 8002322:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002326:	f7fe fccb 	bl	8000cc0 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e308      	b.n	800294a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002338:	4b12      	ldr	r3, [pc, #72]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002344:	f7fe fcc8 	bl	8000cd8 <HAL_GetREVID>
 8002348:	4603      	mov	r3, r0
 800234a:	f241 0203 	movw	r2, #4099	; 0x1003
 800234e:	4293      	cmp	r3, r2
 8002350:	d81a      	bhi.n	8002388 <HAL_RCC_OscConfig+0x28c>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	2b40      	cmp	r3, #64	; 0x40
 8002358:	d108      	bne.n	800236c <HAL_RCC_OscConfig+0x270>
 800235a:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002362:	4a08      	ldr	r2, [pc, #32]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 8002364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002368:	6053      	str	r3, [r2, #4]
 800236a:	e031      	b.n	80023d0 <HAL_RCC_OscConfig+0x2d4>
 800236c:	4b05      	ldr	r3, [pc, #20]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	031b      	lsls	r3, r3, #12
 800237a:	4902      	ldr	r1, [pc, #8]	; (8002384 <HAL_RCC_OscConfig+0x288>)
 800237c:	4313      	orrs	r3, r2
 800237e:	604b      	str	r3, [r1, #4]
 8002380:	e026      	b.n	80023d0 <HAL_RCC_OscConfig+0x2d4>
 8002382:	bf00      	nop
 8002384:	58024400 	.word	0x58024400
 8002388:	4b9a      	ldr	r3, [pc, #616]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	061b      	lsls	r3, r3, #24
 8002396:	4997      	ldr	r1, [pc, #604]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 8002398:	4313      	orrs	r3, r2
 800239a:	604b      	str	r3, [r1, #4]
 800239c:	e018      	b.n	80023d0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800239e:	4b95      	ldr	r3, [pc, #596]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a94      	ldr	r2, [pc, #592]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80023a4:	f023 0301 	bic.w	r3, r3, #1
 80023a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023aa:	f7fe fc89 	bl	8000cc0 <HAL_GetTick>
 80023ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023b2:	f7fe fc85 	bl	8000cc0 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e2c2      	b.n	800294a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023c4:	4b8b      	ldr	r3, [pc, #556]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1f0      	bne.n	80023b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0310 	and.w	r3, r3, #16
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 80a9 	beq.w	8002530 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023de:	4b85      	ldr	r3, [pc, #532]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023e8:	4b82      	ldr	r3, [pc, #520]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d007      	beq.n	8002404 <HAL_RCC_OscConfig+0x308>
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	2b18      	cmp	r3, #24
 80023f8:	d13a      	bne.n	8002470 <HAL_RCC_OscConfig+0x374>
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	2b01      	cmp	r3, #1
 8002402:	d135      	bne.n	8002470 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002404:	4b7b      	ldr	r3, [pc, #492]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_RCC_OscConfig+0x320>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	2b80      	cmp	r3, #128	; 0x80
 8002416:	d001      	beq.n	800241c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e296      	b.n	800294a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800241c:	f7fe fc5c 	bl	8000cd8 <HAL_GetREVID>
 8002420:	4603      	mov	r3, r0
 8002422:	f241 0203 	movw	r2, #4099	; 0x1003
 8002426:	4293      	cmp	r3, r2
 8002428:	d817      	bhi.n	800245a <HAL_RCC_OscConfig+0x35e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	2b20      	cmp	r3, #32
 8002430:	d108      	bne.n	8002444 <HAL_RCC_OscConfig+0x348>
 8002432:	4b70      	ldr	r3, [pc, #448]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800243a:	4a6e      	ldr	r2, [pc, #440]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 800243c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002440:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002442:	e075      	b.n	8002530 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002444:	4b6b      	ldr	r3, [pc, #428]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	069b      	lsls	r3, r3, #26
 8002452:	4968      	ldr	r1, [pc, #416]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 8002454:	4313      	orrs	r3, r2
 8002456:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002458:	e06a      	b.n	8002530 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800245a:	4b66      	ldr	r3, [pc, #408]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	061b      	lsls	r3, r3, #24
 8002468:	4962      	ldr	r1, [pc, #392]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 800246a:	4313      	orrs	r3, r2
 800246c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800246e:	e05f      	b.n	8002530 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d042      	beq.n	80024fe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002478:	4b5e      	ldr	r3, [pc, #376]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a5d      	ldr	r2, [pc, #372]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 800247e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7fe fc1c 	bl	8000cc0 <HAL_GetTick>
 8002488:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800248c:	f7fe fc18 	bl	8000cc0 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e255      	b.n	800294a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800249e:	4b55      	ldr	r3, [pc, #340]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0f0      	beq.n	800248c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024aa:	f7fe fc15 	bl	8000cd8 <HAL_GetREVID>
 80024ae:	4603      	mov	r3, r0
 80024b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d817      	bhi.n	80024e8 <HAL_RCC_OscConfig+0x3ec>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	2b20      	cmp	r3, #32
 80024be:	d108      	bne.n	80024d2 <HAL_RCC_OscConfig+0x3d6>
 80024c0:	4b4c      	ldr	r3, [pc, #304]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80024c8:	4a4a      	ldr	r2, [pc, #296]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80024ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80024ce:	6053      	str	r3, [r2, #4]
 80024d0:	e02e      	b.n	8002530 <HAL_RCC_OscConfig+0x434>
 80024d2:	4b48      	ldr	r3, [pc, #288]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	069b      	lsls	r3, r3, #26
 80024e0:	4944      	ldr	r1, [pc, #272]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	604b      	str	r3, [r1, #4]
 80024e6:	e023      	b.n	8002530 <HAL_RCC_OscConfig+0x434>
 80024e8:	4b42      	ldr	r3, [pc, #264]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	061b      	lsls	r3, r3, #24
 80024f6:	493f      	ldr	r1, [pc, #252]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	60cb      	str	r3, [r1, #12]
 80024fc:	e018      	b.n	8002530 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80024fe:	4b3d      	ldr	r3, [pc, #244]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a3c      	ldr	r2, [pc, #240]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 8002504:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250a:	f7fe fbd9 	bl	8000cc0 <HAL_GetTick>
 800250e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002512:	f7fe fbd5 	bl	8000cc0 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e212      	b.n	800294a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002524:	4b33      	ldr	r3, [pc, #204]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f0      	bne.n	8002512 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d036      	beq.n	80025aa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d019      	beq.n	8002578 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002544:	4b2b      	ldr	r3, [pc, #172]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 8002546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002548:	4a2a      	ldr	r2, [pc, #168]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002550:	f7fe fbb6 	bl	8000cc0 <HAL_GetTick>
 8002554:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002558:	f7fe fbb2 	bl	8000cc0 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e1ef      	b.n	800294a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800256a:	4b22      	ldr	r3, [pc, #136]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 800256c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0x45c>
 8002576:	e018      	b.n	80025aa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002578:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 800257a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257c:	4a1d      	ldr	r2, [pc, #116]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 800257e:	f023 0301 	bic.w	r3, r3, #1
 8002582:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002584:	f7fe fb9c 	bl	8000cc0 <HAL_GetTick>
 8002588:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800258c:	f7fe fb98 	bl	8000cc0 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e1d5      	b.n	800294a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80025a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f0      	bne.n	800258c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0320 	and.w	r3, r3, #32
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d039      	beq.n	800262a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d01c      	beq.n	80025f8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025be:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a0c      	ldr	r2, [pc, #48]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80025c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025ca:	f7fe fb79 	bl	8000cc0 <HAL_GetTick>
 80025ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80025d2:	f7fe fb75 	bl	8000cc0 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e1b2      	b.n	800294a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025e4:	4b03      	ldr	r3, [pc, #12]	; (80025f4 <HAL_RCC_OscConfig+0x4f8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0x4d6>
 80025f0:	e01b      	b.n	800262a <HAL_RCC_OscConfig+0x52e>
 80025f2:	bf00      	nop
 80025f4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025f8:	4b9b      	ldr	r3, [pc, #620]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a9a      	ldr	r2, [pc, #616]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80025fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002602:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002604:	f7fe fb5c 	bl	8000cc0 <HAL_GetTick>
 8002608:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800260c:	f7fe fb58 	bl	8000cc0 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e195      	b.n	800294a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800261e:	4b92      	ldr	r3, [pc, #584]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1f0      	bne.n	800260c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 8081 	beq.w	800273a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002638:	4b8c      	ldr	r3, [pc, #560]	; (800286c <HAL_RCC_OscConfig+0x770>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a8b      	ldr	r2, [pc, #556]	; (800286c <HAL_RCC_OscConfig+0x770>)
 800263e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002642:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002644:	f7fe fb3c 	bl	8000cc0 <HAL_GetTick>
 8002648:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800264c:	f7fe fb38 	bl	8000cc0 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b64      	cmp	r3, #100	; 0x64
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e175      	b.n	800294a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800265e:	4b83      	ldr	r3, [pc, #524]	; (800286c <HAL_RCC_OscConfig+0x770>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f0      	beq.n	800264c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d106      	bne.n	8002680 <HAL_RCC_OscConfig+0x584>
 8002672:	4b7d      	ldr	r3, [pc, #500]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002676:	4a7c      	ldr	r2, [pc, #496]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	6713      	str	r3, [r2, #112]	; 0x70
 800267e:	e02d      	b.n	80026dc <HAL_RCC_OscConfig+0x5e0>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10c      	bne.n	80026a2 <HAL_RCC_OscConfig+0x5a6>
 8002688:	4b77      	ldr	r3, [pc, #476]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268c:	4a76      	ldr	r2, [pc, #472]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 800268e:	f023 0301 	bic.w	r3, r3, #1
 8002692:	6713      	str	r3, [r2, #112]	; 0x70
 8002694:	4b74      	ldr	r3, [pc, #464]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002698:	4a73      	ldr	r2, [pc, #460]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 800269a:	f023 0304 	bic.w	r3, r3, #4
 800269e:	6713      	str	r3, [r2, #112]	; 0x70
 80026a0:	e01c      	b.n	80026dc <HAL_RCC_OscConfig+0x5e0>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	2b05      	cmp	r3, #5
 80026a8:	d10c      	bne.n	80026c4 <HAL_RCC_OscConfig+0x5c8>
 80026aa:	4b6f      	ldr	r3, [pc, #444]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80026ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ae:	4a6e      	ldr	r2, [pc, #440]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80026b0:	f043 0304 	orr.w	r3, r3, #4
 80026b4:	6713      	str	r3, [r2, #112]	; 0x70
 80026b6:	4b6c      	ldr	r3, [pc, #432]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80026b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ba:	4a6b      	ldr	r2, [pc, #428]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6713      	str	r3, [r2, #112]	; 0x70
 80026c2:	e00b      	b.n	80026dc <HAL_RCC_OscConfig+0x5e0>
 80026c4:	4b68      	ldr	r3, [pc, #416]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80026c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c8:	4a67      	ldr	r2, [pc, #412]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80026ca:	f023 0301 	bic.w	r3, r3, #1
 80026ce:	6713      	str	r3, [r2, #112]	; 0x70
 80026d0:	4b65      	ldr	r3, [pc, #404]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80026d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d4:	4a64      	ldr	r2, [pc, #400]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80026d6:	f023 0304 	bic.w	r3, r3, #4
 80026da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d015      	beq.n	8002710 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e4:	f7fe faec 	bl	8000cc0 <HAL_GetTick>
 80026e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026ea:	e00a      	b.n	8002702 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ec:	f7fe fae8 	bl	8000cc0 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e123      	b.n	800294a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002702:	4b59      	ldr	r3, [pc, #356]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0ee      	beq.n	80026ec <HAL_RCC_OscConfig+0x5f0>
 800270e:	e014      	b.n	800273a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002710:	f7fe fad6 	bl	8000cc0 <HAL_GetTick>
 8002714:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002716:	e00a      	b.n	800272e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002718:	f7fe fad2 	bl	8000cc0 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	f241 3288 	movw	r2, #5000	; 0x1388
 8002726:	4293      	cmp	r3, r2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e10d      	b.n	800294a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800272e:	4b4e      	ldr	r3, [pc, #312]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1ee      	bne.n	8002718 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 8102 	beq.w	8002948 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002744:	4b48      	ldr	r3, [pc, #288]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800274c:	2b18      	cmp	r3, #24
 800274e:	f000 80bd 	beq.w	80028cc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	2b02      	cmp	r3, #2
 8002758:	f040 809e 	bne.w	8002898 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275c:	4b42      	ldr	r3, [pc, #264]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a41      	ldr	r2, [pc, #260]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002762:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002768:	f7fe faaa 	bl	8000cc0 <HAL_GetTick>
 800276c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002770:	f7fe faa6 	bl	8000cc0 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e0e3      	b.n	800294a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002782:	4b39      	ldr	r3, [pc, #228]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800278e:	4b36      	ldr	r3, [pc, #216]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002790:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002792:	4b37      	ldr	r3, [pc, #220]	; (8002870 <HAL_RCC_OscConfig+0x774>)
 8002794:	4013      	ands	r3, r2
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800279e:	0112      	lsls	r2, r2, #4
 80027a0:	430a      	orrs	r2, r1
 80027a2:	4931      	ldr	r1, [pc, #196]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	628b      	str	r3, [r1, #40]	; 0x28
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	3b01      	subs	r3, #1
 80027ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b6:	3b01      	subs	r3, #1
 80027b8:	025b      	lsls	r3, r3, #9
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	431a      	orrs	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c2:	3b01      	subs	r3, #1
 80027c4:	041b      	lsls	r3, r3, #16
 80027c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d0:	3b01      	subs	r3, #1
 80027d2:	061b      	lsls	r3, r3, #24
 80027d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80027d8:	4923      	ldr	r1, [pc, #140]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80027de:	4b22      	ldr	r3, [pc, #136]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80027e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e2:	4a21      	ldr	r2, [pc, #132]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80027e4:	f023 0301 	bic.w	r3, r3, #1
 80027e8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80027ea:	4b1f      	ldr	r3, [pc, #124]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80027ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027ee:	4b21      	ldr	r3, [pc, #132]	; (8002874 <HAL_RCC_OscConfig+0x778>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027f6:	00d2      	lsls	r2, r2, #3
 80027f8:	491b      	ldr	r1, [pc, #108]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80027fe:	4b1a      	ldr	r3, [pc, #104]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	f023 020c 	bic.w	r2, r3, #12
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	4917      	ldr	r1, [pc, #92]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 800280c:	4313      	orrs	r3, r2
 800280e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002810:	4b15      	ldr	r3, [pc, #84]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002814:	f023 0202 	bic.w	r2, r3, #2
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281c:	4912      	ldr	r1, [pc, #72]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 800281e:	4313      	orrs	r3, r2
 8002820:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002822:	4b11      	ldr	r3, [pc, #68]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002826:	4a10      	ldr	r2, [pc, #64]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800282c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800282e:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002832:	4a0d      	ldr	r2, [pc, #52]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002838:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800283a:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 800283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283e:	4a0a      	ldr	r2, [pc, #40]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002844:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002846:	4b08      	ldr	r3, [pc, #32]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284a:	4a07      	ldr	r2, [pc, #28]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002852:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a04      	ldr	r2, [pc, #16]	; (8002868 <HAL_RCC_OscConfig+0x76c>)
 8002858:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800285c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285e:	f7fe fa2f 	bl	8000cc0 <HAL_GetTick>
 8002862:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002864:	e011      	b.n	800288a <HAL_RCC_OscConfig+0x78e>
 8002866:	bf00      	nop
 8002868:	58024400 	.word	0x58024400
 800286c:	58024800 	.word	0x58024800
 8002870:	fffffc0c 	.word	0xfffffc0c
 8002874:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002878:	f7fe fa22 	bl	8000cc0 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e05f      	b.n	800294a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800288a:	4b32      	ldr	r3, [pc, #200]	; (8002954 <HAL_RCC_OscConfig+0x858>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0x77c>
 8002896:	e057      	b.n	8002948 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002898:	4b2e      	ldr	r3, [pc, #184]	; (8002954 <HAL_RCC_OscConfig+0x858>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a2d      	ldr	r2, [pc, #180]	; (8002954 <HAL_RCC_OscConfig+0x858>)
 800289e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a4:	f7fe fa0c 	bl	8000cc0 <HAL_GetTick>
 80028a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ac:	f7fe fa08 	bl	8000cc0 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e045      	b.n	800294a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028be:	4b25      	ldr	r3, [pc, #148]	; (8002954 <HAL_RCC_OscConfig+0x858>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x7b0>
 80028ca:	e03d      	b.n	8002948 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80028cc:	4b21      	ldr	r3, [pc, #132]	; (8002954 <HAL_RCC_OscConfig+0x858>)
 80028ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80028d2:	4b20      	ldr	r3, [pc, #128]	; (8002954 <HAL_RCC_OscConfig+0x858>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d031      	beq.n	8002944 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	f003 0203 	and.w	r2, r3, #3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d12a      	bne.n	8002944 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	091b      	lsrs	r3, r3, #4
 80028f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d122      	bne.n	8002944 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002908:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800290a:	429a      	cmp	r2, r3
 800290c:	d11a      	bne.n	8002944 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	0a5b      	lsrs	r3, r3, #9
 8002912:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800291c:	429a      	cmp	r2, r3
 800291e:	d111      	bne.n	8002944 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	0c1b      	lsrs	r3, r3, #16
 8002924:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800292e:	429a      	cmp	r2, r3
 8002930:	d108      	bne.n	8002944 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	0e1b      	lsrs	r3, r3, #24
 8002936:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3730      	adds	r7, #48	; 0x30
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	58024400 	.word	0x58024400

08002958 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e19c      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800296c:	4b8a      	ldr	r3, [pc, #552]	; (8002b98 <HAL_RCC_ClockConfig+0x240>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 030f 	and.w	r3, r3, #15
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d910      	bls.n	800299c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297a:	4b87      	ldr	r3, [pc, #540]	; (8002b98 <HAL_RCC_ClockConfig+0x240>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 020f 	bic.w	r2, r3, #15
 8002982:	4985      	ldr	r1, [pc, #532]	; (8002b98 <HAL_RCC_ClockConfig+0x240>)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	4313      	orrs	r3, r2
 8002988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298a:	4b83      	ldr	r3, [pc, #524]	; (8002b98 <HAL_RCC_ClockConfig+0x240>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d001      	beq.n	800299c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e184      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d010      	beq.n	80029ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	4b7b      	ldr	r3, [pc, #492]	; (8002b9c <HAL_RCC_ClockConfig+0x244>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d908      	bls.n	80029ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80029b8:	4b78      	ldr	r3, [pc, #480]	; (8002b9c <HAL_RCC_ClockConfig+0x244>)
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	4975      	ldr	r1, [pc, #468]	; (8002b9c <HAL_RCC_ClockConfig+0x244>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d010      	beq.n	80029f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695a      	ldr	r2, [r3, #20]
 80029da:	4b70      	ldr	r3, [pc, #448]	; (8002b9c <HAL_RCC_ClockConfig+0x244>)
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d908      	bls.n	80029f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80029e6:	4b6d      	ldr	r3, [pc, #436]	; (8002b9c <HAL_RCC_ClockConfig+0x244>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	496a      	ldr	r1, [pc, #424]	; (8002b9c <HAL_RCC_ClockConfig+0x244>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d010      	beq.n	8002a26 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699a      	ldr	r2, [r3, #24]
 8002a08:	4b64      	ldr	r3, [pc, #400]	; (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d908      	bls.n	8002a26 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a14:	4b61      	ldr	r3, [pc, #388]	; (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	495e      	ldr	r1, [pc, #376]	; (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0320 	and.w	r3, r3, #32
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d010      	beq.n	8002a54 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69da      	ldr	r2, [r3, #28]
 8002a36:	4b59      	ldr	r3, [pc, #356]	; (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d908      	bls.n	8002a54 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002a42:	4b56      	ldr	r3, [pc, #344]	; (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	4953      	ldr	r1, [pc, #332]	; (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d010      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	4b4d      	ldr	r3, [pc, #308]	; (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d908      	bls.n	8002a82 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a70:	4b4a      	ldr	r3, [pc, #296]	; (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	f023 020f 	bic.w	r2, r3, #15
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	4947      	ldr	r1, [pc, #284]	; (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d055      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002a8e:	4b43      	ldr	r3, [pc, #268]	; (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	4940      	ldr	r1, [pc, #256]	; (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d107      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002aa8:	4b3c      	ldr	r3, [pc, #240]	; (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d121      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0f6      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d107      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ac0:	4b36      	ldr	r3, [pc, #216]	; (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d115      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0ea      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d107      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ad8:	4b30      	ldr	r3, [pc, #192]	; (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d109      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e0de      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ae8:	4b2c      	ldr	r3, [pc, #176]	; (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0d6      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002af8:	4b28      	ldr	r3, [pc, #160]	; (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	f023 0207 	bic.w	r2, r3, #7
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	4925      	ldr	r1, [pc, #148]	; (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0a:	f7fe f8d9 	bl	8000cc0 <HAL_GetTick>
 8002b0e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b10:	e00a      	b.n	8002b28 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b12:	f7fe f8d5 	bl	8000cc0 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e0be      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b28:	4b1c      	ldr	r3, [pc, #112]	; (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d1eb      	bne.n	8002b12 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d010      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d208      	bcs.n	8002b68 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b56:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	f023 020f 	bic.w	r2, r3, #15
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	490e      	ldr	r1, [pc, #56]	; (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <HAL_RCC_ClockConfig+0x240>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 030f 	and.w	r3, r3, #15
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d214      	bcs.n	8002ba0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b76:	4b08      	ldr	r3, [pc, #32]	; (8002b98 <HAL_RCC_ClockConfig+0x240>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 020f 	bic.w	r2, r3, #15
 8002b7e:	4906      	ldr	r1, [pc, #24]	; (8002b98 <HAL_RCC_ClockConfig+0x240>)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b86:	4b04      	ldr	r3, [pc, #16]	; (8002b98 <HAL_RCC_ClockConfig+0x240>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d005      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e086      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x34e>
 8002b98:	52002000 	.word	0x52002000
 8002b9c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d010      	beq.n	8002bce <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691a      	ldr	r2, [r3, #16]
 8002bb0:	4b3f      	ldr	r3, [pc, #252]	; (8002cb0 <HAL_RCC_ClockConfig+0x358>)
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d208      	bcs.n	8002bce <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002bbc:	4b3c      	ldr	r3, [pc, #240]	; (8002cb0 <HAL_RCC_ClockConfig+0x358>)
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	4939      	ldr	r1, [pc, #228]	; (8002cb0 <HAL_RCC_ClockConfig+0x358>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d010      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695a      	ldr	r2, [r3, #20]
 8002bde:	4b34      	ldr	r3, [pc, #208]	; (8002cb0 <HAL_RCC_ClockConfig+0x358>)
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d208      	bcs.n	8002bfc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002bea:	4b31      	ldr	r3, [pc, #196]	; (8002cb0 <HAL_RCC_ClockConfig+0x358>)
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	492e      	ldr	r1, [pc, #184]	; (8002cb0 <HAL_RCC_ClockConfig+0x358>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d010      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699a      	ldr	r2, [r3, #24]
 8002c0c:	4b28      	ldr	r3, [pc, #160]	; (8002cb0 <HAL_RCC_ClockConfig+0x358>)
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d208      	bcs.n	8002c2a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c18:	4b25      	ldr	r3, [pc, #148]	; (8002cb0 <HAL_RCC_ClockConfig+0x358>)
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	4922      	ldr	r1, [pc, #136]	; (8002cb0 <HAL_RCC_ClockConfig+0x358>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0320 	and.w	r3, r3, #32
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d010      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69da      	ldr	r2, [r3, #28]
 8002c3a:	4b1d      	ldr	r3, [pc, #116]	; (8002cb0 <HAL_RCC_ClockConfig+0x358>)
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d208      	bcs.n	8002c58 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002c46:	4b1a      	ldr	r3, [pc, #104]	; (8002cb0 <HAL_RCC_ClockConfig+0x358>)
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	4917      	ldr	r1, [pc, #92]	; (8002cb0 <HAL_RCC_ClockConfig+0x358>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c58:	f000 f834 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	4b14      	ldr	r3, [pc, #80]	; (8002cb0 <HAL_RCC_ClockConfig+0x358>)
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	0a1b      	lsrs	r3, r3, #8
 8002c64:	f003 030f 	and.w	r3, r3, #15
 8002c68:	4912      	ldr	r1, [pc, #72]	; (8002cb4 <HAL_RCC_ClockConfig+0x35c>)
 8002c6a:	5ccb      	ldrb	r3, [r1, r3]
 8002c6c:	f003 031f 	and.w	r3, r3, #31
 8002c70:	fa22 f303 	lsr.w	r3, r2, r3
 8002c74:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c76:	4b0e      	ldr	r3, [pc, #56]	; (8002cb0 <HAL_RCC_ClockConfig+0x358>)
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	4a0d      	ldr	r2, [pc, #52]	; (8002cb4 <HAL_RCC_ClockConfig+0x35c>)
 8002c80:	5cd3      	ldrb	r3, [r2, r3]
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	fa22 f303 	lsr.w	r3, r2, r3
 8002c8c:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <HAL_RCC_ClockConfig+0x360>)
 8002c8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c90:	4a0a      	ldr	r2, [pc, #40]	; (8002cbc <HAL_RCC_ClockConfig+0x364>)
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002c96:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <HAL_RCC_ClockConfig+0x368>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fd ffc6 	bl	8000c2c <HAL_InitTick>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	58024400 	.word	0x58024400
 8002cb4:	0800417c 	.word	0x0800417c
 8002cb8:	24000004 	.word	0x24000004
 8002cbc:	24000000 	.word	0x24000000
 8002cc0:	24000008 	.word	0x24000008

08002cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b089      	sub	sp, #36	; 0x24
 8002cc8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cca:	4bb3      	ldr	r3, [pc, #716]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cd2:	2b18      	cmp	r3, #24
 8002cd4:	f200 8155 	bhi.w	8002f82 <HAL_RCC_GetSysClockFreq+0x2be>
 8002cd8:	a201      	add	r2, pc, #4	; (adr r2, 8002ce0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cde:	bf00      	nop
 8002ce0:	08002d45 	.word	0x08002d45
 8002ce4:	08002f83 	.word	0x08002f83
 8002ce8:	08002f83 	.word	0x08002f83
 8002cec:	08002f83 	.word	0x08002f83
 8002cf0:	08002f83 	.word	0x08002f83
 8002cf4:	08002f83 	.word	0x08002f83
 8002cf8:	08002f83 	.word	0x08002f83
 8002cfc:	08002f83 	.word	0x08002f83
 8002d00:	08002d6b 	.word	0x08002d6b
 8002d04:	08002f83 	.word	0x08002f83
 8002d08:	08002f83 	.word	0x08002f83
 8002d0c:	08002f83 	.word	0x08002f83
 8002d10:	08002f83 	.word	0x08002f83
 8002d14:	08002f83 	.word	0x08002f83
 8002d18:	08002f83 	.word	0x08002f83
 8002d1c:	08002f83 	.word	0x08002f83
 8002d20:	08002d71 	.word	0x08002d71
 8002d24:	08002f83 	.word	0x08002f83
 8002d28:	08002f83 	.word	0x08002f83
 8002d2c:	08002f83 	.word	0x08002f83
 8002d30:	08002f83 	.word	0x08002f83
 8002d34:	08002f83 	.word	0x08002f83
 8002d38:	08002f83 	.word	0x08002f83
 8002d3c:	08002f83 	.word	0x08002f83
 8002d40:	08002d77 	.word	0x08002d77
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d44:	4b94      	ldr	r3, [pc, #592]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0320 	and.w	r3, r3, #32
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d009      	beq.n	8002d64 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002d50:	4b91      	ldr	r3, [pc, #580]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	08db      	lsrs	r3, r3, #3
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	4a90      	ldr	r2, [pc, #576]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d60:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002d62:	e111      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002d64:	4b8d      	ldr	r3, [pc, #564]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d66:	61bb      	str	r3, [r7, #24]
    break;
 8002d68:	e10e      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002d6a:	4b8d      	ldr	r3, [pc, #564]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d6c:	61bb      	str	r3, [r7, #24]
    break;
 8002d6e:	e10b      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002d70:	4b8c      	ldr	r3, [pc, #560]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002d72:	61bb      	str	r3, [r7, #24]
    break;
 8002d74:	e108      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002d76:	4b88      	ldr	r3, [pc, #544]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002d80:	4b85      	ldr	r3, [pc, #532]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d84:	091b      	lsrs	r3, r3, #4
 8002d86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d8a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002d8c:	4b82      	ldr	r3, [pc, #520]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002d96:	4b80      	ldr	r3, [pc, #512]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9a:	08db      	lsrs	r3, r3, #3
 8002d9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	fb02 f303 	mul.w	r3, r2, r3
 8002da6:	ee07 3a90 	vmov	s15, r3
 8002daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dae:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80e1 	beq.w	8002f7c <HAL_RCC_GetSysClockFreq+0x2b8>
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	f000 8083 	beq.w	8002ec8 <HAL_RCC_GetSysClockFreq+0x204>
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	f200 80a1 	bhi.w	8002f0c <HAL_RCC_GetSysClockFreq+0x248>
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x114>
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d056      	beq.n	8002e84 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002dd6:	e099      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dd8:	4b6f      	ldr	r3, [pc, #444]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0320 	and.w	r3, r3, #32
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d02d      	beq.n	8002e40 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002de4:	4b6c      	ldr	r3, [pc, #432]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	08db      	lsrs	r3, r3, #3
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	4a6b      	ldr	r2, [pc, #428]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002df0:	fa22 f303 	lsr.w	r3, r2, r3
 8002df4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	ee07 3a90 	vmov	s15, r3
 8002dfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	ee07 3a90 	vmov	s15, r3
 8002e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e0e:	4b62      	ldr	r3, [pc, #392]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e16:	ee07 3a90 	vmov	s15, r3
 8002e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e22:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002fa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002e3e:	e087      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	ee07 3a90 	vmov	s15, r3
 8002e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e4a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002fac <HAL_RCC_GetSysClockFreq+0x2e8>
 8002e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e52:	4b51      	ldr	r3, [pc, #324]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e5a:	ee07 3a90 	vmov	s15, r3
 8002e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e62:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e66:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002fa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e82:	e065      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	ee07 3a90 	vmov	s15, r3
 8002e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e8e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002fb0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e96:	4b40      	ldr	r3, [pc, #256]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e9e:	ee07 3a90 	vmov	s15, r3
 8002ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ea6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002eaa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002fa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ec6:	e043      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	ee07 3a90 	vmov	s15, r3
 8002ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ed2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002fb4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eda:	4b2f      	ldr	r3, [pc, #188]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee2:	ee07 3a90 	vmov	s15, r3
 8002ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eea:	ed97 6a02 	vldr	s12, [r7, #8]
 8002eee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002fa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002efa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f0a:	e021      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	ee07 3a90 	vmov	s15, r3
 8002f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f16:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002fb0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f1e:	4b1e      	ldr	r3, [pc, #120]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f26:	ee07 3a90 	vmov	s15, r3
 8002f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f32:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002fa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f4e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002f50:	4b11      	ldr	r3, [pc, #68]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f54:	0a5b      	lsrs	r3, r3, #9
 8002f56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	ee07 3a90 	vmov	s15, r3
 8002f64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f68:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f74:	ee17 3a90 	vmov	r3, s15
 8002f78:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002f7a:	e005      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	61bb      	str	r3, [r7, #24]
    break;
 8002f80:	e002      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002f82:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f84:	61bb      	str	r3, [r7, #24]
    break;
 8002f86:	bf00      	nop
  }

  return sysclockfreq;
 8002f88:	69bb      	ldr	r3, [r7, #24]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3724      	adds	r7, #36	; 0x24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	58024400 	.word	0x58024400
 8002f9c:	03d09000 	.word	0x03d09000
 8002fa0:	003d0900 	.word	0x003d0900
 8002fa4:	017d7840 	.word	0x017d7840
 8002fa8:	46000000 	.word	0x46000000
 8002fac:	4c742400 	.word	0x4c742400
 8002fb0:	4a742400 	.word	0x4a742400
 8002fb4:	4bbebc20 	.word	0x4bbebc20

08002fb8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d03f      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fd8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fdc:	d02a      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002fde:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fe2:	d824      	bhi.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fe4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fe8:	d018      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fee:	d81e      	bhi.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ff4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ff8:	d007      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ffa:	e018      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ffc:	4ba3      	ldr	r3, [pc, #652]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	4aa2      	ldr	r2, [pc, #648]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003002:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003006:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003008:	e015      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3304      	adds	r3, #4
 800300e:	2102      	movs	r1, #2
 8003010:	4618      	mov	r0, r3
 8003012:	f000 ff17 	bl	8003e44 <RCCEx_PLL2_Config>
 8003016:	4603      	mov	r3, r0
 8003018:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800301a:	e00c      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3324      	adds	r3, #36	; 0x24
 8003020:	2102      	movs	r1, #2
 8003022:	4618      	mov	r0, r3
 8003024:	f000 ffc0 	bl	8003fa8 <RCCEx_PLL3_Config>
 8003028:	4603      	mov	r3, r0
 800302a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800302c:	e003      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	75fb      	strb	r3, [r7, #23]
      break;
 8003032:	e000      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003034:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003036:	7dfb      	ldrb	r3, [r7, #23]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d109      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800303c:	4b93      	ldr	r3, [pc, #588]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800303e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003040:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003048:	4990      	ldr	r1, [pc, #576]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800304a:	4313      	orrs	r3, r2
 800304c:	650b      	str	r3, [r1, #80]	; 0x50
 800304e:	e001      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003050:	7dfb      	ldrb	r3, [r7, #23]
 8003052:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305c:	2b00      	cmp	r3, #0
 800305e:	d03d      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003064:	2b04      	cmp	r3, #4
 8003066:	d826      	bhi.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003068:	a201      	add	r2, pc, #4	; (adr r2, 8003070 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800306a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306e:	bf00      	nop
 8003070:	08003085 	.word	0x08003085
 8003074:	08003093 	.word	0x08003093
 8003078:	080030a5 	.word	0x080030a5
 800307c:	080030bd 	.word	0x080030bd
 8003080:	080030bd 	.word	0x080030bd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003084:	4b81      	ldr	r3, [pc, #516]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003088:	4a80      	ldr	r2, [pc, #512]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800308a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800308e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003090:	e015      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3304      	adds	r3, #4
 8003096:	2100      	movs	r1, #0
 8003098:	4618      	mov	r0, r3
 800309a:	f000 fed3 	bl	8003e44 <RCCEx_PLL2_Config>
 800309e:	4603      	mov	r3, r0
 80030a0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80030a2:	e00c      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3324      	adds	r3, #36	; 0x24
 80030a8:	2100      	movs	r1, #0
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 ff7c 	bl	8003fa8 <RCCEx_PLL3_Config>
 80030b0:	4603      	mov	r3, r0
 80030b2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80030b4:	e003      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	75fb      	strb	r3, [r7, #23]
      break;
 80030ba:	e000      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80030bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030be:	7dfb      	ldrb	r3, [r7, #23]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d109      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030c4:	4b71      	ldr	r3, [pc, #452]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80030c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030c8:	f023 0207 	bic.w	r2, r3, #7
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d0:	496e      	ldr	r1, [pc, #440]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	650b      	str	r3, [r1, #80]	; 0x50
 80030d6:	e001      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d8:	7dfb      	ldrb	r3, [r7, #23]
 80030da:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d042      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f0:	d02b      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80030f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030f6:	d825      	bhi.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80030f8:	2bc0      	cmp	r3, #192	; 0xc0
 80030fa:	d028      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80030fc:	2bc0      	cmp	r3, #192	; 0xc0
 80030fe:	d821      	bhi.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003100:	2b80      	cmp	r3, #128	; 0x80
 8003102:	d016      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003104:	2b80      	cmp	r3, #128	; 0x80
 8003106:	d81d      	bhi.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003108:	2b00      	cmp	r3, #0
 800310a:	d002      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800310c:	2b40      	cmp	r3, #64	; 0x40
 800310e:	d007      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003110:	e018      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003112:	4b5e      	ldr	r3, [pc, #376]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003116:	4a5d      	ldr	r2, [pc, #372]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800311c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800311e:	e017      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3304      	adds	r3, #4
 8003124:	2100      	movs	r1, #0
 8003126:	4618      	mov	r0, r3
 8003128:	f000 fe8c 	bl	8003e44 <RCCEx_PLL2_Config>
 800312c:	4603      	mov	r3, r0
 800312e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003130:	e00e      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3324      	adds	r3, #36	; 0x24
 8003136:	2100      	movs	r1, #0
 8003138:	4618      	mov	r0, r3
 800313a:	f000 ff35 	bl	8003fa8 <RCCEx_PLL3_Config>
 800313e:	4603      	mov	r3, r0
 8003140:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003142:	e005      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	75fb      	strb	r3, [r7, #23]
      break;
 8003148:	e002      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800314a:	bf00      	nop
 800314c:	e000      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800314e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003150:	7dfb      	ldrb	r3, [r7, #23]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d109      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003156:	4b4d      	ldr	r3, [pc, #308]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800315a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003162:	494a      	ldr	r1, [pc, #296]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003164:	4313      	orrs	r3, r2
 8003166:	650b      	str	r3, [r1, #80]	; 0x50
 8003168:	e001      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800316a:	7dfb      	ldrb	r3, [r7, #23]
 800316c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003176:	2b00      	cmp	r3, #0
 8003178:	d049      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003180:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003184:	d030      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003186:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800318a:	d82a      	bhi.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800318c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003190:	d02c      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003192:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003196:	d824      	bhi.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800319c:	d018      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800319e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031a2:	d81e      	bhi.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80031a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031ac:	d007      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x206>
 80031ae:	e018      	b.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031b0:	4b36      	ldr	r3, [pc, #216]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	4a35      	ldr	r2, [pc, #212]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80031b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031bc:	e017      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3304      	adds	r3, #4
 80031c2:	2100      	movs	r1, #0
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 fe3d 	bl	8003e44 <RCCEx_PLL2_Config>
 80031ca:	4603      	mov	r3, r0
 80031cc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80031ce:	e00e      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3324      	adds	r3, #36	; 0x24
 80031d4:	2100      	movs	r1, #0
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 fee6 	bl	8003fa8 <RCCEx_PLL3_Config>
 80031dc:	4603      	mov	r3, r0
 80031de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80031e0:	e005      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	75fb      	strb	r3, [r7, #23]
      break;
 80031e6:	e002      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80031e8:	bf00      	nop
 80031ea:	e000      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80031ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031ee:	7dfb      	ldrb	r3, [r7, #23]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d10a      	bne.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80031f4:	4b25      	ldr	r3, [pc, #148]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80031f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003202:	4922      	ldr	r1, [pc, #136]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003204:	4313      	orrs	r3, r2
 8003206:	658b      	str	r3, [r1, #88]	; 0x58
 8003208:	e001      	b.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800320a:	7dfb      	ldrb	r3, [r7, #23]
 800320c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003216:	2b00      	cmp	r3, #0
 8003218:	d04b      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003220:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003224:	d030      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003226:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800322a:	d82a      	bhi.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800322c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003230:	d02e      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003232:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003236:	d824      	bhi.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003238:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800323c:	d018      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800323e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003242:	d81e      	bhi.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800324c:	d007      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800324e:	e018      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003250:	4b0e      	ldr	r3, [pc, #56]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	4a0d      	ldr	r2, [pc, #52]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800325a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800325c:	e019      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3304      	adds	r3, #4
 8003262:	2100      	movs	r1, #0
 8003264:	4618      	mov	r0, r3
 8003266:	f000 fded 	bl	8003e44 <RCCEx_PLL2_Config>
 800326a:	4603      	mov	r3, r0
 800326c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800326e:	e010      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3324      	adds	r3, #36	; 0x24
 8003274:	2100      	movs	r1, #0
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fe96 	bl	8003fa8 <RCCEx_PLL3_Config>
 800327c:	4603      	mov	r3, r0
 800327e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003280:	e007      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	75fb      	strb	r3, [r7, #23]
      break;
 8003286:	e004      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003288:	bf00      	nop
 800328a:	e002      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800328c:	58024400 	.word	0x58024400
      break;
 8003290:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003292:	7dfb      	ldrb	r3, [r7, #23]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10a      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003298:	4b99      	ldr	r3, [pc, #612]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800329a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80032a6:	4996      	ldr	r1, [pc, #600]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	658b      	str	r3, [r1, #88]	; 0x58
 80032ac:	e001      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ae:	7dfb      	ldrb	r3, [r7, #23]
 80032b0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d032      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c2:	2b30      	cmp	r3, #48	; 0x30
 80032c4:	d01c      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80032c6:	2b30      	cmp	r3, #48	; 0x30
 80032c8:	d817      	bhi.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x342>
 80032ca:	2b20      	cmp	r3, #32
 80032cc:	d00c      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80032ce:	2b20      	cmp	r3, #32
 80032d0:	d813      	bhi.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x342>
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d016      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80032d6:	2b10      	cmp	r3, #16
 80032d8:	d10f      	bne.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032da:	4b89      	ldr	r3, [pc, #548]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80032dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032de:	4a88      	ldr	r2, [pc, #544]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80032e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80032e6:	e00e      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3304      	adds	r3, #4
 80032ec:	2102      	movs	r1, #2
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fda8 	bl	8003e44 <RCCEx_PLL2_Config>
 80032f4:	4603      	mov	r3, r0
 80032f6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80032f8:	e005      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	75fb      	strb	r3, [r7, #23]
      break;
 80032fe:	e002      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003300:	bf00      	nop
 8003302:	e000      	b.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003304:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003306:	7dfb      	ldrb	r3, [r7, #23]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d109      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800330c:	4b7c      	ldr	r3, [pc, #496]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800330e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003310:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003318:	4979      	ldr	r1, [pc, #484]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800331a:	4313      	orrs	r3, r2
 800331c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800331e:	e001      	b.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003320:	7dfb      	ldrb	r3, [r7, #23]
 8003322:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d047      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003334:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003338:	d030      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800333a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800333e:	d82a      	bhi.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003340:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003344:	d02c      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003346:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800334a:	d824      	bhi.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800334c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003350:	d018      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003356:	d81e      	bhi.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800335c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003360:	d007      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003362:	e018      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003364:	4b66      	ldr	r3, [pc, #408]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	4a65      	ldr	r2, [pc, #404]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800336a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800336e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003370:	e017      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	3304      	adds	r3, #4
 8003376:	2100      	movs	r1, #0
 8003378:	4618      	mov	r0, r3
 800337a:	f000 fd63 	bl	8003e44 <RCCEx_PLL2_Config>
 800337e:	4603      	mov	r3, r0
 8003380:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003382:	e00e      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3324      	adds	r3, #36	; 0x24
 8003388:	2100      	movs	r1, #0
 800338a:	4618      	mov	r0, r3
 800338c:	f000 fe0c 	bl	8003fa8 <RCCEx_PLL3_Config>
 8003390:	4603      	mov	r3, r0
 8003392:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003394:	e005      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	75fb      	strb	r3, [r7, #23]
      break;
 800339a:	e002      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800339c:	bf00      	nop
 800339e:	e000      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80033a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033a2:	7dfb      	ldrb	r3, [r7, #23]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d109      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80033a8:	4b55      	ldr	r3, [pc, #340]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80033aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ac:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b4:	4952      	ldr	r1, [pc, #328]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	650b      	str	r3, [r1, #80]	; 0x50
 80033ba:	e001      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033bc:	7dfb      	ldrb	r3, [r7, #23]
 80033be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d049      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033d4:	d02e      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80033d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033da:	d828      	bhi.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80033dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033e0:	d02a      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80033e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80033e6:	d822      	bhi.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80033e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033ec:	d026      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x484>
 80033ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80033f2:	d81c      	bhi.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80033f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033f8:	d010      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x464>
 80033fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033fe:	d816      	bhi.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003400:	2b00      	cmp	r3, #0
 8003402:	d01d      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003408:	d111      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	3304      	adds	r3, #4
 800340e:	2101      	movs	r1, #1
 8003410:	4618      	mov	r0, r3
 8003412:	f000 fd17 	bl	8003e44 <RCCEx_PLL2_Config>
 8003416:	4603      	mov	r3, r0
 8003418:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800341a:	e012      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3324      	adds	r3, #36	; 0x24
 8003420:	2101      	movs	r1, #1
 8003422:	4618      	mov	r0, r3
 8003424:	f000 fdc0 	bl	8003fa8 <RCCEx_PLL3_Config>
 8003428:	4603      	mov	r3, r0
 800342a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800342c:	e009      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	75fb      	strb	r3, [r7, #23]
      break;
 8003432:	e006      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003434:	bf00      	nop
 8003436:	e004      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003438:	bf00      	nop
 800343a:	e002      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800343c:	bf00      	nop
 800343e:	e000      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003440:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003442:	7dfb      	ldrb	r3, [r7, #23]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d109      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003448:	4b2d      	ldr	r3, [pc, #180]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800344a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800344c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003454:	492a      	ldr	r1, [pc, #168]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003456:	4313      	orrs	r3, r2
 8003458:	650b      	str	r3, [r1, #80]	; 0x50
 800345a:	e001      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800345c:	7dfb      	ldrb	r3, [r7, #23]
 800345e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d04d      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003472:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003476:	d02e      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003478:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800347c:	d828      	bhi.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800347e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003482:	d02a      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003488:	d822      	bhi.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800348a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800348e:	d026      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003490:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003494:	d81c      	bhi.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003496:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800349a:	d010      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x506>
 800349c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034a0:	d816      	bhi.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d01d      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80034a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034aa:	d111      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3304      	adds	r3, #4
 80034b0:	2101      	movs	r1, #1
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 fcc6 	bl	8003e44 <RCCEx_PLL2_Config>
 80034b8:	4603      	mov	r3, r0
 80034ba:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80034bc:	e012      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3324      	adds	r3, #36	; 0x24
 80034c2:	2101      	movs	r1, #1
 80034c4:	4618      	mov	r0, r3
 80034c6:	f000 fd6f 	bl	8003fa8 <RCCEx_PLL3_Config>
 80034ca:	4603      	mov	r3, r0
 80034cc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80034ce:	e009      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	75fb      	strb	r3, [r7, #23]
      break;
 80034d4:	e006      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80034d6:	bf00      	nop
 80034d8:	e004      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80034da:	bf00      	nop
 80034dc:	e002      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80034de:	bf00      	nop
 80034e0:	e000      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80034e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034e4:	7dfb      	ldrb	r3, [r7, #23]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10c      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80034ea:	4b05      	ldr	r3, [pc, #20]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80034ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80034f8:	4901      	ldr	r1, [pc, #4]	; (8003500 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	658b      	str	r3, [r1, #88]	; 0x58
 80034fe:	e003      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003500:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003504:	7dfb      	ldrb	r3, [r7, #23]
 8003506:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d02f      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003518:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800351c:	d00e      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800351e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003522:	d814      	bhi.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003524:	2b00      	cmp	r3, #0
 8003526:	d015      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003528:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800352c:	d10f      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800352e:	4baf      	ldr	r3, [pc, #700]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003532:	4aae      	ldr	r2, [pc, #696]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003538:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800353a:	e00c      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	3304      	adds	r3, #4
 8003540:	2101      	movs	r1, #1
 8003542:	4618      	mov	r0, r3
 8003544:	f000 fc7e 	bl	8003e44 <RCCEx_PLL2_Config>
 8003548:	4603      	mov	r3, r0
 800354a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800354c:	e003      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	75fb      	strb	r3, [r7, #23]
      break;
 8003552:	e000      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003554:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003556:	7dfb      	ldrb	r3, [r7, #23]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d109      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800355c:	4ba3      	ldr	r3, [pc, #652]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800355e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003560:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003568:	49a0      	ldr	r1, [pc, #640]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800356a:	4313      	orrs	r3, r2
 800356c:	650b      	str	r3, [r1, #80]	; 0x50
 800356e:	e001      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003570:	7dfb      	ldrb	r3, [r7, #23]
 8003572:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d032      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003584:	2b03      	cmp	r3, #3
 8003586:	d81b      	bhi.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003588:	a201      	add	r2, pc, #4	; (adr r2, 8003590 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800358a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358e:	bf00      	nop
 8003590:	080035c7 	.word	0x080035c7
 8003594:	080035a1 	.word	0x080035a1
 8003598:	080035af 	.word	0x080035af
 800359c:	080035c7 	.word	0x080035c7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035a0:	4b92      	ldr	r3, [pc, #584]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	4a91      	ldr	r2, [pc, #580]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80035a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80035ac:	e00c      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	3304      	adds	r3, #4
 80035b2:	2102      	movs	r1, #2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f000 fc45 	bl	8003e44 <RCCEx_PLL2_Config>
 80035ba:	4603      	mov	r3, r0
 80035bc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80035be:	e003      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	75fb      	strb	r3, [r7, #23]
      break;
 80035c4:	e000      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80035c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035c8:	7dfb      	ldrb	r3, [r7, #23]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d109      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80035ce:	4b87      	ldr	r3, [pc, #540]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80035d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d2:	f023 0203 	bic.w	r2, r3, #3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	4984      	ldr	r1, [pc, #528]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	64cb      	str	r3, [r1, #76]	; 0x4c
 80035e0:	e001      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e2:	7dfb      	ldrb	r3, [r7, #23]
 80035e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 8086 	beq.w	8003700 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035f4:	4b7e      	ldr	r3, [pc, #504]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a7d      	ldr	r2, [pc, #500]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80035fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003600:	f7fd fb5e 	bl	8000cc0 <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003606:	e009      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003608:	f7fd fb5a 	bl	8000cc0 <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b64      	cmp	r3, #100	; 0x64
 8003614:	d902      	bls.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	75fb      	strb	r3, [r7, #23]
        break;
 800361a:	e005      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800361c:	4b74      	ldr	r3, [pc, #464]	; (80037f0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003624:	2b00      	cmp	r3, #0
 8003626:	d0ef      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003628:	7dfb      	ldrb	r3, [r7, #23]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d166      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800362e:	4b6f      	ldr	r3, [pc, #444]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003630:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003638:	4053      	eors	r3, r2
 800363a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800363e:	2b00      	cmp	r3, #0
 8003640:	d013      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003642:	4b6a      	ldr	r3, [pc, #424]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800364a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800364c:	4b67      	ldr	r3, [pc, #412]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800364e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003650:	4a66      	ldr	r2, [pc, #408]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003656:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003658:	4b64      	ldr	r3, [pc, #400]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800365a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365c:	4a63      	ldr	r2, [pc, #396]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800365e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003662:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003664:	4a61      	ldr	r2, [pc, #388]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003674:	d115      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003676:	f7fd fb23 	bl	8000cc0 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800367c:	e00b      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367e:	f7fd fb1f 	bl	8000cc0 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	f241 3288 	movw	r2, #5000	; 0x1388
 800368c:	4293      	cmp	r3, r2
 800368e:	d902      	bls.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	75fb      	strb	r3, [r7, #23]
            break;
 8003694:	e005      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003696:	4b55      	ldr	r3, [pc, #340]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0ed      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80036a2:	7dfb      	ldrb	r3, [r7, #23]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d126      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80036ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036b6:	d10d      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80036b8:	4b4c      	ldr	r3, [pc, #304]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80036c6:	0919      	lsrs	r1, r3, #4
 80036c8:	4b4a      	ldr	r3, [pc, #296]	; (80037f4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80036ca:	400b      	ands	r3, r1
 80036cc:	4947      	ldr	r1, [pc, #284]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	610b      	str	r3, [r1, #16]
 80036d2:	e005      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80036d4:	4b45      	ldr	r3, [pc, #276]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80036d6:	691b      	ldr	r3, [r3, #16]
 80036d8:	4a44      	ldr	r2, [pc, #272]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80036da:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80036de:	6113      	str	r3, [r2, #16]
 80036e0:	4b42      	ldr	r3, [pc, #264]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80036e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80036ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ee:	493f      	ldr	r1, [pc, #252]	; (80037ec <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	670b      	str	r3, [r1, #112]	; 0x70
 80036f4:	e004      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036f6:	7dfb      	ldrb	r3, [r7, #23]
 80036f8:	75bb      	strb	r3, [r7, #22]
 80036fa:	e001      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036fc:	7dfb      	ldrb	r3, [r7, #23]
 80036fe:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 8085 	beq.w	8003818 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003712:	2b28      	cmp	r3, #40	; 0x28
 8003714:	d866      	bhi.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003716:	a201      	add	r2, pc, #4	; (adr r2, 800371c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371c:	080037f9 	.word	0x080037f9
 8003720:	080037e5 	.word	0x080037e5
 8003724:	080037e5 	.word	0x080037e5
 8003728:	080037e5 	.word	0x080037e5
 800372c:	080037e5 	.word	0x080037e5
 8003730:	080037e5 	.word	0x080037e5
 8003734:	080037e5 	.word	0x080037e5
 8003738:	080037e5 	.word	0x080037e5
 800373c:	080037c1 	.word	0x080037c1
 8003740:	080037e5 	.word	0x080037e5
 8003744:	080037e5 	.word	0x080037e5
 8003748:	080037e5 	.word	0x080037e5
 800374c:	080037e5 	.word	0x080037e5
 8003750:	080037e5 	.word	0x080037e5
 8003754:	080037e5 	.word	0x080037e5
 8003758:	080037e5 	.word	0x080037e5
 800375c:	080037d3 	.word	0x080037d3
 8003760:	080037e5 	.word	0x080037e5
 8003764:	080037e5 	.word	0x080037e5
 8003768:	080037e5 	.word	0x080037e5
 800376c:	080037e5 	.word	0x080037e5
 8003770:	080037e5 	.word	0x080037e5
 8003774:	080037e5 	.word	0x080037e5
 8003778:	080037e5 	.word	0x080037e5
 800377c:	080037f9 	.word	0x080037f9
 8003780:	080037e5 	.word	0x080037e5
 8003784:	080037e5 	.word	0x080037e5
 8003788:	080037e5 	.word	0x080037e5
 800378c:	080037e5 	.word	0x080037e5
 8003790:	080037e5 	.word	0x080037e5
 8003794:	080037e5 	.word	0x080037e5
 8003798:	080037e5 	.word	0x080037e5
 800379c:	080037f9 	.word	0x080037f9
 80037a0:	080037e5 	.word	0x080037e5
 80037a4:	080037e5 	.word	0x080037e5
 80037a8:	080037e5 	.word	0x080037e5
 80037ac:	080037e5 	.word	0x080037e5
 80037b0:	080037e5 	.word	0x080037e5
 80037b4:	080037e5 	.word	0x080037e5
 80037b8:	080037e5 	.word	0x080037e5
 80037bc:	080037f9 	.word	0x080037f9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3304      	adds	r3, #4
 80037c4:	2101      	movs	r1, #1
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 fb3c 	bl	8003e44 <RCCEx_PLL2_Config>
 80037cc:	4603      	mov	r3, r0
 80037ce:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80037d0:	e013      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	3324      	adds	r3, #36	; 0x24
 80037d6:	2101      	movs	r1, #1
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 fbe5 	bl	8003fa8 <RCCEx_PLL3_Config>
 80037de:	4603      	mov	r3, r0
 80037e0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80037e2:	e00a      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	75fb      	strb	r3, [r7, #23]
      break;
 80037e8:	e007      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x842>
 80037ea:	bf00      	nop
 80037ec:	58024400 	.word	0x58024400
 80037f0:	58024800 	.word	0x58024800
 80037f4:	00ffffcf 	.word	0x00ffffcf
      break;
 80037f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037fa:	7dfb      	ldrb	r3, [r7, #23]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d109      	bne.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003800:	4b96      	ldr	r3, [pc, #600]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003804:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800380c:	4993      	ldr	r1, [pc, #588]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800380e:	4313      	orrs	r3, r2
 8003810:	654b      	str	r3, [r1, #84]	; 0x54
 8003812:	e001      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003814:	7dfb      	ldrb	r3, [r7, #23]
 8003816:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d038      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003828:	2b05      	cmp	r3, #5
 800382a:	d821      	bhi.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800382c:	a201      	add	r2, pc, #4	; (adr r2, 8003834 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800382e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003832:	bf00      	nop
 8003834:	08003877 	.word	0x08003877
 8003838:	0800384d 	.word	0x0800384d
 800383c:	0800385f 	.word	0x0800385f
 8003840:	08003877 	.word	0x08003877
 8003844:	08003877 	.word	0x08003877
 8003848:	08003877 	.word	0x08003877
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3304      	adds	r3, #4
 8003850:	2101      	movs	r1, #1
 8003852:	4618      	mov	r0, r3
 8003854:	f000 faf6 	bl	8003e44 <RCCEx_PLL2_Config>
 8003858:	4603      	mov	r3, r0
 800385a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800385c:	e00c      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	3324      	adds	r3, #36	; 0x24
 8003862:	2101      	movs	r1, #1
 8003864:	4618      	mov	r0, r3
 8003866:	f000 fb9f 	bl	8003fa8 <RCCEx_PLL3_Config>
 800386a:	4603      	mov	r3, r0
 800386c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800386e:	e003      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	75fb      	strb	r3, [r7, #23]
      break;
 8003874:	e000      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003876:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003878:	7dfb      	ldrb	r3, [r7, #23]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d109      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800387e:	4b77      	ldr	r3, [pc, #476]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003882:	f023 0207 	bic.w	r2, r3, #7
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800388a:	4974      	ldr	r1, [pc, #464]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800388c:	4313      	orrs	r3, r2
 800388e:	654b      	str	r3, [r1, #84]	; 0x54
 8003890:	e001      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003892:	7dfb      	ldrb	r3, [r7, #23]
 8003894:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0304 	and.w	r3, r3, #4
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d03a      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a8:	2b05      	cmp	r3, #5
 80038aa:	d821      	bhi.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80038ac:	a201      	add	r2, pc, #4	; (adr r2, 80038b4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80038ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b2:	bf00      	nop
 80038b4:	080038f7 	.word	0x080038f7
 80038b8:	080038cd 	.word	0x080038cd
 80038bc:	080038df 	.word	0x080038df
 80038c0:	080038f7 	.word	0x080038f7
 80038c4:	080038f7 	.word	0x080038f7
 80038c8:	080038f7 	.word	0x080038f7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3304      	adds	r3, #4
 80038d0:	2101      	movs	r1, #1
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 fab6 	bl	8003e44 <RCCEx_PLL2_Config>
 80038d8:	4603      	mov	r3, r0
 80038da:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80038dc:	e00c      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3324      	adds	r3, #36	; 0x24
 80038e2:	2101      	movs	r1, #1
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 fb5f 	bl	8003fa8 <RCCEx_PLL3_Config>
 80038ea:	4603      	mov	r3, r0
 80038ec:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80038ee:	e003      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	75fb      	strb	r3, [r7, #23]
      break;
 80038f4:	e000      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80038f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038f8:	7dfb      	ldrb	r3, [r7, #23]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10a      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038fe:	4b57      	ldr	r3, [pc, #348]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003902:	f023 0207 	bic.w	r2, r3, #7
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390c:	4953      	ldr	r1, [pc, #332]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800390e:	4313      	orrs	r3, r2
 8003910:	658b      	str	r3, [r1, #88]	; 0x58
 8003912:	e001      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003914:	7dfb      	ldrb	r3, [r7, #23]
 8003916:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0320 	and.w	r3, r3, #32
 8003920:	2b00      	cmp	r3, #0
 8003922:	d04b      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800392a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800392e:	d02e      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003930:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003934:	d828      	bhi.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800393a:	d02a      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800393c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003940:	d822      	bhi.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003942:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003946:	d026      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003948:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800394c:	d81c      	bhi.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800394e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003952:	d010      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003954:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003958:	d816      	bhi.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800395a:	2b00      	cmp	r3, #0
 800395c:	d01d      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800395e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003962:	d111      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3304      	adds	r3, #4
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f000 fa6a 	bl	8003e44 <RCCEx_PLL2_Config>
 8003970:	4603      	mov	r3, r0
 8003972:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003974:	e012      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3324      	adds	r3, #36	; 0x24
 800397a:	2102      	movs	r1, #2
 800397c:	4618      	mov	r0, r3
 800397e:	f000 fb13 	bl	8003fa8 <RCCEx_PLL3_Config>
 8003982:	4603      	mov	r3, r0
 8003984:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003986:	e009      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	75fb      	strb	r3, [r7, #23]
      break;
 800398c:	e006      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800398e:	bf00      	nop
 8003990:	e004      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003992:	bf00      	nop
 8003994:	e002      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003996:	bf00      	nop
 8003998:	e000      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800399a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800399c:	7dfb      	ldrb	r3, [r7, #23]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10a      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039a2:	4b2e      	ldr	r3, [pc, #184]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80039a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039b0:	492a      	ldr	r1, [pc, #168]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	654b      	str	r3, [r1, #84]	; 0x54
 80039b6:	e001      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b8:	7dfb      	ldrb	r3, [r7, #23]
 80039ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d04d      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80039d2:	d02e      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80039d4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80039d8:	d828      	bhi.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80039da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039de:	d02a      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80039e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e4:	d822      	bhi.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80039e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039ea:	d026      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80039ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039f0:	d81c      	bhi.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80039f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039f6:	d010      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80039f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039fc:	d816      	bhi.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d01d      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a06:	d111      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3304      	adds	r3, #4
 8003a0c:	2100      	movs	r1, #0
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 fa18 	bl	8003e44 <RCCEx_PLL2_Config>
 8003a14:	4603      	mov	r3, r0
 8003a16:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003a18:	e012      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	3324      	adds	r3, #36	; 0x24
 8003a1e:	2102      	movs	r1, #2
 8003a20:	4618      	mov	r0, r3
 8003a22:	f000 fac1 	bl	8003fa8 <RCCEx_PLL3_Config>
 8003a26:	4603      	mov	r3, r0
 8003a28:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003a2a:	e009      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a30:	e006      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003a32:	bf00      	nop
 8003a34:	e004      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003a36:	bf00      	nop
 8003a38:	e002      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003a3a:	bf00      	nop
 8003a3c:	e000      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003a3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a40:	7dfb      	ldrb	r3, [r7, #23]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10c      	bne.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a46:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a54:	4901      	ldr	r1, [pc, #4]	; (8003a5c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	658b      	str	r3, [r1, #88]	; 0x58
 8003a5a:	e003      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003a5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
 8003a62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d04b      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a76:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003a7a:	d02e      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003a7c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003a80:	d828      	bhi.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003a82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a86:	d02a      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003a88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a8c:	d822      	bhi.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003a8e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003a92:	d026      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003a94:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003a98:	d81c      	bhi.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003a9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a9e:	d010      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003aa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003aa4:	d816      	bhi.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d01d      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003aaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aae:	d111      	bne.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 f9c4 	bl	8003e44 <RCCEx_PLL2_Config>
 8003abc:	4603      	mov	r3, r0
 8003abe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003ac0:	e012      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	3324      	adds	r3, #36	; 0x24
 8003ac6:	2102      	movs	r1, #2
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 fa6d 	bl	8003fa8 <RCCEx_PLL3_Config>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003ad2:	e009      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ad8:	e006      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003ada:	bf00      	nop
 8003adc:	e004      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003ade:	bf00      	nop
 8003ae0:	e002      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003ae2:	bf00      	nop
 8003ae4:	e000      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8003ae6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ae8:	7dfb      	ldrb	r3, [r7, #23]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10a      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003aee:	4b9d      	ldr	r3, [pc, #628]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003afc:	4999      	ldr	r1, [pc, #612]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	658b      	str	r3, [r1, #88]	; 0x58
 8003b02:	e001      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b04:	7dfb      	ldrb	r3, [r7, #23]
 8003b06:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0308 	and.w	r3, r3, #8
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d01a      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b1e:	d10a      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	3324      	adds	r3, #36	; 0x24
 8003b24:	2102      	movs	r1, #2
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 fa3e 	bl	8003fa8 <RCCEx_PLL3_Config>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003b36:	4b8b      	ldr	r3, [pc, #556]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b44:	4987      	ldr	r1, [pc, #540]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0310 	and.w	r3, r3, #16
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d01a      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b60:	d10a      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3324      	adds	r3, #36	; 0x24
 8003b66:	2102      	movs	r1, #2
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 fa1d 	bl	8003fa8 <RCCEx_PLL3_Config>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b78:	4b7a      	ldr	r3, [pc, #488]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b86:	4977      	ldr	r1, [pc, #476]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d034      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003b9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ba2:	d01d      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8003ba4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ba8:	d817      	bhi.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb2:	d009      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8003bb4:	e011      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	2100      	movs	r1, #0
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 f941 	bl	8003e44 <RCCEx_PLL2_Config>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003bc6:	e00c      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3324      	adds	r3, #36	; 0x24
 8003bcc:	2102      	movs	r1, #2
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 f9ea 	bl	8003fa8 <RCCEx_PLL3_Config>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003bd8:	e003      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	75fb      	strb	r3, [r7, #23]
      break;
 8003bde:	e000      	b.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8003be0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003be2:	7dfb      	ldrb	r3, [r7, #23]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10a      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003be8:	4b5e      	ldr	r3, [pc, #376]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003bf6:	495b      	ldr	r1, [pc, #364]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	658b      	str	r3, [r1, #88]	; 0x58
 8003bfc:	e001      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfe:	7dfb      	ldrb	r3, [r7, #23]
 8003c00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d033      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c14:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c18:	d01c      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8003c1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c1e:	d816      	bhi.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8003c20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c24:	d003      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8003c26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c2a:	d007      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8003c2c:	e00f      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c2e:	4b4d      	ldr	r3, [pc, #308]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c32:	4a4c      	ldr	r2, [pc, #304]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c38:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003c3a:	e00c      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3324      	adds	r3, #36	; 0x24
 8003c40:	2101      	movs	r1, #1
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 f9b0 	bl	8003fa8 <RCCEx_PLL3_Config>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003c4c:	e003      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	75fb      	strb	r3, [r7, #23]
      break;
 8003c52:	e000      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8003c54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c56:	7dfb      	ldrb	r3, [r7, #23]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d10a      	bne.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c5c:	4b41      	ldr	r3, [pc, #260]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c6a:	493e      	ldr	r1, [pc, #248]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	654b      	str	r3, [r1, #84]	; 0x54
 8003c70:	e001      	b.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c72:	7dfb      	ldrb	r3, [r7, #23]
 8003c74:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d029      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d003      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8003c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c8e:	d007      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003c90:	e00f      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c92:	4b34      	ldr	r3, [pc, #208]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c96:	4a33      	ldr	r2, [pc, #204]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003c9e:	e00b      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	2102      	movs	r1, #2
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 f8cc 	bl	8003e44 <RCCEx_PLL2_Config>
 8003cac:	4603      	mov	r3, r0
 8003cae:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003cb0:	e002      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	75fb      	strb	r3, [r7, #23]
      break;
 8003cb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cb8:	7dfb      	ldrb	r3, [r7, #23]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d109      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003cbe:	4b29      	ldr	r3, [pc, #164]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cca:	4926      	ldr	r1, [pc, #152]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003cd0:	e001      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd2:	7dfb      	ldrb	r3, [r7, #23]
 8003cd4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d00a      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3324      	adds	r3, #36	; 0x24
 8003ce6:	2102      	movs	r1, #2
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 f95d 	bl	8003fa8 <RCCEx_PLL3_Config>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d033      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d0c:	d017      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003d0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d12:	d811      	bhi.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d18:	d013      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003d1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d1e:	d80b      	bhi.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d010      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8003d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d28:	d106      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d2a:	4b0e      	ldr	r3, [pc, #56]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2e:	4a0d      	ldr	r2, [pc, #52]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d34:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003d36:	e007      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d3c:	e004      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003d3e:	bf00      	nop
 8003d40:	e002      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003d42:	bf00      	nop
 8003d44:	e000      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003d46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d48:	7dfb      	ldrb	r3, [r7, #23]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10c      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d4e:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d5a:	4902      	ldr	r1, [pc, #8]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	654b      	str	r3, [r1, #84]	; 0x54
 8003d60:	e004      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8003d62:	bf00      	nop
 8003d64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d68:	7dfb      	ldrb	r3, [r7, #23]
 8003d6a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d008      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d78:	4b31      	ldr	r3, [pc, #196]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d84:	492e      	ldr	r1, [pc, #184]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d009      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003d96:	4b2a      	ldr	r3, [pc, #168]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003da4:	4926      	ldr	r1, [pc, #152]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d008      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003db6:	4b22      	ldr	r3, [pc, #136]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dc2:	491f      	ldr	r1, [pc, #124]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00d      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003dd4:	4b1a      	ldr	r3, [pc, #104]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	4a19      	ldr	r2, [pc, #100]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003dda:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003dde:	6113      	str	r3, [r2, #16]
 8003de0:	4b17      	ldr	r3, [pc, #92]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003de2:	691a      	ldr	r2, [r3, #16]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003dea:	4915      	ldr	r1, [pc, #84]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	da08      	bge.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003df8:	4b11      	ldr	r3, [pc, #68]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dfc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e04:	490e      	ldr	r1, [pc, #56]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d009      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e16:	4b0a      	ldr	r3, [pc, #40]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e24:	4906      	ldr	r1, [pc, #24]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003e2a:	7dbb      	ldrb	r3, [r7, #22]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8003e30:	2300      	movs	r3, #0
 8003e32:	e000      	b.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	58024400 	.word	0x58024400

08003e44 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e52:	4b53      	ldr	r3, [pc, #332]	; (8003fa0 <RCCEx_PLL2_Config+0x15c>)
 8003e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	2b03      	cmp	r3, #3
 8003e5c:	d101      	bne.n	8003e62 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e099      	b.n	8003f96 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003e62:	4b4f      	ldr	r3, [pc, #316]	; (8003fa0 <RCCEx_PLL2_Config+0x15c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a4e      	ldr	r2, [pc, #312]	; (8003fa0 <RCCEx_PLL2_Config+0x15c>)
 8003e68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e6e:	f7fc ff27 	bl	8000cc0 <HAL_GetTick>
 8003e72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e74:	e008      	b.n	8003e88 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003e76:	f7fc ff23 	bl	8000cc0 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d901      	bls.n	8003e88 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e086      	b.n	8003f96 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e88:	4b45      	ldr	r3, [pc, #276]	; (8003fa0 <RCCEx_PLL2_Config+0x15c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1f0      	bne.n	8003e76 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003e94:	4b42      	ldr	r3, [pc, #264]	; (8003fa0 <RCCEx_PLL2_Config+0x15c>)
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	031b      	lsls	r3, r3, #12
 8003ea2:	493f      	ldr	r1, [pc, #252]	; (8003fa0 <RCCEx_PLL2_Config+0x15c>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	628b      	str	r3, [r1, #40]	; 0x28
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	3b01      	subs	r3, #1
 8003eae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	025b      	lsls	r3, r3, #9
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	041b      	lsls	r3, r3, #16
 8003ec6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	061b      	lsls	r3, r3, #24
 8003ed4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ed8:	4931      	ldr	r1, [pc, #196]	; (8003fa0 <RCCEx_PLL2_Config+0x15c>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003ede:	4b30      	ldr	r3, [pc, #192]	; (8003fa0 <RCCEx_PLL2_Config+0x15c>)
 8003ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	492d      	ldr	r1, [pc, #180]	; (8003fa0 <RCCEx_PLL2_Config+0x15c>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003ef0:	4b2b      	ldr	r3, [pc, #172]	; (8003fa0 <RCCEx_PLL2_Config+0x15c>)
 8003ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef4:	f023 0220 	bic.w	r2, r3, #32
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	4928      	ldr	r1, [pc, #160]	; (8003fa0 <RCCEx_PLL2_Config+0x15c>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003f02:	4b27      	ldr	r3, [pc, #156]	; (8003fa0 <RCCEx_PLL2_Config+0x15c>)
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	4a26      	ldr	r2, [pc, #152]	; (8003fa0 <RCCEx_PLL2_Config+0x15c>)
 8003f08:	f023 0310 	bic.w	r3, r3, #16
 8003f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003f0e:	4b24      	ldr	r3, [pc, #144]	; (8003fa0 <RCCEx_PLL2_Config+0x15c>)
 8003f10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f12:	4b24      	ldr	r3, [pc, #144]	; (8003fa4 <RCCEx_PLL2_Config+0x160>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	69d2      	ldr	r2, [r2, #28]
 8003f1a:	00d2      	lsls	r2, r2, #3
 8003f1c:	4920      	ldr	r1, [pc, #128]	; (8003fa0 <RCCEx_PLL2_Config+0x15c>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003f22:	4b1f      	ldr	r3, [pc, #124]	; (8003fa0 <RCCEx_PLL2_Config+0x15c>)
 8003f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f26:	4a1e      	ldr	r2, [pc, #120]	; (8003fa0 <RCCEx_PLL2_Config+0x15c>)
 8003f28:	f043 0310 	orr.w	r3, r3, #16
 8003f2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d106      	bne.n	8003f42 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003f34:	4b1a      	ldr	r3, [pc, #104]	; (8003fa0 <RCCEx_PLL2_Config+0x15c>)
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f38:	4a19      	ldr	r2, [pc, #100]	; (8003fa0 <RCCEx_PLL2_Config+0x15c>)
 8003f3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f40:	e00f      	b.n	8003f62 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d106      	bne.n	8003f56 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003f48:	4b15      	ldr	r3, [pc, #84]	; (8003fa0 <RCCEx_PLL2_Config+0x15c>)
 8003f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4c:	4a14      	ldr	r2, [pc, #80]	; (8003fa0 <RCCEx_PLL2_Config+0x15c>)
 8003f4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f54:	e005      	b.n	8003f62 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003f56:	4b12      	ldr	r3, [pc, #72]	; (8003fa0 <RCCEx_PLL2_Config+0x15c>)
 8003f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5a:	4a11      	ldr	r2, [pc, #68]	; (8003fa0 <RCCEx_PLL2_Config+0x15c>)
 8003f5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003f62:	4b0f      	ldr	r3, [pc, #60]	; (8003fa0 <RCCEx_PLL2_Config+0x15c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a0e      	ldr	r2, [pc, #56]	; (8003fa0 <RCCEx_PLL2_Config+0x15c>)
 8003f68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f6e:	f7fc fea7 	bl	8000cc0 <HAL_GetTick>
 8003f72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f74:	e008      	b.n	8003f88 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003f76:	f7fc fea3 	bl	8000cc0 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d901      	bls.n	8003f88 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e006      	b.n	8003f96 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f88:	4b05      	ldr	r3, [pc, #20]	; (8003fa0 <RCCEx_PLL2_Config+0x15c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0f0      	beq.n	8003f76 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	58024400 	.word	0x58024400
 8003fa4:	ffff0007 	.word	0xffff0007

08003fa8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003fb6:	4b53      	ldr	r3, [pc, #332]	; (8004104 <RCCEx_PLL3_Config+0x15c>)
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fba:	f003 0303 	and.w	r3, r3, #3
 8003fbe:	2b03      	cmp	r3, #3
 8003fc0:	d101      	bne.n	8003fc6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e099      	b.n	80040fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003fc6:	4b4f      	ldr	r3, [pc, #316]	; (8004104 <RCCEx_PLL3_Config+0x15c>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a4e      	ldr	r2, [pc, #312]	; (8004104 <RCCEx_PLL3_Config+0x15c>)
 8003fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fd2:	f7fc fe75 	bl	8000cc0 <HAL_GetTick>
 8003fd6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003fd8:	e008      	b.n	8003fec <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003fda:	f7fc fe71 	bl	8000cc0 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e086      	b.n	80040fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003fec:	4b45      	ldr	r3, [pc, #276]	; (8004104 <RCCEx_PLL3_Config+0x15c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1f0      	bne.n	8003fda <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003ff8:	4b42      	ldr	r3, [pc, #264]	; (8004104 <RCCEx_PLL3_Config+0x15c>)
 8003ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	051b      	lsls	r3, r3, #20
 8004006:	493f      	ldr	r1, [pc, #252]	; (8004104 <RCCEx_PLL3_Config+0x15c>)
 8004008:	4313      	orrs	r3, r2
 800400a:	628b      	str	r3, [r1, #40]	; 0x28
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	3b01      	subs	r3, #1
 8004012:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	3b01      	subs	r3, #1
 800401c:	025b      	lsls	r3, r3, #9
 800401e:	b29b      	uxth	r3, r3
 8004020:	431a      	orrs	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	3b01      	subs	r3, #1
 8004028:	041b      	lsls	r3, r3, #16
 800402a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	3b01      	subs	r3, #1
 8004036:	061b      	lsls	r3, r3, #24
 8004038:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800403c:	4931      	ldr	r1, [pc, #196]	; (8004104 <RCCEx_PLL3_Config+0x15c>)
 800403e:	4313      	orrs	r3, r2
 8004040:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004042:	4b30      	ldr	r3, [pc, #192]	; (8004104 <RCCEx_PLL3_Config+0x15c>)
 8004044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004046:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	492d      	ldr	r1, [pc, #180]	; (8004104 <RCCEx_PLL3_Config+0x15c>)
 8004050:	4313      	orrs	r3, r2
 8004052:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004054:	4b2b      	ldr	r3, [pc, #172]	; (8004104 <RCCEx_PLL3_Config+0x15c>)
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004058:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	4928      	ldr	r1, [pc, #160]	; (8004104 <RCCEx_PLL3_Config+0x15c>)
 8004062:	4313      	orrs	r3, r2
 8004064:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004066:	4b27      	ldr	r3, [pc, #156]	; (8004104 <RCCEx_PLL3_Config+0x15c>)
 8004068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406a:	4a26      	ldr	r2, [pc, #152]	; (8004104 <RCCEx_PLL3_Config+0x15c>)
 800406c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004070:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004072:	4b24      	ldr	r3, [pc, #144]	; (8004104 <RCCEx_PLL3_Config+0x15c>)
 8004074:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004076:	4b24      	ldr	r3, [pc, #144]	; (8004108 <RCCEx_PLL3_Config+0x160>)
 8004078:	4013      	ands	r3, r2
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	69d2      	ldr	r2, [r2, #28]
 800407e:	00d2      	lsls	r2, r2, #3
 8004080:	4920      	ldr	r1, [pc, #128]	; (8004104 <RCCEx_PLL3_Config+0x15c>)
 8004082:	4313      	orrs	r3, r2
 8004084:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004086:	4b1f      	ldr	r3, [pc, #124]	; (8004104 <RCCEx_PLL3_Config+0x15c>)
 8004088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408a:	4a1e      	ldr	r2, [pc, #120]	; (8004104 <RCCEx_PLL3_Config+0x15c>)
 800408c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004090:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d106      	bne.n	80040a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004098:	4b1a      	ldr	r3, [pc, #104]	; (8004104 <RCCEx_PLL3_Config+0x15c>)
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	4a19      	ldr	r2, [pc, #100]	; (8004104 <RCCEx_PLL3_Config+0x15c>)
 800409e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80040a4:	e00f      	b.n	80040c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d106      	bne.n	80040ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80040ac:	4b15      	ldr	r3, [pc, #84]	; (8004104 <RCCEx_PLL3_Config+0x15c>)
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	4a14      	ldr	r2, [pc, #80]	; (8004104 <RCCEx_PLL3_Config+0x15c>)
 80040b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80040b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80040b8:	e005      	b.n	80040c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80040ba:	4b12      	ldr	r3, [pc, #72]	; (8004104 <RCCEx_PLL3_Config+0x15c>)
 80040bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040be:	4a11      	ldr	r2, [pc, #68]	; (8004104 <RCCEx_PLL3_Config+0x15c>)
 80040c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80040c6:	4b0f      	ldr	r3, [pc, #60]	; (8004104 <RCCEx_PLL3_Config+0x15c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a0e      	ldr	r2, [pc, #56]	; (8004104 <RCCEx_PLL3_Config+0x15c>)
 80040cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040d2:	f7fc fdf5 	bl	8000cc0 <HAL_GetTick>
 80040d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80040d8:	e008      	b.n	80040ec <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80040da:	f7fc fdf1 	bl	8000cc0 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e006      	b.n	80040fa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80040ec:	4b05      	ldr	r3, [pc, #20]	; (8004104 <RCCEx_PLL3_Config+0x15c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0f0      	beq.n	80040da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	58024400 	.word	0x58024400
 8004108:	ffff0007 	.word	0xffff0007

0800410c <__libc_init_array>:
 800410c:	b570      	push	{r4, r5, r6, lr}
 800410e:	4d0d      	ldr	r5, [pc, #52]	; (8004144 <__libc_init_array+0x38>)
 8004110:	4c0d      	ldr	r4, [pc, #52]	; (8004148 <__libc_init_array+0x3c>)
 8004112:	1b64      	subs	r4, r4, r5
 8004114:	10a4      	asrs	r4, r4, #2
 8004116:	2600      	movs	r6, #0
 8004118:	42a6      	cmp	r6, r4
 800411a:	d109      	bne.n	8004130 <__libc_init_array+0x24>
 800411c:	4d0b      	ldr	r5, [pc, #44]	; (800414c <__libc_init_array+0x40>)
 800411e:	4c0c      	ldr	r4, [pc, #48]	; (8004150 <__libc_init_array+0x44>)
 8004120:	f000 f820 	bl	8004164 <_init>
 8004124:	1b64      	subs	r4, r4, r5
 8004126:	10a4      	asrs	r4, r4, #2
 8004128:	2600      	movs	r6, #0
 800412a:	42a6      	cmp	r6, r4
 800412c:	d105      	bne.n	800413a <__libc_init_array+0x2e>
 800412e:	bd70      	pop	{r4, r5, r6, pc}
 8004130:	f855 3b04 	ldr.w	r3, [r5], #4
 8004134:	4798      	blx	r3
 8004136:	3601      	adds	r6, #1
 8004138:	e7ee      	b.n	8004118 <__libc_init_array+0xc>
 800413a:	f855 3b04 	ldr.w	r3, [r5], #4
 800413e:	4798      	blx	r3
 8004140:	3601      	adds	r6, #1
 8004142:	e7f2      	b.n	800412a <__libc_init_array+0x1e>
 8004144:	0800418c 	.word	0x0800418c
 8004148:	0800418c 	.word	0x0800418c
 800414c:	0800418c 	.word	0x0800418c
 8004150:	08004190 	.word	0x08004190

08004154 <memset>:
 8004154:	4402      	add	r2, r0
 8004156:	4603      	mov	r3, r0
 8004158:	4293      	cmp	r3, r2
 800415a:	d100      	bne.n	800415e <memset+0xa>
 800415c:	4770      	bx	lr
 800415e:	f803 1b01 	strb.w	r1, [r3], #1
 8004162:	e7f9      	b.n	8004158 <memset+0x4>

08004164 <_init>:
 8004164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004166:	bf00      	nop
 8004168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800416a:	bc08      	pop	{r3}
 800416c:	469e      	mov	lr, r3
 800416e:	4770      	bx	lr

08004170 <_fini>:
 8004170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004172:	bf00      	nop
 8004174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004176:	bc08      	pop	{r3}
 8004178:	469e      	mov	lr, r3
 800417a:	4770      	bx	lr
